std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, const std::vector<int> *__x)
{
  int *end;
  std::vector<int>::pointer begin;
  size_t v5;
  int *v6;
  int *v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begin = __x->__begin_;
  end = __x->__end_;
  v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    if ((char *)end - (char *)__x->__begin_ < 0) {
      abort();
    }
    v6 = (int *)operator new((char *)end - (char *)__x->__begin_);
    this->__begin_ = v6;
    this->__end_ = v6;
    v7 = (int *)((char *)v6 + v5);
    this->__end_cap_.__value_ = (int *)((char *)v6 + v5);
    memmove(v6, begin, v5);
    this->__end_ = v7;
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>>>>::reset[abi:nn180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16)) {
      esl::FontKey::~FontKey((esl::FontKey *)(v1 + 16));
    }
    operator delete((void *)v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,0>(esl::FontKey *this)
{
  *((void *)this + 16) = &unk_1EF5592F8;
  v2 = (const void *)*((void *)this + 17);
  if (v2) {
    CFRelease(v2);
  }
  esl::FontKey::~FontKey(this);
}

void VKAnimationCurveEaseOut_block_invoke_6()
{
  uint64_t v0 = [MEMORY[0x1E4F39C10] functionWithName:*MEMORY[0x1E4F3A498]];
  uint64_t v1 = (void *)_ZZUb3_E14timingFunction;
  _ZZUb3_E14timingFunction = v0;
}

void VKAnimationCurveEaseInOut_block_invoke_8()
{
  uint64_t v0 = [MEMORY[0x1E4F39C10] functionWithName:*MEMORY[0x1E4F3A490]];
  uint64_t v1 = (void *)_ZZUb5_E14timingFunction;
  _ZZUb5_E14timingFunction = v0;
}

md::ARContext *md::ARContext::ARContext(md::ARContext *this)
{
  *(unsigned char *)this = 0;
  *(void *)((char *)this + 4) = 0xBFC0000042F00000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  v2 = +[VKDebugSettings sharedSettings];
  char v3 = [v2 arOverrideDefaults];

  if ((v3 & 1) == 0)
  {
    int v4 = *((_DWORD *)this + 2);
    v5 = +[VKDebugSettings sharedSettings];
    LODWORD(v6) = v4;
    [v5 setArVirtualPlaneHeight:v6];

    int v7 = *((_DWORD *)this + 1);
    v8 = +[VKDebugSettings sharedSettings];
    LODWORD(v9) = v7;
    [v8 setArDefaultHeight:v9];
  }
  return this;
}

void sub_1A1C16118(_Unwind_Exception *a1)
{
  char v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t md::RegistryManager::addCollectorSubscription<md::MeshRenderableLogic,CollectorKey>(uint64_t *a1, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  v8 = (void *)a4[3];
  if (v8)
  {
    if (v8 == a4)
    {
      v52 = v51;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v51);
    }
    else
    {
      v52 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v52 = 0;
  }
  if (std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::hash<std::pair<unsigned long,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::hash<std::pair<unsigned long,unsigned int>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>>>::find<std::pair<unsigned long,unsigned int>>(a1, a2, a3))
  {
    goto LABEL_99;
  }
  uint64_t v9 = a3;
  unint64_t v10 = ((a2 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
      + a3
      - 0x61C8864680B583EBLL;
  unint64_t v11 = v10 ^ (a2 - 0x61C8864680B583EBLL);
  unint64_t v12 = a1[1];
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = v10 ^ (a2 - 0x61C8864680B583EBLL);
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    v14 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = v15[1];
            if (v19 == v11)
            {
              if (v15[2] == a2 && *((_DWORD *)v15 + 6) == a3) {
                goto LABEL_99;
              }
            }
            else if ((v19 & (v12 - 1)) != v4)
            {
              goto LABEL_34;
            }
            v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_34;
            }
          }
        }
        do
        {
          unint64_t v17 = v15[1];
          if (v17 == v11)
          {
            if (v15[2] == a2 && *((_DWORD *)v15 + 6) == a3) {
              goto LABEL_99;
            }
          }
          else
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
            if (v17 != v4) {
              break;
            }
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_34:
  v20 = operator new(0x40uLL);
  void *v20 = 0;
  v20[1] = v11;
  v20[2] = a2;
  v20[3] = v9;
  v21 = v20 + 4;
  uint64_t v22 = (uint64_t)v52;
  if (v52)
  {
    if (v52 == v51)
    {
      v20[7] = v21;
      (*(void (**)(void *, void *))(v51[0] + 24))(v51, v21);
      goto LABEL_39;
    }
    uint64_t v22 = (*(uint64_t (**)(void))(*v52 + 16))();
  }
  v20[7] = v22;
LABEL_39:
  v23 = a1 + 2;
  float v24 = (float)(unint64_t)(a1[3] + 1);
  float v25 = *((float *)a1 + 8);
  if (!v12 || (float)(v25 * (float)v12) < v24)
  {
    BOOL v26 = 1;
    if (v12 >= 3) {
      BOOL v26 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v12);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v12 = a1[1];
    if (prime <= v12)
    {
      if (prime >= v12) {
        goto LABEL_76;
      }
      unint64_t v40 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v12 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime >= v12)
      {
        unint64_t v12 = a1[1];
LABEL_76:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            uint64_t v4 = v11 % v12;
          }
          else {
            uint64_t v4 = v11;
          }
        }
        else
        {
          uint64_t v4 = (v12 - 1) & v11;
        }
        goto LABEL_89;
      }
      if (!prime)
      {
        v50 = (void *)*a1;
        *a1 = 0;
        if (v50) {
          operator delete(v50);
        }
        unint64_t v12 = 0;
        a1[1] = 0;
        goto LABEL_76;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v30 = operator new(8 * prime);
    v31 = (void *)*a1;
    *a1 = (uint64_t)v30;
    if (v31) {
      operator delete(v31);
    }
    uint64_t v32 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v32++) = 0;
    while (prime != v32);
    v33 = (void *)*v23;
    if (!*v23)
    {
LABEL_75:
      unint64_t v12 = prime;
      goto LABEL_76;
    }
    size_t v34 = v33[1];
    size_t v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v36 = v34 & v35;
      *(void *)(*a1 + 8 * v36) = v23;
      for (i = (void *)*v33; *v33; i = (void *)*v33)
      {
        size_t v38 = i[1] & v35;
        if (v38 == v36)
        {
          v33 = i;
        }
        else if (*(void *)(*a1 + 8 * v38))
        {
          void *v33 = *i;
          uint64_t v39 = 8 * v38;
          void *i = **(void **)(*a1 + v39);
          **(void **)(*a1 + v39) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v38) = v33;
          v33 = i;
          size_t v36 = v38;
        }
      }
      goto LABEL_75;
    }
    if (v34 >= prime) {
      v34 %= prime;
    }
    *(void *)(*a1 + 8 * v34) = v23;
    v43 = (void *)*v33;
    if (!*v33) {
      goto LABEL_75;
    }
    while (1)
    {
      size_t v45 = v43[1];
      if (v45 >= prime) {
        v45 %= prime;
      }
      if (v45 != v34)
      {
        if (!*(void *)(*a1 + 8 * v45))
        {
          *(void *)(*a1 + 8 * v45) = v33;
          goto LABEL_80;
        }
        void *v33 = *v43;
        uint64_t v44 = 8 * v45;
        void *v43 = **(void **)(*a1 + v44);
        **(void **)(*a1 + v44) = v43;
        v43 = v33;
      }
      size_t v45 = v34;
LABEL_80:
      v33 = v43;
      v43 = (void *)*v43;
      size_t v34 = v45;
      if (!v43) {
        goto LABEL_75;
      }
    }
  }
LABEL_89:
  uint64_t v46 = *a1;
  v47 = *(void **)(*a1 + 8 * v4);
  if (v47)
  {
    void *v20 = *v47;
LABEL_97:
    void *v47 = v20;
    goto LABEL_98;
  }
  void *v20 = *v23;
  void *v23 = v20;
  *(void *)(v46 + 8 * v4) = v23;
  if (*v20)
  {
    unint64_t v48 = *(void *)(*v20 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v48 >= v12) {
        v48 %= v12;
      }
    }
    else
    {
      v48 &= v12 - 1;
    }
    v47 = (void *)(*a1 + 8 * v48);
    goto LABEL_97;
  }
LABEL_98:
  ++a1[3];
LABEL_99:
  uint64_t result = (uint64_t)v52;
  if (v52 == v51) {
    return (*(uint64_t (**)(void *))(v51[0] + 32))(v51);
  }
  if (v52) {
    return (*(uint64_t (**)(void))(*v52 + 40))();
  }
  return result;
}

void sub_1A1C16778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = v2[7];
  if (v5 == v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  operator delete(v2);
  std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::hash<std::pair<unsigned long,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::hash<std::pair<unsigned long,unsigned int>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>>>::find<std::pair<unsigned long,unsigned int>>(void *a1, uint64_t a2, unsigned int a3)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = (((a2 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
      + a3
      - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = (((a2 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
        + a3
        - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
    if (v4 >= *(void *)&v3) {
      unint64_t v6 = v4 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v3 - 1);
  }
  int v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = *v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      uint64_t v9 = *(void *)&v3 - 1;
      while (1)
      {
        uint64_t v13 = result[1];
        if (v13 == v4)
        {
          if (result[2] == a2 && *((_DWORD *)result + 6) == a3) {
            return result;
          }
        }
        else if ((v13 & v9) != v6)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = result[1];
      if (v11 == v4)
      {
        if (result[2] == a2 && *((_DWORD *)result + 6) == a3) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v3) {
          v11 %= *(void *)&v3;
        }
        if (v11 != v6) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF574D30;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF574CE8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF574CA0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF574C58;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void md::AssetInjectionLogic::reset(md::AssetInjectionLogic *this)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  v2 = +[VKDebugSettings sharedSettings];
  char v3 = [v2 enableInjectedAssets];

  if ((v3 & 1) == 0) {
    return;
  }
  v118 = (uint64_t *)((char *)this + 120);
  if (*((void *)this + 18))
  {
    unint64_t v4 = (void *)*((void *)this + 17);
    while (v4)
    {
      uint8x8_t v5 = v4;
      unint64_t v4 = (void *)*v4;
      unint64_t v6 = (std::__shared_weak_count *)v5[3];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      operator delete(v5);
    }
    *((void *)this + 17) = 0;
    uint64_t v7 = *((void *)this + 16);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*v118 + 8 * i) = 0;
    }
    *((void *)this + 18) = 0;
  }
  if (*((void *)this + 23))
  {
    uint64_t v9 = (void *)*((void *)this + 22);
    if (v9)
    {
      do
      {
        unint64_t v11 = (void *)*v9;
        uint64_t v12 = v9[3];
        if (v12)
        {
          uint64_t v13 = v9[4];
          unint64_t v10 = (void *)v9[3];
          if (v13 != v12)
          {
            do
            {
              v14 = *(std::__shared_weak_count **)(v13 - 8);
              if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
              v13 -= 16;
            }
            while (v13 != v12);
            unint64_t v10 = (void *)v9[3];
          }
          v9[4] = v12;
          operator delete(v10);
        }
        operator delete(v9);
        uint64_t v9 = v11;
      }
      while (v11);
    }
    *((void *)this + 22) = 0;
    uint64_t v15 = *((void *)this + 21);
    if (v15)
    {
      for (uint64_t j = 0; j != v15; ++j)
        *(void *)(*((void *)this + 20) + 8 * j) = 0;
    }
    *((void *)this + 23) = 0;
  }
  id v17 = objc_alloc(MEMORY[0x1E4F1CB10]);
  v18 = GEOResourceDevResourcesPath();
  uint64_t v19 = (void *)[v17 initFileURLWithPath:v18 isDirectory:1];

  v20 = [v19 URLByAppendingPathComponent:@"InjectedAssets.json"];

  v21 = [MEMORY[0x1E4F28CB8] defaultManager];
  v113 = v20;
  uint64_t v22 = [v20 path];
  LODWORD(v20) = [v21 fileExistsAtPath:v22];

  if (!v20) {
    goto LABEL_34;
  }
  uint64_t v147 = 0;
  v110 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithContentsOfURL:v113];
  v111 = objc_msgSend(MEMORY[0x1E4F28D90], "JSONObjectWithData:options:error:");
  id v23 = 0;
  if (v23)
  {
    float v24 = v110;
    float v25 = v111;
    v110 = v23;
    v111 = v24;
    goto LABEL_33;
  }
  [v111 objectForKey:@"Assets"];
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v115 = [obj countByEnumeratingWithState:&v143 objects:v150 count:16];
  if (!v115) {
    goto LABEL_98;
  }
  uint64_t v114 = *(void *)v144;
  do
  {
    for (uint64_t k = 0; k != v115; ++k)
    {
      if (*(void *)v144 != v114) {
        objc_enumerationMutation(obj);
      }
      BOOL v26 = *(void **)(*((void *)&v143 + 1) + 8 * k);
      v141 = 0;
      uint64_t v142 = 0;
      v128 = v26;
      unint64_t v27 = [v26 objectForKey:@"ModelID"];
      unint64_t v28 = [MEMORY[0x1E4F28FE8] scannerWithString:v27];
      [v28 scanUnsignedLongLong:&v141];

      v29 = [v128 objectForKey:@"MaterialMapID"];
      v30 = [MEMORY[0x1E4F28FE8] scannerWithString:v29];
      [v30 scanUnsignedLongLong:&v142];

      v31 = [v128 objectForKey:@"MaterialID"];
      uint64_t v32 = v31;
      if (!v31)
      {
        v126 = 0;
        __src = 0;
        goto LABEL_82;
      }
      long long v139 = 0u;
      long long v140 = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      id v130 = v31;
      uint64_t v33 = [v130 countByEnumeratingWithState:&v137 objects:v149 count:16];
      if (!v33)
      {
        v126 = 0;
        __src = 0;
        goto LABEL_81;
      }
      v126 = 0;
      __src = 0;
      size_t v34 = 0;
      uint64_t v35 = *(void *)v138;
      size_t v36 = v32;
      do
      {
        uint64_t v37 = 0;
        do
        {
          if (*(void *)v138 != v35) {
            objc_enumerationMutation(v130);
          }
          size_t v38 = [MEMORY[0x1E4F28FE8] scannerWithString:*(void *)(*((void *)&v137 + 1) + 8 * v37)];
          uint64_t v136 = 0;
          [v38 scanUnsignedLongLong:&v136];
          if (v126 < v34)
          {
            *(void *)v126 = v136;
            v126 += 8;
            goto LABEL_71;
          }
          uint64_t v39 = (v126 - __src) >> 3;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61) {
            abort();
          }
          if ((v34 - __src) >> 2 > v40) {
            unint64_t v40 = (v34 - __src) >> 2;
          }
          if ((unint64_t)(v34 - __src) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v40;
          }
          if (v41)
          {
            if (v41 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v42 = operator new(8 * v41);
          }
          else
          {
            uint64_t v42 = 0;
          }
          v43 = &v42[8 * v39];
          *(void *)v43 = v136;
          uint64_t v44 = v43 + 8;
          size_t v45 = __src;
          if (v126 != __src)
          {
            unint64_t v46 = v126 - 8 - __src;
            if (v46 >= 0x168)
            {
              if (&v42[v126 - __src - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] <= &v42[v126 - __src - 8]
                && &v126[-(v46 & 0xFFFFFFFFFFFFFFF8) - 8] <= v126 - 8
                && (unint64_t)(__src - v42) >= 0x20)
              {
                uint64_t v49 = (v46 >> 3) + 1;
                v47 = &v126[-8 * (v49 & 0x3FFFFFFFFFFFFFFCLL)];
                v50 = &v42[8 * v39 - 16];
                v51 = v126 - 16;
                uint64_t v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v53 = *(_OWORD *)v51;
                  *(v50 - 1) = *((_OWORD *)v51 - 1);
                  _OWORD *v50 = v53;
                  v50 -= 2;
                  v51 -= 32;
                  v52 -= 4;
                }
                while (v52);
                v43 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
                size_t v45 = __src;
                if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_68;
                }
              }
              else
              {
                v47 = v126;
                size_t v45 = __src;
              }
            }
            else
            {
              v47 = v126;
              size_t v45 = __src;
            }
            do
            {
              uint64_t v48 = *((void *)v47 - 1);
              v47 -= 8;
              *((void *)v43 - 1) = v48;
              v43 -= 8;
            }
            while (v47 != v45);
          }
LABEL_68:
          size_t v34 = &v42[8 * v41];
          if (v45) {
            operator delete(v45);
          }
          v126 = v44;
          __src = v43;
          uint64_t v32 = v36;
LABEL_71:

          ++v37;
        }
        while (v37 != v33);
        uint64_t v54 = [v130 countByEnumeratingWithState:&v137 objects:v149 count:16];
        uint64_t v33 = v54;
      }
      while (v54);
LABEL_81:

LABEL_82:
      v55 = [v128 objectForKey:@"Transforms"];
      long long v134 = 0u;
      long long v135 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      id v117 = v55;
      uint64_t v56 = [v117 countByEnumeratingWithState:&v132 objects:v148 count:16];
      if (v56)
      {
        size_t __sz = v126 - __src;
        uint64_t v119 = *(void *)v133;
        do
        {
          uint64_t v120 = v56;
          for (uint64_t m = 0; m != v120; ++m)
          {
            if (*(void *)v133 != v119) {
              objc_enumerationMutation(v117);
            }
            v58 = *(void **)(*((void *)&v132 + 1) + 8 * m);
            v129 = [v58 objectForKey:@"TileKey"];
            v59 = [v129 objectAtIndexedSubscript:0];
            int v60 = [v59 intValue];

            v61 = [v129 objectAtIndexedSubscript:1];
            int v62 = [v61 intValue];

            v63 = [v129 objectAtIndexedSubscript:2];
            int v125 = [v63 intValue];

            v64 = [v58 objectForKey:@"Transform"];
            v65 = [v64 objectForKey:@"Scale"];
            v66 = [v65 objectAtIndexedSubscript:0];
            [v66 floatValue];
            float v68 = v67;

            v69 = [v65 objectAtIndexedSubscript:1];
            [v69 floatValue];
            float v71 = v70;

            v72 = [v65 objectAtIndexedSubscript:2];
            [v72 floatValue];
            float v74 = v73;

            v75 = [v64 objectForKey:@"Translation"];
            v76 = [v75 objectAtIndexedSubscript:0];
            [v76 floatValue];
            int v124 = v77;

            v78 = [v75 objectAtIndexedSubscript:1];
            [v78 floatValue];
            int v123 = v79;

            v80 = [v75 objectAtIndexedSubscript:2];
            [v80 floatValue];
            int v82 = v81;

            id v131 = [v64 objectForKey:@"Rotation"];
            v83 = [v131 objectAtIndexedSubscript:0];
            [v83 floatValue];
            float v85 = v84;
            v86 = [v131 objectAtIndexedSubscript:1];
            [v86 floatValue];
            float v88 = v87;
            v89 = [v131 objectAtIndexedSubscript:2];
            [v89 floatValue];
            float v91 = v90;
            v92 = [v131 objectAtIndexedSubscript:3];
            [v92 floatValue];
            float v94 = v93;

            v95 = (std::__shared_weak_count *)operator new(0x80uLL);
            v95->__shared_owners_ = 0;
            v95->__shared_weak_owners_ = 0;
            v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FB18;
            v95[1].__vftable = v141;
            *(_OWORD *)&v95[1].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v95[2].__shared_owners_ = 0u;
            v95[3].std::__shared_count = 0u;
            *(_OWORD *)&v95[3].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v95[4].__shared_owners_ = 0u;
            v95[5].__vftable = 0;
            v95[1].__shared_owners_ = v142;
            int v122 = v62;
            if (v126 == __src)
            {
              int v97 = v60;
              v96 = 0;
              uint64_t v98 = (v126 - __src) >> 3;
            }
            else
            {
              if ((__sz & 0x8000000000000000) != 0) {
                abort();
              }
              v96 = (char *)operator new(__sz);
              int v97 = v60;
              v95[4].__shared_owners_ = (uint64_t)v96;
              v95[4].__shared_weak_owners_ = (uint64_t)v96;
              uint64_t v98 = (v126 - __src) >> 3;
              v95[5].__vftable = (std::__shared_weak_count_vtbl *)&v96[8 * v98];
              memcpy(v96, __src, __sz);
            }
            float v99 = (float)(v88 + v88) * v88;
            float v100 = (float)(v91 + v91) * v91;
            float v101 = v88 * (float)(v85 + v85);
            float v102 = v94 * (float)(v91 + v91);
            float v103 = v101 - v102;
            float v104 = v91 * (float)(v85 + v85);
            float v105 = v94 * (float)(v88 + v88);
            float v106 = v102 + v101;
            float v107 = 1.0 - (float)((float)(v85 + v85) * v85);
            float v108 = v91 * (float)(v88 + v88);
            float v109 = v94 * (float)(v85 + v85);
            v95[4].__shared_weak_owners_ = (uint64_t)&v96[8 * v98];
            *(float *)&v95[1].__shared_weak_owners_ = v68 - (float)((float)(v99 + v100) * v68);
            *((float *)&v95[1].__shared_weak_owners_ + 1) = v106 * v68;
            *(float *)&v95[2].__vftable = (float)(v104 - v105) * v68;
            *((float *)&v95[2].__vftable + 1) = v103 * v71;
            *(float *)&v95[2].__shared_owners_ = (float)(v107 - v100) * v71;
            *((float *)&v95[2].__shared_owners_ + 1) = (float)(v109 + v108) * v71;
            *(float *)&v95[2].__shared_weak_owners_ = (float)(v105 + v104) * v74;
            *((float *)&v95[2].__shared_weak_owners_ + 1) = (float)(v108 - v109) * v74;
            *(float *)&v95[3].__vftable = (float)(v107 - v99) * v74;
            HIDWORD(v95[3].__vftable) = v124;
            LODWORD(v95[3].__shared_owners_) = v123;
            HIDWORD(v95[3].__shared_owners_) = v82;
            LODWORD(v95[3].__shared_weak_owners_) = v97;
            HIDWORD(v95[3].__shared_weak_owners_) = v122;
            LODWORD(v95[4].__vftable) = v125;
            std::__hash_table<std::shared_ptr<md::InjectedAsset>,std::hash<std::shared_ptr<md::InjectedAsset>>,std::equal_to<std::shared_ptr<md::InjectedAsset>>,std::allocator<std::shared_ptr<md::InjectedAsset>>>::__emplace_unique_key_args<std::shared_ptr<md::InjectedAsset>,std::shared_ptr<md::InjectedAsset> const&>(v118, (unint64_t)&v95[1], (uint64_t)&v95[1], (uint64_t)v95);
            if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          uint64_t v56 = [v117 countByEnumeratingWithState:&v132 objects:v148 count:16];
        }
        while (v56);
      }

      if (__src) {
        operator delete(__src);
      }
    }
    uint64_t v115 = [obj countByEnumeratingWithState:&v143 objects:v150 count:16];
  }
  while (v115);
LABEL_98:

  float v25 = obj;
LABEL_33:

LABEL_34:
}

void sub_1A1C17544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28)
{
  _Unwind_Resume(a1);
}

void md::AssetInjectionLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3, void *a4)
{
  uint64_t v7 = +[VKDebugSettings sharedSettings];
  char v8 = [v7 enableInjectedAssets];

  if ((v8 & 1) == 0) {
    return;
  }
  if (a4[3])
  {
    uint64_t v9 = (void *)a4[2];
    if (v9)
    {
      do
      {
        unint64_t v10 = (void *)*v9;
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    a4[2] = 0;
    uint64_t v11 = a4[1];
    if (v11)
    {
      for (uint64_t i = 0; i != v11; ++i)
        *(void *)(*a4 + 8 * i) = 0;
    }
    a4[3] = 0;
  }
  uint64_t v13 = a4 + 5;
  if (a4[8])
  {
    v14 = (void *)a4[7];
    if (v14)
    {
      do
      {
        uint64_t v15 = (void *)*v14;
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    a4[7] = 0;
    uint64_t v16 = a4[6];
    if (v16)
    {
      for (uint64_t j = 0; j != v16; ++j)
        *(void *)(*v13 + 8 * j) = 0;
    }
    a4[8] = 0;
  }
  v110 = (void *)a1;
  uint64_t v111 = (uint64_t)a4;
  uint64_t v18 = *(void *)(a1 + 200);
  uint64_t v19 = *(_WORD **)(v18 + 456);
  v20 = *(_WORD **)(v18 + 464);
  if (v19 == v20) {
    goto LABEL_101;
  }
  int8x8_t v21 = *(int8x8_t *)(a1 + 168);
  if (!*(void *)&v21) {
    goto LABEL_101;
  }
  uint64_t v22 = (uint64_t *)(a1 + 160);
  id v23 = (uint64_t *)(a1 + 120);
  while (2)
  {
    unint64_t v24 = (unsigned __int16)*v19;
    LOWORD(v116) = *v19;
    if (!*(void *)&v21) {
      goto LABEL_99;
    }
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(v21);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      unint64_t v26 = v24;
      if (*(void *)&v21 <= v24) {
        unint64_t v26 = v24 % *(void *)&v21;
      }
    }
    else
    {
      unint64_t v26 = (v21.i32[0] - 1) & v24;
    }
    unint64_t v27 = *(uint64_t ****)(*v22 + 8 * v26);
    if (!v27) {
      goto LABEL_99;
    }
    unint64_t v28 = *v27;
    if (!v28) {
      goto LABEL_99;
    }
    if (v25.u32[0] < 2uLL)
    {
      uint64_t v29 = *(void *)&v21 - 1;
      while (1)
      {
        v31 = v28[1];
        if (v31 == (uint64_t *)v24)
        {
          if (*((unsigned __int16 *)v28 + 8) == v24) {
            goto LABEL_40;
          }
        }
        else if (((unint64_t)v31 & v29) != v26)
        {
          goto LABEL_99;
        }
        unint64_t v28 = (uint64_t **)*v28;
        if (!v28) {
          goto LABEL_99;
        }
      }
    }
    while (1)
    {
      unint64_t v30 = (unint64_t)v28[1];
      if (v30 == v24) {
        break;
      }
      if (v30 >= *(void *)&v21) {
        v30 %= *(void *)&v21;
      }
      if (v30 != v26) {
        goto LABEL_99;
      }
LABEL_29:
      unint64_t v28 = (uint64_t **)*v28;
      if (!v28) {
        goto LABEL_99;
      }
    }
    if (*((unsigned __int16 *)v28 + 8) != v24) {
      goto LABEL_29;
    }
LABEL_40:
    uint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v22, v24, &v116);
    uint64_t v33 = (unint64_t *)v32[3];
    size_t v34 = (unint64_t *)v32[4];
    while (v33 != v34)
    {
      unint64_t v35 = *v33;
      uint64_t v36 = v33[1];
      v33 += 2;
      std::__hash_table<std::shared_ptr<md::InjectedAsset>,std::hash<std::shared_ptr<md::InjectedAsset>>,std::equal_to<std::shared_ptr<md::InjectedAsset>>,std::allocator<std::shared_ptr<md::InjectedAsset>>>::__emplace_unique_key_args<std::shared_ptr<md::InjectedAsset>,std::shared_ptr<md::InjectedAsset> const&>(v23, v35, v35, v36);
    }
    int8x8_t v37 = (int8x8_t)v110[21];
    if (v37)
    {
      uint8x8_t v38 = (uint8x8_t)vcnt_s8(v37);
      v38.i16[0] = vaddlv_u8(v38);
      if (v38.u32[0] > 1uLL)
      {
        unint64_t v39 = v24;
        if (*(void *)&v37 <= v24) {
          unint64_t v39 = v24 % *(void *)&v37;
        }
      }
      else
      {
        unint64_t v39 = (v37.i32[0] - 1) & v24;
      }
      uint64_t v40 = *v22;
      unint64_t v41 = *(unsigned __int16 ***)(*v22 + 8 * v39);
      if (v41)
      {
        uint64_t v42 = *v41;
        if (*v41)
        {
          uint64_t v43 = *(void *)&v37 - 1;
          if (v38.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v44 = *((void *)v42 + 1);
              if (v44 == v24)
              {
                if (v42[8] == v24) {
                  goto LABEL_63;
                }
              }
              else if ((v44 & v43) != v39)
              {
                goto LABEL_99;
              }
              uint64_t v42 = *(unsigned __int16 **)v42;
              if (!v42) {
                goto LABEL_99;
              }
            }
          }
          do
          {
            unint64_t v45 = *((void *)v42 + 1);
            if (v45 == v24)
            {
              if (v42[8] == v24)
              {
LABEL_63:
                if (v38.u32[0] > 1uLL)
                {
                  if (*(void *)&v37 <= v24) {
                    v24 %= *(void *)&v37;
                  }
                }
                else
                {
                  v24 &= v43;
                }
                unint64_t v46 = *(unsigned __int16 **)(v40 + 8 * v24);
                do
                {
                  v47 = v46;
                  unint64_t v46 = *(unsigned __int16 **)v46;
                }
                while (v46 != v42);
                if (v47 == v110 + 22) {
                  goto LABEL_80;
                }
                unint64_t v48 = v47[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v48 >= *(void *)&v37) {
                    v48 %= *(void *)&v37;
                  }
                }
                else
                {
                  v48 &= v43;
                }
                if (v48 != v24)
                {
LABEL_80:
                  if (!*(void *)v42) {
                    goto LABEL_81;
                  }
                  unint64_t v49 = *(void *)(*(void *)v42 + 8);
                  if (v38.u32[0] > 1uLL)
                  {
                    if (v49 >= *(void *)&v37) {
                      v49 %= *(void *)&v37;
                    }
                  }
                  else
                  {
                    v49 &= v43;
                  }
                  if (v49 != v24) {
LABEL_81:
                  }
                    *(void *)(v40 + 8 * v24) = 0;
                }
                v50 = *(unsigned __int16 **)v42;
                if (*(void *)v42)
                {
                  unint64_t v51 = *((void *)v50 + 1);
                  if (v38.u32[0] > 1uLL)
                  {
                    if (v51 >= *(void *)&v37) {
                      v51 %= *(void *)&v37;
                    }
                  }
                  else
                  {
                    v51 &= v43;
                  }
                  if (v51 != v24)
                  {
                    *(void *)(*v22 + 8 * v51) = v47;
                    v50 = *(unsigned __int16 **)v42;
                  }
                }
                void *v47 = v50;
                *(void *)uint64_t v42 = 0;
                --v110[23];
                uint64_t v52 = *((void *)v42 + 3);
                if (v52)
                {
                  uint64_t v53 = *((void *)v42 + 4);
                  uint64_t v54 = (void *)*((void *)v42 + 3);
                  if (v53 != v52)
                  {
                    do
                    {
                      v55 = *(std::__shared_weak_count **)(v53 - 8);
                      if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                        std::__shared_weak_count::__release_weak(v55);
                      }
                      v53 -= 16;
                    }
                    while (v53 != v52);
                    uint64_t v54 = (void *)*((void *)v42 + 3);
                  }
                  *((void *)v42 + 4) = v52;
                  operator delete(v54);
                }
                operator delete(v42);
                break;
              }
            }
            else
            {
              if (v45 >= *(void *)&v37) {
                v45 %= *(void *)&v37;
              }
              if (v45 != v39) {
                break;
              }
            }
            uint64_t v42 = *(unsigned __int16 **)v42;
          }
          while (v42);
        }
      }
    }
LABEL_99:
    if (++v19 != v20)
    {
      int8x8_t v21 = (int8x8_t)v110[21];
      continue;
    }
    break;
  }
LABEL_101:
  if (v110[18])
  {
    uint64_t v56 = **a3;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    v57 = *(_WORD **)(v56 + 48);
    v58 = *(_WORD **)(v56 + 56);
    v59 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    if (v57 != v58)
    {
      int v60 = *(_WORD **)(v56 + 48);
      while (*v60 != 33)
      {
        v60 += 16;
        if (v60 == v58) {
          goto LABEL_114;
        }
      }
      if (v60 == v58)
      {
        v59 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v57 != 33)
        {
          v57 += 16;
          if (v57 == v58)
          {
            v57 = *(_WORD **)(v56 + 56);
            break;
          }
        }
        v59 = (uint64_t *)(v57 + 4);
      }
    }
LABEL_114:
    v63 = (uint64_t *)*v59;
    int v62 = v59 + 1;
    v61 = v63;
    if (v63 != v62)
    {
      float v109 = v110 + 17;
      float v107 = (void *)(v111 + 16);
      float v108 = v62;
LABEL_117:
      uint64_t v64 = v61[4];
      v65 = (void *)*v109;
      if (!*v109) {
        goto LABEL_219;
      }
      while (2)
      {
        v66 = *(_DWORD **)(v64 + 32);
        float v67 = (_DWORD *)v65[2];
        if (v67[16] != *v66 || v67[17] != v66[1] || v67[18] != v66[2]) {
          goto LABEL_119;
        }
        uint64_t v68 = v110[25];
        uint64_t v69 = v61[4];
        int v112 = *(_DWORD *)(v69 + 8);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v113, v69 + 24);
        int v116 = v112;
        gdc::LayerDataKey::LayerDataKey((uint64_t)v117, (uint64_t)&v113);
        unsigned int v120 = 0;
        float v70 = *(uint64_t **)(v68 + 312);
        if (!v70)
        {
          int v77 = 0;
          uint64_t v78 = 0;
LABEL_150:
          ((void (*)(void *, int *))off_1EF58FA78[v78])(v122, &v116);
          goto LABEL_151;
        }
        unsigned int v71 = 0;
        v72 = (uint64_t *)(v68 + 312);
        float v73 = (uint64_t *)(v68 + 312);
        while (1)
        {
          uint64_t v74 = *((unsigned int *)v70 + 32);
          if (v74 == -1 || v74 < v71)
          {
            float v70 = (uint64_t *)v70[1];
            if (!v70) {
              goto LABEL_138;
            }
            goto LABEL_136;
          }
          if (v74 <= v71) {
            break;
          }
          do
          {
            float v73 = v70;
            float v70 = (uint64_t *)*v70;
            if (!v70) {
              goto LABEL_138;
            }
LABEL_136:
            unsigned int v71 = v120;
          }
          while (v120 == -1);
        }
        v122[0] = &v121;
        if (((unsigned int (*)(void *, uint64_t *, int *))off_1EF58FAA8[v74])(v122, v70 + 4, &v116)) {
          ++v70;
        }
        else {
          float v73 = v70;
        }
        float v70 = (uint64_t *)*v70;
        if (!v70)
        {
LABEL_138:
          if (v73 == v72) {
            goto LABEL_148;
          }
          unint64_t v76 = *((unsigned int *)v73 + 32);
          if (v76 == -1) {
            goto LABEL_140;
          }
          uint64_t v78 = v120;
          if (v120 == -1)
          {
            int v77 = 0;
            goto LABEL_151;
          }
          if (v120 < v76)
          {
            int v77 = 0;
            goto LABEL_150;
          }
          if (v120 <= v76
            && (v122[0] = &v121,
                (((uint64_t (*)(void *, int *, uint64_t *))off_1EF58FAA8[v120])(v122, &v116, v73 + 4) & 1) != 0))
          {
LABEL_148:
            int v77 = 0;
          }
          else
          {
LABEL_140:
            int v77 = (gdc::Registry *)v73[17];
          }
          uint64_t v78 = v120;
          if (v120 != -1) {
            goto LABEL_150;
          }
LABEL_151:
          unsigned int v120 = -1;
          if (v114 != v115) {
            free(v114);
          }
          if (v77)
          {
            uint64_t v79 = v65[2];
            v80 = *(unint64_t **)(v79 + 80);
            unint64_t v81 = *(void *)(v79 + 88);
            if (v80 != (unint64_t *)v81)
            {
              do
              {
                std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v13, *v80, *v80);
                ++v80;
              }
              while (v80 != (unint64_t *)v81);
              uint64_t v79 = v65[2];
            }
            unint64_t v82 = *(void *)v79;
            unint64_t v83 = *(void *)(v111 + 8);
            if (v83)
            {
              uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)v83);
              v84.i16[0] = vaddlv_u8(v84);
              if (v84.u32[0] > 1uLL)
              {
                unint64_t v81 = *(void *)v79;
                if (v82 >= v83) {
                  unint64_t v81 = v82 % v83;
                }
              }
              else
              {
                unint64_t v81 = (v83 - 1) & v82;
              }
              float v85 = *(void **)(*(void *)v111 + 8 * v81);
              if (v85)
              {
                v86 = (void *)*v85;
                if (v86)
                {
                  if (v84.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v88 = v86[1];
                      if (v88 == v82)
                      {
                        if (v86[2] == v82) {
                          goto LABEL_217;
                        }
                      }
                      else if ((v88 & (v83 - 1)) != v81)
                      {
                        goto LABEL_178;
                      }
                      v86 = (void *)*v86;
                      if (!v86) {
                        goto LABEL_178;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v87 = v86[1];
                    if (v87 == v82)
                    {
                      if (v86[2] == v82) {
                        goto LABEL_217;
                      }
                    }
                    else
                    {
                      if (v87 >= v83) {
                        v87 %= v83;
                      }
                      if (v87 != v81) {
                        break;
                      }
                    }
                    v86 = (void *)*v86;
                  }
                  while (v86);
                }
              }
            }
LABEL_178:
            v89 = operator new(0x18uLL);
            void *v89 = 0;
            v89[1] = v82;
            v89[2] = *(void *)v79;
            float v90 = (float)(unint64_t)(*(void *)(v111 + 24) + 1);
            float v91 = *(float *)(v111 + 32);
            if (!v83 || (float)(v91 * (float)v83) < v90)
            {
              BOOL v92 = v83 < 3 || (v83 & (v83 - 1)) != 0;
              unint64_t v93 = v92 | (2 * v83);
              unint64_t v94 = vcvtps_u32_f32(v90 / v91);
              if (v93 <= v94) {
                size_t prime = v94;
              }
              else {
                size_t prime = v93;
              }
              if (prime == 1)
              {
                size_t prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                size_t prime = std::__next_prime(prime);
                unint64_t v83 = *(void *)(v111 + 8);
              }
              if (prime > v83) {
                goto LABEL_191;
              }
              if (prime < v83)
              {
                unint64_t v96 = vcvtps_u32_f32((float)*(unint64_t *)(v111 + 24) / *(float *)(v111 + 32));
                if (v83 < 3
                  || (uint8x8_t v97 = (uint8x8_t)vcnt_s8((int8x8_t)v83), v97.i16[0] = vaddlv_u8(v97), v97.u32[0] > 1uLL))
                {
                  unint64_t v96 = std::__next_prime(v96);
                }
                else
                {
                  uint64_t v98 = 1 << -(char)__clz(v96 - 1);
                  if (v96 >= 2) {
                    unint64_t v96 = v98;
                  }
                }
                if (prime <= v96) {
                  size_t prime = v96;
                }
                if (prime < v83) {
LABEL_191:
                }
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v111, prime);
              }
              unint64_t v83 = *(void *)(v111 + 8);
              if ((v83 & (v83 - 1)) != 0)
              {
                if (v82 >= v83) {
                  unint64_t v81 = v82 % v83;
                }
                else {
                  unint64_t v81 = v82;
                }
              }
              else
              {
                unint64_t v81 = (v83 - 1) & v82;
              }
            }
            uint64_t v99 = *(void *)v111;
            float v100 = *(void **)(*(void *)v111 + 8 * v81);
            if (v100)
            {
              void *v89 = *v100;
              goto LABEL_215;
            }
            void *v89 = *v107;
            *float v107 = v89;
            *(void *)(v99 + 8 * v81) = v107;
            if (*v89)
            {
              unint64_t v101 = *(void *)(*v89 + 8);
              if ((v83 & (v83 - 1)) != 0)
              {
                if (v101 >= v83) {
                  v101 %= v83;
                }
              }
              else
              {
                v101 &= v83 - 1;
              }
              float v100 = (void *)(*(void *)v111 + 8 * v101);
LABEL_215:
              *float v100 = v89;
            }
            ++*(void *)(v111 + 24);
            uint64_t v79 = v65[2];
LABEL_217:
            LOWORD(v116) = 0;
            v117[0] = vextq_s8(*(int8x16_t *)v79, *(int8x16_t *)v79, 8uLL);
            int8x16_t v102 = *(int8x16_t *)(v79 + 16);
            int8x16_t v103 = *(int8x16_t *)(v79 + 48);
            v117[2] = *(int8x16_t *)(v79 + 32);
            v117[3] = v103;
            v117[1] = v102;
            *(void *)((char *)v119 + 5) = 0;
            uint64_t v118 = 0;
            v119[0] = 0;
            gdc::Registry::create(v77);
          }
LABEL_119:
          v65 = (void *)*v65;
          if (v65) {
            continue;
          }
          int v62 = v108;
LABEL_219:
          float v104 = (uint64_t *)v61[1];
          if (v104)
          {
            do
            {
              float v105 = v104;
              float v104 = (uint64_t *)*v104;
            }
            while (v104);
          }
          else
          {
            do
            {
              float v105 = (uint64_t *)v61[2];
              BOOL v106 = *v105 == (void)v61;
              v61 = v105;
            }
            while (!v106);
          }
          v61 = v105;
          if (v105 == v62) {
            return;
          }
          goto LABEL_117;
        }
        goto LABEL_136;
      }
    }
  }
}

void sub_1A1C18710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46)
{
  if (a46 != -1) {
    ((void (*)(uint64_t, char *))off_1EF58FA78[a46])(v46 - 89, &a34);
  }
  a46 = -1;
  if (a24 != a26) {
    free(a24);
  }
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a19);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::synchronizedUpdate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(uint64_t **)(result + 8);
  for (uint64_t i = *(uint64_t **)(result + 16);
        v4 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2, a3, a4))
  {
    uint64_t v9 = *v4++;
  }
  return result;
}

void md::MapStandardLabeler::synchronizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  md::StandardLabeler::synchronizedUpdate(a1, a2, a3, a4);
  if (a4)
  {
    uint64_t v6 = *(void *)(a1 + 432);
    std::mutex::lock((std::mutex *)v6);
    uint64_t v7 = *(uint64_t **)(v6 + 64);
    char v8 = *(uint64_t **)(v6 + 72);
    if (v7 != v8)
    {
      while (1)
      {
        uint64_t v9 = v7[1];
        if (!v9 || *(void *)(v9 + 8) == -1) {
          break;
        }
        v7 += 2;
        if (v7 == v8) {
          goto LABEL_24;
        }
      }
      if (v7 != v8)
      {
        unint64_t v10 = v7 + 2;
        if (v7 + 2 != v8)
        {
          do
          {
            uint64_t v11 = v10[1];
            if (v11 && *(void *)(v11 + 8) != -1)
            {
              uint64_t v12 = *v10;
              *unint64_t v10 = 0;
              v10[1] = 0;
              uint64_t v13 = (std::__shared_weak_count *)v7[1];
              *uint64_t v7 = v12;
              v7[1] = v11;
              if (v13) {
                std::__shared_weak_count::__release_weak(v13);
              }
              v7 += 2;
            }
            v10 += 2;
          }
          while (v10 != v8);
          char v8 = *(uint64_t **)(v6 + 72);
        }
      }
      if (v7 != v8)
      {
        while (v8 != v7)
        {
          v14 = (std::__shared_weak_count *)*(v8 - 1);
          if (v14) {
            std::__shared_weak_count::__release_weak(v14);
          }
          v8 -= 2;
        }
        *(void *)(v6 + 72) = v7;
      }
    }
LABEL_24:
    std::mutex::unlock((std::mutex *)v6);
  }
  uint64_t v15 = *(void *)(a1 + 48);
  int v16 = *(_DWORD *)(v15 + 748);
  if (v16 != *(_DWORD *)(a1 + 448))
  {
    *(_DWORD *)(a1 + 448) = v16;
    long long v178 = 0uLL;
    uint64_t v179 = 0;
    {
      operator new();
    }
    uint64_t v180 = mdm::Allocator::instance(void)::alloc;
    uint64_t v17 = *(void *)(v15 + 584) - *(void *)(v15 + 576);
    if (v17)
    {
      if ((unint64_t)v17 >= 0x5555555555555551) {
        abort();
      }
      uint64_t v18 = v17 >> 4;
      unint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 48 * (v17 >> 4), 8);
      unint64_t v20 = v19 + 48 * v18;
      *(void *)&long long v178 = v19;
      *((void *)&v178 + 1) = v19;
      uint64_t v179 = v20;
      int8x8_t v21 = *(uint64_t **)(v15 + 576);
      uint64_t v22 = *(uint64_t **)(v15 + 584);
      if (v21 != v22)
      {
        while (1)
        {
          uint64_t v23 = *v21;
          *(unsigned char *)(v23 + 1286) = 0;
          if (!*(unsigned char *)(v23 + 1264)) {
            goto LABEL_44;
          }
          uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(v23 + 8) + 72))(*(void *)(v23 + 8));
          if (!v24) {
            goto LABEL_44;
          }
          uint64_t v25 = *(void *)(v24 + 32);
          if (!v25) {
            goto LABEL_44;
          }
          unint64_t v26 = *(unsigned __int8 *)(v25 + 33);
          if (!*(unsigned char *)(v25 + 33)) {
            goto LABEL_44;
          }
          unint64_t v27 = *(_DWORD **)v25;
          if (**(_DWORD **)v25 != 65571) {
            break;
          }
LABEL_39:
          char v28 = 1;
LABEL_45:
          uint64_t v32 = *v21;
          uint64_t v33 = *(void *)(*v21 + 272);
          if (!v33) {
            goto LABEL_33;
          }
          size_t v34 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v33 + 248))(v33);
          if (v34[2] < *v34 || v34[3] < v34[1]) {
            goto LABEL_33;
          }
          uint64_t v35 = *(void *)(v32 + 128);
          long long v168 = *(_OWORD *)(v32 + 136);
          uint64_t v36 = (float *)(*(uint64_t (**)(void))(**(void **)(v32 + 272) + 248))(*(void *)(v32 + 272));
          float v37 = v36[2];
          if (v37 >= *v36 && (float v38 = v36[3], v39 = v36[1], v38 >= v39))
          {
            float v44 = *(float *)(v32 + 664);
            float v43 = *v36 - v44;
            float v45 = *(float *)(v32 + 668);
            float v40 = v39 - v45;
            float v42 = v37 - v44;
            float v41 = v38 - v45;
            if (v19 >= v20)
            {
LABEL_54:
              uint64_t v46 = v178;
              unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v178) >> 4);
              unint64_t v48 = v47 + 1;
              if (v47 + 1 > 0x555555555555555) {
                abort();
              }
              if (0x5555555555555556 * ((uint64_t)(v20 - v178) >> 4) > v48) {
                unint64_t v48 = 0x5555555555555556 * ((uint64_t)(v20 - v178) >> 4);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v178) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                uint64_t v49 = 0x555555555555555;
              }
              else {
                uint64_t v49 = v48;
              }
              if (v49)
              {
                uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v180 + 16))(v180, 48 * v49, 8);
                uint64_t v51 = v50 + 16 * ((uint64_t)(v19 - v178) >> 4);
                uint64_t v49 = v50 + 48 * v49;
                if (v50)
                {
                  *(void *)uint64_t v51 = v35;
                  *(_OWORD *)(v51 + 8) = v168;
                  unint64_t v52 = v50 + 48 * v47;
                  *(float *)(v52 + 24) = v43;
                  *(float *)(v52 + 28) = v40;
                  *(float *)(v52 + 32) = v42;
                  *(float *)(v52 + 36) = v41;
                  *(unsigned char *)(v52 + 40) = v28;
                }
                if (v19 != v46)
                {
LABEL_64:
                  uint64_t v53 = 0;
                  do
                  {
                    uint64_t v54 = v51 + v53;
                    *(void *)(v54 - 48) = *(void *)(v19 + v53 - 48);
                    *(_OWORD *)(v54 - 40) = *(_OWORD *)(v19 + v53 - 40);
                    long long v55 = *(_OWORD *)(v19 + v53 - 24);
                    *(unsigned char *)(v54 - 8) = *(unsigned char *)(v19 + v53 - 8);
                    *(_OWORD *)(v54 - 24) = v55;
                    v53 -= 48;
                  }
                  while (v19 + v53 != v46);
                  uint64_t v56 = v51 + v53;
                  goto LABEL_69;
                }
              }
              else
              {
                uint64_t v51 = 16 * ((uint64_t)(v19 - v178) >> 4);
                if (v19 != (void)v178) {
                  goto LABEL_64;
                }
              }
              uint64_t v46 = v19;
              uint64_t v56 = v51;
LABEL_69:
              unint64_t v19 = v51 + 48;
              *(void *)&long long v178 = v56;
              uint64_t v179 = v49;
              if (v46) {
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v180 + 40))(v180, v46, v20 - v46);
              }
              unint64_t v20 = v49;
              goto LABEL_32;
            }
          }
          else
          {
            float v40 = 3.4028e38;
            float v41 = -3.4028e38;
            float v42 = -3.4028e38;
            float v43 = 3.4028e38;
            if (v19 >= v20) {
              goto LABEL_54;
            }
          }
          if (v19)
          {
            *(void *)unint64_t v19 = v35;
            *(_OWORD *)(v19 + 8) = v168;
            *(float *)(v19 + 24) = v43;
            *(float *)(v19 + 28) = v40;
            *(float *)(v19 + 32) = v42;
            *(float *)(v19 + 36) = v41;
            *(unsigned char *)(v19 + 40) = v28;
          }
          v19 += 48;
LABEL_32:
          *((void *)&v178 + 1) = v19;
LABEL_33:
          v21 += 2;
          if (v21 == v22) {
            goto LABEL_72;
          }
        }
        unint64_t v29 = 0;
        unint64_t v30 = v27 + 2;
        while (v26 - 1 != v29)
        {
          int v31 = *v30;
          v30 += 2;
          ++v29;
          if (v31 == 65571)
          {
            if (v29 < v26) {
              goto LABEL_39;
            }
            break;
          }
        }
LABEL_44:
        char v28 = 0;
        goto LABEL_45;
      }
    }
LABEL_72:
    uint64_t v57 = *(void *)(*(void *)(*(void *)(a1 + 24) + 168) + 32);
    (*(void (**)(uint64_t, long long *))(*(void *)v57 + 160))(v57, &v178);
    if ((void)v178)
    {
      *((void *)&v178 + 1) = v178;
      (*(void (**)(uint64_t, void, void))(*(void *)v180 + 40))(v180, v178, v179 - v178);
    }
  }
  unsigned __int8 v58 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 24) + 3391));
  if (v58)
  {
    uint64_t v59 = *(void *)(a1 + 400);
    uint64_t v60 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v59 + 433))
    {
      *(unsigned char *)(v59 + 433) = 0;
      uint64_t v61 = v59 + 136;
      std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(v59 + 128, *(void **)(v59 + 136));
      uint64_t v62 = *(void *)(v59 + 168);
      *(void *)(v59 + 128) = *(void *)(v59 + 160);
      *(void *)(v59 + 136) = v62;
      uint64_t v63 = *(void *)(v59 + 184);
      *(void *)(v59 + 152) = v63;
      if (v63)
      {
        *(void *)(v62 + 16) = v61;
        *(void *)(v59 + 160) = v59 + 168;
        *(void *)(v59 + 168) = 0;
        *(void *)(v59 + 184) = 0;
      }
      else
      {
        *(void *)(v59 + 128) = v61;
      }
      *(unsigned char *)(v60 + 3045) = 1;
      *(unsigned char *)(v60 + 3047) = 1;
      unsigned __int8 v64 = atomic_load((unsigned __int8 *)(v60 + 3058));
      if (v64)
      {
        uint64_t v65 = *(void *)(v60 + 136);
        if (v65)
        {
          uint64_t v66 = *(void *)(v65 + 56);
          if (v66)
          {
            *(void *)&long long v178 = v60;
            LOBYTE(v171[0]) = 9;
            (*(void (**)(uint64_t, long long *, _OWORD *))(*(void *)v66 + 48))(v66, &v178, v171);
          }
        }
      }
    }
    if (!*(unsigned char *)(v59 + 432) && *(void *)(v59 + 32))
    {
      uint8x8_t v84 = *(uint64_t **)(v59 + 40);
      float v85 = *(uint64_t **)(v59 + 48);
      if (v84 != v85)
      {
        do
        {
          md::LabelExternalObjectsModerator::runIconCreateRequest(*(void (****)(long long *__return_ptr))(v59 + 32), v84);
          v84 += 2;
        }
        while (v84 != v85);
        uint64_t v86 = *(void *)(v59 + 40);
        for (uint64_t i = *(void *)(v59 + 48); i != v86; i -= 16)
        {
          uint64_t v88 = *(std::__shared_weak_count **)(i - 8);
          if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        *(void *)(v59 + 48) = v86;
        unsigned __int8 v89 = atomic_load((unsigned __int8 *)(v60 + 3058));
        if (v89)
        {
          uint64_t v90 = *(void *)(v60 + 136);
          if (v90)
          {
            uint64_t v91 = *(void *)(v90 + 56);
            if (v91)
            {
              *(void *)&long long v178 = v60;
              LOBYTE(v171[0]) = 9;
              (*(void (**)(uint64_t, long long *, _OWORD *))(*(void *)v91 + 48))(v91, &v178, v171);
            }
          }
        }
      }
      BOOL v92 = *(void **)(v59 + 96);
      if (v92)
      {
        do
        {
          while (1)
          {
            unint64_t v93 = (unsigned char *)v92[2];
            if (v93[67]) {
              break;
            }
            if (v93[68]) {
              (*(void (**)(unsigned char *))(*(void *)v93 + 24))(v93);
            }
            BOOL v92 = (void *)*v92;
            if (!v92) {
              goto LABEL_84;
            }
          }
          int8x8_t v94 = *(int8x8_t *)(v59 + 80);
          unint64_t v95 = v92[1];
          uint8x8_t v96 = (uint8x8_t)vcnt_s8(v94);
          v96.i16[0] = vaddlv_u8(v96);
          if (v96.u32[0] > 1uLL)
          {
            if (v95 >= *(void *)&v94) {
              v95 %= *(void *)&v94;
            }
          }
          else
          {
            v95 &= *(void *)&v94 - 1;
          }
          uint8x8_t v97 = (void *)*v92;
          uint64_t v98 = *(void *)(v59 + 72);
          uint64_t v99 = *(void **)(v98 + 8 * v95);
          do
          {
            float v100 = v99;
            uint64_t v99 = (void *)*v99;
          }
          while (v99 != v92);
          if (v100 == (void *)(v59 + 96)) {
            goto LABEL_247;
          }
          unint64_t v101 = v100[1];
          if (v96.u32[0] > 1uLL)
          {
            if (v101 >= *(void *)&v94) {
              v101 %= *(void *)&v94;
            }
          }
          else
          {
            v101 &= *(void *)&v94 - 1;
          }
          int8x16_t v102 = (void *)*v92;
          if (v101 != v95)
          {
LABEL_247:
            if (v97)
            {
              unint64_t v103 = v97[1];
              if (v96.u32[0] > 1uLL)
              {
                if (v103 >= *(void *)&v94) {
                  v103 %= *(void *)&v94;
                }
              }
              else
              {
                v103 &= *(void *)&v94 - 1;
              }
              int8x16_t v102 = (void *)*v92;
              if (v103 == v95)
              {
LABEL_147:
                unint64_t v104 = v102[1];
                if (v96.u32[0] > 1uLL)
                {
                  if (v104 >= *(void *)&v94) {
                    v104 %= *(void *)&v94;
                  }
                }
                else
                {
                  v104 &= *(void *)&v94 - 1;
                }
                if (v104 != v95)
                {
                  *(void *)(*(void *)(v59 + 72) + 8 * v104) = v100;
                  int8x16_t v102 = (void *)*v92;
                }
                goto LABEL_153;
              }
            }
            *(void *)(v98 + 8 * v95) = 0;
            int8x16_t v102 = (void *)*v92;
          }
          if (v102) {
            goto LABEL_147;
          }
LABEL_153:
          *float v100 = v102;
          void *v92 = 0;
          --*(void *)(v59 + 112);
          float v105 = (std::__shared_weak_count *)v92[3];
          if (v105 && !atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
          (*(void (**)(void, void *, uint64_t))(**(void **)(v59 + 104) + 40))(*(void *)(v59 + 104), v92, 32);
          BOOL v92 = v97;
        }
        while (v97);
      }
    }
LABEL_84:
    uint64_t v67 = *(void *)(a1 + 392);
    if (*(unsigned char *)(v67 + 112))
    {
      uint64_t v68 = *(void **)(v67 + 328);
      if (v68)
      {
        *(unsigned char *)(v67 + 112) = 0;
        if (*(void *)(v67 + 48))
        {
          [*(id *)(v67 + 48) resetNotificationsForObserverType:0];
          uint64_t v68 = *(void **)(v67 + 328);
        }
        md::LabelTransitRoute::updateTransitNodesRouteState(v68);
      }
    }
    uint64_t v69 = *(void *)(v67 + 328);
    if (v69)
    {
      float v70 = *(void **)(v69 + 312);
      unsigned int v71 = *(void **)(v69 + 320);
      if (v70 != v71)
      {
        uint64_t v72 = *(void *)(v67 + 16);
        do
        {
          if (*(unsigned char *)(*v70 + 697) != 2)
          {
            id v73 = *(id *)(*v70 + 680);
            uint64_t v74 = v73;
            if (v73 && [v73 needsTextUpdate])
            {
              [v74 setNeedsTextUpdate:0];
              v75 = (int64x2_t *)(*(uint64_t (**)(void))(*(void *)*v70 + 72))();
              md::WaypointStore::updateExternalFeatureText(v75, (md::LabelExternalPointFeature *)v74, v76);
              (*(void (**)(void, void, void))(*(void *)*v70 + 32))(*v70, 0, 0);
              (*(void (**)(void, uint64_t))(*(void *)*v70 + 536))(*v70, v72);
            }
          }
          v70 += 2;
        }
        while (v70 != v71);
      }
    }
    uint64_t v77 = *(void *)(a1 + 48);
    if (*(unsigned char *)(v77 + 759) && *(unsigned char *)(v77 + 760))
    {
      uint64_t v78 = *(void *)(a1 + 392);
      if (*(unsigned char *)(v78 + 114))
      {
        *(unsigned char *)(v78 + 114) = 0;
        if (*(void *)(v78 + 48))
        {
          *(_WORD *)(*(void *)(v78 + 16) + 3328) = 257;
          *(unsigned char *)(v78 + 115) = 1;
          [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
          *(double *)(v78 + 120) = v79 + 0.200000003;
          uint64_t v80 = *(void *)(v78 + 16);
          *(unsigned char *)(v80 + 3045) = 1;
          *(unsigned char *)(v80 + 3047) = 1;
          unsigned __int8 v81 = atomic_load((unsigned __int8 *)(v80 + 3058));
          if (v81)
          {
            uint64_t v82 = *(void *)(v80 + 136);
            if (v82)
            {
              uint64_t v83 = *(void *)(v82 + 56);
              if (v83)
              {
                *(void *)&long long v178 = v80;
                LOBYTE(v171[0]) = 9;
                (*(void (**)(uint64_t, long long *, _OWORD *))(*(void *)v83 + 48))(v83, &v178, v171);
              }
            }
          }
        }
      }
      else if (*(unsigned char *)(v78 + 115))
      {
        [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
        if (v106 >= *(double *)(v78 + 120))
        {
          *(unsigned char *)(v78 + 115) = 0;
          if (*(void *)(v78 + 48)) {
            *(_WORD *)(*(void *)(v78 + 16) + 3328) = 0;
          }
        }
      }
    }
  }
  uint64_t v107 = *(void *)(a1 + 24);
  float v108 = *(float *)(v107 + 1680);
  if ((*(uint64_t (**)(void))(**(void **)(*(void *)(v107 + 168) + 32) + 8))(*(void *)(*(void *)(v107 + 168) + 32)))
  {
    int v109 = 1;
    if (v108 != 0.0) {
      goto LABEL_162;
    }
  }
  else
  {
    uint64_t v113 = *(void *)(*(void *)(*(void *)(a1 + 24) + 168) + 32);
    int v109 = (*(uint64_t (**)(uint64_t))(*(void *)v113 + 16))(v113);
    if (v108 != 0.0)
    {
LABEL_162:
      long long v178 = xmmword_1A28FCDD0;
      uint64_t v179 = 0;
      __int16 v181 = 0;
      uint64_t v110 = *(void *)(a1 + 24);
      float64x2_t v166 = *(float64x2_t *)(v110 + 1688);
      double v169 = *(double *)(v110 + 1704);
      float64x2_t v176 = v166;
      double v177 = v169;
      uint64_t v111 = *(void *)(v110 + 432);
      LOBYTE(v171[0]) = 0;
      BYTE12(v171[0]) = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v111, (uint64_t)&v176, (uint64_t)v171, 1u, 0, (uint64_t)&v178, 1.0);
      if ((_BYTE)v181)
      {
        uint64_t v112 = *(void *)(a1 + 440);
        *(void *)(a1 + 440) = 0;
        if (v112) {
          (*(void (**)(uint64_t))(*(void *)v112 + 8))(v112);
        }
      }
      else
      {
        _D1 = *(void *)(v111 + 920);
        _V5.D[1] = v166.f64[1];
        __asm { FMLA            D2, D1, V5.D[1] }
        float32x2_t v123 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(v111 + 960), *(float64x2_t *)(v111 + 864), v166.f64[0]), *(float64x2_t *)(v111 + 896), v166, 1), *(float64x2_t *)(v111 + 928), v169), 1.0 / (_D2 + *(double *)(v111 + 952) * v169)));
        float v124 = (float)(v108 * 0.5) * (float)(*(float *)(v110 + 176) * 0.5);
        int v125 = *(float32x2_t **)(a1 + 440);
        if (!v125) {
          operator new();
        }
        v125[1].f32[0] = v124;
        v125[1].f32[1] = v124;
        v125[2] = v123;
        v125[3] = (float32x2_t)1065353216;
        {
          operator new();
        }
        uint64_t v126 = mdm::Allocator::instance(void)::alloc;
        int v127 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 1712);
        v128 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
        v129 = v128;
        id v130 = (char *)(v128 + 1);
        if (v127 == 1)
        {
          if (v128)
          {
            void *v128 = 0xE00000005;
            id v131 = (char *)v128;
          }
          else
          {
            id v131 = 0;
          }
        }
        else
        {
          if (v128) {
            void *v128 = 0xD00000005;
          }
          long long v132 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v126 + 16))(v126, 16, 4);
          id v131 = v132;
          id v130 = v132 + 16;
          if (v132) {
            *((void *)v132 + 1) = 0x100010003;
          }
          *(void *)long long v132 = *v129;
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v126 + 40))(v126, v129, 8);
        }
        id v133 = objc_alloc_init(MEMORY[0x1E4F645A0]);
        int64_t v170 = v130 - v131;
        [v133 replaceAttributes:v131 count:(unint64_t)(v130 - v131) >> 3];
        uint64_t v134 = *(void *)(a1 + 24);
        if (v133)
        {
          [v133 featureStyleAttributesPtr];
          long long v135 = v173;
        }
        else
        {
          long long v135 = 0uLL;
        }
        v171[0] = v135;
        long long v173 = 0uLL;
        uint64_t v136 = (std::__shared_weak_count *)*((void *)&v135 + 1);
        md::LabelManager::styleQueryForFeatureAttributes((uint64_t)&v174, *(void *)(v134 + 336), (uint64_t *)v171);
        if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
        long long v137 = (std::__shared_weak_count *)*((void *)&v173 + 1);
        if (*((void *)&v173 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v173 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
        uint64_t v138 = v174;
        long long v139 = v175;
        if (v175) {
          atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v171, v138, (uint64_t)v139);
        if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
        if (v172)
        {
          LOBYTE(v173) = 1;
          char v140 = gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<int>(*(void *)(*(void *)&v171[0] + 24), 0xEDu, 1u, (BOOL *)&v173);
          if ((_BYTE)v173)
          {
            char v141 = v140;
          }
          else
          {
            LOBYTE(v173) = 1;
            char v142 = gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<int>(*(void *)(*(void *)&v171[0] + 24), 0x84u, 1u, (BOOL *)&v173);
            if ((_BYTE)v173) {
              char v141 = v142;
            }
            else {
              char v141 = 0;
            }
          }
          unsigned __int8 v182 = 1;
          uint64_t v143 = *(void *)(*(void *)&v171[0] + 24);
          if ((int)*(float *)&v178 >= 0x17) {
            unsigned int v144 = 23;
          }
          else {
            unsigned int v144 = (int)*(float *)&v178;
          }
          unsigned int v145 = *(unsigned __int8 *)(v143 + 12);
          if (v145 == 2)
          {
            LOBYTE(v173) = 1;
            v183[0] = 1;
            unsigned int v146 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v143, 0xECu, v144, 0, &v173);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v143, 0xECu, v144, 1u, v183);
            int v147 = (v173 | v183[0]) != 0;
          }
          else
          {
            unsigned int v146 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)&v171[0] + 24), 0xECu, v144, v145, &v182);
            int v147 = v182;
          }
          char v165 = v141;
          int v167 = v147;
          unsigned __int8 v182 = 1;
          uint64_t v148 = *(void *)(*(void *)&v171[0] + 24);
          int v149 = *(unsigned __int8 *)(v148 + 12);
          if (v149 == 2)
          {
            LOBYTE(v173) = 1;
            v183[0] = 1;
            unsigned int v150 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v148, 0x1D5u, v144, 0, &v173);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v148, 0x1D5u, v144, 1, v183);
            int v151 = (v173 | v183[0]) != 0;
          }
          else
          {
            unsigned int v150 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>(*(unsigned __int16 **)(*(void *)&v171[0] + 24), 0x1D5u, v144, v149, &v182);
            int v151 = v182;
          }
          if (v150 >= 0x1F) {
            char v152 = 31;
          }
          else {
            char v152 = v150;
          }
          if (v151) {
            char v153 = v152;
          }
          else {
            char v153 = 0;
          }
          unsigned __int8 v182 = 1;
          uint64_t v154 = *(void *)(*(void *)&v171[0] + 24);
          unsigned int v155 = *(unsigned __int8 *)(v154 + 12);
          if (v155 == 2)
          {
            LOBYTE(v173) = 1;
            v183[0] = 1;
            int v156 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v154, 0x1D6u, v144, 0, &v173);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v154, 0x1D6u, v144, 1u, v183);
            int v157 = (v173 | v183[0]) != 0;
          }
          else
          {
            int v156 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)&v171[0] + 24), 0x1D6u, v144, v155, &v182);
            int v157 = v182;
          }
          uint64_t v158 = v146;
          if (v157) {
            int v159 = v156;
          }
          else {
            int v159 = v109 - 1;
          }
          v160 = *(_DWORD **)(a1 + 440);
          char v161 = v165 + 3;
          if ((v165 + 3) >= 0xBu)
          {
            int v162 = v165;
            if (v165 >= 7) {
              int v162 = 7;
            }
            if (v162 <= -3) {
              LOBYTE(v162) = -3;
            }
            char v161 = v162 + 3;
          }
          int v163 = 1 << v161;
          v160[8] = v163;
          if (!v167) {
            uint64_t v158 = 0;
          }
          v160[9] = LabelCollisionOverlayGroupToLayersCollided[v158] | v163;
          v160[11] = 1 << v153;
          v160[12] = v159;
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v171);
        v164 = v175;
        if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }

        if (v131) {
          (*(void (**)(uint64_t, char *, int64_t))(*(void *)v126 + 40))(v126, v131, v170);
        }
      }
      return;
    }
  }
  uint64_t v114 = *(void *)(a1 + 440);
  *(void *)(a1 + 440) = 0;
  if (v114)
  {
    uint64_t v115 = *(void (**)(void))(*(void *)v114 + 8);
    v115();
  }
}

void sub_1A1C19CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a15);
  char v28 = a24;
  if (a24 && !atomic_fetch_add(&a24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }

  if (v25) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 40))(v24, v25, a9 - v25);
  }
  _Unwind_Resume(a1);
}

BOOL non-virtual thunk to'md::MapNavLabeler::isEtaActive(md::MapNavLabeler *this)
{
  return *((void *)this + 12) && *(void *)(*((void *)this + 85) + 24) != 0;
}

void md::MapNavLabeler::synchronizedUpdate(uint64_t a1, const md::LayoutContext *a2, uint64_t a3, int a4)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 352))(a1) & 1) == 0
    && (!*(void *)(a1 + 104) || !*(void *)(*(void *)(a1 + 688) + 24))
    && (unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 24) + 336) + 163) << 16 != 393216
    && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 376))(a1))
  {
    return;
  }
  if (*(unsigned char *)(a1 + 827))
  {
    int v7 = -1;
  }
  else
  {
    char v8 = *(int **)(*(void *)(*(void *)(*(void *)(a1 + 24) + 336) + 200) + 40);
    if (!v8) {
      operator new();
    }
    int v7 = *v8;
  }
  uint64_t v9 = *(void **)(a1 + 72);
  uint64_t v10 = v9[4];
  int v11 = *(unsigned __int8 *)(v10 + 84);
  if (*(unsigned char *)(v10 + 84)) {
    int v11 = *(_DWORD *)(v10 + 80);
  }
  if (v11 != v7)
  {
    *(_DWORD *)(v10 + 80) = v7;
    *(unsigned char *)(v10 + 84) = 1;
    uint64_t v12 = *v9;
    unsigned __int8 v13 = atomic_load((unsigned __int8 *)(*v9 + 3058));
    if (v13)
    {
      uint64_t v14 = *(void *)(v12 + 136);
      if (v14)
      {
        uint64_t v15 = *(void *)(v14 + 56);
        if (v15)
        {
          *(void *)&long long v126 = v12;
          LOBYTE(v121) = 9;
          (*(void (**)(uint64_t, long long *, long long *))(*(void *)v15 + 48))(v15, &v126, &v121);
        }
      }
    }
  }
  int v16 = *(unsigned int **)(*(void *)(*(void *)(*(void *)(a1 + 24) + 336) + 200) + 48);
  if (!v16) {
    operator new();
  }
  [*(id *)(a1 + 56) setMaxVisibleRoadsigns:*v16];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 352))(a1))
  {
    uint64_t v17 = (void *)*((void *)a2 + 1);
    int8x8_t v18 = (int8x8_t)v17[1];
    if (v18)
    {
      uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        unint64_t v20 = 0x99BED48DEFBBD82BLL;
        if (*(void *)&v18 <= 0x99BED48DEFBBD82BLL) {
          unint64_t v20 = 0x99BED48DEFBBD82BLL % *(void *)&v18;
        }
      }
      else
      {
        unint64_t v20 = (*(void *)&v18 - 1) & 0x99BED48DEFBBD82BLL;
      }
      int8x8_t v21 = *(void **)(*v17 + 8 * v20);
      if (v21)
      {
        uint64_t v22 = (void *)*v21;
        if (v22)
        {
          if (v19.u32[0] < 2uLL)
          {
            uint64_t v23 = *(void *)&v18 - 1;
            while (1)
            {
              uint64_t v25 = v22[1];
              if (v25 == 0x99BED48DEFBBD82BLL)
              {
                if (v22[2] == 0x99BED48DEFBBD82BLL) {
                  goto LABEL_42;
                }
              }
              else if ((v25 & v23) != v20)
              {
                goto LABEL_48;
              }
              uint64_t v22 = (void *)*v22;
              if (!v22) {
                goto LABEL_48;
              }
            }
          }
          do
          {
            unint64_t v24 = v22[1];
            if (v24 == 0x99BED48DEFBBD82BLL)
            {
              if (v22[2] == 0x99BED48DEFBBD82BLL)
              {
LABEL_42:
                uint64_t v26 = v22[5];
                if (*(void *)(v26 + 8) == 0x99BED48DEFBBD82BLL)
                {
                  BOOL v27 = !*(void *)(v26 + 32) || a4 == 0;
                  if (!v27) {
                    objc_msgSend(*(id *)(a1 + 56), "grabTilesFromScene:");
                  }
                }
                break;
              }
            }
            else
            {
              if (v24 >= *(void *)&v18) {
                v24 %= *(void *)&v18;
              }
              if (v24 != v20) {
                break;
              }
            }
            uint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
      }
    }
  }
LABEL_48:
  uint64_t v28 = *(void *)(a1 + 688);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 432) + 12)) {
    int v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 352))(a1);
  }
  else {
    int v29 = 0;
  }
  if (*(unsigned __int8 *)(v28 + 704) != v29) {
    *(unsigned char *)(v28 + 704) = v29;
  }
  uint64_t v30 = *(void *)(a1 + 688);
  float v31 = *(float *)(*(void *)(*(void *)(a1 + 24) + 432) + 32);
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy(v30 + 416, *(void *)(v30 + 424));
  *(void *)(v30 + 440) = 0;
  *(void *)(v30 + 416) = v30 + 424;
  *(void *)(v30 + 424) = 0;
  if (*(void *)(v30 + 104))
  {
    id v32 = *(id *)(v30 + 24);
    uint64_t v33 = [v32 routeInfo];
    md::LabelNavEtaLabeler::extractPolylineOverlayInfo((md::LabelNavEtaLabeler *)v30, v33, v31);

    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    size_t v34 = [*(id *)(v30 + 24) alternateRoutes];
    uint64_t v35 = [v34 countByEnumeratingWithState:&v121 objects:&v126 count:16];
    if (v35)
    {
      uint64_t v36 = *(void *)v122;
      do
      {
        for (uint64_t i = 0; i != v35; ++i)
        {
          if (*(void *)v122 != v36) {
            objc_enumerationMutation(v34);
          }
          md::LabelNavEtaLabeler::extractPolylineOverlayInfo((md::LabelNavEtaLabeler *)v30, *(VKRouteInfo **)(*((void *)&v121 + 1) + 8 * i), v31);
        }
        uint64_t v35 = [v34 countByEnumeratingWithState:&v121 objects:&v126 count:16];
      }
      while (v35);
    }
  }
  uint64_t v38 = *(void *)(a1 + 688);
  int v39 = *(unsigned __int8 *)(v38 + 253);
  *(unsigned char *)(a1 + 681) = v39;
  if (v39) {
    *(unsigned char *)(v38 + 253) = 0;
  }
  if (*(unsigned char *)(a1 + 826))
  {
    *(unsigned char *)(v38 + 707) = 1;
    *(unsigned char *)(a1 + 826) = 0;
  }
  uint64_t v40 = a1 + 136;
  md::LabelNavLayoutContext::grabStateFromContext((md::LabelNavLayoutContext *)(a1 + 136), *(md::LabelManager **)(a1 + 24), *(const md::LabelLayoutContext **)(*(void *)(a1 + 24) + 432), a2);
  if (*(unsigned char *)(a1 + 768))
  {
    *(unsigned char *)(a1 + 768) = 0;
    float v41 = *(uint64_t **)(a1 + 280);
    uint64_t v42 = *(void *)(a1 + 744);
    uint64_t v43 = *(void *)(a1 + 736);
    if (v42 != v43)
    {
      do
      {
        float v44 = *(std::__shared_weak_count **)(v42 - 32);
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        v42 -= 40;
      }
      while (v42 != v43);
      uint64_t v42 = *(void *)(a1 + 736);
    }
    *(void *)(a1 + 744) = v43;
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 712) - *(void *)(a1 + 704)) >> 4);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 752) - v42) >> 3) >= v45) {
      goto LABEL_87;
    }
    if (v45 > 0x666666666666666) {
      abort();
    }
    unint64_t v47 = 0xAAAAAAAAAAAAAAB8 * ((uint64_t)(*(void *)(a1 + 712) - *(void *)(a1 + 704)) >> 4);
    uint64_t v48 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 760) + 16))(*(void *)(a1 + 760), v47, 8);
    uint64_t v46 = v43 - v42;
    uint64_t v49 = v48 + v46;
    unint64_t v50 = v48 + v47;
    uint64_t v51 = *(void *)(a1 + 744);
    uint64_t v52 = *(void *)(a1 + 736);
    if (v51 == v52)
    {
      *(void *)(a1 + 736) = v49;
      *(void *)(a1 + 744) = v49;
      uint64_t v57 = *(void *)(a1 + 752);
      *(void *)(a1 + 752) = v50;
      if (!v51) {
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v53 = v48 + v46;
      do
      {
        long long v54 = *(_OWORD *)(v51 - 40);
        v51 -= 40;
        *(_OWORD *)(v53 - 40) = v54;
        v53 -= 40;
        *(void *)uint64_t v51 = 0;
        *(void *)(v51 + 8) = 0;
        long long v55 = *(_OWORD *)(v51 + 16);
        *(unsigned char *)(v53 + 32) = *(unsigned char *)(v51 + 32);
        *(_OWORD *)(v53 + 16) = v55;
      }
      while (v51 != v52);
      uint64_t v51 = *(void *)(a1 + 736);
      uint64_t v56 = *(void *)(a1 + 744);
      *(void *)(a1 + 736) = v53;
      *(void *)(a1 + 744) = v49;
      uint64_t v57 = *(void *)(a1 + 752);
      for (*(void *)(a1 + 752) = v50; v56 != v51; v56 -= 40)
      {
        unsigned __int8 v58 = *(std::__shared_weak_count **)(v56 - 32);
        if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (!v51) {
        goto LABEL_87;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 760) + 40))(*(void *)(a1 + 760), v51, v57 - v51);
LABEL_87:
    uint64_t v59 = *(long long **)(a1 + 704);
    if (v59 != *(long long **)(a1 + 712))
    {
      if (*(unsigned char *)(a1 + 353)) {
        uint64_t v60 = *((void *)v59 + 2);
      }
      else {
        uint64_t v60 = 0;
      }
      uint64_t v61 = *v41;
      long long v126 = *v59;
      uint64_t v127 = v60;
      md::AnchorManager::newAnchorAtCoordinate(&v121, v61, (uint64_t)&v126, 0);
    }
    uint64_t v40 = a1 + 136;
  }
  uint64_t v62 = *(void *)(a1 + 24);
  uint64_t v63 = *(void *)(v62 + 432);
  *(void *)&long long v126 = &unk_1EF5303F0;
  *((void *)&v126 + 1) = v62;
  uint64_t v127 = a1;
  v128 = (float64x2_t *)v63;
  uint64_t v129 = v40;
  uint64_t v64 = *(void *)(a1 + 776);
  *(void *)(a1 + 784) = v64;
  unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 712) - *(void *)(a1 + 704)) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 792) - v64) >> 3) < v65)
  {
    if (v65 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    uint64_t v66 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 800) + 16))(*(void *)(a1 + 800), 8 * ((uint64_t)(*(void *)(a1 + 712) - *(void *)(a1 + 704)) >> 4), 4);
    uint64_t v67 = *(void *)(a1 + 784);
    uint64_t v68 = *(void *)(a1 + 776);
    uint64_t v69 = v66;
    if (v67 != v68)
    {
      do
      {
        long long v70 = *(_OWORD *)(v67 - 24);
        *(void *)(v69 - 8) = *(void *)(v67 - 8);
        *(_OWORD *)(v69 - 24) = v70;
        v69 -= 24;
        v67 -= 24;
      }
      while (v67 != v68);
      uint64_t v67 = *(void *)(a1 + 776);
    }
    *(void *)(a1 + 776) = v69;
    *(void *)(a1 + 784) = v66;
    uint64_t v71 = *(void *)(a1 + 792);
    *(void *)(a1 + 792) = v66 + 24 * v65;
    if (v67) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 800) + 40))(*(void *)(a1 + 800), v67, v71 - v67);
    }
  }
  uint64_t v72 = *(float **)(a1 + 736);
  for (uint64_t j = *(uint64_t **)(a1 + 744); v72 != (float *)j; v72 += 10)
  {
    uint64_t v75 = *(void *)v72;
    if (!*(void *)(*(void *)v72 + 8))
    {
      uint64_t v76 = **(void **)(v129 + 144);
      (*(void (**)(long long *__return_ptr))(*(void *)v75 + 64))(&v121);
      md::AnchorManager::newAnchorAtCoordinate(&v125, v76, (uint64_t)&v121, 0);
    }
    double v118 = (*(double (**)(uint64_t))(*(void *)v75 + 48))(v75);
    double v119 = v77;
    *(double *)&long long v121 = v118;
    *((double *)&v121 + 1) = v77;
    double v120 = v78;
    *(double *)&long long v122 = v78;
    double v79 = v128;
    if (!md::LabelLayoutContext::isDistanceClipped((uint64_t)v128, (uint64_t)&v121))
    {
      float v80 = v72[6];
      float v81 = v72[4];
      if (v80 >= v81 && (float v82 = v72[7], v83 = v72[5], v82 >= v83))
      {
        float32x2_t v88 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v79[60], v79[54], v118), v79[56], v119), v79[58], v120), 1.0 / (v79[61].f64[1] + v79[55].f64[1] * v118 + v79[57].f64[1] * v119 + v79[59].f64[1] * v120)));
        float v87 = v88.f32[0] + v81;
        float v84 = v88.f32[1] + v83;
        float v86 = v88.f32[0] + v80;
        float v85 = v88.f32[1] + v82;
      }
      else
      {
        float v84 = 3.4028e38;
        float v85 = -3.4028e38;
        float v86 = -3.4028e38;
        float v87 = 3.4028e38;
      }
      char v89 = *((unsigned char *)v72 + 32);
      unint64_t v90 = *(void *)(a1 + 784);
      unint64_t v91 = *(void *)(a1 + 792);
      if (v90 >= v91)
      {
        uint64_t v92 = *(void *)(a1 + 776);
        unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - v92) >> 3);
        unint64_t v94 = v93 + 1;
        if (v93 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - v92) >> 3);
        if (2 * v95 > v94) {
          unint64_t v94 = 2 * v95;
        }
        if (v95 >= 0x555555555555555) {
          uint64_t v96 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          uint64_t v96 = v94;
        }
        if (v96)
        {
          uint64_t v97 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 800) + 16))(*(void *)(a1 + 800), 24 * v96, 4);
          unint64_t v98 = v97 + 24 * v93;
          uint64_t v99 = v97 + 24 * v96;
          if (v97)
          {
            *(float *)unint64_t v98 = v87;
            *(float *)(v98 + 4) = v84;
            *(float *)(v98 + 8) = v86;
            *(float *)(v98 + 12) = v85;
            unint64_t v100 = v97 + 24 * v93;
            *(_DWORD *)(v100 + 16) = 1065353216;
            *(unsigned char *)(v100 + 20) = v89;
          }
        }
        else
        {
          uint64_t v99 = 0;
          unint64_t v98 = 24 * v93;
        }
        uint64_t v101 = *(void *)(a1 + 784);
        uint64_t v102 = *(void *)(a1 + 776);
        unint64_t v103 = v98;
        if (v101 != v102)
        {
          do
          {
            long long v104 = *(_OWORD *)(v101 - 24);
            *(void *)(v103 - 8) = *(void *)(v101 - 8);
            *(_OWORD *)(v103 - 24) = v104;
            v103 -= 24;
            v101 -= 24;
          }
          while (v101 != v102);
          uint64_t v101 = *(void *)(a1 + 776);
        }
        uint64_t v74 = (float *)(v98 + 24);
        *(void *)(a1 + 776) = v103;
        *(void *)(a1 + 784) = v98 + 24;
        uint64_t v105 = *(void *)(a1 + 792);
        *(void *)(a1 + 792) = v99;
        if (v101) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 800) + 40))(*(void *)(a1 + 800), v101, v105 - v101);
        }
      }
      else
      {
        if (v90)
        {
          *(float *)unint64_t v90 = v87;
          *(float *)(v90 + 4) = v84;
          *(float *)(v90 + 8) = v86;
          *(float *)(v90 + 12) = v85;
          *(_DWORD *)(v90 + 16) = 1065353216;
          *(unsigned char *)(v90 + 20) = v89;
        }
        uint64_t v74 = (float *)(v90 + 24);
      }
      *(void *)(a1 + 784) = v74;
    }
  }
  if (*(void *)(a1 + 104))
  {
    double v106 = *(void **)(a1 + 688);
    uint64_t v107 = (void *)v106[3];
    if (v107)
    {
      float v108 = [v107 routeInfo];
      if (v108)
      {
        int v109 = (void *)v106[32];
        uint64_t v110 = v106 + 33;
        if (v109 != v106 + 33)
        {
          do
          {
            uint64_t v111 = v109[5];
            uint64_t v112 = v109[6];
            while (v111 != v112)
            {
              id v113 = *(id *)(v111 + 56);
              int v114 = [v113 hasLabel];

              if (v114)
              {
                id v115 = *(id *)(v111 + 56);
                [v115 updateAnchorWithContext:&v126];
              }
              v111 += 72;
            }
            int v116 = (void *)v109[1];
            if (v116)
            {
              do
              {
                id v117 = v116;
                int v116 = (void *)*v116;
              }
              while (v116);
            }
            else
            {
              do
              {
                id v117 = (void *)v109[2];
                BOOL v27 = *v117 == (void)v109;
                int v109 = v117;
              }
              while (!v27);
            }
            int v109 = v117;
          }
          while (v117 != v110);
        }
      }
    }
  }
}

void sub_1A1C1B1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a18)
  {
    if (!atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<int>(uint64_t a1, unsigned int a2, unsigned int a3, BOOL *a4)
{
  char v8 = *(float **)a1;
  if (!*(void *)a1
    || (float v9 = *v8, LODWORD(v8) = *v8 == 1.0, !*(unsigned char *)(a1 + 10))
    || (v9 != 0.0 ? (BOOL v10 = v9 == 1.0) : (BOOL v10 = 1), v10))
  {
    unsigned int v11 = *(unsigned __int8 *)(a1 + v8 + 11);
    float v9 = 0.0;
    if (v11 != 2) {
      return *(unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(a1, a2, a3, v11, a4);
    }
  }
  unsigned __int8 v16 = 1;
  unsigned __int8 v15 = 1;
  unsigned int v12 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(a1, a2, a3, 0, &v16);
  unsigned int v13 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(a1, a2, a3, 1u, &v15);
  if (a4) {
    *a4 = (v16 | v15) != 0;
  }
  if (v9 >= 1.0) {
    return v13;
  }
  else {
    return v12;
  }
}

void md::LabelManager::styleQueryForFeatureAttributes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = (uint64_t *)(a2 + 184);
  md::createFeatureAttributeSet((gss::Allocator *)v5, a3);
  md::LabelStyleCache::styleQueryForFeatureAttributes(a1, v4, v5, 0);
  if (v5[0])
  {
    v5[1] = v5[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v5[0], v5[2] - v5[0]);
  }
}

void sub_1A1C1B4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, a9, a11 - a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3gss10StyleSheetINS_10PropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return __copy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(v4, v5);
  }
}

uint64_t __copy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(void *)(a1 + 56) = a1 + 32;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 56) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 56) = result;
    }
  }
  else
  {
    *(void *)(a1 + 56) = 0;
  }
  return result;
}

char *std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x48uLL);
  *(void *)v2 = &unk_1EF57CD38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 17) = *(_OWORD *)(a1 + 17);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (v3 == a1 + 40)
    {
      *((void *)v2 + 8) = v2 + 40;
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      return v2;
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  *((void *)v2 + 8) = v3;
  return v2;
}

void sub_1A1C1B6E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gss::StyleSheet<gss::PropertyID>::decodeStylesheetData(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, char a5, char a6, uint64_t *a7, uint64_t *a8, float a9, char a10, void *a11)
{
  v56[19] = *MEMORY[0x1E4F143B8];
  unint64_t v20 = (void *)a11[3];
  if (v20)
  {
    if (v20 == a11)
    {
      uint64_t v42 = v41;
      (*(void (**)(void))(*a11 + 24))();
    }
    else
    {
      uint64_t v42 = (void *)(*(uint64_t (**)(void))(*v20 + 16))(a11[3]);
    }
  }
  else
  {
    uint64_t v42 = 0;
  }
  int8x8_t v21 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v21 || (uint64_t v22 = *(void *)a1, (v23 = std::__shared_weak_count::lock(v21)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
  }
  unint64_t v24 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(unsigned char *)(a1 + 80) = a6;
  uint64_t v25 = (void **)(a1 + 32);
  if ((void **)(a1 + 32) != a4)
  {
    char v26 = *((unsigned char *)a4 + 23);
    if (*(char *)(a1 + 55) < 0)
    {
      if (v26 >= 0) {
        uint64_t v28 = a4;
      }
      else {
        uint64_t v28 = *a4;
      }
      if (v26 >= 0) {
        size_t v29 = *((unsigned __int8 *)a4 + 23);
      }
      else {
        size_t v29 = (size_t)a4[1];
      }
      std::string::__assign_no_alias<false>(v25, v28, v29);
    }
    else if ((*((unsigned char *)a4 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v25, *a4, (size_t)a4[1]);
    }
    else
    {
      long long v27 = *(_OWORD *)a4;
      *(void *)(a1 + 48) = a4[2];
      *(_OWORD *)uint64_t v25 = v27;
    }
  }
  *(float *)(a1 + 56) = a9;
  *(unsigned char *)(a1 + 60) = a5;
  uint64_t v31 = *a7;
  uint64_t v30 = a7[1];
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  id v32 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v31;
  *(void *)(a1 + 96) = v30;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v34 = *a8;
  uint64_t v33 = a8[1];
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v33;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (!a2) {
      goto LABEL_39;
    }
  }
  else if (!a2)
  {
    goto LABEL_39;
  }
  if (a3)
  {
    *(void *)uint64_t v43 = a1;
    *(void *)&v43[8] = a2;
    *(void *)&v43[16] = a3;
    v43[24] = a10;
    uint64_t v36 = (uint64_t)v42;
    if (v42)
    {
      if (v42 == v41)
      {
        unint64_t v45 = v44;
        (*(void (**)(void *, void *))(v41[0] + 24))(v41, v44);
        goto LABEL_43;
      }
      uint64_t v36 = (*(uint64_t (**)(void))(*v42 + 16))();
    }
    unint64_t v45 = (void *)v36;
LABEL_43:
    unint64_t v47 = 0;
    float v37 = (char *)operator new(0x48uLL);
    uint64_t v38 = v37;
    *(void *)float v37 = &unk_1EF57CD38;
    *(_OWORD *)(v37 + 8) = *(_OWORD *)v43;
    *(_OWORD *)(v37 + 17) = *(_OWORD *)&v43[9];
    if (v45)
    {
      if (v45 == v44)
      {
        *((void *)v37 + 8) = v37 + 40;
        (*(void (**)(void *))(v44[0] + 24))(v44);
      }
      else
      {
        *((void *)v37 + 8) = v45;
        unint64_t v45 = 0;
      }
    }
    else
    {
      *((void *)v37 + 8) = 0;
    }
    unint64_t v47 = v38;
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken != -1) {
      dispatch_once(&gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_146);
    }
    int v39 = (id)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
    blocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v49 = 3321888768;
    unint64_t v50 = ___ZN3gss10StyleSheetINS_10PropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke;
    uint64_t v51 = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
    uint64_t v53 = (void *)(*(uint64_t (**)(void *))(*v38 + 16))(v38);
    dispatch_async(v39, &block);

    if (v53 == v52)
    {
      (*(void (**)(void *))(v52[0] + 32))(v52);
    }
    else if (v53)
    {
      (*(void (**)(void))(*v53 + 40))();
    }
    if (v47 == v46)
    {
      (*(void (**)(void *))(v46[0] + 32))(v46);
    }
    else if (v47)
    {
      (*(void (**)(void))(*v47 + 40))();
    }
    if (v45 == v44)
    {
      (*(void (**)(void *))(v44[0] + 32))(v44);
    }
    else if (v45)
    {
      (*(void (**)(void))(*v45 + 40))();
    }
    goto LABEL_62;
  }
LABEL_39:
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&block);
  gss::StyleSheet<gss::PropertyID>::didFinishDecodingGlobalProperties(a1, 0);
  gss::StyleSheet<gss::PropertyID>::didFinishDecodingEverything(a1, 0, (uint64_t)v41, (uint64_t)&block);
  blocuint64_t k = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&block + *(void *)(block - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v49 = MEMORY[0x1E4FBA470] + 16;
  if (v55 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](v56);
LABEL_62:
  uint64_t result = (uint64_t)v42;
  if (v42 == v41) {
    return (*(uint64_t (**)(void *))(v41[0] + 32))(v41);
  }
  if (v42) {
    return (*(uint64_t (**)(void))(*v42 + 40))();
  }
  return result;
}

void sub_1A1C1BE14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);

  std::function<void ()(void)>::~function(va2);
  gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::~function((uint64_t)va1);
  std::function<void ()(BOOL)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v2 = (char *)operator new(0x40uLL);
  *(void *)v2 = &unk_1EF574E50;
  std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1A1C1BEB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF559D98;
  a1->__r_.__value_.__l.__size_ = 0;
  id v4 = *(id *)(a2 + 8);
  size = (void *)a1->__r_.__value_.__l.__size_;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)v4;

  uint64_t v6 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1[2].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(a2 + 48);
  return a1;
}

void sub_1A1C1BF64(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v2;

  _Unwind_Resume(a1);
}

void std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 40;
  uint64_t v3 = (char *)*((void *)__p + 8);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 8) = &unk_1EF559D98;

  operator delete((void *)a1);
}

uint64_t gss::StyleSheet<gss::ScenePropertyID>::decodeStylesheetData(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, char a5, char a6, uint64_t *a7, uint64_t *a8, float a9, char a10, void *a11)
{
  v56[19] = *MEMORY[0x1E4F143B8];
  unint64_t v20 = (void *)a11[3];
  if (v20)
  {
    if (v20 == a11)
    {
      uint64_t v42 = v41;
      (*(void (**)(void))(*a11 + 24))();
    }
    else
    {
      uint64_t v42 = (void *)(*(uint64_t (**)(void))(*v20 + 16))(a11[3]);
    }
  }
  else
  {
    uint64_t v42 = 0;
  }
  int8x8_t v21 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v21 || (uint64_t v22 = *(void *)a1, (v23 = std::__shared_weak_count::lock(v21)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
  }
  unint64_t v24 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(unsigned char *)(a1 + 80) = a6;
  uint64_t v25 = (void **)(a1 + 32);
  if ((void **)(a1 + 32) != a4)
  {
    char v26 = *((unsigned char *)a4 + 23);
    if (*(char *)(a1 + 55) < 0)
    {
      if (v26 >= 0) {
        uint64_t v28 = a4;
      }
      else {
        uint64_t v28 = *a4;
      }
      if (v26 >= 0) {
        size_t v29 = *((unsigned __int8 *)a4 + 23);
      }
      else {
        size_t v29 = (size_t)a4[1];
      }
      std::string::__assign_no_alias<false>(v25, v28, v29);
    }
    else if ((*((unsigned char *)a4 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v25, *a4, (size_t)a4[1]);
    }
    else
    {
      long long v27 = *(_OWORD *)a4;
      *(void *)(a1 + 48) = a4[2];
      *(_OWORD *)uint64_t v25 = v27;
    }
  }
  *(float *)(a1 + 56) = a9;
  *(unsigned char *)(a1 + 60) = a5;
  uint64_t v31 = *a7;
  uint64_t v30 = a7[1];
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  id v32 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v31;
  *(void *)(a1 + 96) = v30;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v34 = *a8;
  uint64_t v33 = a8[1];
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v33;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (!a2) {
      goto LABEL_39;
    }
  }
  else if (!a2)
  {
    goto LABEL_39;
  }
  if (a3)
  {
    *(void *)uint64_t v43 = a1;
    *(void *)&v43[8] = a2;
    *(void *)&v43[16] = a3;
    v43[24] = a10;
    uint64_t v36 = (uint64_t)v42;
    if (v42)
    {
      if (v42 == v41)
      {
        unint64_t v45 = v44;
        (*(void (**)(void *, void *))(v41[0] + 24))(v41, v44);
        goto LABEL_43;
      }
      uint64_t v36 = (*(uint64_t (**)(void))(*v42 + 16))();
    }
    unint64_t v45 = (void *)v36;
LABEL_43:
    unint64_t v47 = 0;
    float v37 = (char *)operator new(0x48uLL);
    uint64_t v38 = v37;
    *(void *)float v37 = &unk_1EF57CD80;
    *(_OWORD *)(v37 + 8) = *(_OWORD *)v43;
    *(_OWORD *)(v37 + 17) = *(_OWORD *)&v43[9];
    if (v45)
    {
      if (v45 == v44)
      {
        *((void *)v37 + 8) = v37 + 40;
        (*(void (**)(void *))(v44[0] + 24))(v44);
      }
      else
      {
        *((void *)v37 + 8) = v45;
        unint64_t v45 = 0;
      }
    }
    else
    {
      *((void *)v37 + 8) = 0;
    }
    unint64_t v47 = v38;
    if (gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::onceToken != -1) {
      dispatch_once(&gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_136);
    }
    int v39 = (id)gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
    blocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v49 = 3321888768;
    unint64_t v50 = ___ZN3gss10StyleSheetINS_15ScenePropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke;
    uint64_t v51 = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
    uint64_t v53 = (void *)(*(uint64_t (**)(void *))(*v38 + 16))(v38);
    dispatch_async(v39, &block);

    if (v53 == v52)
    {
      (*(void (**)(void *))(v52[0] + 32))(v52);
    }
    else if (v53)
    {
      (*(void (**)(void))(*v53 + 40))();
    }
    if (v47 == v46)
    {
      (*(void (**)(void *))(v46[0] + 32))(v46);
    }
    else if (v47)
    {
      (*(void (**)(void))(*v47 + 40))();
    }
    if (v45 == v44)
    {
      (*(void (**)(void *))(v44[0] + 32))(v44);
    }
    else if (v45)
    {
      (*(void (**)(void))(*v45 + 40))();
    }
    goto LABEL_62;
  }
LABEL_39:
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&block);
  gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingGlobalProperties(a1, 0);
  gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingEverything(a1, 0, (uint64_t)v41, (uint64_t)&block);
  blocuint64_t k = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&block + *(void *)(block - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v49 = MEMORY[0x1E4FBA470] + 16;
  if (v55 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](v56);
LABEL_62:
  uint64_t result = (uint64_t)v42;
  if (v42 == v41) {
    return (*(uint64_t (**)(void *))(v41[0] + 32))(v41);
  }
  if (v42) {
    return (*(uint64_t (**)(void))(*v42 + 40))();
  }
  return result;
}

void sub_1A1C1C7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);

  std::function<void ()(void)>::~function(va2);
  gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::~function((uint64_t)va1);
  std::function<void ()(BOOL)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 40;
  uint64_t v3 = (char *)*((void *)__p + 8);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 8) = &unk_1EF559D98;

  operator delete((void *)a1);
}

char *std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_1EF57CD80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 17) = *(_OWORD *)(a1 + 17);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (v3 == a1 + 40)
    {
      *((void *)v2 + 8) = v2 + 40;
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      return v2;
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  *((void *)v2 + 8) = v3;
  return v2;
}

void sub_1A1C1C9C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EF574E98;
  std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1A1C1CA2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF559D98;
  a1->__r_.__value_.__l.__size_ = 0;
  id v4 = *(id *)(a2 + 8);
  size = (void *)a1->__r_.__value_.__l.__size_;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)v4;

  uint64_t v6 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1[2].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(a2 + 48);
  return a1;
}

void sub_1A1C1CADC(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v2;

  _Unwind_Resume(a1);
}

void _registerStateCaptureCallbacks()
{
  if (_registerStateCaptureCallbacks_onceToken[0] != -1) {
    dispatch_once(_registerStateCaptureCallbacks_onceToken, &__block_literal_global_5_0);
  }
}

void __VKRasterTileOverlayTileLoader_block_invoke()
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F64AD0]);
  [v2 setServerProxyClass:objc_opt_class()];
  [v2 setDiskCacheLocation:0];
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F64AC8]) initWithConfiguration:v2];
  uint64_t v1 = (void *)VKRasterTileOverlayTileLoader::_loader;
  VKRasterTileOverlayTileLoader::_loader = v0;
}

void sub_1A1C1CBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::LabelRenderLayer::updateMapDataUsed(md::LabelRenderLayer *this)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = 0xC001B0019000DLL;
  unsigned __int16 v48 = 69;
  uint64_t v50 = 0;
  long long v49 = 0uLL;
  std::vector<md::MapDataType>::insert((void **)&v49, 0, (char *)&v47);
  id v2 = (unsigned __int16 *)*((void *)&v49 + 1);
  uint64_t v3 = (unsigned __int16 *)v49;
  if ((void)v49 == *((void *)&v49 + 1))
  {
    id v4 = (unsigned char *)v49;
LABEL_12:
    std::vector<md::MapDataType>::insert((void **)&v49, v4, (char *)&v47 + 2);
    id v2 = (unsigned __int16 *)*((void *)&v49 + 1);
    uint64_t v3 = (unsigned __int16 *)v49;
    if ((void)v49 == *((void *)&v49 + 1)) {
      goto LABEL_21;
    }
  }
  else
  {
    id v4 = (unsigned char *)v49;
    while (1)
    {
      unsigned int v5 = *(unsigned __int16 *)v4;
      if (v5 >= WORD1(v47)) {
        break;
      }
      v4 += 2;
      if (v4 == *((unsigned char **)&v49 + 1)) {
        goto LABEL_11;
      }
    }
    if (v4 == *((unsigned char **)&v49 + 1))
    {
LABEL_11:
      id v4 = (unsigned char *)*((void *)&v49 + 1);
      goto LABEL_12;
    }
    if (WORD1(v47) != v5) {
      goto LABEL_12;
    }
    if ((void)v49 == *((void *)&v49 + 1)) {
      goto LABEL_21;
    }
  }
  uint64_t v6 = v3;
  while (1)
  {
    unsigned int v7 = *v6;
    if (v7 >= WORD2(v47)) {
      break;
    }
    if (++v6 == v2) {
      goto LABEL_21;
    }
  }
  if (v6 == v2)
  {
LABEL_21:
    uint64_t v6 = v2;
LABEL_22:
    std::vector<md::MapDataType>::insert((void **)&v49, v6, (char *)&v47 + 4);
    id v2 = (unsigned __int16 *)*((void *)&v49 + 1);
    uint64_t v3 = (unsigned __int16 *)v49;
    if ((void)v49 != *((void *)&v49 + 1)) {
      goto LABEL_23;
    }
LABEL_31:
    uint64_t v8 = v2;
    goto LABEL_32;
  }
  if (WORD2(v47) != v7) {
    goto LABEL_22;
  }
  if (v3 == v2) {
    goto LABEL_31;
  }
LABEL_23:
  uint64_t v8 = v3;
  while (1)
  {
    unsigned int v9 = *v8;
    if (v9 >= HIWORD(v47)) {
      break;
    }
    if (++v8 == v2) {
      goto LABEL_31;
    }
  }
  if (v8 == v2) {
    goto LABEL_31;
  }
  if (HIWORD(v47) == v9)
  {
    if (v3 != v2) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_32:
  std::vector<md::MapDataType>::insert((void **)&v49, v8, (char *)&v47 + 6);
  id v2 = (unsigned __int16 *)*((void *)&v49 + 1);
  uint64_t v3 = (unsigned __int16 *)v49;
  if ((void)v49 == *((void *)&v49 + 1))
  {
LABEL_38:
    std::vector<md::MapDataType>::insert((void **)&v49, v2, (char *)&v48);
    goto LABEL_39;
  }
LABEL_33:
  while (1)
  {
    unsigned int v10 = *v3;
    if (v10 >= v48) {
      break;
    }
    if (++v3 == v2) {
      goto LABEL_38;
    }
  }
  if (v3 == v2) {
    goto LABEL_38;
  }
  id v2 = v3;
  if (v48 != v10) {
    goto LABEL_38;
  }
LABEL_39:
  uint64_t v11 = (void *)*((void *)this + 35);
  *(_OWORD *)((char *)this + 280) = v49;
  *((void *)this + 37) = v50;
  if (v11) {
    operator delete(v11);
  }
  if (*((unsigned char *)this + 274))
  {
    LOWORD(v49) = 66;
    uint64_t v13 = (_WORD *)*((void *)this + 35);
    uint64_t v12 = (unsigned char *)*((void *)this + 36);
    if (v13 != (_WORD *)v12)
    {
      while ((unsigned __int16)*v13 <= 0x41u)
      {
        if (++v13 == (_WORD *)v12) {
          goto LABEL_48;
        }
      }
    }
    if (v13 == (_WORD *)v12 || (uint64_t v12 = v13, *v13 != 66)) {
LABEL_48:
    }
      std::vector<md::MapDataType>::insert((void **)this + 35, v12, (char *)&v49);
  }
  if (*((unsigned char *)this + 273))
  {
    LOWORD(v49) = 26;
    uint64_t v15 = (_WORD *)*((void *)this + 35);
    uint64_t v14 = (unsigned char *)*((void *)this + 36);
    if (v15 != (_WORD *)v14)
    {
      while ((unsigned __int16)*v15 <= 0x19u)
      {
        if (++v15 == (_WORD *)v14) {
          goto LABEL_56;
        }
      }
    }
    if (v15 == (_WORD *)v14 || (uint64_t v14 = v15, *v15 != 26)) {
LABEL_56:
    }
      std::vector<md::MapDataType>::insert((void **)this + 35, v14, (char *)&v49);
  }
  if (*((unsigned char *)this + 271))
  {
    LOWORD(v49) = 24;
    uint64_t v17 = (_WORD *)*((void *)this + 35);
    uint64_t v16 = (unsigned char *)*((void *)this + 36);
    if (v17 != (_WORD *)v16)
    {
      while ((unsigned __int16)*v17 <= 0x17u)
      {
        if (++v17 == (_WORD *)v16) {
          goto LABEL_64;
        }
      }
    }
    if (v17 == (_WORD *)v16 || (uint64_t v16 = v17, *v17 != 24)) {
LABEL_64:
    }
      std::vector<md::MapDataType>::insert((void **)this + 35, v16, (char *)&v49);
    if (*((unsigned char *)this + 272))
    {
      LOWORD(v49) = 74;
      uint8x8_t v19 = (_WORD *)*((void *)this + 35);
      int8x8_t v18 = (unsigned char *)*((void *)this + 36);
      if (v19 != (_WORD *)v18)
      {
        while ((unsigned __int16)*v19 <= 0x49u)
        {
          if (++v19 == (_WORD *)v18) {
            goto LABEL_79;
          }
        }
      }
      if (v19 == (_WORD *)v18 || (int8x8_t v18 = v19, *v19 != 74)) {
LABEL_79:
      }
        std::vector<md::MapDataType>::insert((void **)this + 35, v18, (char *)&v49);
    }
  }
  else
  {
    LOWORD(v49) = 20;
    unint64_t v20 = (_WORD *)*((void *)this + 35);
    int8x8_t v18 = (unsigned char *)*((void *)this + 36);
    if (v20 != (_WORD *)v18)
    {
      while ((unsigned __int16)*v20 <= 0x13u)
      {
        if (++v20 == (_WORD *)v18) {
          goto LABEL_79;
        }
      }
    }
    if (v20 == (_WORD *)v18) {
      goto LABEL_79;
    }
    int8x8_t v18 = v20;
    if (*v20 != 20) {
      goto LABEL_79;
    }
  }
  if (*((unsigned char *)this + 270))
  {
    *(void *)&long long v49 = 0x2B001500170016;
    WORD4(v49) = 52;
    uint64_t v22 = (unsigned __int16 *)*((void *)this + 35);
    int8x8_t v21 = (unsigned __int16 *)*((void *)this + 36);
    uint64_t v23 = v22;
    if (v22 != v21)
    {
      uint64_t v23 = (unsigned __int16 *)*((void *)this + 35);
      while (*v23 <= 0x15u)
      {
        if (++v23 == v21) {
          goto LABEL_93;
        }
      }
    }
    if (v23 == v21)
    {
LABEL_93:
      uint64_t v23 = (unsigned __int16 *)*((void *)this + 36);
    }
    else if (*v23 == 22)
    {
LABEL_95:
      if (v22 == v21) {
        goto LABEL_112;
      }
      char v26 = v22;
      while (1)
      {
        unsigned int v27 = *v26;
        if (v27 >= WORD1(v49)) {
          break;
        }
        if (++v26 == v21) {
          goto LABEL_112;
        }
      }
      if (v26 == v21)
      {
LABEL_112:
        char v26 = v21;
      }
      else if (WORD1(v49) == v27)
      {
        if (v22 == v21) {
          goto LABEL_122;
        }
LABEL_114:
        uint64_t v30 = v22;
        while (1)
        {
          unsigned int v31 = *v30;
          if (v31 >= WORD2(v49)) {
            break;
          }
          if (++v30 == v21) {
            goto LABEL_122;
          }
        }
        if (v30 != v21)
        {
          if (WORD2(v49) == v31)
          {
            if (v22 == v21) {
              goto LABEL_132;
            }
LABEL_124:
            id v32 = v22;
            while (1)
            {
              unsigned int v33 = *v32;
              if (v33 >= WORD3(v49)) {
                break;
              }
              if (++v32 == v21) {
                goto LABEL_132;
              }
            }
            if (v32 != v21)
            {
              if (WORD3(v49) == v33)
              {
                if (v22 != v21) {
                  goto LABEL_134;
                }
                goto LABEL_139;
              }
LABEL_133:
              std::vector<md::MapDataType>::insert((void **)this + 35, v32, (char *)&v49 + 6);
              uint64_t v22 = (unsigned __int16 *)*((void *)this + 35);
              int8x8_t v21 = (unsigned __int16 *)*((void *)this + 36);
              if (v22 != v21)
              {
LABEL_134:
                while (1)
                {
                  unsigned int v34 = *v22;
                  if (v34 >= WORD4(v49)) {
                    break;
                  }
                  if (++v22 == v21) {
                    goto LABEL_139;
                  }
                }
                if (v22 != v21)
                {
                  int8x8_t v21 = v22;
                  if (WORD4(v49) == v34) {
                    goto LABEL_140;
                  }
                }
              }
LABEL_139:
              std::vector<md::MapDataType>::insert((void **)this + 35, v21, (char *)&v49 + 8);
LABEL_140:
              if (*((unsigned char *)this + 275))
              {
                LOWORD(v49) = 80;
                uint64_t v36 = (_WORD *)*((void *)this + 35);
                uint64_t v35 = (unsigned char *)*((void *)this + 36);
                if (v36 != (_WORD *)v35)
                {
                  while ((unsigned __int16)*v36 <= 0x4Fu)
                  {
                    if (++v36 == (_WORD *)v35) {
                      goto LABEL_147;
                    }
                  }
                }
                if (v36 == (_WORD *)v35 || (uint64_t v35 = v36, *v36 != 80)) {
LABEL_147:
                }
                  std::vector<md::MapDataType>::insert((void **)this + 35, v35, (char *)&v49);
              }
              return;
            }
LABEL_132:
            id v32 = v21;
            goto LABEL_133;
          }
LABEL_123:
          std::vector<md::MapDataType>::insert((void **)this + 35, v30, (char *)&v49 + 4);
          uint64_t v22 = (unsigned __int16 *)*((void *)this + 35);
          int8x8_t v21 = (unsigned __int16 *)*((void *)this + 36);
          if (v22 == v21) {
            goto LABEL_132;
          }
          goto LABEL_124;
        }
LABEL_122:
        uint64_t v30 = v21;
        goto LABEL_123;
      }
      std::vector<md::MapDataType>::insert((void **)this + 35, v26, (char *)&v49 + 2);
      uint64_t v22 = (unsigned __int16 *)*((void *)this + 35);
      int8x8_t v21 = (unsigned __int16 *)*((void *)this + 36);
      if (v22 == v21) {
        goto LABEL_122;
      }
      goto LABEL_114;
    }
    std::vector<md::MapDataType>::insert((void **)this + 35, v23, (char *)&v49);
    uint64_t v22 = (unsigned __int16 *)*((void *)this + 35);
    int8x8_t v21 = (unsigned __int16 *)*((void *)this + 36);
    goto LABEL_95;
  }
  LOWORD(v49) = 19;
  uint64_t v25 = (_WORD *)*((void *)this + 35);
  unint64_t v24 = (unsigned char *)*((void *)this + 36);
  if (v25 != (_WORD *)v24)
  {
    while ((unsigned __int16)*v25 <= 0x12u)
    {
      if (++v25 == (_WORD *)v24) {
        goto LABEL_102;
      }
    }
  }
  if (v25 == (_WORD *)v24 || (unint64_t v24 = v25, *v25 != 19)) {
LABEL_102:
  }
    std::vector<md::MapDataType>::insert((void **)this + 35, v24, (char *)&v49);
  if (*((unsigned char *)this + 275))
  {
    LOWORD(v49) = 73;
    size_t v29 = (_WORD *)*((void *)this + 35);
    uint64_t v28 = (unsigned char *)*((void *)this + 36);
    if (v29 != (_WORD *)v28)
    {
      while ((unsigned __int16)*v29 <= 0x48u)
      {
        if (++v29 == (_WORD *)v28) {
          goto LABEL_150;
        }
      }
    }
    if (v29 == (_WORD *)v28 || (uint64_t v28 = v29, *v29 != 73)) {
LABEL_150:
    }
      std::vector<md::MapDataType>::insert((void **)this + 35, v28, (char *)&v49);
  }
  if (*((unsigned char *)this + 277))
  {
    WORD2(v49) = 21;
    LODWORD(v49) = 3473485;
    uint64_t v38 = (unsigned __int16 *)*((void *)this + 35);
    float v37 = (unsigned __int16 *)*((void *)this + 36);
    int v39 = v38;
    if (v38 != v37)
    {
      int v39 = (unsigned __int16 *)*((void *)this + 35);
      while (*v39 <= 0x4Cu)
      {
        if (++v39 == v37) {
          goto LABEL_165;
        }
      }
    }
    if (v39 == v37)
    {
LABEL_165:
      int v39 = (unsigned __int16 *)*((void *)this + 36);
    }
    else if (*v39 == 77)
    {
LABEL_167:
      if (v38 == v37) {
        goto LABEL_184;
      }
      uint64_t v43 = v38;
      while (1)
      {
        unsigned int v44 = *v43;
        if (v44 >= WORD1(v49)) {
          break;
        }
        if (++v43 == v37) {
          goto LABEL_184;
        }
      }
      if (v43 == v37)
      {
LABEL_184:
        uint64_t v43 = v37;
      }
      else if (WORD1(v49) == v44)
      {
LABEL_186:
        if (v38 == v37) {
          goto LABEL_192;
        }
        while (1)
        {
          unsigned int v46 = *v38;
          if (v46 >= WORD2(v49)) {
            break;
          }
          if (++v38 == v37) {
            goto LABEL_192;
          }
        }
        if (v38 == v37 || (float v37 = v38, WORD2(v49) != v46)) {
LABEL_192:
        }
          std::vector<md::MapDataType>::insert((void **)this + 35, v37, (char *)&v49 + 4);
        return;
      }
      std::vector<md::MapDataType>::insert((void **)this + 35, v43, (char *)&v49 + 2);
      uint64_t v38 = (unsigned __int16 *)*((void *)this + 35);
      float v37 = (unsigned __int16 *)*((void *)this + 36);
      goto LABEL_186;
    }
    std::vector<md::MapDataType>::insert((void **)this + 35, v39, (char *)&v49);
    uint64_t v38 = (unsigned __int16 *)*((void *)this + 35);
    float v37 = (unsigned __int16 *)*((void *)this + 36);
    goto LABEL_167;
  }
  LODWORD(v49) = 1179650;
  float v41 = (unsigned __int16 *)*((void *)this + 35);
  uint64_t v40 = (unsigned __int16 *)*((void *)this + 36);
  uint64_t v42 = v41;
  if (v41 != v40)
  {
    uint64_t v42 = (unsigned __int16 *)*((void *)this + 35);
    while (*v42 <= 1u)
    {
      if (++v42 == v40) {
        goto LABEL_176;
      }
    }
  }
  if (v42 == v40)
  {
LABEL_176:
    uint64_t v42 = (unsigned __int16 *)*((void *)this + 36);
  }
  else if (*v42 == 2)
  {
    if (v41 != v40) {
      goto LABEL_178;
    }
    goto LABEL_195;
  }
  std::vector<md::MapDataType>::insert((void **)this + 35, v42, (char *)&v49);
  float v41 = (unsigned __int16 *)*((void *)this + 35);
  uint64_t v40 = (unsigned __int16 *)*((void *)this + 36);
  if (v41 == v40)
  {
LABEL_195:
    std::vector<md::MapDataType>::insert((void **)this + 35, v40, (char *)&v49 + 2);
    return;
  }
LABEL_178:
  while (1)
  {
    unsigned int v45 = *v41;
    if (v45 >= WORD1(v49)) {
      break;
    }
    if (++v41 == v40) {
      goto LABEL_195;
    }
  }
  if (v41 == v40) {
    goto LABEL_195;
  }
  uint64_t v40 = v41;
  if (WORD1(v49) != v45) {
    goto LABEL_195;
  }
}

void sub_1A1C1D4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<md::MapDataType>::insert(void **a1, unsigned char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 1;
  unsigned int v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_WORD *)unsigned int v9 = *(_WORD *)a3;
      a1[1] = v9 + 2;
    }
    else
    {
      int64_t v11 = v5 - (void)(v9 + 2);
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = (__int16 *)(v5 - 2);
      if (v5 < 2)
      {
        unint64_t v20 = a1[1];
      }
      else
      {
        unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v11;
        uint64_t v15 = (char *)(v14 + v6);
        unint64_t v16 = v14 + v6 + 2;
        if (v5 > v16) {
          unint64_t v16 = (unint64_t)a1[1];
        }
        unint64_t v17 = v16 + ~v6 - v14;
        unint64_t v18 = v5 - (void)v15;
        BOOL v19 = v17 >= 0x1E && v18 > 0x1F;
        unint64_t v20 = a1[1];
        if (!v19) {
          goto LABEL_67;
        }
        uint64_t v21 = (v17 >> 1) + 1;
        unint64_t v22 = 2 * (v21 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v13 = (__int16 *)((char *)v13 + v22);
        uint64_t v23 = (_OWORD *)(v5 + 16);
        unint64_t v24 = (long long *)(2 * v12 + 2 * v8 + v6 + 16);
        unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          _OWORD *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        unint64_t v20 = (_WORD *)(v5 + v22);
        if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_67:
          do
          {
            __int16 v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = v20;
      if ((char *)v5 != v9 + 2) {
        memmove((void *)(v5 - 2 * v12), v9, v11);
      }
      if (v9 <= v3) {
        v3 += 2 * (a1[1] > v3);
      }
      *(_WORD *)unsigned int v9 = *(_WORD *)v3;
    }
    return;
  }
  uint64_t v28 = v5 - v6;
  if (v28 <= -3) {
    abort();
  }
  uint64_t v30 = v28 >> 1;
  unint64_t v31 = v10 - v6;
  if (v31 <= v30 + 1) {
    unint64_t v32 = v30 + 1;
  }
  else {
    unint64_t v32 = v31;
  }
  if (v31 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v33 = v32;
  }
  if (v33)
  {
    if (v33 < 0) {
      goto LABEL_64;
    }
    unsigned int v34 = (char *)operator new(2 * v33);
  }
  else
  {
    unsigned int v34 = 0;
  }
  uint64_t v35 = &v34[2 * v8];
  uint64_t v36 = &v34[2 * v33];
  if (v8 != v33)
  {
LABEL_33:
    uint64_t v38 = (char *)v6;
    goto LABEL_34;
  }
  if (v7 >= 1)
  {
    uint64_t v37 = v8 + 2;
    if (v8 >= -1) {
      uint64_t v37 = v8 + 1;
    }
    v35 -= v37 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }
  if ((unsigned char *)v6 == a2) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = v7;
  }
  if (v48 < 0) {
LABEL_64:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v35 = (char *)operator new(2 * v48);
  uint64_t v36 = &v35[2 * v48];
  if (!v34) {
    goto LABEL_33;
  }
  operator delete(v34);
  uint64_t v36 = &v35[2 * v48];
  uint64_t v38 = (char *)*a1;
LABEL_34:
  *(_WORD *)uint64_t v35 = *(_WORD *)v3;
  int v39 = v35 + 2;
  if (v38 != v9)
  {
    uint64_t v40 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + v6);
    unint64_t v41 = v40 - v38 - 2;
    if (v41 < 0x1E)
    {
      uint64_t v43 = v9;
    }
    else if ((unint64_t)(v40 - v35) < 0x20)
    {
      uint64_t v43 = v9;
    }
    else
    {
      uint64_t v42 = (v41 >> 1) + 1;
      uint64_t v43 = &v9[-2 * (v42 & 0xFFFFFFFFFFFFFFF0)];
      unsigned int v44 = v35 - 16;
      unsigned int v45 = (long long *)(v6 + 2 * v8 - 16);
      unint64_t v46 = v42 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v47 = *v45;
        *((_OWORD *)v44 - 1) = *(v45 - 1);
        *(_OWORD *)unsigned int v44 = v47;
        v44 -= 32;
        v45 -= 2;
        v46 -= 16;
      }
      while (v46);
      v35 -= 2 * (v42 & 0xFFFFFFFFFFFFFFF0);
      if (v42 == (v42 & 0xFFFFFFFFFFFFFFF0)) {
        goto LABEL_56;
      }
    }
    do
    {
      __int16 v49 = *((_WORD *)v43 - 1);
      v43 -= 2;
      *((_WORD *)v35 - 1) = v49;
      v35 -= 2;
    }
    while (v43 != v38);
  }
LABEL_56:
  uint64_t v50 = (char *)a1[1];
  int64_t v51 = v50 - v9;
  if (v50 != v9)
  {
    uint64_t v52 = v9;
    size_t v53 = v50 - v9;
    long long v54 = v36;
    memmove(v39, v52, v53);
    uint64_t v36 = v54;
    uint64_t v38 = (char *)*a1;
  }
  *a1 = v35;
  a1[1] = &v39[v51];
  a1[2] = v36;
  if (v38)
  {
    operator delete(v38);
  }
}

void sub_1A1C1D830(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ggl::PolylineOverlayAlphaShader::typedReflection(ggl::PolylineOverlayAlphaShader *this)
{
  {
    if (v1)
    {
      ggl::PolylineOverlayAlphaShader::typedReflection(void)::ref = (uint64_t)"PolylineOverlayAlphaShader";
      ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(v1);
      qword_1EB322CF8 = (uint64_t)&ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
      id v2 = (ggl *)ggl::crc32::compute<33ul>("PolylineOverlayAlphaShaderVertex");
      dword_1EB322D00 = (int)v2;
      ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(v2);
      qword_1EB322D08 = (uint64_t)&ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322D10 = ggl::crc32::compute<35ul>("PolylineOverlayAlphaShaderFragment");
      qword_1EB322D18 = (uint64_t)ggl::polylineOverlayAlphaShaderShaderConstants(void)::ref;
      unk_1EB322D20 = 3;
      qword_1EB322D28 = (uint64_t)ggl::polylineOverlayAlphaShaderShaderTextures(void)::ref;
      unk_1EB322D30 = 1;
      qword_1EB322D38 = (uint64_t)ggl::polylineOverlayAlphaShaderShaderSamplers(void)::ref;
      unk_1EB322D40 = 1;
    }
  }
}

void ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("PolylineOverlayAlphaShaderFragment");
    *(_DWORD *)algn_1EB3297BC = 1;
    qword_1EB3297C0 = (uint64_t)"PolylineOverlayAlphaShader";
    unk_1EB3297C8 = 0;
    qword_1EB3297D0 = 0;
    unk_1EB3297D8 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3297E0 = 1;
    unk_1EB3297E8 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3297F0 = 0;
    unk_1EB3297F8 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329800 = 1;
    unk_1EB329808 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329818 = 0;
    unk_1EB329820 = 0;
    qword_1EB329810 = 1;
  }
}

void ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolylineOverlayAlphaShaderVertex");
    *(_DWORD *)algn_1EB328E44 = 0;
    qword_1EB328E48 = (uint64_t)"PolylineOverlayAlphaShader";
    unk_1EB328E50 = ggl::polylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB328E58 = 1;
    unk_1EB328E60 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328E68 = 3;
    unk_1EB328E70 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328E78 = 0;
    unk_1EB328E80 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328E88 = 0;
    unk_1EB328E90 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328EA0 = 0;
    unk_1EB328EA8 = 0;
    qword_1EB328E98 = 0;
  }
}

void ggl::FlyoverPostchainFGBlurShader::typedReflection(ggl::FlyoverPostchainFGBlurShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverPostchainFGBlurShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainFGBlurShader";
      ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(v1);
      qword_1EB31BFA8 = (uint64_t)&ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref;
      id v2 = (ggl *)ggl::crc32::compute<35ul>("FlyoverPostchainFGBlurShaderVertex");
      dword_1EB31BFB0 = (int)v2;
      ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(v2);
      qword_1EB31BFB8 = (uint64_t)&ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31BFC0 = ggl::crc32::compute<37ul>("FlyoverPostchainFGBlurShaderFragment");
      qword_1EB31BFC8 = (uint64_t)ggl::flyoverPostchainFGBlurShaderShaderConstants(void)::ref;
      unk_1EB31BFD0 = 1;
      qword_1EB31BFD8 = (uint64_t)ggl::flyoverPostchainFGBlurShaderShaderTextures(void)::ref;
      unk_1EB31BFE0 = 2;
      qword_1EB31BFE8 = (uint64_t)ggl::flyoverPostchainFGBlurShaderShaderSamplers(void)::ref;
      unk_1EB31BFF0 = 2;
    }
  }
}

void ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FlyoverPostchainFGBlurShaderFragment");
    *(_DWORD *)algn_1EB31CC4C = 1;
    qword_1EB31CC60 = 0;
    unk_1EB31CC68 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31CC50 = (uint64_t)"FlyoverPostchainFGBlurShader";
    unk_1EB31CC58 = 0;
    qword_1EB31CC70 = 1;
    unk_1EB31CC78 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31CC80 = 0;
    unk_1EB31CC88 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31CC90 = 2;
    unk_1EB31CC98 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CCA8 = 0;
    unk_1EB31CCB0 = 0;
    qword_1EB31CCA0 = 2;
  }
}

void ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("FlyoverPostchainFGBlurShaderVertex");
    *(_DWORD *)algn_1EB31CA14 = 0;
    qword_1EB31CA18 = (uint64_t)"FlyoverPostchainFGBlurShader";
    unk_1EB31CA20 = ggl::flyoverPostchainFGBlurShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31CA28 = 1;
    unk_1EB31CA30 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31CA38 = 0;
    unk_1EB31CA40 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31CA48 = 0;
    unk_1EB31CA50 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31CA58 = 0;
    unk_1EB31CA60 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CA70 = 0;
    unk_1EB31CA78 = 0;
    qword_1EB31CA68 = 0;
  }
}

void ggl::FlyoverPostchainBGBlurShader::typedReflection(ggl::FlyoverPostchainBGBlurShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverPostchainBGBlurShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainBGBlurShader";
      ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(v1);
      qword_1EB31BF48 = (uint64_t)&ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref;
      id v2 = (ggl *)ggl::crc32::compute<35ul>("FlyoverPostchainBGBlurShaderVertex");
      dword_1EB31BF50 = (int)v2;
      ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(v2);
      qword_1EB31BF58 = (uint64_t)&ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31BF60 = ggl::crc32::compute<37ul>("FlyoverPostchainBGBlurShaderFragment");
      qword_1EB31BF68 = (uint64_t)ggl::flyoverPostchainBGBlurShaderShaderConstants(void)::ref;
      unk_1EB31BF70 = 1;
      qword_1EB31BF78 = (uint64_t)ggl::flyoverPostchainBGBlurShaderShaderTextures(void)::ref;
      unk_1EB31BF80 = 1;
      qword_1EB31BF88 = (uint64_t)ggl::flyoverPostchainBGBlurShaderShaderSamplers(void)::ref;
      unk_1EB31BF90 = 1;
    }
  }
}

void ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FlyoverPostchainBGBlurShaderFragment");
    *(_DWORD *)algn_1EB31CBDC = 1;
    qword_1EB31CBE0 = (uint64_t)"FlyoverPostchainBGBlurShader";
    unk_1EB31CBE8 = 0;
    qword_1EB31CBF0 = 0;
    unk_1EB31CBF8 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31CC00 = 1;
    unk_1EB31CC08 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31CC10 = 0;
    unk_1EB31CC18 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31CC20 = 1;
    unk_1EB31CC28 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CC38 = 0;
    unk_1EB31CC40 = 0;
    qword_1EB31CC30 = 1;
  }
}

void ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("FlyoverPostchainBGBlurShaderVertex");
    *(_DWORD *)algn_1EB31C9A4 = 0;
    qword_1EB31C9A8 = (uint64_t)"FlyoverPostchainBGBlurShader";
    unk_1EB31C9B0 = ggl::flyoverPostchainBGBlurShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31C9B8 = 1;
    unk_1EB31C9C0 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31C9C8 = 0;
    unk_1EB31C9D0 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31C9D8 = 0;
    unk_1EB31C9E0 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31C9E8 = 0;
    unk_1EB31C9F0 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CA00 = 0;
    unk_1EB31CA08 = 0;
    qword_1EB31C9F8 = 0;
  }
}

void ggl::VenueOpenToBelowShadowShader::typedReflection(ggl::VenueOpenToBelowShadowShader *this)
{
  {
    if (v1)
    {
      ggl::VenueOpenToBelowShadowShader::typedReflection(void)::ref = (uint64_t)"VenueOpenToBelowShadowShader";
      ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(v1);
      qword_1EB323030 = (uint64_t)&ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(void)::ref;
      id v2 = (ggl *)ggl::crc32::compute<35ul>("VenueOpenToBelowShadowShaderVertex");
      dword_1EB323038 = (int)v2;
      ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(v2);
      qword_1EB323040 = (uint64_t)&ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB323048 = ggl::crc32::compute<37ul>("VenueOpenToBelowShadowShaderFragment");
      qword_1EB323050 = (uint64_t)ggl::venueOpenToBelowShadowShaderShaderConstants(void)::ref;
      unk_1EB323058 = 2;
      qword_1EB323060 = (uint64_t)&ggl::venueOpenToBelowShadowShaderShaderTextures(void)::ref;
      unk_1EB323068 = 0;
      qword_1EB323070 = (uint64_t)&ggl::venueOpenToBelowShadowShaderShaderSamplers(void)::ref;
      unk_1EB323078 = 0;
    }
  }
}

void ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("VenueOpenToBelowShadowShaderFragment");
    *(_DWORD *)algn_1EB32A0C4 = 1;
    qword_1EB32A0C8 = (uint64_t)"VenueOpenToBelowShadowShader";
    unk_1EB32A0D0 = 0;
    qword_1EB32A0D8 = 0;
    unk_1EB32A0E0 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A0E8 = 1;
    unk_1EB32A0F0 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A0F8 = 0;
    unk_1EB32A100 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A108 = 0;
    unk_1EB32A110 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A120 = 0;
    unk_1EB32A128 = 0;
    qword_1EB32A118 = 0;
  }
}

void ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("VenueOpenToBelowShadowShaderVertex");
    *(_DWORD *)algn_1EB32989C = 0;
    qword_1EB3298A0 = (uint64_t)"VenueOpenToBelowShadowShader";
    unk_1EB3298A8 = ggl::venueOpenToBelowShadowShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3298B0 = 1;
    unk_1EB3298B8 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3298C0 = 2;
    unk_1EB3298C8 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3298D0 = 0;
    unk_1EB3298D8 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3298E0 = 0;
    unk_1EB3298E8 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3298F8 = 0;
    unk_1EB329900 = 0;
    qword_1EB3298F0 = 0;
  }
}

void ggl::TexturedAnimatedRibbonShader::typedReflection(ggl::TexturedAnimatedRibbonShader *this)
{
  {
    if (v1)
    {
      ggl::TexturedAnimatedRibbonShader::typedReflection(void)::ref = (uint64_t)"TexturedAnimatedRibbonShader";
      ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(v1);
      qword_1EB31A438 = (uint64_t)&ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(void)::ref;
      id v2 = (ggl *)ggl::crc32::compute<35ul>("TexturedAnimatedRibbonShaderVertex");
      dword_1EB31A440 = (int)v2;
      ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(v2);
      qword_1EB31A448 = (uint64_t)&ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31A450 = ggl::crc32::compute<37ul>("TexturedAnimatedRibbonShaderFragment");
      qword_1EB31A458 = (uint64_t)ggl::texturedAnimatedRibbonShaderShaderConstants(void)::ref;
      unk_1EB31A460 = 3;
      qword_1EB31A468 = (uint64_t)ggl::texturedAnimatedRibbonShaderShaderTextures(void)::ref;
      unk_1EB31A470 = 2;
      qword_1EB31A478 = (uint64_t)ggl::texturedAnimatedRibbonShaderShaderSamplers(void)::ref;
      unk_1EB31A480 = 2;
    }
  }
}

void ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("TexturedAnimatedRibbonShaderFragment");
    *(_DWORD *)algn_1EB31ADAC = 1;
    qword_1EB31ADC0 = 0;
    unk_1EB31ADC8 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31ADB0 = (uint64_t)"TexturedAnimatedRibbonShader";
    unk_1EB31ADB8 = 0;
    qword_1EB31ADD0 = 1;
    unk_1EB31ADD8 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31ADE0 = 0;
    unk_1EB31ADE8 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31ADF0 = 2;
    unk_1EB31ADF8 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31AE08 = 0;
    unk_1EB31AE10 = 0;
    qword_1EB31AE00 = 2;
  }
}

void ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("TexturedAnimatedRibbonShaderVertex");
    *(_DWORD *)algn_1EB31AD34 = 0;
    qword_1EB31AD38 = (uint64_t)"TexturedAnimatedRibbonShader";
    unk_1EB31AD40 = ggl::texturedAnimatedRibbonShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31AD48 = 1;
    unk_1EB31AD50 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31AD58 = 3;
    unk_1EB31AD60 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31AD68 = 0;
    unk_1EB31AD70 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31AD78 = 0;
    unk_1EB31AD80 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31AD90 = 0;
    unk_1EB31AD98 = 0;
    qword_1EB31AD88 = 0;
  }
}

void ggl::FoggedSpecularBuildingShader::typedReflection(ggl::FoggedSpecularBuildingShader *this)
{
  {
    if (v1)
    {
      ggl::FoggedSpecularBuildingShader::typedReflection(void)::ref = (uint64_t)"FoggedSpecularBuildingShader";
      ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(v1);
      qword_1EB322F78 = (uint64_t)&ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(void)::ref;
      id v2 = (ggl *)ggl::crc32::compute<35ul>("FoggedSpecularBuildingShaderVertex");
      dword_1EB322F80 = (int)v2;
      ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(v2);
      qword_1EB322F88 = (uint64_t)&ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322F90 = ggl::crc32::compute<37ul>("FoggedSpecularBuildingShaderFragment");
      qword_1EB322F98 = (uint64_t)ggl::foggedSpecularBuildingShaderShaderConstants(void)::ref;
      unk_1EB322FA0 = 7;
      qword_1EB322FA8 = (uint64_t)ggl::foggedSpecularBuildingShaderShaderTextures(void)::ref;
      unk_1EB322FB0 = 1;
      qword_1EB322FB8 = (uint64_t)&ggl::foggedSpecularBuildingShaderShaderSamplers(void)::ref;
      unk_1EB322FC0 = 1;
    }
  }
}

void ggl::DaVinciGroundShadowMapShader::typedReflection(ggl::DaVinciGroundShadowMapShader *this)
{
  {
    if (v1)
    {
      ggl::DaVinciGroundShadowMapShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundShadowMapShader";
      ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(v1);
      qword_1EB32BD70 = (uint64_t)&ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(void)::ref;
      id v2 = (ggl *)ggl::crc32::compute<35ul>("DaVinciGroundShadowMapShaderVertex");
      dword_1EB32BD78 = (int)v2;
      ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BD80 = (uint64_t)&ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BD88 = ggl::crc32::compute<37ul>("DaVinciGroundShadowMapShaderFragment");
      qword_1EB32BD90 = (uint64_t)ggl::daVinciGroundShadowMapShaderShaderConstants(void)::ref;
      unk_1EB32BD98 = 6;
      qword_1EB32BDA0 = (uint64_t)&ggl::daVinciGroundShadowMapShaderShaderTextures(void)::ref;
      unk_1EB32BDA8 = 0;
      qword_1EB32BDB0 = (uint64_t)&ggl::daVinciGroundShadowMapShaderShaderSamplers(void)::ref;
      unk_1EB32BDB8 = 0;
    }
  }
}

void ggl::FoggedSpecularLandmarkShader::typedReflection(ggl::FoggedSpecularLandmarkShader *this)
{
  {
    if (v1)
    {
      ggl::FoggedSpecularLandmarkShader::typedReflection(void)::ref = (uint64_t)"FoggedSpecularLandmarkShader";
      ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(v1);
      qword_1EB322FD0 = (uint64_t)&ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(void)::ref;
      id v2 = (ggl *)ggl::crc32::compute<35ul>("FoggedSpecularLandmarkShaderVertex");
      dword_1EB322FD8 = (int)v2;
      ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(v2);
      qword_1EB322FE0 = (uint64_t)&ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322FE8 = ggl::crc32::compute<37ul>("FoggedSpecularLandmarkShaderFragment");
      qword_1EB322FF0 = (uint64_t)ggl::foggedSpecularLandmarkShaderShaderConstants(void)::ref;
      unk_1EB322FF8 = 7;
      qword_1EB323000 = (uint64_t)ggl::foggedSpecularLandmarkShaderShaderTextures(void)::ref;
      unk_1EB323008 = 1;
      qword_1EB323010 = (uint64_t)&ggl::foggedSpecularLandmarkShaderShaderSamplers(void)::ref;
      unk_1EB323018 = 1;
    }
  }
}

uint64_t ggl::crc32::compute<37ul>(char *a1)
{
  int v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  unsigned int v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  unsigned int v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  unsigned int v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  unsigned int v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  unsigned int v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  unsigned int v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  unsigned int v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  unsigned int v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  unsigned int v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  unsigned int v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  unsigned int v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  unsigned int v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  unsigned int v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  unsigned int v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  unsigned int v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  unsigned int v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  unsigned int v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  unsigned int v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  unsigned int v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  unsigned int v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  unsigned int v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  unsigned int v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  unsigned int v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  unsigned int v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  unsigned int v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  unsigned int v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  unsigned int v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  unsigned int v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  unsigned int v30 = ggl::crc32::crc32Table[v29 ^ a1[31]] ^ (v29 >> 8);
  unsigned int v31 = ggl::crc32::crc32Table[v30 ^ a1[32]] ^ (v30 >> 8);
  unsigned int v32 = ggl::crc32::crc32Table[v31 ^ a1[33]] ^ (v31 >> 8);
  unsigned int v33 = ggl::crc32::crc32Table[v32 ^ a1[34]] ^ (v32 >> 8);
  return ggl::crc32::crc32Table[v33 ^ a1[35]] ^ ~(v33 >> 8);
}

uint64_t ggl::crc32::compute<35ul>(char *a1)
{
  int v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  unsigned int v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  unsigned int v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  unsigned int v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  unsigned int v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  unsigned int v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  unsigned int v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  unsigned int v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  unsigned int v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  unsigned int v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  unsigned int v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  unsigned int v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  unsigned int v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  unsigned int v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  unsigned int v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  unsigned int v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  unsigned int v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  unsigned int v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  unsigned int v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  unsigned int v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  unsigned int v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  unsigned int v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  unsigned int v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  unsigned int v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  unsigned int v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  unsigned int v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  unsigned int v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  unsigned int v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  unsigned int v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  unsigned int v30 = ggl::crc32::crc32Table[v29 ^ a1[31]] ^ (v29 >> 8);
  unsigned int v31 = ggl::crc32::crc32Table[v30 ^ a1[32]] ^ (v30 >> 8);
  return ggl::crc32::crc32Table[v31 ^ a1[33]] ^ ~(v31 >> 8);
}

void ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FoggedSpecularLandmarkShaderFragment");
    *(_DWORD *)algn_1EB329FE4 = 1;
    qword_1EB329FE8 = (uint64_t)"FoggedSpecularLandmarkShader";
    unk_1EB329FF0 = 0;
    qword_1EB329FF8 = 0;
    unk_1EB32A000 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A008 = 4;
    unk_1EB32A010 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A018 = 0;
    unk_1EB32A020 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A028 = 1;
    unk_1EB32A030 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A040 = 0;
    unk_1EB32A048 = 0;
    qword_1EB32A038 = 1;
  }
}

void ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FoggedSpecularBuildingShaderFragment");
    *(_DWORD *)algn_1EB329F6C = 1;
    qword_1EB329F70 = (uint64_t)"FoggedSpecularBuildingShader";
    unk_1EB329F78 = 0;
    qword_1EB329F80 = 0;
    unk_1EB329F88 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329F90 = 4;
    unk_1EB329F98 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329FA0 = 0;
    unk_1EB329FA8 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329FB0 = 1;
    unk_1EB329FB8 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329FC8 = 0;
    unk_1EB329FD0 = 0;
    qword_1EB329FC0 = 1;
  }
}

void ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("DaVinciGroundShadowMapShaderFragment");
    *(_DWORD *)algn_1EB32C634 = 1;
    qword_1EB32C638 = (uint64_t)"DaVinciGroundShadowMapShader";
    unk_1EB32C640 = 0;
    qword_1EB32C648 = 0;
    unk_1EB32C650 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C658 = 2;
    unk_1EB32C660 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C668 = 0;
    unk_1EB32C670 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C678 = 0;
    unk_1EB32C680 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C690 = 0;
    unk_1EB32C698 = 0;
    qword_1EB32C688 = 0;
  }
}

void ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("FoggedSpecularLandmarkShaderVertex");
    *(_DWORD *)algn_1EB32974C = 0;
    qword_1EB329750 = (uint64_t)"FoggedSpecularLandmarkShader";
    unk_1EB329758 = ggl::foggedSpecularLandmarkShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329760 = 1;
    unk_1EB329768 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329770 = 6;
    unk_1EB329778 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329780 = 0;
    unk_1EB329788 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329790 = 0;
    unk_1EB329798 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3297A8 = 0;
    unk_1EB3297B0 = 0;
    qword_1EB3297A0 = 0;
  }
}

void ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("FoggedSpecularBuildingShaderVertex");
    *(_DWORD *)algn_1EB3296D4 = 0;
    qword_1EB3296D8 = (uint64_t)"FoggedSpecularBuildingShader";
    unk_1EB3296E0 = ggl::foggedSpecularBuildingShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3296E8 = 1;
    unk_1EB3296F0 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3296F8 = 6;
    unk_1EB329700 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329708 = 0;
    unk_1EB329710 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329718 = 0;
    unk_1EB329720 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329730 = 0;
    unk_1EB329738 = 0;
    qword_1EB329728 = 0;
  }
}

void ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("DaVinciGroundShadowMapShaderVertex");
    *(_DWORD *)algn_1EB32C5BC = 0;
    qword_1EB32C5C0 = (uint64_t)"DaVinciGroundShadowMapShader";
    unk_1EB32C5C8 = ggl::daVinciGroundShadowMapShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32C5D0 = 3;
    unk_1EB32C5D8 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C5E0 = 6;
    unk_1EB32C5E8 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C5F0 = 2;
    unk_1EB32C5F8 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C600 = 0;
    unk_1EB32C608 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C618 = 0;
    unk_1EB32C620 = 0;
    qword_1EB32C610 = 0;
  }
}

void ggl::ScreenTexturedQuadShader::typedReflection(ggl::ScreenTexturedQuadShader *this)
{
  {
    if (v1)
    {
      ggl::ScreenTexturedQuadShader::typedReflection(void)::ref = (uint64_t)"ScreenTexturedQuadShader";
      ggl::screenTexturedQuadShaderVertexFunctionDescriptor(v1);
      qword_1EB317C50 = (uint64_t)&ggl::screenTexturedQuadShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("ScreenTexturedQuadShaderVertex");
      dword_1EB317C58 = (int)v2;
      ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(v2);
      qword_1EB317C60 = (uint64_t)&ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB317C68 = ggl::crc32::compute<33ul>("ScreenTexturedQuadShaderFragment");
      qword_1EB317C70 = (uint64_t)ggl::screenTexturedQuadShaderShaderConstants(void)::ref;
      unk_1EB317C78 = 1;
      qword_1EB317C80 = (uint64_t)ggl::screenTexturedQuadShaderShaderTextures(void)::ref;
      unk_1EB317C88 = 1;
      qword_1EB317C90 = (uint64_t)ggl::screenTexturedQuadShaderShaderSamplers(void)::ref;
      unk_1EB317C98 = 1;
    }
  }
}

void ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("ScreenTexturedQuadShaderFragment");
    *(_DWORD *)algn_1EB318434 = 1;
    qword_1EB318438 = (uint64_t)"ScreenTexturedQuadShader";
    unk_1EB318440 = 0;
    qword_1EB318448 = 0;
    unk_1EB318450 = &ggl::screenTexturedQuadShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB318458 = 0;
    unk_1EB318460 = &ggl::screenTexturedQuadShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB318468 = 0;
    unk_1EB318470 = &ggl::screenTexturedQuadShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB318478 = 1;
    unk_1EB318480 = &ggl::screenTexturedQuadShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318490 = 0;
    unk_1EB318498 = 0;
    qword_1EB318488 = 1;
  }
}

void ggl::screenTexturedQuadShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::screenTexturedQuadShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("ScreenTexturedQuadShaderVertex");
    *(_DWORD *)algn_1EB3181EC = 0;
    qword_1EB3181F0 = (uint64_t)"ScreenTexturedQuadShader";
    unk_1EB3181F8 = ggl::screenTexturedQuadShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB318200 = 1;
    unk_1EB318208 = &ggl::screenTexturedQuadShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB318210 = 1;
    unk_1EB318218 = &ggl::screenTexturedQuadShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB318220 = 0;
    unk_1EB318228 = &ggl::screenTexturedQuadShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB318230 = 0;
    unk_1EB318238 = &ggl::screenTexturedQuadShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318248 = 0;
    unk_1EB318250 = 0;
    qword_1EB318240 = 0;
  }
}

void ggl::FlyoverMorphBorderShader::typedReflection(ggl::FlyoverMorphBorderShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverMorphBorderShader::typedReflection(void)::ref = (uint64_t)"FlyoverMorphBorderShader";
      ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(v1);
      qword_1EB322730 = (uint64_t)&ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("FlyoverMorphBorderShaderVertex");
      dword_1EB322738 = (int)v2;
      ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(v2);
      qword_1EB322740 = (uint64_t)&ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322748 = ggl::crc32::compute<33ul>("FlyoverMorphBorderShaderFragment");
      qword_1EB322750 = (uint64_t)ggl::flyoverMorphBorderShaderShaderConstants(void)::ref;
      unk_1EB322758 = 6;
      qword_1EB322760 = (uint64_t)ggl::flyoverMorphBorderShaderShaderTextures(void)::ref;
      unk_1EB322768 = 5;
      qword_1EB322770 = (uint64_t)ggl::flyoverMorphBorderShaderShaderSamplers(void)::ref;
      unk_1EB322778 = 5;
    }
  }
}

void ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("FlyoverMorphBorderShaderFragment");
    *(_DWORD *)algn_1EB328CE4 = 1;
    qword_1EB328CE8 = (uint64_t)"FlyoverMorphBorderShader";
    unk_1EB328CF0 = 0;
    qword_1EB328CF8 = 0;
    unk_1EB328D00 = &ggl::flyoverMorphBorderShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328D08 = 3;
    unk_1EB328D10 = &ggl::flyoverMorphBorderShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328D18 = 0;
    unk_1EB328D20 = &ggl::flyoverMorphBorderShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328D28 = 4;
    unk_1EB328D30 = &ggl::flyoverMorphBorderShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328D40 = 0;
    unk_1EB328D48 = 0;
    qword_1EB328D38 = 4;
  }
}

void ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("FlyoverMorphBorderShaderVertex");
    *(_DWORD *)algn_1EB327FDC = 0;
    qword_1EB327FE0 = (uint64_t)"FlyoverMorphBorderShader";
    unk_1EB327FE8 = ggl::flyoverMorphBorderShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327FF0 = 1;
    unk_1EB327FF8 = &ggl::flyoverMorphBorderShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328000 = 6;
    unk_1EB328008 = &ggl::flyoverMorphBorderShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328010 = 0;
    unk_1EB328018 = &ggl::flyoverMorphBorderShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328020 = 1;
    unk_1EB328028 = &ggl::flyoverMorphBorderShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328038 = 0;
    unk_1EB328040 = 0;
    qword_1EB328030 = 1;
  }
}

void ggl::PolygonOverlayFillShader::typedReflection(ggl::PolygonOverlayFillShader *this)
{
  {
    if (v1)
    {
      ggl::PolygonOverlayFillShader::typedReflection(void)::ref = (uint64_t)"PolygonOverlayFillShader";
      ggl::polygonOverlayFillShaderVertexFunctionDescriptor(v1);
      qword_1EB3227E8 = (uint64_t)&ggl::polygonOverlayFillShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("PolygonOverlayFillShaderVertex");
      dword_1EB3227F0 = (int)v2;
      ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(v2);
      qword_1EB3227F8 = (uint64_t)&ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322800 = ggl::crc32::compute<33ul>("PolygonOverlayFillShaderFragment");
      qword_1EB322808 = (uint64_t)ggl::polygonOverlayFillShaderShaderConstants(void)::ref;
      unk_1EB322810 = 4;
      qword_1EB322818 = (uint64_t)&ggl::polygonOverlayFillShaderShaderTextures(void)::ref;
      unk_1EB322820 = 0;
      qword_1EB322828 = (uint64_t)&ggl::polygonOverlayFillShaderShaderSamplers(void)::ref;
      unk_1EB322830 = 0;
    }
  }
}

void ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolygonOverlayFillShaderFragment");
    *(_DWORD *)algn_1EB328DCC = 1;
    qword_1EB328DD0 = (uint64_t)"PolygonOverlayFillShader";
    unk_1EB328DD8 = 0;
    qword_1EB328DE0 = 0;
    unk_1EB328DE8 = &ggl::polygonOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328DF0 = 2;
    unk_1EB328DF8 = &ggl::polygonOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328E00 = 0;
    unk_1EB328E08 = &ggl::polygonOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328E10 = 0;
    unk_1EB328E18 = &ggl::polygonOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328E28 = 0;
    unk_1EB328E30 = 0;
    qword_1EB328E20 = 0;
  }
}

void ggl::polygonOverlayFillShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonOverlayFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("PolygonOverlayFillShaderVertex");
    *(_DWORD *)algn_1EB328134 = 0;
    qword_1EB328138 = (uint64_t)"PolygonOverlayFillShader";
    unk_1EB328140 = ggl::polygonOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB328148 = 1;
    unk_1EB328150 = &ggl::polygonOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328158 = 3;
    unk_1EB328160 = &ggl::polygonOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328168 = 0;
    unk_1EB328170 = &ggl::polygonOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328178 = 0;
    unk_1EB328180 = &ggl::polygonOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328190 = 0;
    unk_1EB328198 = 0;
    qword_1EB328188 = 0;
  }
}

void ggl::DiffuseBuildingTopShader::typedReflection(ggl::DiffuseBuildingTopShader *this)
{
  {
    if (v1)
    {
      ggl::DiffuseBuildingTopShader::typedReflection(void)::ref = (uint64_t)"DiffuseBuildingTopShader";
      ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(v1);
      qword_1EB3226D8 = (uint64_t)&ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("DiffuseBuildingTopShaderVertex");
      dword_1EB3226E0 = (int)v2;
      ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(v2);
      qword_1EB3226E8 = (uint64_t)&ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3226F0 = ggl::crc32::compute<33ul>("DiffuseBuildingTopShaderFragment");
      qword_1EB3226F8 = (uint64_t)ggl::diffuseBuildingTopShaderShaderConstants(void)::ref;
      unk_1EB322700 = 7;
      qword_1EB322708 = (uint64_t)&ggl::diffuseBuildingTopShaderShaderTextures(void)::ref;
      unk_1EB322710 = 0;
      qword_1EB322718 = (uint64_t)&ggl::diffuseBuildingTopShaderShaderSamplers(void)::ref;
      unk_1EB322720 = 0;
    }
  }
}

void ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("DiffuseBuildingTopShaderFragment");
    *(_DWORD *)algn_1EB328C6C = 1;
    qword_1EB328C70 = (uint64_t)"DiffuseBuildingTopShader";
    unk_1EB328C78 = 0;
    qword_1EB328C80 = 0;
    unk_1EB328C88 = &ggl::diffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328C90 = 3;
    unk_1EB328C98 = &ggl::diffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328CA0 = 0;
    unk_1EB328CA8 = &ggl::diffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328CB0 = 0;
    unk_1EB328CB8 = &ggl::diffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328CC8 = 0;
    unk_1EB328CD0 = 0;
    qword_1EB328CC0 = 0;
  }
}

void ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("DiffuseBuildingTopShaderVertex");
    *(_DWORD *)algn_1EB327F64 = 0;
    qword_1EB327F68 = (uint64_t)"DiffuseBuildingTopShader";
    unk_1EB327F70 = ggl::diffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327F78 = 1;
    unk_1EB327F80 = &ggl::diffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327F88 = 6;
    unk_1EB327F90 = &ggl::diffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327F98 = 0;
    unk_1EB327FA0 = &ggl::diffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327FA8 = 0;
    unk_1EB327FB0 = &ggl::diffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327FC0 = 0;
    unk_1EB327FC8 = 0;
    qword_1EB327FB8 = 0;
  }
}

void ggl::DaVinciGroundDepthShader::typedReflection(ggl::DaVinciGroundDepthShader *this)
{
  {
    if (v1)
    {
      ggl::DaVinciGroundDepthShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundDepthShader";
      ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(v1);
      qword_1EB31A2C0 = (uint64_t)&ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("DaVinciGroundDepthShaderVertex");
      dword_1EB31A2C8 = (int)v2;
      ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(v2);
      qword_1EB31A2D0 = (uint64_t)&ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31A2D8 = ggl::crc32::compute<33ul>("DaVinciGroundDepthShaderFragment");
      qword_1EB31A2E0 = (uint64_t)ggl::daVinciGroundDepthShaderShaderConstants(void)::ref;
      unk_1EB31A2E8 = 4;
      qword_1EB31A2F0 = (uint64_t)&ggl::daVinciGroundDepthShaderShaderTextures(void)::ref;
      unk_1EB31A2F8 = 0;
      qword_1EB31A300 = (uint64_t)&ggl::daVinciGroundDepthShaderShaderSamplers(void)::ref;
      unk_1EB31A308 = 0;
    }
  }
}

void ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("DaVinciGroundDepthShaderFragment");
    *(_DWORD *)algn_1EB31AB64 = 1;
    qword_1EB31AB68 = (uint64_t)"DaVinciGroundDepthShader";
    unk_1EB31AB70 = 0;
    qword_1EB31AB78 = 0;
    unk_1EB31AB80 = &ggl::daVinciGroundDepthShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31AB88 = 1;
    unk_1EB31AB90 = &ggl::daVinciGroundDepthShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31AB98 = 0;
    unk_1EB31ABA0 = &ggl::daVinciGroundDepthShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31ABA8 = 0;
    unk_1EB31ABB0 = &ggl::daVinciGroundDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31ABC0 = 0;
    unk_1EB31ABC8 = 0;
    qword_1EB31ABB8 = 0;
  }
}

void ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("DaVinciGroundDepthShaderVertex");
    *(_DWORD *)algn_1EB31A99C = 0;
    qword_1EB31A9A0 = (uint64_t)"DaVinciGroundDepthShader";
    unk_1EB31A9A8 = ggl::daVinciGroundDepthShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31A9B0 = 3;
    unk_1EB31A9B8 = &ggl::daVinciGroundDepthShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31A9C0 = 4;
    unk_1EB31A9C8 = &ggl::daVinciGroundDepthShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31A9D0 = 2;
    unk_1EB31A9D8 = &ggl::daVinciGroundDepthShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31A9E0 = 0;
    unk_1EB31A9E8 = &ggl::daVinciGroundDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31A9F8 = 0;
    unk_1EB31AA00 = 0;
    qword_1EB31A9F0 = 0;
  }
}

void ggl::PatternedRouteLineShader::typedReflection(ggl::PatternedRouteLineShader *this)
{
  {
    if (v1)
    {
      ggl::PatternedRouteLineShader::typedReflection(void)::ref = (uint64_t)"PatternedRouteLineShader";
      ggl::patternedRouteLineShaderVertexFunctionDescriptor(v1);
      qword_1EB322790 = (uint64_t)&ggl::patternedRouteLineShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("PatternedRouteLineShaderVertex");
      dword_1EB322798 = (int)v2;
      ggl::patternedRouteLineShaderFragmentFunctionDescriptor(v2);
      qword_1EB3227A0 = (uint64_t)&ggl::patternedRouteLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3227A8 = ggl::crc32::compute<33ul>("PatternedRouteLineShaderFragment");
      qword_1EB3227B0 = (uint64_t)ggl::patternedRouteLineShaderShaderConstants(void)::ref;
      unk_1EB3227B8 = 4;
      qword_1EB3227C0 = (uint64_t)ggl::patternedRouteLineShaderShaderTextures(void)::ref;
      unk_1EB3227C8 = 1;
      qword_1EB3227D0 = (uint64_t)ggl::patternedRouteLineShaderShaderSamplers(void)::ref;
      unk_1EB3227D8 = 1;
    }
  }
}

void ggl::patternedRouteLineShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::patternedRouteLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PatternedRouteLineShaderFragment");
    *(_DWORD *)algn_1EB328D54 = 1;
    qword_1EB328D58 = (uint64_t)"PatternedRouteLineShader";
    unk_1EB328D60 = 0;
    qword_1EB328D68 = 0;
    unk_1EB328D70 = &ggl::patternedRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328D78 = 1;
    unk_1EB328D80 = &ggl::patternedRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328D88 = 0;
    unk_1EB328D90 = &ggl::patternedRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328D98 = 1;
    unk_1EB328DA0 = &ggl::patternedRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328DB0 = 0;
    unk_1EB328DB8 = 0;
    qword_1EB328DA8 = 1;
  }
}

void ggl::patternedRouteLineShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::patternedRouteLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("PatternedRouteLineShaderVertex");
    *(_DWORD *)algn_1EB3280BC = 0;
    qword_1EB3280C0 = (uint64_t)"PatternedRouteLineShader";
    unk_1EB3280C8 = ggl::patternedRouteLineShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3280D0 = 1;
    unk_1EB3280D8 = &ggl::patternedRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3280E0 = 3;
    unk_1EB3280E8 = &ggl::patternedRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3280F0 = 0;
    unk_1EB3280F8 = &ggl::patternedRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328100 = 0;
    unk_1EB328108 = &ggl::patternedRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328118 = 0;
    unk_1EB328120 = 0;
    qword_1EB328110 = 0;
  }
}

void ggl::MaskingOverlayFillShader::typedReflection(ggl::MaskingOverlayFillShader *this)
{
  {
    if (v1)
    {
      ggl::MaskingOverlayFillShader::typedReflection(void)::ref = (uint64_t)"MaskingOverlayFillShader";
      ggl::maskingOverlayFillShaderVertexFunctionDescriptor(v1);
      qword_1EB317BF8 = (uint64_t)&ggl::maskingOverlayFillShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("MaskingOverlayFillShaderVertex");
      dword_1EB317C00 = (int)v2;
      ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(v2);
      qword_1EB317C08 = (uint64_t)&ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB317C10 = ggl::crc32::compute<33ul>("MaskingOverlayFillShaderFragment");
      qword_1EB317C18 = (uint64_t)ggl::maskingOverlayFillShaderShaderConstants(void)::ref;
      unk_1EB317C20 = 3;
      qword_1EB317C28 = (uint64_t)ggl::maskingOverlayFillShaderShaderTextures(void)::ref;
      unk_1EB317C30 = 1;
      qword_1EB317C38 = (uint64_t)ggl::maskingOverlayFillShaderShaderSamplers(void)::ref;
      unk_1EB317C40 = 1;
    }
  }
}

void ggl::BuildingFlatStrokeShader::typedReflection(ggl::BuildingFlatStrokeShader *this)
{
  {
    if (v1)
    {
      ggl::BuildingFlatStrokeShader::typedReflection(void)::ref = (uint64_t)"BuildingFlatStrokeShader";
      ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(v1);
      qword_1EB322680 = (uint64_t)&ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("BuildingFlatStrokeShaderVertex");
      dword_1EB322688 = (int)v2;
      ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(v2);
      qword_1EB322690 = (uint64_t)&ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322698 = ggl::crc32::compute<33ul>("BuildingFlatStrokeShaderFragment");
      qword_1EB3226A0 = (uint64_t)ggl::buildingFlatStrokeShaderShaderConstants(void)::ref;
      unk_1EB3226A8 = 2;
      qword_1EB3226B0 = (uint64_t)ggl::buildingFlatStrokeShaderShaderTextures(void)::ref;
      unk_1EB3226B8 = 1;
      qword_1EB3226C0 = (uint64_t)&ggl::buildingFlatStrokeShaderShaderSamplers(void)::ref;
      unk_1EB3226C8 = 1;
    }
  }
}

void ggl::SolidMaskedTrafficShader::typedReflection(ggl::SolidMaskedTrafficShader *this)
{
  {
    if (v1)
    {
      ggl::SolidMaskedTrafficShader::typedReflection(void)::ref = (uint64_t)"SolidMaskedTrafficShader";
      ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(v1);
      qword_1EB322840 = (uint64_t)&ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<31ul>("SolidMaskedTrafficShaderVertex");
      dword_1EB322848 = (int)v2;
      ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(v2);
      qword_1EB322850 = (uint64_t)&ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322858 = ggl::crc32::compute<33ul>("SolidMaskedTrafficShaderFragment");
      qword_1EB322860 = (uint64_t)ggl::solidMaskedTrafficShaderShaderConstants(void)::ref;
      unk_1EB322868 = 3;
      qword_1EB322870 = (uint64_t)ggl::solidMaskedTrafficShaderShaderTextures(void)::ref;
      unk_1EB322878 = 1;
      qword_1EB322880 = (uint64_t)&ggl::solidMaskedTrafficShaderShaderSamplers(void)::ref;
      unk_1EB322888 = 1;
    }
  }
}

uint64_t ggl::crc32::compute<33ul>(char *a1)
{
  int v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  unsigned int v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  unsigned int v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  unsigned int v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  unsigned int v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  unsigned int v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  unsigned int v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  unsigned int v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  unsigned int v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  unsigned int v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  unsigned int v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  unsigned int v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  unsigned int v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  unsigned int v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  unsigned int v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  unsigned int v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  unsigned int v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  unsigned int v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  unsigned int v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  unsigned int v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  unsigned int v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  unsigned int v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  unsigned int v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  unsigned int v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  unsigned int v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  unsigned int v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  unsigned int v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  unsigned int v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  unsigned int v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  return ggl::crc32::crc32Table[v29 ^ a1[31]] ^ ~(v29 >> 8);
}

void ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("SolidMaskedTrafficShaderFragment");
    *(_DWORD *)algn_1EB328EB4 = 1;
    qword_1EB328EB8 = (uint64_t)"SolidMaskedTrafficShader";
    unk_1EB328EC0 = 0;
    qword_1EB328EC8 = 0;
    unk_1EB328ED0 = &ggl::solidMaskedTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328ED8 = 1;
    unk_1EB328EE0 = &ggl::solidMaskedTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328EE8 = 0;
    unk_1EB328EF0 = &ggl::solidMaskedTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328EF8 = 1;
    unk_1EB328F00 = &ggl::solidMaskedTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328F10 = 0;
    unk_1EB328F18 = 0;
    qword_1EB328F08 = 1;
  }
}

void ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("MaskingOverlayFillShaderFragment");
    *(_DWORD *)algn_1EB3183BC = 1;
    qword_1EB3183C0 = (uint64_t)"MaskingOverlayFillShader";
    unk_1EB3183C8 = 0;
    qword_1EB3183D0 = 0;
    unk_1EB3183D8 = &ggl::maskingOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3183E0 = 1;
    unk_1EB3183E8 = &ggl::maskingOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3183F0 = 0;
    unk_1EB3183F8 = &ggl::maskingOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB318400 = 1;
    unk_1EB318408 = &ggl::maskingOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318418 = 0;
    unk_1EB318420 = 0;
    qword_1EB318410 = 1;
  }
}

void ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("BuildingFlatStrokeShaderFragment");
    *(_DWORD *)algn_1EB328BF4 = 1;
    qword_1EB328BF8 = (uint64_t)"BuildingFlatStrokeShader";
    unk_1EB328C00 = 0;
    qword_1EB328C08 = 0;
    unk_1EB328C10 = &ggl::buildingFlatStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328C18 = 0;
    unk_1EB328C20 = &ggl::buildingFlatStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328C28 = 0;
    unk_1EB328C30 = &ggl::buildingFlatStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328C38 = 1;
    unk_1EB328C40 = &ggl::buildingFlatStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328C50 = 0;
    unk_1EB328C58 = 0;
    qword_1EB328C48 = 1;
  }
}

void ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("SolidMaskedTrafficShaderVertex");
    *(_DWORD *)algn_1EB32828C = 0;
    qword_1EB328290 = (uint64_t)"SolidMaskedTrafficShader";
    unk_1EB328298 = ggl::solidMaskedTrafficShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3282A0 = 1;
    unk_1EB3282A8 = &ggl::solidMaskedTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3282B0 = 3;
    unk_1EB3282B8 = &ggl::solidMaskedTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3282C0 = 0;
    unk_1EB3282C8 = &ggl::solidMaskedTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3282D0 = 0;
    unk_1EB3282D8 = &ggl::solidMaskedTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3282E8 = 0;
    unk_1EB3282F0 = 0;
    qword_1EB3282E0 = 0;
  }
}

void ggl::maskingOverlayFillShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::maskingOverlayFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("MaskingOverlayFillShaderVertex");
    *(_DWORD *)algn_1EB318174 = 0;
    qword_1EB318178 = (uint64_t)"MaskingOverlayFillShader";
    unk_1EB318180 = ggl::maskingOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB318188 = 1;
    unk_1EB318190 = &ggl::maskingOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB318198 = 3;
    unk_1EB3181A0 = &ggl::maskingOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3181A8 = 0;
    unk_1EB3181B0 = &ggl::maskingOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3181B8 = 0;
    unk_1EB3181C0 = &ggl::maskingOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3181D0 = 0;
    unk_1EB3181D8 = 0;
    qword_1EB3181C8 = 0;
  }
}

void ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("BuildingFlatStrokeShaderVertex");
    *(_DWORD *)algn_1EB327E7C = 0;
    qword_1EB327E80 = (uint64_t)"BuildingFlatStrokeShader";
    unk_1EB327E88 = ggl::buildingFlatStrokeShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327E90 = 1;
    unk_1EB327E98 = &ggl::buildingFlatStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327EA0 = 2;
    unk_1EB327EA8 = &ggl::buildingFlatStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327EB0 = 0;
    unk_1EB327EB8 = &ggl::buildingFlatStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327EC0 = 0;
    unk_1EB327EC8 = &ggl::buildingFlatStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327ED8 = 0;
    unk_1EB327EE0 = 0;
    qword_1EB327ED0 = 0;
  }
}

void ___ZN2md16LabelWorldTraits29initializeGlobalDebugSettingsEv_block_invoke()
{
  id v0 = +[VKDebugSettings sharedSettings];
  [v0 labelStyleOverridesDisabled];
  md::DebugStreamingPOIFeatureID = GEOConfigGetUint64();
}

void sub_1A1C20A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__call_once_proxy[abi:nn180100]<std::tuple<md::DaVinciCenterLineRoadsTileData::estimatedCost(void)::$_0 &&>>()
{
  uint64_t result = GEOConfigGetUInteger();
  md::DaVinciCenterLineRoadsTileData::estimatedCost(void)const::metalBufferCacheCountMaximuuint64_t m = result;
  return result;
}

unint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *a4;
  int v13 = *(_DWORD *)(*a5 + 20);
  int v14 = *(_DWORD *)(*a4 + 20);
  if (v13 == v14)
  {
    double v15 = *(double *)(v11 + 32);
    double v16 = *(double *)(v12 + 32);
    if (v15 == v16)
    {
      if (v11 >= v12) {
        return result;
      }
    }
    else if (v15 <= v16)
    {
      return result;
    }
  }
  else if (v13 >= v14)
  {
    return result;
  }
  *a4 = v11;
  *a5 = v12;
  unint64_t v17 = *a4;
  unint64_t v18 = *a3;
  int v19 = *(_DWORD *)(*a4 + 20);
  int v20 = *(_DWORD *)(*a3 + 20);
  if (v19 == v20)
  {
    double v21 = *(double *)(v17 + 32);
    double v22 = *(double *)(v18 + 32);
    if (v21 == v22)
    {
      if (v17 >= v18) {
        return result;
      }
    }
    else if (v21 <= v22)
    {
      return result;
    }
  }
  else if (v19 >= v20)
  {
    return result;
  }
  *a3 = v17;
  *a4 = v18;
  unint64_t v23 = *a3;
  unint64_t v24 = *a2;
  int v25 = *(_DWORD *)(*a3 + 20);
  int v26 = *(_DWORD *)(*a2 + 20);
  if (v25 == v26)
  {
    double v27 = *(double *)(v23 + 32);
    double v28 = *(double *)(v24 + 32);
    if (v27 == v28)
    {
      if (v23 >= v24) {
        return result;
      }
    }
    else if (v27 <= v28)
    {
      return result;
    }
  }
  else if (v25 >= v26)
  {
    return result;
  }
  *a2 = v23;
  *a3 = v24;
  unint64_t v29 = *a2;
  unint64_t v30 = *a1;
  int v31 = *(_DWORD *)(*a2 + 20);
  int v32 = *(_DWORD *)(*a1 + 20);
  if (v31 == v32)
  {
    double v33 = *(double *)(v29 + 32);
    double v34 = *(double *)(v30 + 32);
    if (v33 == v34)
    {
      if (v29 >= v30) {
        return result;
      }
    }
    else if (v33 <= v34)
    {
      return result;
    }
  }
  else if (v31 >= v32)
  {
    return result;
  }
  *a1 = v29;
  *a2 = v30;
  return result;
}

unint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a2, a3);
  unint64_t v9 = *a4;
  unint64_t v10 = *a3;
  int v11 = *(_DWORD *)(*a4 + 20);
  int v12 = *(_DWORD *)(*a3 + 20);
  if (v11 == v12)
  {
    double v13 = *(double *)(v9 + 32);
    double v14 = *(double *)(v10 + 32);
    if (v13 == v14)
    {
      if (v9 >= v10) {
        return result;
      }
    }
    else if (v13 <= v14)
    {
      return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  unint64_t v15 = *a3;
  unint64_t v16 = *a2;
  int v17 = *(_DWORD *)(*a3 + 20);
  int v18 = *(_DWORD *)(*a2 + 20);
  if (v17 == v18)
  {
    double v19 = *(double *)(v15 + 32);
    double v20 = *(double *)(v16 + 32);
    if (v19 == v20)
    {
      if (v15 >= v16) {
        return result;
      }
    }
    else if (v19 <= v20)
    {
      return result;
    }
  }
  else if (v17 >= v18)
  {
    return result;
  }
  *a2 = v15;
  *a3 = v16;
  unint64_t v21 = *a2;
  unint64_t v22 = *a1;
  int v23 = *(_DWORD *)(*a2 + 20);
  int v24 = *(_DWORD *)(*a1 + 20);
  if (v23 == v24)
  {
    double v25 = *(double *)(v21 + 32);
    double v26 = *(double *)(v22 + 32);
    if (v25 == v26)
    {
      if (v21 >= v22) {
        return result;
      }
    }
    else if (v25 <= v26)
    {
      return result;
    }
  }
  else if (v23 >= v24)
  {
    return result;
  }
  *a1 = v21;
  *a2 = v22;
  return result;
}

unint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  int v5 = *(_DWORD *)(*a2 + 20);
  int v6 = *(_DWORD *)(*result + 20);
  if (v5 != v6)
  {
    if (v5 >= v6) {
      goto LABEL_4;
    }
LABEL_9:
    unint64_t v13 = *a3;
    int v14 = *(_DWORD *)(*a3 + 20);
    if (v14 == v5)
    {
      double v15 = *(double *)(v13 + 32);
      double v16 = *(double *)(v3 + 32);
      if (v15 != v16)
      {
        if (v15 <= v16) {
          goto LABEL_12;
        }
LABEL_19:
        *uint64_t result = v13;
        *a3 = v4;
        return result;
      }
      if (v13 < v3) {
        goto LABEL_19;
      }
    }
    else if (v14 < v5)
    {
      goto LABEL_19;
    }
LABEL_12:
    *uint64_t result = v3;
    *a2 = v4;
    unint64_t v17 = *a3;
    int v18 = *(_DWORD *)(*a3 + 20);
    if (v18 == v6)
    {
      double v19 = *(double *)(v17 + 32);
      double v20 = *(double *)(v4 + 32);
      if (v19 == v20)
      {
        if (v17 >= v4) {
          return result;
        }
      }
      else if (v19 <= v20)
      {
        return result;
      }
    }
    else if (v18 >= v6)
    {
      return result;
    }
    *a2 = v17;
    *a3 = v4;
    return result;
  }
  double v7 = *(double *)(v3 + 32);
  double v8 = *(double *)(v4 + 32);
  if (v7 == v8)
  {
    if (v3 >= v4) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (v7 > v8) {
    goto LABEL_9;
  }
LABEL_4:
  unint64_t v9 = *a3;
  int v10 = *(_DWORD *)(*a3 + 20);
  if (v10 == v5)
  {
    double v11 = *(double *)(v9 + 32);
    double v12 = *(double *)(v3 + 32);
    if (v11 == v12)
    {
      if (v9 >= v3) {
        return result;
      }
    }
    else if (v11 <= v12)
    {
      return result;
    }
  }
  else if (v10 >= v5)
  {
    return result;
  }
  *a2 = v9;
  *a3 = v3;
  unint64_t v21 = *a2;
  unint64_t v22 = *result;
  int v23 = *(_DWORD *)(*a2 + 20);
  int v24 = *(_DWORD *)(*result + 20);
  if (v23 != v24)
  {
    if (v23 >= v24) {
      return result;
    }
    goto LABEL_36;
  }
  double v25 = *(double *)(v21 + 32);
  double v26 = *(double *)(v22 + 32);
  if (v25 == v26)
  {
    if (v21 < v22)
    {
LABEL_36:
      *uint64_t result = v21;
      *a2 = v22;
    }
  }
  else if (v25 > v26)
  {
    goto LABEL_36;
  }
  return result;
}

void sub_1A1C20F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

os_log_t __GEOGetVectorKitVKDefaultLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "VKDefault");
  GEOGetVectorKitVKDefaultLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitRouteLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "Route");
  GEOGetVectorKitRouteLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitResourceLoadingLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "ResourceLoading");
  GEOGetVectorKitResourceLoadingLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitPerformanceLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "Performance");
  GEOGetVectorKitPerformanceLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitPerformanceDetailsLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "PerformanceDetails");
  GEOGetVectorKitPerformanceDetailsLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitElevatedStrokesLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "ElevatedStrokes");
  GEOGetVectorKitElevatedStrokesLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoGLPerformanceLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoGL", "Performance");
  GEOGetGeoGLPerformanceLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoGLPerformanceDetailLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoGL", "PerformanceDetail");
  GEOGetGeoGLPerformanceDetailLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoGLDefaultLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoGL", "Default");
  GEOGetGeoGLDefaultLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoDisplayCoreResourceLoadingLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "ResourceLoading");
  GEOGetGeoDisplayCoreResourceLoadingLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoDisplayCoreDefaultLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "Default");
  GEOGetGeoDisplayCoreDefaultLog::log = (uint64_t)result;
  return result;
}

void sub_1A1C213D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void gdc::ResourceStore::failed(gdc::ResourceStore *this, void *a2, const gdc::ResourceKey *a3, const gdc::Error *a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  double v8 = (std::mutex *)((char *)this + 128);
  std::mutex::lock((std::mutex *)this + 2);
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  unint64_t v9 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str((std::string *)&__p, (unsigned __int8 *)a3);
    int v10 = (SBYTE7(v68) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315394;
    double v77 = v10;
    __int16 v78 = 2048;
    double v79 = a2;
    _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_DEBUG, "Resource Failed: %s, rid: %llu", buf, 0x16u);
    if (SBYTE7(v68) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v11 = *(void *)a3;
  double v12 = (char *)*((void *)a3 + 1);
  __p = a2;
  uint64_t v67 = v11;
  unint64_t v13 = v70;
  *(void *)&long long v68 = v70;
  *((void *)&v68 + 1) = v70;
  *(void *)&long long v69 = v70;
  *((void *)&v69 + 1) = 32;
  int v14 = (char *)*((void *)a3 + 2);
  unint64_t v15 = v14 - v12;
  if ((unint64_t)(v14 - v12) >= 0x21)
  {
    if (v15 <= 0x40) {
      size_t v16 = 64;
    }
    else {
      size_t v16 = v14 - v12;
    }
    unint64_t v13 = malloc_type_malloc(v16, 0x100004077774924uLL);
    int v18 = (char *)*((void *)&v68 + 1);
    unint64_t v17 = (char *)v68;
    if ((void)v68 == *((void *)&v68 + 1)) {
      goto LABEL_29;
    }
    unint64_t v19 = *((void *)&v68 + 1) - v68;
    if (*((void *)&v68 + 1) - (void)v68 < 8uLL)
    {
      double v20 = v13;
      goto LABEL_28;
    }
    double v20 = v13;
    if ((unint64_t)&v13[-v68] < 0x20) {
      goto LABEL_28;
    }
    if (v19 >= 0x20)
    {
      unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v22 = (long long *)(v68 + 16);
      int v23 = v13 + 16;
      unint64_t v24 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 32;
      }
      while (v24);
      if (v19 == v21) {
        goto LABEL_29;
      }
      if ((v19 & 0x18) == 0)
      {
        v17 += v21;
        double v20 = &v13[v21];
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    unint64_t v26 = v19 & 0xFFFFFFFFFFFFFFF8;
    double v20 = &v13[v19 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v27 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
    double v28 = (uint64_t *)&v17[v21];
    unint64_t v29 = &v13[v21];
    do
    {
      uint64_t v30 = *v28++;
      *v29++ = v30;
      v27 += 8;
    }
    while (v27);
    if (v19 == v26) {
      goto LABEL_29;
    }
    v17 += v26;
    do
    {
LABEL_28:
      char v31 = *v17++;
      *v20++ = v31;
    }
    while (v17 != v18);
LABEL_29:
    *(void *)&long long v68 = v13;
    *((void *)&v68 + 1) = v13;
    *((void *)&v69 + 1) = v16;
  }
  if (v12 == v14) {
    goto LABEL_48;
  }
  if (v15 < 8)
  {
    double v33 = v13;
    goto LABEL_46;
  }
  if ((unint64_t)(v13 - v12) < 0x20)
  {
    double v33 = v13;
    goto LABEL_46;
  }
  if (v15 >= 0x20)
  {
    unint64_t v32 = v15 & 0xFFFFFFFFFFFFFFE0;
    double v34 = (long long *)(v12 + 16);
    uint64_t v35 = v13 + 16;
    unint64_t v36 = v15 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v37 = *v34;
      *(v35 - 1) = *(v34 - 1);
      *uint64_t v35 = v37;
      v34 += 2;
      v35 += 2;
      v36 -= 32;
    }
    while (v36);
    if (v15 == v32) {
      goto LABEL_47;
    }
    if ((v15 & 0x18) == 0)
    {
      v12 += v32;
      double v33 = &v13[v32];
      goto LABEL_46;
    }
  }
  else
  {
    unint64_t v32 = 0;
  }
  unint64_t v38 = v15 & 0xFFFFFFFFFFFFFFF8;
  double v33 = &v13[v15 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v39 = v32 - (v15 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v40 = (uint64_t *)&v12[v32];
  unint64_t v41 = &v13[v32];
  do
  {
    uint64_t v42 = *v40++;
    *v41++ = v42;
    v39 += 8;
  }
  while (v39);
  if (v15 == v38) {
    goto LABEL_47;
  }
  v12 += v38;
  do
  {
LABEL_46:
    char v43 = *v12++;
    *v33++ = v43;
  }
  while (v12 != v14);
LABEL_47:
  unint64_t v13 = (unsigned char *)*((void *)&v68 + 1);
LABEL_48:
  uint64_t v44 = *((void *)a3 + 9);
  *((void *)&v68 + 1) = &v13[v15];
  uint64_t v71 = v44;
  long long v72 = *((_OWORD *)a3 + 5);
  id v73 = *(const std::string::value_type **)a4;
  if (*((char *)a4 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v74, *((const std::string::value_type **)a4 + 1), *((void *)a4 + 2));
  }
  else {
    std::string v74 = *(std::string *)((char *)a4 + 8);
  }
  if (*((char *)a4 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v75, *((const std::string::value_type **)a4 + 4), *((void *)a4 + 5));
  }
  else {
    std::string v75 = *(std::string *)((char *)a4 + 32);
  }
  unint64_t v45 = *((void *)this + 28);
  if (v45 < *((void *)this + 29))
  {
    *(void *)unint64_t v45 = __p;
    unint64_t v46 = (unsigned char *)(v45 + 48);
    *(void *)(v45 + 8) = v67;
    *(void *)(v45 + 16) = v45 + 48;
    *(void *)(v45 + 24) = v45 + 48;
    *(void *)(v45 + 32) = v45 + 48;
    uint64_t v47 = v69;
    *(void *)(v45 + 40) = *((void *)&v69 + 1);
    uint64_t v48 = (char *)v68;
    if ((void)v68 != v47)
    {
      *(_OWORD *)(v45 + 16) = v68;
      long long v68 = 0u;
      long long v69 = 0u;
LABEL_74:
      *(void *)(v45 + 80) = v71;
      *(_OWORD *)(v45 + 88) = v72;
      *(void *)(v45 + 104) = v73;
      long long v64 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
      *(void *)(v45 + 128) = *((void *)&v74.__r_.__value_.__l + 2);
      *(_OWORD *)(v45 + 112) = v64;
      memset(&v74, 0, sizeof(v74));
      std::string::size_type v65 = v75.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v45 + 136) = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(void *)(v45 + 152) = v65;
      memset(&v75, 0, sizeof(v75));
      *((void *)this + 28) = v45 + 160;
      goto LABEL_75;
    }
    *(void *)(v45 + 24) = &v46[*((void *)&v68 + 1) - v68];
    int64_t v51 = (char *)*((void *)&v68 + 1);
    if (v48 == *((char **)&v68 + 1)) {
      goto LABEL_74;
    }
    unint64_t v52 = *((void *)&v68 + 1) - (void)v48;
    if (*((void *)&v68 + 1) - (void)v48 >= 8uLL && v45 - (unint64_t)v48 + 48 >= 0x20)
    {
      if (v52 < 0x20)
      {
        uint64_t v53 = 0;
LABEL_68:
        unint64_t v58 = v52 & 0xFFFFFFFFFFFFFFF8;
        v46 += v52 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v59 = v53 - (v52 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v60 = (uint64_t *)&v48[v53];
        uint64_t v61 = (void *)(v53 + v45 + 48);
        do
        {
          uint64_t v62 = *v60++;
          *v61++ = v62;
          v59 += 8;
        }
        while (v59);
        if (v52 == v58) {
          goto LABEL_74;
        }
        v48 += v58;
        goto LABEL_73;
      }
      uint64_t v53 = v52 & 0xFFFFFFFFFFFFFFE0;
      long long v54 = (long long *)(v48 + 16);
      char v55 = (_OWORD *)(v45 + 64);
      unint64_t v56 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v57 = *v54;
        *(v55 - 1) = *(v54 - 1);
        _OWORD *v55 = v57;
        v54 += 2;
        v55 += 2;
        v56 -= 32;
      }
      while (v56);
      if (v52 == v53) {
        goto LABEL_74;
      }
      if ((v52 & 0x18) != 0) {
        goto LABEL_68;
      }
      v48 += v53;
      v46 += v53;
    }
    do
    {
LABEL_73:
      char v63 = *v48++;
      *v46++ = v63;
    }
    while (v48 != v51);
    goto LABEL_74;
  }
  __int16 v49 = std::vector<gdc::ResourceRequest>::__push_back_slow_path<gdc::ResourceRequest>((void ***)this + 27, (uint64_t)&__p);
  int v50 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
  *((void *)this + 28) = v49;
  if (v50 < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
LABEL_75:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if ((void)v68 != (void)v69) {
    free((void *)v68);
  }
  std::mutex::unlock(v8);
}

char *std::vector<gdc::ResourceRequest>::__push_back_slow_path<gdc::ResourceRequest>(void ***a1, uint64_t a2)
{
  uint64_t v2 = (char *)a1[1] - (char *)*a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 5) + 1;
  if (v3 > 0x199999999999999) {
    abort();
  }
  if (0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    double v7 = operator new(160 * v6);
  }
  else
  {
    double v7 = 0;
  }
  double v8 = &v7[32 * (v2 >> 5)];
  *(_OWORD *)double v8 = *(_OWORD *)a2;
  unint64_t v9 = v8 + 48;
  *((void *)v8 + 2) = v8 + 48;
  int v10 = *(char **)(a2 + 16);
  double v12 = *(char **)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  *((void *)v8 + 4) = v8 + 48;
  *((void *)v8 + 5) = v11;
  unint64_t v13 = v8 + 24;
  if (v10 != v12)
  {
    *((void *)v8 + 2) = v10;
    *unint64_t v13 = *(void *)(a2 + 24);
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    goto LABEL_28;
  }
  int v14 = *(char **)(a2 + 24);
  unint64_t v15 = v14 - v10;
  *unint64_t v13 = &v9[v14 - v10];
  if (v14 != v10)
  {
    if (v15 < 8 || (unint64_t)(&v7[v2] - v10 + 48) < 0x20) {
      goto LABEL_27;
    }
    if (v15 >= 0x20)
    {
      unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v17 = (long long *)(v10 + 16);
      int v18 = &v7[32 * (v2 >> 5) + 64];
      unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        _OWORD *v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 32;
      }
      while (v19);
      if (v15 == v16) {
        goto LABEL_28;
      }
      if ((v15 & 0x18) == 0)
      {
        v10 += v16;
        v9 += v16;
        do
        {
LABEL_27:
          char v26 = *v10++;
          *v9++ = v26;
        }
        while (v10 != v14);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v21 = v15 & 0xFFFFFFFFFFFFFFF8;
    v9 += v15 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = v16 - (v15 & 0xFFFFFFFFFFFFFFF8);
    int v23 = (uint64_t *)&v10[v16];
    unint64_t v24 = &v7[32 * (v2 >> 5) + 48 + v16];
    do
    {
      uint64_t v25 = *v23++;
      *v24++ = v25;
      v22 += 8;
    }
    while (v22);
    if (v15 != v21)
    {
      v10 += v21;
      goto LABEL_27;
    }
  }
LABEL_28:
  unint64_t v27 = &v7[32 * (v2 >> 5)];
  *((void *)v27 + 10) = *(void *)(a2 + 80);
  *(_OWORD *)(v27 + 88) = *(_OWORD *)(a2 + 88);
  double v28 = (void **)&v7[160 * v6];
  *((void *)v27 + 13) = *(void *)(a2 + 104);
  *((_OWORD *)v27 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v27 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(v27 + 136) = *(_OWORD *)(a2 + 136);
  *((void *)v27 + 19) = *(void *)(a2 + 152);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  unint64_t v29 = v8 + 160;
  uint64_t v30 = *a1;
  char v31 = a1[1];
  if (v31 != *a1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = (uint64_t)&v7[v2 - 112];
    double v34 = a1[1];
    while (1)
    {
      unint64_t v38 = v8;
      uint64_t v39 = (uint64_t)*(v34 - 20);
      v34 -= 20;
      *((void *)v8 - 20) = v39;
      v8 -= 160;
      uint64_t v40 = v8 + 48;
      *((void *)v8 + 1) = *(v31 - 19);
      *((void *)v8 + 2) = v8 + 48;
      unint64_t v41 = (char *)*(v31 - 18);
      *((void *)v8 + 3) = v8 + 48;
      *((void *)v8 + 4) = v8 + 48;
      uint64_t v42 = (char *)*(v31 - 16);
      *((void *)v8 + 5) = *(v31 - 15);
      if (v41 == v42)
      {
        *((void *)v38 - 17) = &v40[(unsigned char *)*(v31 - 17) - v41];
        char v43 = (char *)*(v31 - 17);
        if (v41 != v43)
        {
          unint64_t v44 = v43 - v41;
          if ((unint64_t)(v43 - v41) >= 8 && (unint64_t)(v33 - 160 * v32 - (void)v41) >= 0x20)
          {
            if (v44 < 0x20)
            {
              unint64_t v45 = 0;
              goto LABEL_42;
            }
            uint64_t v46 = 0;
            unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              uint64_t v47 = &v38[v46];
              long long v48 = *(_OWORD *)&v41[v46 + 16];
              *((_OWORD *)v47 - 7) = *(_OWORD *)&v41[v46];
              *((_OWORD *)v47 - 6) = v48;
              v46 += 32;
            }
            while (v45 != v46);
            if (v44 == v45) {
              goto LABEL_31;
            }
            if ((v44 & 0x18) != 0)
            {
LABEL_42:
              unint64_t v49 = v44 & 0xFFFFFFFFFFFFFFF8;
              v40 += v44 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                *(void *)&v38[v45 - 112] = *(void *)&v41[v45];
                v45 += 8;
              }
              while (v49 != v45);
              if (v44 == v49) {
                goto LABEL_31;
              }
              v41 += v49;
            }
            else
            {
              v41 += v45;
              v40 += v45;
            }
          }
          do
          {
            char v50 = *v41++;
            *v40++ = v50;
          }
          while (v41 != v43);
        }
      }
      else
      {
        uint64_t v35 = (uint64_t)*(v31 - 17);
        *((void *)v38 - 18) = v41;
        *((void *)v38 - 17) = v35;
        *((_OWORD *)v31 - 9) = 0uLL;
        *((_OWORD *)v31 - 8) = 0uLL;
      }
LABEL_31:
      *((void *)v38 - 10) = *(v31 - 10);
      *(_OWORD *)(v38 - 72) = *(_OWORD *)(v31 - 9);
      *((void *)v38 - 7) = *(v31 - 7);
      long long v36 = *((_OWORD *)v31 - 3);
      *((void *)v38 - 4) = *(v31 - 4);
      *((_OWORD *)v38 - 3) = v36;
      *(v31 - 5) = 0;
      *(v31 - 4) = 0;
      *(v31 - 6) = 0;
      long long v37 = *(_OWORD *)(v31 - 3);
      *((void *)v38 - 1) = *(v31 - 1);
      *(_OWORD *)(v38 - 24) = v37;
      *(v31 - 2) = 0;
      *(v31 - 1) = 0;
      *(v31 - 3) = 0;
      ++v32;
      char v31 = v34;
      if (v34 == v30)
      {
        char v31 = *a1;
        int64_t v51 = a1[1];
        *a1 = (void **)v8;
        a1[1] = (void **)v29;
        a1[2] = v28;
        while (1)
        {
          if (v51 == v31) {
            goto LABEL_59;
          }
          if (*((char *)v51 - 1) < 0)
          {
            operator delete(*(v51 - 3));
            if ((*((char *)v51 - 25) & 0x80000000) == 0) {
              goto LABEL_54;
            }
          }
          else if ((*((char *)v51 - 25) & 0x80000000) == 0)
          {
            goto LABEL_54;
          }
          operator delete(*(v51 - 6));
LABEL_54:
          unint64_t v52 = *(v51 - 18);
          if (v52 != *(v51 - 16)) {
            free(v52);
          }
          v51 -= 20;
        }
      }
    }
  }
  *a1 = (void **)v8;
  a1[1] = (void **)v29;
  a1[2] = v28;
LABEL_59:
  if (v31) {
    operator delete(v31);
  }
  return v29;
}

void buildMaterialKey(int8x8_t *a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  v367[2] = *MEMORY[0x1E4F143B8];
  double v8 = (void *)gdc::Registry::storage<md::components::Decal>(a1);
  unint64_t v324 = HIDWORD(a2);
  unint64_t v328 = a2;
  unint64_t v9 = a2 >> 39;
  uint64_t v10 = v8[4];
  if (a2 >> 39 < (v8[5] - v10) >> 3
    && (uint64_t v11 = *(void *)(v10 + 8 * v9)) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F)), v14 = v8[7], v13 = v8[8], v12 < (v13 - v14) >> 3)
    && ((uint64_t v15 = v14 + 8 * v12, v15 != v13) ? (v16 = *(_DWORD *)(v15 + 4) == HIDWORD(a2)) : (v16 = 0), v16))
  {
    uint64_t v17 = v8[11];
    uint64_t v18 = v8[10] + 4 * v12;
  }
  else
  {
    uint64_t v17 = v8[11];
    uint64_t v18 = v17;
  }
  unint64_t v19 = (void *)gdc::Registry::storage<md::components::Visibility>(a1);
  uint64_t v20 = v19[4];
  if (v9 < (v19[5] - v20) >> 3
    && (uint64_t v21 = *(void *)(v20 + 8 * v9)) != 0
    && (unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v328) & 0x7F)), v24 = v19[7],
                                                                       uint64_t v23 = v19[8],
                                                                       v22 < (v23 - v24) >> 3)
    && ((uint64_t v25 = v24 + 8 * v22, v25 != v23) ? (v26 = *(_DWORD *)(v25 + 4) == v324) : (v26 = 0), v26))
  {
    unint64_t v27 = (unsigned char *)v19[11];
    double v28 = (unsigned char *)(v19[10] + v22);
  }
  else
  {
    unint64_t v27 = (unsigned char *)v19[11];
    double v28 = v27;
  }
  unint64_t v29 = (void *)gdc::Registry::storage<md::components::Collapsible>(a1);
  uint64_t v30 = v29[4];
  if (v9 < (v29[5] - v30) >> 3
    && (uint64_t v31 = *(void *)(v30 + 8 * v9)) != 0
    && (unint64_t v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v328) & 0x7F)), v34 = v29[7],
                                                                       uint64_t v33 = v29[8],
                                                                       v32 < (v33 - v34) >> 3)
    && ((uint64_t v35 = v34 + 8 * v32, v35 != v33) ? (v36 = *(_DWORD *)(v35 + 4) == v324) : (v36 = 0), v36))
  {
    unint64_t v37 = v29[11];
    unint64_t v38 = v29[10] + v32;
  }
  else
  {
    unint64_t v37 = v29[11];
    unint64_t v38 = v37;
  }
  uint64_t v39 = (void *)gdc::Registry::storage<md::components::IntersectionWithTileEdges>(a1);
  uint64_t v40 = v39[4];
  if (v9 < (v39[5] - v40) >> 3
    && (uint64_t v41 = *(void *)(v40 + 8 * v9)) != 0
    && (unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v328) & 0x7F)), v44 = v39[7],
                                                                       uint64_t v43 = v39[8],
                                                                       v42 < (v43 - v44) >> 3)
    && ((uint64_t v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == v324) : (v46 = 0), v46))
  {
    uint64_t v47 = v39[11];
    uint64_t v48 = v39[10] + 16 * v42;
  }
  else
  {
    uint64_t v47 = v39[11];
    uint64_t v48 = v47;
  }
  if (v48 == v47) {
    uint64_t v48 = 0;
  }
  v322 = (unsigned __int8 *)v48;
  BOOL v49 = 1;
  if (v28 != v27 && v28) {
    BOOL v49 = *v28 != 0;
  }
  BOOL v323 = v49;
  BOOL v51 = v38 != v37 && v38 != 0;
  BOOL v321 = v51;
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 232) = 0;
  if (a4[1])
  {
    if (v18 != v17 && v18)
    {
      unint64_t v52 = *(unsigned char **)a3;
      if (*(unsigned char *)(*(void *)a3 + 60) && v52[32] == 3) {
        unint64_t v328 = 0;
      }
      uint64_t v53 = *a4;
      char v54 = a3[32];
      uint64_t v55 = *(void *)v52;
      unint64_t v56 = *(uint64_t **)(*(void *)v52 + 64);
      long long v57 = *(void **)(*(void *)v52 + 120);
      if (!v57) {
        goto LABEL_55;
      }
      unint64_t v58 = *(void **)(*(void *)v52 + 120);
      do
      {
        uint64_t v59 = v58;
        unint64_t v58 = (void *)*v58;
      }
      while (v58);
      if (v59 == (void *)(*(void *)v52 + 120) || v59[4])
      {
LABEL_55:
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        long long v356 = 0uLL;
      }
      else
      {
        v294 = *(void **)(*(void *)v52 + 120);
        while (v294[4])
        {
          v294 = (void *)*v294;
          if (!v294) {
            abort();
          }
        }
        uint64_t v61 = v294[5];
        uint64_t v60 = v294[6];
        *(void *)&long long v356 = v61;
        *((void *)&v356 + 1) = v60;
        if (v60)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
          uint64_t v55 = *(void *)v52;
          long long v57 = *(void **)(*(void *)v52 + 120);
        }
      }
      if (!v57) {
        goto LABEL_177;
      }
      uint64_t v62 = (void *)(v55 + 120);
      char v63 = v57;
      do
      {
        uint64_t v64 = v63[4];
        BOOL v65 = v64 == 0;
        if (v64) {
          uint64_t v66 = v63;
        }
        else {
          uint64_t v66 = v63 + 1;
        }
        if (!v65) {
          uint64_t v62 = v63;
        }
        char v63 = (void *)*v66;
      }
      while (*v66);
      if (v62 == (void *)(v55 + 120) || v62[4] > 1uLL)
      {
LABEL_177:
        uint64_t v164 = 0;
        uint64_t v165 = 0;
        long long v351 = 0uLL;
      }
      else
      {
        uint64_t v67 = v57;
        while (1)
        {
          while (1)
          {
            unint64_t v68 = v67[4];
            if (v68 < 2) {
              break;
            }
            uint64_t v67 = (void *)*v67;
            if (!v67) {
              goto LABEL_71;
            }
          }
          if (v68) {
            break;
          }
          uint64_t v67 = (void *)v67[1];
          if (!v67) {
LABEL_71:
          }
            abort();
        }
        uint64_t v165 = v67[5];
        uint64_t v164 = v67[6];
        *(void *)&long long v351 = v165;
        *((void *)&v351 + 1) = v164;
        if (v164)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v164 + 8), 1uLL, memory_order_relaxed);
          uint64_t v55 = *(void *)v52;
          long long v57 = *(void **)(*(void *)v52 + 120);
        }
      }
      if (!v57) {
        goto LABEL_189;
      }
      float64x2_t v166 = (void *)(v55 + 120);
      int v167 = (void *)(v55 + 120);
      long long v168 = v57;
      do
      {
        unint64_t v169 = v168[4];
        BOOL v170 = v169 >= 2;
        if (v169 >= 2) {
          v171 = v168;
        }
        else {
          v171 = v168 + 1;
        }
        if (v170) {
          int v167 = v168;
        }
        long long v168 = (void *)*v171;
      }
      while (*v171);
      if (v167 != v166 && v167[4] <= 2uLL)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v181 = v57[4];
            if (v181 < 3) {
              break;
            }
            long long v57 = (void *)*v57;
            if (!v57) {
              goto LABEL_221;
            }
          }
          if (v181 == 2) {
            break;
          }
          long long v57 = (void *)v57[1];
          if (!v57) {
LABEL_221:
          }
            abort();
        }
        uint64_t v172 = v57[5];
        long long v173 = (std::__shared_weak_count *)v57[6];
        if (v173) {
          atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
LABEL_189:
        uint64_t v172 = 0;
        long long v173 = 0;
      }
      char v174 = v52[32];
      uint64_t v176 = *v56;
      uint64_t v175 = v56[1];
      *(void *)&long long v330 = v176;
      *((void *)&v330 + 1) = v175;
      if (v175) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v175 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v331 = v61;
      *((void *)&v331 + 1) = v60;
      if (v60) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v332 = v165;
      *((void *)&v332 + 1) = v164;
      if (v164) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v164 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v333 = v172;
      *((void *)&v333 + 1) = v173;
      if (v173) {
        atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)v334 = v328;
      v334[8] = v323;
      v334[9] = v174;
      v334[10] = v54;
      *(_WORD *)&v334[11] = 0;
      v334[13] = 0;
      if (v173 && !atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
      if (*((void *)&v351 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v351 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v351 + 1) + 16))(*((void *)&v351 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v351 + 1));
      }
      if (*((void *)&v356 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v356 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v356 + 1) + 16))(*((void *)&v356 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v356 + 1));
      }
      uint64_t v177 = a4[2];
      *(void *)&long long v335 = a4[1];
      *((void *)&v335 + 1) = v177;
      if (v177) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v177 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v336 = v53;
      LOBYTE(v337) = 1;
      if (!*(unsigned char *)(a5 + 232))
      {
        long long v194 = v330;
        long long v195 = v331;
        long long v330 = 0uLL;
        *(_OWORD *)a5 = v194;
        *(_OWORD *)(a5 + 16) = v195;
        long long v331 = 0uLL;
        long long v196 = v332;
        long long v197 = v333;
        long long v332 = 0uLL;
        *(_OWORD *)(a5 + 32) = v196;
        *(_OWORD *)(a5 + 48) = v197;
        long long v333 = 0uLL;
        uint64_t v198 = *(void *)v334;
        *(void *)(a5 + 70) = *(void *)&v334[6];
        *(void *)(a5 + 64) = v198;
        *(_OWORD *)(a5 + 80) = v335;
        long long v335 = 0uLL;
        *(void *)(a5 + 96) = v53;
        *(_DWORD *)(a5 + 224) = 2;
        *(unsigned char *)(a5 + 232) = 1;
LABEL_381:
        md::realistic::RouteRenderLayer::RouteModelPipelineStates::~RouteModelPipelineStates((md::realistic::RouteRenderLayer::RouteModelPipelineStates *)&v330);
        return;
      }
      uint64_t v178 = *(unsigned int *)(a5 + 224);
      if (v178 != -1)
      {
        if (v178 == 2)
        {
          md::BaseRenderBatchKey<ggl::VertexData>::operator=(a5, &v330);
          long long v179 = v335;
          long long v335 = 0uLL;
          uint64_t v180 = *(std::__shared_weak_count **)(a5 + 88);
          *(_OWORD *)(a5 + 80) = v179;
          if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
          *(void *)(a5 + 96) = v336;
          if (!(_BYTE)v337) {
            return;
          }
          goto LABEL_378;
        }
        ((void (*)(long long *, uint64_t))*(&off_1EF58FC48 + v178))(&v356, a5);
      }
      long long v281 = v330;
      long long v282 = v331;
      long long v330 = 0uLL;
      *(_OWORD *)a5 = v281;
      *(_OWORD *)(a5 + 16) = v282;
      long long v331 = 0uLL;
      long long v283 = v332;
      long long v284 = v333;
      long long v332 = 0uLL;
      *(_OWORD *)(a5 + 32) = v283;
      *(_OWORD *)(a5 + 48) = v284;
      long long v333 = 0uLL;
      uint64_t v285 = *(void *)v334;
      *(void *)(a5 + 70) = *(void *)&v334[6];
      *(void *)(a5 + 64) = v285;
      *(_OWORD *)(a5 + 80) = v335;
      long long v335 = 0uLL;
      *(void *)(a5 + 96) = v53;
      *(_DWORD *)(a5 + 224) = 2;
LABEL_378:
      v286 = (std::__shared_weak_count *)*((void *)&v335 + 1);
      if (*((void *)&v335 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v335 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
          std::__shared_weak_count::__release_weak(v286);
        }
      }
      goto LABEL_381;
    }
    long long v69 = (void *)gdc::Registry::storage<md::components::IntendedSceneLayer>(a1);
    uint64_t v70 = v69[4];
    if (v9 < (v69[5] - v70) >> 3
      && (uint64_t v71 = *(void *)(v70 + 8 * v9)) != 0
      && (unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v74 = v69[7],
          uint64_t v73 = v69[8],
          v72 < (v73 - v74) >> 3)
      && ((v75 = v74 + 8 * v72, v75 != v73) ? (BOOL v76 = *(_DWORD *)(v75 + 4) == v324) : (BOOL v76 = 0), v76))
    {
      v315 = (char *)v69[11];
      double v77 = (char *)(v69[10] + v72);
    }
    else
    {
      double v77 = (char *)v69[11];
      v315 = v77;
    }
    v317 = v77;
    __int16 v78 = (void *)gdc::Registry::storage<md::components::MarketMask>(a1);
    uint64_t v79 = v78[4];
    if (v9 < (v78[5] - v79) >> 3
      && (uint64_t v80 = *(void *)(v79 + 8 * v9)) != 0
      && (unint64_t v81 = *(unsigned __int16 *)(v80 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v83 = v78[7],
          uint64_t v82 = v78[8],
          v81 < (v82 - v83) >> 3)
      && (uint64_t v84 = v83 + 8 * v81, v84 != v82)
      && *(_DWORD *)(v84 + 4) == v324)
    {
      unint64_t v313 = v78[11];
      unint64_t v85 = v78[10] + v81;
    }
    else
    {
      unint64_t v85 = v78[11];
      unint64_t v313 = v85;
    }
    v312 = (char *)v85;
    float v86 = (void *)gdc::Registry::storage<md::components::GeneratedTexture>(a1);
    uint64_t v87 = v86[4];
    if (v9 < (v86[5] - v87) >> 3
      && (uint64_t v88 = *(void *)(v87 + 8 * v9)) != 0
      && (unint64_t v89 = *(unsigned __int16 *)(v88 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v91 = v86[7],
          uint64_t v90 = v86[8],
          v89 < (v90 - v91) >> 3)
      && (uint64_t v92 = v91 + 8 * v89, v92 != v90)
      && *(_DWORD *)(v92 + 4) == v324)
    {
      uint64_t v311 = v86[11];
      uint64_t v93 = v86[10] + 16 * v89;
    }
    else
    {
      uint64_t v93 = v86[11];
      uint64_t v311 = v93;
    }
    v310 = (void *)v93;
    unint64_t v94 = (void *)gdc::Registry::storage<md::components::MaterialRaster>(a1);
    uint64_t v95 = v94[4];
    if (v9 < (v94[5] - v95) >> 3
      && (uint64_t v96 = *(void *)(v95 + 8 * v9)) != 0
      && (unint64_t v97 = *(unsigned __int16 *)(v96 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v99 = v94[7],
          uint64_t v98 = v94[8],
          v97 < (v98 - v99) >> 3)
      && (uint64_t v100 = v99 + 8 * v97, v100 != v98)
      && *(_DWORD *)(v100 + 4) == v324)
    {
      unint64_t v308 = v94[11];
      unint64_t v101 = v94[10] + v97;
    }
    else
    {
      unint64_t v101 = v94[11];
      unint64_t v308 = v101;
    }
    v307 = (char *)v101;
    uint64_t v102 = (void *)gdc::Registry::storage<md::components::AlbedoTint>(a1);
    uint64_t v103 = v102[4];
    if (v9 < (v102[5] - v103) >> 3
      && (uint64_t v104 = *(void *)(v103 + 8 * v9)) != 0
      && (unint64_t v105 = *(unsigned __int16 *)(v104 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v107 = v102[7],
          uint64_t v106 = v102[8],
          v105 < (v106 - v107) >> 3)
      && (uint64_t v108 = v107 + 8 * v105, v108 != v106)
      && *(_DWORD *)(v108 + 4) == v324)
    {
      uint64_t v319 = v102[11];
      uint64_t v109 = v102[10] + 16 * v105;
    }
    else
    {
      uint64_t v109 = v102[11];
      uint64_t v319 = v109;
    }
    uint64_t v306 = v109;
    uint64_t v110 = (void *)gdc::Registry::storage<md::components::PositionScaleFactor>(a1);
    uint64_t v111 = v110[4];
    if (v9 < (v110[5] - v111) >> 3
      && (uint64_t v112 = *(void *)(v111 + 8 * v9)) != 0
      && (unint64_t v113 = *(unsigned __int16 *)(v112 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v115 = v110[7],
          uint64_t v114 = v110[8],
          v113 < (v114 - v115) >> 3)
      && (uint64_t v116 = v115 + 8 * v113, v116 != v114)
      && *(_DWORD *)(v116 + 4) == v324)
    {
      v305 = (_DWORD *)v110[11];
      id v117 = (_DWORD *)(v110[10] + 4 * v113);
    }
    else
    {
      id v117 = (_DWORD *)v110[11];
      v305 = v117;
    }
    double v118 = (void *)gdc::Registry::storage<md::components::HideWhenCollapsed>(a1);
    uint64_t v119 = v118[4];
    if (v9 < (v118[5] - v119) >> 3
      && (uint64_t v120 = *(void *)(v119 + 8 * v9)) != 0
      && (unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v123 = v118[7],
          uint64_t v122 = v118[8],
          v121 < (v122 - v123) >> 3)
      && (uint64_t v124 = v123 + 8 * v121, v124 != v122)
      && *(_DWORD *)(v124 + 4) == v324)
    {
      unint64_t v125 = v118[11];
      unint64_t v126 = v118[10] + v121;
    }
    else
    {
      unint64_t v125 = v118[11];
      unint64_t v126 = v125;
    }
    uint64_t v127 = (void *)gdc::Registry::storage<md::overlayComponents::DrapedRasterOverlay>(a1);
    uint64_t v128 = v127[4];
    if (v9 < (v127[5] - v128) >> 3
      && (uint64_t v129 = *(void *)(v128 + 8 * v9)) != 0
      && (unint64_t v130 = *(unsigned __int16 *)(v129 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v132 = v127[7],
          uint64_t v131 = v127[8],
          v130 < (v131 - v132) >> 3)
      && (uint64_t v133 = v132 + 8 * v130, v133 != v131)
      && *(_DWORD *)(v133 + 4) == v324)
    {
      uint64_t v134 = v127[11];
      uint64_t v135 = v127[10] + 48 * v130;
    }
    else
    {
      uint64_t v134 = v127[11];
      uint64_t v135 = v134;
    }
    uint64_t v136 = (void *)gdc::Registry::storage<md::components::CustomRenderState>(a1);
    uint64_t v137 = v136[4];
    if (v9 < (v136[5] - v137) >> 3
      && (uint64_t v138 = *(void *)(v137 + 8 * v9)) != 0
      && (unint64_t v139 = *(unsigned __int16 *)(v138 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v141 = v136[7],
          uint64_t v140 = v136[8],
          v139 < (v140 - v141) >> 3)
      && (uint64_t v142 = v141 + 8 * v139, v142 != v140)
      && *(_DWORD *)(v142 + 4) == v324)
    {
      uint64_t v143 = v136[11];
      uint64_t v144 = v136[10] + 24 * v139;
    }
    else
    {
      uint64_t v143 = v136[11];
      uint64_t v144 = v143;
    }
    unsigned int v145 = (void *)gdc::Registry::storage<md::components::SubtileZone>(a1);
    uint64_t v146 = v145[4];
    if (v9 < (v145[5] - v146) >> 3
      && (uint64_t v147 = *(void *)(v146 + 8 * v9)) != 0
      && (unint64_t v148 = *(unsigned __int16 *)(v147 + 2 * (HIDWORD(v328) & 0x7F)),
          uint64_t v150 = v145[7],
          uint64_t v149 = v145[8],
          v148 < (v149 - v150) >> 3)
      && (uint64_t v151 = v150 + 8 * v148, v151 != v149)
      && *(_DWORD *)(v151 + 4) == v324)
    {
      char v152 = (char *)v145[11];
      char v153 = (char *)(v145[10] + v148);
    }
    else
    {
      char v152 = (char *)v145[11];
      char v153 = v152;
    }
    char v325 = 0;
    if (v144 == v143) {
      uint64_t v154 = 0;
    }
    else {
      uint64_t v154 = v144;
    }
    uint64_t v304 = v154;
    if (v135 == v134) {
      uint64_t v155 = 0;
    }
    else {
      uint64_t v155 = v135;
    }
    if (v117 == v305) {
      id v117 = 0;
    }
    if (v306 == v319) {
      uint64_t v156 = 0;
    }
    else {
      uint64_t v156 = v306;
    }
    if (v307 == (char *)v308) {
      int v157 = 0;
    }
    else {
      int v157 = v307;
    }
    v309 = v157;
    if (v310 == (void *)v311) {
      uint64_t v158 = 0;
    }
    else {
      uint64_t v158 = v310;
    }
    if (v312 == (char *)v313) {
      int v159 = 0;
    }
    else {
      int v159 = v312;
    }
    if (v153 == v152) {
      v160 = 0;
    }
    else {
      v160 = v153;
    }
    if (v317 != v315 && v317) {
      char v325 = *v317;
    }
    BOOL v162 = v126 != v125 && v126 != 0;
    if (v160) {
      char v163 = *v160;
    }
    else {
      char v163 = 0;
    }
    LOBYTE(v351) = 0;
    char v355 = 0;
    uint64_t v320 = v156;
    if (!v155) {
      goto LABEL_247;
    }
    char v316 = v163;
    BOOL v318 = v162;
    unsigned __int8 v182 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v314 = v117;
    v182->__shared_owners_ = 0;
    p_unint64_t shared_owners = &v182->__shared_owners_;
    v182->__shared_weak_owners_ = 0;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587410;
    ggl::BufferData::BufferData((uint64_t)&v182[1], qword_1E956EE18, 2, 1, 6, 1);
    v182[9].__shared_owners_ = (uint64_t)ggl::DaVinci::RasterOverlay::reflection(void)::reflection;
    v182[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E638;
    unint64_t shared_owners = v182[1].__shared_owners_;
    v185 = v182[4].__vftable;
    LODWORD(v185->~__shared_weak_count_0) = *(_DWORD *)(v155 + 16);
    HIDWORD(v185->~__shared_weak_count_0) = *(_DWORD *)(v155 + 20);
    LODWORD(v185->~__shared_weak_count) = *(_DWORD *)(v155 + 24);
    if (v182[3].__shared_weak_owners_ > shared_owners) {
      unint64_t shared_owners = v182[3].__shared_weak_owners_;
    }
    v182[3].__shared_owners_ = 0;
    v182[3].__shared_weak_owners_ = shared_owners;
    uint64_t v187 = *(void *)v155;
    uint64_t v186 = *(void *)(v155 + 8);
    if (v186) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v186 + 8), 1uLL, memory_order_relaxed);
    }
    char v188 = *(unsigned char *)(v155 + 28);
    atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
    uint64_t v190 = *(void *)(v155 + 32);
    uint64_t v189 = *(void *)(v155 + 40);
    if (v189) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v189 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v351 = v187;
    if (v355)
    {
      v191 = (std::__shared_weak_count *)*((void *)&v351 + 1);
      *((void *)&v351 + 1) = v186;
      if (v191 && !atomic_fetch_add(&v191->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
      char v352 = v188;
      v192 = (std::__shared_weak_count *)*((void *)&v353 + 1);
      *(void *)&long long v353 = v182 + 1;
      *((void *)&v353 + 1) = v182;
      if (v192 && !atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
      }
      v193 = (std::__shared_weak_count *)*((void *)&v354 + 1);
      *(void *)&long long v354 = v190;
      *((void *)&v354 + 1) = v189;
      char v163 = v316;
      if (v193 && !atomic_fetch_add(&v193->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    else
    {
      *((void *)&v351 + 1) = v186;
      char v352 = v188;
      *(void *)&long long v353 = v182 + 1;
      *((void *)&v353 + 1) = v182;
      *(void *)&long long v354 = v190;
      *((void *)&v354 + 1) = v189;
      char v355 = 1;
      char v163 = v316;
    }
    unint64_t add = atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v156 = v320;
    BOOL v162 = v318;
    id v117 = v314;
    if (!add)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
      if (v158)
      {
LABEL_248:
        uint64_t v200 = v158[1];
        *(void *)&long long v329 = *v158;
        *((void *)&v329 + 1) = v200;
        if (v200) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v200 + 8), 1uLL, memory_order_relaxed);
        }
LABEL_252:
        v201 = *(unsigned char **)a3;
        *(void *)&long long v356 = v328;
        if (v322)
        {
          if (v201[60])
          {
            v202 = (unint64_t *)&v356;
            if (v201[32] == 3) {
              v202 = (unint64_t *)(v322 + 8);
            }
            unint64_t v328 = *v202;
          }
        }
        else if (v201[60] && v201[32] == 3)
        {
          unint64_t v328 = 0;
        }
        if (v159) {
          v203 = v159;
        }
        else {
          v203 = (char *)&md::kMarketMaskDefault;
        }
        if (v309)
        {
          char v204 = *v309;
          if (v156) {
            goto LABEL_265;
          }
        }
        else
        {
          char v204 = 0;
          if (v156)
          {
LABEL_265:
            char v205 = *(unsigned char *)v156;
            v366[0] = *(void *)(v156 + 1);
            *(void *)((char *)v366 + 7) = *(void *)(v156 + 8);
            uint64_t v206 = v304;
            if (v117) {
              goto LABEL_266;
            }
            goto LABEL_271;
          }
        }
        char v205 = 0;
        uint64_t v206 = v304;
        if (v117)
        {
LABEL_266:
          int v207 = *v117;
          char v208 = 1;
          if (v322) {
            goto LABEL_267;
          }
          goto LABEL_272;
        }
LABEL_271:
        char v208 = 0;
        int v207 = 0;
        if (v322)
        {
LABEL_267:
          __int16 v209 = *v322;
          __int16 v210 = 1;
          if (v206)
          {
LABEL_268:
            BOOL v211 = *(unsigned char *)(v206 + 16) != 0;
            goto LABEL_274;
          }
LABEL_273:
          BOOL v211 = 0;
LABEL_274:
          uint64_t v212 = *a4;
          long long v361 = v329;
          if (v156)
          {
            v367[0] = v366[0];
            *(void *)((char *)v367 + 7) = *(void *)((char *)v366 + 7);
          }
          else
          {
            char v205 = 0;
          }
          char v213 = a3[32];
          char v214 = *v203;
          LOBYTE(v356) = 0;
          char v360 = 0;
          if (v355)
          {
            long long v356 = v351;
            if (*((void *)&v351 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v351 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v357 = v352;
            long long v358 = v353;
            if (*((void *)&v353 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v353 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            long long v359 = v354;
            if (*((void *)&v354 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v354 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v360 = 1;
          }
          uint64_t v215 = *(void *)v201;
          v216 = *(uint64_t **)(*(void *)v201 + 64);
          v217 = *(void **)(*(void *)v201 + 120);
          if (!v217) {
            goto LABEL_290;
          }
          v218 = *(void **)(*(void *)v201 + 120);
          do
          {
            v219 = v218;
            v218 = (void *)*v218;
          }
          while (v218);
          if (v219 == (void *)(*(void *)v201 + 120) || v219[4])
          {
LABEL_290:
            v220 = 0;
            uint64_t v221 = 0;
            uint64_t v364 = 0;
            v365 = 0;
          }
          else
          {
            v295 = *(void **)(*(void *)v201 + 120);
            while (v295[4])
            {
              v295 = (void *)*v295;
              if (!v295) {
                abort();
              }
            }
            uint64_t v221 = v295[5];
            v220 = (std::__shared_weak_count *)v295[6];
            uint64_t v364 = v221;
            v365 = v220;
            if (v220)
            {
              atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v215 = *(void *)v201;
              v217 = *(void **)(*(void *)v201 + 120);
            }
          }
          if (!v217) {
            goto LABEL_307;
          }
          v222 = (void *)(v215 + 120);
          v223 = v217;
          do
          {
            uint64_t v224 = v223[4];
            BOOL v225 = v224 == 0;
            if (v224) {
              v226 = v223;
            }
            else {
              v226 = v223 + 1;
            }
            if (!v225) {
              v222 = v223;
            }
            v223 = (void *)*v226;
          }
          while (*v226);
          if (v222 == (void *)(v215 + 120) || v222[4] > 1uLL)
          {
LABEL_307:
            v229 = 0;
            uint64_t v230 = 0;
            uint64_t v362 = 0;
            v363 = 0;
          }
          else
          {
            v227 = v217;
            while (1)
            {
              while (1)
              {
                unint64_t v228 = v227[4];
                if (v228 < 2) {
                  break;
                }
                v227 = (void *)*v227;
                if (!v227) {
                  goto LABEL_306;
                }
              }
              if (v228) {
                break;
              }
              v227 = (void *)v227[1];
              if (!v227) {
LABEL_306:
              }
                abort();
            }
            uint64_t v230 = v227[5];
            v229 = (std::__shared_weak_count *)v227[6];
            uint64_t v362 = v230;
            v363 = v229;
            if (v229)
            {
              atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v215 = *(void *)v201;
              v217 = *(void **)(*(void *)v201 + 120);
            }
          }
          if (!v217) {
            goto LABEL_319;
          }
          v231 = (void *)(v215 + 120);
          v232 = (void *)(v215 + 120);
          v233 = v217;
          do
          {
            unint64_t v234 = v233[4];
            BOOL v235 = v234 >= 2;
            if (v234 >= 2) {
              v236 = v233;
            }
            else {
              v236 = v233 + 1;
            }
            if (v235) {
              v232 = v233;
            }
            v233 = (void *)*v236;
          }
          while (*v236);
          if (v232 != v231 && v232[4] <= 2uLL)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v273 = v217[4];
                if (v273 < 3) {
                  break;
                }
                v217 = (void *)*v217;
                if (!v217) {
                  goto LABEL_370;
                }
              }
              if (v273 == 2) {
                break;
              }
              v217 = (void *)v217[1];
              if (!v217) {
LABEL_370:
              }
                abort();
            }
            uint64_t v237 = v217[5];
            v238 = (std::__shared_weak_count *)v217[6];
            if (v238) {
              atomic_fetch_add_explicit(&v238->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
LABEL_319:
            uint64_t v237 = 0;
            v238 = 0;
          }
          char v239 = v201[32];
          uint64_t v241 = *v216;
          uint64_t v240 = v216[1];
          *(void *)&long long v330 = v241;
          *((void *)&v330 + 1) = v240;
          if (v240) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v240 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v331 = v221;
          *((void *)&v331 + 1) = v220;
          if (v220) {
            atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v332 = v230;
          *((void *)&v332 + 1) = v229;
          if (v229) {
            atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v333 = v237;
          *((void *)&v333 + 1) = v238;
          if (v238) {
            atomic_fetch_add_explicit(&v238->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)v334 = v328;
          v334[8] = v323;
          v334[9] = v239;
          v334[10] = v213;
          v334[11] = v321;
          v334[12] = v162;
          v334[13] = v163;
          if (v238 && !atomic_fetch_add(&v238->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            BOOL v242 = v211;
            char v243 = v204;
            char v244 = v214;
            uint64_t v245 = v212;
            __int16 v246 = v210;
            __int16 v247 = v209;
            char v248 = v208;
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
            char v208 = v248;
            __int16 v209 = v247;
            __int16 v210 = v246;
            uint64_t v212 = v245;
            char v214 = v244;
            uint64_t v156 = v320;
            char v204 = v243;
            BOOL v211 = v242;
          }
          v249 = v363;
          if (v363 && !atomic_fetch_add(&v363->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            BOOL v250 = v211;
            char v251 = v204;
            char v252 = v214;
            uint64_t v253 = v212;
            __int16 v254 = v210;
            __int16 v255 = v209;
            char v256 = v208;
            ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
            std::__shared_weak_count::__release_weak(v249);
            char v208 = v256;
            __int16 v209 = v255;
            __int16 v210 = v254;
            uint64_t v212 = v253;
            char v214 = v252;
            uint64_t v156 = v320;
            char v204 = v251;
            BOOL v211 = v250;
          }
          v257 = v365;
          if (v365 && !atomic_fetch_add(&v365->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            BOOL v258 = v211;
            char v259 = v204;
            char v260 = v214;
            uint64_t v261 = v212;
            __int16 v262 = v210;
            __int16 v263 = v209;
            char v264 = v208;
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
            char v208 = v264;
            __int16 v209 = v263;
            __int16 v210 = v262;
            uint64_t v212 = v261;
            char v214 = v260;
            uint64_t v156 = v320;
            char v204 = v259;
            BOOL v211 = v258;
          }
          uint64_t v265 = a4[2];
          *(void *)&long long v335 = a4[1];
          *((void *)&v335 + 1) = v265;
          if (v265) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v265 + 8), 1uLL, memory_order_relaxed);
          }
          v266 = (std::__shared_weak_count *)*((void *)&v361 + 1);
          uint64_t v336 = v212;
          long long v337 = v361;
          if (*((void *)&v361 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v361 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          LOBYTE(v338) = v325;
          HIBYTE(v338) = v214;
          char v339 = v204;
          LOBYTE(v340) = 0;
          unsigned __int8 v341 = 0;
          if (v156)
          {
            LOBYTE(v340) = v205;
            *(void *)((char *)&v340 + 1) = v367[0];
            *((void *)&v340 + 1) = *(void *)((char *)v367 + 7);
            unsigned __int8 v341 = 1;
          }
          LODWORD(v342) = v207;
          BYTE4(v342) = v208;
          LOBYTE(v343) = 0;
          unsigned __int8 v347 = 0;
          if (v360)
          {
            long long v343 = v356;
            if (*((void *)&v356 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v356 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v344 = v357;
            long long v345 = v358;
            if (*((void *)&v358 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v358 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            long long v346 = v359;
            if (*((void *)&v359 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v359 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            unsigned __int8 v347 = 1;
          }
          __int16 v348 = v209 | (v210 << 8);
          BOOL v349 = v211;
          std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v356);
          if (v266 && !atomic_fetch_add(&v266->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
            std::__shared_weak_count::__release_weak(v266);
          }
          char v350 = 1;
          if (!*(unsigned char *)(a5 + 232))
          {
            long long v274 = v330;
            long long v275 = v331;
            long long v330 = 0uLL;
            *(_OWORD *)a5 = v274;
            *(_OWORD *)(a5 + 16) = v275;
            long long v331 = 0uLL;
            long long v276 = v332;
            long long v277 = v333;
            long long v332 = 0uLL;
            *(_OWORD *)(a5 + 32) = v276;
            *(_OWORD *)(a5 + 48) = v277;
            long long v333 = 0uLL;
            uint64_t v278 = *(void *)v334;
            *(void *)(a5 + 70) = *(void *)&v334[6];
            *(void *)(a5 + 64) = v278;
            *(_OWORD *)(a5 + 80) = v335;
            long long v335 = 0uLL;
            *(void *)(a5 + 96) = v336;
            *(_OWORD *)(a5 + 104) = v337;
            long long v337 = 0uLL;
            LOWORD(v278) = v338;
            *(unsigned char *)(a5 + 122) = v339;
            *(_WORD *)(a5 + 120) = v278;
            *(unsigned char *)(a5 + 124) = 0;
            *(unsigned char *)(a5 + 140) = 0;
            if (v341)
            {
              *(_OWORD *)(a5 + 124) = v340;
              *(unsigned char *)(a5 + 140) = 1;
            }
            *(void *)(a5 + 144) = v342;
            *(unsigned char *)(a5 + 152) = 0;
            *(unsigned char *)(a5 + 208) = 0;
            if (v347)
            {
              *(_OWORD *)(a5 + 152) = v343;
              long long v343 = 0uLL;
              *(unsigned char *)(a5 + 168) = v344;
              long long v279 = v345;
              long long v280 = v346;
              long long v345 = 0uLL;
              *(_OWORD *)(a5 + 176) = v279;
              *(_OWORD *)(a5 + 192) = v280;
              long long v346 = 0uLL;
              *(unsigned char *)(a5 + 208) = 1;
            }
            *(_WORD *)(a5 + 216) = v348;
            *(unsigned char *)(a5 + 218) = v349;
            *(_DWORD *)(a5 + 224) = 0;
            *(unsigned char *)(a5 + 232) = 1;
            goto LABEL_427;
          }
          uint64_t v267 = *(unsigned int *)(a5 + 224);
          if (v267 != -1)
          {
            if (!v267)
            {
              md::BaseRenderBatchKey<ggl::VertexData>::operator=(a5, &v330);
              long long v268 = v335;
              long long v335 = 0uLL;
              v269 = *(std::__shared_weak_count **)(a5 + 88);
              *(_OWORD *)(a5 + 80) = v268;
              if (v269 && !atomic_fetch_add(&v269->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                std::__shared_weak_count::__release_weak(v269);
              }
              *(void *)(a5 + 96) = v336;
              long long v270 = v337;
              long long v337 = 0uLL;
              v271 = *(std::__shared_weak_count **)(a5 + 112);
              *(_OWORD *)(a5 + 104) = v270;
              if (v271 && !atomic_fetch_add(&v271->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                std::__shared_weak_count::__release_weak(v271);
              }
              *(_WORD *)(a5 + 120) = v338;
              *(unsigned char *)(a5 + 122) = v339;
              v272 = (_OWORD *)(a5 + 124);
              if (*(unsigned __int8 *)(a5 + 140) == v341)
              {
                if (*(unsigned char *)(a5 + 140)) {
                  _OWORD *v272 = v340;
                }
              }
              else if (*(unsigned char *)(a5 + 140))
              {
                *(unsigned char *)(a5 + 140) = 0;
              }
              else
              {
                _OWORD *v272 = v340;
                *(unsigned char *)(a5 + 140) = 1;
              }
              *(_DWORD *)(a5 + 144) = v342;
              *(unsigned char *)(a5 + 148) = BYTE4(v342);
              if (*(unsigned __int8 *)(a5 + 208) == v347)
              {
                if (*(unsigned char *)(a5 + 208))
                {
                  long long v296 = v343;
                  long long v343 = 0uLL;
                  v297 = *(std::__shared_weak_count **)(a5 + 160);
                  *(_OWORD *)(a5 + 152) = v296;
                  if (v297 && !atomic_fetch_add(&v297->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                    std::__shared_weak_count::__release_weak(v297);
                  }
                  *(unsigned char *)(a5 + 168) = v344;
                  long long v298 = v345;
                  long long v345 = 0uLL;
                  v299 = *(std::__shared_weak_count **)(a5 + 184);
                  *(_OWORD *)(a5 + 176) = v298;
                  if (v299 && !atomic_fetch_add(&v299->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                    std::__shared_weak_count::__release_weak(v299);
                  }
                  long long v300 = v346;
                  long long v346 = 0uLL;
                  v301 = *(std::__shared_weak_count **)(a5 + 200);
                  *(_OWORD *)(a5 + 192) = v300;
                  if (v301 && !atomic_fetch_add(&v301->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                    std::__shared_weak_count::__release_weak(v301);
                  }
                }
              }
              else if (*(unsigned char *)(a5 + 208))
              {
                std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::reset[abi:nn180100](a5 + 152);
              }
              else
              {
                *(_OWORD *)(a5 + 152) = v343;
                long long v343 = 0uLL;
                *(unsigned char *)(a5 + 168) = v344;
                long long v302 = v345;
                long long v303 = v346;
                long long v345 = 0uLL;
                *(_OWORD *)(a5 + 176) = v302;
                *(_OWORD *)(a5 + 192) = v303;
                long long v346 = 0uLL;
                *(unsigned char *)(a5 + 208) = 1;
              }
              *(_WORD *)(a5 + 216) = v348;
              *(unsigned char *)(a5 + 218) = v349;
LABEL_427:
              std::__optional_destruct_base<md::MaterialRenderBatchKey,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v330);
              std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v351);
              return;
            }
            ((void (*)(long long *, uint64_t))*(&off_1EF58FC48 + v267))(&v356, a5);
          }
          *(_DWORD *)(a5 + 224) = -1;
          long long v287 = v330;
          long long v288 = v331;
          long long v330 = 0uLL;
          *(_OWORD *)a5 = v287;
          *(_OWORD *)(a5 + 16) = v288;
          long long v331 = 0uLL;
          long long v289 = v332;
          long long v290 = v333;
          long long v332 = 0uLL;
          *(_OWORD *)(a5 + 32) = v289;
          *(_OWORD *)(a5 + 48) = v290;
          long long v333 = 0uLL;
          uint64_t v291 = *(void *)v334;
          *(void *)(a5 + 70) = *(void *)&v334[6];
          *(void *)(a5 + 64) = v291;
          *(_OWORD *)(a5 + 80) = v335;
          long long v335 = 0uLL;
          *(void *)(a5 + 96) = v336;
          *(_OWORD *)(a5 + 104) = v337;
          long long v337 = 0uLL;
          LOWORD(v291) = v338;
          *(unsigned char *)(a5 + 122) = v339;
          *(_WORD *)(a5 + 120) = v291;
          *(unsigned char *)(a5 + 124) = 0;
          *(unsigned char *)(a5 + 140) = 0;
          if (v341)
          {
            *(_OWORD *)(a5 + 124) = v340;
            *(unsigned char *)(a5 + 140) = 1;
          }
          *(void *)(a5 + 144) = v342;
          *(unsigned char *)(a5 + 152) = 0;
          *(unsigned char *)(a5 + 208) = 0;
          if (v347)
          {
            *(_OWORD *)(a5 + 152) = v343;
            long long v343 = 0uLL;
            *(unsigned char *)(a5 + 168) = v344;
            long long v292 = v345;
            long long v293 = v346;
            long long v345 = 0uLL;
            *(_OWORD *)(a5 + 176) = v292;
            *(_OWORD *)(a5 + 192) = v293;
            long long v346 = 0uLL;
            *(unsigned char *)(a5 + 208) = 1;
          }
          *(_WORD *)(a5 + 216) = v348;
          *(unsigned char *)(a5 + 218) = v349;
          *(_DWORD *)(a5 + 224) = 0;
          goto LABEL_427;
        }
LABEL_272:
        __int16 v209 = 0;
        __int16 v210 = 0;
        if (v206) {
          goto LABEL_268;
        }
        goto LABEL_273;
      }
    }
    else
    {
LABEL_247:
      if (v158) {
        goto LABEL_248;
      }
    }
    long long v329 = 0uLL;
    goto LABEL_252;
  }
}

void sub_1A1C23898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&a61);
  if (*(unsigned char *)(v61 + 232))
  {
    uint64_t v63 = *(unsigned int *)(v61 + 224);
    if (v63 != -1) {
      ((void (*)(char *, uint64_t))*(&off_1EF58FC48 + v63))(&a31, v61);
    }
    *(_DWORD *)(v61 + 224) = -1;
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::CustomRenderState>(int8x8_t *a1)
{
  uint64_t v10 = 0x95242007408D7C0;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x95242007408D7C0;
    if (*(void *)&v1 <= 0x95242007408D7C0uLL) {
      uint64_t v3 = 0x95242007408D7C0uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x95242007408D7C0;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x95242007408D7C0)
      {
        if (v5[2] == 0x95242007408D7C0) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x95242007408D7C0) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x95242007408D7C0) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C23B88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint8x8_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    unint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t gdc::Registry::storage<md::components::IntendedSceneLayer>(int8x8_t *a1)
{
  unint64_t v10 = 0x8217BEFF5E3814C6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8217BEFF5E3814C6;
    if (*(void *)&v1 <= 0x8217BEFF5E3814C6) {
      unint64_t v3 = 0x8217BEFF5E3814C6 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8217BEFF5E3814C6;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8217BEFF5E3814C6)
      {
        if (v5[2] == 0x8217BEFF5E3814C6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8217BEFF5E3814C6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8217BEFF5E3814C6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C23EFC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::MaterialRaster>(int8x8_t *a1)
{
  unint64_t v10 = 0xBF279C46863538CCLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBF279C46863538CCLL;
    if (*(void *)&v1 <= 0xBF279C46863538CCLL) {
      unint64_t v3 = 0xBF279C46863538CCLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBF279C46863538CCLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBF279C46863538CCLL)
      {
        if (v5[2] == 0xBF279C46863538CCLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBF279C46863538CCLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBF279C46863538CCLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C2416C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Collapsible>(int8x8_t *a1)
{
  uint64_t v10 = 0x3FD9D9EF0A6A9A58;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3FD9D9EF0A6A9A58;
    if (*(void *)&v1 <= 0x3FD9D9EF0A6A9A58uLL) {
      uint64_t v3 = 0x3FD9D9EF0A6A9A58uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3FD9D9EF0A6A9A58;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3FD9D9EF0A6A9A58)
      {
        if (v5[2] == 0x3FD9D9EF0A6A9A58) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3FD9D9EF0A6A9A58) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3FD9D9EF0A6A9A58) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C243DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<md::MaterialRenderBatchKey,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 224))
  {
    std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::~__optional_destruct_base[abi:nn180100](a1 + 152);
    uint8x8_t v2 = *(std::__shared_weak_count **)(a1 + 112);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    md::realistic::RouteRenderLayer::RouteModelPipelineStates::~RouteModelPipelineStates((md::realistic::RouteRenderLayer::RouteModelPipelineStates *)a1);
  }
  return a1;
}

uint64_t gdc::Registry::storage<md::overlayComponents::DrapedRasterOverlay>(int8x8_t *a1)
{
  uint64_t v10 = 0x1866018A21896929;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1866018A21896929;
    if (*(void *)&v1 <= 0x1866018A21896929uLL) {
      uint64_t v3 = 0x1866018A21896929uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1866018A21896929;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1866018A21896929)
      {
        if (v5[2] == 0x1866018A21896929) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1866018A21896929) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1866018A21896929) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C24718(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Decal>(int8x8_t *a1)
{
  uint64_t v10 = 0x43A96E24B5C6AF5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x43A96E24B5C6AF5;
    if (*(void *)&v1 <= 0x43A96E24B5C6AF5uLL) {
      uint64_t v3 = 0x43A96E24B5C6AF5uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x43A96E24B5C6AF5;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x43A96E24B5C6AF5)
      {
        if (v5[2] == 0x43A96E24B5C6AF5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x43A96E24B5C6AF5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x43A96E24B5C6AF5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C24988(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::IntersectionWithTileEdges>(int8x8_t *a1)
{
  uint64_t v10 = 0x17A57C92AE39566DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x17A57C92AE39566DLL;
    if (*(void *)&v1 <= 0x17A57C92AE39566DuLL) {
      uint64_t v3 = 0x17A57C92AE39566DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x17A57C92AE39566DLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x17A57C92AE39566DLL)
      {
        if (v5[2] == 0x17A57C92AE39566DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x17A57C92AE39566DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x17A57C92AE39566DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C24BF8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::PositionScaleFactor>(int8x8_t *a1)
{
  uint64_t v10 = 0x3E97B8EB1BFDB5F4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3E97B8EB1BFDB5F4;
    if (*(void *)&v1 <= 0x3E97B8EB1BFDB5F4uLL) {
      uint64_t v3 = 0x3E97B8EB1BFDB5F4uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3E97B8EB1BFDB5F4;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3E97B8EB1BFDB5F4)
      {
        if (v5[2] == 0x3E97B8EB1BFDB5F4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3E97B8EB1BFDB5F4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3E97B8EB1BFDB5F4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C24E68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::HideWhenCollapsed>(int8x8_t *a1)
{
  uint64_t v10 = 0x24CEDFE393EA39F1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x24CEDFE393EA39F1;
    if (*(void *)&v1 <= 0x24CEDFE393EA39F1uLL) {
      uint64_t v3 = 0x24CEDFE393EA39F1uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x24CEDFE393EA39F1;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x24CEDFE393EA39F1)
      {
        if (v5[2] == 0x24CEDFE393EA39F1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x24CEDFE393EA39F1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x24CEDFE393EA39F1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C250D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::GeneratedTexture>(int8x8_t *a1)
{
  uint64_t v10 = 0x275245E41E832F30;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x275245E41E832F30;
    if (*(void *)&v1 <= 0x275245E41E832F30uLL) {
      uint64_t v3 = 0x275245E41E832F30uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x275245E41E832F30;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x275245E41E832F30)
      {
        if (v5[2] == 0x275245E41E832F30) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x275245E41E832F30) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x275245E41E832F30) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C25348(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::SubtileZone>(int8x8_t *a1)
{
  unint64_t v10 = 0x8AD11DEF4A920028;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8AD11DEF4A920028;
    if (*(void *)&v1 <= 0x8AD11DEF4A920028) {
      unint64_t v3 = 0x8AD11DEF4A920028 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8AD11DEF4A920028;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8AD11DEF4A920028)
      {
        if (v5[2] == 0x8AD11DEF4A920028) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8AD11DEF4A920028) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8AD11DEF4A920028) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C255B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::MarketMask>(int8x8_t *a1)
{
  uint64_t v10 = 0x1049843FF67503A0;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1049843FF67503A0;
    if (*(void *)&v1 <= 0x1049843FF67503A0uLL) {
      uint64_t v3 = 0x1049843FF67503A0uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1049843FF67503A0;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1049843FF67503A0)
      {
        if (v5[2] == 0x1049843FF67503A0) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1049843FF67503A0) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1049843FF67503A0) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C25828(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::AlbedoTint>(int8x8_t *a1)
{
  unint64_t v10 = 0xBD729E76E3A79E70;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBD729E76E3A79E70;
    if (*(void *)&v1 <= 0xBD729E76E3A79E70) {
      unint64_t v3 = 0xBD729E76E3A79E70 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBD729E76E3A79E70;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBD729E76E3A79E70)
      {
        if (v5[2] == 0xBD729E76E3A79E70) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBD729E76E3A79E70) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBD729E76E3A79E70) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C25A98(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t *ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    operator new();
  }
  uint64_t v6 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v6;
  a1[5] = 0;
  a1[6] = 0;
  {
    operator new();
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  if (v7 != a2)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_6:
    a1[11] = v7;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(void, unint64_t *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1 + 8);
LABEL_8:
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8)
  {
LABEL_11:
    a1[15] = v8;
    goto LABEL_13;
  }
  if (v8 != a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(void, unint64_t *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  unint64_t v9 = *a1;
  if (a1[2] - *a1 > 0x31F) {
    goto LABEL_26;
  }
  unint64_t v10 = a1[1];
  uint64_t v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 800, 8);
  uint64_t v12 = v10 - v9;
  unint64_t v13 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = *a1;
  unint64_t v14 = a1[1];
  unint64_t v16 = v14 - *a1;
  if (v14 == *a1)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  unint64_t v17 = v16 - 8;
  if (v16 - 8 >= 0x58)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    if (v14 - (v12 & 0xFFFFFFFFFFFFFFF8) - v11 >= 0x20)
    {
      uint64_t v19 = v12 >> 3;
      uint64_t v20 = (v17 >> 3) + 1;
      uint64_t v21 = (_OWORD *)(v11 + 8 * v19 - 16);
      unint64_t v22 = (long long *)(v14 - 16);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      unint64_t v18 = v13 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v25 = *(void *)(v14 - 8);
    v14 -= 8;
    *(void *)(v18 - 8) = v25;
    v18 -= 8;
  }
  while (v14 != v15);
LABEL_23:
  unint64_t v14 = *a1;
LABEL_24:
  *a1 = v18;
  a1[1] = v13;
  unint64_t v26 = a1[2];
  a1[2] = v11 + 800;
  if (v14) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[3] + 40))(a1[3], v14, v26 - v14);
  }
LABEL_26:
  unint64_t v27 = a1[4];
  if (a1[6] - v27 > 0x31F) {
    return a1;
  }
  unint64_t v28 = a1[5];
  uint64_t v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[7] + 16))(a1[7], 800, 8);
  uint64_t v30 = v28 - v27;
  unint64_t v31 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = a1[4];
  unint64_t v32 = a1[5];
  unint64_t v34 = v32 - v33;
  if (v32 == v33)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  unint64_t v35 = v34 - 8;
  if (v34 - 8 >= 0x58)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    if (v32 - (v30 & 0xFFFFFFFFFFFFFFF8) - v29 >= 0x20)
    {
      uint64_t v37 = v30 >> 3;
      uint64_t v38 = (v35 >> 3) + 1;
      uint64_t v39 = (_OWORD *)(v29 + 8 * v37 - 16);
      uint64_t v40 = (long long *)(v32 - 16);
      uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *uint64_t v39 = v42;
        v39 -= 2;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      unint64_t v36 = v31 - 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v32 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_36;
      }
    }
  }
  else
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v43 = *(void *)(v32 - 8);
    v32 -= 8;
    *(void *)(v36 - 8) = v43;
    v36 -= 8;
  }
  while (v32 != v33);
LABEL_36:
  unint64_t v32 = a1[4];
LABEL_37:
  a1[4] = v36;
  a1[5] = v31;
  unint64_t v44 = a1[6];
  a1[6] = v29 + 800;
  if (v32) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[7] + 40))(a1[7], v32, v44 - v32);
  }
  return a1;
}

void sub_1A1C25F5C(_Unwind_Exception *a1)
{
  std::function<ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~function(v3);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v2);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B160;
}

uint64_t std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578600;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5782A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578258;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578210;
  a2[1] = v2;
  return result;
}

void md::LabelsLogic::setWorldType(uint64_t a1, unsigned int a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(a1 + 216) != a2)
  {
    *(unsigned char *)(a1 + 216) = a2;
    unint64_t v4 = md::LabelsLogic::labelManagerForWorldType((void *)a1, a2);
    uint64_t v7 = (md::LabelManager *)*v4;
    uint64_t v6 = (std::__shared_weak_count *)v4[1];
    uint64_t v52 = *v4;
    uint64_t v53 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(md::LabelManager **)(a1 + 160);
    if (v8 != v7)
    {
      md::LabelManager::synchWithHomeQueue(v8, 0);
      uint64_t v9 = *(void *)(a1 + 144);
      if (*(md::LabelManager **)(v9 + 24) != v7)
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v9 + 32);
        char v54 = *(md::LabelManager **)(v9 + 24);
        uint64_t v55 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = *(std::__shared_weak_count **)(v9 + 32);
        *(void *)(v9 + 24) = v7;
        *(void *)(v9 + 32) = v6;
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        uint64_t v12 = **(unsigned __int8 **)(v9 + 40);
        unint64_t v13 = *(md::LabelManager **)(v9 + 24);
        unint64_t v56 = (void (**)(void **))&unk_1EF56E400;
        long long v57 = v13;
        uint64_t v58 = v12;
        uint64_t v59 = (uint64_t *)&v56;
        md::LabelManager::queueCommand(v13, 13, 1, &v56);
        if (v59 == (uint64_t *)&v56)
        {
          v56[4]((void **)&v56);
        }
        else if (v59)
        {
          (*(void (**)(void))(*v59 + 40))();
        }
        uint64_t v14 = *(unsigned __int8 *)(*(void *)(v9 + 40) + 25);
        unint64_t v15 = *(md::LabelManager **)(v9 + 24);
        *((unsigned char *)v15 + 3568) = v14;
        unint64_t v56 = (void (**)(void **))&unk_1EF56E568;
        long long v57 = v15;
        uint64_t v58 = v14;
        uint64_t v59 = (uint64_t *)&v56;
        md::LabelManager::queueCommand(v15, 14, 1, &v56);
        if (v59 == (uint64_t *)&v56)
        {
          v56[4]((void **)&v56);
        }
        else if (v59)
        {
          (*(void (**)(void))(*v59 + 40))();
        }
        uint64_t v16 = *(unsigned __int8 *)(*(void *)(v9 + 40) + 26);
        unint64_t v17 = *(md::LabelManager **)(v9 + 24);
        *((unsigned char *)v17 + 3569) = v16;
        unint64_t v56 = (void (**)(void **))&unk_1EF56EEF8;
        long long v57 = v17;
        uint64_t v58 = v16;
        uint64_t v59 = (uint64_t *)&v56;
        md::LabelManager::queueCommand(v17, 15, 1, &v56);
        if (v59 == (uint64_t *)&v56)
        {
          v56[4]((void **)&v56);
        }
        else if (v59)
        {
          (*(void (**)(void))(*v59 + 40))();
        }
        md::LabelSettings::setExternalTrafficFeatures(v9, *(void **)(*(void *)(v9 + 40) + 64), *(unsigned __int8 *)(*(void *)(v9 + 40) + 264));
        md::LabelSettings::setHiddenTrafficIncidentFeatures(v9, *(void **)(*(void *)(v9 + 40) + 88));
        md::LabelSettings::setARWalkingFeatures((md::LabelSettings *)v9, *(VKARWalkingFeatureSet **)(*(void *)(v9 + 40) + 144), 1);
        md::LabelSettings::setClientLocalizedStrings((md::LabelSettings *)v9, *(VKClientLocalizedStrings **)(*(void *)(v9 + 40) + 280));
        md::LabelSettings::setLabelExclusionRegions(v9, *(void **)(*(void *)(v9 + 40) + 112));
        id v18 = *(id *)(*(void *)(v9 + 40) + 128);
        uint64_t v19 = *(void *)(v9 + 40);
        uint64_t v20 = *(void **)(v19 + 128);
        *(void *)(v19 + 128) = v18;
        id v21 = v18;

        md::LabelManager::setScreenLabelFeatures(*(md::LabelManager **)(v9 + 24), v21);
        uint64_t v22 = *(void *)(v9 + 40);
        uint64_t v23 = *(void *)(v22 + 320);
        long long v24 = *(md::LabelManager **)(v9 + 24);
        if (*((void *)v24 + 432) != v23)
        {
          unint64_t v56 = (void (**)(void **))&unk_1EF56EFD0;
          long long v57 = v24;
          uint64_t v58 = v23;
          uint64_t v59 = (uint64_t *)&v56;
          md::LabelManager::queueCommand(v24, 70, 1, &v56);
          if (v59 == (uint64_t *)&v56)
          {
            v56[4]((void **)&v56);
          }
          else if (v59)
          {
            (*(void (**)(void))(*v59 + 40))();
          }
          uint64_t v22 = *(void *)(v9 + 40);
        }
        id v25 = *(id *)(v22 + 168);
        unint64_t v26 = [v25 allObjects];
        [*(id *)(*(void *)(v9 + 40) + 168) removeAllObjects];
        [*(id *)(*(void *)(v9 + 40) + 168) addObjectsFromArray:v26];
        md::LabelManager::setCustomFeatureDataSources(*(md::LabelManager **)(v9 + 24), v26);

        md::LabelManager::setCustomFeatureDataSources(v54, 0);
        (*(void (**)(void))(**(void **)(*((void *)v54 + 21) + 72) + 8))(*(void *)(*((void *)v54 + 21) + 72));
        md::LabelSettings_Presentation::setShieldSize(*(md::LabelManager **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 1));
        md::LabelSettings_Presentation::setShieldIdiom(*(md::LabelManager **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(void *)(*(void *)(*(void *)v9 + 40) + 8));
        md::LabelSettings_Presentation::setShowsVenues(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 16));
        md::LabelSettings_Presentation::setLocalizeLabels(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 24));
        md::LabelSettings_Presentation::setLabelScaleFactor(*(md::LabelManager **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 48));
        md::LabelSettings_Presentation::setShowsPOIs(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 17));
        md::LabelSettings_Presentation::setShowsPointLabels(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 18));
        md::LabelSettings_Presentation::setShowsRoadLabels(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 19));
        md::LabelSettings_Presentation::setShowsRoadShields(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 20));
        md::LabelSettings_Presentation::setShowsContourLabels(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 21));
        md::LabelSettings_Presentation::setShowsPhysicalFeatureLabels(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 22));
        md::LabelSettings_Presentation::setShowsLabels(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 23));
        uint64_t v27 = *(void *)(*(void *)v9 + 40);
        unint64_t v28 = *(std::__shared_weak_count **)(v27 + 304);
        unint64_t v56 = *(void (***)(void **))(v27 + 296);
        long long v57 = (md::LabelManager *)v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        md::LabelSettings_Presentation::setPointsOfInterestFilter(v9, (uint64_t *)&v56);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        md::LabelSettings_Presentation::setMKRenderingSelectionBalloon(*(md::LabelSettings_Presentation **)(*(void *)v9 + 24), *(void *)(*(void *)v9 + 40), *(unsigned __int8 *)(*(void *)(*(void *)v9 + 40) + 27));
        id v29 = *(id *)(*(void *)(*(void *)v9 + 40) + 312);
        uint64_t v30 = *(void *)(*(void *)v9 + 40);
        unint64_t v31 = *(void **)(v30 + 312);
        *(void *)(v30 + 312) = v29;
        id v32 = v29;

        md::LabelSettings_Navigation::setNavigationShieldSize(*(md::LabelManager **)(*(void *)(v9 + 8) + 24), *(void *)(*(void *)(v9 + 8) + 40), *(unsigned __int8 *)(*(void *)(*(void *)(v9 + 8) + 40) + 2));
        md::LabelSettings_Navigation::setRouteUserOffset((md::LabelSettings_Navigation *)(v9 + 8), (const PolylineCoordinate *)(*(void *)(*(void *)(v9 + 8) + 40) + 184));
        unint64_t v33 = (VKPolylineOverlay *)*(id *)(*(void *)(*(void *)(v9 + 8) + 40) + 200);
        md::LabelSettings_Navigation::setFocusedPolyline((md::LabelSettings_Navigation *)(v9 + 8), v33);

        md::LabelManager::setFocusedPolyline(v54, 0);
        unint64_t v34 = (VKRouteContext *)*(id *)(*(void *)(*(void *)(v9 + 8) + 40) + 224);
        md::LabelSettings_Navigation::setRouteContext((md::LabelSettings_Navigation *)(v9 + 8), v34);

        unint64_t v35 = (NSString *)*(id *)(*(void *)(*(void *)(v9 + 8) + 40) + 248);
        md::LabelSettings_Navigation::setCurrentLocationText((md::LabelSettings_Navigation *)(v9 + 8), v35);

        md::LabelSettings_Markers::setSelectionEnabled(*(md::LabelSettings_Markers **)(*(void *)(v9 + 16) + 24), *(void *)(*(void *)(v9 + 16) + 40), *(unsigned __int8 *)(*(void *)(*(void *)(v9 + 16) + 40) + 28));
        uint64_t v36 = *(void *)(*(void *)(v9 + 16) + 40);
        uint64_t v37 = *(void *)(v36 + 32);
        int v5 = (uint64_t *)(v36 + 32);
        if (v37)
        {
          md::LabelManager::adoptSelectedLabelMarker(v52, v5);
          md::LabelManager::releaseAdoptedSelectedLabelMarker(v54, 0);
        }
        *(unsigned char *)(*(void *)(v9 + 24) + 3055) = 1;
        *((unsigned char *)v54 + 3055) = 0;
        if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t *))v55->__on_zero_shared)(v55, v5);
          std::__shared_weak_count::__release_weak(v55);
        }
        uint64_t v7 = (md::LabelManager *)v52;
        uint64_t v6 = v53;
      }
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v38 = *(std::__shared_weak_count **)(a1 + 168);
      *(void *)(a1 + 160) = v7;
      *(void *)(a1 + 168) = v6;
      if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, uint64_t *))v38->__on_zero_shared)(v38, v5);
        std::__shared_weak_count::__release_weak(v38);
      }
      if ((a2 & 0xFE) == 2)
      {
        uint64_t v39 = *(md::LabelManager **)(a1 + 192);
        if (v39)
        {
          do
          {
            while (*((unsigned __int8 *)v39 + 16) == a2)
            {
              uint64_t v39 = *(md::LabelManager **)v39;
              if (!v39) {
                goto LABEL_82;
              }
            }
            md::LabelManager::willShutdown(*((md::LabelManager **)v39 + 3));
            int8x8_t v40 = *(int8x8_t *)(a1 + 184);
            unint64_t v41 = *((void *)v39 + 1);
            uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              if (v41 >= *(void *)&v40) {
                v41 %= *(void *)&v40;
              }
            }
            else
            {
              v41 &= *(void *)&v40 - 1;
            }
            uint64_t v43 = *(md::LabelManager **)v39;
            uint64_t v44 = *(void *)(a1 + 176);
            uint64_t v45 = *(md::LabelManager **)(v44 + 8 * v41);
            do
            {
              BOOL v46 = v45;
              uint64_t v45 = *(md::LabelManager **)v45;
            }
            while (v45 != v39);
            if (v46 == (void *)(a1 + 192)) {
              goto LABEL_87;
            }
            unint64_t v47 = v46[1];
            if (v42.u32[0] > 1uLL)
            {
              if (v47 >= *(void *)&v40) {
                v47 %= *(void *)&v40;
              }
            }
            else
            {
              v47 &= *(void *)&v40 - 1;
            }
            uint64_t v48 = *(md::LabelManager **)v39;
            if (v47 != v41)
            {
LABEL_87:
              if (v43)
              {
                unint64_t v49 = *((void *)v43 + 1);
                if (v42.u32[0] > 1uLL)
                {
                  if (v49 >= *(void *)&v40) {
                    v49 %= *(void *)&v40;
                  }
                }
                else
                {
                  v49 &= *(void *)&v40 - 1;
                }
                uint64_t v48 = *(md::LabelManager **)v39;
                if (v49 == v41)
                {
LABEL_72:
                  unint64_t v50 = *((void *)v48 + 1);
                  if (v42.u32[0] > 1uLL)
                  {
                    if (v50 >= *(void *)&v40) {
                      v50 %= *(void *)&v40;
                    }
                  }
                  else
                  {
                    v50 &= *(void *)&v40 - 1;
                  }
                  if (v50 != v41)
                  {
                    *(void *)(*(void *)(a1 + 176) + 8 * v50) = v46;
                    uint64_t v48 = *(md::LabelManager **)v39;
                  }
                  goto LABEL_78;
                }
              }
              *(void *)(v44 + 8 * v41) = 0;
              uint64_t v48 = *(md::LabelManager **)v39;
            }
            if (v48) {
              goto LABEL_72;
            }
LABEL_78:
            *BOOL v46 = v48;
            *(void *)uint64_t v39 = 0;
            --*(void *)(a1 + 200);
            BOOL v51 = (std::__shared_weak_count *)*((void *)v39 + 4);
            if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
            operator delete(v39);
            uint64_t v39 = v43;
          }
          while (v43);
        }
      }
    }
LABEL_82:
    if (v53)
    {
      if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, uint64_t *))v53->__on_zero_shared)(v53, v5);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
}

void sub_1A1C26A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  std::function<void ()(void)>::~function((uint64_t *)va2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::LabelLayerDataSource::didActivate(md::LabelLayerDataSource *this)
{
  uint64_t v2 = *((void *)this + 100);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 48))(&v6);
    uint64_t v3 = v6;
    unint64_t v4 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)this + 101) = v3;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 102);
    *((void *)this + 102) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_weak(v5);
      unint64_t v4 = v7;
    }
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::operator()();
  }
}

uint64_t *std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  os_log_t result = md::LabelsLogic::labelManagerForWorldType(*(void **)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  uint64_t v4 = result[1];
  *a2 = *result;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t *md::LabelsLogic::labelManagerForWorldType(void *a1, unsigned int a2)
{
  if (a2 == 6) {
    unint64_t v2 = 5;
  }
  else {
    unint64_t v2 = a2;
  }
  int8x8_t v3 = (int8x8_t)a1[23];
  if (!*(void *)&v3) {
    goto LABEL_24;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = v2;
    if (*(void *)&v3 <= v2) {
      unint64_t v5 = v2 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (v3.i32[0] - 1) & v2;
  }
  uint64_t v6 = *(uint64_t ****)(a1[22] + 8 * v5);
  if (!v6 || (uint64_t v7 = *v6) == 0)
  {
LABEL_24:
    uint64_t v11 = a1[19];
    uint64_t v12 = operator new(0xF40uLL);
    v12[1] = 0;
    v12[2] = 0;
    *uint64_t v12 = &unk_1EF57F958;
    md::LabelManager::LabelManager(v12 + 3, v2, v11);
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      unint64_t v10 = v7[1];
      if (v10 == (uint64_t *)v2)
      {
        if (*((unsigned __int8 *)v7 + 16) == v2) {
          return (uint64_t *)(v7 + 3);
        }
      }
      else if (((unint64_t)v10 & v8) != v5)
      {
        goto LABEL_24;
      }
      uint64_t v7 = (uint64_t **)*v7;
      if (!v7) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = (unint64_t)v7[1];
    if (v9 == v2) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_24;
    }
LABEL_14:
    uint64_t v7 = (uint64_t **)*v7;
    if (!v7) {
      goto LABEL_24;
    }
  }
  if (*((unsigned __int8 *)v7 + 16) != v2) {
    goto LABEL_14;
  }
  return (uint64_t *)(v7 + 3);
}

void sub_1A1C272B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1A1C272D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::LabelManager::setCustomFeatureDataSources(md::LabelManager *this, NSArray *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  int8x8_t v3 = (void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 21) + 64) + 32))(*(void *)(*((void *)this + 21) + 64));
  if (v3)
  {
    uint8x8_t v4 = v14;
    while (v3[12])
      md::LabelCustomFeatureSupport::removeDataSourceInternal((uint64_t)v3, *(void **)(v3[9] + 32));
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    unint64_t v5 = v4;
    uint64_t v6 = [(NSArray *)v5 countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v16 != v7) {
            objc_enumerationMutation(v5);
          }
          id v9 = *(id *)(*((void *)&v15 + 1) + 8 * i);
          md::LabelCustomFeatureSupport::addDataSourceInternal((uint64_t)v3, v9);
        }
        uint64_t v6 = [(NSArray *)v5 countByEnumeratingWithState:&v15 objects:v21 count:16];
      }
      while (v6);
    }

    uint64_t v10 = v3[2];
    *(unsigned char *)(v10 + 3041) = 1;
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v10 + 3058));
    if (v11)
    {
      uint64_t v12 = *(void *)(v10 + 136);
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 56);
        if (v13)
        {
          uint64_t v20 = v10;
          char v19 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v13 + 48))(v13, &v20, &v19);
        }
      }
    }
  }
}

void sub_1A1C274D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *md::LabelSettings_Presentation::setShowsVenues(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 16) = a3;
  v4[0] = &unk_1EF56E208;
  v4[1] = this;
  v4[2] = a3;
  unint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 49, 1, v4);
  os_log_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C27618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelSettings_Markers::setSelectionEnabled(md::LabelSettings_Markers *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 28) = a3;
  v4[0] = &unk_1EF56F060;
  v4[1] = this;
  v4[2] = a3;
  unint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 16, 1, v4);
  os_log_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C27780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void md::LabelManager::setFocusedPolyline(md::LabelManager *this, VKPolylineOverlay *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a2;
  int8x8_t v3 = v5;
  uint8x8_t v4 = operator new(0x28uLL);
  *(void *)uint8x8_t v4 = &unk_1EF56E5B0;
  *((void *)v4 + 1) = this;
  *((void *)v4 + 2) = off_1EF559738;
  *((void *)v4 + 3) = 0;
  objc_storeStrong((id *)v4 + 3, v3);

  uint64_t v7 = v4;
  md::LabelManager::queueCommand(this, 38, 1, v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
}

void sub_1A1C279C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::function<void ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0,std::allocator<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 16) = off_1EF559738;

  operator delete((void *)a1);
}

void *md::LabelSettings_Presentation::setMKRenderingSelectionBalloon(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 27) = a3;
  v4[0] = &unk_1EF56F0A8;
  v4[1] = this;
  v4[2] = a3;
  unint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 67, 1, v4);
  os_log_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C27B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelSettings_Presentation::setShowsPhysicalFeatureLabels(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 22) = a3;
  v4[0] = &unk_1EF51DB10;
  v4[1] = this;
  v4[2] = a3;
  unint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 56, 1, v4);
  os_log_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C27CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void md::LabelSettings_Presentation::setPointsOfInterestFilter(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)a1 + 40);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 304);
  *(void *)(v4 + 296) = v6;
  *(void *)(v4 + 304) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(md::LabelManager **)(*(void *)a1 + 24);
  uint64_t v10 = *a2;
  id v9 = (std::__shared_weak_count *)a2[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  unsigned __int8 v11 = operator new(0x20uLL);
  *unsigned __int8 v11 = &unk_1EF56E490;
  v11[1] = v8;
  v11[2] = v10;
  v11[3] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v11;
  md::LabelManager::queueCommand(v8, 58, 1, v12);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
    if (!v9) {
      return;
    }
    goto LABEL_16;
  }
  if (v13) {
    (*(void (**)(void))(*v13 + 40))();
  }
  if (v9)
  {
LABEL_16:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1A1C27F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v14)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0,std::allocator<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  unint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *md::LabelSettings_Presentation::setShowsContourLabels(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 21) = a3;
  v4[0] = &unk_1EF51DAC8;
  v4[1] = this;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 55, 1, v4);
  os_log_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C2814C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelSettings_Presentation::setShowsRoadShields(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 20) = a3;
  v4[0] = &unk_1EF56E8C8;
  v4[1] = this;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 54, 1, v4);
  os_log_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C282B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelSettings_Presentation::setShowsPointLabels(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 18) = a3;
  v4[0] = &unk_1EF56E880;
  v4[1] = this;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 52, 1, v4);
  os_log_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C28424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelSettings_Presentation::setLabelScaleFactor(md::LabelManager *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 48) = a3;
  v4[0] = &unk_1EF56E838;
  v4[1] = a1;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(a1, 4, 1, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C28590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelSettings_Presentation::setShowsRoadLabels(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 19) = a3;
  v4[0] = &unk_1EF56E688;
  v4[1] = this;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 53, 1, v4);
  uint64_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C286FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelSettings_Presentation::setShowsLabels(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 23) = a3;
  v4[0] = &unk_1EF51DA80;
  v4[1] = this;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 57, 1, v4);
  uint64_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C28868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelSettings_Presentation::setShieldIdiom(md::LabelManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 8) = a3;
  v4[0] = &unk_1EF56E250;
  v4[1] = a1;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(a1, 12, 1, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C289D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelSettings_Presentation::setShieldSize(md::LabelManager *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 1) = a3;
  v4[0] = &unk_1EF56E1C0;
  v4[1] = a1;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(a1, 10, 1, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C28B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelSettings_Navigation::setNavigationShieldSize(md::LabelManager *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 2) = a3;
  v4[0] = &unk_1EF56EC28;
  v4[1] = a1;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(a1, 11, 1, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1C28CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void md::LabelSettings_Navigation::setCurrentLocationText(md::LabelSettings_Navigation *this, NSString *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = a2;
  uint64_t v4 = *(void *)(*(void *)this + 40);
  uint64_t v5 = v3;
  uint64_t v6 = v5;
  if (v5) {
    uint64_t v7 = v5;
  }
  uint64_t v8 = *(void **)(v4 + 248);
  *(void *)(v4 + 248) = v6;

  id v9 = *(md::LabelManager **)(*(void *)this + 24);
  uint64_t v12 = v6;
  unsigned __int8 v11 = v12;

  uint64_t v10 = operator new(0x28uLL);
  *(void *)uint64_t v10 = &unk_1EF56EA78;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 2) = &unk_1EF559F18;
  *((void *)v10 + 3) = 0;
  objc_storeStrong((id *)v10 + 3, v11);

  uint64_t v14 = v10;
  md::LabelManager::queueCommand(v9, 37, 1, v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
}

void sub_1A1C28F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::setCurrentLocationText(NSString *)::$_0,std::allocator<md::LabelManager::setCurrentLocationText(NSString *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF559F18;

  operator delete((void *)a1);
}

void *md::LabelSettings_Navigation::setRouteUserOffset(md::LabelSettings_Navigation *this, const PolylineCoordinate *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(PolylineCoordinate *)(*(void *)(*(void *)this + 40) + 184) = *a2;
  unint64_t v2 = *(PolylineCoordinate **)(*(void *)this + 24);
  v2[445] = *a2;
  PolylineCoordinate v3 = *a2;
  v5[0] = &unk_1EF56E640;
  v5[1] = v2;
  v5[2] = v3;
  uint64_t v6 = v5;
  md::LabelManager::queueCommand((md::LabelManager *)v2, 25, 1, v5);
  uint64_t result = v6;
  if (v6 == v5) {
    return (void *)(*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (void *)(*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_1A1C290F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void md::LabelSettings_Navigation::setFocusedPolyline(md::LabelSettings_Navigation *this, VKPolylineOverlay *a2)
{
  PolylineCoordinate v3 = a2;
  uint64_t v4 = *(void *)(*(void *)this + 40);
  uint64_t v7 = v3;
  if (v7) {
    uint64_t v5 = v7;
  }
  uint64_t v6 = *(void **)(v4 + 200);
  *(void *)(v4 + 200) = v7;

  md::LabelManager::setFocusedPolyline(*(md::LabelManager **)(*(void *)this + 24), v7);
}

void sub_1A1C291F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::LabelSettings_Navigation::setRouteContext(md::LabelSettings_Navigation *this, VKRouteContext *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(*(void *)this + 40);
  uint64_t v6 = v4;
  uint64_t v7 = v6;
  if (v6) {
    uint64_t v8 = v6;
  }
  id v9 = *(void **)(v5 + 224);
  *(void *)(v5 + 224) = v7;

  uint64_t v10 = *(id **)(*(void *)this + 24);
  uint64_t v23 = v7;
  objc_storeStrong(v10 + 441, a2);
  v24[1] = 0;

  v24[0] = &unk_1EF5595D8;
  if (v7)
  {
    int v11 = [(VKRouteContext *)v23 useType];
    if (v11 == 1) {
      uint64_t v12 = v23;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v11 == 1) {
      char v13 = 2;
    }
    else {
      char v13 = 0;
    }
    if (v11) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v23;
    }
    if (v11) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v11) {
      char v16 = v13;
    }
    else {
      char v16 = 1;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    char v16 = 0;
  }
  long long v17 = v14;
  long long v18 = v15;
  char v19 = v17;
  uint64_t v20 = operator new(0x20uLL);
  void *v20 = &unk_1EF56E2E0;
  v20[1] = v10;
  *((unsigned char *)v20 + 16) = v16;
  v20[3] = v19;
  id v25 = v20;
  md::LabelManager::queueCommand((md::LabelManager *)v10, 23, 1, v24);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void))(*v25 + 40))();
  }
  id v21 = v18;
  uint64_t v22 = operator new(0x20uLL);
  *uint64_t v22 = &unk_1EF56E328;
  v22[1] = v10;
  *((unsigned char *)v22 + 16) = v16;
  v22[3] = v21;
  id v25 = v22;
  md::LabelManager::queueCommand((md::LabelManager *)v10, 24, 1, v24);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void))(*v25 + 40))();
  }
}

void sub_1A1C294E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1C29528()
{
  JUMPOUT(0x1A1C29508);
}

void std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_0,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void md::LabelSettings::setHiddenTrafficIncidentFeatures(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v13 = a2;
  PolylineCoordinate v3 = [MEMORY[0x1E4F1CAD0] setWithArray:*(void *)(*(void *)(a1 + 40) + 88)];
  uint64_t v4 = [MEMORY[0x1E4F1CAD0] setWithArray:v13];
  if (([v3 isEqualToSet:v4] & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = v13;
    uint64_t v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    id v9 = *(void **)(v5 + 88);
    *(void *)(v5 + 88) = v7;

    uint64_t v10 = *(md::LabelManager **)(a1 + 24);
    id v14 = v7;
    id v11 = v14;

    uint64_t v12 = operator new(0x28uLL);
    *(void *)uint64_t v12 = &unk_1EF56F180;
    *((void *)v12 + 1) = v10;
    *((void *)v12 + 2) = &unk_1EF559E78;
    *((void *)v12 + 3) = 0;
    objc_storeStrong((id *)v12 + 3, v11);

    char v16 = v12;
    md::LabelManager::queueCommand(v10, 64, 1, v15);
    if (v16 == v15)
    {
      (*(void (**)(void *))(v15[0] + 32))(v15);
    }
    else if (v16)
    {
      (*(void (**)(void))(*v16 + 40))();
    }
  }
}

void sub_1A1C29820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  std::function<void ()(void)>::~function(&a18);

  _Unwind_Resume(a1);
}

void md::LabelSettings::setLabelExclusionRegions(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = v3;
  id v6 = v5;
  if (v5) {
    id v7 = v5;
  }
  id v8 = *(void **)(v4 + 112);
  *(void *)(v4 + 112) = v6;

  id v9 = *(md::LabelManager **)(a1 + 24);
  id v12 = v6;
  id v11 = v12;

  uint64_t v10 = operator new(0x28uLL);
  *(void *)uint64_t v10 = &unk_1EF56ED48;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 2) = &unk_1EF559E18;
  *((void *)v10 + 3) = 0;
  objc_storeStrong((id *)v10 + 3, v11);

  id v14 = v10;
  md::LabelManager::queueCommand(v9, 60, 1, v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
}

void sub_1A1C29A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0,std::allocator<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF559E18;

  operator delete((void *)a1);
}

void md::LabelSettings::setARWalkingFeatures(md::LabelSettings *this, VKARWalkingFeatureSet *a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if ((a3 & 1) != 0 || *(VKARWalkingFeatureSet **)(*((void *)this + 5) + 144) != v5)
  {
    if (GEOGetVectorKitLabelSettingsLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitLabelSettingsLog(void)::onceToken, &__block_literal_global_40287);
    }
    id v7 = GEOGetVectorKitLabelSettingsLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelSettingsLog(void)::log, OS_LOG_TYPE_INFO))
    {
      id v8 = "NO";
      if (a3) {
        id v8 = "YES";
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v8;
      __int16 v19 = 2112;
      uint64_t v20 = v6;
      _os_log_impl(&dword_1A1780000, v7, OS_LOG_TYPE_INFO, "setARWalkingFeatures(force:%s):%@", buf, 0x16u);
    }
    uint64_t v9 = *((void *)this + 5);
    uint64_t v10 = v6;
    id v11 = v10;
    if (v10) {
      id v12 = v10;
    }
    id v13 = *(void **)(v9 + 144);
    *(void *)(v9 + 144) = v11;

    id v14 = (md::LabelManager *)*((void *)this + 3);
    uint64_t v17 = v11;
    uint64_t v15 = v17;

    id v21 = 0;
    char v16 = operator new(0x28uLL);
    *(void *)char v16 = &unk_1EF56E9A0;
    *((void *)v16 + 1) = v14;
    *((void *)v16 + 2) = &unk_1EF5599B8;
    *((void *)v16 + 3) = 0;
    objc_storeStrong((id *)v16 + 3, v15);

    id v21 = v16;
    md::LabelManager::queueCommand(v14, 63, 1, buf);
    if (v21 == buf)
    {
      (*(void (**)(unsigned char *))(*(void *)buf + 32))(buf);
    }
    else if (v21)
    {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
  }
}

void sub_1A1C29DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::function<void ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0,std::allocator<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF5599B8;

  operator delete((void *)a1);
}

void md::LabelManager::setScreenLabelFeatures(md::LabelManager *a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v4[0] = &unk_1EF56EB50;
  v4[1] = a1;
  v4[2] = v3;
  id v5 = v4;
  md::LabelManager::queueCommand(a1, 69, 1, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
}

void sub_1A1C29FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0,std::allocator<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void ggl::SDFGlyphShader::typedReflection(ggl::SDFGlyphShader *this)
{
  {
    if (v1)
    {
      ggl::SDFGlyphShader::typedReflection(void)::ref = (uint64_t)"SDFGlyphShader";
      ggl::sDFGlyphShaderVertexFunctionDescriptor(v1);
      qword_1EB320C00 = (uint64_t)&ggl::sDFGlyphShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<21ul>("SDFGlyphShaderVertex");
      dword_1EB320C08 = (int)v2;
      ggl::sDFGlyphShaderFragmentFunctionDescriptor(v2);
      qword_1EB320C10 = (uint64_t)&ggl::sDFGlyphShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320C18 = ggl::crc32::compute<23ul>("SDFGlyphShaderFragment");
      qword_1EB320C20 = (uint64_t)ggl::sDFGlyphShaderShaderConstants(void)::ref;
      unk_1EB320C28 = 6;
      qword_1EB320C30 = (uint64_t)ggl::sDFGlyphShaderShaderTextures(void)::ref;
      unk_1EB320C38 = 3;
      qword_1EB320C40 = (uint64_t)ggl::sDFGlyphShaderShaderSamplers(void)::ref;
      unk_1EB320C48 = 3;
    }
  }
}

void ggl::sDFGlyphShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::sDFGlyphShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("SDFGlyphShaderFragment");
    *(_DWORD *)algn_1EB324FC4 = 1;
    qword_1EB324FC8 = (uint64_t)"SDFGlyphShader";
    unk_1EB324FD0 = 0;
    qword_1EB324FD8 = 0;
    unk_1EB324FE0 = &ggl::sDFGlyphShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB324FE8 = 2;
    unk_1EB324FF0 = &ggl::sDFGlyphShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB324FF8 = 0;
    unk_1EB325000 = &ggl::sDFGlyphShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325008 = 1;
    unk_1EB325010 = &ggl::sDFGlyphShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325020 = 0;
    unk_1EB325028 = 0;
    qword_1EB325018 = 1;
  }
}

void ggl::sDFGlyphShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::sDFGlyphShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("SDFGlyphShaderVertex");
    *(_DWORD *)algn_1EB324ADC = 0;
    qword_1EB324AE0 = (uint64_t)"SDFGlyphShader";
    unk_1EB324AE8 = ggl::sDFGlyphShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324AF0 = 1;
    unk_1EB324AF8 = &ggl::sDFGlyphShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324B00 = 4;
    unk_1EB324B08 = &ggl::sDFGlyphShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324B10 = 0;
    unk_1EB324B18 = &ggl::sDFGlyphShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324B20 = 2;
    unk_1EB324B28 = &ggl::sDFGlyphShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324B38 = 0;
    unk_1EB324B40 = 0;
    qword_1EB324B30 = 2;
  }
}

void ggl::VSSpriteShader::typedReflection(ggl::VSSpriteShader *this)
{
  {
    if (v1)
    {
      ggl::VSSpriteShader::typedReflection(void)::ref = (uint64_t)"VSSpriteShader";
      ggl::vSSpriteShaderVertexFunctionDescriptor(v1);
      qword_1EB320CC0 = (uint64_t)&ggl::vSSpriteShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<21ul>("VSSpriteShaderVertex");
      dword_1EB320CC8 = (int)v2;
      ggl::vSSpriteShaderFragmentFunctionDescriptor(v2);
      qword_1EB320CD0 = (uint64_t)&ggl::vSSpriteShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320CD8 = ggl::crc32::compute<23ul>("VSSpriteShaderFragment");
      qword_1EB320CE0 = (uint64_t)ggl::vSSpriteShaderShaderConstants(void)::ref;
      unk_1EB320CE8 = 1;
      qword_1EB320CF0 = (uint64_t)ggl::vSSpriteShaderShaderTextures(void)::ref;
      unk_1EB320CF8 = 2;
      qword_1EB320D00 = (uint64_t)ggl::vSSpriteShaderShaderSamplers(void)::ref;
      unk_1EB320D08 = 2;
    }
  }
}

void ggl::vSSpriteShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::vSSpriteShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("VSSpriteShaderFragment");
    *(_DWORD *)algn_1EB325114 = 1;
    qword_1EB325118 = (uint64_t)"VSSpriteShader";
    unk_1EB325120 = 0;
    qword_1EB325128 = 0;
    unk_1EB325130 = &ggl::vSSpriteShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325138 = 0;
    unk_1EB325140 = &ggl::vSSpriteShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB325148 = 0;
    unk_1EB325150 = &ggl::vSSpriteShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325158 = 2;
    unk_1EB325160 = &ggl::vSSpriteShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325170 = 0;
    unk_1EB325178 = 0;
    qword_1EB325168 = 2;
  }
}

void ggl::vSSpriteShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::vSSpriteShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("VSSpriteShaderVertex");
    *(_DWORD *)algn_1EB324BBC = 0;
    qword_1EB324BC0 = (uint64_t)"VSSpriteShader";
    unk_1EB324BC8 = ggl::vSSpriteShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324BD0 = 1;
    unk_1EB324BD8 = &ggl::vSSpriteShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324BE0 = 1;
    unk_1EB324BE8 = &ggl::vSSpriteShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324BF0 = 0;
    unk_1EB324BF8 = &ggl::vSSpriteShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324C00 = 0;
    unk_1EB324C08 = &ggl::vSSpriteShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324C18 = 0;
    unk_1EB324C20 = 0;
    qword_1EB324C10 = 0;
  }
}

void ggl::TexturedShader::typedReflection(ggl::TexturedShader *this)
{
  {
    if (v1)
    {
      ggl::TexturedShader::typedReflection(void)::ref = (uint64_t)"TexturedShader";
      ggl::texturedShaderVertexFunctionDescriptor(v1);
      qword_1EB320C60 = (uint64_t)&ggl::texturedShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<21ul>("TexturedShaderVertex");
      dword_1EB320C68 = (int)v2;
      ggl::texturedShaderFragmentFunctionDescriptor(v2);
      qword_1EB320C70 = (uint64_t)&ggl::texturedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320C78 = ggl::crc32::compute<23ul>("TexturedShaderFragment");
      qword_1EB320C80 = (uint64_t)ggl::texturedShaderShaderConstants(void)::ref;
      unk_1EB320C88 = 3;
      qword_1EB320C90 = (uint64_t)ggl::texturedShaderShaderTextures(void)::ref;
      unk_1EB320C98 = 1;
      qword_1EB320CA0 = (uint64_t)ggl::texturedShaderShaderSamplers(void)::ref;
      unk_1EB320CA8 = 1;
    }
  }
}

void ggl::texturedShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("TexturedShaderFragment");
    *(_DWORD *)algn_1EB3250A4 = 1;
    qword_1EB3250A8 = (uint64_t)"TexturedShader";
    unk_1EB3250B0 = 0;
    qword_1EB3250B8 = 0;
    unk_1EB3250C0 = &ggl::texturedShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3250C8 = 0;
    unk_1EB3250D0 = &ggl::texturedShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3250D8 = 0;
    unk_1EB3250E0 = &ggl::texturedShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3250E8 = 1;
    unk_1EB3250F0 = &ggl::texturedShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325100 = 0;
    unk_1EB325108 = 0;
    qword_1EB3250F8 = 1;
  }
}

void ggl::texturedShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("TexturedShaderVertex");
    *(_DWORD *)algn_1EB324B4C = 0;
    qword_1EB324B50 = (uint64_t)"TexturedShader";
    unk_1EB324B58 = ggl::texturedShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324B60 = 1;
    unk_1EB324B68 = &ggl::texturedShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324B70 = 3;
    unk_1EB324B78 = &ggl::texturedShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324B80 = 0;
    unk_1EB324B88 = &ggl::texturedShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324B90 = 0;
    unk_1EB324B98 = &ggl::texturedShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324BA8 = 0;
    unk_1EB324BB0 = 0;
    qword_1EB324BA0 = 0;
  }
}

void ggl::ShrinkBlur4XShader::typedReflection(ggl::ShrinkBlur4XShader *this)
{
  {
    if (v1)
    {
      ggl::ShrinkBlur4XShader::typedReflection(void)::ref = (uint64_t)"ShrinkBlur4XShader";
      ggl::shrinkBlur4XShaderVertexFunctionDescriptor(v1);
      qword_1EB321598 = (uint64_t)&ggl::shrinkBlur4XShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("ShrinkBlur4XShaderVertex");
      dword_1EB3215A0 = (int)v2;
      ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(v2);
      qword_1EB3215A8 = (uint64_t)&ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3215B0 = ggl::crc32::compute<27ul>("ShrinkBlur4XShaderFragment");
      qword_1EB3215B8 = (uint64_t)&ggl::shrinkBlur4XShaderShaderConstants(void)::ref;
      unk_1EB3215C0 = 0;
      qword_1EB3215C8 = (uint64_t)ggl::shrinkBlur4XShaderShaderTextures(void)::ref;
      unk_1EB3215D0 = 1;
      qword_1EB3215D8 = (uint64_t)&ggl::shrinkBlur4XShaderShaderSamplers(void)::ref;
      unk_1EB3215E0 = 1;
    }
  }
}

void ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("ShrinkBlur4XShaderFragment");
    *(_DWORD *)algn_1EB32663C = 1;
    qword_1EB326640 = (uint64_t)"ShrinkBlur4XShader";
    unk_1EB326648 = 0;
    qword_1EB326650 = 0;
    unk_1EB326658 = &ggl::shrinkBlur4XShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326660 = 0;
    unk_1EB326668 = &ggl::shrinkBlur4XShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326670 = 0;
    unk_1EB326678 = &ggl::shrinkBlur4XShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326680 = 1;
    unk_1EB326688 = &ggl::shrinkBlur4XShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326698 = 0;
    unk_1EB3266A0 = 0;
    qword_1EB326690 = 1;
  }
}

void ggl::shrinkBlur4XShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::shrinkBlur4XShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("ShrinkBlur4XShaderVertex");
    *(_DWORD *)algn_1EB325994 = 0;
    qword_1EB325998 = (uint64_t)"ShrinkBlur4XShader";
    unk_1EB3259A0 = ggl::shrinkBlur4XShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3259A8 = 1;
    unk_1EB3259B0 = &ggl::shrinkBlur4XShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3259B8 = 0;
    unk_1EB3259C0 = &ggl::shrinkBlur4XShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3259C8 = 0;
    unk_1EB3259D0 = &ggl::shrinkBlur4XShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3259D8 = 0;
    unk_1EB3259E0 = &ggl::shrinkBlur4XShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3259F0 = 0;
    unk_1EB3259F8 = 0;
    qword_1EB3259E8 = 0;
  }
}

void ggl::FlyoverPolarShader::typedReflection(ggl::FlyoverPolarShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverPolarShader::typedReflection(void)::ref = (uint64_t)"FlyoverPolarShader";
      ggl::flyoverPolarShaderVertexFunctionDescriptor(v1);
      qword_1E95855E0 = (uint64_t)&ggl::flyoverPolarShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("FlyoverPolarShaderVertex");
      dword_1E95855E8 = (int)v2;
      ggl::flyoverPolarShaderFragmentFunctionDescriptor(v2);
      qword_1E95855F0 = (uint64_t)&ggl::flyoverPolarShaderFragmentFunctionDescriptor(void)::ref;
      dword_1E95855F8 = ggl::crc32::compute<27ul>("FlyoverPolarShaderFragment");
      qword_1E9585600 = (uint64_t)ggl::flyoverPolarShaderShaderConstants(void)::ref;
      unk_1E9585608 = 6;
      qword_1E9585610 = (uint64_t)ggl::flyoverPolarShaderShaderTextures(void)::ref;
      unk_1E9585618 = 2;
      qword_1E9585620 = (uint64_t)ggl::flyoverPolarShaderShaderSamplers(void)::ref;
      unk_1E9585628 = 2;
    }
  }
}

void ggl::flyoverPolarShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverPolarShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverPolarShaderFragment");
    *(_DWORD *)algn_1E958C184 = 1;
    qword_1E958C188 = (uint64_t)"FlyoverPolarShader";
    unk_1E958C190 = 0;
    qword_1E958C198 = 0;
    unk_1E958C1A0 = &ggl::flyoverPolarShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1E958C1A8 = 2;
    unk_1E958C1B0 = &ggl::flyoverPolarShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1E958C1B8 = 0;
    unk_1E958C1C0 = &ggl::flyoverPolarShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1E958C1C8 = 1;
    unk_1E958C1D0 = &ggl::flyoverPolarShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1E958C1E0 = 0;
    unk_1E958C1E8 = 0;
    qword_1E958C1D8 = 1;
  }
}

void ggl::flyoverPolarShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverPolarShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("FlyoverPolarShaderVertex");
    *(_DWORD *)algn_1E958C10C = 0;
    qword_1E958C110 = (uint64_t)"FlyoverPolarShader";
    unk_1E958C118 = ggl::flyoverPolarShaderVertShaderFunctionAttributes(void)::ref;
    qword_1E958C120 = 1;
    unk_1E958C128 = &ggl::flyoverPolarShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1E958C130 = 6;
    unk_1E958C138 = &ggl::flyoverPolarShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1E958C140 = 0;
    unk_1E958C148 = &ggl::flyoverPolarShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1E958C150 = 1;
    unk_1E958C158 = &ggl::flyoverPolarShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1E958C168 = 0;
    unk_1E958C170 = 0;
    qword_1E958C160 = 1;
  }
}

void ggl::FlyoverNightShader::typedReflection(ggl::FlyoverNightShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverNightShader::typedReflection(void)::ref = (uint64_t)"FlyoverNightShader";
      ggl::flyoverNightShaderVertexFunctionDescriptor(v1);
      qword_1EB321420 = (uint64_t)&ggl::flyoverNightShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("FlyoverNightShaderVertex");
      dword_1EB321428 = (int)v2;
      ggl::flyoverNightShaderFragmentFunctionDescriptor(v2);
      qword_1EB321430 = (uint64_t)&ggl::flyoverNightShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321438 = ggl::crc32::compute<27ul>("FlyoverNightShaderFragment");
      qword_1EB321440 = (uint64_t)ggl::flyoverNightShaderShaderConstants(void)::ref;
      unk_1EB321448 = 5;
      qword_1EB321450 = (uint64_t)ggl::flyoverNightShaderShaderTextures(void)::ref;
      unk_1EB321458 = 3;
      qword_1EB321460 = (uint64_t)ggl::flyoverNightShaderShaderSamplers(void)::ref;
      unk_1EB321468 = 3;
    }
  }
}

void ggl::flyoverNightShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverNightShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverNightShaderFragment");
    *(_DWORD *)algn_1EB326304 = 1;
    qword_1EB326308 = (uint64_t)"FlyoverNightShader";
    unk_1EB326310 = 0;
    qword_1EB326318 = 0;
    unk_1EB326320 = &ggl::flyoverNightShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326328 = 2;
    unk_1EB326330 = &ggl::flyoverNightShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326338 = 0;
    unk_1EB326340 = &ggl::flyoverNightShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326348 = 2;
    unk_1EB326350 = &ggl::flyoverNightShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326360 = 0;
    unk_1EB326368 = 0;
    qword_1EB326358 = 2;
  }
}

void ggl::flyoverNightShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverNightShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("FlyoverNightShaderVertex");
    *(_DWORD *)algn_1EB3257CC = 0;
    qword_1EB3257D0 = (uint64_t)"FlyoverNightShader";
    unk_1EB3257D8 = ggl::flyoverNightShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3257E0 = 1;
    unk_1EB3257E8 = &ggl::flyoverNightShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3257F0 = 5;
    unk_1EB3257F8 = &ggl::flyoverNightShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325800 = 0;
    unk_1EB325808 = &ggl::flyoverNightShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325810 = 1;
    unk_1EB325818 = &ggl::flyoverNightShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325828 = 0;
    unk_1EB325830 = 0;
    qword_1EB325820 = 1;
  }
}

void ggl::BuildingFlatShader::typedReflection(ggl::BuildingFlatShader *this)
{
  {
    if (v1)
    {
      ggl::BuildingFlatShader::typedReflection(void)::ref = (uint64_t)"BuildingFlatShader";
      ggl::buildingFlatShaderVertexFunctionDescriptor(v1);
      qword_1EB321368 = (uint64_t)&ggl::buildingFlatShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("BuildingFlatShaderVertex");
      dword_1EB321370 = (int)v2;
      ggl::buildingFlatShaderFragmentFunctionDescriptor(v2);
      qword_1EB321378 = (uint64_t)&ggl::buildingFlatShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321380 = ggl::crc32::compute<27ul>("BuildingFlatShaderFragment");
      qword_1EB321388 = (uint64_t)ggl::buildingFlatShaderShaderConstants(void)::ref;
      unk_1EB321390 = 2;
      qword_1EB321398 = (uint64_t)&ggl::buildingFlatShaderShaderTextures(void)::ref;
      unk_1EB3213A0 = 0;
      qword_1EB3213A8 = (uint64_t)&ggl::buildingFlatShaderShaderSamplers(void)::ref;
      unk_1EB3213B0 = 0;
    }
  }
}

void ggl::buildingFlatShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingFlatShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("BuildingFlatShaderFragment");
    *(_DWORD *)algn_1EB3261AC = 1;
    qword_1EB3261B0 = (uint64_t)"BuildingFlatShader";
    unk_1EB3261B8 = 0;
    qword_1EB3261C0 = 0;
    unk_1EB3261C8 = &ggl::buildingFlatShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3261D0 = 0;
    unk_1EB3261D8 = &ggl::buildingFlatShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3261E0 = 0;
    unk_1EB3261E8 = &ggl::buildingFlatShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3261F0 = 0;
    unk_1EB3261F8 = &ggl::buildingFlatShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326208 = 0;
    unk_1EB326210 = 0;
    qword_1EB326200 = 0;
  }
}

void ggl::buildingFlatShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingFlatShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("BuildingFlatShaderVertex");
    *(_DWORD *)algn_1EB325674 = 0;
    qword_1EB325678 = (uint64_t)"BuildingFlatShader";
    unk_1EB325680 = ggl::buildingFlatShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325688 = 1;
    unk_1EB325690 = &ggl::buildingFlatShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325698 = 2;
    unk_1EB3256A0 = &ggl::buildingFlatShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3256A8 = 0;
    unk_1EB3256B0 = &ggl::buildingFlatShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3256B8 = 0;
    unk_1EB3256C0 = &ggl::buildingFlatShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3256D0 = 0;
    unk_1EB3256D8 = 0;
    qword_1EB3256C8 = 0;
  }
}

void ggl::SolidTrafficShader::typedReflection(ggl::SolidTrafficShader *this)
{
  {
    if (v1)
    {
      ggl::SolidTrafficShader::typedReflection(void)::ref = (uint64_t)"SolidTrafficShader";
      ggl::solidTrafficShaderVertexFunctionDescriptor(v1);
      qword_1EB3215F0 = (uint64_t)&ggl::solidTrafficShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("SolidTrafficShaderVertex");
      dword_1EB3215F8 = (int)v2;
      ggl::solidTrafficShaderFragmentFunctionDescriptor(v2);
      qword_1EB321600 = (uint64_t)&ggl::solidTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321608 = ggl::crc32::compute<27ul>("SolidTrafficShaderFragment");
      qword_1EB321610 = (uint64_t)ggl::solidTrafficShaderShaderConstants(void)::ref;
      unk_1EB321618 = 3;
      qword_1EB321620 = (uint64_t)ggl::solidTrafficShaderShaderTextures(void)::ref;
      unk_1EB321628 = 1;
      qword_1EB321630 = (uint64_t)ggl::solidTrafficShaderShaderSamplers(void)::ref;
      unk_1EB321638 = 1;
    }
  }
}

void ggl::solidTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::solidTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("SolidTrafficShaderFragment");
    *(_DWORD *)algn_1EB3266B4 = 1;
    qword_1EB3266B8 = (uint64_t)"SolidTrafficShader";
    unk_1EB3266C0 = 0;
    qword_1EB3266C8 = 0;
    unk_1EB3266D0 = &ggl::solidTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3266D8 = 1;
    unk_1EB3266E0 = &ggl::solidTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3266E8 = 0;
    unk_1EB3266F0 = &ggl::solidTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3266F8 = 1;
    unk_1EB326700 = &ggl::solidTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326710 = 0;
    unk_1EB326718 = 0;
    qword_1EB326708 = 1;
  }
}

void ggl::solidTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::solidTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SolidTrafficShaderVertex");
    *(_DWORD *)algn_1EB325A0C = 0;
    qword_1EB325A10 = (uint64_t)"SolidTrafficShader";
    unk_1EB325A18 = ggl::solidTrafficShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325A20 = 1;
    unk_1EB325A28 = &ggl::solidTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325A30 = 3;
    unk_1EB325A38 = &ggl::solidTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325A40 = 0;
    unk_1EB325A48 = &ggl::solidTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325A50 = 0;
    unk_1EB325A58 = &ggl::solidTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325A68 = 0;
    unk_1EB325A70 = 0;
    qword_1EB325A60 = 0;
  }
}

void ggl::VenueWallTopShader::typedReflection(ggl::VenueWallTopShader *this)
{
  {
    if (v1)
    {
      ggl::VenueWallTopShader::typedReflection(void)::ref = (uint64_t)"VenueWallTopShader";
      ggl::venueWallTopShaderVertexFunctionDescriptor(v1);
      qword_1EB321650 = (uint64_t)&ggl::venueWallTopShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("VenueWallTopShaderVertex");
      dword_1EB321658 = (int)v2;
      ggl::venueWallTopShaderFragmentFunctionDescriptor(v2);
      qword_1EB321660 = (uint64_t)&ggl::venueWallTopShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321668 = ggl::crc32::compute<27ul>("VenueWallTopShaderFragment");
      qword_1EB321670 = (uint64_t)ggl::venueWallTopShaderShaderConstants(void)::ref;
      unk_1EB321678 = 3;
      qword_1EB321680 = (uint64_t)ggl::venueWallTopShaderShaderTextures(void)::ref;
      unk_1EB321688 = 1;
      qword_1EB321690 = (uint64_t)ggl::venueWallTopShaderShaderSamplers(void)::ref;
      unk_1EB321698 = 1;
    }
  }
}

void ggl::venueWallTopShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::venueWallTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("VenueWallTopShaderFragment");
    *(_DWORD *)algn_1EB326814 = 1;
    qword_1EB326818 = (uint64_t)"VenueWallTopShader";
    unk_1EB326820 = 0;
    qword_1EB326828 = 0;
    unk_1EB326830 = &ggl::venueWallTopShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326838 = 0;
    unk_1EB326840 = &ggl::venueWallTopShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326848 = 0;
    unk_1EB326850 = &ggl::venueWallTopShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326858 = 1;
    unk_1EB326860 = &ggl::venueWallTopShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326870 = 0;
    unk_1EB326878 = 0;
    qword_1EB326868 = 1;
  }
}

void ggl::venueWallTopShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::venueWallTopShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("VenueWallTopShaderVertex");
    *(_DWORD *)algn_1EB325A7C = 0;
    qword_1EB325A80 = (uint64_t)"VenueWallTopShader";
    unk_1EB325A88 = ggl::venueWallTopShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325A90 = 1;
    unk_1EB325A98 = &ggl::venueWallTopShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325AA0 = 3;
    unk_1EB325AA8 = &ggl::venueWallTopShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325AB0 = 0;
    unk_1EB325AB8 = &ggl::venueWallTopShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325AC0 = 0;
    unk_1EB325AC8 = &ggl::venueWallTopShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325AD8 = 0;
    unk_1EB325AE0 = 0;
    qword_1EB325AD0 = 0;
  }
}

void ggl::DaVinciDecalShader::typedReflection(ggl::DaVinciDecalShader *this)
{
  {
    if (v1)
    {
      ggl::DaVinciDecalShader::typedReflection(void)::ref = (uint64_t)"DaVinciDecalShader";
      ggl::daVinciDecalShaderVertexFunctionDescriptor(v1);
      qword_1EB32BA88 = (uint64_t)&ggl::daVinciDecalShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("DaVinciDecalShaderVertex");
      dword_1EB32BA90 = (int)v2;
      ggl::daVinciDecalShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BA98 = (uint64_t)&ggl::daVinciDecalShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BAA0 = ggl::crc32::compute<27ul>("DaVinciDecalShaderFragment");
      qword_1EB32BAA8 = (uint64_t)ggl::daVinciDecalShaderShaderConstants(void)::ref;
      unk_1EB32BAB0 = 9;
      qword_1EB32BAB8 = (uint64_t)ggl::daVinciDecalShaderShaderTextures(void)::ref;
      unk_1EB32BAC0 = 4;
      qword_1EB32BAC8 = (uint64_t)ggl::daVinciDecalShaderShaderSamplers(void)::ref;
      unk_1EB32BAD0 = 4;
    }
  }
}

void ggl::daVinciDecalShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciDecalShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("DaVinciDecalShaderFragment");
    *(_DWORD *)algn_1EB32C1A4 = 1;
    qword_1EB32C1A8 = (uint64_t)"DaVinciDecalShader";
    unk_1EB32C1B0 = 0;
    qword_1EB32C1B8 = 0;
    unk_1EB32C1C0 = &ggl::daVinciDecalShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C1C8 = 5;
    unk_1EB32C1D0 = &ggl::daVinciDecalShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C1D8 = 0;
    unk_1EB32C1E0 = &ggl::daVinciDecalShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C1E8 = 4;
    unk_1EB32C1F0 = &ggl::daVinciDecalShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C200 = 0;
    unk_1EB32C208 = 0;
    qword_1EB32C1F8 = 4;
  }
}

void ggl::daVinciDecalShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciDecalShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("DaVinciDecalShaderVertex");
    *(_DWORD *)algn_1EB32BEE4 = 0;
    qword_1EB32BEE8 = (uint64_t)"DaVinciDecalShader";
    unk_1EB32BEF0 = ggl::daVinciDecalShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32BEF8 = 2;
    unk_1EB32BF00 = &ggl::daVinciDecalShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32BF08 = 4;
    unk_1EB32BF10 = &ggl::daVinciDecalShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32BF18 = 1;
    unk_1EB32BF20 = &ggl::daVinciDecalShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32BF28 = 0;
    unk_1EB32BF30 = &ggl::daVinciDecalShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32BF40 = 0;
    unk_1EB32BF48 = 0;
    qword_1EB32BF38 = 0;
  }
}

void ggl::SDFGlyphHaloShader::typedReflection(ggl::SDFGlyphHaloShader *this)
{
  {
    if (v1)
    {
      ggl::SDFGlyphHaloShader::typedReflection(void)::ref = (uint64_t)"SDFGlyphHaloShader";
      ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(v1);
      qword_1EB321540 = (uint64_t)&ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("SDFGlyphHaloShaderVertex");
      dword_1EB321548 = (int)v2;
      ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(v2);
      qword_1EB321550 = (uint64_t)&ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321558 = ggl::crc32::compute<27ul>("SDFGlyphHaloShaderFragment");
      qword_1EB321560 = (uint64_t)ggl::sDFGlyphHaloShaderShaderConstants(void)::ref;
      unk_1EB321568 = 6;
      qword_1EB321570 = (uint64_t)ggl::sDFGlyphHaloShaderShaderTextures(void)::ref;
      unk_1EB321578 = 3;
      qword_1EB321580 = (uint64_t)ggl::sDFGlyphHaloShaderShaderSamplers(void)::ref;
      unk_1EB321588 = 3;
    }
  }
}

void ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("SDFGlyphHaloShaderFragment");
    *(_DWORD *)algn_1EB3265C4 = 1;
    qword_1EB3265C8 = (uint64_t)"SDFGlyphHaloShader";
    unk_1EB3265D0 = 0;
    qword_1EB3265D8 = 0;
    unk_1EB3265E0 = &ggl::sDFGlyphHaloShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3265E8 = 2;
    unk_1EB3265F0 = &ggl::sDFGlyphHaloShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3265F8 = 0;
    unk_1EB326600 = &ggl::sDFGlyphHaloShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326608 = 1;
    unk_1EB326610 = &ggl::sDFGlyphHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326620 = 0;
    unk_1EB326628 = 0;
    qword_1EB326618 = 1;
  }
}

void ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SDFGlyphHaloShaderVertex");
    *(_DWORD *)algn_1EB32591C = 0;
    qword_1EB325920 = (uint64_t)"SDFGlyphHaloShader";
    unk_1EB325928 = ggl::sDFGlyphHaloShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325930 = 1;
    unk_1EB325938 = &ggl::sDFGlyphHaloShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325940 = 4;
    unk_1EB325948 = &ggl::sDFGlyphHaloShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325950 = 0;
    unk_1EB325958 = &ggl::sDFGlyphHaloShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325960 = 2;
    unk_1EB325968 = &ggl::sDFGlyphHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325978 = 0;
    unk_1EB325980 = 0;
    qword_1EB325970 = 2;
  }
}

void ggl::LandmarkFlatShader::typedReflection(ggl::LandmarkFlatShader *this)
{
  {
    if (v1)
    {
      ggl::LandmarkFlatShader::typedReflection(void)::ref = (uint64_t)"LandmarkFlatShader";
      ggl::landmarkFlatShaderVertexFunctionDescriptor(v1);
      qword_1EB3214E0 = (uint64_t)&ggl::landmarkFlatShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("LandmarkFlatShaderVertex");
      dword_1EB3214E8 = (int)v2;
      ggl::landmarkFlatShaderFragmentFunctionDescriptor(v2);
      qword_1EB3214F0 = (uint64_t)&ggl::landmarkFlatShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3214F8 = ggl::crc32::compute<27ul>("LandmarkFlatShaderFragment");
      qword_1EB321500 = (uint64_t)ggl::landmarkFlatShaderShaderConstants(void)::ref;
      unk_1EB321508 = 4;
      qword_1EB321510 = (uint64_t)ggl::landmarkFlatShaderShaderTextures(void)::ref;
      unk_1EB321518 = 1;
      qword_1EB321520 = (uint64_t)&ggl::landmarkFlatShaderShaderSamplers(void)::ref;
      unk_1EB321528 = 1;
    }
  }
}

void ggl::landmarkFlatShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::landmarkFlatShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("LandmarkFlatShaderFragment");
    *(_DWORD *)algn_1EB3264D4 = 1;
    qword_1EB3264D8 = (uint64_t)"LandmarkFlatShader";
    unk_1EB3264E0 = 0;
    qword_1EB3264E8 = 0;
    unk_1EB3264F0 = &ggl::landmarkFlatShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3264F8 = 1;
    unk_1EB326500 = &ggl::landmarkFlatShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326508 = 0;
    unk_1EB326510 = &ggl::landmarkFlatShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326518 = 1;
    unk_1EB326520 = &ggl::landmarkFlatShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326530 = 0;
    unk_1EB326538 = 0;
    qword_1EB326528 = 1;
  }
}

void ggl::landmarkFlatShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::landmarkFlatShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("LandmarkFlatShaderVertex");
    *(_DWORD *)algn_1EB3258AC = 0;
    qword_1EB3258B0 = (uint64_t)"LandmarkFlatShader";
    unk_1EB3258B8 = ggl::landmarkFlatShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3258C0 = 1;
    unk_1EB3258C8 = &ggl::landmarkFlatShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3258D0 = 4;
    unk_1EB3258D8 = &ggl::landmarkFlatShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3258E0 = 0;
    unk_1EB3258E8 = &ggl::landmarkFlatShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3258F0 = 0;
    unk_1EB3258F8 = &ggl::landmarkFlatShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325908 = 0;
    unk_1EB325910 = 0;
    qword_1EB325900 = 0;
  }
}

void ggl::FlyoverMorphShader::typedReflection(ggl::FlyoverMorphShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverMorphShader::typedReflection(void)::ref = (uint64_t)"FlyoverMorphShader";
      ggl::flyoverMorphShaderVertexFunctionDescriptor(v1);
      qword_1EB3213C0 = (uint64_t)&ggl::flyoverMorphShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("FlyoverMorphShaderVertex");
      dword_1EB3213C8 = (int)v2;
      ggl::flyoverMorphShaderFragmentFunctionDescriptor(v2);
      qword_1EB3213D0 = (uint64_t)&ggl::flyoverMorphShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3213D8 = ggl::crc32::compute<27ul>("FlyoverMorphShaderFragment");
      qword_1EB3213E0 = (uint64_t)ggl::flyoverMorphShaderShaderConstants(void)::ref;
      unk_1EB3213E8 = 6;
      qword_1EB3213F0 = (uint64_t)ggl::flyoverMorphShaderShaderTextures(void)::ref;
      unk_1EB3213F8 = 3;
      qword_1EB321400 = (uint64_t)ggl::flyoverMorphShaderShaderSamplers(void)::ref;
      unk_1EB321408 = 3;
    }
  }
}

void ggl::flyoverMorphShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverMorphShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverMorphShaderFragment");
    *(_DWORD *)algn_1EB326294 = 1;
    qword_1EB326298 = (uint64_t)"FlyoverMorphShader";
    unk_1EB3262A0 = 0;
    qword_1EB3262A8 = 0;
    unk_1EB3262B0 = &ggl::flyoverMorphShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3262B8 = 3;
    unk_1EB3262C0 = &ggl::flyoverMorphShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3262C8 = 0;
    unk_1EB3262D0 = &ggl::flyoverMorphShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3262D8 = 2;
    unk_1EB3262E0 = &ggl::flyoverMorphShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3262F0 = 0;
    unk_1EB3262F8 = 0;
    qword_1EB3262E8 = 2;
  }
}

void ggl::flyoverMorphShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverMorphShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("FlyoverMorphShaderVertex");
    *(_DWORD *)algn_1EB32575C = 0;
    qword_1EB325760 = (uint64_t)"FlyoverMorphShader";
    unk_1EB325768 = ggl::flyoverMorphShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325770 = 1;
    unk_1EB325778 = &ggl::flyoverMorphShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325780 = 6;
    unk_1EB325788 = &ggl::flyoverMorphShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325790 = 0;
    unk_1EB325798 = &ggl::flyoverMorphShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3257A0 = 1;
    unk_1EB3257A8 = &ggl::flyoverMorphShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3257B8 = 0;
    unk_1EB3257C0 = 0;
    qword_1EB3257B0 = 1;
  }
}

void ggl::FlyoverRouteShader::typedReflection(ggl::FlyoverRouteShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverRouteShader::typedReflection(void)::ref = (uint64_t)"FlyoverRouteShader";
      ggl::flyoverRouteShaderVertexFunctionDescriptor(v1);
      qword_1EB321480 = (uint64_t)&ggl::flyoverRouteShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<25ul>("FlyoverRouteShaderVertex");
      dword_1EB321488 = (int)v2;
      ggl::flyoverRouteShaderFragmentFunctionDescriptor(v2);
      qword_1EB321490 = (uint64_t)&ggl::flyoverRouteShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321498 = ggl::crc32::compute<27ul>("FlyoverRouteShaderFragment");
      qword_1EB3214A0 = (uint64_t)ggl::flyoverRouteShaderShaderConstants(void)::ref;
      unk_1EB3214A8 = 3;
      qword_1EB3214B0 = (uint64_t)ggl::flyoverRouteShaderShaderTextures(void)::ref;
      unk_1EB3214B8 = 1;
      qword_1EB3214C0 = (uint64_t)&ggl::flyoverRouteShaderShaderSamplers(void)::ref;
      unk_1EB3214C8 = 1;
    }
  }
}

void ggl::flyoverRouteShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverRouteShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverRouteShaderFragment");
    *(_DWORD *)algn_1EB3263F4 = 1;
    qword_1EB3263F8 = (uint64_t)"FlyoverRouteShader";
    unk_1EB326400 = 0;
    qword_1EB326408 = 0;
    unk_1EB326410 = &ggl::flyoverRouteShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326418 = 1;
    unk_1EB326420 = &ggl::flyoverRouteShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326428 = 0;
    unk_1EB326430 = &ggl::flyoverRouteShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326438 = 1;
    unk_1EB326440 = &ggl::flyoverRouteShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326450 = 0;
    unk_1EB326458 = 0;
    qword_1EB326448 = 1;
  }
}

void ggl::flyoverRouteShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverRouteShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("FlyoverRouteShaderVertex");
    *(_DWORD *)algn_1EB32583C = 0;
    qword_1EB325840 = (uint64_t)"FlyoverRouteShader";
    unk_1EB325848 = ggl::flyoverRouteShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325850 = 1;
    unk_1EB325858 = &ggl::flyoverRouteShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325860 = 3;
    unk_1EB325868 = &ggl::flyoverRouteShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325870 = 0;
    unk_1EB325878 = &ggl::flyoverRouteShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325880 = 0;
    unk_1EB325888 = &ggl::flyoverRouteShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325898 = 0;
    unk_1EB3258A0 = 0;
    qword_1EB325890 = 0;
  }
}

void ggl::MaskedIconShader::typedReflection(ggl::MaskedIconShader *this)
{
  {
    if (v1)
    {
      ggl::MaskedIconShader::typedReflection(void)::ref = (uint64_t)"MaskedIconShader";
      ggl::maskedIconShaderVertexFunctionDescriptor(v1);
      qword_1EB3179D0 = (uint64_t)&ggl::maskedIconShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<23ul>("MaskedIconShaderVertex");
      dword_1EB3179D8 = (int)v2;
      ggl::maskedIconShaderFragmentFunctionDescriptor(v2);
      qword_1EB3179E0 = (uint64_t)&ggl::maskedIconShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3179E8 = ggl::crc32::compute<25ul>("MaskedIconShaderFragment");
      qword_1EB3179F0 = (uint64_t)ggl::maskedIconShaderShaderConstants(void)::ref;
      unk_1EB3179F8 = 5;
      qword_1EB317A00 = (uint64_t)ggl::maskedIconShaderShaderTextures(void)::ref;
      unk_1EB317A08 = 3;
      qword_1EB317A10 = (uint64_t)ggl::maskedIconShaderShaderSamplers(void)::ref;
      unk_1EB317A18 = 3;
    }
  }
}

void ggl::maskedIconShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::maskedIconShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("MaskedIconShaderFragment");
    *(_DWORD *)algn_1EB317EC4 = 1;
    qword_1EB317EC8 = (uint64_t)"MaskedIconShader";
    unk_1EB317ED0 = 0;
    qword_1EB317ED8 = 0;
    unk_1EB317EE0 = &ggl::maskedIconShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB317EE8 = 1;
    unk_1EB317EF0 = &ggl::maskedIconShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB317EF8 = 0;
    unk_1EB317F00 = &ggl::maskedIconShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB317F08 = 1;
    unk_1EB317F10 = &ggl::maskedIconShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB317F20 = 0;
    unk_1EB317F28 = 0;
    qword_1EB317F18 = 1;
  }
}

void ggl::maskedIconShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::maskedIconShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("MaskedIconShaderVertex");
    *(_DWORD *)algn_1EB317DDC = 0;
    qword_1EB317DE0 = (uint64_t)"MaskedIconShader";
    unk_1EB317DE8 = ggl::maskedIconShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB317DF0 = 1;
    unk_1EB317DF8 = &ggl::maskedIconShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB317E00 = 4;
    unk_1EB317E08 = &ggl::maskedIconShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB317E10 = 0;
    unk_1EB317E18 = &ggl::maskedIconShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB317E20 = 2;
    unk_1EB317E28 = &ggl::maskedIconShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB317E38 = 0;
    unk_1EB317E40 = 0;
    qword_1EB317E30 = 2;
  }
}

void ggl::GlobeStarsShader::typedReflection(ggl::GlobeStarsShader *this)
{
  {
    if (v1)
    {
      ggl::GlobeStarsShader::typedReflection(void)::ref = (uint64_t)"GlobeStarsShader";
      ggl::globeStarsShaderVertexFunctionDescriptor(v1);
      qword_1EB32BA30 = (uint64_t)&ggl::globeStarsShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<23ul>("GlobeStarsShaderVertex");
      dword_1EB32BA38 = (int)v2;
      ggl::globeStarsShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BA40 = (uint64_t)&ggl::globeStarsShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BA48 = ggl::crc32::compute<25ul>("GlobeStarsShaderFragment");
      qword_1EB32BA50 = (uint64_t)ggl::globeStarsShaderShaderConstants(void)::ref;
      unk_1EB32BA58 = 1;
      qword_1EB32BA60 = (uint64_t)&ggl::globeStarsShaderShaderTextures(void)::ref;
      unk_1EB32BA68 = 0;
      qword_1EB32BA70 = (uint64_t)&ggl::globeStarsShaderShaderSamplers(void)::ref;
      unk_1EB32BA78 = 0;
    }
  }
}

void ggl::globeStarsShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::globeStarsShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("GlobeStarsShaderFragment");
    *(_DWORD *)algn_1EB32BF54 = 1;
    qword_1EB32BF58 = (uint64_t)"GlobeStarsShader";
    unk_1EB32BF60 = 0;
    qword_1EB32BF68 = 0;
    unk_1EB32BF70 = &ggl::globeStarsShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32BF78 = 0;
    unk_1EB32BF80 = &ggl::globeStarsShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32BF88 = 0;
    unk_1EB32BF90 = &ggl::globeStarsShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32BF98 = 0;
    unk_1EB32BFA0 = &ggl::globeStarsShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32BFB0 = 0;
    unk_1EB32BFB8 = 0;
    qword_1EB32BFA8 = 0;
  }
}

void ggl::globeStarsShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::globeStarsShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("GlobeStarsShaderVertex");
    *(_DWORD *)algn_1EB32BE6C = 0;
    qword_1EB32BE70 = (uint64_t)"GlobeStarsShader";
    unk_1EB32BE78 = ggl::globeStarsShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32BE80 = 1;
    unk_1EB32BE88 = &ggl::globeStarsShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32BE90 = 1;
    unk_1EB32BE98 = &ggl::globeStarsShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32BEA0 = 0;
    unk_1EB32BEA8 = &ggl::globeStarsShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32BEB0 = 0;
    unk_1EB32BEB8 = &ggl::globeStarsShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32BEC8 = 0;
    unk_1EB32BED0 = 0;
    qword_1EB32BEC0 = 0;
  }
}

void ggl::EndOfWorldShader::typedReflection(ggl::EndOfWorldShader *this)
{
  {
    if (v1)
    {
      ggl::EndOfWorldShader::typedReflection(void)::ref = (uint64_t)"EndOfWorldShader";
      ggl::endOfWorldShaderVertexFunctionDescriptor(v1);
      qword_1EB320EE8 = (uint64_t)&ggl::endOfWorldShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<23ul>("EndOfWorldShaderVertex");
      dword_1EB320EF0 = (int)v2;
      ggl::endOfWorldShaderFragmentFunctionDescriptor(v2);
      qword_1EB320EF8 = (uint64_t)&ggl::endOfWorldShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320F00 = ggl::crc32::compute<25ul>("EndOfWorldShaderFragment");
      qword_1EB320F08 = (uint64_t)ggl::endOfWorldShaderShaderConstants(void)::ref;
      unk_1EB320F10 = 2;
      qword_1EB320F18 = (uint64_t)ggl::endOfWorldShaderShaderTextures(void)::ref;
      unk_1EB320F20 = 1;
      qword_1EB320F28 = (uint64_t)&ggl::endOfWorldShaderShaderSamplers(void)::ref;
      unk_1EB320F30 = 1;
    }
  }
}

uint64_t ggl::crc32::compute<25ul>(char *a1)
{
  int v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  unsigned int v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  unsigned int v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  unsigned int v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  unsigned int v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  unsigned int v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  unsigned int v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  unsigned int v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  unsigned int v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  unsigned int v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  unsigned int v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  unsigned int v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  unsigned int v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  unsigned int v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  unsigned int v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  unsigned int v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  unsigned int v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  unsigned int v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  unsigned int v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  unsigned int v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  unsigned int v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  return ggl::crc32::crc32Table[v21 ^ a1[23]] ^ ~(v21 >> 8);
}

void ggl::WaypointShader::typedReflection(ggl::WaypointShader *this)
{
  {
    if (v1)
    {
      ggl::WaypointShader::typedReflection(void)::ref = (uint64_t)"WaypointShader";
      ggl::waypointShaderVertexFunctionDescriptor(v1);
      qword_1EB31BD80 = (uint64_t)&ggl::waypointShaderVertexFunctionDescriptor(void)::ref;
      unsigned int v2 = (ggl *)ggl::crc32::compute<21ul>("WaypointShaderVertex");
      dword_1EB31BD88 = (int)v2;
      ggl::waypointShaderFragmentFunctionDescriptor(v2);
      qword_1EB31BD90 = (uint64_t)&ggl::waypointShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31BD98 = ggl::crc32::compute<23ul>("WaypointShaderFragment");
      qword_1EB31BDA0 = (uint64_t)ggl::waypointShaderShaderConstants(void)::ref;
      unk_1EB31BDA8 = 5;
      qword_1EB31BDB0 = (uint64_t)ggl::waypointShaderShaderTextures(void)::ref;
      unk_1EB31BDB8 = 2;
      qword_1EB31BDC0 = (uint64_t)ggl::waypointShaderShaderSamplers(void)::ref;
      unk_1EB31BDC8 = 2;
    }
  }
}

uint64_t ggl::crc32::compute<23ul>(char *a1)
{
  int v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  unsigned int v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  unsigned int v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  unsigned int v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  unsigned int v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  unsigned int v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  unsigned int v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  unsigned int v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  unsigned int v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  unsigned int v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  unsigned int v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  unsigned int v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  unsigned int v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  unsigned int v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  unsigned int v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  unsigned int v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  unsigned int v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  unsigned int v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  unsigned int v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  return ggl::crc32::crc32Table[v19 ^ a1[21]] ^ ~(v19 >> 8);
}

void ggl::endOfWorldShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::endOfWorldShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("EndOfWorldShaderFragment");
    *(_DWORD *)algn_1EB3256EC = 1;
    qword_1EB3256F0 = (uint64_t)"EndOfWorldShader";
    unk_1EB3256F8 = 0;
    qword_1EB325700 = 0;
    unk_1EB325708 = &ggl::endOfWorldShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325710 = 1;
    unk_1EB325718 = &ggl::endOfWorldShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB325720 = 0;
    unk_1EB325728 = &ggl::endOfWorldShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325730 = 1;
    unk_1EB325738 = &ggl::endOfWorldShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325748 = 0;
    unk_1EB325750 = 0;
    qword_1EB325740 = 1;
  }
}

void ggl::waypointShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::waypointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("WaypointShaderFragment");
    *(_DWORD *)algn_1EB31C674 = 1;
    qword_1EB31C678 = (uint64_t)"WaypointShader";
    unk_1EB31C680 = 0;
    qword_1EB31C688 = 0;
    unk_1EB31C690 = &ggl::waypointShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31C698 = 1;
    unk_1EB31C6A0 = &ggl::waypointShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31C6A8 = 0;
    unk_1EB31C6B0 = &ggl::waypointShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31C6B8 = 0;
    unk_1EB31C6C0 = &ggl::waypointShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31C6D0 = 0;
    unk_1EB31C6D8 = 0;
    qword_1EB31C6C8 = 0;
  }
}

void ggl::endOfWorldShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::endOfWorldShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("EndOfWorldShaderVertex");
    *(_DWORD *)algn_1EB324F54 = 0;
    qword_1EB324F58 = (uint64_t)"EndOfWorldShader";
    unk_1EB324F60 = ggl::endOfWorldShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324F68 = 1;
    unk_1EB324F70 = &ggl::endOfWorldShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324F78 = 2;
    unk_1EB324F80 = &ggl::endOfWorldShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324F88 = 0;
    unk_1EB324F90 = &ggl::endOfWorldShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324F98 = 0;
    unk_1EB324FA0 = &ggl::endOfWorldShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324FB0 = 0;
    unk_1EB324FB8 = 0;
    qword_1EB324FA8 = 0;
  }
}

void ggl::waypointShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::waypointShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("WaypointShaderVertex");
    *(_DWORD *)algn_1EB31C58C = 0;
    qword_1EB31C590 = (uint64_t)"WaypointShader";
    unk_1EB31C598 = ggl::waypointShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31C5A0 = 1;
    unk_1EB31C5A8 = &ggl::waypointShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31C5B0 = 4;
    unk_1EB31C5B8 = &ggl::waypointShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31C5C0 = 0;
    unk_1EB31C5C8 = &ggl::waypointShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31C5D0 = 2;
    unk_1EB31C5D8 = &ggl::waypointShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31C5E8 = 0;
    unk_1EB31C5F0 = 0;
    qword_1EB31C5E0 = 2;
  }
}

void md::COverlayRenderLayer::COverlayRenderLayer(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  id v9 = a3;
  if (a4 == 1) {
    char v10 = 42;
  }
  else {
    char v10 = 0;
  }
  if (a4) {
    char v11 = v10;
  }
  else {
    char v11 = 41;
  }
  if (a4 == 1)
  {
    unsigned int v12 = operator new(6uLL);
    unsigned int v13 = (char *)(v12 + 3);
    v12[2] = 81;
    *(_DWORD *)unsigned int v12 = 4718604;
  }
  else if (a4)
  {
    unsigned int v12 = operator new(2uLL);
    *unsigned int v12 = 0;
    unsigned int v13 = (char *)(v12 + 1);
  }
  else
  {
    unsigned int v12 = operator new(4uLL);
    *(_DWORD *)unsigned int v12 = 4653067;
    unsigned int v13 = (char *)(v12 + 2);
  }
  objc_msgSend(v9, "standardCommandBufferSelector", v12, v13);
  uint64_t v14 = 234;
  if (!a4) {
    uint64_t v14 = 200;
  }
  __int16 v15 = *(_WORD *)(*(void *)(v21 + 8) + v14);
  unsigned int v16 = operator new(2uLL);
  *unsigned int v16 = v15;
  *(void *)a1 = &unk_1EF530C60;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unsigned int v17 = operator new(2uLL);
  *(void *)(a1 + 8) = v17;
  *v17++ = *v16;
  *(void *)(a1 + 16) = v17;
  *(void *)(a1 + 24) = v17;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = v11;
  *(void *)(a1 + 40) = a2;
  *(void *)a1 = &unk_1EF5497C0;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_1A28FE5D0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = v20;
  *(void *)(a1 + 336) = v13;
  *(_DWORD *)(a1 + 344) = 1;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  operator delete(v16);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v22->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v22);
  }
  *(void *)a1 = &unk_1EF53B210;
  *(_DWORD *)(a1 + 348) = a4;
  *(void *)(a1 + 352) = a5;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(unsigned char *)(a1 + 392) = 13;
  int v18 = *(unsigned __int8 *)([v9 gglDevice] + 20);
  *(unsigned char *)(a1 + 394) = v18;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(void *)(a1 + 428) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  unsigned int v19 = *(void **)(a2 + 104);
  if (v18) {
    [v19 format];
  }
  else {
    [v19 linearFormat];
  }
  operator new();
}

void sub_1A1C2D42C(_Unwind_Exception *a1)
{
  unsigned int v5 = (void *)v2[57];
  if (v5)
  {
    do
    {
      unsigned int v6 = *(void **)v5;
      *((void *)v5 + 3) = &unk_1EF5593D8;

      operator delete(v5);
      unsigned int v5 = v6;
    }
    while (v6);
  }
  unsigned int v7 = *v3;
  *unsigned int v3 = 0;
  if (v7) {
    operator delete(v7);
  }
  unsigned int v8 = (void *)v2[52];
  if (v8)
  {
    do
    {
      id v9 = (void *)*v8;
      operator delete(v8);
      unsigned int v8 = v9;
    }
    while (v9);
  }
  char v10 = (void *)v2[50];
  v2[50] = 0;
  if (v10) {
    operator delete(v10);
  }
  char v11 = (std::__shared_weak_count *)v2[48];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (md::PolylineOverlaySharedResources *)v2[46];
  v2[46] = 0;
  if (v12)
  {
    md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(v12);
    MEMORY[0x1A6239270]();
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::~CartographicTiledRenderLayer((uint64_t)v2);

  _Unwind_Resume(a1);
}

void std::__function::__func<OverlayRenderableSort,std::allocator<OverlayRenderableSort>,BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56B6E0;
}

double std::__introsort<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v158 = (long long *)((char *)a2 - 72);
    int v167 = a2;
    char v153 = (long long *)((char *)a2 - 216);
    uint64_t v154 = a2 - 9;
    unsigned int v8 = (long long *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v8;
          id v9 = v167;
          uint64_t v10 = (char *)v167 - (char *)v8;
          uint64_t v11 = 0x8E38E38E38E38E39 * (((char *)v167 - (char *)v8) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*(_DWORD *)(*(void *)v158 + 44) - *(_DWORD *)(*(void *)v158 + 36) > (*(_DWORD *)(*(void *)a1 + 44) - *(_DWORD *)(*(void *)a1 + 36)))
                {
                  long long v74 = *(_OWORD *)a1;
                  long long v73 = *(_OWORD *)(a1 + 16);
                  *(void *)a1 = 0;
                  *(void *)(a1 + 8) = 0;
                  char v219 = *(unsigned char *)(a1 + 64);
                  long long v75 = *(_OWORD *)(a1 + 32);
                  long long v211 = *(_OWORD *)(a1 + 48);
                  long long v76 = *(long long *)((char *)v167 - 72);
                  *(void *)uint64_t v158 = 0;
                  *((void *)v158 + 1) = 0;
                  double v77 = *(std::__shared_weak_count **)(a1 + 8);
                  *(_OWORD *)a1 = v76;
                  if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    long long v182 = v75;
                    long long v195 = v73;
                    long long v173 = v74;
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                    long long v74 = v173;
                    long long v75 = v182;
                    long long v73 = v195;
                  }
                  *(_DWORD *)(a1 + 16) = *((_DWORD *)v167 - 14);
                  *(_DWORD *)(a1 + 20) = *((_DWORD *)v167 - 13);
                  *(_DWORD *)(a1 + 24) = *((_DWORD *)v167 - 12);
                  *(_DWORD *)(a1 + 28) = *((_DWORD *)v167 - 11);
                  *(_DWORD *)(a1 + 32) = *((_DWORD *)v167 - 10);
                  *(_DWORD *)(a1 + 36) = *((_DWORD *)v167 - 9);
                  *(_DWORD *)(a1 + 40) = *((_DWORD *)v167 - 8);
                  *(_DWORD *)(a1 + 44) = *((_DWORD *)v167 - 7);
                  long long v78 = *(long long *)((char *)v167 - 24);
                  *(unsigned char *)(a1 + 64) = *((unsigned char *)v167 - 8);
                  *(_OWORD *)(a1 + 48) = v78;
                  uint64_t v79 = (std::__shared_weak_count *)*((void *)v167 - 8);
                  *(long long *)((char *)v167 - 72) = v74;
                  if (v79)
                  {
                    if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      long long v183 = v75;
                      long long v196 = v73;
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                      long long v75 = v183;
                      long long v73 = v196;
                    }
                  }
                  *(long long *)((char *)v167 - 56) = v73;
                  *(long long *)((char *)v167 - 40) = v75;
                  double result = *(double *)&v211;
                  *((unsigned char *)v167 - 8) = v219;
                  *(long long *)((char *)v167 - 24) = v211;
                }
                break;
              case 3:
                *(void *)&double result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((long long *)a1, (long long *)(a1 + 72), v158).n128_u64[0];
                break;
              case 4:
                *(void *)&double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1, a1 + 72, a1 + 144, v158).n128_u64[0];
                break;
              case 5:
                *(void *)&double result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,0>(a1, a1 + 72, a1 + 144, a1 + 216, v158).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v10 <= 1727)
          {
            uint64_t v80 = (long long *)(a1 + 72);
            BOOL v82 = (long long *)a1 == v167 || v80 == v167;
            if (a4)
            {
              if (!v82)
              {
                uint64_t v83 = 0;
                unint64_t v84 = a1;
                do
                {
                  unint64_t v85 = v80;
                  uint64_t v86 = *(void *)(v84 + 72);
                  if (*(_DWORD *)(v86 + 44) - *(_DWORD *)(v86 + 36) > (*(_DWORD *)(*(void *)v84 + 44)
                                                                                    - *(_DWORD *)(*(void *)v84 + 36)))
                  {
                    uint64_t v87 = *(void *)(v84 + 80);
                    *(void *)uint64_t v80 = 0;
                    *((void *)v80 + 1) = 0;
                    long long v184 = *(_OWORD *)(v84 + 104);
                    long long v197 = *(_OWORD *)(v84 + 88);
                    long long v212 = *(_OWORD *)(v84 + 120);
                    char v220 = *(unsigned char *)(v84 + 136);
                    uint64_t v88 = *(void *)v84;
                    uint64_t v89 = v83;
                    while (1)
                    {
                      uint64_t v90 = a1 + v89;
                      uint64_t v91 = *(void *)(a1 + v89 + 8);
                      *(void *)uint64_t v90 = 0;
                      *(void *)(v90 + 8) = 0;
                      uint64_t v92 = *(std::__shared_weak_count **)(a1 + v89 + 80);
                      *(void *)(v90 + 72) = v88;
                      *(void *)(v90 + 80) = v91;
                      if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                        std::__shared_weak_count::__release_weak(v92);
                      }
                      int v93 = *(_DWORD *)(v90 + 20);
                      *(_DWORD *)(v90 + 88) = *(_DWORD *)(v90 + 16);
                      *(_DWORD *)(v90 + 92) = v93;
                      *(void *)(v90 + 96) = *(void *)(v90 + 24);
                      *(_DWORD *)(v90 + 104) = *(_DWORD *)(v90 + 32);
                      *(void *)(v90 + 108) = *(void *)(v90 + 36);
                      *(_DWORD *)(v90 + 116) = *(_DWORD *)(v90 + 44);
                      *(unsigned char *)(v90 + 136) = *(unsigned char *)(v90 + 64);
                      *(_OWORD *)(v90 + 120) = *(_OWORD *)(v90 + 48);
                      if (!v89) {
                        break;
                      }
                      uint64_t v94 = a1 + v89;
                      uint64_t v88 = *(void *)(a1 + v89 - 72);
                      v89 -= 72;
                      if (*(_DWORD *)(v86 + 44) - *(_DWORD *)(v86 + 36) <= (*(_DWORD *)(v88 + 44)
                                                                                         - *(_DWORD *)(v88 + 36)))
                      {
                        unint64_t v95 = v94 + 48;
                        uint64_t v96 = a1 + v89 + 72;
                        goto LABEL_120;
                      }
                    }
                    unint64_t v95 = a1 + 48;
                    uint64_t v96 = a1;
LABEL_120:
                    unint64_t v97 = *(std::__shared_weak_count **)(v96 + 8);
                    *(void *)uint64_t v96 = v86;
                    *(void *)(v96 + 8) = v87;
                    if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                      std::__shared_weak_count::__release_weak(v97);
                    }
                    *(_OWORD *)(v96 + 16) = v197;
                    *(_OWORD *)(v96 + 32) = v184;
                    double result = *(double *)&v212;
                    *(unsigned char *)(v95 + 16) = v220;
                    *(_OWORD *)unint64_t v95 = v212;
                    id v9 = v167;
                  }
                  uint64_t v80 = (long long *)((char *)v85 + 72);
                  v83 += 72;
                  unint64_t v84 = (unint64_t)v85;
                }
                while ((long long *)((char *)v85 + 72) != v9);
              }
            }
            else if (!v82)
            {
              unint64_t v143 = a1 + 120;
              do
              {
                uint64_t v144 = v80;
                uint64_t v145 = *(void *)(a1 + 72);
                if (*(_DWORD *)(v145 + 44) - *(_DWORD *)(v145 + 36) > (*(_DWORD *)(*(void *)a1 + 44)
                                                                                    - *(_DWORD *)(*(void *)a1 + 36)))
                {
                  uint64_t v146 = *(void *)(a1 + 80);
                  *(void *)uint64_t v80 = 0;
                  *((void *)v80 + 1) = 0;
                  long long v188 = *(_OWORD *)(a1 + 104);
                  long long v201 = *(_OWORD *)(a1 + 88);
                  long long v215 = *(_OWORD *)(a1 + 120);
                  char v223 = *(unsigned char *)(a1 + 136);
                  uint64_t v147 = *(void *)a1;
                  unint64_t v148 = v143;
                  do
                  {
                    uint64_t v150 = *(void *)(v148 - 112);
                    *(void *)(v148 - 120) = 0;
                    *(void *)(v148 - 112) = 0;
                    uint64_t v151 = *(std::__shared_weak_count **)(v148 - 40);
                    *(void *)(v148 - 48) = v147;
                    *(void *)(v148 - 40) = v150;
                    if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                      std::__shared_weak_count::__release_weak(v151);
                    }
                    int v149 = *(_DWORD *)(v148 - 100);
                    *(_DWORD *)(v148 - 32) = *(_DWORD *)(v148 - 104);
                    *(_DWORD *)(v148 - 28) = v149;
                    *(void *)(v148 - 24) = *(void *)(v148 - 96);
                    *(_DWORD *)(v148 - 16) = *(_DWORD *)(v148 - 88);
                    *(void *)(v148 - 12) = *(void *)(v148 - 84);
                    *(_DWORD *)(v148 - 4) = *(_DWORD *)(v148 - 76);
                    *(unsigned char *)(v148 + 16) = *(unsigned char *)(v148 - 56);
                    *(_OWORD *)unint64_t v148 = *(_OWORD *)(v148 - 72);
                    uint64_t v147 = *(void *)(v148 - 192);
                    v148 -= 72;
                  }
                  while (*(_DWORD *)(v145 + 44) - *(_DWORD *)(v145 + 36) > (*(_DWORD *)(v147 + 44)
                                                                                         - *(_DWORD *)(v147 + 36)));
                  char v152 = *(std::__shared_weak_count **)(v148 - 40);
                  *(void *)(v148 - 48) = v145;
                  *(void *)(v148 - 40) = v146;
                  if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                    std::__shared_weak_count::__release_weak(v152);
                  }
                  *(_OWORD *)(v148 - 32) = v201;
                  *(_OWORD *)(v148 - 16) = v188;
                  double result = *(double *)&v215;
                  *(unsigned char *)(v148 + 16) = v223;
                  *(_OWORD *)unint64_t v148 = v215;
                }
                uint64_t v80 = (long long *)((char *)v144 + 72);
                v143 += 72;
                a1 = (unint64_t)v144;
              }
              while ((long long *)((char *)v144 + 72) != v167);
            }
            return result;
          }
          if (!a3)
          {
            if ((long long *)a1 != v167)
            {
              int64_t v98 = (unint64_t)(v11 - 2) >> 1;
              uint64_t v99 = -1;
              int64_t v100 = v98;
              do
              {
                int64_t v101 = v100;
                if (v98 >= v100)
                {
                  uint64_t v102 = (2 * v100) | 1;
                  uint64_t v103 = (void *)(a1 + 72 * v102);
                  if (2 * v101 + 2 < v11)
                  {
                    uint64_t v104 = *v103;
                    if (*(_DWORD *)(*v103 + 44) - *(_DWORD *)(*v103 + 36) > (*(_DWORD *)(v103[9] + 44)
                                                                                              - *(_DWORD *)(v103[9] + 36)))
                    {
                      uint64_t v104 = v103[9];
                      v103 += 9;
                      uint64_t v102 = 2 * v101 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v104 = *v103;
                  }
                  unint64_t v105 = a1 + 72 * v101;
                  uint64_t v106 = *(void *)v105;
                  if (*(_DWORD *)(v104 + 44) - *(_DWORD *)(v104 + 36) <= (*(_DWORD *)(*(void *)v105 + 44)
                                                                                       - *(_DWORD *)(*(void *)v105 + 36)))
                  {
                    uint64_t v174 = *(void *)(v105 + 8);
                    *(void *)unint64_t v105 = 0;
                    *(void *)(v105 + 8) = 0;
                    unint64_t v107 = a1 + 72 * v101;
                    long long v185 = *(_OWORD *)(v107 + 32);
                    long long v198 = *(_OWORD *)(v107 + 16);
                    char v221 = *(unsigned char *)(v107 + 64);
                    long long v213 = *(_OWORD *)(v107 + 48);
                    uint64_t v108 = *v103;
                    do
                    {
                      uint64_t v109 = v103;
                      uint64_t v110 = v103[1];
                      *uint64_t v109 = 0;
                      v109[1] = 0;
                      uint64_t v111 = *(std::__shared_weak_count **)(v105 + 8);
                      *(void *)unint64_t v105 = v108;
                      *(void *)(v105 + 8) = v110;
                      if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *, uint64_t))v111->__on_zero_shared)(v111, -1);
                        std::__shared_weak_count::__release_weak(v111);
                        uint64_t v99 = -1;
                      }
                      *(_DWORD *)(v105 + 16) = *((_DWORD *)v109 + 4);
                      *(_DWORD *)(v105 + 20) = *((_DWORD *)v109 + 5);
                      *(_DWORD *)(v105 + 24) = *((_DWORD *)v109 + 6);
                      *(_DWORD *)(v105 + 28) = *((_DWORD *)v109 + 7);
                      *(_DWORD *)(v105 + 32) = *((_DWORD *)v109 + 8);
                      *(_DWORD *)(v105 + 36) = *((_DWORD *)v109 + 9);
                      *(_DWORD *)(v105 + 40) = *((_DWORD *)v109 + 10);
                      *(_DWORD *)(v105 + 44) = *((_DWORD *)v109 + 11);
                      long long v112 = *((_OWORD *)v109 + 3);
                      *(unsigned char *)(v105 + 64) = *((unsigned char *)v109 + 64);
                      *(_OWORD *)(v105 + 48) = v112;
                      if (v98 < v102) {
                        break;
                      }
                      uint64_t v103 = (void *)(a1 + 72 * ((2 * v102) | 1));
                      if (2 * v102 + 2 < v11)
                      {
                        uint64_t v108 = *v103;
                        if (*(_DWORD *)(*v103 + 44) - *(_DWORD *)(*v103 + 36) <= (*(_DWORD *)(v103[9] + 44) - *(_DWORD *)(v103[9] + 36)))
                        {
                          uint64_t v102 = (2 * v102) | 1;
                        }
                        else
                        {
                          uint64_t v108 = v103[9];
                          v103 += 9;
                          uint64_t v102 = 2 * v102 + 2;
                        }
                      }
                      else
                      {
                        uint64_t v108 = *v103;
                        uint64_t v102 = (2 * v102) | 1;
                      }
                      unint64_t v105 = (unint64_t)v109;
                    }
                    while (*(_DWORD *)(v108 + 44) - *(_DWORD *)(v108 + 36) <= (*(_DWORD *)(v106 + 44)
                                                                                            - *(_DWORD *)(v106 + 36)));
                    unint64_t v113 = (std::__shared_weak_count *)v109[1];
                    *uint64_t v109 = v106;
                    v109[1] = v174;
                    if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *, uint64_t))v113->__on_zero_shared)(v113, -1);
                      std::__shared_weak_count::__release_weak(v113);
                      uint64_t v99 = -1;
                    }
                    *((_OWORD *)v109 + 1) = v198;
                    *((_OWORD *)v109 + 2) = v185;
                    *((_OWORD *)v109 + 3) = v213;
                    *((unsigned char *)v109 + 64) = v221;
                  }
                }
                int64_t v100 = v101 - 1;
              }
              while (v101);
              int64_t v114 = v10 / 0x48uLL;
              uint64_t v115 = v167;
              do
              {
                uint64_t v117 = 0;
                double v118 = v115;
                uint64_t v155 = *(void *)a1;
                uint64_t v157 = *(void *)(a1 + 8);
                *(void *)a1 = 0;
                *(void *)(a1 + 8) = 0;
                int v199 = *(_DWORD *)(a1 + 16);
                int v186 = *(_DWORD *)(a1 + 20);
                int v175 = *(_DWORD *)(a1 + 24);
                int v168 = *(_DWORD *)(a1 + 28);
                int v166 = *(_DWORD *)(a1 + 32);
                int v164 = *(_DWORD *)(a1 + 36);
                int v161 = *(_DWORD *)(a1 + 40);
                int v159 = *(_DWORD *)(a1 + 44);
                char v207 = *(unsigned char *)(a1 + 64);
                uint64_t v119 = (void *)a1;
                long long v204 = *(_OWORD *)(a1 + 48);
                do
                {
                  unint64_t v121 = v119;
                  v119 += 9 * v117 + 9;
                  if (2 * v117 + 2 >= v114)
                  {
                    uint64_t v122 = *v119;
                    uint64_t v117 = (2 * v117) | 1;
                  }
                  else
                  {
                    uint64_t v122 = *v119;
                    if (*(_DWORD *)(*v119 + 44) - *(_DWORD *)(*v119 + 36) <= (*(_DWORD *)(v119[9] + 44)
                                                                                               - *(_DWORD *)(v119[9] + 36)))
                    {
                      uint64_t v117 = (2 * v117) | 1;
                    }
                    else
                    {
                      uint64_t v122 = v119[9];
                      v119 += 9;
                      uint64_t v117 = 2 * v117 + 2;
                    }
                  }
                  uint64_t v123 = v119[1];
                  *uint64_t v119 = 0;
                  v119[1] = 0;
                  uint64_t v124 = (std::__shared_weak_count *)v121[1];
                  *unint64_t v121 = v122;
                  v121[1] = v123;
                  if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, uint64_t))v124->__on_zero_shared)(v124, v99);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                  *((_DWORD *)v121 + 4) = *((_DWORD *)v119 + 4);
                  *((_DWORD *)v121 + 5) = *((_DWORD *)v119 + 5);
                  *((_DWORD *)v121 + 6) = *((_DWORD *)v119 + 6);
                  *((_DWORD *)v121 + 7) = *((_DWORD *)v119 + 7);
                  *((_DWORD *)v121 + 8) = *((_DWORD *)v119 + 8);
                  *((_DWORD *)v121 + 9) = *((_DWORD *)v119 + 9);
                  *((_DWORD *)v121 + 10) = *((_DWORD *)v119 + 10);
                  *((_DWORD *)v121 + 11) = *((_DWORD *)v119 + 11);
                  long long v120 = *((_OWORD *)v119 + 3);
                  *((unsigned char *)v121 + 64) = *((unsigned char *)v119 + 64);
                  *((_OWORD *)v121 + 3) = v120;
                }
                while (v117 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
                unint64_t v125 = (long long *)(v119 + 6);
                uint64_t v115 = (long long *)((char *)v118 - 72);
                if (v119 == (void *)((char *)v118 - 72))
                {
                  uint64_t v142 = (std::__shared_weak_count *)v119[1];
                  *uint64_t v119 = v155;
                  v119[1] = v157;
                  if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, uint64_t))v142->__on_zero_shared)(v142, v99);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                  *((_DWORD *)v119 + 4) = v199;
                  *((_DWORD *)v119 + 5) = v186;
                  *((_DWORD *)v119 + 6) = v175;
                  *((_DWORD *)v119 + 7) = v168;
                  *((_DWORD *)v119 + 8) = v166;
                  *((_DWORD *)v119 + 9) = v164;
                  *((_DWORD *)v119 + 10) = v161;
                  *((_DWORD *)v119 + 11) = v159;
                  double result = *(double *)&v204;
                  *((unsigned char *)v119 + 64) = v207;
                  *unint64_t v125 = v204;
                }
                else
                {
                  long long v126 = *(long long *)((char *)v118 - 72);
                  *(void *)uint64_t v115 = 0;
                  *((void *)v118 - 8) = 0;
                  uint64_t v127 = (std::__shared_weak_count *)v119[1];
                  *(_OWORD *)uint64_t v119 = v126;
                  if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, uint64_t))v127->__on_zero_shared)(v127, v99);
                    std::__shared_weak_count::__release_weak(v127);
                  }
                  *((_DWORD *)v119 + 4) = *((_DWORD *)v118 - 14);
                  *((_DWORD *)v119 + 5) = *((_DWORD *)v118 - 13);
                  *((_DWORD *)v119 + 6) = *((_DWORD *)v118 - 12);
                  *((_DWORD *)v119 + 7) = *((_DWORD *)v118 - 11);
                  *((_DWORD *)v119 + 8) = *((_DWORD *)v118 - 10);
                  *((_DWORD *)v119 + 9) = *((_DWORD *)v118 - 9);
                  *((_DWORD *)v119 + 10) = *((_DWORD *)v118 - 8);
                  *((_DWORD *)v119 + 11) = *((_DWORD *)v118 - 7);
                  long long v128 = *(long long *)((char *)v118 - 24);
                  *((unsigned char *)v119 + 64) = *((unsigned char *)v118 - 8);
                  *unint64_t v125 = v128;
                  uint64_t v129 = (std::__shared_weak_count *)*((void *)v118 - 8);
                  *((void *)v118 - 9) = v155;
                  *((void *)v118 - 8) = v157;
                  if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, uint64_t))v129->__on_zero_shared)(v129, v99);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                  unint64_t v130 = (char *)v118 - 24;
                  *((_DWORD *)v118 - 14) = v199;
                  *((_DWORD *)v118 - 13) = v186;
                  *((_DWORD *)v118 - 12) = v175;
                  *((_DWORD *)v118 - 11) = v168;
                  *((_DWORD *)v118 - 10) = v166;
                  *((_DWORD *)v118 - 9) = v164;
                  *((_DWORD *)v118 - 8) = v161;
                  *((_DWORD *)v118 - 7) = v159;
                  double result = *(double *)&v204;
                  v130[16] = v207;
                  *(_OWORD *)unint64_t v130 = v204;
                  uint64_t v131 = (uint64_t)v119 - a1 + 72;
                  if (v131 >= 73)
                  {
                    unint64_t v132 = (v131 / 0x48uLL - 2) >> 1;
                    uint64_t v133 = (void *)(a1 + 72 * v132);
                    uint64_t v134 = *v119;
                    if (*(_DWORD *)(*v133 + 44) - *(_DWORD *)(*v133 + 36) > (*(_DWORD *)(*v119 + 44)
                                                                                              - *(_DWORD *)(*v119 + 36)))
                    {
                      unint64_t v169 = v115;
                      uint64_t v135 = v119[1];
                      *uint64_t v119 = 0;
                      v119[1] = 0;
                      long long v187 = *((_OWORD *)v119 + 2);
                      long long v200 = *((_OWORD *)v119 + 1);
                      char v222 = *((unsigned char *)v119 + 64);
                      long long v214 = *v125;
                      uint64_t v136 = *v133;
                      do
                      {
                        uint64_t v137 = v133;
                        uint64_t v138 = v133[1];
                        *uint64_t v137 = 0;
                        v137[1] = 0;
                        unint64_t v139 = (std::__shared_weak_count *)v119[1];
                        *uint64_t v119 = v136;
                        v119[1] = v138;
                        if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *, uint64_t))v139->__on_zero_shared)(v139, v99);
                          std::__shared_weak_count::__release_weak(v139);
                        }
                        *((_DWORD *)v119 + 4) = *((_DWORD *)v137 + 4);
                        *((_DWORD *)v119 + 5) = *((_DWORD *)v137 + 5);
                        *((_DWORD *)v119 + 6) = *((_DWORD *)v137 + 6);
                        *((_DWORD *)v119 + 7) = *((_DWORD *)v137 + 7);
                        *((_DWORD *)v119 + 8) = *((_DWORD *)v137 + 8);
                        *((_DWORD *)v119 + 9) = *((_DWORD *)v137 + 9);
                        *((_DWORD *)v119 + 10) = *((_DWORD *)v137 + 10);
                        *((_DWORD *)v119 + 11) = *((_DWORD *)v137 + 11);
                        long long v140 = *((_OWORD *)v137 + 3);
                        *((unsigned char *)v119 + 64) = *((unsigned char *)v137 + 64);
                        *((_OWORD *)v119 + 3) = v140;
                        if (!v132) {
                          break;
                        }
                        unint64_t v132 = (v132 - 1) >> 1;
                        uint64_t v133 = (void *)(a1 + 72 * v132);
                        uint64_t v136 = *v133;
                        uint64_t v119 = v137;
                      }
                      while (*(_DWORD *)(*v133 + 44) - *(_DWORD *)(*v133 + 36) > (*(_DWORD *)(v134 + 44) - *(_DWORD *)(v134 + 36)));
                      uint64_t v141 = (std::__shared_weak_count *)v137[1];
                      *uint64_t v137 = v134;
                      v137[1] = v135;
                      if (v141 && !atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *, uint64_t))v141->__on_zero_shared)(v141, v99);
                        std::__shared_weak_count::__release_weak(v141);
                      }
                      *((_OWORD *)v137 + 1) = v200;
                      *((_OWORD *)v137 + 2) = v187;
                      double result = *(double *)&v214;
                      *((_OWORD *)v137 + 3) = v214;
                      *((unsigned char *)v137 + 64) = v222;
                      uint64_t v115 = v169;
                    }
                  }
                }
              }
              while (v114-- > 2);
            }
            return result;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          unint64_t v13 = a1 + 72 * ((unint64_t)v11 >> 1);
          if ((unint64_t)v10 < 0x2401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((long long *)v13, (long long *)a1, v158);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((long long *)a1, (long long *)v13, v158);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((long long *)(a1 + 72), (long long *)(72 * v12 + a1 - 72), v154);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((long long *)(a1 + 144), (long long *)(a1 + 72 + 72 * v12), v153);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((long long *)(72 * v12 + a1 - 72), (long long *)v13, (long long *)(a1 + 72 + 72 * v12));
            long long v15 = *(_OWORD *)a1;
            long long v14 = *(_OWORD *)(a1 + 16);
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            char v216 = *(unsigned char *)(a1 + 64);
            long long v16 = *(_OWORD *)(a1 + 32);
            long long v208 = *(_OWORD *)(a1 + 48);
            long long v17 = *(_OWORD *)v13;
            *(void *)unint64_t v13 = 0;
            *(void *)(v13 + 8) = 0;
            int v18 = *(std::__shared_weak_count **)(a1 + 8);
            *(_OWORD *)a1 = v17;
            if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v176 = v16;
              long long v189 = v14;
              long long v170 = v15;
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
              long long v15 = v170;
              long long v16 = v176;
              long long v14 = v189;
            }
            unint64_t v19 = a1 + 72 * v12;
            long long v21 = *(_OWORD *)(v19 + 16);
            unint64_t v20 = v19 + 16;
            long long v22 = *(_OWORD *)(v20 + 16);
            *(_OWORD *)(a1 + 16) = v21;
            *(_OWORD *)(a1 + 32) = v22;
            char v23 = *(unsigned char *)(v20 + 48);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v20 + 32);
            *(unsigned char *)(a1 + 64) = v23;
            long long v24 = *(std::__shared_weak_count **)(v13 + 8);
            *(_OWORD *)unint64_t v13 = v15;
            if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v177 = v16;
              long long v190 = v14;
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
              long long v16 = v177;
              long long v14 = v190;
            }
            *(_OWORD *)unint64_t v20 = v14;
            *(_OWORD *)(v20 + 16) = v16;
            *(unsigned char *)(v20 + 48) = v216;
            *(_OWORD *)(v20 + 32) = v208;
            id v9 = v167;
          }
          --a3;
          uint64_t v25 = *(void *)a1;
          if ((a4 & 1) != 0
            || *(_DWORD *)(*(void *)(a1 - 72) + 44) - *(_DWORD *)(*(void *)(a1 - 72) + 36) > (*(_DWORD *)(v25 + 44) - *(_DWORD *)(v25 + 36)))
          {
            break;
          }
          uint64_t v52 = *(void *)(a1 + 8);
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          long long v163 = *(_OWORD *)(a1 + 32);
          long long v165 = *(_OWORD *)(a1 + 16);
          long long v203 = *(_OWORD *)(a1 + 48);
          char v206 = *(unsigned char *)(a1 + 64);
          unsigned int v53 = *(_DWORD *)(v25 + 44) - *(_DWORD *)(v25 + 36);
          if (v53 <= *(_DWORD *)(*(void *)v158 + 44) - *(_DWORD *)(*(void *)v158 + 36))
          {
            uint64_t v55 = (long long *)(a1 + 72);
            do
            {
              unsigned int v8 = v55;
              if (v55 >= v167) {
                break;
              }
              uint64_t v55 = (long long *)((char *)v55 + 72);
            }
            while (v53 <= *(_DWORD *)(*(void *)v8 + 44) - *(_DWORD *)(*(void *)v8 + 36));
          }
          else
          {
            unsigned int v8 = (long long *)a1;
            do
            {
              uint64_t v54 = *((void *)v8 + 9);
              unsigned int v8 = (long long *)((char *)v8 + 72);
            }
            while (v53 <= *(_DWORD *)(v54 + 44) - *(_DWORD *)(v54 + 36));
          }
          unint64_t v56 = v167;
          if (v8 < v167)
          {
            unint64_t v56 = v167;
            do
            {
              uint64_t v57 = *((void *)v56 - 9);
              unint64_t v56 = (long long *)((char *)v56 - 72);
            }
            while (v53 > *(_DWORD *)(v57 + 44) - *(_DWORD *)(v57 + 36));
          }
          while (v8 < v56)
          {
            long long v59 = *v8;
            long long v58 = v8[1];
            *(void *)unsigned int v8 = 0;
            *((void *)v8 + 1) = 0;
            char v218 = *((unsigned char *)v8 + 64);
            long long v60 = v8[2];
            long long v210 = v8[3];
            long long v61 = *v56;
            *(void *)unint64_t v56 = 0;
            *((void *)v56 + 1) = 0;
            uint64_t v62 = (std::__shared_weak_count *)*((void *)v8 + 1);
            long long *v8 = v61;
            if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v180 = v60;
              long long v193 = v58;
              long long v172 = v59;
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
              long long v59 = v172;
              long long v60 = v180;
              long long v58 = v193;
            }
            *((_DWORD *)v8 + 4) = *((_DWORD *)v56 + 4);
            *((_DWORD *)v8 + 5) = *((_DWORD *)v56 + 5);
            *((_DWORD *)v8 + 6) = *((_DWORD *)v56 + 6);
            *((_DWORD *)v8 + 7) = *((_DWORD *)v56 + 7);
            *((_DWORD *)v8 + 8) = *((_DWORD *)v56 + 8);
            *((_DWORD *)v8 + 9) = *((_DWORD *)v56 + 9);
            *((_DWORD *)v8 + 10) = *((_DWORD *)v56 + 10);
            *((_DWORD *)v8 + 11) = *((_DWORD *)v56 + 11);
            long long v63 = v56[3];
            *((unsigned char *)v8 + 64) = *((unsigned char *)v56 + 64);
            v8[3] = v63;
            uint64_t v64 = (std::__shared_weak_count *)*((void *)v56 + 1);
            *unint64_t v56 = v59;
            if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v181 = v60;
              long long v194 = v58;
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
              long long v60 = v181;
              long long v58 = v194;
            }
            v56[1] = v58;
            v56[2] = v60;
            v56[3] = v210;
            *((unsigned char *)v56 + 64) = v218;
            unsigned int v65 = *(_DWORD *)(v25 + 44) - *(_DWORD *)(v25 + 36);
            do
            {
              uint64_t v66 = *((void *)v8 + 9);
              unsigned int v8 = (long long *)((char *)v8 + 72);
            }
            while (v65 <= *(_DWORD *)(v66 + 44) - *(_DWORD *)(v66 + 36));
            do
            {
              uint64_t v67 = *((void *)v56 - 9);
              unint64_t v56 = (long long *)((char *)v56 - 72);
            }
            while (v65 > *(_DWORD *)(v67 + 44) - *(_DWORD *)(v67 + 36));
          }
          unint64_t v68 = (long long *)((char *)v8 - 72);
          BOOL v4 = (unint64_t)v8 - 72 >= a1;
          BOOL v5 = (long long *)((char *)v8 - 72) == (long long *)a1;
          if ((long long *)((char *)v8 - 72) != (long long *)a1)
          {
            long long v69 = *v68;
            *(void *)unint64_t v68 = 0;
            *((void *)v8 - 8) = 0;
            uint64_t v70 = *(std::__shared_weak_count **)(a1 + 8);
            *(_OWORD *)a1 = v69;
            if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v8 - 14);
            *(_DWORD *)(a1 + 20) = *((_DWORD *)v8 - 13);
            *(_DWORD *)(a1 + 24) = *((_DWORD *)v8 - 12);
            *(_DWORD *)(a1 + 28) = *((_DWORD *)v8 - 11);
            *(_DWORD *)(a1 + 32) = *((_DWORD *)v8 - 10);
            *(_DWORD *)(a1 + 36) = *((_DWORD *)v8 - 9);
            *(_DWORD *)(a1 + 40) = *((_DWORD *)v8 - 8);
            *(_DWORD *)(a1 + 44) = *((_DWORD *)v8 - 7);
            long long v71 = *(long long *)((char *)v8 - 24);
            *(unsigned char *)(a1 + 64) = *((unsigned char *)v8 - 8);
            *(_OWORD *)(a1 + 48) = v71;
          }
          unint64_t v72 = (std::__shared_weak_count *)*((void *)v8 - 8);
          *((void *)v8 - 9) = v25;
          *((void *)v8 - 8) = v52;
          if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
          a4 = 0;
          *(long long *)((char *)v8 - 56) = v165;
          *(long long *)((char *)v8 - 40) = v163;
          double result = *(double *)&v203;
          *((unsigned char *)v8 - 8) = v206;
          *(long long *)((char *)v8 - 24) = v203;
        }
        uint64_t v26 = *(void *)(a1 + 8);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v160 = *(_OWORD *)(a1 + 32);
        long long v162 = *(_OWORD *)(a1 + 16);
        long long v202 = *(_OWORD *)(a1 + 48);
        char v205 = *(unsigned char *)(a1 + 64);
        unsigned int v27 = *(_DWORD *)(v25 + 44) - *(_DWORD *)(v25 + 36);
        unint64_t v28 = a1;
        do
        {
          unint64_t v29 = v28;
          uint64_t v30 = *(void *)(v28 + 72);
          v28 += 72;
        }
        while (*(_DWORD *)(v30 + 44) - *(_DWORD *)(v30 + 36) > v27);
        unint64_t v31 = v9;
        if (v29 == a1)
        {
          unint64_t v31 = v9;
          do
          {
            if (v28 >= (unint64_t)v31) {
              break;
            }
            uint64_t v33 = *((void *)v31 - 9);
            unint64_t v31 = (long long *)((char *)v31 - 72);
          }
          while (*(_DWORD *)(v33 + 44) - *(_DWORD *)(v33 + 36) <= v27);
        }
        else
        {
          do
          {
            uint64_t v32 = *((void *)v31 - 9);
            unint64_t v31 = (long long *)((char *)v31 - 72);
          }
          while (*(_DWORD *)(v32 + 44) - *(_DWORD *)(v32 + 36) <= v27);
        }
        unsigned int v8 = (long long *)v28;
        if (v28 < (unint64_t)v31)
        {
          unint64_t v34 = (unint64_t)v31;
          do
          {
            long long v36 = *v8;
            long long v35 = v8[1];
            *(void *)unsigned int v8 = 0;
            *((void *)v8 + 1) = 0;
            char v217 = *((unsigned char *)v8 + 64);
            long long v37 = v8[2];
            long long v209 = v8[3];
            long long v38 = *(_OWORD *)v34;
            *(void *)unint64_t v34 = 0;
            *(void *)(v34 + 8) = 0;
            uint64_t v39 = (std::__shared_weak_count *)*((void *)v8 + 1);
            long long *v8 = v38;
            if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v178 = v37;
              long long v191 = v35;
              long long v171 = v36;
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
              long long v36 = v171;
              long long v37 = v178;
              long long v35 = v191;
            }
            *((_DWORD *)v8 + 4) = *(_DWORD *)(v34 + 16);
            *((_DWORD *)v8 + 5) = *(_DWORD *)(v34 + 20);
            *((_DWORD *)v8 + 6) = *(_DWORD *)(v34 + 24);
            *((_DWORD *)v8 + 7) = *(_DWORD *)(v34 + 28);
            *((_DWORD *)v8 + 8) = *(_DWORD *)(v34 + 32);
            *((_DWORD *)v8 + 9) = *(_DWORD *)(v34 + 36);
            *((_DWORD *)v8 + 10) = *(_DWORD *)(v34 + 40);
            *((_DWORD *)v8 + 11) = *(_DWORD *)(v34 + 44);
            long long v40 = *(_OWORD *)(v34 + 48);
            *((unsigned char *)v8 + 64) = *(unsigned char *)(v34 + 64);
            v8[3] = v40;
            unint64_t v41 = *(std::__shared_weak_count **)(v34 + 8);
            *(_OWORD *)unint64_t v34 = v36;
            if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v179 = v37;
              long long v192 = v35;
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
              long long v37 = v179;
              long long v35 = v192;
            }
            *(_OWORD *)(v34 + 16) = v35;
            *(_OWORD *)(v34 + 32) = v37;
            *(_OWORD *)(v34 + 48) = v209;
            *(unsigned char *)(v34 + 64) = v217;
            unsigned int v42 = *(_DWORD *)(v25 + 44) - *(_DWORD *)(v25 + 36);
            do
            {
              uint64_t v43 = *((void *)v8 + 9);
              unsigned int v8 = (long long *)((char *)v8 + 72);
            }
            while (*(_DWORD *)(v43 + 44) - *(_DWORD *)(v43 + 36) > v42);
            do
            {
              uint64_t v44 = *(void *)(v34 - 72);
              v34 -= 72;
            }
            while (*(_DWORD *)(v44 + 44) - *(_DWORD *)(v44 + 36) <= v42);
          }
          while ((unint64_t)v8 < v34);
        }
        uint64_t v45 = (long long *)((char *)v8 - 72);
        if ((long long *)((char *)v8 - 72) != (long long *)a1)
        {
          long long v46 = *v45;
          *(void *)uint64_t v45 = 0;
          *((void *)v8 - 8) = 0;
          unint64_t v47 = *(std::__shared_weak_count **)(a1 + 8);
          *(_OWORD *)a1 = v46;
          if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
          *(_DWORD *)(a1 + 16) = *((_DWORD *)v8 - 14);
          *(_DWORD *)(a1 + 20) = *((_DWORD *)v8 - 13);
          *(_DWORD *)(a1 + 24) = *((_DWORD *)v8 - 12);
          *(_DWORD *)(a1 + 28) = *((_DWORD *)v8 - 11);
          *(_DWORD *)(a1 + 32) = *((_DWORD *)v8 - 10);
          *(_DWORD *)(a1 + 36) = *((_DWORD *)v8 - 9);
          *(_DWORD *)(a1 + 40) = *((_DWORD *)v8 - 8);
          *(_DWORD *)(a1 + 44) = *((_DWORD *)v8 - 7);
          long long v48 = *(long long *)((char *)v8 - 24);
          *(unsigned char *)(a1 + 64) = *((unsigned char *)v8 - 8);
          *(_OWORD *)(a1 + 48) = v48;
        }
        unint64_t v49 = (std::__shared_weak_count *)*((void *)v8 - 8);
        *((void *)v8 - 9) = v25;
        *((void *)v8 - 8) = v26;
        if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        *(long long *)((char *)v8 - 56) = v162;
        *(long long *)((char *)v8 - 40) = v160;
        *((unsigned char *)v8 - 8) = v205;
        *(long long *)((char *)v8 - 24) = v202;
        if (v28 >= (unint64_t)v31) {
          break;
        }
LABEL_48:
        std::__introsort<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,false>(a1, (char *)v8 - 72, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v50 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((long long *)a1, (long long *)((char *)v8 - 72));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(v8, v167))
      {
        break;
      }
      if (!v50) {
        goto LABEL_48;
      }
    }
    a2 = (long long *)((char *)v8 - 72);
    if (!v50) {
      continue;
    }
    return result;
  }
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(long long *a1, long long *a2, long long *a3)
{
  unsigned int v6 = *(_DWORD *)(*(void *)a2 + 44) - *(_DWORD *)(*(void *)a2 + 36);
  unsigned int v7 = *(_DWORD *)(*(void *)a3 + 44) - *(_DWORD *)(*(void *)a3 + 36);
  if (v6 <= *(_DWORD *)(*(void *)a1 + 44) - *(_DWORD *)(*(void *)a1 + 36))
  {
    if (v7 > v6)
    {
      long long v17 = *a2;
      long long v16 = a2[1];
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      int v18 = (__n128 *)(a2 + 3);
      long long v19 = a2[2];
      __n128 v66 = (__n128)a2[3];
      char v70 = *((unsigned char *)a2 + 64);
      long long v20 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      long long v21 = (std::__shared_weak_count *)*((void *)a2 + 1);
      *a2 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v48 = v19;
        long long v57 = v16;
        long long v43 = v17;
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        long long v17 = v43;
        long long v19 = v48;
        long long v16 = v57;
      }
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a2 + 5) = *((_DWORD *)a3 + 5);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a2 + 7) = *((_DWORD *)a3 + 7);
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      *((_DWORD *)a2 + 9) = *((_DWORD *)a3 + 9);
      *((_DWORD *)a2 + 10) = *((_DWORD *)a3 + 10);
      *((_DWORD *)a2 + 11) = *((_DWORD *)a3 + 11);
      __n128 v22 = (__n128)a3[3];
      *((unsigned char *)a2 + 64) = *((unsigned char *)a3 + 64);
      __n128 *v18 = v22;
      char v23 = (std::__shared_weak_count *)*((void *)a3 + 1);
      *a3 = v17;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v49 = v19;
        long long v58 = v16;
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        long long v19 = v49;
        long long v16 = v58;
      }
      a3[1] = v16;
      a3[2] = v19;
      __n128 result = v66;
      a3[3] = (__int128)v66;
      *((unsigned char *)a3 + 64) = v70;
      if (*(_DWORD *)(*(void *)a2 + 44) - *(_DWORD *)(*(void *)a2 + 36) > (*(_DWORD *)(*(void *)a1 + 44)
                                                                                                - *(_DWORD *)(*(void *)a1 + 36)))
      {
        long long v26 = *a1;
        long long v25 = a1[1];
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        long long v27 = a1[2];
        __n128 v67 = (__n128)a1[3];
        char v71 = *((unsigned char *)a1 + 64);
        long long v28 = *a2;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        unint64_t v29 = (std::__shared_weak_count *)*((void *)a1 + 1);
        *a1 = v28;
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v50 = v27;
          long long v59 = v25;
          long long v44 = v26;
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          long long v26 = v44;
          long long v27 = v50;
          long long v25 = v59;
        }
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *((_DWORD *)a1 + 5) = *((_DWORD *)a2 + 5);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
        __n128 v30 = *v18;
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        a1[3] = (__int128)v30;
        unint64_t v31 = (std::__shared_weak_count *)*((void *)a2 + 1);
        *a2 = v26;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v51 = v27;
          long long v60 = v25;
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          long long v27 = v51;
          long long v25 = v60;
        }
        a2[1] = v25;
        a2[2] = v27;
        __n128 result = v67;
        __n128 *v18 = v67;
        *((unsigned char *)a2 + 64) = v71;
      }
    }
  }
  else
  {
    unsigned int v8 = (__n128 *)(a1 + 3);
    if (v7 > v6)
    {
      long long v10 = *a1;
      long long v9 = a1[1];
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      long long v11 = a1[2];
      __n128 v65 = *v8;
      unsigned __int8 v69 = *((unsigned char *)a1 + 64);
      long long v12 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      unint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 1);
      *a1 = v12;
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v47 = v11;
        long long v56 = v9;
        long long v42 = v10;
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        long long v10 = v42;
        long long v11 = v47;
        long long v9 = v56;
      }
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a1 + 5) = *((_DWORD *)a3 + 5);
      *((_DWORD *)a1 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a1 + 7) = *((_DWORD *)a3 + 7);
      *((_DWORD *)a1 + 8) = *((_DWORD *)a3 + 8);
      *((_DWORD *)a1 + 9) = *((_DWORD *)a3 + 9);
      *((_DWORD *)a1 + 10) = *((_DWORD *)a3 + 10);
      *((_DWORD *)a1 + 11) = *((_DWORD *)a3 + 11);
      long long v14 = (__n128 *)(a3 + 3);
      __n128 v15 = (__n128)a3[3];
      v8[1].n128_u8[0] = *((unsigned char *)a3 + 64);
      __n128 *v8 = v15;
LABEL_33:
      unint64_t v41 = (std::__shared_weak_count *)*((void *)a3 + 1);
      *a3 = v10;
      if (v41)
      {
        if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v55 = v11;
          long long v64 = v9;
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          long long v11 = v55;
          long long v9 = v64;
        }
      }
      a3[1] = v9;
      a3[2] = v11;
      __n128 result = v65;
      __n128 *v14 = v65;
      v14[1].n128_u8[0] = v69;
      return result;
    }
    long long v32 = *a1;
    long long v9 = a1[1];
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    long long v11 = a1[2];
    __n128 v68 = *v8;
    char v72 = *((unsigned char *)a1 + 64);
    long long v33 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t v34 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v33;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v52 = v11;
      long long v61 = v9;
      long long v45 = v32;
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      long long v32 = v45;
      long long v11 = v52;
      long long v9 = v61;
    }
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a1 + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
    long long v35 = (__n128 *)(a2 + 3);
    __n128 v36 = (__n128)a2[3];
    *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
    __n128 *v8 = v36;
    long long v37 = (std::__shared_weak_count *)*((void *)a2 + 1);
    *a2 = v32;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v53 = v11;
      long long v62 = v9;
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      long long v11 = v53;
      long long v9 = v62;
    }
    a2[1] = v9;
    a2[2] = v11;
    __n128 result = v68;
    *long long v35 = v68;
    *((unsigned char *)a2 + 64) = v72;
    if (*(_DWORD *)(*(void *)a3 + 44) - *(_DWORD *)(*(void *)a3 + 36) > (*(_DWORD *)(*(void *)a2 + 44)
                                                                                              - *(_DWORD *)(*(void *)a2 + 36)))
    {
      long long v10 = *a2;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      __n128 v65 = *v35;
      unsigned __int8 v69 = *((unsigned char *)a2 + 64);
      long long v38 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v39 = (std::__shared_weak_count *)*((void *)a2 + 1);
      *a2 = v38;
      if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v54 = v11;
        long long v63 = v9;
        long long v46 = v10;
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        long long v10 = v46;
        long long v11 = v54;
        long long v9 = v63;
      }
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a2 + 5) = *((_DWORD *)a3 + 5);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a2 + 7) = *((_DWORD *)a3 + 7);
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      *((_DWORD *)a2 + 9) = *((_DWORD *)a3 + 9);
      *((_DWORD *)a2 + 10) = *((_DWORD *)a3 + 10);
      *((_DWORD *)a2 + 11) = *((_DWORD *)a3 + 11);
      long long v14 = (__n128 *)(a3 + 3);
      __n128 v40 = (__n128)a3[3];
      *((unsigned char *)a2 + 64) = *((unsigned char *)a3 + 64);
      *long long v35 = v40;
      goto LABEL_33;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(long long *a1, long long *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(*((void *)a2 - 9) + 44) - *(_DWORD *)(*((void *)a2 - 9) + 36) > (*(_DWORD *)(*(void *)a1 + 44) - *(_DWORD *)(*(void *)a1 + 36)))
      {
        long long v7 = *a1;
        long long v6 = a1[1];
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        long long v8 = a1[2];
        long long v36 = a1[3];
        char v38 = *((unsigned char *)a1 + 64);
        long long v9 = *(long long *)((char *)a2 - 72);
        *((void *)a2 - 9) = 0;
        *((void *)a2 - 8) = 0;
        long long v10 = (std::__shared_weak_count *)*((void *)a1 + 1);
        *a1 = v9;
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v30 = v8;
          long long v33 = v6;
          long long v28 = v7;
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
          long long v7 = v28;
          long long v8 = v30;
          long long v6 = v33;
        }
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 - 14);
        *((_DWORD *)a1 + 5) = *((_DWORD *)a2 - 13);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 - 12);
        *((_DWORD *)a1 + 7) = *((_DWORD *)a2 - 11);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 - 10);
        *((_DWORD *)a1 + 9) = *((_DWORD *)a2 - 9);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 - 8);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a2 - 7);
        long long v11 = *(long long *)((char *)a2 - 24);
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 - 8);
        a1[3] = v11;
        long long v12 = (std::__shared_weak_count *)*((void *)a2 - 8);
        *(long long *)((char *)a2 - 72) = v7;
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            long long v31 = v8;
            long long v34 = v6;
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
            long long v8 = v31;
            long long v6 = v34;
          }
        }
        *(long long *)((char *)a2 - 56) = v6;
        *(long long *)((char *)a2 - 40) = v8;
        *(long long *)((char *)a2 - 24) = v36;
        *((unsigned char *)a2 - 8) = v38;
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1, (long long *)((char *)a1 + 72), (long long *)((char *)a2 - 72));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((uint64_t)a1, (uint64_t)a1 + 72, (uint64_t)(a1 + 9), (long long *)((char *)a2 - 72));
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,0>((uint64_t)a1, (uint64_t)a1 + 72, (uint64_t)(a1 + 9), (uint64_t)a1 + 216, (long long *)((char *)a2 - 72));
      return 1;
    default:
      unint64_t v13 = a1 + 9;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1, (long long *)((char *)a1 + 72), a1 + 9);
      long long v14 = (long long *)((char *)a1 + 216);
      if ((long long *)((char *)a1 + 216) == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    uint64_t v17 = *(void *)v14;
    if (*(_DWORD *)(*(void *)v14 + 44) - *(_DWORD *)(*(void *)v14 + 36) > (*(_DWORD *)(*(void *)v13 + 44)
                                                                                                - *(_DWORD *)(*(void *)v13 + 36)))
    {
      uint64_t v29 = *((void *)v14 + 1);
      *(void *)long long v14 = 0;
      *((void *)v14 + 1) = 0;
      long long v32 = v14[2];
      long long v35 = v14[1];
      long long v37 = v14[3];
      char v39 = *((unsigned char *)v14 + 64);
      uint64_t v18 = *(void *)v13;
      uint64_t v19 = v15;
      while (1)
      {
        long long v20 = (char *)a1 + v19;
        uint64_t v21 = *(void *)((char *)a1 + v19 + 152);
        *((void *)v20 + 18) = 0;
        *((void *)v20 + 19) = 0;
        __n128 v22 = *(std::__shared_weak_count **)((char *)a1 + v19 + 224);
        *((void *)v20 + 27) = v18;
        *((void *)v20 + 28) = v21;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        int v23 = *((_DWORD *)v20 + 41);
        *((_DWORD *)v20 + 58) = *((_DWORD *)v20 + 40);
        *((_DWORD *)v20 + 59) = v23;
        *((void *)v20 + 30) = *((void *)v20 + 21);
        *((_DWORD *)v20 + 62) = *((_DWORD *)v20 + 44);
        *(void *)(v20 + 252) = *(void *)(v20 + 180);
        *((_DWORD *)v20 + 65) = *((_DWORD *)v20 + 47);
        v20[280] = v20[208];
        *(_OWORD *)(v20 + 264) = *((_OWORD *)v20 + 12);
        if (v19 == -144) {
          break;
        }
        long long v24 = (char *)a1 + v19;
        uint64_t v18 = *(void *)((char *)a1 + v19 + 72);
        v19 -= 72;
        if (*(_DWORD *)(v17 + 44) - *(_DWORD *)(v17 + 36) <= (*(_DWORD *)(v18 + 44)
                                                                           - *(_DWORD *)(v18 + 36)))
        {
          uint64_t v25 = (uint64_t)a1 + v19 + 216;
          long long v26 = (long long *)(v24 + 192);
          goto LABEL_23;
        }
      }
      long long v26 = a1 + 3;
      uint64_t v25 = (uint64_t)a1;
LABEL_23:
      long long v27 = *(std::__shared_weak_count **)(v25 + 8);
      *(void *)uint64_t v25 = v17;
      *(void *)(v25 + 8) = v29;
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      *(_OWORD *)(v25 + 16) = v35;
      *(_OWORD *)(v25 + 32) = v32;
      *long long v26 = v37;
      *((unsigned char *)v26 + 16) = v39;
      if (++v16 == 8) {
        return (long long *)((char *)v14 + 72) == a2;
      }
    }
    unint64_t v13 = v14;
    v15 += 72;
    long long v14 = (long long *)((char *)v14 + 72);
    if (v14 == a2) {
      return 1;
    }
  }
}

void md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(md::DaVinciGroundRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((unsigned char *)this + 48) = 0;
  *(_OWORD *)((char *)this + 52) = xmmword_1A28FC970;
  *(void *)((char *)this + 68) = 0;
  *(void *)((char *)this + 84) = 0;
  *(void *)((char *)this + 76) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 12) = (char *)this + 104;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((unsigned char *)this + 168) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 172) = xmmword_1A28FC970;
  *(void *)((char *)this + 196) = 0;
  *(void *)((char *)this + 188) = 0;
  *((void *)this + 28) = 0;
  *(void *)((char *)this + 204) = 0;
  *(_OWORD *)((char *)this + 292) = xmmword_1A28FC970;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = (char *)this + 224;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((unsigned char *)this + 288) = 0;
  *(void *)((char *)this + 324) = 0;
  *(void *)((char *)this + 308) = 0;
  *(void *)((char *)this + 316) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 42) = (char *)this + 344;
  *((unsigned char *)this + 408) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 412) = xmmword_1A28FC970;
  *(void *)((char *)this + 436) = 0;
  *(void *)((char *)this + 428) = 0;
  *(void *)((char *)this + 444) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 57) = (char *)this + 464;
  *((unsigned char *)this + 528) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *(_OWORD *)((char *)this + 532) = xmmword_1A28FC970;
  *(void *)((char *)this + 556) = 0;
  *(void *)((char *)this + 548) = 0;
  *(void *)((char *)this + 564) = 0;
  *((void *)this + 73) = 0;
  *((void *)this + 74) = 0;
  *((void *)this + 72) = (char *)this + 584;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((unsigned char *)this + 648) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 652) = xmmword_1A28FC970;
  *(void *)((char *)this + 676) = 0;
  *(void *)((char *)this + 668) = 0;
  *(void *)((char *)this + 684) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 87) = (char *)this + 704;
  *((unsigned char *)this + 768) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *(_OWORD *)((char *)this + 772) = xmmword_1A28FC970;
  *(void *)((char *)this + 796) = 0;
  *(void *)((char *)this + 788) = 0;
  *(void *)((char *)this + 804) = 0;
  *((void *)this + 104) = 0;
  *((void *)this + 103) = 0;
  *((void *)this + 102) = (char *)this + 824;
  *((unsigned char *)this + 888) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 892) = xmmword_1A28FC970;
  *(void *)((char *)this + 916) = 0;
  *(void *)((char *)this + 908) = 0;
  *(void *)((char *)this + 924) = 0;
  *((void *)this + 119) = 0;
  *((void *)this + 118) = 0;
  *((void *)this + 117) = (char *)this + 944;
  *((unsigned char *)this + 1008) = 0;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 1012) = xmmword_1A28FC970;
  *(void *)((char *)this + 1036) = 0;
  *(void *)((char *)this + 1028) = 0;
  *(void *)((char *)this + 1044) = 0;
  *((void *)this + 134) = 0;
  *((void *)this + 133) = 0;
  *((void *)this + 132) = (char *)this + 1064;
  *((void *)this + 153) = 0;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *((void *)this + 184) = 0;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 78) = 0u;
  operator new();
}

void sub_1A1C3BD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ggl::Batcher *a18, md::DaVinciRenderStateCache *a19, ggl::RenderDataHolder *a20,ggl::RenderDataHolder *a21,ggl::RenderDataHolder *a22,ggl::RenderDataHolder *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t *a39,uint64_t *a40,uint64_t *a41,uint64_t *a42,uint64_t *a43,uint64_t *a44,uint64_t *a45,uint64_t *a46,uint64_t *a47,uint64_t *a48,uint64_t *a49,uint64_t *a50,uint64_t *a51,uint64_t *a52,uint64_t *a53,uint64_t *a54,uint64_t *a55,uint64_t *a56,uint64_t *a57,uint64_t *a58,uint64_t *a59,uint64_t *a60,uint64_t *a61,uint64_t *a62,uint64_t a63)
{
  std::function<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::~function(v73);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v72);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v71);
  std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> *)>::~function(&STACK[0x4A0]);
  std::function<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::~function(&STACK[0x4C0]);
  MEMORY[0x1A6239270](v71, 0x10A0C40D234DDC7);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v70 + 2744);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v70 + 2728);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v70 + 2712);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a14);
  std::__tree<std::__value_type<gss::StyleAttribute,std::unique_ptr<ggl::Texture2D>>,std::__map_value_compare<gss::StyleAttribute,std::__value_type<gss::StyleAttribute,std::unique_ptr<ggl::Texture2D>>,std::less<gss::StyleAttribute>,true>,std::allocator<std::__value_type<gss::StyleAttribute,std::unique_ptr<ggl::Texture2D>>>>::destroy(*(void **)(v70 + 2680));
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](a15);
  uint64_t v75 = *(void *)(v70 + 2600);
  *(void *)(v70 + 2600) = 0;
  if (v75) {
    MEMORY[0x1A6239270](v75, 0x1000C4049ECCB0CLL);
  }
  uint64_t v76 = *a59;
  *a59 = 0;
  if (v76) {
    MEMORY[0x1A6239270](v76, 0x1000C4049ECCB0CLL);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a17);
  md::RenderItemPool::~RenderItemPool((md::RenderItemPool *)(v70 + 2536));
  ggl::Batcher::~Batcher(a18);
  md::DaVinciRenderStateCache::~DaVinciRenderStateCache(a19);
  ggl::RenderDataHolder::~RenderDataHolder(a20);
  ggl::RenderDataHolder::~RenderDataHolder(a21);
  ggl::RenderDataHolder::~RenderDataHolder(a22);
  ggl::RenderDataHolder::~RenderDataHolder(a23);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a24);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a25);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a26);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a27);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a28);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a67 + 1240);
  uint64_t v77 = *(void *)(v70 + 1456);
  *(void *)(v70 + 1456) = 0;
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
  }
  STACK[0x210] = a67 + 984;
  uint64_t v78 = *(void *)(v70 + 1448);
  *(void *)(v70 + 1448) = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::PackedLinearDepthPipelineSetup>>::~unique_ptr[abi:nn180100](a56);
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::LinearDepthPipelineSetup>>::~unique_ptr[abi:nn180100](a57);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::~unique_ptr[abi:nn180100](a46);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::~unique_ptr[abi:nn180100](a47);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::~unique_ptr[abi:nn180100](a48);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::~unique_ptr[abi:nn180100](a43);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::~unique_ptr[abi:nn180100](a49);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::~unique_ptr[abi:nn180100](a45);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>>>::~unique_ptr[abi:nn180100](a44);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::~unique_ptr[abi:nn180100](a50);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::~unique_ptr[abi:nn180100](a51);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::~unique_ptr[abi:nn180100](a52);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::~unique_ptr[abi:nn180100](a53);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a67 + 1104);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a67 + 1088);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a67 + 1072);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a67 + 1056);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a67 + 1040);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a67 + 1024);
  uint64_t v79 = *(void *)(v70 + 1224);
  *(void *)(v70 + 1224) = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x210]);
  uint64_t v80 = *(void **)(v70 + 1200);
  *(void *)(v70 + 1200) = 0;
  if (v80)
  {
    void *v80 = 3131955885;
    MEMORY[0x1A6239270]();
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a67 + 960);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v70 + 1168);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::~unique_ptr[abi:nn180100](a39);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::~unique_ptr[abi:nn180100](a40);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::~unique_ptr[abi:nn180100](a41);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::~unique_ptr[abi:nn180100](a42);
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::DecalPipelineSetup>>::~unique_ptr[abi:nn180100](a54);
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::RibbonPipelineSetup>>::~unique_ptr[abi:nn180100](a55);
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::GroundShadowMapPipelineSetup>>::~unique_ptr[abi:nn180100](a58);
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::GroundDepthPipelineSetup>>::~unique_ptr[abi:nn180100](a60);
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::GroundNonCompressedPipelineSetup>>::~unique_ptr[abi:nn180100](a61);
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::GroundPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)(v70 + 1088));
  std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::GroundPipelineSetup>>::~unique_ptr[abi:nn180100](a62);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a29);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a69);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a30);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a63);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a70);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(STACK[0x208]);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a66);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a64);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(v70);

  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  char v162 = a5 | a6;
  v31.i64[1] = (a5 | a6);
  *(__int32 *)((char *)&v31.i32[2] + 1) = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  int8x16_t v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9E0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  int8x16_t v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC6E0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  int8x16_t v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9D0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  int8x16_t v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9C0);
  int8x16_t v37 = vceqzq_s8(v31);
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  int32x4_t v39 = vmovl_high_s16(v38);
  int16x8_t v40 = vmovl_high_s8(v37);
  int32x4_t v41 = vmovl_high_s16(v40);
  int32x4_t v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA60, (int8x16_t)v32);
  int8x16_t v45 = vceqzq_s8((int8x16_t)v30);
  int16x8_t v46 = vmovl_high_s8(v45);
  int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  int8x16_t v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA70, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA80, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  int32x4_t v52 = vmovl_high_s16(v46);
  int8x16_t v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_1A28FCA50, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA90, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  int32x4_t v55 = vmovl_high_s16(v48);
  int8x16_t v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_1A28FCA40, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAA0, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  int8x16_t v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_1A28FCA30, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  int8x16_t v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9B0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAB0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  int8x16_t v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_1A28FCA20, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  int8x16_t v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9A0);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAC0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  int8x16_t v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_1A28FCA10, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  int8x16_t v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC990);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAD0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  int8x16_t v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_1A28FCA00, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  int8x16_t v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC980);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAE0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  int64x2_t v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_1A28FC9F0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  unint64_t v71 = v70.i64[0];
  long long v73 = (uint64_t **)(a2 + 104);
  char v72 = *(void **)(a2 + 104);
  if (!v72) {
    goto LABEL_12;
  }
  long long v74 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v75 = v72[4];
    BOOL v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0]) {
      uint64_t v77 = v72;
    }
    else {
      uint64_t v77 = v72 + 1;
    }
    if (v76) {
      long long v74 = (uint64_t **)v72;
    }
    char v72 = (void *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    int v161 = v74[6];
    a1[1] = (std::__shared_weak_count *)v161;
    if (v161) {
      atomic_fetch_add_explicit(v161 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    int64x2_t v163 = v70;
    uint64_t v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589828;
    uint64_t v79 = v78 + 1;
    long long v166 = *(_OWORD *)(a2 + 16);
    long long v167 = *(_OWORD *)(a2 + 32);
    {
      {
        {
          {
            ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::packedPositionVboReflection;
          }
          ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::attributesReflection(void)::r;
          *(void *)algn_1EB3185F0 = 1;
        }
        ggl::DaVinci::GroundNonCompressedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::typedReflection(void)::r;
        {
          ggl::DaVinci::pipelineDataGroundNonCompressedPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
          *(void *)algn_1E9589528 = ggl::DaVinci::Normals::reflection(void)::reflection;
          qword_1E9589530 = (uint64_t)ggl::DaVinci::UVs::reflection(void)::reflection;
          unk_1E9589538 = ggl::DaVinci::Elevations::reflection(void)::reflection;
        }
        qword_1E9588AF0 = (uint64_t)&ggl::DaVinci::pipelineDataGroundNonCompressedPipelineDeviceStructs(void)::ref;
        *(void *)algn_1E9588AF8 = 4;
        {
          ggl::DaVinci::pipelineDataGroundNonCompressedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1E9589740 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1E9589748 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
          unk_1E9589750 = ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
          qword_1E9589758 = (uint64_t)ggl::DaVinci::PlanarParameters::reflection(void)::reflection;
          unk_1E9589760 = ggl::DaVinci::Style::reflection(void)::reflection;
          qword_1E9589768 = (uint64_t)ggl::DaVinci::StyleSunMatrix::reflection(void)::reflection;
          unk_1E9589770 = ggl::DaVinci::StyleTransitionToFlat::reflection(void)::reflection;
          qword_1E9589778 = (uint64_t)ggl::DaVinci::GroundAtmosphere::reflection(void)::reflection;
          unk_1E9589780 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
          qword_1E9589788 = (uint64_t)ggl::DaVinci::StyleCameraLighting::reflection(void)::reflection;
          unk_1E9589790 = ggl::Tile::Clipping::reflection(void)::reflection;
          qword_1E9589798 = (uint64_t)ggl::Lighting::LightSpecularConfiguration::reflection(void)::reflection;
          unk_1E95897A0 = ggl::DaVinci::RenderTargetSize::reflection(void)::reflection;
          qword_1E95897A8 = (uint64_t)ggl::DaVinci::LightingDebugOptions::reflection(void)::reflection;
          unk_1E95897B0 = ggl::DaVinci::ColorCorrectionFactor::reflection(void)::reflection;
          qword_1E95897B8 = (uint64_t)ggl::DaVinci::ElevatedStroke::reflection(void)::reflection;
          unk_1E95897C0 = ggl::DaVinci::LandCoverSettings::reflection(void)::reflection;
          qword_1E95897C8 = (uint64_t)ggl::DaVinci::StyleShadow::reflection(void)::reflection;
          unk_1E95897D0 = ggl::DaVinci::StyleEmissiveColor::reflection(void)::reflection;
          qword_1E95897D8 = (uint64_t)ggl::DaVinci::StyleGroundOcclusion::reflection(void)::reflection;
          unk_1E95897E0 = ggl::DaVinci::MaterialStyle::reflection(void)::reflection;
          qword_1E95897E8 = (uint64_t)ggl::DaVinci::GradientParameters::reflection(void)::reflection;
          unk_1E95897F0 = ggl::DaVinci::GradientParameters::reflection(void)::reflection;
          qword_1E95897F8 = (uint64_t)ggl::DaVinci::StyleBlend::reflection(void)::reflection;
          unk_1E9589800 = ggl::DaVinci::RasterOverlay::reflection(void)::reflection;
          qword_1E9589808 = (uint64_t)ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
          unk_1E9589810 = ggl::DaVinci::StyleSSAO::reflection(void)::reflection;
          qword_1E9589818 = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
          unk_1E9589820 = ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
        }
        qword_1E9588B00 = (uint64_t)&ggl::DaVinci::pipelineDataGroundNonCompressedPipelineConstantStructs(void)::ref;
        *(_OWORD *)algn_1E9588B08 = xmmword_1A28FF470;
      }
      ggl::DaVinci::GroundNonCompressedPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GroundNonCompressedPipelineSetup::typedReflection(void)::ref;
      {
        ggl::DaVinciGroundNotCompressedShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundNotCompressedShader";
        {
          ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref = 2461507574;
          qword_1EB31AE28 = (uint64_t)"DaVinciGroundNotCompressedShader";
          unk_1EB31AE30 = ggl::daVinciGroundNotCompressedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31AE38 = 5;
          unk_1EB31AE40 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AE48 = 12;
          unk_1EB31AE50 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AE58 = 4;
          unk_1EB31AE60 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB31AE68 = 1;
          unk_1EB31AE70 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AE80 = 0;
          unk_1EB31AE88 = 0;
          qword_1EB31AE78 = 1;
        }
        qword_1EB31A490 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB31A498 = -1833459722;
        {
          ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref = 0x16213AD6ALL;
          qword_1EB31AEA0 = (uint64_t)"DaVinciGroundNotCompressedShader";
          unk_1EB31AEA8 = 0;
          qword_1EB31AEB0 = 0;
          unk_1EB31AEB8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AEC0 = 21;
          unk_1EB31AEC8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AED0 = 0;
          unk_1EB31AED8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31AEE0 = 12;
          unk_1EB31AEE8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AEF8 = 0;
          unk_1EB31AF00 = 0;
          qword_1EB31AEF0 = 12;
        }
        qword_1EB31A4A0 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB31A4A8 = 1645456746;
        qword_1EB31A4B0 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderConstants(void)::ref;
        unk_1EB31A4B8 = 30;
        qword_1EB31A4C0 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderTextures(void)::ref;
        unk_1EB31A4C8 = 13;
        qword_1EB31A4D0 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderSamplers(void)::ref;
        unk_1EB31A4D8 = 13;
      }
      qword_1E9588B28 = (uint64_t)&ggl::DaVinciGroundNotCompressedShader::typedReflection(void)::ref;
      {
        ggl::DaVinci::pipelineStateGroundNonCompressedPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9589BB0 = 0;
        qword_1E9589BB8 = (uint64_t)"";
        dword_1E9589BC0 = 0;
        qword_1E9589BC8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineAttributeBinding_0(void)::attr;
        unk_1E9589BD0 = 1;
      }
      qword_1E9588B30 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9588B38 = 1;
      qword_1E9588B40 = 0;
      unk_1E9588B48 = 13;
      {
        ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceStructBinding(void)::ref = 0;
        *(void *)algn_1E9589AE8 = 0;
        qword_1E9589AF0 = (uint64_t)"instanceTransform";
        dword_1E9589AF8 = 2;
        qword_1E9589B00 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1E9589B08 = xmmword_1A28FC760;
        qword_1E9589B18 = 1;
        unk_1E9589B20 = "normals";
        dword_1E9589B28 = 2;
        qword_1E9589B30 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceNormalsBinding(void)::reflection;
        unk_1E9589B38 = xmmword_1A28FE150;
        qword_1E9589B48 = 2;
        unk_1E9589B50 = "uvs";
        dword_1E9589B58 = 2;
        qword_1E9589B60 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceUvsBinding(void)::reflection;
        unk_1E9589B68 = xmmword_1A28FF480;
        qword_1E9589B78 = 3;
        unk_1E9589B80 = "elevations";
        dword_1E9589B88 = 2;
        qword_1E9589B90 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceElevationsBinding(void)::reflection;
        unk_1E9589B98 = 0;
      }
      qword_1E9588B50 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceStructBinding(void)::ref;
      *(void *)algn_1E9588B58 = 4;
      {
        ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStructBinding(void)::ref = 0;
        unk_1EB31B060 = 0;
        qword_1EB31B068 = (uint64_t)"view";
        dword_1EB31B070 = 3;
        qword_1EB31B078 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantViewBinding(void)::reflection;
        unk_1EB31B080 = xmmword_1A28FCEB0;
        qword_1EB31B090 = 1;
        unk_1EB31B098 = "transform";
        dword_1EB31B0A0 = 3;
        qword_1EB31B0A8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EB31B0B0 = xmmword_1A28FCF70;
        qword_1EB31B0C0 = 2;
        unk_1EB31B0C8 = "shadow";
        dword_1EB31B0D0 = 3;
        qword_1EB31B0D8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantShadowBinding(void)::reflection;
        unk_1EB31B0E0 = xmmword_1A28FC950;
        qword_1EB31B0F0 = 3;
        unk_1EB31B0F8 = "lightConfigAmbient";
        dword_1EB31B100 = 3;
        qword_1EB31B108 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantLightConfigAmbientBinding(void)::reflection;
        *(_OWORD *)algn_1EB31B110 = xmmword_1A28FD5F0;
        qword_1EB31B120 = 4;
        unk_1EB31B128 = "planarParameters";
        dword_1EB31B130 = 3;
        qword_1EB31B138 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantPlanarParametersBinding(void)::reflection;
        unk_1EB31B140 = xmmword_1A28FCF80;
        qword_1EB31B150 = 5;
        unk_1EB31B158 = "style";
        dword_1EB31B160 = 3;
        qword_1EB31B168 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStyleBinding(void)::reflection;
        xmmword_1EB31B170 = xmmword_1A28FF490;
        qword_1EB31B180 = 6;
        unk_1EB31B188 = "sunMatrix";
        dword_1EB31B190 = 3;
        qword_1EB31B198 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantSunMatrixBinding(void)::reflection;
        xmmword_1EB31B1A0 = xmmword_1A28FE160;
        qword_1EB31B1B0 = 7;
        unk_1EB31B1B8 = "transition";
        dword_1EB31B1C0 = 3;
        qword_1EB31B1C8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantTransitionBinding(void)::reflection;
        xmmword_1EB31B1D0 = xmmword_1A28FF4A0;
        qword_1EB31B1E0 = 8;
        unk_1EB31B1E8 = "atmosphereParameters";
        dword_1EB31B1F0 = 3;
        qword_1EB31B1F8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantAtmosphereParametersBinding(void)::reflection;
        xmmword_1EB31B200 = xmmword_1A28FF4B0;
        qword_1EB31B210 = 9;
        unk_1EB31B218 = "positionScaleInfo";
        dword_1EB31B220 = 3;
        qword_1EB31B228 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantPositionScaleInfoBinding(void)::reflection;
        xmmword_1EB31B230 = xmmword_1A28FF4C0;
        qword_1EB31B240 = 10;
        unk_1EB31B248 = "cameraLightingStyle";
        dword_1EB31B250 = 3;
        qword_1EB31B258 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantCameraLightingStyleBinding(void)::reflection;
        xmmword_1EB31B260 = xmmword_1A28FF4D0;
        qword_1EB31B270 = 11;
        qword_1EB31B278 = (uint64_t)"tileClipping";
        dword_1EB31B280 = 3;
        qword_1EB31B288 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantTileClippingBinding(void)::reflection;
        xmmword_1EB31B290 = xmmword_1A28FF4E0;
        qword_1EB31B2A0 = 12;
        qword_1EB31B2A8 = (uint64_t)"lightConfig";
        dword_1EB31B2B0 = 3;
        qword_1EB31B2B8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EB31B2C0 = xmmword_1A28FF4F0;
        qword_1EB31B2D0 = 13;
        qword_1EB31B2D8 = (uint64_t)"rtSize";
        dword_1EB31B2E0 = 3;
        qword_1EB31B2E8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantRtSizeBinding(void)::reflection;
        xmmword_1EB31B2F0 = xmmword_1A28FF500;
        qword_1EB31B300 = 14;
        qword_1EB31B308 = (uint64_t)"lightingDebugOptions";
        dword_1EB31B310 = 3;
        qword_1EB31B318 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantLightingDebugOptionsBinding(void)::reflection;
        xmmword_1EB31B320 = xmmword_1A28FF510;
        qword_1EB31B330 = 15;
        qword_1EB31B338 = (uint64_t)"colorFactors";
        dword_1EB31B340 = 3;
        qword_1EB31B348 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantColorFactorsBinding(void)::reflection;
        xmmword_1EB31B350 = xmmword_1A28FF520;
        qword_1EB31B360 = 16;
        qword_1EB31B368 = (uint64_t)"elevatedStroke";
        dword_1EB31B370 = 3;
        qword_1EB31B378 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantElevatedStrokeBinding(void)::reflection;
        xmmword_1EB31B380 = xmmword_1A28FF530;
        qword_1EB31B390 = 17;
        qword_1EB31B398 = (uint64_t)"landCoverSettings";
        dword_1EB31B3A0 = 3;
        qword_1EB31B3A8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantLandCoverSettingsBinding(void)::reflection;
        xmmword_1EB31B3B0 = xmmword_1A28FF540;
        qword_1EB31B3C0 = 18;
        qword_1EB31B3C8 = (uint64_t)"shadowStyle";
        dword_1EB31B3D0 = 3;
        qword_1EB31B3D8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantShadowStyleBinding(void)::reflection;
        xmmword_1EB31B3E0 = xmmword_1A28FF550;
        qword_1EB31B3F0 = 19;
        qword_1EB31B3F8 = (uint64_t)"emissiveStyle";
        dword_1EB31B400 = 3;
        qword_1EB31B408 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantEmissiveStyleBinding(void)::reflection;
        xmmword_1EB31B410 = xmmword_1A28FF560;
        qword_1EB31B420 = 20;
        qword_1EB31B428 = (uint64_t)"groundOcclusionStyle";
        dword_1EB31B430 = 3;
        qword_1EB31B438 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantGroundOcclusionStyleBinding(void)::reflection;
        xmmword_1EB31B440 = xmmword_1A28FF570;
        qword_1EB31B450 = 21;
        qword_1EB31B458 = (uint64_t)"materialStyle";
        dword_1EB31B460 = 3;
        qword_1EB31B468 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantMaterialStyleBinding(void)::reflection;
        xmmword_1EB31B470 = xmmword_1A28FF580;
        qword_1EB31B480 = 22;
        qword_1EB31B488 = (uint64_t)"gradient1Parameters";
        dword_1EB31B490 = 3;
        qword_1EB31B498 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantGradient1ParametersBinding(void)::reflection;
        xmmword_1EB31B4A0 = xmmword_1A28FF590;
        qword_1EB31B4B0 = 23;
        qword_1EB31B4B8 = (uint64_t)"gradient2Parameters";
        dword_1EB31B4C0 = 3;
        qword_1EB31B4C8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantGradient2ParametersBinding(void)::reflection;
        xmmword_1EB31B4D0 = xmmword_1A28FF5A0;
        qword_1EB31B4E0 = 24;
        qword_1EB31B4E8 = (uint64_t)"styleBlend";
        dword_1EB31B4F0 = 3;
        qword_1EB31B4F8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStyleBlendBinding(void)::reflection;
        xmmword_1EB31B500 = xmmword_1A28FF5B0;
        qword_1EB31B510 = 25;
        qword_1EB31B518 = (uint64_t)"rasterOverlay";
        dword_1EB31B520 = 3;
        qword_1EB31B528 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantRasterOverlayBinding(void)::reflection;
        xmmword_1EB31B530 = xmmword_1A28FF5C0;
        qword_1EB31B540 = 26;
        qword_1EB31B548 = (uint64_t)"srgbBlendStyle";
        dword_1EB31B550 = 3;
        qword_1EB31B558 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantSrgbBlendStyleBinding(void)::reflection;
        xmmword_1EB31B560 = xmmword_1A28FF5D0;
        qword_1EB31B570 = 27;
        qword_1EB31B578 = (uint64_t)"styleSSAO";
        dword_1EB31B580 = 3;
        qword_1EB31B588 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStyleSSAOBinding(void)::reflection;
        xmmword_1EB31B590 = xmmword_1A28FF5E0;
        qword_1EB31B5A0 = 28;
        qword_1EB31B5A8 = (uint64_t)"styleColor";
        dword_1EB31B5B0 = 3;
        qword_1EB31B5B8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStyleColorBinding(void)::reflection;
        xmmword_1EB31B5C0 = xmmword_1A28FF5F0;
        qword_1EB31B5D0 = 29;
        qword_1EB31B5D8 = (uint64_t)"routeLineMaskStyle";
        dword_1EB31B5E0 = 3;
        qword_1EB31B5E8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantRouteLineMaskStyleBinding(void)::reflection;
        qword_1EB31B5F0 = 1;
      }
      qword_1E9588B60 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E9588B68 = 30;
    }
    int64x2_t v80 = v163;
    v80.i8[13] = a13;
    unint64_t v81 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v82 = *(std::__shared_weak_count **)(a2 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[14] = a14;
    *(_OWORD *)int v168 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v168[12] = *(_OWORD *)(a2 + 60);
    long long v83 = *(_OWORD *)(a2 + 76);
    char v84 = *(unsigned char *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::GroundNonCompressedPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v81;
    v78[3].__shared_owners_ = (uint64_t)v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v166;
    *(_OWORD *)&v78[12].__shared_owners_ = v167;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v168[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v168;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v83;
    BYTE4(v78[5].__shared_owners_) = v84;
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int64x2_t v164 = v80;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      int64x2_t v80 = v164;
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v80;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v162;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    int8x16_t v85 = *(int8x16_t *)&v78[14].__shared_owners_;
    int8x16_t v86 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    int16x8_t v87 = vmovl_high_s8(v86);
    int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
    v89.i64[0] = v88.u32[0];
    v89.i64[1] = v88.u32[1];
    int8x16_t v90 = v89;
    int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v89.i64[0] = v92.u32[0];
    v89.i64[1] = v92.u32[1];
    int8x16_t v93 = v89;
    int32x4_t v94 = vmovl_high_s16(v87);
    int32x4_t v95 = vmovl_high_s16(v91);
    v89.i64[0] = v95.u32[2];
    v89.i64[1] = v95.u32[3];
    int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
    v89.i64[0] = v94.u32[0];
    v89.i64[1] = v94.u32[1];
    int8x16_t v97 = v89;
    v89.i64[0] = v95.u32[0];
    v89.i64[1] = v95.u32[1];
    int8x16_t v98 = v89;
    v89.i64[0] = v88.u32[2];
    v89.i64[1] = v88.u32[3];
    int8x16_t v99 = v89;
    v89.i64[0] = v92.u32[2];
    v89.i64[1] = v92.u32[3];
    int8x16_t v100 = v89;
    v89.i64[0] = v94.u32[2];
    v89.i64[1] = v94.u32[3];
    int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v89);
    int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v100);
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5613C8;
    LOBYTE(v78[15].__vftable) = a24;
    BYTE1(v78[15].__vftable) = a25;
    BYTE2(v78[15].__vftable) = a26;
    BYTE3(v78[15].__vftable) = a27;
    WORD2(v78[15].__vftable) = a28;
    HIWORD(v78[15].__vftable) = a29;
    int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v97);
    int8x16_t v104 = vceqzq_s8(v85);
    int16x8_t v105 = vmovl_high_s8(v104);
    int32x4_t v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v89.i64[0] = v106.u32[0];
    v89.i64[1] = v106.u32[1];
    int8x16_t v107 = v89;
    int16x8_t v108 = vmovl_s8(*(int8x8_t *)v104.i8);
    int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v89.i64[0] = v109.u32[0];
    v89.i64[1] = v109.u32[1];
    int8x16_t v110 = v89;
    int32x4_t v111 = vmovl_high_s16(v105);
    v89.i64[0] = v111.u32[0];
    v89.i64[1] = v111.u32[1];
    int8x16_t v112 = v89;
    int32x4_t v113 = vmovl_high_s16(v108);
    v89.i64[0] = v113.u32[0];
    v89.i64[1] = v113.u32[1];
    int8x16_t v114 = v89;
    v89.i64[0] = v106.u32[2];
    v89.i64[1] = v106.u32[3];
    int8x16_t v115 = v89;
    v89.i64[0] = v109.u32[2];
    v89.i64[1] = v109.u32[3];
    int8x16_t v116 = v89;
    v89.i64[0] = v111.u32[2];
    v89.i64[1] = v111.u32[3];
    int8x16_t v117 = v89;
    v89.i64[0] = v113.u32[2];
    v89.i64[1] = v113.u32[3];
    int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v117);
    int8x16_t v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v107), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
    int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v110), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
    int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v112), v103);
    int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v114), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v98));
    int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v99));
    int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v116), v102);
    int8x16_t v125 = vorrq_s8(v118, v101);
    int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v96);
    int8x16_t v127 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    int16x8_t v128 = vmovl_s8(*(int8x8_t *)v127.i8);
    int32x4_t v129 = vmovl_high_s16(v128);
    v89.i64[0] = v129.i32[2];
    v89.i64[1] = v129.i32[3];
    int8x16_t v130 = v89;
    int16x8_t v131 = vmovl_high_s8(v127);
    int32x4_t v132 = vmovl_high_s16(v131);
    v89.i64[0] = v132.i32[2];
    v89.i64[1] = v132.i32[3];
    int8x16_t v133 = v89;
    int32x4_t v134 = vmovl_s16(*(int16x4_t *)v128.i8);
    v89.i64[0] = v134.i32[2];
    v89.i64[1] = v134.i32[3];
    int8x16_t v135 = v89;
    int32x4_t v136 = vmovl_s16(*(int16x4_t *)v131.i8);
    v89.i64[0] = v136.i32[2];
    v89.i64[1] = v136.i32[3];
    int8x16_t v137 = v89;
    v89.i64[0] = v129.i32[0];
    v89.i64[1] = v129.i32[1];
    int8x16_t v138 = v89;
    v89.i64[0] = v132.i32[0];
    v89.i64[1] = v132.i32[1];
    int8x16_t v139 = v89;
    v89.i64[0] = v134.i32[0];
    v89.i64[1] = v134.i32[1];
    int8x16_t v140 = v89;
    v89.i64[0] = v136.i32[0];
    v89.i64[1] = v136.i32[1];
    int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
    int8x16_t v142 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    int16x8_t v143 = vmovl_high_s8(v142);
    int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
    v89.i64[0] = v144.i32[0];
    v89.i64[1] = v144.i32[1];
    int8x16_t v145 = v89;
    int16x8_t v146 = vmovl_s8(*(int8x8_t *)v142.i8);
    int32x4_t v147 = vmovl_s16(*(int16x4_t *)v146.i8);
    v89.i64[0] = v147.i32[0];
    v89.i64[1] = v147.i32[1];
    int8x16_t v148 = v89;
    int32x4_t v149 = vmovl_high_s16(v143);
    v89.i64[0] = v149.i32[0];
    v89.i64[1] = v149.i32[1];
    int8x16_t v150 = v89;
    int32x4_t v151 = vmovl_high_s16(v146);
    v89.i64[0] = v151.i32[0];
    v89.i64[1] = v151.i32[1];
    int8x16_t v152 = v89;
    v89.i64[0] = v144.i32[2];
    v89.i64[1] = v144.i32[3];
    int8x16_t v153 = v89;
    v89.i64[0] = v147.i32[2];
    v89.i64[1] = v147.i32[3];
    int8x16_t v154 = v89;
    v89.i64[0] = v149.i32[2];
    v89.i64[1] = v149.i32[3];
    int8x16_t v155 = v89;
    v89.i64[0] = v151.i32[2];
    v89.i64[1] = v151.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v148), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140)), v120), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v145), v141), v119)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v152), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v138)), v122), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v150),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v139)),
                                                    v121))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v154), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v135)), v124), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v153), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v137)), v123)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v130)), v126), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v155),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v133)),
                                                    v125)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v79;
    a1[1] = v78;
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v156 = *v73;
    uint64_t v157 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v157 = (uint64_t **)v156;
          unint64_t v158 = v156[4];
          if (v71 >= v158) {
            break;
          }
          uint64_t v156 = *v157;
          long long v73 = v157;
          if (!*v157) {
            goto LABEL_27;
          }
        }
        if (v158 >= v71) {
          break;
        }
        uint64_t v156 = v157[1];
        if (!v156)
        {
          long long v73 = v157 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_27:
      int v159 = (uint64_t *)operator new(0x38uLL);
      v159[4] = v71;
      v159[5] = (uint64_t)v79;
      v159[6] = (uint64_t)v78;
      *int v159 = 0;
      v159[1] = 0;
      v159[2] = (uint64_t)v157;
      *long long v73 = v159;
      uint64_t v160 = **(void **)(a2 + 96);
      if (v160)
      {
        *(void *)(a2 + 96) = v160;
        int v159 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v159);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A1C3E018(_Unwind_Exception *a1)
{
  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  char v163 = a5 | a6;
  v31.i64[1] = (a5 | a6);
  *(__int32 *)((char *)&v31.i32[2] + 1) = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  int8x16_t v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9E0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  int8x16_t v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC6E0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  int8x16_t v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9D0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  int8x16_t v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9C0);
  int8x16_t v37 = vceqzq_s8(v31);
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  int32x4_t v39 = vmovl_high_s16(v38);
  int16x8_t v40 = vmovl_high_s8(v37);
  int32x4_t v41 = vmovl_high_s16(v40);
  int32x4_t v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA60, (int8x16_t)v32);
  int8x16_t v45 = vceqzq_s8((int8x16_t)v30);
  int16x8_t v46 = vmovl_high_s8(v45);
  int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  int8x16_t v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA70, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA80, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  int32x4_t v52 = vmovl_high_s16(v46);
  int8x16_t v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_1A28FCA50, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA90, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  int32x4_t v55 = vmovl_high_s16(v48);
  int8x16_t v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_1A28FCA40, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAA0, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  int8x16_t v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_1A28FCA30, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  int8x16_t v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9B0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAB0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  int8x16_t v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_1A28FCA20, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  int8x16_t v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9A0);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAC0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  int8x16_t v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_1A28FCA10, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  int8x16_t v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC990);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAD0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  int8x16_t v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_1A28FCA00, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  int8x16_t v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC980);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAE0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  int64x2_t v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_1A28FC9F0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  unint64_t v71 = v70.i64[0];
  long long v73 = (uint64_t **)(a2 + 104);
  char v72 = *(void **)(a2 + 104);
  if (!v72) {
    goto LABEL_12;
  }
  long long v74 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v75 = v72[4];
    BOOL v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0]) {
      uint64_t v77 = v72;
    }
    else {
      uint64_t v77 = v72 + 1;
    }
    if (v76) {
      long long v74 = (uint64_t **)v72;
    }
    char v72 = (void *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    int v161 = v74[6];
    a1[1] = (std::__shared_weak_count *)v161;
    if (v161) {
      atomic_fetch_add_explicit(v161 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    int64x2_t v164 = v70;
    uint64_t v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589668;
    uint64_t v79 = v78 + 1;
    long long v167 = *(_OWORD *)(a2 + 16);
    long long v168 = *(_OWORD *)(a2 + 32);
    {
      if (v162)
      {
        {
          if (v162)
          {
            {
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1EB318618 = 1;
            }
            ggl::DaVinci::LinearDepthPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            {
              ggl::DaVinci::pipelineDataLinearDepthPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              unk_1E9588D00 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1E9588A18 = (uint64_t)&ggl::DaVinci::pipelineDataLinearDepthPipelineDeviceStructs(void)::ref;
            unk_1E9588A20 = 2;
            {
              ggl::DaVinci::pipelineDataLinearDepthPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(void *)algn_1E9588D38 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1E9588D40 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1E9588D48 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              qword_1E9588D50 = (uint64_t)ggl::Tile::LinearDepth::reflection(void)::reflection;
              unk_1E9588D58 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1E9588A28 = (uint64_t)&ggl::DaVinci::pipelineDataLinearDepthPipelineConstantStructs(void)::ref;
            unk_1E9588A30 = xmmword_1A28FE1D0;
          }
        }
        ggl::DaVinci::LinearDepthPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::LinearDepthPipelineSetup::typedReflection(void)::ref;
        ggl::LinearDepthShader::typedReflection(v162);
        qword_1E9588A50 = (uint64_t)&ggl::LinearDepthShader::typedReflection(void)::ref;
        {
          ggl::DaVinci::pipelineStateLinearDepthPipelineAttributeStructBinding(void)::attr = 0;
          *(void *)algn_1E9589868 = 0;
          qword_1E9589870 = (uint64_t)"";
          dword_1E9589878 = 0;
          qword_1E9589880 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineAttributeBinding_0(void)::attr;
          unk_1E9589888 = 2;
        }
        qword_1E9588A58 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineAttributeStructBinding(void)::attr;
        unk_1E9588A60 = 1;
        qword_1E9588A68 = 0;
        unk_1E9588A70 = 0;
        {
          ggl::DaVinci::pipelineStateLinearDepthPipelineDeviceStructBinding(void)::ref = 0;
          unk_1E95894C0 = 0;
          qword_1E95894C8 = (uint64_t)"instanceTransform";
          dword_1E95894D0 = 2;
          qword_1E95894D8 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineDeviceInstanceTransformBinding(void)::reflection;
          unk_1E95894E0 = xmmword_1A28FC760;
          qword_1E95894F0 = 1;
          unk_1E95894F8 = "elevations";
          dword_1E9589500 = 2;
          qword_1E9589508 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineDeviceElevationsBinding(void)::reflection;
          unk_1E9589510 = 0;
        }
        qword_1E9588A78 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineDeviceStructBinding(void)::ref;
        unk_1E9588A80 = 2;
        {
          ggl::DaVinci::pipelineStateLinearDepthPipelineConstantStructBinding(void)::ref = 0;
          *(void *)algn_1E9589618 = 0;
          qword_1E9589620 = (uint64_t)"view";
          dword_1E9589628 = 3;
          qword_1E9589630 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantViewBinding(void)::reflection;
          unk_1E9589638 = xmmword_1A28FCEB0;
          qword_1E9589648 = 1;
          unk_1E9589650 = "transform";
          dword_1E9589658 = 3;
          qword_1E9589660 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantTransformBinding(void)::reflection;
          unk_1E9589668 = xmmword_1A28FCF70;
          qword_1E9589678 = 2;
          unk_1E9589680 = "shadow";
          dword_1E9589688 = 3;
          qword_1E9589690 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantShadowBinding(void)::reflection;
          unk_1E9589698 = xmmword_1A28FC950;
          qword_1E95896A8 = 3;
          unk_1E95896B0 = "positionScaleInfo";
          dword_1E95896B8 = 3;
          qword_1E95896C0 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantPositionScaleInfoBinding(void)::reflection;
          unk_1E95896C8 = xmmword_1A28FC960;
          qword_1E95896D8 = 4;
          unk_1E95896E0 = "linearDepth";
          dword_1E95896E8 = 3;
          qword_1E95896F0 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantLinearDepthBinding(void)::reflection;
          unk_1E95896F8 = xmmword_1A28FE180;
          qword_1E9589708 = 5;
          unk_1E9589710 = "tileClipping";
          dword_1E9589718 = 3;
          qword_1E9589720 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantTileClippingBinding(void)::reflection;
          unk_1E9589728 = 2;
        }
        qword_1E9588A88 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantStructBinding(void)::ref;
        unk_1E9588A90 = 6;
      }
    }
    int64x2_t v80 = v164;
    v80.i8[13] = a13;
    unint64_t v81 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v82 = *(std::__shared_weak_count **)(a2 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[14] = a14;
    *(_OWORD *)unint64_t v169 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v169[12] = *(_OWORD *)(a2 + 60);
    long long v83 = *(_OWORD *)(a2 + 76);
    char v84 = *(unsigned char *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::LinearDepthPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v81;
    v78[3].__shared_owners_ = (uint64_t)v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v167;
    *(_OWORD *)&v78[12].__shared_owners_ = v168;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v169[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v169;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v83;
    BYTE4(v78[5].__shared_owners_) = v84;
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int64x2_t v165 = v80;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      int64x2_t v80 = v165;
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v80;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v163;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    int8x16_t v85 = *(int8x16_t *)&v78[14].__shared_owners_;
    int8x16_t v86 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    int16x8_t v87 = vmovl_high_s8(v86);
    int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
    v89.i64[0] = v88.u32[0];
    v89.i64[1] = v88.u32[1];
    int8x16_t v90 = v89;
    int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v89.i64[0] = v92.u32[0];
    v89.i64[1] = v92.u32[1];
    int8x16_t v93 = v89;
    int32x4_t v94 = vmovl_high_s16(v87);
    int32x4_t v95 = vmovl_high_s16(v91);
    v89.i64[0] = v95.u32[2];
    v89.i64[1] = v95.u32[3];
    int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
    v89.i64[0] = v94.u32[0];
    v89.i64[1] = v94.u32[1];
    int8x16_t v97 = v89;
    v89.i64[0] = v95.u32[0];
    v89.i64[1] = v95.u32[1];
    int8x16_t v98 = v89;
    v89.i64[0] = v88.u32[2];
    v89.i64[1] = v88.u32[3];
    int8x16_t v99 = v89;
    v89.i64[0] = v92.u32[2];
    v89.i64[1] = v92.u32[3];
    int8x16_t v100 = v89;
    v89.i64[0] = v94.u32[2];
    v89.i64[1] = v94.u32[3];
    int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v89);
    int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v100);
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF561168;
    LOBYTE(v78[15].__vftable) = a24;
    BYTE1(v78[15].__vftable) = a25;
    BYTE2(v78[15].__vftable) = a26;
    BYTE3(v78[15].__vftable) = a27;
    WORD2(v78[15].__vftable) = a28;
    HIWORD(v78[15].__vftable) = a29;
    int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v97);
    int8x16_t v104 = vceqzq_s8(v85);
    int16x8_t v105 = vmovl_high_s8(v104);
    int32x4_t v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v89.i64[0] = v106.u32[0];
    v89.i64[1] = v106.u32[1];
    int8x16_t v107 = v89;
    int16x8_t v108 = vmovl_s8(*(int8x8_t *)v104.i8);
    int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v89.i64[0] = v109.u32[0];
    v89.i64[1] = v109.u32[1];
    int8x16_t v110 = v89;
    int32x4_t v111 = vmovl_high_s16(v105);
    v89.i64[0] = v111.u32[0];
    v89.i64[1] = v111.u32[1];
    int8x16_t v112 = v89;
    int32x4_t v113 = vmovl_high_s16(v108);
    v89.i64[0] = v113.u32[0];
    v89.i64[1] = v113.u32[1];
    int8x16_t v114 = v89;
    v89.i64[0] = v106.u32[2];
    v89.i64[1] = v106.u32[3];
    int8x16_t v115 = v89;
    v89.i64[0] = v109.u32[2];
    v89.i64[1] = v109.u32[3];
    int8x16_t v116 = v89;
    v89.i64[0] = v111.u32[2];
    v89.i64[1] = v111.u32[3];
    int8x16_t v117 = v89;
    v89.i64[0] = v113.u32[2];
    v89.i64[1] = v113.u32[3];
    int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v117);
    int8x16_t v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v107), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
    int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v110), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
    int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v112), v103);
    int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v114), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v98));
    int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v99));
    int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v116), v102);
    int8x16_t v125 = vorrq_s8(v118, v101);
    int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v96);
    int8x16_t v127 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    int16x8_t v128 = vmovl_s8(*(int8x8_t *)v127.i8);
    int32x4_t v129 = vmovl_high_s16(v128);
    v89.i64[0] = v129.i32[2];
    v89.i64[1] = v129.i32[3];
    int8x16_t v130 = v89;
    int16x8_t v131 = vmovl_high_s8(v127);
    int32x4_t v132 = vmovl_high_s16(v131);
    v89.i64[0] = v132.i32[2];
    v89.i64[1] = v132.i32[3];
    int8x16_t v133 = v89;
    int32x4_t v134 = vmovl_s16(*(int16x4_t *)v128.i8);
    v89.i64[0] = v134.i32[2];
    v89.i64[1] = v134.i32[3];
    int8x16_t v135 = v89;
    int32x4_t v136 = vmovl_s16(*(int16x4_t *)v131.i8);
    v89.i64[0] = v136.i32[2];
    v89.i64[1] = v136.i32[3];
    int8x16_t v137 = v89;
    v89.i64[0] = v129.i32[0];
    v89.i64[1] = v129.i32[1];
    int8x16_t v138 = v89;
    v89.i64[0] = v132.i32[0];
    v89.i64[1] = v132.i32[1];
    int8x16_t v139 = v89;
    v89.i64[0] = v134.i32[0];
    v89.i64[1] = v134.i32[1];
    int8x16_t v140 = v89;
    v89.i64[0] = v136.i32[0];
    v89.i64[1] = v136.i32[1];
    int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
    int8x16_t v142 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    int16x8_t v143 = vmovl_high_s8(v142);
    int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
    v89.i64[0] = v144.i32[0];
    v89.i64[1] = v144.i32[1];
    int8x16_t v145 = v89;
    int16x8_t v146 = vmovl_s8(*(int8x8_t *)v142.i8);
    int32x4_t v147 = vmovl_s16(*(int16x4_t *)v146.i8);
    v89.i64[0] = v147.i32[0];
    v89.i64[1] = v147.i32[1];
    int8x16_t v148 = v89;
    int32x4_t v149 = vmovl_high_s16(v143);
    v89.i64[0] = v149.i32[0];
    v89.i64[1] = v149.i32[1];
    int8x16_t v150 = v89;
    int32x4_t v151 = vmovl_high_s16(v146);
    v89.i64[0] = v151.i32[0];
    v89.i64[1] = v151.i32[1];
    int8x16_t v152 = v89;
    v89.i64[0] = v144.i32[2];
    v89.i64[1] = v144.i32[3];
    int8x16_t v153 = v89;
    v89.i64[0] = v147.i32[2];
    v89.i64[1] = v147.i32[3];
    int8x16_t v154 = v89;
    v89.i64[0] = v149.i32[2];
    v89.i64[1] = v149.i32[3];
    int8x16_t v155 = v89;
    v89.i64[0] = v151.i32[2];
    v89.i64[1] = v151.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v148), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140)), v120), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v145), v141), v119)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v152), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v138)), v122), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v150),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v139)),
                                                    v121))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v154), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v135)), v124), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v153), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v137)), v123)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v130)), v126), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v155),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v133)),
                                                    v125)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v79;
    a1[1] = v78;
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v156 = *v73;
    uint64_t v157 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v157 = (uint64_t **)v156;
          unint64_t v158 = v156[4];
          if (v71 >= v158) {
            break;
          }
          uint64_t v156 = *v157;
          long long v73 = v157;
          if (!*v157) {
            goto LABEL_27;
          }
        }
        if (v158 >= v71) {
          break;
        }
        uint64_t v156 = v157[1];
        if (!v156)
        {
          long long v73 = v157 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_27:
      int v159 = (uint64_t *)operator new(0x38uLL);
      v159[4] = v71;
      v159[5] = (uint64_t)v79;
      v159[6] = (uint64_t)v78;
      *int v159 = 0;
      v159[1] = 0;
      v159[2] = (uint64_t)v157;
      *long long v73 = v159;
      uint64_t v160 = **(void **)(a2 + 96);
      if (v160)
      {
        *(void *)(a2 + 96) = v160;
        int v159 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v159);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A1C3EF7C(_Unwind_Exception *a1)
{
  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  char v163 = a5 | a6;
  v31.i64[1] = (a5 | a6);
  *(__int32 *)((char *)&v31.i32[2] + 1) = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  int8x16_t v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9E0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  int8x16_t v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC6E0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  int8x16_t v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9D0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  int8x16_t v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9C0);
  int8x16_t v37 = vceqzq_s8(v31);
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  int32x4_t v39 = vmovl_high_s16(v38);
  int16x8_t v40 = vmovl_high_s8(v37);
  int32x4_t v41 = vmovl_high_s16(v40);
  int32x4_t v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA60, (int8x16_t)v32);
  int8x16_t v45 = vceqzq_s8((int8x16_t)v30);
  int16x8_t v46 = vmovl_high_s8(v45);
  int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  int8x16_t v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA70, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA80, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  int32x4_t v52 = vmovl_high_s16(v46);
  int8x16_t v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_1A28FCA50, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA90, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  int32x4_t v55 = vmovl_high_s16(v48);
  int8x16_t v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_1A28FCA40, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAA0, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  int8x16_t v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_1A28FCA30, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  int8x16_t v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9B0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAB0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  int8x16_t v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_1A28FCA20, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  int8x16_t v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9A0);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAC0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  int8x16_t v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_1A28FCA10, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  int8x16_t v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC990);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAD0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  int8x16_t v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_1A28FCA00, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  int8x16_t v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC980);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAE0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  int64x2_t v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_1A28FC9F0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  unint64_t v71 = v70.i64[0];
  long long v73 = (uint64_t **)(a2 + 104);
  char v72 = *(void **)(a2 + 104);
  if (!v72) {
    goto LABEL_12;
  }
  long long v74 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v75 = v72[4];
    BOOL v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0]) {
      uint64_t v77 = v72;
    }
    else {
      uint64_t v77 = v72 + 1;
    }
    if (v76) {
      long long v74 = (uint64_t **)v72;
    }
    char v72 = (void *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    int v161 = v74[6];
    a1[1] = (std::__shared_weak_count *)v161;
    if (v161) {
      atomic_fetch_add_explicit(v161 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    int64x2_t v164 = v70;
    uint64_t v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5896D8;
    uint64_t v79 = v78 + 1;
    long long v167 = *(_OWORD *)(a2 + 16);
    long long v168 = *(_OWORD *)(a2 + 32);
    {
      if (v162)
      {
        {
          if (v162)
          {
            {
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1EB318618 = 1;
            }
            ggl::DaVinci::GroundShadowMapPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            {
              ggl::DaVinci::pipelineDataGroundShadowMapPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              *(void *)algn_1E9588E38 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1E957F6E8 = (uint64_t)&ggl::DaVinci::pipelineDataGroundShadowMapPipelineDeviceStructs(void)::ref;
            unk_1E957F6F0 = 2;
            {
              ggl::DaVinci::pipelineDataGroundShadowMapPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1E9589420 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1E9589428 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1E9589430 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              qword_1E9589438 = (uint64_t)ggl::Tile::LinearDepth::reflection(void)::reflection;
              unk_1E9589440 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1E957F6F8 = (uint64_t)&ggl::DaVinci::pipelineDataGroundShadowMapPipelineConstantStructs(void)::ref;
            unk_1E957F700 = xmmword_1A28FE1D0;
          }
        }
        ggl::DaVinci::GroundShadowMapPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GroundShadowMapPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciGroundShadowMapShader::typedReflection(v162);
        qword_1E9588AA0 = (uint64_t)&ggl::DaVinciGroundShadowMapShader::typedReflection(void)::ref;
        {
          ggl::DaVinci::pipelineStateGroundShadowMapPipelineAttributeStructBinding(void)::attr = 0;
          unk_1E957F720 = 0;
          qword_1E957F728 = (uint64_t)"";
          dword_1E957F730 = 0;
          qword_1E957F738 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineAttributeBinding_0(void)::attr;
          unk_1E957F740 = 2;
        }
        qword_1E9588AA8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineAttributeStructBinding(void)::attr;
        unk_1E9588AB0 = 1;
        qword_1E9588AB8 = 0;
        unk_1E9588AC0 = 0;
        {
          ggl::DaVinci::pipelineStateGroundShadowMapPipelineDeviceStructBinding(void)::ref = 0;
          *(void *)algn_1E9589928 = 0;
          qword_1E9589930 = (uint64_t)"instanceTransform";
          dword_1E9589938 = 2;
          qword_1E9589940 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineDeviceInstanceTransformBinding(void)::reflection;
          unk_1E9589948 = xmmword_1A28FC760;
          qword_1E9589958 = 1;
          unk_1E9589960 = "elevations";
          dword_1E9589968 = 2;
          qword_1E9589970 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineDeviceElevationsBinding(void)::reflection;
          unk_1E9589978 = 0;
        }
        qword_1E9588AC8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineDeviceStructBinding(void)::ref;
        unk_1E9588AD0 = 2;
        {
          ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantStructBinding(void)::ref = 0;
          unk_1E95899C0 = 0;
          qword_1E95899C8 = (uint64_t)"view";
          dword_1E95899D0 = 3;
          qword_1E95899D8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantViewBinding(void)::reflection;
          unk_1E95899E0 = xmmword_1A28FCEB0;
          qword_1E95899F0 = 1;
          unk_1E95899F8 = "transform";
          dword_1E9589A00 = 3;
          qword_1E9589A08 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantTransformBinding(void)::reflection;
          *(_OWORD *)algn_1E9589A10 = xmmword_1A28FCF70;
          qword_1E9589A20 = 2;
          unk_1E9589A28 = "shadow";
          dword_1E9589A30 = 3;
          qword_1E9589A38 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantShadowBinding(void)::reflection;
          unk_1E9589A40 = xmmword_1A28FC950;
          qword_1E9589A50 = 3;
          unk_1E9589A58 = "positionScaleInfo";
          dword_1E9589A60 = 3;
          qword_1E9589A68 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantPositionScaleInfoBinding(void)::reflection;
          *(_OWORD *)algn_1E9589A70 = xmmword_1A28FC960;
          qword_1E9589A80 = 4;
          unk_1E9589A88 = "linearDepth";
          dword_1E9589A90 = 3;
          qword_1E9589A98 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantLinearDepthBinding(void)::reflection;
          unk_1E9589AA0 = xmmword_1A28FE180;
          qword_1E9589AB0 = 5;
          unk_1E9589AB8 = "tileClipping";
          dword_1E9589AC0 = 3;
          qword_1E9589AC8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantTileClippingBinding(void)::reflection;
          unk_1E9589AD0 = 2;
        }
        qword_1E9588AD8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantStructBinding(void)::ref;
        unk_1E9588AE0 = 6;
      }
    }
    int64x2_t v80 = v164;
    v80.i8[13] = a13;
    unint64_t v81 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v82 = *(std::__shared_weak_count **)(a2 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[14] = a14;
    *(_OWORD *)unint64_t v169 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v169[12] = *(_OWORD *)(a2 + 60);
    long long v83 = *(_OWORD *)(a2 + 76);
    char v84 = *(unsigned char *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::GroundShadowMapPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v81;
    v78[3].__shared_owners_ = (uint64_t)v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v167;
    *(_OWORD *)&v78[12].__shared_owners_ = v168;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v169[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v169;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v83;
    BYTE4(v78[5].__shared_owners_) = v84;
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int64x2_t v165 = v80;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      int64x2_t v80 = v165;
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v80;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v163;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    int8x16_t v85 = *(int8x16_t *)&v78[14].__shared_owners_;
    int8x16_t v86 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    int16x8_t v87 = vmovl_high_s8(v86);
    int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
    v89.i64[0] = v88.u32[0];
    v89.i64[1] = v88.u32[1];
    int8x16_t v90 = v89;
    int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v89.i64[0] = v92.u32[0];
    v89.i64[1] = v92.u32[1];
    int8x16_t v93 = v89;
    int32x4_t v94 = vmovl_high_s16(v87);
    int32x4_t v95 = vmovl_high_s16(v91);
    v89.i64[0] = v95.u32[2];
    v89.i64[1] = v95.u32[3];
    int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
    v89.i64[0] = v94.u32[0];
    v89.i64[1] = v94.u32[1];
    int8x16_t v97 = v89;
    v89.i64[0] = v95.u32[0];
    v89.i64[1] = v95.u32[1];
    int8x16_t v98 = v89;
    v89.i64[0] = v88.u32[2];
    v89.i64[1] = v88.u32[3];
    int8x16_t v99 = v89;
    v89.i64[0] = v92.u32[2];
    v89.i64[1] = v92.u32[3];
    int8x16_t v100 = v89;
    v89.i64[0] = v94.u32[2];
    v89.i64[1] = v94.u32[3];
    int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v89);
    int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v100);
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF561208;
    LOBYTE(v78[15].__vftable) = a24;
    BYTE1(v78[15].__vftable) = a25;
    BYTE2(v78[15].__vftable) = a26;
    BYTE3(v78[15].__vftable) = a27;
    WORD2(v78[15].__vftable) = a28;
    HIWORD(v78[15].__vftable) = a29;
    int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v97);
    int8x16_t v104 = vceqzq_s8(v85);
    int16x8_t v105 = vmovl_high_s8(v104);
    int32x4_t v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v89.i64[0] = v106.u32[0];
    v89.i64[1] = v106.u32[1];
    int8x16_t v107 = v89;
    int16x8_t v108 = vmovl_s8(*(int8x8_t *)v104.i8);
    int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v89.i64[0] = v109.u32[0];
    v89.i64[1] = v109.u32[1];
    int8x16_t v110 = v89;
    int32x4_t v111 = vmovl_high_s16(v105);
    v89.i64[0] = v111.u32[0];
    v89.i64[1] = v111.u32[1];
    int8x16_t v112 = v89;
    int32x4_t v113 = vmovl_high_s16(v108);
    v89.i64[0] = v113.u32[0];
    v89.i64[1] = v113.u32[1];
    int8x16_t v114 = v89;
    v89.i64[0] = v106.u32[2];
    v89.i64[1] = v106.u32[3];
    int8x16_t v115 = v89;
    v89.i64[0] = v109.u32[2];
    v89.i64[1] = v109.u32[3];
    int8x16_t v116 = v89;
    v89.i64[0] = v111.u32[2];
    v89.i64[1] = v111.u32[3];
    int8x16_t v117 = v89;
    v89.i64[0] = v113.u32[2];
    v89.i64[1] = v113.u32[3];
    int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v117);
    int8x16_t v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v107), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
    int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v110), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
    int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v112), v103);
    int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v114), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v98));
    int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v99));
    int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v116), v102);
    int8x16_t v125 = vorrq_s8(v118, v101);
    int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v96);
    int8x16_t v127 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    int16x8_t v128 = vmovl_s8(*(int8x8_t *)v127.i8);
    int32x4_t v129 = vmovl_high_s16(v128);
    v89.i64[0] = v129.i32[2];
    v89.i64[1] = v129.i32[3];
    int8x16_t v130 = v89;
    int16x8_t v131 = vmovl_high_s8(v127);
    int32x4_t v132 = vmovl_high_s16(v131);
    v89.i64[0] = v132.i32[2];
    v89.i64[1] = v132.i32[3];
    int8x16_t v133 = v89;
    int32x4_t v134 = vmovl_s16(*(int16x4_t *)v128.i8);
    v89.i64[0] = v134.i32[2];
    v89.i64[1] = v134.i32[3];
    int8x16_t v135 = v89;
    int32x4_t v136 = vmovl_s16(*(int16x4_t *)v131.i8);
    v89.i64[0] = v136.i32[2];
    v89.i64[1] = v136.i32[3];
    int8x16_t v137 = v89;
    v89.i64[0] = v129.i32[0];
    v89.i64[1] = v129.i32[1];
    int8x16_t v138 = v89;
    v89.i64[0] = v132.i32[0];
    v89.i64[1] = v132.i32[1];
    int8x16_t v139 = v89;
    v89.i64[0] = v134.i32[0];
    v89.i64[1] = v134.i32[1];
    int8x16_t v140 = v89;
    v89.i64[0] = v136.i32[0];
    v89.i64[1] = v136.i32[1];
    int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
    int8x16_t v142 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    int16x8_t v143 = vmovl_high_s8(v142);
    int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
    v89.i64[0] = v144.i32[0];
    v89.i64[1] = v144.i32[1];
    int8x16_t v145 = v89;
    int16x8_t v146 = vmovl_s8(*(int8x8_t *)v142.i8);
    int32x4_t v147 = vmovl_s16(*(int16x4_t *)v146.i8);
    v89.i64[0] = v147.i32[0];
    v89.i64[1] = v147.i32[1];
    int8x16_t v148 = v89;
    int32x4_t v149 = vmovl_high_s16(v143);
    v89.i64[0] = v149.i32[0];
    v89.i64[1] = v149.i32[1];
    int8x16_t v150 = v89;
    int32x4_t v151 = vmovl_high_s16(v146);
    v89.i64[0] = v151.i32[0];
    v89.i64[1] = v151.i32[1];
    int8x16_t v152 = v89;
    v89.i64[0] = v144.i32[2];
    v89.i64[1] = v144.i32[3];
    int8x16_t v153 = v89;
    v89.i64[0] = v147.i32[2];
    v89.i64[1] = v147.i32[3];
    int8x16_t v154 = v89;
    v89.i64[0] = v149.i32[2];
    v89.i64[1] = v149.i32[3];
    int8x16_t v155 = v89;
    v89.i64[0] = v151.i32[2];
    v89.i64[1] = v151.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v148), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140)), v120), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v145), v141), v119)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v152), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v138)), v122), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v150),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v139)),
                                                    v121))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v154), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v135)), v124), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v153), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v137)), v123)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v130)), v126), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v155),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v133)),
                                                    v125)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v79;
    a1[1] = v78;
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v156 = *v73;
    uint64_t v157 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v157 = (uint64_t **)v156;
          unint64_t v158 = v156[4];
          if (v71 >= v158) {
            break;
          }
          uint64_t v156 = *v157;
          long long v73 = v157;
          if (!*v157) {
            goto LABEL_27;
          }
        }
        if (v158 >= v71) {
          break;
        }
        uint64_t v156 = v157[1];
        if (!v156)
        {
          long long v73 = v157 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_27:
      int v159 = (uint64_t *)operator new(0x38uLL);
      v159[4] = v71;
      v159[5] = (uint64_t)v79;
      v159[6] = (uint64_t)v78;
      *int v159 = 0;
      v159[1] = 0;
      v159[2] = (uint64_t)v157;
      *long long v73 = v159;
      uint64_t v160 = **(void **)(a2 + 96);
      if (v160)
      {
        *(void *)(a2 + 96) = v160;
        int v159 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v159);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A1C3FEE0(_Unwind_Exception *a1)
{
  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundDepthPipelineState,std::shared_ptr<ggl::DaVinciGroundDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  char v163 = a5 | a6;
  v31.i64[1] = (a5 | a6);
  *(__int32 *)((char *)&v31.i32[2] + 1) = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  int8x16_t v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9E0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  int8x16_t v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC6E0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  int8x16_t v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9D0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  int8x16_t v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9C0);
  int8x16_t v37 = vceqzq_s8(v31);
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  int32x4_t v39 = vmovl_high_s16(v38);
  int16x8_t v40 = vmovl_high_s8(v37);
  int32x4_t v41 = vmovl_high_s16(v40);
  int32x4_t v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA60, (int8x16_t)v32);
  int8x16_t v45 = vceqzq_s8((int8x16_t)v30);
  int16x8_t v46 = vmovl_high_s8(v45);
  int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  int8x16_t v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA70, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA80, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  int32x4_t v52 = vmovl_high_s16(v46);
  int8x16_t v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_1A28FCA50, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA90, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  int32x4_t v55 = vmovl_high_s16(v48);
  int8x16_t v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_1A28FCA40, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAA0, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  int8x16_t v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_1A28FCA30, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  int8x16_t v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9B0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAB0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  int8x16_t v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_1A28FCA20, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  int8x16_t v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9A0);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAC0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  int8x16_t v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_1A28FCA10, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  int8x16_t v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC990);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAD0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  int8x16_t v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_1A28FCA00, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  int8x16_t v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC980);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAE0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  int64x2_t v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_1A28FC9F0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  unint64_t v71 = v70.i64[0];
  long long v73 = (uint64_t **)(a2 + 104);
  char v72 = *(void **)(a2 + 104);
  if (!v72) {
    goto LABEL_12;
  }
  long long v74 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v75 = v72[4];
    BOOL v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0]) {
      uint64_t v77 = v72;
    }
    else {
      uint64_t v77 = v72 + 1;
    }
    if (v76) {
      long long v74 = (uint64_t **)v72;
    }
    char v72 = (void *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    int v161 = v74[6];
    a1[1] = (std::__shared_weak_count *)v161;
    if (v161) {
      atomic_fetch_add_explicit(v161 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    int64x2_t v164 = v70;
    uint64_t v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589630;
    uint64_t v79 = v78 + 1;
    long long v167 = *(_OWORD *)(a2 + 16);
    long long v168 = *(_OWORD *)(a2 + 32);
    {
      if (v162)
      {
        {
          if (v162)
          {
            {
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1EB318618 = 1;
            }
            ggl::DaVinci::GroundDepthPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            {
              ggl::DaVinci::pipelineDataGroundDepthPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              unk_1E9588CE8 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1E9588988 = (uint64_t)&ggl::DaVinci::pipelineDataGroundDepthPipelineDeviceStructs(void)::ref;
            unk_1E9588990 = 2;
            {
              ggl::DaVinci::pipelineDataGroundDepthPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1E9588D10 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1E9588D18 = (uint64_t)ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              unk_1E9588D20 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1E9588998 = (uint64_t)&ggl::DaVinci::pipelineDataGroundDepthPipelineConstantStructs(void)::ref;
            unk_1E95889A0 = xmmword_1A28FCFA0;
          }
        }
        ggl::DaVinci::GroundDepthPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GroundDepthPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciGroundDepthShader::typedReflection(v162);
        qword_1E95889C0 = (uint64_t)&ggl::DaVinciGroundDepthShader::typedReflection(void)::ref;
        {
          ggl::DaVinci::pipelineStateGroundDepthPipelineAttributeStructBinding(void)::attr = 0;
          unk_1E9589830 = 0;
          qword_1E9589838 = (uint64_t)"";
          dword_1E9589840 = 0;
          qword_1E9589848 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineAttributeBinding_0(void)::attr;
          unk_1E9589850 = 2;
        }
        qword_1E95889C8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineAttributeStructBinding(void)::attr;
        unk_1E95889D0 = 1;
        qword_1E95889D8 = 0;
        unk_1E95889E0 = 0;
        {
          ggl::DaVinci::pipelineStateGroundDepthPipelineDeviceStructBinding(void)::ref = 0;
          *(void *)algn_1E9589458 = 0;
          qword_1E9589460 = (uint64_t)"instanceTransform";
          dword_1E9589468 = 2;
          qword_1E9589470 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineDeviceInstanceTransformBinding(void)::reflection;
          unk_1E9589478 = xmmword_1A28FC760;
          qword_1E9589488 = 1;
          unk_1E9589490 = "elevations";
          dword_1E9589498 = 2;
          qword_1E95894A0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineDeviceElevationsBinding(void)::reflection;
          unk_1E95894A8 = 0;
        }
        qword_1E95889E8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineDeviceStructBinding(void)::ref;
        unk_1E95889F0 = 2;
        {
          ggl::DaVinci::pipelineStateGroundDepthPipelineConstantStructBinding(void)::ref = 0;
          unk_1E9589550 = 0;
          qword_1E9589558 = (uint64_t)"view";
          dword_1E9589560 = 3;
          qword_1E9589568 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantViewBinding(void)::reflection;
          *(_OWORD *)algn_1E9589570 = xmmword_1A28FCEB0;
          qword_1E9589580 = 1;
          unk_1E9589588 = "transform";
          dword_1E9589590 = 3;
          qword_1E9589598 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantTransformBinding(void)::reflection;
          unk_1E95895A0 = xmmword_1A28FCF70;
          qword_1E95895B0 = 2;
          unk_1E95895B8 = "positionScaleInfo";
          dword_1E95895C0 = 3;
          qword_1E95895C8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantPositionScaleInfoBinding(void)::reflection;
          *(_OWORD *)algn_1E95895D0 = xmmword_1A28FC950;
          qword_1E95895E0 = 3;
          unk_1E95895E8 = "tileClipping";
          dword_1E95895F0 = 3;
          qword_1E95895F8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantTileClippingBinding(void)::reflection;
          unk_1E9589600 = 2;
        }
        qword_1E95889F8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantStructBinding(void)::ref;
        unk_1E9588A00 = 4;
      }
    }
    int64x2_t v80 = v164;
    v80.i8[13] = a13;
    unint64_t v81 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v82 = *(std::__shared_weak_count **)(a2 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[14] = a14;
    *(_OWORD *)unint64_t v169 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v169[12] = *(_OWORD *)(a2 + 60);
    long long v83 = *(_OWORD *)(a2 + 76);
    char v84 = *(unsigned char *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::GroundDepthPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v81;
    v78[3].__shared_owners_ = (uint64_t)v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v167;
    *(_OWORD *)&v78[12].__shared_owners_ = v168;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v169[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v169;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v83;
    BYTE4(v78[5].__shared_owners_) = v84;
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int64x2_t v165 = v80;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      int64x2_t v80 = v165;
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v80;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v163;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    int8x16_t v85 = *(int8x16_t *)&v78[14].__shared_owners_;
    int8x16_t v86 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    int16x8_t v87 = vmovl_high_s8(v86);
    int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
    v89.i64[0] = v88.u32[0];
    v89.i64[1] = v88.u32[1];
    int8x16_t v90 = v89;
    int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v89.i64[0] = v92.u32[0];
    v89.i64[1] = v92.u32[1];
    int8x16_t v93 = v89;
    int32x4_t v94 = vmovl_high_s16(v87);
    int32x4_t v95 = vmovl_high_s16(v91);
    v89.i64[0] = v95.u32[2];
    v89.i64[1] = v95.u32[3];
    int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
    v89.i64[0] = v94.u32[0];
    v89.i64[1] = v94.u32[1];
    int8x16_t v97 = v89;
    v89.i64[0] = v95.u32[0];
    v89.i64[1] = v95.u32[1];
    int8x16_t v98 = v89;
    v89.i64[0] = v88.u32[2];
    v89.i64[1] = v88.u32[3];
    int8x16_t v99 = v89;
    v89.i64[0] = v92.u32[2];
    v89.i64[1] = v92.u32[3];
    int8x16_t v100 = v89;
    v89.i64[0] = v94.u32[2];
    v89.i64[1] = v94.u32[3];
    int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v89);
    int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v100);
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF561118;
    LOBYTE(v78[15].__vftable) = a24;
    BYTE1(v78[15].__vftable) = a25;
    BYTE2(v78[15].__vftable) = a26;
    BYTE3(v78[15].__vftable) = a27;
    WORD2(v78[15].__vftable) = a28;
    HIWORD(v78[15].__vftable) = a29;
    int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v97);
    int8x16_t v104 = vceqzq_s8(v85);
    int16x8_t v105 = vmovl_high_s8(v104);
    int32x4_t v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v89.i64[0] = v106.u32[0];
    v89.i64[1] = v106.u32[1];
    int8x16_t v107 = v89;
    int16x8_t v108 = vmovl_s8(*(int8x8_t *)v104.i8);
    int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v89.i64[0] = v109.u32[0];
    v89.i64[1] = v109.u32[1];
    int8x16_t v110 = v89;
    int32x4_t v111 = vmovl_high_s16(v105);
    v89.i64[0] = v111.u32[0];
    v89.i64[1] = v111.u32[1];
    int8x16_t v112 = v89;
    int32x4_t v113 = vmovl_high_s16(v108);
    v89.i64[0] = v113.u32[0];
    v89.i64[1] = v113.u32[1];
    int8x16_t v114 = v89;
    v89.i64[0] = v106.u32[2];
    v89.i64[1] = v106.u32[3];
    int8x16_t v115 = v89;
    v89.i64[0] = v109.u32[2];
    v89.i64[1] = v109.u32[3];
    int8x16_t v116 = v89;
    v89.i64[0] = v111.u32[2];
    v89.i64[1] = v111.u32[3];
    int8x16_t v117 = v89;
    v89.i64[0] = v113.u32[2];
    v89.i64[1] = v113.u32[3];
    int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v117);
    int8x16_t v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v107), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
    int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v110), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
    int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v112), v103);
    int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v114), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v98));
    int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v99));
    int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v116), v102);
    int8x16_t v125 = vorrq_s8(v118, v101);
    int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v96);
    int8x16_t v127 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    int16x8_t v128 = vmovl_s8(*(int8x8_t *)v127.i8);
    int32x4_t v129 = vmovl_high_s16(v128);
    v89.i64[0] = v129.i32[2];
    v89.i64[1] = v129.i32[3];
    int8x16_t v130 = v89;
    int16x8_t v131 = vmovl_high_s8(v127);
    int32x4_t v132 = vmovl_high_s16(v131);
    v89.i64[0] = v132.i32[2];
    v89.i64[1] = v132.i32[3];
    int8x16_t v133 = v89;
    int32x4_t v134 = vmovl_s16(*(int16x4_t *)v128.i8);
    v89.i64[0] = v134.i32[2];
    v89.i64[1] = v134.i32[3];
    int8x16_t v135 = v89;
    int32x4_t v136 = vmovl_s16(*(int16x4_t *)v131.i8);
    v89.i64[0] = v136.i32[2];
    v89.i64[1] = v136.i32[3];
    int8x16_t v137 = v89;
    v89.i64[0] = v129.i32[0];
    v89.i64[1] = v129.i32[1];
    int8x16_t v138 = v89;
    v89.i64[0] = v132.i32[0];
    v89.i64[1] = v132.i32[1];
    int8x16_t v139 = v89;
    v89.i64[0] = v134.i32[0];
    v89.i64[1] = v134.i32[1];
    int8x16_t v140 = v89;
    v89.i64[0] = v136.i32[0];
    v89.i64[1] = v136.i32[1];
    int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
    int8x16_t v142 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    int16x8_t v143 = vmovl_high_s8(v142);
    int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
    v89.i64[0] = v144.i32[0];
    v89.i64[1] = v144.i32[1];
    int8x16_t v145 = v89;
    int16x8_t v146 = vmovl_s8(*(int8x8_t *)v142.i8);
    int32x4_t v147 = vmovl_s16(*(int16x4_t *)v146.i8);
    v89.i64[0] = v147.i32[0];
    v89.i64[1] = v147.i32[1];
    int8x16_t v148 = v89;
    int32x4_t v149 = vmovl_high_s16(v143);
    v89.i64[0] = v149.i32[0];
    v89.i64[1] = v149.i32[1];
    int8x16_t v150 = v89;
    int32x4_t v151 = vmovl_high_s16(v146);
    v89.i64[0] = v151.i32[0];
    v89.i64[1] = v151.i32[1];
    int8x16_t v152 = v89;
    v89.i64[0] = v144.i32[2];
    v89.i64[1] = v144.i32[3];
    int8x16_t v153 = v89;
    v89.i64[0] = v147.i32[2];
    v89.i64[1] = v147.i32[3];
    int8x16_t v154 = v89;
    v89.i64[0] = v149.i32[2];
    v89.i64[1] = v149.i32[3];
    int8x16_t v155 = v89;
    v89.i64[0] = v151.i32[2];
    v89.i64[1] = v151.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v148), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140)), v120), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v145), v141), v119)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v152), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v138)), v122), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v150),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v139)),
                                                    v121))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v154), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v135)), v124), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v153), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v137)), v123)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v130)), v126), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v155),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v133)),
                                                    v125)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v79;
    a1[1] = v78;
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v156 = *v73;
    uint64_t v157 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v157 = (uint64_t **)v156;
          unint64_t v158 = v156[4];
          if (v71 >= v158) {
            break;
          }
          uint64_t v156 = *v157;
          long long v73 = v157;
          if (!*v157) {
            goto LABEL_27;
          }
        }
        if (v158 >= v71) {
          break;
        }
        uint64_t v156 = v157[1];
        if (!v156)
        {
          long long v73 = v157 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_27:
      int v159 = (uint64_t *)operator new(0x38uLL);
      v159[4] = v71;
      v159[5] = (uint64_t)v79;
      v159[6] = (uint64_t)v78;
      *int v159 = 0;
      v159[1] = 0;
      v159[2] = (uint64_t)v157;
      *long long v73 = v159;
      uint64_t v160 = **(void **)(a2 + 96);
      if (v160)
      {
        *(void *)(a2 + 96) = v160;
        int v159 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v159);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A1C40DD8(_Unwind_Exception *a1)
{
  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci19RibbonPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C318;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci18DecalPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C2D0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci9StyleSSAOEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B670;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci5StyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B628;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci21ColorCorrectionFactorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B5E0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci20StyleGroundOcclusionEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B598;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleRouteLineMaskEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B550;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleEmissiveColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B508;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18GradientParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B4C0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci17LandCoverSettingsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF521590;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci16PlanarParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B478;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci14ElevatedStrokeEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B430;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci13MaterialStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B3E8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci11RibbonStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B3A0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci10StyleColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B358;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile8ClippingEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF521548;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile17PositionScaleInfoEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B310;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28>,ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F100;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27>,ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F0B8;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26>,ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F070;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25>,ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F028;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24>,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51EFE0;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23>,ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51EF98;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22>,ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51EF50;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21>,ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51EF08;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20>,ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51EEC0;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19>,ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5780A8;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18>,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578060;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17>,ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578018;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16>,ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577FD0;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15>,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577F88;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14>,ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577F40;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13>,ggl::DaVinci::DecalPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577EF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::DaVinci::RibbonPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577EB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,void ()(ggl::DaVinci::PackedLinearDepthPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577E68;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577E20;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,void ()(ggl::DaVinci::LinearDepthPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577DD8;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577D90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::DaVinci::GroundShadowMapPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577D48;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::DaVinci::GroundShadowMapPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577D00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::DaVinci::GroundDepthPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577CB8;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577C70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::DaVinci::GroundNonCompressedPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577C28;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577BE0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::DaVinci::GroundPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577B98;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::GroundPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577B50;
  a2[1] = v2;
  return result;
}

uint64_t md::MapEngineSignals::ThreadSafeSignal<unsigned long>::connect(uint64_t a1, void *a2)
{
  void v52[3] = *MEMORY[0x1E4F143B8];
  std::mutex::lock((std::mutex *)a1);
  uint64_t v5 = a2[3];
  if (v5)
  {
    if ((void *)v5 == a2)
    {
      int32x4_t v49 = v48;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v48);
      goto LABEL_6;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  int32x4_t v49 = (void *)v5;
LABEL_6:
  unint64_t v6 = *(void *)(a1 + 64) + 1;
  *(void *)(a1 + 64) = v6;
  unint64_t v7 = *(void *)(a1 + 80);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = v6;
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
    long long v9 = *(void ***)(*(void *)(a1 + 72) + 8 * v2);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                goto LABEL_87;
              }
            }
            else if ((v12 & (v7 - 1)) != v2)
            {
              goto LABEL_27;
            }
            long long v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              goto LABEL_87;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v2) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_27:
  long long v10 = operator new(0x38uLL);
  unint64_t v13 = (void *)(a1 + 88);
  *long long v10 = 0;
  v10[1] = v6;
  v10[2] = v6;
  v10[6] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 96) + 1);
  float v15 = *(float *)(a1 + 104);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 80);
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_64;
      }
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
      if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 80);
LABEL_64:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v6 >= v7) {
            unint64_t v2 = v6 % v7;
          }
          else {
            unint64_t v2 = v6;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        int32x4_t v47 = *(void **)(a1 + 72);
        *(void *)(a1 + 72) = 0;
        if (v47) {
          operator delete(v47);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 80) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    long long v20 = operator new(8 * prime);
    uint64_t v21 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *(void *)(a1 + 80) = prime;
    do
      *(void *)(*(void *)(a1 + 72) + 8 * v22++) = 0;
    while (prime != v22);
    int v23 = (void *)*v13;
    if (!*v13)
    {
LABEL_63:
      unint64_t v7 = prime;
      goto LABEL_64;
    }
    size_t v24 = v23[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)(a1 + 72) + 8 * v26) = v13;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          int v23 = i;
        }
        else
        {
          uint64_t v29 = *(void *)(a1 + 72);
          if (*(void *)(v29 + 8 * v28))
          {
            void *v23 = *i;
            uint64_t v30 = 8 * v28;
            void *i = **(void **)(*(void *)(a1 + 72) + v30);
            **(void **)(*(void *)(a1 + 72) + v30) = i;
          }
          else
          {
            *(void *)(v29 + 8 * v28) = v23;
            int v23 = i;
            size_t v26 = v28;
          }
        }
      }
      goto LABEL_63;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)(a1 + 72) + 8 * v24) = v13;
    int8x16_t v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_63;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v24)
      {
        uint64_t v37 = *(void *)(a1 + 72);
        if (!*(void *)(v37 + 8 * v36))
        {
          *(void *)(v37 + 8 * v36) = v23;
          goto LABEL_68;
        }
        void *v23 = *v34;
        uint64_t v35 = 8 * v36;
        *int8x16_t v34 = **(void **)(*(void *)(a1 + 72) + v35);
        **(void **)(*(void *)(a1 + 72) + v35) = v34;
        int8x16_t v34 = v23;
      }
      size_t v36 = v24;
LABEL_68:
      int v23 = v34;
      int8x16_t v34 = (void *)*v34;
      size_t v24 = v36;
      if (!v34) {
        goto LABEL_63;
      }
    }
  }
LABEL_77:
  uint64_t v38 = *(void *)(a1 + 72);
  int32x4_t v39 = *(void **)(v38 + 8 * v2);
  if (v39)
  {
    *long long v10 = *v39;
LABEL_85:
    *int32x4_t v39 = v10;
    goto LABEL_86;
  }
  *long long v10 = *v13;
  *unint64_t v13 = v10;
  *(void *)(v38 + 8 * v2) = v13;
  if (*v10)
  {
    unint64_t v40 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7) {
        v40 %= v7;
      }
    }
    else
    {
      v40 &= v7 - 1;
    }
    int32x4_t v39 = (void *)(*(void *)(a1 + 72) + 8 * v40);
    goto LABEL_85;
  }
LABEL_86:
  ++*(void *)(a1 + 96);
LABEL_87:
  uint64_t v41 = (uint64_t)v49;
  if (!v49) {
    goto LABEL_90;
  }
  if (v49 != v48)
  {
    uint64_t v41 = (*(uint64_t (**)(void))(*v49 + 16))();
LABEL_90:
    int8x16_t v51 = (void *)v41;
    goto LABEL_92;
  }
  int8x16_t v51 = v50;
  (*(void (**)(void *, void *))(v48[0] + 24))(v48, v50);
LABEL_92:
  int32x4_t v42 = v10 + 3;
  if (v10 + 3 != v50)
  {
    int32x4_t v43 = v51;
    int8x16_t v44 = (void *)v10[6];
    if (v51 == v50)
    {
      if (v44 == v42)
      {
        (*(void (**)(void *, void *))(v50[0] + 24))(v50, v52);
        (*(void (**)(void *))(*v51 + 32))(v51);
        int8x16_t v51 = 0;
        (*(void (**)(void, void *))(*(void *)v10[6] + 24))(v10[6], v50);
        (*(void (**)(void))(*(void *)v10[6] + 32))(v10[6]);
        v10[6] = 0;
        int8x16_t v51 = v50;
        (*(void (**)(void *, void *))(v52[0] + 24))(v52, v10 + 3);
        (*(void (**)(void *))(v52[0] + 32))(v52);
      }
      else
      {
        (*(void (**)(void *, void *))(v50[0] + 24))(v50, v10 + 3);
        (*(void (**)(void *))(*v51 + 32))(v51);
        int8x16_t v51 = (void *)v10[6];
      }
      v10[6] = v42;
    }
    else if (v44 == v42)
    {
      (*(void (**)(void *, void *))(v10[3] + 24))(v10 + 3, v50);
      (*(void (**)(void))(*(void *)v10[6] + 32))(v10[6]);
      v10[6] = v51;
      int8x16_t v51 = v50;
    }
    else
    {
      int8x16_t v51 = (void *)v10[6];
      v10[6] = v43;
    }
  }
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  uint64_t v45 = *(void *)(a1 + 64);
  if (v49 == v48)
  {
    (*(void (**)(void *))(v48[0] + 32))(v48);
  }
  else if (v49)
  {
    (*(void (**)(void))(*v49 + 40))();
  }
  std::mutex::unlock((std::mutex *)a1);
  return v45;
}

void sub_1A1C41CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = (void *)v10[6];
  if (v12 == v10 + 3)
  {
    (*(void (**)(void *))(v10[3] + 32))(v10 + 3);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  operator delete(v10);
  std::function<void ()(unsigned long)>::~function(&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0>,void ()(unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575948;
  a2[1] = v2;
  return result;
}

void ggl::TextureWithReverseAlphaShader::typedReflection(ggl::TextureWithReverseAlphaShader *this)
{
  {
    if (v1)
    {
      ggl::TextureWithReverseAlphaShader::typedReflection(void)::ref = (uint64_t)"TextureWithReverseAlphaShader";
      ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(v1);
      qword_1EB3232B8 = (uint64_t)&ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("TextureWithReverseAlphaShaderVertex");
      dword_1EB3232C0 = (int)v2;
      ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(v2);
      qword_1EB3232C8 = (uint64_t)&ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3232D0 = ggl::crc32::compute<38ul>("TextureWithReverseAlphaShaderFragment");
      qword_1EB3232D8 = (uint64_t)ggl::textureWithReverseAlphaShaderShaderConstants(void)::ref;
      unk_1EB3232E0 = 3;
      qword_1EB3232E8 = (uint64_t)ggl::textureWithReverseAlphaShaderShaderTextures(void)::ref;
      unk_1EB3232F0 = 1;
      qword_1EB3232F8 = (uint64_t)&ggl::textureWithReverseAlphaShaderShaderSamplers(void)::ref;
      unk_1EB323300 = 1;
    }
  }
}

void ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("TextureWithReverseAlphaShaderFragment");
    *(_DWORD *)algn_1EB32A5CC = 1;
    qword_1EB32A5D0 = (uint64_t)"TextureWithReverseAlphaShader";
    unk_1EB32A5D8 = 0;
    qword_1EB32A5E0 = 0;
    unk_1EB32A5E8 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A5F0 = 1;
    unk_1EB32A5F8 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A600 = 0;
    unk_1EB32A608 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A610 = 1;
    unk_1EB32A618 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A628 = 0;
    unk_1EB32A630 = 0;
    qword_1EB32A620 = 1;
  }
}

void ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("TextureWithReverseAlphaShaderVertex");
    *(_DWORD *)algn_1EB329D94 = 0;
    qword_1EB329D98 = (uint64_t)"TextureWithReverseAlphaShader";
    unk_1EB329DA0 = ggl::textureWithReverseAlphaShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329DA8 = 1;
    unk_1EB329DB0 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329DB8 = 2;
    unk_1EB329DC0 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329DC8 = 0;
    unk_1EB329DD0 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329DD8 = 0;
    unk_1EB329DE0 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329DF0 = 0;
    unk_1EB329DF8 = 0;
    qword_1EB329DE8 = 0;
  }
}

void ggl::PolygonAnimatableFillShader::typedReflection(ggl::PolygonAnimatableFillShader *this)
{
  {
    if (v1)
    {
      ggl::PolygonAnimatableFillShader::typedReflection(void)::ref = (uint64_t)"PolygonAnimatableFillShader";
      ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(v1);
      qword_1EB322E68 = (uint64_t)&ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<34ul>("PolygonAnimatableFillShaderVertex");
      dword_1EB322E70 = (int)v2;
      ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(v2);
      qword_1EB322E78 = (uint64_t)&ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322E80 = ggl::crc32::compute<36ul>("PolygonAnimatableFillShaderFragment");
      qword_1EB322E88 = (uint64_t)ggl::polygonAnimatableFillShaderShaderConstants(void)::ref;
      unk_1EB322E90 = 4;
      qword_1EB322E98 = (uint64_t)ggl::polygonAnimatableFillShaderShaderTextures(void)::ref;
      unk_1EB322EA0 = 2;
      qword_1EB322EA8 = (uint64_t)ggl::polygonAnimatableFillShaderShaderSamplers(void)::ref;
      unk_1EB322EB0 = 2;
    }
  }
}

void ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonAnimatableFillShaderFragment");
    *(_DWORD *)algn_1EB329BCC = 1;
    qword_1EB329BD0 = (uint64_t)"PolygonAnimatableFillShader";
    unk_1EB329BD8 = 0;
    qword_1EB329BE0 = 0;
    unk_1EB329BE8 = &ggl::polygonAnimatableFillShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329BF0 = 2;
    unk_1EB329BF8 = &ggl::polygonAnimatableFillShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329C00 = 0;
    unk_1EB329C08 = &ggl::polygonAnimatableFillShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329C10 = 2;
    unk_1EB329C18 = &ggl::polygonAnimatableFillShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329C28 = 0;
    unk_1EB329C30 = 0;
    qword_1EB329C20 = 2;
  }
}

void ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("PolygonAnimatableFillShaderVertex");
    *(_DWORD *)algn_1EB3292C4 = 0;
    qword_1EB3292C8 = (uint64_t)"PolygonAnimatableFillShader";
    unk_1EB3292D0 = ggl::polygonAnimatableFillShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3292D8 = 1;
    unk_1EB3292E0 = &ggl::polygonAnimatableFillShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3292E8 = 3;
    unk_1EB3292F0 = &ggl::polygonAnimatableFillShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3292F8 = 0;
    unk_1EB329300 = &ggl::polygonAnimatableFillShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329308 = 0;
    unk_1EB329310 = &ggl::polygonAnimatableFillShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329320 = 0;
    unk_1EB329328 = 0;
    qword_1EB329318 = 0;
  }
}

void ggl::StandardPostchainFGBlurShader::typedReflection(ggl::StandardPostchainFGBlurShader *this)
{
  {
    if (v1)
    {
      ggl::StandardPostchainFGBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainFGBlurShader";
      ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(v1);
      qword_1EB31C068 = (uint64_t)&ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("StandardPostchainFGBlurShaderVertex");
      dword_1EB31C070 = (int)v2;
      ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(v2);
      qword_1EB31C078 = (uint64_t)&ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31C080 = ggl::crc32::compute<38ul>("StandardPostchainFGBlurShaderFragment");
      qword_1EB31C088 = (uint64_t)ggl::standardPostchainFGBlurShaderShaderConstants(void)::ref;
      unk_1EB31C090 = 1;
      qword_1EB31C098 = (uint64_t)ggl::standardPostchainFGBlurShaderShaderTextures(void)::ref;
      unk_1EB31C0A0 = 2;
      qword_1EB31C0A8 = (uint64_t)ggl::standardPostchainFGBlurShaderShaderSamplers(void)::ref;
      unk_1EB31C0B0 = 2;
    }
  }
}

void ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("StandardPostchainFGBlurShaderFragment");
    *(_DWORD *)algn_1EB31CE1C = 1;
    qword_1EB31CE30 = 0;
    unk_1EB31CE38 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31CE20 = (uint64_t)"StandardPostchainFGBlurShader";
    unk_1EB31CE28 = 0;
    qword_1EB31CE40 = 1;
    unk_1EB31CE48 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31CE50 = 0;
    unk_1EB31CE58 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31CE60 = 2;
    unk_1EB31CE68 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CE78 = 0;
    unk_1EB31CE80 = 0;
    qword_1EB31CE70 = 2;
  }
}

void ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("StandardPostchainFGBlurShaderVertex");
    *(_DWORD *)algn_1EB31CAF4 = 0;
    qword_1EB31CAF8 = (uint64_t)"StandardPostchainFGBlurShader";
    unk_1EB31CB00 = ggl::standardPostchainFGBlurShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31CB08 = 1;
    unk_1EB31CB10 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31CB18 = 0;
    unk_1EB31CB20 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31CB28 = 0;
    unk_1EB31CB30 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31CB38 = 0;
    unk_1EB31CB40 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CB50 = 0;
    unk_1EB31CB58 = 0;
    qword_1EB31CB48 = 0;
  }
}

void ggl::StandardPostchainSSAOShader::typedReflection(ggl::StandardPostchainSSAOShader *this)
{
  {
    if (v1)
    {
      ggl::StandardPostchainSSAOShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOShader";
      ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(v1);
      qword_1EB31BEE8 = (uint64_t)&ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<34ul>("StandardPostchainSSAOShaderVertex");
      dword_1EB31BEF0 = (int)v2;
      ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(v2);
      qword_1EB31BEF8 = (uint64_t)&ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31BF00 = ggl::crc32::compute<36ul>("StandardPostchainSSAOShaderFragment");
      qword_1EB31BF08 = (uint64_t)ggl::standardPostchainSSAOShaderShaderConstants(void)::ref;
      unk_1EB31BF10 = 1;
      qword_1EB31BF18 = (uint64_t)ggl::standardPostchainSSAOShaderShaderTextures(void)::ref;
      unk_1EB31BF20 = 2;
      qword_1EB31BF28 = (uint64_t)ggl::standardPostchainSSAOShaderShaderSamplers(void)::ref;
      unk_1EB31BF30 = 2;
    }
  }
}

void ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("StandardPostchainSSAOShaderFragment");
    *(_DWORD *)algn_1EB31CB6C = 1;
    qword_1EB31CB80 = 0;
    unk_1EB31CB88 = &ggl::standardPostchainSSAOShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31CB70 = (uint64_t)"StandardPostchainSSAOShader";
    unk_1EB31CB78 = 0;
    qword_1EB31CB90 = 1;
    unk_1EB31CB98 = &ggl::standardPostchainSSAOShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31CBA0 = 0;
    unk_1EB31CBA8 = &ggl::standardPostchainSSAOShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31CBB0 = 2;
    unk_1EB31CBB8 = &ggl::standardPostchainSSAOShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CBC8 = 0;
    unk_1EB31CBD0 = 0;
    qword_1EB31CBC0 = 2;
  }
}

void ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("StandardPostchainSSAOShaderVertex");
    *(_DWORD *)algn_1EB31C934 = 0;
    qword_1EB31C938 = (uint64_t)"StandardPostchainSSAOShader";
    unk_1EB31C940 = ggl::standardPostchainSSAOShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31C948 = 1;
    unk_1EB31C950 = &ggl::standardPostchainSSAOShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31C958 = 0;
    unk_1EB31C960 = &ggl::standardPostchainSSAOShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31C968 = 0;
    unk_1EB31C970 = &ggl::standardPostchainSSAOShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31C978 = 0;
    unk_1EB31C980 = &ggl::standardPostchainSSAOShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31C990 = 0;
    unk_1EB31C998 = 0;
    qword_1EB31C988 = 0;
  }
}

void ggl::FlyoverRoadFillTexturedShader::typedReflection(ggl::FlyoverRoadFillTexturedShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverRoadFillTexturedShader::typedReflection(void)::ref = (uint64_t)"FlyoverRoadFillTexturedShader";
      ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(v1);
      qword_1EB3230E0 = (uint64_t)&ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("FlyoverRoadFillTexturedShaderVertex");
      dword_1EB3230E8 = (int)v2;
      ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(v2);
      qword_1EB3230F0 = (uint64_t)&ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3230F8 = ggl::crc32::compute<38ul>("FlyoverRoadFillTexturedShaderFragment");
      qword_1EB323100 = (uint64_t)ggl::flyoverRoadFillTexturedShaderShaderConstants(void)::ref;
      unk_1EB323108 = 4;
      qword_1EB323110 = (uint64_t)ggl::flyoverRoadFillTexturedShaderShaderTextures(void)::ref;
      unk_1EB323118 = 1;
      qword_1EB323120 = (uint64_t)&ggl::flyoverRoadFillTexturedShaderShaderSamplers(void)::ref;
      unk_1EB323128 = 1;
    }
  }
}

void ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("FlyoverRoadFillTexturedShaderFragment");
    *(_DWORD *)algn_1EB32A2A4 = 1;
    qword_1EB32A2A8 = (uint64_t)"FlyoverRoadFillTexturedShader";
    unk_1EB32A2B0 = 0;
    qword_1EB32A2B8 = 0;
    unk_1EB32A2C0 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A2C8 = 2;
    unk_1EB32A2D0 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A2D8 = 0;
    unk_1EB32A2E0 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A2E8 = 1;
    unk_1EB32A2F0 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A300 = 0;
    unk_1EB32A308 = 0;
    qword_1EB32A2F8 = 1;
  }
}

void ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("FlyoverRoadFillTexturedShaderVertex");
    *(_DWORD *)algn_1EB32998C = 0;
    qword_1EB329990 = (uint64_t)"FlyoverRoadFillTexturedShader";
    unk_1EB329998 = ggl::flyoverRoadFillTexturedShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3299A0 = 1;
    unk_1EB3299A8 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3299B0 = 4;
    unk_1EB3299B8 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3299C0 = 0;
    unk_1EB3299C8 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3299D0 = 0;
    unk_1EB3299D8 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3299E8 = 0;
    unk_1EB3299F0 = 0;
    qword_1EB3299E0 = 0;
  }
}

void ggl::StandardPostchainBGBlurShader::typedReflection(ggl::StandardPostchainBGBlurShader *this)
{
  {
    if (v1)
    {
      ggl::StandardPostchainBGBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainBGBlurShader";
      ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(v1);
      qword_1EB31C008 = (uint64_t)&ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("StandardPostchainBGBlurShaderVertex");
      dword_1EB31C010 = (int)v2;
      ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(v2);
      qword_1EB31C018 = (uint64_t)&ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31C020 = ggl::crc32::compute<38ul>("StandardPostchainBGBlurShaderFragment");
      qword_1EB31C028 = (uint64_t)ggl::standardPostchainBGBlurShaderShaderConstants(void)::ref;
      unk_1EB31C030 = 1;
      qword_1EB31C038 = (uint64_t)ggl::standardPostchainBGBlurShaderShaderTextures(void)::ref;
      unk_1EB31C040 = 1;
      qword_1EB31C048 = (uint64_t)ggl::standardPostchainBGBlurShaderShaderSamplers(void)::ref;
      unk_1EB31C050 = 1;
    }
  }
}

void ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("StandardPostchainBGBlurShaderFragment");
    *(_DWORD *)algn_1EB31CDAC = 1;
    qword_1EB31CDB0 = (uint64_t)"StandardPostchainBGBlurShader";
    unk_1EB31CDB8 = 0;
    qword_1EB31CDC0 = 0;
    unk_1EB31CDC8 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31CDD0 = 1;
    unk_1EB31CDD8 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31CDE0 = 0;
    unk_1EB31CDE8 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31CDF0 = 1;
    unk_1EB31CDF8 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CE08 = 0;
    unk_1EB31CE10 = 0;
    qword_1EB31CE00 = 1;
  }
}

void ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("StandardPostchainBGBlurShaderVertex");
    *(_DWORD *)algn_1EB31CA84 = 0;
    qword_1EB31CA88 = (uint64_t)"StandardPostchainBGBlurShader";
    unk_1EB31CA90 = ggl::standardPostchainBGBlurShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31CA98 = 1;
    unk_1EB31CAA0 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31CAA8 = 0;
    unk_1EB31CAB0 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31CAB8 = 0;
    unk_1EB31CAC0 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31CAC8 = 0;
    unk_1EB31CAD0 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31CAE0 = 0;
    unk_1EB31CAE8 = 0;
    qword_1EB31CAD8 = 0;
  }
}

void ggl::FoggedDiffuseBuildingShader::typedReflection(ggl::FoggedDiffuseBuildingShader *this)
{
  {
    if (v1)
    {
      ggl::FoggedDiffuseBuildingShader::typedReflection(void)::ref = (uint64_t)"FoggedDiffuseBuildingShader";
      ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(v1);
      qword_1EB322DB0 = (uint64_t)&ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<34ul>("FoggedDiffuseBuildingShaderVertex");
      dword_1EB322DB8 = (int)v2;
      ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(v2);
      qword_1EB322DC0 = (uint64_t)&ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322DC8 = ggl::crc32::compute<36ul>("FoggedDiffuseBuildingShaderFragment");
      qword_1EB322DD0 = (uint64_t)ggl::foggedDiffuseBuildingShaderShaderConstants(void)::ref;
      unk_1EB322DD8 = 7;
      qword_1EB322DE0 = (uint64_t)ggl::foggedDiffuseBuildingShaderShaderTextures(void)::ref;
      unk_1EB322DE8 = 1;
      qword_1EB322DF0 = (uint64_t)&ggl::foggedDiffuseBuildingShaderShaderSamplers(void)::ref;
      unk_1EB322DF8 = 1;
    }
  }
}

void ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("FoggedDiffuseBuildingShaderFragment");
    *(_DWORD *)algn_1EB329A04 = 1;
    qword_1EB329A08 = (uint64_t)"FoggedDiffuseBuildingShader";
    unk_1EB329A10 = 0;
    qword_1EB329A18 = 0;
    unk_1EB329A20 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329A28 = 3;
    unk_1EB329A30 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329A38 = 0;
    unk_1EB329A40 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329A48 = 1;
    unk_1EB329A50 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329A60 = 0;
    unk_1EB329A68 = 0;
    qword_1EB329A58 = 1;
  }
}

void ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("FoggedDiffuseBuildingShaderVertex");
    *(_DWORD *)algn_1EB3290FC = 0;
    qword_1EB329100 = (uint64_t)"FoggedDiffuseBuildingShader";
    unk_1EB329108 = ggl::foggedDiffuseBuildingShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329110 = 1;
    unk_1EB329118 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329120 = 6;
    unk_1EB329128 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329130 = 0;
    unk_1EB329138 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329140 = 0;
    unk_1EB329148 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329158 = 0;
    unk_1EB329160 = 0;
    qword_1EB329150 = 0;
  }
}

void ggl::TexturedDrapedSRGBBlendShader::typedReflection(ggl::TexturedDrapedSRGBBlendShader *this)
{
  {
    if (v1)
    {
      ggl::TexturedDrapedSRGBBlendShader::typedReflection(void)::ref = (uint64_t)"TexturedDrapedSRGBBlendShader";
      ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(v1);
      qword_1E95875F0 = (uint64_t)&ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("TexturedDrapedSRGBBlendShaderVertex");
      dword_1E95875F8 = (int)v2;
      ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(v2);
      qword_1E9587600 = (uint64_t)&ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref;
      dword_1E9587608 = ggl::crc32::compute<38ul>("TexturedDrapedSRGBBlendShaderFragment");
      qword_1E9587610 = (uint64_t)ggl::texturedDrapedSRGBBlendShaderShaderConstants(void)::ref;
      unk_1E9587618 = 5;
      qword_1E9587620 = (uint64_t)ggl::texturedDrapedSRGBBlendShaderShaderTextures(void)::ref;
      unk_1E9587628 = 1;
      qword_1E9587630 = (uint64_t)ggl::texturedDrapedSRGBBlendShaderShaderSamplers(void)::ref;
      unk_1E9587638 = 1;
    }
  }
}

void ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("TexturedDrapedSRGBBlendShaderFragment");
    *(_DWORD *)algn_1E958C444 = 1;
    qword_1E958C448 = (uint64_t)"TexturedDrapedSRGBBlendShader";
    unk_1E958C450 = 0;
    qword_1E958C458 = 0;
    unk_1E958C460 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1E958C468 = 2;
    unk_1E958C470 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1E958C478 = 0;
    unk_1E958C480 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1E958C488 = 1;
    unk_1E958C490 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1E958C4A0 = 0;
    unk_1E958C4A8 = 0;
    qword_1E958C498 = 1;
  }
}

void ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("TexturedDrapedSRGBBlendShaderVertex");
    *(_DWORD *)algn_1E958C3CC = 0;
    qword_1E958C3D0 = (uint64_t)"TexturedDrapedSRGBBlendShader";
    unk_1E958C3D8 = ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionAttributes(void)::ref;
    qword_1E958C3E0 = 1;
    unk_1E958C3E8 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1E958C3F0 = 3;
    unk_1E958C3F8 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1E958C400 = 0;
    unk_1E958C408 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1E958C410 = 0;
    unk_1E958C418 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1E958C428 = 0;
    unk_1E958C430 = 0;
    qword_1E958C420 = 0;
  }
}

void ggl::MaskingOverlayMaskingShader::typedReflection(ggl::MaskingOverlayMaskingShader *this)
{
  {
    if (v1)
    {
      ggl::MaskingOverlayMaskingShader::typedReflection(void)::ref = (uint64_t)"MaskingOverlayMaskingShader";
      ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(v1);
      qword_1EB317CA8 = (uint64_t)&ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<34ul>("MaskingOverlayMaskingShaderVertex");
      dword_1EB317CB0 = (int)v2;
      ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(v2);
      qword_1EB317CB8 = (uint64_t)&ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB317CC0 = ggl::crc32::compute<36ul>("MaskingOverlayMaskingShaderFragment");
      qword_1EB317CC8 = (uint64_t)ggl::maskingOverlayMaskingShaderShaderConstants(void)::ref;
      unk_1EB317CD0 = 3;
      qword_1EB317CD8 = (uint64_t)&ggl::maskingOverlayMaskingShaderShaderTextures(void)::ref;
      unk_1EB317CE0 = 0;
      qword_1EB317CE8 = (uint64_t)&ggl::maskingOverlayMaskingShaderShaderSamplers(void)::ref;
      unk_1EB317CF0 = 0;
    }
  }
}

void ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("MaskingOverlayMaskingShaderFragment");
    *(_DWORD *)algn_1EB31851C = 1;
    qword_1EB318520 = (uint64_t)"MaskingOverlayMaskingShader";
    unk_1EB318528 = 0;
    qword_1EB318530 = 0;
    unk_1EB318538 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB318540 = 1;
    unk_1EB318548 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB318550 = 0;
    unk_1EB318558 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB318560 = 0;
    unk_1EB318568 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318578 = 0;
    unk_1EB318580 = 0;
    qword_1EB318570 = 0;
  }
}

void ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("MaskingOverlayMaskingShaderVertex");
    *(_DWORD *)algn_1EB3184A4 = 0;
    qword_1EB3184A8 = (uint64_t)"MaskingOverlayMaskingShader";
    unk_1EB3184B0 = ggl::maskingOverlayMaskingShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3184B8 = 1;
    unk_1EB3184C0 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3184C8 = 2;
    unk_1EB3184D0 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3184D8 = 0;
    unk_1EB3184E0 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3184E8 = 0;
    unk_1EB3184F0 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318500 = 0;
    unk_1EB318508 = 0;
    qword_1EB3184F8 = 0;
  }
}

void ggl::Glyph3dLowPrecisionHaloShader::typedReflection(ggl::Glyph3dLowPrecisionHaloShader *this)
{
  {
    if (v1)
    {
      ggl::Glyph3dLowPrecisionHaloShader::typedReflection(void)::ref = (uint64_t)"Glyph3dLowPrecisionHaloShader";
      ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(v1);
      qword_1EB323140 = (uint64_t)&ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("Glyph3dLowPrecisionHaloShaderVertex");
      dword_1EB323148 = (int)v2;
      ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(v2);
      qword_1EB323150 = (uint64_t)&ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB323158 = ggl::crc32::compute<38ul>("Glyph3dLowPrecisionHaloShaderFragment");
      qword_1EB323160 = (uint64_t)ggl::glyph3dLowPrecisionHaloShaderShaderConstants(void)::ref;
      unk_1EB323168 = 6;
      qword_1EB323170 = (uint64_t)ggl::glyph3dLowPrecisionHaloShaderShaderTextures(void)::ref;
      unk_1EB323178 = 3;
      qword_1EB323180 = (uint64_t)ggl::glyph3dLowPrecisionHaloShaderShaderSamplers(void)::ref;
      unk_1EB323188 = 3;
    }
  }
}

void ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("Glyph3dLowPrecisionHaloShaderFragment");
    *(_DWORD *)algn_1EB32A404 = 1;
    qword_1EB32A408 = (uint64_t)"Glyph3dLowPrecisionHaloShader";
    unk_1EB32A410 = 0;
    qword_1EB32A418 = 0;
    unk_1EB32A420 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A428 = 2;
    unk_1EB32A430 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A438 = 0;
    unk_1EB32A440 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A448 = 1;
    unk_1EB32A450 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A460 = 0;
    unk_1EB32A468 = 0;
    qword_1EB32A458 = 1;
  }
}

void ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("Glyph3dLowPrecisionHaloShaderVertex");
    *(_DWORD *)algn_1EB329AEC = 0;
    qword_1EB329AF0 = (uint64_t)"Glyph3dLowPrecisionHaloShader";
    unk_1EB329AF8 = ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329B00 = 1;
    unk_1EB329B08 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329B10 = 4;
    unk_1EB329B18 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329B20 = 0;
    unk_1EB329B28 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329B30 = 2;
    unk_1EB329B38 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329B48 = 0;
    unk_1EB329B50 = 0;
    qword_1EB329B40 = 2;
  }
}

void ggl::VerticalVenue3DStrokeShader::typedReflection(ggl::VerticalVenue3DStrokeShader *this)
{
  {
    if (v1)
    {
      ggl::VerticalVenue3DStrokeShader::typedReflection(void)::ref = (uint64_t)"VerticalVenue3DStrokeShader";
      ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(v1);
      qword_1EB322F20 = (uint64_t)&ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<34ul>("VerticalVenue3DStrokeShaderVertex");
      dword_1EB322F28 = (int)v2;
      ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(v2);
      qword_1EB322F30 = (uint64_t)&ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322F38 = ggl::crc32::compute<36ul>("VerticalVenue3DStrokeShaderFragment");
      qword_1EB322F40 = (uint64_t)ggl::verticalVenue3DStrokeShaderShaderConstants(void)::ref;
      unk_1EB322F48 = 2;
      qword_1EB322F50 = (uint64_t)ggl::verticalVenue3DStrokeShaderShaderTextures(void)::ref;
      unk_1EB322F58 = 1;
      qword_1EB322F60 = (uint64_t)&ggl::verticalVenue3DStrokeShaderShaderSamplers(void)::ref;
      unk_1EB322F68 = 1;
    }
  }
}

void ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("VerticalVenue3DStrokeShaderFragment");
    *(_DWORD *)algn_1EB329E04 = 1;
    qword_1EB329E08 = (uint64_t)"VerticalVenue3DStrokeShader";
    unk_1EB329E10 = 0;
    qword_1EB329E18 = 0;
    unk_1EB329E20 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329E28 = 0;
    unk_1EB329E30 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329E38 = 0;
    unk_1EB329E40 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329E48 = 1;
    unk_1EB329E50 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329E60 = 0;
    unk_1EB329E68 = 0;
    qword_1EB329E58 = 1;
  }
}

void ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("VerticalVenue3DStrokeShaderVertex");
    *(_DWORD *)algn_1EB32965C = 0;
    qword_1EB329660 = (uint64_t)"VerticalVenue3DStrokeShader";
    unk_1EB329668 = ggl::verticalVenue3DStrokeShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329670 = 1;
    unk_1EB329678 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329680 = 2;
    unk_1EB329688 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329690 = 0;
    unk_1EB329698 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3296A0 = 0;
    unk_1EB3296A8 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3296B8 = 0;
    unk_1EB3296C0 = 0;
    qword_1EB3296B0 = 0;
  }
}

void ggl::PolygonOverlayAntialiasShader::typedReflection(ggl::PolygonOverlayAntialiasShader *this)
{
  {
    if (v1)
    {
      ggl::PolygonOverlayAntialiasShader::typedReflection(void)::ref = (uint64_t)"PolygonOverlayAntialiasShader";
      ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(v1);
      qword_1EB323258 = (uint64_t)&ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("PolygonOverlayAntialiasShaderVertex");
      dword_1EB323260 = (int)v2;
      ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(v2);
      qword_1EB323268 = (uint64_t)&ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB323270 = ggl::crc32::compute<38ul>("PolygonOverlayAntialiasShaderFragment");
      qword_1EB323278 = (uint64_t)ggl::polygonOverlayAntialiasShaderShaderConstants(void)::ref;
      unk_1EB323280 = 4;
      qword_1EB323288 = (uint64_t)ggl::polygonOverlayAntialiasShaderShaderTextures(void)::ref;
      unk_1EB323290 = 1;
      qword_1EB323298 = (uint64_t)&ggl::polygonOverlayAntialiasShaderShaderSamplers(void)::ref;
      unk_1EB3232A0 = 1;
    }
  }
}

void ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("PolygonOverlayAntialiasShaderFragment");
    *(_DWORD *)algn_1EB32A55C = 1;
    qword_1EB32A560 = (uint64_t)"PolygonOverlayAntialiasShader";
    unk_1EB32A568 = 0;
    qword_1EB32A570 = 0;
    unk_1EB32A578 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A580 = 2;
    unk_1EB32A588 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A590 = 0;
    unk_1EB32A598 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A5A0 = 1;
    unk_1EB32A5A8 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A5B8 = 0;
    unk_1EB32A5C0 = 0;
    qword_1EB32A5B0 = 1;
  }
}

void ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonOverlayAntialiasShaderVertex");
    *(_DWORD *)algn_1EB329CB4 = 0;
    qword_1EB329CB8 = (uint64_t)"PolygonOverlayAntialiasShader";
    unk_1EB329CC0 = ggl::polygonOverlayAntialiasShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329CC8 = 1;
    unk_1EB329CD0 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329CD8 = 3;
    unk_1EB329CE0 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329CE8 = 0;
    unk_1EB329CF0 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329CF8 = 0;
    unk_1EB329D00 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329D10 = 0;
    unk_1EB329D18 = 0;
    qword_1EB329D08 = 0;
  }
}

void ggl::HorizontalVenue3DStrokeShader::typedReflection(ggl::HorizontalVenue3DStrokeShader *this)
{
  {
    if (v1)
    {
      ggl::HorizontalVenue3DStrokeShader::typedReflection(void)::ref = (uint64_t)"HorizontalVenue3DStrokeShader";
      ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(v1);
      qword_1EB3231A0 = (uint64_t)&ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("HorizontalVenue3DStrokeShaderVertex");
      dword_1EB3231A8 = (int)v2;
      ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(v2);
      qword_1EB3231B0 = (uint64_t)&ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3231B8 = ggl::crc32::compute<38ul>("HorizontalVenue3DStrokeShaderFragment");
      qword_1EB3231C0 = (uint64_t)ggl::horizontalVenue3DStrokeShaderShaderConstants(void)::ref;
      unk_1EB3231C8 = 2;
      qword_1EB3231D0 = (uint64_t)ggl::horizontalVenue3DStrokeShaderShaderTextures(void)::ref;
      unk_1EB3231D8 = 1;
      qword_1EB3231E0 = (uint64_t)ggl::horizontalVenue3DStrokeShaderShaderSamplers(void)::ref;
      unk_1EB3231E8 = 1;
    }
  }
}

void ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("HorizontalVenue3DStrokeShaderFragment");
    *(_DWORD *)algn_1EB32A474 = 1;
    qword_1EB32A478 = (uint64_t)"HorizontalVenue3DStrokeShader";
    unk_1EB32A480 = 0;
    qword_1EB32A488 = 0;
    unk_1EB32A490 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A498 = 0;
    unk_1EB32A4A0 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A4A8 = 0;
    unk_1EB32A4B0 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A4B8 = 1;
    unk_1EB32A4C0 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A4D0 = 0;
    unk_1EB32A4D8 = 0;
    qword_1EB32A4C8 = 1;
  }
}

void ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("HorizontalVenue3DStrokeShaderVertex");
    *(_DWORD *)algn_1EB329B5C = 0;
    qword_1EB329B60 = (uint64_t)"HorizontalVenue3DStrokeShader";
    unk_1EB329B68 = ggl::horizontalVenue3DStrokeShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329B70 = 1;
    unk_1EB329B78 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329B80 = 2;
    unk_1EB329B88 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329B90 = 0;
    unk_1EB329B98 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329BA0 = 0;
    unk_1EB329BA8 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329BB8 = 0;
    unk_1EB329BC0 = 0;
    qword_1EB329BB0 = 0;
  }
}

void ggl::FoggedDiffuseLandmarkShader::typedReflection(ggl::FoggedDiffuseLandmarkShader *this)
{
  {
    if (v1)
    {
      ggl::FoggedDiffuseLandmarkShader::typedReflection(void)::ref = (uint64_t)"FoggedDiffuseLandmarkShader";
      ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(v1);
      qword_1EB322E10 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<34ul>("FoggedDiffuseLandmarkShaderVertex");
      dword_1EB322E18 = (int)v2;
      ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(v2);
      qword_1EB322E20 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322E28 = ggl::crc32::compute<36ul>("FoggedDiffuseLandmarkShaderFragment");
      qword_1EB322E30 = (uint64_t)ggl::foggedDiffuseLandmarkShaderShaderConstants(void)::ref;
      unk_1EB322E38 = 7;
      qword_1EB322E40 = (uint64_t)ggl::foggedDiffuseLandmarkShaderShaderTextures(void)::ref;
      unk_1EB322E48 = 1;
      qword_1EB322E50 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderShaderSamplers(void)::ref;
      unk_1EB322E58 = 1;
    }
  }
}

void ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("FoggedDiffuseLandmarkShaderFragment");
    *(_DWORD *)algn_1EB329A74 = 1;
    qword_1EB329A78 = (uint64_t)"FoggedDiffuseLandmarkShader";
    unk_1EB329A80 = 0;
    qword_1EB329A88 = 0;
    unk_1EB329A90 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329A98 = 3;
    unk_1EB329AA0 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329AA8 = 0;
    unk_1EB329AB0 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329AB8 = 1;
    unk_1EB329AC0 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329AD0 = 0;
    unk_1EB329AD8 = 0;
    qword_1EB329AC8 = 1;
  }
}

void ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("FoggedDiffuseLandmarkShaderVertex");
    *(_DWORD *)algn_1EB32916C = 0;
    qword_1EB329170 = (uint64_t)"FoggedDiffuseLandmarkShader";
    unk_1EB329178 = ggl::foggedDiffuseLandmarkShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329180 = 1;
    unk_1EB329188 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329190 = 6;
    unk_1EB329198 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3291A0 = 0;
    unk_1EB3291A8 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3291B0 = 0;
    unk_1EB3291B8 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3291C8 = 0;
    unk_1EB3291D0 = 0;
    qword_1EB3291C0 = 0;
  }
}

void ggl::PolygonAnimatableStrokeShader::typedReflection(ggl::PolygonAnimatableStrokeShader *this)
{
  {
    if (v1)
    {
      ggl::PolygonAnimatableStrokeShader::typedReflection(void)::ref = (uint64_t)"PolygonAnimatableStrokeShader";
      ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(v1);
      qword_1EB323200 = (uint64_t)&ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("PolygonAnimatableStrokeShaderVertex");
      dword_1EB323208 = (int)v2;
      ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(v2);
      qword_1EB323210 = (uint64_t)&ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB323218 = ggl::crc32::compute<38ul>("PolygonAnimatableStrokeShaderFragment");
      qword_1EB323220 = (uint64_t)ggl::polygonAnimatableStrokeShaderShaderConstants(void)::ref;
      unk_1EB323228 = 5;
      qword_1EB323230 = (uint64_t)ggl::polygonAnimatableStrokeShaderShaderTextures(void)::ref;
      unk_1EB323238 = 3;
      qword_1EB323240 = (uint64_t)ggl::polygonAnimatableStrokeShaderShaderSamplers(void)::ref;
      unk_1EB323248 = 3;
    }
  }
}

void ggl::BuildingPointyRoofDepthShader::typedReflection(ggl::BuildingPointyRoofDepthShader *this)
{
  {
    if (v1)
    {
      ggl::BuildingPointyRoofDepthShader::typedReflection(void)::ref = (uint64_t)"BuildingPointyRoofDepthShader";
      ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(v1);
      qword_1EB323088 = (uint64_t)&ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<36ul>("BuildingPointyRoofDepthShaderVertex");
      dword_1EB323090 = (int)v2;
      ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(v2);
      qword_1EB323098 = (uint64_t)&ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3230A0 = ggl::crc32::compute<38ul>("BuildingPointyRoofDepthShaderFragment");
      qword_1EB3230A8 = (uint64_t)ggl::buildingPointyRoofDepthShaderShaderConstants(void)::ref;
      unk_1EB3230B0 = 2;
      qword_1EB3230B8 = (uint64_t)&ggl::buildingPointyRoofDepthShaderShaderTextures(void)::ref;
      unk_1EB3230C0 = 0;
      qword_1EB3230C8 = (uint64_t)&ggl::buildingPointyRoofDepthShaderShaderSamplers(void)::ref;
      unk_1EB3230D0 = 0;
    }
  }
}

uint64_t ggl::crc32::compute<36ul>(char *a1)
{
  int v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  unsigned int v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  unsigned int v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  unsigned int v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  unsigned int v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  unsigned int v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  unsigned int v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  unsigned int v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  unsigned int v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  unsigned int v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  unsigned int v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  unsigned int v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  unsigned int v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  unsigned int v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  unsigned int v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  unsigned int v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  unsigned int v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  unsigned int v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  unsigned int v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  unsigned int v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  unsigned int v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  unsigned int v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  unsigned int v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  unsigned int v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  unsigned int v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  unsigned int v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  unsigned int v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  unsigned int v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  unsigned int v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  unsigned int v30 = ggl::crc32::crc32Table[v29 ^ a1[31]] ^ (v29 >> 8);
  unsigned int v31 = ggl::crc32::crc32Table[v30 ^ a1[32]] ^ (v30 >> 8);
  unsigned int v32 = ggl::crc32::crc32Table[v31 ^ a1[33]] ^ (v31 >> 8);
  return ggl::crc32::crc32Table[v32 ^ a1[34]] ^ ~(v32 >> 8);
}

void ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("PolygonAnimatableStrokeShaderFragment");
    *(_DWORD *)algn_1EB32A4E4 = 1;
    qword_1EB32A4E8 = (uint64_t)"PolygonAnimatableStrokeShader";
    unk_1EB32A4F0 = 0;
    qword_1EB32A4F8 = 0;
    unk_1EB32A500 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A508 = 3;
    unk_1EB32A510 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A518 = 0;
    unk_1EB32A520 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A528 = 3;
    unk_1EB32A530 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A540 = 0;
    unk_1EB32A548 = 0;
    qword_1EB32A538 = 3;
  }
}

void ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("BuildingPointyRoofDepthShaderFragment");
    *(_DWORD *)algn_1EB32A13C = 1;
    qword_1EB32A140 = (uint64_t)"BuildingPointyRoofDepthShader";
    unk_1EB32A148 = 0;
    qword_1EB32A150 = 0;
    unk_1EB32A158 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32A160 = 0;
    unk_1EB32A168 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32A170 = 0;
    unk_1EB32A178 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32A180 = 0;
    unk_1EB32A188 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32A198 = 0;
    unk_1EB32A1A0 = 0;
    qword_1EB32A190 = 0;
  }
}

void ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonAnimatableStrokeShaderVertex");
    *(_DWORD *)algn_1EB329C3C = 0;
    qword_1EB329C40 = (uint64_t)"PolygonAnimatableStrokeShader";
    unk_1EB329C48 = ggl::polygonAnimatableStrokeShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329C50 = 1;
    unk_1EB329C58 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329C60 = 3;
    unk_1EB329C68 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329C70 = 0;
    unk_1EB329C78 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329C80 = 0;
    unk_1EB329C88 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329C98 = 0;
    unk_1EB329CA0 = 0;
    qword_1EB329C90 = 0;
  }
}

void ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("BuildingPointyRoofDepthShaderVertex");
    *(_DWORD *)algn_1EB329914 = 0;
    qword_1EB329918 = (uint64_t)"BuildingPointyRoofDepthShader";
    unk_1EB329920 = ggl::buildingPointyRoofDepthShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329928 = 1;
    unk_1EB329930 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329938 = 2;
    unk_1EB329940 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329948 = 0;
    unk_1EB329950 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329958 = 0;
    unk_1EB329960 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329970 = 0;
    unk_1EB329978 = 0;
    qword_1EB329968 = 0;
  }
}

void *ReachabilityChangedObserver::ReachabilityChangedObserver(void *a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *a1 = &unk_1EF559A18;
  a1[1] = 0;
  unsigned int v6 = [ReachabilityCallbacker alloc];
  uint64_t v7 = a2[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a2)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    unsigned int v12 = (void *)v7;
    goto LABEL_6;
  }
  unsigned int v12 = v11;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v11);
LABEL_6:
  uint64_t v8 = [(ReachabilityCallbacker *)v6 initWithListener:v11 queue:v5];
  unsigned int v9 = (void *)a1[1];
  a1[1] = v8;

  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }

  return a1;
}

void sub_1A1C448E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v16)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  *(void *)uint64_t v13 = v15;

  _Unwind_Resume(a1);
}

void sub_1A1C44B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1C457C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, void *a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  size_t v36 = *(void **)(v34 - 144);
  if (v36) {
    operator delete(v36);
  }

  _Unwind_Resume(a1);
}

char *geo::linear_map<gdc::TypeInfo,std::shared_ptr<void>,std::equal_to<gdc::TypeInfo>,std::allocator<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>,std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>>::operator[](uint64_t a1, void *a2)
{
  unsigned int v4 = *(char **)a1;
  unsigned int v3 = *(char **)(a1 + 8);
  id v5 = *(char **)a1;
  if (*(char **)a1 != v3)
  {
    id v5 = *(char **)a1;
    while (*a2 != *(void *)v5)
    {
      v5 += 40;
      if (v5 == v3) {
        goto LABEL_7;
      }
    }
  }
  if (v5 == v3)
  {
LABEL_7:
    long long v10 = *(_OWORD *)a2;
    uint64_t v6 = a2[2];
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = v6;
    if (v4 != v3)
    {
      while ((void)v10 != *(void *)v4)
      {
        v4 += 40;
        if (v4 == v3) {
          goto LABEL_12;
        }
      }
    }
    if (v4 == v3)
    {
LABEL_12:
      if ((unint64_t)v3 >= *(void *)(a1 + 16))
      {
        uint64_t v8 = std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>::__push_back_slow_path<std::pair<gdc::TypeInfo,std::shared_ptr<void>> const&>((char **)a1, (uint64_t)&v10);
        *(void *)(a1 + 8) = v8;
        unsigned int v4 = v8 - 40;
      }
      else
      {
        uint64_t v7 = a2[2];
        *(_OWORD *)unsigned int v3 = *(_OWORD *)a2;
        *((void *)v3 + 3) = 0;
        *((void *)v3 + 4) = 0;
        *((void *)v3 + 2) = v7;
        *(void *)(a1 + 8) = v3 + 40;
        unsigned int v4 = v3;
      }
    }
    id v5 = v4;
  }
  return v5 + 24;
}

void sub_1A1C45AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

char *std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>::__push_back_slow_path<std::pair<gdc::TypeInfo,std::shared_ptr<void>> const&>(char **a1, uint64_t a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - v2) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - v2) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 3) >= 0x333333333333333) {
    unint64_t v5 = 0x666666666666666;
  }
  if (v5 > 0x666666666666666) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v8 = 40 * v5;
  unsigned int v9 = (char *)operator new(40 * v5);
  long long v10 = &v9[40 * v4];
  *(_OWORD *)long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 24);
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  *((void *)v10 + 3) = v11;
  uint64_t v12 = *(void *)(a2 + 32);
  *((void *)v10 + 4) = v12;
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    unsigned int v2 = *a1;
    unsigned int v3 = a1[1];
  }
  uint64_t v13 = &v9[v8];
  unsigned int v14 = v10 + 40;
  if (v3 == v2)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    do
    {
      long long v15 = *(_OWORD *)(v3 - 40);
      *((void *)v10 - 3) = *((void *)v3 - 3);
      *(_OWORD *)(v10 - 40) = v15;
      *((_OWORD *)v10 - 1) = *((_OWORD *)v3 - 1);
      v10 -= 40;
      *((void *)v3 - 2) = 0;
      *((void *)v3 - 1) = 0;
      v3 -= 40;
    }
    while (v3 != v2);
    unsigned int v2 = *a1;
    uint64_t v16 = a1[1];
    *a1 = v10;
    a1[1] = v14;
    for (a1[2] = v13; v16 != v2; v16 -= 40)
    {
      unsigned int v17 = (std::__shared_weak_count *)*((void *)v16 - 1);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v14;
}

void std::vector<ggl::PixelFormat>::__insert_with_size[abi:nn180100]<std::__wrap_iter<ggl::PixelFormat const*>,std::__wrap_iter<ggl::PixelFormat const*>>(char **a1, unsigned char *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = a5 - 1;
  if (a5 < 1) {
    return;
  }
  uint64_t v7 = __src;
  unsigned int v9 = a1;
  unint64_t v11 = (unint64_t)*a1;
  unint64_t v10 = (unint64_t)a1[1];
  uint64_t v12 = a2 - *a1;
  uint64_t v13 = v12 >> 2;
  unsigned int v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
  long long v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v10] >> 2)
  {
    unint64_t v16 = a5 + ((uint64_t)(v10 - v11) >> 2);
    if (v16 >> 62) {
      abort();
    }
    uint64_t v17 = (uint64_t)&v15[-v11];
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v19 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v20 = v18;
      unsigned int v21 = operator new(4 * v18);
      unint64_t v18 = v20;
      unsigned int v14 = (char *)v19;
      uint64_t v13 = v12 >> 2;
      unsigned int v9 = a1;
    }
    else
    {
      unsigned int v21 = 0;
    }
    int16x8_t v46 = &v21[4 * v13];
    int32x4_t v47 = &v46[4 * a5];
    int16x8_t v48 = v46;
    if ((v5 & 0x3FFFFFFFFFFFFFFFuLL) >= 7)
    {
      int16x8_t v48 = &v21[4 * v13];
      if ((unint64_t)(&v21[v12 & 0xFFFFFFFFFFFFFFFCLL] - v7) >= 0x20)
      {
        uint64_t v49 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
        int16x8_t v48 = &v46[v50];
        int8x16_t v51 = (long long *)(v7 + 16);
        int32x4_t v52 = &v21[4 * v13 + 16];
        uint64_t v53 = v49 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v54 = *v51;
          *(v52 - 1) = *(v51 - 1);
          _OWORD *v52 = v54;
          v51 += 2;
          v52 += 2;
          v53 -= 8;
        }
        while (v53);
        if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_44:
          if ((unsigned char *)v11 != a2)
          {
            if ((unint64_t)(v12 - 4) >= 0x3C)
            {
              int8x16_t v56 = v14;
              if ((v12 & 0xFFFFFFFFFFFFFFFCLL) + v11 - (unint64_t)&v21[v12 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
              {
                unint64_t v57 = ((unint64_t)(v12 - 4) >> 2) + 1;
                int8x16_t v56 = &v14[-4 * (v57 & 0x7FFFFFFFFFFFFFF8)];
                uint64_t v58 = 4 * v13 - 16;
                int8x16_t v59 = (long long *)(v11 + v58);
                int8x16_t v60 = &v21[v58];
                uint64_t v61 = v57 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v62 = *v59;
                  *(v60 - 1) = *(v59 - 1);
                  *int8x16_t v60 = v62;
                  v59 -= 2;
                  v60 -= 2;
                  v61 -= 8;
                }
                while (v61);
                v46 -= 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
                if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_52;
                }
              }
            }
            else
            {
              int8x16_t v56 = v14;
            }
            do
            {
              int v63 = *((_DWORD *)v56 - 1);
              v56 -= 4;
              *((_DWORD *)v46 - 1) = v63;
              v46 -= 4;
            }
            while (v56 != (char *)v11);
          }
LABEL_52:
          int8x16_t v64 = &v21[4 * v18];
          size_t v65 = v10 - (void)v14;
          if (v65) {
            memmove(v47, v14, v65);
          }
          *unsigned int v9 = v46;
          v9[1] = &v47[v65];
          v9[2] = v64;
          if (v11)
          {
            operator delete((void *)v11);
          }
          return;
        }
        v7 += v50;
      }
    }
    do
    {
      int v55 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)int16x8_t v48 = v55;
      v48 += 4;
    }
    while (v48 != v47);
    goto LABEL_44;
  }
  uint64_t v22 = v10 - (void)v14;
  uint64_t v23 = (uint64_t)(v10 - (void)v14) >> 2;
  if (v23 >= a5)
  {
    unsigned int v24 = &__src[4 * a5];
    unint64_t v26 = (unint64_t)a1[1];
LABEL_18:
    unsigned int v27 = &v14[4 * a5];
    size_t v28 = v26 - (void)v27;
    uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 2;
    unsigned int v30 = (int *)(v26 - 4 * a5);
    unsigned int v31 = (char *)v26;
    if ((unint64_t)v30 < v10)
    {
      unint64_t v32 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + v28;
      uint64_t v33 = (char *)(v32 + v11);
      unint64_t v34 = v32 + v11 + 4;
      if (v10 > v34) {
        unint64_t v34 = v10;
      }
      unint64_t v35 = v34 + ~v11 - v32;
      unint64_t v36 = v26 - (void)v33;
      BOOL v37 = v35 >= 0x2C && v36 > 0x1F;
      unsigned int v31 = (char *)v26;
      if (!v37) {
        goto LABEL_63;
      }
      uint64_t v38 = (v35 >> 2) + 1;
      uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v30 = (int *)((char *)v30 + v39);
      unint64_t v40 = (_OWORD *)(v26 + 16);
      uint64_t v41 = (long long *)(4 * v29 + 4 * v13 + v11 + 16);
      uint64_t v42 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *unint64_t v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 8;
      }
      while (v42);
      unsigned int v31 = (char *)(v26 + v39);
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_63:
        do
        {
          int v44 = *v30++;
          *(_DWORD *)unsigned int v31 = v44;
          v31 += 4;
        }
        while ((unint64_t)v30 < v10);
      }
    }
    v9[1] = v31;
    if ((char *)v26 != v27)
    {
      uint64_t v45 = v14;
      memmove((void *)(v26 - 4 * v29), v14, v28);
      unsigned int v14 = v45;
    }
    if (v24 != v7)
    {
      memmove(v14, v7, v24 - v7);
    }
    return;
  }
  unsigned int v24 = &__src[4 * v23];
  int64_t v25 = a4 - v24;
  if (a4 != v24)
  {
    unint64_t v67 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
    memmove(a1[1], &__src[4 * v23], a4 - v24);
    uint64_t v13 = v12 >> 2;
    unsigned int v14 = (char *)v67;
  }
  unint64_t v26 = v10 + v25;
  v9[1] = (char *)(v10 + v25);
  if (v22 >= 1) {
    goto LABEL_18;
  }
}

void ggl::MetalRenderer::enableEnhancedCommandBufferErrors(ggl::MetalRenderer *this, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoGLDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
  }
  unint64_t v4 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "false";
    if (a2) {
      uint64_t v5 = "true";
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Set EnhancedCommandBufferErrors: %s", (uint8_t *)&v6, 0xCu);
  }

  *((unsigned char *)this + 416) = a2;
}

void ggl::MetalRenderer::enableCommandQueueResetOnError(ggl::MetalRenderer *this, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoGLDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
  }
  unint64_t v4 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "false";
    if (a2) {
      uint64_t v5 = "true";
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Set CommandQueueResetOnError: %s", (uint8_t *)&v6, 0xCu);
  }

  *((unsigned char *)this + 424) = a2;
}

void ggl::MetalRenderer::setCommandQueueResetAttempts(ggl::MetalRenderer *this, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoGLDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
  }
  unint64_t v4 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Set CommandQueueResetAttempts: %d", (uint8_t *)v5, 8u);
  }

  *((_DWORD *)this + 107) = a2;
}

void ggl::MetalRenderer::enablePerformanceHUD(ggl::MetalRenderer *this, int a2)
{
  if (*((unsigned __int8 *)this + 40) != a2)
  {
    *((unsigned char *)this + 40) = a2;
    unsigned int v2 = (uint64_t *)*((void *)this + 18);
    if (a2)
    {
      if (!v2) {
        operator new();
      }
      if (!*v2)
      {
        unsigned int v9 = (const ggl::CommonLibrary *)v2[2];
        unint64_t v10 = operator new(0xB0uLL);
        v10[1] = 0;
        v10[2] = 0;
        *unint64_t v10 = &unk_1EF5836D0;
        ggl::DebugConsole::DebugConsole((ggl::DebugConsole *)(v10 + 3), v9);
      }
      uint64_t v3 = *v2;
      unint64_t v4 = (std::__shared_weak_count *)v2[1];
      if (v4)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)&long long v11 = v3;
        *((void *)&v11 + 1) = v4;
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        ggl::Renderer::addDebugRenderer((uint64_t)this, &v11);
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      else
      {
        long long v11 = (unint64_t)v3;
        ggl::Renderer::addDebugRenderer((uint64_t)this, &v11);
      }
    }
    else
    {
      if (!*v2)
      {
        uint64_t v7 = (const ggl::CommonLibrary *)v2[2];
        uint64_t v8 = operator new(0xB0uLL);
        v8[1] = 0;
        v8[2] = 0;
        void *v8 = &unk_1EF5836D0;
        ggl::DebugConsole::DebugConsole((ggl::DebugConsole *)(v8 + 3), v7);
      }
      uint64_t v5 = *v2;
      uint64_t v6 = (std::__shared_weak_count *)v2[1];
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        ggl::Renderer::removeDebugRenderer((uint64_t)this, v5);
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      else
      {
        ggl::Renderer::removeDebugRenderer((uint64_t)this, v5);
      }
    }
  }
}

void ggl::MetalDevice::createRenderer()
{
}

void sub_1A1C47224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, atomic_ullong *a10, atomic_ullong *a11, std::__shared_weak_count *a12, ggl::Renderer *a13, std::__shared_weak_count *a14)
{
  if (!atomic_fetch_add(a10, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  if (!atomic_fetch_add(a11, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v14 + 184);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  unint64_t v18 = *(ggl::ClearCache **)(v14 + 168);
  *(void *)(v14 + 168) = 0;
  if (v18)
  {
    ggl::ClearCache::~ClearCache(v18);
    MEMORY[0x1A6239270]();
  }
  unint64_t v19 = *(std::__shared_weak_count **)(v14 + 160);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = *(std::__shared_weak_count **)(v14 + 144);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = *(void *)(v14 + 112);
  if (v21)
  {
    uint64_t v22 = *(void *)(v14 + 120);
    uint64_t v23 = *(void **)(v14 + 112);
    if (v22 != v21)
    {
      uint64_t v24 = *(void *)(v14 + 120);
      do
      {
        unint64_t v26 = *(void **)(v24 - 24);
        v24 -= 24;
        int64_t v25 = v26;
        if (v26)
        {
          *(void *)(v22 - 16) = v25;
          operator delete(v25);
        }
        uint64_t v22 = v24;
      }
      while (v24 != v21);
      uint64_t v23 = *(void **)(v14 + 112);
    }
    *(void *)(v14 + 120) = v21;
    operator delete(v23);
  }
  unsigned int v27 = *(void **)(v14 + 88);
  if (v27)
  {
    *(void *)(v14 + 96) = v27;
    operator delete(v27);
  }

  size_t v28 = *(ggl::MetalDeviceContextPass **)(v14 + 48);
  *(void *)(v14 + 48) = 0;
  if (v28)
  {
    ggl::MetalDeviceContextPass::~MetalDeviceContextPass(v28);
    MEMORY[0x1A6239270]();
  }
  uint64_t v29 = *(id **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
  if (v29)
  {
    ggl::MetalDeviceContextFrame::~MetalDeviceContextFrame(v29);
    MEMORY[0x1A6239270]();
  }
  unsigned int v30 = *(void **)(v14 + 32);
  *(void *)(v14 + 32) = 0;
  if (v30) {
    std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](v30);
  }

  unsigned int v31 = *(ggl::MetalBindingManager **)(v14 + 8);
  *(void *)(v14 + 8) = 0;
  if (v31)
  {
    ggl::MetalBindingManager::~MetalBindingManager(v31);
    MEMORY[0x1A6239270]();
  }
  if (a12 && !atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  MEMORY[0x1A6239270](v14, 0x10B1C40727A76F6);
  uint64_t v32 = *((void *)a13 + 54);
  *((void *)a13 + 54) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *((void *)a13 + 18);
  *((void *)a13 + 18) = 0;
  if (v33)
  {
    unint64_t v34 = *(std::__shared_weak_count **)(v33 + 8);
    if (v34)
    {
      if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    MEMORY[0x1A6239270](v33, 0x1060C4055DDAB7ALL);
  }
  ggl::Renderer::~Renderer(a13);
  MEMORY[0x1A6239270]();
  _Unwind_Resume(a1);
}

void ggl::Renderer::Renderer(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)a1 = &unk_1EF561738;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 1065353216;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 80) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 88) = 0;
  uint64_t v6 = a4[1];
  *(void *)(a1 + 96) = *a4;
  *(void *)(a1 + 104) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1A1C47D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  unint64_t v18 = v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A1C47EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1C47F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1C47F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

md::LabelDedupingGroup *_ZNSt3__111make_sharedB8nn180100IN2md23NamedLabelDedupingGroupEJEvEENS_10shared_ptrIT_EEDpOT0_(md::LabelDedupingGroup **a1)
{
  unsigned int v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unsigned int v2 = &unk_1EF5817F8;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  BOOL result = md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)(v2 + 24));
  *((void *)v2 + 3) = &unk_1EF543938;
  *a1 = result;
  a1[1] = (md::LabelDedupingGroup *)v2;
  return result;
}

void sub_1A1C48044(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::MapNavLabeler::MapNavLabeler(md::MapNavLabeler *this, md::LabelManager *a2)
{
  uint64_t v3 = (char *)this + 8;
  *(void *)this = &unk_1EF5324A0;
  *((void *)this + 1) = &unk_1EF5326D8;
  unint64_t v4 = (md::MapNavLabeler *)((char *)this + 16);
  *((void *)this + 2) = &unk_1EF5327C0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = &unk_1EF559918;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = &unk_1EF5595D8;
  *((void *)this + 11) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((void *)this + 13) = 0;
  *((_OWORD *)this + 7) = 0u;
  *(_DWORD *)((char *)this + 127) = 0;
  *((_DWORD *)this + 80) = 1065353216;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 41) = (char *)this + 336;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 136) = 1065353216;
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 69) = (char *)this + 560;
  *((_DWORD *)this + 144) = 0;
  *((void *)this + 75) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  {
    operator new();
  }
  *((void *)this + 76) = mdm::Allocator::instance(void)::alloc;
  *((void *)this + 77) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 78) = 0;
  {
    operator new();
  }
  *((void *)this + 80) = mdm::Allocator::instance(void)::alloc;
  *((void *)this + 81) = 0;
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  {
    operator new();
  }
  *((void *)this + 84) = mdm::Allocator::instance(void)::alloc;
  *((_WORD *)this + 340) = 0;
  *(_OWORD *)((char *)this + 684) = 0u;
  *(_OWORD *)((char *)this + 700) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  {
    operator new();
  }
  *((void *)this + 91) = mdm::Allocator::instance(void)::alloc;
  *((void *)this + 92) = 0;
  *((void *)this + 94) = 0;
  *((void *)this + 93) = 0;
  {
    operator new();
  }
  *((void *)this + 95) = mdm::Allocator::instance(void)::alloc;
  *((unsigned char *)this + 768) = 0;
  *((void *)this + 97) = 0;
  *((void *)this + 99) = 0;
  *((void *)this + 98) = 0;
  {
      operator new();
  }
  *((void *)this + 100) = mdm::Allocator::instance(void)::alloc;
  *((void *)this + 101) = 0xBF80000000000000;
  *((void *)this + 102) = 0;
  *(void *)((char *)this + 821) = 0;
  uint64_t v5 = *((void *)this + 3);
  *(void *)(*(void *)(v5 + 168) + 32) = v3;
  md::LabelsState::addObserver(*(void *)(v5 + 168), v4);
  operator new();
}

void sub_1A1C49904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v35);
  unint64_t v36 = *(void **)(v32 + 16);
  *(void *)(v32 + 8) = v30;

  MEMORY[0x1A6239270](v32, 0x10A0C40A2395D72);
  BOOL v37 = (uint64_t *)(v29 + 736);
  uint64_t v38 = *(void *)(v29 + 776);
  if (v38)
  {
    *(void *)(v29 + 784) = v38;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 + 800) + 40))(*(void *)(v29 + 800), v38, *(void *)(v29 + 792) - v38);
    uint64_t v39 = *v37;
    if (!*v37)
    {
LABEL_3:
      uint64_t v40 = *(void *)(v29 + 704);
      if (!v40) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v39 = *v37;
    if (!*v37) {
      goto LABEL_3;
    }
  }
  uint64_t v57 = *(void *)(v29 + 744);
  uint64_t v58 = v39;
  if (v57 != v39)
  {
    do
    {
      int8x16_t v59 = *(std::__shared_weak_count **)(v57 - 32);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v59->__on_zero_shared)(v59, v58);
        std::__shared_weak_count::__release_weak(v59);
      }
      v57 -= 40;
    }
    while (v57 != v39);
    uint64_t v58 = *v37;
  }
  *(void *)(v29 + 744) = v39;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 + 760) + 40))(*(void *)(v29 + 760), v58, *(void *)(v29 + 752) - v58);
  uint64_t v40 = *(void *)(v29 + 704);
  if (!v40)
  {
LABEL_5:
    uint64_t v41 = *(VKLabelNavArtworkCache **)(v29 + 696);
    *(void *)(v29 + 696) = 0;
    if (v41)
    {
      VKLabelNavArtworkCache::~VKLabelNavArtworkCache(v41);
      MEMORY[0x1A6239270]();
    }
    uint64_t v42 = (void *)(v29 + 648);
    long long v43 = *(md::LabelNavEtaLabeler **)(v29 + 688);
    *(void *)(v29 + 688) = 0;
    if (v43)
    {
      md::LabelNavEtaLabeler::~LabelNavEtaLabeler(v43);
      MEMORY[0x1A6239270]();
    }
    int v44 = (uint64_t *)(v29 + 616);
    uint64_t v45 = (void (***)(void, void))*v42;
    if (*v42)
    {
      int16x8_t v46 = *(void (****)(void, void))(v29 + 656);
      int32x4_t v47 = (void (***)(void, void))*v42;
      if (v46 != v45)
      {
        int16x8_t v48 = v46 - 3;
        uint64_t v49 = v46 - 3;
        uint64_t v50 = v46 - 3;
        do
        {
          int8x16_t v51 = *v50;
          v50 -= 3;
          (*v51)(v49, (uint64_t)v47);
          v48 -= 3;
          BOOL v52 = v49 == v45;
          uint64_t v49 = v50;
        }
        while (!v52);
        int32x4_t v47 = (void (***)(void, void))*v42;
      }
      *(void *)(v29 + 656) = v45;
      (*(void (**)(void, void (***)(void, void), uint64_t))(**(void **)(v29 + 672) + 40))(*(void *)(v29 + 672), v47, *(void *)(v29 + 664) - (void)v47);
    }
    uint64_t v53 = *v44;
    if (*v44)
    {
      uint64_t v54 = *(void *)(v29 + 624);
      uint64_t v55 = *v44;
      if (v54 != v53)
      {
        do
        {
          int8x16_t v56 = *(std::__shared_weak_count **)(v54 - 8);
          if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v56->__on_zero_shared)(v56, v55);
            std::__shared_weak_count::__release_weak(v56);
          }
          v54 -= 16;
        }
        while (v54 != v53);
        uint64_t v55 = *v44;
      }
      *(void *)(v29 + 624) = v53;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 + 640) + 40))(*(void *)(v29 + 640), v55, *(void *)(v29 + 632) - v55);
    }
    int8x16_t v60 = *(uint64_t **)(v33 - 96);
    uint64_t v61 = *v60;
    if (*v60)
    {
      uint64_t v62 = *(void *)(v29 + 592);
      uint64_t v63 = *v60;
      if (v62 != v61)
      {
        do
        {
          int8x16_t v64 = *(std::__shared_weak_count **)(v62 - 8);
          if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v64->__on_zero_shared)(v64, v63);
            std::__shared_weak_count::__release_weak(v64);
          }
          v62 -= 16;
        }
        while (v62 != v61);
        uint64_t v63 = **(void **)(v33 - 96);
      }
      *(void *)(v29 + 592) = v61;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 + 608) + 40))(*(void *)(v29 + 608), v63, *(void *)(v29 + 600) - v63);
    }
    size_t v65 = (void **)(v29 + 512);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v29 + 560));
    int8x16_t v66 = *(void **)(v29 + 528);
    while (v66)
    {
      long long v74 = v66;
      int8x16_t v66 = (void *)*v66;
      unint64_t v75 = (std::__shared_weak_count *)v74[6];
      if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
      operator delete(v74);
    }
    unint64_t v67 = *v65;
    void *v65 = 0;
    if (v67) {
      operator delete(v67);
    }
    int8x16_t v68 = (void **)(v29 + 288);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v29 + 336));
    int8x16_t v69 = *(void **)(v29 + 304);
    while (v69)
    {
      BOOL v76 = v69;
      int8x16_t v69 = (void *)*v69;
      uint64_t v77 = (std::__shared_weak_count *)v76[6];
      if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
      operator delete(v76);
    }
    int64x2_t v70 = *v68;
    *int8x16_t v68 = 0;
    if (v70) {
      operator delete(v70);
    }
    unint64_t v71 = *(std::__shared_weak_count **)(v29 + 120);
    if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    *(void *)(v29 + 80) = *(void *)(v33 - 112);

    char v72 = *(md::RouteAnnotationSupport **)(v29 + 72);
    *(void *)(v29 + 72) = 0;
    if (v72)
    {
      md::RouteAnnotationSupport::~RouteAnnotationSupport(v72);
      MEMORY[0x1A6239270]();
    }
    uint64_t v73 = *(void *)(v29 + 64);
    *(void *)(v29 + 64) = 0;
    if (v73) {
      (*(void (**)(uint64_t))(*(void *)v73 + 16))(v73);
    }

    *(void *)(v29 + 32) = *(void *)(v33 - 104);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(void *)(v29 + 712) = v40;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 + 728) + 40))(*(void *)(v29 + 728), v40, *(void *)(v29 + 720) - v40);
  goto LABEL_5;
}

uint64_t md::RouteAnnotationDedupingGroup::RouteAnnotationDedupingGroup(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)a1);
  *(void *)unint64_t v4 = &unk_1EF54A5C0;
  *((void *)v4 + 10) = a2;
  if ((a2 & 0xFF00000000) != 0) {
    a2 = a2;
  }
  else {
    a2 = 0;
  }
  uint64_t v5 = *((void *)v4 + 5);
  if (a2 <= (*((void *)v4 + 7) - v5) >> 3) {
    return a1;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), 8 * a2, 8);
  uint64_t v8 = v6 - v5;
  unint64_t v9 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v12 = v10 - v11;
  if (v10 == v11)
  {
    unint64_t v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_15;
  }
  unint64_t v13 = v12 - 8;
  if ((unint64_t)(v12 - 8) >= 0x58)
  {
    unint64_t v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
    if (v10 - (v8 & 0xFFFFFFFFFFFFFFF8) - v7 >= 0x20)
    {
      uint64_t v15 = v8 >> 3;
      uint64_t v16 = (v13 >> 3) + 1;
      uint64_t v17 = (_OWORD *)(v7 + 8 * v15 - 16);
      unint64_t v18 = (long long *)(v10 - 16);
      uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *uint64_t v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      unint64_t v14 = v9 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v10 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    unint64_t v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v21 = *(void *)(v10 - 8);
    v10 -= 8;
    *(void *)(v14 - 8) = v21;
    v14 -= 8;
  }
  while (v10 != v11);
LABEL_14:
  uint64_t v10 = *(void *)(a1 + 40);
LABEL_15:
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v9;
  uint64_t v22 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v7 + 8 * a2;
  if (v10) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 64) + 40))(*(void *)(a1 + 64), v10, v22 - v10);
  }
  return a1;
}

void sub_1A1C4A9DC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1EF539178;
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3)
  {
    *(void *)(v1 + 48) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 64) + 40))(*(void *)(v1 + 64), v3, *(void *)(v1 + 56) - v3);
    uint64_t v4 = *(void *)(v1 + 8);
    if (!v4) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 8);
    if (!v4) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v4;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 32) + 40))(*(void *)(v1 + 32), v4, *(void *)(v1 + 24) - v4);
  _Unwind_Resume(exception_object);
}

md::LabelDedupingGroup *md::LabelDedupingGroup::LabelDedupingGroup(md::LabelDedupingGroup *this)
{
  *(void *)this = &unk_1EF539178;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  unsigned int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    unsigned int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    if (v24) {
      operator new();
    }
  }
  uint64_t v3 = mdm::Allocator::instance(void)::alloc;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = v3;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  {
    unsigned int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v25) {
      operator new();
    }
  }
  uint64_t v4 = *((void *)v2 + 91);
  *((void *)this + 8) = v4;
  *((void *)this + 9) = 0;
  uint64_t v5 = *((void *)this + 7);
  if (v5 == *((void *)this + 5))
  {
    uint64_t v6 = *((void *)this + 6);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 8, 8);
    uint64_t v8 = v6 - v5;
    unint64_t v9 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = *((void *)this + 5);
    uint64_t v10 = *((void *)this + 6);
    uint64_t v12 = v10 - v11;
    if (v10 == v11)
    {
      unint64_t v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_14;
    }
    unint64_t v13 = v12 - 8;
    if ((unint64_t)(v12 - 8) >= 0x58)
    {
      unint64_t v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
      if (v10 - (v8 & 0xFFFFFFFFFFFFFFF8) - v7 >= 0x20)
      {
        uint64_t v15 = v8 >> 3;
        uint64_t v16 = (v13 >> 3) + 1;
        uint64_t v17 = (_OWORD *)(v7 + 8 * v15 - 16);
        unint64_t v18 = (long long *)(v10 - 16);
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v20 = *v18;
          *(v17 - 1) = *(v18 - 1);
          *uint64_t v17 = v20;
          v17 -= 2;
          v18 -= 2;
          v19 -= 4;
        }
        while (v19);
        unint64_t v14 = v9 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
        v10 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_13;
        }
      }
    }
    else
    {
      unint64_t v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
    }
    do
    {
      uint64_t v21 = *(void *)(v10 - 8);
      v10 -= 8;
      *(void *)(v14 - 8) = v21;
      v14 -= 8;
    }
    while (v10 != v11);
LABEL_13:
    uint64_t v10 = *((void *)this + 5);
LABEL_14:
    *((void *)this + 5) = v14;
    *((void *)this + 6) = v9;
    uint64_t v22 = *((void *)this + 7);
    *((void *)this + 7) = v7 + 8;
    if (v10) {
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v10, v22 - v10);
    }
  }
  return this;
}

void sub_1A1C4AD1C(_Unwind_Exception *a1)
{
  gss::FeatureAttributeSet::~FeatureAttributeSet(v1);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v2);
  _Unwind_Resume(a1);
}

void md::MapNavLabeler::worldTraitsDidChange(md::MapNavLabeler *this)
{
  int v1 = *(unsigned __int8 *)(*(void *)(*((void *)this + 3) + 232) + 31);
  if (*((unsigned __int8 *)this + 828) != v1)
  {
    *((unsigned char *)this + 828) = v1;
    md::LabelNavEtaLabeler::clearETALabels(*((md::LabelNavEtaLabeler **)this + 86));
  }
}

void sub_1A1C4B190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *geo::range_map<geo::Unit<geo::RadianUnitDescription,float>,md::OrientationAction,std::less<geo::Unit<geo::RadianUnitDescription,float>>,std::allocator<std::pair<gm::Range<geo::Unit<geo::RadianUnitDescription,float>> const,md::OrientationAction>>>::insert(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (result[2])
  {
    uint64_t v4 = (uint64_t **)(result + 1);
    if ((uint64_t *)*result == result + 1)
    {
      uint64_t v10 = (uint64_t **)*result;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = (uint64_t *)*result;
      do
      {
        uint64_t v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = (uint64_t **)v7;
            uint64_t v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t **)v6[2];
            BOOL v9 = *v8 == v6;
            uint64_t v6 = (uint64_t *)v8;
          }
          while (!v9);
        }
        ++v5;
        uint64_t v6 = (uint64_t *)v8;
      }
      while (v8 != v4);
      uint64_t v10 = (uint64_t **)*result;
      do
      {
        unint64_t v11 = v5 >> 1;
        uint64_t v12 = (float *)v10;
        if (v5 != 1)
        {
          uint64_t v14 = v5 >> 1;
          uint64_t v15 = (float *)v10;
          do
          {
            uint64_t v17 = (float *)*((void *)v15 + 1);
            if (v17)
            {
              do
              {
                uint64_t v12 = v17;
                uint64_t v17 = *(float **)v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                uint64_t v12 = (float *)*((void *)v15 + 2);
                BOOL v9 = *(void *)v12 == (void)v15;
                uint64_t v15 = v12;
              }
              while (!v9);
            }
            uint64_t v15 = v12;
          }
          while (v14-- > 1);
        }
        if (v12[8] < *(float *)(a2 + 4))
        {
          unint64_t v13 = (uint64_t *)*((void *)v12 + 1);
          if (v13)
          {
            do
            {
              uint64_t v10 = (uint64_t **)v13;
              unint64_t v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v10 = (uint64_t **)*((void *)v12 + 2);
              BOOL v9 = *v10 == (uint64_t *)v12;
              uint64_t v12 = (float *)v10;
            }
            while (!v9);
          }
          unint64_t v11 = v5 + ~v11;
        }
        unint64_t v5 = v11;
      }
      while (v11);
    }
    if (v10 == v4 || *((float *)v10 + 7) >= *(float *)(a2 + 4))
    {
      if (v10 == (uint64_t **)*result) {
        goto LABEL_46;
      }
      uint64_t v22 = *v10;
      if (*v10)
      {
        do
        {
          uint64_t v23 = v22;
          uint64_t v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = v10[2];
          BOOL v9 = *v23 == (void)v10;
          uint64_t v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*(float *)a2 >= *((float *)v23 + 8))
      {
LABEL_46:
        int v24 = *v4;
        float v19 = *(float *)(a2 + 4);
        long long v20 = (uint64_t **)(result + 1);
        if (!*v4) {
          goto LABEL_53;
        }
        while (1)
        {
          while (1)
          {
            long long v20 = (uint64_t **)v24;
            float v25 = *((float *)v24 + 8);
            if (v19 >= v25) {
              break;
            }
            int v24 = (uint64_t *)*v24;
            uint64_t v4 = v20;
            if (!*v20) {
              goto LABEL_53;
            }
          }
          if (v25 >= v19) {
            break;
          }
          int v24 = (uint64_t *)v24[1];
          if (!v24) {
            goto LABEL_52;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = (uint64_t **)(result + 1);
    uint64_t v18 = result[1];
    float v19 = *(float *)(a2 + 4);
    if (!v18)
    {
      long long v20 = (uint64_t **)(result + 1);
LABEL_53:
      unint64_t v26 = (float *)operator new(0x28uLL);
      v26[7] = *(float *)a2;
      v26[8] = v19;
      *((unsigned char *)v26 + 36) = *(unsigned char *)(a2 + 8);
      *(void *)unint64_t v26 = 0;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = v20;
      *uint64_t v4 = (uint64_t *)v26;
      uint64_t v27 = *(void *)*v3;
      if (v27)
      {
        *uint64_t v3 = v27;
        size_t v28 = *v4;
      }
      else
      {
        size_t v28 = (uint64_t *)v26;
      }
      BOOL result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[1], v28);
      ++v3[2];
      return result;
    }
    while (1)
    {
      while (1)
      {
        long long v20 = (uint64_t **)v18;
        float v21 = *(float *)(v18 + 32);
        if (v19 >= v21) {
          break;
        }
        uint64_t v18 = *(void *)v18;
        uint64_t v4 = v20;
        if (!*v20) {
          goto LABEL_53;
        }
      }
      if (v21 >= v19) {
        break;
      }
      uint64_t v18 = *(void *)(v18 + 8);
      if (!v18)
      {
LABEL_52:
        uint64_t v4 = v20 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  if (!a2)
  {
    uint64_t v14 = *(void *)result;
    *(void *)BOOL result = 0;
    if (v14) {
      BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 16) + 40))(*(void *)(result + 16), v14, 8 * *(void *)(result + 8));
    }
    *(void *)(v2 + 8) = 0;
    return result;
  }
  BOOL result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 16) + 16))(*(void *)(result + 16), 8 * a2, 8);
  uint64_t v4 = *(void *)v2;
  *(void *)uint64_t v2 = result;
  if (v4) {
    BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 16) + 40))(*(void *)(v2 + 16), v4, 8 * *(void *)(v2 + 8));
  }
  uint64_t v5 = 0;
  *(void *)(v2 + 8) = a2;
  do
    *(void *)(*(void *)v2 + 8 * v5++) = 0;
  while (a2 != v5);
  uint64_t v7 = v2 + 24;
  uint64_t v6 = *(void **)(v2 + 24);
  if (v6)
  {
    unint64_t v8 = v6[1];
    unint64_t v9 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v10 = v8 & v9;
      *(void *)(*(void *)v2 + 8 * v10) = v7;
      while (1)
      {
        unint64_t v11 = (void *)*v6;
        if (!*v6) {
          break;
        }
        uint64_t v12 = v11[1] & v9;
        if (v12 == v10)
        {
          uint64_t v6 = (void *)*v6;
        }
        else if (*(void *)(*(void *)v2 + 8 * v12))
        {
          *uint64_t v6 = *v11;
          uint64_t v13 = 8 * v12;
          *unint64_t v11 = **(void **)(*(void *)v2 + v13);
          **(void **)(*(void *)v2 + v13) = v11;
        }
        else
        {
          *(void *)(*(void *)v2 + 8 * v12) = v6;
          uint64_t v6 = v11;
          uint64_t v10 = v12;
        }
      }
      return result;
    }
    if (v8 >= a2) {
      v8 %= a2;
    }
    *(void *)(*(void *)v2 + 8 * v8) = v7;
    uint64_t v15 = (void *)*v6;
    if (*v6)
    {
      do
      {
        unint64_t v17 = v15[1];
        if (v17 >= a2) {
          v17 %= a2;
        }
        if (v17 != v8)
        {
          if (!*(void *)(*(void *)v2 + 8 * v17))
          {
            *(void *)(*(void *)v2 + 8 * v17) = v6;
            goto LABEL_25;
          }
          *uint64_t v6 = *v15;
          uint64_t v16 = 8 * v17;
          void *v15 = **(void **)(*(void *)v2 + v16);
          **(void **)(*(void *)v2 + v16) = v15;
          uint64_t v15 = v6;
        }
        unint64_t v17 = v8;
LABEL_25:
        uint64_t v6 = v15;
        uint64_t v15 = (void *)*v15;
        unint64_t v8 = v17;
      }
      while (v15);
    }
  }
  return result;
}

void sub_1A1C4B8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __assign_helper_atomic_property__5(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      unint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      unint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (v7 != a1)
  {
    uint64_t v4 = v8;
    uint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        unint64_t v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        unint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        unint64_t v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      unint64_t v8 = v7;
    }
    else
    {
      unint64_t v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_1A1C4C01C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);

  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:nn180100]<md::StylesheetVendor,std::allocator<md::StylesheetVendor>,VKResourceManager * {__strong},void>(void *a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580368;
  id v5 = a2;
  v4[1].std::__shared_count = 0u;
  *(_OWORD *)&v4[2].__shared_weak_owners_ = 0u;
  LODWORD(v4[2].__shared_owners_) = 0;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[3].__shared_owners_ = 0u;
  v4[4].std::__shared_count = 0u;
  LOBYTE(v4[4].__shared_weak_owners_) = 0;
  v4[5].__vftable = 0;
  v4[5].__shared_owners_ = 0;
  LOBYTE(v4[5].__shared_weak_owners_) = 0;
  v4[6].__shared_owners_ = 0;
  v4[6].__shared_weak_owners_ = 0;
  v4[6].__vftable = 0;
  objc_storeStrong((id *)&v4[1].__shared_weak_owners_, a2);
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v4[2].__shared_weak_owners_;
  if (0xAAAAAAAAAAAAAAABLL * ((v4[3].__shared_owners_ - (uint64_t)shared_weak_owners) >> 4) <= 2)
  {
    uint64_t v7 = v4[3].__vftable;
    unint64_t v8 = (char *)operator new(0x90uLL);
    unint64_t v9 = v8 + 144;
    uint64_t v10 = (std::__shared_weak_count_vtbl *)&v8[(char *)v7 - (char *)shared_weak_owners];
    if (v7 == shared_weak_owners)
    {
      v4[2].__shared_weak_owners_ = (uint64_t)v10;
      v4[3].__vftable = v10;
      v4[3].__shared_owners_ = (uint64_t)v9;
    }
    else
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = (char *)v10 + v11;
        uint64_t v13 = (char *)v7 + v11;
        long long v14 = *(_OWORD *)((char *)&v7[-1] + v11 - 8);
        *((void *)v12 - 4) = *(void *)((char *)v7 + v11 - 32);
        *((_OWORD *)v12 - 3) = v14;
        *((void *)v13 - 5) = 0;
        *((void *)v13 - 4) = 0;
        *((void *)v13 - 6) = 0;
        *(v12 - 24) = *((unsigned char *)v7 + v11 - 24);
        *((_OWORD *)v12 - 1) = *(_OWORD *)((char *)v7 + v11 - 16);
        *((void *)v13 - 2) = 0;
        *((void *)v13 - 1) = 0;
        v11 -= 48;
      }
      while ((std::__shared_weak_count_vtbl *)((char *)v7 + v11) != shared_weak_owners);
      shared_weak_owners = (std::__shared_weak_count_vtbl *)v4[2].__shared_weak_owners_;
      uint64_t v15 = v4[3].__vftable;
      v4[2].__shared_weak_owners_ = (uint64_t)v10 + v11;
      v4[3].__vftable = v10;
      for (v4[3].__shared_owners_ = (uint64_t)v9;
            v15 != shared_weak_owners;
            uint64_t v15 = (std::__shared_weak_count_vtbl *)((char *)v15 - 48))
      {
        on_zero_shared_weauint64_t k = (std::__shared_weak_count *)v15[-1].__on_zero_shared_weak;
        if (on_zero_shared_weak && !atomic_fetch_add(&on_zero_shared_weak->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
          std::__shared_weak_count::__release_weak(on_zero_shared_weak);
        }
        if (SHIBYTE(v15[-1].~__shared_weak_count_0) < 0) {
          operator delete(v15[-2].__on_zero_shared_weak);
        }
      }
    }
    if (shared_weak_owners) {
      operator delete(shared_weak_owners);
    }
  }
  unint64_t shared_owners = (std::__shared_weak_count_vtbl *)v4[4].__shared_owners_;
  if (shared_owners == (std::__shared_weak_count_vtbl *)v4[3].__shared_weak_owners_)
  {
    uint64_t v18 = v4[4].__vftable;
    float v19 = (char *)operator new(0x30uLL);
    long long v20 = v19 + 48;
    float v21 = (std::__shared_weak_count_vtbl *)&v19[(char *)v18 - (char *)shared_owners];
    if (v18 == shared_owners)
    {
      v4[3].__shared_weak_owners_ = (uint64_t)v21;
      v4[4].__vftable = v21;
      v4[4].__shared_owners_ = (uint64_t)v20;
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = (char *)v21 + v22;
        int v24 = (char *)v18 + v22;
        long long v25 = *(_OWORD *)((char *)&v18[-1] + v22 - 8);
        *((void *)v23 - 4) = *(void *)((char *)v18 + v22 - 32);
        *((_OWORD *)v23 - 3) = v25;
        *((void *)v24 - 5) = 0;
        *((void *)v24 - 4) = 0;
        *((void *)v24 - 6) = 0;
        *(v23 - 24) = *((unsigned char *)v18 + v22 - 24);
        *((_OWORD *)v23 - 1) = *(_OWORD *)((char *)v18 + v22 - 16);
        *((void *)v24 - 2) = 0;
        *((void *)v24 - 1) = 0;
        v22 -= 48;
      }
      while ((std::__shared_weak_count_vtbl *)((char *)v18 + v22) != shared_owners);
      unint64_t shared_owners = (std::__shared_weak_count_vtbl *)v4[3].__shared_weak_owners_;
      unint64_t v26 = v4[4].__vftable;
      v4[3].__shared_weak_owners_ = (uint64_t)v21 + v22;
      v4[4].__vftable = v21;
      for (v4[4].__shared_owners_ = (uint64_t)v20;
            v26 != shared_owners;
            unint64_t v26 = (std::__shared_weak_count_vtbl *)((char *)v26 - 48))
      {
        uint64_t v27 = (std::__shared_weak_count *)v26[-1].__on_zero_shared_weak;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        if (SHIBYTE(v26[-1].~__shared_weak_count_0) < 0) {
          operator delete(v26[-2].__on_zero_shared_weak);
        }
      }
    }
    if (shared_owners) {
      operator delete(shared_owners);
    }
  }

  *a1 = v4 + 1;
  a1[1] = v4;
  size_t v28 = (std::__shared_weak_count *)v4[1].__shared_owners_;
  if (v28)
  {
    if (v28->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(v28);
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1A1C4C46C(_Unwind_Exception *a1)
{
  id v5 = *(std::__shared_weak_count **)(v1 + 152);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 128);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(void *)(v1 + 88);
  if (v7)
  {
    uint64_t v8 = *(void *)(v1 + 96);
    unint64_t v9 = *(void **)(v1 + 88);
    if (v8 != v7)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        if (*(char *)(v8 - 25) < 0) {
          operator delete(*(void **)(v8 - 48));
        }
        v8 -= 48;
      }
      while (v8 != v7);
      unint64_t v9 = *(void **)(v1 + 88);
    }
    *(void *)(v1 + 96) = v7;
    operator delete(v9);
  }
  uint64_t v11 = (char *)*v3;
  if (*v3)
  {
    uint64_t v12 = *(char **)(v1 + 72);
    uint64_t v13 = *v3;
    if (v12 != v11)
    {
      do
      {
        long long v14 = (std::__shared_weak_count *)*((void *)v12 - 1);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        if (*(v12 - 25) < 0) {
          operator delete(*((void **)v12 - 6));
        }
        v12 -= 48;
      }
      while (v12 != v11);
      uint64_t v13 = *v3;
    }
    *(void *)(v1 + 72) = v11;
    operator delete(v13);
  }

  uint64_t v15 = *(std::__shared_weak_count **)(v1 + 32);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__construct_at[abi:nn180100]<grl::IconManager,std::shared_ptr<md::GeoResourceProvider> &,std::shared_ptr<grl::FontManager> &,grl::IconManager*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  grl::IconManager::IconManager(a1, v3);
}

void sub_1A1C4C6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void grl::IconManager::IconManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)a1 = &unk_1EF567028;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 850045863;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_1EF566FD8;
  operator new();
}

grl::IconManager::PackInfo *grl::IconManager::PackInfo::PackInfo(grl::IconManager::PackInfo *this, uint64_t a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (char *)this + 8;
  *((void *)this + 2) = grl::Allocator::instance(this);
  *((void *)this + 3) = 0;
  *(void *)this = v4;
  *((void *)this + 4) = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((void *)this + 10) = (char *)this + 80;
  *((void *)this + 11) = (char *)this + 80;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = a2;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 1065353216;
  *((void *)this + 19) = (char *)this + 152;
  *((void *)this + 20) = (char *)this + 152;
  *(_OWORD *)((char *)this + 168) = xmmword_1A28FCCA0;
  *((void *)this + 29) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 30) = 850045863;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 850045863;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  return this;
}

double grl::FontManager::FontManager(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)a1 = &unk_1EF567028;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_1EF566FB0;
  *(void *)(a1 + 96) = a3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = a1 + 144;
  *(void *)(a1 + 152) = a1 + 144;
  *(_OWORD *)(a1 + 160) = xmmword_1A28FCCA0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  return result;
}

md::GeoResourceProvider *md::GeoResourceProvider::GeoResourceProvider(md::GeoResourceProvider *this)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((void *)this + 6) = 850045863;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 850045863;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 850045863;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = (char *)this + 248;
  uint64_t v2 = (char *)this + 264;
  *(void *)this = &unk_1EF53B960;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = &unk_1EF53B9B8;
  *((void *)this + 34) = &unk_1EF559B18;
  *((void *)this + 35) = 0;
  *((void *)this + 37) = &unk_1EF559B38;
  *((void *)this + 38) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 40) = 0;
  uint64_t v3 = [[GRLResourceGroupObserver alloc] initWithResourceProvider:this];
  uint64_t v4 = (void *)*((void *)this + 35);
  *((void *)this + 35) = v3;

  id v5 = [MEMORY[0x1E4F64918] modernManager];
  [v5 addTileGroupObserver:*((void *)this + 35) queue:MEMORY[0x1E4F14428]];

  uint64_t v6 = [[RegionalResourceObserver alloc] initWithResourceProvider:this];
  uint64_t v7 = (void *)*((void *)this + 38);
  *((void *)this + 38) = v6;

  grl::ResourceProvider::addObserver((uint64_t)this, (uint64_t)v2);
  return this;
}

void sub_1A1C4CB64(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 320);
  if (v6)
  {
    uint64_t v7 = *(void *)(v1 + 328);
    uint64_t v8 = *(void **)(v1 + 320);
    if (v7 != v6)
    {
      do
      {
        unint64_t v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)(v1 + 320);
    }
    *(void *)(v1 + 328) = v6;
    operator delete(v8);
  }
  *(void *)(v1 + 296) = v3;

  *(void *)(v1 + 272) = v2;
  grl::ResourceProvider::~ResourceProvider((grl::ResourceProvider *)v1);
  _Unwind_Resume(a1);
}

void grl::ResourceProvider::addObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::__emplace_unique_key_args<grl::ResourceObserver *,grl::ResourceObserver *&>((float *)(a1 + 8), &v4, &v4);
  std::mutex::unlock(v3);
}

void *std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::__emplace_unique_key_args<grl::ResourceObserver *,grl::ResourceObserver *&>(float *a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          long long v20 = operator new(8 * *(void *)&prime);
          float v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            uint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  void *v23 = *v29;
                  void *v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  uint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                uint64_t v23 = v29;
                uint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unsigned int v31 = *(void **)a1;
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    void *i = *v32;
LABEL_72:
    *uint64_t v32 = i;
    goto LABEL_73;
  }
  void *i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9) {
        v33 %= v9;
      }
    }
    else
    {
      v33 &= v9 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_1A1C4D198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void md::StylesheetVendor::setupTileGroupObservationProxy(md::StylesheetVendor *this)
{
  uint64_t v2 = [VKStylesheetVendorResourceManifestTileGroupObserverProxy alloc];
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  uint64_t v9 = *(void *)this;
  if (!v3 || (uint8x8_t v10 = std::__shared_weak_count::lock(v3)) == 0)
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    unint64_t v8 = v7;
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v9);
    _Unwind_Resume(v8);
  }
  uint64_t v4 = [(VKStylesheetVendorResourceManifestTileGroupObserverProxy *)v2 initWithStylesheetVendor:&v9];
  id v5 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v4;

  unint64_t v6 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A1C4D380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1C4D41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1C4D5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::function<void ()(GEOResourceManifestManager *,GEOActiveTileGroup *,GEOActiveTileGroup *)>::~function(&a14);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A1C4D6DC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A1C4D840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *md::DebugRenderLayer::layout(md::DebugRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v324 = *MEMORY[0x1E4F143B8];
  v319[0] = &unk_1EF571EC8;
  v319[1] = a2;
  uint64_t v320 = v319;
  v317[0] = &unk_1EF571F10;
  v317[1] = a2;
  BOOL v318 = v317;
  v322 = v321;
  v321[0] = &unk_1EF571F10;
  v321[1] = a2;
  std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10>,void ()(void)>::operator()((uint64_t)v319);
  if (v318 == v317)
  {
    (*(void (**)(void *))(v317[0] + 32))(v317);
  }
  else if (v318)
  {
    (*(void (**)(void))(*v318 + 40))();
  }
  if (v320 == v319)
  {
    (*(void (**)(void *))(v319[0] + 32))(v319);
  }
  else if (v320)
  {
    (*(void (**)(void))(*v320 + 40))();
  }
  v312 = 0;
  uint64_t v2 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = v4 - v3;
  if (v4 == v3)
  {
LABEL_16:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 >> 3;
    while (1)
    {
      unint64_t v8 = *(unsigned __int8 **)(v3 + 8 * v6);
      if (*v8 == *((unsigned __int8 *)this + 136))
      {
        unint64_t v9 = *((void *)v8 + 1);
        uint64_t v10 = v2[15];
        if (v9 < (v2[16] - v10) >> 3) {
          break;
        }
      }
      if (++v6 >= v7) {
        goto LABEL_16;
      }
    }
    uint64_t v11 = *(ggl::CommandBuffer **)(v10 + 8 * v9);
    if (v11) {
      uint64_t v11 = *(ggl::CommandBuffer **)(*((void *)v11 + 3) + 8 * *((unsigned __int8 *)this + 137));
    }
  }
  v312 = v11;
  uint64_t v12 = *((void *)v11 + 9);
  if (*((void *)v11 + 10) != v12) {
    *((void *)v11 + 10) = v12;
  }
  *((void *)v11 + 4) = 0;
  unint64_t v13 = (void *)*((void *)a2 + 1);
  int8x8_t v14 = (int8x8_t)v13[1];
  if (!*(void *)&v14)
  {
    unint64_t v18 = 0;
    float v19 = 0;
    __p = 0;
    int8x8_t v20 = (int8x8_t)v13[1];
    if (v20) {
      goto LABEL_81;
    }
    goto LABEL_119;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  unint64_t v16 = v15.u32[0];
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v17 = 0xE75FAB3171C16149;
    if (*(void *)&v14 <= 0xE75FAB3171C16149) {
      unint64_t v17 = 0xE75FAB3171C16149 % *(void *)&v14;
    }
  }
  else
  {
    unint64_t v17 = (*(void *)&v14 - 1) & 0xE75FAB3171C16149;
  }
  float v21 = *(void **)(*v13 + 8 * v17);
  if (!v21 || (uint64_t v22 = (void *)*v21) == 0)
  {
    __p = 0;
    uint8x8_t v25 = 0;
    goto LABEL_49;
  }
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v24 = v22[1];
      if (v24 == 0xE75FAB3171C16149)
      {
        if (v22[2] == 0xE75FAB3171C16149) {
          goto LABEL_43;
        }
      }
      else if ((v24 & (*(void *)&v14 - 1)) != v17)
      {
        goto LABEL_46;
      }
      uint64_t v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_46;
      }
    }
  }
  while (1)
  {
    unint64_t v23 = v22[1];
    if (v23 == 0xE75FAB3171C16149) {
      break;
    }
    if (v23 >= *(void *)&v14) {
      v23 %= *(void *)&v14;
    }
    if (v23 != v17) {
      goto LABEL_46;
    }
LABEL_31:
    uint64_t v22 = (void *)*v22;
    if (!v22) {
      goto LABEL_46;
    }
  }
  if (v22[2] != 0xE75FAB3171C16149) {
    goto LABEL_31;
  }
LABEL_43:
  uint64_t v26 = v22[5];
  if (*(void *)(v26 + 8) == 0xE75FAB3171C16149)
  {
    uint64_t v27 = *(void *)(v26 + 32);
    if (v27)
    {
      uint64_t v28 = (char *)operator new(8uLL);
      *(void *)uint64_t v28 = v27;
      uint8x8_t v25 = v28 + 8;
      int8x8_t v14 = (int8x8_t)v13[1];
      __p = v28;
      goto LABEL_47;
    }
  }
LABEL_46:
  uint8x8_t v25 = 0;
  __p = 0;
LABEL_47:
  if (!*(void *)&v14) {
    goto LABEL_80;
  }
  uint8x8_t v29 = (uint8x8_t)vcnt_s8(v14);
  v29.i16[0] = vaddlv_u8(v29);
  unint64_t v16 = v29.u32[0];
LABEL_49:
  if (v16 > 1)
  {
    unint64_t v30 = 0xBB644C924C2E1F27;
    if (*(void *)&v14 <= 0xBB644C924C2E1F27) {
      unint64_t v30 = 0xBB644C924C2E1F27 % *(void *)&v14;
    }
  }
  else
  {
    unint64_t v30 = (*(void *)&v14 - 1) & 0xBB644C924C2E1F27;
  }
  unsigned int v31 = *(void **)(*v13 + 8 * v30);
  if (!v31) {
    goto LABEL_80;
  }
  uint64_t v32 = (void *)*v31;
  if (!v32) {
    goto LABEL_80;
  }
  if (v16 < 2)
  {
    uint64_t v33 = *(void *)&v14 - 1;
    while (1)
    {
      uint64_t v35 = v32[1];
      if (v35 == 0xBB644C924C2E1F27)
      {
        if (v32[2] == 0xBB644C924C2E1F27) {
          goto LABEL_69;
        }
      }
      else if ((v35 & v33) != v30)
      {
        goto LABEL_80;
      }
      uint64_t v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_80;
      }
    }
  }
  while (1)
  {
    unint64_t v34 = v32[1];
    if (v34 == 0xBB644C924C2E1F27) {
      break;
    }
    if (v34 >= *(void *)&v14) {
      v34 %= *(void *)&v14;
    }
    if (v34 != v30) {
      goto LABEL_80;
    }
LABEL_58:
    uint64_t v32 = (void *)*v32;
    if (!v32) {
      goto LABEL_80;
    }
  }
  if (v32[2] != 0xBB644C924C2E1F27) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v36 = v32[5];
  if (*(void *)(v36 + 8) != 0xBB644C924C2E1F27 || (uint64_t v37 = *(void *)(v36 + 32)) == 0)
  {
LABEL_80:
    unint64_t v18 = v25;
    float v19 = v25;
    int8x8_t v20 = (int8x8_t)v13[1];
    if (!*(void *)&v20) {
      goto LABEL_119;
    }
    goto LABEL_81;
  }
  uint64_t v38 = v25 - __p;
  uint64_t v39 = (v25 - __p) >> 3;
  unint64_t v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 61) {
    abort();
  }
  if (v38 >> 2 > v40) {
    unint64_t v40 = v38 >> 2;
  }
  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v41 = v40;
  }
  if (v41)
  {
    if (v41 >> 61) {
      goto LABEL_434;
    }
    uint64_t v42 = (char *)operator new(8 * v41);
  }
  else
  {
    uint64_t v42 = 0;
  }
  uint64_t v55 = &v42[8 * v39];
  unint64_t v18 = &v42[8 * v41];
  *(void *)uint64_t v55 = v37;
  float v19 = v55 + 8;
  if (v25 != __p)
  {
    uint64_t v55 = &v42[v38 & 7];
    memcpy(v55, &v25[-(v38 & 0xFFFFFFFFFFFFFFF8)], v38 & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p)
  {
    operator delete(__p);
    unint64_t v13 = (void *)*((void *)a2 + 1);
  }
  __p = v55;
  int8x8_t v20 = (int8x8_t)v13[1];
  if (!*(void *)&v20) {
    goto LABEL_119;
  }
LABEL_81:
  uint8x8_t v43 = (uint8x8_t)vcnt_s8(v20);
  v43.i16[0] = vaddlv_u8(v43);
  if (v43.u32[0] > 1uLL)
  {
    uint64_t v44 = 0x3619066E3FB5F2CLL;
    if (*(void *)&v20 <= 0x3619066E3FB5F2CuLL) {
      uint64_t v44 = 0x3619066E3FB5F2CuLL % *(void *)&v20;
    }
  }
  else
  {
    uint64_t v44 = (*(void *)&v20 - 1) & 0x3619066E3FB5F2CLL;
  }
  uint64_t v45 = *(void **)(*v13 + 8 * v44);
  if (!v45) {
    goto LABEL_119;
  }
  int16x8_t v46 = (void *)*v45;
  if (!v46) {
    goto LABEL_119;
  }
  if (v43.u32[0] < 2uLL)
  {
    uint64_t v47 = *(void *)&v20 - 1;
    while (1)
    {
      uint64_t v49 = v46[1];
      if (v49 == 0x3619066E3FB5F2CLL)
      {
        if (v46[2] == 0x3619066E3FB5F2CLL) {
          goto LABEL_101;
        }
      }
      else if ((v49 & v47) != v44)
      {
        goto LABEL_119;
      }
      int16x8_t v46 = (void *)*v46;
      if (!v46) {
        goto LABEL_119;
      }
    }
  }
  while (1)
  {
    unint64_t v48 = v46[1];
    if (v48 == 0x3619066E3FB5F2CLL) {
      break;
    }
    if (v48 >= *(void *)&v20) {
      v48 %= *(void *)&v20;
    }
    if (v48 != v44) {
      goto LABEL_119;
    }
LABEL_90:
    int16x8_t v46 = (void *)*v46;
    if (!v46) {
      goto LABEL_119;
    }
  }
  if (v46[2] != 0x3619066E3FB5F2CLL) {
    goto LABEL_90;
  }
LABEL_101:
  uint64_t v50 = v46[5];
  if (*(void *)(v50 + 8) != 0x3619066E3FB5F2CLL || (uint64_t v51 = *(void *)(v50 + 32)) == 0)
  {
LABEL_119:
    int8x16_t v56 = v19;
    goto LABEL_120;
  }
  if (v19 < v18)
  {
    *(void *)float v19 = v51;
    v19 += 8;
    goto LABEL_119;
  }
  uint64_t v52 = (v19 - __p) >> 3;
  unint64_t v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61) {
    abort();
  }
  if ((v18 - __p) >> 2 > v53) {
    unint64_t v53 = (v18 - __p) >> 2;
  }
  if ((unint64_t)(v18 - __p) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v53)
  {
    if (!(v53 >> 61))
    {
      uint64_t v54 = operator new(8 * v53);
      goto LABEL_403;
    }
LABEL_434:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v54 = 0;
LABEL_403:
  long long v279 = &v54[8 * v52];
  *(void *)long long v279 = v51;
  int8x16_t v56 = v279 + 8;
  if (v19 == __p)
  {
LABEL_409:
    __p = v279;
    if (!v19) {
      goto LABEL_120;
    }
    goto LABEL_410;
  }
  unint64_t v280 = v19 - __p - 8;
  if (v280 < 0x58 || (unint64_t)(__p - v54) < 0x20)
  {
    long long v281 = v19;
    goto LABEL_407;
  }
  uint64_t v283 = (v280 >> 3) + 1;
  long long v281 = &v19[-8 * (v283 & 0x3FFFFFFFFFFFFFFCLL)];
  long long v284 = &v54[8 * v52 - 16];
  uint64_t v285 = v19 - 16;
  uint64_t v286 = v283 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v287 = *(_OWORD *)v285;
    *(v284 - 1) = *((_OWORD *)v285 - 1);
    *long long v284 = v287;
    v284 -= 2;
    v285 -= 32;
    v286 -= 4;
  }
  while (v286);
  v279 -= 8 * (v283 & 0x3FFFFFFFFFFFFFFCLL);
  if (v283 != (v283 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_407:
    float v19 = __p;
    do
    {
      uint64_t v282 = *((void *)v281 - 1);
      v281 -= 8;
      *((void *)v279 - 1) = v282;
      v279 -= 8;
    }
    while (v281 != __p);
    goto LABEL_409;
  }
  float v19 = __p;
  __p = v279;
  if (v19) {
LABEL_410:
  }
    operator delete(v19);
LABEL_120:
  if (__p == v56)
  {
    BOOL v60 = 0;
  }
  else
  {
    uint64_t v57 = __p + 8;
    while (1)
    {
      uint64_t v58 = (void *)*((void *)v57 - 1);
      if (v58[8] || v58[10] != v58[11]) {
        break;
      }
      uint64_t v59 = v58[3];
      BOOL v60 = v59 != 0;
      if (v59) {
        BOOL v61 = 1;
      }
      else {
        BOOL v61 = v57 == v56;
      }
      v57 += 8;
      if (v61) {
        goto LABEL_132;
      }
    }
    BOOL v60 = 1;
  }
LABEL_132:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*((void *)this + 6) + 112));
  uint64_t v62 = *(uint64_t **)(*((void *)this + 6) + 120);
  uint64_t v63 = (uint64_t *)v62[4];
  int8x16_t v64 = (uint64_t *)v62[5];
  if (v63 == v64) {
    goto LABEL_164;
  }
  size_t v65 = (void *)v62[1];
  while (2)
  {
    uint64_t v66 = *v63;
    unint64_t v67 = v62[2];
    if ((unint64_t)v65 < v67)
    {
      if (v65) {
        void *v65 = v66;
      }
      ++v65;
      goto LABEL_135;
    }
    uint64_t v68 = ((uint64_t)v65 - *v62) >> 3;
    if ((unint64_t)(v68 + 1) >> 61) {
LABEL_431:
    }
      abort();
    uint64_t v69 = v67 - *v62;
    uint64_t v70 = v69 >> 2;
    if (v69 >> 2 <= (unint64_t)(v68 + 1)) {
      uint64_t v70 = v68 + 1;
    }
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v71 = v70;
    }
    if (v71)
    {
      uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62[3] + 16))(v62[3], 8 * v71, 8);
      uint64_t v73 = (void *)(v72 + 8 * v68);
      uint64_t v74 = v72 + 8 * v71;
      if (v72) {
        *uint64_t v73 = v66;
      }
    }
    else
    {
      uint64_t v74 = 0;
      uint64_t v73 = (void *)(8 * v68);
    }
    uint64_t v76 = *v62;
    uint64_t v75 = v62[1];
    uint64_t v77 = v75 - *v62;
    if (v75 == *v62)
    {
      uint64_t v79 = v73;
      goto LABEL_160;
    }
    unint64_t v78 = v77 - 8;
    if ((unint64_t)(v77 - 8) < 0x38)
    {
      uint64_t v79 = v73;
      do
      {
LABEL_158:
        uint64_t v85 = *(void *)(v75 - 8);
        v75 -= 8;
        *--uint64_t v79 = v85;
      }
      while (v75 != v76);
      goto LABEL_159;
    }
    uint64_t v79 = v73;
    if ((unint64_t)(v75 - (void)v73) < 0x20) {
      goto LABEL_158;
    }
    uint64_t v80 = (v78 >> 3) + 1;
    unint64_t v81 = v73 - 2;
    BOOL v82 = (long long *)(v75 - 16);
    uint64_t v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v84 = *v82;
      *(v81 - 1) = *(v82 - 1);
      *unint64_t v81 = v84;
      v81 -= 2;
      v82 -= 2;
      v83 -= 4;
    }
    while (v83);
    uint64_t v79 = &v73[-(v80 & 0x3FFFFFFFFFFFFFFCLL)];
    v75 -= 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
    if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_158;
    }
LABEL_159:
    uint64_t v75 = *v62;
LABEL_160:
    size_t v65 = v73 + 1;
    *uint64_t v62 = (uint64_t)v79;
    v62[1] = (uint64_t)(v73 + 1);
    uint64_t v86 = v62[2];
    v62[2] = v74;
    if (v75) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62[3] + 40))(v62[3], v75, v86 - v75);
    }
LABEL_135:
    v62[1] = (uint64_t)v65;
    if (++v63 != v64) {
      continue;
    }
    break;
  }
  uint64_t v87 = v62[4];
  if (v87 != v62[5]) {
    v62[5] = v87;
  }
LABEL_164:
  int32x4_t v88 = *(uint64_t **)(*((void *)this + 6) + 136);
  int8x16_t v89 = (uint64_t *)v88[4];
  int8x16_t v90 = (uint64_t *)v88[5];
  if (v89 == v90) {
    goto LABEL_196;
  }
  int16x8_t v91 = (void *)v88[1];
  while (2)
  {
    uint64_t v92 = *v89;
    unint64_t v93 = v88[2];
    if ((unint64_t)v91 < v93)
    {
      if (v91) {
        *int16x8_t v91 = v92;
      }
      ++v91;
      goto LABEL_167;
    }
    uint64_t v94 = ((uint64_t)v91 - *v88) >> 3;
    if ((unint64_t)(v94 + 1) >> 61) {
      goto LABEL_431;
    }
    uint64_t v95 = v93 - *v88;
    uint64_t v96 = v95 >> 2;
    if (v95 >> 2 <= (unint64_t)(v94 + 1)) {
      uint64_t v96 = v94 + 1;
    }
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v97 = v96;
    }
    if (v97)
    {
      uint64_t v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v88[3] + 16))(v88[3], 8 * v97, 8);
      int8x16_t v99 = (void *)(v98 + 8 * v94);
      uint64_t v100 = v98 + 8 * v97;
      if (v98) {
        *int8x16_t v99 = v92;
      }
    }
    else
    {
      uint64_t v100 = 0;
      int8x16_t v99 = (void *)(8 * v94);
    }
    uint64_t v102 = *v88;
    uint64_t v101 = v88[1];
    uint64_t v103 = v101 - *v88;
    if (v101 == *v88)
    {
      int16x8_t v105 = v99;
      goto LABEL_192;
    }
    unint64_t v104 = v103 - 8;
    if ((unint64_t)(v103 - 8) < 0x38)
    {
      int16x8_t v105 = v99;
      do
      {
LABEL_190:
        uint64_t v111 = *(void *)(v101 - 8);
        v101 -= 8;
        *--int16x8_t v105 = v111;
      }
      while (v101 != v102);
      goto LABEL_191;
    }
    int16x8_t v105 = v99;
    if ((unint64_t)(v101 - (void)v99) < 0x20) {
      goto LABEL_190;
    }
    uint64_t v106 = (v104 >> 3) + 1;
    int8x16_t v107 = v99 - 2;
    int16x8_t v108 = (long long *)(v101 - 16);
    uint64_t v109 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v110 = *v108;
      *(v107 - 1) = *(v108 - 1);
      *int8x16_t v107 = v110;
      v107 -= 2;
      v108 -= 2;
      v109 -= 4;
    }
    while (v109);
    int16x8_t v105 = &v99[-(v106 & 0x3FFFFFFFFFFFFFFCLL)];
    v101 -= 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_190;
    }
LABEL_191:
    uint64_t v101 = *v88;
LABEL_192:
    int16x8_t v91 = v99 + 1;
    *int32x4_t v88 = (uint64_t)v105;
    v88[1] = (uint64_t)(v99 + 1);
    uint64_t v112 = v88[2];
    v88[2] = v100;
    if (v101) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v88[3] + 40))(v88[3], v101, v112 - v101);
    }
LABEL_167:
    v88[1] = (uint64_t)v91;
    if (++v89 != v90) {
      continue;
    }
    break;
  }
  uint64_t v113 = v88[4];
  if (v113 != v88[5]) {
    v88[5] = v113;
  }
LABEL_196:
  int8x16_t v114 = *(uint64_t **)(*((void *)this + 6) + 144);
  int8x16_t v115 = (uint64_t *)v114[4];
  int8x16_t v116 = (uint64_t *)v114[5];
  if (v115 == v116) {
    goto LABEL_228;
  }
  int8x16_t v117 = (void *)v114[1];
  while (2)
  {
    uint64_t v118 = *v115;
    unint64_t v119 = v114[2];
    if ((unint64_t)v117 < v119)
    {
      if (v117) {
        *int8x16_t v117 = v118;
      }
      ++v117;
      goto LABEL_199;
    }
    uint64_t v120 = ((uint64_t)v117 - *v114) >> 3;
    if ((unint64_t)(v120 + 1) >> 61) {
      goto LABEL_431;
    }
    uint64_t v121 = v119 - *v114;
    uint64_t v122 = v121 >> 2;
    if (v121 >> 2 <= (unint64_t)(v120 + 1)) {
      uint64_t v122 = v120 + 1;
    }
    if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v123 = v122;
    }
    if (v123)
    {
      uint64_t v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v114[3] + 16))(v114[3], 8 * v123, 8);
      int8x16_t v125 = (void *)(v124 + 8 * v120);
      uint64_t v126 = v124 + 8 * v123;
      if (v124) {
        *int8x16_t v125 = v118;
      }
    }
    else
    {
      uint64_t v126 = 0;
      int8x16_t v125 = (void *)(8 * v120);
    }
    uint64_t v128 = *v114;
    uint64_t v127 = v114[1];
    uint64_t v129 = v127 - *v114;
    if (v127 == *v114)
    {
      int16x8_t v131 = v125;
      goto LABEL_224;
    }
    unint64_t v130 = v129 - 8;
    if ((unint64_t)(v129 - 8) < 0x38)
    {
      int16x8_t v131 = v125;
      do
      {
LABEL_222:
        uint64_t v137 = *(void *)(v127 - 8);
        v127 -= 8;
        *--int16x8_t v131 = v137;
      }
      while (v127 != v128);
      goto LABEL_223;
    }
    int16x8_t v131 = v125;
    if ((unint64_t)(v127 - (void)v125) < 0x20) {
      goto LABEL_222;
    }
    uint64_t v132 = (v130 >> 3) + 1;
    int8x16_t v133 = v125 - 2;
    int32x4_t v134 = (long long *)(v127 - 16);
    uint64_t v135 = v132 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v136 = *v134;
      *(v133 - 1) = *(v134 - 1);
      *int8x16_t v133 = v136;
      v133 -= 2;
      v134 -= 2;
      v135 -= 4;
    }
    while (v135);
    int16x8_t v131 = &v125[-(v132 & 0x3FFFFFFFFFFFFFFCLL)];
    v127 -= 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
    if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_222;
    }
LABEL_223:
    uint64_t v127 = *v114;
LABEL_224:
    int8x16_t v117 = v125 + 1;
    *int8x16_t v114 = (uint64_t)v131;
    v114[1] = (uint64_t)(v125 + 1);
    uint64_t v138 = v114[2];
    v114[2] = v126;
    if (v127) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v114[3] + 40))(v114[3], v127, v138 - v127);
    }
LABEL_199:
    v114[1] = (uint64_t)v117;
    if (++v115 != v116) {
      continue;
    }
    break;
  }
  uint64_t v139 = v114[4];
  if (v139 != v114[5]) {
    v114[5] = v139;
  }
LABEL_228:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*((void *)this + 6) + 160));
  int8x16_t v140 = *(uint64_t **)(*((void *)this + 6) + 128);
  int8x16_t v141 = (uint64_t *)v140[4];
  int8x16_t v142 = (uint64_t *)v140[5];
  if (v141 == v142) {
    goto LABEL_260;
  }
  int16x8_t v143 = (void *)v140[1];
  while (2)
  {
    uint64_t v144 = *v141;
    unint64_t v145 = v140[2];
    if ((unint64_t)v143 < v145)
    {
      if (v143) {
        *int16x8_t v143 = v144;
      }
      ++v143;
      goto LABEL_231;
    }
    uint64_t v146 = ((uint64_t)v143 - *v140) >> 3;
    if ((unint64_t)(v146 + 1) >> 61) {
      goto LABEL_431;
    }
    uint64_t v147 = v145 - *v140;
    uint64_t v148 = v147 >> 2;
    if (v147 >> 2 <= (unint64_t)(v146 + 1)) {
      uint64_t v148 = v146 + 1;
    }
    if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v149 = v148;
    }
    if (v149)
    {
      uint64_t v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v140[3] + 16))(v140[3], 8 * v149, 8);
      int32x4_t v151 = (void *)(v150 + 8 * v146);
      uint64_t v152 = v150 + 8 * v149;
      if (v150) {
        *int32x4_t v151 = v144;
      }
    }
    else
    {
      uint64_t v152 = 0;
      int32x4_t v151 = (void *)(8 * v146);
    }
    uint64_t v154 = *v140;
    uint64_t v153 = v140[1];
    uint64_t v155 = v153 - *v140;
    if (v153 == *v140)
    {
      uint64_t v157 = v151;
      goto LABEL_256;
    }
    unint64_t v156 = v155 - 8;
    if ((unint64_t)(v155 - 8) < 0x38)
    {
      uint64_t v157 = v151;
      do
      {
LABEL_254:
        uint64_t v163 = *(void *)(v153 - 8);
        v153 -= 8;
        *--uint64_t v157 = v163;
      }
      while (v153 != v154);
      goto LABEL_255;
    }
    uint64_t v157 = v151;
    if ((unint64_t)(v153 - (void)v151) < 0x20) {
      goto LABEL_254;
    }
    uint64_t v158 = (v156 >> 3) + 1;
    int v159 = v151 - 2;
    uint64_t v160 = (long long *)(v153 - 16);
    uint64_t v161 = v158 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v162 = *v160;
      *(v159 - 1) = *(v160 - 1);
      *int v159 = v162;
      v159 -= 2;
      v160 -= 2;
      v161 -= 4;
    }
    while (v161);
    uint64_t v157 = &v151[-(v158 & 0x3FFFFFFFFFFFFFFCLL)];
    v153 -= 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
    if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_254;
    }
LABEL_255:
    uint64_t v153 = *v140;
LABEL_256:
    int16x8_t v143 = v151 + 1;
    *int8x16_t v140 = (uint64_t)v157;
    v140[1] = (uint64_t)(v151 + 1);
    uint64_t v164 = v140[2];
    v140[2] = v152;
    if (v153) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v140[3] + 40))(v140[3], v153, v164 - v153);
    }
LABEL_231:
    v140[1] = (uint64_t)v143;
    if (++v141 != v142) {
      continue;
    }
    break;
  }
  uint64_t v165 = v140[4];
  if (v165 != v140[5]) {
    v140[5] = v165;
  }
LABEL_260:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*((void *)this + 6) + 96));
  long long v166 = *(uint64_t **)(*((void *)this + 6) + 104);
  long long v167 = (uint64_t *)v166[4];
  long long v168 = (uint64_t *)v166[5];
  if (v167 == v168) {
    goto LABEL_292;
  }
  unint64_t v169 = (void *)v166[1];
  while (2)
  {
    uint64_t v170 = *v167;
    unint64_t v171 = v166[2];
    if ((unint64_t)v169 < v171)
    {
      if (v169) {
        *unint64_t v169 = v170;
      }
      ++v169;
      goto LABEL_263;
    }
    uint64_t v172 = ((uint64_t)v169 - *v166) >> 3;
    if ((unint64_t)(v172 + 1) >> 61) {
      goto LABEL_431;
    }
    uint64_t v173 = v171 - *v166;
    uint64_t v174 = v173 >> 2;
    if (v173 >> 2 <= (unint64_t)(v172 + 1)) {
      uint64_t v174 = v172 + 1;
    }
    if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v175 = v174;
    }
    if (v175)
    {
      uint64_t v176 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v166[3] + 16))(v166[3], 8 * v175, 8);
      long long v177 = (void *)(v176 + 8 * v172);
      uint64_t v178 = v176 + 8 * v175;
      if (v176) {
        *long long v177 = v170;
      }
    }
    else
    {
      uint64_t v178 = 0;
      long long v177 = (void *)(8 * v172);
    }
    uint64_t v180 = *v166;
    uint64_t v179 = v166[1];
    uint64_t v181 = v179 - *v166;
    if (v179 == *v166)
    {
      long long v183 = v177;
      goto LABEL_288;
    }
    unint64_t v182 = v181 - 8;
    if ((unint64_t)(v181 - 8) < 0x38)
    {
      long long v183 = v177;
      do
      {
LABEL_286:
        uint64_t v189 = *(void *)(v179 - 8);
        v179 -= 8;
        *--long long v183 = v189;
      }
      while (v179 != v180);
      goto LABEL_287;
    }
    long long v183 = v177;
    if ((unint64_t)(v179 - (void)v177) < 0x20) {
      goto LABEL_286;
    }
    uint64_t v184 = (v182 >> 3) + 1;
    long long v185 = v177 - 2;
    int v186 = (long long *)(v179 - 16);
    uint64_t v187 = v184 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v188 = *v186;
      *(v185 - 1) = *(v186 - 1);
      _OWORD *v185 = v188;
      v185 -= 2;
      v186 -= 2;
      v187 -= 4;
    }
    while (v187);
    long long v183 = &v177[-(v184 & 0x3FFFFFFFFFFFFFFCLL)];
    v179 -= 8 * (v184 & 0x3FFFFFFFFFFFFFFCLL);
    if (v184 != (v184 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_286;
    }
LABEL_287:
    uint64_t v179 = *v166;
LABEL_288:
    unint64_t v169 = v177 + 1;
    *long long v166 = (uint64_t)v183;
    v166[1] = (uint64_t)(v177 + 1);
    uint64_t v190 = v166[2];
    v166[2] = v178;
    if (v179) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v166[3] + 40))(v166[3], v179, v190 - v179);
    }
LABEL_263:
    v166[1] = (uint64_t)v169;
    if (++v167 != v168) {
      continue;
    }
    break;
  }
  uint64_t v191 = v166[4];
  if (v191 != v166[5]) {
    v166[5] = v191;
  }
LABEL_292:
  long long v289 = +[VKDebugSettings sharedSettings];
  if (((v60 | [v289 shouldDrawDebug]) & 1) == 0)
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::clear((void *)this + 7);
    goto LABEL_423;
  }
  long long v192 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v193 = (int8x8_t)v192[1];
  if (!*(void *)&v193)
  {
    uint64_t v299 = 0;
    goto LABEL_341;
  }
  uint8x8_t v194 = (uint8x8_t)vcnt_s8(v193);
  v194.i16[0] = vaddlv_u8(v194);
  if (v194.u32[0] > 1uLL)
  {
    uint64_t v195 = 0x1AF456233693CD46;
    if (*(void *)&v193 <= 0x1AF456233693CD46uLL) {
      uint64_t v195 = 0x1AF456233693CD46uLL % *(void *)&v193;
    }
  }
  else
  {
    uint64_t v195 = (*(void *)&v193 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v196 = *v192;
  long long v197 = *(void **)(v196 + 8 * v195);
  if (!v197) {
    goto LABEL_318;
  }
  long long v198 = (void *)*v197;
  if (!v198) {
    goto LABEL_318;
  }
  if (v194.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v200 = v198[1];
      if (v200 == 0x1AF456233693CD46)
      {
        if (v198[2] == 0x1AF456233693CD46) {
          goto LABEL_316;
        }
      }
      else if ((v200 & (*(void *)&v193 - 1)) != v195)
      {
        goto LABEL_318;
      }
      long long v198 = (void *)*v198;
      if (!v198) {
        goto LABEL_318;
      }
    }
  }
  while (2)
  {
    unint64_t v199 = v198[1];
    if (v199 != 0x1AF456233693CD46)
    {
      if (v199 >= *(void *)&v193) {
        v199 %= *(void *)&v193;
      }
      if (v199 != v195) {
        goto LABEL_318;
      }
      goto LABEL_305;
    }
    if (v198[2] != 0x1AF456233693CD46)
    {
LABEL_305:
      long long v198 = (void *)*v198;
      if (!v198) {
        goto LABEL_318;
      }
      continue;
    }
    break;
  }
LABEL_316:
  uint64_t v201 = v198[5];
  if (*(void *)(v201 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v299 = *(void *)(v201 + 32);
    goto LABEL_319;
  }
LABEL_318:
  uint64_t v299 = 0;
LABEL_319:
  if (v194.u32[0] > 1uLL)
  {
    uint64_t v202 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v193 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v202 = 0x3070CB6B3C7F21D3uLL % *(void *)&v193;
    }
  }
  else
  {
    uint64_t v202 = (*(void *)&v193 - 1) & 0x3070CB6B3C7F21D3;
  }
  long long v203 = *(void **)(v196 + 8 * v202);
  if (!v203) {
    goto LABEL_341;
  }
  long long v204 = (void *)*v203;
  if (!v204) {
    goto LABEL_341;
  }
  if (v194.u32[0] < 2uLL)
  {
    uint64_t v205 = *(void *)&v193 - 1;
    while (1)
    {
      uint64_t v207 = v204[1];
      if (v207 == 0x3070CB6B3C7F21D3)
      {
        if (v204[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_339;
        }
      }
      else if ((v207 & v205) != v202)
      {
        goto LABEL_341;
      }
      long long v204 = (void *)*v204;
      if (!v204) {
        goto LABEL_341;
      }
    }
  }
  while (2)
  {
    unint64_t v206 = v204[1];
    if (v206 != 0x3070CB6B3C7F21D3)
    {
      if (v206 >= *(void *)&v193) {
        v206 %= *(void *)&v193;
      }
      if (v206 != v202) {
        goto LABEL_341;
      }
      goto LABEL_328;
    }
    if (v204[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_328:
      long long v204 = (void *)*v204;
      if (!v204) {
        goto LABEL_341;
      }
      continue;
    }
    break;
  }
LABEL_339:
  uint64_t v208 = v204[5];
  if (*(void *)(v208 + 8) == 0x3070CB6B3C7F21D3)
  {
    v295 = *(uint64_t **)(v208 + 32);
    goto LABEL_342;
  }
LABEL_341:
  v295 = 0;
LABEL_342:
  v310 = 0;
  v309 = 0;
  uint64_t v311 = 0;
  v307 = 0;
  uint64_t v306 = 0;
  uint64_t v308 = 0;
  uint64_t v304 = 0;
  long long v303 = 0;
  uint64_t v305 = 0;
  uint64_t v291 = v56;
  if (__p != v56)
  {
    float32x4_t v300 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    long long v209 = __p;
    while (1)
    {
      long long v292 = v209;
      long long v293 = *(void **)v209;
      for (uint64_t i = *(uint64_t ***)(*(void *)v209 + 16); i; uint64_t i = (uint64_t **)*i)
      {
        md::GeometryContext::transformConstantData((double *)&v302, v295, (unsigned __int8 *)i[2], *(unsigned __int8 *)(v299 + 3776), *((double *)i[2] + 54), *((double *)i[2] + 55));
        long long v214 = i[3];
        long long v215 = i[4];
        while (v214 != v215)
        {
          BOOL v225 = v214 + 2;
          if (*((unsigned char *)v214 + 8))
          {
            v226 = i[2];
            v227 = v226 + 38;
            unint64_t v228 = v226 + 22;
            if (*(unsigned __int8 *)(v299 + 3776) - 1 >= 3) {
              v229 = v227;
            }
            else {
              v229 = v228;
            }
            long long v230 = v229[5];
            *(_OWORD *)&v313[64] = v229[4];
            *(_OWORD *)v314 = v230;
            long long v231 = v229[7];
            *(_OWORD *)&v314[16] = v229[6];
            *(_OWORD *)&v314[32] = v231;
            long long v232 = v229[1];
            *(_OWORD *)unint64_t v313 = *v229;
            *(_OWORD *)&v313[16] = v232;
            long long v234 = v229[3];
            *(_OWORD *)&v313[32] = v229[2];
            v233.i32[1] = *(_DWORD *)&v313[36];
            *(_OWORD *)&v313[48] = v234;
            v233.i32[0] = *(_DWORD *)v214;
            *(float32x4_t *)__dst = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v233))), v300);
            md::DebugRenderLayer::renderTriangulatedLines((uint64_t)this, a2, (double *)v313, __dst, v225, (uint64_t)v312, (uint64_t *)&v302, *((float *)v214 + 1));
          }
          else
          {
            char v216 = i[2];
            char v217 = v216 + 38;
            char v218 = v216 + 22;
            if (*(unsigned __int8 *)(v299 + 3776) - 1 >= 3) {
              char v219 = v217;
            }
            else {
              char v219 = v218;
            }
            long long v220 = v219[5];
            *(_OWORD *)&v313[64] = v219[4];
            *(_OWORD *)v314 = v220;
            long long v221 = v219[7];
            *(_OWORD *)&v314[16] = v219[6];
            *(_OWORD *)&v314[32] = v221;
            long long v222 = v219[1];
            *(_OWORD *)unint64_t v313 = *v219;
            *(_OWORD *)&v313[16] = v222;
            long long v224 = v219[3];
            *(_OWORD *)&v313[32] = v219[2];
            v223.i32[1] = *(_DWORD *)&v313[36];
            *(_OWORD *)&v313[48] = v224;
            v223.i32[0] = *(_DWORD *)v214;
            *(float32x4_t *)__dst = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v223))), v300);
            md::DebugRenderLayer::renderLines((uint64_t)this, *((void **)a2 + 1), (double *)v313, __dst, v225, (uint64_t)v312, &v302);
          }
          v214 += 5;
        }
        size = (std::__shared_weak_count *)v302.__r_.__value_.__l.__size_;
        if (v302.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v302.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      long long v211 = (void *)v293[7];
      if (v211)
      {
        do
        {
          uint64_t v238 = v211[2];
          md::GeometryContext::transformConstantData((double *)&v302, v295, (unsigned __int8 *)v238, *(unsigned __int8 *)(v299 + 3776), *(double *)(v238 + 432), *(double *)(v238 + 440));
          uint64_t v239 = v211[3];
          v294 = v211;
          uint64_t v296 = v211[4];
          if (v239 != v296)
          {
            v297 = (_OWORD *)(v238 + 304);
            uint64_t v240 = (_OWORD *)(v238 + 176);
            do
            {
              v310 = v309;
              uint64_t v304 = v303;
              v307 = v306;
              uint64_t v241 = *(void *)(v239 + 16);
              uint64_t v242 = *(void *)(v239 + 24);
              while (v241 != v242)
              {
                *(void *)unint64_t v313 = &v306;
                *(void *)&v313[8] = &v309;
                *(void *)&v313[16] = &v309;
                *(void *)&v313[24] = &v303;
                uint64_t v243 = *(unsigned int *)(v241 + 52);
                if (v243 == -1) {
                  goto LABEL_401;
                }
                __dst[0] = v313;
                ((void (*)(void **, uint64_t))off_1EF58FAF0[v243])(__dst, v241);
                v241 += 56;
              }
              char v244 = v297;
              if (*(unsigned __int8 *)(v299 + 3776) - 1 < 3) {
                char v244 = v240;
              }
              long long v245 = v244[5];
              *(_OWORD *)&v313[64] = v244[4];
              *(_OWORD *)v314 = v245;
              long long v246 = v244[7];
              *(_OWORD *)&v314[16] = v244[6];
              *(_OWORD *)&v314[32] = v246;
              long long v247 = v244[1];
              *(_OWORD *)unint64_t v313 = *v244;
              *(_OWORD *)&v313[16] = v247;
              long long v249 = v244[3];
              *(_OWORD *)&v313[32] = v244[2];
              v248.i32[1] = *(_DWORD *)&v313[36];
              *(_OWORD *)&v313[48] = v249;
              v248.i32[0] = *(_DWORD *)v239;
              *(float32x4_t *)__dst = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v248))), v300);
              int v250 = *(unsigned __int8 *)(v239 + 12);
              char v251 = v312;
              char v252 = (void *)md::DebugLayerRenderResources::unitBoxMesh(*((md::DebugLayerRenderResources **)this + 6));
              md::DebugRenderLayer::renderInstancedMesh((uint64_t)this, *((void **)a2 + 1), (double *)v313, __dst, v250 != 0, (uint64_t)v251, (uint64_t)&v309, v252, (uint64_t *)&v302);
              uint64_t v253 = v297;
              if (*(unsigned __int8 *)(v299 + 3776) - 1 < 3) {
                uint64_t v253 = v240;
              }
              long long v254 = v253[5];
              *(_OWORD *)&v313[64] = v253[4];
              *(_OWORD *)v314 = v254;
              long long v255 = v253[7];
              *(_OWORD *)&v314[16] = v253[6];
              *(_OWORD *)&v314[32] = v255;
              long long v256 = v253[1];
              *(_OWORD *)unint64_t v313 = *v253;
              *(_OWORD *)&v313[16] = v256;
              long long v258 = v253[3];
              *(_OWORD *)&v313[32] = v253[2];
              v257.i32[1] = *(_DWORD *)&v313[36];
              *(_OWORD *)&v313[48] = v258;
              v257.i32[0] = *(_DWORD *)v239;
              *(float32x4_t *)__dst = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v257))), v300);
              int v259 = *(unsigned __int8 *)(v239 + 12);
              char v260 = v312;
              uint64_t v261 = md::DebugLayerRenderResources::unitQuadMesh(*((md::DebugLayerRenderResources **)this + 6));
              md::DebugRenderLayer::renderInstancedMesh((uint64_t)this, *((void **)a2 + 1), (double *)v313, __dst, v259 != 0, (uint64_t)v260, (uint64_t)&v306, v261, (uint64_t *)&v302);
              __int16 v262 = v297;
              if (*(unsigned __int8 *)(v299 + 3776) - 1 < 3) {
                __int16 v262 = v240;
              }
              long long v263 = v262[5];
              *(_OWORD *)&v313[64] = v262[4];
              *(_OWORD *)v314 = v263;
              long long v264 = v262[7];
              *(_OWORD *)&v314[16] = v262[6];
              *(_OWORD *)&v314[32] = v264;
              long long v265 = v262[1];
              *(_OWORD *)unint64_t v313 = *v262;
              *(_OWORD *)&v313[16] = v265;
              long long v267 = v262[3];
              *(_OWORD *)&v313[32] = v262[2];
              v266.i32[1] = *(_DWORD *)&v313[36];
              *(_OWORD *)&v313[48] = v267;
              v266.i32[0] = *(_DWORD *)v239;
              *(float32x4_t *)__dst = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v266))), v300);
              int v268 = *(unsigned __int8 *)(v239 + 12);
              v269 = v312;
              long long v270 = (void *)md::DebugLayerRenderResources::icoSphere(*((md::DebugLayerRenderResources **)this + 6));
              md::DebugRenderLayer::renderInstancedMesh((uint64_t)this, *((void **)a2 + 1), (double *)v313, __dst, v268 != 0, (uint64_t)v269, (uint64_t)&v303, v270, (uint64_t *)&v302);
              v239 += 40;
            }
            while (v239 != v296);
          }
          v271 = (std::__shared_weak_count *)v302.__r_.__value_.__l.__size_;
          if (v302.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(v302.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
            std::__shared_weak_count::__release_weak(v271);
          }
          long long v211 = (void *)*v294;
        }
        while (*v294);
      }
      md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v302);
      long long v212 = (unsigned int *)v293[13];
      long long v213 = (unsigned int *)v293[14];
      while (v212 != v213)
      {
        v236 = (uint64_t *)*((void *)v212 + 2);
        uint64_t v237 = (uint64_t *)*((void *)v212 + 3);
        while (v236 != v237)
        {
          if (*((unsigned char *)v212 + 8))
          {
            memset(&v314[8], 0, 32);
            memset(&v313[8], 0, 72);
            *(void *)unint64_t v313 = 0x3FF0000000000000;
            *(void *)&v313[40] = 0x3FF0000000000000;
            *(void *)v314 = 0x3FF0000000000000;
            *(void *)&v314[40] = 0x3FF0000000000000;
            *(float32x4_t *)__dst = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)*v212))), v300);
            md::DebugRenderLayer::renderTriangulatedLines((uint64_t)this, a2, (double *)v313, __dst, v236, (uint64_t)v312, (uint64_t *)&v302, *((float *)v212 + 1));
          }
          else
          {
            memset(&v314[8], 0, 32);
            memset(&v313[8], 0, 72);
            *(void *)unint64_t v313 = 0x3FF0000000000000;
            *(void *)&v313[40] = 0x3FF0000000000000;
            *(void *)v314 = 0x3FF0000000000000;
            *(void *)&v314[40] = 0x3FF0000000000000;
            *(float32x4_t *)__dst = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)*v212))), v300);
            md::DebugRenderLayer::renderLines((uint64_t)this, *((void **)a2 + 1), (double *)v313, __dst, v236, (uint64_t)v312, &v302);
          }
          v236 += 3;
        }
        v212 += 10;
      }
      uint64_t v272 = v293[10];
      uint64_t v273 = v293[11];
      if (v272 != v273) {
        break;
      }
LABEL_394:
      long long v277 = (std::__shared_weak_count *)v302.__r_.__value_.__l.__size_;
      if (v302.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v302.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
        std::__shared_weak_count::__release_weak(v277);
      }
      long long v209 = v292 + 8;
      if (v292 + 8 == v291) {
        goto LABEL_397;
      }
    }
    while (1)
    {
      v310 = v309;
      uint64_t v304 = v303;
      uint64_t v274 = *(void *)(v272 + 16);
      uint64_t v275 = *(void *)(v272 + 24);
      if (v274 != v275) {
        break;
      }
LABEL_393:
      v272 += 40;
      if (v272 == v273) {
        goto LABEL_394;
      }
    }
    while (1)
    {
      *(void *)unint64_t v313 = this;
      *(void *)&v313[8] = a2;
      *(void *)&v313[16] = v272;
      *(void *)&v313[24] = v272;
      *(void *)&v313[32] = &v312;
      *(void *)&v313[40] = &v302;
      *(void *)&v313[48] = this;
      *(void *)&v313[56] = a2;
      *(void *)&v313[64] = v272;
      *(void *)&v313[72] = v272;
      *(void *)v314 = &v312;
      *(void *)&v314[8] = &v302;
      *(void *)&v314[16] = this;
      *(void *)&v314[24] = a2;
      *(void *)&v314[32] = v272;
      *(void *)&v314[40] = v272;
      v315 = &v312;
      char v316 = &v302;
      uint64_t v276 = *(unsigned int *)(v274 + 104);
      if (v276 == -1) {
        break;
      }
      __dst[0] = v313;
      ((void (*)(void **, uint64_t))off_1EF58FB10[v276])(__dst, v274);
      v274 += 112;
      if (v274 == v275) {
        goto LABEL_393;
      }
    }
LABEL_401:
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_436:
    __break(1u);
    JUMPOUT(0x1A1C55AACLL);
  }
LABEL_397:
  if (*(void *)a2)
  {
    if (objc_opt_respondsToSelector())
    {
      uint64_t v278 = (ggl::DebugConsole *)[*(id *)a2 debugConsoleForId:1];
      if (v278) {
        ggl::DebugConsole::begin(v278);
      }
    }
  }
  if (v303)
  {
    uint64_t v304 = v303;
    operator delete(v303);
  }
  if (v306)
  {
    v307 = v306;
    operator delete(v306);
  }
  if (v309)
  {
    v310 = v309;
    operator delete(v309);
  }
LABEL_423:

  if (__p) {
    operator delete(__p);
  }
  if (!v322)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_436;
  }
  (*(void (**)(void *))(*v322 + 48))(v322);
  double result = v322;
  if (v322 == v321) {
    return (void *)(*(uint64_t (**)(void *))(v321[0] + 32))(v321);
  }
  if (v322) {
    return (void *)(*(uint64_t (**)(void))(*v322 + 40))();
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::clear(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = (void *)a1[2];
    while (v2)
    {
      uint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v3[5];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
        uint64_t v5 = (std::__shared_weak_count *)v3[3];
        if (v5)
        {
LABEL_8:
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      else
      {
        uint64_t v5 = (std::__shared_weak_count *)v3[3];
        if (v5) {
          goto LABEL_8;
        }
      }
      operator delete(v3);
    }
    a1[2] = 0;
    uint64_t v6 = a1[1];
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DebugLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DebugLayout", "", v5, 2u);
  }
}

void md::DaVinciGroundLayerDataSource::createLayerData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (unsigned __int16 *)*a3;
  uint64_t v6 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v6)
  {
    while (*v5 != *(unsigned __int16 *)(a1 + 584))
    {
      v5 += 24;
      if (v5 == v6) {
        goto LABEL_10;
      }
    }
  }
  if (v5 == v6 || *((void *)v5 + 4) != 1)
  {
LABEL_10:
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 3);
    uint64_t v8 = *(void *)(v7 + 112);
    unint64_t v9 = *(std::__shared_weak_count **)(v7 + 120);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = v8;
      uint8x8_t v15 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_12:
      memset(v13, 0, sizeof(v13));
      gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v13);
      sp_mut = std::__get_sp_mut((const void *)(a1 + 792));
      std::__sp_mut::lock(sp_mut);
      uint64_t v11 = *(void *)(a1 + 800);
      v12[1] = *(void *)(a1 + 792);
      v12[2] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      std::__sp_mut::unlock(sp_mut);
      md::RegistryManager::vendRegistry((md::RegistryManager *)v12);
    }
  }
  uint64_t v14 = v8;
  uint8x8_t v15 = 0;
  goto LABEL_12;
}

void sub_1A1C563E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  if (a33 != -1) {
    ((void (*)(uint64_t, char *))off_1EF58FA28[a33])(v33 - 49, &a21);
  }
  a33 = -1;
  if (a11 != a13) {
    free(a11);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33 - 136);
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100]((gdc::Registry **)(v33 - 120));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33 - 112);
  uint64_t v35 = *(void **)(v33 - 96);
  if (v35) {
    operator delete(v35);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33 - 72);
  _Unwind_Resume(a1);
}

void sub_1A1C56494()
{
  if (!*(void *)(v0 - 96)) {
    JUMPOUT(0x1A1C56484);
  }
  JUMPOUT(0x1A1C56480);
}

void md::DaVinciGroundTileData::DaVinciGroundTileData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  id v14 = a5;
  uint64_t v15 = *a4;
  if (*a4)
  {
    unint64_t v16 = *(std::__shared_weak_count **)(v15 + 152);
    *(void *)uint64_t v126 = *(void *)(v15 + 144);
    *(void *)&v126[8] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v16 = 0;
    *(_OWORD *)uint64_t v126 = 0uLL;
  }
  int8x16_t v125 = v14;
  md::MapTileData::MapTileData(a1, a2, a3, (uint64_t *)v126, 1);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)a1 = &unk_1EF53F0E8;
  *(void *)(a1 + 632) = &unk_1EF53F130;
  *(void *)(a1 + 1136) = 0;
  unint64_t v17 = (uint64_t **)(a1 + 1128);
  *(void *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(void *)(a1 + 1120) = a1 + 1128;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1144) = a1 + 1152;
  *(_OWORD *)(a1 + 1180) = xmmword_1A28FC710;
  *(void *)(a1 + 1196) = 0x80000000800000;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(void *)(a1 + 1320) = a8;
  *(void *)(a1 + 1328) = *a7;
  uint64_t v18 = a7[1];
  *(void *)(a1 + 1336) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0uLL;
  uint64_t v19 = *a4;
  if (!*a4)
  {
LABEL_87:
    double v117 = 1.0;
    double v118 = 0.0;
    if (*(float *)(a1 + 1192) >= *(float *)(a1 + 1180) && *(float *)(a1 + 1196) >= *(float *)(a1 + 1184))
    {
      float v119 = *(float *)(a1 + 1200);
      float v120 = *(float *)(a1 + 1188);
      if (v119 >= v120)
      {
        float v121 = *(float *)(a1 + 1176);
        double v118 = (float)(v120 / v121);
        double v117 = (float)(v119 / v121);
      }
    }
    double v142 = v118;
    v140[0] = v117;
    gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)(a1 + 168), &v142, v140);
    float v122 = v118;
    float v123 = v117;
    gdc::Tiled::Tiled((gdc::Tiled *)v126, (const QuadTile *)(a1 + 168), v122, v123);
    *(_WORD *)uint64_t v150 = *(_WORD *)v126;
    *(void *)&v150[4] = *(void *)&v126[4];
    long long v151 = *(_OWORD *)&v126[24];
    long long v153 = *(_OWORD *)&v126[48];
    uint64_t v152 = *(void *)&v126[40];
    uint64_t v154 = v127;
    uint64_t v155 = v128;
    long long v157 = v130;
    long long v158 = v131;
    long long v156 = v129;
    memcpy(v159, v132, sizeof(v159));
    long long v160 = v133;
    uint64_t v161 = v134;
    int v162 = v135;
    gdc::Context::setContext<md::components::SharedTransformData,md::components::SharedTransformData>();
  }
  float v21 = *(geo::codec::VectorTile **)(v19 + 144);
  int8x8_t v20 = *(std::__shared_weak_count **)(v19 + 152);
  uint64_t v148 = v21;
  uint64_t v149 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v22 = geo::codec::VectorTile::daVinciExternalMaterialCount(v21);
  uint64_t v23 = geo::codec::VectorTile::daVinciExternalMaterialIDs(v21);
  if (v22)
  {
    uint64_t v24 = v23;
    for (uint64_t i = 0; i != v22; ++i)
    {
      uint64_t v26 = *v17;
      unint64_t v27 = *(void *)(v24 + 8 * i);
      uint64_t v28 = (uint64_t **)(a1 + 1128);
      uint8x8_t v29 = (uint64_t **)(a1 + 1128);
      if (*v17)
      {
        do
        {
          while (1)
          {
            uint8x8_t v29 = (uint64_t **)v26;
            unint64_t v30 = v26[4];
            if (v27 >= v30) {
              break;
            }
            uint64_t v26 = *v29;
            uint64_t v28 = v29;
            if (!*v29) {
              goto LABEL_24;
            }
          }
          if (v30 >= v27) {
            goto LABEL_16;
          }
          uint64_t v26 = v29[1];
        }
        while (v26);
        uint64_t v28 = v29 + 1;
      }
LABEL_24:
      unsigned int v31 = (uint64_t *)operator new(0x28uLL);
      v31[4] = v27;
      uint64_t *v31 = 0;
      v31[1] = 0;
      v31[2] = (uint64_t)v29;
      *uint64_t v28 = v31;
      uint64_t v32 = **(void **)(a1 + 1120);
      if (v32)
      {
        *(void *)(a1 + 1120) = v32;
        unsigned int v31 = *v28;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1128), v31);
      ++*(void *)(a1 + 1136);
LABEL_16:
      ;
    }
  }
  unsigned __int16 v33 = md::DaVinciGroundTileData::_buildingCount(a1, &v148);
  unint64_t v34 = v148;
  uint64_t v35 = (uint64_t *)geo::codec::VectorTile::key(v148);
  char v36 = *(unsigned char *)(a1 + 169);
  uint64_t v37 = *v35;
  int v39 = *(_DWORD *)(a1 + 172);
  int v38 = *(_DWORD *)(a1 + 176);
  uint64_t v40 = geo::codec::VectorTile::daVinciBuildings(v34);
  unint64_t v41 = geo::codec::VectorTile::daVinciSubTileBuildingIndices(v34, v38 & ~(-1 << (v36 - (BYTE1(v37) & 0x3F))), v39 & ~(-1 << (v36 - (BYTE1(v37) & 0x3F))), (v36 - (BYTE1(v37) & 0x3F)));
  if (v33)
  {
    uint64_t v42 = v41;
    for (uint64_t j = 0; j != v33; ++j)
    {
      unint64_t v44 = *(void *)(v40 + 40 * (*v42)->u16[j] + 16);
      uint64_t v45 = *v17;
      int16x8_t v46 = (uint64_t **)(a1 + 1128);
      uint64_t v47 = (uint64_t **)(a1 + 1128);
      if (*v17)
      {
        do
        {
          while (1)
          {
            uint64_t v47 = (uint64_t **)v45;
            unint64_t v48 = v45[4];
            if (v44 >= v48) {
              break;
            }
            uint64_t v45 = *v47;
            int16x8_t v46 = v47;
            if (!*v47) {
              goto LABEL_37;
            }
          }
          if (v48 >= v44) {
            goto LABEL_29;
          }
          uint64_t v45 = v47[1];
        }
        while (v45);
        int16x8_t v46 = v47 + 1;
      }
LABEL_37:
      uint64_t v49 = (uint64_t *)operator new(0x28uLL);
      v49[4] = v44;
      *uint64_t v49 = 0;
      v49[1] = 0;
      v49[2] = (uint64_t)v47;
      *int16x8_t v46 = v49;
      uint64_t v50 = **(void **)(a1 + 1120);
      if (v50)
      {
        *(void *)(a1 + 1120) = v50;
        uint64_t v49 = *v46;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1128), v49);
      ++*(void *)(a1 + 1136);
LABEL_29:
      ;
    }
    unint64_t v34 = v148;
  }
  int v51 = 1 << *(unsigned char *)(a1 + 169);
  float v52 = ((double)(v51 + ~*(_DWORD *)(a1 + 172)) + 0.5) / (double)v51;
  long double v53 = exp(v52 * 6.28318531 + -3.14159265);
  long double v54 = atan(v53) * 114.591559 + -90.0;
  long double v55 = cos(v54 * 0.034906585) * -559.82 + 111132.92;
  long double v56 = v55 + cos(v54 * 0.0698131701) * 1.175;
  long double v57 = v56 + cos(v54 * 0.104719755) * -0.0023;
  long double v58 = v54 * 0.00872664626;
  long double v59 = tan(v54 * 0.00872664626 + 0.78103484);
  long double v60 = log(v59);
  long double v61 = tan(v58 + 0.789761487);
  *(float *)&long double v60 = fabs((log(v61) - v60) * 0.159154943) / (v57 * (float)(1.0 / (float)v51));
  __powidf2();
  *(_DWORD *)(a1 + 1168) = LODWORD(v60);
  *(float *)&double v62 = v62 * 0.0000000249532021;
  *(_DWORD *)(a1 + 1172) = LODWORD(v60);
  *(_DWORD *)(a1 + 1176) = LODWORD(v62);
  float v147 = *(float *)&v60;
  uint64_t v63 = geo::codec::VectorTile::key(v34);
  md::VirtualSubTileHelper::computeScaleAndOffset((uint64_t)&v142, a1 + 168, *(void *)v63, *(unsigned __int16 *)(v63 + 8) | (*(unsigned __int8 *)(v63 + 10) << 16), &v147);
  v126[0] = 0;
  LOBYTE(v127) = 0;
  if (v146)
  {
    *(_DWORD *)uint64_t v126 = 1065353216;
    *(_OWORD *)&v126[4] = 0uLL;
    *(_DWORD *)&v126[20] = 1065353216;
    *(_OWORD *)&v126[24] = 0uLL;
    *(_DWORD *)&v126[40] = 1065353216;
    *(void *)&v126[44] = 0;
    *(void *)&v126[52] = 0;
    *(_DWORD *)&v126[60] = 1065353216;
    LOBYTE(v127) = 1;
    v64.i64[0] = v144;
    v65.i64[0] = *(void *)v126;
    float32x4_t v66 = (float32x4_t)vzip1q_s32(v64, v64);
    int8x16_t v67 = (int8x16_t)vmulq_f32(v66, *(float32x4_t *)&v126[8]);
    int8x16_t v68 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v126[8], (float32x4_t)xmmword_1A28FCDA0);
    float32x4_t v69 = vmlaq_f32((float32x4_t)vextq_s8(v68, v68, 8uLL), (float32x4_t)xmmword_1A28FCDA0, v65);
    int8x16_t v70 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v126[8], (float32x4_t)xmmword_1A28FD160);
    float32x4_t v71 = vmlaq_f32((float32x4_t)vextq_s8(v70, v70, 8uLL), (float32x4_t)xmmword_1A28FD160, v65);
    *(void *)&v126[8] = v71.i64[1];
    *(void *)&v126[16] = v69.i64[0];
    *(float32x4_t *)&v126[48] = vaddq_f32(*(float32x4_t *)&v126[48], vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v67, v67, 8uLL), v65, v66), *(float32x4_t *)&v126[32], v145));
    v72.i32[0] = 0;
    v72.i32[3] = 0;
    *(uint64_t *)((char *)v72.i64 + 4) = HIDWORD(v142);
    v71.i64[1] = v69.i64[1];
    float32x4_t v73 = (float32x4_t)vzip1q_s32(v72, v72);
    int8x16_t v74 = (int8x16_t)vmulq_f32(v73, *(float32x4_t *)&v126[8]);
    float32x4_t v75 = vmlaq_f32((float32x4_t)vextq_s8(v74, v74, 8uLL), v71, v73);
    float32x4_t v76 = (float32x4_t)vzip1q_s32((int32x4_t)LODWORD(v142), (int32x4_t)LODWORD(v142));
    int8x16_t v77 = (int8x16_t)vmulq_f32(v76, *(float32x4_t *)&v126[8]);
    *(float32x4_t *)uint64_t v126 = vmlaq_f32((float32x4_t)vextq_s8(v77, v77, 8uLL), v71, v76);
    *(float32x4_t *)&v126[16] = v75;
    *(float32x4_t *)&v126[32] = vmulq_n_f32(*(float32x4_t *)&v126[32], v143);
  }
  int v78 = geo::codec::VectorTile::daVinciDecalCount(v34);
  uint64_t v79 = geo::codec::VectorTile::daVinciDecals(v34);
  if (v78)
  {
    uint64_t v80 = v79;
    for (uint64_t k = 0; k != v78; ++k)
    {
      unint64_t v82 = *(void *)(v80 + 72 * k);
      uint64_t v83 = *v17;
      long long v84 = (uint64_t **)(a1 + 1128);
      uint64_t v85 = (uint64_t **)(a1 + 1128);
      if (*v17)
      {
        do
        {
          while (1)
          {
            uint64_t v85 = (uint64_t **)v83;
            unint64_t v86 = v83[4];
            if (v82 >= v86) {
              break;
            }
            uint64_t v83 = *v85;
            long long v84 = v85;
            if (!*v85) {
              goto LABEL_53;
            }
          }
          if (v86 >= v82) {
            goto LABEL_45;
          }
          uint64_t v83 = v85[1];
        }
        while (v83);
        long long v84 = v85 + 1;
      }
LABEL_53:
      uint64_t v87 = (uint64_t *)operator new(0x28uLL);
      v87[4] = v82;
      *uint64_t v87 = 0;
      v87[1] = 0;
      v87[2] = (uint64_t)v85;
      *long long v84 = v87;
      uint64_t v88 = **(void **)(a1 + 1120);
      if (v88)
      {
        *(void *)(a1 + 1120) = v88;
        uint64_t v87 = *v84;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1128), v87);
      ++*(void *)(a1 + 1136);
LABEL_45:
      ;
    }
    unint64_t v34 = v148;
  }
  uint64_t v89 = geo::codec::VectorTile::daVinciRenderables(v34);
  int8x16_t v90 = v148;
  uint64_t v91 = geo::codec::VectorTile::daVinciExternalAssetIDs(v148);
  unsigned int v92 = geo::codec::VectorTile::daVinciRenderableCount(v90);
  md::DaVinciGroundTileData::_buildAssetRequests(a1, v89, v91, v92);
  uint64_t v93 = geo::codec::VectorTile::daVinciLandmarks(v90);
  uint64_t v94 = geo::codec::VectorTile::daVinciLandmarkAssetIDs(v90);
  unsigned int v95 = geo::codec::VectorTile::daVinciLandmarkCount(v90);
  md::DaVinciGroundTileData::_buildAssetRequests(a1, v93, v94, v95);
  uint64_t v96 = +[VKDebugSettings sharedSettings];
  char v97 = [v96 daVinciRoundBuildings];

  unsigned int v98 = *(unsigned __int8 *)(a1 + 169);
  float v99 = v147;
  uint64_t v100 = +[VKDebugSettings sharedSettings];
  [v100 daVinciBuildingRoundingRadius];
  float v102 = v101;

  if (v98 >= 0x10 && (v97 & 1) != 0) {
    float v103 = v102 * v99;
  }
  else {
    float v103 = 0.0;
  }
  float v104 = 0.5236;
  if (v98 == 16) {
    float v104 = 1.5708;
  }
  if (v98 == 17) {
    float v104 = 0.7854;
  }
  *(void *)&v140[0] = __PAIR64__(LODWORD(v104), LODWORD(v103));
  v140[1] = 2.75516175;
  int v141 = 1056964608;
  unsigned int v105 = geo::codec::VectorTile::daVinciMeshCount(v90);
  unsigned __int16 v106 = md::DaVinciGroundTileData::_buildingCount(a1, &v148);
  uint64_t v107 = geo::codec::VectorTile::daVinciDecalCount(v90);
  unint64_t v108 = (unsigned __int16)(v105 + v106 + v107);
  std::vector<md::Mesh>::reserve(a1 + 1024, v108);
  unint64_t v139 = (v107 << 32) | (v108 << 48) | ((unint64_t)v105 << 16) | v106;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)[v125 gglDevice] + 24))(&v138);
  uint64_t v109 = v149;
  if (v149) {
    atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v151 = 0;
  long long v110 = operator new(0x48uLL);
  void *v110 = &unk_1EF5755E8;
  v110[1] = a1;
  v110[2] = v90;
  v110[3] = v109;
  if (v109) {
    atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v110[4] = a6;
  v110[5] = &v139;
  v110[6] = v140;
  v110[7] = &v142;
  v110[8] = v126;
  *(void *)&long long v151 = v110;
  uint64_t v137 = 0;
  uint64_t v136 = 0;
  (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v138 + 16))(v138, v150, &v136);
  uint64_t v111 = v137;
  if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  if ((unsigned char *)v151 == v150)
  {
    (*(void (**)(unsigned char *))(*(void *)v150 + 32))(v150);
    if (!v109)
    {
LABEL_79:
      if (v138)
      {
        uint64_t v112 = (*(uint64_t (**)(uint64_t))(*(void *)v138 + 24))(v138);
        uint64_t v113 = v138;
        uint64_t v138 = 0;
        *(void *)uint64_t v150 = v113;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v112 + 48))(v112, v150);
        uint64_t v114 = *(void *)v150;
        *(void *)uint64_t v150 = 0;
        if (v114) {
          (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
        }
        uint64_t v115 = v138;
        uint64_t v138 = 0;
        if (v115) {
          (*(void (**)(uint64_t))(*(void *)v115 + 8))(v115);
        }
      }
      int8x16_t v116 = v149;
      if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
      goto LABEL_87;
    }
  }
  else
  {
    if ((void)v151) {
      (*(void (**)(void))(*(void *)v151 + 40))();
    }
    if (!v109) {
      goto LABEL_79;
    }
  }
  if (!atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
  }
  goto LABEL_79;
}

void sub_1A1C574D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15)
{
  uint64_t v63 = v16;
  uint64_t v19 = v17[5];
  v17[5] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  operator delete(v17);
  if (*(void *)(v15 + 1344))
  {
    std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::__clear[abi:nn180100]((uint64_t *)(v15 + 1344));
    operator delete(*(void **)(v15 + 1344));
  }
  int8x8_t v20 = *(std::__shared_weak_count **)(v15 + 1336);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  float v21 = *(std::__shared_weak_count **)(v15 + 1312);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  int v22 = *(void **)(v15 + 1280);
  if (v22)
  {
    *(void *)(v15 + 1288) = v22;
    operator delete(v22);
    uint64_t v23 = *(void **)(v15 + 1256);
    if (!v23)
    {
LABEL_13:
      uint64_t v24 = *(void **)(v15 + 1232);
      if (!v24) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v23 = *(void **)(v15 + 1256);
    if (!v23) {
      goto LABEL_13;
    }
  }
  *(void *)(v15 + 1264) = v23;
  operator delete(v23);
  uint64_t v24 = *(void **)(v15 + 1232);
  if (!v24)
  {
LABEL_15:
    uint8x8_t v25 = *a10;
    if (*a10)
    {
      *(void *)(v15 + 1216) = v25;
      operator delete(v25);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v15 + 1152));
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v15 + 1128));
    uint64_t v26 = *(void **)(v15 + 1096);
    if (v26)
    {
      unint64_t v27 = *(void **)(v15 + 1104);
      uint64_t v28 = *(void **)(v15 + 1096);
      if (v27 != v26)
      {
        do
        {
          uint8x8_t v29 = (void *)*(v27 - 3);
          if (v29)
          {
            do
            {
              unint64_t v30 = (void *)*v29;
              operator delete(v29);
              uint8x8_t v29 = v30;
            }
            while (v30);
          }
          uint64_t v32 = (void *)*(v27 - 5);
          v27 -= 5;
          unsigned int v31 = v32;
          *unint64_t v27 = 0;
          if (v32) {
            operator delete(v31);
          }
        }
        while (v27 != v26);
        uint64_t v28 = *(void **)(v15 + 1096);
      }
      *(void *)(v15 + 1104) = v26;
      operator delete(v28);
    }
    a15 = v15 + 1072;
    std::vector<md::DaVinciGroundTileData::RibbonAsset>::__destroy_vector::operator()[abi:nn180100]((void ***)&a15);
    uint64_t v33 = *(void *)(v15 + 1048);
    if (v33)
    {
      uint64_t v34 = *(void *)(v15 + 1056);
      uint64_t v35 = *(void **)(v15 + 1048);
      if (v34 != v33)
      {
        do
        {
          char v36 = *(std::__shared_weak_count **)(v34 - 8);
          if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
          v34 -= 16;
        }
        while (v34 != v33);
        uint64_t v35 = *(void **)(v15 + 1048);
      }
      *(void *)(v15 + 1056) = v33;
      operator delete(v35);
    }
    a15 = v63;
    std::vector<md::Mesh>::__destroy_vector::operator()[abi:nn180100]((void ***)&a15);
    uint64_t v37 = *(void *)(v15 + 1000);
    if (v37)
    {
      uint64_t v42 = *(void *)(v15 + 1008);
      uint8x8_t v43 = *(void **)(v15 + 1000);
      if (v42 != v37)
      {
        do
        {
          unint64_t v44 = *(std::__shared_weak_count **)(v42 - 8);
          if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
          v42 -= 16;
        }
        while (v42 != v37);
        uint8x8_t v43 = *(void **)(v15 + 1000);
      }
      *(void *)(v15 + 1008) = v37;
      operator delete(v43);
      int v38 = *(char **)(v15 + 976);
      if (!v38)
      {
LABEL_41:
        int v39 = *(char **)(v15 + 952);
        if (!v39) {
          goto LABEL_42;
        }
        goto LABEL_61;
      }
    }
    else
    {
      int v38 = *(char **)(v15 + 976);
      if (!v38) {
        goto LABEL_41;
      }
    }
    uint64_t v45 = *(char **)(v15 + 984);
    int16x8_t v46 = v38;
    if (v45 != v38)
    {
      do
      {
        uint64_t v47 = (std::__shared_weak_count *)*((void *)v45 - 1);
        if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
        v45 -= 16;
      }
      while (v45 != v38);
      int16x8_t v46 = *(char **)(v15 + 976);
    }
    *(void *)(v15 + 984) = v38;
    operator delete(v46);
    int v39 = *(char **)(v15 + 952);
    if (!v39)
    {
LABEL_42:
      uint64_t v40 = *(void **)(v15 + 928);
      if (!v40) {
        goto LABEL_43;
      }
      goto LABEL_69;
    }
LABEL_61:
    unint64_t v48 = *(char **)(v15 + 960);
    uint64_t v49 = v39;
    if (v48 != v39)
    {
      do
      {
        uint64_t v50 = (std::__shared_weak_count *)*((void *)v48 - 1);
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        v48 -= 16;
      }
      while (v48 != v39);
      uint64_t v49 = *(char **)(v15 + 952);
    }
    *(void *)(v15 + 960) = v39;
    operator delete(v49);
    uint64_t v40 = *(void **)(v15 + 928);
    if (!v40)
    {
LABEL_43:
      unint64_t v41 = *(std::__shared_weak_count **)(v15 + 920);
      if (!v41) {
        goto LABEL_72;
      }
LABEL_70:
      if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
LABEL_72:
      int v51 = *(std::__shared_weak_count **)(v15 + 904);
      if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      float v52 = *(std::__shared_weak_count **)(v15 + 888);
      if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      long double v53 = *(std::__shared_weak_count **)(v15 + 872);
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      long double v54 = *(std::__shared_weak_count **)(v15 + 856);
      if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      long double v55 = *(std::__shared_weak_count **)(v15 + 840);
      if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      long double v56 = *(std::__shared_weak_count **)(v15 + 824);
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      long double v57 = *(std::__shared_weak_count **)(v15 + 808);
      if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      long double v58 = *(std::__shared_weak_count **)(v15 + 792);
      if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      long double v59 = *(std::__shared_weak_count **)(v15 + 776);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      long double v60 = *(std::__shared_weak_count **)(v15 + 760);
      if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
      long double v61 = *(std::__shared_weak_count **)(v15 + 744);
      if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
      double v62 = *(std::__shared_weak_count **)(v15 + 728);
      if (v62)
      {
        if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      md::MapTileData::~MapTileData((md::MapTileData *)v15);

      _Unwind_Resume(a1);
    }
LABEL_69:
    *(void *)(v15 + 936) = v40;
    operator delete(v40);
    unint64_t v41 = *(std::__shared_weak_count **)(v15 + 920);
    if (!v41) {
      goto LABEL_72;
    }
    goto LABEL_70;
  }
LABEL_14:
  *(void *)(v15 + 1240) = v24;
  operator delete(v24);
  goto LABEL_15;
}

uint64_t geo::codec::VectorTile::daVinciMeshCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1024);
}

uint64_t md::DaVinciGroundTileData::_buildingCount(uint64_t a1, geo::codec::VectorTile **a2)
{
  os_signpost_id_t v4 = +[VKDebugSettings sharedSettings];
  char v5 = [v4 compressedBuildingsDisabled];

  if ((v5 & 1) != 0 || (uint64_t result = geo::codec::VectorTile::daVinciBuildingVertices(*a2)) != 0)
  {
    uint64_t v7 = geo::codec::VectorTile::key(*a2);
    int v8 = -1 << (*(unsigned char *)(a1 + 169) - (*(unsigned char *)(v7 + 1) & 0x3F));
    unint64_t v9 = geo::codec::VectorTile::daVinciSubTileBuildingIndices(*a2, *(_DWORD *)(a1 + 176) & ~v8, *(_DWORD *)(a1 + 172) & ~v8, (*(unsigned char *)(a1 + 169) - (*(unsigned char *)(v7 + 1) & 0x3F)));
    return (unint64_t)((char *)v9[1] - (char *)*v9) >> 1;
  }
  return result;
}

void sub_1A1C57F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t geo::codec::VectorTile::daVinciBuildingVertices(geo::codec::VectorTile *this)
{
  return *((void *)this + 282);
}

uint64_t geo::codec::VectorTile::daVinciDecalCount(geo::codec::VectorTile *this)
{
  return (unsigned __int16)(-29127 * ((*((_DWORD *)this + 552) - *((_DWORD *)this + 550)) >> 3));
}

uint64_t md::DaVinciGroundTileData::_buildAssetRequests(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4)
  {
    int v4 = 0;
    unsigned __int16 v5 = 0;
    int8x8_t v20 = (uint64_t **)(result + 1152);
    uint64_t v28 = result;
    uint64_t v24 = a2;
    do
    {
      unsigned int v6 = v5;
      if (*(unsigned char *)(a2 + 48 * v5 + 45))
      {
        unint64_t v7 = v26 & 0xFFFFFFFFFFFFFF00;
        unsigned int v25 = v6;
        uint64_t v8 = a2 + 48 * v6;
        uint64_t v9 = *(void *)(v8 + 16);
        BOOL v10 = v9 != 0;
        if (v9) {
          unint64_t v7 = *(void *)(v8 + 16);
        }
        unint64_t v26 = v7;
        int v23 = v4;
        uint64_t v11 = v20;
        unint64_t v12 = *(void *)(a3 + 8 * (unsigned __int16)v4);
        if (*(unsigned char *)(v8 + 44)) {
          char v13 = *(unsigned char *)(v8 + 44);
        }
        else {
          char v13 = 2;
        }
        while (1)
        {
          id v14 = *v11;
          uint64_t v15 = v11;
          if (!*v11) {
            break;
          }
          while (1)
          {
            uint64_t v11 = (uint64_t **)v14;
            unint64_t v16 = v14[4];
            if (v12 < v16) {
              break;
            }
            if (v16 >= v12) {
              goto LABEL_20;
            }
            id v14 = v11[1];
            if (!v14)
            {
              uint64_t v15 = v11 + 1;
              goto LABEL_16;
            }
          }
        }
LABEL_16:
        unint64_t v17 = operator new(0x30uLL);
        v17[4] = v12;
        *((unsigned char *)v17 + 40) = v13;
        *unint64_t v17 = 0;
        v17[1] = 0;
        v17[2] = v11;
        std::__shared_weak_count *v15 = v17;
        uint64_t v18 = **(void **)(v28 + 1144);
        if (v18)
        {
          *(void *)(v28 + 1144) = v18;
          uint64_t v19 = *v15;
        }
        else
        {
          uint64_t v19 = v17;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v28 + 1152), v19);
        uint64_t result = v28;
        ++*(void *)(v28 + 1160);
LABEL_20:
        unint64_t v27 = v27 & 0xFFFFFFFFFFFFFF00 | v10;
        if (*(_WORD *)(v24 + 48 * v25 + 42)) {
          gdc::Registry::create(*(gdc::Registry **)(result + 1320));
        }
        a2 = v24;
        int v4 = v23 + 1;
        LOWORD(v6) = v25;
      }
      unsigned __int16 v5 = v6 + 1;
    }
    while (a4 > (unsigned __int16)(v6 + 1));
  }
  return result;
}

void std::vector<md::Mesh>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      abort();
    }
    int v4 = *(char **)(a1 + 8);
    uint64_t v5 = 80 * a2;
    unsigned int v6 = (char *)operator new(80 * a2);
    unint64_t v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *((_OWORD *)v4 - 5);
        v4 -= 80;
        *((_OWORD *)v9 - 5) = v10;
        v9 -= 80;
        *(void *)int v4 = 0;
        *((void *)v4 + 1) = 0;
        long long v11 = *((_OWORD *)v4 + 1);
        long long v12 = *((_OWORD *)v4 + 2);
        *(_OWORD *)(v9 + 46) = *(_OWORD *)(v4 + 46);
        *((_OWORD *)v9 + 1) = v11;
        *((_OWORD *)v9 + 2) = v12;
        *((_OWORD *)v9 + 4) = *((_OWORD *)v4 + 4);
        *((void *)v4 + 8) = 0;
        *((void *)v4 + 9) = 0;
      }
      while (v4 != v2);
      uint64_t v2 = *(char **)a1;
      char v13 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      while (v13 != v2)
      {
        id v14 = (std::__shared_weak_count *)*((void *)v13 - 1);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          uint64_t v15 = (std::__shared_weak_count *)*((void *)v13 - 9);
          if (v15)
          {
LABEL_12:
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        else
        {
          uint64_t v15 = (std::__shared_weak_count *)*((void *)v13 - 9);
          if (v15) {
            goto LABEL_12;
          }
        }
        v13 -= 80;
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

uint64_t geo::codec::VectorTile::daVinciRenderableCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1084);
}

void gdc::Context::setContext<md::components::SharedTransformData,md::components::SharedTransformData>()
{
}

void sub_1A1C58E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1C58E48(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

gdc::Tiled *gdc::Tiled::Tiled(gdc::Tiled *this, const QuadTile *a2, float a3, float a4)
{
  unsigned __int8 level = a2->_level;
  *(unsigned char *)this = a2->_type;
  *((unsigned char *)this + 1) = level;
  uint64_t v8 = *(void *)&a2->_yIdx;
  *(void *)((char *)this + 4) = v8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = xmmword_1A28FC920;
  *(int64x2_t *)((char *)this + 88) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)((char *)this + 104) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *((void *)this + 15) = 0xFFEFFFFFFFFFFFFFLL;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *(float *)&uint64_t v8 = ((double)((1 << level) + ~v8) + 0.5) / (double)(1 << level);
  long double v9 = exp(*(float *)&v8 * 6.28318531 + -3.14159265);
  long double v10 = atan(v9) * 114.591559 + -90.0;
  long double v11 = cos(v10 * 0.034906585) * -559.82 + 111132.92;
  long double v12 = v11 + cos(v10 * 0.0698131701) * 1.175;
  long double v13 = v12 + cos(v10 * 0.104719755) * -0.0023;
  long double v14 = v10 * 0.00872664626;
  long double v15 = tan(v10 * 0.00872664626 + 0.78103484);
  long double v16 = log(v15);
  long double v17 = tan(v14 + 0.789761487);
  *(float *)&long double v16 = fabs((log(v17) - v16) * 0.159154943) / (v13 * (float)(1.0 / (float)(1 << level)));
  __powidf2();
  *(float *)&double v18 = v18 * 0.0000000249532021;
  *((_DWORD *)this + 112) = LODWORD(v16);
  *((_DWORD *)this + 113) = LODWORD(v16);
  *((_DWORD *)this + 114) = LODWORD(v18);
  double v20 = a4;
  double v21 = a3;
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)this, &v21, &v20);
  return this;
}

uint64_t geo::codec::VectorTile::daVinciRenderables(geo::codec::VectorTile *this)
{
  return *((void *)this + 272);
}

void md::RegistryManager::vendRegistry(md::RegistryManager *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1A1C59948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 == v17)
  {
    (*(void (**)(uint64_t *))(a13 + 32))(&a13);
  }
  else if (a16)
  {
    (*(void (**)(void))(*(void *)a16 + 40))();
  }
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100](v16);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::VectorTile::daVinciExternalMaterialCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1400);
}

uint64_t geo::codec::VectorTile::daVinciExternalMaterialIDs(geo::codec::VectorTile *this)
{
  return *((void *)this + 353);
}

uint64_t geo::codec::VectorTile::daVinciLandmarkAssetIDs(geo::codec::VectorTile *this)
{
  return *((void *)this + 352);
}

uint64_t geo::codec::VectorTile::daVinciExternalAssetIDs(geo::codec::VectorTile *this)
{
  return *((void *)this + 351);
}

uint64_t geo::codec::VectorTile::daVinciLandmarkCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1092);
}

uint64_t geo::codec::VectorTile::daVinciLandmarks(geo::codec::VectorTile *this)
{
  return *((void *)this + 274);
}

uint64_t geo::codec::VectorTile::daVinciBuildings(geo::codec::VectorTile *this)
{
  return *((void *)this + 290);
}

uint64_t geo::codec::VectorTile::daVinciDecals(geo::codec::VectorTile *this)
{
  return *((void *)this + 275);
}

void md::VirtualSubTileHelper::computeScaleAndOffset(uint64_t a1, uint64_t a2, unint64_t a3, int a4, float *a5)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 1);
  unsigned int v7 = (a3 >> 8) & 0x3F;
  if (v7 >= v6)
  {
    char v9 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    char v9 = 1;
    int v10 = 1 << v6;
    uint64_t v11 = *(int *)(a2 + 8);
    int v12 = ~*(_DWORD *)(a2 + 4);
    long long v47 = 0u;
    uint64_t v49 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v48 = 0u;
    uint64_t v51 = 0;
    double v44 = (double)v10;
    *(double *)&long long v47 = (double)v10;
    double v50 = (double)v10;
    double v13 = -(double)v10 / (double)v10;
    double v52 = v13 * (double)v11;
    double v53 = v13 * (double)(v10 + v12);
    long long v54 = xmmword_1A28FCCC0;
    int v14 = 1 << v7;
    double v15 = (double)(int)((1 << v7) + (~((a3 >> 40) | (a4 << 24)) | 0xFC000000));
    double v16 = 1.0 / (double)(1 << v7);
    uint64_t v36 = 0;
    uint64_t v38 = 0;
    uint64_t v40 = 0;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    double v32 = v16;
    double v35 = v16;
    double v39 = v16;
    double v41 = v16 * (double)((a3 >> 14) & 0x3FFFFFF);
    double v42 = v16 * v15;
    long long v43 = xmmword_1A28FCCC0;
    gm::operator*<double,4,4,4>(v55, &v44, &v32);
    float v17 = (v15 + 0.5) / (double)v14;
    long double v18 = exp(v17 * 6.28318531 + -3.14159265);
    long double v19 = atan(v18) * 114.591559 + -90.0;
    long double v20 = cos(v19 * 0.034906585) * -559.82 + 111132.92;
    long double v21 = v20 + cos(v19 * 0.0698131701) * 1.175;
    long double v22 = v21 + cos(v19 * 0.104719755) * -0.0023;
    long double v23 = v19 * 0.00872664626;
    long double v24 = tan(v19 * 0.00872664626 + 0.78103484);
    double v25 = log(v24);
    long double v26 = tan(v23 + 0.789761487);
    float v27 = fabs((log(v26) - v25) * 0.159154943) / (v22 * (float)(1.0 / (float)v14));
    *a5 = v27;
    v28.f64[0] = v55[5];
    float v29 = v55[0];
    float64x2_t v30 = v56;
    float v31 = v57;
    *(float *)a1 = v29;
    v28.f64[1] = v55[10];
    *(float32x4_t *)(a1 + 4) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28), v30);
    *(float *)(a1 + 20) = v31;
  }
  *(unsigned char *)(a1 + 24) = v9;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void sub_1A1C59EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C59F44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C59FA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls18UniqueMaterialDataEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v10 = (char *)operator new(24 * v9);
    }
    else
    {
      int v10 = 0;
    }
    uint64_t v11 = &v10[24 * v6];
    *(void *)uint64_t v11 = 0x3209EBE3B62CF3D3;
    *((void *)v11 + 1) = "md::ls::UniqueMaterialData]";
    *((void *)v11 + 2) = 26;
    int v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      uint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0x3209EBE3B62CF3D3;
    *((void *)v3 + 1) = "md::ls::UniqueMaterialData]";
    *((void *)v3 + 2) = 26;
    int v4 = v3 + 24;
  }
  a1[1] = v4;
}

void ___ZL39GEOGetVectorKitVKGeoResourceProviderLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "VKGeoResourceProvider");
  uint64_t v1 = (void *)GEOGetVectorKitVKGeoResourceProviderLog(void)::log;
  GEOGetVectorKitVKGeoResourceProviderLog(void)::log = (uint64_t)v0;
}

void ___ZL37GEOGetVectorKitMeshRenderableLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "MeshRenderableLogic");
  uint64_t v1 = (void *)GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  GEOGetVectorKitMeshRenderableLogicLog(void)::log = (uint64_t)v0;
}

void ___ZL36GEOGetVectorKitNonTiledAssetLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "NonTiledAssetLogic");
  uint64_t v1 = (void *)GEOGetVectorKitNonTiledAssetLogicLog(void)::log;
  GEOGetVectorKitNonTiledAssetLogicLog(void)::log = (uint64_t)v0;
}

void ___ZL33GEOGetVectorKitSceneQueryLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "SceneQueryLogic");
  uint64_t v1 = (void *)GEOGetVectorKitSceneQueryLogicLog(void)::log;
  GEOGetVectorKitSceneQueryLogicLog(void)::log = (uint64_t)v0;
}

void ___ZL33GEOGetVectorKitRegistryManagerLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "RegistryManager");
  uint64_t v1 = (void *)GEOGetVectorKitRegistryManagerLog(void)::log;
  GEOGetVectorKitRegistryManagerLog(void)::log = (uint64_t)v0;
}

void ___ZL31GEOGetVectorKitLabelSettingsLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "LabelSettings");
  uint64_t v1 = (void *)GEOGetVectorKitLabelSettingsLog(void)::log;
  GEOGetVectorKitLabelSettingsLog(void)::log = (uint64_t)v0;
}

void ___ZL30GEOGetVectorKitStateCaptureLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "StateCapture");
  uint64_t v1 = (void *)GEOGetVectorKitStateCaptureLog(void)::log;
  GEOGetVectorKitStateCaptureLog(void)::log = (uint64_t)v0;
}

void ___ZL28GEOGetVectorKitStyleLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "StyleLogic");
  uint64_t v1 = (void *)GEOGetVectorKitStyleLogicLog(void)::log;
  GEOGetVectorKitStyleLogicLog(void)::log = (uint64_t)v0;
}

void ___ZL27GEOGetVectorKitVKMapViewLogv_block_invoke_2086()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "VKMapView");
  uint64_t v1 = (void *)GEOGetVectorKitVKMapViewLog(void)::log;
  GEOGetVectorKitVKMapViewLog(void)::log = (uint64_t)v0;
}

void ___ZL27GEOGetVectorKitVKMapViewLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "VKMapView");
  uint64_t v1 = (void *)GEOGetVectorKitVKMapViewLog(void)::log;
  GEOGetVectorKitVKMapViewLog(void)::log = (uint64_t)v0;
}

void md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    unint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        unint64_t v8 = *(unsigned char **)v2;
        unint64_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        unint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::BuildingTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  unint64_t v7 = *(void **)(a1 + 208);
  unint64_t v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  void *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *unint64_t v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::BuildingTileDataRenderable>::disposeElements(uint64_t a1)
{
  float v29 = 0;
  uint64_t v30 = 0;
  float64x2_t v28 = &v29;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      int v4 = &v29;
      uint64_t v5 = &v29;
      if (v29)
      {
        unint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            uint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            unint64_t v6 = *v5;
            int v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          unint64_t v6 = v5[1];
          if (!v6)
          {
            int v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        unint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        uint64_t *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *int v4 = v8;
        if (*v28)
        {
          float64x2_t v28 = (uint64_t **)*v28;
          unint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        unint64_t v2 = *(void **)(a1 + 40);
      }
      unint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  long long v10 = *(void **)a1;
  uint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        float v17 = (void (***)(void))(v16 + 768 * v15);
        long double v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        long double v19 = &v29;
        do
        {
          long double v20 = v18;
          long double v21 = v19;
          unint64_t v22 = v18[4];
          long double v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            long double v23 = (uint64_t **)v20;
            long double v19 = (uint64_t **)v20;
          }
          long double v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          long double v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    long double v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        double v25 = v24;
        long double v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        double v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        long long v10 = v25;
      }
      while (!v12);
    }
    long long v10 = v25;
  }
  while (v25 != v11);
  long long v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      long double v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          float v27 = v26;
          long double v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          float v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          long long v10 = v27;
        }
        while (!v12);
      }
      long long v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A1C5A7D4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::renderablesWillLeaveView(uint64_t a1, char **a2)
{
  unint64_t v6 = (void *)(a1 + 104);
  uint64_t v5 = *(void **)(a1 + 104);
  unint64_t v7 = (void *)(a1 + 88);
  if (v5)
  {
    do
    {
      while (*(float *)(v5[16] + 404) > 0.0)
      {
        uint64_t v5 = (void *)*v5;
        if (!v5) {
          goto LABEL_13;
        }
      }
      unint64_t v8 = (void *)*v5;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v7, v5);
      unint64_t v9 = __p;
      if (__p)
      {
        if (v59)
        {
          if (*((unsigned char *)__p + 112)) {
            *((unsigned char *)__p + 112) = 0;
          }
          long long v10 = (void *)v9[4];
          if (v10 != (void *)v9[6]) {
            free(v10);
          }
        }
        operator delete(v9);
      }
      uint64_t v5 = v8;
    }
    while (v8);
  }
LABEL_13:
  uint64_t v11 = *a2;
  double v57 = a2[1];
  if (*a2 != v57)
  {
    long double v55 = a2;
    float64x2_t v56 = v6;
    while (1)
    {
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 384);
      unint64_t v14 = *(void *)(v13 + 120);
      unint64_t v15 = *(void *)(a1 + 96);
      if (v15)
      {
        uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          unint64_t v2 = *(void *)(v13 + 120);
          if (v14 >= v15) {
            unint64_t v2 = v14 % v15;
          }
        }
        else
        {
          unint64_t v2 = (v15 - 1) & v14;
        }
        float v17 = *(void ***)(*v7 + 8 * v2);
        if (v17)
        {
          long double v18 = *v17;
          if (*v17)
          {
            if (v16.u32[0] >= 2uLL)
            {
              while (1)
              {
                unint64_t v19 = v18[1];
                if (v19 == v14)
                {
                  if (*((unsigned __int8 *)v18 + 16) == *(unsigned __int8 *)(v13 + 16)
                    && *((unsigned __int16 *)v18 + 12) == *(unsigned __int16 *)(v13 + 24)
                    && v18[12] == *(void *)(v13 + 96))
                  {
                    long double v20 = (const void *)v18[4];
                    size_t v21 = v18[5] - (void)v20;
                    unint64_t v22 = *(const void **)(v13 + 32);
                    if (v21 == *(void *)(v13 + 40) - (void)v22 && !memcmp(v20, v22, v21)) {
                      goto LABEL_107;
                    }
                  }
                }
                else
                {
                  if (v19 >= v15) {
                    v19 %= v15;
                  }
                  if (v19 != v2) {
                    goto LABEL_45;
                  }
                }
                long double v18 = (void *)*v18;
                if (!v18) {
                  goto LABEL_45;
                }
              }
            }
            do
            {
              uint64_t v23 = v18[1];
              if (v23 == v14)
              {
                if (*((unsigned __int8 *)v18 + 16) == *(unsigned __int8 *)(v13 + 16)
                  && *((unsigned __int16 *)v18 + 12) == *(unsigned __int16 *)(v13 + 24)
                  && v18[12] == *(void *)(v13 + 96))
                {
                  long double v24 = (const void *)v18[4];
                  size_t v25 = v18[5] - (void)v24;
                  long double v26 = *(const void **)(v13 + 32);
                  if (v25 == *(void *)(v13 + 40) - (void)v26 && !memcmp(v24, v26, v25))
                  {
                    unint64_t v6 = v56;
                    goto LABEL_107;
                  }
                }
              }
              else if ((v23 & (v15 - 1)) != v2)
              {
                break;
              }
              long double v18 = (void *)*v18;
            }
            while (v18);
            unint64_t v6 = v56;
          }
        }
      }
LABEL_45:
      long double v18 = operator new(0x88uLL);
      void *v18 = 0;
      v18[1] = v14;
      *((unsigned char *)v18 + 16) = *(unsigned char *)(v13 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v18 + 3), v13 + 24);
      *((unsigned char *)v18 + 112) = 0;
      if (*(unsigned char *)(v13 + 112))
      {
        *((_DWORD *)v18 + 29) = *(_DWORD *)(v13 + 116);
        *((unsigned char *)v18 + 112) = 1;
      }
      v18[15] = *(void *)(v13 + 120);
      v18[16] = 0;
      float v27 = (float)(unint64_t)(*(void *)(a1 + 112) + 1);
      float v28 = *(float *)(a1 + 120);
      if (!v15 || (float)(v28 * (float)v15) < v27) {
        break;
      }
LABEL_97:
      uint64_t v49 = (void *)*v7;
      double v50 = *(void **)(*v7 + 8 * v2);
      if (v50)
      {
        void *v18 = *v50;
      }
      else
      {
        void *v18 = *v6;
        *unint64_t v6 = v18;
        v49[v2] = v6;
        if (!*v18) {
          goto LABEL_106;
        }
        unint64_t v51 = *(void *)(*v18 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v51 >= v15) {
            v51 %= v15;
          }
        }
        else
        {
          v51 &= v15 - 1;
        }
        double v50 = (void *)(*v7 + 8 * v51);
      }
      void *v50 = v18;
LABEL_106:
      ++*(void *)(a1 + 112);
LABEL_107:
      v18[16] = v12;
      v11 += 8;
      if (v11 == v57)
      {
        double v53 = *v55;
        uint64_t v11 = v55[1];
        goto LABEL_119;
      }
    }
    BOOL v29 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3) {
      BOOL v29 = 1;
    }
    unint64_t v30 = v29 | (2 * v15);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v15 = *(void *)(a1 + 96);
    if (prime <= v15)
    {
      if (prime >= v15) {
        goto LABEL_84;
      }
      unint64_t v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
      if (v15 < 3 || (uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        unint64_t v43 = std::__next_prime(v43);
      }
      else
      {
        uint64_t v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2) {
          unint64_t v43 = v45;
        }
      }
      if (prime <= v43) {
        size_t prime = v43;
      }
      if (prime >= v15)
      {
        unint64_t v15 = *(void *)(a1 + 96);
LABEL_84:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15) {
            unint64_t v2 = v14 % v15;
          }
          else {
            unint64_t v2 = v14;
          }
        }
        else
        {
          unint64_t v2 = (v15 - 1) & v14;
        }
        goto LABEL_97;
      }
      if (!prime)
      {
        double v52 = (void *)*v7;
        *unint64_t v7 = 0;
        if (v52) {
          operator delete(v52);
        }
        unint64_t v15 = 0;
        *(void *)(a1 + 96) = 0;
        goto LABEL_84;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    long long v33 = operator new(8 * prime);
    long long v34 = (void *)*v7;
    *unint64_t v7 = v33;
    if (v34) {
      operator delete(v34);
    }
    uint64_t v35 = 0;
    *(void *)(a1 + 96) = prime;
    do
      *(void *)(*v7 + 8 * v35++) = 0;
    while (prime != v35);
    uint64_t v36 = (void *)*v6;
    if (!*v6)
    {
LABEL_83:
      unint64_t v15 = prime;
      goto LABEL_84;
    }
    size_t v37 = v36[1];
    size_t v38 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v39 = v37 & v38;
      *(void *)(*v7 + 8 * v39) = v6;
      for (uint64_t i = (void *)*v36; *v36; uint64_t i = (void *)*v36)
      {
        size_t v41 = i[1] & v38;
        if (v41 == v39)
        {
          uint64_t v36 = i;
        }
        else if (*(void *)(*v7 + 8 * v41))
        {
          *uint64_t v36 = *i;
          uint64_t v42 = 8 * v41;
          void *i = **(void **)(*v7 + v42);
          **(void **)(*v7 + v42) = i;
        }
        else
        {
          *(void *)(*v7 + 8 * v41) = v36;
          uint64_t v36 = i;
          size_t v39 = v41;
        }
      }
      goto LABEL_83;
    }
    if (v37 >= prime) {
      v37 %= prime;
    }
    *(void *)(*v7 + 8 * v37) = v6;
    long long v46 = (void *)*v36;
    if (!*v36) {
      goto LABEL_83;
    }
    while (1)
    {
      size_t v48 = v46[1];
      if (v48 >= prime) {
        v48 %= prime;
      }
      if (v48 != v37)
      {
        if (!*(void *)(*v7 + 8 * v48))
        {
          *(void *)(*v7 + 8 * v48) = v36;
          goto LABEL_88;
        }
        *uint64_t v36 = *v46;
        uint64_t v47 = 8 * v48;
        *long long v46 = **(void **)(*v7 + v47);
        **(void **)(*v7 + v47) = v46;
        long long v46 = v36;
      }
      size_t v48 = v37;
LABEL_88:
      uint64_t v36 = v46;
      long long v46 = (void *)*v46;
      size_t v37 = v48;
      if (!v46) {
        goto LABEL_83;
      }
    }
  }
  double v53 = *a2;
LABEL_119:
  if (*(unsigned char *)(*(void *)(a1 + 376) + 17) == 1) {
    float v54 = 1.0;
  }
  else {
    float v54 = 0.0;
  }
  md::BuildingRenderLayer::animateTiles(a1, v53, v11, 1.0, 0.0, v54, 0.0);
}

void sub_1A1C5AE00(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 112)) {
    *(unsigned char *)(v1 + 112) = 0;
  }
  uint64_t v3 = *(void **)(v1 + 32);
  if (v3 != *(void **)(v1 + 48)) {
    free(v3);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::animateTiles(uint64_t a1, char *a2, char *a3, float a4, float a5, float a6, float a7)
{
  long long v10 = a2;
  if (!*(unsigned char *)(a1 + 408))
  {
    if (a2 == a3) {
      return;
    }
    unint64_t v27 = a3 - a2 - 8;
    if (v27 >= 8)
    {
      uint64_t v28 = (v27 >> 3) + 1;
      BOOL v29 = (uint64_t *)(a2 + 8);
      uint64_t v30 = v28 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v31 = *(v29 - 1);
        uint64_t v32 = *v29;
        *(_DWORD *)(v31 + 400) = 1065353216;
        *(_DWORD *)(v32 + 400) = 1065353216;
        *(float *)(v31 + 404) = a5;
        *(float *)(v32 + 404) = a5;
        *(float *)(v31 + 412) = a7;
        *(float *)(v32 + 412) = a7;
        v29 += 2;
        v30 -= 2;
      }
      while (v30);
      if (v28 == (v28 & 0x3FFFFFFFFFFFFFFELL)) {
        return;
      }
      long long v10 = &a2[8 * (v28 & 0x3FFFFFFFFFFFFFFELL)];
    }
    do
    {
      uint64_t v33 = *(void *)v10;
      v10 += 8;
      *(_DWORD *)(v33 + 400) = 1065353216;
      *(float *)(v33 + 404) = a5;
      *(float *)(v33 + 412) = a7;
    }
    while (v10 != a3);
    return;
  }
  if (a2 != a3)
  {
    if (a4 <= a5) {
      float v14 = 0.0;
    }
    else {
      float v14 = 1.0;
    }
    if (a5 <= a4) {
      unint64_t v15 = &__block_literal_global_5_13971;
    }
    else {
      unint64_t v15 = &__block_literal_global_13970;
    }
    do
    {
      uint64_t v16 = *(void *)v10;
      float v17 = (double *)(*(void *)v10 + 56);
      md::MercatorTerrainHeightCache::invalidateRect(*(void **)(a1 + 456), v17);
      long double v18 = [[VKTimedAnimation alloc] initWithDuration:0.449999988];
      *(float *)(v16 + 400) = v14;
      *(float *)(v16 + 404) = a4;
      *(float *)(v16 + 412) = a6;
      id v19 = *(id *)(v16 + 424);
      [v19 stop];
      long double v20 = (void *)MEMORY[0x1A6239EB0](v15);
      [(VKTimedAnimation *)v18 setTimingFunction:VKAnimationCurveLinear];
      v38[0] = MEMORY[0x1E4F143A8];
      v38[1] = 3221225472;
      v38[2] = ___ZN2md19BuildingRenderLayer12animateTilesERKN3geo5sliceINSt3__111__wrap_iterIPKPNS_26BuildingTileDataRenderableEEEEEffff_block_invoke_3;
      v38[3] = &unk_1E5A901D0;
      uint64_t v40 = a1;
      uint64_t v41 = v16;
      float v43 = a4;
      float v44 = a5;
      id v21 = v20;
      float v45 = a6;
      float v46 = a7;
      id v39 = v21;
      uint64_t v42 = v17;
      [(VKTimedAnimation *)v18 setStepHandler:v38];
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 3221225472;
      v34[2] = ___ZN2md19BuildingRenderLayer12animateTilesERKN3geo5sliceINSt3__111__wrap_iterIPKPNS_26BuildingTileDataRenderableEEEEEffff_block_invoke_4;
      v34[3] = &__block_descriptor_68_e8_v12__0B8l;
      v34[4] = a1;
      v34[5] = v16;
      float v35 = a4;
      float v36 = a5;
      float v37 = a7;
      v34[6] = v17;
      [(VKAnimation *)v18 setCompletionHandler:v34];
      if (md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 464), &v18->super))
      {
        unint64_t v22 = v18;
        uint64_t v47 = &unk_1EF5593D8;
        size_t v48 = v22;
        uint64_t v23 = v15;
        long double v24 = *(void **)(v16 + 424);
        *(void *)(v16 + 424) = v22;
        size_t v25 = v22;

        unint64_t v15 = v23;
        long double v26 = v48;
        size_t v48 = 0;

        uint64_t v47 = &unk_1EF5593D8;
      }

      v10 += 8;
    }
    while (v10 != a3);
  }
}

void sub_1A1C5B150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1A1C5B4CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::PolygonRenderResources::PolygonRenderResources(md::PolygonRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  uint64_t v325 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  *(_OWORD *)((char *)this + 856) = 0u;
  bzero(this, 0x350uLL);
  long long v6 = 0uLL;
  *((void *)this + 106) = (char *)this + 856;
  *((void *)this + 113) = 0;
  *((unsigned char *)this + 912) = 0;
  *(_OWORD *)((char *)this + 920) = 0u;
  *((unsigned char *)this + 936) = 0;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((void *)this + 128) = 0;
  *((void *)this + 109) = 0;
  *((void *)this + 111) = 0;
  *((void *)this + 110) = 0;
  {
    long long v6 = 0uLL;
    if (v313) {
      operator new();
    }
  }
  *((void *)this + 129) = ggl::Allocator::instance(void)::alloc;
  *((_OWORD *)this + 65) = v6;
  *((_OWORD *)this + 66) = v6;
  *((void *)this + 134) = 0;
  *((void *)this + 135) = 32;
  unint64_t v7 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *unint64_t v7 = 0;
  v7[1] = 0;
  *((void *)this + 133) = v7;
  *((void *)this + 134) = v7;
  *((void *)this + 137) = 0;
  *((void *)this + 139) = 0;
  *((void *)this + 138) = 0;
  *((_DWORD *)this + 280) = 0;
  *((void *)this + 136) = &unk_1EF55A890;
  *(void *)((char *)this + 1124) = 65537;
  *((_DWORD *)this + 283) = 0;
  *((void *)this + 142) = 0x7FFF0200000700;
  *((_WORD *)this + 572) = 0;
  *((unsigned char *)this + 1146) = 3;
  *(void *)((char *)this + 1155) = 0;
  *(void *)((char *)this + 1147) = 0;
  *((unsigned char *)this + 1163) = 0;
  *(void *)((char *)this + 1220) = 0;
  *(void *)((char *)this + 1212) = 0;
  *((_WORD *)this + 638) = 257;
  *((void *)this + 161) = 0;
  *((void *)this + 160) = 0;
  *((unsigned char *)this + 1296) = 0;
  uint64_t v8 = [(VKSharedResources *)v5 shaderLibrary];
  uint64_t v9 = *(void *)(v8 + 80);
  uint64_t v10 = *(void *)(v9 + 1760);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 1768);
  uint64_t v321 = v10;
  v322 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v319[24], 0, 20);
  v319[0] = 1;
  *(_OWORD *)&v319[4] = xmmword_1A28FCEE0;
  *(_DWORD *)&v319[20] = 7;
  char v320 = 15;
  uint64_t v12 = operator new(0x198uLL);
  v12[1] = 0;
  v12[2] = 0;
  *uint64_t v12 = &unk_1EF583A88;
  long long v13 = *(_OWORD *)&a3->colorFormatsCount;
  long long v323 = *(_OWORD *)a3->colorFormats;
  long long v324 = v13;
  uint64_t v14 = ggl::PolygonStroke::MeshPipelineState::MeshPipelineState((uint64_t)(v12 + 3), &v321, (uint64_t)v319, &v323);
  unint64_t v15 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v14;
  *((void *)this + 1) = v12;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v322;
  if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = *(void *)(v8 + 80);
  uint64_t v18 = *(void *)(v17 + 1760);
  id v19 = *(std::__shared_weak_count **)(v17 + 1768);
  uint64_t v321 = v18;
  v322 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v319[20], 0, 24);
  v319[0] = 0;
  *(_OWORD *)&v319[4] = xmmword_1A28FC970;
  char v320 = 0;
  long double v20 = operator new(0x198uLL);
  v20[1] = 0;
  v20[2] = 0;
  void *v20 = &unk_1EF583A88;
  long long v21 = *(_OWORD *)&a3->colorFormatsCount;
  long long v323 = *(_OWORD *)a3->colorFormats;
  long long v324 = v21;
  uint64_t v22 = ggl::PolygonStroke::MeshPipelineState::MeshPipelineState((uint64_t)(v20 + 3), &v321, (uint64_t)v319, &v323);
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = v22;
  *((void *)this + 3) = v20;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  long double v24 = v322;
  if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = *(void *)(v8 + 80);
  uint64_t v26 = *(void *)(v25 + 1784);
  uint64_t v27 = *(void *)(v25 + 1792);
  *(void *)&long long v323 = v26;
  *((void *)&v323 + 1) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v321 = 0;
  uint64_t v28 = (char *)operator new(0x198uLL);
  *((void *)v28 + 1) = 0;
  *((void *)v28 + 2) = 0;
  *(void *)uint64_t v28 = &unk_1EF587B80;
  long long v29 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)uint64_t v319 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v319[16] = v29;
  {
    if (v314)
    {
      {
        if (v314)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B680 = 1;
          }
          ggl::PolygonStrokeMask::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9584538 = &ggl::PolygonStrokeMask::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1E9584540 = 0;
          {
            ggl::PolygonStrokeMask::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E95845C0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E95845C8 = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
          }
          qword_1E9584548 = (uint64_t)&ggl::PolygonStrokeMask::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1E9584550 = xmmword_1A28FCEF0;
        }
      }
      ggl::PolygonStrokeMask::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonStrokeMask::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonStrokeMaskShader::typedReflection(v314);
      qword_1E9584570 = (uint64_t)&ggl::PolygonStrokeMaskShader::typedReflection(void)::ref;
      {
        ggl::PolygonStrokeMask::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9584670 = 0;
        qword_1E9584678 = (uint64_t)"";
        dword_1E9584680 = 0;
        qword_1E9584688 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9584690 = 3;
      }
      qword_1E9584578 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1E9584580 = 1;
      qword_1E9584588 = 0;
      unk_1E9584590 = 1;
      qword_1E9584598 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1E95845A0 = 0;
      {
        ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E95845E0 = 0;
        qword_1E95845E8 = (uint64_t)"view";
        dword_1E95845F0 = 3;
        qword_1E95845F8 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9584600 = xmmword_1A28FCEB0;
        qword_1E9584610 = 1;
        unk_1E9584618 = "transform";
        dword_1E9584620 = 3;
        qword_1E9584628 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1E9584630 = xmmword_1A28FCF70;
        qword_1E9584640 = 2;
        unk_1E9584648 = "polygon";
        dword_1E9584650 = 3;
        qword_1E9584658 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantPolygonBinding(void)::reflection;
        unk_1E9584660 = 9;
      }
      qword_1E95845A8 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1E95845B0 = 3;
    }
  }
  long long v30 = v323;
  if (*((void *)&v323 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v323 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v28 + 4) = 0;
  *((void *)v28 + 5) = 0;
  *((_DWORD *)v28 + 14) = 0;
  *((void *)v28 + 6) = 0;
  *((void *)v28 + 3) = &unk_1EF55B208;
  *((void *)v28 + 8) = &ggl::PolygonStrokeMask::MeshPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v28 + 72) = v30;
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v28[136] = 0;
  *(_OWORD *)(v28 + 140) = xmmword_1A28FC970;
  *(void *)(v28 + 156) = 0;
  *(void *)(v28 + 172) = 0;
  *(void *)(v28 + 164) = 0;
  v28[184] = 0;
  *(_OWORD *)(v28 + 188) = xmmword_1A28FC970;
  *(void *)(v28 + 204) = 0;
  *(void *)(v28 + 220) = 0;
  *(void *)(v28 + 212) = 0;
  v28[232] = 0;
  *(_OWORD *)(v28 + 236) = xmmword_1A28FC970;
  *(void *)(v28 + 252) = 0;
  *(void *)(v28 + 268) = 0;
  *(void *)(v28 + 260) = 0;
  long long v31 = *(_OWORD *)&v319[16];
  *(_OWORD *)(v28 + 280) = *(_OWORD *)v319;
  *(_OWORD *)(v28 + 296) = v31;
  v28[312] = 0;
  *((void *)v28 + 48) = 0;
  *((_OWORD *)v28 + 22) = 0u;
  *((_OWORD *)v28 + 23) = 0u;
  *((_OWORD *)v28 + 20) = 0u;
  *((_OWORD *)v28 + 21) = 0u;
  *((void *)v28 + 49) = 0x100000001;
  v28[400] = 0;
  v28[88] = 0;
  *(_WORD *)(v28 + 89) = v317;
  v28[91] = v318;
  *(_OWORD *)(v28 + 92) = xmmword_1A28FC970;
  *(void *)(v28 + 108) = v321;
  *((_DWORD *)v28 + 29) = 0;
  *((void *)v28 + 15) = 0;
  *((_DWORD *)v28 + 32) = 0;
  v28[132] = 8;
  if (*((void *)&v30 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v30 + 1) + 16))(*((void *)&v30 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
  }
  v28[329] = 0;
  int8x16_t v32 = vceqzq_s8(*(int8x16_t *)(v28 + 328));
  int16x8_t v33 = vmovl_high_s8(v32);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v35.i64[0] = v34.u32[0];
  v35.i64[1] = v34.u32[1];
  int8x16_t v36 = v35;
  int16x8_t v37 = vmovl_s8(*(int8x8_t *)v32.i8);
  int32x4_t v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v35.i64[0] = v38.u32[0];
  v35.i64[1] = v38.u32[1];
  int8x16_t v39 = v35;
  int32x4_t v40 = vmovl_high_s16(v33);
  v35.i64[0] = v40.u32[0];
  v35.i64[1] = v40.u32[1];
  int8x16_t v41 = v35;
  int32x4_t v42 = vmovl_high_s16(v37);
  v35.i64[0] = v42.u32[0];
  v35.i64[1] = v42.u32[1];
  int8x16_t v43 = v35;
  v35.i64[0] = v34.u32[2];
  v35.i64[1] = v34.u32[3];
  int8x16_t v44 = v35;
  v35.i64[0] = v38.u32[2];
  v35.i64[1] = v38.u32[3];
  int8x16_t v45 = v35;
  v35.i64[0] = v40.u32[2];
  v35.i64[1] = v40.u32[3];
  int8x16_t v46 = v35;
  v35.i64[0] = v42.u32[2];
  v35.i64[1] = v42.u32[3];
  int8x16_t v47 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v35);
  int8x16_t v48 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v46);
  int8x16_t v49 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v45);
  int8x16_t v50 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v41);
  int8x16_t v51 = vceqzq_s8(*(int8x16_t *)(v28 + 344));
  int16x8_t v52 = vmovl_high_s8(v51);
  int32x4_t v53 = vmovl_s16(*(int16x4_t *)v52.i8);
  v35.i64[0] = v53.u32[0];
  v35.i64[1] = v53.u32[1];
  int8x16_t v54 = v35;
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v51.i8);
  int32x4_t v56 = vmovl_s16(*(int16x4_t *)v55.i8);
  v35.i64[0] = v56.u32[0];
  v35.i64[1] = v56.u32[1];
  int8x16_t v57 = v35;
  int32x4_t v58 = vmovl_high_s16(v52);
  v35.i64[0] = v58.u32[0];
  v35.i64[1] = v58.u32[1];
  int8x16_t v59 = v35;
  int32x4_t v60 = vmovl_high_s16(v55);
  v35.i64[0] = v60.u32[0];
  v35.i64[1] = v60.u32[1];
  int8x16_t v61 = v35;
  v35.i64[0] = v53.u32[2];
  v35.i64[1] = v53.u32[3];
  int8x16_t v62 = v35;
  v35.i64[0] = v56.u32[2];
  v35.i64[1] = v56.u32[3];
  int8x16_t v63 = v35;
  v35.i64[0] = v58.u32[2];
  v35.i64[1] = v58.u32[3];
  int8x16_t v64 = v35;
  v35.i64[0] = v60.u32[2];
  v35.i64[1] = v60.u32[3];
  int8x16_t v65 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v64);
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v54), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v36));
  int8x16_t v67 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v57), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v39));
  int8x16_t v68 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v59), v50);
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v61), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v43));
  int8x16_t v70 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v62), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v44));
  int8x16_t v71 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v63), v49);
  int8x16_t v72 = vorrq_s8(v65, v48);
  int8x16_t v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v35), v47);
  int8x16_t v74 = vceqzq_s8(*(int8x16_t *)(v28 + 360));
  int16x8_t v75 = vmovl_high_s8(v74);
  int32x4_t v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v35.i64[0] = v76.i32[0];
  v35.i64[1] = v76.i32[1];
  int8x16_t v77 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v35);
  int8x16_t v78 = vceqzq_s8(*(int8x16_t *)(v28 + 376));
  int16x8_t v79 = vmovl_high_s8(v78);
  int32x4_t v80 = vmovl_s16(*(int16x4_t *)v79.i8);
  v35.i64[0] = v80.i32[0];
  v35.i64[1] = v80.i32[1];
  int8x16_t v81 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v35), v77), v66);
  int16x8_t v82 = vmovl_s8(*(int8x8_t *)v74.i8);
  int32x4_t v83 = vmovl_s16(*(int16x4_t *)v82.i8);
  v35.i64[0] = v83.i32[0];
  v35.i64[1] = v83.i32[1];
  int8x16_t v84 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v35);
  int16x8_t v85 = vmovl_s8(*(int8x8_t *)v78.i8);
  int32x4_t v86 = vmovl_s16(*(int16x4_t *)v85.i8);
  v35.i64[0] = v86.i32[0];
  v35.i64[1] = v86.i32[1];
  int8x16_t v87 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v35), v84), v67);
  int32x4_t v88 = vmovl_high_s16(v75);
  v35.i64[0] = v88.i32[0];
  v35.i64[1] = v88.i32[1];
  int8x16_t v89 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v35);
  int32x4_t v90 = vmovl_high_s16(v79);
  v35.i64[0] = v90.i32[0];
  v35.i64[1] = v90.i32[1];
  int8x16_t v91 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v35), v89), v68);
  int32x4_t v92 = vmovl_high_s16(v82);
  v35.i64[0] = v92.i32[0];
  v35.i64[1] = v92.i32[1];
  int8x16_t v93 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v35);
  int32x4_t v94 = vmovl_high_s16(v85);
  v35.i64[0] = v94.i32[0];
  v35.i64[1] = v94.i32[1];
  int8x16_t v95 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v35), v93), v69);
  v35.i64[0] = v76.i32[2];
  v35.i64[1] = v76.i32[3];
  int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v35);
  v35.i64[0] = v80.i32[2];
  v35.i64[1] = v80.i32[3];
  int8x16_t v97 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v35), v96), v70);
  v35.i64[0] = v83.i32[2];
  v35.i64[1] = v83.i32[3];
  int8x16_t v98 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v35);
  v35.i64[0] = v86.i32[2];
  v35.i64[1] = v86.i32[3];
  int8x16_t v99 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v35), v98), v71);
  v35.i64[0] = v88.i32[2];
  v35.i64[1] = v88.i32[3];
  int8x16_t v100 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v35);
  v35.i64[0] = v90.i32[2];
  v35.i64[1] = v90.i32[3];
  int8x16_t v101 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v35), v100), v72);
  v35.i64[0] = v92.i32[2];
  v35.i64[1] = v92.i32[3];
  int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v35);
  v35.i64[0] = v94.i32[2];
  v35.i64[1] = v94.i32[3];
  *((void *)v28 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v87, v81), vorrq_s8(v95, v91)), (int64x2_t)vorrq_s8(vorrq_s8(v99, v97), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v35), v102), v73), v101))));
  *((void *)v28 + 3) = &unk_1EF55EC58;
  v28[312] = 1;
  float v103 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = v28 + 24;
  *((void *)this + 5) = v28;
  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  float v104 = (std::__shared_weak_count *)*((void *)&v323 + 1);
  if (*((void *)&v323 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v323 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
  }
  uint64_t v105 = *(void *)(v8 + 80);
  uint64_t v106 = *(void *)(v105 + 1640);
  uint64_t v107 = *(std::__shared_weak_count **)(v105 + 1648);
  uint64_t v321 = v106;
  v322 = v107;
  if (v107) {
    atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v319[24], 0, 20);
  v319[0] = 1;
  *(_OWORD *)&v319[4] = xmmword_1A28FCEE0;
  *(_DWORD *)&v319[20] = 7;
  char v320 = 15;
  unint64_t v108 = operator new(0x198uLL);
  v108[1] = 0;
  v108[2] = 0;
  *unint64_t v108 = &unk_1EF588830;
  long long v109 = *(_OWORD *)&a3->colorFormatsCount;
  long long v323 = *(_OWORD *)a3->colorFormats;
  long long v324 = v109;
  uint64_t v110 = ggl::PolygonAnimatableStroke::MeshPipelineState::MeshPipelineState((uint64_t)(v108 + 3), &v321, (uint64_t)v319, &v323);
  uint64_t v111 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = v110;
  *((void *)this + 7) = v108;
  if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  uint64_t v112 = v322;
  if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
  }
  uint64_t v113 = *(void *)(v8 + 80);
  uint64_t v114 = *(void *)(v113 + 1640);
  uint64_t v115 = *(std::__shared_weak_count **)(v113 + 1648);
  uint64_t v321 = v114;
  v322 = v115;
  if (v115) {
    atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v319[20], 0, 24);
  v319[0] = 0;
  *(_OWORD *)&v319[4] = xmmword_1A28FC970;
  char v320 = 0;
  int8x16_t v116 = operator new(0x198uLL);
  v116[1] = 0;
  v116[2] = 0;
  *int8x16_t v116 = &unk_1EF588830;
  long long v117 = *(_OWORD *)&a3->colorFormatsCount;
  long long v323 = *(_OWORD *)a3->colorFormats;
  long long v324 = v117;
  uint64_t v118 = ggl::PolygonAnimatableStroke::MeshPipelineState::MeshPipelineState((uint64_t)(v116 + 3), &v321, (uint64_t)v319, &v323);
  float v119 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = v118;
  *((void *)this + 9) = v116;
  if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
    std::__shared_weak_count::__release_weak(v119);
  }
  float v120 = v322;
  if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
  }
  uint64_t v121 = *(void *)(v8 + 80);
  uint64_t v122 = *(void *)(v121 + 1664);
  float v123 = *(std::__shared_weak_count **)(v121 + 1672);
  uint64_t v321 = v122;
  v322 = v123;
  if (v123) {
    atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v319[20], 0, 24);
  v319[0] = 0;
  *(_OWORD *)&v319[4] = xmmword_1A28FC970;
  char v320 = 15;
  uint64_t v124 = operator new(0x198uLL);
  v124[1] = 0;
  v124[2] = 0;
  *uint64_t v124 = &unk_1EF5834A0;
  long long v125 = *(_OWORD *)&a3->colorFormatsCount;
  long long v323 = *(_OWORD *)a3->colorFormats;
  long long v324 = v125;
  uint64_t v126 = ggl::PolygonFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v124 + 3), &v321, (uint64_t)v319, &v323);
  uint64_t v127 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = v126;
  *((void *)this + 11) = v124;
  if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
  uint64_t v128 = v322;
  if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
  }
  uint64_t v129 = *(void *)(v8 + 80);
  uint64_t v130 = *(void *)(v129 + 1664);
  long long v131 = *(std::__shared_weak_count **)(v129 + 1672);
  uint64_t v321 = v130;
  v322 = v131;
  if (v131) {
    atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v319[24], 0, 20);
  v319[0] = 1;
  *(_OWORD *)&v319[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v319[20] = 7;
  char v320 = 15;
  uint64_t v132 = operator new(0x198uLL);
  v132[1] = 0;
  v132[2] = 0;
  *uint64_t v132 = &unk_1EF5834A0;
  long long v133 = *(_OWORD *)&a3->colorFormatsCount;
  long long v323 = *(_OWORD *)a3->colorFormats;
  long long v324 = v133;
  uint64_t v134 = ggl::PolygonFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v132 + 3), &v321, (uint64_t)v319, &v323);
  int v135 = (std::__shared_weak_count *)*((void *)this + 13);
  *((void *)this + 12) = v134;
  *((void *)this + 13) = v132;
  if (v135 && !atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
  }
  uint64_t v136 = v322;
  if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
  uint64_t v137 = *(void *)(v8 + 80);
  uint64_t v138 = *(void *)(v137 + 1616);
  uint64_t v139 = *(void *)(v137 + 1624);
  *(void *)&long long v323 = v138;
  *((void *)&v323 + 1) = v139;
  if (v139) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v139 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v140 = (char *)operator new(0x198uLL);
  *((void *)v140 + 1) = 0;
  *((void *)v140 + 2) = 0;
  *(void *)int8x16_t v140 = &unk_1EF588520;
  long long v141 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)uint64_t v319 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v319[16] = v141;
  {
    if (v315)
    {
      {
        if (v315)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1E9585EB0 = &ggl::PolygonAnimatableFill::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1E9585EB8 = 0;
          {
            ggl::PolygonAnimatableFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9585EE8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9585EF0 = (uint64_t)ggl::PolygonAnimatableFill::Fill::reflection(void)::reflection;
            unk_1E9585EF8 = ggl::AnimatableTexture::Variant::reflection(void)::reflection;
          }
          qword_1E9585EC0 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E9585EC8 = xmmword_1A28FC860;
        }
      }
      ggl::PolygonAnimatableFill::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonAnimatableFillShader::typedReflection(v315);
      qword_1EB3192F8 = (uint64_t)&ggl::PolygonAnimatableFillShader::typedReflection(void)::ref;
      {
        ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9585FC8 = 0;
        qword_1E9585FD0 = (uint64_t)"";
        dword_1E9585FD8 = 0;
        qword_1E9585FE0 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9585FE8 = 1;
      }
      qword_1EB319300 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319308 = 1;
      qword_1EB319310 = 0;
      unk_1EB319318 = 2;
      qword_1EB319320 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB319328 = 0;
      {
        ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9585F08 = 0;
        qword_1E9585F10 = (uint64_t)"view";
        dword_1E9585F18 = 3;
        qword_1E9585F20 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9585F28 = xmmword_1A28FCEB0;
        qword_1E9585F38 = 1;
        unk_1E9585F40 = "transform";
        dword_1E9585F48 = 3;
        qword_1E9585F50 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1E9585F58 = xmmword_1A28FCF70;
        qword_1E9585F68 = 2;
        unk_1E9585F70 = "fill";
        dword_1E9585F78 = 3;
        qword_1E9585F80 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantFillBinding(void)::reflection;
        unk_1E9585F88 = xmmword_1A28FE170;
        qword_1E9585F98 = 3;
        unk_1E9585FA0 = "variant";
        dword_1E9585FA8 = 3;
        qword_1E9585FB0 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantVariantBinding(void)::reflection;
        unk_1E9585FB8 = 1;
      }
      qword_1EB319330 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB319338 = 4;
    }
  }
  long long v142 = v323;
  if (*((void *)&v323 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v323 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v140 + 4) = 0;
  *((void *)v140 + 5) = 0;
  *((_DWORD *)v140 + 14) = 0;
  *((void *)v140 + 6) = 0;
  *((void *)v140 + 3) = &unk_1EF55B208;
  *((void *)v140 + 8) = &ggl::PolygonAnimatableFill::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v140 + 72) = v142;
  if (*((void *)&v142 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v142 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v140[136] = 0;
  *(_OWORD *)(v140 + 140) = xmmword_1A28FC970;
  *(void *)(v140 + 156) = 0;
  *(void *)(v140 + 172) = 0;
  *(void *)(v140 + 164) = 0;
  v140[184] = 0;
  *(_OWORD *)(v140 + 188) = xmmword_1A28FC970;
  *(void *)(v140 + 204) = 0;
  *(void *)(v140 + 220) = 0;
  *(void *)(v140 + 212) = 0;
  v140[232] = 0;
  *(_OWORD *)(v140 + 236) = xmmword_1A28FC970;
  *(void *)(v140 + 252) = 0;
  *(void *)(v140 + 268) = 0;
  *(void *)(v140 + 260) = 0;
  long long v143 = *(_OWORD *)&v319[16];
  *(_OWORD *)(v140 + 280) = *(_OWORD *)v319;
  *(_OWORD *)(v140 + 296) = v143;
  v140[312] = 0;
  *((void *)v140 + 48) = 0;
  *((_OWORD *)v140 + 22) = 0u;
  *((_OWORD *)v140 + 23) = 0u;
  *((_OWORD *)v140 + 20) = 0u;
  *((_OWORD *)v140 + 21) = 0u;
  *((void *)v140 + 49) = 0x100000001;
  v140[400] = 0;
  v140[88] = 1;
  *(_WORD *)(v140 + 89) = v321;
  v140[91] = BYTE2(v321);
  *(_OWORD *)(v140 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v140 + 27) = 7;
  *((void *)v140 + 14) = 0;
  *((void *)v140 + 15) = 0;
  *((_DWORD *)v140 + 32) = 0;
  v140[132] = 15;
  if (*((void *)&v142 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v142 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v142 + 1) + 16))(*((void *)&v142 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v142 + 1));
  }
  v140[329] = 0;
  int8x16_t v144 = vceqzq_s8(*(int8x16_t *)(v140 + 328));
  int16x8_t v145 = vmovl_high_s8(v144);
  int32x4_t v146 = vmovl_s16(*(int16x4_t *)v145.i8);
  v147.i64[0] = v146.u32[0];
  v147.i64[1] = v146.u32[1];
  int8x16_t v148 = v147;
  int16x8_t v149 = vmovl_s8(*(int8x8_t *)v144.i8);
  int32x4_t v150 = vmovl_s16(*(int16x4_t *)v149.i8);
  v147.i64[0] = v150.u32[0];
  v147.i64[1] = v150.u32[1];
  int8x16_t v151 = v147;
  int32x4_t v152 = vmovl_high_s16(v145);
  v147.i64[0] = v152.u32[0];
  v147.i64[1] = v152.u32[1];
  int8x16_t v153 = v147;
  int32x4_t v154 = vmovl_high_s16(v149);
  v147.i64[0] = v154.u32[0];
  v147.i64[1] = v154.u32[1];
  int8x16_t v155 = v147;
  v147.i64[0] = v146.u32[2];
  v147.i64[1] = v146.u32[3];
  int8x16_t v156 = v147;
  v147.i64[0] = v150.u32[2];
  v147.i64[1] = v150.u32[3];
  int8x16_t v157 = v147;
  v147.i64[0] = v152.u32[2];
  v147.i64[1] = v152.u32[3];
  int8x16_t v158 = v147;
  v147.i64[0] = v154.u32[2];
  v147.i64[1] = v154.u32[3];
  int8x16_t v159 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v147);
  int8x16_t v160 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v158);
  int8x16_t v161 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v157);
  int8x16_t v162 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v153);
  int8x16_t v163 = vceqzq_s8(*(int8x16_t *)(v140 + 344));
  int16x8_t v164 = vmovl_high_s8(v163);
  int32x4_t v165 = vmovl_s16(*(int16x4_t *)v164.i8);
  v147.i64[0] = v165.u32[0];
  v147.i64[1] = v165.u32[1];
  int8x16_t v166 = v147;
  int16x8_t v167 = vmovl_s8(*(int8x8_t *)v163.i8);
  int32x4_t v168 = vmovl_s16(*(int16x4_t *)v167.i8);
  v147.i64[0] = v168.u32[0];
  v147.i64[1] = v168.u32[1];
  int8x16_t v169 = v147;
  int32x4_t v170 = vmovl_high_s16(v164);
  v147.i64[0] = v170.u32[0];
  v147.i64[1] = v170.u32[1];
  int8x16_t v171 = v147;
  int32x4_t v172 = vmovl_high_s16(v167);
  v147.i64[0] = v172.u32[0];
  v147.i64[1] = v172.u32[1];
  int8x16_t v173 = v147;
  v147.i64[0] = v165.u32[2];
  v147.i64[1] = v165.u32[3];
  int8x16_t v174 = v147;
  v147.i64[0] = v168.u32[2];
  v147.i64[1] = v168.u32[3];
  int8x16_t v175 = v147;
  v147.i64[0] = v170.u32[2];
  v147.i64[1] = v170.u32[3];
  int8x16_t v176 = v147;
  v147.i64[0] = v172.u32[2];
  v147.i64[1] = v172.u32[3];
  int8x16_t v177 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v176);
  int8x16_t v178 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v166), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v148));
  int8x16_t v179 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v169), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v151));
  int8x16_t v180 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v171), v162);
  int8x16_t v181 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v173), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v155));
  int8x16_t v182 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v174), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v156));
  int8x16_t v183 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v175), v161);
  int8x16_t v184 = vorrq_s8(v177, v160);
  int8x16_t v185 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v147), v159);
  int8x16_t v186 = vceqzq_s8(*(int8x16_t *)(v140 + 360));
  int16x8_t v187 = vmovl_s8(*(int8x8_t *)v186.i8);
  int32x4_t v188 = vmovl_high_s16(v187);
  int16x8_t v189 = vmovl_high_s8(v186);
  int32x4_t v190 = vmovl_high_s16(v189);
  int32x4_t v191 = vmovl_s16(*(int16x4_t *)v187.i8);
  int32x4_t v192 = vmovl_s16(*(int16x4_t *)v189.i8);
  v147.i64[0] = v191.i32[0];
  v147.i64[1] = v191.i32[1];
  int8x16_t v193 = v147;
  v147.i64[0] = v192.i32[0];
  v147.i64[1] = v192.i32[1];
  int8x16_t v194 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v147);
  int8x16_t v195 = vceqzq_s8(*(int8x16_t *)(v140 + 376));
  int16x8_t v196 = vmovl_high_s8(v195);
  int32x4_t v197 = vmovl_s16(*(int16x4_t *)v196.i8);
  v147.i64[0] = v197.i32[0];
  v147.i64[1] = v197.i32[1];
  int16x8_t v198 = vmovl_s8(*(int8x8_t *)v195.i8);
  int32x4_t v199 = vmovl_s16(*(int16x4_t *)v198.i8);
  int8x16_t v200 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v147), v194), v178);
  v147.i64[0] = v199.i32[0];
  v147.i64[1] = v199.i32[1];
  int8x16_t v201 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v147), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v193));
  v147.i64[0] = v190.i32[0];
  v147.i64[1] = v190.i32[1];
  int8x16_t v202 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v147);
  int32x4_t v203 = vmovl_high_s16(v196);
  int8x16_t v204 = vorrq_s8(v201, v179);
  v147.i64[0] = v203.i32[0];
  v147.i64[1] = v203.i32[1];
  int8x16_t v205 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v147), v202);
  v147.i64[0] = v188.i32[0];
  v147.i64[1] = v188.i32[1];
  int8x16_t v206 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v147);
  int32x4_t v207 = vmovl_high_s16(v198);
  v147.i64[0] = v207.i32[0];
  v147.i64[1] = v207.i32[1];
  int8x16_t v208 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v147), v206), v181);
  v147.i64[0] = v192.i32[2];
  v147.i64[1] = v192.i32[3];
  int8x16_t v209 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v147);
  v147.i64[0] = v197.i32[2];
  v147.i64[1] = v197.i32[3];
  int8x16_t v210 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v147), v209), v182);
  v147.i64[0] = v191.i32[2];
  v147.i64[1] = v191.i32[3];
  int8x16_t v211 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v147);
  v147.i64[0] = v199.i32[2];
  v147.i64[1] = v199.i32[3];
  int8x16_t v212 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v147), v211), v183);
  v147.i64[0] = v190.i32[2];
  v147.i64[1] = v190.i32[3];
  int8x16_t v213 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v147);
  v147.i64[0] = v203.i32[2];
  v147.i64[1] = v203.i32[3];
  int8x16_t v214 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v147), v213), v184);
  v147.i64[0] = v188.i32[2];
  v147.i64[1] = v188.i32[3];
  int8x16_t v215 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v147);
  v147.i64[0] = v207.i32[2];
  v147.i64[1] = v207.i32[3];
  *((void *)v140 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v204, v200), vorrq_s8(v208, vorrq_s8(v205, v180))), (int64x2_t)vorrq_s8(vorrq_s8(v212, v210), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v147), v215), v185), v214))));
  *((void *)v140 + 3) = &unk_1EF55F7D8;
  v140[312] = 1;
  char v216 = (std::__shared_weak_count *)*((void *)this + 15);
  *((void *)this + 14) = v140 + 24;
  *((void *)this + 15) = v140;
  if (v216 && !atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
    std::__shared_weak_count::__release_weak(v216);
  }
  char v217 = (std::__shared_weak_count *)*((void *)&v323 + 1);
  if (*((void *)&v323 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v323 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
    std::__shared_weak_count::__release_weak(v217);
  }
  uint64_t v218 = *(void *)(v8 + 80);
  uint64_t v219 = *(void *)(v218 + 3152);
  long long v220 = *(std::__shared_weak_count **)(v218 + 3160);
  uint64_t v321 = v219;
  v322 = v220;
  if (v220) {
    atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v319[24], 0, 20);
  v319[0] = 1;
  *(_OWORD *)&v319[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v319[20] = 7;
  char v320 = 15;
  long long v221 = operator new(0x198uLL);
  v221[1] = 0;
  v221[2] = 0;
  *long long v221 = &unk_1EF589F60;
  long long v222 = *(_OWORD *)&a3->colorFormatsCount;
  long long v323 = *(_OWORD *)a3->colorFormats;
  long long v324 = v222;
  uint64_t v223 = ggl::VenueWall::MeshPipelineState::MeshPipelineState((uint64_t)(v221 + 3), &v321, (uint64_t)v319, &v323);
  long long v224 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v223;
  *((void *)this + 17) = v221;
  if (v224 && !atomic_fetch_add(&v224->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
    std::__shared_weak_count::__release_weak(v224);
  }
  BOOL v225 = v322;
  if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
    std::__shared_weak_count::__release_weak(v225);
  }
  uint64_t v226 = *(void *)(v8 + 80);
  uint64_t v227 = *(void *)(v226 + 1664);
  unint64_t v228 = *(std::__shared_weak_count **)(v226 + 1672);
  uint64_t v321 = v227;
  v322 = v228;
  if (v228) {
    atomic_fetch_add_explicit(&v228->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v319[20], 0, 24);
  v319[0] = 0;
  *(_OWORD *)&v319[4] = xmmword_1A28FC970;
  char v320 = 15;
  v229 = operator new(0x198uLL);
  v229[1] = 0;
  v229[2] = 0;
  void *v229 = &unk_1EF583468;
  long long v230 = *(_OWORD *)&a3->colorFormatsCount;
  long long v323 = *(_OWORD *)a3->colorFormats;
  long long v324 = v230;
  uint64_t v231 = ggl::PolygonFill::MeshPipelineState::MeshPipelineState((uint64_t)(v229 + 3), &v321, (uint64_t)v319, &v323);
  long long v232 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = v231;
  *((void *)this + 19) = v229;
  if (v232 && !atomic_fetch_add(&v232->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
    std::__shared_weak_count::__release_weak(v232);
  }
  uint8x8_t v233 = v322;
  if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
    std::__shared_weak_count::__release_weak(v233);
  }
  uint64_t v234 = *(void *)(v8 + 80);
  uint64_t v235 = *(void *)(v234 + 1808);
  uint64_t v236 = *(void *)(v234 + 1816);
  *(void *)&long long v323 = v235;
  *((void *)&v323 + 1) = v236;
  if (v236) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v236 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v321 = 0;
  uint64_t v237 = (char *)operator new(0x198uLL);
  *((void *)v237 + 1) = 0;
  *((void *)v237 + 2) = 0;
  *(void *)uint64_t v237 = &unk_1EF587B10;
  long long v238 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)uint64_t v319 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v319[16] = v238;
  {
    if (v316)
    {
      {
        if (v316)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::HillshadeFillMask::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1E9584300 = &ggl::HillshadeFillMask::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1E9584308 = 0;
          {
            ggl::HillshadeFillMask::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9584388 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9584390 = (uint64_t)ggl::HillshadeFillMask::Fill::reflection(void)::reflection;
          }
          qword_1E9584310 = (uint64_t)&ggl::HillshadeFillMask::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1E9584318 = xmmword_1A28FCD30;
        }
      }
      ggl::HillshadeFillMask::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::HillshadeFillMask::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::HillshadeFillMaskShader::typedReflection(v316);
      qword_1E9584338 = (uint64_t)&ggl::HillshadeFillMaskShader::typedReflection(void)::ref;
      {
        ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9584438 = 0;
        qword_1E9584440 = (uint64_t)"";
        dword_1E9584448 = 0;
        qword_1E9584450 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9584458 = 1;
      }
      qword_1E9584340 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9584348 = 1;
      qword_1E9584350 = 0;
      unk_1E9584358 = 0;
      qword_1E9584360 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1E9584368 = 0;
      {
        ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E95843A8 = 0;
        qword_1E95843B0 = (uint64_t)"view";
        dword_1E95843B8 = 3;
        qword_1E95843C0 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E95843C8 = xmmword_1A28FCEB0;
        qword_1E95843D8 = 1;
        unk_1E95843E0 = "transform";
        dword_1E95843E8 = 3;
        qword_1E95843F0 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1E95843F8 = xmmword_1A28FCF70;
        qword_1E9584408 = 2;
        unk_1E9584410 = "fill";
        dword_1E9584418 = 3;
        qword_1E9584420 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantFillBinding(void)::reflection;
        unk_1E9584428 = 4;
      }
      qword_1E9584370 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E9584378 = 3;
    }
  }
  long long v239 = v323;
  if (*((void *)&v323 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v323 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v237 + 4) = 0;
  *((void *)v237 + 5) = 0;
  *((_DWORD *)v237 + 14) = 0;
  *((void *)v237 + 6) = 0;
  *((void *)v237 + 3) = &unk_1EF55B208;
  *((void *)v237 + 8) = &ggl::HillshadeFillMask::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v237 + 72) = v239;
  if (*((void *)&v239 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v239 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v237[136] = 0;
  *(_OWORD *)(v237 + 140) = xmmword_1A28FC970;
  *(void *)(v237 + 156) = 0;
  *(void *)(v237 + 172) = 0;
  *(void *)(v237 + 164) = 0;
  v237[184] = 0;
  *(_OWORD *)(v237 + 188) = xmmword_1A28FC970;
  *(void *)(v237 + 204) = 0;
  *(void *)(v237 + 220) = 0;
  *(void *)(v237 + 212) = 0;
  v237[232] = 0;
  *(_OWORD *)(v237 + 236) = xmmword_1A28FC970;
  *(void *)(v237 + 252) = 0;
  *(void *)(v237 + 268) = 0;
  *(void *)(v237 + 260) = 0;
  long long v240 = *(_OWORD *)&v319[16];
  *(_OWORD *)(v237 + 280) = *(_OWORD *)v319;
  *(_OWORD *)(v237 + 296) = v240;
  v237[312] = 0;
  *((void *)v237 + 48) = 0;
  *((_OWORD *)v237 + 22) = 0u;
  *((_OWORD *)v237 + 23) = 0u;
  *((_OWORD *)v237 + 20) = 0u;
  *((_OWORD *)v237 + 21) = 0u;
  *((void *)v237 + 49) = 0x100000001;
  v237[400] = 0;
  v237[88] = 0;
  *(_WORD *)(v237 + 89) = v317;
  v237[91] = v318;
  *(_OWORD *)(v237 + 92) = xmmword_1A28FC970;
  *(void *)(v237 + 108) = v321;
  *((_DWORD *)v237 + 29) = 0;
  *((void *)v237 + 15) = 0;
  *((_DWORD *)v237 + 32) = 0;
  v237[132] = 8;
  if (*((void *)&v239 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v239 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v239 + 1) + 16))(*((void *)&v239 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v239 + 1));
  }
  *((_WORD *)v237 + 164) = 0;
  int8x16_t v241 = vceqzq_s8(*(int8x16_t *)(v237 + 328));
  int16x8_t v242 = vmovl_s8(*(int8x8_t *)v241.i8);
  int32x4_t v243 = vmovl_high_s16(v242);
  v244.i64[0] = v243.u32[2];
  v244.i64[1] = v243.u32[3];
  int8x16_t v245 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v244);
  int16x8_t v246 = vmovl_high_s8(v241);
  int32x4_t v247 = vmovl_high_s16(v246);
  v244.i64[0] = v247.u32[2];
  v244.i64[1] = v247.u32[3];
  int8x16_t v248 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v244);
  int32x4_t v249 = vmovl_s16(*(int16x4_t *)v242.i8);
  v244.i64[0] = v249.u32[2];
  v244.i64[1] = v249.u32[3];
  int8x16_t v250 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v244);
  int32x4_t v251 = vmovl_s16(*(int16x4_t *)v246.i8);
  v244.i64[0] = v251.u32[2];
  v244.i64[1] = v251.u32[3];
  int8x16_t v252 = vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v244);
  v244.i64[0] = v243.u32[0];
  v244.i64[1] = v243.u32[1];
  int8x16_t v253 = vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v244);
  v244.i64[0] = v247.u32[0];
  v244.i64[1] = v247.u32[1];
  int8x16_t v254 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v244);
  v244.i64[0] = v249.u32[0];
  v244.i64[1] = v249.u32[1];
  int8x16_t v255 = vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v244);
  v244.i64[0] = v251.u32[0];
  v244.i64[1] = v251.u32[1];
  int8x16_t v256 = vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v244);
  int8x16_t v257 = vceqzq_s8(*(int8x16_t *)(v237 + 344));
  int16x8_t v258 = vmovl_s8(*(int8x8_t *)v257.i8);
  int32x4_t v259 = vmovl_high_s16(v258);
  v244.i64[0] = v259.u32[2];
  v244.i64[1] = v259.u32[3];
  int8x16_t v260 = vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v244);
  int16x8_t v261 = vmovl_high_s8(v257);
  int32x4_t v262 = vmovl_high_s16(v261);
  v244.i64[0] = v262.u32[2];
  v244.i64[1] = v262.u32[3];
  int8x16_t v263 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v244);
  int32x4_t v264 = vmovl_s16(*(int16x4_t *)v258.i8);
  v244.i64[0] = v264.u32[2];
  v244.i64[1] = v264.u32[3];
  int8x16_t v265 = vbicq_s8((int8x16_t)xmmword_1A28FCA10, v244);
  int32x4_t v266 = vmovl_s16(*(int16x4_t *)v261.i8);
  v244.i64[0] = v266.u32[2];
  v244.i64[1] = v266.u32[3];
  int8x16_t v267 = vbicq_s8((int8x16_t)xmmword_1A28FCA20, v244);
  v244.i64[0] = v259.u32[0];
  v244.i64[1] = v259.u32[1];
  int8x16_t v268 = vbicq_s8((int8x16_t)xmmword_1A28FCA30, v244);
  v244.i64[0] = v262.u32[0];
  v244.i64[1] = v262.u32[1];
  int8x16_t v269 = vbicq_s8((int8x16_t)xmmword_1A28FCA40, v244);
  v244.i64[0] = v264.u32[0];
  v244.i64[1] = v264.u32[1];
  int8x16_t v270 = vbicq_s8((int8x16_t)xmmword_1A28FCA50, v244);
  v244.i64[0] = v266.u32[0];
  v244.i64[1] = v266.u32[1];
  int8x16_t v271 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v244), v256);
  int8x16_t v272 = vorrq_s8(v270, v255);
  int8x16_t v273 = vorrq_s8(v269, v254);
  int8x16_t v274 = vorrq_s8(v268, v253);
  int8x16_t v275 = vorrq_s8(v267, v252);
  int8x16_t v276 = vorrq_s8(v265, v250);
  int8x16_t v277 = vorrq_s8(v263, v248);
  int8x16_t v278 = vorrq_s8(v260, v245);
  int8x16_t v279 = vceqzq_s8(*(int8x16_t *)(v237 + 360));
  int16x8_t v280 = vmovl_s8(*(int8x8_t *)v279.i8);
  int32x4_t v281 = vmovl_high_s16(v280);
  int16x8_t v282 = vmovl_high_s8(v279);
  int32x4_t v283 = vmovl_high_s16(v282);
  int32x4_t v284 = vmovl_s16(*(int16x4_t *)v280.i8);
  int32x4_t v285 = vmovl_s16(*(int16x4_t *)v282.i8);
  v244.i64[0] = v285.i32[0];
  v244.i64[1] = v285.i32[1];
  int8x16_t v286 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v244);
  v244.i64[0] = v284.i32[0];
  v244.i64[1] = v284.i32[1];
  int8x16_t v287 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v244);
  v244.i64[0] = v283.i32[0];
  v244.i64[1] = v283.i32[1];
  int8x16_t v288 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v244);
  v244.i64[0] = v281.i32[0];
  v244.i64[1] = v281.i32[1];
  int8x16_t v289 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v244);
  v244.i64[0] = v281.i32[2];
  v244.i64[1] = v281.i32[3];
  int8x16_t v290 = v244;
  v244.i64[0] = v283.i32[2];
  v244.i64[1] = v283.i32[3];
  int8x16_t v291 = v244;
  v244.i64[0] = v284.i32[2];
  v244.i64[1] = v284.i32[3];
  int8x16_t v292 = v244;
  v244.i64[0] = v285.i32[2];
  v244.i64[1] = v285.i32[3];
  int8x16_t v293 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v244);
  int8x16_t v294 = vceqzq_s8(*(int8x16_t *)(v237 + 376));
  int16x8_t v295 = vmovl_high_s8(v294);
  int32x4_t v296 = vmovl_s16(*(int16x4_t *)v295.i8);
  int16x8_t v297 = vmovl_s8(*(int8x8_t *)v294.i8);
  int32x4_t v298 = vmovl_s16(*(int16x4_t *)v297.i8);
  int32x4_t v299 = vmovl_high_s16(v295);
  int32x4_t v300 = vmovl_high_s16(v297);
  v244.i64[0] = v300.i32[2];
  v244.i64[1] = v300.i32[3];
  int8x16_t v301 = vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v244);
  v244.i64[0] = v299.i32[2];
  v244.i64[1] = v299.i32[3];
  int8x16_t v302 = vbicq_s8((int8x16_t)xmmword_1A28FCB00, v244);
  v244.i64[0] = v298.i32[2];
  v244.i64[1] = v298.i32[3];
  int8x16_t v303 = vbicq_s8((int8x16_t)xmmword_1A28FCB10, v244);
  v244.i64[0] = v296.i32[2];
  v244.i64[1] = v296.i32[3];
  int8x16_t v304 = vbicq_s8((int8x16_t)xmmword_1A28FCB20, v244);
  v244.i64[0] = v300.i32[0];
  v244.i64[1] = v300.i32[1];
  int8x16_t v305 = vbicq_s8((int8x16_t)xmmword_1A28FCB30, v244);
  v244.i64[0] = v299.i32[0];
  v244.i64[1] = v299.i32[1];
  int8x16_t v306 = vbicq_s8((int8x16_t)xmmword_1A28FCB40, v244);
  v244.i64[0] = v298.i32[0];
  v244.i64[1] = v298.i32[1];
  int8x16_t v307 = vbicq_s8((int8x16_t)xmmword_1A28FCB50, v244);
  v244.i64[0] = v296.i32[0];
  v244.i64[1] = v296.i32[1];
  *((void *)v237 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v307, v287), v272), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v244), v286), v271)), vorrq_s8(vorrq_s8(vorrq_s8(v305, v289), v274), vorrq_s8(vorrq_s8(v306, v288), v273))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v303, vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v292)), v276), vorrq_s8(vorrq_s8(v304, v293), v275)), vorrq_s8(vorrq_s8(vorrq_s8(v301, vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v290)),
                                                v278),
                                              vorrq_s8(vorrq_s8(v302, vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v291)), v277)))));
  *((void *)v237 + 3) = &unk_1EF55EBB8;
  v237[312] = 1;
  uint64_t v308 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = v237 + 24;
  *((void *)this + 21) = v237;
  if (v308 && !atomic_fetch_add(&v308->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
    std::__shared_weak_count::__release_weak(v308);
  }
  v309 = (std::__shared_weak_count *)*((void *)&v323 + 1);
  if (*((void *)&v323 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v323 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
    std::__shared_weak_count::__release_weak(v309);
  }
  v310 = operator new(0xE8uLL);
  v310[1] = 0;
  v310[2] = 0;
  void *v310 = &unk_1EF585B20;
  uint64_t v311 = ggl::BufferData::BufferData((uint64_t)(v310 + 3), qword_1E95790D0, 2, 1, 6, 1);
  v310[28] = ggl::PolygonFill::Fill::reflection(void)::reflection;
  v310[3] = &unk_1EF55D738;
  *((void *)this + 121) = v311;
  v312 = (std::__shared_weak_count *)*((void *)this + 122);
  *((void *)this + 122) = v310;
  if (v312)
  {
    if (!atomic_fetch_add(&v312->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
  operator new();
}

void sub_1A1C603A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void **a11, uint64_t *a12, uint64_t *a13, void *a14)
{
  std::function<ggl::HillshadeFillMask::CompressedMeshPipelineSetup * ()(void)>::~function(v16);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v15);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v14);
  std::function<void ()(ggl::HillshadeFillMask::CompressedMeshPipelineSetup *)>::~function(&STACK[0x2C8]);
  std::function<ggl::HillshadeFillMask::CompressedMeshPipelineSetup * ()(void)>::~function(&STACK[0x2E8]);
  MEMORY[0x1A6239270](v14, 0x10A0C40D234DDC7);
  unint64_t v18 = STACK[0x250];
  *a10 = a9;
  uint64_t v19 = *(void *)(v18 + 1096);
  if (v19)
  {
    (*(void (**)(uint64_t, void))(*(void *)v19 + 16))(v19, *(void *)(v18 + 1112));
    *(void *)(v18 + 1112) = 3735927469;
  }
  long double v20 = *(std::__shared_weak_count **)(v18 + 1104);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  long long v21 = *(void **)(v18 + 1064);
  do
  {
    if (v21[1])
    {
      unint64_t v22 = 0;
      uint64_t v23 = v21 + 2;
      long double v24 = v21 + 2;
      uint64_t v25 = (void (***)(void))(v21 + 2);
      do
      {
        uint64_t v26 = (void (**)(void *))*v25;
        v25 += 15;
        (*v26)(v24);
        ++v22;
        v23 += 15;
        long double v24 = v25;
      }
      while (v22 < v21[1]);
    }
    v21[1] = 0;
    long long v21 = (void *)*v21;
  }
  while (v21);
  uint64_t v27 = *(void ***)(v18 + 1064);
  *(void *)(v18 + 1072) = v27;
  uint64_t v28 = *v27;
  *uint64_t v27 = 0;
  if (v28)
  {
    do
    {
      long long v29 = (void *)*v28;
      free(v28);
      uint64_t v28 = v29;
    }
    while (v29);
    uint64_t v27 = *(void ***)(v18 + 1064);
  }
  free(v27);
  long long v30 = *(void **)(v18 + 1040);
  if (v30)
  {
    *(void *)(v18 + 1048) = v30;
    operator delete(v30);
    uint64_t v31 = *(void *)(v18 + 1008);
    if (!v31)
    {
LABEL_17:
      int8x16_t v32 = *(void **)(v18 + 984);
      if (!v32) {
        goto LABEL_18;
      }
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(v18 + 1008);
    if (!v31) {
      goto LABEL_17;
    }
  }
  uint64_t v34 = *(void *)(v18 + 1016);
  uint64_t v35 = v31;
  if (v34 != v31)
  {
    uint64_t v36 = *(void *)(v18 + 1016);
    do
    {
      int32x4_t v38 = *(void **)(v36 - 24);
      v36 -= 24;
      int16x8_t v37 = v38;
      if (v38)
      {
        *(void *)(v34 - 16) = v37;
        operator delete(v37);
      }
      uint64_t v34 = v36;
    }
    while (v36 != v31);
    uint64_t v35 = *(void *)(v18 + 1008);
  }
  *(void *)(v18 + 1016) = v31;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v18 + 1032) + 40))(*(void *)(v18 + 1032), v35, *(void *)(v18 + 1024) - v35);
  int8x16_t v32 = *(void **)(v18 + 984);
  if (!v32)
  {
LABEL_18:
    int16x8_t v33 = *(std::__shared_weak_count **)(v18 + 976);
    if (!v33) {
      goto LABEL_31;
    }
LABEL_29:
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
LABEL_31:
    int8x16_t v39 = *(std::__shared_weak_count **)(v18 + 960);
    if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    uint64_t v40 = *a12;
    *a12 = 0;
    if (v40) {
      MEMORY[0x1A6239270](v40, 0x1000C4049ECCB0CLL);
    }
    uint64_t v41 = *a13;
    *a13 = 0;
    if (v41) {
      MEMORY[0x1A6239270](v41, 0x1000C4049ECCB0CLL);
    }
    std::__tree<std::__value_type<gss::StyleAttribute,std::unique_ptr<ggl::Texture2D>>,std::__map_value_compare<gss::StyleAttribute,std::__value_type<gss::StyleAttribute,std::unique_ptr<ggl::Texture2D>>,std::less<gss::StyleAttribute>,true>,std::allocator<std::__value_type<gss::StyleAttribute,std::unique_ptr<ggl::Texture2D>>>>::destroy(*a11);
    uint64_t v42 = 840;
    while (1)
    {
      uint64_t v43 = *(void *)(v18 + v42);
      *(void *)(v18 + v42) = 0;
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      }
      v42 -= 8;
      if (v42 == 264)
      {
        uint64_t v44 = *(void *)(v18 + 240);
        if (v44)
        {
          uint64_t v45 = *(void *)(v18 + 248);
          int8x16_t v46 = *(void **)(v18 + 240);
          if (v45 != v44)
          {
            do
            {
              int8x16_t v47 = *(std::__shared_weak_count **)(v45 - 8);
              if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
              v45 -= 16;
            }
            while (v45 != v44);
            int8x16_t v46 = *(void **)(v18 + 240);
          }
          *(void *)(v18 + 248) = v44;
          operator delete(v46);
        }
        uint64_t v48 = *(void *)(v18 + 232);
        *(void *)(v18 + 232) = 0;
        if (v48)
        {
          uint64_t v49 = ggl::FragmentedPool<ggl::PolygonFill::MeshPipelineSetup>::~FragmentedPool(v48);
          MEMORY[0x1A6239270](v49, 0x10A0C40D234DDC7);
        }
        uint64_t v50 = *(void *)(v18 + 224);
        *(void *)(v18 + 224) = 0;
        if (v50)
        {
          uint64_t v51 = ggl::FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup>::~FragmentedPool(v50);
          MEMORY[0x1A6239270](v51, 0x10A0C40D234DDC7);
        }
        uint64_t v52 = *(void *)(v18 + 216);
        *(void *)(v18 + 216) = 0;
        if (v52)
        {
          uint64_t v53 = ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::~FragmentedPool(v52);
          MEMORY[0x1A6239270](v53, 0x10A0C40D234DDC7);
        }
        uint64_t v54 = *(void *)(v18 + 208);
        *(void *)(v18 + 208) = 0;
        if (v54)
        {
          uint64_t v55 = ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::~FragmentedPool(v54);
          MEMORY[0x1A6239270](v55, 0x10A0C40D234DDC7);
        }
        uint64_t v56 = *(void *)(v18 + 200);
        *(void *)(v18 + 200) = 0;
        if (v56)
        {
          uint64_t v57 = ggl::FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup>::~FragmentedPool(v56);
          MEMORY[0x1A6239270](v57, 0x10A0C40D234DDC7);
        }
        uint64_t v58 = *(void *)(v18 + 192);
        *(void *)(v18 + 192) = 0;
        if (v58)
        {
          uint64_t v59 = ggl::FragmentedPool<ggl::HillshadeFillMask::CompressedMeshPipelineSetup>::~FragmentedPool(v58);
          MEMORY[0x1A6239270](v59, 0x10A0C40D234DDC7);
        }
        uint64_t v60 = *(void *)(v18 + 184);
        *(void *)(v18 + 184) = 0;
        if (v60)
        {
          uint64_t v61 = ggl::FragmentedPool<ggl::PolygonStrokeMask::MeshPipelineSetup>::~FragmentedPool(v60);
          MEMORY[0x1A6239270](v61, 0x10A0C40D234DDC7);
        }
        uint64_t v62 = *(void *)(v18 + 176);
        *(void *)(v18 + 176) = 0;
        if (v62)
        {
          uint64_t v63 = ggl::FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup>::~FragmentedPool(v62);
          MEMORY[0x1A6239270](v63, 0x10A0C40D234DDC7);
        }
        int8x16_t v64 = *(std::__shared_weak_count **)(v18 + 168);
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
        int8x16_t v65 = *(std::__shared_weak_count **)(v18 + 152);
        if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
        int8x16_t v66 = *(std::__shared_weak_count **)(v18 + 136);
        if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
        int8x16_t v67 = *(std::__shared_weak_count **)(v18 + 120);
        if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
        int8x16_t v68 = *(std::__shared_weak_count **)(v18 + 104);
        if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
        int8x16_t v69 = *(std::__shared_weak_count **)(v18 + 88);
        if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
        int8x16_t v70 = *(std::__shared_weak_count **)(v18 + 72);
        if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
        int8x16_t v71 = *(std::__shared_weak_count **)(v18 + 56);
        if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
        int8x16_t v72 = *(std::__shared_weak_count **)(v18 + 40);
        if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
        int8x16_t v73 = *(std::__shared_weak_count **)(v18 + 24);
        if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
        int8x16_t v74 = *(std::__shared_weak_count **)(v18 + 8);
        if (v74)
        {
          if (!atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }

        _Unwind_Resume(a1);
      }
    }
  }
LABEL_28:
  *(void *)(v18 + 992) = v32;
  operator delete(v32);
  int16x8_t v33 = *(std::__shared_weak_count **)(v18 + 976);
  if (!v33) {
    goto LABEL_31;
  }
  goto LABEL_29;
}

void sub_1A1C60E58(_Unwind_Exception *exception_object)
{
}

uint64_t ggl::PolygonAnimatableStroke::MeshPipelineState::MeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int16x8_t v82 = a4;
    int8x16_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B680 = 1;
          }
          ggl::PolygonAnimatableStroke::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E957F408 = &ggl::PolygonAnimatableStroke::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1E957F410 = 0;
          {
            ggl::PolygonAnimatableStroke::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9586890 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9586898 = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
            unk_1E95868A0 = ggl::AnimatableTexture::Variant::reflection(void)::reflection;
            qword_1E95868A8 = (uint64_t)ggl::PolygonAnimatableStroke::AnimatablePolygon::reflection(void)::reflection;
          }
          qword_1E957F418 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1E957F420 = xmmword_1A28FD1E0;
        }
      }
      ggl::PolygonAnimatableStroke::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonAnimatableStroke::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonAnimatableStrokeShader::typedReflection(v83);
      qword_1EB319550 = (uint64_t)&ggl::PolygonAnimatableStrokeShader::typedReflection(void)::ref;
      {
        ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95869B0 = 0;
        qword_1E95869B8 = (uint64_t)"";
        dword_1E95869C0 = 0;
        qword_1E95869C8 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E95869D0 = 3;
      }
      qword_1EB319558 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EB319560 = 1;
      qword_1EB319568 = 0;
      unk_1EB319570 = 3;
      qword_1EB319578 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB319580 = 0;
      {
        ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E95868C0 = 0;
        qword_1E95868C8 = (uint64_t)"view";
        dword_1E95868D0 = 3;
        qword_1E95868D8 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E95868E0 = xmmword_1A28FCEB0;
        qword_1E95868F0 = 1;
        unk_1E95868F8 = "transform";
        dword_1E9586900 = 3;
        qword_1E9586908 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1E9586910 = xmmword_1A28FCF70;
        qword_1E9586920 = 2;
        unk_1E9586928 = "polygon";
        dword_1E9586930 = 3;
        qword_1E9586938 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantPolygonBinding(void)::reflection;
        unk_1E9586940 = xmmword_1A28FE500;
        qword_1E9586950 = 3;
        unk_1E9586958 = "variant";
        dword_1E9586960 = 3;
        qword_1E9586968 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantVariantBinding(void)::reflection;
        *(_OWORD *)algn_1E9586970 = xmmword_1A28FC960;
        qword_1E9586980 = 4;
        unk_1E9586988 = "animatablePolygon";
        dword_1E9586990 = 3;
        qword_1E9586998 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantAnimatablePolygonBinding(void)::reflection;
        unk_1E95869A0 = 1;
      }
      qword_1EB319588 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB319590 = 5;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  long long v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int32x4_t v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::PolygonAnimatableStroke::MeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55FC78;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::PolygonStroke::MeshPipelineState::MeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int16x8_t v82 = a4;
    int8x16_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B680 = 1;
          }
          ggl::PolygonStroke::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E957F6B8 = &ggl::PolygonStroke::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1E957F6C0 = 0;
          {
            ggl::PolygonStroke::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9582860 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9582868 = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
          }
          qword_1E957F6C8 = (uint64_t)&ggl::PolygonStroke::pipelineDataMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E957F6D0 = xmmword_1A28FD580;
        }
      }
      ggl::PolygonStroke::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonStroke::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonStrokeShader::typedReflection(v83);
      qword_1EB318A80 = (uint64_t)&ggl::PolygonStrokeShader::typedReflection(void)::ref;
      {
        ggl::PolygonStroke::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9582910 = 0;
        qword_1E9582918 = (uint64_t)"";
        dword_1E9582920 = 0;
        qword_1E9582928 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9582930 = 3;
      }
      qword_1EB318A88 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EB318A90 = 1;
      qword_1EB318A98 = 0;
      unk_1EB318AA0 = 2;
      qword_1EB318AA8 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318AB0 = 0;
      {
        ggl::PolygonStroke::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9582880 = 0;
        qword_1E9582888 = (uint64_t)"view";
        dword_1E9582890 = 3;
        qword_1E9582898 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E95828A0 = xmmword_1A28FCEB0;
        qword_1E95828B0 = 1;
        unk_1E95828B8 = "transform";
        dword_1E95828C0 = 3;
        qword_1E95828C8 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1E95828D0 = xmmword_1A28FCF70;
        qword_1E95828E0 = 2;
        unk_1E95828E8 = "polygon";
        dword_1E95828F0 = 3;
        qword_1E95828F8 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineConstantPolygonBinding(void)::reflection;
        unk_1E9582900 = 9;
      }
      qword_1EB318AB8 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB318AC0 = 3;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  long long v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int32x4_t v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::PolygonStroke::MeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55B258;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonAnimatableFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B988;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17PolygonStrokeMask17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B748;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17HillshadeFillMask27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B700;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_11PolygonFill17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AC50;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::HillshadeFillMask::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575DC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::PolygonFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575D80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575D38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,void ()(ggl::PolygonAnimatableStroke::MeshPipelineSetup *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575C60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::PolygonAnimatableStroke::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575C18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonStrokeMask::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575BD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonStroke::MeshPipelineSetup *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575B88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonStroke::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575B40;
  a2[1] = v2;
  return result;
}

void md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(_OWORD *a1)
{
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  operator new();
}

void sub_1A1C66F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, md::PolylineOverlaySharedRenderStates *a19, uint64_t *a20,uint64_t *a21,uint64_t a22,uint64_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t *a29,uint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::function<ggl::GradientPolylineOverlayRibbon::FillPipelineSetup * ()(void)>::~function(v75);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v72);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v71);
  std::function<void ()(ggl::GradientPolylineOverlayRibbon::FillPipelineSetup *)>::~function(&a71);
  std::function<ggl::GradientPolylineOverlayRibbon::FillPipelineSetup * ()(void)>::~function(&STACK[0x210]);
  MEMORY[0x1A6239270](v71, 0x10A0C40D234DDC7);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a67);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(a30 + 36));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(a30 + 34));
  md::PolylineOverlaySharedRenderStates::~PolylineOverlaySharedRenderStates(a19);
  std::unique_ptr<ggl::FragmentedPool<ggl::GradientPolylineOverlayRibbon::FillPipelineSetup>>::~unique_ptr[abi:nn180100](a21);
  std::unique_ptr<ggl::FragmentedPool<ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup>>::~unique_ptr[abi:nn180100](v74);
  std::unique_ptr<ggl::FragmentedPool<ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup>>::~unique_ptr[abi:nn180100](a23);
  std::unique_ptr<ggl::FragmentedPool<ggl::PolylineOverlayRibbon::FillPipelineSetup>>::~unique_ptr[abi:nn180100](a27);
  std::unique_ptr<ggl::FragmentedPool<ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup>>::~unique_ptr[abi:nn180100](a29);
  std::unique_ptr<ggl::FragmentedPool<ggl::PolylineOverlayRibbon::AlphaPipelineSetup>>::~unique_ptr[abi:nn180100](v73);
  md::PolylineOverlaySharedPipelineStates<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlaySharedPipelineStates(a20);
  md::PolylineOverlaySharedPipelineStates<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlaySharedPipelineStates(a30);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon22AlphaFillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BE98;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon18AlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BE50;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BE08;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon22AlphaFillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BAA8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon18AlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BA60;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BA18;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5>,ggl::GradientPolylineOverlayRibbon::FillPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5785B8;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4>,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578570;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3>,ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578528;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2>,ggl::PolylineOverlayRibbon::FillPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5784E0;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1>,ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578498;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0>,ggl::PolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578450;
}

void *ggl::VertexData::VertexData(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void *)(**(void **)(a3 + 216) + 24);
  char v8 = *(std::__shared_weak_count **)(a3 + 32);
  v11[0] = *(void *)(a3 + 24);
  v11[1] = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(void *)(**(void **)(a3 + 216) + 24);
    ggl::BufferData::BufferData((uint64_t)a1, v7, v11, *a4 * v9, a4[1] * v9, 1);
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    ggl::BufferData::BufferData((uint64_t)a1, v7, v11, *a4 * v7, a4[1] * v7, 1);
  }
  *a1 = &unk_1EF55A518;
  a1[25] = &unk_1EF55A538;
  a1[26] = a2;
  a1[27] = *(void *)(a3 + 216);
  return a1;
}

uint64_t ggl::BufferData::BufferData(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = &unk_1EF55A1F0;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a6;
  *(unsigned char *)(a1 + 19) = 0;
  uint64_t v7 = a3[1];
  *(void *)(a1 + 24) = *a3;
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = 0uLL;
  *(_OWORD *)(a1 + 72) = 0u;
  unint64_t v9 = a1 + 72;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  int8x16_t v10 = &qword_1EB32C000;
  {
    char v18 = a6;
    int8x16_t v17 = a3;
    long long v8 = 0uLL;
    int8x16_t v10 = &qword_1EB32C000;
    a3 = v17;
    a6 = v18;
    int v16 = v15;
    unint64_t v9 = a1 + 72;
    if (v16) {
      operator new();
    }
  }
  *(void *)(a1 + 96) = v10[287];
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1;
  *(void *)(a1 + 128) = 850045863;
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 168) = v8;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = -1;
  *(_WORD *)(a1 + 17) = *(_WORD *)(*a3 + 37);
  unint64_t v11 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  *(void *)(a1 + 120) = v11;
  if ((a6 & 1) == 0 || (a6 & 6) == 6)
  {
    uint64_t v12 = *(void *)(a1 + 72);
    unint64_t v13 = *(void *)(a1 + 80) - v12;
    if (v11 <= v13)
    {
      if (v11 < v13) {
        *(void *)(a1 + 80) = v12 + v11;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v9, v11 - v13);
    }
  }
  return a1;
}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_2_8551()
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  os_log_t v0 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INTERACTIVE, -3);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  uint64_t v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;
}

void md::LabelFeaturePool::prepareAddFeaturesForTile(uint64_t a1, unint64_t **a2)
{
  md::LabelFeaturePool::flushRemovedTiles((md::LabelFeaturePool *)a1);
  unint64_t v5 = **a2;
  if (!v5) {
    unint64_t v5 = (*a2)[2];
  }
  std::mutex::lock((std::mutex *)a1);
  long long v94 = 0u;
  memset(v95, 0, sizeof(v95));
  long long v92 = 0u;
  long long v93 = 0u;
  long long v91 = 0u;
  memset(v90, 0, sizeof(v90));
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  memset(v85, 0, sizeof(v85));
  long long v82 = 0u;
  long long v83 = 0u;
  long long v81 = 0u;
  memset(v80, 0, sizeof(v80));
  {
    operator new();
  }
  v80[1] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  v80[2] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v81) = 1065353216;
  *((void *)&v81 + 1) = 0;
  *(void *)&long long v82 = 0;
  {
    operator new();
  }
  *((void *)&v82 + 1) = mdm::Allocator::instance(void)::alloc;
  *(void *)&long long v83 = 0;
  {
    operator new();
  }
  *((void *)&v83 + 1) = mdm::Allocator::instance(void)::alloc;
  *(void *)&long long v84 = 0;
  DWORD2(v84) = 1065353216;
  v85[0] = 0uLL;
  {
    operator new();
  }
  v85[1] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  v85[2] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v86) = 1065353216;
  *((void *)&v86 + 1) = 0;
  *(void *)&long long v87 = 0;
  {
    operator new();
  }
  *((void *)&v87 + 1) = mdm::Allocator::instance(void)::alloc;
  *(void *)&long long v88 = 0;
  {
    operator new();
  }
  *((void *)&v88 + 1) = mdm::Allocator::instance(void)::alloc;
  *(void *)&long long v89 = 0;
  DWORD2(v89) = 1065353216;
  v90[0] = 0uLL;
  {
    operator new();
  }
  v90[1] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  v90[2] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v91) = 1065353216;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  {
    operator new();
  }
  *((void *)&v92 + 1) = mdm::Allocator::instance(void)::alloc;
  *(void *)&long long v93 = 0;
  {
    operator new();
  }
  *((void *)&v93 + 1) = mdm::Allocator::instance(void)::alloc;
  *(void *)&long long v94 = 0;
  DWORD2(v94) = 1065353216;
  v95[0] = 0uLL;
  {
    operator new();
  }
  v95[1] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  v95[2] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v95[3]) = 1065353216;
  *((void *)&v95[3] + 1) = 0;
  *(void *)&v95[4] = 0;
  DWORD2(v95[4]) = 1;
  BYTE12(v95[4]) = 0;
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 464);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
    }
    else
    {
      unint64_t v2 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(uint64_t **)(*(void *)(a1 + 456) + 8 * v2);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *(void *)(v12 + 8);
            if (v14 == v8)
            {
              if (*(void *)(v12 + 16) == v5) {
                goto LABEL_38;
              }
            }
            else if ((v14 & (v9 - 1)) != v2)
            {
              goto LABEL_39;
            }
            uint64_t v12 = *(void *)v12;
            if (!v12) {
              goto LABEL_39;
            }
          }
        }
        do
        {
          unint64_t v13 = *(void *)(v12 + 8);
          if (v13 == v8)
          {
            if (*(void *)(v12 + 16) == v5)
            {
LABEL_38:
              int v15 = 1;
              goto LABEL_144;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v2) {
              break;
            }
          }
          uint64_t v12 = *(void *)v12;
        }
        while (v12);
      }
    }
  }
LABEL_39:
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 488) + 16))(*(void *)(a1 + 488), 440, 8);
  uint64_t v12 = v16;
  uint64_t v96 = v16;
  uint64_t v97 = a1 + 488;
  *(void *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = v8;
  uint64_t v17 = *(void *)&v80[0];
  *(void *)(v16 + 16) = v5;
  *(void *)(v16 + 24) = v17;
  long long v18 = *(_OWORD *)((char *)v80 + 8);
  v80[0] = 0uLL;
  *(_OWORD *)(v16 + 32) = v18;
  *(_OWORD *)(v16 + 48) = *(_OWORD *)((char *)&v80[1] + 8);
  uint64_t v19 = *((void *)&v80[2] + 1);
  *(void *)(v16 + 64) = *((void *)&v80[2] + 1);
  *(_DWORD *)(v16 + 72) = v81;
  if (v19)
  {
    unint64_t v20 = *(void *)(*(void *)(v16 + 48) + 8);
    unint64_t v21 = *(void *)(v16 + 32);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21) {
        v20 %= v21;
      }
    }
    else
    {
      v20 &= v21 - 1;
    }
    *(void *)(v17 + 8 * v20) = v16 + 48;
    *((void *)&v80[1] + 1) = 0;
    *((void *)&v80[2] + 1) = 0;
  }
  uint64_t v22 = *((void *)&v81 + 1);
  long long v23 = v82;
  *((void *)&v81 + 1) = 0;
  *(void *)&long long v82 = 0;
  *(void *)(v16 + 80) = v22;
  *(_OWORD *)(v16 + 88) = v23;
  *(_OWORD *)(v16 + 104) = v83;
  uint64_t v24 = v84;
  *(void *)(v16 + 120) = v84;
  *(_DWORD *)(v16 + 128) = DWORD2(v84);
  if (v24)
  {
    unint64_t v25 = *(void *)(*(void *)(v16 + 104) + 8);
    unint64_t v26 = *(void *)(v16 + 88);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v25 >= v26) {
        v25 %= v26;
      }
    }
    else
    {
      v25 &= v26 - 1;
    }
    *(void *)(v22 + 8 * v25) = v16 + 104;
    *(void *)&long long v83 = 0;
    *(void *)&long long v84 = 0;
  }
  uint64_t v27 = *(void *)&v85[0];
  long long v28 = *(_OWORD *)((char *)v85 + 8);
  v85[0] = 0uLL;
  *(void *)(v16 + 136) = v27;
  *(_OWORD *)(v16 + 144) = v28;
  *(_OWORD *)(v16 + 160) = *(_OWORD *)((char *)&v85[1] + 8);
  uint64_t v29 = *((void *)&v85[2] + 1);
  *(void *)(v16 + 176) = *((void *)&v85[2] + 1);
  *(_DWORD *)(v16 + 184) = v86;
  if (v29)
  {
    unint64_t v30 = *(void *)(*(void *)(v16 + 160) + 8);
    unint64_t v31 = *(void *)(v16 + 144);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v30 >= v31) {
        v30 %= v31;
      }
    }
    else
    {
      v30 &= v31 - 1;
    }
    *(void *)(v27 + 8 * v30) = v16 + 160;
    *((void *)&v85[1] + 1) = 0;
    *((void *)&v85[2] + 1) = 0;
  }
  uint64_t v32 = *((void *)&v86 + 1);
  long long v33 = v87;
  *((void *)&v86 + 1) = 0;
  *(void *)&long long v87 = 0;
  *(void *)(v16 + 192) = v32;
  *(_OWORD *)(v16 + 200) = v33;
  *(_OWORD *)(v16 + 216) = v88;
  uint64_t v34 = v89;
  *(void *)(v16 + 232) = v89;
  *(_DWORD *)(v16 + 240) = DWORD2(v89);
  if (v34)
  {
    unint64_t v35 = *(void *)(*(void *)(v16 + 216) + 8);
    unint64_t v36 = *(void *)(v16 + 200);
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v35 >= v36) {
        v35 %= v36;
      }
    }
    else
    {
      v35 &= v36 - 1;
    }
    *(void *)(v32 + 8 * v35) = v16 + 216;
    *(void *)&long long v88 = 0;
    *(void *)&long long v89 = 0;
  }
  uint64_t v37 = *(void *)&v90[0];
  long long v38 = *(_OWORD *)((char *)v90 + 8);
  v90[0] = 0uLL;
  *(void *)(v16 + 248) = v37;
  *(_OWORD *)(v16 + 256) = v38;
  *(_OWORD *)(v16 + 272) = *(_OWORD *)((char *)&v90[1] + 8);
  uint64_t v39 = *((void *)&v90[2] + 1);
  *(void *)(v16 + 288) = *((void *)&v90[2] + 1);
  *(_DWORD *)(v16 + 296) = v91;
  if (v39)
  {
    unint64_t v40 = *(void *)(*(void *)(v16 + 272) + 8);
    unint64_t v41 = *(void *)(v16 + 256);
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v40 >= v41) {
        v40 %= v41;
      }
    }
    else
    {
      v40 &= v41 - 1;
    }
    *(void *)(v37 + 8 * v40) = v16 + 272;
    *((void *)&v90[1] + 1) = 0;
    *((void *)&v90[2] + 1) = 0;
  }
  uint64_t v42 = *((void *)&v91 + 1);
  long long v43 = v92;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  *(void *)(v16 + 304) = v42;
  *(_OWORD *)(v16 + 312) = v43;
  *(_OWORD *)(v16 + 328) = v93;
  uint64_t v44 = v94;
  *(void *)(v16 + 344) = v94;
  *(_DWORD *)(v16 + 352) = DWORD2(v94);
  if (v44)
  {
    unint64_t v45 = *(void *)(*(void *)(v16 + 328) + 8);
    unint64_t v46 = *(void *)(v16 + 312);
    if ((v46 & (v46 - 1)) != 0)
    {
      if (v45 >= v46) {
        v45 %= v46;
      }
    }
    else
    {
      v45 &= v46 - 1;
    }
    *(void *)(v42 + 8 * v45) = v16 + 328;
    *(void *)&long long v93 = 0;
    *(void *)&long long v94 = 0;
  }
  uint64_t v47 = *(void *)&v95[0];
  long long v48 = *(_OWORD *)((char *)v95 + 8);
  v95[0] = 0uLL;
  *(void *)(v16 + 360) = v47;
  *(_OWORD *)(v16 + 368) = v48;
  *(_OWORD *)(v16 + 384) = *(_OWORD *)((char *)&v95[1] + 8);
  uint64_t v49 = *((void *)&v95[2] + 1);
  *(void *)(v16 + 400) = *((void *)&v95[2] + 1);
  *(_DWORD *)(v16 + 408) = v95[3];
  if (v49)
  {
    unint64_t v50 = *(void *)(*(void *)(v16 + 384) + 8);
    unint64_t v51 = *(void *)(v16 + 368);
    if ((v51 & (v51 - 1)) != 0)
    {
      if (v50 >= v51) {
        v50 %= v51;
      }
    }
    else
    {
      v50 &= v51 - 1;
    }
    *(void *)(v47 + 8 * v50) = v16 + 384;
    *((void *)&v95[1] + 1) = 0;
    *((void *)&v95[2] + 1) = 0;
  }
  *(_OWORD *)(v16 + 416) = *(_OWORD *)((char *)&v95[3] + 8);
  *((void *)&v95[3] + 1) = 0;
  *(void *)&v95[4] = 0;
  *(unsigned char *)(v16 + 436) = BYTE12(v95[4]);
  *(_DWORD *)(v16 + 432) = DWORD2(v95[4]);
  char v98 = 1;
  float v52 = (float)(unint64_t)(*(void *)(a1 + 496) + 1);
  float v53 = *(float *)(a1 + 504);
  if (!v9 || (float)(v53 * (float)v9) < v52)
  {
    BOOL v54 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    unint64_t v55 = v54 | (2 * v9);
    unint64_t v56 = vcvtps_u32_f32(v52 / v53);
    if (v55 <= v56) {
      size_t prime = v56;
    }
    else {
      size_t prime = v55;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v9 = *(void *)(a1 + 464);
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_118;
      }
      unint64_t v70 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 496) / *(float *)(a1 + 504));
      if (v9 < 3 || (uint8x8_t v71 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
      {
        unint64_t v70 = std::__next_prime(v70);
      }
      else
      {
        uint64_t v72 = 1 << -(char)__clz(v70 - 1);
        if (v70 >= 2) {
          unint64_t v70 = v72;
        }
      }
      if (prime <= v70) {
        size_t prime = v70;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 464);
LABEL_118:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
        goto LABEL_131;
      }
      if (!prime)
      {
        uint64_t v79 = *(void *)(a1 + 456);
        *(void *)(a1 + 456) = 0;
        if (v79) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 472) + 40))(*(void *)(a1 + 472), v79, 8 * *(void *)(a1 + 464));
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 464) = 0;
        goto LABEL_118;
      }
    }
    uint64_t v58 = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(a1 + 472) + 16))(*(void *)(a1 + 472), 8 * prime, 8);
    uint64_t v59 = *(void *)(a1 + 456);
    *(void *)(a1 + 456) = v58;
    if (v59) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 472) + 40))(*(void *)(a1 + 472), v59, 8 * *(void *)(a1 + 464));
    }
    uint64_t v60 = 0;
    *(void *)(a1 + 464) = prime;
    do
      *(void *)(*(void *)(a1 + 456) + 8 * v60++) = 0;
    while (prime != v60);
    int32x4_t v61 = *(void **)(a1 + 480);
    if (!v61)
    {
LABEL_117:
      unint64_t v9 = prime;
      goto LABEL_118;
    }
    uint64_t v62 = a1 + 480;
    size_t v63 = v61[1];
    size_t v64 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v65 = v63 & v64;
      *(void *)(*(void *)(a1 + 456) + 8 * v65) = v62;
      for (uint64_t i = (void *)*v61; *v61; uint64_t i = (void *)*v61)
      {
        size_t v67 = i[1] & v64;
        if (v67 == v65)
        {
          int32x4_t v61 = i;
        }
        else
        {
          uint64_t v68 = *(void *)(a1 + 456);
          if (*(void *)(v68 + 8 * v67))
          {
            void *v61 = *i;
            uint64_t v69 = 8 * v67;
            void *i = **(void **)(*(void *)(a1 + 456) + v69);
            **(void **)(*(void *)(a1 + 456) + v69) = i;
          }
          else
          {
            *(void *)(v68 + 8 * v67) = v61;
            int32x4_t v61 = i;
            size_t v65 = v67;
          }
        }
      }
      goto LABEL_117;
    }
    if (v63 >= prime) {
      v63 %= prime;
    }
    *(void *)(*(void *)(a1 + 456) + 8 * v63) = v62;
    int8x16_t v73 = (void *)*v61;
    if (!*v61) {
      goto LABEL_117;
    }
    while (1)
    {
      size_t v75 = v73[1];
      if (v75 >= prime) {
        v75 %= prime;
      }
      if (v75 != v63)
      {
        uint64_t v76 = *(void *)(a1 + 456);
        if (!*(void *)(v76 + 8 * v75))
        {
          *(void *)(v76 + 8 * v75) = v61;
          goto LABEL_122;
        }
        void *v61 = *v73;
        uint64_t v74 = 8 * v75;
        *int8x16_t v73 = **(void **)(*(void *)(a1 + 456) + v74);
        **(void **)(*(void *)(a1 + 456) + v74) = v73;
        int8x16_t v73 = v61;
      }
      size_t v75 = v63;
LABEL_122:
      int32x4_t v61 = v73;
      int8x16_t v73 = (void *)*v73;
      size_t v63 = v75;
      if (!v73) {
        goto LABEL_117;
      }
    }
  }
LABEL_131:
  int8x16_t v77 = *(uint64_t **)(*(void *)(a1 + 456) + 8 * v2);
  if (v77)
  {
    *(void *)uint64_t v12 = *v77;
  }
  else
  {
    *(void *)uint64_t v12 = *(void *)(a1 + 480);
    *(void *)(a1 + 480) = v12;
    *(void *)(*(void *)(a1 + 456) + 8 * v2) = a1 + 480;
    if (!*(void *)v12) {
      goto LABEL_140;
    }
    unint64_t v78 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v78 >= v9) {
        v78 %= v9;
      }
    }
    else
    {
      v78 &= v9 - 1;
    }
    int8x16_t v77 = (uint64_t *)(*(void *)(a1 + 456) + 8 * v78);
  }
  *int8x16_t v77 = v12;
LABEL_140:
  ++*(void *)(a1 + 496);
  if (*(void *)&v95[4]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v95[4] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**(void **)&v95[4] + 16))(*(void *)&v95[4]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v95[4]);
  }
  int v15 = 0;
LABEL_144:
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)v95);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)&v91 + 1);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)v90);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)&v86 + 1);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)v85);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)&v81 + 1);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)v80);
  if (v15) {
    ++*(_DWORD *)(v12 + 432);
  }
  std::mutex::unlock((std::mutex *)a1);
}

void sub_1A1C68968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,md::LabelFeaturePoolTileInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<void *,md::LabelFeaturePoolTileInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v10 - 112));
  md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo((md::LabelFeaturePoolTileInfo *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  unint64_t v2 = (void *)a1[3];
  while (v2)
  {
    uint64_t v3 = v2;
    unint64_t v2 = (void *)*v2;
    int v4 = (void *)v3[2];
    if (v4)
    {
      if ((*v4)-- == 1)
      {
        md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v4 + 1));
        {
          operator new();
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v3[2], 104);
        uint64_t v3[2] = 0;
      }
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 24);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v6, 8 * a1[1]);
  }
  return a1;
}

uint64_t *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  unint64_t v2 = (void *)a1[3];
  while (v2)
  {
    uint64_t v3 = v2;
    unint64_t v2 = (void *)*v2;
    int v4 = (void *)v3[2];
    if (v4)
    {
      if ((*v4)-- == 1)
      {
        md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v4 + 1));
        {
          operator new();
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v3[2], 104);
        uint64_t v3[2] = 0;
      }
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 24);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v6, 8 * a1[1]);
  }
  return a1;
}

uint64_t *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  unint64_t v2 = (void *)a1[3];
  while (v2)
  {
    uint64_t v3 = v2;
    unint64_t v2 = (void *)*v2;
    int v4 = (void *)v3[2];
    if (v4)
    {
      if ((*v4)-- == 1)
      {
        md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>::~LabelFeatureThunk((uint64_t)(v4 + 1));
        {
          operator new();
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v3[2], 104);
        uint64_t v3[2] = 0;
      }
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 24);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v6, 8 * a1[1]);
  }
  return a1;
}

uint64_t *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  unint64_t v2 = (void *)a1[3];
  while (v2)
  {
    uint64_t v3 = v2;
    unint64_t v2 = (void *)*v2;
    int v4 = (void *)v3[2];
    if (v4)
    {
      if ((*v4)-- == 1)
      {
        md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v4 + 1));
        {
          operator new();
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v3[2], 104);
        uint64_t v3[2] = 0;
      }
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 24);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v6, 8 * a1[1]);
  }
  return a1;
}

uint64_t *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  unint64_t v2 = (void *)a1[3];
  while (v2)
  {
    uint64_t v3 = v2;
    unint64_t v2 = (void *)*v2;
    int v4 = (void *)v3[2];
    if (v4)
    {
      if ((*v4)-- == 1)
      {
        md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v4 + 1));
        {
          operator new();
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v3[2], 104);
        uint64_t v3[2] = 0;
      }
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 24);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v6, 8 * a1[1]);
  }
  return a1;
}

uint64_t *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  unint64_t v2 = (void *)a1[3];
  while (v2)
  {
    uint64_t v3 = v2;
    unint64_t v2 = (void *)*v2;
    int v4 = (void *)v3[2];
    if (v4)
    {
      if ((*v4)-- == 1)
      {
        md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v4 + 1));
        {
          operator new();
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v3[2], 104);
        uint64_t v3[2] = 0;
      }
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 24);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v6, 8 * a1[1]);
  }
  return a1;
}

void md::StyleLogic::prune(md::StyleLogic *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (void (**)(void))&unk_1EF56D5F0;
  v6[0] = &unk_1EF56D5F0;
  unint64_t v7 = (void (***)(void))v6;
  if (!*((void *)this + 32))
  {
    md::StyleLogic::updateConfiguration(this, *((_DWORD *)this + 274));
    if (!v7)
    {
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_20:
      __break(1u);
      return;
    }
    unint64_t v2 = *v7;
  }
  v2[6]();
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*v7)[5]();
  }
  uint64_t v3 = (void (**)(void))&unk_1EF56D638;
  v4[0] = &unk_1EF56D638;
  unint64_t v5 = (void (***)(void))v4;
  if (*((void *)this + 34)) {
    goto LABEL_12;
  }
  md::StyleLogic::updateConfiguration(this, *((_DWORD *)this + 274));
  if (!*((void *)this + 34)) {
    goto LABEL_13;
  }
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_20;
  }
  uint64_t v3 = *v5;
LABEL_12:
  v3[6]();
LABEL_13:
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*v5)[5]();
  }
}

void sub_1A1C69434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A1C69448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_1,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*a2 + 16);
  int v4 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v3 + 2528));
  if (v4) {
    geo::read_write_lock::logFailure(v4, (uint64_t)"write lock", v5);
  }
  if (*(void *)(v3 + 2768))
  {
    std::__hash_table<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,true>,std::__unordered_map_equal<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::equal_to<gss::StyleSheetResultCacheKey>,std::hash<gss::StyleSheetResultCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::__deallocate_node((gss::Allocator *)(v3 + 2728), *(void **)(v3 + 2752));
    *(void *)(v3 + 2752) = 0;
    uint64_t v6 = *(void *)(v3 + 2736);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)(v3 + 2728) + 8 * i) = 0;
    }
    *(void *)(v3 + 2768) = 0;
  }
  uint64_t v8 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v3 + 2528));
  if (v8) {
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
  }
  uint64_t v10 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 120));
  if (v10) {
    geo::read_write_lock::logFailure(v10, (uint64_t)"write lock", v11);
  }
  uint64_t v12 = *(void **)(v2 + 56);
  if (v12)
  {
    while (1)
    {
      unint64_t v13 = (std::__shared_weak_count *)v12[9];
      if (!v13) {
        goto LABEL_22;
      }
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      if (!v14) {
        goto LABEL_22;
      }
      int v15 = v14;
      uint64_t v16 = v12[8];
      if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v16) {
          goto LABEL_22;
        }
LABEL_19:
        uint64_t v12 = (void *)*v12;
        if (!v12) {
          break;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v15);
        if (v16) {
          goto LABEL_19;
        }
LABEL_22:
        int8x8_t v17 = *(int8x8_t *)(v2 + 40);
        unint64_t v18 = v12[1];
        uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          if (v18 >= *(void *)&v17) {
            v18 %= *(void *)&v17;
          }
        }
        else
        {
          v18 &= *(void *)&v17 - 1;
        }
        unint64_t v20 = (void *)*v12;
        uint64_t v21 = *(void *)(v2 + 32);
        uint64_t v22 = *(void **)(v21 + 8 * v18);
        do
        {
          long long v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22 != v12);
        if (v23 == (void *)(v2 + 56)) {
          goto LABEL_78;
        }
        unint64_t v24 = v23[1];
        if (v19.u32[0] > 1uLL)
        {
          if (v24 >= *(void *)&v17) {
            v24 %= *(void *)&v17;
          }
        }
        else
        {
          v24 &= *(void *)&v17 - 1;
        }
        unint64_t v25 = (void *)*v12;
        if (v24 != v18)
        {
LABEL_78:
          if (v20)
          {
            unint64_t v26 = v20[1];
            if (v19.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&v17) {
                v26 %= *(void *)&v17;
              }
            }
            else
            {
              v26 &= *(void *)&v17 - 1;
            }
            unint64_t v25 = (void *)*v12;
            if (v26 == v18)
            {
LABEL_42:
              unint64_t v27 = v25[1];
              if (v19.u32[0] > 1uLL)
              {
                if (v27 >= *(void *)&v17) {
                  v27 %= *(void *)&v17;
                }
              }
              else
              {
                v27 &= *(void *)&v17 - 1;
              }
              if (v27 != v18)
              {
                *(void *)(*(void *)(v2 + 32) + 8 * v27) = v23;
                unint64_t v25 = (void *)*v12;
              }
              goto LABEL_14;
            }
          }
          *(void *)(v21 + 8 * v18) = 0;
          unint64_t v25 = (void *)*v12;
        }
        if (v25) {
          goto LABEL_42;
        }
LABEL_14:
        void *v23 = v25;
        *uint64_t v12 = 0;
        --*(void *)(v2 + 72);
        char v46 = 1;
        uint64_t v45 = v2 + 64;
        std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,gss::Allocator>>::operator()[abi:nn180100]((uint64_t)&v45, (uint64_t)v12);
        uint64_t v12 = v20;
        if (!v20) {
          break;
        }
      }
    }
  }
  long long v28 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 120));
  if (v28) {
    geo::read_write_lock::logFailure(v28, (uint64_t)"unlock", v29);
  }
  unint64_t v30 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 320));
  if (v30) {
    geo::read_write_lock::logFailure(v30, (uint64_t)"write lock", v31);
  }
  uint64_t v32 = *(void **)(v2 + 88);
  if (v32 != *(void **)(v2 + 96))
  {
    while (1)
    {
      long long v33 = (std::__shared_weak_count *)v32[1];
      if (!v33) {
        break;
      }
      uint64_t v34 = std::__shared_weak_count::lock(v33);
      if (!v34) {
        break;
      }
      unint64_t v35 = v34;
      uint64_t v36 = *v32;
      if (atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v36) {
          break;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v35);
        if (!v36) {
          break;
        }
      }
      v32 += 2;
      uint64_t v37 = *(void **)(v2 + 96);
LABEL_55:
      if (v32 == v37) {
        goto LABEL_72;
      }
    }
    long long v38 = v32 + 2;
    uint64_t v39 = *(void **)(v2 + 96);
    if (v32 + 2 == v39)
    {
      uint64_t v37 = v32;
    }
    else
    {
      do
      {
        uint64_t v37 = v38;
        long long v40 = *(_OWORD *)v38;
        *long long v38 = 0;
        v38[1] = 0;
        unint64_t v41 = (std::__shared_weak_count *)*(v38 - 1);
        *((_OWORD *)v38 - 1) = v40;
        if (v41) {
          std::__shared_weak_count::__release_weak(v41);
        }
        v38 += 2;
      }
      while (v37 + 2 != v39);
      long long v38 = *(void **)(v2 + 96);
    }
    while (v38 != v37)
    {
      uint64_t v42 = (std::__shared_weak_count *)*(v38 - 1);
      if (v42) {
        std::__shared_weak_count::__release_weak(v42);
      }
      v38 -= 2;
    }
    *(void *)(v2 + 96) = v37;
    goto LABEL_55;
  }
LABEL_72:
  long long v43 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 320));
  if (v43)
  {
    geo::read_write_lock::logFailure(v43, (uint64_t)"unlock", v44);
  }
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_0,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
}

void gss::StylesheetManager<gss::PropertyID>::clearCaches(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 2528));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  }
  if (*(void *)(v2 + 2768))
  {
    std::__hash_table<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,true>,std::__unordered_map_equal<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::equal_to<gss::StyleSheetResultCacheKey>,std::hash<gss::StyleSheetResultCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::__deallocate_node((gss::Allocator *)(v2 + 2728), *(void **)(v2 + 2752));
    *(void *)(v2 + 2752) = 0;
    uint64_t v5 = *(void *)(v2 + 2736);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)(v2 + 2728) + 8 * i) = 0;
    }
    *(void *)(v2 + 2768) = 0;
  }
  unint64_t v7 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 2528));
  if (v7) {
    geo::read_write_lock::logFailure(v7, (uint64_t)"unlock", v8);
  }
  unint64_t v9 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 120));
  if (v9) {
    geo::read_write_lock::logFailure(v9, (uint64_t)"write lock", v10);
  }
  unint64_t v11 = *(void **)(a1 + 56);
  if (v11)
  {
    while (1)
    {
      uint64_t v12 = (std::__shared_weak_count *)v11[9];
      if (!v12) {
        goto LABEL_22;
      }
      unint64_t v13 = std::__shared_weak_count::lock(v12);
      if (!v13) {
        goto LABEL_22;
      }
      uint64_t v14 = v13;
      uint64_t v15 = v11[8];
      if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v15) {
          goto LABEL_22;
        }
LABEL_19:
        unint64_t v11 = (void *)*v11;
        if (!v11) {
          break;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
        if (v15) {
          goto LABEL_19;
        }
LABEL_22:
        int8x8_t v16 = *(int8x8_t *)(a1 + 40);
        unint64_t v17 = v11[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&v16) {
            v17 %= *(void *)&v16;
          }
        }
        else
        {
          v17 &= *(void *)&v16 - 1;
        }
        uint8x8_t v19 = (void *)*v11;
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = *(void **)(v20 + 8 * v17);
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21 != v11);
        if (v22 == (void *)(a1 + 56)) {
          goto LABEL_78;
        }
        unint64_t v23 = v22[1];
        if (v18.u32[0] > 1uLL)
        {
          if (v23 >= *(void *)&v16) {
            v23 %= *(void *)&v16;
          }
        }
        else
        {
          v23 &= *(void *)&v16 - 1;
        }
        unint64_t v24 = (void *)*v11;
        if (v23 != v17)
        {
LABEL_78:
          if (v19)
          {
            unint64_t v25 = v19[1];
            if (v18.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&v16) {
                v25 %= *(void *)&v16;
              }
            }
            else
            {
              v25 &= *(void *)&v16 - 1;
            }
            unint64_t v24 = (void *)*v11;
            if (v25 == v17)
            {
LABEL_42:
              unint64_t v26 = v24[1];
              if (v18.u32[0] > 1uLL)
              {
                if (v26 >= *(void *)&v16) {
                  v26 %= *(void *)&v16;
                }
              }
              else
              {
                v26 &= *(void *)&v16 - 1;
              }
              if (v26 != v17)
              {
                *(void *)(*(void *)(a1 + 32) + 8 * v26) = v22;
                unint64_t v24 = (void *)*v11;
              }
              goto LABEL_14;
            }
          }
          *(void *)(v20 + 8 * v17) = 0;
          unint64_t v24 = (void *)*v11;
        }
        if (v24) {
          goto LABEL_42;
        }
LABEL_14:
        *uint64_t v22 = v24;
        *unint64_t v11 = 0;
        --*(void *)(a1 + 72);
        char v45 = 1;
        uint64_t v44 = a1 + 64;
        std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,gss::Allocator>>::operator()[abi:nn180100]((uint64_t)&v44, (uint64_t)v11);
        unint64_t v11 = v19;
        if (!v19) {
          break;
        }
      }
    }
  }
  unint64_t v27 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 120));
  if (v27) {
    geo::read_write_lock::logFailure(v27, (uint64_t)"unlock", v28);
  }
  uint64_t v29 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 320));
  if (v29) {
    geo::read_write_lock::logFailure(v29, (uint64_t)"write lock", v30);
  }
  unint64_t v31 = *(void **)(a1 + 88);
  if (v31 != *(void **)(a1 + 96))
  {
    while (1)
    {
      uint64_t v32 = (std::__shared_weak_count *)v31[1];
      if (!v32) {
        break;
      }
      long long v33 = std::__shared_weak_count::lock(v32);
      if (!v33) {
        break;
      }
      uint64_t v34 = v33;
      uint64_t v35 = *v31;
      if (atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v35) {
          break;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v34);
        if (!v35) {
          break;
        }
      }
      v31 += 2;
      uint64_t v36 = *(void **)(a1 + 96);
LABEL_55:
      if (v31 == v36) {
        goto LABEL_72;
      }
    }
    uint64_t v37 = v31 + 2;
    long long v38 = *(void **)(a1 + 96);
    if (v31 + 2 == v38)
    {
      uint64_t v36 = v31;
    }
    else
    {
      do
      {
        uint64_t v36 = v37;
        long long v39 = *(_OWORD *)v37;
        *uint64_t v37 = 0;
        v37[1] = 0;
        long long v40 = (std::__shared_weak_count *)*(v37 - 1);
        *((_OWORD *)v37 - 1) = v39;
        if (v40) {
          std::__shared_weak_count::__release_weak(v40);
        }
        v37 += 2;
      }
      while (v36 + 2 != v38);
      uint64_t v37 = *(void **)(a1 + 96);
    }
    while (v37 != v36)
    {
      unint64_t v41 = (std::__shared_weak_count *)*(v37 - 1);
      if (v41) {
        std::__shared_weak_count::__release_weak(v41);
      }
      v37 -= 2;
    }
    *(void *)(a1 + 96) = v36;
    goto LABEL_55;
  }
LABEL_72:
  uint64_t v42 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 320));
  if (v42)
  {
    geo::read_write_lock::logFailure(v42, (uint64_t)"unlock", v43);
  }
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_25 &&>>()
{
  id v0 = +[VKPlatform sharedPlatform];
  kVariableLogicFrequency = [v0 preferredFrequencyUpdate];
}

void sub_1A1C69CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1C6A1A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::StandardMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  md::CartographicMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  uint64_t v6 = *(void **)(*(void *)(a3 + 856) + 40);
  unint64_t v7 = *(void *)(*(void *)(a3 + 856) + 48) - (void)v6;
  if (v7 < 0xF0) {
    return;
  }
  uint64_t v8 = (md::DaVinciGroundRenderLayer *)v6[29];
  if (v7 < 0xF8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  unint64_t v9 = (md::DaVinciGroundRenderLayer *)v6[30];
  if (v7 < 0x108)
  {
    uint64_t v10 = 0;
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v10 = (md::DaVinciGroundRenderLayer *)v6[32];
  if (v8) {
LABEL_9:
  }
    md::DaVinciGroundRenderLayer::setSupportsVKM(v8, *(unsigned __int8 *)(a1 + 568));
LABEL_10:
  if (v9) {
    md::DaVinciGroundRenderLayer::setSupportsVKM(v9, *(unsigned __int8 *)(a1 + 568));
  }
  if (v10)
  {
    int v11 = *(unsigned __int8 *)(a1 + 568);
    md::DaVinciGroundRenderLayer::setSupportsVKM(v10, v11);
  }
}

void md::DaVinciBaseMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a3 + 856);
  uint64_t v8 = *(void **)(v7 + 40);
  unint64_t v9 = *(void *)(v7 + 48) - (void)v8;
  if (v9 >= 0xF0)
  {
    uint64_t v10 = (md::DaVinciGroundRenderLayer *)v8[29];
    if (v9 >= 0xF8)
    {
      int v11 = (md::DaVinciGroundRenderLayer *)v8[30];
      if (v9 >= 0x108)
      {
        uint64_t v12 = (md::DaVinciGroundRenderLayer *)v8[32];
        if (!v10) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v12 = 0;
        if (!v10) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 0;
      if (!v10)
      {
LABEL_5:
        if (v11) {
          md::DaVinciGroundRenderLayer::setSupportsVKM(v11, *(unsigned __int8 *)(a1 + 560));
        }
        if (v12) {
          md::DaVinciGroundRenderLayer::setSupportsVKM(v12, *(unsigned __int8 *)(a1 + 560));
        }
        goto LABEL_9;
      }
    }
    md::DaVinciGroundRenderLayer::setSupportsVKM(v10, *(unsigned __int8 *)(a1 + 560));
    goto LABEL_5;
  }
LABEL_9:
  unint64_t v13 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v14 = v13[2];
  if (!*(void *)&v14) {
    goto LABEL_155;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = 0x87BA2765F9E38E05;
    if (*(void *)&v14 <= 0x87BA2765F9E38E05) {
      unint64_t v16 = 0x87BA2765F9E38E05 % *(void *)&v14;
    }
  }
  else
  {
    unint64_t v16 = (*(void *)&v14 - 1) & 0x87BA2765F9E38E05;
  }
  int8x8_t v17 = v13[1];
  uint8x8_t v18 = *(void **)(*(void *)&v17 + 8 * v16);
  if (!v18 || (uint8x8_t v19 = (void *)*v18) == 0)
  {
LABEL_29:
    uint64_t v22 = 0;
    goto LABEL_30;
  }
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v21 = v19[1];
      if (v21 == 0x87BA2765F9E38E05)
      {
        if (v19[2] == 0x87BA2765F9E38E05) {
          goto LABEL_61;
        }
      }
      else if ((v21 & (*(void *)&v14 - 1)) != v16)
      {
        goto LABEL_29;
      }
      uint8x8_t v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_29;
      }
    }
  }
  while (1)
  {
    unint64_t v20 = v19[1];
    if (v20 == 0x87BA2765F9E38E05) {
      break;
    }
    if (v20 >= *(void *)&v14) {
      v20 %= *(void *)&v14;
    }
    if (v20 != v16) {
      goto LABEL_29;
    }
LABEL_19:
    uint8x8_t v19 = (void *)*v19;
    if (!v19) {
      goto LABEL_29;
    }
  }
  if (v19[2] != 0x87BA2765F9E38E05) {
    goto LABEL_19;
  }
LABEL_61:
  uint64_t v22 = v19[5];
LABEL_30:
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v23 = 0xAF46DE79C836B0D8;
    if (*(void *)&v14 <= 0xAF46DE79C836B0D8) {
      unint64_t v23 = 0xAF46DE79C836B0D8 % *(void *)&v14;
    }
  }
  else
  {
    unint64_t v23 = (*(void *)&v14 - 1) & 0xAF46DE79C836B0D8;
  }
  unint64_t v24 = *(void **)(*(void *)&v17 + 8 * v23);
  if (!v24) {
    goto LABEL_82;
  }
  unint64_t v25 = (void *)*v24;
  if (!v25) {
    goto LABEL_82;
  }
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v27 = v25[1];
      if (v27 == 0xAF46DE79C836B0D8)
      {
        if (v25[2] == 0xAF46DE79C836B0D8) {
          goto LABEL_55;
        }
      }
      else if ((v27 & (*(void *)&v14 - 1)) != v23)
      {
        goto LABEL_82;
      }
      unint64_t v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_82;
      }
    }
  }
  while (2)
  {
    unint64_t v26 = v25[1];
    if (v26 != 0xAF46DE79C836B0D8)
    {
      if (v26 >= *(void *)&v14) {
        v26 %= *(void *)&v14;
      }
      if (v26 != v23) {
        goto LABEL_82;
      }
      goto LABEL_39;
    }
    if (v25[2] != 0xAF46DE79C836B0D8)
    {
LABEL_39:
      unint64_t v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_82;
      }
      continue;
    }
    break;
  }
LABEL_55:
  if (v22)
  {
    long long v28 = (md::TileSelectionLogic *)v25[5];
    if (v28)
    {
      uint64_t v29 = *a4;
      uint64_t v30 = a4[1];
      if (*a4 != v30)
      {
        while (*(unsigned char *)v29 != 6)
        {
          v29 += 16;
          if (v29 == v30) {
            goto LABEL_65;
          }
        }
      }
      if (v29 == v30 || !*(void *)(v29 + 8)) {
LABEL_65:
      }
        char v31 = 0;
      else {
        char v31 = 2;
      }
      uint64_t v32 = +[VKPlatform sharedPlatform];
      int v33 = [v32 tilePrefetchNumberOfScreens];
      uint64_t v34 = *a4;
      uint64_t v35 = a4[1];
      if (*a4 != v35)
      {
        while (*(unsigned char *)v34 != 7)
        {
          v34 += 16;
          if (v34 == v35) {
            goto LABEL_72;
          }
        }
      }
      if (v34 == v35) {
LABEL_72:
      }
        uint64_t v36 = 0;
      else {
        uint64_t v36 = *(void *)(v34 + 8);
      }
      uint64_t v37 = 0;
      uint64_t v38 = 1000;
      if (!v36) {
        uint64_t v38 = 0;
      }
      *((unsigned char *)v28 + 328) = v31;
      if (*(void *)(a2 + 1200) != 1) {
        uint64_t v37 = *(void *)(a1 + 536);
      }
      *(void *)(v22 + 224) = v37;
      if (*(void *)(v22 + 240) != v38 || *(_DWORD *)(v22 + 252) != v33)
      {
        *(void *)(v22 + 240) = v38;
        *(_DWORD *)(v22 + 252) = v33;
        if (!v36) {
          *(void *)(v22 + 256) = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      md::TileSelectionLogic::configurationDidChange(v28);

      unint64_t v13 = *(int8x8_t **)(a2 + 1120);
      int8x8_t v14 = v13[2];
    }
  }
LABEL_82:
  if (!*(void *)&v14) {
    goto LABEL_155;
  }
  uint8x8_t v39 = (uint8x8_t)vcnt_s8(v14);
  v39.i16[0] = vaddlv_u8(v39);
  unint64_t v40 = v39.u32[0];
  if (v39.u32[0] > 1uLL)
  {
    uint64_t v41 = 0x2FED70A4459DFCA1;
    if (*(void *)&v14 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v41 = 0x2FED70A4459DFCA1uLL % *(void *)&v14;
    }
  }
  else
  {
    uint64_t v41 = (*(void *)&v14 - 1) & 0x2FED70A4459DFCA1;
  }
  uint64_t v42 = *(void **)(*(void *)&v13[1] + 8 * v41);
  if (!v42) {
    goto LABEL_109;
  }
  long long v43 = (void *)*v42;
  if (!v43) {
    goto LABEL_109;
  }
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v45 = v43[1];
      if (v45 == 0x2FED70A4459DFCA1)
      {
        if (v43[2] == 0x2FED70A4459DFCA1) {
          goto LABEL_103;
        }
      }
      else if ((v45 & (*(void *)&v14 - 1)) != v41)
      {
        goto LABEL_107;
      }
      long long v43 = (void *)*v43;
      if (!v43) {
        goto LABEL_107;
      }
    }
  }
  while (2)
  {
    unint64_t v44 = v43[1];
    if (v44 != 0x2FED70A4459DFCA1)
    {
      if (v44 >= *(void *)&v14) {
        v44 %= *(void *)&v14;
      }
      if (v44 != v41) {
        goto LABEL_107;
      }
      goto LABEL_92;
    }
    if (v43[2] != 0x2FED70A4459DFCA1)
    {
LABEL_92:
      long long v43 = (void *)*v43;
      if (!v43) {
        goto LABEL_107;
      }
      continue;
    }
    break;
  }
LABEL_103:
  uint64_t v46 = v43[5];
  if (v46)
  {
    if (*(unsigned char *)(v46 + 167) != 6) {
      md::StyleLogic::setMapMode(v43[5], 0, 0.0);
    }
    md::StyleLogic::setGroundMode(v46, 1);
    unint64_t v13 = *(int8x8_t **)(a2 + 1120);
    int8x8_t v14 = v13[2];
  }
LABEL_107:
  if (!*(void *)&v14) {
    goto LABEL_155;
  }
  uint8x8_t v47 = (uint8x8_t)vcnt_s8(v14);
  v47.i16[0] = vaddlv_u8(v47);
  unint64_t v40 = v47.u32[0];
LABEL_109:
  if (v40 > 1)
  {
    unint64_t v48 = 0xDAD5CEE0DC5FF509;
    if (*(void *)&v14 <= 0xDAD5CEE0DC5FF509) {
      unint64_t v48 = 0xDAD5CEE0DC5FF509 % *(void *)&v14;
    }
  }
  else
  {
    unint64_t v48 = (*(void *)&v14 - 1) & 0xDAD5CEE0DC5FF509;
  }
  int8x8_t v49 = v13[1];
  unint64_t v50 = *(void **)(*(void *)&v49 + 8 * v48);
  if (!v50) {
    goto LABEL_133;
  }
  unint64_t v51 = (void *)*v50;
  if (!v51) {
    goto LABEL_133;
  }
  if (v40 < 2)
  {
    while (1)
    {
      uint64_t v53 = v51[1];
      if (v53 == 0xDAD5CEE0DC5FF509)
      {
        if (v51[2] == 0xDAD5CEE0DC5FF509) {
          goto LABEL_129;
        }
      }
      else if ((v53 & (*(void *)&v14 - 1)) != v48)
      {
        goto LABEL_131;
      }
      unint64_t v51 = (void *)*v51;
      if (!v51) {
        goto LABEL_131;
      }
    }
  }
  while (2)
  {
    unint64_t v52 = v51[1];
    if (v52 != 0xDAD5CEE0DC5FF509)
    {
      if (v52 >= *(void *)&v14) {
        v52 %= *(void *)&v14;
      }
      if (v52 != v48) {
        goto LABEL_131;
      }
      goto LABEL_118;
    }
    if (v51[2] != 0xDAD5CEE0DC5FF509)
    {
LABEL_118:
      unint64_t v51 = (void *)*v51;
      if (!v51) {
        goto LABEL_131;
      }
      continue;
    }
    break;
  }
LABEL_129:
  uint64_t v54 = v51[5];
  if (v54)
  {
    *(unsigned char *)(v54 + 168) = 0;
    int8x8_t v14 = v13[2];
  }
LABEL_131:
  if (!*(void *)&v14) {
    goto LABEL_155;
  }
  uint8x8_t v55 = (uint8x8_t)vcnt_s8(v14);
  v55.i16[0] = vaddlv_u8(v55);
  unint64_t v40 = v55.u32[0];
LABEL_133:
  if (v40 > 1)
  {
    unint64_t v56 = 0x91E65CD7F1A7A7FALL;
    if (*(void *)&v14 <= 0x91E65CD7F1A7A7FALL) {
      unint64_t v56 = 0x91E65CD7F1A7A7FALL % *(void *)&v14;
    }
  }
  else
  {
    unint64_t v56 = (*(void *)&v14 - 1) & 0x91E65CD7F1A7A7FALL;
  }
  int32x4_t v57 = *(void **)(*(void *)&v49 + 8 * v56);
  if (v57)
  {
    uint64_t v58 = (void *)*v57;
    if (v58)
    {
      if (v40 < 2)
      {
        uint64_t v59 = *(void *)&v14 - 1;
        while (1)
        {
          uint64_t v61 = v58[1];
          if (v61 == 0x91E65CD7F1A7A7FALL)
          {
            if (v58[2] == 0x91E65CD7F1A7A7FALL) {
              goto LABEL_153;
            }
          }
          else if ((v61 & v59) != v56)
          {
            goto LABEL_155;
          }
          uint64_t v58 = (void *)*v58;
          if (!v58) {
            goto LABEL_155;
          }
        }
      }
      do
      {
        unint64_t v60 = v58[1];
        if (v60 == 0x91E65CD7F1A7A7FALL)
        {
          if (v58[2] == 0x91E65CD7F1A7A7FALL)
          {
LABEL_153:
            uint64_t v62 = v58[5];
            if (v62) {
              *(unsigned char *)(v62 + 120) = 1;
            }
            break;
          }
        }
        else
        {
          if (v60 >= *(void *)&v14) {
            v60 %= *(void *)&v14;
          }
          if (v60 != v56) {
            break;
          }
        }
        uint64_t v58 = (void *)*v58;
      }
      while (v58);
    }
  }
LABEL_155:
  uint64_t v63 = **(void **)(v7 + 40);
  int v64 = *(unsigned __int8 *)(v63 + 56);
  *(_OWORD *)(v63 + 60) = *(_OWORD *)(a1 + 544);
  if (!v64) {
    *(unsigned char *)(v63 + 56) = 1;
  }
}

void sub_1A1C6A938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::setSupportsVKM(md::DaVinciGroundRenderLayer *this, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 33) != a2)
  {
    *((unsigned char *)this + 33) = a2;
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v3 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = *((unsigned __int8 *)this + 3560);
      int v5 = *((unsigned __int8 *)this + 33);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_INFO, "[FeatureFlag]DaVinciGroundRenderLayer(%d):%d", (uint8_t *)v6, 0xEu);
    }
  }
}

void md::CartographicMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int16 v7 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v8 = v7[2];
  if (!*(void *)&v8) {
    goto LABEL_118;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = 0x87BA2765F9E38E05;
    if (*(void *)&v8 <= 0x87BA2765F9E38E05) {
      unint64_t v11 = 0x87BA2765F9E38E05 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & 0x87BA2765F9E38E05;
  }
  int8x8_t v12 = v7[1];
  unint64_t v13 = *(void **)(*(void *)&v12 + 8 * v11);
  if (!v13 || (int8x8_t v14 = (void *)*v13) == 0)
  {
LABEL_21:
    uint64_t v17 = 0;
    goto LABEL_22;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x87BA2765F9E38E05)
      {
        if (v14[2] == 0x87BA2765F9E38E05) {
          goto LABEL_48;
        }
      }
      else if ((v16 & (*(void *)&v8 - 1)) != v11)
      {
        goto LABEL_21;
      }
      int8x8_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == 0x87BA2765F9E38E05) {
      break;
    }
    if (v15 >= *(void *)&v8) {
      v15 %= *(void *)&v8;
    }
    if (v15 != v11) {
      goto LABEL_21;
    }
LABEL_11:
    int8x8_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_21;
    }
  }
  if (v14[2] != 0x87BA2765F9E38E05) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v17 = v14[5];
LABEL_22:
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v18 = 0xAF46DE79C836B0D8;
    if (*(void *)&v8 <= 0xAF46DE79C836B0D8) {
      unint64_t v18 = 0xAF46DE79C836B0D8 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v8 - 1) & 0xAF46DE79C836B0D8;
  }
  uint8x8_t v19 = *(void **)(*(void *)&v12 + 8 * v18);
  if (!v19) {
    goto LABEL_69;
  }
  unint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_69;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0xAF46DE79C836B0D8)
      {
        if (v20[2] == 0xAF46DE79C836B0D8) {
          goto LABEL_42;
        }
      }
      else if ((v22 & (*(void *)&v8 - 1)) != v18)
      {
        goto LABEL_69;
      }
      unint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_69;
      }
    }
  }
  while (2)
  {
    unint64_t v21 = v20[1];
    if (v21 != 0xAF46DE79C836B0D8)
    {
      if (v21 >= *(void *)&v8) {
        v21 %= *(void *)&v8;
      }
      if (v21 != v18) {
        goto LABEL_69;
      }
      goto LABEL_31;
    }
    if (v20[2] != 0xAF46DE79C836B0D8)
    {
LABEL_31:
      unint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_69;
      }
      continue;
    }
    break;
  }
LABEL_42:
  if (v17)
  {
    unint64_t v23 = (md::TileSelectionLogic *)v20[5];
    if (v23)
    {
      uint64_t v24 = *a4;
      uint64_t v25 = a4[1];
      if (*a4 != v25)
      {
        while (*(unsigned char *)v24 != 6)
        {
          v24 += 16;
          if (v24 == v25) {
            goto LABEL_52;
          }
        }
      }
      if (v24 == v25 || !*(void *)(v24 + 8)) {
LABEL_52:
      }
        char v26 = 0;
      else {
        char v26 = 2;
      }
      uint64_t v27 = +[VKPlatform sharedPlatform];
      int v28 = [v27 tilePrefetchNumberOfScreens];
      uint64_t v29 = *a4;
      uint64_t v30 = a4[1];
      if (*a4 != v30)
      {
        while (*(unsigned char *)v29 != 7)
        {
          v29 += 16;
          if (v29 == v30) {
            goto LABEL_59;
          }
        }
      }
      if (v29 == v30) {
LABEL_59:
      }
        uint64_t v31 = 0;
      else {
        uint64_t v31 = *(void *)(v29 + 8);
      }
      uint64_t v32 = 0;
      uint64_t v33 = 1000;
      if (!v31) {
        uint64_t v33 = 0;
      }
      *((unsigned char *)v23 + 328) = v26;
      if (*(void *)(a2 + 1200) != 1) {
        uint64_t v32 = *(void *)(a1 + 536);
      }
      *(void *)(v17 + 224) = v32;
      if (*(void *)(v17 + 240) != v33 || *(_DWORD *)(v17 + 252) != v28)
      {
        *(void *)(v17 + 240) = v33;
        *(_DWORD *)(v17 + 252) = v28;
        if (!v31) {
          *(void *)(v17 + 256) = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      md::TileSelectionLogic::configurationDidChange(v23);

      __int16 v7 = *(int8x8_t **)(a2 + 1120);
      int8x8_t v8 = v7[2];
    }
  }
LABEL_69:
  if (!*(void *)&v8) {
    goto LABEL_118;
  }
  uint8x8_t v34 = (uint8x8_t)vcnt_s8(v8);
  v34.i16[0] = vaddlv_u8(v34);
  unint64_t v35 = v34.u32[0];
  if (v34.u32[0] > 1uLL)
  {
    uint64_t v36 = 0x2FED70A4459DFCA1;
    if (*(void *)&v8 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v36 = 0x2FED70A4459DFCA1uLL % *(void *)&v8;
    }
  }
  else
  {
    uint64_t v36 = (*(void *)&v8 - 1) & 0x2FED70A4459DFCA1;
  }
  uint64_t v37 = *(void **)(*(void *)&v7[1] + 8 * v36);
  if (!v37) {
    goto LABEL_96;
  }
  uint64_t v38 = (void *)*v37;
  if (!v38) {
    goto LABEL_96;
  }
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v40 = v38[1];
      if (v40 == 0x2FED70A4459DFCA1)
      {
        if (v38[2] == 0x2FED70A4459DFCA1) {
          goto LABEL_90;
        }
      }
      else if ((v40 & (*(void *)&v8 - 1)) != v36)
      {
        goto LABEL_94;
      }
      uint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v39 = v38[1];
    if (v39 != 0x2FED70A4459DFCA1)
    {
      if (v39 >= *(void *)&v8) {
        v39 %= *(void *)&v8;
      }
      if (v39 != v36) {
        goto LABEL_94;
      }
      goto LABEL_79;
    }
    if (v38[2] != 0x2FED70A4459DFCA1)
    {
LABEL_79:
      uint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_90:
  uint64_t v41 = v38[5];
  if (v41)
  {
    if (*(unsigned char *)(v41 + 167) != 6) {
      md::StyleLogic::setMapMode(v38[5], 0, 0.0);
    }
    md::StyleLogic::setGroundMode(v41, 0);
    __int16 v7 = *(int8x8_t **)(a2 + 1120);
    int8x8_t v8 = v7[2];
  }
LABEL_94:
  if (!*(void *)&v8) {
    goto LABEL_118;
  }
  uint8x8_t v42 = (uint8x8_t)vcnt_s8(v8);
  v42.i16[0] = vaddlv_u8(v42);
  unint64_t v35 = v42.u32[0];
LABEL_96:
  if (v35 > 1)
  {
    unint64_t v43 = 0xDAD5CEE0DC5FF509;
    if (*(void *)&v8 <= 0xDAD5CEE0DC5FF509) {
      unint64_t v43 = 0xDAD5CEE0DC5FF509 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v43 = (*(void *)&v8 - 1) & 0xDAD5CEE0DC5FF509;
  }
  unint64_t v44 = *(void **)(*(void *)&v7[1] + 8 * v43);
  if (v44)
  {
    uint64_t v45 = (void *)*v44;
    if (v45)
    {
      if (v35 < 2)
      {
        uint64_t v46 = *(void *)&v8 - 1;
        while (1)
        {
          uint64_t v48 = v45[1];
          if (v48 == 0xDAD5CEE0DC5FF509)
          {
            if (v45[2] == 0xDAD5CEE0DC5FF509) {
              goto LABEL_116;
            }
          }
          else if ((v48 & v46) != v43)
          {
            goto LABEL_118;
          }
          uint64_t v45 = (void *)*v45;
          if (!v45) {
            goto LABEL_118;
          }
        }
      }
      do
      {
        unint64_t v47 = v45[1];
        if (v47 == 0xDAD5CEE0DC5FF509)
        {
          if (v45[2] == 0xDAD5CEE0DC5FF509)
          {
LABEL_116:
            uint64_t v49 = v45[5];
            if (v49) {
              *(unsigned char *)(v49 + 168) = 0;
            }
            break;
          }
        }
        else
        {
          if (v47 >= *(void *)&v8) {
            v47 %= *(void *)&v8;
          }
          if (v47 != v43) {
            break;
          }
        }
        uint64_t v45 = (void *)*v45;
      }
      while (v45);
    }
  }
LABEL_118:
  unint64_t v50 = *(uint64_t **)(*(void *)(a3 + 856) + 40);
  if (*(uint64_t **)(*(void *)(a3 + 856) + 48) == v50) {
    uint64_t v51 = 0;
  }
  else {
    uint64_t v51 = *v50;
  }
  if (*(unsigned char *)(a1 + 548))
  {
    if (*(unsigned char *)(v51 + 56))
    {
      *(_DWORD *)(v51 + 60) = *(_DWORD *)(a1 + 552);
      *(_DWORD *)(v51 + 64) = *(_DWORD *)(a1 + 556);
      *(_DWORD *)(v51 + 68) = *(_DWORD *)(a1 + 560);
      *(_DWORD *)(v51 + 72) = *(_DWORD *)(a1 + 564);
      int8x8_t v52 = v7[2];
      if (!*(void *)&v52) {
        return;
      }
    }
    else
    {
      *(_OWORD *)(v51 + 60) = *(_OWORD *)(a1 + 552);
      *(unsigned char *)(v51 + 56) = 1;
      __int16 v7 = *(int8x8_t **)(a2 + 1120);
      int8x8_t v52 = v7[2];
      if (!*(void *)&v52) {
        return;
      }
    }
    goto LABEL_128;
  }
  if (*(unsigned char *)(v51 + 56)) {
    *(unsigned char *)(v51 + 56) = 0;
  }
  int8x8_t v52 = v7[2];
  if (v52)
  {
LABEL_128:
    uint8x8_t v53 = (uint8x8_t)vcnt_s8(v52);
    v53.i16[0] = vaddlv_u8(v53);
    if (v53.u32[0] > 1uLL)
    {
      uint64_t v54 = 0x17767EADC5B287BLL;
      if (*(void *)&v52 <= 0x17767EADC5B287BuLL) {
        uint64_t v54 = 0x17767EADC5B287BuLL % *(void *)&v52;
      }
    }
    else
    {
      uint64_t v54 = (*(void *)&v52 - 1) & 0x17767EADC5B287BLL;
    }
    uint8x8_t v55 = *(void **)(*(void *)&v7[1] + 8 * v54);
    if (v55)
    {
      unint64_t v56 = (void *)*v55;
      if (v56)
      {
        if (v53.u32[0] < 2uLL)
        {
          uint64_t v57 = *(void *)&v52 - 1;
          while (1)
          {
            uint64_t v59 = v56[1];
            if (v59 == 0x17767EADC5B287BLL)
            {
              if (v56[2] == 0x17767EADC5B287BLL) {
                goto LABEL_150;
              }
            }
            else if ((v59 & v57) != v54)
            {
              return;
            }
            unint64_t v56 = (void *)*v56;
            if (!v56) {
              return;
            }
          }
        }
        do
        {
          unint64_t v58 = v56[1];
          if (v58 == 0x17767EADC5B287BLL)
          {
            if (v56[2] == 0x17767EADC5B287BLL)
            {
LABEL_150:
              uint64_t v60 = v56[5];
              if (v60) {
                *(_DWORD *)(v60 + 288) = 0;
              }
              return;
            }
          }
          else
          {
            if (v58 >= *(void *)&v52) {
              v58 %= *(void *)&v52;
            }
            if (v58 != v54) {
              return;
            }
          }
          unint64_t v56 = (void *)*v56;
        }
        while (v56);
      }
    }
  }
}

void sub_1A1C6B0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::StyleLogic::setMapMode(uint64_t a1, int a2, float a3)
{
  if (*(unsigned __int8 *)(a1 + 167) != a2)
  {
    uint64_t v6 = *(void **)(a1 + 1184);
    if (v6) {
      [v6 stop];
    }
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(void *)(a1 + 208), 0x10000u, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setTargetClientStyleAttribute(*(void *)(a1 + 224), 0x10000u, a2);
    *(unsigned char *)(a1 + 167) = a2;
    if (*(unsigned char *)(a1 + 1116))
    {
      *(float *)(a1 + 1120) = fmaxf(*(float *)(a1 + 1120), a3);
    }
    else
    {
      *(unsigned char *)(a1 + 1116) = 1;
      *(float *)(a1 + 1120) = a3;
      char v10 = 4;
      __int16 v7 = *(char **)(a1 + 1128);
      int8x8_t v8 = *(char **)(a1 + 1136);
      if (v7 != v8)
      {
        while (*v7 <= 3u)
        {
          if (++v7 == v8) {
            goto LABEL_12;
          }
        }
      }
      if (v7 == v8 || (int8x8_t v8 = v7, *v7 != 4)) {
LABEL_12:
      }
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v8, &v10);
      uint64_t v9 = **(void **)(a1 + 1240);
      if (v9)
      {
        char v11 = 12;
        md::MapEngine::setNeedsTick(v9, &v11);
      }
    }
  }
}

void md::StyleLogic::setGroundMode(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 172) != a2)
  {
    *(unsigned char *)(a1 + 172) = a2;
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10051u, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x10051u, *(unsigned __int8 *)(a1 + 172));
    char v6 = 4;
    uint64_t v3 = *(char **)(a1 + 1128);
    int v4 = *(char **)(a1 + 1136);
    if (v3 != v4)
    {
      while (*v3 <= 3u)
      {
        if (++v3 == v4) {
          goto LABEL_8;
        }
      }
    }
    if (v3 == v4 || (int v4 = v3, *v3 != 4)) {
LABEL_8:
    }
      std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v4, &v6);
    uint64_t v5 = **(void **)(a1 + 1240);
    if (v5)
    {
      char v7 = 12;
      md::MapEngine::setNeedsTick(v5, &v7);
    }
  }
}

void md::TaskContext::TaskContext(uint64_t a1, void *a2)
{
  buf[2] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)a1 = 0u;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  int v4 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = a1;
    _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Create TaskContext:%p", (uint8_t *)buf, 0xCu);
  }

  objc_storeStrong((id *)a1, a2);
  buf[0] = 0x10000000003;
  if (v5 == (id)MEMORY[0x1E4F14428])
  {
    BYTE4(buf[0]) = 1;
    operator new();
  }
  operator new();
}

void sub_1A1C6BB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, geo::TaskQueue **a9, geo::TaskQueue **a10, geo::TaskQueue **a11, geo::TaskQueue **a12, geo::TaskQueue **a13, geo::TaskQueue **a14, geo::TaskQueue **a15, geo::TaskQueue **a16, geo::TaskQueue **a17, geo::TaskQueue **a18, geo::TaskQueue **a19, void *a20)
{
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v21);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v26);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a19);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v27);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a9);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a11);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a10);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a12);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a16);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v24);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a14);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v23);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a15);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a13);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a17);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v22);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a18);

  _Unwind_Resume(a1);
}

uint64_t geo::TaskQueue::TaskQueue(uint64_t a1, const char *a2, char a3, char a4, uint64_t a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = &unk_1EF559FB8;
  *(void *)(a1 + 16) = 0;
  int8x8_t v8 = (id *)(a1 + 16);
  *(void *)(a1 + 32) = &unk_1EF559FB8;
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = (id *)(a1 + 40);
  *(unsigned char *)(a1 + 56) = a4;
  *(_WORD *)(a1 + 57) = 0;
  *(void *)(a1 + 72) = 0;
  char v10 = (id *)(a1 + 72);
  *(void *)(a1 + 64) = &unk_1EF559FF8;
  *(unsigned char *)(a1 + 88) = a3;
  if (a3 == 1) {
    char v11 = 0;
  }
  else {
    char v11 = (void *)MEMORY[0x1E4F14430];
  }
  int8x8_t v12 = v11;
  unint64_t v13 = v12;
  if (*(unsigned char *)(a5 + 4) && *(unsigned char *)(a1 + 88) == 1)
  {
    *(unsigned char *)(a1 + 57) = 1;
    snprintf(__str, 0x100uLL, "%s.workloop", a2);
    object = dispatch_workloop_create_inactive(__str);
    dispatch_workloop_set_qos_class_floor();
    dispatch_activate(object);
    int8x8_t v14 = dispatch_queue_create(a2, 0);
    dispatch_set_target_queue(v14, object);

    *(void *)__str = &unk_1EF559FB8;
    dispatch_queue_t v36 = v14;
    objc_storeStrong(v8, v14);
    unint64_t v15 = v14;
    dispatch_queue_t v16 = v36;
    dispatch_queue_t v36 = 0;

    *(void *)__str = &unk_1EF559FB8;
  }
  else
  {
    uint64_t v17 = dispatch_queue_attr_make_with_autorelease_frequency(v12, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);

    unsigned int v18 = *(_DWORD *)a5 - 1;
    if (v18 >= 3) {
      dispatch_qos_class_t v19 = QOS_CLASS_BACKGROUND;
    }
    else {
      dispatch_qos_class_t v19 = 8 * v18 + 17;
    }
    unint64_t v20 = dispatch_queue_attr_make_with_qos_class(v17, v19, -*(unsigned __int8 *)(a5 + 5));

    unint64_t v13 = dispatch_queue_attr_make_initially_inactive(v20);

    dispatch_queue_t v36 = dispatch_queue_create(a2, v13);
    objc_storeStrong(v8, v36);
    dispatch_queue_t v21 = v36;
    dispatch_queue_t v36 = 0;

    *(void *)__str = &unk_1EF559FB8;
    if (*(unsigned char *)(a5 + 4))
    {
      unsigned int v22 = *(_DWORD *)a5 - 1;
      if (v22 >= 3) {
        dispatch_qos_class_t v23 = QOS_CLASS_BACKGROUND;
      }
      else {
        dispatch_qos_class_t v23 = 8 * v22 + 17;
      }
      dispatch_set_qos_class_floor((dispatch_object_t)*v8, v23, -*(unsigned __int8 *)(a5 + 5));
    }
    dispatch_activate((dispatch_object_t)*v8);
  }
  unint64_t v24 = *(unsigned __int8 *)(a1 + 88);
  if (v24 < 2)
  {
    *(unsigned char *)(a1 + 58) = 0;
  }
  else
  {
    dispatch_semaphore_t v25 = dispatch_semaphore_create(v24);
    *(void *)__str = &unk_1EF559FF8;
    dispatch_queue_t v36 = v25;
    objc_storeStrong(v10, v25);
    dispatch_queue_t v26 = v36;
    dispatch_queue_t v36 = 0;

    *(void *)__str = &unk_1EF559FF8;
    uint64_t v27 = *(void *)(a1 + 72);
    *(unsigned char *)(a1 + 58) = v27 != 0;
    if (v27 && *(unsigned char *)(a1 + 56))
    {
      unsigned int v28 = *(_DWORD *)a5 - 1;
      if (v28 >= 3) {
        dispatch_qos_class_t v29 = QOS_CLASS_BACKGROUND;
      }
      else {
        dispatch_qos_class_t v29 = 8 * v28 + 17;
      }
      uint64_t v30 = dispatch_queue_attr_make_with_qos_class(0, v29, -*(unsigned __int8 *)(a5 + 5));
      dispatch_queue_t v31 = dispatch_queue_create(a2, v30);
      *(void *)__str = &unk_1EF559FB8;
      dispatch_queue_t v36 = v31;
      objc_storeStrong(v9, v31);
      dispatch_queue_t v32 = v36;
      dispatch_queue_t v36 = 0;

      *(void *)__str = &unk_1EF559FB8;
    }
    *(unsigned char *)(a1 + 56) = *(void *)(a1 + 40) != 0;
  }

  return a1;
}

uint64_t md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(uint64_t a1, int8x8_t *a2)
{
  LOWORD(v4) = a2[5].i16[0];
  std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t *)(a1 + 296), v4, &v4);
  uint64_t result = gdc::Registry::storage<md::components::TexturedMeshInstance>(a2);
  if (*(void *)(result + 56) != *(void *)(result + 64)) {
    operator new();
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      char v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            char v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          char v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v13 = a1 + 2;
  char v10 = operator new(0x30uLL);
  *char v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = a1[1];
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v7)
      {
        unint64_t v7 = a1[1];
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v20 = operator new(8 * prime);
    dispatch_queue_t v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    dispatch_qos_class_t v23 = (void *)*v13;
    if (!*v13)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v24 = v23[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*a1 + 8 * v26) = v13;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          dispatch_qos_class_t v23 = i;
        }
        else if (*(void *)(*a1 + 8 * v28))
        {
          void *v23 = *i;
          uint64_t v29 = 8 * v28;
          void *i = **(void **)(*a1 + v29);
          **(void **)(*a1 + v29) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v28) = v23;
          dispatch_qos_class_t v23 = i;
          size_t v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*a1 + 8 * v24) = v13;
    uint64_t v33 = (void *)*v23;
    if (!*v23) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*a1 + 8 * v35))
        {
          *(void *)(*a1 + 8 * v35) = v23;
          goto LABEL_63;
        }
        void *v23 = *v33;
        uint64_t v34 = 8 * v35;
        void *v33 = **(void **)(*a1 + v34);
        **(void **)(*a1 + v34) = v33;
        uint64_t v33 = v23;
      }
      size_t v35 = v24;
LABEL_63:
      dispatch_qos_class_t v23 = v33;
      uint64_t v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v36 = *a1;
  uint64_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *char v10 = *v37;
LABEL_80:
    *uint64_t v37 = v10;
    goto LABEL_81;
  }
  *char v10 = *v13;
  *unint64_t v13 = v10;
  *(void *)(v36 + 8 * v3) = v13;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    uint64_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_1A1C6D0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL std::__function::__func<md::MeshRenderableLogic::processEntering(void)::$_0,std::allocator<md::MeshRenderableLogic::processEntering(void)::$_0>,BOOL ()(gdc::Registry * const&)>::operator()(uint64_t a1, int8x8_t **a2)
{
  uint64_t v2 = *a2;
  int8x8_t v3 = (*a2)[1];
  if (!*(void *)&v3) {
    goto LABEL_25;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0xCBD572B797B24F09;
    if (*(void *)&v3 <= 0xCBD572B797B24F09) {
      unint64_t v5 = 0xCBD572B797B24F09 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0xCBD572B797B24F09;
  }
  unint64_t v6 = *(void **)(*(void *)v2 + 8 * v5);
  if (!v6) {
    goto LABEL_25;
  }
  unint64_t v7 = (void *)*v6;
  if (!v7) {
    goto LABEL_25;
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0xCBD572B797B24F09)
      {
        if (v7[2] == 0xCBD572B797B24F09) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_25;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0xCBD572B797B24F09) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_25;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_25;
    }
  }
  if (v7[2] != 0xCBD572B797B24F09) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v11 = v7[5];
  if (*(void *)(v11 + 8) == 0xCBD572B797B24F09 && *(void *)(v11 + 32)) {
    return 0;
  }
LABEL_25:
  uint64_t v13 = gdc::Registry::storage<md::components::TexturedMeshInstance>(v2);
  return *(void *)(v13 + 88) == *(void *)(v13 + 80);
}

uint64_t gdc::Registry::storage<md::components::TexturedMeshInstance>(int8x8_t *a1)
{
  unint64_t v10 = 0xF135342237B2A4BFLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF135342237B2A4BFLL;
    if (*(void *)&v1 <= 0xF135342237B2A4BFLL) {
      unint64_t v3 = 0xF135342237B2A4BFLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF135342237B2A4BFLL;
  }
  uint8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF135342237B2A4BFLL)
      {
        if (v5[2] == 0xF135342237B2A4BFLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF135342237B2A4BFLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF135342237B2A4BFLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C6D448(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>(int8x8_t *a1)
{
  uint64_t v10 = 0x5C60C89240C40C60;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5C60C89240C40C60;
    if (*(void *)&v1 <= 0x5C60C89240C40C60uLL) {
      uint64_t v3 = 0x5C60C89240C40C60uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5C60C89240C40C60;
  }
  uint8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5C60C89240C40C60)
      {
        if (v5[2] == 0x5C60C89240C40C60) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5C60C89240C40C60) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5C60C89240C40C60) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C6D6B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A1C6D814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN3gss10StyleSheetINS_15ScenePropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint8x8_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return md::LabelsLogic::setLabelMarkerDidChangeState();
  }
}

uint64_t md::LabelsLogic::setLabelMarkerDidChangeState(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint8x8_t v2 = (void *)(a1 + 160);
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__function::__value_func<void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::swap[abi:nn180100](v5, v2);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

uint64_t md::LabelsLogic::setSelectedLabelMarkerDidCompleteLayoutCallback(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint8x8_t v2 = (void *)(a1 + 96);
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__function::__value_func<void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::swap[abi:nn180100](v5, v2);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void *std::__function::__value_func<void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint8x8_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579968;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579920;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_5>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF520F60;
  a2[1] = v2;
  return result;
}

uint64_t ggl::PolygonFill::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    long long v82 = a4;
    long long v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::PolygonFill::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1E9581B00 = &ggl::PolygonFill::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1E9581B08 = 0;
          {
            ggl::PolygonFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E957F698 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E957F6A0 = (uint64_t)ggl::PolygonFill::Fill::reflection(void)::reflection;
          }
          qword_1E9581B10 = (uint64_t)&ggl::PolygonFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1E9581B18 = xmmword_1A28FCEF0;
        }
      }
      ggl::PolygonFill::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonFill::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonFillShader::typedReflection(v83);
      qword_1EB318828 = (uint64_t)&ggl::PolygonFillShader::typedReflection(void)::ref;
      {
        ggl::PolygonFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9581CA8 = 0;
        qword_1E9581CB0 = (uint64_t)"";
        dword_1E9581CB8 = 0;
        qword_1E9581CC0 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9581CC8 = 1;
      }
      qword_1EB318830 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB318838 = 1;
      qword_1EB318840 = 0;
      unk_1EB318848 = 1;
      qword_1EB318850 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318858 = 0;
      {
        ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9581C18 = 0;
        qword_1E9581C20 = (uint64_t)"view";
        dword_1E9581C28 = 3;
        qword_1E9581C30 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9581C38 = xmmword_1A28FCEB0;
        qword_1E9581C48 = 1;
        unk_1E9581C50 = "transform";
        dword_1E9581C58 = 3;
        qword_1E9581C60 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1E9581C68 = xmmword_1A28FCF70;
        qword_1E9581C78 = 2;
        unk_1E9581C80 = "fill";
        dword_1E9581C88 = 3;
        qword_1E9581C90 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantFillBinding(void)::reflection;
        unk_1E9581C98 = 5;
      }
      qword_1EB318860 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB318868 = 3;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::PolygonFill::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55A870;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void ggl::PolygonFillShader::typedReflection(ggl::PolygonFillShader *this)
{
  {
    if (v1)
    {
      ggl::PolygonFillShader::typedReflection(void)::ref = (uint64_t)"PolygonFillShader";
      ggl::polygonFillShaderVertexFunctionDescriptor(v1);
      qword_1EB321198 = (uint64_t)&ggl::polygonFillShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("PolygonFillShaderVertex");
      dword_1EB3211A0 = (int)v2;
      ggl::polygonFillShaderFragmentFunctionDescriptor(v2);
      qword_1EB3211A8 = (uint64_t)&ggl::polygonFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3211B0 = ggl::crc32::compute<26ul>("PolygonFillShaderFragment");
      qword_1EB3211B8 = (uint64_t)ggl::polygonFillShaderShaderConstants(void)::ref;
      unk_1EB3211C0 = 3;
      qword_1EB3211C8 = (uint64_t)ggl::polygonFillShaderShaderTextures(void)::ref;
      unk_1EB3211D0 = 1;
      qword_1EB3211D8 = (uint64_t)&ggl::polygonFillShaderShaderSamplers(void)::ref;
      unk_1EB3211E0 = 1;
    }
  }
}

void ggl::polygonFillShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("PolygonFillShaderFragment");
    *(_DWORD *)algn_1EB325E8C = 1;
    qword_1EB325E90 = (uint64_t)"PolygonFillShader";
    unk_1EB325E98 = 0;
    qword_1EB325EA0 = 0;
    unk_1EB325EA8 = &ggl::polygonFillShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325EB0 = 1;
    unk_1EB325EB8 = &ggl::polygonFillShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB325EC0 = 0;
    unk_1EB325EC8 = &ggl::polygonFillShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325ED0 = 1;
    unk_1EB325ED8 = &ggl::polygonFillShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325EE8 = 0;
    unk_1EB325EF0 = 0;
    qword_1EB325EE0 = 1;
  }
}

void ggl::polygonFillShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("PolygonFillShaderVertex");
    *(_DWORD *)algn_1EB325354 = 0;
    qword_1EB325358 = (uint64_t)"PolygonFillShader";
    unk_1EB325360 = ggl::polygonFillShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325368 = 1;
    unk_1EB325370 = &ggl::polygonFillShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325378 = 3;
    unk_1EB325380 = &ggl::polygonFillShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325388 = 0;
    unk_1EB325390 = &ggl::polygonFillShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325398 = 0;
    unk_1EB3253A0 = &ggl::polygonFillShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3253B0 = 0;
    unk_1EB3253B8 = 0;
    qword_1EB3253A8 = 0;
  }
}

double ___ZN2md9LabelPoolC2EPNS_12LabelManagerERNS_25LabelCustomFeatureSupportERNS_25ScreenLabelFeatureSupportE_block_invoke()
{
  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  double result = (double)v1 * 5.0 / ((double)v0 * 0.000001);
  MaxMachTimeDiffPerLabelTileUpdate = (unint64_t)result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C6EBB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C6EC14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C6EC74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int8x16_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      int8x16_t v10 = 0;
    }
    int16x8_t v11 = &v10[24 * v6];
    *(void *)int16x8_t v11 = 0xE103B5C60804137ELL;
    *((void *)v11 + 1) = "md::ls::ColorRampDataHandle]";
    *((void *)v11 + 2) = 27;
    uint8x8_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      uint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0xE103B5C60804137ELL;
    *((void *)v3 + 1) = "md::ls::ColorRampDataHandle]";
    *((void *)v3 + 2) = 27;
    uint8x8_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

void ggl::InstancedDebugShader::typedReflection(ggl::InstancedDebugShader *this)
{
  {
    if (v1)
    {
      ggl::InstancedDebugShader::typedReflection(void)::ref = (uint64_t)"InstancedDebugShader";
      ggl::instancedDebugShaderVertexFunctionDescriptor(v1);
      qword_1EB32BC58 = (uint64_t)&ggl::instancedDebugShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<27ul>("InstancedDebugShaderVertex");
      dword_1EB32BC60 = (int)v2;
      ggl::instancedDebugShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BC68 = (uint64_t)&ggl::instancedDebugShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BC70 = ggl::crc32::compute<29ul>("InstancedDebugShaderFragment");
      qword_1EB32BC78 = (uint64_t)ggl::instancedDebugShaderShaderConstants(void)::ref;
      unk_1EB32BC80 = 3;
      qword_1EB32BC88 = (uint64_t)&ggl::instancedDebugShaderShaderTextures(void)::ref;
      unk_1EB32BC90 = 0;
      qword_1EB32BC98 = (uint64_t)&ggl::instancedDebugShaderShaderSamplers(void)::ref;
      unk_1EB32BCA0 = 0;
    }
  }
}

void ggl::instancedDebugShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::instancedDebugShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("InstancedDebugShaderFragment");
    *(_DWORD *)algn_1EB32C464 = 1;
    qword_1EB32C468 = (uint64_t)"InstancedDebugShader";
    unk_1EB32C470 = 0;
    qword_1EB32C478 = 0;
    unk_1EB32C480 = &ggl::instancedDebugShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C488 = 1;
    unk_1EB32C490 = &ggl::instancedDebugShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C498 = 0;
    unk_1EB32C4A0 = &ggl::instancedDebugShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C4A8 = 0;
    unk_1EB32C4B0 = &ggl::instancedDebugShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C4C0 = 0;
    unk_1EB32C4C8 = 0;
    qword_1EB32C4B8 = 0;
  }
}

void ggl::instancedDebugShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::instancedDebugShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("InstancedDebugShaderVertex");
    *(_DWORD *)algn_1EB32C214 = 0;
    qword_1EB32C218 = (uint64_t)"InstancedDebugShader";
    unk_1EB32C220 = ggl::instancedDebugShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32C228 = 2;
    unk_1EB32C230 = &ggl::instancedDebugShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C238 = 3;
    unk_1EB32C240 = &ggl::instancedDebugShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C248 = 1;
    unk_1EB32C250 = &ggl::instancedDebugShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C258 = 0;
    unk_1EB32C260 = &ggl::instancedDebugShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C270 = 0;
    unk_1EB32C278 = 0;
    qword_1EB32C268 = 0;
  }
}

void ggl::DaVinciTrafficShader::typedReflection(ggl::DaVinciTrafficShader *this)
{
  {
    if (v1)
    {
      ggl::DaVinciTrafficShader::typedReflection(void)::ref = (uint64_t)"DaVinciTrafficShader";
      ggl::daVinciTrafficShaderVertexFunctionDescriptor(v1);
      qword_1EB31A218 = (uint64_t)&ggl::daVinciTrafficShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<27ul>("DaVinciTrafficShaderVertex");
      dword_1EB31A220 = (int)v2;
      ggl::daVinciTrafficShaderFragmentFunctionDescriptor(v2);
      qword_1EB31A228 = (uint64_t)&ggl::daVinciTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31A230 = ggl::crc32::compute<29ul>("DaVinciTrafficShaderFragment");
      qword_1EB31A238 = (uint64_t)ggl::daVinciTrafficShaderShaderConstants(void)::ref;
      unk_1EB31A240 = 4;
      qword_1EB31A248 = (uint64_t)ggl::daVinciTrafficShaderShaderTextures(void)::ref;
      unk_1EB31A250 = 2;
      qword_1EB31A258 = (uint64_t)ggl::daVinciTrafficShaderShaderSamplers(void)::ref;
      unk_1EB31A260 = 2;
    }
  }
}

void ggl::daVinciTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("DaVinciTrafficShaderFragment");
    *(_DWORD *)algn_1EB31A92C = 1;
    qword_1EB31A930 = (uint64_t)"DaVinciTrafficShader";
    unk_1EB31A938 = 0;
    qword_1EB31A940 = 0;
    unk_1EB31A948 = &ggl::daVinciTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31A950 = 2;
    unk_1EB31A958 = &ggl::daVinciTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31A960 = 0;
    unk_1EB31A968 = &ggl::daVinciTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31A970 = 2;
    unk_1EB31A978 = &ggl::daVinciTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31A988 = 0;
    unk_1EB31A990 = 0;
    qword_1EB31A980 = 2;
  }
}

void ggl::daVinciTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("DaVinciTrafficShaderVertex");
    *(_DWORD *)algn_1EB31A844 = 0;
    qword_1EB31A848 = (uint64_t)"DaVinciTrafficShader";
    unk_1EB31A850 = ggl::daVinciTrafficShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31A858 = 1;
    unk_1EB31A860 = &ggl::daVinciTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31A868 = 4;
    unk_1EB31A870 = &ggl::daVinciTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31A878 = 0;
    unk_1EB31A880 = &ggl::daVinciTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31A888 = 0;
    unk_1EB31A890 = &ggl::daVinciTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31A8A0 = 0;
    unk_1EB31A8A8 = 0;
    qword_1EB31A898 = 0;
  }
}

void ggl::FlyoverOverlayShader::typedReflection(ggl::FlyoverOverlayShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverOverlayShader::typedReflection(void)::ref = (uint64_t)"FlyoverOverlayShader";
      ggl::flyoverOverlayShaderVertexFunctionDescriptor(v1);
      qword_1EB321B50 = (uint64_t)&ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
      dword_1EB321B58 = (int)v2;
      ggl::flyoverOverlayShaderFragmentFunctionDescriptor(v2);
      qword_1EB321B60 = (uint64_t)&ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321B68 = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
      qword_1EB321B70 = (uint64_t)ggl::flyoverOverlayShaderShaderConstants(void)::ref;
      unk_1EB321B78 = 5;
      qword_1EB321B80 = (uint64_t)ggl::flyoverOverlayShaderShaderTextures(void)::ref;
      unk_1EB321B88 = 1;
      qword_1EB321B90 = (uint64_t)&ggl::flyoverOverlayShaderShaderSamplers(void)::ref;
      unk_1EB321B98 = 1;
    }
  }
}

void ggl::flyoverOverlayShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
    *(_DWORD *)algn_1EB327204 = 1;
    qword_1EB327208 = (uint64_t)"FlyoverOverlayShader";
    unk_1EB327210 = 0;
    qword_1EB327218 = 0;
    unk_1EB327220 = &ggl::flyoverOverlayShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327228 = 2;
    unk_1EB327230 = &ggl::flyoverOverlayShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327238 = 0;
    unk_1EB327240 = &ggl::flyoverOverlayShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327248 = 1;
    unk_1EB327250 = &ggl::flyoverOverlayShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327260 = 0;
    unk_1EB327268 = 0;
    qword_1EB327258 = 1;
  }
}

void ggl::flyoverOverlayShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
    *(_DWORD *)algn_1EB32637C = 0;
    qword_1EB326380 = (uint64_t)"FlyoverOverlayShader";
    unk_1EB326388 = ggl::flyoverOverlayShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326390 = 1;
    unk_1EB326398 = &ggl::flyoverOverlayShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3263A0 = 3;
    unk_1EB3263A8 = &ggl::flyoverOverlayShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3263B0 = 0;
    unk_1EB3263B8 = &ggl::flyoverOverlayShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3263C0 = 0;
    unk_1EB3263C8 = &ggl::flyoverOverlayShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3263D8 = 0;
    unk_1EB3263E0 = 0;
    qword_1EB3263D0 = 0;
  }
}

void ggl::ViewStretchAlphaShader::typedReflection(ggl::ViewStretchAlphaShader *this)
{
  {
    if (v1)
    {
      ggl::ViewStretchAlphaShader::typedReflection(void)::ref = (uint64_t)"ViewStretchAlphaShader";
      ggl::viewStretchAlphaShaderVertexFunctionDescriptor(v1);
      qword_1EB322340 = (uint64_t)&ggl::viewStretchAlphaShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<29ul>("ViewStretchAlphaShaderVertex");
      dword_1EB322348 = (int)v2;
      ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(v2);
      qword_1EB322350 = (uint64_t)&ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322358 = ggl::crc32::compute<31ul>("ViewStretchAlphaShaderFragment");
      qword_1EB322360 = (uint64_t)ggl::viewStretchAlphaShaderShaderConstants(void)::ref;
      unk_1EB322368 = 2;
      qword_1EB322370 = (uint64_t)ggl::viewStretchAlphaShaderShaderTextures(void)::ref;
      unk_1EB322378 = 1;
      qword_1EB322380 = (uint64_t)&ggl::viewStretchAlphaShaderShaderSamplers(void)::ref;
      unk_1EB322388 = 1;
    }
  }
}

void ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("ViewStretchAlphaShaderFragment");
    *(_DWORD *)algn_1EB328534 = 1;
    qword_1EB328538 = (uint64_t)"ViewStretchAlphaShader";
    unk_1EB328540 = 0;
    qword_1EB328548 = 0;
    unk_1EB328550 = &ggl::viewStretchAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328558 = 1;
    unk_1EB328560 = &ggl::viewStretchAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328568 = 0;
    unk_1EB328570 = &ggl::viewStretchAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328578 = 1;
    unk_1EB328580 = &ggl::viewStretchAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328590 = 0;
    unk_1EB328598 = 0;
    qword_1EB328588 = 1;
  }
}

void ggl::viewStretchAlphaShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::viewStretchAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("ViewStretchAlphaShaderVertex");
    *(_DWORD *)algn_1EB32779C = 0;
    qword_1EB3277A0 = (uint64_t)"ViewStretchAlphaShader";
    unk_1EB3277A8 = ggl::viewStretchAlphaShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3277B0 = 1;
    unk_1EB3277B8 = &ggl::viewStretchAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3277C0 = 1;
    unk_1EB3277C8 = &ggl::viewStretchAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3277D0 = 0;
    unk_1EB3277D8 = &ggl::viewStretchAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3277E0 = 0;
    unk_1EB3277E8 = &ggl::viewStretchAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3277F8 = 0;
    unk_1EB327800 = 0;
    qword_1EB3277F0 = 0;
  }
}

md::PuckRenderResources *md::PuckRenderResources::PuckRenderResources(md::PuckRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  int16x8_t v149 = a2;
  uint64_t v5 = *(void *)([(VKSharedResources *)v149 shaderLibrary] + 80);
  unint64_t v6 = *(std::__shared_weak_count **)(v5 + 2872);
  v159[0] = *(void *)(v5 + 2864);
  v159[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&unsigned char v150[24] = 0;
  *(void *)int8x16_t v151 = 0;
  *(_DWORD *)&v151[8] = 0;
  v150[0] = 1;
  *(_OWORD *)&v150[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v150[20] = 7;
  v151[12] = 15;
  uint64_t v7 = [(VKSharedResources *)v149 gglDevice];
  unint64_t v8 = operator new(0x198uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_1EF589B70;
  long long v9 = *(_OWORD *)&a3->colorFormatsCount;
  v160[0] = *(_OWORD *)a3->colorFormats;
  v160[1] = v9;
  *(void *)this = ggl::Textured::Pos2DUVExtendedPipelineState::Pos2DUVExtendedPipelineState((uint64_t)(v8 + 3), v159, (uint64_t)v150, v160, *(unsigned char *)(v7 + 20));
  *((void *)this + 1) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v10 = *(void *)([(VKSharedResources *)v149 shaderLibrary] + 80);
  uint64_t v11 = *(void *)(v10 + 2744);
  uint64_t v12 = *(void *)(v10 + 2752);
  *(void *)&v160[0] = v11;
  *((void *)&v160[0] + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v13 = (char *)operator new(0x198uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)int8x16_t v13 = &unk_1EF5858F0;
  long long v14 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)int32x4_t v150 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v150[16] = v14;
  {
    if (v145)
    {
      {
        if (v145)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::TextureAlphaMask::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(void *)algn_1EB321048 = &ggl::TextureAlphaMask::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EB321050 = 0;
          {
            ggl::TextureAlphaMask::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::TextureAlphaMask::View::reflection(void)::reflection;
            unk_1EB321080 = ggl::TextureAlphaMask::Style::reflection(void)::reflection;
          }
          qword_1EB321058 = (uint64_t)&ggl::TextureAlphaMask::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EB321060 = xmmword_1A28FCEB0;
        }
      }
      ggl::TextureAlphaMask::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TextureAlphaMask::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::TextureAlphaMaskShader::typedReflection(v145);
      qword_1EB318F00 = (uint64_t)&ggl::TextureAlphaMaskShader::typedReflection(void)::ref;
      {
        ggl::TextureAlphaMask::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95842D0 = 0;
        qword_1E95842D8 = (uint64_t)"";
        dword_1E95842E0 = 0;
        qword_1E95842E8 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E95842F0 = 2;
      }
      qword_1EB318F08 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EB318F10 = 1;
      qword_1EB318F18 = 0;
      unk_1EB318F20 = 1;
      qword_1EB318F28 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318F30 = 0;
      {
        ggl::TextureAlphaMask::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9584270 = 0;
        qword_1E9584278 = (uint64_t)"view";
        dword_1E9584280 = 3;
        qword_1E9584288 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        *(int64x2_t *)algn_1E9584290 = vdupq_n_s64(1uLL);
        qword_1E95842A0 = 1;
        unk_1E95842A8 = "style";
        dword_1E95842B0 = 3;
        qword_1E95842B8 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1E95842C0 = 1;
      }
      qword_1EB318F38 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB318F40 = 2;
    }
  }
  long long v15 = v160[0];
  if (*((void *)&v160[0] + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v160[0] + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v13 + 4) = 0;
  *((void *)v13 + 5) = 0;
  *((_DWORD *)v13 + 14) = 0;
  *((void *)v13 + 6) = 0;
  *((void *)v13 + 3) = &unk_1EF55B208;
  *((void *)v13 + 8) = &ggl::TextureAlphaMask::MeshPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v13 + 72) = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v13[136] = 0;
  *(_OWORD *)(v13 + 140) = xmmword_1A28FC970;
  *(void *)(v13 + 156) = 0;
  *(void *)(v13 + 172) = 0;
  *(void *)(v13 + 164) = 0;
  v13[184] = 0;
  *(_OWORD *)(v13 + 188) = xmmword_1A28FC970;
  *(void *)(v13 + 204) = 0;
  *(void *)(v13 + 220) = 0;
  *(void *)(v13 + 212) = 0;
  v13[232] = 0;
  *(_OWORD *)(v13 + 236) = xmmword_1A28FC970;
  *(void *)(v13 + 252) = 0;
  *(void *)(v13 + 268) = 0;
  *(void *)(v13 + 260) = 0;
  long long v16 = *(_OWORD *)&v150[16];
  *(_OWORD *)(v13 + 280) = *(_OWORD *)v150;
  *(_OWORD *)(v13 + 296) = v16;
  v13[312] = 0;
  *((void *)v13 + 48) = 0;
  *((_OWORD *)v13 + 22) = 0u;
  *((_OWORD *)v13 + 23) = 0u;
  *((_OWORD *)v13 + 20) = 0u;
  *((_OWORD *)v13 + 21) = 0u;
  *((void *)v13 + 49) = 0x100000001;
  v13[400] = 0;
  v13[88] = 1;
  *(_WORD *)(v13 + 89) = v159[0];
  v13[91] = BYTE2(v159[0]);
  *(_OWORD *)(v13 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v13 + 27) = 7;
  *((void *)v13 + 14) = 0;
  *((void *)v13 + 15) = 0;
  *((_DWORD *)v13 + 32) = 0;
  v13[132] = 15;
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v15 + 1) + 16))(*((void *)&v15 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v15 + 1));
  }
  *((void *)v13 + 3) = &unk_1EF55D5C8;
  *((void *)this + 2) = v13 + 24;
  *((void *)this + 3) = v13;
  int8x16_t v17 = (std::__shared_weak_count *)*((void *)&v160[0] + 1);
  if (*((void *)&v160[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v160[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  int32x4_t v18 = operator new(0x100uLL);
  int8x16_t v148 = (uint64_t *)((char *)this + 32);
  v18[1] = 0;
  v18[2] = 0;
  void *v18 = &unk_1EF589B38;
  *((void *)this + 4) = ggl::Textured::Pos2DUVExtendedPipelineSetup::Pos2DUVExtendedPipelineSetup((ggl::Textured::Pos2DUVExtendedPipelineSetup *)(v18 + 3));
  *((void *)this + 5) = v18;
  int8x16_t v19 = operator new(0x100uLL);
  int8x16_t v147 = (uint64_t *)((char *)this + 48);
  v19[1] = 0;
  v19[2] = 0;
  *int8x16_t v19 = &unk_1EF5858B8;
  *((void *)this + 6) = ggl::TextureAlphaMask::MeshPipelineSetup::MeshPipelineSetup((ggl::TextureAlphaMask::MeshPipelineSetup *)(v19 + 3));
  *((void *)this + 7) = v19;
  int32x4_t v20 = operator new(0x100uLL);
  v20[1] = 0;
  v20[2] = 0;
  void *v20 = &unk_1EF589B38;
  *((void *)this + 8) = ggl::Textured::Pos2DUVExtendedPipelineSetup::Pos2DUVExtendedPipelineSetup((ggl::Textured::Pos2DUVExtendedPipelineSetup *)(v20 + 3));
  *((void *)this + 9) = v20;
  int8x16_t v21 = operator new(0x100uLL);
  v21[1] = 0;
  v21[2] = 0;
  void *v21 = &unk_1EF5858B8;
  uint64_t v22 = ggl::TextureAlphaMask::MeshPipelineSetup::MeshPipelineSetup((ggl::TextureAlphaMask::MeshPipelineSetup *)(v21 + 3));
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 10) = v22;
  *((void *)this + 11) = v21;
  *((_OWORD *)this + 6) = 0u;
  int32x4_t v146 = (uint64_t *)((char *)this + 96);
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 64) = 0;
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultCircleColorLinear, (uint64_t)&md::kDefaultCircleColor);
  }
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultArrowColorLinear, (uint64_t)&md::kDefaultArrowColor);
  }
  uint64_t v23 = *v148;
  int8x16_t v24 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586DB8;
  uint64_t v25 = ggl::BufferData::BufferData((uint64_t)&v24[1], qword_1E9552208, 2, 1, 6, 1);
  v24[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E258;
  int8x16_t v26 = *(uint64_t **)(v23 + 64);
  *int8x16_t v26 = v25;
  v26[1] = 0;
  int8x16_t v27 = *(uint64_t **)(v23 + 160);
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  int8x16_t v28 = (std::__shared_weak_count *)v27[1];
  *int8x16_t v27 = v25;
  v27[1] = (uint64_t)v24;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v29 = *v148;
  int16x8_t v30 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v30->__shared_owners_ = 0;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5878A8;
  uint64_t v31 = ggl::BufferData::BufferData((uint64_t)&v30[1], qword_1E9569FC0, 2, 1, 6, 1);
  v30[9].__shared_owners_ = (uint64_t)ggl::Textured::Style::reflection(void)::reflection;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E9F8;
  uint64_t v32 = *(void *)(v29 + 64);
  *(void *)(v32 + 48) = v31;
  *(void *)(v32 + 56) = 0;
  uint64_t v33 = *(void *)(v29 + 160);
  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  int32x4_t v34 = *(std::__shared_weak_count **)(v33 + 56);
  *(void *)(v33 + 48) = v31;
  *(void *)(v33 + 56) = v30;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  int8x16_t v35 = *(void **)(*((void *)this + 4) + 64);
  int32x4_t v36 = (void *)v35[6];
  unint64_t v37 = v36[1];
  *(_OWORD *)v36[9] = md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultCircleColorLinear;
  if (v36[8] > v37) {
    unint64_t v37 = v36[8];
  }
  v36[7] = 0;
  v36[8] = v37;
  int32x4_t v38 = (void *)*v35;
  unint64_t v39 = v38[1];
  uint64_t v40 = v38[9];
  *(_DWORD *)uint64_t v40 = 1065353216;
  *(void *)(v40 + 12) = 0;
  *(void *)(v40 + 4) = 0;
  *(_DWORD *)(v40 + 20) = 1065353216;
  *(void *)(v40 + 24) = 0;
  *(void *)(v40 + 32) = 0;
  *(_DWORD *)(v40 + 40) = 1065353216;
  *(void *)(v40 + 52) = 0;
  *(void *)(v40 + 44) = 0;
  *(_DWORD *)(v40 + 60) = 1065353216;
  if (v38[8] > v39) {
    unint64_t v39 = v38[8];
  }
  v38[7] = 0;
  v38[8] = v39;
  ggl::Flyover::FlyoverPipelineSetup::setState(*((ggl::PipelineSetup **)this + 4), *(void *)this, *((std::__shared_weak_count **)this + 1));
  uint64_t v41 = *((void *)this + 6);
  int8x16_t v42 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v42->__shared_owners_ = 0;
  v42->__shared_weak_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5865D8;
  uint64_t v43 = ggl::BufferData::BufferData((uint64_t)&v42[1], qword_1E9573E80, 2, 1, 6, 1);
  v42[9].__shared_owners_ = (uint64_t)ggl::TextureAlphaMask::View::reflection(void)::reflection;
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55DDB8;
  int8x16_t v44 = *(uint64_t **)(v41 + 64);
  *int8x16_t v44 = v43;
  v44[1] = 0;
  int8x16_t v45 = *(uint64_t **)(v41 + 160);
  atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  int8x16_t v46 = (std::__shared_weak_count *)v45[1];
  *int8x16_t v45 = v43;
  v45[1] = (uint64_t)v42;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  uint64_t v47 = *v147;
  int8x16_t v48 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v48->__shared_owners_ = 0;
  v48->__shared_weak_owners_ = 0;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586610;
  uint64_t v49 = ggl::BufferData::BufferData((uint64_t)&v48[1], qword_1E9573EC0, 2, 1, 6, 1);
  v48[9].__shared_owners_ = (uint64_t)ggl::TextureAlphaMask::Style::reflection(void)::reflection;
  v48[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55DDD8;
  uint64_t v50 = *(void *)(v47 + 64);
  *(void *)(v50 + 16) = v49;
  *(void *)(v50 + 24) = 0;
  uint64_t v51 = *(void *)(v47 + 160);
  atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  int8x16_t v52 = *(std::__shared_weak_count **)(v51 + 24);
  *(void *)(v51 + 16) = v49;
  *(void *)(v51 + 24) = v48;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  int16x8_t v53 = *(void **)(*((void *)this + 6) + 64);
  int32x4_t v54 = (void *)v53[2];
  unint64_t v55 = v54[1];
  *(_OWORD *)v54[9] = md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultArrowColorLinear;
  if (v54[8] > v55) {
    unint64_t v55 = v54[8];
  }
  v54[7] = 0;
  v54[8] = v55;
  int16x8_t v56 = (void *)*v53;
  unint64_t v57 = v56[1];
  uint64_t v58 = v56[9];
  *(_DWORD *)uint64_t v58 = 1065353216;
  *(void *)(v58 + 12) = 0;
  *(void *)(v58 + 4) = 0;
  *(_DWORD *)(v58 + 20) = 1065353216;
  *(void *)(v58 + 24) = 0;
  *(void *)(v58 + 32) = 0;
  *(_DWORD *)(v58 + 40) = 1065353216;
  *(void *)(v58 + 52) = 0;
  *(void *)(v58 + 44) = 0;
  *(_DWORD *)(v58 + 60) = 1065353216;
  if (v56[8] > v57) {
    unint64_t v57 = v56[8];
  }
  v56[7] = 0;
  v56[8] = v57;
  ggl::Flyover::FlyoverPipelineSetup::setState(*((ggl::PipelineSetup **)this + 6), *((void *)this + 2), *((std::__shared_weak_count **)this + 3));
  uint64_t v59 = *((void *)this + 8);
  int8x16_t v60 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v60->__shared_owners_ = 0;
  v60->__shared_weak_owners_ = 0;
  v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586DB8;
  uint64_t v61 = ggl::BufferData::BufferData((uint64_t)&v60[1], qword_1E9552208, 2, 1, 6, 1);
  v60[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v60[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E258;
  int8x16_t v62 = *(uint64_t **)(v59 + 64);
  *int8x16_t v62 = v61;
  v62[1] = 0;
  int8x16_t v63 = *(uint64_t **)(v59 + 160);
  atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  int8x16_t v64 = (std::__shared_weak_count *)v63[1];
  uint64_t *v63 = v61;
  v63[1] = (uint64_t)v60;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  uint64_t v65 = *((void *)this + 8);
  int8x16_t v66 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v66->__shared_owners_ = 0;
  v66->__shared_weak_owners_ = 0;
  v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5878A8;
  uint64_t v67 = ggl::BufferData::BufferData((uint64_t)&v66[1], qword_1E9569FC0, 2, 1, 6, 1);
  v66[9].__shared_owners_ = (uint64_t)ggl::Textured::Style::reflection(void)::reflection;
  v66[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E9F8;
  uint64_t v68 = *(void *)(v65 + 64);
  *(void *)(v68 + 48) = v67;
  *(void *)(v68 + 56) = 0;
  uint64_t v69 = *(void *)(v65 + 160);
  atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  int8x16_t v70 = *(std::__shared_weak_count **)(v69 + 56);
  *(void *)(v69 + 48) = v67;
  *(void *)(v69 + 56) = v66;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  if (!atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
  int16x8_t v71 = *(void **)(*((void *)this + 8) + 64);
  int32x4_t v72 = (void *)v71[6];
  unint64_t v73 = v72[1];
  *(_OWORD *)v72[9] = md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultArrowColorLinear;
  if (v72[8] > v73) {
    unint64_t v73 = v72[8];
  }
  v72[7] = 0;
  v72[8] = v73;
  int32x4_t v74 = (void *)*v71;
  unint64_t v75 = v74[1];
  uint64_t v76 = v74[9];
  *(_DWORD *)uint64_t v76 = 1065353216;
  *(void *)(v76 + 12) = 0;
  *(void *)(v76 + 4) = 0;
  *(_DWORD *)(v76 + 20) = 1065353216;
  *(void *)(v76 + 24) = 0;
  *(void *)(v76 + 32) = 0;
  *(_DWORD *)(v76 + 40) = 1065353216;
  *(void *)(v76 + 52) = 0;
  *(void *)(v76 + 44) = 0;
  *(_DWORD *)(v76 + 60) = 1065353216;
  if (v74[8] > v75) {
    unint64_t v75 = v74[8];
  }
  v74[7] = 0;
  v74[8] = v75;
  ggl::Flyover::FlyoverPipelineSetup::setState(*((ggl::PipelineSetup **)this + 8), *(void *)this, *((std::__shared_weak_count **)this + 1));
  uint64_t v77 = *((void *)this + 10);
  int8x16_t v78 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v78->__shared_owners_ = 0;
  v78->__shared_weak_owners_ = 0;
  v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5865D8;
  uint64_t v79 = ggl::BufferData::BufferData((uint64_t)&v78[1], qword_1E9573E80, 2, 1, 6, 1);
  v78[9].__shared_owners_ = (uint64_t)ggl::TextureAlphaMask::View::reflection(void)::reflection;
  v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55DDB8;
  int8x16_t v80 = *(uint64_t **)(v77 + 64);
  uint64_t *v80 = v79;
  v80[1] = 0;
  long long v81 = *(uint64_t **)(v77 + 160);
  atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v82 = (std::__shared_weak_count *)v81[1];
  *long long v81 = v79;
  v81[1] = (uint64_t)v78;
  if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
  }
  if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  uint64_t v83 = *((void *)this + 10);
  long long v84 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v84->__shared_owners_ = 0;
  v84->__shared_weak_owners_ = 0;
  v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586610;
  uint64_t v85 = ggl::BufferData::BufferData((uint64_t)&v84[1], qword_1E9573EC0, 2, 1, 6, 1);
  v84[9].__shared_owners_ = (uint64_t)ggl::TextureAlphaMask::Style::reflection(void)::reflection;
  v84[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55DDD8;
  uint64_t v86 = *(void *)(v83 + 64);
  *(void *)(v86 + 16) = v85;
  *(void *)(v86 + 24) = 0;
  uint64_t v87 = *(void *)(v83 + 160);
  atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v88 = *(std::__shared_weak_count **)(v87 + 24);
  *(void *)(v87 + 16) = v85;
  *(void *)(v87 + 24) = v84;
  if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  if (!atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  long long v89 = *(void **)(*((void *)this + 10) + 64);
  int32x4_t v90 = (void *)v89[2];
  unint64_t v91 = v90[1];
  *(_OWORD *)v90[9] = md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultArrowColorLinear;
  if (v90[8] > v91) {
    unint64_t v91 = v90[8];
  }
  v90[7] = 0;
  v90[8] = v91;
  long long v92 = (void *)*v89;
  unint64_t v93 = v92[1];
  uint64_t v94 = v92[9];
  *(_DWORD *)uint64_t v94 = 1065353216;
  *(void *)(v94 + 12) = 0;
  *(void *)(v94 + 4) = 0;
  *(_DWORD *)(v94 + 20) = 1065353216;
  *(void *)(v94 + 24) = 0;
  *(void *)(v94 + 32) = 0;
  *(_DWORD *)(v94 + 40) = 1065353216;
  *(void *)(v94 + 52) = 0;
  *(void *)(v94 + 44) = 0;
  *(_DWORD *)(v94 + 60) = 1065353216;
  if (v92[8] > v93) {
    unint64_t v93 = v92[8];
  }
  v92[7] = 0;
  v92[8] = v93;
  ggl::Flyover::FlyoverPipelineSetup::setState(*((ggl::PipelineSetup **)this + 10), *((void *)this + 2), *((std::__shared_weak_count **)this + 3));
  memset(&v150[8], 0, 24);
  *(_DWORD *)int8x16_t v151 = 0;
  *(void *)int32x4_t v150 = &unk_1EF55A890;
  *(void *)&v151[4] = 67329;
  *(_DWORD *)&v151[12] = 0;
  *(void *)&v151[16] = 1;
  *(_WORD *)&v151[24] = 0;
  v151[26] = 3;
  memset(&v151[27], 0, 17);
  *(void *)&long long v155 = 0;
  *((void *)&v154 + 1) = 0;
  WORD4(v158[0]) = 257;
  memset((char *)v158 + 12, 0, 17);
  int8x16_t v95 = (char *)operator new(0xF0uLL);
  *((void *)v95 + 1) = 0;
  *((void *)v95 + 2) = 0;
  *(void *)int8x16_t v95 = &unk_1EF583548;
  *((void *)v95 + 4) = 0;
  *((void *)v95 + 5) = 0;
  *((void *)v95 + 6) = *(void *)&v150[24];
  *((_DWORD *)v95 + 14) = *(_DWORD *)v151;
  long long v96 = *(_OWORD *)&v151[20];
  *(_OWORD *)(v95 + 60) = *(_OWORD *)&v151[4];
  *(_OWORD *)(v95 + 76) = v96;
  long long v97 = v152;
  *(_OWORD *)(v95 + 92) = *(_OWORD *)&v151[36];
  long long v98 = v156;
  *(_OWORD *)(v95 + 156) = v155;
  long long v99 = v153;
  *(_OWORD *)(v95 + 140) = v154;
  *(_OWORD *)(v95 + 124) = v99;
  *(_OWORD *)(v95 + 108) = v97;
  *(_OWORD *)(v95 + 217) = *(_OWORD *)((char *)v158 + 13);
  long long v100 = v157;
  *(_OWORD *)(v95 + 204) = v158[0];
  *(_OWORD *)(v95 + 188) = v100;
  *((void *)v95 + 3) = &unk_1EF55A890;
  *(_OWORD *)(v95 + 172) = v98;
  int8x16_t v101 = (std::__shared_weak_count *)*((void *)this + 13);
  *((void *)this + 12) = v95 + 24;
  *((void *)this + 13) = v95;
  if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
  *(void *)int32x4_t v150 = &unk_1EF55D4B8;
  if (*(void *)&v150[8])
  {
    (*(void (**)(void, void))(**(void **)&v150[8] + 16))(*(void *)&v150[8], *(void *)&v150[24]);
    *(void *)&unsigned char v150[24] = 3735927469;
  }
  int8x16_t v102 = *(std::__shared_weak_count **)&v150[16];
  if (*(void *)&v150[16]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v150[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }
  memset(&v150[8], 0, 24);
  *(_DWORD *)int8x16_t v151 = 0;
  *(void *)int32x4_t v150 = &unk_1EF55A890;
  *(void *)&v151[4] = 65792;
  *(_DWORD *)&v151[12] = 0;
  *(void *)&v151[16] = 1;
  *(_WORD *)&v151[24] = 0;
  v151[26] = 3;
  memset(&v151[27], 0, 17);
  *(void *)&long long v155 = 0;
  *((void *)&v154 + 1) = 0;
  WORD4(v158[0]) = 257;
  memset((char *)v158 + 12, 0, 17);
  float v103 = (char *)operator new(0xF0uLL);
  *((void *)v103 + 1) = 0;
  *((void *)v103 + 2) = 0;
  *(void *)float v103 = &unk_1EF583548;
  *((void *)v103 + 4) = 0;
  *((void *)v103 + 5) = 0;
  *((void *)v103 + 6) = *(void *)&v150[24];
  *((_DWORD *)v103 + 14) = *(_DWORD *)v151;
  long long v104 = *(_OWORD *)&v151[20];
  *(_OWORD *)(v103 + 60) = *(_OWORD *)&v151[4];
  *(_OWORD *)(v103 + 76) = v104;
  long long v105 = v152;
  *(_OWORD *)(v103 + 92) = *(_OWORD *)&v151[36];
  long long v106 = v156;
  *(_OWORD *)(v103 + 156) = v155;
  long long v107 = v153;
  *(_OWORD *)(v103 + 140) = v154;
  *(_OWORD *)(v103 + 124) = v107;
  *(_OWORD *)(v103 + 108) = v105;
  *(_OWORD *)(v103 + 217) = *(_OWORD *)((char *)v158 + 13);
  long long v108 = v157;
  *(_OWORD *)(v103 + 204) = v158[0];
  *(_OWORD *)(v103 + 188) = v108;
  *((void *)v103 + 3) = &unk_1EF55A890;
  *(_OWORD *)(v103 + 172) = v106;
  long long v109 = (std::__shared_weak_count *)*((void *)this + 15);
  *((void *)this + 14) = v103 + 24;
  *((void *)this + 15) = v103;
  if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
  }
  *(void *)int32x4_t v150 = &unk_1EF55D4B8;
  if (*(void *)&v150[8])
  {
    (*(void (**)(void, void))(**(void **)&v150[8] + 16))(*(void *)&v150[8], *(void *)&v150[24]);
    *(void *)&unsigned char v150[24] = 3735927469;
  }
  uint64_t v110 = *(std::__shared_weak_count **)&v150[16];
  if (*(void *)&v150[16]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v150[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  memset(&v150[8], 0, 24);
  *(_DWORD *)int8x16_t v151 = 0;
  *(void *)int32x4_t v150 = &unk_1EF55A890;
  *(void *)&v151[4] = 67072;
  *(_DWORD *)&v151[12] = 0;
  *(void *)&v151[16] = 1;
  *(_WORD *)&v151[24] = 0;
  v151[26] = 3;
  memset(&v151[27], 0, 17);
  *(void *)&long long v155 = 0;
  *((void *)&v154 + 1) = 0;
  WORD4(v158[0]) = 257;
  memset((char *)v158 + 12, 0, 17);
  uint64_t v111 = (char *)operator new(0xF0uLL);
  *((void *)v111 + 1) = 0;
  *((void *)v111 + 2) = 0;
  *(void *)uint64_t v111 = &unk_1EF583548;
  *((void *)v111 + 4) = 0;
  *((void *)v111 + 5) = 0;
  *((void *)v111 + 6) = *(void *)&v150[24];
  *((_DWORD *)v111 + 14) = *(_DWORD *)v151;
  long long v112 = *(_OWORD *)&v151[20];
  *(_OWORD *)(v111 + 60) = *(_OWORD *)&v151[4];
  *(_OWORD *)(v111 + 76) = v112;
  long long v113 = v152;
  *(_OWORD *)(v111 + 92) = *(_OWORD *)&v151[36];
  long long v114 = v156;
  *(_OWORD *)(v111 + 156) = v155;
  long long v115 = v153;
  *(_OWORD *)(v111 + 140) = v154;
  *(_OWORD *)(v111 + 124) = v115;
  *(_OWORD *)(v111 + 108) = v113;
  *(_OWORD *)(v111 + 217) = *(_OWORD *)((char *)v158 + 13);
  long long v116 = v157;
  *(_OWORD *)(v111 + 204) = v158[0];
  *(_OWORD *)(v111 + 188) = v116;
  *((void *)v111 + 3) = &unk_1EF55A890;
  *(_OWORD *)(v111 + 172) = v114;
  long long v117 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v111 + 24;
  *((void *)this + 17) = v111;
  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  *(void *)int32x4_t v150 = &unk_1EF55D4B8;
  if (*(void *)&v150[8])
  {
    (*(void (**)(void, void))(**(void **)&v150[8] + 16))(*(void *)&v150[8], *(void *)&v150[24]);
    *(void *)&unsigned char v150[24] = 3735927469;
  }
  uint64_t v118 = *(std::__shared_weak_count **)&v150[16];
  if (!*(void *)&v150[16]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v150[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v119 = *((void *)this + 12);
    float v120 = (std::__shared_weak_count *)*((void *)this + 13);
    if (v120) {
      goto LABEL_101;
    }
LABEL_110:
    *(unsigned char *)(v119 + 58) = 3;
    *(unsigned char *)(v119 + 56) = 0;
    uint64_t v121 = *((void *)this + 14);
    uint64_t v122 = (std::__shared_weak_count *)*((void *)this + 15);
    if (v122) {
      goto LABEL_104;
    }
    goto LABEL_111;
  }
  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
  std::__shared_weak_count::__release_weak(v118);
  uint64_t v119 = *((void *)this + 12);
  float v120 = (std::__shared_weak_count *)*((void *)this + 13);
  if (!v120) {
    goto LABEL_110;
  }
LABEL_101:
  atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
  *(unsigned char *)(v119 + 58) = 3;
  *(unsigned char *)(v119 + 56) = 0;
  if (!atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
  }
  uint64_t v121 = *((void *)this + 14);
  uint64_t v122 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v122)
  {
LABEL_104:
    atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(v121 + 58) = 3;
    *(unsigned char *)(v121 + 56) = 0;
    if (!atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
    uint64_t v123 = *((void *)this + 16);
    uint64_t v124 = (std::__shared_weak_count *)*((void *)this + 17);
    if (v124) {
      goto LABEL_107;
    }
LABEL_112:
    *(unsigned char *)(v123 + 58) = 3;
    *(unsigned char *)(v123 + 56) = 0;
    goto LABEL_113;
  }
LABEL_111:
  *(unsigned char *)(v121 + 58) = 3;
  *(unsigned char *)(v121 + 56) = 0;
  uint64_t v123 = *((void *)this + 16);
  uint64_t v124 = (std::__shared_weak_count *)*((void *)this + 17);
  if (!v124) {
    goto LABEL_112;
  }
LABEL_107:
  atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
  *(unsigned char *)(v123 + 58) = 3;
  *(unsigned char *)(v123 + 56) = 0;
  if (!atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v124);
  }
LABEL_113:
  uint64_t v125 = *v146;
  uint64_t v126 = *v147;
  uint64_t v127 = (char *)operator new(0x90uLL);
  *((void *)v127 + 1) = 0;
  *((void *)v127 + 2) = 0;
  *(void *)uint64_t v127 = &unk_1EF583238;
  *((void *)v127 + 3) = &off_1EF55A458;
  *((void *)v127 + 5) = "PuckArrow";
  *((void *)v127 + 6) = v125;
  *((void *)v127 + 7) = v126;
  *((_DWORD *)v127 + 16) = 0;
  *((void *)v127 + 9) = 0;
  *(_OWORD *)(v127 + 88) = 0u;
  *(_OWORD *)(v127 + 104) = 0u;
  *((_DWORD *)v127 + 20) = 1065353216;
  *(int64x2_t *)(v127 + 120) = vdupq_n_s64(1uLL);
  *((void *)v127 + 17) = 0;
  uint64_t v128 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = v127 + 24;
  *((void *)this + 19) = v127;
  if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
  }
  uint64_t v129 = *v146;
  uint64_t v130 = *v148;
  long long v131 = (char *)operator new(0x90uLL);
  *((void *)v131 + 1) = 0;
  *((void *)v131 + 2) = 0;
  *(void *)long long v131 = &unk_1EF583238;
  *((void *)v131 + 3) = &off_1EF55A458;
  *((void *)v131 + 5) = "PuckCircle";
  *((void *)v131 + 6) = v129;
  *((void *)v131 + 7) = v130;
  *((_DWORD *)v131 + 16) = 0;
  *((void *)v131 + 9) = 0;
  *(_OWORD *)(v131 + 88) = 0u;
  *(_OWORD *)(v131 + 104) = 0u;
  *((_DWORD *)v131 + 20) = 1065353216;
  *(int64x2_t *)(v131 + 120) = vdupq_n_s64(1uLL);
  *((void *)v131 + 17) = 0;
  uint64_t v132 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = v131 + 24;
  *((void *)this + 21) = v131;
  if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
  }
  uint64_t v133 = *((void *)this + 16);
  uint64_t v134 = *((void *)this + 10);
  int v135 = (char *)operator new(0x90uLL);
  *((void *)v135 + 1) = 0;
  *((void *)v135 + 2) = 0;
  *(void *)int v135 = &unk_1EF583238;
  *((void *)v135 + 3) = &off_1EF55A458;
  *((void *)v135 + 5) = "PuckArrow";
  *((void *)v135 + 6) = v133;
  *((void *)v135 + 7) = v134;
  *((_DWORD *)v135 + 16) = 0;
  *((void *)v135 + 9) = 0;
  *(_OWORD *)(v135 + 88) = 0u;
  *(_OWORD *)(v135 + 104) = 0u;
  *((_DWORD *)v135 + 20) = 1065353216;
  *(int64x2_t *)(v135 + 120) = vdupq_n_s64(1uLL);
  *((void *)v135 + 17) = 0;
  uint64_t v136 = (std::__shared_weak_count *)*((void *)this + 23);
  *((void *)this + 22) = v135 + 24;
  *((void *)this + 23) = v135;
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
  uint64_t v137 = *((void *)this + 16);
  uint64_t v138 = *((void *)this + 8);
  uint64_t v139 = (char *)operator new(0x90uLL);
  *((void *)v139 + 1) = 0;
  *((void *)v139 + 2) = 0;
  *(void *)uint64_t v139 = &unk_1EF583238;
  *((void *)v139 + 3) = &off_1EF55A458;
  *((void *)v139 + 5) = "PuckCircle";
  *((void *)v139 + 6) = v137;
  *((void *)v139 + 7) = v138;
  *((_DWORD *)v139 + 16) = 0;
  *((void *)v139 + 9) = 0;
  *(_OWORD *)(v139 + 88) = 0u;
  *(_OWORD *)(v139 + 104) = 0u;
  *((_DWORD *)v139 + 20) = 1065353216;
  *(int64x2_t *)(v139 + 120) = vdupq_n_s64(1uLL);
  *((void *)v139 + 17) = 0;
  int8x16_t v140 = (std::__shared_weak_count *)*((void *)this + 25);
  *((void *)this + 24) = v139 + 24;
  *((void *)this + 25) = v139;
  if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
    std::__shared_weak_count::__release_weak(v140);
  }
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v150);
  long long v141 = *(_OWORD *)v150;
  *(_OWORD *)int32x4_t v150 = 0uLL;
  long long v142 = (std::__shared_weak_count *)*((void *)this + 31);
  *((_OWORD *)this + 15) = v141;
  if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
    std::__shared_weak_count::__release_weak(v142);
  }
  long long v143 = *(std::__shared_weak_count **)&v150[8];
  if (*(void *)&v150[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v150[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
  }

  return this;
}

void sub_1A1C71534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v23);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v22 + 128);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v22 + 112);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a18);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v22 + 16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v22);

  _Unwind_Resume(a1);
}

void sub_1A1C71610()
{
}

void sub_1A1C71618()
{
}

void sub_1A1C71620()
{
}

void sub_1A1C71628()
{
}

void sub_1A1C71630()
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v0 - 128);
  JUMPOUT(0x1A1C715F8);
}

void sub_1A1C71640()
{
}

void sub_1A1C71648()
{
}

void sub_1A1C71650()
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v0 - 144);
  JUMPOUT(0x1A1C71600);
}

uint64_t ggl::Textured::Pos2DUVExtendedPipelineSetup::Pos2DUVExtendedPipelineSetup(ggl::Textured::Pos2DUVExtendedPipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1EB32B448 = 1;
    }
    ggl::Textured::Pos2DUVExtendedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(void *)algn_1EB32BDC8 = &ggl::Textured::pipelineDataPos2DUVExtendedPipelineDeviceStructs(void)::ref;
    qword_1EB32BDD0 = 0;
    {
      ggl::Textured::pipelineDataPos2DUVExtendedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EB32BE00 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EB32BE08 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
      unk_1EB32BE10 = ggl::Textured::Style::reflection(void)::reflection;
    }
    qword_1EB32BDD8 = (uint64_t)&ggl::Textured::pipelineDataPos2DUVExtendedPipelineConstantStructs(void)::ref;
    unk_1EB32BDE0 = xmmword_1A28FE1F0;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::Textured::Pos2DUVExtendedPipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF5618E0;
  return result;
}

uint64_t ggl::TextureAlphaMask::MeshPipelineSetup::MeshPipelineSetup(ggl::TextureAlphaMask::MeshPipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1EB32B448 = 1;
    }
    ggl::TextureAlphaMask::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(void *)algn_1EB321048 = &ggl::TextureAlphaMask::pipelineDataMeshPipelineDeviceStructs(void)::ref;
    qword_1EB321050 = 0;
    {
      ggl::TextureAlphaMask::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::TextureAlphaMask::View::reflection(void)::reflection;
      unk_1EB321080 = ggl::TextureAlphaMask::Style::reflection(void)::reflection;
    }
    qword_1EB321058 = (uint64_t)&ggl::TextureAlphaMask::pipelineDataMeshPipelineConstantStructs(void)::ref;
    unk_1EB321060 = xmmword_1A28FCEB0;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::TextureAlphaMask::MeshPipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF55D598;
  return result;
}

uint64_t geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>(uint64_t a1, uint64_t a2)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)(a2 + 4);
  float v6 = *(float *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 12);
  if (*(float *)a2 >= 0.04045) {
    float v7 = powf((float)(v3 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v7 = v3 * 0.077399;
  }
  if (v4 >= 0.04045) {
    float v8 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v8 = v4 * 0.077399;
  }
  if (v6 >= 0.04045) {
    float v9 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v9 = v6 * 0.077399;
  }
  *(float *)a1 = v7;
  *(float *)(a1 + 4) = v8;
  *(float *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v5;
  return a1;
}

uint64_t ggl::Textured::Pos2DUVExtendedPipelineState::Pos2DUVExtendedPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    uint64_t v83 = a4;
    uint64_t v85 = a2;
    uint64_t v86 = a3;
    a2 = v85;
    a3 = v86;
    a4 = v83;
    if (v84)
    {
      {
        if (v84)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::Textured::Pos2DUVExtendedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(void *)algn_1EB32BDC8 = &ggl::Textured::pipelineDataPos2DUVExtendedPipelineDeviceStructs(void)::ref;
          qword_1EB32BDD0 = 0;
          {
            ggl::Textured::pipelineDataPos2DUVExtendedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EB32BE00 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EB32BE08 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
            unk_1EB32BE10 = ggl::Textured::Style::reflection(void)::reflection;
          }
          qword_1EB32BDD8 = (uint64_t)&ggl::Textured::pipelineDataPos2DUVExtendedPipelineConstantStructs(void)::ref;
          unk_1EB32BDE0 = xmmword_1A28FE1F0;
        }
      }
      ggl::Textured::Pos2DUVExtendedPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::Pos2DUVExtendedPipelineSetup::typedReflection(void)::ref;
      ggl::TexturedExtendedShader::typedReflection(v84);
      qword_1E958E120 = (uint64_t)&ggl::TexturedExtendedShader::typedReflection(void)::ref;
      {
        ggl::Textured::pipelineStatePos2DUVExtendedPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E958B170 = 0;
        qword_1E958B178 = (uint64_t)"";
        dword_1E958B180 = 0;
        qword_1E958B188 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineAttributeBinding_0(void)::attr;
        unk_1E958B190 = 2;
      }
      qword_1E958E128 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineAttributeStructBinding(void)::attr;
      unk_1E958E130 = 1;
      qword_1E958E138 = 0;
      unk_1E958E140 = 1;
      qword_1E958E148 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineDeviceStructBinding(void)::ref;
      unk_1E958E150 = 0;
      {
        ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantStructBinding(void)::ref = 0;
        unk_1E958B0B0 = 0;
        qword_1E958B0B8 = (uint64_t)"view";
        dword_1E958B0C0 = 3;
        qword_1E958B0C8 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E958B0D0 = xmmword_1A28FCEB0;
        qword_1E958B0E0 = 1;
        unk_1E958B0E8 = "transform";
        dword_1E958B0F0 = 3;
        qword_1E958B0F8 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantTransformBinding(void)::reflection;
        unk_1E958B100 = xmmword_1A28FCF70;
        qword_1E958B110 = 2;
        unk_1E958B118 = "tileScalar";
        dword_1E958B120 = 3;
        qword_1E958B128 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantTileScalarBinding(void)::reflection;
        *(_OWORD *)algn_1E958B130 = xmmword_1A28FD040;
        qword_1E958B140 = 3;
        unk_1E958B148 = "style";
        dword_1E958B150 = 3;
        qword_1E958B158 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantStyleBinding(void)::reflection;
        unk_1E958B160 = 1;
      }
      qword_1E958E158 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantStructBinding(void)::ref;
      unk_1E958E160 = 4;
      a4 = v83;
      a2 = v85;
      a3 = v86;
    }
  }
  uint64_t v7 = *a2;
  float v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v89 = *(_OWORD *)a3;
  *(_OWORD *)&v89[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v87 = *a4;
  long long v88 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Textured::Pos2DUVExtendedPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v87;
  *(_OWORD *)(a1 + 272) = v88;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v89;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v89[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(_WORD *)(a1 + 305) = 0;
  *(unsigned char *)(a1 + 307) = 0;
  int8x16_t v11 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v12 = vmovl_high_s8(v11);
  int32x4_t v13 = vmovl_s16(*(int16x4_t *)v12.i8);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  int8x16_t v15 = v14;
  int16x8_t v16 = vmovl_s8(*(int8x8_t *)v11.i8);
  int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
  v14.i64[0] = v17.u32[0];
  v14.i64[1] = v17.u32[1];
  int8x16_t v18 = v14;
  int32x4_t v19 = vmovl_high_s16(v12);
  v14.i64[0] = v19.u32[0];
  v14.i64[1] = v19.u32[1];
  int8x16_t v20 = v14;
  int32x4_t v21 = vmovl_high_s16(v16);
  v14.i64[0] = v21.u32[0];
  v14.i64[1] = v21.u32[1];
  int8x16_t v22 = v14;
  v14.i64[0] = v13.u32[2];
  v14.i64[1] = v13.u32[3];
  int8x16_t v23 = v14;
  v14.i64[0] = v17.u32[2];
  v14.i64[1] = v17.u32[3];
  int8x16_t v24 = v14;
  v14.i64[0] = v19.u32[2];
  v14.i64[1] = v19.u32[3];
  int8x16_t v25 = v14;
  v14.i64[0] = v21.u32[2];
  v14.i64[1] = v21.u32[3];
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v14);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v25);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v24);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v20);
  int8x16_t v30 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  int16x8_t v31 = vmovl_high_s8(v30);
  *(void *)a1 = &unk_1EF561910;
  int32x4_t v32 = vmovl_s16(*(int16x4_t *)v31.i8);
  v14.i64[0] = v32.u32[0];
  v14.i64[1] = v32.u32[1];
  int8x16_t v33 = v14;
  int16x8_t v34 = vmovl_s8(*(int8x8_t *)v30.i8);
  int32x4_t v35 = vmovl_s16(*(int16x4_t *)v34.i8);
  v14.i64[0] = v35.u32[0];
  v14.i64[1] = v35.u32[1];
  int8x16_t v36 = v14;
  int32x4_t v37 = vmovl_high_s16(v31);
  v14.i64[0] = v37.u32[0];
  v14.i64[1] = v37.u32[1];
  int8x16_t v38 = v14;
  int32x4_t v39 = vmovl_high_s16(v34);
  v14.i64[0] = v39.u32[0];
  v14.i64[1] = v39.u32[1];
  int8x16_t v40 = v14;
  v14.i64[0] = v32.u32[2];
  v14.i64[1] = v32.u32[3];
  int8x16_t v41 = v14;
  v14.i64[0] = v35.u32[2];
  v14.i64[1] = v35.u32[3];
  int8x16_t v42 = v14;
  v14.i64[0] = v37.u32[2];
  v14.i64[1] = v37.u32[3];
  int8x16_t v43 = v14;
  v14.i64[0] = v39.u32[2];
  v14.i64[1] = v39.u32[3];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v43);
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v33), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v15));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v36), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v18));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v38), v29);
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v42), v28);
  int8x16_t v51 = vorrq_s8(v44, v27);
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v14), v26);
  int8x16_t v53 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v54 = vmovl_s8(*(int8x8_t *)v53.i8);
  int32x4_t v55 = vmovl_high_s16(v54);
  v14.i64[0] = v55.i32[2];
  v14.i64[1] = v55.i32[3];
  int8x16_t v56 = v14;
  int16x8_t v57 = vmovl_high_s8(v53);
  int32x4_t v58 = vmovl_high_s16(v57);
  v14.i64[0] = v58.i32[2];
  v14.i64[1] = v58.i32[3];
  int8x16_t v59 = v14;
  int32x4_t v60 = vmovl_s16(*(int16x4_t *)v54.i8);
  v14.i64[0] = v60.i32[2];
  v14.i64[1] = v60.i32[3];
  int8x16_t v61 = v14;
  int32x4_t v62 = vmovl_s16(*(int16x4_t *)v57.i8);
  v14.i64[0] = v62.i32[2];
  v14.i64[1] = v62.i32[3];
  int8x16_t v63 = v14;
  v14.i64[0] = v55.i32[0];
  v14.i64[1] = v55.i32[1];
  int8x16_t v64 = v14;
  v14.i64[0] = v58.i32[0];
  v14.i64[1] = v58.i32[1];
  int8x16_t v65 = v14;
  v14.i64[0] = v60.i32[0];
  v14.i64[1] = v60.i32[1];
  int8x16_t v66 = v14;
  v14.i64[0] = v62.i32[0];
  v14.i64[1] = v62.i32[1];
  int8x16_t v67 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v14);
  int8x16_t v68 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v69 = vmovl_high_s8(v68);
  int32x4_t v70 = vmovl_s16(*(int16x4_t *)v69.i8);
  v14.i64[0] = v70.i32[0];
  v14.i64[1] = v70.i32[1];
  int8x16_t v71 = v14;
  int16x8_t v72 = vmovl_s8(*(int8x8_t *)v68.i8);
  int32x4_t v73 = vmovl_s16(*(int16x4_t *)v72.i8);
  v14.i64[0] = v73.i32[0];
  v14.i64[1] = v73.i32[1];
  int8x16_t v74 = v14;
  int32x4_t v75 = vmovl_high_s16(v69);
  v14.i64[0] = v75.i32[0];
  v14.i64[1] = v75.i32[1];
  int8x16_t v76 = v14;
  int32x4_t v77 = vmovl_high_s16(v72);
  v14.i64[0] = v77.i32[0];
  v14.i64[1] = v77.i32[1];
  int8x16_t v78 = v14;
  v14.i64[0] = v70.i32[2];
  v14.i64[1] = v70.i32[3];
  int8x16_t v79 = v14;
  v14.i64[0] = v73.i32[2];
  v14.i64[1] = v73.i32[3];
  int8x16_t v80 = v14;
  v14.i64[0] = v75.i32[2];
  v14.i64[1] = v75.i32[3];
  int8x16_t v81 = v14;
  v14.i64[0] = v77.i32[2];
  v14.i64[1] = v77.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v74), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v66)), v46), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v71), v67), v45)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v64)), v48), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v76), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v65)),
                                               v47))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v61)), v50), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v63)), v49)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v14), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v56)), v52), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v81),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v59)),
                                               v51)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void ggl::TexturedExtendedShader::typedReflection(ggl::TexturedExtendedShader *this)
{
  {
    if (v1)
    {
      ggl::TexturedExtendedShader::typedReflection(void)::ref = (uint64_t)"TexturedExtendedShader";
      ggl::texturedExtendedShaderVertexFunctionDescriptor(v1);
      qword_1EB3222E0 = (uint64_t)&ggl::texturedExtendedShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<29ul>("TexturedExtendedShaderVertex");
      dword_1EB3222E8 = (int)v2;
      ggl::texturedExtendedShaderFragmentFunctionDescriptor(v2);
      qword_1EB3222F0 = (uint64_t)&ggl::texturedExtendedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3222F8 = ggl::crc32::compute<31ul>("TexturedExtendedShaderFragment");
      qword_1EB322300 = (uint64_t)ggl::texturedExtendedShaderShaderConstants(void)::ref;
      unk_1EB322308 = 4;
      qword_1EB322310 = (uint64_t)ggl::texturedExtendedShaderShaderTextures(void)::ref;
      unk_1EB322318 = 1;
      qword_1EB322320 = (uint64_t)ggl::texturedExtendedShaderShaderSamplers(void)::ref;
      unk_1EB322328 = 1;
    }
  }
}

void ggl::TextureAlphaMaskShader::typedReflection(ggl::TextureAlphaMaskShader *this)
{
  {
    if (v1)
    {
      ggl::TextureAlphaMaskShader::typedReflection(void)::ref = (uint64_t)"TextureAlphaMaskShader";
      ggl::textureAlphaMaskShaderVertexFunctionDescriptor(v1);
      qword_1EB322280 = (uint64_t)&ggl::textureAlphaMaskShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<29ul>("TextureAlphaMaskShaderVertex");
      dword_1EB322288 = (int)v2;
      ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(v2);
      qword_1EB322290 = (uint64_t)&ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322298 = ggl::crc32::compute<31ul>("TextureAlphaMaskShaderFragment");
      qword_1EB3222A0 = (uint64_t)ggl::textureAlphaMaskShaderShaderConstants(void)::ref;
      unk_1EB3222A8 = 2;
      qword_1EB3222B0 = (uint64_t)ggl::textureAlphaMaskShaderShaderTextures(void)::ref;
      unk_1EB3222B8 = 1;
      qword_1EB3222C0 = (uint64_t)&ggl::textureAlphaMaskShaderShaderSamplers(void)::ref;
      unk_1EB3222C8 = 1;
    }
  }
}

void ggl::texturedExtendedShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("TexturedExtendedShaderFragment");
    *(_DWORD *)algn_1EB3284C4 = 1;
    qword_1EB3284C8 = (uint64_t)"TexturedExtendedShader";
    unk_1EB3284D0 = 0;
    qword_1EB3284D8 = 0;
    unk_1EB3284E0 = &ggl::texturedExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3284E8 = 1;
    unk_1EB3284F0 = &ggl::texturedExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3284F8 = 0;
    unk_1EB328500 = &ggl::texturedExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328508 = 1;
    unk_1EB328510 = &ggl::texturedExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328520 = 0;
    unk_1EB328528 = 0;
    qword_1EB328518 = 1;
  }
}

void ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("TextureAlphaMaskShaderFragment");
    *(_DWORD *)algn_1EB328454 = 1;
    qword_1EB328458 = (uint64_t)"TextureAlphaMaskShader";
    unk_1EB328460 = 0;
    qword_1EB328468 = 0;
    unk_1EB328470 = &ggl::textureAlphaMaskShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328478 = 1;
    unk_1EB328480 = &ggl::textureAlphaMaskShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328488 = 0;
    unk_1EB328490 = &ggl::textureAlphaMaskShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328498 = 1;
    unk_1EB3284A0 = &ggl::textureAlphaMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3284B0 = 0;
    unk_1EB3284B8 = 0;
    qword_1EB3284A8 = 1;
  }
}

void ggl::texturedExtendedShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedExtendedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("TexturedExtendedShaderVertex");
    *(_DWORD *)algn_1EB3276AC = 0;
    qword_1EB3276B0 = (uint64_t)"TexturedExtendedShader";
    unk_1EB3276B8 = ggl::texturedExtendedShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3276C0 = 1;
    unk_1EB3276C8 = &ggl::texturedExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3276D0 = 3;
    unk_1EB3276D8 = &ggl::texturedExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3276E0 = 0;
    unk_1EB3276E8 = &ggl::texturedExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3276F0 = 0;
    unk_1EB3276F8 = &ggl::texturedExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327708 = 0;
    unk_1EB327710 = 0;
    qword_1EB327700 = 0;
  }
}

void ggl::textureAlphaMaskShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::textureAlphaMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("TextureAlphaMaskShaderVertex");
    *(_DWORD *)algn_1EB32763C = 0;
    qword_1EB327640 = (uint64_t)"TextureAlphaMaskShader";
    unk_1EB327648 = ggl::textureAlphaMaskShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327650 = 1;
    unk_1EB327658 = &ggl::textureAlphaMaskShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327660 = 1;
    unk_1EB327668 = &ggl::textureAlphaMaskShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327670 = 0;
    unk_1EB327678 = &ggl::textureAlphaMaskShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327680 = 0;
    unk_1EB327688 = &ggl::textureAlphaMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327698 = 0;
    unk_1EB3276A0 = 0;
    qword_1EB327690 = 0;
  }
}

void ggl::FlyoverTrafficShader::typedReflection(ggl::FlyoverTrafficShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverTrafficShader::typedReflection(void)::ref = (uint64_t)"FlyoverTrafficShader";
      ggl::flyoverTrafficShaderVertexFunctionDescriptor(v1);
      qword_1EB321BA8 = (uint64_t)&ggl::flyoverTrafficShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<27ul>("FlyoverTrafficShaderVertex");
      dword_1EB321BB0 = (int)v2;
      ggl::flyoverTrafficShaderFragmentFunctionDescriptor(v2);
      qword_1EB321BB8 = (uint64_t)&ggl::flyoverTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321BC0 = ggl::crc32::compute<29ul>("FlyoverTrafficShaderFragment");
      qword_1EB321BC8 = (uint64_t)ggl::flyoverTrafficShaderShaderConstants(void)::ref;
      unk_1EB321BD0 = 5;
      qword_1EB321BD8 = (uint64_t)&ggl::flyoverTrafficShaderShaderTextures(void)::ref;
      unk_1EB321BE0 = 0;
      qword_1EB321BE8 = (uint64_t)&ggl::flyoverTrafficShaderShaderSamplers(void)::ref;
      unk_1EB321BF0 = 0;
    }
  }
}

uint64_t ggl::crc32::compute<29ul>(char *a1)
{
  int v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  unsigned int v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  unsigned int v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  unsigned int v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  unsigned int v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  unsigned int v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  unsigned int v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  unsigned int v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  unsigned int v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  unsigned int v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  unsigned int v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  unsigned int v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  unsigned int v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  unsigned int v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  unsigned int v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  unsigned int v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  unsigned int v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  unsigned int v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  unsigned int v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  unsigned int v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  unsigned int v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  unsigned int v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  unsigned int v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  unsigned int v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  unsigned int v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  return ggl::crc32::crc32Table[v25 ^ a1[27]] ^ ~(v25 >> 8);
}

void ggl::flyoverTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("FlyoverTrafficShaderFragment");
    *(_DWORD *)algn_1EB32727C = 1;
    qword_1EB327280 = (uint64_t)"FlyoverTrafficShader";
    unk_1EB327288 = 0;
    qword_1EB327290 = 0;
    unk_1EB327298 = &ggl::flyoverTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3272A0 = 3;
    unk_1EB3272A8 = &ggl::flyoverTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3272B0 = 0;
    unk_1EB3272B8 = &ggl::flyoverTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3272C0 = 0;
    unk_1EB3272C8 = &ggl::flyoverTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3272D8 = 0;
    unk_1EB3272E0 = 0;
    qword_1EB3272D0 = 0;
  }
}

void ggl::flyoverTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverTrafficShaderVertex");
    *(_DWORD *)algn_1EB326464 = 0;
    qword_1EB326468 = (uint64_t)"FlyoverTrafficShader";
    unk_1EB326470 = ggl::flyoverTrafficShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326478 = 1;
    unk_1EB326480 = &ggl::flyoverTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326488 = 4;
    unk_1EB326490 = &ggl::flyoverTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326498 = 0;
    unk_1EB3264A0 = &ggl::flyoverTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3264A8 = 0;
    unk_1EB3264B0 = &ggl::flyoverTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3264C0 = 0;
    unk_1EB3264C8 = 0;
    qword_1EB3264B8 = 0;
  }
}

double ___ZN2md12LabelManagerC2EN3gdc9WorldTypeERKNS_26LabelManagerCreationParamsE_block_invoke()
{
  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  double result = (double)v1 * 300.0 / ((double)v0 * 0.000001);
  MaxCollisionIntervalInMachTime = (unint64_t)result;
  return result;
}

unint64_t *ggl::FragmentedPool<ggl::VenueWallShadow::MeshPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    operator new();
  }
  uint64_t v6 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v6;
  a1[5] = 0;
  a1[6] = 0;
  {
    operator new();
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  if (v7 != a2)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_6:
    a1[11] = v7;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(void, unint64_t *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1 + 8);
LABEL_8:
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8)
  {
LABEL_11:
    a1[15] = v8;
    goto LABEL_13;
  }
  if (v8 != a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(void, unint64_t *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  unint64_t v9 = *a1;
  if (a1[2] - *a1 > 0x31F) {
    goto LABEL_26;
  }
  unint64_t v10 = a1[1];
  uint64_t v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 800, 8);
  uint64_t v12 = v10 - v9;
  unint64_t v13 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = *a1;
  unint64_t v14 = a1[1];
  unint64_t v16 = v14 - *a1;
  if (v14 == *a1)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  unint64_t v17 = v16 - 8;
  if (v16 - 8 >= 0x58)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    if (v14 - (v12 & 0xFFFFFFFFFFFFFFF8) - v11 >= 0x20)
    {
      uint64_t v19 = v12 >> 3;
      uint64_t v20 = (v17 >> 3) + 1;
      unsigned int v21 = (_OWORD *)(v11 + 8 * v19 - 16);
      unsigned int v22 = (long long *)(v14 - 16);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      unint64_t v18 = v13 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v25 = *(void *)(v14 - 8);
    v14 -= 8;
    *(void *)(v18 - 8) = v25;
    v18 -= 8;
  }
  while (v14 != v15);
LABEL_23:
  unint64_t v14 = *a1;
LABEL_24:
  *a1 = v18;
  a1[1] = v13;
  unint64_t v26 = a1[2];
  a1[2] = v11 + 800;
  if (v14) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[3] + 40))(a1[3], v14, v26 - v14);
  }
LABEL_26:
  unint64_t v27 = a1[4];
  if (a1[6] - v27 > 0x31F) {
    return a1;
  }
  unint64_t v28 = a1[5];
  uint64_t v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[7] + 16))(a1[7], 800, 8);
  uint64_t v30 = v28 - v27;
  unint64_t v31 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = a1[4];
  unint64_t v32 = a1[5];
  unint64_t v34 = v32 - v33;
  if (v32 == v33)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  unint64_t v35 = v34 - 8;
  if (v34 - 8 >= 0x58)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    if (v32 - (v30 & 0xFFFFFFFFFFFFFFF8) - v29 >= 0x20)
    {
      uint64_t v37 = v30 >> 3;
      uint64_t v38 = (v35 >> 3) + 1;
      int32x4_t v39 = (_OWORD *)(v29 + 8 * v37 - 16);
      int8x16_t v40 = (long long *)(v32 - 16);
      uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *int32x4_t v39 = v42;
        v39 -= 2;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      unint64_t v36 = v31 - 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v32 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_36;
      }
    }
  }
  else
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v43 = *(void *)(v32 - 8);
    v32 -= 8;
    *(void *)(v36 - 8) = v43;
    v36 -= 8;
  }
  while (v32 != v33);
LABEL_36:
  unint64_t v32 = a1[4];
LABEL_37:
  a1[4] = v36;
  a1[5] = v31;
  unint64_t v44 = a1[6];
  a1[6] = v29 + 800;
  if (v32) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[7] + 40))(a1[7], v32, v44 - v32);
  }
  return a1;
}

void sub_1A1C730C8(_Unwind_Exception *a1)
{
  std::function<ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::~function(v3);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v2);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15VenueWallShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B088;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5772E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577298;
  a2[1] = v2;
  return result;
}

void sub_1A1C73214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *> *>>(void *result, void *a2)
{
  unint64_t v3 = (unint64_t)result;
  uint64_t v4 = result[1];
  if (!v4) {
    goto LABEL_13;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*result + 8 * i) = 0;
  result[5] = 0;
  uint64_t v6 = (void *)result[3];
  result[3] = 0;
  if (v6)
  {
    while (a2)
    {
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v10 = (std::__shared_weak_count *)v6[3];
      _DWORD v6[2] = v9;
      void v6[3] = v8;
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v7 = (void *)*v6;
      double result = (void *)std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(v3, v6);
      a2 = (void *)*a2;
      uint64_t v6 = v7;
      if (!v7) {
        goto LABEL_13;
      }
    }
    do
    {
      unint64_t v16 = v6;
      uint64_t v6 = (void *)*v6;
      unint64_t v17 = (std::__shared_weak_count *)v16[3];
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      double result = (void *)(*(uint64_t (**)(void, void *, uint64_t))(**(void **)(v3 + 32) + 40))(*(void *)(v3 + 32), v16, 32);
    }
    while (v6);
  }
  else
  {
LABEL_13:
    while (a2)
    {
      uint64_t v11 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 32) + 16))(*(void *)(v3 + 32), 32, 8);
      *uint64_t v11 = 0;
      v11[1] = 0;
      unint64_t v12 = a2[2];
      uint64_t v13 = a2[3];
      void v11[2] = v12;
      void v11[3] = v13;
      if (v13)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        unint64_t v12 = v11[2];
      }
      unint64_t v14 = HIDWORD(v12);
      unint64_t v15 = 0x9DDFEA08EB382D69 * (((8 * v12) + 8) ^ HIDWORD(v12));
      v11[1] = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) ^ ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) >> 47));
      double result = (void *)std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(v3, v11);
      a2 = (void *)*a2;
    }
  }
  return result;
}

void sub_1A1C7350C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 32) + 40))(*(void *)(v1 + 32), v2, 32);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(unint64_t result, void *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = a2[2];
  unint64_t v5 = HIDWORD(v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  unint64_t v8 = *(void *)(result + 8);
  float v9 = (float)(unint64_t)(*(void *)(result + 40) + 1);
  float v10 = *(float *)(result + 48);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    BOOL v11 = 1;
    if (v8 >= 3) {
      BOOL v11 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v8);
    unint64_t v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v12;
    }
    if (v14 == 1)
    {
      size_t v14 = 2;
    }
    else if ((v14 & (v14 - 1)) != 0)
    {
      double result = std::__next_prime(v14);
      size_t v14 = result;
      unint64_t v8 = *(void *)(v3 + 8);
    }
    if (v14 > v8) {
      goto LABEL_13;
    }
    if (v14 >= v8) {
      goto LABEL_39;
    }
    double result = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 40) / *(float *)(v3 + 48));
    if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      double result = std::__next_prime(result);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(result - 1);
      if (result >= 2) {
        double result = v28;
      }
    }
    if (v14 <= result) {
      size_t v14 = result;
    }
    if (v14 >= v8)
    {
      unint64_t v8 = *(void *)(v3 + 8);
      goto LABEL_39;
    }
    if (v14)
    {
LABEL_13:
      double result = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), 8 * v14, 8);
      uint64_t v15 = *(void *)v3;
      *(void *)unint64_t v3 = result;
      if (v15) {
        double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 16) + 40))(*(void *)(v3 + 16), v15, 8 * *(void *)(v3 + 8));
      }
      uint64_t v16 = 0;
      *(void *)(v3 + 8) = v14;
      do
        *(void *)(*(void *)v3 + 8 * v16++) = 0;
      while (v14 != v16);
      unint64_t v18 = v3 + 24;
      unint64_t v17 = *(void **)(v3 + 24);
      if (v17)
      {
        size_t v19 = v17[1];
        size_t v20 = v14 - 1;
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v19 >= v14) {
            v19 %= v14;
          }
          *(void *)(*(void *)v3 + 8 * v19) = v18;
          for (uint64_t i = (void *)*v17; *v17; uint64_t i = (void *)*v17)
          {
            size_t v38 = i[1];
            if (v38 >= v14) {
              v38 %= v14;
            }
            if (v38 == v19)
            {
              unint64_t v17 = i;
            }
            else
            {
              int32x4_t v39 = i;
              if (*(void *)(*(void *)v3 + 8 * v38))
              {
                do
                {
                  int8x16_t v40 = v39;
                  int32x4_t v39 = (void *)*v39;
                }
                while (v39 && i[2] == v39[2]);
                *unint64_t v17 = v39;
                uint64_t v41 = 8 * v38;
                *int8x16_t v40 = **(void **)(*(void *)v3 + v41);
                **(void **)(*(void *)v3 + v41) = i;
              }
              else
              {
                *(void *)(*(void *)v3 + 8 * v38) = v17;
                unint64_t v17 = i;
                size_t v19 = v38;
              }
            }
          }
        }
        else
        {
          size_t v21 = v19 & v20;
          *(void *)(*(void *)v3 + 8 * v21) = v18;
          for (uint64_t j = (void *)*v17; *v17; uint64_t j = (void *)*v17)
          {
            size_t v23 = j[1] & v20;
            if (v23 == v21)
            {
              unint64_t v17 = j;
            }
            else
            {
              long long v24 = j;
              if (*(void *)(*(void *)v3 + 8 * v23))
              {
                do
                {
                  uint64_t v25 = v24;
                  long long v24 = (void *)*v24;
                }
                while (v24 && j[2] == v24[2]);
                *unint64_t v17 = v24;
                uint64_t v26 = 8 * v23;
                *uint64_t v25 = **(void **)(*(void *)v3 + v26);
                **(void **)(*(void *)v3 + v26) = j;
              }
              else
              {
                *(void *)(*(void *)v3 + 8 * v23) = v17;
                unint64_t v17 = j;
                size_t v21 = v23;
              }
            }
          }
        }
      }
      unint64_t v8 = v14;
    }
    else
    {
      uint64_t v51 = *(void *)v3;
      *(void *)unint64_t v3 = 0;
      if (v51) {
        double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 16) + 40))(*(void *)(v3 + 16), v51, 8 * *(void *)(v3 + 8));
      }
      unint64_t v8 = 0;
      *(void *)(v3 + 8) = 0;
    }
  }
LABEL_39:
  uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] >= 2uLL)
  {
    unint64_t v42 = v7;
    if (v8 <= v7) {
      unint64_t v42 = v7 % v8;
    }
    uint64_t v43 = *(void **)(*(void *)v3 + 8 * v42);
    if (!v43)
    {
      unint64_t v36 = 0;
      unint64_t v49 = a2[1];
      if (v49 < v8) {
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    int v44 = 0;
    do
    {
      unint64_t v36 = v43;
      uint64_t v43 = (void *)*v43;
      if (!v43) {
        break;
      }
      unint64_t v47 = v43[1];
      unint64_t v48 = v47;
      if (v47 >= v8) {
        unint64_t v48 = v47 % v8;
      }
      if (v48 != v42) {
        break;
      }
      BOOL v45 = v47 == v7 && v43[2] == a2[2];
      int v46 = v44 & !v45;
      v44 |= v45;
    }
    while (v46 != 1);
  }
  else
  {
    uint64_t v31 = (v8 - 1) & v7;
    unint64_t v32 = *(void **)(*(void *)v3 + 8 * v31);
    if (!v32)
    {
      unint64_t v36 = 0;
      unint64_t v49 = a2[1];
      goto LABEL_74;
    }
    int v33 = 0;
    do
    {
      unint64_t v36 = v32;
      unint64_t v32 = (void *)*v32;
      if (!v32) {
        break;
      }
      uint64_t v37 = v32[1];
      if ((v37 & (v8 - 1)) != v31) {
        break;
      }
      BOOL v34 = v37 == v7 && v32[2] == a2[2];
      char v35 = v33 & !v34;
      v33 |= v34;
    }
    while ((v35 & 1) == 0);
  }
  unint64_t v49 = a2[1];
  if (v30.u32[0] <= 1uLL)
  {
LABEL_74:
    v49 &= v8 - 1;
    goto LABEL_77;
  }
  if (v49 >= v8) {
LABEL_76:
  }
    v49 %= v8;
LABEL_77:
  if (!v36)
  {
    *a2 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = a2;
    *(void *)(*(void *)v3 + 8 * v49) = v3 + 24;
    if (!*a2) {
      goto LABEL_91;
    }
    unint64_t v50 = *(void *)(*a2 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v50 >= v8) {
        v50 %= v8;
      }
    }
    else
    {
      v50 &= v8 - 1;
    }
LABEL_90:
    *(void *)(*(void *)v3 + 8 * v50) = a2;
    goto LABEL_91;
  }
  *a2 = *v36;
  *unint64_t v36 = a2;
  if (*a2)
  {
    unint64_t v50 = *(void *)(*a2 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v50 >= v8) {
        v50 %= v8;
      }
    }
    else
    {
      v50 &= v8 - 1;
    }
    if (v50 != v49) {
      goto LABEL_90;
    }
  }
LABEL_91:
  ++*(void *)(v3 + 40);
  return result;
}

uint64_t md::LabelsLogic::setNeedsDisplayCallback(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      unint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      unint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (v7 != a1)
  {
    unint64_t v4 = v8;
    unint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        unint64_t v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        unint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        unint64_t v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      unint64_t v8 = v7;
    }
    else
    {
      unint64_t v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_3>,void ()(md::LabelManager *,md::NeedsLayoutReason)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF520ED0;
  a2[1] = v2;
  return result;
}

uint64_t md::HikingLogic::setCallbackForContextualRegionLocationIntersectionRequest(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)(a1 + 288);
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      float v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      float v9 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    float v9 = 0;
  }
  if (v3 != v8)
  {
    unint64_t v5 = v9;
    unint64_t v6 = *(void **)(a1 + 312);
    if (v9 == v8)
    {
      if (v6 == v3)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 312) + 24))(*(void *)(a1 + 312), v8);
        (*(void (**)(void))(**(void **)(a1 + 312) + 32))(*(void *)(a1 + 312));
        *(void *)(a1 + 312) = 0;
        float v9 = v8;
        (*(void (**)(void *, void *))(v10[0] + 24))(v10, v3);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v3);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = *(void **)(a1 + 312);
      }
      *(void *)(a1 + 312) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 288) + 24))(v3, v8);
      (*(void (**)(void))(**(void **)(a1 + 312) + 32))(*(void *)(a1 + 312));
      *(void *)(a1 + 312) = v9;
      float v9 = v8;
    }
    else
    {
      float v9 = *(void **)(a1 + 312);
      *(void *)(a1 + 312) = v5;
    }
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_22>,void ()(geo::Mercator2<double>,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF520FA8;
  a2[1] = v2;
  return result;
}

uint64_t md::HikingLogic::setCallbackForToolTipRegionLocationIntersectionRequest(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)(a1 + 232);
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      float v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      float v9 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    float v9 = 0;
  }
  if (v3 != v8)
  {
    unint64_t v5 = v9;
    unint64_t v6 = *(void **)(a1 + 256);
    if (v9 == v8)
    {
      if (v6 == v3)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 256) + 24))(*(void *)(a1 + 256), v8);
        (*(void (**)(void))(**(void **)(a1 + 256) + 32))(*(void *)(a1 + 256));
        *(void *)(a1 + 256) = 0;
        float v9 = v8;
        (*(void (**)(void *, void *))(v10[0] + 24))(v10, v3);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v3);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = *(void **)(a1 + 256);
      }
      *(void *)(a1 + 256) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 232) + 24))(v3, v8);
      (*(void (**)(void))(**(void **)(a1 + 256) + 32))(*(void *)(a1 + 256));
      *(void *)(a1 + 256) = v9;
      float v9 = v8;
    }
    else
    {
      float v9 = *(void **)(a1 + 256);
      *(void *)(a1 + 256) = v5;
    }
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21>,void ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579D58;
  a2[1] = v2;
  return result;
}

uint64_t md::VenueLogic::setNearestVenueDidChangeCallback(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)(a1 + 696);
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      float v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      float v9 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    float v9 = 0;
  }
  if (v3 != v8)
  {
    unint64_t v5 = v9;
    unint64_t v6 = *(void **)(a1 + 720);
    if (v9 == v8)
    {
      if (v6 == v3)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 720) + 24))(*(void *)(a1 + 720), v8);
        (*(void (**)(void))(**(void **)(a1 + 720) + 32))(*(void *)(a1 + 720));
        *(void *)(a1 + 720) = 0;
        float v9 = v8;
        (*(void (**)(void *, void *))(v10[0] + 24))(v10, v3);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v3);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = *(void **)(a1 + 720);
      }
      *(void *)(a1 + 720) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 696) + 24))(v3, v8);
      (*(void (**)(void))(**(void **)(a1 + 720) + 32))(*(void *)(a1 + 720));
      *(void *)(a1 + 720) = v9;
      float v9 = v8;
    }
    else
    {
      float v9 = *(void **)(a1 + 720);
      *(void *)(a1 + 720) = v5;
    }
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13>,void ()(md::Venue const*,md::VenueBuilding const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579B18;
  a2[1] = v2;
  return result;
}

uint64_t md::VenueLogic::setFocusedVenueDidChangeCallback(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)(a1 + 728);
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      float v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      float v9 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    float v9 = 0;
  }
  if (v3 != v8)
  {
    unint64_t v5 = v9;
    unint64_t v6 = *(void **)(a1 + 752);
    if (v9 == v8)
    {
      if (v6 == v3)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 752) + 24))(*(void *)(a1 + 752), v8);
        (*(void (**)(void))(**(void **)(a1 + 752) + 32))(*(void *)(a1 + 752));
        *(void *)(a1 + 752) = 0;
        float v9 = v8;
        (*(void (**)(void *, void *))(v10[0] + 24))(v10, v3);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v3);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = *(void **)(a1 + 752);
      }
      *(void *)(a1 + 752) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 728) + 24))(v3, v8);
      (*(void (**)(void))(**(void **)(a1 + 752) + 32))(*(void *)(a1 + 752));
      *(void *)(a1 + 752) = v9;
      float v9 = v8;
    }
    else
    {
      float v9 = *(void **)(a1 + 752);
      *(void *)(a1 + 752) = v5;
    }
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14>,void ()(md::Venue const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579B60;
  a2[1] = v2;
  return result;
}

uint64_t md::VenueLogic::setRunAnimationCallback(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)(a1 + 792);
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      float v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      float v9 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    float v9 = 0;
  }
  if (v3 != v8)
  {
    unint64_t v5 = v9;
    unint64_t v6 = *(void **)(a1 + 816);
    if (v9 == v8)
    {
      if (v6 == v3)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 816) + 24))(*(void *)(a1 + 816), v8);
        (*(void (**)(void))(**(void **)(a1 + 816) + 32))(*(void *)(a1 + 816));
        *(void *)(a1 + 816) = 0;
        float v9 = v8;
        (*(void (**)(void *, void *))(v10[0] + 24))(v10, v3);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v3);
        (*(void (**)(void *))(*v9 + 32))(v9);
        float v9 = *(void **)(a1 + 816);
      }
      *(void *)(a1 + 816) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 792) + 24))(v3, v8);
      (*(void (**)(void))(**(void **)(a1 + 816) + 32))(*(void *)(a1 + 816));
      *(void *)(a1 + 816) = v9;
      float v9 = v8;
    }
    else
    {
      float v9 = *(void **)(a1 + 816);
      *(void *)(a1 + 816) = v5;
    }
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16>,void ()(VKAnimation *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579BF0;
  a2[1] = v2;
  return result;
}

void md::LabelCustomFeatureSupport::mapTileWasActivated(md::LabelCustomFeatureSupport *this, md::LabelMapTile *a2)
{
  unint64_t v4 = (md::LabelMapTile **)*((void *)this + 13);
  unint64_t v5 = (md::LabelMapTile **)*((void *)this + 14);
  unint64_t v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        unint64_t v6 = (md::LabelMapTile **)*((void *)this + 14);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    unint64_t v7 = *((void *)this + 15);
    if ((unint64_t)v5 < v7)
    {
      if (v5) {
        void *v5 = a2;
      }
      unint64_t v8 = v5 + 1;
LABEL_33:
      *((void *)this + 14) = v8;
      if (*((void *)this + 12))
      {
        uint64_t v28 = (md::LabelCustomFeatureSupport *)*((void *)this + 9);
        if (v28 != (md::LabelCustomFeatureSupport *)((char *)this + 80))
        {
          do
          {
            md::LabelCustomFeatureProvider::addTile((uint64_t *)v28 + 5, a2);
            uint64_t v31 = (md::LabelCustomFeatureSupport *)*((void *)v28 + 1);
            if (v31)
            {
              do
              {
                unint64_t v32 = v31;
                uint64_t v31 = *(md::LabelCustomFeatureSupport **)v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                unint64_t v32 = (md::LabelCustomFeatureSupport *)*((void *)v28 + 2);
                BOOL v33 = *(void *)v32 == (void)v28;
                uint64_t v28 = v32;
              }
              while (!v33);
            }
            uint64_t v28 = v32;
          }
          while (v32 != (md::LabelCustomFeatureSupport *)((char *)this + 80));
        }
        uint64_t v29 = (md::LabelMapTile *)*((void *)a2 + 9);
        uint8x8_t v30 = (std::__shared_weak_count *)*((void *)a2 + 10);
        md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(this, v29, v30);
      }
      return;
    }
    uint64_t v9 = v5 - v4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v7 - (void)v4;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
    uint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12) {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = 8 * v13;
      uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 8 * v13, 8);
      uint64_t v16 = (void *)(v15 + 8 * v9);
      uint64_t v13 = v15 + v14;
      if (v15) {
        *uint64_t v16 = a2;
      }
    }
    else
    {
      uint64_t v16 = (void *)(8 * v9);
    }
    unint64_t v8 = v16 + 1;
    uint64_t v18 = *((void *)this + 13);
    uint64_t v17 = *((void *)this + 14);
    if (v17 == v18)
    {
LABEL_31:
      *((void *)this + 13) = v16;
      *((void *)this + 14) = v8;
      uint64_t v27 = *((void *)this + 15);
      *((void *)this + 15) = v13;
      if (v17) {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 40))(*((void *)this + 16), v17, v27 - v17);
      }
      goto LABEL_33;
    }
    unint64_t v19 = v17 - v18 - 8;
    if (v19 < 0x38)
    {
      uint64_t v21 = *((void *)this + 14);
    }
    else if ((unint64_t)(v17 - (void)v16) < 0x20)
    {
      uint64_t v21 = *((void *)this + 14);
    }
    else
    {
      uint64_t v20 = (v19 >> 3) + 1;
      uint64_t v21 = v17 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v22 = v16 - 2;
      size_t v23 = (long long *)(v17 - 16);
      uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *unsigned int v22 = v25;
        v22 -= 2;
        v23 -= 2;
        v24 -= 4;
      }
      while (v24);
      v16 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    do
    {
      uint64_t v26 = *(void *)(v21 - 8);
      v21 -= 8;
      *--uint64_t v16 = v26;
    }
    while (v21 != v18);
LABEL_30:
    uint64_t v17 = *((void *)this + 13);
    goto LABEL_31;
  }
}

uint64_t *md::LabelCustomFeatureProvider::addTile(uint64_t *this, md::LabelMapTile *a2)
{
  uint64_t v3 = (uint64_t)this;
  unint64_t v5 = this + 9;
  uint64_t v4 = this[9];
  if (!v4)
  {
    uint64_t v9 = this + 9;
LABEL_17:
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)this[10] + 16))(this[10], 184, 8);
    *(_WORD *)(v13 + 32) = *((_WORD *)a2 + 4);
    *(void *)(v13 + 36) = *(void *)((char *)a2 + 12);
    *(void *)(v13 + 120) = 0;
    uint64_t v14 = (uint64_t *)(v13 + 120);
    *(void *)(v13 + 128) = 0;
    *(void *)(v13 + 136) = 0;
    {
      operator new();
    }
    uint64_t v15 = mdm::Allocator::instance(void)::alloc;
    *(void *)(v13 + 144) = mdm::Allocator::instance(void)::alloc;
    *(void *)(v13 + 152) = &unk_1EF559E78;
    *(void *)(v13 + 160) = 0;
    *(unsigned char *)(v13 + 176) = 0;
    float64x2_t v16 = *(float64x2_t *)(MEMORY[0x1E4F63F08] + 16);
    float64x2_t v17 = *(float64x2_t *)((char *)a2 + 40);
    _Q3 = *(float64x2_t *)((char *)a2 + 56);
    _D4 = *(void *)(MEMORY[0x1E4F63F08] + 24);
    __asm { FMLS            D4, D4, V3.D[1] }
    *(void *)(v13 + 56) = *(_OWORD *)&vmulq_f64(v16, v17);
    *(void *)(v13 + 64) = _D4;
    *(float64x2_t *)(v13 + 72) = vmulq_f64(vsubq_f64(_Q3, v17), v16);
    *(void *)(v13 + 88) = *((void *)a2 + 5);
    *(void *)(v13 + 96) = *((void *)a2 + 6);
    *(void *)(v13 + 104) = *((void *)a2 + 7);
    *(void *)(v13 + 112) = *((void *)a2 + 8);
    long long v25 = *(void **)(v13 + 128);
    unint64_t v26 = *(void *)(v13 + 136);
    if ((unint64_t)v25 < v26)
    {
      if (v25) {
        *long long v25 = a2;
      }
      uint64_t v27 = v25 + 1;
LABEL_57:
      *(void *)(v13 + 128) = v27;
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = v9;
      uint64_t *v5 = v13;
      uint64_t v55 = **(void **)(v3 + 64);
      if (v55)
      {
        *(void *)(v3 + 64) = v55;
        uint64_t v13 = *v5;
      }
      this = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 72), (uint64_t *)v13);
      ++*(void *)(v3 + 88);
      return this;
    }
    uint64_t v28 = ((uint64_t)v25 - *v14) >> 3;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61) {
      abort();
    }
    uint64_t v30 = v26 - *v14;
    if (v30 >> 2 > v29) {
      unint64_t v29 = v30 >> 2;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v31 = v29;
    }
    if (v31)
    {
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 8 * v31, 8);
      BOOL v33 = (void *)(v32 + 8 * v28);
      uint64_t v34 = v32 + 8 * v31;
      if (v32) {
        void *v33 = a2;
      }
    }
    else
    {
      uint64_t v34 = 0;
      BOOL v33 = (void *)(8 * v28);
    }
    uint64_t v27 = v33 + 1;
    uint64_t v39 = *(void *)(v13 + 120);
    uint64_t v38 = *(void *)(v13 + 128);
    if (v38 == v39)
    {
LABEL_55:
      *(void *)(v13 + 120) = v33;
      *(void *)(v13 + 128) = v27;
      uint64_t v54 = *(void *)(v13 + 136);
      *(void *)(v13 + 136) = v34;
      if (v38) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 + 144) + 40))(*(void *)(v13 + 144), v38, v54 - v38);
      }
      goto LABEL_57;
    }
    unint64_t v40 = v38 - v39 - 8;
    if (v40 < 0x38)
    {
      uint64_t v42 = *(void *)(v13 + 128);
    }
    else if ((unint64_t)(v38 - (void)v33) < 0x20)
    {
      uint64_t v42 = *(void *)(v13 + 128);
    }
    else
    {
      uint64_t v41 = (v40 >> 3) + 1;
      uint64_t v42 = v38 - 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v43 = v33 - 2;
      int v44 = (long long *)(v38 - 16);
      uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v46 = *v44;
        *(v43 - 1) = *(v44 - 1);
        _OWORD *v43 = v46;
        v43 -= 2;
        v44 -= 2;
        v45 -= 4;
      }
      while (v45);
      v33 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
      if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_54;
      }
    }
    do
    {
      uint64_t v53 = *(void *)(v42 - 8);
      v42 -= 8;
      *--BOOL v33 = v53;
    }
    while (v42 != v39);
LABEL_54:
    uint64_t v38 = *v14;
    goto LABEL_55;
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + 9);
  int v8 = *((_DWORD *)a2 + 3);
  int v7 = *((_DWORD *)a2 + 4);
  while (1)
  {
    while (1)
    {
      uint64_t v9 = (uint64_t *)v4;
      unsigned int v10 = *(unsigned __int8 *)(v4 + 33);
      if (v6 == v10) {
        break;
      }
      if (v6 < v10) {
        goto LABEL_3;
      }
      if (v10 >= v6) {
        goto LABEL_31;
      }
LABEL_14:
      uint64_t v4 = v9[1];
      if (!v4)
      {
        unint64_t v5 = v9 + 1;
        goto LABEL_17;
      }
    }
    int v11 = *((_DWORD *)v9 + 10);
    if (v7 != v11) {
      break;
    }
    int v12 = *((_DWORD *)v9 + 9);
    if (v8 >= v12)
    {
      if (v12 >= v8) {
        goto LABEL_31;
      }
      goto LABEL_14;
    }
LABEL_3:
    uint64_t v4 = *v9;
    unint64_t v5 = v9;
    if (!*v9) {
      goto LABEL_17;
    }
  }
  if (v7 < v11) {
    goto LABEL_3;
  }
  if (v11 < v7) {
    goto LABEL_14;
  }
LABEL_31:
  char v35 = (void *)v9[16];
  unint64_t v36 = v9[17];
  if ((unint64_t)v35 < v36)
  {
    if (v35) {
      *char v35 = a2;
    }
    uint64_t v37 = v35 + 1;
    goto LABEL_74;
  }
  uint64_t v47 = v9[15];
  uint64_t v48 = ((uint64_t)v35 - v47) >> 3;
  unint64_t v49 = v48 + 1;
  if ((unint64_t)(v48 + 1) >> 61) {
    abort();
  }
  uint64_t v50 = v36 - v47;
  if (v50 >> 2 > v49) {
    unint64_t v49 = v50 >> 2;
  }
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v49)
  {
    uint64_t v51 = v49;
    this = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v9[18] + 16))(v9[18], 8 * v49, 8);
    int8x16_t v52 = &this[v48];
    unint64_t v49 = (unint64_t)&this[v51];
    if (this) {
      uint64_t *v52 = (uint64_t)a2;
    }
  }
  else
  {
    int8x16_t v52 = (uint64_t *)(8 * v48);
  }
  uint64_t v37 = v52 + 1;
  uint64_t v57 = v9[15];
  uint64_t v56 = v9[16];
  if (v56 != v57)
  {
    unint64_t v58 = v56 - v57 - 8;
    if (v58 < 0x38)
    {
      uint64_t v60 = v9[16];
    }
    else if ((unint64_t)(v56 - (void)v52) < 0x20)
    {
      uint64_t v60 = v9[16];
    }
    else
    {
      uint64_t v59 = (v58 >> 3) + 1;
      uint64_t v60 = v56 - 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
      int8x16_t v61 = v52 - 2;
      int32x4_t v62 = (long long *)(v56 - 16);
      uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v64 = *v62;
        *((_OWORD *)v61 - 1) = *(v62 - 1);
        *(_OWORD *)int8x16_t v61 = v64;
        v61 -= 4;
        v62 -= 2;
        v63 -= 4;
      }
      while (v63);
      v52 -= v59 & 0x3FFFFFFFFFFFFFFCLL;
      if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_71:
        uint64_t v56 = v9[15];
        goto LABEL_72;
      }
    }
    do
    {
      uint64_t v65 = *(void *)(v60 - 8);
      v60 -= 8;
      *--int8x16_t v52 = v65;
    }
    while (v60 != v57);
    goto LABEL_71;
  }
LABEL_72:
  v9[15] = (uint64_t)v52;
  v9[16] = (uint64_t)v37;
  uint64_t v66 = v9[17];
  v9[17] = v49;
  if (v56) {
    this = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[18] + 40))(v9[18], v56, v66 - v56);
  }
LABEL_74:
  v9[16] = (uint64_t)v37;
  return this;
}

void sub_1A1C757E4(_Unwind_Exception *a1)
{
  *(void *)(v2 + 152) = v4;

  gss::FeatureAttributeSet::~FeatureAttributeSet(v3);
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 80) + 40))(*(void *)(v1 + 80), v2, 184);
  _Unwind_Resume(a1);
}

void md::OverlaysLogic::updateOverlays(md::OverlaysLogic *this, const md::LayoutContext *a2)
{
  uint64_t v643 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 17);
  v623[0] = &unk_1EF5702A8;
  v624 = v623;
  md::RegistryManager::entering(&v639, v2, v623);
  if (v624 == v623)
  {
    (*(void (**)(void *))(v623[0] + 32))(v623);
  }
  else if (v624)
  {
    (*(void (**)(void))(*v624 + 40))();
  }
  md::FilteredIterator<std::vector<gdc::Registry *>>::begin(buf, (uint64_t)&v639);
  md::FilteredIterator<std::vector<gdc::Registry *>>::end(&v615, (uint64_t *)&v639);
  uint64_t v3 = *(int8x8_t ***)&buf[8];
  if (v616 != *(int8x8_t ***)&buf[8])
  {
    uint64_t v4 = (uint64_t **)((char *)this + 168);
    do
    {
      v603 = 0;
      unint64_t v5 = *v3;
      v603 = v5;
      unsigned int v6 = v5[5].u16[0];
      int v7 = *v4;
      int v8 = (uint64_t **)((char *)this + 168);
      uint64_t v9 = (uint64_t **)((char *)this + 168);
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v9 = (uint64_t **)v7;
            unsigned int v10 = *((unsigned __int16 *)v7 + 16);
            if (v6 >= v10) {
              break;
            }
            int v7 = *v9;
            int v8 = v9;
            if (!*v9) {
              goto LABEL_15;
            }
          }
          if (v10 >= v6) {
            break;
          }
          int v7 = v9[1];
          if (!v7)
          {
            int v8 = v9 + 1;
            goto LABEL_15;
          }
        }
        uint64_t v15 = v5;
        int v11 = v9;
        int v12 = this;
      }
      else
      {
LABEL_15:
        int v11 = operator new(0x30uLL);
        v11[16] = v6;
        *((void *)v11 + 5) = 0;
        *(void *)int v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v9;
        void *v8 = (uint64_t *)v11;
        int v12 = this;
        uint64_t v13 = **((void **)this + 20);
        uint64_t v14 = (uint64_t *)v11;
        if (v13)
        {
          *((void *)this + 20) = v13;
          uint64_t v14 = *v8;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 21), v14);
        ++*((void *)this + 22);
        uint64_t v15 = v603;
      }
      *((void *)v11 + 5) = v5;
      if (*((unsigned char *)v12 + 922))
      {
        v633[0] = &unk_1EF5702F0;
        v633[1] = &v603;
        v634 = v633;
        uint64_t v16 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>(v15);
        if (!v634)
        {
          v636 = 0;
          goto LABEL_30;
        }
        if (v634 == v633)
        {
          v636 = v635;
          (*(void (**)(void *, void *))(v633[0] + 24))(v633, v635);
          float64x2_t v17 = v636;
          if (!v636) {
            goto LABEL_30;
          }
        }
        else
        {
          float64x2_t v17 = (uint64_t *)(*(uint64_t (**)(void))(*v634 + 16))();
          v636 = v17;
          if (!v17)
          {
LABEL_30:
            v638 = 0;
            goto LABEL_31;
          }
        }
        if (v17 == v635)
        {
          v638 = v637;
          (*(void (**)(void *, void *))(v635[0] + 24))(v635, v637);
          float64x2_t v17 = v638;
          if (v638) {
            goto LABEL_37;
          }
LABEL_31:
          v611 = 0;
        }
        else
        {
          v638 = v17;
          v636 = 0;
LABEL_37:
          if (v17 == v637)
          {
            v611 = &v608;
            (*(void (**)(void *, uint64_t *))(v637[0] + 24))(v637, &v608);
          }
          else
          {
            v611 = v17;
            v638 = 0;
          }
        }
        unint64_t v19 = *(void **)(v16 + 56);
        for (uint64_t i = *(void **)(v16 + 64); v19 != i; ++v19)
        {
          v631[0] = *v19;
          if (!v611) {
            goto LABEL_1106;
          }
          (*(void (**)(uint64_t *, void *))(*v611 + 48))(v611, v631);
        }
        if (v611 == &v608)
        {
          (*(void (**)(uint64_t *))(v608 + 32))(&v608);
        }
        else if (v611)
        {
          (*(void (**)(void))(*v611 + 40))();
        }
        if (v638 == v637)
        {
          (*(void (**)(void *))(v637[0] + 32))(v637);
        }
        else if (v638)
        {
          (*(void (**)(uint64_t *))(*v638 + 40))(v638);
        }
        if (v636 == v635)
        {
          (*(void (**)(void *))(v635[0] + 32))(v635);
        }
        else if (v636)
        {
          (*(void (**)(void))(*v636 + 40))();
        }
        if (v634 == v633)
        {
          (*(void (**)(void *))(v633[0] + 32))(v633);
        }
        else if (v634)
        {
          (*(void (**)(void))(*v634 + 40))();
        }
        uint64_t v21 = v603;
        v631[0] = &unk_1EF570338;
        v631[1] = &v603;
        v632 = v631;
        v629[0] = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>(v603);
        if (!v632)
        {
          v638 = 0;
          v611 = 0;
          goto LABEL_70;
        }
        if (v632 == v631)
        {
          v638 = v637;
          (*(void (**)(void *, void *))(v631[0] + 24))(v631, v637);
          unsigned int v22 = v638;
          if (v638) {
            goto LABEL_64;
          }
        }
        else
        {
          unsigned int v22 = (uint64_t *)(*(uint64_t (**)(void))(*v632 + 16))();
          v638 = v22;
          if (v22)
          {
LABEL_64:
            if (v22 == v637)
            {
              v611 = &v608;
              (*(void (**)(void *, uint64_t *))(v637[0] + 24))(v637, &v608);
            }
            else
            {
              v611 = v22;
              v638 = 0;
            }
LABEL_70:
            gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>,std::function<void ()(gdc::Entity)>>(v629, &v608);
            if (v611 == &v608)
            {
              (*(void (**)(uint64_t *))(v608 + 32))(&v608);
            }
            else if (v611)
            {
              (*(void (**)(void))(*v611 + 40))();
            }
            v627[0] = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>(v21);
            if (!v632)
            {
              v636 = 0;
              v611 = 0;
              goto LABEL_83;
            }
            if (v632 == v631)
            {
              v636 = v635;
              (*(void (**)(void *, void *))(v631[0] + 24))(v631, v635);
              size_t v23 = v636;
              if (v636) {
                goto LABEL_77;
              }
            }
            else
            {
              size_t v23 = (uint64_t *)(*(uint64_t (**)(void))(*v632 + 16))();
              v636 = v23;
              if (v23)
              {
LABEL_77:
                if (v23 == v635)
                {
                  v611 = &v608;
                  (*(void (**)(void *, uint64_t *))(v635[0] + 24))(v635, &v608);
                }
                else
                {
                  v611 = v23;
                  v636 = 0;
                }
LABEL_83:
                gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>,std::function<void ()(gdc::Entity)>>(v627, &v608);
                if (v611 == &v608)
                {
                  (*(void (**)(uint64_t *))(v608 + 32))(&v608);
                }
                else if (v611)
                {
                  (*(void (**)(void))(*v611 + 40))();
                }
                v625[0] = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>(v21);
                if (!v632)
                {
                  v634 = 0;
                  v611 = 0;
                  goto LABEL_96;
                }
                if (v632 == v631)
                {
                  v634 = v633;
                  (*(void (**)(void *, void *))(v631[0] + 24))(v631, v633);
                  uint64_t v24 = v634;
                  if (v634) {
                    goto LABEL_90;
                  }
                }
                else
                {
                  uint64_t v24 = (void *)(*(uint64_t (**)(void))(*v632 + 16))();
                  v634 = v24;
                  if (v24)
                  {
LABEL_90:
                    if (v24 == v633)
                    {
                      v611 = &v608;
                      (*(void (**)(void *, uint64_t *))(v633[0] + 24))(v633, &v608);
                    }
                    else
                    {
                      v611 = v24;
                      v634 = 0;
                    }
LABEL_96:
                    gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>,std::function<void ()(gdc::Entity)>>(v625, &v608);
                    if (v611 == &v608)
                    {
                      (*(void (**)(uint64_t *))(v608 + 32))(&v608);
                    }
                    else if (v611)
                    {
                      (*(void (**)(void))(*v611 + 40))();
                    }
                    if (v634 == v633)
                    {
                      (*(void (**)(void *))(v633[0] + 32))(v633);
                    }
                    else if (v634)
                    {
                      (*(void (**)(void))(*v634 + 40))();
                    }
                    if (v636 == v635)
                    {
                      (*(void (**)(void *))(v635[0] + 32))(v635);
                    }
                    else if (v636)
                    {
                      (*(void (**)(void))(*v636 + 40))();
                    }
                    if (v638 == v637)
                    {
                      (*(void (**)(void *))(v637[0] + 32))(v637);
                    }
                    else if (v638)
                    {
                      (*(void (**)(uint64_t *))(*v638 + 40))(v638);
                    }
                    long long v25 = v632;
                    if (v632 == v631)
                    {
                      (*(void (**)(void *))(v631[0] + 32))(v631);
                      goto LABEL_248;
                    }
                    goto LABEL_245;
                  }
                }
                v611 = 0;
                goto LABEL_96;
              }
            }
            v611 = 0;
            goto LABEL_83;
          }
        }
        v611 = 0;
        goto LABEL_70;
      }
      v613[0] = &unk_1EF570380;
      v613[1] = &v603;
      v614 = v613;
      uint64_t v606 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>(v15);
      if (!v614)
      {
        v636 = 0;
        v611 = 0;
        goto LABEL_115;
      }
      if (v614 == v613)
      {
        v636 = v635;
        (*(void (**)(void *, void *))(v613[0] + 24))(v613, v635);
        uint64_t v18 = v636;
        if (!v636)
        {
LABEL_40:
          v611 = 0;
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v18 = (uint64_t *)(*(uint64_t (**)(void))(*v614 + 16))();
        v636 = v18;
        if (!v18) {
          goto LABEL_40;
        }
      }
      if (v18 == v635)
      {
        v611 = &v608;
        (*(void (**)(void *, uint64_t *))(v635[0] + 24))(v635, &v608);
      }
      else
      {
        v611 = v18;
        v636 = 0;
      }
LABEL_115:
      gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>,std::function<void ()(gdc::Entity)>>(&v606, &v608);
      if (v611 == &v608)
      {
        (*(void (**)(uint64_t *))(v608 + 32))(&v608);
      }
      else if (v611)
      {
        (*(void (**)(void))(*v611 + 40))();
      }
      uint64_t v605 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>(v15);
      if (!v614)
      {
        v634 = 0;
        v611 = 0;
        goto LABEL_128;
      }
      if (v614 == v613)
      {
        v634 = v633;
        (*(void (**)(void *, void *))(v613[0] + 24))(v613, v633);
        unint64_t v26 = v634;
        if (!v634)
        {
LABEL_126:
          v611 = 0;
          goto LABEL_128;
        }
      }
      else
      {
        unint64_t v26 = (void *)(*(uint64_t (**)(void))(*v614 + 16))();
        v634 = v26;
        if (!v26) {
          goto LABEL_126;
        }
      }
      if (v26 == v633)
      {
        v611 = &v608;
        (*(void (**)(void *, uint64_t *))(v633[0] + 24))(v633, &v608);
      }
      else
      {
        v611 = v26;
        v634 = 0;
      }
LABEL_128:
      gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>,std::function<void ()(gdc::Entity)>>(&v605, &v608);
      if (v611 == &v608)
      {
        (*(void (**)(uint64_t *))(v608 + 32))(&v608);
      }
      else if (v611)
      {
        (*(void (**)(void))(*v611 + 40))();
      }
      uint64_t v604 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>(v15);
      if (!v614)
      {
        v632 = 0;
        v611 = 0;
        goto LABEL_141;
      }
      if (v614 == v613)
      {
        v632 = v631;
        (*(void (**)(void *, void *))(v613[0] + 24))(v613, v631);
        uint64_t v27 = v632;
        if (!v632)
        {
LABEL_139:
          v611 = 0;
          goto LABEL_141;
        }
      }
      else
      {
        uint64_t v27 = (void *)(*(uint64_t (**)(void))(*v614 + 16))();
        v632 = v27;
        if (!v27) {
          goto LABEL_139;
        }
      }
      if (v27 == v631)
      {
        v611 = &v608;
        (*(void (**)(void *, uint64_t *))(v631[0] + 24))(v631, &v608);
      }
      else
      {
        v611 = v27;
        v632 = 0;
      }
LABEL_141:
      gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>,std::function<void ()(gdc::Entity)>>(&v604, &v608);
      if (v611 == &v608)
      {
        (*(void (**)(uint64_t *))(v608 + 32))(&v608);
      }
      else if (v611)
      {
        (*(void (**)(void))(*v611 + 40))();
      }
      uint64_t v28 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)0>>(v15);
      if (!v614)
      {
        v630 = 0;
LABEL_150:
        v638 = 0;
LABEL_151:
        v611 = 0;
        goto LABEL_159;
      }
      if (v614 == v613)
      {
        v630 = v629;
        (*(void (**)(void *, uint64_t *))(v613[0] + 24))(v613, v629);
        unint64_t v29 = v630;
        if (!v630) {
          goto LABEL_150;
        }
      }
      else
      {
        unint64_t v29 = (uint64_t *)(*(uint64_t (**)(void))(*v614 + 16))();
        v630 = v29;
        if (!v29) {
          goto LABEL_150;
        }
      }
      if (v29 == v629)
      {
        v638 = v637;
        (*(void (**)(uint64_t *, void *))(v629[0] + 24))(v629, v637);
        unint64_t v29 = v638;
        if (!v638) {
          goto LABEL_151;
        }
      }
      else
      {
        v638 = v29;
        v630 = 0;
      }
      if (v29 == v637)
      {
        v611 = &v608;
        (*(void (**)(void *, uint64_t *))(v637[0] + 24))(v637, &v608);
      }
      else
      {
        v611 = v29;
        v638 = 0;
      }
LABEL_159:
      uint64_t v30 = *(uint64_t **)(v28 + 56);
      for (uint64_t j = *(uint64_t **)(v28 + 64); v30 != j; ++v30)
      {
        v627[0] = *v30;
        if (!v611) {
          goto LABEL_1106;
        }
        (*(void (**)(uint64_t *, uint64_t *))(*v611 + 48))(v611, v627);
      }
      if (v611 == &v608)
      {
        (*(void (**)(uint64_t *))(v608 + 32))(&v608);
      }
      else if (v611)
      {
        (*(void (**)(void))(*v611 + 40))();
      }
      if (v638 == v637)
      {
        (*(void (**)(void *))(v637[0] + 32))(v637);
      }
      else if (v638)
      {
        (*(void (**)(uint64_t *))(*v638 + 40))(v638);
      }
      uint64_t v32 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)2>>(v15);
      if (!v614)
      {
        v628 = 0;
LABEL_175:
        v638 = 0;
LABEL_176:
        v611 = 0;
        goto LABEL_184;
      }
      if (v614 == v613)
      {
        v628 = v627;
        (*(void (**)(void *, uint64_t *))(v613[0] + 24))(v613, v627);
        BOOL v33 = v628;
        if (!v628) {
          goto LABEL_175;
        }
      }
      else
      {
        BOOL v33 = (uint64_t *)(*(uint64_t (**)(void))(*v614 + 16))();
        v628 = v33;
        if (!v33) {
          goto LABEL_175;
        }
      }
      if (v33 == v627)
      {
        v638 = v637;
        (*(void (**)(uint64_t *, void *))(v627[0] + 24))(v627, v637);
        BOOL v33 = v638;
        if (!v638) {
          goto LABEL_176;
        }
      }
      else
      {
        v638 = v33;
        v628 = 0;
      }
      if (v33 == v637)
      {
        v611 = &v608;
        (*(void (**)(void *, uint64_t *))(v637[0] + 24))(v637, &v608);
      }
      else
      {
        v611 = v33;
        v638 = 0;
      }
LABEL_184:
      uint64_t v34 = *(uint64_t **)(v32 + 56);
      for (uint64_t k = *(uint64_t **)(v32 + 64); v34 != k; ++v34)
      {
        v625[0] = *v34;
        if (!v611) {
          goto LABEL_1106;
        }
        (*(void (**)(uint64_t *, uint64_t *))(*v611 + 48))(v611, v625);
      }
      if (v611 == &v608)
      {
        (*(void (**)(uint64_t *))(v608 + 32))(&v608);
      }
      else if (v611)
      {
        (*(void (**)(void))(*v611 + 40))();
      }
      if (v638 == v637)
      {
        (*(void (**)(void *))(v637[0] + 32))(v637);
      }
      else if (v638)
      {
        (*(void (**)(uint64_t *))(*v638 + 40))(v638);
      }
      uint64_t v36 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)20>>(v15);
      if (!v614)
      {
        v626 = 0;
LABEL_200:
        v638 = 0;
LABEL_201:
        v611 = 0;
        goto LABEL_209;
      }
      if (v614 == v613)
      {
        v626 = v625;
        (*(void (**)(void *, uint64_t *))(v613[0] + 24))(v613, v625);
        uint64_t v37 = v626;
        if (!v626) {
          goto LABEL_200;
        }
      }
      else
      {
        uint64_t v37 = (uint64_t *)(*(uint64_t (**)(void))(*v614 + 16))();
        v626 = v37;
        if (!v37) {
          goto LABEL_200;
        }
      }
      if (v37 == v625)
      {
        v638 = v637;
        (*(void (**)(uint64_t *, void *))(v625[0] + 24))(v625, v637);
        uint64_t v37 = v638;
        if (!v638) {
          goto LABEL_201;
        }
      }
      else
      {
        v638 = v37;
        v626 = 0;
      }
      if (v37 == v637)
      {
        v611 = &v608;
        (*(void (**)(void *, uint64_t *))(v637[0] + 24))(v637, &v608);
      }
      else
      {
        v611 = v37;
        v638 = 0;
      }
LABEL_209:
      uint64_t v38 = *(uint64_t **)(v36 + 56);
      for (uint64_t m = *(uint64_t **)(v36 + 64); v38 != m; ++v38)
      {
        uint64_t v607 = *v38;
        if (!v611) {
          goto LABEL_1106;
        }
        (*(void (**)(uint64_t *, uint64_t *))(*v611 + 48))(v611, &v607);
      }
      if (v611 == &v608)
      {
        (*(void (**)(uint64_t *))(v608 + 32))(&v608);
      }
      else if (v611)
      {
        (*(void (**)(void))(*v611 + 40))();
      }
      if (v638 == v637)
      {
        (*(void (**)(void *))(v637[0] + 32))(v637);
      }
      else if (v638)
      {
        (*(void (**)(uint64_t *))(*v638 + 40))(v638);
      }
      if (v626 == v625)
      {
        (*(void (**)(uint64_t *))(v625[0] + 32))(v625);
      }
      else if (v626)
      {
        (*(void (**)(void))(*v626 + 40))();
      }
      if (v628 == v627)
      {
        (*(void (**)(uint64_t *))(v627[0] + 32))(v627);
      }
      else if (v628)
      {
        (*(void (**)(void))(*v628 + 40))();
      }
      if (v630 == v629)
      {
        (*(void (**)(uint64_t *))(v629[0] + 32))(v629);
      }
      else if (v630)
      {
        (*(void (**)(void))(*v630 + 40))();
      }
      if (v632 == v631)
      {
        (*(void (**)(void *))(v631[0] + 32))(v631);
      }
      else if (v632)
      {
        (*(void (**)(void))(*v632 + 40))();
      }
      if (v634 == v633)
      {
        (*(void (**)(void *))(v633[0] + 32))(v633);
      }
      else if (v634)
      {
        (*(void (**)(void))(*v634 + 40))();
      }
      if (v636 == v635)
      {
        (*(void (**)(void *))(v635[0] + 32))(v635);
      }
      else if (v636)
      {
        (*(void (**)(void))(*v636 + 40))();
      }
      long long v25 = v614;
      if (v614 == v613)
      {
        (*(void (**)(void *))(v613[0] + 32))(v613);
        goto LABEL_248;
      }
LABEL_245:
      if (v25) {
        (*(void (**)(void *))(*v25 + 40))(v25);
      }
LABEL_248:
      while (1)
      {
        uint64_t v3 = (int8x8_t **)(*(void *)&buf[8] + 8);
        *(void *)&buf[8] = v3;
        if (v3 == *(int8x8_t ***)(*(void *)buf + 8)) {
          break;
        }
        if (!v622) {
          goto LABEL_1106;
        }
        if ((*(unsigned int (**)(unsigned char *))(*(void *)v622 + 48))(v622))
        {
          uint64_t v3 = *(int8x8_t ***)&buf[8];
          break;
        }
      }
    }
    while (v616 != v3);
  }
  if (v619 == &v617)
  {
    (*(void (**)(uint64_t *))(v617 + 32))(&v617);
  }
  else if (v619)
  {
    (*(void (**)(void))(*v619 + 40))();
  }
  if (v622 == &buf[16])
  {
    (*(void (**)(unsigned char *))(*(void *)&buf[16] + 32))(&buf[16]);
  }
  else if (v622)
  {
    (*(void (**)(void))(*(void *)v622 + 40))();
  }
  uint64_t v40 = *((void *)this + 17);
  v637[0] = &unk_1EF5702A8;
  v638 = v637;
  v618 = (uint64_t *)&v615;
  std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_0,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone((uint64_t)v637, &v615);
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(buf, v40 + 408, (uint64_t)&v615, *(void *)(v40 + 408));
  if (v618 == (uint64_t *)&v615)
  {
    (*(void (**)(unint64_t *))(v615 + 32))(&v615);
  }
  else if (v618)
  {
    (*(void (**)(void))(*v618 + 40))();
  }
  if (v638 == v637)
  {
    (*(void (**)(void *))(v637[0] + 32))(v637);
  }
  else if (v638)
  {
    (*(void (**)(uint64_t *))(*v638 + 40))(v638);
  }
  md::FilteredIterator<std::vector<gdc::Registry *>>::begin(&v615, (uint64_t)buf);
  md::FilteredIterator<std::vector<gdc::Registry *>>::end(&v608, (uint64_t *)buf);
  uint64_t v41 = v616;
  if (v609 != v616)
  {
    uint64_t v42 = (uint64_t **)((char *)this + 168);
    do
    {
      uint64_t v43 = *v42;
      if (*v42)
      {
        unsigned int v44 = (*v41)[5].u16[0];
        uint64_t v45 = (uint64_t **)((char *)this + 168);
        long long v46 = *v42;
        do
        {
          unsigned int v47 = *((unsigned __int16 *)v46 + 16);
          BOOL v48 = v47 >= v44;
          if (v47 >= v44) {
            unint64_t v49 = (uint64_t **)v46;
          }
          else {
            unint64_t v49 = (uint64_t **)(v46 + 1);
          }
          if (v48) {
            uint64_t v45 = (uint64_t **)v46;
          }
          long long v46 = *v49;
        }
        while (*v49);
        if (v45 != v42 && v44 >= *((unsigned __int16 *)v45 + 16))
        {
          uint64_t v50 = v45[1];
          uint64_t v51 = v45;
          if (v50)
          {
            do
            {
              int8x16_t v52 = v50;
              uint64_t v50 = (uint64_t *)*v50;
            }
            while (v50);
          }
          else
          {
            do
            {
              int8x16_t v52 = v51[2];
              BOOL v146 = *v52 == (void)v51;
              uint64_t v51 = (uint64_t **)v52;
            }
            while (!v146);
          }
          if (*((uint64_t ***)this + 20) == v45) {
            *((void *)this + 20) = v52;
          }
          --*((void *)this + 22);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v43, (uint64_t *)v45);
          operator delete(v45);
        }
      }
      while (1)
      {
        uint64_t v41 = v616 + 1;
        v616 = v41;
        if (v41 == *(int8x8_t ***)(v615 + 8)) {
          break;
        }
        if (!v619) {
          goto LABEL_1106;
        }
        if ((*(unsigned int (**)(uint64_t *))(*v619 + 48))(v619))
        {
          uint64_t v41 = v616;
          break;
        }
      }
    }
    while (v609 != v41);
  }
  if (v612 == &v610)
  {
    (*(void (**)(uint64_t *))(v610 + 32))(&v610);
  }
  else if (v612)
  {
    (*(void (**)(void))(*v612 + 40))();
  }
  if (v619 == &v617)
  {
    (*(void (**)(uint64_t *))(v617 + 32))(&v617);
  }
  else if (v619)
  {
    (*(void (**)(void))(*v619 + 40))();
  }
  uint64_t v53 = *((void *)this + 17);
  uint64_t v54 = *(unsigned __int16 **)(v53 + 456);
  uint64_t v55 = *(unsigned __int16 **)(v53 + 464);
  if (v54 != v55)
  {
    uint64_t v57 = (uint64_t **)((char *)this + 168);
    uint64_t v56 = (uint64_t *)*((void *)this + 21);
    if (v56)
    {
      while (1)
      {
        if (v56)
        {
          unsigned int v58 = *v54;
          uint64_t v59 = (uint64_t **)((char *)this + 168);
          uint64_t v60 = v56;
          do
          {
            unsigned int v61 = *((unsigned __int16 *)v60 + 16);
            BOOL v62 = v61 >= v58;
            if (v61 >= v58) {
              uint64_t v63 = (uint64_t **)v60;
            }
            else {
              uint64_t v63 = (uint64_t **)(v60 + 1);
            }
            if (v62) {
              uint64_t v59 = (uint64_t **)v60;
            }
            uint64_t v60 = *v63;
          }
          while (*v63);
          if (v59 != v57 && v58 >= *((unsigned __int16 *)v59 + 16))
          {
            long long v64 = v59[1];
            uint64_t v65 = v59;
            if (v64)
            {
              do
              {
                uint64_t v66 = v64;
                long long v64 = (uint64_t *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                uint64_t v66 = v65[2];
                BOOL v146 = *v66 == (void)v65;
                uint64_t v65 = (uint64_t **)v66;
              }
              while (!v146);
            }
            if (*((uint64_t ***)this + 20) == v59) {
              *((void *)this + 20) = v66;
            }
            --*((void *)this + 22);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v56, (uint64_t *)v59);
            operator delete(v59);
          }
        }
        if (++v54 == v55) {
          break;
        }
        uint64_t v56 = *v57;
      }
    }
  }
  if (v622 == &buf[16])
  {
    (*(void (**)(unsigned char *))(*(void *)&buf[16] + 32))(&buf[16]);
  }
  else if (v622)
  {
    (*(void (**)(void))(*(void *)v622 + 40))();
  }
  if (v642 == &v640)
  {
    (*(void (**)(long long *))(v640 + 32))(&v640);
  }
  else if (v642)
  {
    (*(void (**)(void))(*(void *)v642 + 40))();
  }
  int8x16_t v67 = (void *)*((void *)a2 + 1);
  int8x8_t v68 = (int8x8_t)v67[1];
  if (!*(void *)&v68) {
    goto LABEL_357;
  }
  uint8x8_t v69 = (uint8x8_t)vcnt_s8(v68);
  v69.i16[0] = vaddlv_u8(v69);
  if (v69.u32[0] > 1uLL)
  {
    unint64_t v70 = 0x9F2276D081C2CB20;
    if (*(void *)&v68 <= 0x9F2276D081C2CB20) {
      unint64_t v70 = 0x9F2276D081C2CB20 % *(void *)&v68;
    }
  }
  else
  {
    unint64_t v70 = (*(void *)&v68 - 1) & 0x9F2276D081C2CB20;
  }
  int8x16_t v71 = *(void **)(*v67 + 8 * v70);
  if (!v71) {
    goto LABEL_357;
  }
  int16x8_t v72 = (void *)*v71;
  if (!v72) {
    goto LABEL_357;
  }
  if (v69.u32[0] < 2uLL)
  {
    uint64_t v73 = *(void *)&v68 - 1;
    while (1)
    {
      uint64_t v75 = v72[1];
      if (v75 == 0x9F2276D081C2CB20)
      {
        if (v72[2] == 0x9F2276D081C2CB20) {
          goto LABEL_355;
        }
      }
      else if ((v75 & v73) != v70)
      {
        goto LABEL_357;
      }
      int16x8_t v72 = (void *)*v72;
      if (!v72) {
        goto LABEL_357;
      }
    }
  }
  while (1)
  {
    unint64_t v74 = v72[1];
    if (v74 == 0x9F2276D081C2CB20) {
      break;
    }
    if (v74 >= *(void *)&v68) {
      v74 %= *(void *)&v68;
    }
    if (v74 != v70) {
      goto LABEL_357;
    }
LABEL_344:
    int16x8_t v72 = (void *)*v72;
    if (!v72) {
      goto LABEL_357;
    }
  }
  if (v72[2] != 0x9F2276D081C2CB20) {
    goto LABEL_344;
  }
LABEL_355:
  uint64_t v76 = v72[5];
  if (*(void *)(v76 + 8) != 0x9F2276D081C2CB20)
  {
LABEL_357:
    v576 = 0;
    goto LABEL_358;
  }
  v576 = *(uint64_t **)(v76 + 32);
LABEL_358:
  int32x4_t v77 = (void *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(*((int8x8_t **)this + 19));
  int8x16_t v78 = v77;
  if (v77[29])
  {
    int8x16_t v79 = (void *)v77[28];
    if (v79)
    {
      uint64_t v80 = v77[31];
      uint64_t v81 = v77[7];
      uint64_t v82 = (v77[8] - v81) >> 3;
      do
      {
        *(void *)&long long v639 = v81;
        *((void *)&v639 + 1) = v82;
        *(void *)buf = v80;
        uint64_t v83 = v79[6];
        if (!v83) {
          goto LABEL_1106;
        }
        (*(void (**)(uint64_t, unsigned char *, long long *))(*(void *)v83 + 48))(v83, buf, &v639);
        int8x16_t v79 = (void *)*v79;
      }
      while (v79);
    }
  }
  v78[8] = v78[7];
  v78[11] = v78[10];
  long long v84 = operator new(0x20uLL);
  *long long v84 = &unk_1EF570260;
  v84[1] = this;
  v84[2] = v576;
  v621 = v84;
  md::OverlaysLogic::_forEachOverlayLevelAndFallback((uint64_t)buf);
  if (v621 == buf)
  {
    (*(void (**)(unsigned char *))(*(void *)buf + 32))(buf);
  }
  else if (v621)
  {
    (*(void (**)(void))(*(void *)v621 + 40))();
  }
  if (*((unsigned char *)this + 856))
  {
    uint64_t v85 = operator new(4uLL);
    *uint64_t v85 = 3735610;
    uint64_t v86 = (unsigned __int16 *)(v85 + 1);
  }
  else
  {
    uint64_t v85 = operator new(2uLL);
    *(_WORD *)uint64_t v85 = 58;
    uint64_t v86 = (unsigned __int16 *)v85 + 1;
  }
  __p = v85;
  v574 = v86;
  long long v87 = (unsigned __int16 *)v85;
  while (2)
  {
    int v88 = *v87;
    uint64_t v89 = *v576;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    int32x4_t v90 = *(unsigned __int16 **)(v89 + 48);
    unint64_t v91 = *(unsigned __int16 **)(v89 + 56);
    v578 = v87;
    if (v90 == v91) {
      goto LABEL_383;
    }
    long long v92 = *(unsigned __int16 **)(v89 + 48);
    while (*v92 != v88)
    {
      v92 += 16;
      if (v92 == v91) {
        goto LABEL_383;
      }
    }
    if (v92 == v91)
    {
LABEL_383:
      unint64_t v93 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v90 != v88)
      {
        v90 += 16;
        if (v90 == v91)
        {
          int32x4_t v90 = *(unsigned __int16 **)(v89 + 56);
          break;
        }
      }
      unint64_t v93 = (uint64_t *)(v90 + 4);
    }
    if (*((unsigned char *)this + 128))
    {
      uint64_t v94 = (uint64_t *)*v93;
      v580 = v93 + 1;
      if ((uint64_t *)*v93 != v93 + 1)
      {
        while (1)
        {
          int8x16_t v95 = (void *)v94[4];
          long long v96 = (char *)v95[92];
          long long v97 = (char *)v95[91];
          uint64_t v98 = v96 - v97;
          v583 = v94;
          if (v96 == v97)
          {
            uint64_t v124 = v95[94];
            uint64_t v593 = v95[95];
            unint64_t v125 = 0xCCCCCCCCCCCCCCCDLL * ((v593 - v124) >> 5);
            if (v125 > (uint64_t)(v95[93] - (void)v97) >> 3)
            {
              if (v125 >> 61) {
LABEL_1104:
              }
                abort();
              uint64_t v126 = (char *)operator new(0x6666666666666668 * ((v593 - v124) >> 5));
              uint64_t v127 = &v126[8 * (v98 >> 3)];
              v95[91] = v127;
              v95[92] = v127;
              v95[93] = &v126[0x6666666666666668 * ((v593 - v124) >> 5)];
              if (v96)
              {
                operator delete(v96);
                uint64_t v124 = v95[94];
                uint64_t v593 = v95[95];
              }
            }
            if (v124 != v593) {
              operator new();
            }
            long long v96 = (char *)v95[92];
          }
          long long v99 = (char *)v95[91];
          if (v99 != v96) {
            break;
          }
LABEL_418:
          uint64_t v121 = v583;
          uint64_t v122 = (uint64_t *)v583[1];
          if (v122)
          {
            do
            {
              uint64_t v123 = v122;
              uint64_t v122 = (uint64_t *)*v122;
            }
            while (v122);
          }
          else
          {
            do
            {
              uint64_t v123 = (uint64_t *)v121[2];
              BOOL v146 = *v123 == (void)v121;
              uint64_t v121 = v123;
            }
            while (!v146);
          }
          uint64_t v94 = v123;
          if (v123 == v580) {
            goto LABEL_371;
          }
        }
        long long v100 = (int8x8_t *)*((void *)this + 19);
        while (1)
        {
          uint64_t v101 = *(void *)v99;
          int8x16_t v102 = (void *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(v100);
          uint64_t v608 = v101;
          float v103 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v102 + 4, (uint64_t)&v608);
          if (v104) {
            break;
          }
          unint64_t v105 = v102[31];
          if (v102[10] + (((uint64_t)v103 - v102[7]) >> 3) == v102[11]) {
            goto LABEL_414;
          }
          for (n = (void *)v102[16]; n; n = (void *)*n)
          {
            *(void *)&long long v639 = &v608;
            *((void *)&v639 + 1) = 1;
            unint64_t v615 = v105;
            uint64_t v107 = n[6];
            if (!v107) {
              goto LABEL_1106;
            }
            (*(void (**)(uint64_t, unint64_t *, long long *))(*(void *)v107 + 48))(v107, &v615, &v639);
          }
LABEL_391:
          v99 += 8;
          if (v99 == v96) {
            goto LABEL_418;
          }
        }
        long long v109 = (unsigned char *)v102[11];
        unint64_t v108 = v102[12];
        if ((unint64_t)v109 >= v108)
        {
          uint64_t v111 = (char *)v102[10];
          uint64_t v112 = v109 - v111;
          uint64_t v113 = v109 - v111 + 1;
          if (v113 < 0) {
            goto LABEL_1104;
          }
          unint64_t v114 = v108 - (void)v111;
          if (2 * v114 > v113) {
            uint64_t v113 = 2 * v114;
          }
          if (v114 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v115 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v115 = v113;
          }
          if (v115) {
            long long v116 = (char *)operator new(v115);
          }
          else {
            long long v116 = 0;
          }
          long long v117 = &v116[v112];
          uint64_t v110 = (uint64_t)&v116[v112 + 1];
          uint64_t v118 = (char *)(v111 - v109);
          if (v111 == v109) {
            uint64_t v118 = 0;
          }
          v102[10] = &v118[(void)v117];
          v102[11] = v110;
          v102[12] = &v116[v115];
          if (v111) {
            operator delete(v111);
          }
        }
        else
        {
          uint64_t v110 = (uint64_t)(v109 + 1);
        }
        v102[11] = v110;
        unint64_t v105 = v102[31];
LABEL_414:
        for (iuint64_t i = (void *)v102[22]; ii; iuint64_t i = (void *)*ii)
        {
          *(void *)&long long v639 = &v608;
          *((void *)&v639 + 1) = 1;
          unint64_t v615 = v105;
          uint64_t v120 = ii[6];
          if (!v120) {
            goto LABEL_1106;
          }
          (*(void (**)(uint64_t, unint64_t *, long long *))(*(void *)v120 + 48))(v120, &v615, &v639);
        }
        goto LABEL_391;
      }
    }
LABEL_371:
    long long v87 = v578 + 1;
    if (v578 + 1 != v574) {
      continue;
    }
    break;
  }
  operator delete(__p);
  LOBYTE(v608) = 0;
  *(void *)&long long v639 = &unk_1EF570410;
  *((void *)&v639 + 1) = this;
  *(void *)&long long v640 = &v608;
  *((void *)&v640 + 1) = &v639;
  md::OverlaysLogic::_forEachOverlayLevelAndFallback((uint64_t)&v639);
  if (*((long long **)&v640 + 1) == &v639)
  {
    (*(void (**)(long long *))(v639 + 32))(&v639);
    if (!(_BYTE)v608) {
      goto LABEL_441;
    }
    goto LABEL_439;
  }
  if (*((void *)&v640 + 1)) {
    (*(void (**)(void))(**((void **)&v640 + 1) + 40))();
  }
  if ((_BYTE)v608)
  {
LABEL_439:
    uint64_t v128 = **((void **)this + 116);
    if (v128)
    {
      LOBYTE(v615) = 8;
      md::MapEngine::setNeedsTick(v128, &v615);
    }
  }
LABEL_441:
  if (*((unsigned char *)this + 921)) {
    return;
  }
  uint64_t v129 = (int8x8_t *)*((void *)this + 19);
  int8x8_t v131 = v129[6];
  int8x8_t v130 = v129[7];
  if (*(void *)&v130 != *(void *)&v131)
  {
    uint64_t v132 = 0;
    v594 = (int8x8_t *)*((void *)this + 19);
    while (1)
    {
      uint64_t v135 = *(void *)&v131 + 8 * v132;
      if (*(_DWORD *)(v135 + 4) == -1) {
        goto LABEL_449;
      }
      unint64_t v136 = *(void *)v135;
      uint64_t v137 = (int8x8_t *)*((void *)this + 19);
      uint64_t v138 = (void *)gdc::Registry::storage<std::vector<gdc::Registry*>>(v137);
      unint64_t v139 = v136 >> 39;
      uint64_t v140 = v138[4];
      if (v136 >> 39 >= (v138[5] - v140) >> 3) {
        break;
      }
      uint64_t v141 = *(void *)(v140 + 8 * v139);
      if (!v141) {
        break;
      }
      unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * (HIDWORD(v136) & 0x7F));
      uint64_t v144 = v138[7];
      uint64_t v143 = v138[8];
      if (v142 >= (v143 - v144) >> 3) {
        break;
      }
      uint64_t v145 = v144 + 8 * v142;
      BOOL v146 = v145 != v143 && *(_DWORD *)(v145 + 4) == HIDWORD(v136);
      if (!v146) {
        break;
      }
      uint64_t v147 = v138[10];
      uint64_t v134 = (void *)(v147 + 24 * v142);
      if (v134 == (void *)v138[11] || v147 == 0) {
        break;
      }
LABEL_448:
      v134[1] = *v134;
      int8x8_t v131 = v129[6];
      int8x8_t v130 = v129[7];
LABEL_449:
      if (++v132 >= (unint64_t)((uint64_t)(*(void *)&v130 - *(void *)&v131) >> 3))
      {
        uint64_t v129 = (int8x8_t *)*((void *)this + 19);
        goto LABEL_508;
      }
    }
    unint64_t v597 = HIDWORD(v136);
    int16x8_t v149 = v137;
    int32x4_t v150 = (void *)gdc::Registry::storage<std::vector<gdc::Registry*>>(v137);
    unint64_t v601 = v136;
    unint64_t v615 = v136;
    int8x16_t v151 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v150 + 4, (uint64_t)&v615);
    if (v152)
    {
      int8x16_t v161 = (void *)v150[11];
      unint64_t v160 = v150[12];
      if ((unint64_t)v161 >= v160)
      {
        int8x16_t v163 = (void *)v150[10];
        unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * (v161 - v163) + 1;
        if (v164 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (void)v163) >> 3);
        if (2 * v165 > v164) {
          unint64_t v164 = 2 * v165;
        }
        if (v165 >= 0x555555555555555) {
          unint64_t v166 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v166 = v164;
        }
        if (v166)
        {
          if (v166 > 0xAAAAAAAAAAAAAAALL) {
LABEL_1105:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          int16x8_t v167 = (char *)operator new(24 * v166);
        }
        else
        {
          int16x8_t v167 = 0;
        }
        int32x4_t v168 = &v167[8 * (v161 - v163)];
        int8x16_t v169 = &v167[24 * v166];
        *(void *)int32x4_t v168 = 0;
        *((void *)v168 + 1) = 0;
        *((void *)v168 + 2) = 0;
        int8x16_t v162 = v168 + 24;
        if (v161 == v163)
        {
          v150[10] = v168;
          v150[11] = v162;
          v150[12] = v169;
        }
        else
        {
          do
          {
            int32x4_t v170 = v168;
            *((void *)v168 - 2) = 0;
            *((void *)v168 - 1) = 0;
            long long v171 = *(_OWORD *)(v161 - 3);
            v161 -= 3;
            *(_OWORD *)(v168 - 24) = v171;
            v168 -= 24;
            *((void *)v170 - 1) = v161[2];
            *int8x16_t v161 = 0;
            v161[1] = 0;
            v161[2] = 0;
          }
          while (v161 != v163);
          int8x16_t v161 = (void *)v150[10];
          int32x4_t v172 = (void *)v150[11];
          v150[10] = v168;
          v150[11] = v162;
          v150[12] = v169;
          if (v172 != v161)
          {
            int8x16_t v173 = v172;
            do
            {
              int8x16_t v175 = (void *)*(v173 - 3);
              v173 -= 3;
              int8x16_t v174 = v175;
              if (v175)
              {
                *(v172 - 2) = v174;
                operator delete(v174);
              }
              int32x4_t v172 = v173;
            }
            while (v173 != v161);
          }
        }
        if (v161) {
          operator delete(v161);
        }
      }
      else
      {
        *int8x16_t v161 = 0;
        v161[1] = 0;
        v161[2] = 0;
        int8x16_t v162 = v161 + 3;
        v150[11] = v161 + 3;
      }
      v150[11] = v162;
      uint64_t v157 = v150[31];
    }
    else
    {
      uint64_t v153 = v150[10];
      uint64_t v154 = ((uint64_t)v151 - v150[7]) >> 3;
      uint64_t v155 = v153 + 24 * v154;
      long long v156 = *(void **)v155;
      if (*(void *)v155)
      {
        *(void *)(v153 + 24 * v154 + 8) = v156;
        operator delete(v156);
        *(void *)uint64_t v155 = 0;
        *(void *)(v155 + 8) = 0;
        *(void *)(v155 + 16) = 0;
      }
      *(void *)uint64_t v155 = 0;
      *(void *)(v155 + 8) = 0;
      *(void *)(v155 + 16) = 0;
      uint64_t v157 = v150[31];
      if (v155 != v150[11])
      {
        for (juint64_t j = (void *)v150[16]; jj; juint64_t j = (void *)*jj)
        {
          *(void *)&long long v639 = &v615;
          *((void *)&v639 + 1) = 1;
          *(void *)buf = v157;
          uint64_t v159 = jj[6];
          if (!v159) {
            goto LABEL_1106;
          }
          (*(void (**)(uint64_t, unsigned char *, long long *))(*(void *)v159 + 48))(v159, buf, &v639);
        }
LABEL_498:
        int8x16_t v178 = (void *)gdc::Registry::storage<std::vector<gdc::Registry*>>(v149);
        uint64_t v179 = v178[4];
        if (v139 < (v178[5] - v179) >> 3
          && (uint64_t v180 = *(void *)(v179 + 8 * v139)) != 0
          && (unint64_t v181 = *(unsigned __int16 *)(v180 + 2 * (HIDWORD(v601) & 0x7F)),
              uint64_t v183 = v178[7],
              uint64_t v182 = v178[8],
              v181 < (v182 - v183) >> 3)
          && ((uint64_t v184 = v183 + 8 * v181, v184 != v182) ? (v185 = *(_DWORD *)(v184 + 4) == v597) : (v185 = 0), v185))
        {
          uint64_t v133 = (void *)v178[11];
          uint64_t v134 = (void *)(v178[10] + 24 * v181);
          uint64_t v129 = v594;
        }
        else
        {
          uint64_t v133 = (void *)v178[11];
          uint64_t v134 = v133;
          uint64_t v129 = v594;
        }
        if (v134 == v133) {
          uint64_t v134 = 0;
        }
        goto LABEL_448;
      }
    }
    for (kuint64_t k = (void *)v150[22]; kk; kuint64_t k = (void *)*kk)
    {
      *(void *)&long long v639 = &v615;
      *((void *)&v639 + 1) = 1;
      *(void *)buf = v157;
      uint64_t v177 = kk[6];
      if (!v177) {
        goto LABEL_1106;
      }
      (*(void (**)(uint64_t, unsigned char *, long long *))(*(void *)v177 + 48))(v177, buf, &v639);
    }
    goto LABEL_498;
  }
LABEL_508:
  int8x16_t v186 = (void *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>(v129);
  int16x8_t v187 = (unint64_t *)v186[7];
  v589 = (unint64_t *)v186[8];
  if (v187 != v589)
  {
    int32x4_t v188 = (uint64_t *)v186[10];
    int16x8_t v189 = (char *)this + 168;
    while (1)
    {
      unint64_t v190 = *v187;
      long long v639 = 0u;
      long long v640 = 0u;
      LODWORD(v641) = 1065353216;
      int32x4_t v191 = (void *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*((int8x8_t **)this + 19));
      uint64_t v192 = v191[4];
      unint64_t v598 = v190 >> 39;
      if (v190 >> 39 >= (v191[5] - v192) >> 3) {
        goto LABEL_518;
      }
      uint64_t v193 = *(void *)(v192 + 8 * (v190 >> 39));
      if (!v193) {
        goto LABEL_518;
      }
      unint64_t v194 = *(unsigned __int16 *)(v193 + 2 * (HIDWORD(v190) & 0x7F));
      uint64_t v196 = v191[7];
      uint64_t v195 = v191[8];
      if (v194 >= (v195 - v196) >> 3) {
        goto LABEL_518;
      }
      uint64_t v197 = v196 + 8 * v194;
      if (v197 != v195 && *(_DWORD *)(v197 + 4) == HIDWORD(v190))
      {
        int32x4_t v199 = (long long *)v191[11];
        int8x16_t v200 = (long long *)(v191[10] + 40 * v194);
      }
      else
      {
LABEL_518:
        int32x4_t v199 = (long long *)v191[11];
        int8x16_t v200 = v199;
      }
      int8x16_t v201 = v200 == v199 ? 0 : v200;
      int8x16_t v202 = (char *)*((void *)this + 20);
      if (v202 != v189) {
        break;
      }
LABEL_523:
      if (v201)
      {
        if (*((void *)&v640 + 1) == *((void *)v201 + 3))
        {
          int32x4_t v203 = &v640;
          do
          {
            int32x4_t v203 = *(long long **)v203;
            if (!v203) {
              goto LABEL_588;
            }
            unint64_t v204 = *((void *)v203 + 2);
            int8x16_t v205 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v201, v204);
          }
          while (v205 && v204 == v205[2]);
        }
        if (v201 == &v639)
        {
          int8x16_t v200 = &v639;
        }
        else
        {
          *((_DWORD *)v201 + 8) = v641;
          std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<gdc::Registry *,void *> *>>(v201, (void *)v640);
        }
      }
      else
      {
        gdc::Registry::_add<std::unordered_set<gdc::Registry*>,std::unordered_set<gdc::Registry*>&>(*((int8x8_t **)this + 19), v190, (uint64_t)&v639);
        BOOL v225 = (void *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*((int8x8_t **)this + 19));
        uint64_t v226 = v225[4];
        if (v598 < (v225[5] - v226) >> 3
          && (uint64_t v227 = *(void *)(v226 + 8 * v598)) != 0
          && (unint64_t v228 = *(unsigned __int16 *)(v227 + 2 * (HIDWORD(v190) & 0x7F)),
              uint64_t v230 = v225[7],
              uint64_t v229 = v225[8],
              v228 < (v229 - v230) >> 3)
          && ((uint64_t v231 = v230 + 8 * v228, v231 != v229) ? (v232 = *(_DWORD *)(v231 + 4) == HIDWORD(v190)) : (v232 = 0), v232))
        {
          uint64_t v233 = v225[11];
          uint64_t v234 = v225[10] + 40 * v228;
        }
        else
        {
          uint64_t v233 = v225[11];
          uint64_t v234 = v233;
        }
        if (v234 == v233) {
          int8x16_t v200 = 0;
        }
        else {
          int8x16_t v200 = (long long *)v234;
        }
      }
      md::OverlaysLogic::updateFoundationAssociation((uint64_t)this, v190, (uint64_t)v200);
LABEL_588:
      uint64_t v235 = (void *)v640;
      if ((void)v640)
      {
        do
        {
          uint64_t v236 = (void *)*v235;
          operator delete(v235);
          uint64_t v235 = v236;
        }
        while (v236);
      }
      uint64_t v237 = (void *)v639;
      *(void *)&long long v639 = 0;
      if (v237) {
        operator delete(v237);
      }
      ++v188;
      if (++v187 == v589) {
        goto LABEL_594;
      }
    }
LABEL_532:
    int8x16_t v206 = (void *)*((void *)v202 + 5);
    int8x8_t v207 = (int8x8_t)v206[1];
    if (!*(void *)&v207) {
      goto LABEL_560;
    }
    uint8x8_t v208 = (uint8x8_t)vcnt_s8(v207);
    v208.i16[0] = vaddlv_u8(v208);
    if (v208.u32[0] > 1uLL)
    {
      uint64_t v209 = 0x64A448A5CD5D38DBLL;
      if (*(void *)&v207 <= 0x64A448A5CD5D38DBuLL) {
        uint64_t v209 = 0x64A448A5CD5D38DBuLL % *(void *)&v207;
      }
    }
    else
    {
      uint64_t v209 = (*(void *)&v207 - 1) & 0x64A448A5CD5D38DBLL;
    }
    int8x16_t v210 = *(void **)(*v206 + 8 * v209);
    if (!v210 || (int8x16_t v211 = (void *)*v210) == 0)
    {
LABEL_560:
      if (GEOGetVectorKitOverlaysLogicLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitOverlaysLogicLog(void)::onceToken, &__block_literal_global_31);
      }
      long long v222 = GEOGetVectorKitOverlaysLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitOverlaysLogicLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&void buf[4] = "transformData";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/OverlaysLogic.mm";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v621) = 450;
        _os_log_impl(&dword_1A1780000, v222, OS_LOG_TYPE_ERROR, "Invalid SharedTransformData.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      goto LABEL_564;
    }
    if (v208.u32[0] < 2uLL)
    {
      uint64_t v212 = *(void *)&v207 - 1;
      while (1)
      {
        uint64_t v214 = v211[1];
        if (v214 == 0x64A448A5CD5D38DBLL)
        {
          if (v211[2] == 0x64A448A5CD5D38DBLL) {
            goto LABEL_553;
          }
        }
        else if ((v214 & v212) != v209)
        {
          goto LABEL_560;
        }
        int8x16_t v211 = (void *)*v211;
        if (!v211) {
          goto LABEL_560;
        }
      }
    }
    while (1)
    {
      unint64_t v213 = v211[1];
      if (v213 == 0x64A448A5CD5D38DBLL)
      {
        if (v211[2] == 0x64A448A5CD5D38DBLL)
        {
LABEL_553:
          uint64_t v215 = v211[5];
          if (*(void *)(v215 + 8) != 0x64A448A5CD5D38DBLL) {
            goto LABEL_560;
          }
          char v216 = *(unsigned __int8 **)(v215 + 32);
          if (!v216) {
            goto LABEL_560;
          }
          uint64_t v217 = *v188;
          if (*v216 == *(unsigned __int8 *)(*v188 + 32))
          {
            unsigned int v218 = v216[1];
            unsigned int v219 = *(unsigned __int8 *)(v217 + 33);
            BOOL v220 = v219 >= v218;
            unsigned int v221 = v219 - v218;
            if (v221)
            {
              if (v221 == 0
                || !v220
                || *((_DWORD *)v216 + 1) != *(int *)(v217 + 36) >> v221
                || *((_DWORD *)v216 + 2) != *(int *)(v217 + 40) >> v221)
              {
                goto LABEL_564;
              }
            }
            else if (*((_DWORD *)v216 + 1) != *(_DWORD *)(v217 + 36) || *((_DWORD *)v216 + 2) != *(_DWORD *)(v217 + 40))
            {
              goto LABEL_564;
            }
            std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__emplace_unique_key_args<gdc::Registry *,gdc::Registry * const&>((uint64_t)&v639, (unint64_t)v206, *((void *)v202 + 5));
          }
LABEL_564:
          uint64_t v223 = (char *)*((void *)v202 + 1);
          if (v223)
          {
            do
            {
              long long v224 = v223;
              uint64_t v223 = *(char **)v223;
            }
            while (v223);
          }
          else
          {
            do
            {
              long long v224 = (char *)*((void *)v202 + 2);
              BOOL v146 = *(void *)v224 == (void)v202;
              int8x16_t v202 = v224;
            }
            while (!v146);
          }
          int8x16_t v202 = v224;
          if (v224 == v189) {
            goto LABEL_523;
          }
          goto LABEL_532;
        }
      }
      else
      {
        if (v213 >= *(void *)&v207) {
          v213 %= *(void *)&v207;
        }
        if (v213 != v209) {
          goto LABEL_560;
        }
      }
      int8x16_t v211 = (void *)*v211;
      if (!v211) {
        goto LABEL_560;
      }
    }
  }
LABEL_594:
  long long v238 = (void *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>(*((int8x8_t **)this + 19));
  long long v239 = (unint64_t *)v238[7];
  v590 = (unint64_t *)v238[8];
  if (v239 != v590)
  {
    long long v240 = (unsigned __int8 **)v238[10];
    int8x16_t v241 = (char *)this + 168;
    while (1)
    {
      unint64_t v242 = *v239;
      long long v639 = 0u;
      long long v640 = 0u;
      LODWORD(v641) = 1065353216;
      int32x4_t v243 = (void *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*((int8x8_t **)this + 19));
      uint64_t v244 = v243[4];
      unint64_t v599 = v242 >> 39;
      if (v242 >> 39 >= (v243[5] - v244) >> 3) {
        goto LABEL_604;
      }
      uint64_t v245 = *(void *)(v244 + 8 * (v242 >> 39));
      if (!v245) {
        goto LABEL_604;
      }
      unint64_t v246 = *(unsigned __int16 *)(v245 + 2 * (HIDWORD(v242) & 0x7F));
      uint64_t v248 = v243[7];
      uint64_t v247 = v243[8];
      if (v246 >= (v247 - v248) >> 3) {
        goto LABEL_604;
      }
      uint64_t v249 = v248 + 8 * v246;
      if (v249 != v247 && *(_DWORD *)(v249 + 4) == HIDWORD(v242))
      {
        int32x4_t v251 = (long long *)v243[11];
        int8x16_t v252 = (long long *)(v243[10] + 40 * v246);
      }
      else
      {
LABEL_604:
        int32x4_t v251 = (long long *)v243[11];
        int8x16_t v252 = v251;
      }
      int8x16_t v253 = v252 == v251 ? 0 : v252;
      int8x16_t v254 = (char *)*((void *)this + 20);
      if (v254 != v241) {
        break;
      }
LABEL_609:
      if (v253)
      {
        if (*((void *)&v640 + 1) == *((void *)v253 + 3))
        {
          int8x16_t v255 = &v640;
          do
          {
            int8x16_t v255 = *(long long **)v255;
            if (!v255) {
              goto LABEL_674;
            }
            unint64_t v256 = *((void *)v255 + 2);
            int8x16_t v257 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v253, v256);
          }
          while (v257 && v256 == v257[2]);
        }
        if (v253 == &v639)
        {
          int8x16_t v252 = &v639;
        }
        else
        {
          *((_DWORD *)v253 + 8) = v641;
          std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<gdc::Registry *,void *> *>>(v253, (void *)v640);
        }
      }
      else
      {
        gdc::Registry::_add<std::unordered_set<gdc::Registry*>,std::unordered_set<gdc::Registry*>&>(*((int8x8_t **)this + 19), v242, (uint64_t)&v639);
        int8x16_t v277 = (void *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*((int8x8_t **)this + 19));
        uint64_t v278 = v277[4];
        if (v599 < (v277[5] - v278) >> 3
          && (uint64_t v279 = *(void *)(v278 + 8 * v599)) != 0
          && (unint64_t v280 = *(unsigned __int16 *)(v279 + 2 * (HIDWORD(v242) & 0x7F)),
              uint64_t v282 = v277[7],
              uint64_t v281 = v277[8],
              v280 < (v281 - v282) >> 3)
          && ((uint64_t v283 = v282 + 8 * v280, v283 != v281) ? (v284 = *(_DWORD *)(v283 + 4) == HIDWORD(v242)) : (v284 = 0), v284))
        {
          uint64_t v285 = v277[11];
          uint64_t v286 = v277[10] + 40 * v280;
        }
        else
        {
          uint64_t v285 = v277[11];
          uint64_t v286 = v285;
        }
        if (v286 == v285) {
          int8x16_t v252 = 0;
        }
        else {
          int8x16_t v252 = (long long *)v286;
        }
      }
      md::OverlaysLogic::updateFoundationAssociation((uint64_t)this, v242, (uint64_t)v252);
LABEL_674:
      int8x16_t v287 = (void *)v640;
      if ((void)v640)
      {
        do
        {
          int8x16_t v288 = (void *)*v287;
          operator delete(v287);
          int8x16_t v287 = v288;
        }
        while (v288);
      }
      int8x16_t v289 = (void *)v639;
      *(void *)&long long v639 = 0;
      if (v289) {
        operator delete(v289);
      }
      ++v240;
      if (++v239 == v590) {
        goto LABEL_680;
      }
    }
LABEL_618:
    int16x8_t v258 = (void *)*((void *)v254 + 5);
    int8x8_t v259 = (int8x8_t)v258[1];
    if (!*(void *)&v259) {
      goto LABEL_646;
    }
    uint8x8_t v260 = (uint8x8_t)vcnt_s8(v259);
    v260.i16[0] = vaddlv_u8(v260);
    if (v260.u32[0] > 1uLL)
    {
      uint64_t v261 = 0x64A448A5CD5D38DBLL;
      if (*(void *)&v259 <= 0x64A448A5CD5D38DBuLL) {
        uint64_t v261 = 0x64A448A5CD5D38DBuLL % *(void *)&v259;
      }
    }
    else
    {
      uint64_t v261 = (*(void *)&v259 - 1) & 0x64A448A5CD5D38DBLL;
    }
    int32x4_t v262 = *(void **)(*v258 + 8 * v261);
    if (!v262 || (int8x16_t v263 = (void *)*v262) == 0)
    {
LABEL_646:
      if (GEOGetVectorKitOverlaysLogicLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitOverlaysLogicLog(void)::onceToken, &__block_literal_global_31);
      }
      int8x16_t v274 = GEOGetVectorKitOverlaysLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitOverlaysLogicLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&void buf[4] = "transformData";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/OverlaysLogic.mm";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v621) = 450;
        _os_log_impl(&dword_1A1780000, v274, OS_LOG_TYPE_ERROR, "Invalid SharedTransformData.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      goto LABEL_650;
    }
    if (v260.u32[0] < 2uLL)
    {
      uint64_t v264 = *(void *)&v259 - 1;
      while (1)
      {
        uint64_t v266 = v263[1];
        if (v266 == 0x64A448A5CD5D38DBLL)
        {
          if (v263[2] == 0x64A448A5CD5D38DBLL) {
            goto LABEL_639;
          }
        }
        else if ((v266 & v264) != v261)
        {
          goto LABEL_646;
        }
        int8x16_t v263 = (void *)*v263;
        if (!v263) {
          goto LABEL_646;
        }
      }
    }
    while (1)
    {
      unint64_t v265 = v263[1];
      if (v265 == 0x64A448A5CD5D38DBLL)
      {
        if (v263[2] == 0x64A448A5CD5D38DBLL)
        {
LABEL_639:
          uint64_t v267 = v263[5];
          if (*(void *)(v267 + 8) != 0x64A448A5CD5D38DBLL) {
            goto LABEL_646;
          }
          int8x16_t v268 = *(unsigned __int8 **)(v267 + 32);
          if (!v268) {
            goto LABEL_646;
          }
          uint64_t v269 = (uint64_t)*v240;
          if (*v268 == **v240)
          {
            unsigned int v270 = v268[1];
            unsigned int v271 = *(unsigned __int8 *)(v269 + 1);
            BOOL v272 = v271 >= v270;
            unsigned int v273 = v271 - v270;
            if (v273)
            {
              if (v273 == 0
                || !v272
                || *((_DWORD *)v268 + 1) != *(int *)(v269 + 4) >> v273
                || *((_DWORD *)v268 + 2) != *(int *)(v269 + 8) >> v273)
              {
                goto LABEL_650;
              }
            }
            else if (*((_DWORD *)v268 + 1) != *(_DWORD *)(v269 + 4) || *((_DWORD *)v268 + 2) != *(_DWORD *)(v269 + 8))
            {
              goto LABEL_650;
            }
            std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__emplace_unique_key_args<gdc::Registry *,gdc::Registry * const&>((uint64_t)&v639, (unint64_t)v258, *((void *)v254 + 5));
          }
LABEL_650:
          int8x16_t v275 = (char *)*((void *)v254 + 1);
          if (v275)
          {
            do
            {
              int8x16_t v276 = v275;
              int8x16_t v275 = *(char **)v275;
            }
            while (v275);
          }
          else
          {
            do
            {
              int8x16_t v276 = (char *)*((void *)v254 + 2);
              BOOL v146 = *(void *)v276 == (void)v254;
              int8x16_t v254 = v276;
            }
            while (!v146);
          }
          int8x16_t v254 = v276;
          if (v276 == v241) {
            goto LABEL_609;
          }
          goto LABEL_618;
        }
      }
      else
      {
        if (v265 >= *(void *)&v259) {
          v265 %= *(void *)&v259;
        }
        if (v265 != v261) {
          goto LABEL_646;
        }
      }
      int8x16_t v263 = (void *)*v263;
      if (!v263) {
        goto LABEL_646;
      }
    }
  }
LABEL_680:
  int8x16_t v290 = (void *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>(*((int8x8_t **)this + 19));
  int8x16_t v291 = (unint64_t *)v290[7];
  v575 = (unint64_t *)v290[8];
  if (v291 == v575) {
    return;
  }
  __pa = (char *)this + 168;
  uint64_t v292 = v290[10];
  while (1)
  {
    unint64_t v293 = *v291;
    long long v639 = 0u;
    long long v640 = 0u;
    LODWORD(v641) = 1065353216;
    int8x16_t v294 = (void *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*((int8x8_t **)this + 19));
    unint64_t v579 = HIDWORD(v293);
    unint64_t v295 = v293 >> 39;
    uint64_t v296 = v294[4];
    if (v293 >> 39 < (v294[5] - v296) >> 3
      && (uint64_t v297 = *(void *)(v296 + 8 * v295)) != 0
      && (unint64_t v298 = *(unsigned __int16 *)(v297 + 2 * (HIDWORD(v293) & 0x7F)),
          uint64_t v300 = v294[7],
          uint64_t v299 = v294[8],
          v298 < (v299 - v300) >> 3)
      && ((v301 = v300 + 8 * v298, v301 != v299) ? (BOOL v302 = *(_DWORD *)(v301 + 4) == HIDWORD(v293)) : (BOOL v302 = 0), v302))
    {
      uint64_t v303 = v294[11];
      uint64_t v304 = v294[10] + 40 * v298;
    }
    else
    {
      uint64_t v303 = v294[11];
      uint64_t v304 = v303;
    }
    if (v304 == v303) {
      uint64_t v305 = 0;
    }
    else {
      uint64_t v305 = v304;
    }
    int8x16_t v306 = (void *)gdc::Registry::storage<std::unordered_map<gdc::Registry*,std::vector<gdc::Entity>>>(*((int8x8_t **)this + 19));
    uint64_t v307 = v306[4];
    v585 = v291;
    if (v295 < (v306[5] - v307) >> 3
      && (uint64_t v308 = *(void *)(v307 + 8 * v295)) != 0
      && (unint64_t v309 = *(unsigned __int16 *)(v308 + 2 * (HIDWORD(v293) & 0x7F)),
          uint64_t v311 = v306[7],
          uint64_t v310 = v306[8],
          v309 < (v310 - v311) >> 3)
      && ((v312 = v311 + 8 * v309, v312 != v310) ? (BOOL v313 = *(_DWORD *)(v312 + 4) == HIDWORD(v293)) : (BOOL v313 = 0), v313))
    {
      uint64_t v314 = v306[11];
      uint64_t v315 = v306[10] + 40 * v309;
    }
    else
    {
      uint64_t v314 = v306[11];
      uint64_t v315 = v314;
    }
    if (v315 == v314) {
      uint64_t v316 = 0;
    }
    else {
      uint64_t v316 = v315;
    }
    __int16 v317 = (void *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(*((int8x8_t **)this + 19));
    uint64_t v318 = v317[4];
    unint64_t v588 = v293 >> 39;
    if (v295 < (v317[5] - v318) >> 3
      && (uint64_t v319 = *(void *)(v318 + 8 * v295)) != 0
      && (unint64_t v320 = *(unsigned __int16 *)(v319 + 2 * (HIDWORD(v293) & 0x7F)),
          uint64_t v322 = v317[7],
          uint64_t v321 = v317[8],
          v320 < (v321 - v322) >> 3)
      && ((uint64_t v323 = v322 + 8 * v320, v323 != v321) ? (v324 = *(_DWORD *)(v323 + 4) == HIDWORD(v293)) : (v324 = 0), v324))
    {
      unint64_t v325 = v317[11];
      unint64_t v326 = v317[10] + v320;
    }
    else
    {
      unint64_t v325 = v317[11];
      unint64_t v326 = v325;
    }
    CanDisable = (void *)gdc::Registry::storage<md::overlayComponents::CanDisableDraping>(*((int8x8_t **)this + 19));
    uint64_t v328 = CanDisable[4];
    uint64_t v584 = v292;
    unint64_t v586 = v293;
    v577 = (long long *)v304;
    v581 = (int8x8_t *)v305;
    if (v588 < (CanDisable[5] - v328) >> 3
      && (uint64_t v329 = *(void *)(v328 + 8 * v588)) != 0
      && (unint64_t v330 = *(unsigned __int16 *)(v329 + 2 * (HIDWORD(v293) & 0x7F)),
          uint64_t v332 = CanDisable[7],
          uint64_t v331 = CanDisable[8],
          v330 < (v331 - v332) >> 3)
      && ((uint64_t v333 = v332 + 8 * v330, v333 != v331) ? (v334 = *(_DWORD *)(v333 + 4) == HIDWORD(v293)) : (v334 = 0), v334))
    {
      unint64_t v335 = CanDisable[11];
      unint64_t v336 = CanDisable[10] + v330;
    }
    else
    {
      unint64_t v335 = CanDisable[11];
      unint64_t v336 = v335;
    }
    BOOL v338 = v336 == v335 || v336 == 0;
    if (v326 == v325) {
      goto LABEL_996;
    }
    if (!v326) {
      goto LABEL_996;
    }
    if (!v316) {
      goto LABEL_996;
    }
    if (!*(void *)(v316 + 24)) {
      goto LABEL_996;
    }
    uint64_t v339 = gdc::Registry::getOrAdd<gdc::components::RegistryBridgeMap<gdc::Entity>>(*((int8x8_t **)this + 19), v586);
    v602 = *(void **)(v316 + 16);
    if (!v602) {
      goto LABEL_996;
    }
    uint64_t v571 = v339;
    if (v338) {
      break;
    }
    do
    {
      int8x8_t v340 = *(int8x8_t *)(v339 + 16);
      unsigned __int8 v341 = v602;
      if (v340)
      {
        unint64_t v342 = v602[2];
        unint64_t v343 = 0x9DDFEA08EB382D69 * (((8 * v342) + 8) ^ HIDWORD(v342));
        unint64_t v344 = 0x9DDFEA08EB382D69 * (HIDWORD(v342) ^ (v343 >> 47) ^ v343);
        unint64_t v345 = 0x9DDFEA08EB382D69 * (v344 ^ (v344 >> 47));
        uint8x8_t v346 = (uint8x8_t)vcnt_s8(v340);
        v346.i16[0] = vaddlv_u8(v346);
        if (v346.u32[0] > 1uLL)
        {
          unint64_t v347 = v345;
          if (v345 >= *(void *)&v340) {
            unint64_t v347 = v345 % *(void *)&v340;
          }
        }
        else
        {
          unint64_t v347 = v345 & (*(void *)&v340 - 1);
        }
        __int16 v348 = *(void **)(*(void *)(v339 + 8) + 8 * v347);
        if (v348)
        {
          BOOL v349 = (void *)*v348;
          if (*v348)
          {
            if (v346.u32[0] < 2uLL)
            {
              uint64_t v350 = *(void *)&v340 - 1;
              while (1)
              {
                uint64_t v352 = v349[1];
                if (v345 == v352)
                {
                  if (v349[2] == v342) {
                    goto LABEL_756;
                  }
                }
                else if ((v352 & v350) != v347)
                {
                  goto LABEL_734;
                }
                BOOL v349 = (void *)*v349;
                if (!v349) {
                  goto LABEL_734;
                }
              }
            }
            do
            {
              unint64_t v351 = v349[1];
              if (v345 == v351)
              {
                if (v349[2] == v342)
                {
LABEL_756:
                  unint64_t v353 = v349[6];
                  v591 = (int8x8_t *)v602[2];
                  if (v353)
                  {
                    if (v353 >> 61) {
                      abort();
                    }
                    long long v354 = (char *)operator new(8 * v353);
                    char v355 = &v354[8 * v353];
                    uint64_t v339 = v571;
                    long long v356 = (void *)v349[5];
                    if (!v356)
                    {
LABEL_796:
                      if (v354)
                      {
                        operator delete(v354);
                        uint64_t v339 = v571;
                      }
                      break;
                    }
                  }
                  else
                  {
                    long long v354 = 0;
                    char v355 = 0;
                    long long v356 = (void *)v349[5];
                    if (!v356) {
                      goto LABEL_796;
                    }
                  }
                  char v357 = v354;
                  while (2)
                  {
                    while (1)
                    {
                      uint64_t v358 = v356[3];
                      if (v357 >= v355) {
                        break;
                      }
                      *(void *)char v357 = *(void *)(v358 + 16);
                      v357 += 8;
                      long long v356 = (void *)*v356;
                      if (!v356) {
                        goto LABEL_794;
                      }
                    }
                    int64_t v359 = v357 - v354;
                    uint64_t v360 = (v357 - v354) >> 3;
                    unint64_t v361 = v360 + 1;
                    if ((unint64_t)(v360 + 1) >> 61) {
                      abort();
                    }
                    if ((v355 - v354) >> 2 > v361) {
                      unint64_t v361 = (v355 - v354) >> 2;
                    }
                    if ((unint64_t)(v355 - v354) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v362 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v362 = v361;
                    }
                    if (v362)
                    {
                      if (v362 >> 61) {
                        goto LABEL_1105;
                      }
                      v363 = v357;
                      uint64_t v364 = (char *)operator new(8 * v362);
                    }
                    else
                    {
                      v363 = v357;
                      uint64_t v364 = 0;
                    }
                    v365 = &v364[8 * v360];
                    *(void *)v365 = *(void *)(v358 + 16);
                    v366 = v365 + 8;
                    if (v363 == v354)
                    {
                      char v355 = &v364[8 * v362];
                      if (v354) {
                        goto LABEL_779;
                      }
                    }
                    else
                    {
                      unint64_t v367 = v363 - 8 - v354;
                      if (v367 < 0x168)
                      {
                        v368 = v363;
                        goto LABEL_777;
                      }
                      if (&v364[v359 - 8 - (v367 & 0xFFFFFFFFFFFFFFF8)] > &v364[v359 - 8])
                      {
                        v368 = v363;
                        goto LABEL_777;
                      }
                      if (&v363[-(v367 & 0xFFFFFFFFFFFFFFF8) - 8] > v363 - 8)
                      {
                        v368 = v363;
                        goto LABEL_777;
                      }
                      if ((unint64_t)(v363 - &v364[v359]) < 0x20)
                      {
                        v368 = v363;
                        goto LABEL_777;
                      }
                      uint64_t v370 = (v367 >> 3) + 1;
                      v368 = &v363[-8 * (v370 & 0x3FFFFFFFFFFFFFFCLL)];
                      v371 = &v364[8 * v360 - 16];
                      v372 = v363 - 16;
                      uint64_t v373 = v370 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v374 = *(_OWORD *)v372;
                        *((_OWORD *)v371 - 1) = *((_OWORD *)v372 - 1);
                        *(_OWORD *)v371 = v374;
                        v371 -= 32;
                        v372 -= 32;
                        v373 -= 4;
                      }
                      while (v373);
                      v365 -= 8 * (v370 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v370 != (v370 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_777:
                          uint64_t v369 = *((void *)v368 - 1);
                          v368 -= 8;
                          *((void *)v365 - 1) = v369;
                          v365 -= 8;
                        }
                        while (v368 != v354);
                      }
                      char v355 = &v364[8 * v362];
                      if (v354) {
LABEL_779:
                      }
                        operator delete(v354);
                    }
                    long long v354 = v365;
                    char v357 = v366;
                    long long v356 = (void *)*v356;
                    if (!v356)
                    {
LABEL_794:
                      v375 = v354;
                      v587 = v357;
                      if (v354 == v357)
                      {
LABEL_795:
                        uint64_t v339 = v571;
                        unsigned __int8 v341 = v602;
                        goto LABEL_796;
                      }
                      while (2)
                      {
                        v595 = v375;
                        uint64_t v376 = *(void *)v375;
                        char v377 = *((unsigned char *)this + 920);
                        v378 = (void *)gdc::Registry::storage<md::components::Visibility>(v591);
                        uint64_t v608 = v376;
                        v379 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v378 + 4, (uint64_t)&v608);
                        if ((v380 & 1) == 0)
                        {
                          v381 = (unsigned char *)(v378[10] + (((uint64_t)v379 - v378[7]) >> 3));
                          unsigned char *v381 = v377;
                          unint64_t v382 = v378[31];
                          if (v381 != (unsigned char *)v378[11])
                          {
                            for (muint64_t m = (void *)v378[16]; mm; muint64_t m = (void *)*mm)
                            {
                              *(void *)buf = &v608;
                              *(void *)&buf[8] = 1;
                              unint64_t v615 = v382;
                              uint64_t v384 = mm[6];
                              if (!v384) {
                                goto LABEL_1106;
                              }
                              (*(void (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)v384 + 48))(v384, &v615, buf);
                            }
                            goto LABEL_839;
                          }
LABEL_836:
                          for (nn = (void *)v378[22]; nn; nn = (void *)*nn)
                          {
                            *(void *)buf = &v608;
                            *(void *)&buf[8] = 1;
                            unint64_t v615 = v382;
                            uint64_t v410 = nn[6];
                            if (!v410) {
                              goto LABEL_1106;
                            }
                            (*(void (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)v410 + 48))(v410, &v615, buf);
                          }
LABEL_839:
                          uint64_t v411 = *(void *)v595;
                          v412 = (void *)gdc::Registry::storage<md::components::VisibilityChanged>(v591);
                          uint64_t v608 = v411;
                          v413 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v412 + 4, (uint64_t)&v608);
                          if (v414)
                          {
                            v419 = (unsigned char *)v412[11];
                            unint64_t v418 = v412[12];
                            if ((unint64_t)v419 >= v418)
                            {
                              v421 = (char *)v412[10];
                              uint64_t v422 = v419 - v421;
                              uint64_t v423 = v419 - v421 + 1;
                              if (v423 < 0) {
                                abort();
                              }
                              unint64_t v424 = v418 - (void)v421;
                              if (2 * v424 > v423) {
                                uint64_t v423 = 2 * v424;
                              }
                              if (v424 >= 0x3FFFFFFFFFFFFFFFLL) {
                                size_t v425 = 0x7FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                size_t v425 = v423;
                              }
                              if (v425) {
                                v426 = (char *)operator new(v425);
                              }
                              else {
                                v426 = 0;
                              }
                              v427 = &v426[v425];
                              uint64_t v420 = (uint64_t)&v426[v422 + 1];
                              v428 = (char *)(v421 - v419);
                              if (v421 == v419) {
                                v428 = 0;
                              }
                              v412[10] = &v426[v422 + (void)v428];
                              v412[11] = v420;
                              v412[12] = v427;
                              if (v421) {
                                operator delete(v421);
                              }
                            }
                            else
                            {
                              uint64_t v420 = (uint64_t)(v419 + 1);
                            }
                            v412[11] = v420;
                            unint64_t v415 = v412[31];
                          }
                          else
                          {
                            unint64_t v415 = v412[31];
                            if (v412[10] + (((uint64_t)v413 - v412[7]) >> 3) != v412[11])
                            {
                              for (i1 = (void *)v412[16]; i1; i1 = (void *)*i1)
                              {
                                *(void *)buf = &v608;
                                *(void *)&buf[8] = 1;
                                unint64_t v615 = v415;
                                uint64_t v417 = i1[6];
                                if (!v417) {
                                  goto LABEL_1106;
                                }
                                (*(void (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)v417 + 48))(v417, &v615, buf);
                              }
                              goto LABEL_798;
                            }
                          }
                          for (i2 = (void *)v412[22]; i2; i2 = (void *)*i2)
                          {
                            *(void *)buf = &v608;
                            *(void *)&buf[8] = 1;
                            unint64_t v615 = v415;
                            uint64_t v430 = i2[6];
                            if (!v430) {
                              goto LABEL_1106;
                            }
                            (*(void (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)v430 + 48))(v430, &v615, buf);
                          }
LABEL_798:
                          v375 = v595 + 8;
                          if (v595 + 8 == v587) {
                            goto LABEL_795;
                          }
                          continue;
                        }
                        break;
                      }
                      v386 = (unsigned char *)v378[11];
                      unint64_t v385 = v378[12];
                      if ((unint64_t)v386 < v385)
                      {
                        unsigned char *v386 = v377;
                        uint64_t v387 = (uint64_t)(v386 + 1);
LABEL_835:
                        v378[11] = v387;
                        unint64_t v382 = v378[31];
                        goto LABEL_836;
                      }
                      v388 = (unsigned char *)v378[10];
                      unint64_t v389 = v386 - v388;
                      uint64_t v390 = v386 - v388 + 1;
                      if (v390 < 0) {
                        abort();
                      }
                      unint64_t v391 = v385 - (void)v388;
                      if (2 * v391 > v390) {
                        uint64_t v390 = 2 * v391;
                      }
                      if (v391 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v392 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v392 = v390;
                      }
                      if (v392)
                      {
                        size_t v393 = v392;
                        v394 = (char *)operator new(v392);
                        size_t v392 = v393;
                      }
                      else
                      {
                        v394 = 0;
                      }
                      v395 = &v394[v389];
                      v394[v389] = v377;
                      uint64_t v387 = (uint64_t)&v394[v389 + 1];
                      if (v386 == v388) {
                        goto LABEL_833;
                      }
                      if (v389 >= 8 && (unint64_t)(v388 - v394) >= 0x20)
                      {
                        if (v389 < 0x20)
                        {
                          uint64_t v396 = 0;
LABEL_825:
                          uint64_t v401 = v396 - (v389 & 0xFFFFFFFFFFFFFFF8);
                          v402 = &v386[-v396];
                          v403 = &v394[&v386[-v396] - v388 - 8];
                          v404 = (uint64_t *)(v402 - 8);
                          do
                          {
                            uint64_t v405 = *v404--;
                            *(void *)v403 = v405;
                            v403 -= 8;
                            v401 += 8;
                          }
                          while (v401);
                          if (v389 != (v389 & 0xFFFFFFFFFFFFFFF8))
                          {
                            v395 -= v389 & 0xFFFFFFFFFFFFFFF8;
                            v386 -= v389 & 0xFFFFFFFFFFFFFFF8;
                            goto LABEL_830;
                          }
LABEL_832:
                          v395 = v394;
LABEL_833:
                          v378[10] = v395;
                          v378[11] = v387;
                          v378[12] = &v394[v392];
                          if (v388)
                          {
                            uint64_t v408 = (uint64_t)&v394[v389 + 1];
                            operator delete(v388);
                            uint64_t v387 = v408;
                          }
                          goto LABEL_835;
                        }
                        uint64_t v396 = v389 & 0xFFFFFFFFFFFFFFE0;
                        v397 = &v394[v389 - 16];
                        v398 = (long long *)(v386 - 16);
                        unint64_t v399 = v389 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          long long v400 = *v398;
                          *((_OWORD *)v397 - 1) = *(v398 - 1);
                          *(_OWORD *)v397 = v400;
                          v397 -= 32;
                          v398 -= 2;
                          v399 -= 32;
                        }
                        while (v399);
                        if (v389 == v396) {
                          goto LABEL_832;
                        }
                        if ((v389 & 0x18) != 0) {
                          goto LABEL_825;
                        }
                        v395 -= v396;
                        v386 -= v396;
                      }
LABEL_830:
                      v406 = v395 - 1;
                      do
                      {
                        char v407 = *--v386;
                        *v406-- = v407;
                      }
                      while (v386 != v388);
                      goto LABEL_832;
                    }
                    continue;
                  }
                }
              }
              else
              {
                if (v351 >= *(void *)&v340) {
                  v351 %= *(void *)&v340;
                }
                if (v351 != v347) {
                  break;
                }
              }
              BOOL v349 = (void *)*v349;
            }
            while (v349);
          }
        }
      }
LABEL_734:
      v602 = (void *)*v341;
    }
    while (*v341);
LABEL_996:
    v521 = (char *)*((void *)this + 20);
    if (v521 != __pa)
    {
      do
      {
        v537 = (void *)*((void *)v521 + 5);
        int8x8_t v538 = (int8x8_t)v537[1];
        if (!*(void *)&v538) {
          goto LABEL_1053;
        }
        uint8x8_t v539 = (uint8x8_t)vcnt_s8(v538);
        v539.i16[0] = vaddlv_u8(v539);
        if (v539.u32[0] > 1uLL)
        {
          uint64_t v540 = 0x64A448A5CD5D38DBLL;
          if (*(void *)&v538 <= 0x64A448A5CD5D38DBuLL) {
            uint64_t v540 = 0x64A448A5CD5D38DBuLL % *(void *)&v538;
          }
        }
        else
        {
          uint64_t v540 = (*(void *)&v538 - 1) & 0x64A448A5CD5D38DBLL;
        }
        v541 = *(void **)(*v537 + 8 * v540);
        if (!v541 || (v542 = (void *)*v541) == 0)
        {
LABEL_1053:
          if (GEOGetVectorKitOverlaysLogicLog(void)::onceToken != -1) {
            dispatch_once(&GEOGetVectorKitOverlaysLogicLog(void)::onceToken, &__block_literal_global_31);
          }
          v554 = GEOGetVectorKitOverlaysLogicLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitOverlaysLogicLog(void)::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&void buf[4] = "transformData";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/OverlaysLogic.mm";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v621) = 503;
            _os_log_impl(&dword_1A1780000, v554, OS_LOG_TYPE_ERROR, "Invalid SharedTransformData.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
          goto LABEL_1057;
        }
        if (v539.u32[0] < 2uLL)
        {
          uint64_t v543 = *(void *)&v538 - 1;
          while (1)
          {
            uint64_t v545 = v542[1];
            if (v545 == 0x64A448A5CD5D38DBLL)
            {
              if (v542[2] == 0x64A448A5CD5D38DBLL) {
                goto LABEL_1046;
              }
            }
            else if ((v545 & v543) != v540)
            {
              goto LABEL_1053;
            }
            v542 = (void *)*v542;
            if (!v542) {
              goto LABEL_1053;
            }
          }
        }
        while (1)
        {
          unint64_t v544 = v542[1];
          if (v544 == 0x64A448A5CD5D38DBLL) {
            break;
          }
          if (v544 >= *(void *)&v538) {
            v544 %= *(void *)&v538;
          }
          if (v544 != v540) {
            goto LABEL_1053;
          }
LABEL_1035:
          v542 = (void *)*v542;
          if (!v542) {
            goto LABEL_1053;
          }
        }
        if (v542[2] != 0x64A448A5CD5D38DBLL) {
          goto LABEL_1035;
        }
LABEL_1046:
        uint64_t v546 = v542[5];
        if (*(void *)(v546 + 8) != 0x64A448A5CD5D38DBLL) {
          goto LABEL_1053;
        }
        v547 = *(unsigned __int8 **)(v546 + 32);
        if (!v547) {
          goto LABEL_1053;
        }
        uint64_t v548 = *(void *)(v584 + 88);
        if (*v547 != *(unsigned __int8 *)(v548 + 168)) {
          goto LABEL_1057;
        }
        unsigned int v549 = v547[1];
        unsigned int v550 = *(unsigned __int8 *)(v548 + 169);
        char v551 = v549 - v550;
        if (v549 == v550)
        {
          int v552 = *((_DWORD *)v547 + 1);
          int v553 = *(_DWORD *)(v548 + 172);
          if (v552 == v553)
          {
            int v553 = *((_DWORD *)v547 + 1);
            if (*((_DWORD *)v547 + 2) == *(_DWORD *)(v548 + 176)) {
              goto LABEL_1078;
            }
          }
LABEL_1066:
          if (v550 >= v549)
          {
            BOOL v557 = v549 == v550 && v553 == v552;
            if (v557 && *(_DWORD *)(v548 + 176) == *((_DWORD *)v547 + 2)) {
              goto LABEL_1078;
            }
            goto LABEL_1057;
          }
LABEL_1076:
          if (v553 == v552 >> v551 && *(_DWORD *)(v548 + 176) == *((int *)v547 + 2) >> v551) {
            goto LABEL_1078;
          }
          goto LABEL_1057;
        }
        if (v549 >= v550)
        {
          if (v550 >= v549) {
            goto LABEL_1057;
          }
          int v552 = *((_DWORD *)v547 + 1);
          int v553 = *(_DWORD *)(v548 + 172);
          goto LABEL_1076;
        }
        int v553 = *(_DWORD *)(v548 + 172);
        int v552 = *((_DWORD *)v547 + 1);
        if (v552 != v553 >> (v550 - v549)) {
          goto LABEL_1066;
        }
        int v552 = v553 >> (v550 - v549);
        if (*((_DWORD *)v547 + 2) != *(int *)(v548 + 176) >> (v550 - v549)) {
          goto LABEL_1066;
        }
LABEL_1078:
        std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__emplace_unique_key_args<gdc::Registry *,gdc::Registry * const&>((uint64_t)&v639, (unint64_t)v537, *((void *)v521 + 5));
LABEL_1057:
        v555 = (char *)*((void *)v521 + 1);
        if (v555)
        {
          do
          {
            v556 = v555;
            v555 = *(char **)v555;
          }
          while (v555);
        }
        else
        {
          do
          {
            v556 = (char *)*((void *)v521 + 2);
            BOOL v146 = *(void *)v556 == (void)v521;
            v521 = v556;
          }
          while (!v146);
        }
        v521 = v556;
      }
      while (v556 != __pa);
    }
    if (!v581)
    {
      unint64_t v522 = v586;
      gdc::Registry::_add<std::unordered_set<gdc::Registry*>,std::unordered_set<gdc::Registry*>&>(*((int8x8_t **)this + 19), v586, (uint64_t)&v639);
      v558 = (void *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*((int8x8_t **)this + 19));
      uint64_t v559 = v558[4];
      if (v588 < (v558[5] - v559) >> 3
        && (uint64_t v560 = *(void *)(v559 + 8 * v588)) != 0
        && (unint64_t v561 = *(unsigned __int16 *)(v560 + 2 * (HIDWORD(v586) & 0x7F)),
            uint64_t v563 = v558[7],
            uint64_t v562 = v558[8],
            v561 < (v562 - v563) >> 3)
        && ((uint64_t v564 = v563 + 8 * v561, v564 != v562) ? (v565 = *(_DWORD *)(v564 + 4) == v579) : (v565 = 0), v565))
      {
        uint64_t v566 = v558[11];
        uint64_t v567 = v558[10] + 40 * v561;
      }
      else
      {
        uint64_t v566 = v558[11];
        uint64_t v567 = v566;
      }
      if (v567 == v566) {
        v523 = 0;
      }
      else {
        v523 = (long long *)v567;
      }
LABEL_1093:
      md::OverlaysLogic::updateFoundationAssociation((uint64_t)this, v522, (uint64_t)v523);
LABEL_1094:
      v568 = (void *)v640;
      if ((void)v640)
      {
        do
        {
          v569 = (void *)*v568;
          operator delete(v568);
          v568 = v569;
        }
        while (v569);
      }
      goto LABEL_1096;
    }
    unint64_t v522 = v586;
    v523 = v577;
    if (*((void *)&v640 + 1) != *(void *)&v581[3])
    {
LABEL_1079:
      if (v581 == (int8x8_t *)&v639)
      {
        v523 = &v639;
      }
      else
      {
        v581[4].i32[0] = v641;
        std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<gdc::Registry *,void *> *>>(v581, (void *)v640);
      }
      goto LABEL_1093;
    }
    v524 = (void *)v640;
    if ((void)v640)
    {
      int8x8_t v525 = v581[1];
      if (v525)
      {
        uint8x8_t v526 = (uint8x8_t)vcnt_s8(v525);
        v526.i16[0] = vaddlv_u8(v526);
        uint64_t v527 = *(void *)&v525 - 1;
        while (1)
        {
          unint64_t v528 = v524[2];
          unint64_t v529 = 0x9DDFEA08EB382D69 * (((8 * v528) + 8) ^ HIDWORD(v528));
          unint64_t v530 = 0x9DDFEA08EB382D69 * (HIDWORD(v528) ^ (v529 >> 47) ^ v529);
          unint64_t v531 = 0x9DDFEA08EB382D69 * (v530 ^ (v530 >> 47));
          if (v526.u32[0] > 1uLL)
          {
            unint64_t v532 = v531;
            if (v531 >= *(void *)&v525) {
              unint64_t v532 = v531 % *(void *)&v525;
            }
          }
          else
          {
            unint64_t v532 = v531 & v527;
          }
          v533 = *(void **)(*(void *)v581 + 8 * v532);
          if (!v533) {
            goto LABEL_1079;
          }
          v534 = (void *)*v533;
          if (!v534) {
            goto LABEL_1079;
          }
          if (v526.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v535 = v534[1];
              if (v531 == v535)
              {
                if (v534[2] == v528) {
                  goto LABEL_1022;
                }
              }
              else if ((v535 & v527) != v532)
              {
                goto LABEL_1079;
              }
              v534 = (void *)*v534;
              if (!v534) {
                goto LABEL_1079;
              }
            }
          }
          while (1)
          {
            unint64_t v536 = v534[1];
            if (v531 == v536) {
              break;
            }
            if (v536 >= *(void *)&v525) {
              v536 %= *(void *)&v525;
            }
            if (v536 != v532) {
              goto LABEL_1079;
            }
LABEL_1016:
            v534 = (void *)*v534;
            if (!v534) {
              goto LABEL_1079;
            }
          }
          if (v534[2] != v528) {
            goto LABEL_1016;
          }
LABEL_1022:
          v524 = (void *)*v524;
          if (!v524) {
            goto LABEL_1094;
          }
        }
      }
      goto LABEL_1079;
    }
LABEL_1096:
    v570 = (void *)v639;
    *(void *)&long long v639 = 0;
    if (v570) {
      operator delete(v570);
    }
    uint64_t v292 = v584 + 104;
    int8x16_t v291 = v585 + 1;
    if (v585 + 1 == v575) {
      return;
    }
  }
  while (1)
  {
    int8x8_t v431 = *(int8x8_t *)(v339 + 16);
    v432 = v602;
    if (v431)
    {
      unint64_t v433 = v602[2];
      unint64_t v434 = 0x9DDFEA08EB382D69 * (((8 * v433) + 8) ^ HIDWORD(v433));
      unint64_t v435 = 0x9DDFEA08EB382D69 * (HIDWORD(v433) ^ (v434 >> 47) ^ v434);
      unint64_t v436 = 0x9DDFEA08EB382D69 * (v435 ^ (v435 >> 47));
      uint8x8_t v437 = (uint8x8_t)vcnt_s8(v431);
      v437.i16[0] = vaddlv_u8(v437);
      if (v437.u32[0] > 1uLL)
      {
        unint64_t v438 = v436;
        if (v436 >= *(void *)&v431) {
          unint64_t v438 = v436 % *(void *)&v431;
        }
      }
      else
      {
        unint64_t v438 = v436 & (*(void *)&v431 - 1);
      }
      v439 = *(void **)(*(void *)(v339 + 8) + 8 * v438);
      if (v439)
      {
        v440 = (void *)*v439;
        if (*v439) {
          break;
        }
      }
    }
LABEL_865:
    v602 = (void *)*v432;
    if (!*v432) {
      goto LABEL_996;
    }
  }
  if (v437.u32[0] < 2uLL)
  {
    uint64_t v441 = *(void *)&v431 - 1;
    while (1)
    {
      uint64_t v443 = v440[1];
      if (v436 == v443)
      {
        if (v440[2] == v433) {
          goto LABEL_887;
        }
      }
      else if ((v443 & v441) != v438)
      {
        goto LABEL_865;
      }
      v440 = (void *)*v440;
      if (!v440) {
        goto LABEL_865;
      }
    }
  }
  while (1)
  {
    unint64_t v442 = v440[1];
    if (v436 == v442) {
      break;
    }
    if (v442 >= *(void *)&v431) {
      v442 %= *(void *)&v431;
    }
    if (v442 != v438) {
      goto LABEL_865;
    }
LABEL_876:
    v440 = (void *)*v440;
    if (!v440) {
      goto LABEL_865;
    }
  }
  if (v440[2] != v433) {
    goto LABEL_876;
  }
LABEL_887:
  unint64_t v444 = v440[6];
  v596 = (int8x8_t *)v602[2];
  if (v444)
  {
    if (v444 >> 61) {
      abort();
    }
    v445 = (char *)operator new(8 * v444);
    v446 = &v445[8 * v444];
    uint64_t v339 = v571;
    v447 = (void *)v440[5];
    if (!v447)
    {
LABEL_927:
      if (v445)
      {
        operator delete(v445);
        uint64_t v339 = v571;
      }
      goto LABEL_865;
    }
  }
  else
  {
    v445 = 0;
    v446 = 0;
    v447 = (void *)v440[5];
    if (!v447) {
      goto LABEL_927;
    }
  }
  v448 = v445;
  while (2)
  {
    while (1)
    {
      uint64_t v449 = v447[3];
      if (v448 >= v446) {
        break;
      }
      *(void *)v448 = *(void *)(v449 + 16);
      v448 += 8;
      v447 = (void *)*v447;
      if (!v447) {
        goto LABEL_925;
      }
    }
    int64_t v450 = v448 - v445;
    uint64_t v451 = (v448 - v445) >> 3;
    unint64_t v452 = v451 + 1;
    if ((unint64_t)(v451 + 1) >> 61) {
      abort();
    }
    if ((v446 - v445) >> 2 > v452) {
      unint64_t v452 = (v446 - v445) >> 2;
    }
    if ((unint64_t)(v446 - v445) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v453 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v453 = v452;
    }
    if (v453)
    {
      if (v453 >> 61) {
        goto LABEL_1105;
      }
      v454 = v448;
      v455 = (char *)operator new(8 * v453);
    }
    else
    {
      v454 = v448;
      v455 = 0;
    }
    v456 = &v455[8 * v451];
    *(void *)v456 = *(void *)(v449 + 16);
    v457 = v456 + 8;
    if (v454 == v445)
    {
      v446 = &v455[8 * v453];
      if (v445) {
        goto LABEL_910;
      }
    }
    else
    {
      unint64_t v458 = v454 - 8 - v445;
      if (v458 < 0x168)
      {
        v459 = v454;
        goto LABEL_908;
      }
      if (&v455[v450 - 8 - (v458 & 0xFFFFFFFFFFFFFFF8)] > &v455[v450 - 8])
      {
        v459 = v454;
        goto LABEL_908;
      }
      if (&v454[-(v458 & 0xFFFFFFFFFFFFFFF8) - 8] > v454 - 8)
      {
        v459 = v454;
        goto LABEL_908;
      }
      if ((unint64_t)(v454 - &v455[v450]) < 0x20)
      {
        v459 = v454;
        goto LABEL_908;
      }
      uint64_t v461 = (v458 >> 3) + 1;
      v459 = &v454[-8 * (v461 & 0x3FFFFFFFFFFFFFFCLL)];
      v462 = &v455[8 * v451 - 16];
      v463 = v454 - 16;
      uint64_t v464 = v461 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v465 = *(_OWORD *)v463;
        *((_OWORD *)v462 - 1) = *((_OWORD *)v463 - 1);
        *(_OWORD *)v462 = v465;
        v462 -= 32;
        v463 -= 32;
        v464 -= 4;
      }
      while (v464);
      v456 -= 8 * (v461 & 0x3FFFFFFFFFFFFFFCLL);
      if (v461 != (v461 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_908:
          uint64_t v460 = *((void *)v459 - 1);
          v459 -= 8;
          *((void *)v456 - 1) = v460;
          v456 -= 8;
        }
        while (v459 != v445);
      }
      v446 = &v455[8 * v453];
      if (v445) {
LABEL_910:
      }
        operator delete(v445);
    }
    v445 = v456;
    v448 = v457;
    v447 = (void *)*v447;
    if (v447) {
      continue;
    }
    break;
  }
LABEL_925:
  v466 = v445;
  v592 = v448;
  if (v445 == v448)
  {
LABEL_926:
    uint64_t v339 = v571;
    v432 = v602;
    goto LABEL_927;
  }
  while (2)
  {
    uint64_t v467 = *(void *)v466;
    v468 = (void *)gdc::Registry::storage<md::components::Visibility>(v596);
    uint64_t v608 = v467;
    v469 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v468 + 4, (uint64_t)&v608);
    if (v470)
    {
      v476 = (unsigned char *)v468[11];
      unint64_t v475 = v468[12];
      if ((unint64_t)v476 < v475)
      {
        unsigned char *v476 = 1;
        v477 = v476 + 1;
LABEL_966:
        v468[11] = v477;
        unint64_t v472 = v468[31];
        break;
      }
      v478 = (unsigned char *)v468[10];
      uint64_t v479 = v476 - v478;
      uint64_t v480 = v476 - v478 + 1;
      if (v480 < 0) {
        abort();
      }
      unint64_t v481 = v475 - (void)v478;
      if (2 * v481 > v480) {
        uint64_t v480 = 2 * v481;
      }
      if (v481 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v482 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v482 = v480;
      }
      if (v482) {
        v483 = (char *)operator new(v482);
      }
      else {
        v483 = 0;
      }
      v484 = &v483[v479];
      v485 = &v483[v479];
      char *v485 = 1;
      v477 = v485 + 1;
      if (v476 == v478)
      {
LABEL_964:
        v468[10] = v484;
        v468[11] = v477;
        v468[12] = &v483[v482];
        if (v478) {
          operator delete(v478);
        }
        goto LABEL_966;
      }
      if ((unint64_t)(v476 - v478) < 8) {
        goto LABEL_961;
      }
      unint64_t v486 = v476 - v478;
      if ((unint64_t)(v478 - v483) < 0x20) {
        goto LABEL_961;
      }
      if (v486 >= 0x20)
      {
        unint64_t v487 = v486 & 0xFFFFFFFFFFFFFFE0;
        v488 = &v483[v486 - 16];
        v489 = (long long *)(v476 - 16);
        unint64_t v490 = v486 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v491 = *v489;
          *((_OWORD *)v488 - 1) = *(v489 - 1);
          *(_OWORD *)v488 = v491;
          v488 -= 32;
          v489 -= 2;
          v490 -= 32;
        }
        while (v490);
        if (v486 == v487) {
          goto LABEL_963;
        }
        if ((v486 & 0x18) == 0)
        {
          v484 -= v487;
          v476 -= v487;
          goto LABEL_961;
        }
      }
      else
      {
        unint64_t v487 = 0;
      }
      unint64_t v492 = v487 - (v486 & 0xFFFFFFFFFFFFFFF8);
      v493 = &v476[-v487];
      v494 = &v483[&v476[-v487] - v478 - 8];
      v495 = (uint64_t *)(v493 - 8);
      do
      {
        uint64_t v496 = *v495--;
        *(void *)v494 = v496;
        v494 -= 8;
        v492 += 8;
      }
      while (v492);
      if (v486 == (v486 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_963;
      }
      v484 -= v486 & 0xFFFFFFFFFFFFFFF8;
      v476 -= v486 & 0xFFFFFFFFFFFFFFF8;
LABEL_961:
      v497 = v484 - 1;
      do
      {
        char v498 = *--v476;
        *v497-- = v498;
      }
      while (v476 != v478);
LABEL_963:
      v484 = v483;
      goto LABEL_964;
    }
    v471 = (unsigned char *)(v468[10] + (((uint64_t)v469 - v468[7]) >> 3));
    unsigned char *v471 = 1;
    unint64_t v472 = v468[31];
    if (v471 != (unsigned char *)v468[11])
    {
      for (i3 = (void *)v468[16]; i3; i3 = (void *)*i3)
      {
        *(void *)buf = &v608;
        *(void *)&buf[8] = 1;
        unint64_t v615 = v472;
        uint64_t v474 = i3[6];
        if (!v474) {
          goto LABEL_1106;
        }
        (*(void (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)v474 + 48))(v474, &v615, buf);
      }
LABEL_970:
      uint64_t v501 = *(void *)v466;
      v502 = (void *)gdc::Registry::storage<md::components::VisibilityChanged>(v596);
      uint64_t v608 = v501;
      v503 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v502 + 4, (uint64_t)&v608);
      if (v504)
      {
        v509 = (unsigned char *)v502[11];
        unint64_t v508 = v502[12];
        if ((unint64_t)v509 >= v508)
        {
          v511 = (char *)v502[10];
          uint64_t v512 = v509 - v511;
          uint64_t v513 = v509 - v511 + 1;
          if (v513 < 0) {
            abort();
          }
          unint64_t v514 = v508 - (void)v511;
          if (2 * v514 > v513) {
            uint64_t v513 = 2 * v514;
          }
          if (v514 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v515 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v515 = v513;
          }
          if (v515) {
            v516 = (char *)operator new(v515);
          }
          else {
            v516 = 0;
          }
          v517 = &v516[v515];
          uint64_t v510 = (uint64_t)&v516[v512 + 1];
          v518 = (char *)(v511 - v509);
          if (v511 == v509) {
            v518 = 0;
          }
          v502[10] = &v516[v512 + (void)v518];
          v502[11] = v510;
          v502[12] = v517;
          if (v511) {
            operator delete(v511);
          }
        }
        else
        {
          uint64_t v510 = (uint64_t)(v509 + 1);
        }
        v502[11] = v510;
        unint64_t v505 = v502[31];
      }
      else
      {
        unint64_t v505 = v502[31];
        if (v502[10] + (((uint64_t)v503 - v502[7]) >> 3) != v502[11])
        {
          for (i4 = (void *)v502[16]; i4; i4 = (void *)*i4)
          {
            *(void *)buf = &v608;
            *(void *)&buf[8] = 1;
            unint64_t v615 = v505;
            uint64_t v507 = i4[6];
            if (!v507) {
              goto LABEL_1106;
            }
            (*(void (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)v507 + 48))(v507, &v615, buf);
          }
LABEL_929:
          v466 += 8;
          if (v466 == v592) {
            goto LABEL_926;
          }
          continue;
        }
      }
      v519 = (void *)v502[22];
      if (v519)
      {
        while (1)
        {
          *(void *)buf = &v608;
          *(void *)&buf[8] = 1;
          unint64_t v615 = v505;
          uint64_t v520 = v519[6];
          if (!v520) {
            goto LABEL_1106;
          }
          (*(void (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)v520 + 48))(v520, &v615, buf);
          v519 = (void *)*v519;
          if (!v519) {
            goto LABEL_929;
          }
        }
      }
      goto LABEL_929;
    }
    break;
  }
  v499 = (void *)v468[22];
  if (!v499) {
    goto LABEL_970;
  }
  while (1)
  {
    *(void *)buf = &v608;
    *(void *)&buf[8] = 1;
    unint64_t v615 = v472;
    uint64_t v500 = v499[6];
    if (!v500) {
      break;
    }
    (*(void (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)v500 + 48))(v500, &v615, buf);
    v499 = (void *)*v499;
    if (!v499) {
      goto LABEL_970;
    }
  }
LABEL_1106:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A1C7A9D0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 192);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  unint64_t v5 = *(void **)(v1 - 208);
  *(void *)(v1 - 208) = 0;
  if (!v5) {
    _Unwind_Resume(a1);
  }
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::TileIsInView>(int8x8_t *a1)
{
  unint64_t v10 = 0x9956BFA43F1B46A6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9956BFA43F1B46A6;
    if (*(void *)&v1 <= 0x9956BFA43F1B46A6) {
      unint64_t v3 = 0x9956BFA43F1B46A6 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9956BFA43F1B46A6;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9956BFA43F1B46A6)
      {
        if (v5[2] == 0x9956BFA43F1B46A6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9956BFA43F1B46A6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9956BFA43F1B46A6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C7BC54(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_1,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_1>,void ()(gdc::Entity)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5702F0;
  a2[1] = v2;
  return result;
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>(int8x8_t *a1)
{
  unint64_t v10 = 0x835FA63A3E4A7413;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x835FA63A3E4A7413;
    if (*(void *)&v1 <= 0x835FA63A3E4A7413) {
      unint64_t v3 = 0x835FA63A3E4A7413 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x835FA63A3E4A7413;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x835FA63A3E4A7413)
      {
        if (v5[2] == 0x835FA63A3E4A7413) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x835FA63A3E4A7413) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x835FA63A3E4A7413) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C7BEEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>(int8x8_t *a1)
{
  uint64_t v10 = 0x7C0BC22858AB748ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7C0BC22858AB748ALL;
    if (*(void *)&v1 <= 0x7C0BC22858AB748AuLL) {
      uint64_t v3 = 0x7C0BC22858AB748AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7C0BC22858AB748ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7C0BC22858AB748ALL)
      {
        if (v5[2] == 0x7C0BC22858AB748ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7C0BC22858AB748ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7C0BC22858AB748ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C7C15C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>(int8x8_t *a1)
{
  unint64_t v10 = 0x9E43BC98CDFB9D64;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9E43BC98CDFB9D64;
    if (*(void *)&v1 <= 0x9E43BC98CDFB9D64) {
      unint64_t v3 = 0x9E43BC98CDFB9D64 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9E43BC98CDFB9D64;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9E43BC98CDFB9D64)
      {
        if (v5[2] == 0x9E43BC98CDFB9D64) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9E43BC98CDFB9D64) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9E43BC98CDFB9D64) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1C7C3CC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A1C7C454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t geo::MallocZoneAllocator::MallocZoneAllocator(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1EF55A110;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(a1 + 56), 0);
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
  }
  zone = malloc_create_zone(0, 0);
  *(void *)(a1 + 48) = zone;
  malloc_set_zone_name(zone, a2);
  *(void *)(a1 + 256) = os_log_create("com.apple.VectorKit", "Memory");
  return a1;
}

ggl::CommonMesh::Pos4Mesh *ggl::CommonMesh::Pos4Mesh::Pos4Mesh(ggl::CommonMesh::Pos4Mesh *this, const char *a2)
{
  {
    {
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
    }
    ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
    unk_1EB32B428 = 1;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(void *)this = &unk_1EF5606B0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1EF5606D0;
  *((void *)this + 3) = 0;
  *((void *)this + 7) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
  *((void *)this + 8) = 0;
  uint64_t v4 = (char *)this + 64;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  {
    operator new();
  }
  uint64_t v5 = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 15) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = v5;
  {
    operator new();
  }
  *((void *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 17) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *(void *)this = &unk_1EF561C20;
  *((void *)this + 2) = &unk_1EF561C40;
  uint64_t v6 = *((void *)this + 8);
  unint64_t v7 = *(void *)(*((void *)this + 7) + 8);
  uint64_t v8 = *((void *)this + 9);
  unint64_t v9 = (v8 - v6) >> 4;
  unint64_t v10 = v7 - v9;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      for (uint64_t i = v6 + 16 * v7; v8 != i; v8 -= 16)
      {
        int v12 = *(std::__shared_weak_count **)(v8 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v10);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *((void *)this + 9) = i;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v10);
  }
  *(void *)this = &unk_1EF55A2D0;
  *((void *)this + 2) = &unk_1EF55A2F0;
  if (a2) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = "/VertexData";
  }
  {
    operator new();
  }
  uint64_t v14 = ggl::Allocator::instance(void)::alloc;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(void *)uint64_t v15 = &unk_1EF5843B8;
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = v14;
  *(void *)(v15 + 32) = &unk_1EF55A1F0;
  *(void *)(v15 + 40) = 16;
  *(_DWORD *)(v15 + 48) = 6;
  long long v16 = 0uLL;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(void *)(v15 + 120) = 0;
  {
    long long v16 = 0uLL;
    if (v20) {
      operator new();
    }
  }
  *(void *)(v15 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v15 + 136) = 0;
  *(_OWORD *)(v15 + 200) = v16;
  *(_OWORD *)(v15 + 184) = v16;
  *(_OWORD *)(v15 + 168) = v16;
  *(void *)(v15 + 216) = 0;
  *(void *)(v15 + 224) = -1;
  *(_OWORD *)(v15 + 152) = xmmword_1A28FCCA0;
  *(_DWORD *)(v15 + 144) = 0;
  *(void *)(v15 + 240) = v13;
  *(void *)(v15 + 248) = &ggl::CommonMesh::bufferPos4Reflection;
  *(void *)(v15 + 32) = &unk_1EF55BFC8;
  *(void *)(v15 + 232) = &unk_1EF55BFE8;
  float64x2_t v17 = *(void **)v4;
  uint64_t v18 = *(std::__shared_weak_count **)(*(void *)v4 + 8);
  *float64x2_t v17 = v15 + 32;
  v17[1] = v15;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return this;
}

void md::TransitRenderLayer::TransitRenderLayer(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (a4 == 1) {
    unsigned __int8 v7 = 20;
  }
  else {
    unsigned __int8 v7 = 19;
  }
  if (a4 == 1) {
    __int16 v8 = 17;
  }
  else {
    __int16 v8 = 16;
  }
  size_t v23 = v6;
  [*(id *)(a2 + 104) format];
  if (v6)
  {
    [v6 standardCommandBufferSelector];
    __int16 v9 = *(_WORD *)(*(void *)(v27 + 8) + 2 * v7);
    [v6 standardCommandBufferSelector];
    uint64_t v10 = 188;
    if (a4 == 1) {
      uint64_t v10 = 190;
    }
    __int16 v11 = *(_WORD *)(*(void *)(v26 + 8) + v10);
    [v6 standardCommandBufferSelector];
    uint64_t v12 = *(void *)(v25 + 8);
  }
  else
  {
    uint64_t v12 = MEMORY[8];
    __int16 v9 = *(_WORD *)(MEMORY[8] + 2 * v7);
    uint64_t v13 = 188;
    if (a4 == 1) {
      uint64_t v13 = 190;
    }
    __int16 v11 = *(_WORD *)(MEMORY[8] + v13);
  }
  uint64_t v14 = 154;
  if (a4 == 1) {
    uint64_t v14 = 156;
  }
  __int16 v15 = *(_WORD *)(v12 + v14);
  long long v16 = operator new(6uLL);
  *long long v16 = v9;
  v16[1] = v11;
  v16[2] = v15;
  id v17 = v23;
  uint64_t v18 = operator new(2uLL);
  _WORD *v18 = v8;
  unint64_t v19 = v18 + 1;
  *(void *)&long long v20 = v18;
  *((void *)&v20 + 1) = v18 + 1;
  long long v24 = v20;
  *(void *)a1 = &unk_1EF530C60;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v21 = operator new(6uLL);
  *(void *)(a1 + 16) = v21 + 3;
  *(void *)(a1 + 24) = v21 + 3;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v16;
  v21[2] = v16[2];
  *(void *)(a1 + 8) = v21;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = v7;
  *(void *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_1A28FF720;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v24;
  *(void *)(a1 + 336) = v19;
  *(_DWORD *)(a1 + 344) = 1;
  *(void *)a1 = &unk_1EF54E858;
  *(void *)(a1 + 352) = 0;
  operator new();
}

void sub_1A1C7F2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,md::CTransitRenderResources **a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = *(std::__shared_weak_count **)(a9 + 8);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  *(void *)(a30 + 272) = a10;

  uint64_t v32 = *(std::__shared_weak_count **)(a30 + 256);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  BOOL v33 = *(std::__shared_weak_count **)(a30 + 240);
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  uint64_t v34 = *(void *)(a30 + 224);
  *(void *)(a30 + 224) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *(void *)(a30 + 216);
  *(void *)(a30 + 216) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(a30 + 208);
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v37 = *(void *)(a30 + 192);
  *(void *)(a30 + 192) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = *(void *)(a30 + 184);
  *(void *)(a30 + 184) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = *(void *)(a30 + 176);
  *(void *)(a30 + 176) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *(void *)(a30 + 168);
  *(void *)(a30 + 168) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = *(void *)(a30 + 160);
  *(void *)(a30 + 160) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *(void *)(a30 + 152);
  *(void *)(a30 + 152) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *(void *)(a30 + 144);
  *(void *)(a30 + 144) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *(void *)(a30 + 136);
  *(void *)(a30 + 136) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *(md::TransitNodeTextureAtlas **)(a30 + 128);
  *(void *)(a30 + 128) = 0;
  if (v45)
  {
    md::TransitNodeTextureAtlas::~TransitNodeTextureAtlas(v45);
    MEMORY[0x1A6239270]();
  }
  long long v46 = *(md::TransitNodeTextureAtlas **)(a30 + 120);
  *(void *)(a30 + 120) = 0;
  if (v46)
  {
    md::TransitNodeTextureAtlas::~TransitNodeTextureAtlas(v46);
    MEMORY[0x1A6239270]();
  }
  uint64_t v47 = *a27;
  *a27 = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  BOOL v48 = *(void **)(a30 + 88);
  while (v48)
  {
    uint64_t v54 = v48;
    BOOL v48 = (void *)*v48;
    uint64_t v55 = (std::__shared_weak_count *)v54[4];
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
    operator delete(v54);
  }
  unint64_t v49 = *a11;
  *a11 = 0;
  if (v49) {
    operator delete(v49);
  }
  uint64_t v50 = *(void **)(a30 + 48);
  while (v50)
  {
    uint64_t v56 = v50;
    uint64_t v50 = (void *)*v50;
    uint64_t v57 = (std::__shared_weak_count *)v56[4];
    if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
    operator delete(v56);
  }
  uint64_t v51 = *a12;
  *a12 = 0;
  if (v51) {
    operator delete(v51);
  }
  int8x16_t v52 = *(void **)(a30 + 16);
  if (v52)
  {
    if ((*v52)-- == 1)
    {
      operator delete(v52);
      *(void *)(a30 + 16) = 0;
    }
  }

  MEMORY[0x1A6239270](a30, 0x10A1C404E04FB85);
  md::TransitRenderLayer::{unnamed type#1}::~TransitRenderLayer((void **)(a23 + 424));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a23 + 384);
  std::unique_ptr<md::CTransitRenderResources>::~unique_ptr[abi:nn180100](a21);
  md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledVectorRenderLayer((void *)a23);

  _Unwind_Resume(a1);
}

ggl::CommonMesh::Pos2UVMesh *ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh(ggl::CommonMesh::Pos2UVMesh *this, const char *a2)
{
  {
    {
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
    }
    ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
    unk_1EB32B448 = 1;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(void *)this = &unk_1EF5606B0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1EF5606D0;
  *((void *)this + 3) = 0;
  *((void *)this + 7) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
  *((void *)this + 8) = 0;
  uint64_t v4 = (char *)this + 64;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  {
    operator new();
  }
  uint64_t v5 = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 15) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = v5;
  {
    operator new();
  }
  *((void *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 17) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *(void *)this = &unk_1EF561CA0;
  *((void *)this + 2) = &unk_1EF561CC0;
  uint64_t v6 = *((void *)this + 8);
  unint64_t v7 = *(void *)(*((void *)this + 7) + 8);
  uint64_t v8 = *((void *)this + 9);
  unint64_t v9 = (v8 - v6) >> 4;
  unint64_t v10 = v7 - v9;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      for (uint64_t i = v6 + 16 * v7; v8 != i; v8 -= 16)
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v8 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v10);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *((void *)this + 9) = i;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v10);
  }
  *(void *)this = &unk_1EF55A210;
  *((void *)this + 2) = &unk_1EF55A230;
  if (a2) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = "/VertexData";
  }
  {
    operator new();
  }
  uint64_t v14 = ggl::Allocator::instance(void)::alloc;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(void *)uint64_t v15 = &unk_1EF584428;
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = v14;
  *(void *)(v15 + 32) = &unk_1EF55A1F0;
  *(void *)(v15 + 40) = 16;
  *(_DWORD *)(v15 + 48) = 6;
  long long v16 = 0uLL;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(void *)(v15 + 120) = 0;
  {
    long long v16 = 0uLL;
    if (v20) {
      operator new();
    }
  }
  *(void *)(v15 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v15 + 136) = 0;
  *(_OWORD *)(v15 + 200) = v16;
  *(_OWORD *)(v15 + 184) = v16;
  *(_OWORD *)(v15 + 168) = v16;
  *(void *)(v15 + 216) = 0;
  *(void *)(v15 + 224) = -1;
  *(_OWORD *)(v15 + 152) = xmmword_1A28FCCA0;
  *(_DWORD *)(v15 + 144) = 0;
  *(void *)(v15 + 240) = v13;
  *(void *)(v15 + 248) = &ggl::CommonMesh::bufferPos2UVReflection;
  *(void *)(v15 + 32) = &unk_1EF55C008;
  *(void *)(v15 + 232) = &unk_1EF55C028;
  id v17 = *(void **)v4;
  uint64_t v18 = *(std::__shared_weak_count **)(*(void *)v4 + 8);
  *id v17 = v15 + 32;
  v17[1] = v15;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return this;
}

void std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 4)
  {
    if (a2)
    {
      uint64_t v11 = 16 * a2;
      uint64_t v12 = &v4[2 * a2];
      do
      {
        if (v4)
        {
          *uint64_t v4 = 0;
          v4[1] = 0;
        }
        v4 += 2;
        v11 -= 16;
      }
      while (v11);
      uint64_t v4 = v12;
    }
    *(void *)(a1 + 8) = v4;
  }
  else
  {
    uint64_t v6 = ((uint64_t)v4 - *(void *)a1) >> 4;
    unint64_t v7 = v6 + a2;
    if ((v6 + a2) >> 60) {
      abort();
    }
    uint64_t v8 = v5 - *(void *)a1;
    if (v8 >> 3 > v7) {
      unint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9) {
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 16 * v9, 8);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (void *)(v10 + 16 * v6);
    uint64_t v14 = 16 * a2;
    uint64_t v15 = &v13[2 * a2];
    long long v16 = v13;
    do
    {
      if (v16)
      {
        *long long v16 = 0;
        v16[1] = 0;
      }
      v16 += 2;
      v14 -= 16;
    }
    while (v14);
    uint64_t v17 = v10 + 16 * v9;
    uint64_t v18 = *(void **)a1;
    unint64_t v19 = *(void **)(a1 + 8);
    if (v19 == *(void **)a1)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v17;
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v19 - 1);
        v19 -= 2;
        *((_OWORD *)v13 - 1) = v20;
        v13 -= 2;
        *unint64_t v19 = 0;
        v19[1] = 0;
      }
      while (v19 != v18);
      unint64_t v19 = *(void **)a1;
      uint64_t v21 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v15;
      for (*(void *)(a1 + 16) = v17; v21 != v19; v21 -= 2)
      {
        unsigned int v22 = (std::__shared_weak_count *)*(v21 - 1);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    if (v19)
    {
      size_t v23 = *(void (**)(void))(**(void **)(a1 + 24) + 40);
      v23();
    }
  }
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

uint64_t ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void ggl::TransitNodeColorizedShader::typedReflection(ggl::TransitNodeColorizedShader *this)
{
  {
    if (v1)
    {
      ggl::TransitNodeColorizedShader::typedReflection(void)::ref = (uint64_t)"TransitNodeColorizedShader";
      ggl::transitNodeColorizedShaderVertexFunctionDescriptor(v1);
      qword_1EB322D58 = (uint64_t)&ggl::transitNodeColorizedShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<33ul>("TransitNodeColorizedShaderVertex");
      dword_1EB322D60 = (int)v2;
      ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(v2);
      qword_1EB322D68 = (uint64_t)&ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322D70 = ggl::crc32::compute<35ul>("TransitNodeColorizedShaderFragment");
      qword_1EB322D78 = (uint64_t)ggl::transitNodeColorizedShaderShaderConstants(void)::ref;
      unk_1EB322D80 = 1;
      qword_1EB322D88 = (uint64_t)ggl::transitNodeColorizedShaderShaderTextures(void)::ref;
      unk_1EB322D90 = 1;
      qword_1EB322D98 = (uint64_t)&ggl::transitNodeColorizedShaderShaderSamplers(void)::ref;
      unk_1EB322DA0 = 1;
    }
  }
}

void ggl::TransitNodeRGBShader::typedReflection(ggl::TransitNodeRGBShader *this)
{
  {
    if (v1)
    {
      ggl::TransitNodeRGBShader::typedReflection(void)::ref = (uint64_t)"TransitNodeRGBShader";
      ggl::transitNodeRGBShaderVertexFunctionDescriptor(v1);
      qword_1EB321CC0 = (uint64_t)&ggl::transitNodeRGBShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<27ul>("TransitNodeRGBShaderVertex");
      dword_1EB321CC8 = (int)v2;
      ggl::transitNodeRGBShaderFragmentFunctionDescriptor(v2);
      qword_1EB321CD0 = (uint64_t)&ggl::transitNodeRGBShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321CD8 = ggl::crc32::compute<29ul>("TransitNodeRGBShaderFragment");
      qword_1EB321CE0 = (uint64_t)ggl::transitNodeRGBShaderShaderConstants(void)::ref;
      unk_1EB321CE8 = 1;
      qword_1EB321CF0 = (uint64_t)ggl::transitNodeRGBShaderShaderTextures(void)::ref;
      unk_1EB321CF8 = 1;
      qword_1EB321D00 = (uint64_t)&ggl::transitNodeRGBShaderShaderSamplers(void)::ref;
      unk_1EB321D08 = 1;
    }
  }
}

void ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("TransitNodeColorizedShaderFragment");
    *(_DWORD *)algn_1EB32982C = 1;
    qword_1EB329830 = (uint64_t)"TransitNodeColorizedShader";
    unk_1EB329838 = 0;
    qword_1EB329840 = 0;
    unk_1EB329848 = &ggl::transitNodeColorizedShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329850 = 0;
    unk_1EB329858 = &ggl::transitNodeColorizedShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329860 = 0;
    unk_1EB329868 = &ggl::transitNodeColorizedShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329870 = 1;
    unk_1EB329878 = &ggl::transitNodeColorizedShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329888 = 0;
    unk_1EB329890 = 0;
    qword_1EB329880 = 1;
  }
}

void ggl::transitNodeColorizedShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::transitNodeColorizedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("TransitNodeColorizedShaderVertex");
    *(_DWORD *)algn_1EB328FA4 = 0;
    qword_1EB328FA8 = (uint64_t)"TransitNodeColorizedShader";
    unk_1EB328FB0 = ggl::transitNodeColorizedShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB328FB8 = 1;
    unk_1EB328FC0 = &ggl::transitNodeColorizedShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328FC8 = 1;
    unk_1EB328FD0 = &ggl::transitNodeColorizedShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328FD8 = 0;
    unk_1EB328FE0 = &ggl::transitNodeColorizedShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328FE8 = 0;
    unk_1EB328FF0 = &ggl::transitNodeColorizedShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329000 = 0;
    unk_1EB329008 = 0;
    qword_1EB328FF8 = 0;
  }
}

void ggl::transitNodeRGBShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::transitNodeRGBShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("TransitNodeRGBShaderFragment");
    *(_DWORD *)algn_1EB327724 = 1;
    qword_1EB327728 = (uint64_t)"TransitNodeRGBShader";
    unk_1EB327730 = 0;
    qword_1EB327738 = 0;
    unk_1EB327740 = &ggl::transitNodeRGBShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327748 = 0;
    unk_1EB327750 = &ggl::transitNodeRGBShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327758 = 0;
    unk_1EB327760 = &ggl::transitNodeRGBShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327768 = 1;
    unk_1EB327770 = &ggl::transitNodeRGBShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327780 = 0;
    unk_1EB327788 = 0;
    qword_1EB327778 = 1;
  }
}

void ggl::transitNodeRGBShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::transitNodeRGBShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("TransitNodeRGBShaderVertex");
    *(_DWORD *)algn_1EB32679C = 0;
    qword_1EB3267A0 = (uint64_t)"TransitNodeRGBShader";
    unk_1EB3267A8 = ggl::transitNodeRGBShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3267B0 = 1;
    unk_1EB3267B8 = &ggl::transitNodeRGBShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3267C0 = 1;
    unk_1EB3267C8 = &ggl::transitNodeRGBShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3267D0 = 0;
    unk_1EB3267D8 = &ggl::transitNodeRGBShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3267E0 = 0;
    unk_1EB3267E8 = &ggl::transitNodeRGBShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3267F8 = 0;
    unk_1EB326800 = 0;
    qword_1EB3267F0 = 0;
  }
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRenderableData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRenderableData>(md::ita::PrepareRenderableData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls10TileMatrixEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C80954(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls10TileMatrixEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C809B4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls10TileMatrixEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v11 = &v10[24 * v6];
    *(void *)uint64_t v11 = 0xBCC33905201D8160;
    *((void *)v11 + 1) = "md::ls::TileMatrix]";
    *((void *)v11 + 2) = 18;
    uint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      unint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0xBCC33905201D8160;
    *((void *)v3 + 1) = "md::ls::TileMatrix]";
    *((void *)v3 + 2) = 18;
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

uint64_t md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::clear(uint64_t result)
{
  uint64_t v1 = (uint64_t *)result;
  if (*(void *)(result + 72))
  {
    unint64_t v2 = *(void **)(result + 56);
    if (v2)
    {
      do
      {
        unint64_t v8 = (void *)*v2;
        unint64_t v9 = (std::__shared_weak_count *)v2[6];
        if (v9) {
          std::__shared_weak_count::__release_weak(v9);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v1[8] + 40))(v1[8], v2, 72);
        unint64_t v2 = v8;
      }
      while (v8);
    }
    v1[7] = 0;
    uint64_t v3 = v1[5];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(v1[4] + 8 * i) = 0;
    }
    v1[9] = 0;
  }
  if (v1[2])
  {
    uint64_t v5 = *v1;
    unint64_t v6 = (uint64_t *)v1[1];
    uint64_t v7 = *v6;
    *(void *)(v7 + 8) = *(void *)(*v1 + 8);
    **(void **)(v5 + 8) = v7;
    v1[2] = 0;
    if (v6 != v1)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v6[1];
        uint64_t v11 = (std::__shared_weak_count *)v6[6];
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v1[3] + 40))(v1[3], v6, 56);
        unint64_t v6 = v10;
      }
      while (v10 != v1);
    }
  }
  *(uint64_t *)((char *)v1 + 100) = 0;
  *(uint64_t *)((char *)v1 + 92) = 0;
  return result;
}

void md::FlyoverRenderResources::FlyoverRenderResources(md::FlyoverRenderResources *this, const md::SharedDeviceResources *a2, VKSharedResources *a3, const RenderTargetFormat *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a3;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 32;
  unint64_t v8 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  void *v8 = 0;
  v8[1] = 0;
  *(void *)this = v8;
  *((void *)this + 1) = v8;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 3) = &unk_1EF55A890;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 60) = 768;
  *((_DWORD *)this + 17) = 0;
  *((void *)this + 9) = 1;
  *(_WORD *)((char *)this + 81) = 768;
  *(void *)((char *)this + 91) = 0;
  *(void *)((char *)this + 83) = 0;
  *((unsigned char *)this + 99) = 0;
  *(void *)((char *)this + 156) = 0;
  *(void *)((char *)this + 148) = 0;
  *((_WORD *)this + 106) = 257;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((unsigned char *)this + 232) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 68) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 30) = &unk_1EF55A890;
  *(void *)((char *)this + 276) = 0xBF80000000000300;
  *((_DWORD *)this + 71) = -1063256064;
  *((void *)this + 36) = 1;
  *((_WORD *)this + 148) = 0;
  *((unsigned char *)this + 298) = 3;
  *(void *)((char *)this + 299) = 0;
  *(void *)((char *)this + 307) = 0;
  *((unsigned char *)this + 315) = 0;
  *(void *)((char *)this + 364) = 0;
  *(void *)((char *)this + 372) = 0;
  *((_WORD *)this + 214) = 257;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((unsigned char *)this + 448) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((_DWORD *)this + 122) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 57) = &unk_1EF55A890;
  *(void *)((char *)this + 492) = 768;
  *((_DWORD *)this + 125) = 0;
  *((void *)this + 63) = 0x20A0000202020100;
  *(_WORD *)((char *)this + 513) = 768;
  *((unsigned char *)this + 531) = 0;
  *(void *)((char *)this + 523) = 0;
  *(void *)((char *)this + 515) = 0;
  *(void *)((char *)this + 588) = 0;
  *(void *)((char *)this + 580) = 0;
  *((_WORD *)this + 322) = 257;
  *((unsigned char *)this + 664) = 0;
  *((void *)this + 82) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 86) = 0;
  *((void *)this + 85) = 0;
  *((_DWORD *)this + 176) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 84) = &unk_1EF55A890;
  *(void *)((char *)this + 708) = 768;
  *((_DWORD *)this + 179) = 0;
  *((void *)this + 90) = 0x2000A00000000400;
  *(_WORD *)((char *)this + 729) = 768;
  *(void *)((char *)this + 739) = 0;
  *(void *)((char *)this + 731) = 0;
  *((unsigned char *)this + 747) = 0;
  *(void *)((char *)this + 804) = 0;
  *(void *)((char *)this + 796) = 0;
  *((_WORD *)this + 430) = 257;
  *((void *)this + 109) = 0;
  *((void *)this + 108) = 0;
  *((unsigned char *)this + 880) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 112) = 0;
  *((_DWORD *)this + 230) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 111) = &unk_1EF55A890;
  *(void *)((char *)this + 924) = 256;
  *((_DWORD *)this + 233) = 0;
  *((void *)this + 117) = 0xFF0000000000;
  *(_WORD *)((char *)this + 945) = 768;
  *(void *)((char *)this + 955) = 0;
  *(void *)((char *)this + 947) = 0;
  *((unsigned char *)this + 963) = 0;
  *(void *)((char *)this + 1020) = 0;
  *(void *)((char *)this + 1012) = 0;
  *((_WORD *)this + 538) = 257;
  *((void *)this + 136) = 0;
  *((void *)this + 135) = 0;
  *((unsigned char *)this + 1096) = 0;
  *((void *)this + 158) = 0;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((unsigned char *)this + 80) = 1;
  *((unsigned char *)this + 944) = 1;
  *((unsigned char *)this + 728) = 1;
  *((unsigned char *)this + 512) = 1;
  if (v7)
  {
    [(VKSharedResources *)v7 standardCommandBufferSelector];
    int v16 = *(unsigned __int8 *)(*(void *)v17 + 56);
    if (*(void *)&v17[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v17[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**(void **)&v17[8] + 16))(*(void *)&v17[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v17[8]);
    }
  }
  else
  {
    int v16 = MEMORY[0x38];
  }
  uint64_t v9 = *(void *)(*((void *)a2 + 4) + 80);
  uint64_t v11 = *(void *)(v9 + 56);
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 64);
  uint64_t v21 = v11;
  unsigned int v22 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  v17[0] = 0;
  *(_OWORD *)&v17[4] = xmmword_1A28FC970;
  char v20 = 15;
  long long v12 = operator new(0x198uLL);
  v12[1] = 0;
  v12[2] = 0;
  *long long v12 = &unk_1EF5898D0;
  long long v13 = *(_OWORD *)&a4->colorFormatsCount;
  v23[0] = *(_OWORD *)a4->colorFormats;
  v23[1] = v13;
  *((void *)this + 138) = ggl::Flyover::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v12 + 3), &v21, (uint64_t)v17, v23, v16 != 0);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 139);
  *((void *)this + 139) = v12;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v22;
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator new();
}

void sub_1A1C85934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ggl::RenderDataHolder *a10, ggl::RenderDataHolder *a11, ggl::RenderDataHolder *a12, ggl::RenderDataHolder *a13, ggl::RenderDataHolder *a14)
{
  std::function<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords> * ()(void)>::~function(v15);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v17);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v16);
  std::function<void ()(ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords> *)>::~function(&STACK[0x308]);
  std::function<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords> * ()(void)>::~function(&STACK[0x328]);
  MEMORY[0x1A6239270](v16, 0x10A0C40D234DDC7);
  uint64_t v19 = *((void *)v14 + 158);
  *((void *)v14 + 158) = 0;
  if (v19) {
    MEMORY[0x1A6239270](v19, 0x1000C4049ECCB0CLL);
  }
  uint64_t v20 = *((void *)v14 + 157);
  *((void *)v14 + 157) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x230]);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x240]);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x248]);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x250]);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x258]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v14 + 1200);
  std::unique_ptr<ggl::FragmentedPool<ggl::FlyoverNight::FlyoverPolarPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x260]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v14 + 1176);
  std::unique_ptr<ggl::FragmentedPool<ggl::FlyoverNight::FlyoverPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x268]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v14 + 1152);
  std::unique_ptr<ggl::FragmentedPool<ggl::Flyover::FlyoverPolarPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x270]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v14 + 1128);
  std::unique_ptr<ggl::FragmentedPool<ggl::Flyover::FlyoverPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x278]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v14 + 1104);
  ggl::RenderDataHolder::~RenderDataHolder(a10);
  ggl::RenderDataHolder::~RenderDataHolder(a11);
  ggl::RenderDataHolder::~RenderDataHolder(a12);
  ggl::RenderDataHolder::~RenderDataHolder(a13);
  ggl::RenderDataHolder::~RenderDataHolder(a14);
  md::RenderItemPool::~RenderItemPool(v14);

  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon9TransformEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B2C8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon9TexcoordsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B280;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon8MaterialEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B238;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon4ClipEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B1F0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon11S2TransformEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF521500;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E9F8;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Material> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E9B0;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E968;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E920;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E8D8;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::FlyoverNight::FlyoverPolarPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E890;
}

uint64_t std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::FlyoverNight::FlyoverPolarPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E848;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::FlyoverNight::FlyoverPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E800;
}

uint64_t std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::FlyoverNight::FlyoverPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E7B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::Flyover::FlyoverPolarPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E770;
}

uint64_t std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Flyover::FlyoverPolarPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E728;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::Flyover::FlyoverPipelineSetup *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E6E0;
}

uint64_t std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Flyover::FlyoverPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E698;
  a2[1] = v2;
  return result;
}

uint64_t ggl::Flyover::FlyoverPipelineState::FlyoverPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    long long v84 = a4;
    uint64_t v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            unk_1E958CB20 = 1;
          }
          ggl::Flyover::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          *(void *)algn_1E958CA98 = &ggl::Flyover::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
          qword_1E958CAA0 = 0;
          {
            ggl::Flyover::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1E958CAD0 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1E958CAD8 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1E958CAE0 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1E958CAE8 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          }
          qword_1E958CAA8 = (uint64_t)&ggl::Flyover::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
          unk_1E958CAB0 = xmmword_1A28FC930;
        }
      }
      ggl::Flyover::FlyoverPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Flyover::FlyoverPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverShader::typedReflection(v85);
      qword_1E9589DF0 = (uint64_t)&ggl::FlyoverShader::typedReflection(void)::ref;
      {
        ggl::Flyover::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9589FF0 = 0;
        qword_1E9589FF8 = (uint64_t)"";
        dword_1E958A000 = 0;
        qword_1E958A008 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineAttributeBinding_0(void)::attr;
        unk_1E958A010 = 2;
      }
      qword_1E9589DF8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr;
      unk_1E9589E00 = 1;
      qword_1E9589E08 = 0;
      unk_1E9589E10 = 2;
      qword_1E9589E18 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineDeviceStructBinding(void)::ref;
      unk_1E9589E20 = 0;
      {
        ggl::Flyover::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9589F00 = 0;
        qword_1E9589F08 = (uint64_t)"sharedConstants";
        dword_1E9589F10 = 3;
        qword_1E9589F18 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1E9589F20 = xmmword_1A28FC940;
        qword_1E9589F30 = 1;
        unk_1E9589F38 = "transform";
        dword_1E9589F40 = 3;
        qword_1E9589F48 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantTransformBinding(void)::reflection;
        *(int64x2_t *)algn_1E9589F50 = vdupq_n_s64(2uLL);
        qword_1E9589F60 = 2;
        unk_1E9589F68 = "clip";
        dword_1E9589F70 = 3;
        qword_1E9589F78 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantClipBinding(void)::reflection;
        unk_1E9589F80 = xmmword_1A28FC950;
        qword_1E9589F90 = 3;
        unk_1E9589F98 = "material";
        dword_1E9589FA0 = 3;
        qword_1E9589FA8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantMaterialBinding(void)::reflection;
        *(_OWORD *)algn_1E9589FB0 = xmmword_1A28FC960;
        qword_1E9589FC0 = 4;
        unk_1E9589FC8 = "texcoords";
        dword_1E9589FD0 = 3;
        qword_1E9589FD8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1E9589FE0 = 2;
      }
      qword_1E9589E28 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E9589E30 = 5;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int32x4_t v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Flyover::FlyoverPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  *(void *)a1 = &unk_1EF5614F8;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::FlyoverNight::FlyoverPipelineState::FlyoverPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    long long v84 = a4;
    uint64_t v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            unk_1E958CB20 = 1;
          }
          ggl::FlyoverNight::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          *(void *)algn_1E958CA38 = &ggl::FlyoverNight::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
          qword_1E958CA40 = 0;
          {
            ggl::FlyoverNight::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1E958CA70 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1E958CA78 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1E958CA80 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1E958CA88 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          }
          qword_1E958CA48 = (uint64_t)&ggl::FlyoverNight::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
          unk_1E958CA50 = xmmword_1A28FD1E0;
        }
      }
      ggl::FlyoverNight::FlyoverPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverNight::FlyoverPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverNightShader::typedReflection(v85);
      qword_1E957F2E0 = (uint64_t)&ggl::FlyoverNightShader::typedReflection(void)::ref;
      {
        ggl::FlyoverNight::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9582110 = 0;
        qword_1E9582118 = (uint64_t)"";
        dword_1E9582120 = 0;
        qword_1E9582128 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineAttributeBinding_0(void)::attr;
        unk_1E9582130 = 2;
      }
      qword_1E957F2E8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr;
      unk_1E957F2F0 = 1;
      qword_1E957F2F8 = 0;
      unk_1E957F300 = 3;
      qword_1E957F308 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineDeviceStructBinding(void)::ref;
      unk_1E957F310 = 0;
      {
        ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9582020 = 0;
        qword_1E9582028 = (uint64_t)"sharedConstants";
        dword_1E9582030 = 3;
        qword_1E9582038 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1E9582040 = xmmword_1A28FC940;
        qword_1E9582050 = 1;
        unk_1E9582058 = "transform";
        dword_1E9582060 = 3;
        qword_1E9582068 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantTransformBinding(void)::reflection;
        *(int64x2_t *)algn_1E9582070 = vdupq_n_s64(2uLL);
        qword_1E9582080 = 2;
        unk_1E9582088 = "clip";
        dword_1E9582090 = 3;
        qword_1E9582098 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantClipBinding(void)::reflection;
        unk_1E95820A0 = xmmword_1A28FC950;
        qword_1E95820B0 = 3;
        unk_1E95820B8 = "material";
        dword_1E95820C0 = 3;
        qword_1E95820C8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantMaterialBinding(void)::reflection;
        *(_OWORD *)algn_1E95820D0 = xmmword_1A28FC960;
        qword_1E95820E0 = 4;
        unk_1E95820E8 = "texcoords";
        dword_1E95820F0 = 3;
        qword_1E95820F8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1E9582100 = 2;
      }
      qword_1E957F318 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref;
      unk_1E957F320 = 5;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int32x4_t v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FlyoverNight::FlyoverPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  *(void *)a1 = &unk_1EF55AC48;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void md::World::World(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  a2;
  a3;
  id v9 = a4;
  *a1 = *a5;
  uint64_t v10 = a5[1];
  a1[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  operator new();
}

void sub_1A1C960D0(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1EF559A18;

  _Unwind_Resume(a1);
}

gdc::LayerDataStore *gdc::LayerDataStore::LayerDataStore(gdc::LayerDataStore *this)
{
  *(void *)this = this;
  *((void *)this + 1) = this;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 1065353216;
  *((void *)this + 8) = this;
  *(_OWORD *)((char *)this + 72) = xmmword_1A28FCCA0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 34) = 0;
  size_t prime = std::__next_prime(0x64uLL);
  unint64_t v3 = prime;
  int8x8_t v4 = *(int8x8_t *)((char *)this + 32);
  if (prime > *(void *)&v4) {
    goto LABEL_12;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*((unint64_t *)this + 6) / *((float *)this + 14));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (v3 <= v5) {
      unint64_t v3 = v5;
    }
    if (v3 < *(void *)&v4) {
LABEL_12:
    }
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 24, v3);
  }
  return this;
}

void md::World::addMapLayerDataSource(void *a1, int a2, uint64_t *a3, uint64_t *a4, gdc::LayerDataStore **a5)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (unsigned __int16 *)a1[4];
  unint64_t v11 = a1[5];
  int8x16_t v12 = v10;
  if (v10 != (unsigned __int16 *)v11)
  {
    int8x16_t v12 = (unsigned __int16 *)a1[4];
    while (*v12 != a2)
    {
      v12 += 8;
      if (v12 == (unsigned __int16 *)v11) {
        goto LABEL_9;
      }
    }
  }
  if (v12 == (unsigned __int16 *)v11)
  {
LABEL_9:
    unint64_t v13 = a1[6];
    if (v11 >= v13)
    {
      uint64_t v15 = (uint64_t)(v11 - (void)v10) >> 4;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        abort();
      }
      uint64_t v17 = v13 - (void)v10;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18 >> 60) {
        goto LABEL_88;
      }
      int8x16_t v19 = (char *)operator new(16 * v18);
      int32x4_t v20 = &v19[16 * v15];
      int8x16_t v21 = &v19[16 * v18];
      *(_WORD *)int32x4_t v20 = a2;
      *((void *)v20 + 1) = v9;
      int32x4_t v14 = v20 + 16;
      if (v10 == (unsigned __int16 *)v11)
      {
        a1[4] = v20;
        a1[5] = v14;
        a1[6] = v21;
      }
      else
      {
        do
        {
          __int16 v22 = *(_WORD *)(v11 - 16);
          v11 -= 16;
          *((_WORD *)v20 - 8) = v22;
          v20 -= 16;
          uint64_t v23 = *(void *)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          *((void *)v20 + 1) = v23;
        }
        while ((unsigned __int16 *)v11 != v10);
        uint64_t v10 = (unsigned __int16 *)a1[4];
        int8x16_t v24 = (unsigned __int16 *)a1[5];
        a1[4] = v20;
        a1[5] = v14;
        a1[6] = v21;
        while (v24 != v10)
        {
          uint64_t v25 = *((void *)v24 - 1);
          *((void *)v24 - 1) = 0;
          if (v25) {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
          v24 -= 8;
        }
      }
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(_WORD *)unint64_t v11 = a2;
      *(void *)(v11 + 8) = v9;
      int32x4_t v14 = (char *)(v11 + 16);
    }
    a1[5] = v14;
  }
  else if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v26 = *a4;
  *a4 = 0;
  int8x16_t v27 = (unsigned __int16 *)a1[7];
  unint64_t v28 = a1[8];
  int8x16_t v29 = v27;
  if (v27 != (unsigned __int16 *)v28)
  {
    int8x16_t v29 = (unsigned __int16 *)a1[7];
    while (*v29 != a2)
    {
      v29 += 8;
      if (v29 == (unsigned __int16 *)v28) {
        goto LABEL_37;
      }
    }
  }
  if (v29 == (unsigned __int16 *)v28)
  {
LABEL_37:
    unint64_t v30 = a1[9];
    if (v28 >= v30)
    {
      uint64_t v32 = (uint64_t)(v28 - (void)v27) >> 4;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60) {
        abort();
      }
      uint64_t v34 = v30 - (void)v27;
      if (v34 >> 3 > v33) {
        unint64_t v33 = v34 >> 3;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35 >> 60) {
        goto LABEL_88;
      }
      int32x4_t v36 = (char *)operator new(16 * v35);
      int8x16_t v37 = &v36[16 * v32];
      int32x4_t v38 = &v36[16 * v35];
      *(_WORD *)int8x16_t v37 = a2;
      *((void *)v37 + 1) = v26;
      int8x16_t v31 = v37 + 16;
      if (v27 == (unsigned __int16 *)v28)
      {
        a1[7] = v37;
        a1[8] = v31;
        a1[9] = v38;
      }
      else
      {
        do
        {
          __int16 v39 = *(_WORD *)(v28 - 16);
          v28 -= 16;
          *((_WORD *)v37 - 8) = v39;
          v37 -= 16;
          uint64_t v40 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          *((void *)v37 + 1) = v40;
        }
        while ((unsigned __int16 *)v28 != v27);
        int8x16_t v27 = (unsigned __int16 *)a1[7];
        int8x16_t v41 = (unsigned __int16 *)a1[8];
        a1[7] = v37;
        a1[8] = v31;
        a1[9] = v38;
        while (v41 != v27)
        {
          uint64_t v42 = *((void *)v41 - 1);
          *((void *)v41 - 1) = 0;
          if (v42) {
            (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
          }
          v41 -= 8;
        }
      }
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *(_WORD *)unint64_t v28 = a2;
      *(void *)(v28 + 8) = v26;
      int8x16_t v31 = (char *)(v28 + 16);
    }
    a1[8] = v31;
  }
  else if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  int8x16_t v43 = *a5;
  *a5 = 0;
  int8x16_t v44 = (unsigned __int16 *)a1[10];
  unint64_t v45 = a1[11];
  int8x16_t v46 = v44;
  if (v44 != (unsigned __int16 *)v45)
  {
    int8x16_t v46 = (unsigned __int16 *)a1[10];
    while (*v46 != a2)
    {
      v46 += 8;
      if (v46 == (unsigned __int16 *)v45) {
        goto LABEL_67;
      }
    }
  }
  if (v46 == (unsigned __int16 *)v45)
  {
LABEL_67:
    unint64_t v47 = a1[12];
    if (v45 < v47)
    {
      *(_WORD *)unint64_t v45 = a2;
      *(void *)(v45 + 8) = v43;
      int8x16_t v48 = (char *)(v45 + 16);
LABEL_86:
      a1[11] = v48;
      return;
    }
    uint64_t v49 = (uint64_t)(v45 - (void)v44) >> 4;
    unint64_t v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 60) {
      abort();
    }
    uint64_t v51 = v47 - (void)v44;
    if (v51 >> 3 > v50) {
      unint64_t v50 = v51 >> 3;
    }
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v52 = v50;
    }
    if (!(v52 >> 60))
    {
      int8x16_t v53 = (char *)operator new(16 * v52);
      int8x16_t v54 = &v53[16 * v49];
      int16x8_t v55 = &v53[16 * v52];
      *(_WORD *)int8x16_t v54 = a2;
      *((void *)v54 + 1) = v43;
      int8x16_t v48 = v54 + 16;
      if (v44 == (unsigned __int16 *)v45)
      {
        a1[10] = v54;
        a1[11] = v48;
        a1[12] = v55;
      }
      else
      {
        do
        {
          __int16 v56 = *(_WORD *)(v45 - 16);
          v45 -= 16;
          *((_WORD *)v54 - 8) = v56;
          v54 -= 16;
          uint64_t v57 = *(void *)(v45 + 8);
          *(void *)(v45 + 8) = 0;
          *((void *)v54 + 1) = v57;
        }
        while ((unsigned __int16 *)v45 != v44);
        int8x16_t v44 = (unsigned __int16 *)a1[10];
        int16x8_t v58 = (unsigned __int16 *)a1[11];
        a1[10] = v54;
        a1[11] = v48;
        a1[12] = v55;
        while (v58 != v44)
        {
          int32x4_t v59 = (gdc::LayerDataStore *)*((void *)v58 - 1);
          *((void *)v58 - 1) = 0;
          if (v59)
          {
            gdc::LayerDataStore::~LayerDataStore(v59);
            MEMORY[0x1A6239270](v60, 0x10A0C40001197D2);
          }
          v58 -= 8;
        }
      }
      if (v44) {
        operator delete(v44);
      }
      goto LABEL_86;
    }
LABEL_88:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v43)
  {
    gdc::LayerDataStore::~LayerDataStore(v43);
    JUMPOUT(0x1A6239270);
  }
}

void sub_1A1C99DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1C99DD4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::DataKeyRequester::setResourceManifestInformer(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t md::IdentifiedGEOResourceFetcher::IdentifiedGEOResourceFetcher(uint64_t a1, void *a2, int a3, unsigned __int16 *a4, uint64_t a5, void *a6, float a7)
{
  id v13 = a2;
  gdc::ResourceFetcher::ResourceFetcher(a1, a4, a5, a7);
  *(void *)a1 = &unk_1EF54A318;
  uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"IdentifiedResourceFetcher<%p>", a1);
  *(void *)(a1 + 440) = &unk_1EF559F18;
  *(void *)(a1 + 448) = v14;
  id v15 = v13;
  *(void *)(a1 + 464) = &unk_1EF559AF8;
  *(void *)(a1 + 472) = v15;
  uint64_t v16 = a6[1];
  *(void *)(a1 + 488) = *a6;
  *(void *)(a1 + 496) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 508) = a3;
  *(void *)(a1 + 512) = &unk_1EF559658;
  *(void *)(a1 + 520) = 0;
  uint64_t v17 = [MEMORY[0x1E4F64AC8] modernLoader];
  [v17 openForClient:*(void *)(a1 + 448)];

  return a1;
}

void sub_1A1C99FBC(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  *(void *)(v1 + 512) = v6;
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 488);
  *(void *)(v1 + 464) = v4;

  *(void *)(v1 + 440) = v3;
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v1);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_1,std::allocator<md::RunLoopController *>,std::function>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "InitWorld", "", v1, 2u);
  }
}

void std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57A610;
}

uint64_t std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5787F8;
  a2[1] = v2;
  return result;
}

void md::FlyoverDsmDataRequester::setResourceManifestInformer()
{
}

void md::StandardLabeler::StandardLabeler(md::StandardLabeler *this, md::LabelManager *a2)
{
  *(void *)this = &unk_1EF5354B8;
  *((void *)this + 1) = &unk_1EF535698;
  *((void *)this + 2) = &unk_1EF5356E0;
  *((void *)this + 3) = a2;
  operator new();
}

void sub_1A1C9B180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  md::StandardLabeler::{unnamed type#1}::~StandardLabeler(v20);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v12 + 256);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v12 + 240);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v12 + 200);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v19);
  *(void *)(v12 + 160) = v18;

  std::vector<std::unique_ptr<md::GenericLabelCollidableItem>>::~vector[abi:nn180100](v17);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](v16);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](v13);
  std::unique_ptr<md::LabelPool>::~unique_ptr[abi:nn180100](v15);
  std::unique_ptr<md::ScreenLabelFeatureSupport>::~unique_ptr[abi:nn180100]((md::ScreenLabelFeatureSupport **)(v12 + 40));
  std::unique_ptr<md::LabelCustomFeatureSupport>::~unique_ptr[abi:nn180100](v14);
  _Unwind_Resume(a1);
}

void sub_1A1C9B210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  uint64_t v17 = *(void **)(v13 + 192);
  if (v17)
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      (*(void (**)(void))(**(void **)(v13 + 200) + 40))(*(void *)(v13 + 200));
      uint64_t v17 = v18;
    }
    while (v18);
  }
  uint64_t v19 = *v12;
  *uint64_t v12 = 0;
  if (v19) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 + 184) + 40))(*(void *)(v13 + 184), v19, 8 * *(void *)(v13 + 176));
  }
  uint64_t v20 = *v16;
  if (*v16)
  {
    uint64_t v21 = *(void *)(v13 + 144);
    uint64_t v22 = *v16;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v23->__on_zero_shared)(v23, v22);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      uint64_t v22 = *v16;
    }
    *(void *)(v13 + 144) = v20;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 + 160) + 40))(*(void *)(v13 + 160), v22, *(void *)(v13 + 152) - v22);
  }
  uint64_t v24 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 112) = v24;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 + 128) + 40))(*(void *)(v13 + 128), v24, *(void *)(v13 + 120) - v24);
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(v15 - 8, *(void *)(v13 + 80));
  uint64_t v25 = *(void *)(v13 + 40);
  if (v25)
  {
    uint64_t v26 = *(void *)(v13 + 48);
    uint64_t v27 = *(void *)(v13 + 40);
    if (v26 != v25)
    {
      do
      {
        unint64_t v28 = *(std::__shared_weak_count **)(v26 - 8);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v28->__on_zero_shared)(v28, v27);
          std::__shared_weak_count::__release_weak(v28);
        }
        v26 -= 16;
      }
      while (v26 != v25);
      uint64_t v27 = *(void *)(v13 + 40);
    }
    *(void *)(v13 + 48) = v25;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 + 64) + 40))(*(void *)(v13 + 64), v27, *(void *)(v13 + 56) - v27);
  }
  int8x16_t v29 = *(std::__shared_weak_count **)(v13 + 32);
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  MEMORY[0x1A6239270](v13, 0x10A1C4094B04A8BLL);
  _Unwind_Resume(a1);
}

uint64_t md::LabelsState::addObserver(uint64_t this, md::LabelsStateObserver *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void **)(this + 8);
  unint64_t v5 = *(void *)(this + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      *uint64_t v4 = a2;
    }
    uint64_t v6 = v4 + 1;
    goto LABEL_27;
  }
  uint64_t v7 = ((uint64_t)v4 - *(void *)this) >> 3;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61) {
    abort();
  }
  uint64_t v9 = v5 - *(void *)this;
  if (v9 >> 2 > v8) {
    unint64_t v8 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    this = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(this + 24) + 16))(*(void *)(this + 24), 8 * v8, 8);
    unint64_t v11 = (void *)(this + 8 * v7);
    unint64_t v8 = this + v10;
    if (this) {
      *unint64_t v11 = a2;
    }
  }
  else
  {
    unint64_t v11 = (void *)(8 * v7);
  }
  uint64_t v6 = v11 + 1;
  uint64_t v13 = *(void *)v3;
  uint64_t v12 = *(void *)(v3 + 8);
  if (v12 != *(void *)v3)
  {
    unint64_t v14 = v12 - *(void *)v3 - 8;
    if (v14 < 0x38)
    {
      uint64_t v16 = *(void *)(v3 + 8);
    }
    else if ((unint64_t)(v12 - (void)v11) < 0x20)
    {
      uint64_t v16 = *(void *)(v3 + 8);
    }
    else
    {
      uint64_t v15 = (v14 >> 3) + 1;
      uint64_t v16 = v12 - 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v17 = v11 - 2;
      uint64_t v18 = (long long *)(v12 - 16);
      uint64_t v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *uint64_t v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v11 -= v15 & 0x3FFFFFFFFFFFFFFCLL;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
    }
    do
    {
      uint64_t v21 = *(void *)(v16 - 8);
      v16 -= 8;
      *--unint64_t v11 = v21;
    }
    while (v16 != v13);
LABEL_24:
    uint64_t v12 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v11;
  *(void *)(v3 + 8) = v6;
  uint64_t v22 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v8;
  if (v12) {
    this = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v22 - v12);
  }
LABEL_27:
  *(void *)(v3 + 8) = v6;
  return this;
}

void sub_1A1C9BA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __assign_helper_atomic_property__7(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      unint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      unint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (v7 != a1)
  {
    uint64_t v4 = v8;
    unint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        unint64_t v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        unint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        unint64_t v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      unint64_t v8 = v7;
    }
    else
    {
      unint64_t v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

uint64_t __assign_helper_atomic_property_(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      unint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      unint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (v7 != a1)
  {
    uint64_t v4 = v8;
    unint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        unint64_t v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        unint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        unint64_t v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      unint64_t v8 = v7;
    }
    else
    {
      unint64_t v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::__unordered_map_hasher<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::hash<md::RenderBatch *>,std::equal_to<md::RenderBatch *>,true>,std::__unordered_map_equal<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::equal_to<md::RenderBatch *>,std::hash<md::RenderBatch *>,true>,std::allocator<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>>>::__emplace_unique_key_args<md::RenderBatch *,std::piecewise_construct_t const&,std::tuple<md::RenderBatch * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v12 = operator new(0x28uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_34;
    }
    if (prime < v9)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v9) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *uint64_t v12 = *v25;
LABEL_58:
    *uint64_t v25 = v12;
    goto LABEL_59;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v26 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1A1C9C420(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(void)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579CC8;
  a2[1] = v2;
  return result;
}

void ___ZN3gss10StyleSheetINS_15ScenePropertyIDEE9loadQueueEb_block_invoke_2()
{
  unint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  unint64_t v0 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INTERACTIVE, -3);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  uint64_t v2 = (void *)gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32UniqueStyleEmissiveDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C9C810(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32UniqueStyleEmissiveDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C9C870(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32UniqueStyleEmissiveDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint8x8_t v10 = 0;
    }
    unint64_t v11 = &v10[24 * v6];
    *(void *)unint64_t v11 = 0xEBDB618C34E97A19;
    *((void *)v11 + 1) = "md::ls::UniqueStyleEmissiveDataKeyHandle]";
    *((void *)v11 + 2) = 40;
    uint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      unint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0xEBDB618C34E97A19;
    *((void *)v3 + 1) = "md::ls::UniqueStyleEmissiveDataKeyHandle]";
    *((void *)v3 + 2) = 40;
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C9CA30(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1C9CA90(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint8x8_t v10 = 0;
    }
    unint64_t v11 = &v10[24 * v6];
    *(void *)unint64_t v11 = 0x9792F5BB2E6066F1;
    *((void *)v11 + 1) = "md::ls::FrameGraphBuilder]";
    *((void *)v11 + 2) = 25;
    uint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      unint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x9792F5BB2E6066F1;
    *((void *)v3 + 1) = "md::ls::FrameGraphBuilder]";
    *((void *)v3 + 2) = 25;
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

uint64_t md::LabelsLogic::setNeedsLayoutCallback(uint64_t a1, void *a2)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      float v15 = v14;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v14);
    }
    else
    {
      float v15 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    float v15 = 0;
  }
  uint64_t v16 = a1;
  unint64_t v18 = 0;
  uint64_t v4 = operator new(0x30uLL);
  unint64_t v5 = v4;
  *uint64_t v4 = &unk_1EF56DA28;
  unint64_t v6 = v4 + 1;
  if (!v15)
  {
    unint64_t v7 = v4 + 4;
    goto LABEL_10;
  }
  if (v15 != v14)
  {
    unint64_t v7 = &v15;
    v4[4] = v15;
LABEL_10:
    *unint64_t v7 = 0;
    v4[5] = a1;
    unint64_t v18 = v4;
LABEL_11:
    unint64_t v8 = (void *)(*(void *)(*(void *)(a1 + 152) + 88) + 32);
    goto LABEL_12;
  }
  v4[4] = v6;
  (*(void (**)(void *))(v14[0] + 24))(v14);
  long long v12 = v15;
  v5[5] = v16;
  unint64_t v18 = v5;
  if (v12 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else
  {
    if (!v12) {
      goto LABEL_11;
    }
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  unint64_t v5 = v18;
  unint64_t v8 = (void *)(*(void *)(*(void *)(a1 + 152) + 88) + 32);
  if (!v18)
  {
    uint64_t v9 = 0;
    goto LABEL_13;
  }
  if (v18 != v17)
  {
LABEL_12:
    uint64_t v9 = (*(uint64_t (**)(void *, void *))(*v5 + 16))(v5, v6);
LABEL_13:
    long long v20 = (void *)v9;
    goto LABEL_14;
  }
  long long v20 = v19;
  (*(void (**)(void *, void *))(v17[0] + 24))(v17, v19);
LABEL_14:
  if (v8 != v19)
  {
    uint8x8_t v10 = v20;
    unint64_t v11 = (void *)v8[3];
    if (v20 == v19)
    {
      if (v11 == v8)
      {
        (*(void (**)(void *, void *))(v19[0] + 24))(v19, v21);
        (*(void (**)(void *))(*v20 + 32))(v20);
        long long v20 = 0;
        (*(void (**)(void, void *))(*(void *)v8[3] + 24))(v8[3], v19);
        (*(void (**)(void))(*(void *)v8[3] + 32))(v8[3]);
        void v8[3] = 0;
        long long v20 = v19;
        (*(void (**)(void *, void *))(v21[0] + 24))(v21, v8);
        (*(void (**)(void *))(v21[0] + 32))(v21);
      }
      else
      {
        (*(void (**)(void *, void *))(v19[0] + 24))(v19, v8);
        (*(void (**)(void *))(*v20 + 32))(v20);
        long long v20 = (void *)v8[3];
      }
      void v8[3] = v8;
    }
    else if (v11 == v8)
    {
      (*(void (**)(void *, void *))(*v8 + 24))(v8, v19);
      (*(void (**)(void))(*(void *)v8[3] + 32))(v8[3]);
      void v8[3] = v20;
      long long v20 = v19;
    }
    else
    {
      long long v20 = (void *)v8[3];
      void v8[3] = v10;
    }
  }
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
  uint64_t result = (uint64_t)v18;
  if (v18 == v17) {
    return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
  }
  if (v18) {
    return (*(uint64_t (**)(void))(*v18 + 40))();
  }
  return result;
}

void sub_1A1C9D168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0::~$_0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A1C9D17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0::~$_0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_4>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF520F18;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 8;
  unint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

void *std::__function::__func<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0,std::allocator<md::LabelsLogic::setNeedsLayoutCallback(std::function<void ()(md::LabelManager const*,md::NeedsLayoutReason)>)::$_0>,void ()(md::LabelManager const*,md::NeedsLayoutReason)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1EF56DA28;
  unint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      goto LABEL_6;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(void *)(a1 + 40);
  return v2;
}

void sub_1A1C9D310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LabelsLogic::setDidLayoutCallback(uint64_t a1, void *a2)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      float v15 = v14;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v14);
    }
    else
    {
      float v15 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    float v15 = 0;
  }
  uint64_t v16 = a1;
  unint64_t v18 = 0;
  uint64_t v4 = operator new(0x30uLL);
  unint64_t v5 = v4;
  *uint64_t v4 = &unk_1EF56D9E0;
  unint64_t v6 = v4 + 1;
  if (!v15)
  {
    unint64_t v7 = v4 + 4;
    goto LABEL_10;
  }
  if (v15 != v14)
  {
    unint64_t v7 = &v15;
    v4[4] = v15;
LABEL_10:
    *unint64_t v7 = 0;
    v4[5] = a1;
    unint64_t v18 = v4;
LABEL_11:
    unint64_t v8 = (void *)(*(void *)(*(void *)(a1 + 152) + 88) + 64);
    goto LABEL_12;
  }
  v4[4] = v6;
  (*(void (**)(void *))(v14[0] + 24))(v14);
  long long v12 = v15;
  v5[5] = v16;
  unint64_t v18 = v5;
  if (v12 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else
  {
    if (!v12) {
      goto LABEL_11;
    }
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  unint64_t v5 = v18;
  unint64_t v8 = (void *)(*(void *)(*(void *)(a1 + 152) + 88) + 64);
  if (!v18)
  {
    uint64_t v9 = 0;
    goto LABEL_13;
  }
  if (v18 != v17)
  {
LABEL_12:
    uint64_t v9 = (*(uint64_t (**)(void *, void *))(*v5 + 16))(v5, v6);
LABEL_13:
    long long v20 = (void *)v9;
    goto LABEL_14;
  }
  long long v20 = v19;
  (*(void (**)(void *, void *))(v17[0] + 24))(v17, v19);
LABEL_14:
  if (v8 != v19)
  {
    uint8x8_t v10 = v20;
    unint64_t v11 = (void *)v8[3];
    if (v20 == v19)
    {
      if (v11 == v8)
      {
        (*(void (**)(void *, void *))(v19[0] + 24))(v19, v21);
        (*(void (**)(void *))(*v20 + 32))(v20);
        long long v20 = 0;
        (*(void (**)(void, void *))(*(void *)v8[3] + 24))(v8[3], v19);
        (*(void (**)(void))(*(void *)v8[3] + 32))(v8[3]);
        void v8[3] = 0;
        long long v20 = v19;
        (*(void (**)(void *, void *))(v21[0] + 24))(v21, v8);
        (*(void (**)(void *))(v21[0] + 32))(v21);
      }
      else
      {
        (*(void (**)(void *, void *))(v19[0] + 24))(v19, v8);
        (*(void (**)(void *))(*v20 + 32))(v20);
        long long v20 = (void *)v8[3];
      }
      void v8[3] = v8;
    }
    else if (v11 == v8)
    {
      (*(void (**)(void *, void *))(*v8 + 24))(v8, v19);
      (*(void (**)(void))(*(void *)v8[3] + 32))(v8[3]);
      void v8[3] = v20;
      long long v20 = v19;
    }
    else
    {
      long long v20 = (void *)v8[3];
      void v8[3] = v10;
    }
  }
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
  uint64_t result = (uint64_t)v18;
  if (v18 == v17) {
    return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
  }
  if (v18) {
    return (*(uint64_t (**)(void))(*v18 + 40))();
  }
  return result;
}

void sub_1A1C9D880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0::~$_0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A1C9D894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0::~$_0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8>,void ()(md::LabelManager *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5799B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 8;
  unint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

void *std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1EF56D9E0;
  unint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      goto LABEL_6;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(void *)(a1 + 40);
  return v2;
}

void sub_1A1C9DA28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ggl::OcclusionLineShader::typedReflection(ggl::OcclusionLineShader *this)
{
  {
    if (v1)
    {
      ggl::OcclusionLineShader::typedReflection(void)::ref = (uint64_t)"OcclusionLineShader";
      ggl::occlusionLineShaderVertexFunctionDescriptor(v1);
      qword_1EB321878 = (uint64_t)&ggl::occlusionLineShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("OcclusionLineShaderVertex");
      dword_1EB321880 = (int)v2;
      ggl::occlusionLineShaderFragmentFunctionDescriptor(v2);
      qword_1EB321888 = (uint64_t)&ggl::occlusionLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321890 = ggl::crc32::compute<28ul>("OcclusionLineShaderFragment");
      qword_1EB321898 = (uint64_t)ggl::occlusionLineShaderShaderConstants(void)::ref;
      unk_1EB3218A0 = 1;
      qword_1EB3218A8 = (uint64_t)&ggl::occlusionLineShaderShaderTextures(void)::ref;
      unk_1EB3218B0 = 0;
      qword_1EB3218B8 = (uint64_t)&ggl::occlusionLineShaderShaderSamplers(void)::ref;
      unk_1EB3218C0 = 0;
    }
  }
}

void ggl::occlusionLineShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::occlusionLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("OcclusionLineShaderFragment");
    *(_DWORD *)algn_1EB326C9C = 1;
    qword_1EB326CA0 = (uint64_t)"OcclusionLineShader";
    unk_1EB326CA8 = 0;
    qword_1EB326CB0 = 0;
    unk_1EB326CB8 = &ggl::occlusionLineShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326CC0 = 1;
    unk_1EB326CC8 = &ggl::occlusionLineShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326CD0 = 0;
    unk_1EB326CD8 = &ggl::occlusionLineShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326CE0 = 0;
    unk_1EB326CE8 = &ggl::occlusionLineShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326CF8 = 0;
    unk_1EB326D00 = 0;
    qword_1EB326CF0 = 0;
  }
}

void ggl::occlusionLineShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::occlusionLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("OcclusionLineShaderVertex");
    *(_DWORD *)algn_1EB325DA4 = 0;
    qword_1EB325DA8 = (uint64_t)"OcclusionLineShader";
    unk_1EB325DB0 = ggl::occlusionLineShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325DB8 = 1;
    unk_1EB325DC0 = &ggl::occlusionLineShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325DC8 = 1;
    unk_1EB325DD0 = &ggl::occlusionLineShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325DD8 = 0;
    unk_1EB325DE0 = &ggl::occlusionLineShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325DE8 = 0;
    unk_1EB325DF0 = &ggl::occlusionLineShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325E00 = 0;
    unk_1EB325E08 = 0;
    qword_1EB325DF8 = 0;
  }
}

void ggl::ImageCopyShader::typedReflection(ggl::ImageCopyShader *this)
{
  {
    if (v1)
    {
      ggl::ImageCopyShader::typedReflection(void)::ref = (uint64_t)"ImageCopyShader";
      ggl::imageCopyShaderVertexFunctionDescriptor(v1);
      qword_1EB320D70 = (uint64_t)&ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
      dword_1EB320D78 = (int)v2;
      ggl::imageCopyShaderFragmentFunctionDescriptor(v2);
      qword_1EB320D80 = (uint64_t)&ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320D88 = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
      qword_1EB320D90 = (uint64_t)&ggl::imageCopyShaderShaderConstants(void)::ref;
      unk_1EB320D98 = 0;
      qword_1EB320DA0 = (uint64_t)ggl::imageCopyShaderShaderTextures(void)::ref;
      unk_1EB320DA8 = 1;
      qword_1EB320DB0 = (uint64_t)&ggl::imageCopyShaderShaderSamplers(void)::ref;
      unk_1EB320DB8 = 1;
    }
  }
}

void ggl::imageCopyShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
    *(_DWORD *)algn_1EB3252E4 = 1;
    qword_1EB3252E8 = (uint64_t)"ImageCopyShader";
    unk_1EB3252F0 = 0;
    qword_1EB3252F8 = 0;
    unk_1EB325300 = &ggl::imageCopyShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325308 = 0;
    unk_1EB325310 = &ggl::imageCopyShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB325318 = 0;
    unk_1EB325320 = &ggl::imageCopyShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325328 = 1;
    unk_1EB325330 = &ggl::imageCopyShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325340 = 0;
    unk_1EB325348 = 0;
    qword_1EB325338 = 1;
  }
}

void ggl::imageCopyShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
    *(_DWORD *)algn_1EB324D8C = 0;
    qword_1EB324D90 = (uint64_t)"ImageCopyShader";
    unk_1EB324D98 = ggl::imageCopyShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324DA0 = 1;
    unk_1EB324DA8 = &ggl::imageCopyShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324DB0 = 0;
    unk_1EB324DB8 = &ggl::imageCopyShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324DC0 = 0;
    unk_1EB324DC8 = &ggl::imageCopyShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324DD0 = 0;
    unk_1EB324DD8 = &ggl::imageCopyShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324DE8 = 0;
    unk_1EB324DF0 = 0;
    qword_1EB324DE0 = 0;
  }
}

void ggl::RouteLineAlphaResetShader::typedReflection(ggl::RouteLineAlphaResetShader *this)
{
  {
    if (v1)
    {
      ggl::RouteLineAlphaResetShader::typedReflection(void)::ref = (uint64_t)"RouteLineAlphaResetShader";
      ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(v1);
      qword_1EB322AB0 = (uint64_t)&ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("RouteLineAlphaResetShaderVertex");
      dword_1EB322AB8 = (int)v2;
      ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(v2);
      qword_1EB322AC0 = (uint64_t)&ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322AC8 = ggl::crc32::compute<34ul>("RouteLineAlphaResetShaderFragment");
      qword_1EB322AD0 = (uint64_t)ggl::routeLineAlphaResetShaderShaderConstants(void)::ref;
      unk_1EB322AD8 = 4;
      qword_1EB322AE0 = (uint64_t)&ggl::routeLineAlphaResetShaderShaderTextures(void)::ref;
      unk_1EB322AE8 = 0;
      qword_1EB322AF0 = (uint64_t)&ggl::routeLineAlphaResetShaderShaderSamplers(void)::ref;
      unk_1EB322AF8 = 0;
    }
  }
}

void ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("RouteLineAlphaResetShaderFragment");
    *(_DWORD *)algn_1EB329424 = 1;
    qword_1EB329428 = (uint64_t)"RouteLineAlphaResetShader";
    unk_1EB329430 = 0;
    qword_1EB329438 = 0;
    unk_1EB329440 = &ggl::routeLineAlphaResetShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329448 = 1;
    unk_1EB329450 = &ggl::routeLineAlphaResetShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329458 = 0;
    unk_1EB329460 = &ggl::routeLineAlphaResetShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329468 = 0;
    unk_1EB329470 = &ggl::routeLineAlphaResetShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329480 = 0;
    unk_1EB329488 = 0;
    qword_1EB329478 = 0;
  }
}

void ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("RouteLineAlphaResetShaderVertex");
    *(_DWORD *)algn_1EB3288CC = 0;
    qword_1EB3288D0 = (uint64_t)"RouteLineAlphaResetShader";
    unk_1EB3288D8 = ggl::routeLineAlphaResetShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3288E0 = 1;
    unk_1EB3288E8 = &ggl::routeLineAlphaResetShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3288F0 = 3;
    unk_1EB3288F8 = &ggl::routeLineAlphaResetShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328900 = 0;
    unk_1EB328908 = &ggl::routeLineAlphaResetShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328910 = 0;
    unk_1EB328918 = &ggl::routeLineAlphaResetShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328928 = 0;
    unk_1EB328930 = 0;
    qword_1EB328920 = 0;
  }
}

void ggl::BuildingFacadeDepthShader::typedReflection(ggl::BuildingFacadeDepthShader *this)
{
  {
    if (v1)
    {
      ggl::BuildingFacadeDepthShader::typedReflection(void)::ref = (uint64_t)"BuildingFacadeDepthShader";
      ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(v1);
      qword_1EB3228F0 = (uint64_t)&ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("BuildingFacadeDepthShaderVertex");
      dword_1EB3228F8 = (int)v2;
      ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(v2);
      qword_1EB322900 = (uint64_t)&ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322908 = ggl::crc32::compute<34ul>("BuildingFacadeDepthShaderFragment");
      qword_1EB322910 = (uint64_t)ggl::buildingFacadeDepthShaderShaderConstants(void)::ref;
      unk_1EB322918 = 2;
      qword_1EB322920 = (uint64_t)&ggl::buildingFacadeDepthShaderShaderTextures(void)::ref;
      unk_1EB322928 = 0;
      qword_1EB322930 = (uint64_t)&ggl::buildingFacadeDepthShaderShaderSamplers(void)::ref;
      unk_1EB322938 = 0;
    }
  }
}

void ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("BuildingFacadeDepthShaderFragment");
    *(_DWORD *)algn_1EB329014 = 1;
    qword_1EB329018 = (uint64_t)"BuildingFacadeDepthShader";
    unk_1EB329020 = 0;
    qword_1EB329028 = 0;
    unk_1EB329030 = &ggl::buildingFacadeDepthShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329038 = 0;
    unk_1EB329040 = &ggl::buildingFacadeDepthShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329048 = 0;
    unk_1EB329050 = &ggl::buildingFacadeDepthShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329058 = 0;
    unk_1EB329060 = &ggl::buildingFacadeDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329070 = 0;
    unk_1EB329078 = 0;
    qword_1EB329068 = 0;
  }
}

void ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("BuildingFacadeDepthShaderVertex");
    *(_DWORD *)algn_1EB32CD1C = 0;
    qword_1EB32CD20 = (uint64_t)"BuildingFacadeDepthShader";
    unk_1EB32CD28 = ggl::buildingFacadeDepthShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32CD30 = 1;
    unk_1EB32CD38 = &ggl::buildingFacadeDepthShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32CD40 = 2;
    unk_1EB32CD48 = &ggl::buildingFacadeDepthShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32CD50 = 0;
    unk_1EB32CD58 = &ggl::buildingFacadeDepthShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32CD60 = 0;
    unk_1EB32CD68 = &ggl::buildingFacadeDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32CD78 = 0;
    unk_1EB32CD80 = 0;
    qword_1EB32CD70 = 0;
  }
}

void ggl::HillshadeFillMaskShader::typedReflection(ggl::HillshadeFillMaskShader *this)
{
  {
    if (v1)
    {
      ggl::HillshadeFillMaskShader::typedReflection(void)::ref = (uint64_t)"HillshadeFillMaskShader";
      ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(v1);
      qword_1E958D568 = (uint64_t)&ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("HillshadeFillMaskShaderVertex");
      dword_1E958D570 = (int)v2;
      ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(v2);
      qword_1E958D578 = (uint64_t)&ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(void)::ref;
      dword_1E958D580 = ggl::crc32::compute<32ul>("HillshadeFillMaskShaderFragment");
      qword_1E958D588 = (uint64_t)ggl::hillshadeFillMaskShaderShaderConstants(void)::ref;
      unk_1E958D590 = 3;
      qword_1E958D598 = (uint64_t)&ggl::hillshadeFillMaskShaderShaderTextures(void)::ref;
      unk_1E958D5A0 = 0;
      qword_1E958D5A8 = (uint64_t)&ggl::hillshadeFillMaskShaderShaderSamplers(void)::ref;
      unk_1E958D5B0 = 0;
    }
  }
}

void ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("HillshadeFillMaskShaderFragment");
    *(_DWORD *)algn_1E958D63C = 1;
    qword_1E958D640 = (uint64_t)"HillshadeFillMaskShader";
    unk_1E958D648 = 0;
    qword_1E958D650 = 0;
    unk_1E958D658 = &ggl::hillshadeFillMaskShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1E958D660 = 0;
    unk_1E958D668 = &ggl::hillshadeFillMaskShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1E958D670 = 0;
    unk_1E958D678 = &ggl::hillshadeFillMaskShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1E958D680 = 0;
    unk_1E958D688 = &ggl::hillshadeFillMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1E958D698 = 0;
    unk_1E958D6A0 = 0;
    qword_1E958D690 = 0;
  }
}

void ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("HillshadeFillMaskShaderVertex");
    *(_DWORD *)algn_1E958D5C4 = 0;
    qword_1E958D5C8 = (uint64_t)"HillshadeFillMaskShader";
    unk_1E958D5D0 = ggl::hillshadeFillMaskShaderVertShaderFunctionAttributes(void)::ref;
    qword_1E958D5D8 = 1;
    unk_1E958D5E0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1E958D5E8 = 3;
    unk_1E958D5F0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1E958D5F8 = 0;
    unk_1E958D600 = &ggl::hillshadeFillMaskShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1E958D608 = 0;
    unk_1E958D610 = &ggl::hillshadeFillMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1E958D620 = 0;
    unk_1E958D628 = 0;
    qword_1E958D618 = 0;
  }
}

void ggl::OptimizedTrafficShader::typedReflection(ggl::OptimizedTrafficShader *this)
{
  {
    if (v1)
    {
      ggl::OptimizedTrafficShader::typedReflection(void)::ref = (uint64_t)"OptimizedTrafficShader";
      ggl::optimizedTrafficShaderVertexFunctionDescriptor(v1);
      qword_1EB3220B8 = (uint64_t)&ggl::optimizedTrafficShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<29ul>("OptimizedTrafficShaderVertex");
      dword_1EB3220C0 = (int)v2;
      ggl::optimizedTrafficShaderFragmentFunctionDescriptor(v2);
      qword_1EB3220C8 = (uint64_t)&ggl::optimizedTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3220D0 = ggl::crc32::compute<31ul>("OptimizedTrafficShaderFragment");
      qword_1EB3220D8 = (uint64_t)ggl::optimizedTrafficShaderShaderConstants(void)::ref;
      unk_1EB3220E0 = 3;
      qword_1EB3220E8 = (uint64_t)&ggl::optimizedTrafficShaderShaderTextures(void)::ref;
      unk_1EB3220F0 = 0;
      qword_1EB3220F8 = (uint64_t)&ggl::optimizedTrafficShaderShaderSamplers(void)::ref;
      unk_1EB322100 = 0;
    }
  }
}

void ggl::optimizedTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::optimizedTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("OptimizedTrafficShaderFragment");
    *(_DWORD *)algn_1EB32804C = 1;
    qword_1EB328050 = (uint64_t)"OptimizedTrafficShader";
    unk_1EB328058 = 0;
    qword_1EB328060 = 0;
    unk_1EB328068 = &ggl::optimizedTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328070 = 1;
    unk_1EB328078 = &ggl::optimizedTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328080 = 0;
    unk_1EB328088 = &ggl::optimizedTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328090 = 0;
    unk_1EB328098 = &ggl::optimizedTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3280A8 = 0;
    unk_1EB3280B0 = 0;
    qword_1EB3280A0 = 0;
  }
}

void ggl::optimizedTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::optimizedTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("OptimizedTrafficShaderVertex");
    *(_DWORD *)algn_1EB3272F4 = 0;
    qword_1EB3272F8 = (uint64_t)"OptimizedTrafficShader";
    unk_1EB327300 = ggl::optimizedTrafficShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327308 = 1;
    unk_1EB327310 = &ggl::optimizedTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327318 = 3;
    unk_1EB327320 = &ggl::optimizedTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327328 = 0;
    unk_1EB327330 = &ggl::optimizedTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327338 = 0;
    unk_1EB327340 = &ggl::optimizedTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327350 = 0;
    unk_1EB327358 = 0;
    qword_1EB327348 = 0;
  }
}

void ggl::BuildingTopDepthShader::typedReflection(ggl::BuildingTopDepthShader *this)
{
  {
    if (v1)
    {
      ggl::BuildingTopDepthShader::typedReflection(void)::ref = (uint64_t)"BuildingTopDepthShader";
      ggl::buildingTopDepthShaderVertexFunctionDescriptor(v1);
      qword_1EB322058 = (uint64_t)&ggl::buildingTopDepthShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<29ul>("BuildingTopDepthShaderVertex");
      dword_1EB322060 = (int)v2;
      ggl::buildingTopDepthShaderFragmentFunctionDescriptor(v2);
      qword_1EB322068 = (uint64_t)&ggl::buildingTopDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322070 = ggl::crc32::compute<31ul>("BuildingTopDepthShaderFragment");
      qword_1EB322078 = (uint64_t)ggl::buildingTopDepthShaderShaderConstants(void)::ref;
      unk_1EB322080 = 2;
      qword_1EB322088 = (uint64_t)&ggl::buildingTopDepthShaderShaderTextures(void)::ref;
      unk_1EB322090 = 0;
      qword_1EB322098 = (uint64_t)&ggl::buildingTopDepthShaderShaderSamplers(void)::ref;
      unk_1EB3220A0 = 0;
    }
  }
}

void ggl::buildingTopDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingTopDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("BuildingTopDepthShaderFragment");
    *(_DWORD *)algn_1EB327EEC = 1;
    qword_1EB327EF0 = (uint64_t)"BuildingTopDepthShader";
    unk_1EB327EF8 = 0;
    qword_1EB327F00 = 0;
    unk_1EB327F08 = &ggl::buildingTopDepthShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327F10 = 0;
    unk_1EB327F18 = &ggl::buildingTopDepthShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327F20 = 0;
    unk_1EB327F28 = &ggl::buildingTopDepthShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327F30 = 0;
    unk_1EB327F38 = &ggl::buildingTopDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327F48 = 0;
    unk_1EB327F50 = 0;
    qword_1EB327F40 = 0;
  }
}

void ggl::buildingTopDepthShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingTopDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("BuildingTopDepthShaderVertex");
    *(_DWORD *)algn_1EB327194 = 0;
    qword_1EB327198 = (uint64_t)"BuildingTopDepthShader";
    unk_1EB3271A0 = ggl::buildingTopDepthShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3271A8 = 1;
    unk_1EB3271B0 = &ggl::buildingTopDepthShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3271B8 = 2;
    unk_1EB3271C0 = &ggl::buildingTopDepthShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3271C8 = 0;
    unk_1EB3271D0 = &ggl::buildingTopDepthShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3271D8 = 0;
    unk_1EB3271E0 = &ggl::buildingTopDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3271F0 = 0;
    unk_1EB3271F8 = 0;
    qword_1EB3271E8 = 0;
  }
}

void ggl::VenueWallShadowShader::typedReflection(ggl::VenueWallShadowShader *this)
{
  {
    if (v1)
    {
      ggl::VenueWallShadowShader::typedReflection(void)::ref = (uint64_t)"VenueWallShadowShader";
      ggl::venueWallShadowShaderVertexFunctionDescriptor(v1);
      qword_1EB321FF8 = (uint64_t)&ggl::venueWallShadowShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("VenueWallShadowShaderVertex");
      dword_1EB322000 = (int)v2;
      ggl::venueWallShadowShaderFragmentFunctionDescriptor(v2);
      qword_1EB322008 = (uint64_t)&ggl::venueWallShadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322010 = ggl::crc32::compute<30ul>("VenueWallShadowShaderFragment");
      qword_1EB322018 = (uint64_t)ggl::venueWallShadowShaderShaderConstants(void)::ref;
      unk_1EB322020 = 2;
      qword_1EB322028 = (uint64_t)&ggl::venueWallShadowShaderShaderTextures(void)::ref;
      unk_1EB322030 = 0;
      qword_1EB322038 = (uint64_t)&ggl::venueWallShadowShaderShaderSamplers(void)::ref;
      unk_1EB322040 = 0;
    }
  }
}

void ggl::venueWallShadowShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::venueWallShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("VenueWallShadowShaderFragment");
    *(_DWORD *)algn_1EB327E0C = 1;
    qword_1EB327E10 = (uint64_t)"VenueWallShadowShader";
    unk_1EB327E18 = 0;
    qword_1EB327E20 = 0;
    unk_1EB327E28 = &ggl::venueWallShadowShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327E30 = 0;
    unk_1EB327E38 = &ggl::venueWallShadowShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327E40 = 0;
    unk_1EB327E48 = &ggl::venueWallShadowShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327E50 = 0;
    unk_1EB327E58 = &ggl::venueWallShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327E68 = 0;
    unk_1EB327E70 = 0;
    qword_1EB327E60 = 0;
  }
}

void ggl::venueWallShadowShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::venueWallShadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VenueWallShadowShaderVertex");
    *(_DWORD *)algn_1EB3270B4 = 0;
    qword_1EB3270B8 = (uint64_t)"VenueWallShadowShader";
    unk_1EB3270C0 = ggl::venueWallShadowShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3270C8 = 1;
    unk_1EB3270D0 = &ggl::venueWallShadowShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3270D8 = 2;
    unk_1EB3270E0 = &ggl::venueWallShadowShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3270E8 = 0;
    unk_1EB3270F0 = &ggl::venueWallShadowShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3270F8 = 0;
    unk_1EB327100 = &ggl::venueWallShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327110 = 0;
    unk_1EB327118 = 0;
    qword_1EB327108 = 0;
  }
}

void ggl::RouteLineMaskShader::typedReflection(ggl::RouteLineMaskShader *this)
{
  {
    if (v1)
    {
      ggl::RouteLineMaskShader::typedReflection(void)::ref = (uint64_t)"RouteLineMaskShader";
      ggl::routeLineMaskShaderVertexFunctionDescriptor(v1);
      qword_1EB32BC00 = (uint64_t)&ggl::routeLineMaskShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("RouteLineMaskShaderVertex");
      dword_1EB32BC08 = (int)v2;
      ggl::routeLineMaskShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BC10 = (uint64_t)&ggl::routeLineMaskShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BC18 = ggl::crc32::compute<28ul>("RouteLineMaskShaderFragment");
      qword_1EB32BC20 = (uint64_t)ggl::routeLineMaskShaderShaderConstants(void)::ref;
      unk_1EB32BC28 = 3;
      qword_1EB32BC30 = (uint64_t)&ggl::routeLineMaskShaderShaderTextures(void)::ref;
      unk_1EB32BC38 = 0;
      qword_1EB32BC40 = (uint64_t)&ggl::routeLineMaskShaderShaderSamplers(void)::ref;
      unk_1EB32BC48 = 0;
    }
  }
}

void ggl::routeLineMaskShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("RouteLineMaskShaderFragment");
    *(_DWORD *)algn_1EB32CE34 = 1;
    qword_1EB32CE38 = (uint64_t)"RouteLineMaskShader";
    unk_1EB32CE40 = 0;
    qword_1EB32CE48 = 0;
    unk_1EB32CE50 = &ggl::routeLineMaskShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32CE58 = 1;
    unk_1EB32CE60 = &ggl::routeLineMaskShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32CE68 = 0;
    unk_1EB32CE70 = &ggl::routeLineMaskShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32CE78 = 0;
    unk_1EB32CE80 = &ggl::routeLineMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32CE90 = 0;
    unk_1EB32CE98 = 0;
    qword_1EB32CE88 = 0;
  }
}

void ggl::routeLineMaskShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("RouteLineMaskShaderVertex");
    *(_DWORD *)algn_1EB32C12C = 0;
    qword_1EB32C130 = (uint64_t)"RouteLineMaskShader";
    unk_1EB32C138 = ggl::routeLineMaskShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32C140 = 1;
    unk_1EB32C148 = &ggl::routeLineMaskShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C150 = 3;
    unk_1EB32C158 = &ggl::routeLineMaskShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C160 = 0;
    unk_1EB32C168 = &ggl::routeLineMaskShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C170 = 0;
    unk_1EB32C178 = &ggl::routeLineMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C188 = 0;
    unk_1EB32C190 = 0;
    qword_1EB32C180 = 0;
  }
}

void ggl::LandmarkDepthShader::typedReflection(ggl::LandmarkDepthShader *this)
{
  {
    if (v1)
    {
      ggl::LandmarkDepthShader::typedReflection(void)::ref = (uint64_t)"LandmarkDepthShader";
      ggl::landmarkDepthShaderVertexFunctionDescriptor(v1);
      qword_1EB3217C0 = (uint64_t)&ggl::landmarkDepthShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("LandmarkDepthShaderVertex");
      dword_1EB3217C8 = (int)v2;
      ggl::landmarkDepthShaderFragmentFunctionDescriptor(v2);
      qword_1EB3217D0 = (uint64_t)&ggl::landmarkDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3217D8 = ggl::crc32::compute<28ul>("LandmarkDepthShaderFragment");
      qword_1EB3217E0 = (uint64_t)ggl::landmarkDepthShaderShaderConstants(void)::ref;
      unk_1EB3217E8 = 2;
      qword_1EB3217F0 = (uint64_t)&ggl::landmarkDepthShaderShaderTextures(void)::ref;
      unk_1EB3217F8 = 0;
      qword_1EB321800 = (uint64_t)&ggl::landmarkDepthShaderShaderSamplers(void)::ref;
      unk_1EB321808 = 0;
    }
  }
}

void ggl::landmarkDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::landmarkDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("LandmarkDepthShaderFragment");
    *(_DWORD *)algn_1EB326BB4 = 1;
    qword_1EB326BB8 = (uint64_t)"LandmarkDepthShader";
    unk_1EB326BC0 = 0;
    qword_1EB326BC8 = 0;
    unk_1EB326BD0 = &ggl::landmarkDepthShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326BD8 = 0;
    unk_1EB326BE0 = &ggl::landmarkDepthShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326BE8 = 0;
    unk_1EB326BF0 = &ggl::landmarkDepthShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326BF8 = 0;
    unk_1EB326C00 = &ggl::landmarkDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326C10 = 0;
    unk_1EB326C18 = 0;
    qword_1EB326C08 = 0;
  }
}

void ggl::landmarkDepthShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::landmarkDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("LandmarkDepthShaderVertex");
    *(_DWORD *)algn_1EB325CBC = 0;
    qword_1EB325CC0 = (uint64_t)"LandmarkDepthShader";
    unk_1EB325CC8 = ggl::landmarkDepthShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325CD0 = 1;
    unk_1EB325CD8 = &ggl::landmarkDepthShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325CE0 = 2;
    unk_1EB325CE8 = &ggl::landmarkDepthShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325CF0 = 0;
    unk_1EB325CF8 = &ggl::landmarkDepthShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325D00 = 0;
    unk_1EB325D08 = &ggl::landmarkDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325D18 = 0;
    unk_1EB325D20 = 0;
    qword_1EB325D10 = 0;
  }
}

void ggl::TrafficGlowShader::typedReflection(ggl::TrafficGlowShader *this)
{
  {
    if (v1)
    {
      ggl::TrafficGlowShader::typedReflection(void)::ref = (uint64_t)"TrafficGlowShader";
      ggl::trafficGlowShaderVertexFunctionDescriptor(v1);
      qword_1EB321310 = (uint64_t)&ggl::trafficGlowShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("TrafficGlowShaderVertex");
      dword_1EB321318 = (int)v2;
      ggl::trafficGlowShaderFragmentFunctionDescriptor(v2);
      qword_1EB321320 = (uint64_t)&ggl::trafficGlowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321328 = ggl::crc32::compute<26ul>("TrafficGlowShaderFragment");
      qword_1EB321330 = (uint64_t)ggl::trafficGlowShaderShaderConstants(void)::ref;
      unk_1EB321338 = 3;
      qword_1EB321340 = (uint64_t)&ggl::trafficGlowShaderShaderTextures(void)::ref;
      unk_1EB321348 = 0;
      qword_1EB321350 = (uint64_t)&ggl::trafficGlowShaderShaderSamplers(void)::ref;
      unk_1EB321358 = 0;
    }
  }
}

void ggl::trafficGlowShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::trafficGlowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("TrafficGlowShaderFragment");
    *(_DWORD *)algn_1EB326054 = 1;
    qword_1EB326058 = (uint64_t)"TrafficGlowShader";
    unk_1EB326060 = 0;
    qword_1EB326068 = 0;
    unk_1EB326070 = &ggl::trafficGlowShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326078 = 1;
    unk_1EB326080 = &ggl::trafficGlowShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326088 = 0;
    unk_1EB326090 = &ggl::trafficGlowShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326098 = 0;
    unk_1EB3260A0 = &ggl::trafficGlowShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3260B0 = 0;
    unk_1EB3260B8 = 0;
    qword_1EB3260A8 = 0;
  }
}

void ggl::trafficGlowShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::trafficGlowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("TrafficGlowShaderVertex");
    *(_DWORD *)algn_1EB32558C = 0;
    qword_1EB325590 = (uint64_t)"TrafficGlowShader";
    unk_1EB325598 = ggl::trafficGlowShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3255A0 = 1;
    unk_1EB3255A8 = &ggl::trafficGlowShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3255B0 = 3;
    unk_1EB3255B8 = &ggl::trafficGlowShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3255C0 = 0;
    unk_1EB3255C8 = &ggl::trafficGlowShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3255D0 = 0;
    unk_1EB3255D8 = &ggl::trafficGlowShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3255E8 = 0;
    unk_1EB3255F0 = 0;
    qword_1EB3255E0 = 0;
  }
}

void std::shared_ptr<md::Mesh>::shared_ptr[abi:nn180100]<md::Mesh,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A1C9F414(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 72);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x1A6239270](v1, 0x1020C408635837CLL);
  }
  _Unwind_Resume(exception_object);
}

CFDictionaryRef ___ZN2md15ElevationRaster24decodePngElevationRasterEPKhmRNSt3__16vectorIhNS3_9allocatorIhEEEERmS9__block_invoke()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = *(void **)MEMORY[0x1E4F1DD48];
  values = (void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryRef result = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::options = (uint64_t)result;
  return result;
}

void ggl::SpecularBuildingTopShader::typedReflection(ggl::SpecularBuildingTopShader *this)
{
  {
    if (v1)
    {
      ggl::SpecularBuildingTopShader::typedReflection(void)::ref = (uint64_t)"SpecularBuildingTopShader";
      ggl::specularBuildingTopShaderVertexFunctionDescriptor(v1);
      qword_1EB322B70 = (uint64_t)&ggl::specularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("SpecularBuildingTopShaderVertex");
      dword_1EB322B78 = (int)v2;
      ggl::specularBuildingTopShaderFragmentFunctionDescriptor(v2);
      qword_1EB322B80 = (uint64_t)&ggl::specularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322B88 = ggl::crc32::compute<34ul>("SpecularBuildingTopShaderFragment");
      qword_1EB322B90 = (uint64_t)ggl::specularBuildingTopShaderShaderConstants(void)::ref;
      unk_1EB322B98 = 7;
      qword_1EB322BA0 = (uint64_t)&ggl::specularBuildingTopShaderShaderTextures(void)::ref;
      unk_1EB322BA8 = 0;
      qword_1EB322BB0 = (uint64_t)&ggl::specularBuildingTopShaderShaderSamplers(void)::ref;
      unk_1EB322BB8 = 0;
    }
  }
}

void ggl::specularBuildingTopShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::specularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("SpecularBuildingTopShaderFragment");
    *(_DWORD *)algn_1EB329504 = 1;
    qword_1EB329508 = (uint64_t)"SpecularBuildingTopShader";
    unk_1EB329510 = 0;
    qword_1EB329518 = 0;
    unk_1EB329520 = &ggl::specularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329528 = 4;
    unk_1EB329530 = &ggl::specularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329538 = 0;
    unk_1EB329540 = &ggl::specularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329548 = 0;
    unk_1EB329550 = &ggl::specularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329560 = 0;
    unk_1EB329568 = 0;
    qword_1EB329558 = 0;
  }
}

void ggl::specularBuildingTopShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::specularBuildingTopShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("SpecularBuildingTopShaderVertex");
    *(_DWORD *)algn_1EB3289AC = 0;
    qword_1EB3289B0 = (uint64_t)"SpecularBuildingTopShader";
    unk_1EB3289B8 = ggl::specularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3289C0 = 1;
    unk_1EB3289C8 = &ggl::specularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3289D0 = 6;
    unk_1EB3289D8 = &ggl::specularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3289E0 = 0;
    unk_1EB3289E8 = &ggl::specularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3289F0 = 0;
    unk_1EB3289F8 = &ggl::specularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328A08 = 0;
    unk_1EB328A10 = 0;
    qword_1EB328A00 = 0;
  }
}

void ggl::PolygonStrokeMaskShader::typedReflection(ggl::PolygonStrokeMaskShader *this)
{
  {
    if (v1)
    {
      ggl::PolygonStrokeMaskShader::typedReflection(void)::ref = (uint64_t)"PolygonStrokeMaskShader";
      ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(v1);
      qword_1EB317BA0 = (uint64_t)&ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("PolygonStrokeMaskShaderVertex");
      dword_1EB317BA8 = (int)v2;
      ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(v2);
      qword_1EB317BB0 = (uint64_t)&ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB317BB8 = ggl::crc32::compute<32ul>("PolygonStrokeMaskShaderFragment");
      qword_1EB317BC0 = (uint64_t)ggl::polygonStrokeMaskShaderShaderConstants(void)::ref;
      unk_1EB317BC8 = 3;
      qword_1EB317BD0 = (uint64_t)ggl::polygonStrokeMaskShaderShaderTextures(void)::ref;
      unk_1EB317BD8 = 1;
      qword_1EB317BE0 = (uint64_t)&ggl::polygonStrokeMaskShaderShaderSamplers(void)::ref;
      unk_1EB317BE8 = 1;
    }
  }
}

void ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PolygonStrokeMaskShaderFragment");
    *(_DWORD *)algn_1EB318344 = 1;
    qword_1EB318348 = (uint64_t)"PolygonStrokeMaskShader";
    unk_1EB318350 = 0;
    qword_1EB318358 = 0;
    unk_1EB318360 = &ggl::polygonStrokeMaskShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB318368 = 0;
    unk_1EB318370 = &ggl::polygonStrokeMaskShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB318378 = 0;
    unk_1EB318380 = &ggl::polygonStrokeMaskShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB318388 = 1;
    unk_1EB318390 = &ggl::polygonStrokeMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3183A0 = 0;
    unk_1EB3183A8 = 0;
    qword_1EB318398 = 1;
  }
}

void ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PolygonStrokeMaskShaderVertex");
    *(_DWORD *)algn_1EB3180FC = 0;
    qword_1EB318100 = (uint64_t)"PolygonStrokeMaskShader";
    unk_1EB318108 = ggl::polygonStrokeMaskShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB318110 = 1;
    unk_1EB318118 = &ggl::polygonStrokeMaskShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB318120 = 3;
    unk_1EB318128 = &ggl::polygonStrokeMaskShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB318130 = 0;
    unk_1EB318138 = &ggl::polygonStrokeMaskShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB318140 = 0;
    unk_1EB318148 = &ggl::polygonStrokeMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318158 = 0;
    unk_1EB318160 = 0;
    qword_1EB318150 = 0;
  }
}

void ggl::PoleTexturedBlendShader::typedReflection(ggl::PoleTexturedBlendShader *this)
{
  {
    if (v1)
    {
      ggl::PoleTexturedBlendShader::typedReflection(void)::ref = (uint64_t)"PoleTexturedBlendShader";
      ggl::poleTexturedBlendShaderVertexFunctionDescriptor(v1);
      qword_1E9586830 = (uint64_t)&ggl::poleTexturedBlendShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("PoleTexturedBlendShaderVertex");
      dword_1E9586838 = (int)v2;
      ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(v2);
      qword_1E9586840 = (uint64_t)&ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(void)::ref;
      dword_1E9586848 = ggl::crc32::compute<32ul>("PoleTexturedBlendShaderFragment");
      qword_1E9586850 = (uint64_t)ggl::poleTexturedBlendShaderShaderConstants(void)::ref;
      unk_1E9586858 = 4;
      qword_1E9586860 = (uint64_t)ggl::poleTexturedBlendShaderShaderTextures(void)::ref;
      unk_1E9586868 = 1;
      qword_1E9586870 = (uint64_t)&ggl::poleTexturedBlendShaderShaderSamplers(void)::ref;
      unk_1E9586878 = 1;
    }
  }
}

void ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PoleTexturedBlendShaderFragment");
    *(_DWORD *)algn_1E958C354 = 1;
    qword_1E958C358 = (uint64_t)"PoleTexturedBlendShader";
    unk_1E958C360 = 0;
    qword_1E958C368 = 0;
    unk_1E958C370 = &ggl::poleTexturedBlendShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1E958C378 = 1;
    unk_1E958C380 = &ggl::poleTexturedBlendShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1E958C388 = 0;
    unk_1E958C390 = &ggl::poleTexturedBlendShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1E958C398 = 1;
    unk_1E958C3A0 = &ggl::poleTexturedBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1E958C3B0 = 0;
    unk_1E958C3B8 = 0;
    qword_1E958C3A8 = 1;
  }
}

void ggl::poleTexturedBlendShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::poleTexturedBlendShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PoleTexturedBlendShaderVertex");
    *(_DWORD *)algn_1E958C26C = 0;
    qword_1E958C270 = (uint64_t)"PoleTexturedBlendShader";
    unk_1E958C278 = ggl::poleTexturedBlendShaderVertShaderFunctionAttributes(void)::ref;
    qword_1E958C280 = 1;
    unk_1E958C288 = &ggl::poleTexturedBlendShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1E958C290 = 3;
    unk_1E958C298 = &ggl::poleTexturedBlendShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1E958C2A0 = 0;
    unk_1E958C2A8 = &ggl::poleTexturedBlendShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1E958C2B0 = 0;
    unk_1E958C2B8 = &ggl::poleTexturedBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1E958C2C8 = 0;
    unk_1E958C2D0 = 0;
    qword_1E958C2C0 = 0;
  }
}

void ggl::OuterShadowRibbonShader::typedReflection(ggl::OuterShadowRibbonShader *this)
{
  {
    if (v1)
    {
      ggl::OuterShadowRibbonShader::typedReflection(void)::ref = (uint64_t)"OuterShadowRibbonShader";
      ggl::outerShadowRibbonShaderVertexFunctionDescriptor(v1);
      qword_1EB3224C0 = (uint64_t)&ggl::outerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("OuterShadowRibbonShaderVertex");
      dword_1EB3224C8 = (int)v2;
      ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(v2);
      qword_1EB3224D0 = (uint64_t)&ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3224D8 = ggl::crc32::compute<32ul>("OuterShadowRibbonShaderFragment");
      qword_1EB3224E0 = (uint64_t)ggl::outerShadowRibbonShaderShaderConstants(void)::ref;
      unk_1EB3224E8 = 3;
      qword_1EB3224F0 = (uint64_t)ggl::outerShadowRibbonShaderShaderTextures(void)::ref;
      unk_1EB3224F8 = 1;
      qword_1EB322500 = (uint64_t)&ggl::outerShadowRibbonShaderShaderSamplers(void)::ref;
      unk_1EB322508 = 1;
    }
  }
}

void ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("OuterShadowRibbonShaderFragment");
    *(_DWORD *)algn_1EB328774 = 1;
    qword_1EB328778 = (uint64_t)"OuterShadowRibbonShader";
    unk_1EB328780 = 0;
    qword_1EB328788 = 0;
    unk_1EB328790 = &ggl::outerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328798 = 1;
    unk_1EB3287A0 = &ggl::outerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3287A8 = 0;
    unk_1EB3287B0 = &ggl::outerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3287B8 = 1;
    unk_1EB3287C0 = &ggl::outerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3287D0 = 0;
    unk_1EB3287D8 = 0;
    qword_1EB3287C8 = 1;
  }
}

void ggl::outerShadowRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::outerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("OuterShadowRibbonShaderVertex");
    *(_DWORD *)algn_1EB327A6C = 0;
    qword_1EB327A70 = (uint64_t)"OuterShadowRibbonShader";
    unk_1EB327A78 = ggl::outerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327A80 = 1;
    unk_1EB327A88 = &ggl::outerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327A90 = 3;
    unk_1EB327A98 = &ggl::outerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327AA0 = 0;
    unk_1EB327AA8 = &ggl::outerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327AB0 = 0;
    unk_1EB327AB8 = &ggl::outerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327AC8 = 0;
    unk_1EB327AD0 = 0;
    qword_1EB327AC0 = 0;
  }
}

void ggl::ElevatedFillColorShader::typedReflection(ggl::ElevatedFillColorShader *this)
{
  {
    if (v1)
    {
      ggl::ElevatedFillColorShader::typedReflection(void)::ref = (uint64_t)"ElevatedFillColorShader";
      ggl::elevatedFillColorShaderVertexFunctionDescriptor(v1);
      qword_1EB31BE88 = (uint64_t)&ggl::elevatedFillColorShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("ElevatedFillColorShaderVertex");
      dword_1EB31BE90 = (int)v2;
      ggl::elevatedFillColorShaderFragmentFunctionDescriptor(v2);
      qword_1EB31BE98 = (uint64_t)&ggl::elevatedFillColorShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31BEA0 = ggl::crc32::compute<32ul>("ElevatedFillColorShaderFragment");
      qword_1EB31BEA8 = (uint64_t)ggl::elevatedFillColorShaderShaderConstants(void)::ref;
      unk_1EB31BEB0 = 4;
      qword_1EB31BEB8 = (uint64_t)&ggl::elevatedFillColorShaderShaderTextures(void)::ref;
      unk_1EB31BEC0 = 0;
      qword_1EB31BEC8 = (uint64_t)&ggl::elevatedFillColorShaderShaderSamplers(void)::ref;
      unk_1EB31BED0 = 0;
    }
  }
}

void ggl::elevatedFillColorShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::elevatedFillColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ElevatedFillColorShaderFragment");
    *(_DWORD *)algn_1EB31C8BC = 1;
    qword_1EB31C8C0 = (uint64_t)"ElevatedFillColorShader";
    unk_1EB31C8C8 = 0;
    qword_1EB31C8D0 = 0;
    unk_1EB31C8D8 = &ggl::elevatedFillColorShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31C8E0 = 2;
    unk_1EB31C8E8 = &ggl::elevatedFillColorShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31C8F0 = 0;
    unk_1EB31C8F8 = &ggl::elevatedFillColorShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31C900 = 0;
    unk_1EB31C908 = &ggl::elevatedFillColorShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31C918 = 0;
    unk_1EB31C920 = 0;
    qword_1EB31C910 = 0;
  }
}

void ggl::elevatedFillColorShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::elevatedFillColorShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("ElevatedFillColorShaderVertex");
    *(_DWORD *)algn_1EB31C844 = 0;
    qword_1EB31C848 = (uint64_t)"ElevatedFillColorShader";
    unk_1EB31C850 = ggl::elevatedFillColorShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31C858 = 1;
    unk_1EB31C860 = &ggl::elevatedFillColorShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31C868 = 4;
    unk_1EB31C870 = &ggl::elevatedFillColorShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31C878 = 0;
    unk_1EB31C880 = &ggl::elevatedFillColorShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31C888 = 0;
    unk_1EB31C890 = &ggl::elevatedFillColorShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31C8A0 = 0;
    unk_1EB31C8A8 = 0;
    qword_1EB31C898 = 0;
  }
}

void ggl::RouteLineTrafficShader::typedReflection(ggl::RouteLineTrafficShader *this)
{
  {
    if (v1)
    {
      ggl::RouteLineTrafficShader::typedReflection(void)::ref = (uint64_t)"RouteLineTrafficShader";
      ggl::routeLineTrafficShaderVertexFunctionDescriptor(v1);
      qword_1EB322170 = (uint64_t)&ggl::routeLineTrafficShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<29ul>("RouteLineTrafficShaderVertex");
      dword_1EB322178 = (int)v2;
      ggl::routeLineTrafficShaderFragmentFunctionDescriptor(v2);
      qword_1EB322180 = (uint64_t)&ggl::routeLineTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322188 = ggl::crc32::compute<31ul>("RouteLineTrafficShaderFragment");
      qword_1EB322190 = (uint64_t)ggl::routeLineTrafficShaderShaderConstants(void)::ref;
      unk_1EB322198 = 3;
      qword_1EB3221A0 = (uint64_t)ggl::routeLineTrafficShaderShaderTextures(void)::ref;
      unk_1EB3221A8 = 1;
      qword_1EB3221B0 = (uint64_t)&ggl::routeLineTrafficShaderShaderSamplers(void)::ref;
      unk_1EB3221B8 = 1;
    }
  }
}

void ggl::routeLineTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("RouteLineTrafficShaderFragment");
    *(_DWORD *)algn_1EB328214 = 1;
    qword_1EB328218 = (uint64_t)"RouteLineTrafficShader";
    unk_1EB328220 = 0;
    qword_1EB328228 = 0;
    unk_1EB328230 = &ggl::routeLineTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328238 = 1;
    unk_1EB328240 = &ggl::routeLineTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328248 = 0;
    unk_1EB328250 = &ggl::routeLineTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328258 = 1;
    unk_1EB328260 = &ggl::routeLineTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328270 = 0;
    unk_1EB328278 = 0;
    qword_1EB328268 = 1;
  }
}

void ggl::routeLineTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("RouteLineTrafficShaderVertex");
    *(_DWORD *)algn_1EB32745C = 0;
    qword_1EB327460 = (uint64_t)"RouteLineTrafficShader";
    unk_1EB327468 = ggl::routeLineTrafficShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327470 = 1;
    unk_1EB327478 = &ggl::routeLineTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327480 = 3;
    unk_1EB327488 = &ggl::routeLineTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327490 = 0;
    unk_1EB327498 = &ggl::routeLineTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3274A0 = 0;
    unk_1EB3274A8 = &ggl::routeLineTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3274B8 = 0;
    unk_1EB3274C0 = 0;
    qword_1EB3274B0 = 0;
  }
}

void ggl::VenueWallEndCapShader::typedReflection(ggl::VenueWallEndCapShader *this)
{
  {
    if (v1)
    {
      ggl::VenueWallEndCapShader::typedReflection(void)::ref = (uint64_t)"VenueWallEndCapShader";
      ggl::venueWallEndCapShaderVertexFunctionDescriptor(v1);
      qword_1EB321FA0 = (uint64_t)&ggl::venueWallEndCapShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("VenueWallEndCapShaderVertex");
      dword_1EB321FA8 = (int)v2;
      ggl::venueWallEndCapShaderFragmentFunctionDescriptor(v2);
      qword_1EB321FB0 = (uint64_t)&ggl::venueWallEndCapShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321FB8 = ggl::crc32::compute<30ul>("VenueWallEndCapShaderFragment");
      qword_1EB321FC0 = (uint64_t)ggl::venueWallEndCapShaderShaderConstants(void)::ref;
      unk_1EB321FC8 = 4;
      qword_1EB321FD0 = (uint64_t)ggl::venueWallEndCapShaderShaderTextures(void)::ref;
      unk_1EB321FD8 = 1;
      qword_1EB321FE0 = (uint64_t)&ggl::venueWallEndCapShaderShaderSamplers(void)::ref;
      unk_1EB321FE8 = 1;
    }
  }
}

void ggl::venueWallEndCapShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::venueWallEndCapShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("VenueWallEndCapShaderFragment");
    *(_DWORD *)algn_1EB327D94 = 1;
    qword_1EB327D98 = (uint64_t)"VenueWallEndCapShader";
    unk_1EB327DA0 = 0;
    qword_1EB327DA8 = 0;
    unk_1EB327DB0 = &ggl::venueWallEndCapShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327DB8 = 0;
    unk_1EB327DC0 = &ggl::venueWallEndCapShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327DC8 = 0;
    unk_1EB327DD0 = &ggl::venueWallEndCapShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327DD8 = 1;
    unk_1EB327DE0 = &ggl::venueWallEndCapShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327DF0 = 0;
    unk_1EB327DF8 = 0;
    qword_1EB327DE8 = 1;
  }
}

void ggl::venueWallEndCapShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::venueWallEndCapShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VenueWallEndCapShaderVertex");
    *(_DWORD *)algn_1EB32703C = 0;
    qword_1EB327040 = (uint64_t)"VenueWallEndCapShader";
    unk_1EB327048 = ggl::venueWallEndCapShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327050 = 1;
    unk_1EB327058 = &ggl::venueWallEndCapShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327060 = 4;
    unk_1EB327068 = &ggl::venueWallEndCapShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327070 = 0;
    unk_1EB327078 = &ggl::venueWallEndCapShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327080 = 0;
    unk_1EB327088 = &ggl::venueWallEndCapShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327098 = 0;
    unk_1EB3270A0 = 0;
    qword_1EB327090 = 0;
  }
}

void ggl::PrefilteredLineShader::typedReflection(ggl::PrefilteredLineShader *this)
{
  {
    if (v1)
    {
      ggl::PrefilteredLineShader::typedReflection(void)::ref = (uint64_t)"PrefilteredLineShader";
      ggl::prefilteredLineShaderVertexFunctionDescriptor(v1);
      qword_1EB321EF0 = (uint64_t)&ggl::prefilteredLineShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("PrefilteredLineShaderVertex");
      dword_1EB321EF8 = (int)v2;
      ggl::prefilteredLineShaderFragmentFunctionDescriptor(v2);
      qword_1EB321F00 = (uint64_t)&ggl::prefilteredLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321F08 = ggl::crc32::compute<30ul>("PrefilteredLineShaderFragment");
      qword_1EB321F10 = (uint64_t)ggl::prefilteredLineShaderShaderConstants(void)::ref;
      unk_1EB321F18 = 3;
      qword_1EB321F20 = (uint64_t)ggl::prefilteredLineShaderShaderTextures(void)::ref;
      unk_1EB321F28 = 1;
      qword_1EB321F30 = (uint64_t)&ggl::prefilteredLineShaderShaderSamplers(void)::ref;
      unk_1EB321F38 = 1;
    }
  }
}

void ggl::prefilteredLineShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::prefilteredLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PrefilteredLineShaderFragment");
    *(_DWORD *)algn_1EB327B54 = 1;
    qword_1EB327B58 = (uint64_t)"PrefilteredLineShader";
    unk_1EB327B60 = 0;
    qword_1EB327B68 = 0;
    unk_1EB327B70 = &ggl::prefilteredLineShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327B78 = 0;
    unk_1EB327B80 = &ggl::prefilteredLineShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327B88 = 0;
    unk_1EB327B90 = &ggl::prefilteredLineShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327B98 = 1;
    unk_1EB327BA0 = &ggl::prefilteredLineShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327BB0 = 0;
    unk_1EB327BB8 = 0;
    qword_1EB327BA8 = 1;
  }
}

void ggl::prefilteredLineShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::prefilteredLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PrefilteredLineShaderVertex");
    *(_DWORD *)algn_1EB326E6C = 0;
    qword_1EB326E70 = (uint64_t)"PrefilteredLineShader";
    unk_1EB326E78 = ggl::prefilteredLineShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326E80 = 1;
    unk_1EB326E88 = &ggl::prefilteredLineShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326E90 = 3;
    unk_1EB326E98 = &ggl::prefilteredLineShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326EA0 = 0;
    unk_1EB326EA8 = &ggl::prefilteredLineShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326EB0 = 0;
    unk_1EB326EB8 = &ggl::prefilteredLineShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326EC8 = 0;
    unk_1EB326ED0 = 0;
    qword_1EB326EC0 = 0;
  }
}

void ggl::GlobeAtmosphereShader::typedReflection(ggl::GlobeAtmosphereShader *this)
{
  {
    if (v1)
    {
      ggl::GlobeAtmosphereShader::typedReflection(void)::ref = (uint64_t)"GlobeAtmosphereShader";
      ggl::globeAtmosphereShaderVertexFunctionDescriptor(v1);
      qword_1EB32BCB0 = (uint64_t)&ggl::globeAtmosphereShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("GlobeAtmosphereShaderVertex");
      dword_1EB32BCB8 = (int)v2;
      ggl::globeAtmosphereShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BCC0 = (uint64_t)&ggl::globeAtmosphereShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BCC8 = ggl::crc32::compute<30ul>("GlobeAtmosphereShaderFragment");
      qword_1EB32BCD0 = (uint64_t)ggl::globeAtmosphereShaderShaderConstants(void)::ref;
      unk_1EB32BCD8 = 2;
      qword_1EB32BCE0 = (uint64_t)&ggl::globeAtmosphereShaderShaderTextures(void)::ref;
      unk_1EB32BCE8 = 0;
      qword_1EB32BCF0 = (uint64_t)&ggl::globeAtmosphereShaderShaderSamplers(void)::ref;
      unk_1EB32BCF8 = 0;
    }
  }
}

void ggl::globeAtmosphereShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::globeAtmosphereShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("GlobeAtmosphereShaderFragment");
    *(_DWORD *)algn_1EB32C4D4 = 1;
    qword_1EB32C4D8 = (uint64_t)"GlobeAtmosphereShader";
    unk_1EB32C4E0 = 0;
    qword_1EB32C4E8 = 0;
    unk_1EB32C4F0 = &ggl::globeAtmosphereShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C4F8 = 2;
    unk_1EB32C500 = &ggl::globeAtmosphereShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C508 = 0;
    unk_1EB32C510 = &ggl::globeAtmosphereShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C518 = 0;
    unk_1EB32C520 = &ggl::globeAtmosphereShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C530 = 0;
    unk_1EB32C538 = 0;
    qword_1EB32C528 = 0;
  }
}

void ggl::globeAtmosphereShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::globeAtmosphereShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("GlobeAtmosphereShaderVertex");
    *(_DWORD *)algn_1EB32B80C = 0;
    qword_1EB32B810 = (uint64_t)"GlobeAtmosphereShader";
    unk_1EB32B818 = ggl::globeAtmosphereShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32B820 = 1;
    unk_1EB32B828 = &ggl::globeAtmosphereShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32B830 = 2;
    unk_1EB32B838 = &ggl::globeAtmosphereShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32B840 = 0;
    unk_1EB32B848 = &ggl::globeAtmosphereShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32B850 = 0;
    unk_1EB32B858 = &ggl::globeAtmosphereShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32B868 = 0;
    unk_1EB32B870 = 0;
    qword_1EB32B860 = 0;
  }
}

void ggl::DottedRouteLineShader::typedReflection(ggl::DottedRouteLineShader *this)
{
  {
    if (v1)
    {
      ggl::DottedRouteLineShader::typedReflection(void)::ref = (uint64_t)"DottedRouteLineShader";
      ggl::dottedRouteLineShaderVertexFunctionDescriptor(v1);
      qword_1EB317A88 = (uint64_t)&ggl::dottedRouteLineShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("DottedRouteLineShaderVertex");
      dword_1EB317A90 = (int)v2;
      ggl::dottedRouteLineShaderFragmentFunctionDescriptor(v2);
      qword_1EB317A98 = (uint64_t)&ggl::dottedRouteLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB317AA0 = ggl::crc32::compute<30ul>("DottedRouteLineShaderFragment");
      qword_1EB317AA8 = (uint64_t)ggl::dottedRouteLineShaderShaderConstants(void)::ref;
      unk_1EB317AB0 = 3;
      qword_1EB317AB8 = (uint64_t)&ggl::dottedRouteLineShaderShaderTextures(void)::ref;
      unk_1EB317AC0 = 0;
      qword_1EB317AC8 = (uint64_t)&ggl::dottedRouteLineShaderShaderSamplers(void)::ref;
      unk_1EB317AD0 = 0;
    }
  }
}

void ggl::dottedRouteLineShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::dottedRouteLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("DottedRouteLineShaderFragment");
    *(_DWORD *)algn_1EB31801C = 1;
    qword_1EB318020 = (uint64_t)"DottedRouteLineShader";
    unk_1EB318028 = 0;
    qword_1EB318030 = 0;
    unk_1EB318038 = &ggl::dottedRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB318040 = 2;
    unk_1EB318048 = &ggl::dottedRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB318050 = 0;
    unk_1EB318058 = &ggl::dottedRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB318060 = 0;
    unk_1EB318068 = &ggl::dottedRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318078 = 0;
    unk_1EB318080 = 0;
    qword_1EB318070 = 0;
  }
}

void ggl::dottedRouteLineShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::dottedRouteLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DottedRouteLineShaderVertex");
    *(_DWORD *)algn_1EB317F34 = 0;
    qword_1EB317F38 = (uint64_t)"DottedRouteLineShader";
    unk_1EB317F40 = ggl::dottedRouteLineShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB317F48 = 1;
    unk_1EB317F50 = &ggl::dottedRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB317F58 = 3;
    unk_1EB317F60 = &ggl::dottedRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB317F68 = 0;
    unk_1EB317F70 = &ggl::dottedRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB317F78 = 0;
    unk_1EB317F80 = &ggl::dottedRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB317F90 = 0;
    unk_1EB317F98 = 0;
    qword_1EB317F88 = 0;
  }
}

void ggl::BuildingShadowShader::typedReflection(ggl::BuildingShadowShader *this)
{
  {
    if (v1)
    {
      ggl::BuildingShadowShader::typedReflection(void)::ref = (uint64_t)"BuildingShadowShader";
      ggl::buildingShadowShaderVertexFunctionDescriptor(v1);
      qword_1EB321AF0 = (uint64_t)&ggl::buildingShadowShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<27ul>("BuildingShadowShaderVertex");
      dword_1EB321AF8 = (int)v2;
      ggl::buildingShadowShaderFragmentFunctionDescriptor(v2);
      qword_1EB321B00 = (uint64_t)&ggl::buildingShadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321B08 = ggl::crc32::compute<29ul>("BuildingShadowShaderFragment");
      qword_1EB321B10 = (uint64_t)ggl::buildingShadowShaderShaderConstants(void)::ref;
      unk_1EB321B18 = 2;
      qword_1EB321B20 = (uint64_t)ggl::buildingShadowShaderShaderTextures(void)::ref;
      unk_1EB321B28 = 1;
      qword_1EB321B30 = (uint64_t)&ggl::buildingShadowShaderShaderSamplers(void)::ref;
      unk_1EB321B38 = 1;
    }
  }
}

void ggl::buildingShadowShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("BuildingShadowShaderFragment");
    *(_DWORD *)algn_1EB327124 = 1;
    qword_1EB327128 = (uint64_t)"BuildingShadowShader";
    unk_1EB327130 = 0;
    qword_1EB327138 = 0;
    unk_1EB327140 = &ggl::buildingShadowShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327148 = 1;
    unk_1EB327150 = &ggl::buildingShadowShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327158 = 0;
    unk_1EB327160 = &ggl::buildingShadowShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327168 = 1;
    unk_1EB327170 = &ggl::buildingShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327180 = 0;
    unk_1EB327188 = 0;
    qword_1EB327178 = 1;
  }
}

void ggl::buildingShadowShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::buildingShadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("BuildingShadowShaderVertex");
    *(_DWORD *)algn_1EB32621C = 0;
    qword_1EB326220 = (uint64_t)"BuildingShadowShader";
    unk_1EB326228 = ggl::buildingShadowShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326230 = 1;
    unk_1EB326238 = &ggl::buildingShadowShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326240 = 2;
    unk_1EB326248 = &ggl::buildingShadowShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326250 = 0;
    unk_1EB326258 = &ggl::buildingShadowShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326260 = 0;
    unk_1EB326268 = &ggl::buildingShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326278 = 0;
    unk_1EB326280 = 0;
    qword_1EB326270 = 0;
  }
}

void ggl::ManeuverPointShader::typedReflection(ggl::ManeuverPointShader *this)
{
  {
    if (v1)
    {
      ggl::ManeuverPointShader::typedReflection(void)::ref = (uint64_t)"ManeuverPointShader";
      ggl::maneuverPointShaderVertexFunctionDescriptor(v1);
      qword_1EB321820 = (uint64_t)&ggl::maneuverPointShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("ManeuverPointShaderVertex");
      dword_1EB321828 = (int)v2;
      ggl::maneuverPointShaderFragmentFunctionDescriptor(v2);
      qword_1EB321830 = (uint64_t)&ggl::maneuverPointShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321838 = ggl::crc32::compute<28ul>("ManeuverPointShaderFragment");
      qword_1EB321840 = (uint64_t)ggl::maneuverPointShaderShaderConstants(void)::ref;
      unk_1EB321848 = 2;
      qword_1EB321850 = (uint64_t)ggl::maneuverPointShaderShaderTextures(void)::ref;
      unk_1EB321858 = 1;
      qword_1EB321860 = (uint64_t)&ggl::maneuverPointShaderShaderSamplers(void)::ref;
      unk_1EB321868 = 1;
    }
  }
}

void ggl::maneuverPointShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::maneuverPointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("ManeuverPointShaderFragment");
    *(_DWORD *)algn_1EB326C24 = 1;
    qword_1EB326C28 = (uint64_t)"ManeuverPointShader";
    unk_1EB326C30 = 0;
    qword_1EB326C38 = 0;
    unk_1EB326C40 = &ggl::maneuverPointShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326C48 = 1;
    unk_1EB326C50 = &ggl::maneuverPointShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326C58 = 0;
    unk_1EB326C60 = &ggl::maneuverPointShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326C68 = 1;
    unk_1EB326C70 = &ggl::maneuverPointShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326C80 = 0;
    unk_1EB326C88 = 0;
    qword_1EB326C78 = 1;
  }
}

void ggl::maneuverPointShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::maneuverPointShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ManeuverPointShaderVertex");
    *(_DWORD *)algn_1EB325D2C = 0;
    qword_1EB325D30 = (uint64_t)"ManeuverPointShader";
    unk_1EB325D38 = ggl::maneuverPointShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325D40 = 1;
    unk_1EB325D48 = &ggl::maneuverPointShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325D50 = 2;
    unk_1EB325D58 = &ggl::maneuverPointShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325D60 = 0;
    unk_1EB325D68 = &ggl::maneuverPointShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325D70 = 0;
    unk_1EB325D78 = &ggl::maneuverPointShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325D88 = 0;
    unk_1EB325D90 = 0;
    qword_1EB325D80 = 0;
  }
}

void ggl::GlobeTexturedShader::typedReflection(ggl::GlobeTexturedShader *this)
{
  {
    if (v1)
    {
      ggl::GlobeTexturedShader::typedReflection(void)::ref = (uint64_t)"GlobeTexturedShader";
      ggl::globeTexturedShaderVertexFunctionDescriptor(v1);
      qword_1E958CBE8 = (uint64_t)&ggl::globeTexturedShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("GlobeTexturedShaderVertex");
      dword_1E958CBF0 = (int)v2;
      ggl::globeTexturedShaderFragmentFunctionDescriptor(v2);
      qword_1E958CBF8 = (uint64_t)&ggl::globeTexturedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1E958CC00 = ggl::crc32::compute<28ul>("GlobeTexturedShaderFragment");
      qword_1E958CC08 = (uint64_t)ggl::globeTexturedShaderShaderConstants(void)::ref;
      unk_1E958CC10 = 3;
      qword_1E958CC18 = (uint64_t)ggl::globeTexturedShaderShaderTextures(void)::ref;
      unk_1E958CC20 = 2;
      qword_1E958CC28 = (uint64_t)ggl::globeTexturedShaderShaderSamplers(void)::ref;
      unk_1E958CC30 = 2;
    }
  }
}

void ggl::globeTexturedShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::globeTexturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("GlobeTexturedShaderFragment");
    *(_DWORD *)algn_1E958CCDC = 1;
    qword_1E958CCE0 = (uint64_t)"GlobeTexturedShader";
    unk_1E958CCE8 = 0;
    qword_1E958CCF0 = 0;
    unk_1E958CCF8 = &ggl::globeTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1E958CD00 = 1;
    unk_1E958CD08 = &ggl::globeTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1E958CD10 = 0;
    unk_1E958CD18 = &ggl::globeTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1E958CD20 = 1;
    unk_1E958CD28 = &ggl::globeTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1E958CD38 = 0;
    unk_1E958CD40 = 0;
    qword_1E958CD30 = 1;
  }
}

void ggl::globeTexturedShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::globeTexturedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("GlobeTexturedShaderVertex");
    *(_DWORD *)algn_1E958CC64 = 0;
    qword_1E958CC68 = (uint64_t)"GlobeTexturedShader";
    unk_1E958CC70 = ggl::globeTexturedShaderVertShaderFunctionAttributes(void)::ref;
    qword_1E958CC78 = 1;
    unk_1E958CC80 = &ggl::globeTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1E958CC88 = 3;
    unk_1E958CC90 = &ggl::globeTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1E958CC98 = 0;
    unk_1E958CCA0 = &ggl::globeTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1E958CCA8 = 1;
    unk_1E958CCB0 = &ggl::globeTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1E958CCC0 = 0;
    unk_1E958CCC8 = 0;
    qword_1E958CCB8 = 1;
  }
}

void ggl::RouteLineShader::typedReflection(ggl::RouteLineShader *this)
{
  {
    if (v1)
    {
      ggl::RouteLineShader::typedReflection(void)::ref = (uint64_t)"RouteLineShader";
      ggl::routeLineShaderVertexFunctionDescriptor(v1);
      qword_1EB320DD0 = (uint64_t)&ggl::routeLineShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<22ul>("RouteLineShaderVertex");
      dword_1EB320DD8 = (int)v2;
      ggl::routeLineShaderFragmentFunctionDescriptor(v2);
      qword_1EB320DE0 = (uint64_t)&ggl::routeLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320DE8 = ggl::crc32::compute<24ul>("RouteLineShaderFragment");
      qword_1EB320DF0 = (uint64_t)ggl::routeLineShaderShaderConstants(void)::ref;
      unk_1EB320DF8 = 3;
      qword_1EB320E00 = (uint64_t)ggl::routeLineShaderShaderTextures(void)::ref;
      unk_1EB320E08 = 1;
      qword_1EB320E10 = (uint64_t)ggl::routeLineShaderShaderSamplers(void)::ref;
      unk_1EB320E18 = 1;
    }
  }
}

void ggl::routeLineShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("RouteLineShaderFragment");
    *(_DWORD *)algn_1EB3253C4 = 1;
    qword_1EB3253C8 = (uint64_t)"RouteLineShader";
    unk_1EB3253D0 = 0;
    qword_1EB3253D8 = 0;
    unk_1EB3253E0 = &ggl::routeLineShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3253E8 = 1;
    unk_1EB3253F0 = &ggl::routeLineShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3253F8 = 0;
    unk_1EB325400 = &ggl::routeLineShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325408 = 1;
    unk_1EB325410 = &ggl::routeLineShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325420 = 0;
    unk_1EB325428 = 0;
    qword_1EB325418 = 1;
  }
}

void ggl::routeLineShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("RouteLineShaderVertex");
    *(_DWORD *)algn_1EB324DFC = 0;
    qword_1EB324E00 = (uint64_t)"RouteLineShader";
    unk_1EB324E08 = ggl::routeLineShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324E10 = 1;
    unk_1EB324E18 = &ggl::routeLineShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324E20 = 3;
    unk_1EB324E28 = &ggl::routeLineShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324E30 = 0;
    unk_1EB324E38 = &ggl::routeLineShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324E40 = 0;
    unk_1EB324E48 = &ggl::routeLineShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324E58 = 0;
    unk_1EB324E60 = 0;
    qword_1EB324E50 = 0;
  }
}

void ggl::HillshadeShader::typedReflection(ggl::HillshadeShader *this)
{
  {
    if (v1)
    {
      ggl::HillshadeShader::typedReflection(void)::ref = (uint64_t)"HillshadeShader";
      ggl::hillshadeShaderVertexFunctionDescriptor(v1);
      qword_1EB317970 = (uint64_t)&ggl::hillshadeShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<22ul>("HillshadeShaderVertex");
      dword_1EB317978 = (int)v2;
      ggl::hillshadeShaderFragmentFunctionDescriptor(v2);
      qword_1EB317980 = (uint64_t)&ggl::hillshadeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB317988 = ggl::crc32::compute<24ul>("HillshadeShaderFragment");
      qword_1EB317990 = (uint64_t)ggl::hillshadeShaderShaderConstants(void)::ref;
      unk_1EB317998 = 3;
      qword_1EB3179A0 = (uint64_t)ggl::hillshadeShaderShaderTextures(void)::ref;
      unk_1EB3179A8 = 1;
      qword_1EB3179B0 = (uint64_t)&ggl::hillshadeShaderShaderSamplers(void)::ref;
      unk_1EB3179B8 = 1;
    }
  }
}

void ggl::hillshadeShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::hillshadeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("HillshadeShaderFragment");
    *(_DWORD *)algn_1EB317E54 = 1;
    qword_1EB317E58 = (uint64_t)"HillshadeShader";
    unk_1EB317E60 = 0;
    qword_1EB317E68 = 0;
    unk_1EB317E70 = &ggl::hillshadeShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB317E78 = 1;
    unk_1EB317E80 = &ggl::hillshadeShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB317E88 = 0;
    unk_1EB317E90 = &ggl::hillshadeShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB317E98 = 1;
    unk_1EB317EA0 = &ggl::hillshadeShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB317EB0 = 0;
    unk_1EB317EB8 = 0;
    qword_1EB317EA8 = 1;
  }
}

void ggl::hillshadeShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::hillshadeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("HillshadeShaderVertex");
    *(_DWORD *)algn_1EB317D6C = 0;
    qword_1EB317D70 = (uint64_t)"HillshadeShader";
    unk_1EB317D78 = ggl::hillshadeShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB317D80 = 1;
    unk_1EB317D88 = &ggl::hillshadeShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB317D90 = 2;
    unk_1EB317D98 = &ggl::hillshadeShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB317DA0 = 0;
    unk_1EB317DA8 = &ggl::hillshadeShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB317DB0 = 0;
    unk_1EB317DB8 = &ggl::hillshadeShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB317DC8 = 0;
    unk_1EB317DD0 = 0;
    qword_1EB317DC0 = 0;
  }
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls31StyleRouteLineMaskDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1CA1890(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls31StyleRouteLineMaskDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint8x8_t v10 = 0;
    }
    unint64_t v11 = &v10[24 * v6];
    *(void *)unint64_t v11 = 0x8E45E81B6E5A8E0ELL;
    *((void *)v11 + 1) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
    *((void *)v11 + 2) = 39;
    uint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      unint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x8E45E81B6E5A8E0ELL;
    *((void *)v3 + 1) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
    *((void *)v3 + 2) = 39;
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls20PassToCommandBuffersEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1CA1A50(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls20PassToCommandBuffersEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint8x8_t v10 = 0;
    }
    unint64_t v11 = &v10[24 * v6];
    *(void *)unint64_t v11 = 0xA7E255916A50AFB1;
    *((void *)v11 + 1) = "md::ls::PassToCommandBuffers]";
    *((void *)v11 + 2) = 28;
    uint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      unint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0xA7E255916A50AFB1;
    *((void *)v3 + 1) = "md::ls::PassToCommandBuffers]";
    *((void *)v3 + 2) = 28;
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls22RequiredPipelinePoolIDEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1CA1C10(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls22RequiredPipelinePoolIDEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint8x8_t v10 = 0;
    }
    unint64_t v11 = &v10[24 * v6];
    *(void *)unint64_t v11 = 0xE54E641F7C1F9B89;
    *((void *)v11 + 1) = "md::ls::RequiredPipelinePoolID]";
    *((void *)v11 + 2) = 30;
    uint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      unint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0xE54E641F7C1F9B89;
    *((void *)v3 + 1) = "md::ls::RequiredPipelinePoolID]";
    *((void *)v3 + 2) = 30;
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32CommandBufferDescriptionCreationEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1CA1DD0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32CommandBufferDescriptionCreationEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint8x8_t v10 = 0;
    }
    unint64_t v11 = &v10[24 * v6];
    *(void *)unint64_t v11 = 0x7C0654221E3B4567;
    *((void *)v11 + 1) = "md::ls::CommandBufferDescriptionCreation]";
    *((void *)v11 + 2) = 40;
    uint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      unint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x7C0654221E3B4567;
    *((void *)v3 + 1) = "md::ls::CommandBufferDescriptionCreation]";
    *((void *)v3 + 2) = 40;
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md3ita11FrameHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1CA1F90(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md3ita11FrameHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint8x8_t v10 = 0;
    }
    unint64_t v11 = &v10[24 * v6];
    *(void *)unint64_t v11 = 0x8004EB719AAADA5BLL;
    *((void *)v11 + 1) = "md::ita::FrameHandle]";
    *((void *)v11 + 2) = 20;
    uint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      unint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x8004EB719AAADA5BLL;
    *((void *)v3 + 1) = "md::ita::FrameHandle]";
    *((void *)v3 + 2) = 20;
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

void ggl::TexturedSolidRibbonShader::typedReflection(ggl::TexturedSolidRibbonShader *this)
{
  {
    if (v1)
    {
      ggl::TexturedSolidRibbonShader::typedReflection(void)::ref = (uint64_t)"TexturedSolidRibbonShader";
      ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(v1);
      qword_1EB322C98 = (uint64_t)&ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("TexturedSolidRibbonShaderVertex");
      dword_1EB322CA0 = (int)v2;
      ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(v2);
      qword_1EB322CA8 = (uint64_t)&ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322CB0 = ggl::crc32::compute<34ul>("TexturedSolidRibbonShaderFragment");
      qword_1EB322CB8 = (uint64_t)ggl::texturedSolidRibbonShaderShaderConstants(void)::ref;
      unk_1EB322CC0 = 4;
      qword_1EB322CC8 = (uint64_t)ggl::texturedSolidRibbonShaderShaderTextures(void)::ref;
      unk_1EB322CD0 = 2;
      qword_1EB322CD8 = (uint64_t)ggl::texturedSolidRibbonShaderShaderSamplers(void)::ref;
      unk_1EB322CE0 = 2;
    }
  }
}

void ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("TexturedSolidRibbonShaderFragment");
    *(_DWORD *)algn_1EB3295EC = 1;
    qword_1EB329600 = 0;
    unk_1EB329608 = &ggl::texturedSolidRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3295F0 = (uint64_t)"TexturedSolidRibbonShader";
    unk_1EB3295F8 = 0;
    qword_1EB329610 = 1;
    unk_1EB329618 = &ggl::texturedSolidRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329620 = 0;
    unk_1EB329628 = &ggl::texturedSolidRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329630 = 2;
    unk_1EB329638 = &ggl::texturedSolidRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329648 = 0;
    unk_1EB329650 = 0;
    qword_1EB329640 = 2;
  }
}

void ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("TexturedSolidRibbonShaderVertex");
    *(_DWORD *)algn_1EB328B04 = 0;
    qword_1EB328B08 = (uint64_t)"TexturedSolidRibbonShader";
    unk_1EB328B10 = ggl::texturedSolidRibbonShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB328B18 = 1;
    unk_1EB328B20 = &ggl::texturedSolidRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328B28 = 4;
    unk_1EB328B30 = &ggl::texturedSolidRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328B38 = 0;
    unk_1EB328B40 = &ggl::texturedSolidRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328B48 = 0;
    unk_1EB328B50 = &ggl::texturedSolidRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328B60 = 0;
    unk_1EB328B68 = 0;
    qword_1EB328B58 = 0;
  }
}

void ggl::GlyphWithNormalHaloShader::typedReflection(ggl::GlyphWithNormalHaloShader *this)
{
  {
    if (v1)
    {
      ggl::GlyphWithNormalHaloShader::typedReflection(void)::ref = (uint64_t)"GlyphWithNormalHaloShader";
      ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(v1);
      qword_1EB322A00 = (uint64_t)&ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("GlyphWithNormalHaloShaderVertex");
      dword_1EB322A08 = (int)v2;
      ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(v2);
      qword_1EB322A10 = (uint64_t)&ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322A18 = ggl::crc32::compute<34ul>("GlyphWithNormalHaloShaderFragment");
      qword_1EB322A20 = (uint64_t)ggl::glyphWithNormalHaloShaderShaderConstants(void)::ref;
      unk_1EB322A28 = 4;
      qword_1EB322A30 = (uint64_t)ggl::glyphWithNormalHaloShaderShaderTextures(void)::ref;
      unk_1EB322A38 = 2;
      qword_1EB322A40 = (uint64_t)ggl::glyphWithNormalHaloShaderShaderSamplers(void)::ref;
      unk_1EB322A48 = 2;
    }
  }
}

void ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("GlyphWithNormalHaloShaderFragment");
    *(_DWORD *)algn_1EB329254 = 1;
    qword_1EB329258 = (uint64_t)"GlyphWithNormalHaloShader";
    unk_1EB329260 = 0;
    qword_1EB329268 = 0;
    unk_1EB329270 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329278 = 2;
    unk_1EB329280 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329288 = 0;
    unk_1EB329290 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329298 = 1;
    unk_1EB3292A0 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3292B0 = 0;
    unk_1EB3292B8 = 0;
    qword_1EB3292A8 = 1;
  }
}

void ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("GlyphWithNormalHaloShaderVertex");
    *(_DWORD *)algn_1EB3286FC = 0;
    qword_1EB328700 = (uint64_t)"GlyphWithNormalHaloShader";
    unk_1EB328708 = ggl::glyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB328710 = 1;
    unk_1EB328718 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328720 = 2;
    unk_1EB328728 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328730 = 0;
    unk_1EB328738 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328740 = 1;
    unk_1EB328748 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328758 = 0;
    unk_1EB328760 = 0;
    qword_1EB328750 = 1;
  }
}

void ggl::TexturedSRGBBlendShader::typedReflection(ggl::TexturedSRGBBlendShader *this)
{
  {
    if (v1)
    {
      ggl::TexturedSRGBBlendShader::typedReflection(void)::ref = (uint64_t)"TexturedSRGBBlendShader";
      ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(v1);
      qword_1EB3225D0 = (uint64_t)&ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("TexturedSRGBBlendShaderVertex");
      dword_1EB3225D8 = (int)v2;
      ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(v2);
      qword_1EB3225E0 = (uint64_t)&ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3225E8 = ggl::crc32::compute<32ul>("TexturedSRGBBlendShaderFragment");
      qword_1EB3225F0 = (uint64_t)ggl::texturedSRGBBlendShaderShaderConstants(void)::ref;
      unk_1EB3225F8 = 5;
      qword_1EB322600 = (uint64_t)ggl::texturedSRGBBlendShaderShaderTextures(void)::ref;
      unk_1EB322608 = 1;
      qword_1EB322610 = (uint64_t)ggl::texturedSRGBBlendShaderShaderSamplers(void)::ref;
      unk_1EB322618 = 1;
    }
  }
}

void ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("TexturedSRGBBlendShaderFragment");
    *(_DWORD *)algn_1EB328A94 = 1;
    qword_1EB328A98 = (uint64_t)"TexturedSRGBBlendShader";
    unk_1EB328AA0 = 0;
    qword_1EB328AA8 = 0;
    unk_1EB328AB0 = &ggl::texturedSRGBBlendShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328AB8 = 2;
    unk_1EB328AC0 = &ggl::texturedSRGBBlendShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328AC8 = 0;
    unk_1EB328AD0 = &ggl::texturedSRGBBlendShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328AD8 = 1;
    unk_1EB328AE0 = &ggl::texturedSRGBBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328AF0 = 0;
    unk_1EB328AF8 = 0;
    qword_1EB328AE8 = 1;
  }
}

void ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("TexturedSRGBBlendShaderVertex");
    *(_DWORD *)algn_1EB327C3C = 0;
    qword_1EB327C40 = (uint64_t)"TexturedSRGBBlendShader";
    unk_1EB327C48 = ggl::texturedSRGBBlendShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327C50 = 1;
    unk_1EB327C58 = &ggl::texturedSRGBBlendShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327C60 = 3;
    unk_1EB327C68 = &ggl::texturedSRGBBlendShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327C70 = 0;
    unk_1EB327C78 = &ggl::texturedSRGBBlendShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327C80 = 0;
    unk_1EB327C88 = &ggl::texturedSRGBBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327C98 = 0;
    unk_1EB327CA0 = 0;
    qword_1EB327C90 = 0;
  }
}

void ggl::FlyoverNightPolarShader::typedReflection(ggl::FlyoverNightPolarShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverNightPolarShader::typedReflection(void)::ref = (uint64_t)"FlyoverNightPolarShader";
      ggl::flyoverNightPolarShaderVertexFunctionDescriptor(v1);
      qword_1E95867D0 = (uint64_t)&ggl::flyoverNightPolarShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("FlyoverNightPolarShaderVertex");
      dword_1E95867D8 = (int)v2;
      ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(v2);
      qword_1E95867E0 = (uint64_t)&ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(void)::ref;
      dword_1E95867E8 = ggl::crc32::compute<32ul>("FlyoverNightPolarShaderFragment");
      qword_1E95867F0 = (uint64_t)ggl::flyoverNightPolarShaderShaderConstants(void)::ref;
      unk_1E95867F8 = 6;
      qword_1E9586800 = (uint64_t)ggl::flyoverNightPolarShaderShaderTextures(void)::ref;
      unk_1E9586808 = 3;
      qword_1E9586810 = (uint64_t)ggl::flyoverNightPolarShaderShaderSamplers(void)::ref;
      unk_1E9586818 = 3;
    }
  }
}

void ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverNightPolarShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("FlyoverNightPolarShaderFragment");
    *(_DWORD *)algn_1E958C2E4 = 1;
    qword_1E958C2E8 = (uint64_t)"FlyoverNightPolarShader";
    unk_1E958C2F0 = 0;
    qword_1E958C2F8 = 0;
    unk_1E958C300 = &ggl::flyoverNightPolarShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1E958C308 = 2;
    unk_1E958C310 = &ggl::flyoverNightPolarShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1E958C318 = 0;
    unk_1E958C320 = &ggl::flyoverNightPolarShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1E958C328 = 2;
    unk_1E958C330 = &ggl::flyoverNightPolarShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1E958C340 = 0;
    unk_1E958C348 = 0;
    qword_1E958C338 = 2;
  }
}

void ggl::flyoverNightPolarShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverNightPolarShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverNightPolarShaderVertex");
    *(_DWORD *)algn_1E958C1FC = 0;
    qword_1E958C200 = (uint64_t)"FlyoverNightPolarShader";
    unk_1E958C208 = ggl::flyoverNightPolarShaderVertShaderFunctionAttributes(void)::ref;
    qword_1E958C210 = 1;
    unk_1E958C218 = &ggl::flyoverNightPolarShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1E958C220 = 6;
    unk_1E958C228 = &ggl::flyoverNightPolarShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1E958C230 = 0;
    unk_1E958C238 = &ggl::flyoverNightPolarShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1E958C240 = 1;
    unk_1E958C248 = &ggl::flyoverNightPolarShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1E958C258 = 0;
    unk_1E958C260 = 0;
    qword_1E958C250 = 1;
  }
}

void ggl::SpecularLandmarkShader::typedReflection(ggl::SpecularLandmarkShader *this)
{
  {
    if (v1)
    {
      ggl::SpecularLandmarkShader::typedReflection(void)::ref = (uint64_t)"SpecularLandmarkShader";
      ggl::specularLandmarkShaderVertexFunctionDescriptor(v1);
      qword_1EB322220 = (uint64_t)&ggl::specularLandmarkShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<29ul>("SpecularLandmarkShaderVertex");
      dword_1EB322228 = (int)v2;
      ggl::specularLandmarkShaderFragmentFunctionDescriptor(v2);
      qword_1EB322230 = (uint64_t)&ggl::specularLandmarkShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322238 = ggl::crc32::compute<31ul>("SpecularLandmarkShaderFragment");
      qword_1EB322240 = (uint64_t)ggl::specularLandmarkShaderShaderConstants(void)::ref;
      unk_1EB322248 = 7;
      qword_1EB322250 = (uint64_t)ggl::specularLandmarkShaderShaderTextures(void)::ref;
      unk_1EB322258 = 1;
      qword_1EB322260 = (uint64_t)&ggl::specularLandmarkShaderShaderSamplers(void)::ref;
      unk_1EB322268 = 1;
    }
  }
}

void ggl::specularLandmarkShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::specularLandmarkShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("SpecularLandmarkShaderFragment");
    *(_DWORD *)algn_1EB328374 = 1;
    qword_1EB328378 = (uint64_t)"SpecularLandmarkShader";
    unk_1EB328380 = 0;
    qword_1EB328388 = 0;
    unk_1EB328390 = &ggl::specularLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328398 = 4;
    unk_1EB3283A0 = &ggl::specularLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3283A8 = 0;
    unk_1EB3283B0 = &ggl::specularLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3283B8 = 1;
    unk_1EB3283C0 = &ggl::specularLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3283D0 = 0;
    unk_1EB3283D8 = 0;
    qword_1EB3283C8 = 1;
  }
}

void ggl::specularLandmarkShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::specularLandmarkShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("SpecularLandmarkShaderVertex");
    *(_DWORD *)algn_1EB32754C = 0;
    qword_1EB327550 = (uint64_t)"SpecularLandmarkShader";
    unk_1EB327558 = ggl::specularLandmarkShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327560 = 1;
    unk_1EB327568 = &ggl::specularLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327570 = 6;
    unk_1EB327578 = &ggl::specularLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327580 = 0;
    unk_1EB327588 = &ggl::specularLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327590 = 0;
    unk_1EB327598 = &ggl::specularLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3275A8 = 0;
    unk_1EB3275B0 = 0;
    qword_1EB3275A0 = 0;
  }
}

void ggl::SpecularBuildingShader::typedReflection(ggl::SpecularBuildingShader *this)
{
  {
    if (v1)
    {
      ggl::SpecularBuildingShader::typedReflection(void)::ref = (uint64_t)"SpecularBuildingShader";
      ggl::specularBuildingShaderVertexFunctionDescriptor(v1);
      qword_1EB3221C8 = (uint64_t)&ggl::specularBuildingShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<29ul>("SpecularBuildingShaderVertex");
      dword_1EB3221D0 = (int)v2;
      ggl::specularBuildingShaderFragmentFunctionDescriptor(v2);
      qword_1EB3221D8 = (uint64_t)&ggl::specularBuildingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3221E0 = ggl::crc32::compute<31ul>("SpecularBuildingShaderFragment");
      qword_1EB3221E8 = (uint64_t)ggl::specularBuildingShaderShaderConstants(void)::ref;
      unk_1EB3221F0 = 7;
      qword_1EB3221F8 = (uint64_t)ggl::specularBuildingShaderShaderTextures(void)::ref;
      unk_1EB322200 = 1;
      qword_1EB322208 = (uint64_t)&ggl::specularBuildingShaderShaderSamplers(void)::ref;
      unk_1EB322210 = 1;
    }
  }
}

void ggl::specularBuildingShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::specularBuildingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("SpecularBuildingShaderFragment");
    *(_DWORD *)algn_1EB3282FC = 1;
    qword_1EB328300 = (uint64_t)"SpecularBuildingShader";
    unk_1EB328308 = 0;
    qword_1EB328310 = 0;
    unk_1EB328318 = &ggl::specularBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328320 = 4;
    unk_1EB328328 = &ggl::specularBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328330 = 0;
    unk_1EB328338 = &ggl::specularBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328340 = 1;
    unk_1EB328348 = &ggl::specularBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328358 = 0;
    unk_1EB328360 = 0;
    qword_1EB328350 = 1;
  }
}

void ggl::specularBuildingShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::specularBuildingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("SpecularBuildingShaderVertex");
    *(_DWORD *)algn_1EB3274D4 = 0;
    qword_1EB3274D8 = (uint64_t)"SpecularBuildingShader";
    unk_1EB3274E0 = ggl::specularBuildingShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3274E8 = 1;
    unk_1EB3274F0 = &ggl::specularBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3274F8 = 6;
    unk_1EB327500 = &ggl::specularBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327508 = 0;
    unk_1EB327510 = &ggl::specularBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327518 = 0;
    unk_1EB327520 = &ggl::specularBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327530 = 0;
    unk_1EB327538 = 0;
    qword_1EB327528 = 0;
  }
}

void ggl::DiffuseBuildingShader::typedReflection(ggl::DiffuseBuildingShader *this)
{
  {
    if (v1)
    {
      ggl::DiffuseBuildingShader::typedReflection(void)::ref = (uint64_t)"DiffuseBuildingShader";
      ggl::diffuseBuildingShaderVertexFunctionDescriptor(v1);
      qword_1EB321D20 = (uint64_t)&ggl::diffuseBuildingShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("DiffuseBuildingShaderVertex");
      dword_1EB321D28 = (int)v2;
      ggl::diffuseBuildingShaderFragmentFunctionDescriptor(v2);
      qword_1EB321D30 = (uint64_t)&ggl::diffuseBuildingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321D38 = ggl::crc32::compute<30ul>("DiffuseBuildingShaderFragment");
      qword_1EB321D40 = (uint64_t)ggl::diffuseBuildingShaderShaderConstants(void)::ref;
      unk_1EB321D48 = 7;
      qword_1EB321D50 = (uint64_t)ggl::diffuseBuildingShaderShaderTextures(void)::ref;
      unk_1EB321D58 = 1;
      qword_1EB321D60 = (uint64_t)&ggl::diffuseBuildingShaderShaderSamplers(void)::ref;
      unk_1EB321D68 = 1;
    }
  }
}

void ggl::diffuseBuildingShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::diffuseBuildingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("DiffuseBuildingShaderFragment");
    *(_DWORD *)algn_1EB327814 = 1;
    qword_1EB327818 = (uint64_t)"DiffuseBuildingShader";
    unk_1EB327820 = 0;
    qword_1EB327828 = 0;
    unk_1EB327830 = &ggl::diffuseBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327838 = 3;
    unk_1EB327840 = &ggl::diffuseBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327848 = 0;
    unk_1EB327850 = &ggl::diffuseBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327858 = 1;
    unk_1EB327860 = &ggl::diffuseBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327870 = 0;
    unk_1EB327878 = 0;
    qword_1EB327868 = 1;
  }
}

void ggl::diffuseBuildingShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::diffuseBuildingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DiffuseBuildingShaderVertex");
    *(_DWORD *)algn_1EB3268FC = 0;
    qword_1EB326900 = (uint64_t)"DiffuseBuildingShader";
    unk_1EB326908 = ggl::diffuseBuildingShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326910 = 1;
    unk_1EB326918 = &ggl::diffuseBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326920 = 6;
    unk_1EB326928 = &ggl::diffuseBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326930 = 0;
    unk_1EB326938 = &ggl::diffuseBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326940 = 0;
    unk_1EB326948 = &ggl::diffuseBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326958 = 0;
    unk_1EB326960 = 0;
    qword_1EB326950 = 0;
  }
}

void ggl::PolygonStrokeShader::typedReflection(ggl::PolygonStrokeShader *this)
{
  {
    if (v1)
    {
      ggl::PolygonStrokeShader::typedReflection(void)::ref = (uint64_t)"PolygonStrokeShader";
      ggl::polygonStrokeShaderVertexFunctionDescriptor(v1);
      qword_1EB321930 = (uint64_t)&ggl::polygonStrokeShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("PolygonStrokeShaderVertex");
      dword_1EB321938 = (int)v2;
      ggl::polygonStrokeShaderFragmentFunctionDescriptor(v2);
      qword_1EB321940 = (uint64_t)&ggl::polygonStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321948 = ggl::crc32::compute<28ul>("PolygonStrokeShaderFragment");
      qword_1EB321950 = (uint64_t)ggl::polygonStrokeShaderShaderConstants(void)::ref;
      unk_1EB321958 = 3;
      qword_1EB321960 = (uint64_t)ggl::polygonStrokeShaderShaderTextures(void)::ref;
      unk_1EB321968 = 2;
      qword_1EB321970 = (uint64_t)ggl::polygonStrokeShaderShaderSamplers(void)::ref;
      unk_1EB321978 = 2;
    }
  }
}

void ggl::polygonStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PolygonStrokeShaderFragment");
    *(_DWORD *)algn_1EB326DF4 = 1;
    qword_1EB326E08 = 0;
    unk_1EB326E10 = &ggl::polygonStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326DF8 = (uint64_t)"PolygonStrokeShader";
    unk_1EB326E00 = 0;
    qword_1EB326E18 = 1;
    unk_1EB326E20 = &ggl::polygonStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326E28 = 0;
    unk_1EB326E30 = &ggl::polygonStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326E38 = 2;
    unk_1EB326E40 = &ggl::polygonStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326E50 = 0;
    unk_1EB326E58 = 0;
    qword_1EB326E48 = 2;
  }
}

void ggl::polygonStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("PolygonStrokeShaderVertex");
    *(_DWORD *)algn_1EB325EFC = 0;
    qword_1EB325F00 = (uint64_t)"PolygonStrokeShader";
    unk_1EB325F08 = ggl::polygonStrokeShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325F10 = 1;
    unk_1EB325F18 = &ggl::polygonStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325F20 = 3;
    unk_1EB325F28 = &ggl::polygonStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325F30 = 0;
    unk_1EB325F38 = &ggl::polygonStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325F40 = 0;
    unk_1EB325F48 = &ggl::polygonStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325F58 = 0;
    unk_1EB325F60 = 0;
    qword_1EB325F50 = 0;
  }
}

void ggl::LinearDepthShader::typedReflection(ggl::LinearDepthShader *this)
{
  {
    if (v1)
    {
      ggl::LinearDepthShader::typedReflection(void)::ref = (uint64_t)"LinearDepthShader";
      ggl::linearDepthShaderVertexFunctionDescriptor(v1);
      qword_1EB31BE30 = (uint64_t)&ggl::linearDepthShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("LinearDepthShaderVertex");
      dword_1EB31BE38 = (int)v2;
      ggl::linearDepthShaderFragmentFunctionDescriptor(v2);
      qword_1EB31BE40 = (uint64_t)&ggl::linearDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31BE48 = ggl::crc32::compute<26ul>("LinearDepthShaderFragment");
      qword_1EB31BE50 = (uint64_t)ggl::linearDepthShaderShaderConstants(void)::ref;
      unk_1EB31BE58 = 6;
      qword_1EB31BE60 = (uint64_t)&ggl::linearDepthShaderShaderTextures(void)::ref;
      unk_1EB31BE68 = 0;
      qword_1EB31BE70 = (uint64_t)&ggl::linearDepthShaderShaderSamplers(void)::ref;
      unk_1EB31BE78 = 0;
    }
  }
}

void ggl::linearDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::linearDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("LinearDepthShaderFragment");
    *(_DWORD *)algn_1EB31C7D4 = 1;
    qword_1EB31C7D8 = (uint64_t)"LinearDepthShader";
    unk_1EB31C7E0 = 0;
    qword_1EB31C7E8 = 0;
    unk_1EB31C7F0 = &ggl::linearDepthShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31C7F8 = 2;
    unk_1EB31C800 = &ggl::linearDepthShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31C808 = 0;
    unk_1EB31C810 = &ggl::linearDepthShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31C818 = 0;
    unk_1EB31C820 = &ggl::linearDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31C830 = 0;
    unk_1EB31C838 = 0;
    qword_1EB31C828 = 0;
  }
}

void ggl::linearDepthShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::linearDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("LinearDepthShaderVertex");
    *(_DWORD *)algn_1EB31C75C = 0;
    qword_1EB31C760 = (uint64_t)"LinearDepthShader";
    unk_1EB31C768 = ggl::linearDepthShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31C770 = 3;
    unk_1EB31C778 = &ggl::linearDepthShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31C780 = 6;
    unk_1EB31C788 = &ggl::linearDepthShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31C790 = 2;
    unk_1EB31C798 = &ggl::linearDepthShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31C7A0 = 0;
    unk_1EB31C7A8 = &ggl::linearDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31C7B8 = 0;
    unk_1EB31C7C0 = 0;
    qword_1EB31C7B0 = 0;
  }
}

void ggl::SDFGlyphSuperSampleShader::typedReflection(ggl::SDFGlyphSuperSampleShader *this)
{
  {
    if (v1)
    {
      ggl::SDFGlyphSuperSampleShader::typedReflection(void)::ref = (uint64_t)"SDFGlyphSuperSampleShader";
      ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(v1);
      qword_1EB322B10 = (uint64_t)&ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("SDFGlyphSuperSampleShaderVertex");
      dword_1EB322B18 = (int)v2;
      ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(v2);
      qword_1EB322B20 = (uint64_t)&ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322B28 = ggl::crc32::compute<34ul>("SDFGlyphSuperSampleShaderFragment");
      qword_1EB322B30 = (uint64_t)ggl::sDFGlyphSuperSampleShaderShaderConstants(void)::ref;
      unk_1EB322B38 = 6;
      qword_1EB322B40 = (uint64_t)ggl::sDFGlyphSuperSampleShaderShaderTextures(void)::ref;
      unk_1EB322B48 = 3;
      qword_1EB322B50 = (uint64_t)ggl::sDFGlyphSuperSampleShaderShaderSamplers(void)::ref;
      unk_1EB322B58 = 3;
    }
  }
}

void ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("SDFGlyphSuperSampleShaderFragment");
    *(_DWORD *)algn_1EB329494 = 1;
    qword_1EB329498 = (uint64_t)"SDFGlyphSuperSampleShader";
    unk_1EB3294A0 = 0;
    qword_1EB3294A8 = 0;
    unk_1EB3294B0 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3294B8 = 2;
    unk_1EB3294C0 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3294C8 = 0;
    unk_1EB3294D0 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3294D8 = 1;
    unk_1EB3294E0 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3294F0 = 0;
    unk_1EB3294F8 = 0;
    qword_1EB3294E8 = 1;
  }
}

void ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("SDFGlyphSuperSampleShaderVertex");
    *(_DWORD *)algn_1EB32893C = 0;
    qword_1EB328940 = (uint64_t)"SDFGlyphSuperSampleShader";
    unk_1EB328948 = ggl::sDFGlyphSuperSampleShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB328950 = 1;
    unk_1EB328958 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328960 = 4;
    unk_1EB328968 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328970 = 0;
    unk_1EB328978 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328980 = 2;
    unk_1EB328988 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328998 = 0;
    unk_1EB3289A0 = 0;
    qword_1EB328990 = 2;
  }
}

void ggl::Glyph3dLowPrecisionShader::typedReflection(ggl::Glyph3dLowPrecisionShader *this)
{
  {
    if (v1)
    {
      ggl::Glyph3dLowPrecisionShader::typedReflection(void)::ref = (uint64_t)"Glyph3dLowPrecisionShader";
      ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(v1);
      qword_1EB3229A0 = (uint64_t)&ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("Glyph3dLowPrecisionShaderVertex");
      dword_1EB3229A8 = (int)v2;
      ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(v2);
      qword_1EB3229B0 = (uint64_t)&ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3229B8 = ggl::crc32::compute<34ul>("Glyph3dLowPrecisionShaderFragment");
      qword_1EB3229C0 = (uint64_t)ggl::glyph3dLowPrecisionShaderShaderConstants(void)::ref;
      unk_1EB3229C8 = 6;
      qword_1EB3229D0 = (uint64_t)ggl::glyph3dLowPrecisionShaderShaderTextures(void)::ref;
      unk_1EB3229D8 = 3;
      qword_1EB3229E0 = (uint64_t)ggl::glyph3dLowPrecisionShaderShaderSamplers(void)::ref;
      unk_1EB3229E8 = 3;
    }
  }
}

void ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("Glyph3dLowPrecisionShaderFragment");
    *(_DWORD *)algn_1EB3291E4 = 1;
    qword_1EB3291E8 = (uint64_t)"Glyph3dLowPrecisionShader";
    unk_1EB3291F0 = 0;
    qword_1EB3291F8 = 0;
    unk_1EB329200 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329208 = 2;
    unk_1EB329210 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329218 = 0;
    unk_1EB329220 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329228 = 1;
    unk_1EB329230 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329240 = 0;
    unk_1EB329248 = 0;
    qword_1EB329238 = 1;
  }
}

void ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("Glyph3dLowPrecisionShaderVertex");
    *(_DWORD *)algn_1EB32868C = 0;
    qword_1EB328690 = (uint64_t)"Glyph3dLowPrecisionShader";
    unk_1EB328698 = ggl::glyph3dLowPrecisionShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3286A0 = 1;
    unk_1EB3286A8 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3286B0 = 4;
    unk_1EB3286B8 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3286C0 = 0;
    unk_1EB3286C8 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3286D0 = 2;
    unk_1EB3286D8 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3286E8 = 0;
    unk_1EB3286F0 = 0;
    qword_1EB3286E0 = 2;
  }
}

void ggl::Glyph3dRaymarchShader::typedReflection(ggl::Glyph3dRaymarchShader *this)
{
  {
    if (v1)
    {
      ggl::Glyph3dRaymarchShader::typedReflection(void)::ref = (uint64_t)"Glyph3dRaymarchShader";
      ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(v1);
      qword_1EB32BD10 = (uint64_t)&ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("Glyph3dRaymarchShaderVertex");
      dword_1EB32BD18 = (int)v2;
      ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BD20 = (uint64_t)&ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BD28 = ggl::crc32::compute<30ul>("Glyph3dRaymarchShaderFragment");
      qword_1EB32BD30 = (uint64_t)ggl::glyph3dRaymarchShaderShaderConstants(void)::ref;
      unk_1EB32BD38 = 6;
      qword_1EB32BD40 = (uint64_t)ggl::glyph3dRaymarchShaderShaderTextures(void)::ref;
      unk_1EB32BD48 = 3;
      qword_1EB32BD50 = (uint64_t)ggl::glyph3dRaymarchShaderShaderSamplers(void)::ref;
      unk_1EB32BD58 = 3;
    }
  }
}

void ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("Glyph3dRaymarchShaderFragment");
    *(_DWORD *)algn_1EB32C544 = 1;
    qword_1EB32C548 = (uint64_t)"Glyph3dRaymarchShader";
    unk_1EB32C550 = 0;
    qword_1EB32C558 = 0;
    unk_1EB32C560 = &ggl::glyph3dRaymarchShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C568 = 2;
    unk_1EB32C570 = &ggl::glyph3dRaymarchShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C578 = 0;
    unk_1EB32C580 = &ggl::glyph3dRaymarchShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C588 = 1;
    unk_1EB32C590 = &ggl::glyph3dRaymarchShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C5A0 = 0;
    unk_1EB32C5A8 = 0;
    qword_1EB32C598 = 1;
  }
}

void ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("Glyph3dRaymarchShaderVertex");
    *(_DWORD *)algn_1EB32C3EC = 0;
    qword_1EB32C3F0 = (uint64_t)"Glyph3dRaymarchShader";
    unk_1EB32C3F8 = ggl::glyph3dRaymarchShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32C400 = 1;
    unk_1EB32C408 = &ggl::glyph3dRaymarchShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C410 = 4;
    unk_1EB32C418 = &ggl::glyph3dRaymarchShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C420 = 0;
    unk_1EB32C428 = &ggl::glyph3dRaymarchShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C430 = 2;
    unk_1EB32C438 = &ggl::glyph3dRaymarchShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C448 = 0;
    unk_1EB32C450 = 0;
    qword_1EB32C440 = 2;
  }
}

uint64_t ggl::VenueWall::MeshPipelineState::MeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int8x16_t v82 = a4;
    long long v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::VenueWall::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B7C0 = 1;
          }
          ggl::VenueWall::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E958BB98 = &ggl::VenueWall::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1E958BBA0 = 0;
          {
            ggl::VenueWall::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E958BC30 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E958BC38 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E958BC40 = ggl::VenueWall::Wall::reflection(void)::reflection;
          }
          qword_1E958BBA8 = (uint64_t)&ggl::VenueWall::pipelineDataMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E958BBB0 = xmmword_1A28FE1F0;
        }
      }
      ggl::VenueWall::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueWall::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::VenueWallShader::typedReflection(v83);
      qword_1EB319D40 = (uint64_t)&ggl::VenueWallShader::typedReflection(void)::ref;
      {
        ggl::VenueWall::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E958BD30 = 0;
        qword_1E958BD38 = (uint64_t)"";
        dword_1E958BD40 = 0;
        qword_1E958BD48 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E958BD50 = 4;
      }
      qword_1EB319D48 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EB319D50 = 1;
      qword_1EB319D58 = 0;
      unk_1EB319D60 = 1;
      qword_1EB319D68 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB319D70 = 0;
      {
        ggl::VenueWall::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E958BC70 = 0;
        qword_1E958BC78 = (uint64_t)"view";
        dword_1E958BC80 = 3;
        qword_1E958BC88 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E958BC90 = xmmword_1A28FCEB0;
        qword_1E958BCA0 = 1;
        unk_1E958BCA8 = "lightConfig";
        dword_1E958BCB0 = 3;
        qword_1E958BCB8 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantLightConfigBinding(void)::reflection;
        unk_1E958BCC0 = xmmword_1A28FC860;
        qword_1E958BCD0 = 2;
        unk_1E958BCD8 = "gradient";
        dword_1E958BCE0 = 3;
        qword_1E958BCE8 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1E958BCF0 = xmmword_1A28FC950;
        qword_1E958BD00 = 3;
        unk_1E958BD08 = "wall";
        dword_1E958BD10 = 3;
        qword_1E958BD18 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantWallBinding(void)::reflection;
        unk_1E958BD20 = 7;
      }
      qword_1EB319D78 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB319D80 = 4;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  unint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::VenueWall::MeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF562FB0;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void ggl::VenueWallShader::typedReflection(ggl::VenueWallShader *this)
{
  {
    if (v1)
    {
      ggl::VenueWallShader::typedReflection(void)::ref = (uint64_t)"VenueWallShader";
      ggl::venueWallShaderVertexFunctionDescriptor(v1);
      qword_1EB320E90 = (uint64_t)&ggl::venueWallShaderVertexFunctionDescriptor(void)::ref;
      unint64_t v2 = (ggl *)ggl::crc32::compute<22ul>("VenueWallShaderVertex");
      dword_1EB320E98 = (int)v2;
      ggl::venueWallShaderFragmentFunctionDescriptor(v2);
      qword_1EB320EA0 = (uint64_t)&ggl::venueWallShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320EA8 = ggl::crc32::compute<24ul>("VenueWallShaderFragment");
      qword_1EB320EB0 = (uint64_t)ggl::venueWallShaderShaderConstants(void)::ref;
      unk_1EB320EB8 = 4;
      qword_1EB320EC0 = (uint64_t)ggl::venueWallShaderShaderTextures(void)::ref;
      unk_1EB320EC8 = 1;
      qword_1EB320ED0 = (uint64_t)ggl::venueWallShaderShaderSamplers(void)::ref;
      unk_1EB320ED8 = 1;
    }
  }
}

void ggl::venueWallShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::venueWallShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("VenueWallShaderFragment");
    *(_DWORD *)algn_1EB325604 = 1;
    qword_1EB325608 = (uint64_t)"VenueWallShader";
    unk_1EB325610 = 0;
    qword_1EB325618 = 0;
    unk_1EB325620 = &ggl::venueWallShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325628 = 0;
    unk_1EB325630 = &ggl::venueWallShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB325638 = 0;
    unk_1EB325640 = &ggl::venueWallShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325648 = 1;
    unk_1EB325650 = &ggl::venueWallShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325660 = 0;
    unk_1EB325668 = 0;
    qword_1EB325658 = 1;
  }
}

void ggl::venueWallShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::venueWallShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("VenueWallShaderVertex");
    *(_DWORD *)algn_1EB324EDC = 0;
    qword_1EB324EE0 = (uint64_t)"VenueWallShader";
    unk_1EB324EE8 = ggl::venueWallShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324EF0 = 1;
    unk_1EB324EF8 = &ggl::venueWallShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324F00 = 4;
    unk_1EB324F08 = &ggl::venueWallShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324F10 = 0;
    unk_1EB324F18 = &ggl::venueWallShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324F20 = 0;
    unk_1EB324F28 = &ggl::venueWallShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324F38 = 0;
    unk_1EB324F40 = 0;
    qword_1EB324F30 = 0;
  }
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 48;
  unint64_t v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderENS4_9PassCountEEEEZNS_18typelist_as_vectorIS7_EENS1_6vectorINS_8TypeInfoENS1_9allocatorISA_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(&v3);
}

void sub_1A1CA47A4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderENS4_9PassCountEEEEZNS_18typelist_as_vectorIS7_EENS1_6vectorINS_8TypeInfoENS1_9allocatorISA_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(char ***a1)
{
  unint64_t v2 = *a1;
  uint64_t v4 = (*a1)[1];
  unint64_t v3 = (unint64_t)(*a1)[2];
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = *v2;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *v2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_36;
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (void)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_37;
      }
      int16x8_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      int16x8_t v11 = 0;
    }
    int32x4_t v12 = &v11[24 * v7];
    *(void *)int32x4_t v12 = 0x9792F5BB2E6066F1;
    *((void *)v12 + 1) = "md::ls::FrameGraphBuilder]";
    *((void *)v12 + 2) = 25;
    uint64_t v5 = v12 + 24;
    if (v4 != v6)
    {
      do
      {
        long long v13 = *(_OWORD *)(v4 - 24);
        *((void *)v12 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v4 -= 24;
      }
      while (v4 != v6);
      uint64_t v4 = *v2;
    }
    char *v2 = v12;
    v2[1] = v5;
    v2[2] = &v11[24 * v10];
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *(void *)uint64_t v4 = 0x9792F5BB2E6066F1;
    *((void *)v4 + 1) = "md::ls::FrameGraphBuilder]";
    *((void *)v4 + 2) = 25;
    uint64_t v5 = v4 + 24;
  }
  v2[1] = v5;
  int8x16_t v14 = *a1;
  int32x4_t v16 = (*a1)[1];
  unint64_t v15 = (unint64_t)v14[2];
  if ((unint64_t)v16 < v15)
  {
    *(void *)int32x4_t v16 = 0x256170776297ADC7;
    *((void *)v16 + 1) = "md::ls::PassCount]";
    *((void *)v16 + 2) = 17;
    int8x16_t v17 = v16 + 24;
    goto LABEL_35;
  }
  int32x4_t v18 = *v14;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *v14) >> 3);
  unint64_t v20 = v19 + 1;
  if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_36:
  }
    abort();
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v18) >> 3);
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x555555555555555) {
    unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v22 = v20;
  }
  if (!v22)
  {
    int8x16_t v23 = 0;
    goto LABEL_30;
  }
  if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_37:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  int8x16_t v23 = (char *)operator new(24 * v22);
LABEL_30:
  int8x16_t v24 = &v23[24 * v19];
  *(void *)int8x16_t v24 = 0x256170776297ADC7;
  *((void *)v24 + 1) = "md::ls::PassCount]";
  *((void *)v24 + 2) = 17;
  int8x16_t v17 = v24 + 24;
  if (v16 != v18)
  {
    do
    {
      long long v25 = *(_OWORD *)(v16 - 24);
      *((void *)v24 - 1) = *((void *)v16 - 1);
      *(_OWORD *)(v24 - 24) = v25;
      v24 -= 24;
      v16 -= 24;
    }
    while (v16 != v18);
    int32x4_t v16 = *v14;
  }
  uint64_t *v14 = v24;
  v14[1] = v17;
  v14[2] = &v23[24 * v22];
  if (v16) {
    operator delete(v16);
  }
LABEL_35:
  v14[1] = v17;
}

void md::LabelRenderer::LabelRenderer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  unint64_t v7 = *(void **)a5;
  unint64_t v8 = *(void **)(a5 + 8);
  if (*(void **)a5 != v8)
  {
    while (*v7 != 0xD369A4D92C8FFE6CLL)
    {
      v7 += 5;
      if (v7 == v8) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = v7[3];
    unint64_t v9 = (std::__shared_weak_count *)v7[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  *(void *)(a1 + 8) = v10;
  int16x8_t v11 = *(void **)a5;
  int32x4_t v12 = *(void **)(a5 + 8);
  if (*(void **)a5 != v12)
  {
    while (*v11 != 0x6F66BE14E10A8F81)
    {
      v11 += 5;
      if (v11 == v12) {
        goto LABEL_18;
      }
    }
  }
  if (v11 == v12)
  {
LABEL_18:
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = v11[3];
    long long v13 = (std::__shared_weak_count *)v11[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 16) = v14;
  *(_OWORD *)(a1 + 40) = 0u;
  {
    operator new();
  }
  *(void *)(a1 + 56) = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  {
    operator new();
  }
  uint64_t v15 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  {
    operator new();
  }
  uint64_t v16 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v16;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  {
    operator new();
  }
  uint64_t v17 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  {
    operator new();
  }
  uint64_t v18 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v18;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  {
    operator new();
  }
  unint64_t v19 = (_OWORD *)(a1 + 472);
  uint64_t v20 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v20;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  {
    unint64_t v19 = (_OWORD *)(a1 + 472);
    if (v52) {
      operator new();
    }
  }
  *(void *)(a1 + 248) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(void *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_DWORD *)(a1 + 276) = 1065353216;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_DWORD *)(a1 + 316) = 1065353216;
  *(void *)(a1 + 320) = -1;
  *(unsigned char *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)((char *)v19 + 52) = xmmword_1A28FC970;
  *(void *)(a1 + 556) = 0;
  *(void *)(a1 + 540) = 0;
  *(void *)(a1 + 548) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 568) = a1 + 576;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(unsigned char *)(a1 + 640) = 0;
  *(_OWORD *)((char *)v19 + 172) = xmmword_1A28FC970;
  *(void *)(a1 + 676) = 0;
  *(void *)(a1 + 660) = 0;
  *(void *)(a1 + 668) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 688) = a1 + 696;
  v19[15] = 0u;
  unint64_t v21 = v19 + 15;
  *((unsigned char *)v21 + 48) = 0;
  v21[1] = 0u;
  v21[2] = 0u;
  *(_OWORD *)(a1 + 764) = xmmword_1A28FC970;
  *(void *)(a1 + 788) = 0;
  *(void *)(a1 + 780) = 0;
  *(void *)(a1 + 796) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 808) = a1 + 816;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  {
    {
      ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
    *(void *)algn_1EB32B710 = 1;
  }
  *(void *)(a1 + 1032) = "LabelGlyphMesh";
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1064) = 0;
  *(void *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1072) = 0;
  *(void *)(a1 + 1024) = &unk_1EF5606B0;
  *(void *)(a1 + 1040) = &unk_1EF5606D0;
  *(void *)(a1 + 1080) = &ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1104) = 0;
  *(void *)(a1 + 1096) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 1112) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1144) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 1152) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1136) = a1 + 1144;
  *(void *)(a1 + 1024) = &unk_1EF562820;
  *(void *)(a1 + 1040) = &unk_1EF562840;
  unint64_t v22 = *(void *)(*(void *)(a1 + 1080) + 8);
  uint64_t v23 = *(void *)(a1 + 1096);
  uint64_t v24 = *(void *)(a1 + 1088);
  unint64_t v25 = (v23 - v24) >> 4;
  unint64_t v26 = v22 - v25;
  uint64_t v57 = a1 + 1088;
  if (v22 <= v25)
  {
    if (v22 < v25)
    {
      for (uint64_t i = v24 + 16 * v22; v23 != i; v23 -= 16)
      {
        int8x16_t v28 = *(std::__shared_weak_count **)(v23 - 8);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v28->__on_zero_shared)(v28, v26);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      *(void *)(a1 + 1096) = i;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(a1 + 1088, v26);
  }
  *(void *)(a1 + 1024) = &unk_1EF560940;
  *(void *)(a1 + 1040) = &unk_1EF560960;
  {
    operator new();
  }
  uint64_t v29 = ggl::Allocator::instance(void)::alloc;
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(void *)uint64_t v30 = &unk_1EF584F18;
  *(void *)(v30 + 8) = 0;
  *(void *)(v30 + 16) = 0;
  *(void *)(v30 + 24) = v29;
  *(void *)(v30 + 32) = &unk_1EF55A1F0;
  *(void *)(v30 + 40) = 40;
  *(_DWORD *)(v30 + 48) = 6;
  long long v31 = 0uLL;
  *(_OWORD *)(v30 + 56) = 0u;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 88) = 0u;
  *(_OWORD *)(v30 + 104) = 0u;
  *(void *)(v30 + 120) = 0;
  {
    long long v31 = 0uLL;
    if (v53) {
      operator new();
    }
  }
  *(void *)(v30 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v30 + 136) = 0;
  *(_OWORD *)(v30 + 200) = v31;
  *(_OWORD *)(v30 + 184) = v31;
  *(_OWORD *)(v30 + 168) = v31;
  *(void *)(v30 + 216) = 0;
  *(void *)(v30 + 224) = -1;
  *(_OWORD *)(v30 + 152) = xmmword_1A28FCCA0;
  *(_DWORD *)(v30 + 144) = 0;
  *(void *)(v30 + 240) = "LabelGlyphMesh";
  *(void *)(v30 + 248) = &ggl::Glyph::defaultVboReflection;
  *(void *)(v30 + 32) = &unk_1EF55CB88;
  *(void *)(v30 + 232) = &unk_1EF55CBA8;
  int8x16_t v32 = *(void **)v57;
  int16x8_t v33 = *(std::__shared_weak_count **)(*(void *)v57 + 8);
  *int8x16_t v32 = v30 + 32;
  v32[1] = v30;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  {
    {
      ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Icon::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r;
    unk_1EB32B6E8 = 1;
  }
  *(void *)(a1 + 1240) = "LabelIconMesh";
  *(void *)(a1 + 1256) = 0;
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1264) = 0;
  *(_DWORD *)(a1 + 1280) = 0;
  *(void *)(a1 + 1232) = &unk_1EF5606B0;
  *(void *)(a1 + 1248) = &unk_1EF5606D0;
  *(void *)(a1 + 1288) = &ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r;
  *(void *)(a1 + 1296) = 0;
  *(void *)(a1 + 1312) = 0;
  *(void *)(a1 + 1304) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 1320) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 1336) = 0;
  *(void *)(a1 + 1328) = 0;
  *(void *)(a1 + 1352) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 1360) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 1368) = 0;
  *(void *)(a1 + 1344) = a1 + 1352;
  *(void *)(a1 + 1232) = &unk_1EF562720;
  *(void *)(a1 + 1248) = &unk_1EF562740;
  unint64_t v34 = *(void *)(*(void *)(a1 + 1288) + 8);
  uint64_t v35 = *(void *)(a1 + 1304);
  uint64_t v36 = *(void *)(a1 + 1296);
  unint64_t v37 = (v35 - v36) >> 4;
  unint64_t v38 = v34 - v37;
  uint64_t v56 = a1 + 1296;
  if (v34 <= v37)
  {
    if (v34 < v37)
    {
      for (uint64_t j = v36 + 16 * v34; v35 != j; v35 -= 16)
      {
        int8x16_t v40 = *(std::__shared_weak_count **)(v35 - 8);
        if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v40->__on_zero_shared)(v40, v38);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      *(void *)(a1 + 1304) = j;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(a1 + 1296, v38);
  }
  *(void *)(a1 + 1232) = &unk_1EF560620;
  *(void *)(a1 + 1248) = &unk_1EF560640;
  {
    operator new();
  }
  uint64_t v41 = ggl::Allocator::instance(void)::alloc;
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(void *)uint64_t v42 = &unk_1EF584DC8;
  *(void *)(v42 + 8) = 0;
  *(void *)(v42 + 16) = 0;
  *(void *)(v42 + 24) = v41;
  *(void *)(v42 + 32) = &unk_1EF55A1F0;
  *(void *)(v42 + 40) = 32;
  *(_DWORD *)(v42 + 48) = 6;
  long long v43 = 0uLL;
  *(_OWORD *)(v42 + 56) = 0u;
  *(_OWORD *)(v42 + 72) = 0u;
  *(_OWORD *)(v42 + 88) = 0u;
  *(_OWORD *)(v42 + 104) = 0u;
  *(void *)(v42 + 120) = 0;
  {
    long long v43 = 0uLL;
    if (v54) {
      operator new();
    }
  }
  *(void *)(v42 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v42 + 136) = 0;
  *(_OWORD *)(v42 + 200) = v43;
  *(_OWORD *)(v42 + 184) = v43;
  *(_OWORD *)(v42 + 168) = v43;
  *(void *)(v42 + 216) = 0;
  *(void *)(v42 + 224) = -1;
  *(_OWORD *)(v42 + 152) = xmmword_1A28FCCA0;
  *(_DWORD *)(v42 + 144) = 0;
  *(void *)(v42 + 240) = "LabelIconMesh";
  *(void *)(v42 + 248) = &ggl::Icon::defaultVboReflection;
  *(void *)(v42 + 32) = &unk_1EF55CA88;
  *(void *)(v42 + 232) = &unk_1EF55CAA8;
  int8x16_t v44 = *(void **)v56;
  int8x16_t v45 = *(std::__shared_weak_count **)(*(void *)v56 + 8);
  *int8x16_t v44 = v42 + 32;
  v44[1] = v42;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  long long v46 = 0uLL;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  {
    long long v46 = 0uLL;
    if (v55) {
      operator new();
    }
  }
  *(void *)(a1 + 1616) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1632) = v46;
  *(_OWORD *)(a1 + 1648) = v46;
  *(_OWORD *)(a1 + 1664) = v46;
  *(_OWORD *)(a1 + 1680) = v46;
  *(_OWORD *)(a1 + 1696) = v46;
  *(_OWORD *)(a1 + 1712) = v46;
  *(_OWORD *)(a1 + 1728) = v46;
  *(_OWORD *)(a1 + 1744) = v46;
  {
    operator new();
  }
  *(void *)(a1 + 1760) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(a1 + 1768) = 0;
  *(void *)(a1 + 1784) = 0;
  *(void *)(a1 + 1792) = 0;
  *(void *)(a1 + 1776) = 0;
  {
      operator new();
  }
  *(void *)(a1 + 1800) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(a1 + 1816) = 0;
  *(void *)(a1 + 1808) = 0;
  *(unsigned char *)(a1 + 1852) = 0;
  *(unsigned char *)(a1 + 1856) = 0;
  *(_WORD *)(a1 + 1860) = 0;
  *(void *)(a1 + 1824) = 0;
  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 1832) = 0;
  *(_WORD *)(a1 + 1848) = 0;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_DWORD *)(a1 + 296) = -1082130432;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 304) = _D0;
  operator new();
}

void sub_1A1CB1CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t a12, gss::FeatureAttributeSet *a13, gss::FeatureAttributeSet *a14, gss::FeatureAttributeSet *a15, gss::FeatureAttributeSet *a16, gss::FeatureAttributeSet *a17, md::LabelRenderModel *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,uint64_t *a32,uint64_t *a33,uint64_t *a34,uint64_t *a35,uint64_t a36,uint64_t a37,uint64_t **a38,uint64_t **a39,uint64_t **a40,md::LabelRenderDeviceBuffer *a41,md::LabelRenderDeviceBuffer *a42,uint64_t a43,uint64_t a44,uint64_t a45,ggl::Mesh *a46,ggl::Mesh *a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  std::function<ggl::Icon::WaypointPipelineSetup * ()(void)>::~function(v53);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v52);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v51);
  std::function<void ()(ggl::Icon::WaypointPipelineSetup *)>::~function(&STACK[0x450]);
  std::function<ggl::Icon::WaypointPipelineSetup * ()(void)>::~function(&STACK[0x470]);
  MEMORY[0x1A6239270](v51, 0x10A0C40D234DDC7);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x420]);
  STACK[0x380] = v50 + 848;
  STACK[0x370] = v50 + 864;
  STACK[0x360] = v50 + 880;
  STACK[0x350] = v50 + 896;
  STACK[0x340] = v50 + 912;
  STACK[0x330] = v50 + 928;
  STACK[0x320] = v50 + 944;
  STACK[0x310] = v50 + 960;
  STACK[0x300] = v50 + 976;
  STACK[0x2F0] = v50 + 1008;
  STACK[0x2E0] = v50 + 1168;
  STACK[0x2D0] = v50 + 1184;
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 1888);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 1872);
  std::unique_ptr<md::LabelRenderer::LabelMeshRenderStateSet>::~unique_ptr[abi:nn180100](a38);
  std::unique_ptr<md::LabelRenderer::LabelMeshRenderStateSet>::~unique_ptr[abi:nn180100](a39);
  std::unique_ptr<md::LabelRenderer::LabelMeshRenderStateSet>::~unique_ptr[abi:nn180100](a40);
  std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,mdm::Allocator>>::~vector[abi:nn180100](a10);
  md::LabelRenderDeviceBuffer::~LabelRenderDeviceBuffer(a41);
  md::LabelRenderDeviceBuffer::~LabelRenderDeviceBuffer(a42);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 1472);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a43);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a44);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a45);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 1408);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 1392);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 1376);
  ggl::Mesh::~Mesh(a46);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 1216);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 1200);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2D0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2E0]);
  ggl::Mesh::~Mesh(a47);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2F0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a37);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x300]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x310]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x320]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x330]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x340]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x350]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x360]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x370]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x380]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 832);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a36);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a12);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a50);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v50 + 456);
  std::unique_ptr<ggl::FragmentedPool<ggl::Icon::WaypointPipelineSetup>>::~unique_ptr[abi:nn180100](a22);
  std::unique_ptr<ggl::FragmentedPool<ggl::Icon::MaskedIconPipelineSetup>>::~unique_ptr[abi:nn180100](a23);
  std::unique_ptr<ggl::FragmentedPool<ggl::Icon::ShadowPipelineSetup>>::~unique_ptr[abi:nn180100](a24);
  std::unique_ptr<ggl::FragmentedPool<ggl::Icon::IconPipelineSetup>>::~unique_ptr[abi:nn180100](a25);
  std::unique_ptr<ggl::FragmentedPool<ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](a26);
  std::unique_ptr<ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](a27);
  std::unique_ptr<ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](a28);
  std::unique_ptr<ggl::FragmentedPool<ggl::SDFGlyph::SuperSamplePipelineSetup>>::~unique_ptr[abi:nn180100](a33);
  std::unique_ptr<ggl::FragmentedPool<ggl::SDFGlyph::HaloPipelineSetup>>::~unique_ptr[abi:nn180100](a34);
  std::unique_ptr<ggl::FragmentedPool<ggl::SDFGlyph::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](a35);
  std::unique_ptr<ggl::FragmentedPool<ggl::Glyph3d::RaymarchPipelineSetup>>::~unique_ptr[abi:nn180100](a29);
  std::unique_ptr<ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionHaloPipelineSetup>>::~unique_ptr[abi:nn180100](a30);
  std::unique_ptr<ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionPipelineSetup>>::~unique_ptr[abi:nn180100](a31);
  std::unique_ptr<ggl::FragmentedPool<ggl::Glyph3d::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](a32);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a11);
  gss::FeatureAttributeSet::~FeatureAttributeSet(a13);
  gss::FeatureAttributeSet::~FeatureAttributeSet(a14);
  gss::FeatureAttributeSet::~FeatureAttributeSet(a15);
  gss::FeatureAttributeSet::~FeatureAttributeSet(a16);
  gss::FeatureAttributeSet::~FeatureAttributeSet(a17);
  md::LabelRenderModel::~LabelRenderModel(a18);
  _Unwind_Resume(a1);
}

void md::LabelRenderer::LabelMeshRenderStateSet::LabelMeshRenderStateSet(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  operator new();
}

void sub_1A1CB27C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = v1[2];
  v1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[1];
  v1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v1;
  *uint64_t v1 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::GlyphWithNormalHalo::DefaultPipelineState::DefaultPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  {
    unint64_t v91 = a4;
    unint64_t v93 = a2;
    uint64_t v94 = a3;
    a2 = v93;
    a3 = v94;
    a4 = v91;
    if (v92)
    {
      {
        if (v92)
        {
          {
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(void *)algn_1EB32B710 = 1;
          }
          ggl::GlyphWithNormalHalo::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E957F598 = &ggl::GlyphWithNormalHalo::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1E957F5A0 = 0;
          {
            ggl::GlyphWithNormalHalo::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::ViewInScreenSpace::reflection(void)::reflection;
            unk_1E9585710 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1E9585718 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1E9585720 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1E957F5A8 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1E957F5B0 = xmmword_1A28FC860;
        }
      }
      ggl::GlyphWithNormalHalo::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GlyphWithNormalHalo::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::GlyphWithNormalHaloShader::typedReflection(v92);
      qword_1EB319150 = (uint64_t)&ggl::GlyphWithNormalHaloShader::typedReflection(void)::ref;
      {
        ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95857F0 = 0;
        qword_1E95857F8 = (uint64_t)"";
        dword_1E9585800 = 0;
        qword_1E9585808 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1E9585810 = 8;
      }
      qword_1EB319158 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      unk_1EB319160 = 1;
      qword_1EB319168 = 0;
      unk_1EB319170 = 2;
      qword_1EB319178 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1EB319180 = 0;
      {
        ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9585730 = 0;
        qword_1E9585738 = (uint64_t)"viewInScreenSpace";
        dword_1E9585740 = 3;
        qword_1E9585748 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantViewInScreenSpaceBinding(void)::reflection;
        *(int64x2_t *)algn_1E9585750 = vdupq_n_s64(1uLL);
        qword_1E9585760 = 1;
        unk_1E9585768 = "floatBufferTextureSize";
        dword_1E9585770 = 3;
        qword_1E9585778 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1E9585780 = xmmword_1A28FD580;
        qword_1E9585790 = 2;
        unk_1E9585798 = "glyphOptions";
        dword_1E95857A0 = 3;
        qword_1E95857A8 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantGlyphOptionsBinding(void)::reflection;
        *(_OWORD *)algn_1E95857B0 = xmmword_1A28FD1E0;
        qword_1E95857C0 = 3;
        unk_1E95857C8 = "viewCommon";
        dword_1E95857D0 = 3;
        qword_1E95857D8 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantViewCommonBinding(void)::reflection;
        unk_1E95857E0 = 1;
      }
      qword_1EB319188 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      unk_1EB319190 = 4;
      a4 = v91;
      a2 = v93;
      a3 = v94;
    }
  }
  uint64_t v15 = *a2;
  uint64_t v16 = (std::__shared_weak_count *)a2[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v97 = *(_OWORD *)a3;
  *(_OWORD *)&v97[12] = *(_OWORD *)(a3 + 12);
  long long v17 = *(_OWORD *)(a3 + 28);
  char v18 = *(unsigned char *)(a3 + 44);
  long long v95 = *a4;
  long long v96 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::GlyphWithNormalHalo::DefaultPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v95;
  *(_OWORD *)(a1 + 272) = v96;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v97;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v97[12];
  *(_OWORD *)(a1 + 92) = v17;
  *(unsigned char *)(a1 + 108) = v18;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  *(unsigned char *)(a1 + 306) = a6;
  *(unsigned char *)(a1 + 307) = a7;
  *(unsigned char *)(a1 + 308) = a8;
  *(unsigned char *)(a1 + 309) = a9;
  *(unsigned char *)(a1 + 310) = a10;
  int8x16_t v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v20 = vmovl_high_s8(v19);
  int32x4_t v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  int8x16_t v23 = v22;
  int16x8_t v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  int32x4_t v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  int8x16_t v26 = v22;
  int32x4_t v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  int8x16_t v28 = v22;
  int32x4_t v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  int8x16_t v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  int8x16_t v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  int8x16_t v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  int8x16_t v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  int8x16_t v34 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v22);
  int8x16_t v35 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v33);
  int8x16_t v36 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v32);
  int8x16_t v37 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v28);
  int8x16_t v38 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  int16x8_t v39 = vmovl_high_s8(v38);
  int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  int8x16_t v41 = v22;
  int16x8_t v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  *(void *)a1 = &unk_1EF55F3B0;
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  int8x16_t v44 = v22;
  int32x4_t v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  int8x16_t v46 = v22;
  int32x4_t v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  int8x16_t v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  int8x16_t v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  int8x16_t v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  int8x16_t v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  int8x16_t v52 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v51);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v23));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v44), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v26));
  int8x16_t v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v46), v37);
  int8x16_t v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v48), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v30));
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v49), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v31));
  int8x16_t v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v50), v36);
  int8x16_t v59 = vorrq_s8(v52, v35);
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v22), v34);
  int8x16_t v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  int32x4_t v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  int8x16_t v64 = v22;
  int16x8_t v65 = vmovl_high_s8(v61);
  int32x4_t v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  int8x16_t v67 = v22;
  int32x4_t v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  int8x16_t v69 = v22;
  int32x4_t v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  int8x16_t v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  int8x16_t v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  int8x16_t v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  int8x16_t v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  int8x16_t v75 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v22);
  int8x16_t v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v77 = vmovl_high_s8(v76);
  int32x4_t v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  int8x16_t v79 = v22;
  int16x8_t v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  int32x4_t v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  int8x16_t v82 = v22;
  int32x4_t v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  int8x16_t v84 = v22;
  int32x4_t v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  int8x16_t v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  int8x16_t v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  int8x16_t v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  int8x16_t v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v82), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v86), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v84), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v88), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v87), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v22), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v89),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v67)),
                                               v59)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void md::LabelRenderDeviceBuffer::initialize(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  *(void *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  uint64_t v6 = operator new(0xE8uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *uint64_t v6 = &unk_1EF586FE8;
  uint64_t v7 = ggl::BufferData::BufferData((uint64_t)(v6 + 3), qword_1E9560428, 2, 1, 6, 1);
  v6[28] = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
  void v6[3] = &unk_1EF55E398;
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v10 = *a4;
    uint64_t v9 = a4[1];
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v10 = *a4;
  uint64_t v9 = a4[1];
  if (v9) {
LABEL_4:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
LABEL_5:
  int16x8_t v11 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v9;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph24SuperSamplePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C678;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C630;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph17HaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C5E8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d29LowPrecisionHaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C5A0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d25LowPrecisionPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C558;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d21RaymarchPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C510;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C4C8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon23MaskedIconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C000;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon21WaypointPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BFB8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon19ShadowPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF521620;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon17IconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BF70;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24ColorGlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BC10;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14>,ggl::Icon::WaypointPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51DC30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13>,ggl::Icon::MaskedIconPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51DBE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12>,ggl::Icon::ShadowPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51DBA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11>,ggl::Icon::IconPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56FB10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10>,ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56FAC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7>,ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F9F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6>,ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F9A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5>,ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F960;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4>,ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F918;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3>,ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F8D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2>,ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F888;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1>,ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F840;
  a2[1] = v2;
  return result;
}

uint64_t ggl::Icon::ShadowPipelineState::ShadowPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  {
    unint64_t v91 = a4;
    unint64_t v93 = a2;
    uint64_t v94 = a3;
    a2 = v93;
    a3 = v94;
    a4 = v91;
    if (v92)
    {
      {
        if (v92)
        {
          {
            {
              ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Icon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B6E8 = 1;
          }
          ggl::Icon::ShadowPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9587C78 = &ggl::Icon::pipelineDataShadowPipelineDeviceStructs(void)::ref;
          qword_1E9587C80 = 0;
          {
            ggl::Icon::pipelineDataShadowPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::ViewInScreenSpace::reflection(void)::reflection;
            unk_1E9587E40 = ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            qword_1E9587E48 = (uint64_t)ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            unk_1E9587E50 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1E9587C88 = (uint64_t)&ggl::Icon::pipelineDataShadowPipelineConstantStructs(void)::ref;
          unk_1E9587C90 = xmmword_1A28FC860;
        }
      }
      ggl::Icon::ShadowPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Icon::ShadowPipelineSetup::typedReflection(void)::ref;
      ggl::ShadowShader::typedReflection(v92);
      qword_1E9587CB0 = (uint64_t)&ggl::ShadowShader::typedReflection(void)::ref;
      {
        ggl::Icon::pipelineStateShadowPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9588040 = 0;
        qword_1E9588048 = (uint64_t)"";
        dword_1E9588050 = 0;
        qword_1E9588058 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineAttributeBinding_0(void)::attr;
        unk_1E9588060 = 4;
      }
      qword_1E9587CB8 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineAttributeStructBinding(void)::attr;
      unk_1E9587CC0 = 1;
      qword_1E9587CC8 = 0;
      unk_1E9587CD0 = 2;
      qword_1E9587CD8 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineDeviceStructBinding(void)::ref;
      unk_1E9587CE0 = 0;
      {
        ggl::Icon::pipelineStateShadowPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9587F80 = 0;
        qword_1E9587F88 = (uint64_t)"viewInScreenSpace";
        dword_1E9587F90 = 3;
        qword_1E9587F98 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantViewInScreenSpaceBinding(void)::reflection;
        unk_1E9587FA0 = vdupq_n_s64(1uLL);
        qword_1E9587FB0 = 1;
        unk_1E9587FB8 = "byteBufferTextureSize";
        dword_1E9587FC0 = 3;
        qword_1E9587FC8 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        *(_OWORD *)algn_1E9587FD0 = xmmword_1A28FD580;
        qword_1E9587FE0 = 2;
        unk_1E9587FE8 = "floatBufferTextureSize";
        dword_1E9587FF0 = 3;
        qword_1E9587FF8 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1E9588000 = vdupq_n_s64(3uLL);
        qword_1E9588010 = 3;
        unk_1E9588018 = "viewCommon";
        dword_1E9588020 = 3;
        qword_1E9588028 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantViewCommonBinding(void)::reflection;
        unk_1E9588030 = 1;
      }
      qword_1E9587CE8 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E9587CF0 = 4;
      a4 = v91;
      a2 = v93;
      a3 = v94;
    }
  }
  uint64_t v15 = *a2;
  uint64_t v16 = (std::__shared_weak_count *)a2[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v97 = *(_OWORD *)a3;
  *(_OWORD *)&v97[12] = *(_OWORD *)(a3 + 12);
  long long v17 = *(_OWORD *)(a3 + 28);
  char v18 = *(unsigned char *)(a3 + 44);
  long long v95 = *a4;
  long long v96 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Icon::ShadowPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v95;
  *(_OWORD *)(a1 + 272) = v96;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v97;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v97[12];
  *(_OWORD *)(a1 + 92) = v17;
  *(unsigned char *)(a1 + 108) = v18;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  *(unsigned char *)(a1 + 306) = a6;
  *(unsigned char *)(a1 + 307) = a7;
  *(unsigned char *)(a1 + 308) = a8;
  *(unsigned char *)(a1 + 309) = a9;
  *(unsigned char *)(a1 + 310) = a10;
  int8x16_t v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v20 = vmovl_high_s8(v19);
  int32x4_t v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  int8x16_t v23 = v22;
  int16x8_t v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  int32x4_t v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  int8x16_t v26 = v22;
  int32x4_t v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  int8x16_t v28 = v22;
  int32x4_t v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  int8x16_t v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  int8x16_t v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  int8x16_t v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  int8x16_t v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  int8x16_t v34 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v22);
  int8x16_t v35 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v33);
  int8x16_t v36 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v32);
  int8x16_t v37 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v28);
  int8x16_t v38 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  int16x8_t v39 = vmovl_high_s8(v38);
  int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  int8x16_t v41 = v22;
  int16x8_t v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  *(void *)a1 = &unk_1EF518AB0;
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  int8x16_t v44 = v22;
  int32x4_t v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  int8x16_t v46 = v22;
  int32x4_t v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  int8x16_t v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  int8x16_t v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  int8x16_t v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  int8x16_t v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  int8x16_t v52 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v51);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v23));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v44), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v26));
  int8x16_t v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v46), v37);
  int8x16_t v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v48), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v30));
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v49), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v31));
  int8x16_t v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v50), v36);
  int8x16_t v59 = vorrq_s8(v52, v35);
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v22), v34);
  int8x16_t v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  int32x4_t v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  int8x16_t v64 = v22;
  int16x8_t v65 = vmovl_high_s8(v61);
  int32x4_t v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  int8x16_t v67 = v22;
  int32x4_t v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  int8x16_t v69 = v22;
  int32x4_t v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  int8x16_t v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  int8x16_t v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  int8x16_t v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  int8x16_t v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  int8x16_t v75 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v22);
  int8x16_t v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v77 = vmovl_high_s8(v76);
  int32x4_t v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  int8x16_t v79 = v22;
  int16x8_t v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  int32x4_t v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  int8x16_t v82 = v22;
  int32x4_t v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  int8x16_t v84 = v22;
  int32x4_t v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  int8x16_t v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  int8x16_t v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  int8x16_t v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  int8x16_t v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v82), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v86), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v84), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v88), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v87), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v22), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v89),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v67)),
                                               v59)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::Icon::IconPipelineState::IconPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  {
    unint64_t v91 = a4;
    unint64_t v93 = a2;
    uint64_t v94 = a3;
    a2 = v93;
    a3 = v94;
    a4 = v91;
    if (v92)
    {
      {
        if (v92)
        {
          {
            {
              ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Icon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B6E8 = 1;
          }
          ggl::Icon::IconPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9587C48 = &ggl::Icon::pipelineDataIconPipelineDeviceStructs(void)::ref;
          qword_1E9587C50 = 0;
          {
            ggl::Icon::pipelineDataIconPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::ViewInScreenSpace::reflection(void)::reflection;
            unk_1E9587E20 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1E9587E28 = (uint64_t)ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1E9587C58 = (uint64_t)&ggl::Icon::pipelineDataIconPipelineConstantStructs(void)::ref;
          unk_1E9587C60 = xmmword_1A28FD580;
        }
      }
      ggl::Icon::IconPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Icon::IconPipelineSetup::typedReflection(void)::ref;
      ggl::IconShader::typedReflection(v92);
      qword_1EB319A10 = (uint64_t)&ggl::IconShader::typedReflection(void)::ref;
      {
        ggl::Icon::pipelineStateIconPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9587F50 = 0;
        qword_1E9587F58 = (uint64_t)"";
        dword_1E9587F60 = 0;
        qword_1E9587F68 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineAttributeBinding_0(void)::attr;
        unk_1E9587F70 = 4;
      }
      qword_1EB319A18 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineAttributeStructBinding(void)::attr;
      unk_1EB319A20 = 1;
      qword_1EB319A28 = 0;
      unk_1EB319A30 = 2;
      qword_1EB319A38 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineDeviceStructBinding(void)::ref;
      unk_1EB319A40 = 0;
      {
        ggl::Icon::pipelineStateIconPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9587EC0 = 0;
        qword_1E9587EC8 = (uint64_t)"viewInScreenSpace";
        dword_1E9587ED0 = 3;
        qword_1E9587ED8 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineConstantViewInScreenSpaceBinding(void)::reflection;
        unk_1E9587EE0 = vdupq_n_s64(1uLL);
        qword_1E9587EF0 = 1;
        unk_1E9587EF8 = "floatBufferTextureSize";
        dword_1E9587F00 = 3;
        qword_1E9587F08 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        *(_OWORD *)algn_1E9587F10 = xmmword_1A28FD580;
        qword_1E9587F20 = 2;
        unk_1E9587F28 = "viewCommon";
        dword_1E9587F30 = 3;
        qword_1E9587F38 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineConstantViewCommonBinding(void)::reflection;
        unk_1E9587F40 = 1;
      }
      qword_1EB319A48 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB319A50 = 3;
      a4 = v91;
      a2 = v93;
      a3 = v94;
    }
  }
  uint64_t v15 = *a2;
  uint64_t v16 = (std::__shared_weak_count *)a2[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v97 = *(_OWORD *)a3;
  *(_OWORD *)&v97[12] = *(_OWORD *)(a3 + 12);
  long long v17 = *(_OWORD *)(a3 + 28);
  char v18 = *(unsigned char *)(a3 + 44);
  long long v95 = *a4;
  long long v96 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Icon::IconPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v95;
  *(_OWORD *)(a1 + 272) = v96;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v97;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v97[12];
  *(_OWORD *)(a1 + 92) = v17;
  *(unsigned char *)(a1 + 108) = v18;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  *(unsigned char *)(a1 + 306) = a6;
  *(unsigned char *)(a1 + 307) = a7;
  *(unsigned char *)(a1 + 308) = a8;
  *(unsigned char *)(a1 + 309) = a9;
  *(unsigned char *)(a1 + 310) = a10;
  int8x16_t v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v20 = vmovl_high_s8(v19);
  int32x4_t v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  int8x16_t v23 = v22;
  int16x8_t v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  int32x4_t v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  int8x16_t v26 = v22;
  int32x4_t v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  int8x16_t v28 = v22;
  int32x4_t v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  int8x16_t v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  int8x16_t v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  int8x16_t v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  int8x16_t v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  int8x16_t v34 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v22);
  int8x16_t v35 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v33);
  int8x16_t v36 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v32);
  int8x16_t v37 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v28);
  int8x16_t v38 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  int16x8_t v39 = vmovl_high_s8(v38);
  int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  int8x16_t v41 = v22;
  int16x8_t v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  *(void *)a1 = &unk_1EF560560;
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  int8x16_t v44 = v22;
  int32x4_t v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  int8x16_t v46 = v22;
  int32x4_t v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  int8x16_t v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  int8x16_t v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  int8x16_t v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  int8x16_t v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  int8x16_t v52 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v51);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v23));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v44), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v26));
  int8x16_t v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v46), v37);
  int8x16_t v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v48), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v30));
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v49), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v31));
  int8x16_t v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v50), v36);
  int8x16_t v59 = vorrq_s8(v52, v35);
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v22), v34);
  int8x16_t v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  int32x4_t v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  int8x16_t v64 = v22;
  int16x8_t v65 = vmovl_high_s8(v61);
  int32x4_t v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  int8x16_t v67 = v22;
  int32x4_t v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  int8x16_t v69 = v22;
  int32x4_t v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  int8x16_t v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  int8x16_t v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  int8x16_t v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  int8x16_t v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  int8x16_t v75 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v22);
  int8x16_t v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v77 = vmovl_high_s8(v76);
  int32x4_t v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  int8x16_t v79 = v22;
  int16x8_t v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  int32x4_t v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  int8x16_t v82 = v22;
  int32x4_t v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  int8x16_t v84 = v22;
  int32x4_t v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  int8x16_t v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  int8x16_t v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  int8x16_t v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  int8x16_t v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v82), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v86), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v84), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v88), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v87), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v22), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v89),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v67)),
                                               v59)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::Icon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *md::LabelRenderer::onMaxHaloSizeDidChange(void *this)
{
  unsigned int v1 = (float)(*(float *)(*(void *)(*this + 8) + 176) * (float)*(unsigned int *)(*this + 52));
  uint64_t v2 = (void *)this[124];
  unint64_t v3 = v2[1];
  unint64_t v5 = v2[8];
  uint64_t v4 = (_DWORD *)v2[9];
  if (v5 <= v3) {
    unint64_t v5 = v2[1];
  }
  v4[1] = v1;
  v4[2] = v1;
  void v4[3] = v1;
  if (v5 > v3) {
    unint64_t v3 = v5;
  }
  v2[7] = 0;
  v2[8] = v3;
  uint64_t v6 = (void *)this[126];
  unint64_t v7 = v6[1];
  unint64_t v8 = v6[8];
  *(_DWORD *)(v6[9] + 4) = v1;
  if (v8 <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = v8;
  }
  v6[7] = 0;
  v6[8] = v9;
  uint64_t v10 = v6[9];
  *(_DWORD *)(v10 + 8) = v1;
  *(_DWORD *)(v10 + 12) = v1;
  if (v9 <= v7) {
    unint64_t v11 = v7;
  }
  else {
    unint64_t v11 = v9;
  }
  v6[8] = v11;
  return this;
}

void sub_1A1CB4BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::COverlayRenderResources::COverlayRenderResources(md::COverlayRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  a2;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((void *)this + 52) = 0;
  uint64_t v4 = operator new(0xF8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EF583D28;
  ggl::BufferData::BufferData((uint64_t)(v4 + 3), 2, 1, 0, 6, 6);
  *((_DWORD *)v4 + 60) = 0;
  void v4[3] = &unk_1EF55B630;
  v4[4] = 2;
  v4[28] = &unk_1EF55B650;
  v4[29] = "index data";
  uint64_t v7 = v4[12];
  *(void *)uint64_t v7 = 0x200010000;
  *(_DWORD *)(v7 + 8) = 196610;
  unint64_t v5 = operator new(0xF8uLL);
  v5[1] = 0;
  _DWORD v5[2] = 0;
  void *v5 = &unk_1EF584460;
  ggl::BufferData::BufferData((uint64_t)(v5 + 3), 16, 0, 0, 6, 4);
  v5[29] = "vertex data";
  v5[30] = &ggl::CommonMesh::bufferPos2UVReflection;
  void v5[3] = &unk_1EF55C008;
  v5[28] = &unk_1EF55C028;
  uint64_t v6 = (_OWORD *)v5[12];
  *uint64_t v6 = xmmword_1A28FCDD0;
  v6[1] = xmmword_1A28FE130;
  _DWORD v6[2] = xmmword_1A28FD2D0;
  void v6[3] = xmmword_1A28FD2A0;
  operator new();
}

void sub_1A1CBD708(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  STACK[0x2B0] = a1;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v19 = v18[16];
  v18[16] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v18[15];
  v18[15] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v18[14];
  v18[14] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = v18[13];
  v18[13] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = v18[12];
  v18[12] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v18[11];
  v18[11] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v18[10];
  v18[10] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v18[9];
  v18[9] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = v18[8];
  v18[8] = 0;
  if (v27)
  {
    uint64_t v28 = ggl::FragmentedPool<ggl::PolygonOverlay::AntialiasPipelineSetup>::~FragmentedPool(v27);
    MEMORY[0x1A6239270](v28, 0x10A0C40D234DDC7);
  }
  uint64_t v29 = v18[7];
  v18[7] = 0;
  if (v29)
  {
    uint64_t v30 = ggl::FragmentedPool<ggl::PolygonOverlay::FillPipelineSetup>::~FragmentedPool(v29);
    MEMORY[0x1A6239270](v30, 0x10A0C40D234DDC7);
  }
  uint64_t v31 = v18[6];
  v18[6] = 0;
  if (v31)
  {
    uint64_t v32 = ggl::FragmentedPool<ggl::PolygonOverlay::FillPipelineSetup>::~FragmentedPool(v31);
    MEMORY[0x1A6239270](v32, 0x10A0C40D234DDC7);
  }
  int8x16_t v33 = (std::__shared_weak_count *)v18[5];
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  int8x16_t v34 = (std::__shared_weak_count *)v18[3];
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  int8x16_t v35 = (std::__shared_weak_count *)v18[1];
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }

  MEMORY[0x1A6239270](v18, 0x20C40A3A67D38);
  MEMORY[0x1A6239270](v16, 0x20C40960023A9);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x2F0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x320]);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x330]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x360]);
  STACK[0x2C8] = (unint64_t)(v14 + 23);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::Textured::TileScalar>>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x250]);
  std::unique_ptr<ggl::FragmentedPool<ggl::Textured::PoleTexturedBlendPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x258]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 49));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 47));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 45));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 43));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 41));
  uint64_t v36 = v14[40];
  v14[40] = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x2A0]);
  std::unique_ptr<md::MaskingOverlayRenderable::SharedResources>::~unique_ptr[abi:nn180100]((md::MaskingOverlayRenderable::SharedResources **)STACK[0x278]);
  std::unique_ptr<md::PolygonOverlayRenderable::SharedResources>::~unique_ptr[abi:nn180100]((md::PolygonOverlayRenderResources ***)STACK[0x280]);
  int8x16_t v37 = (void *)v14[36];
  v14[36] = 0;
  if (v37) {
    std::default_delete<md::CircleOverlayRenderable::SharedResources>::operator()[abi:nn180100](v37);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x290]);
  std::unique_ptr<ggl::FragmentedPool<ggl::Textured::SRGBBlendPos2DUVPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x298]);
  std::unique_ptr<ggl::FragmentedPool<ggl::Textured::SRGBBlendPos4DUVPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x288]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 31));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 29));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 27));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v14 + 25));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2C8]);
  uint64_t v38 = v14[22];
  v14[22] = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = v14[21];
  v14[21] = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::MeshPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x260]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x268]);
  std::unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::MeshPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x270]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  uint64_t v40 = v14[13];
  v14[13] = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = v14[12];
  v14[12] = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a14);
  uint64_t v42 = v14[9];
  v14[9] = 0;
  if (v42) {
    MEMORY[0x1A6239270](v42, 0x1000C4049ECCB0CLL);
  }
  uint64_t v43 = v14[8];
  v14[8] = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = v14[7];
  v14[7] = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = v14[6];
  v14[6] = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = v14[5];
  v14[5] = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = v14[4];
  v14[4] = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v48 = v14[3];
  void v14[3] = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = v14[2];
  v14[2] = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  uint64_t v50 = v14[1];
  v14[1] = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  uint64_t v51 = *v14;
  uint64_t *v14 = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }

  _Unwind_Resume((_Unwind_Exception *)STACK[0x2B0]);
}

uint64_t ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::SRGBBlendColormappedPos2DUVPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7)
{
  {
    int8x16_t v87 = a4;
    int8x16_t v89 = a2;
    uint64_t v90 = a3;
    a2 = v89;
    a3 = v90;
    a4 = v87;
    if (v88)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
          }
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
          unk_1EB32B448 = 1;
        }
        ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
        *(void *)algn_1EB31A678 = &ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineDeviceStructs(void)::ref;
        qword_1EB31A680 = 0;
        {
          ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1EB31A6B0 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1EB31A6B8 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
          unk_1EB31A6C0 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
          qword_1EB31A6C8 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
        }
        qword_1EB31A688 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineConstantStructs(void)::ref;
        unk_1EB31A690 = xmmword_1A28FC930;
      }
      ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::typedReflection(void)::ref;
      {
        ggl::TexturedColormappedSRGBTexturedShader::typedReflection(void)::ref = (uint64_t)"TexturedColormappedSRGBTexturedShader";
        {
          qword_1EB31AF10 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
          unk_1EB31AF18 = ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31AF20 = 1;
          unk_1EB31AF28 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AF30 = 3;
          unk_1EB31AF38 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AF40 = 0;
          unk_1EB31AF48 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref = 103723494;
          qword_1EB31AF50 = 0;
          unk_1EB31AF58 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AF68 = 0;
          unk_1EB31AF70 = 0;
          qword_1EB31AF60 = 0;
        }
        qword_1EB31A530 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB31A538 = 103723494;
        {
          qword_1EB31AF98 = 0;
          unk_1EB31AFA0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AFA8 = 2;
          unk_1EB31AFB0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1F407266DLL;
          qword_1EB31AFB8 = 0;
          unk_1EB31AFC0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31AF88 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
          unk_1EB31AF90 = 0;
          qword_1EB31AFC8 = 2;
          unk_1EB31AFD0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AFE0 = 0;
          unk_1EB31AFE8 = 0;
          qword_1EB31AFD8 = 2;
        }
        qword_1EB31A540 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB31A548 = -200858003;
        qword_1EB31A550 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderConstants(void)::ref;
        unk_1EB31A558 = 5;
        qword_1EB31A560 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderTextures(void)::ref;
        unk_1EB31A568 = 2;
        qword_1EB31A570 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderSamplers(void)::ref;
        unk_1EB31A578 = 2;
      }
      qword_1E958AF50 = (uint64_t)&ggl::TexturedColormappedSRGBTexturedShader::typedReflection(void)::ref;
      {
        ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E958B640 = 0;
        qword_1E958B648 = (uint64_t)"";
        dword_1E958B650 = 0;
        qword_1E958B658 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1E958B660 = 2;
      }
      qword_1E958AF58 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineAttributeStructBinding(void)::attr;
      unk_1E958AF60 = 1;
      qword_1E958AF68 = 0;
      unk_1E958AF70 = 2;
      qword_1E958AF78 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1E958AF80 = 0;
      {
        ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1E958B550 = 0;
        qword_1E958B558 = (uint64_t)"view";
        dword_1E958B560 = 3;
        qword_1E958B568 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E958B570 = xmmword_1A28FCEB0;
        qword_1E958B580 = 1;
        unk_1E958B588 = "transform";
        dword_1E958B590 = 3;
        qword_1E958B598 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantTransformBinding(void)::reflection;
        unk_1E958B5A0 = xmmword_1A28FCF70;
        qword_1E958B5B0 = 2;
        unk_1E958B5B8 = "tileScalar";
        dword_1E958B5C0 = 3;
        qword_1E958B5C8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantTileScalarBinding(void)::reflection;
        *(_OWORD *)algn_1E958B5D0 = xmmword_1A28FD040;
        qword_1E958B5E0 = 3;
        unk_1E958B5E8 = "style";
        dword_1E958B5F0 = 3;
        qword_1E958B5F8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantStyleBinding(void)::reflection;
        unk_1E958B600 = xmmword_1A28FCD60;
        qword_1E958B610 = 4;
        unk_1E958B618 = "alphaTint";
        dword_1E958B620 = 3;
        qword_1E958B628 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1E958B630 = 1;
      }
      qword_1E958AF88 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1E958AF90 = 5;
      a4 = v87;
      a2 = v89;
      a3 = v90;
    }
  }
  uint64_t v11 = *a2;
  int32x4_t v12 = (std::__shared_weak_count *)a2[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v93 = *(_OWORD *)a3;
  *(_OWORD *)&v93[12] = *(_OWORD *)(a3 + 12);
  long long v13 = *(_OWORD *)(a3 + 28);
  char v14 = *(unsigned char *)(a3 + 44);
  long long v91 = *a4;
  long long v92 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v91;
  *(_OWORD *)(a1 + 272) = v92;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v93;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v93[12];
  *(_OWORD *)(a1 + 92) = v13;
  *(unsigned char *)(a1 + 108) = v14;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  *(unsigned char *)(a1 + 306) = a6;
  *(unsigned char *)(a1 + 307) = a7;
  int8x16_t v15 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v16 = vmovl_high_s8(v15);
  int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
  v18.i64[0] = v17.u32[0];
  v18.i64[1] = v17.u32[1];
  int8x16_t v19 = v18;
  int16x8_t v20 = vmovl_s8(*(int8x8_t *)v15.i8);
  int32x4_t v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v18.i64[0] = v21.u32[0];
  v18.i64[1] = v21.u32[1];
  int8x16_t v22 = v18;
  int32x4_t v23 = vmovl_high_s16(v16);
  v18.i64[0] = v23.u32[0];
  v18.i64[1] = v23.u32[1];
  int8x16_t v24 = v18;
  int32x4_t v25 = vmovl_high_s16(v20);
  v18.i64[0] = v25.u32[0];
  v18.i64[1] = v25.u32[1];
  int8x16_t v26 = v18;
  v18.i64[0] = v17.u32[2];
  v18.i64[1] = v17.u32[3];
  int8x16_t v27 = v18;
  v18.i64[0] = v21.u32[2];
  v18.i64[1] = v21.u32[3];
  int8x16_t v28 = v18;
  v18.i64[0] = v23.u32[2];
  v18.i64[1] = v23.u32[3];
  int8x16_t v29 = v18;
  v18.i64[0] = v25.u32[2];
  v18.i64[1] = v25.u32[3];
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v18);
  int8x16_t v31 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v29);
  int8x16_t v32 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v28);
  int8x16_t v33 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v24);
  int8x16_t v34 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  int16x8_t v35 = vmovl_high_s8(v34);
  *(void *)a1 = &unk_1EF561A00;
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v18.i64[0] = v36.u32[0];
  v18.i64[1] = v36.u32[1];
  int8x16_t v37 = v18;
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v34.i8);
  int32x4_t v39 = vmovl_s16(*(int16x4_t *)v38.i8);
  v18.i64[0] = v39.u32[0];
  v18.i64[1] = v39.u32[1];
  int8x16_t v40 = v18;
  int32x4_t v41 = vmovl_high_s16(v35);
  v18.i64[0] = v41.u32[0];
  v18.i64[1] = v41.u32[1];
  int8x16_t v42 = v18;
  int32x4_t v43 = vmovl_high_s16(v38);
  v18.i64[0] = v43.u32[0];
  v18.i64[1] = v43.u32[1];
  int8x16_t v44 = v18;
  v18.i64[0] = v36.u32[2];
  v18.i64[1] = v36.u32[3];
  int8x16_t v45 = v18;
  v18.i64[0] = v39.u32[2];
  v18.i64[1] = v39.u32[3];
  int8x16_t v46 = v18;
  v18.i64[0] = v41.u32[2];
  v18.i64[1] = v41.u32[3];
  int8x16_t v47 = v18;
  v18.i64[0] = v43.u32[2];
  v18.i64[1] = v43.u32[3];
  int8x16_t v48 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v47);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v37), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v19));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v40), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v42), v33);
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v44), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v26));
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v45), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v27));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v46), v32);
  int8x16_t v55 = vorrq_s8(v48, v31);
  int8x16_t v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v18), v30);
  int8x16_t v57 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v58 = vmovl_s8(*(int8x8_t *)v57.i8);
  int32x4_t v59 = vmovl_high_s16(v58);
  v18.i64[0] = v59.i32[2];
  v18.i64[1] = v59.i32[3];
  int8x16_t v60 = v18;
  int16x8_t v61 = vmovl_high_s8(v57);
  int32x4_t v62 = vmovl_high_s16(v61);
  v18.i64[0] = v62.i32[2];
  v18.i64[1] = v62.i32[3];
  int8x16_t v63 = v18;
  int32x4_t v64 = vmovl_s16(*(int16x4_t *)v58.i8);
  v18.i64[0] = v64.i32[2];
  v18.i64[1] = v64.i32[3];
  int8x16_t v65 = v18;
  int32x4_t v66 = vmovl_s16(*(int16x4_t *)v61.i8);
  v18.i64[0] = v66.i32[2];
  v18.i64[1] = v66.i32[3];
  int8x16_t v67 = v18;
  v18.i64[0] = v59.i32[0];
  v18.i64[1] = v59.i32[1];
  int8x16_t v68 = v18;
  v18.i64[0] = v62.i32[0];
  v18.i64[1] = v62.i32[1];
  int8x16_t v69 = v18;
  v18.i64[0] = v64.i32[0];
  v18.i64[1] = v64.i32[1];
  int8x16_t v70 = v18;
  v18.i64[0] = v66.i32[0];
  v18.i64[1] = v66.i32[1];
  int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v18);
  int8x16_t v72 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v73 = vmovl_high_s8(v72);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v18.i64[0] = v74.i32[0];
  v18.i64[1] = v74.i32[1];
  int8x16_t v75 = v18;
  int16x8_t v76 = vmovl_s8(*(int8x8_t *)v72.i8);
  int32x4_t v77 = vmovl_s16(*(int16x4_t *)v76.i8);
  v18.i64[0] = v77.i32[0];
  v18.i64[1] = v77.i32[1];
  int8x16_t v78 = v18;
  int32x4_t v79 = vmovl_high_s16(v73);
  v18.i64[0] = v79.i32[0];
  v18.i64[1] = v79.i32[1];
  int8x16_t v80 = v18;
  int32x4_t v81 = vmovl_high_s16(v76);
  v18.i64[0] = v81.i32[0];
  v18.i64[1] = v81.i32[1];
  int8x16_t v82 = v18;
  v18.i64[0] = v74.i32[2];
  v18.i64[1] = v74.i32[3];
  int8x16_t v83 = v18;
  v18.i64[0] = v77.i32[2];
  v18.i64[1] = v77.i32[3];
  int8x16_t v84 = v18;
  v18.i64[0] = v79.i32[2];
  v18.i64[1] = v79.i32[3];
  int8x16_t v85 = v18;
  v18.i64[0] = v81.i32[2];
  v18.i64[1] = v81.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v78), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v70)), v50), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v75), v71), v49)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v82), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v68)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v80), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v69)),
                                               v51))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v84), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v65)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v83), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v67)), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v18), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v60)), v56), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v85),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v63)),
                                               v55)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::Textured::SRGBBlendPos2DUVPipelineState::SRGBBlendPos2DUVPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7)
{
  {
    int8x16_t v87 = a4;
    int8x16_t v89 = a2;
    uint64_t v90 = a3;
    a2 = v89;
    a3 = v90;
    a4 = v87;
    if (v88)
    {
      {
        if (v88)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::Textured::SRGBBlendPos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(void *)algn_1EB3239C8 = &ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineDeviceStructs(void)::ref;
          qword_1EB3239D0 = 0;
          {
            ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EB323A00 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EB323A08 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
            unk_1EB323A10 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
            qword_1EB323A18 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1EB3239D8 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineConstantStructs(void)::ref;
          unk_1EB3239E0 = xmmword_1A28FC940;
        }
      }
      ggl::Textured::SRGBBlendPos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::SRGBBlendPos2DUVPipelineSetup::typedReflection(void)::ref;
      ggl::TexturedSRGBBlendShader::typedReflection(v88);
      qword_1E958DC40 = (uint64_t)&ggl::TexturedSRGBBlendShader::typedReflection(void)::ref;
      {
        ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E958B450 = 0;
        qword_1E958B458 = (uint64_t)"";
        dword_1E958B460 = 0;
        qword_1E958B468 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1E958B470 = 2;
      }
      qword_1E958DC48 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineAttributeStructBinding(void)::attr;
      unk_1E958DC50 = 1;
      qword_1E958DC58 = 0;
      unk_1E958DC60 = 1;
      qword_1E958DC68 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1E958DC70 = 0;
      {
        ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1E958B1A0 = 0;
        qword_1E958B1A8 = (uint64_t)"view";
        dword_1E958B1B0 = 3;
        qword_1E958B1B8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantViewBinding(void)::reflection;
        unk_1E958B1C0 = xmmword_1A28FCEB0;
        qword_1E958B1D0 = 1;
        unk_1E958B1D8 = "transform";
        dword_1E958B1E0 = 3;
        qword_1E958B1E8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1E958B1F0 = xmmword_1A28FCF70;
        qword_1E958B200 = 2;
        unk_1E958B208 = "tileScalar";
        dword_1E958B210 = 3;
        qword_1E958B218 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantTileScalarBinding(void)::reflection;
        unk_1E958B220 = xmmword_1A28FD040;
        qword_1E958B230 = 3;
        unk_1E958B238 = "style";
        dword_1E958B240 = 3;
        qword_1E958B248 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1E958B250 = xmmword_1A28FCD60;
        qword_1E958B260 = 4;
        unk_1E958B268 = "alphaTint";
        dword_1E958B270 = 3;
        qword_1E958B278 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1E958B280 = 1;
      }
      qword_1E958DC78 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1E958DC80 = 5;
      a4 = v87;
      a2 = v89;
      a3 = v90;
    }
  }
  uint64_t v11 = *a2;
  int32x4_t v12 = (std::__shared_weak_count *)a2[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v93 = *(_OWORD *)a3;
  *(_OWORD *)&v93[12] = *(_OWORD *)(a3 + 12);
  long long v13 = *(_OWORD *)(a3 + 28);
  char v14 = *(unsigned char *)(a3 + 44);
  long long v91 = *a4;
  long long v92 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Textured::SRGBBlendPos2DUVPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v91;
  *(_OWORD *)(a1 + 272) = v92;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v93;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v93[12];
  *(_OWORD *)(a1 + 92) = v13;
  *(unsigned char *)(a1 + 108) = v14;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  *(unsigned char *)(a1 + 306) = a6;
  *(unsigned char *)(a1 + 307) = a7;
  int8x16_t v15 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v16 = vmovl_high_s8(v15);
  int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
  v18.i64[0] = v17.u32[0];
  v18.i64[1] = v17.u32[1];
  int8x16_t v19 = v18;
  int16x8_t v20 = vmovl_s8(*(int8x8_t *)v15.i8);
  int32x4_t v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v18.i64[0] = v21.u32[0];
  v18.i64[1] = v21.u32[1];
  int8x16_t v22 = v18;
  int32x4_t v23 = vmovl_high_s16(v16);
  v18.i64[0] = v23.u32[0];
  v18.i64[1] = v23.u32[1];
  int8x16_t v24 = v18;
  int32x4_t v25 = vmovl_high_s16(v20);
  v18.i64[0] = v25.u32[0];
  v18.i64[1] = v25.u32[1];
  int8x16_t v26 = v18;
  v18.i64[0] = v17.u32[2];
  v18.i64[1] = v17.u32[3];
  int8x16_t v27 = v18;
  v18.i64[0] = v21.u32[2];
  v18.i64[1] = v21.u32[3];
  int8x16_t v28 = v18;
  v18.i64[0] = v23.u32[2];
  v18.i64[1] = v23.u32[3];
  int8x16_t v29 = v18;
  v18.i64[0] = v25.u32[2];
  v18.i64[1] = v25.u32[3];
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v18);
  int8x16_t v31 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v29);
  int8x16_t v32 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v28);
  int8x16_t v33 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v24);
  int8x16_t v34 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  int16x8_t v35 = vmovl_high_s8(v34);
  *(void *)a1 = &unk_1EF561960;
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v18.i64[0] = v36.u32[0];
  v18.i64[1] = v36.u32[1];
  int8x16_t v37 = v18;
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v34.i8);
  int32x4_t v39 = vmovl_s16(*(int16x4_t *)v38.i8);
  v18.i64[0] = v39.u32[0];
  v18.i64[1] = v39.u32[1];
  int8x16_t v40 = v18;
  int32x4_t v41 = vmovl_high_s16(v35);
  v18.i64[0] = v41.u32[0];
  v18.i64[1] = v41.u32[1];
  int8x16_t v42 = v18;
  int32x4_t v43 = vmovl_high_s16(v38);
  v18.i64[0] = v43.u32[0];
  v18.i64[1] = v43.u32[1];
  int8x16_t v44 = v18;
  v18.i64[0] = v36.u32[2];
  v18.i64[1] = v36.u32[3];
  int8x16_t v45 = v18;
  v18.i64[0] = v39.u32[2];
  v18.i64[1] = v39.u32[3];
  int8x16_t v46 = v18;
  v18.i64[0] = v41.u32[2];
  v18.i64[1] = v41.u32[3];
  int8x16_t v47 = v18;
  v18.i64[0] = v43.u32[2];
  v18.i64[1] = v43.u32[3];
  int8x16_t v48 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v47);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v37), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v19));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v40), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v42), v33);
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v44), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v26));
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v45), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v27));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v46), v32);
  int8x16_t v55 = vorrq_s8(v48, v31);
  int8x16_t v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v18), v30);
  int8x16_t v57 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v58 = vmovl_s8(*(int8x8_t *)v57.i8);
  int32x4_t v59 = vmovl_high_s16(v58);
  v18.i64[0] = v59.i32[2];
  v18.i64[1] = v59.i32[3];
  int8x16_t v60 = v18;
  int16x8_t v61 = vmovl_high_s8(v57);
  int32x4_t v62 = vmovl_high_s16(v61);
  v18.i64[0] = v62.i32[2];
  v18.i64[1] = v62.i32[3];
  int8x16_t v63 = v18;
  int32x4_t v64 = vmovl_s16(*(int16x4_t *)v58.i8);
  v18.i64[0] = v64.i32[2];
  v18.i64[1] = v64.i32[3];
  int8x16_t v65 = v18;
  int32x4_t v66 = vmovl_s16(*(int16x4_t *)v61.i8);
  v18.i64[0] = v66.i32[2];
  v18.i64[1] = v66.i32[3];
  int8x16_t v67 = v18;
  v18.i64[0] = v59.i32[0];
  v18.i64[1] = v59.i32[1];
  int8x16_t v68 = v18;
  v18.i64[0] = v62.i32[0];
  v18.i64[1] = v62.i32[1];
  int8x16_t v69 = v18;
  v18.i64[0] = v64.i32[0];
  v18.i64[1] = v64.i32[1];
  int8x16_t v70 = v18;
  v18.i64[0] = v66.i32[0];
  v18.i64[1] = v66.i32[1];
  int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v18);
  int8x16_t v72 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v73 = vmovl_high_s8(v72);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v18.i64[0] = v74.i32[0];
  v18.i64[1] = v74.i32[1];
  int8x16_t v75 = v18;
  int16x8_t v76 = vmovl_s8(*(int8x8_t *)v72.i8);
  int32x4_t v77 = vmovl_s16(*(int16x4_t *)v76.i8);
  v18.i64[0] = v77.i32[0];
  v18.i64[1] = v77.i32[1];
  int8x16_t v78 = v18;
  int32x4_t v79 = vmovl_high_s16(v73);
  v18.i64[0] = v79.i32[0];
  v18.i64[1] = v79.i32[1];
  int8x16_t v80 = v18;
  int32x4_t v81 = vmovl_high_s16(v76);
  v18.i64[0] = v81.i32[0];
  v18.i64[1] = v81.i32[1];
  int8x16_t v82 = v18;
  v18.i64[0] = v74.i32[2];
  v18.i64[1] = v74.i32[3];
  int8x16_t v83 = v18;
  v18.i64[0] = v77.i32[2];
  v18.i64[1] = v77.i32[3];
  int8x16_t v84 = v18;
  v18.i64[0] = v79.i32[2];
  v18.i64[1] = v79.i32[3];
  int8x16_t v85 = v18;
  v18.i64[0] = v81.i32[2];
  v18.i64[1] = v81.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v78), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v70)), v50), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v75), v71), v49)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v82), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v68)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v80), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v69)),
                                               v51))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v84), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v65)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v83), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v67)), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v18), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v60)), v56), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v85),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v63)),
                                               v55)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::PolygonOverlay::FillPipelineState::FillPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int8x16_t v84 = a4;
    int8x16_t v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::PolygonOverlay::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1E9582EC0 = &ggl::PolygonOverlay::pipelineDataFillPipelineDeviceStructs(void)::ref;
          qword_1E9582EC8 = 0;
          {
            ggl::PolygonOverlay::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9582F28 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9582F30 = (uint64_t)ggl::PolygonOverlay::Fill::reflection(void)::reflection;
            unk_1E9582F38 = ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1E9582ED0 = (uint64_t)&ggl::PolygonOverlay::pipelineDataFillPipelineConstantStructs(void)::ref;
          unk_1E9582ED8 = xmmword_1A28FCFA0;
        }
      }
      ggl::PolygonOverlay::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonOverlay::FillPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonOverlayFillShader::typedReflection(v85);
      qword_1E958DCE8 = (uint64_t)&ggl::PolygonOverlayFillShader::typedReflection(void)::ref;
      {
        ggl::PolygonOverlay::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9583038 = 0;
        qword_1E9583040 = (uint64_t)"";
        dword_1E9583048 = 0;
        qword_1E9583050 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
        unk_1E9583058 = 1;
      }
      qword_1E958DCF0 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E958DCF8 = 1;
      qword_1E958DD00 = 0;
      unk_1E958DD08 = 0;
      qword_1E958DD10 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
      unk_1E958DD18 = 0;
      {
        ggl::PolygonOverlay::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9582F78 = 0;
        qword_1E9582F80 = (uint64_t)"view";
        dword_1E9582F88 = 3;
        qword_1E9582F90 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
        unk_1E9582F98 = xmmword_1A28FCEB0;
        qword_1E9582FA8 = 1;
        unk_1E9582FB0 = "transform";
        dword_1E9582FB8 = 3;
        qword_1E9582FC0 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
        unk_1E9582FC8 = xmmword_1A28FCF70;
        qword_1E9582FD8 = 2;
        unk_1E9582FE0 = "fill";
        dword_1E9582FE8 = 3;
        qword_1E9582FF0 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantFillBinding(void)::reflection;
        unk_1E9582FF8 = xmmword_1A28FD1E0;
        qword_1E9583008 = 3;
        unk_1E9583010 = "alphaTint";
        dword_1E9583018 = 3;
        qword_1E9583020 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1E9583028 = 1;
      }
      qword_1E958DD20 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantStructBinding(void)::ref;
      unk_1E958DD28 = 4;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::PolygonOverlay::FillPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  *(void *)a1 = &unk_1EF55B7C0;
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured40SRGBBlendColormappedPos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C7E0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured30PoleTexturedBlendPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5216B0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured29SRGBBlendPos4DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF521668;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured29SRGBBlendPos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C750;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Textured10TileScalarEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5215D8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14PolygonOverlay22AntialiasPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AF68;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14MaskingOverlay20MaskingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AED8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14MaskingOverlay17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AE90;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonOverlay::AntialiasPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5781C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::MaskingOverlay::FillPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576D88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::MaskingOverlay::MaskingPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576D40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_8>,ggl::ConstantDataTyped<ggl::Textured::TileScalar> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51EBA8;
}

uint64_t std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_7>,ggl::Textured::PoleTexturedBlendPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51EB60;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Textured::SRGBBlendPos4DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51EA40;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5764D0;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::Textured::SRGBBlendPos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF576488;
}

uint64_t ggl::Textured::PoleTexturedBlendPipelineState::PoleTexturedBlendPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int8x16_t v83 = a4;
    int8x16_t v85 = a2;
    uint64_t v86 = a3;
    a2 = v85;
    a3 = v86;
    a4 = v83;
    if (v84)
    {
      {
        if (v84)
        {
          {
            {
              ggl::MeshTyped<ggl::Textured::PoleTextured>::attributesReflection(void)::r = (uint64_t)&ggl::Textured::poleTexturedReflection;
            }
            ggl::MeshTyped<ggl::Textured::PoleTextured>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Textured::PoleTextured>::attributesReflection(void)::r;
            *(void *)algn_1E958B8F0 = 1;
          }
          ggl::Textured::PoleTexturedBlendPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Textured::PoleTextured>::typedReflection(void)::r;
          *(void *)algn_1E958AE38 = &ggl::Textured::pipelineDataPoleTexturedBlendPipelineDeviceStructs(void)::ref;
          qword_1E958AE40 = 0;
          {
            ggl::Textured::pipelineDataPoleTexturedBlendPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            *(void *)algn_1E958B088 = ggl::FlyoverCommon::S2Transform::reflection(void)::reflection;
            qword_1E958B090 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1E958B098 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
          }
          qword_1E958AE48 = (uint64_t)&ggl::Textured::pipelineDataPoleTexturedBlendPipelineConstantStructs(void)::ref;
          unk_1E958AE50 = xmmword_1A28FE1F0;
        }
      }
      ggl::Textured::PoleTexturedBlendPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::PoleTexturedBlendPipelineSetup::typedReflection(void)::ref;
      ggl::PoleTexturedBlendShader::typedReflection(v84);
      qword_1E958AE70 = (uint64_t)&ggl::PoleTexturedBlendShader::typedReflection(void)::ref;
      {
        ggl::Textured::pipelineStatePoleTexturedBlendPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E958B4B8 = 0;
        qword_1E958B4C0 = (uint64_t)"";
        dword_1E958B4C8 = 0;
        qword_1E958B4D0 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineAttributeBinding_0(void)::attr;
        unk_1E958B4D8 = 1;
      }
      qword_1E958AE78 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineAttributeStructBinding(void)::attr;
      unk_1E958AE80 = 1;
      qword_1E958AE88 = 0;
      unk_1E958AE90 = 1;
      qword_1E958AE98 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineDeviceStructBinding(void)::ref;
      unk_1E958AEA0 = 0;
      {
        ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E958B388 = 0;
        qword_1E958B390 = (uint64_t)"sharedConstants";
        dword_1E958B398 = 3;
        qword_1E958B3A0 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1E958B3A8 = xmmword_1A28FC940;
        qword_1E958B3B8 = 1;
        unk_1E958B3C0 = "s2Transform";
        dword_1E958B3C8 = 3;
        qword_1E958B3D0 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantS2TransformBinding(void)::reflection;
        unk_1E958B3D8 = xmmword_1A28FD580;
        qword_1E958B3E8 = 2;
        unk_1E958B3F0 = "clip";
        dword_1E958B3F8 = 3;
        qword_1E958B400 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantClipBinding(void)::reflection;
        unk_1E958B408 = xmmword_1A28FC950;
        qword_1E958B418 = 3;
        unk_1E958B420 = "style";
        dword_1E958B428 = 3;
        qword_1E958B430 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantStyleBinding(void)::reflection;
        unk_1E958B438 = 3;
      }
      qword_1E958AEA8 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E958AEB0 = 4;
      a4 = v83;
      a2 = v85;
      a3 = v86;
    }
  }
  uint64_t v7 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v89 = *(_OWORD *)a3;
  *(_OWORD *)&v89[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v87 = *a4;
  long long v88 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Textured::PoleTexturedBlendPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v87;
  *(_OWORD *)(a1 + 272) = v88;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v89;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v89[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(_WORD *)(a1 + 305) = 0;
  *(unsigned char *)(a1 + 307) = 0;
  int8x16_t v11 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v12 = vmovl_high_s8(v11);
  int32x4_t v13 = vmovl_s16(*(int16x4_t *)v12.i8);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  int8x16_t v15 = v14;
  int16x8_t v16 = vmovl_s8(*(int8x8_t *)v11.i8);
  int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
  v14.i64[0] = v17.u32[0];
  v14.i64[1] = v17.u32[1];
  int8x16_t v18 = v14;
  int32x4_t v19 = vmovl_high_s16(v12);
  v14.i64[0] = v19.u32[0];
  v14.i64[1] = v19.u32[1];
  int8x16_t v20 = v14;
  int32x4_t v21 = vmovl_high_s16(v16);
  v14.i64[0] = v21.u32[0];
  v14.i64[1] = v21.u32[1];
  int8x16_t v22 = v14;
  v14.i64[0] = v13.u32[2];
  v14.i64[1] = v13.u32[3];
  int8x16_t v23 = v14;
  v14.i64[0] = v17.u32[2];
  v14.i64[1] = v17.u32[3];
  int8x16_t v24 = v14;
  v14.i64[0] = v19.u32[2];
  v14.i64[1] = v19.u32[3];
  int8x16_t v25 = v14;
  v14.i64[0] = v21.u32[2];
  v14.i64[1] = v21.u32[3];
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v14);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v25);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v24);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v20);
  int8x16_t v30 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  int16x8_t v31 = vmovl_high_s8(v30);
  *(void *)a1 = &unk_1EF518BE0;
  int32x4_t v32 = vmovl_s16(*(int16x4_t *)v31.i8);
  v14.i64[0] = v32.u32[0];
  v14.i64[1] = v32.u32[1];
  int8x16_t v33 = v14;
  int16x8_t v34 = vmovl_s8(*(int8x8_t *)v30.i8);
  int32x4_t v35 = vmovl_s16(*(int16x4_t *)v34.i8);
  v14.i64[0] = v35.u32[0];
  v14.i64[1] = v35.u32[1];
  int8x16_t v36 = v14;
  int32x4_t v37 = vmovl_high_s16(v31);
  v14.i64[0] = v37.u32[0];
  v14.i64[1] = v37.u32[1];
  int8x16_t v38 = v14;
  int32x4_t v39 = vmovl_high_s16(v34);
  v14.i64[0] = v39.u32[0];
  v14.i64[1] = v39.u32[1];
  int8x16_t v40 = v14;
  v14.i64[0] = v32.u32[2];
  v14.i64[1] = v32.u32[3];
  int8x16_t v41 = v14;
  v14.i64[0] = v35.u32[2];
  v14.i64[1] = v35.u32[3];
  int8x16_t v42 = v14;
  v14.i64[0] = v37.u32[2];
  v14.i64[1] = v37.u32[3];
  int8x16_t v43 = v14;
  v14.i64[0] = v39.u32[2];
  v14.i64[1] = v39.u32[3];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v43);
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v33), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v15));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v36), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v18));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v38), v29);
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v42), v28);
  int8x16_t v51 = vorrq_s8(v44, v27);
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v14), v26);
  int8x16_t v53 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v54 = vmovl_s8(*(int8x8_t *)v53.i8);
  int32x4_t v55 = vmovl_high_s16(v54);
  v14.i64[0] = v55.i32[2];
  v14.i64[1] = v55.i32[3];
  int8x16_t v56 = v14;
  int16x8_t v57 = vmovl_high_s8(v53);
  int32x4_t v58 = vmovl_high_s16(v57);
  v14.i64[0] = v58.i32[2];
  v14.i64[1] = v58.i32[3];
  int8x16_t v59 = v14;
  int32x4_t v60 = vmovl_s16(*(int16x4_t *)v54.i8);
  v14.i64[0] = v60.i32[2];
  v14.i64[1] = v60.i32[3];
  int8x16_t v61 = v14;
  int32x4_t v62 = vmovl_s16(*(int16x4_t *)v57.i8);
  v14.i64[0] = v62.i32[2];
  v14.i64[1] = v62.i32[3];
  int8x16_t v63 = v14;
  v14.i64[0] = v55.i32[0];
  v14.i64[1] = v55.i32[1];
  int8x16_t v64 = v14;
  v14.i64[0] = v58.i32[0];
  v14.i64[1] = v58.i32[1];
  int8x16_t v65 = v14;
  v14.i64[0] = v60.i32[0];
  v14.i64[1] = v60.i32[1];
  int8x16_t v66 = v14;
  v14.i64[0] = v62.i32[0];
  v14.i64[1] = v62.i32[1];
  int8x16_t v67 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v14);
  int8x16_t v68 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v69 = vmovl_high_s8(v68);
  int32x4_t v70 = vmovl_s16(*(int16x4_t *)v69.i8);
  v14.i64[0] = v70.i32[0];
  v14.i64[1] = v70.i32[1];
  int8x16_t v71 = v14;
  int16x8_t v72 = vmovl_s8(*(int8x8_t *)v68.i8);
  int32x4_t v73 = vmovl_s16(*(int16x4_t *)v72.i8);
  v14.i64[0] = v73.i32[0];
  v14.i64[1] = v73.i32[1];
  int8x16_t v74 = v14;
  int32x4_t v75 = vmovl_high_s16(v69);
  v14.i64[0] = v75.i32[0];
  v14.i64[1] = v75.i32[1];
  int8x16_t v76 = v14;
  int32x4_t v77 = vmovl_high_s16(v72);
  v14.i64[0] = v77.i32[0];
  v14.i64[1] = v77.i32[1];
  int8x16_t v78 = v14;
  v14.i64[0] = v70.i32[2];
  v14.i64[1] = v70.i32[3];
  int8x16_t v79 = v14;
  v14.i64[0] = v73.i32[2];
  v14.i64[1] = v73.i32[3];
  int8x16_t v80 = v14;
  v14.i64[0] = v75.i32[2];
  v14.i64[1] = v75.i32[3];
  int8x16_t v81 = v14;
  v14.i64[0] = v77.i32[2];
  v14.i64[1] = v77.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v74), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v66)), v46), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v71), v67), v45)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v64)), v48), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v76), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v65)),
                                               v47))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v61)), v50), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v63)), v49)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v14), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v56)), v52), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v81),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v59)),
                                               v51)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::Textured::SRGBBlendPos4DUVPipelineState::SRGBBlendPos4DUVPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int8x16_t v83 = a4;
    int8x16_t v85 = a2;
    uint64_t v86 = a3;
    a2 = v85;
    a3 = v86;
    a4 = v83;
    if (v84)
    {
      {
        if (v84)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            unk_1E958CB20 = 1;
          }
          ggl::Textured::SRGBBlendPos4DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          *(void *)algn_1E958ADA8 = &ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineDeviceStructs(void)::ref;
          qword_1E958ADB0 = 0;
          {
            ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E958B060 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E958B068 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
            unk_1E958B070 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
            qword_1E958B078 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1E958ADB8 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineConstantStructs(void)::ref;
          unk_1E958ADC0 = xmmword_1A28FC940;
        }
      }
      ggl::Textured::SRGBBlendPos4DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::SRGBBlendPos4DUVPipelineSetup::typedReflection(void)::ref;
      ggl::TexturedDrapedSRGBBlendShader::typedReflection(v84);
      qword_1E958ADE0 = (uint64_t)&ggl::TexturedDrapedSRGBBlendShader::typedReflection(void)::ref;
      {
        ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E958B480 = 0;
        qword_1E958B488 = (uint64_t)"";
        dword_1E958B490 = 0;
        qword_1E958B498 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineAttributeBinding_0(void)::attr;
        unk_1E958B4A0 = 2;
      }
      qword_1E958ADE8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineAttributeStructBinding(void)::attr;
      unk_1E958ADF0 = 1;
      qword_1E958ADF8 = 0;
      unk_1E958AE00 = 1;
      qword_1E958AE08 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineDeviceStructBinding(void)::ref;
      unk_1E958AE10 = 0;
      {
        ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1E958B290 = 0;
        qword_1E958B298 = (uint64_t)"view";
        dword_1E958B2A0 = 3;
        qword_1E958B2A8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E958B2B0 = xmmword_1A28FCEB0;
        qword_1E958B2C0 = 1;
        unk_1E958B2C8 = "transform";
        dword_1E958B2D0 = 3;
        qword_1E958B2D8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantTransformBinding(void)::reflection;
        unk_1E958B2E0 = xmmword_1A28FCF70;
        qword_1E958B2F0 = 2;
        unk_1E958B2F8 = "tileScalar";
        dword_1E958B300 = 3;
        qword_1E958B308 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantTileScalarBinding(void)::reflection;
        *(_OWORD *)algn_1E958B310 = xmmword_1A28FD040;
        qword_1E958B320 = 3;
        unk_1E958B328 = "style";
        dword_1E958B330 = 3;
        qword_1E958B338 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantStyleBinding(void)::reflection;
        unk_1E958B340 = xmmword_1A28FCD60;
        qword_1E958B350 = 4;
        unk_1E958B358 = "alphaTint";
        dword_1E958B360 = 3;
        qword_1E958B368 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1E958B370 = 1;
      }
      qword_1E958AE18 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantStructBinding(void)::ref;
      unk_1E958AE20 = 5;
      a4 = v83;
      a2 = v85;
      a3 = v86;
    }
  }
  uint64_t v7 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v89 = *(_OWORD *)a3;
  *(_OWORD *)&v89[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v87 = *a4;
  long long v88 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Textured::SRGBBlendPos4DUVPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v87;
  *(_OWORD *)(a1 + 272) = v88;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v89;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v89[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(_WORD *)(a1 + 305) = 256;
  *(unsigned char *)(a1 + 307) = 1;
  int8x16_t v11 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v12 = vmovl_high_s8(v11);
  int32x4_t v13 = vmovl_s16(*(int16x4_t *)v12.i8);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  int8x16_t v15 = v14;
  int16x8_t v16 = vmovl_s8(*(int8x8_t *)v11.i8);
  int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
  v14.i64[0] = v17.u32[0];
  v14.i64[1] = v17.u32[1];
  int8x16_t v18 = v14;
  int32x4_t v19 = vmovl_high_s16(v12);
  v14.i64[0] = v19.u32[0];
  v14.i64[1] = v19.u32[1];
  int8x16_t v20 = v14;
  int32x4_t v21 = vmovl_high_s16(v16);
  v14.i64[0] = v21.u32[0];
  v14.i64[1] = v21.u32[1];
  int8x16_t v22 = v14;
  v14.i64[0] = v13.u32[2];
  v14.i64[1] = v13.u32[3];
  int8x16_t v23 = v14;
  v14.i64[0] = v17.u32[2];
  v14.i64[1] = v17.u32[3];
  int8x16_t v24 = v14;
  v14.i64[0] = v19.u32[2];
  v14.i64[1] = v19.u32[3];
  int8x16_t v25 = v14;
  v14.i64[0] = v21.u32[2];
  v14.i64[1] = v21.u32[3];
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v14);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v25);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v24);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v20);
  int8x16_t v30 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  int16x8_t v31 = vmovl_high_s8(v30);
  int32x4_t v32 = vmovl_s16(*(int16x4_t *)v31.i8);
  v14.i64[0] = v32.u32[0];
  v14.i64[1] = v32.u32[1];
  int8x16_t v33 = v14;
  *(void *)a1 = &unk_1EF518B90;
  int16x8_t v34 = vmovl_s8(*(int8x8_t *)v30.i8);
  int32x4_t v35 = vmovl_s16(*(int16x4_t *)v34.i8);
  v14.i64[0] = v35.u32[0];
  v14.i64[1] = v35.u32[1];
  int8x16_t v36 = v14;
  int32x4_t v37 = vmovl_high_s16(v31);
  v14.i64[0] = v37.u32[0];
  v14.i64[1] = v37.u32[1];
  int8x16_t v38 = v14;
  int32x4_t v39 = vmovl_high_s16(v34);
  v14.i64[0] = v39.u32[0];
  v14.i64[1] = v39.u32[1];
  int8x16_t v40 = v14;
  v14.i64[0] = v32.u32[2];
  v14.i64[1] = v32.u32[3];
  int8x16_t v41 = v14;
  v14.i64[0] = v35.u32[2];
  v14.i64[1] = v35.u32[3];
  int8x16_t v42 = v14;
  v14.i64[0] = v37.u32[2];
  v14.i64[1] = v37.u32[3];
  int8x16_t v43 = v14;
  v14.i64[0] = v39.u32[2];
  v14.i64[1] = v39.u32[3];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v43);
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v33), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v15));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v36), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v18));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v38), v29);
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v42), v28);
  int8x16_t v51 = vorrq_s8(v44, v27);
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v14), v26);
  int8x16_t v53 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v54 = vmovl_s8(*(int8x8_t *)v53.i8);
  int32x4_t v55 = vmovl_high_s16(v54);
  v14.i64[0] = v55.i32[2];
  v14.i64[1] = v55.i32[3];
  int8x16_t v56 = v14;
  int16x8_t v57 = vmovl_high_s8(v53);
  int32x4_t v58 = vmovl_high_s16(v57);
  v14.i64[0] = v58.i32[2];
  v14.i64[1] = v58.i32[3];
  int8x16_t v59 = v14;
  int32x4_t v60 = vmovl_s16(*(int16x4_t *)v54.i8);
  v14.i64[0] = v60.i32[2];
  v14.i64[1] = v60.i32[3];
  int8x16_t v61 = v14;
  int32x4_t v62 = vmovl_s16(*(int16x4_t *)v57.i8);
  v14.i64[0] = v62.i32[2];
  v14.i64[1] = v62.i32[3];
  int8x16_t v63 = v14;
  v14.i64[0] = v55.i32[0];
  v14.i64[1] = v55.i32[1];
  int8x16_t v64 = v14;
  v14.i64[0] = v58.i32[0];
  v14.i64[1] = v58.i32[1];
  int8x16_t v65 = v14;
  v14.i64[0] = v60.i32[0];
  v14.i64[1] = v60.i32[1];
  int8x16_t v66 = v14;
  v14.i64[0] = v62.i32[0];
  v14.i64[1] = v62.i32[1];
  int8x16_t v67 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v14);
  int8x16_t v68 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v69 = vmovl_high_s8(v68);
  int32x4_t v70 = vmovl_s16(*(int16x4_t *)v69.i8);
  v14.i64[0] = v70.i32[0];
  v14.i64[1] = v70.i32[1];
  int8x16_t v71 = v14;
  int16x8_t v72 = vmovl_s8(*(int8x8_t *)v68.i8);
  int32x4_t v73 = vmovl_s16(*(int16x4_t *)v72.i8);
  v14.i64[0] = v73.i32[0];
  v14.i64[1] = v73.i32[1];
  int8x16_t v74 = v14;
  int32x4_t v75 = vmovl_high_s16(v69);
  v14.i64[0] = v75.i32[0];
  v14.i64[1] = v75.i32[1];
  int8x16_t v76 = v14;
  int32x4_t v77 = vmovl_high_s16(v72);
  v14.i64[0] = v77.i32[0];
  v14.i64[1] = v77.i32[1];
  int8x16_t v78 = v14;
  v14.i64[0] = v70.i32[2];
  v14.i64[1] = v70.i32[3];
  int8x16_t v79 = v14;
  v14.i64[0] = v73.i32[2];
  v14.i64[1] = v73.i32[3];
  int8x16_t v80 = v14;
  v14.i64[0] = v75.i32[2];
  v14.i64[1] = v75.i32[3];
  int8x16_t v81 = v14;
  v14.i64[0] = v77.i32[2];
  v14.i64[1] = v77.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v74), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v66)), v46), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v71), v67), v45)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v64)), v48), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v76), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v65)),
                                               v47))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v61)), v50), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v63)), v49)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v14), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v56)), v52), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v81),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v59)),
                                               v51)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::PolygonOverlay::AntialiasPipelineState::AntialiasPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int8x16_t v84 = a4;
    uint64_t v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonOverlay::antialiasVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::attributesReflection(void)::r;
            unk_1EB32B598 = 1;
          }
          ggl::PolygonOverlay::AntialiasPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::typedReflection(void)::r;
          unk_1E9582EF0 = &ggl::PolygonOverlay::pipelineDataAntialiasPipelineDeviceStructs(void)::ref;
          qword_1E9582EF8 = 0;
          {
            ggl::PolygonOverlay::pipelineDataAntialiasPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9582F50 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9582F58 = (uint64_t)ggl::PolygonOverlay::AntialiasConstants::reflection(void)::reflection;
            unk_1E9582F60 = ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1E9582F00 = (uint64_t)&ggl::PolygonOverlay::pipelineDataAntialiasPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E9582F08 = xmmword_1A28FE1F0;
        }
      }
      ggl::PolygonOverlay::AntialiasPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonOverlay::AntialiasPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonOverlayAntialiasShader::typedReflection(v85);
      qword_1E958DDE8 = (uint64_t)&ggl::PolygonOverlayAntialiasShader::typedReflection(void)::ref;
      {
        ggl::PolygonOverlay::pipelineStateAntialiasPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9583130 = 0;
        qword_1E9583138 = (uint64_t)"";
        dword_1E9583140 = 0;
        qword_1E9583148 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineAttributeBinding_0(void)::attr;
        unk_1E9583150 = 3;
      }
      qword_1E958DDF0 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E958DDF8 = 1;
      qword_1E958DE00 = 0;
      unk_1E958DE08 = 1;
      qword_1E958DE10 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineDeviceStructBinding(void)::ref;
      unk_1E958DE18 = 0;
      {
        ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9583070 = 0;
        qword_1E9583078 = (uint64_t)"view";
        dword_1E9583080 = 3;
        qword_1E9583088 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9583090 = xmmword_1A28FCEB0;
        qword_1E95830A0 = 1;
        unk_1E95830A8 = "transform";
        dword_1E95830B0 = 3;
        qword_1E95830B8 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantTransformBinding(void)::reflection;
        unk_1E95830C0 = xmmword_1A28FCF70;
        qword_1E95830D0 = 2;
        unk_1E95830D8 = "antialias";
        dword_1E95830E0 = 3;
        qword_1E95830E8 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantAntialiasBinding(void)::reflection;
        *(int64x2_t *)algn_1E95830F0 = vdupq_n_s64(3uLL);
        qword_1E9583100 = 3;
        unk_1E9583108 = "alphaTint";
        dword_1E9583110 = 3;
        qword_1E9583118 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1E9583120 = 1;
      }
      qword_1E958DE20 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E958DE28 = 4;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::PolygonOverlay::AntialiasPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  *(void *)a1 = &unk_1EF55B810;
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::SignedDistanceFieldGenerator::initializeHypotCache(void)::$_0 &&>>()
{
  bzero(md::SignedDistanceFieldGenerator::_hypotCache, 0x20200uLL);
  unint64_t v0 = 0;
  uint64_t v1 = 1;
  do
  {
    unint64_t v2 = 0;
    do
    {
      if ((v2 | v0) <= 0xFF)
      {
        if (v2 <= v0) {
          uint64_t v3 = v0;
        }
        else {
          uint64_t v3 = v2;
        }
        if (v2 >= v0) {
          unint64_t v4 = v0;
        }
        else {
          unint64_t v4 = v2;
        }
        if (v3 <= 1) {
          LOWORD(v3) = 1;
        }
        md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v3 - 1) * v3) >> 1) + v4] = sqrtf((float)(uint64_t)(v0 * v0 + v2 * v2));
      }
      ++v2;
    }
    while (v1 != v2);
    ++v0;
    ++v1;
  }
  while (v0 != 256);
}

void md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1CC2370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v31 = v22;
  if (v18[32])
  {
    uint64_t v25 = v18[30];
    int8x16_t v26 = (uint64_t *)v18[31];
    uint64_t v27 = *v26;
    *(void *)(v27 + 8) = *(void *)(v25 + 8);
    **(void **)(v25 + 8) = v27;
    v18[32] = 0;
    if (v26 != v21)
    {
      do
      {
        int8x16_t v28 = (uint64_t *)v26[1];
        int8x16_t v29 = (std::__shared_weak_count *)v26[6];
        if (v29)
        {
          if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v26);
        int8x16_t v26 = v28;
      }
      while (v28 != v21);
    }
  }
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::~MarkedLRUCache(v20);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v24);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v23);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v31);
  uint64_t v30 = std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v18);
  MEMORY[0x1A6239270](v30, 0x10A0C40296A7848);
  md::GeometryContext::~GeometryContext((md::GeometryContext *)&a17);
  MEMORY[0x1A6239270](v17, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void sub_1A1CC2548()
{
}

void *std::list<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry>>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x40uLL);
      long long v8 = *(_OWORD *)(v3 + 16);
      v7[8] = *(_DWORD *)(v3 + 32);
      *((_OWORD *)v7 + 1) = v8;
      uint64_t v9 = *(void *)(v3 + 48);
      *((void *)v7 + 5) = *(void *)(v3 + 40);
      *((void *)v7 + 6) = v9;
      if (v9)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        uint64_t v6 = (_DWORD *)*a1;
        uint64_t v5 = a1[2];
      }
      *((void *)v7 + 7) = *(void *)(v3 + 56);
      *(void *)uint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = *(void *)(v3 + 8);
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1A1CC2610(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        long long v8 = (std::__shared_weak_count *)v5[6];
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,std::allocator<std::pair<md::GeometryContext::SplineKey const,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(*(void *)(a2 + 8));
      int8x8_t v6 = *(int8x8_t *)(a1 + 8);
      BOOL v7 = prime >= *(void *)&v6;
      if (prime > *(void *)&v6) {
        goto LABEL_17;
      }
    }
    else
    {
      int8x8_t v6 = 0;
      BOOL v7 = 1;
      if (prime) {
        goto LABEL_17;
      }
    }
    if (v7) {
      goto LABEL_18;
    }
    unint64_t v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v6 < 3uLL || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      size_t prime = v8;
    }
    if (prime >= *(void *)&v6) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  size_t prime = 2;
LABEL_17:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
LABEL_18:
  int8x16_t v11 = *(uint64_t **)(a2 + 16);
  if (!v11) {
    return a1;
  }
  int8x16_t v12 = (void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 8);
LABEL_20:
  while (2)
  {
    uint64_t v14 = *((int *)v11 + 4);
    uint64_t v15 = *((unsigned __int8 *)v11 + 24);
    unint64_t v16 = (v14
         - 0x61C8864680B583EBLL
         + ((v15 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)) ^ (v15 - 0x61C8864680B583EBLL);
    uint64_t v17 = *((int *)v11 + 5);
    unint64_t v18 = (v17 - 0x61C8864680B583EBLL + (v16 << 6) + (v16 >> 2)) ^ v16;
    uint64_t v19 = *((int *)v11 + 7);
    uint64_t v20 = *((int *)v11 + 8);
    unint64_t v21 = (v19 - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
    unint64_t v22 = (v20 - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
    if (v13)
    {
      uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        uint64_t v2 = (v20 - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
        if (v22 >= v13) {
          uint64_t v2 = v22 % v13;
        }
      }
      else
      {
        uint64_t v2 = v22 & (v13 - 1);
      }
      uint64_t v24 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
      if (v24)
      {
        uint64_t v25 = *v24;
        if (v25)
        {
          if (v23.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v27 = v25[1];
              if (v27 == v22)
              {
                if (*((_DWORD *)v25 + 4) == v14
                  && __PAIR64__(*((unsigned __int8 *)v25 + 24), *((_DWORD *)v25 + 5)) == __PAIR64__(v15, v17)
                  && *(uint64_t *)((char *)v25 + 28) == __PAIR64__(v20, v19))
                {
                  goto LABEL_44;
                }
              }
              else if ((v27 & (v13 - 1)) != v2)
              {
                goto LABEL_46;
              }
              uint64_t v25 = (uint64_t *)*v25;
              if (!v25) {
                goto LABEL_46;
              }
            }
          }
          do
          {
            unint64_t v26 = v25[1];
            if (v26 == v22)
            {
              if (*((_DWORD *)v25 + 4) == v14
                && __PAIR64__(*((unsigned __int8 *)v25 + 24), *((_DWORD *)v25 + 5)) == __PAIR64__(v15, v17)
                && *(uint64_t *)((char *)v25 + 28) == __PAIR64__(v20, v19))
              {
LABEL_44:
                int8x16_t v11 = (uint64_t *)*v11;
                if (!v11) {
                  return a1;
                }
                goto LABEL_20;
              }
            }
            else
            {
              if (v26 >= v13) {
                v26 %= v13;
              }
              if (v26 != v2) {
                break;
              }
            }
            uint64_t v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_46:
    int8x16_t v28 = operator new(0x30uLL);
    *int8x16_t v28 = 0;
    v28[1] = v22;
    long long v29 = *((_OWORD *)v11 + 2);
    *((_OWORD *)v28 + 1) = *((_OWORD *)v11 + 1);
    *((_OWORD *)v28 + 2) = v29;
    float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v31 = *(float *)(a1 + 32);
    if (!v13 || (float)(v31 * (float)v13) < v30)
    {
      BOOL v32 = v13 < 3 || (v13 & (v13 - 1)) != 0;
      unint64_t v33 = v32 | (2 * v13);
      unint64_t v34 = vcvtps_u32_f32(v30 / v31);
      if (v33 <= v34) {
        size_t v35 = v34;
      }
      else {
        size_t v35 = v33;
      }
      if (v35 == 1)
      {
        size_t v35 = 2;
      }
      else if ((v35 & (v35 - 1)) != 0)
      {
        size_t v35 = std::__next_prime(v35);
        unint64_t v13 = *(void *)(a1 + 8);
      }
      if (v35 > v13) {
        goto LABEL_59;
      }
      if (v35 < v13)
      {
        unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v13 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          unint64_t v36 = std::__next_prime(v36);
        }
        else
        {
          uint64_t v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2) {
            unint64_t v36 = v38;
          }
        }
        if (v35 <= v36) {
          size_t v35 = v36;
        }
        if (v35 < v13) {
LABEL_59:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v35);
      }
      unint64_t v13 = *(void *)(a1 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v22 >= v13) {
          uint64_t v2 = v22 % v13;
        }
        else {
          uint64_t v2 = v22;
        }
      }
      else
      {
        uint64_t v2 = (v13 - 1) & v22;
      }
    }
    uint64_t v39 = *(void *)a1;
    int32x4_t v40 = *(void **)(*(void *)a1 + 8 * v2);
    if (v40)
    {
      *int8x16_t v28 = *v40;
      goto LABEL_83;
    }
    *int8x16_t v28 = *v12;
    *int8x16_t v12 = v28;
    *(void *)(v39 + 8 * v2) = v12;
    if (*v28)
    {
      unint64_t v41 = *(void *)(*v28 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v41 >= v13) {
          v41 %= v13;
        }
      }
      else
      {
        v41 &= v13 - 1;
      }
      int32x4_t v40 = (void *)(*(void *)a1 + 8 * v41);
LABEL_83:
      *int32x4_t v40 = v28;
    }
    ++*(void *)(a1 + 24);
    int8x16_t v11 = (uint64_t *)*v11;
    if (v11) {
      continue;
    }
    return a1;
  }
}

void sub_1A1CC2B34(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

double md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 160) = a1 + 160;
  *(void *)(a1 + 168) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(void *)(a1 + 224) = a1 + 160;
  *(void *)(a1 + 240) = a1 + 240;
  *(void *)(a1 + 248) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(void *)(a1 + 304) = a1 + 240;
  return result;
}

void md::GeometryContext::~GeometryContext(md::GeometryContext *this)
{
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::~MarkedLRUCache((uint64_t *)this + 30);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::~MarkedLRUCache((uint64_t *)this + 20);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  int8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    BOOL v7 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v7 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v9) {
      goto LABEL_25;
    }
  }
  else
  {
    uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_25:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    int8x16_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v11) {
      return;
    }
  }
  else
  {
    int8x16_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

uint64_t *geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::~MarkedLRUCache(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4) {
    operator delete(v4);
  }
  if (a1[2])
  {
    uint64_t v5 = *a1;
    int8x8_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = *v6;
    *(void *)(v7 + 8) = *(void *)(*a1 + 8);
    **(void **)(v5 + 8) = v7;
    a1[2] = 0;
    if (v6 != a1)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v6[1];
        uint8x8_t v9 = (std::__shared_weak_count *)v6[6];
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        operator delete(v6);
        int8x8_t v6 = v8;
      }
      while (v8 != a1);
    }
  }
  return a1;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 48;
  uint64_t v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsES5_EEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_(&v3);
}

void sub_1A1CC3050(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsES5_EEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_(char ***a1)
{
  uint64_t v2 = *a1;
  unint64_t v4 = (*a1)[1];
  unint64_t v3 = (unint64_t)(*a1)[2];
  if ((unint64_t)v4 >= v3)
  {
    int8x8_t v6 = *v2;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *v2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_36;
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (void)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_37;
      }
      int8x16_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      int8x16_t v11 = 0;
    }
    int8x16_t v12 = &v11[24 * v7];
    *(void *)int8x16_t v12 = 0xC62D89929260CB56;
    *((void *)v12 + 1) = "md::ls::FunctionConstants]";
    *((void *)v12 + 2) = 25;
    uint64_t v5 = v12 + 24;
    if (v4 != v6)
    {
      do
      {
        long long v13 = *(_OWORD *)(v4 - 24);
        *((void *)v12 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v4 -= 24;
      }
      while (v4 != v6);
      unint64_t v4 = *v2;
    }
    char *v2 = v12;
    v2[1] = v5;
    v2[2] = &v11[24 * v10];
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *(void *)unint64_t v4 = 0xC62D89929260CB56;
    *((void *)v4 + 1) = "md::ls::FunctionConstants]";
    *((void *)v4 + 2) = 25;
    uint64_t v5 = v4 + 24;
  }
  v2[1] = v5;
  uint64_t v14 = *a1;
  unint64_t v16 = (*a1)[1];
  unint64_t v15 = (unint64_t)v14[2];
  if ((unint64_t)v16 < v15)
  {
    *(void *)unint64_t v16 = 0xC62D89929260CB56;
    *((void *)v16 + 1) = "md::ls::FunctionConstants]";
    *((void *)v16 + 2) = 25;
    uint64_t v17 = v16 + 24;
    goto LABEL_35;
  }
  unint64_t v18 = *v14;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *v14) >> 3);
  unint64_t v20 = v19 + 1;
  if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_36:
  }
    abort();
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v18) >> 3);
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x555555555555555) {
    unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v22 = v20;
  }
  if (!v22)
  {
    uint8x8_t v23 = 0;
    goto LABEL_30;
  }
  if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_37:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint8x8_t v23 = (char *)operator new(24 * v22);
LABEL_30:
  uint64_t v24 = &v23[24 * v19];
  *(void *)uint64_t v24 = 0xC62D89929260CB56;
  *((void *)v24 + 1) = "md::ls::FunctionConstants]";
  *((void *)v24 + 2) = 25;
  uint64_t v17 = v24 + 24;
  if (v16 != v18)
  {
    do
    {
      long long v25 = *(_OWORD *)(v16 - 24);
      *((void *)v24 - 1) = *((void *)v16 - 1);
      *(_OWORD *)(v24 - 24) = v25;
      v24 -= 24;
      v16 -= 24;
    }
    while (v16 != v18);
    unint64_t v16 = *v14;
  }
  uint64_t *v14 = v24;
  v14[1] = v17;
  v14[2] = &v23[24 * v22];
  if (v16) {
    operator delete(v16);
  }
LABEL_35:
  v14[1] = v17;
}

void ___ZN2md18LoadingStatusLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_12SceneContextEEEENS6_IJNS_25IdentifiedResourceContextEEEEEE20ResolvedDependenciesERNS_20LoadingStatusContextE_block_invoke_1(uint64_t a1)
{
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 32) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LoadRequiredLayers", "", v5, 2u);
  }
}

void ___ZN2md18LoadingStatusLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_12SceneContextEEEENS6_IJNS_25IdentifiedResourceContextEEEEEE20ResolvedDependenciesERNS_20LoadingStatusContextE_block_invoke(uint64_t a1)
{
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 32) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LoadAllLayers", "", v5, 2u);
  }
}

void md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1CC35E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void gss::StyleManagerExtension::initWithName<gss::PropertyID>(void *a1, uint64_t a2, unsigned int a3, void *a4, float a5)
{
  id v9 = a4;
  [v9 stylesheetVendor];
  gss::StyleManagerExtension::initWithName<gss::PropertyID>(a1, a2, a3, v10, a5);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v11->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A1CC3708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void md::StyleLogic::updateConfiguration(md::StyleLogic *this, int a2)
{
  uint64_t v309 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 274) = a2;
  if (!*((void *)this + 26)) {
    operator new();
  }
  if (!*((void *)this + 28)) {
    operator new();
  }
  if (*((void *)this + 30)) {
    goto LABEL_6;
  }
  *((unsigned char *)&v249.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v249, "scene");
  float v28 = *((float *)this + 30);
  unsigned int v29 = *((unsigned __int8 *)this + 161);
  id v243 = *((id *)this + 17);
  [v243 stylesheetVendor];
  uint64_t v30 = v250;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v289);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v289, (uint64_t)&v249, 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v289, (uint64_t)"_", 1);
  float v31 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"_", 1);
  BOOL v32 = gss::to_string(v29);
  size_t v33 = strlen(v32);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
  unint64_t v34 = (os_unfair_lock_s *)(v30 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v30 + 24));
  char v244 = v29;
  if ((v297[16] & 0x10) != 0)
  {
    uint64_t v38 = *(char **)&v297[8];
    if (*(void *)&v297[8] < (unint64_t)v294)
    {
      *(void *)&v297[8] = v294;
      uint64_t v38 = v294;
    }
    uint64_t v39 = (const void **)&v293;
  }
  else
  {
    if ((v297[16] & 8) == 0)
    {
      std::string::size_type v35 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_53;
    }
    uint64_t v39 = (const void **)v291;
    uint64_t v38 = v292;
  }
  int8x16_t v43 = *v39;
  std::string::size_type v35 = v38 - (unsigned char *)*v39;
  if (v35 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v35 >= 0x17)
  {
    uint64_t v44 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v44 = v35 | 7;
    }
    uint64_t v45 = v44 + 1;
    p_dst = (std::string *)operator new(v44 + 1);
    __dst.__r_.__value_.__l.__size_ = v35;
    __dst.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    unint64_t v34 = (os_unfair_lock_s *)(v30 + 24);
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (_BYTE)v38 - *(unsigned char *)v39;
    p_dst = &__dst;
    if (!v35) {
      goto LABEL_53;
    }
  }
  memmove(p_dst, v43, v35);
LABEL_53:
  p_dst->__r_.__value_.__s.__data_[v35] = 0;
  std::string::value_type v254 = 0;
  int8x16_t v46 = *(unsigned __int8 **)(v30 + 72);
  int8x16_t v47 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(*(unsigned __int8 **)(v30 + 64), v46, (unsigned __int8 *)&__dst);
  if (v46 == v47)
  {
    unint64_t v242 = v34;
    id v49 = *(id *)(v30 + 16);
    uint64_t v283 = 0;
    BOOL v284 = &v283;
    uint64_t v285 = 0x3032000000;
    uint64_t v286 = __Block_byref_object_copy__26338;
    int8x16_t v287 = __Block_byref_object_dispose__26339;
    id v288 = 0;
    uint64_t v277 = 0;
    uint64_t v278 = &v277;
    uint64_t v279 = 0x3032000000;
    unint64_t v280 = __Block_byref_object_copy__26338;
    uint64_t v281 = __Block_byref_object_dispose__26339;
    id v282 = 0;
    *(void *)&long long v269 = MEMORY[0x1E4F143A8];
    *((void *)&v269 + 1) = 3221225472;
    unsigned int v270 = ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke;
    unsigned int v271 = (std::string *)&unk_1E5A93590;
    unsigned int v273 = &v277;
    int8x16_t v275 = &v249;
    id v50 = v49;
    float v276 = v28;
    id v272 = v50;
    int8x16_t v274 = &v283;
    int8x16_t v51 = (void *)MEMORY[0x1A6239EB0](&v269);
    __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    __p.__r_.__value_.__l.__size_ = 3221225472;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_4;
    int32x4_t v262 = &unk_1E5A935B8;
    char v268 = v244;
    long long v239 = v51;
    uint64_t v264 = v239;
    unint64_t v265 = &v283;
    uint64_t v266 = &v277;
    uint64_t v267 = &v249;
    id v240 = v50;
    id v263 = v240;
    int8x16_t v241 = (void (**)(void, void))MEMORY[0x1A6239EB0](&__p);
    ((void (**)(void, __CFString *))v241)[2](v241, @"styl");
    long long v252 = 0uLL;
    if (v284[5])
    {
      _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_15ScenePropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf);
      uint64_t v237 = *(void *)buf;
      long long v252 = *(_OWORD *)buf;
      char v52 = [v240 isDevResourceWithName:v278[5]];
      id v53 = (id)v284[5];
      int8x8_t v259 = &unk_1EF559D98;
      id v260 = v53;
      if (VectorKitDebugConfig_DecodeStyleNames && *((void *)&VectorKitDebugConfig_DecodeStyleNames + 1)) {
        char BOOL = GEOConfigGetBOOL();
      }
      id v238 = (id)v278[5];
      uint64_t v54 = [ (id) v284[5] bytes];
      uint64_t v55 = [(id)v284[5] length];
      md::StyleSheetExtension::localizationMap((md::StyleSheetExtension *)&v257, (md::StylesheetVendor *)v30);
      md::StyleSheetExtension::currencyMap((md::StyleSheetExtension *)&v255, (md::StylesheetVendor *)v30);
      *(void *)buf = &unk_1EF559D98;
      *(void *)&buf[8] = 0;
      id v56 = v260;
      int8x16_t v57 = *(void **)&buf[8];
      *(void *)&buf[8] = v56;

      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v305, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
      }
      else {
        std::string v305 = v249;
      }
      p_p = (std::string *)v238;
      int8x16_t v306 = p_p;
      uint64_t v308 = 0;
      int32x4_t v172 = (char *)operator new(0x40uLL);
      *(void *)int32x4_t v172 = &unk_1EF574E98;
      *((void *)v172 + 1) = &unk_1EF559D98;
      *((void *)v172 + 2) = 0;
      objc_storeStrong((id *)v172 + 2, *(id *)&buf[8]);
      int8x16_t v173 = *(void **)&buf[8];
      *(void *)&buf[8] = 0;

      int8x16_t v174 = (std::string *)(v172 + 32);
      char v175 = BOOL;
      if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v174, v305.__r_.__value_.__l.__data_, v305.__r_.__value_.__l.__size_);
        char v175 = BOOL;
      }
      else
      {
        *(_OWORD *)&v174->__r_.__value_.__l.__data_ = *(_OWORD *)&v305.__r_.__value_.__l.__data_;
        *((void *)v172 + 6) = *((void *)&v305.__r_.__value_.__l + 2);
      }
      int8x16_t v176 = v306;
      int8x16_t v306 = 0;
      *((void *)v172 + 7) = v176;
      uint64_t v308 = v172;
      gss::StyleSheet<gss::ScenePropertyID>::decodeStylesheetData(v237, v54, v55, (void **)&v249.__r_.__value_.__l.__data_, v244, v52, &v257, &v255, v28, v175 & 1, v307);
      if (v308 == v307)
      {
        (*(void (**)(void *))(v307[0] + 32))(v307);
      }
      else if (v308)
      {
        (*(void (**)(void))(*v308 + 40))();
      }

      if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v305.__r_.__value_.__l.__data_);
      }
      *(void *)buf = &unk_1EF559D98;

      uint64_t v177 = v256;
      if (v256 && !atomic_fetch_add(&v256->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
      int8x16_t v178 = v258;
      if (v258 && !atomic_fetch_add(&v258->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }

      int8x8_t v259 = &unk_1EF559D98;
    }
    else
    {
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
      }
      int16x8_t v167 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
      {
        int v168 = SHIBYTE(v249.__r_.__value_.__r.__words[2]);
        std::string::size_type v169 = v249.__r_.__value_.__r.__words[0];
        uint64_t v170 = [ (id) v278[5] UTF8String];
        long long v171 = &v249;
        if (v168 < 0) {
          long long v171 = (std::string *)v169;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&void buf[4] = v171;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v170;
        _os_log_impl(&dword_1A1780000, v167, OS_LOG_TYPE_ERROR, "Couldn't find %s.styl in framework, file name %s", buf, 0x16u);
      }
    }
    _Block_object_dispose(&v277, 8);

    _Block_object_dispose(&v283, 8);
    uint64_t v179 = *(unsigned __int8 **)(v30 + 64);
    uint64_t v180 = *(unsigned __int8 **)(v30 + 72);
    unint64_t v181 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(v179, v180, (unsigned __int8 *)&__dst);
    unint64_t v34 = v242;
    if (v180 == v181)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        p_p = &__p;
        uint64_t v179 = *(unsigned __int8 **)(v30 + 64);
      }
      else
      {
        p_p = &__p;
        std::string __p = __dst;
      }
      std::string::value_type v208 = v254;
      LOBYTE(v262) = v254;
      id v263 = 0;
      uint64_t v264 = 0;
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      uint64_t v209 = *(std::string **)(v30 + 72);
      unint64_t v181 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(v179, (unsigned __int8 *)v209, (unsigned __int8 *)&__p);
      if (v209 == (std::string *)v181)
      {
        unint64_t v211 = *(void *)(v30 + 80);
        if (v211 <= (unint64_t)v209)
        {
          unint64_t v213 = 0xAAAAAAAAAAAAAAABLL * (((char *)v209 - (char *)v179) >> 4);
          unint64_t v214 = v213 + 1;
          if (v213 + 1 > 0x555555555555555) {
            abort();
          }
          unint64_t v215 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - (void)v179) >> 4);
          if (2 * v215 > v214) {
            unint64_t v214 = 2 * v215;
          }
          if (v215 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v216 = 0x555555555555555;
          }
          else {
            unint64_t v216 = v214;
          }
          id v272 = (id)(v30 + 80);
          if (v216)
          {
            if (v216 > 0x555555555555555) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v217 = (std::string *)operator new(48 * v216);
          }
          else
          {
            uint64_t v217 = 0;
          }
          BOOL v220 = v217 + 2 * v213;
          *(void *)&long long v269 = v217;
          *((void *)&v269 + 1) = v220;
          unsigned int v270 = (void (*)(uint64_t, void *, void *))v220;
          unsigned int v271 = &v217[2 * v216];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v217 + 2 * v213, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            std::string::size_type v223 = (std::string::size_type)v263;
            long long v222 = v264;
            v220[1].__r_.__value_.__s.__data_[0] = (char)v262;
            long long v224 = v217 + 2 * v213;
            v224[1].__r_.__value_.__l.__size_ = v223;
            v224[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v222;
            if (v222) {
              atomic_fetch_add_explicit(v222 + 1, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            std::string *v220 = __p;
            v220[1].__r_.__value_.__s.__data_[0] = v208;
            unsigned int v221 = v217 + 2 * v213;
            v221[1].__r_.__value_.__l.__size_ = 0;
            v221[1].__r_.__value_.__r.__words[2] = 0;
          }
          uint64_t v225 = *((void *)&v269 + 1);
          unsigned int v219 = (std::string *)((char *)v270 + 48);
          uint64_t v226 = *(void (**)(uint64_t, void *, void *))(v30 + 64);
          uint64_t v227 = *(void (**)(uint64_t, void *, void *))(v30 + 72);
          if (v227 == v226)
          {
            BOOL v232 = *(void (**)(uint64_t, void *, void *))(v30 + 72);
          }
          else
          {
            uint64_t v228 = 0;
            do
            {
              uint64_t v229 = v225 + v228;
              uint64_t v230 = (char *)v227 + v228;
              long long v231 = *(_OWORD *)((char *)v227 + v228 - 48);
              *(void *)(v229 - 32) = *(void *)((char *)v227 + v228 - 32);
              *(_OWORD *)(v229 - 48) = v231;
              *((void *)v230 - 5) = 0;
              *((void *)v230 - 4) = 0;
              *((void *)v230 - 6) = 0;
              *(unsigned char *)(v229 - 24) = *((unsigned char *)v227 + v228 - 24);
              *(_OWORD *)(v229 - 16) = *(_OWORD *)((char *)v227 + v228 - 16);
              *((void *)v230 - 2) = 0;
              *((void *)v230 - 1) = 0;
              v228 -= 48;
            }
            while ((void (*)(uint64_t, void *, void *))((char *)v227 + v228) != v226);
            v225 += v228;
            BOOL v232 = *(void (**)(uint64_t, void *, void *))(v30 + 64);
            uint64_t v227 = *(void (**)(uint64_t, void *, void *))(v30 + 72);
          }
          *((void *)&v269 + 1) = v232;
          *(void *)(v30 + 64) = v225;
          *(void *)(v30 + 72) = v219;
          uint64_t v233 = *(std::string **)(v30 + 80);
          *(void *)(v30 + 80) = v271;
          unsigned int v271 = v233;
          *(void *)&long long v269 = v232;
          if (v227 != v232)
          {
            do
            {
              p_p = (std::string *)((char *)v227 - 48);
              unsigned int v270 = (void (*)(uint64_t, void *, void *))((char *)v227 - 48);
              uint64_t v234 = (std::__shared_weak_count *)*((void *)v227 - 1);
              if (v234 && !atomic_fetch_add(&v234->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                std::__shared_weak_count::__release_weak(v234);
              }
              if (*((char *)v227 - 25) < 0) {
                operator delete(p_p->__r_.__value_.__l.__data_);
              }
              uint64_t v227 = v270;
            }
            while (v270 != v232);
            uint64_t v227 = (void (*)(uint64_t, void *, void *))v269;
          }
          if (v227) {
            operator delete(v227);
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v209, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v212 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v209->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v209->__r_.__value_.__l.__data_ = v212;
          }
          v209[1].__r_.__value_.__s.__data_[0] = (char)v262;
          v209[1].__r_.__value_.__l.__size_ = (std::string::size_type)v263;
          unsigned int v218 = v264;
          v209[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v264;
          if (v218) {
            atomic_fetch_add_explicit(v218 + 1, 1uLL, memory_order_relaxed);
          }
          unsigned int v219 = v209 + 2;
          *(void *)(v30 + 72) = v209 + 2;
        }
        *(void *)(v30 + 72) = v219;
        unint64_t v181 = (unsigned __int8 *)&v219[-2];
        uint64_t v235 = (std::__shared_weak_count *)v264;
        if (v264 && !atomic_fetch_add(v264 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
          std::__shared_weak_count::__release_weak(v235);
        }
      }
      unint64_t v34 = v242;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int8x16_t v210 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
        std::__shared_weak_count::__release_weak(v210);
      }
    }
    long long v182 = v252;
    if (*((void *)&v252 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v252 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v183 = (std::__shared_weak_count *)*((void *)v181 + 5);
    *((_OWORD *)v181 + 2) = v182;
    if (v183 && !atomic_fetch_add(&v183->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  else
  {
    uint64_t v48 = *((void *)v47 + 5);
    *(void *)&long long v252 = *((void *)v47 + 4);
    *((void *)&v252 + 1) = v48;
    if (v48) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  os_unfair_lock_unlock(v34);
  *(void *)int8x16_t v289 = *MEMORY[0x1E4FBA418];
  *(void *)&v289[*(void *)(*(void *)v289 - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&v289[8] = MEMORY[0x1E4FBA470] + 16;
  if ((v297[7] & 0x80000000) != 0) {
    operator delete((void *)v296);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](&v297[24]);
  uint64_t v184 = v252;
  if (!(void)v252)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    BOOL v185 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v185, OS_LOG_TYPE_INFO))
    {
      int8x16_t v186 = &v249;
      if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int8x16_t v186 = (std::string *)v249.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int8x16_t v289 = 136315138;
      *(void *)&v289[4] = v186;
      _os_log_impl(&dword_1A1780000, v185, OS_LOG_TYPE_INFO, "stylesheetVendor returned null styleSheet for %s", v289, 0xCu);
    }

    _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_15ScenePropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v289);
    long long v187 = *(_OWORD *)v289;
    memset(v289, 0, sizeof(v289));
    int32x4_t v188 = (std::__shared_weak_count *)*((void *)&v252 + 1);
    long long v252 = v187;
    if (v188 && !atomic_fetch_add(&v188->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
    int16x8_t v189 = *(std::__shared_weak_count **)&v289[8];
    if (*(void *)&v289[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v289[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    long long v269 = 0uLL;
    char v190 = GEOConfigGetBOOL();
    *(void *)int8x16_t v289 = &unk_1EF57CEA0;
    v291[0] = v289;
    gss::StyleSheet<gss::ScenePropertyID>::decodeStylesheetData(v252, 0, 0, (void **)&v249.__r_.__value_.__l.__data_, v244, 0, (uint64_t *)&__p, (uint64_t *)&v269, v28, v190, v289);
    if ((uint8_t *)v291[0] == v289)
    {
      (*(void (**)(uint8_t *))(*(void *)v289 + 32))(v289);
    }
    else if (v291[0])
    {
      (*(void (**)(void))(*(void *)v291[0] + 40))();
    }
    uint64_t v184 = v252;
  }
  *(void *)&long long v269 = v184;
  *((void *)&v269 + 1) = *((void *)&v252 + 1);
  if (*((void *)&v252 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v252 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (v184) {
    operator new();
  }
  int32x4_t v191 = (std::__shared_weak_count *)*((void *)&v269 + 1);
  if (*((void *)&v269 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v269 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
    std::__shared_weak_count::__release_weak(v191);
  }
  uint64_t v192 = (std::__shared_weak_count *)*((void *)&v252 + 1);
  if (*((void *)&v252 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v252 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
    std::__shared_weak_count::__release_weak(v192);
  }
  uint64_t v193 = v251;
  if (v251 && !atomic_fetch_add(&v251->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
    std::__shared_weak_count::__release_weak(v193);
  }

  unint64_t v194 = (std::__shared_weak_count *)*((void *)this + 31);
  *((_OWORD *)this + 15) = 0u;
  if (v194 && !atomic_fetch_add(&v194->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
    std::__shared_weak_count::__release_weak(v194);
  }

  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  uint64_t v196 = (std::__shared_weak_count *)*((void *)this + 29);
  uint64_t v195 = *((void *)this + 30);
  uint64_t v197 = *((void *)this + 28);
  if (v196)
  {
    atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v195 + 520) = v197;
  int16x8_t v198 = *(std::__shared_weak_count **)(v195 + 528);
  *(void *)(v195 + 528) = v196;
  if (v198 && !atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
    std::__shared_weak_count::__release_weak(v198);
  }
  if (v196 && !atomic_fetch_add(&v196->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
    std::__shared_weak_count::__release_weak(v196);
  }
LABEL_6:
  uint64_t v4 = *((void *)this + 33);
  *(void *)int8x16_t v289 = *((void *)this + 32);
  *(void *)&v289[8] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *((void *)this + 35);
  uint64_t v290 = *((void *)this + 34);
  v291[0] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  int8x8_t v6 = (char *)*((void *)this + 37);
  v291[1] = *((void *)this + 36);
  uint64_t v292 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  }
  int8x16_t v294 = 0;
  unint64_t v293 = 0;
  unint64_t v295 = 0;
  unint64_t v8 = (unsigned char *)*((void *)this + 38);
  unint64_t v7 = (unsigned char *)*((void *)this + 39);
  size_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if ((v9 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v293 = (char *)operator new(v7 - v8);
    int8x16_t v294 = v293;
    uint64_t v10 = &v293[v9];
    unint64_t v295 = &v293[v9];
    memcpy(v293, v8, v9);
    int8x16_t v294 = v10;
  }
  long long v296 = *(_OWORD *)((char *)this + 328);
  *(_OWORD *)uint64_t v297 = *(_OWORD *)((char *)this + 344);
  *(_OWORD *)&v297[9] = *(_OWORD *)((char *)this + 353);
  uint64_t v300 = 0;
  unint64_t v298 = 0;
  uint64_t v299 = 0;
  int8x16_t v12 = (unsigned char *)*((void *)this + 47);
  int8x16_t v11 = (unsigned char *)*((void *)this + 48);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      abort();
    }
    uint64_t v14 = (char *)operator new(v11 - v12);
    unint64_t v298 = v14;
    uint64_t v299 = v14;
    uint64_t v300 = &v14[8 * (v13 >> 3)];
    size_t v15 = v13 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v14, v12, v15);
    uint64_t v299 = &v14[v15];
  }
  BOOL v302 = 0;
  uint64_t v301 = 0;
  uint64_t v303 = 0;
  uint64_t v17 = (unsigned char *)*((void *)this + 50);
  unint64_t v16 = (unsigned char *)*((void *)this + 51);
  uint64_t v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0) {
      abort();
    }
    unint64_t v19 = (char *)operator new(v16 - v17);
    uint64_t v301 = v19;
    BOOL v302 = v19;
    uint64_t v303 = &v19[8 * (v18 >> 3)];
    size_t v20 = v18 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v19, v17, v20);
    BOOL v302 = &v19[v20];
  }
  switch(*((_DWORD *)this + 274))
  {
    case 0:
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xB:
      unint64_t v21 = (uint64_t *)((char *)this + 424);
      if (!*((void *)this + 53))
      {
        if (*((unsigned char *)this + 181))
        {
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
          strcpy((char *)&__p, "default-snapshotter");
          float v22 = *((float *)this + 30);
          unsigned int v23 = *((unsigned __int8 *)this + 161);
          id v24 = *((id *)this + 17);
          gss::StyleManagerExtension::initWithName<gss::PropertyID>(&v269, (uint64_t)&__p, v23, v24, v22);
          long long v25 = v269;
          long long v269 = 0uLL;
          unint64_t v26 = (std::__shared_weak_count *)*((void *)this + 54);
          *(_OWORD *)unint64_t v21 = v25;
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          uint64_t v27 = (std::__shared_weak_count *)*((void *)&v269 + 1);
          if (*((void *)&v269 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v269 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        else
        {
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&__p, "default");
          float v58 = *((float *)this + 30);
          unsigned int v59 = *((unsigned __int8 *)this + 161);
          id v24 = *((id *)this + 17);
          gss::StyleManagerExtension::initWithName<gss::PropertyID>(&v269, (uint64_t)&__p, v59, v24, v58);
          long long v60 = v269;
          long long v269 = 0uLL;
          int32x4_t v61 = (std::__shared_weak_count *)*((void *)this + 54);
          *(_OWORD *)unint64_t v21 = v60;
          if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
          int8x16_t v62 = (std::__shared_weak_count *)*((void *)&v269 + 1);
          if (*((void *)&v269 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v269 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }

        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        md::StyleLogic::setupDecodingCallbacks(*((void *)this + 151), *((std::__shared_weak_count **)this + 152), (uint64_t **)this + 53);
      }
      if (*((void *)this + 55)) {
        goto LABEL_79;
      }
      uint64_t v64 = *((void *)this + 30);
      uint64_t v63 = *((void *)this + 31);
      if (v63) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
      }
      int8x16_t v42 = (std::__shared_weak_count *)*((void *)this + 56);
      *((void *)this + 55) = v64;
      *((void *)this + 56) = v63;
      if (!v42) {
        goto LABEL_79;
      }
      goto LABEL_77;
    case 1:
    case 7:
      unint64_t v21 = (uint64_t *)((char *)this + 760);
      if (*((void *)this + 95)) {
        goto LABEL_39;
      }
      id v164 = *((id *)this + 17);
      unint64_t v165 = v164;
      if (v164)
      {
        [v164 stylesheetVendor];
        uint64_t v166 = *(void *)buf;
      }
      else
      {
        uint64_t v166 = 0;
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "satellite");
      md::StylesheetVendor::stylesheetWithName<gss::PropertyID>(&v269, v166, (uint64_t)&__p, *((unsigned __int8 *)this + 161), *((float *)this + 30));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int32x4_t v199 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }

      if ((void)v269)
      {
        *(_OWORD *)buf = v269;
        if (*((void *)&v269 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v269 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        gss::StylesheetManager<gss::PropertyID>::initWithStyleSheet(&__p, buf);
        long long v200 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        int8x16_t v201 = (std::__shared_weak_count *)*((void *)this + 96);
        *(_OWORD *)unint64_t v21 = v200;
        if (v201 && !atomic_fetch_add(&v201->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
        int32x4_t v203 = *(std::__shared_weak_count **)&buf[8];
        if (!*(void *)&buf[8]) {
          goto LABEL_308;
        }
LABEL_306:
        if (!atomic_fetch_add(&v203->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
        goto LABEL_308;
      }
      unint64_t v204 = md::StyleLogic::hybridContext(this);
      int8x16_t v206 = *v204;
      int8x16_t v205 = v204[1];
      if (v205) {
        atomic_fetch_add_explicit(v205 + 1, 1uLL, memory_order_relaxed);
      }
      *((void *)this + 95) = v206;
      int32x4_t v203 = (std::__shared_weak_count *)*((void *)this + 96);
      *((void *)this + 96) = v205;
      if (v203) {
        goto LABEL_306;
      }
LABEL_308:
      md::StyleLogic::setupDecodingCallbacks(*((void *)this + 151), *((std::__shared_weak_count **)this + 152), (uint64_t **)this + 95);
      int8x8_t v207 = (std::__shared_weak_count *)*((void *)&v269 + 1);
      if (*((void *)&v269 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v269 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
LABEL_39:
      if (!*((void *)this + 97))
      {
        uint64_t v41 = *((void *)this + 30);
        uint64_t v40 = *((void *)this + 31);
        if (v40) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)this + 97) = v41;
        int8x16_t v42 = (std::__shared_weak_count *)*((void *)this + 98);
        *((void *)this + 98) = v40;
        if (v42)
        {
LABEL_77:
          if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
LABEL_79:
      md::StyleLogicContext::operator=((uint64_t)this + 256, v21);
LABEL_80:
      uint64_t v65 = *((void *)this + 32);
      uint64_t v66 = *((void *)this + 26);
      int8x16_t v67 = (std::__shared_weak_count *)*((void *)this + 27);
      if (v67)
      {
        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)(v65 + 520) = v66;
      int8x16_t v68 = *(std::__shared_weak_count **)(v65 + 528);
      *(void *)(v65 + 528) = v67;
      if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
      if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      uint64_t v69 = *((void *)this + 34);
      if (v69)
      {
        uint64_t v70 = *((void *)this + 28);
        int32x4_t v71 = (std::__shared_weak_count *)*((void *)this + 29);
        if (v71)
        {
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)(v69 + 520) = v70;
        int8x16_t v72 = *(std::__shared_weak_count **)(v69 + 528);
        *(void *)(v69 + 528) = v71;
        if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
        if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      uint64_t v74 = *((void *)this + 26);
      uint64_t v73 = *((void *)this + 27);
      if (v73) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
      }
      int8x16_t v75 = (std::__shared_weak_count *)*((void *)this + 37);
      *((void *)this + 36) = v74;
      *((void *)this + 37) = v73;
      if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
        uint64_t v76 = *(void *)v289;
        if (*(void *)v289)
        {
LABEL_102:
          if (*((void *)this + 32) != v76)
          {
            uint64_t v77 = *((void *)this + 26);
            [*((id *)this + 19) size];
            double v79 = v78;
            [*((id *)this + 19) size];
            double v81 = fmin(v80, v79);
            if (v81 <= 250.0)
            {
              int v82 = 0;
            }
            else if (v81 <= 450.0)
            {
              int v82 = 1;
            }
            else if (v81 <= 850.0)
            {
              int v82 = 2;
            }
            else
            {
              int v82 = 3;
            }
            gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(v77, 0x10018u, v82);
            *((void *)this + 41) = v296;
            *((unsigned char *)this + 336) = 0;
            __p.__r_.__value_.__s.__data_[0] = 0;
            long long v89 = (char *)*((void *)this + 141);
            if (v89 == *((char **)this + 142) || *v89) {
              std::vector<md::StyleManagerEvent>::insert((uint64_t)this + 1128, v89, (char *)&__p);
            }
            id v90 = *((id *)this + 145);
            long long v91 = v90;
            long long v92 = (std::__shared_weak_count *)*((void *)this + 33);
            uint64_t v247 = *((void *)this + 32);
            uint64_t v248 = v92;
            if (v92) {
              atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            [v90 setStyleManager:&v247];
            unint64_t v93 = v248;
            if (v248 && !atomic_fetch_add(&v248->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          goto LABEL_201;
        }
      }
      else
      {
        uint64_t v76 = *(void *)v289;
        if (*(void *)v289) {
          goto LABEL_102;
        }
      }
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7) = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__s.__data_[15] = 1;
      *(void *)((char *)&v269 + 7) = 0;
      *(void *)&long long v269 = 0;
      HIBYTE(v269) = 1;
      uint64_t v83 = *((void *)this + 26);
      [*((id *)this + 19) size];
      double v85 = v84;
      [*((id *)this + 19) size];
      double v87 = fmin(v86, v85);
      if (v87 <= 250.0)
      {
        int v88 = 0;
      }
      else if (v87 <= 450.0)
      {
        int v88 = 1;
      }
      else if (v87 <= 850.0)
      {
        int v88 = 2;
      }
      else
      {
        int v88 = 3;
      }
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(v83, 0x10018u, v88);
      gss::ClientStyleState<gss::PropertyID>::setSourceMapDisplayStyle(*((void *)this + 26), 0x1010000000000);
      gss::ClientStyleState<gss::PropertyID>::setTargetMapDisplayStyle(*((void *)this + 26), 0x1010000000000);
      uint64_t v94 = *((void *)this + 26);
      unsigned int v95 = atomic_load((unsigned int *)(v94 + 256));
      if ((v95 & 0x7FFFFFFF) != 0)
      {
        *(_DWORD *)(v94 + 256) = 0;
        float v96 = COERCE_FLOAT(atomic_load((unsigned int *)(v94 + 256)));
        if (v96 <= 0.0)
        {
          unint64_t v97 = *(unsigned __int16 *)(v94 + 242);
          if (v97 == *(unsigned __int16 *)(v94 + 226))
          {
            if (!*(_WORD *)(v94 + 242)) {
              goto LABEL_139;
            }
            uint64_t v98 = *(_DWORD **)(v94 + 232);
            long long v99 = *(_DWORD **)(v94 + 216);
            if (*v98 == *v99)
            {
              uint64_t v100 = *(unsigned __int16 *)(v94 + 224);
              uint64_t v101 = *(unsigned __int16 *)(v94 + 240);
              if (*(unsigned __int16 *)((char *)v98 + v101) == *(unsigned __int16 *)((char *)v99 + v100))
              {
                unint64_t v102 = 0;
                float v103 = v98 + 1;
                char v104 = v99 + 1;
                uint64_t v105 = (uint64_t)v98 + v101 + 2;
                uint64_t v106 = (uint64_t)v99 + v100 + 2;
                while (v97 - 1 != v102)
                {
                  uint64_t v107 = v102++;
                  if (v103[v107] != v104[v107]) {
                    goto LABEL_365;
                  }
                  if (*(unsigned __int16 *)(v105 + 2 * v107) != *(unsigned __int16 *)(v106 + 2 * v107))
                  {
                    unint64_t v102 = v107 + 1;
                    goto LABEL_365;
                  }
                }
                unint64_t v102 = *(unsigned __int16 *)(v94 + 242);
LABEL_365:
                LOBYTE(v97) = v102 < v97;
                goto LABEL_139;
              }
            }
          }
        }
        LOBYTE(v97) = 1;
LABEL_139:
        atomic_store(v97, (unsigned __int8 *)(v94 + 254));
        int v108 = *(unsigned __int8 *)(v94 + 253);
        unsigned __int8 v109 = atomic_load((unsigned __int8 *)(v94 + 254));
        if (v108 != (v109 & 1))
        {
          unsigned __int8 v110 = atomic_load((unsigned __int8 *)(v94 + 254));
          *(unsigned char *)(v94 + 253) = v110 & 1;
          atomic_fetch_add((atomic_uint *volatile)(v94 + 248), 1u);
        }
      }
      uint64_t v111 = *((void *)this + 26);
      *(void *)buf = v111 + 16;
      uint64_t v112 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v111 + 16));
      if (v112) {
        geo::read_write_lock::logFailure(v112, (uint64_t)"write lock", v113);
      }
      unsigned int v114 = WORD1(__p.__r_.__value_.__r.__words[1]);
      if (WORD1(__p.__r_.__value_.__r.__words[1]))
      {
        size_t v115 = 0;
        unsigned int v116 = 0;
        std::string::size_type v117 = __p.__r_.__value_.__r.__words[0];
        std::string::size_type v118 = __p.__r_.__value_.__r.__words[0] + LOWORD(__p.__r_.__value_.__r.__words[1]);
        do
        {
          if (v116 < v114)
          {
            size_t v115 = (unsigned int *)(v117 + 4 * v116);
            p_p = (std::string *)(v118 + 2 * v116);
          }
          __int16 data = (__int16)p_p->__r_.__value_.__l.__data_;
          *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(v111 + 216), *v115) = data;
          unsigned int v120 = v116 + 1;
          if (v116 + 1 < v114) {
            ++v116;
          }
          else {
            unsigned int v116 = v114;
          }
        }
        while (v120 < v114);
      }
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(v111 + 216);
      float v121 = COERCE_FLOAT(atomic_load((unsigned int *)(v111 + 256)));
      LOBYTE(v122) = 1;
      if (v121 <= 0.0)
      {
        unint64_t v122 = *(unsigned __int16 *)(v111 + 242);
        if (v122 != *(unsigned __int16 *)(v111 + 226)) {
          goto LABEL_161;
        }
        if (!*(_WORD *)(v111 + 242)) {
          goto LABEL_162;
        }
        uint64_t v123 = *(_DWORD **)(v111 + 232);
        uint64_t v124 = *(_DWORD **)(v111 + 216);
        if (*v123 == *v124
          && (unint64_t v125 = (unsigned __int16 *)((char *)v124 + *(unsigned __int16 *)(v111 + 224)),
              uint64_t v126 = (unsigned __int16 *)((char *)v123 + *(unsigned __int16 *)(v111 + 240)),
              *v126 == *v125))
        {
          unint64_t v127 = 0;
          uint64_t v128 = 1;
          while (1)
          {
            if (v122 == v128)
            {
              unint64_t v129 = *(unsigned __int16 *)(v111 + 242);
              goto LABEL_333;
            }
            unint64_t v129 = v128;
            ++v127;
            if (v123[v128] != v124[v128]) {
              break;
            }
            ++v128;
            if (v126[v129] != v125[v129]) {
              goto LABEL_333;
            }
          }
          unint64_t v129 = v127;
LABEL_333:
          LOBYTE(v122) = v129 < v122;
        }
        else
        {
LABEL_161:
          LOBYTE(v122) = 1;
        }
      }
LABEL_162:
      atomic_store(v122, (unsigned __int8 *)(v111 + 254));
      atomic_fetch_add((atomic_uint *volatile)(v111 + 248), 1u);
      int8x8_t v130 = (geo::read_write_lock *)pthread_rwlock_unlock(*(pthread_rwlock_t **)buf);
      if (v130) {
        geo::read_write_lock::logFailure(v130, (uint64_t)"unlock", v131);
      }
      uint64_t v132 = *((void *)this + 26);
      *(void *)buf = v132 + 16;
      uint64_t v133 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v132 + 16));
      if (v133) {
        geo::read_write_lock::logFailure(v133, (uint64_t)"write lock", v134);
      }
      unsigned int v135 = WORD5(v269);
      if (WORD5(v269))
      {
        unint64_t v136 = 0;
        unsigned int v137 = 0;
        uint64_t v138 = v269;
        uint64_t v139 = v269 + WORD4(v269);
        do
        {
          if (v137 < v135)
          {
            unint64_t v136 = (unsigned int *)(v138 + 4 * v137);
            p_p = (std::string *)(v139 + 2 * v137);
          }
          __int16 v140 = (__int16)p_p->__r_.__value_.__l.__data_;
          *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(v132 + 232), *v136) = v140;
          unsigned int v141 = v137 + 1;
          if (v137 + 1 < v135) {
            ++v137;
          }
          else {
            unsigned int v137 = v135;
          }
        }
        while (v141 < v135);
      }
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(v132 + 232);
      float v142 = COERCE_FLOAT(atomic_load((unsigned int *)(v132 + 256)));
      LOBYTE(v143) = 1;
      if (v142 > 0.0) {
        goto LABEL_185;
      }
      unint64_t v143 = *(unsigned __int16 *)(v132 + 242);
      if (v143 != *(unsigned __int16 *)(v132 + 226)) {
        goto LABEL_184;
      }
      if (*(_WORD *)(v132 + 242))
      {
        uint64_t v144 = *(_DWORD **)(v132 + 232);
        uint64_t v145 = *(_DWORD **)(v132 + 216);
        if (*v144 == *v145)
        {
          BOOL v146 = (unsigned __int16 *)((char *)v145 + *(unsigned __int16 *)(v132 + 224));
          uint64_t v147 = (unsigned __int16 *)((char *)v144 + *(unsigned __int16 *)(v132 + 240));
          if (*v147 == *v146)
          {
            unint64_t v148 = 0;
            uint64_t v149 = 1;
            while (1)
            {
              if (v143 == v149)
              {
                unint64_t v150 = *(unsigned __int16 *)(v132 + 242);
                goto LABEL_335;
              }
              unint64_t v150 = v149;
              ++v148;
              if (v144[v149] != v145[v149]) {
                break;
              }
              ++v149;
              if (v147[v150] != v146[v150]) {
                goto LABEL_335;
              }
            }
            unint64_t v150 = v148;
LABEL_335:
            LOBYTE(v143) = v150 < v143;
            goto LABEL_185;
          }
        }
LABEL_184:
        LOBYTE(v143) = 1;
      }
LABEL_185:
      atomic_store(v143, (unsigned __int8 *)(v132 + 254));
      atomic_fetch_add((atomic_uint *volatile)(v132 + 248), 1u);
      int8x16_t v151 = (geo::read_write_lock *)pthread_rwlock_unlock(*(pthread_rwlock_t **)buf);
      if (v151) {
        geo::read_write_lock::logFailure(v151, (uint64_t)"unlock", v152);
      }
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10048u, 1);
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10049u, 0);
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10019u, *((unsigned __int8 *)this + 160));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10045u, *((unsigned __int8 *)this + 164));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10073u, *((unsigned __int8 *)this + 165));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x1003Du, *((unsigned __int8 *)this + 166));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10051u, *((unsigned __int8 *)this + 172));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10071u, *((unsigned __int8 *)this + 173));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10072u, *((unsigned __int8 *)this + 174));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x1007Eu, *((unsigned __int8 *)this + 175));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10078u, *((unsigned __int8 *)this + 162));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10077u, *((unsigned __int8 *)this + 163));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10080u, *((unsigned __int8 *)this + 177));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10082u, *((unsigned __int16 *)this + 552));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((void *)this + 26), 0x10083u, *((unsigned __int8 *)this + 178));
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*((void *)this + 28), 0x10077u, *((unsigned __int8 *)this + 163));
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*((void *)this + 28), 0x10078u, *((unsigned __int8 *)this + 162));
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*((void *)this + 28), 0x10082u, *((unsigned __int16 *)this + 552));
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*((void *)this + 28), 0x10083u, *((unsigned __int8 *)this + 178));
      buf[0] = 0;
      uint64_t v153 = (char *)*((void *)this + 141);
      if (v153 == *((char **)this + 142) || *v153) {
        std::vector<md::StyleManagerEvent>::insert((uint64_t)this + 1128, v153, (char *)buf);
      }
      id v154 = *((id *)this + 145);
      uint64_t v155 = v154;
      long long v156 = (std::__shared_weak_count *)*((void *)this + 33);
      uint64_t v245 = *((void *)this + 32);
      unint64_t v246 = v156;
      if (v156) {
        atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v154 setStyleManager:&v245];
      uint64_t v157 = v246;
      if (v246 && !atomic_fetch_add(&v246->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }

      if (!BYTE14(v269))
      {
        uint64_t v159 = v269;
        if ((void)v269)
        {
          uint64_t v160 = gss::Allocator::instance(v158);
          int8x16_t v158 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v160 + 40))(v160, v159, WORD6(v269));
        }
      }
      if (!__p.__r_.__value_.__s.__data_[14])
      {
        std::string::size_type v161 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
          uint64_t v162 = gss::Allocator::instance(v158);
          (*(void (**)(uint64_t, std::string::size_type, void))(*(void *)v162 + 40))(v162, v161, WORD2(__p.__r_.__value_.__r.__words[1]));
        }
      }
LABEL_201:
      uint64_t v163 = **((void **)this + 155);
      if (v163)
      {
        __p.__r_.__value_.__s.__data_[0] = 8;
        md::MapEngine::setNeedsTick(v163, &__p);
      }
      md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)v289);
      return;
    case 2:
      uint8x8_t v37 = md::StyleLogic::hybridContext(this);
      goto LABEL_63;
    case 3:
    case 4:
    case 0xA:
      uint8x8_t v37 = md::StyleLogic::globeContext(this);
LABEL_63:
      unint64_t v21 = (uint64_t *)v37;
      goto LABEL_79;
    default:
      goto LABEL_80;
  }
}

void sub_1A1CC617C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_unfair_lock_s *lock, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>::~__split_buffer((uint64_t)&a65);
  std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>::~pair((uint64_t)&a55);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v65 - 208);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a38);
  if (a46 < 0) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(lock);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x240]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a36);

  if (a33 < 0)
  {
    operator delete(a28);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::StyleLogicContext::~StyleLogicContext(md::StyleLogicContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    int8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    int8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void gss::StyleManagerExtension::initWithName<gss::PropertyID>(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, float a5)
{
  char v5 = a3;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  md::StylesheetVendor::stylesheetWithName<gss::PropertyID>(&v20, a4, a2, a3, a5);
  uint64_t v9 = v20;
  if (!(void)v20)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    uint64_t v10 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = *(void *)a2;
      }
      LODWORD(buf[0]) = 136315138;
      *(uint64_t *)((char *)buf + 4) = v11;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "stylesheetVendor returned null styleSheet for %s", (uint8_t *)buf, 0xCu);
    }

    _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_10PropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf);
    long long v12 = *(_OWORD *)buf;
    memset(buf, 0, 16);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    long long v20 = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = (std::__shared_weak_count *)buf[1];
    if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)(buf[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    memset(buf, 0, 16);
    v19[0] = 0;
    v19[1] = 0;
    char BOOL = GEOConfigGetBOOL();
    v21[0] = &unk_1EF57CE58;
    float v22 = v21;
    gss::StyleSheet<gss::PropertyID>::decodeStylesheetData(v20, 0, 0, (void **)a2, v5, 0, buf, v19, a5, BOOL, v21);
    if (v22 == v21)
    {
      (*(void (**)(void *))(v21[0] + 32))(v21);
    }
    else if (v22)
    {
      (*(void (**)(void))(*v22 + 40))();
    }
    uint64_t v9 = v20;
  }
  unint64_t v16 = (std::__shared_weak_count *)*((void *)&v20 + 1);
  v18[0] = v9;
  v18[1] = *((void *)&v20 + 1);
  if (*((void *)&v20 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  gss::StylesheetManager<gss::PropertyID>::initWithStyleSheet(a1, v18);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v20 + 1);
  if (*((void *)&v20 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1A1CC6AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::function<void ()(BOOL)>::~function((uint64_t *)va2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v5 - 80);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *gss::StylesheetManager<gss::PropertyID>::initWithStyleSheet(void *result, void *a2)
{
  if (*a2) {
    operator new();
  }
  *double result = 0;
  result[1] = 0;
  return result;
}

void sub_1A1CC6DD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::unique_ptr<gss::StylesheetManager<gss::PropertyID>>::~unique_ptr[abi:nn180100]((uint64_t *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1CC6DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  geo::read_write_lock::~read_write_lock(v14);
  std::vector<std::weak_ptr<gss::FeatureQueryImpl<gss::PropertyID>>,geo::StdAllocator<std::weak_ptr<gss::FeatureQueryImpl<gss::PropertyID>>,gss::Allocator>>::~vector[abi:nn180100](v13);
  std::unordered_map<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::hash<gss::StyleKey>,std::equal_to<gss::StyleKey>,geo::StdAllocator<std::pair<gss::StyleKey const,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,gss::Allocator>>::~unordered_map[abi:nn180100](v12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v11);
  unint64_t v16 = *(std::__shared_weak_count **)(v10 + 8);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a10);
  MEMORY[0x1A6239270](v10, 0x10A0C40DB985E3BLL);
  _Unwind_Resume(a1);
}

void ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_4(uint64_t a1, void *a2)
{
  id v14 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 == 2)
  {
    uint64_t v4 = @"-iosmac";
LABEL_5:
    uint64_t v5 = [&stru_1EF593218 stringByAppendingString:v4];
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    uint64_t v4 = @"-car";
    goto LABEL_5;
  }
  uint64_t v5 = &stru_1EF593218;
LABEL_8:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_9:
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      int8x8_t v6 = *(uint64_t **)(a1 + 64);
      if (*((char *)v6 + 23) < 0) {
        int8x8_t v6 = (uint64_t *)*v6;
      }
      uint64_t v7 = [NSString stringWithCString:v6 encoding:4];
      uint64_t v8 = [v7 stringByAppendingPathExtension:v14];
      uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      uint64_t v11 = [*(id *)(a1 + 32) dataForResourceWithName:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }
  }
}

void sub_1A1CC6FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_2;
  v22[3] = &unk_1E5A93540;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v26 = v7;
  id v8 = v6;
  id v23 = v8;
  id v24 = *(id *)(a1 + 32);
  uint64_t v9 = (void *)MEMORY[0x1A6239EB0](v22);
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  uint64_t v18 = ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_3;
  unint64_t v19 = &unk_1E5A93568;
  id v10 = v9;
  id v20 = v10;
  int v21 = *(_DWORD *)(a1 + 64);
  uint64_t v11 = (void (**)(void, void))MEMORY[0x1A6239EB0](&v16);
  uint64_t v12 = &stru_1EF593218;
  if (objc_msgSend(v5, "length", v16, v17, v18, v19))
  {
    uint64_t v12 = [&stru_1EF593218 stringByAppendingString:v5];
  }
  uint64_t v13 = ((void (**)(void, __CFString *))v11)[2](v11, v12);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  size_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;
}

void sub_1A1CC717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

id ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (*(void (**)(float))(*(void *)(a1 + 32) + 16))(*(float *)(a1 + 40));
  if (!v4)
  {
    float v5 = *(float *)(a1 + 40);
    if (v5 >= 2.6)
    {
      uint64_t v4 = (*(void (**)(float))(*(void *)(a1 + 32) + 16))(2.6);
      if (v4) {
        goto LABEL_9;
      }
      float v5 = *(float *)(a1 + 40);
    }
    float v6 = ceilf(v5);
    if (v6 <= 0.0)
    {
LABEL_8:
      uint64_t v4 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v4 = (*(void (**)(float))(*(void *)(a1 + 32) + 16))(v6);
        if (v4) {
          break;
        }
        float v6 = v6 + -1.0;
        if (v6 <= 0.0) {
          goto LABEL_8;
        }
      }
    }
  }
LABEL_9:

  return v4;
}

void sub_1A1CC72B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_2(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  unint64_t v6 = vcvtms_u32_f32(a3);
  float v7 = (float)((float)(a3 - floorf(a3)) * 10.0) + 0.5;
  if ((int)v7) {
    objc_msgSend(NSString, "stringWithFormat:", @"@%lu.%ux", v6, (int)v7);
  }
  else {
  id v8 = objc_msgSend(NSString, "stringWithFormat:", @"@%lux", v6);
  }
  double v9 = a3;
  id v10 = *(uint64_t **)(a1 + 56);
  int v11 = *((char *)v10 + 23);
  if (a3 <= 1.9)
  {
    if (v11 < 0) {
      id v10 = (uint64_t *)*v10;
    }
    uint64_t v12 = [NSString stringWithFormat:@"%s%@.%@", v9, v10, v5, *(void *)(a1 + 32)];
  }
  else
  {
    if (v11 < 0) {
      id v10 = (uint64_t *)*v10;
    }
    uint64_t v12 = [NSString stringWithFormat:@"%s%@%@.%@", v9, v10, v5, v8, *(void *)(a1 + 32)];
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  size_t v15 = [*(id *)(a1 + 40) dataForResourceWithName:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

  return v15;
}

void sub_1A1CC7424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<gss::StylesheetManager<gss::ScenePropertyID> *,std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>>::__shared_ptr_default_delete<gss::StylesheetManager<gss::ScenePropertyID>,gss::StylesheetManager<gss::ScenePropertyID>>,std::allocator<gss::StylesheetManager<gss::ScenePropertyID>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    gss::StylesheetManager<gss::PropertyID>::~StylesheetManager(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_15ScenePropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0xBD0uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A548;
  v2[1].std::__shared_count = 0u;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  HIBYTE(v2[3].__vftable) = 0;
  LODWORD(v2[3].__shared_owners_) = 0;
  BYTE4(v2[3].__shared_owners_) = 0;
  v2[3].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v2[3].__shared_weak_owners_ + 5) = 0;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[5].__shared_owners_ = 0u;
  v2[6].std::__shared_count = 0u;
  v2[7].__vftable = 0;
  LOWORD(v2[4].__shared_owners_) = 0;
  *(std::__shared_weak_count_vtbl **)((char *)&v2[7].__vftable + 5) = 0;
  v2[7].__shared_weak_owners_ = 0;
  LOBYTE(v2[2].__shared_owners_) = 0;
  *(_DWORD *)((char *)&v2[6].__shared_owners_ + 7) = 0;
  v2[8].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v2[8].__shared_owners_ = 0u;
  v2[9].std::__shared_count = 0u;
  *(_OWORD *)&v2[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[10].__shared_owners_ = 0u;
  v2[11].std::__shared_count = 0u;
  *(_OWORD *)((char *)&v2[11].__shared_owners_ + 4) = 0u;
  HIDWORD(v2[12].__vftable) = 0x4000;
  *(_OWORD *)&v2[12].__shared_owners_ = 0u;
  v2[13].std::__shared_count = 0u;
  v2[13].__shared_weak_owners_ = 0x400000000000;
  v2[14].std::__shared_count = 0u;
  *(_OWORD *)&v2[14].__shared_weak_owners_ = 0u;
  v2[15].__shared_owners_ = 0x400000000000;
  v2[15].__shared_weak_owners_ = 0;
  v2[16].__vftable = 0;
  v2[16].__shared_owners_ = 0;
  LODWORD(v2[16].__shared_weak_owners_) = 100;
  v2[17].__vftable = 0;
  v2[17].__shared_owners_ = 0;
  v2[17].__shared_weak_owners_ = 0;
  LODWORD(v2[18].__vftable) = 100;
  v2[18].__shared_owners_ = 0;
  v2[18].__shared_weak_owners_ = 0;
  v2[19].__vftable = 0;
  LODWORD(v2[19].__shared_owners_) = 1024;
  v2[19].__shared_weak_owners_ = 0;
  v2[20].__vftable = 0;
  v2[20].__shared_owners_ = 0;
  LODWORD(v2[20].__shared_weak_owners_) = 1024;
  v2[21].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v2[21].__shared_owners_ = 0u;
  v2[22].std::__shared_count = 0u;
  *(_OWORD *)&v2[22].__shared_weak_owners_ = 0u;
  v2[23].__shared_owners_ = 0;
  v2[23].__shared_weak_owners_ = 850045863;
  v2[26].__vftable = 0;
  *(_OWORD *)&v2[24].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[25].__shared_owners_ = 0u;
  v2[24].std::__shared_count = 0u;
  v2[26].__shared_owners_ = 850045863;
  v2[28].__shared_weak_owners_ = 0;
  *(_OWORD *)&v2[27].__shared_owners_ = 0u;
  v2[28].std::__shared_count = 0u;
  *(_OWORD *)&v2[26].__shared_weak_owners_ = 0u;
  v2[29].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[31].__shared_owners_ = 0;
  v2[30].std::__shared_count = 0u;
  *(_OWORD *)&v2[30].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[29].__shared_owners_ = 0u;
  v2[31].__shared_weak_owners_ = 850045863;
  v2[34].__vftable = 0;
  *(_OWORD *)&v2[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[33].__shared_owners_ = 0u;
  v2[32].std::__shared_count = 0u;
  v2[34].__shared_owners_ = 850045863;
  v2[36].__shared_weak_owners_ = 0;
  *(_OWORD *)&v2[35].__shared_owners_ = 0u;
  v2[36].std::__shared_count = 0u;
  *(_OWORD *)&v2[34].__shared_weak_owners_ = 0u;
  v2[37].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[39].__shared_owners_ = 0;
  v2[38].std::__shared_count = 0u;
  *(_OWORD *)&v2[38].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[37].__shared_owners_ = 0u;
  v2[39].__shared_weak_owners_ = 850045863;
  v2[42].__vftable = 0;
  *(_OWORD *)&v2[40].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[41].__shared_owners_ = 0u;
  v2[40].std::__shared_count = 0u;
  v2[42].__shared_owners_ = 850045863;
  v2[44].__shared_weak_owners_ = 0;
  v2[44].std::__shared_count = 0u;
  *(_OWORD *)&v2[43].__shared_owners_ = 0u;
  *(_OWORD *)&v2[42].__shared_weak_owners_ = 0u;
  v2[45].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[47].__shared_owners_ = 0;
  *(_OWORD *)&v2[46].__shared_weak_owners_ = 0u;
  v2[46].std::__shared_count = 0u;
  *(_OWORD *)&v2[45].__shared_owners_ = 0u;
  v2[47].__shared_weak_owners_ = 850045863;
  v2[50].__vftable = 0;
  *(_OWORD *)&v2[49].__shared_owners_ = 0u;
  *(_OWORD *)&v2[48].__shared_weak_owners_ = 0u;
  v2[48].std::__shared_count = 0u;
  v2[50].__shared_owners_ = 850045863;
  v2[52].__shared_weak_owners_ = 0;
  v2[52].std::__shared_count = 0u;
  *(_OWORD *)&v2[51].__shared_owners_ = 0u;
  *(_OWORD *)&v2[50].__shared_weak_owners_ = 0u;
  v2[53].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[55].__shared_owners_ = 0;
  *(_OWORD *)&v2[54].__shared_weak_owners_ = 0u;
  v2[54].std::__shared_count = 0u;
  *(_OWORD *)&v2[53].__shared_owners_ = 0u;
  v2[55].__shared_weak_owners_ = 850045863;
  v2[58].__vftable = 0;
  *(_OWORD *)&v2[57].__shared_owners_ = 0u;
  *(_OWORD *)&v2[56].__shared_weak_owners_ = 0u;
  v2[56].std::__shared_count = 0u;
  v2[58].__shared_owners_ = 850045863;
  v2[60].__shared_weak_owners_ = 0;
  v2[60].std::__shared_count = 0u;
  *(_OWORD *)&v2[59].__shared_owners_ = 0u;
  *(_OWORD *)&v2[58].__shared_weak_owners_ = 0u;
  v2[61].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[63].__shared_owners_ = 0;
  *(_OWORD *)&v2[62].__shared_weak_owners_ = 0u;
  v2[62].std::__shared_count = 0u;
  *(_OWORD *)&v2[61].__shared_owners_ = 0u;
  v2[63].__shared_weak_owners_ = 850045863;
  v2[66].__vftable = 0;
  *(_OWORD *)&v2[65].__shared_owners_ = 0u;
  *(_OWORD *)&v2[64].__shared_weak_owners_ = 0u;
  v2[64].std::__shared_count = 0u;
  v2[66].__shared_owners_ = 850045863;
  v2[68].__shared_weak_owners_ = 0;
  v2[68].std::__shared_count = 0u;
  *(_OWORD *)&v2[67].__shared_owners_ = 0u;
  *(_OWORD *)&v2[66].__shared_weak_owners_ = 0u;
  v2[69].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[71].__shared_owners_ = 0;
  *(_OWORD *)&v2[70].__shared_weak_owners_ = 0u;
  v2[70].std::__shared_count = 0u;
  *(_OWORD *)&v2[69].__shared_owners_ = 0u;
  v2[71].__shared_weak_owners_ = 850045863;
  v2[74].__vftable = 0;
  *(_OWORD *)&v2[73].__shared_owners_ = 0u;
  *(_OWORD *)&v2[72].__shared_weak_owners_ = 0u;
  v2[72].std::__shared_count = 0u;
  v2[74].__shared_owners_ = 850045863;
  v2[76].__shared_weak_owners_ = 0;
  v2[76].std::__shared_count = 0u;
  *(_OWORD *)&v2[75].__shared_owners_ = 0u;
  *(_OWORD *)&v2[74].__shared_weak_owners_ = 0u;
  v2[77].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[79].__shared_owners_ = 0;
  *(_OWORD *)&v2[78].__shared_weak_owners_ = 0u;
  v2[78].std::__shared_count = 0u;
  *(_OWORD *)&v2[77].__shared_owners_ = 0u;
  v2[79].__shared_weak_owners_ = 850045863;
  v2[82].__vftable = 0;
  *(_OWORD *)&v2[81].__shared_owners_ = 0u;
  *(_OWORD *)&v2[80].__shared_weak_owners_ = 0u;
  v2[80].std::__shared_count = 0u;
  v2[82].__shared_owners_ = 850045863;
  v2[84].__shared_weak_owners_ = 0;
  v2[84].std::__shared_count = 0u;
  *(_OWORD *)&v2[83].__shared_owners_ = 0u;
  *(_OWORD *)&v2[82].__shared_weak_owners_ = 0u;
  v2[85].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[87].__shared_owners_ = 0;
  *(_OWORD *)&v2[86].__shared_weak_owners_ = 0u;
  v2[86].std::__shared_count = 0u;
  *(_OWORD *)&v2[85].__shared_owners_ = 0u;
  v2[87].__shared_weak_owners_ = 850045863;
  v2[90].__vftable = 0;
  *(_OWORD *)&v2[89].__shared_owners_ = 0u;
  *(_OWORD *)&v2[88].__shared_weak_owners_ = 0u;
  v2[88].std::__shared_count = 0u;
  v2[90].__shared_owners_ = 850045863;
  v2[92].__shared_weak_owners_ = 0;
  v2[92].std::__shared_count = 0u;
  *(_OWORD *)&v2[91].__shared_owners_ = 0u;
  *(_OWORD *)&v2[90].__shared_weak_owners_ = 0u;
  v2[93].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[95].__shared_owners_ = 0;
  *(_OWORD *)&v2[94].__shared_weak_owners_ = 0u;
  v2[94].std::__shared_count = 0u;
  *(_OWORD *)&v2[93].__shared_owners_ = 0u;
  v2[95].__shared_weak_owners_ = 850045863;
  v2[98].__vftable = 0;
  *(_OWORD *)&v2[97].__shared_owners_ = 0u;
  *(_OWORD *)&v2[96].__shared_weak_owners_ = 0u;
  v2[96].std::__shared_count = 0u;
  v2[98].__shared_owners_ = 850045863;
  v2[100].__shared_weak_owners_ = 0;
  v2[100].std::__shared_count = 0u;
  *(_OWORD *)&v2[99].__shared_owners_ = 0u;
  *(_OWORD *)&v2[98].__shared_weak_owners_ = 0u;
  v2[101].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[103].__shared_owners_ = 0;
  *(_OWORD *)&v2[102].__shared_weak_owners_ = 0u;
  v2[102].std::__shared_count = 0u;
  *(_OWORD *)&v2[101].__shared_owners_ = 0u;
  v2[103].__shared_weak_owners_ = 850045863;
  v2[114].std::__shared_count = 0u;
  *(_OWORD *)&v2[113].__shared_owners_ = 0u;
  *(_OWORD *)&v2[112].__shared_weak_owners_ = 0u;
  v2[112].std::__shared_count = 0u;
  *(_OWORD *)&v2[111].__shared_owners_ = 0u;
  *(_OWORD *)&v2[110].__shared_weak_owners_ = 0u;
  v2[110].std::__shared_count = 0u;
  *(_OWORD *)&v2[109].__shared_owners_ = 0u;
  *(_OWORD *)&v2[108].__shared_weak_owners_ = 0u;
  v2[108].std::__shared_count = 0u;
  *(_OWORD *)&v2[107].__shared_owners_ = 0u;
  *(_OWORD *)&v2[106].__shared_weak_owners_ = 0u;
  v2[106].std::__shared_count = 0u;
  *(_OWORD *)&v2[105].__shared_owners_ = 0u;
  *(_OWORD *)&v2[104].__shared_weak_owners_ = 0u;
  v2[104].std::__shared_count = 0u;
  id v3 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)&v2[106].__shared_owners_, 0);
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"initialization", v4);
  }
  *(_OWORD *)&v2[114].__shared_weak_owners_ = 0u;
  id v5 = (gss::Allocator *)gss::Allocator::instance(v3);
  v2[115].__shared_owners_ = (uint64_t)v5;
  v2[115].__shared_weak_owners_ = 0;
  v2[116].__vftable = (std::__shared_weak_count_vtbl *)gss::Allocator::instance(v5);
  v2[116].__shared_owners_ = 0;
  LODWORD(v2[116].__shared_weak_owners_) = 1065353216;
  LODWORD(v2[117].__vftable) = 0;
  std::promise<void>::promise((std::promise<void> *)&v2[117].__shared_owners_);
  std::promise<void>::promise((std::promise<void> *)&v2[117].__shared_weak_owners_);
  v2[118].std::__shared_count = 0u;
  v2[118].__shared_weak_owners_ = 850045863;
  v2[121].__vftable = 0;
  v2[119].std::__shared_count = 0u;
  *(_OWORD *)&v2[119].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[120].__shared_owners_ = 0u;
  v2[121].__shared_owners_ = 850045863;
  HIBYTE(v2[125].__shared_weak_owners_) = 0;
  LOBYTE(v2[125].__vftable) = 0;
  *(_OWORD *)&v2[121].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[122].__shared_owners_ = 0u;
  v2[123].std::__shared_count = 0u;
  *(_OWORD *)&v2[123].__shared_weak_owners_ = 0u;
  *(std::__shared_count *)((char *)&v2[124].std::__shared_count + 4) = 0u;
  atomic_store(0, (unsigned __int8 *)&v2[117]);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 1);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 2);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 3);
  std::promise<void>::get_future((std::promise<void> *)&v2[117].__shared_owners_);
  state = v11.__state_;
  float v7 = (std::__assoc_sub_state *)v2[118].__vftable;
  v11.__state_ = 0;
  v12.__state_ = v7;
  v2[118].__vftable = (std::__shared_weak_count_vtbl *)state;
  std::future<void>::~future(&v12);
  std::future<void>::~future(&v11);
  std::promise<void>::get_future((std::promise<void> *)&v2[117].__shared_weak_owners_);
  id v8 = v11.__state_;
  unint64_t shared_owners = (std::__assoc_sub_state *)v2[118].__shared_owners_;
  v11.__state_ = 0;
  v12.__state_ = shared_owners;
  v2[118].__shared_owners_ = (uint64_t)v8;
  std::future<void>::~future(&v12);
  std::future<void>::~future(&v11);
  HIDWORD(v2[12].__vftable) = 1024;
  HIDWORD(v2[13].__shared_weak_owners_) = 1024;
  HIDWORD(v2[15].__shared_owners_) = 1024;
  LODWORD(v2[18].__vftable) = 20;
  LODWORD(v2[16].__shared_weak_owners_) = 20;
  *a1 = v2 + 1;
  a1[1] = v2;
  id v10 = (std::__shared_weak_count *)v2[1].__shared_owners_;
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1A1CC7A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, std::mutex *a14, std::mutex *a15, std::mutex *a16, std::mutex *a17, std::mutex *a18, std::mutex *a19, std::mutex *a20,std::mutex *a21,std::mutex *a22,std::mutex *a23,std::mutex *a24,std::mutex *a25,std::mutex *a26,std::mutex *a27,std::mutex *a28,std::mutex *a29,std::mutex *a30,std::mutex *a31,std::mutex *a32)
{
  *(void *)(v38 - 176) = v32 + 2976;
  *(void *)(v38 - 168) = v32 + 2912;
  if (*(char *)(v32 + 3023) < 0) {
    operator delete(*(void **)(v32 + 3000));
  }
  std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v32 + 2984));
  std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100](*(uint64_t **)(v38 - 176));
  std::mutex::~mutex(*(std::mutex **)(v38 - 168));
  std::mutex::~mutex((std::mutex *)(v32 + 2848));
  std::future<void>::~future((std::future<void> *)(v32 + 2840));
  std::future<void>::~future(v36);
  MEMORY[0x1A62390B0](v35);
  MEMORY[0x1A62390B0](v34);
  std::unordered_map<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,geo::StdAllocator<std::pair<gss::StyleSheetResultCacheKey const,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::~unordered_map[abi:nn180100]((gss::Allocator *)(v32 + 2752));
  geo::read_write_lock::~read_write_lock(v33);
  *(void *)(v38 - 176) = v32 + 632;
  *(void *)(v38 - 168) = v32 + 568;
  std::mutex::~mutex((std::mutex *)(v32 + 2488));
  std::mutex::~mutex((std::mutex *)(v32 + 2424));
  std::mutex::~mutex((std::mutex *)(v32 + 2360));
  std::mutex::~mutex((std::mutex *)(v32 + 2296));
  std::mutex::~mutex((std::mutex *)(v32 + 2232));
  std::mutex::~mutex((std::mutex *)(v32 + 2168));
  std::mutex::~mutex((std::mutex *)(v32 + 2104));
  std::mutex::~mutex((std::mutex *)(v32 + 2040));
  std::mutex::~mutex((std::mutex *)(v32 + 1976));
  std::mutex::~mutex((std::mutex *)(v32 + 1912));
  std::mutex::~mutex((std::mutex *)(v32 + 1848));
  std::mutex::~mutex((std::mutex *)(v32 + 1784));
  std::mutex::~mutex((std::mutex *)(v32 + 1720));
  std::mutex::~mutex((std::mutex *)(v32 + 1656));
  std::mutex::~mutex((std::mutex *)(v32 + 1592));
  std::mutex::~mutex((std::mutex *)(v32 + 1528));
  std::mutex::~mutex((std::mutex *)(v32 + 1464));
  std::mutex::~mutex((std::mutex *)(v32 + 1400));
  std::mutex::~mutex((std::mutex *)(v32 + 1336));
  std::mutex::~mutex((std::mutex *)(v32 + 1272));
  std::mutex::~mutex((std::mutex *)(v32 + 1208));
  std::mutex::~mutex((std::mutex *)(v32 + 1144));
  std::mutex::~mutex((std::mutex *)(v32 + 1080));
  std::mutex::~mutex((std::mutex *)(v32 + 1016));
  std::mutex::~mutex((std::mutex *)(v32 + 952));
  std::mutex::~mutex((std::mutex *)(v32 + 888));
  std::mutex::~mutex((std::mutex *)(v32 + 824));
  std::mutex::~mutex((std::mutex *)(v32 + 760));
  std::mutex::~mutex((std::mutex *)(v32 + 696));
  std::mutex::~mutex(*(std::mutex **)(v38 - 176));
  std::mutex::~mutex(*(std::mutex **)(v38 - 168));
  std::mutex::~mutex((std::mutex *)(v32 + 504));
  gss::InternAllocators<gss::PropertyID>::~InternAllocators(v32 + 256);
  std::mutex::~mutex(v37);
  std::unique_ptr<gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>>::~unique_ptr[abi:nn180100](*(gss::Allocator ***)(v38 - 160));
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(*(void **)(v38 - 152));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](*(void *)(v38 - 144));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](*(void *)(v38 - 136));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](*(void *)(v38 - 128));
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(*(void **)(v38 - 120));
  if (*(char *)(v32 + 79) < 0) {
    operator delete(*(void **)(v32 + 56));
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](*(void *)(v38 - 112));
  uint64_t v40 = *(std::__shared_weak_count **)(v32 + 32);
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v32);
  operator delete(v41);
  _Unwind_Resume(a1);
}

double md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x1010000000000;
  *(_WORD *)(a1 + 81) = 0;
  *(unsigned char *)(a1 + 83) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 92) = 1;
  *(_DWORD *)(a1 + 93) = 0;
  *(unsigned char *)(a1 + 97) = 0;
  *(_DWORD *)(a1 + 108) = 1065353216;
  *(void *)(a1 + 100) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 112) = 4;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

void gss::ClientStyleState<gss::PropertyID>::setSourceMapDisplayStyle(uint64_t a1, uint64_t a2)
{
  unint64_t v19 = (pthread_rwlock_t *)(a1 + 16);
  uint64_t v20 = a2;
  id v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  }
  gss::DisplayStyle::applyDisplayStyle((unsigned __int8 *)&v20, (uint64_t *)(a1 + 216));
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(a1 + 216);
  float v5 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  LOBYTE(v6) = 1;
  if (v5 <= 0.0)
  {
    unint64_t v6 = *(unsigned __int16 *)(a1 + 242);
    if (v6 != *(unsigned __int16 *)(a1 + 226)) {
      goto LABEL_13;
    }
    if (!*(_WORD *)(a1 + 242)) {
      goto LABEL_14;
    }
    float v7 = *(_DWORD **)(a1 + 232);
    id v8 = *(_DWORD **)(a1 + 216);
    if (*v7 == *v8
      && (uint64_t v9 = *(unsigned __int16 *)(a1 + 224),
          uint64_t v10 = *(unsigned __int16 *)(a1 + 240),
          *(unsigned __int16 *)((char *)v7 + v10) == *(unsigned __int16 *)((char *)v8 + v9)))
    {
      unint64_t v11 = 0;
      std::future<void> v12 = v7 + 1;
      uint64_t v13 = v8 + 1;
      uint64_t v14 = (uint64_t)v7 + v10 + 2;
      uint64_t v15 = (uint64_t)v8 + v9 + 2;
      while (v6 - 1 != v11)
      {
        uint64_t v16 = v11++;
        if (v12[v16] != v13[v16]) {
          goto LABEL_20;
        }
        if (*(unsigned __int16 *)(v14 + 2 * v16) != *(unsigned __int16 *)(v15 + 2 * v16))
        {
          unint64_t v11 = v16 + 1;
          goto LABEL_20;
        }
      }
      unint64_t v11 = *(unsigned __int16 *)(a1 + 242);
LABEL_20:
      LOBYTE(v6) = v11 < v6;
    }
    else
    {
LABEL_13:
      LOBYTE(v6) = 1;
    }
  }
LABEL_14:
  atomic_store(v6, (unsigned __int8 *)(a1 + 254));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 248), 1u);
  uint64_t v17 = (geo::read_write_lock *)pthread_rwlock_unlock(v19);
  if (v17)
  {
    geo::read_write_lock::logFailure(v17, (uint64_t)"unlock", v18);
  }
}

void sub_1A1CC7F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
}

uint64_t std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 32);
  v13[0] = &unk_1EF57EF40;
  v13[1] = v2;
  uint64_t v14 = v13;
  std::future<void> v12 = 0;
  unint64_t v6 = operator new(0x20uLL);
  *unint64_t v6 = &unk_1EF57EEF8;
  v6[1] = v2;
  _DWORD v6[2] = a1 + 40;
  void v6[3] = v8;
  std::future<void> v12 = v6;
  gss::StyleSheet<gss::PropertyID>::decodeStyl(v2, v3, v4, v5 != 0, (uint64_t)v13, (uint64_t)v11, v8);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v10);
}

void sub_1A1CC81E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v29 = *(void *)(v27 - 96);
  if (v29 == v26)
  {
    (*(void (**)(uint64_t))(*(void *)(v27 - 120) + 32))(v27 - 120);
  }
  else if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
  }
  uint64_t v30 = *(void *)(v27 - 64);
  if (v30 == v27 - 88)
  {
    (*(void (**)(uint64_t))(*(void *)(v27 - 88) + 32))(v27 - 88);
  }
  else if (v30)
  {
    (*(void (**)(uint64_t))(*(void *)v30 + 40))(v30);
  }
  a9 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a9 + *(void *)(a9 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a10 = MEMORY[0x1E4FBA470] + 16;
  if (a23 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](&a26);
  _Unwind_Resume(a1);
}

void ggl::StenciledAlphaClearShader::typedReflection(ggl::StenciledAlphaClearShader *this)
{
  {
    if (v1)
    {
      ggl::StenciledAlphaClearShader::typedReflection(void)::ref = (uint64_t)"StenciledAlphaClearShader";
      ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(v1);
      qword_1EB322BD0 = (uint64_t)&ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("StenciledAlphaClearShaderVertex");
      dword_1EB322BD8 = (int)v2;
      ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(v2);
      qword_1EB322BE0 = (uint64_t)&ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322BE8 = ggl::crc32::compute<34ul>("StenciledAlphaClearShaderFragment");
      qword_1EB322BF0 = (uint64_t)&ggl::stenciledAlphaClearShaderShaderConstants(void)::ref;
      unk_1EB322BF8 = 0;
      qword_1EB322C00 = (uint64_t)&ggl::stenciledAlphaClearShaderShaderTextures(void)::ref;
      unk_1EB322C08 = 0;
      qword_1EB322C10 = (uint64_t)&ggl::stenciledAlphaClearShaderShaderSamplers(void)::ref;
      unk_1EB322C18 = 0;
    }
  }
}

void ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("StenciledAlphaClearShaderFragment");
    *(_DWORD *)algn_1EB329574 = 1;
    qword_1EB329578 = (uint64_t)"StenciledAlphaClearShader";
    unk_1EB329580 = 0;
    qword_1EB329588 = 0;
    unk_1EB329590 = &ggl::stenciledAlphaClearShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329598 = 0;
    unk_1EB3295A0 = &ggl::stenciledAlphaClearShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3295A8 = 0;
    unk_1EB3295B0 = &ggl::stenciledAlphaClearShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3295B8 = 0;
    unk_1EB3295C0 = &ggl::stenciledAlphaClearShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3295D0 = 0;
    unk_1EB3295D8 = 0;
    qword_1EB3295C8 = 0;
  }
}

void ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("StenciledAlphaClearShaderVertex");
    *(_DWORD *)algn_1EB328A1C = 0;
    qword_1EB328A20 = (uint64_t)"StenciledAlphaClearShader";
    unk_1EB328A28 = ggl::stenciledAlphaClearShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB328A30 = 1;
    unk_1EB328A38 = &ggl::stenciledAlphaClearShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328A40 = 0;
    unk_1EB328A48 = &ggl::stenciledAlphaClearShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328A50 = 0;
    unk_1EB328A58 = &ggl::stenciledAlphaClearShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328A60 = 0;
    unk_1EB328A68 = &ggl::stenciledAlphaClearShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328A78 = 0;
    unk_1EB328A80 = 0;
    qword_1EB328A70 = 0;
  }
}

void ggl::FlyoverNightDimShader::typedReflection(ggl::FlyoverNightDimShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverNightDimShader::typedReflection(void)::ref = (uint64_t)"FlyoverNightDimShader";
      ggl::flyoverNightDimShaderVertexFunctionDescriptor(v1);
      qword_1EB321E30 = (uint64_t)&ggl::flyoverNightDimShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("FlyoverNightDimShaderVertex");
      dword_1EB321E38 = (int)v2;
      ggl::flyoverNightDimShaderFragmentFunctionDescriptor(v2);
      qword_1EB321E40 = (uint64_t)&ggl::flyoverNightDimShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321E48 = ggl::crc32::compute<30ul>("FlyoverNightDimShaderFragment");
      qword_1EB321E50 = (uint64_t)ggl::flyoverNightDimShaderShaderConstants(void)::ref;
      unk_1EB321E58 = 1;
      qword_1EB321E60 = (uint64_t)&ggl::flyoverNightDimShaderShaderTextures(void)::ref;
      unk_1EB321E68 = 0;
      qword_1EB321E70 = (uint64_t)&ggl::flyoverNightDimShaderShaderSamplers(void)::ref;
      unk_1EB321E78 = 0;
    }
  }
}

void ggl::flyoverNightDimShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverNightDimShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverNightDimShaderFragment");
    *(_DWORD *)algn_1EB3279F4 = 1;
    qword_1EB3279F8 = (uint64_t)"FlyoverNightDimShader";
    unk_1EB327A00 = 0;
    qword_1EB327A08 = 0;
    unk_1EB327A10 = &ggl::flyoverNightDimShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327A18 = 1;
    unk_1EB327A20 = &ggl::flyoverNightDimShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327A28 = 0;
    unk_1EB327A30 = &ggl::flyoverNightDimShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327A38 = 0;
    unk_1EB327A40 = &ggl::flyoverNightDimShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327A50 = 0;
    unk_1EB327A58 = 0;
    qword_1EB327A48 = 0;
  }
}

void ggl::flyoverNightDimShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverNightDimShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverNightDimShaderVertex");
    *(_DWORD *)algn_1EB326B3C = 0;
    qword_1EB326B40 = (uint64_t)"FlyoverNightDimShader";
    unk_1EB326B48 = ggl::flyoverNightDimShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326B50 = 1;
    unk_1EB326B58 = &ggl::flyoverNightDimShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326B60 = 1;
    unk_1EB326B68 = &ggl::flyoverNightDimShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326B70 = 0;
    unk_1EB326B78 = &ggl::flyoverNightDimShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326B80 = 0;
    unk_1EB326B88 = &ggl::flyoverNightDimShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326B98 = 0;
    unk_1EB326BA0 = 0;
    qword_1EB326B90 = 0;
  }
}

void ggl::ARCameraImageShader::typedReflection(ggl::ARCameraImageShader *this)
{
  {
    if (v1)
    {
      ggl::ARCameraImageShader::typedReflection(void)::ref = (uint64_t)"ARCameraImageShader";
      ggl::aRCameraImageShaderVertexFunctionDescriptor(v1);
      qword_1EB32BAE0 = (uint64_t)&ggl::aRCameraImageShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("ARCameraImageShaderVertex");
      dword_1EB32BAE8 = (int)v2;
      ggl::aRCameraImageShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BAF0 = (uint64_t)&ggl::aRCameraImageShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BAF8 = ggl::crc32::compute<28ul>("ARCameraImageShaderFragment");
      qword_1EB32BB00 = (uint64_t)ggl::aRCameraImageShaderShaderConstants(void)::ref;
      unk_1EB32BB08 = 1;
      qword_1EB32BB10 = (uint64_t)ggl::aRCameraImageShaderShaderTextures(void)::ref;
      unk_1EB32BB18 = 1;
      qword_1EB32BB20 = (uint64_t)&ggl::aRCameraImageShaderShaderSamplers(void)::ref;
      unk_1EB32BB28 = 1;
    }
  }
}

void ggl::aRCameraImageShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::aRCameraImageShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("ARCameraImageShaderFragment");
    *(_DWORD *)algn_1EB32C284 = 1;
    qword_1EB32C288 = (uint64_t)"ARCameraImageShader";
    unk_1EB32C290 = 0;
    qword_1EB32C298 = 0;
    unk_1EB32C2A0 = &ggl::aRCameraImageShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C2A8 = 0;
    unk_1EB32C2B0 = &ggl::aRCameraImageShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C2B8 = 0;
    unk_1EB32C2C0 = &ggl::aRCameraImageShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C2C8 = 1;
    unk_1EB32C2D0 = &ggl::aRCameraImageShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C2E0 = 0;
    unk_1EB32C2E8 = 0;
    qword_1EB32C2D8 = 1;
  }
}

void ggl::aRCameraImageShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::aRCameraImageShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ARCameraImageShaderVertex");
    *(_DWORD *)algn_1EB32BFCC = 0;
    qword_1EB32BFD0 = (uint64_t)"ARCameraImageShader";
    unk_1EB32BFD8 = ggl::aRCameraImageShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32BFE0 = 1;
    unk_1EB32BFE8 = &ggl::aRCameraImageShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32BFF0 = 1;
    unk_1EB32BFF8 = &ggl::aRCameraImageShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C000 = 0;
    unk_1EB32C008 = &ggl::aRCameraImageShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C010 = 0;
    unk_1EB32C018 = &ggl::aRCameraImageShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C028 = 0;
    unk_1EB32C030 = 0;
    qword_1EB32C020 = 0;
  }
}

void ggl::TextureRectShader::typedReflection(ggl::TextureRectShader *this)
{
  {
    if (v1)
    {
      ggl::TextureRectShader::typedReflection(void)::ref = (uint64_t)"TextureRectShader";
      ggl::textureRectShaderVertexFunctionDescriptor(v1);
      qword_1EB3212B0 = (uint64_t)&ggl::textureRectShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("TextureRectShaderVertex");
      dword_1EB3212B8 = (int)v2;
      ggl::textureRectShaderFragmentFunctionDescriptor(v2);
      qword_1EB3212C0 = (uint64_t)&ggl::textureRectShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3212C8 = ggl::crc32::compute<26ul>("TextureRectShaderFragment");
      qword_1EB3212D0 = (uint64_t)ggl::textureRectShaderShaderConstants(void)::ref;
      unk_1EB3212D8 = 1;
      qword_1EB3212E0 = (uint64_t)ggl::textureRectShaderShaderTextures(void)::ref;
      unk_1EB3212E8 = 1;
      qword_1EB3212F0 = (uint64_t)&ggl::textureRectShaderShaderSamplers(void)::ref;
      unk_1EB3212F8 = 1;
    }
  }
}

void ggl::textureRectShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::textureRectShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("TextureRectShaderFragment");
    *(_DWORD *)algn_1EB325FE4 = 1;
    qword_1EB325FE8 = (uint64_t)"TextureRectShader";
    unk_1EB325FF0 = 0;
    qword_1EB325FF8 = 0;
    unk_1EB326000 = &ggl::textureRectShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326008 = 0;
    unk_1EB326010 = &ggl::textureRectShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326018 = 0;
    unk_1EB326020 = &ggl::textureRectShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326028 = 1;
    unk_1EB326030 = &ggl::textureRectShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326040 = 0;
    unk_1EB326048 = 0;
    qword_1EB326038 = 1;
  }
}

void ggl::textureRectShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::textureRectShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("TextureRectShaderVertex");
    *(_DWORD *)algn_1EB32551C = 0;
    qword_1EB325520 = (uint64_t)"TextureRectShader";
    unk_1EB325528 = ggl::textureRectShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325530 = 1;
    unk_1EB325538 = &ggl::textureRectShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325540 = 1;
    unk_1EB325548 = &ggl::textureRectShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325550 = 0;
    unk_1EB325558 = &ggl::textureRectShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325560 = 0;
    unk_1EB325568 = &ggl::textureRectShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325578 = 0;
    unk_1EB325580 = 0;
    qword_1EB325570 = 0;
  }
}

void ggl::EarthCoronaShader::typedReflection(ggl::EarthCoronaShader *this)
{
  {
    if (v1)
    {
      ggl::EarthCoronaShader::typedReflection(void)::ref = (uint64_t)"EarthCoronaShader";
      ggl::earthCoronaShaderVertexFunctionDescriptor(v1);
      qword_1EB3210F0 = (uint64_t)&ggl::earthCoronaShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("EarthCoronaShaderVertex");
      dword_1EB3210F8 = (int)v2;
      ggl::earthCoronaShaderFragmentFunctionDescriptor(v2);
      qword_1EB321100 = (uint64_t)&ggl::earthCoronaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321108 = ggl::crc32::compute<26ul>("EarthCoronaShaderFragment");
      qword_1EB321110 = (uint64_t)ggl::earthCoronaShaderShaderConstants(void)::ref;
      unk_1EB321118 = 1;
      qword_1EB321120 = (uint64_t)ggl::earthCoronaShaderShaderTextures(void)::ref;
      unk_1EB321128 = 1;
      qword_1EB321130 = (uint64_t)&ggl::earthCoronaShaderShaderSamplers(void)::ref;
      unk_1EB321138 = 1;
    }
  }
}

void ggl::earthCoronaShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::earthCoronaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("EarthCoronaShaderFragment");
    *(_DWORD *)algn_1EB325B64 = 1;
    qword_1EB325B68 = (uint64_t)"EarthCoronaShader";
    unk_1EB325B70 = 0;
    qword_1EB325B78 = 0;
    unk_1EB325B80 = &ggl::earthCoronaShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325B88 = 1;
    unk_1EB325B90 = &ggl::earthCoronaShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB325B98 = 0;
    unk_1EB325BA0 = &ggl::earthCoronaShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325BA8 = 1;
    unk_1EB325BB0 = &ggl::earthCoronaShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325BC0 = 0;
    unk_1EB325BC8 = 0;
    qword_1EB325BB8 = 1;
  }
}

void ggl::earthCoronaShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::earthCoronaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("EarthCoronaShaderVertex");
    *(_DWORD *)algn_1EB3251FC = 0;
    qword_1EB325200 = (uint64_t)"EarthCoronaShader";
    unk_1EB325208 = ggl::earthCoronaShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325210 = 1;
    unk_1EB325218 = &ggl::earthCoronaShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325220 = 1;
    unk_1EB325228 = &ggl::earthCoronaShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325230 = 0;
    unk_1EB325238 = &ggl::earthCoronaShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325240 = 0;
    unk_1EB325248 = &ggl::earthCoronaShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325258 = 0;
    unk_1EB325260 = 0;
    qword_1EB325250 = 0;
  }
}

void ggl::ColoredTextShader::typedReflection(ggl::ColoredTextShader *this)
{
  {
    if (v1)
    {
      ggl::ColoredTextShader::typedReflection(void)::ref = (uint64_t)"ColoredTextShader";
      ggl::coloredTextShaderVertexFunctionDescriptor(v1);
      qword_1EB321098 = (uint64_t)&ggl::coloredTextShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("ColoredTextShaderVertex");
      dword_1EB3210A0 = (int)v2;
      ggl::coloredTextShaderFragmentFunctionDescriptor(v2);
      qword_1EB3210A8 = (uint64_t)&ggl::coloredTextShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3210B0 = ggl::crc32::compute<26ul>("ColoredTextShaderFragment");
      qword_1EB3210B8 = (uint64_t)ggl::coloredTextShaderShaderConstants(void)::ref;
      unk_1EB3210C0 = 1;
      qword_1EB3210C8 = (uint64_t)ggl::coloredTextShaderShaderTextures(void)::ref;
      unk_1EB3210D0 = 1;
      qword_1EB3210D8 = (uint64_t)&ggl::coloredTextShaderShaderSamplers(void)::ref;
      unk_1EB3210E0 = 1;
    }
  }
}

void ggl::coloredTextShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::coloredTextShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ColoredTextShaderFragment");
    *(_DWORD *)algn_1EB32CB3C = 1;
    qword_1EB32CB40 = (uint64_t)"ColoredTextShader";
    unk_1EB32CB48 = 0;
    qword_1EB32CB50 = 0;
    unk_1EB32CB58 = &ggl::coloredTextShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32CB60 = 0;
    unk_1EB32CB68 = &ggl::coloredTextShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32CB70 = 0;
    unk_1EB32CB78 = &ggl::coloredTextShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32CB80 = 1;
    unk_1EB32CB88 = &ggl::coloredTextShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32CB98 = 0;
    unk_1EB32CBA0 = 0;
    qword_1EB32CB90 = 1;
  }
}

void ggl::coloredTextShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::coloredTextShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ColoredTextShaderVertex");
    *(_DWORD *)algn_1EB325184 = 0;
    qword_1EB325188 = (uint64_t)"ColoredTextShader";
    unk_1EB325190 = ggl::coloredTextShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325198 = 1;
    unk_1EB3251A0 = &ggl::coloredTextShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3251A8 = 1;
    unk_1EB3251B0 = &ggl::coloredTextShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3251B8 = 0;
    unk_1EB3251C0 = &ggl::coloredTextShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3251C8 = 0;
    unk_1EB3251D0 = &ggl::coloredTextShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3251E0 = 0;
    unk_1EB3251E8 = 0;
    qword_1EB3251D8 = 0;
  }
}

void ggl::CircleMultiStrokeShader::typedReflection(ggl::CircleMultiStrokeShader *this)
{
  {
    if (v1)
    {
      ggl::CircleMultiStrokeShader::typedReflection(void)::ref = (uint64_t)"CircleMultiStrokeShader";
      ggl::circleMultiStrokeShaderVertexFunctionDescriptor(v1);
      qword_1EB317AE0 = (uint64_t)&ggl::circleMultiStrokeShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("CircleMultiStrokeShaderVertex");
      dword_1EB317AE8 = (int)v2;
      ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(v2);
      qword_1EB317AF0 = (uint64_t)&ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB317AF8 = ggl::crc32::compute<32ul>("CircleMultiStrokeShaderFragment");
      qword_1EB317B00 = (uint64_t)ggl::circleMultiStrokeShaderShaderConstants(void)::ref;
      unk_1EB317B08 = 4;
      qword_1EB317B10 = (uint64_t)&ggl::circleMultiStrokeShaderShaderTextures(void)::ref;
      unk_1EB317B18 = 0;
      qword_1EB317B20 = (uint64_t)&ggl::circleMultiStrokeShaderShaderSamplers(void)::ref;
      unk_1EB317B28 = 0;
    }
  }
}

void ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("CircleMultiStrokeShaderFragment");
    *(_DWORD *)algn_1EB318264 = 1;
    qword_1EB318268 = (uint64_t)"CircleMultiStrokeShader";
    unk_1EB318270 = 0;
    qword_1EB318278 = 0;
    unk_1EB318280 = &ggl::circleMultiStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB318288 = 1;
    unk_1EB318290 = &ggl::circleMultiStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB318298 = 0;
    unk_1EB3182A0 = &ggl::circleMultiStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3182A8 = 0;
    unk_1EB3182B0 = &ggl::circleMultiStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3182C0 = 0;
    unk_1EB3182C8 = 0;
    qword_1EB3182B8 = 0;
  }
}

void ggl::circleMultiStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::circleMultiStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("CircleMultiStrokeShaderVertex");
    *(_DWORD *)algn_1EB317FAC = 0;
    qword_1EB317FB0 = (uint64_t)"CircleMultiStrokeShader";
    unk_1EB317FB8 = ggl::circleMultiStrokeShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB317FC0 = 1;
    unk_1EB317FC8 = &ggl::circleMultiStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB317FD0 = 4;
    unk_1EB317FD8 = &ggl::circleMultiStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB317FE0 = 0;
    unk_1EB317FE8 = &ggl::circleMultiStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB317FF0 = 0;
    unk_1EB317FF8 = &ggl::circleMultiStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318008 = 0;
    unk_1EB318010 = 0;
    qword_1EB318000 = 0;
  }
}

void ggl::TileBaseSurfaceShader::typedReflection(ggl::TileBaseSurfaceShader *this)
{
  {
    if (v1)
    {
      ggl::TileBaseSurfaceShader::typedReflection(void)::ref = (uint64_t)"TileBaseSurfaceShader";
      ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(v1);
      qword_1EB321F48 = (uint64_t)&ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("TileBaseSurfaceShaderVertex");
      dword_1EB321F50 = (int)v2;
      ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(v2);
      qword_1EB321F58 = (uint64_t)&ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321F60 = ggl::crc32::compute<30ul>("TileBaseSurfaceShaderFragment");
      qword_1EB321F68 = (uint64_t)ggl::tileBaseSurfaceShaderShaderConstants(void)::ref;
      unk_1EB321F70 = 2;
      qword_1EB321F78 = (uint64_t)&ggl::tileBaseSurfaceShaderShaderTextures(void)::ref;
      unk_1EB321F80 = 0;
      qword_1EB321F88 = (uint64_t)&ggl::tileBaseSurfaceShaderShaderSamplers(void)::ref;
      unk_1EB321F90 = 0;
    }
  }
}

void ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("TileBaseSurfaceShaderFragment");
    *(_DWORD *)algn_1EB327CAC = 1;
    qword_1EB327CB0 = (uint64_t)"TileBaseSurfaceShader";
    unk_1EB327CB8 = 0;
    qword_1EB327CC0 = 0;
    unk_1EB327CC8 = &ggl::tileBaseSurfaceShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327CD0 = 1;
    unk_1EB327CD8 = &ggl::tileBaseSurfaceShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327CE0 = 0;
    unk_1EB327CE8 = &ggl::tileBaseSurfaceShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327CF0 = 0;
    unk_1EB327CF8 = &ggl::tileBaseSurfaceShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327D08 = 0;
    unk_1EB327D10 = 0;
    qword_1EB327D00 = 0;
  }
}

void ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("TileBaseSurfaceShaderVertex");
    *(_DWORD *)algn_1EB326EE4 = 0;
    qword_1EB326EE8 = (uint64_t)"TileBaseSurfaceShader";
    unk_1EB326EF0 = ggl::tileBaseSurfaceShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326EF8 = 1;
    unk_1EB326F00 = &ggl::tileBaseSurfaceShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326F08 = 2;
    unk_1EB326F10 = &ggl::tileBaseSurfaceShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326F18 = 0;
    unk_1EB326F20 = &ggl::tileBaseSurfaceShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326F28 = 0;
    unk_1EB326F30 = &ggl::tileBaseSurfaceShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326F40 = 0;
    unk_1EB326F48 = 0;
    qword_1EB326F38 = 0;
  }
}

void ggl::VSPassthroughShader::typedReflection(ggl::VSPassthroughShader *this)
{
  {
    if (v1)
    {
      ggl::VSPassthroughShader::typedReflection(void)::ref = (uint64_t)"VSPassthroughShader";
      ggl::vSPassthroughShaderVertexFunctionDescriptor(v1);
      qword_1EB321A98 = (uint64_t)&ggl::vSPassthroughShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("VSPassthroughShaderVertex");
      dword_1EB321AA0 = (int)v2;
      ggl::vSPassthroughShaderFragmentFunctionDescriptor(v2);
      qword_1EB321AA8 = (uint64_t)&ggl::vSPassthroughShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321AB0 = ggl::crc32::compute<28ul>("VSPassthroughShaderFragment");
      qword_1EB321AB8 = (uint64_t)&ggl::vSPassthroughShaderShaderConstants(void)::ref;
      unk_1EB321AC0 = 0;
      qword_1EB321AC8 = (uint64_t)ggl::vSPassthroughShaderShaderTextures(void)::ref;
      unk_1EB321AD0 = 2;
      qword_1EB321AD8 = (uint64_t)ggl::vSPassthroughShaderShaderSamplers(void)::ref;
      unk_1EB321AE0 = 2;
    }
  }
}

void ggl::vSPassthroughShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::vSPassthroughShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VSPassthroughShaderFragment");
    *(_DWORD *)algn_1EB326FCC = 1;
    qword_1EB326FD0 = (uint64_t)"VSPassthroughShader";
    unk_1EB326FD8 = 0;
    qword_1EB326FE0 = 0;
    unk_1EB326FE8 = &ggl::vSPassthroughShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326FF0 = 0;
    unk_1EB326FF8 = &ggl::vSPassthroughShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327000 = 0;
    unk_1EB327008 = &ggl::vSPassthroughShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327010 = 2;
    unk_1EB327018 = &ggl::vSPassthroughShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327028 = 0;
    unk_1EB327030 = 0;
    qword_1EB327020 = 2;
  }
}

void ggl::vSPassthroughShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::vSPassthroughShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("VSPassthroughShaderVertex");
    *(_DWORD *)algn_1EB326134 = 0;
    qword_1EB326138 = (uint64_t)"VSPassthroughShader";
    unk_1EB326140 = ggl::vSPassthroughShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326148 = 1;
    unk_1EB326150 = &ggl::vSPassthroughShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326158 = 0;
    unk_1EB326160 = &ggl::vSPassthroughShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326168 = 0;
    unk_1EB326170 = &ggl::vSPassthroughShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326178 = 0;
    unk_1EB326180 = &ggl::vSPassthroughShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326190 = 0;
    unk_1EB326198 = 0;
    qword_1EB326188 = 0;
  }
}

void ggl::PointExtendedShader::typedReflection(ggl::PointExtendedShader *this)
{
  {
    if (v1)
    {
      ggl::PointExtendedShader::typedReflection(void)::ref = (uint64_t)"PointExtendedShader";
      ggl::pointExtendedShaderVertexFunctionDescriptor(v1);
      qword_1EB3218D0 = (uint64_t)&ggl::pointExtendedShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("PointExtendedShaderVertex");
      dword_1EB3218D8 = (int)v2;
      ggl::pointExtendedShaderFragmentFunctionDescriptor(v2);
      qword_1EB3218E0 = (uint64_t)&ggl::pointExtendedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3218E8 = ggl::crc32::compute<28ul>("PointExtendedShaderFragment");
      qword_1EB3218F0 = (uint64_t)ggl::pointExtendedShaderShaderConstants(void)::ref;
      unk_1EB3218F8 = 2;
      qword_1EB321900 = (uint64_t)&ggl::pointExtendedShaderShaderTextures(void)::ref;
      unk_1EB321908 = 0;
      qword_1EB321910 = (uint64_t)&ggl::pointExtendedShaderShaderSamplers(void)::ref;
      unk_1EB321918 = 0;
    }
  }
}

void ggl::pointExtendedShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::pointExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PointExtendedShaderFragment");
    *(_DWORD *)algn_1EB326D84 = 1;
    qword_1EB326D88 = (uint64_t)"PointExtendedShader";
    unk_1EB326D90 = 0;
    qword_1EB326D98 = 0;
    unk_1EB326DA0 = &ggl::pointExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326DA8 = 1;
    unk_1EB326DB0 = &ggl::pointExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326DB8 = 0;
    unk_1EB326DC0 = &ggl::pointExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326DC8 = 0;
    unk_1EB326DD0 = &ggl::pointExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326DE0 = 0;
    unk_1EB326DE8 = 0;
    qword_1EB326DD8 = 0;
  }
}

void ggl::pointExtendedShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::pointExtendedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("PointExtendedShaderVertex");
    *(_DWORD *)algn_1EB325E1C = 0;
    qword_1EB325E20 = (uint64_t)"PointExtendedShader";
    unk_1EB325E28 = ggl::pointExtendedShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325E30 = 1;
    unk_1EB325E38 = &ggl::pointExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325E40 = 2;
    unk_1EB325E48 = &ggl::pointExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325E50 = 0;
    unk_1EB325E58 = &ggl::pointExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325E60 = 0;
    unk_1EB325E68 = &ggl::pointExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325E78 = 0;
    unk_1EB325E80 = 0;
    qword_1EB325E70 = 0;
  }
}

void ggl::DebugExtendedShader::typedReflection(ggl::DebugExtendedShader *this)
{
  {
    if (v1)
    {
      ggl::DebugExtendedShader::typedReflection(void)::ref = (uint64_t)"DebugExtendedShader";
      ggl::debugExtendedShaderVertexFunctionDescriptor(v1);
      qword_1EB3216A8 = (uint64_t)&ggl::debugExtendedShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("DebugExtendedShaderVertex");
      dword_1EB3216B0 = (int)v2;
      ggl::debugExtendedShaderFragmentFunctionDescriptor(v2);
      qword_1EB3216B8 = (uint64_t)&ggl::debugExtendedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3216C0 = ggl::crc32::compute<28ul>("DebugExtendedShaderFragment");
      qword_1EB3216C8 = (uint64_t)ggl::debugExtendedShaderShaderConstants(void)::ref;
      unk_1EB3216D0 = 3;
      qword_1EB3216D8 = (uint64_t)&ggl::debugExtendedShaderShaderTextures(void)::ref;
      unk_1EB3216E0 = 0;
      qword_1EB3216E8 = (uint64_t)&ggl::debugExtendedShaderShaderSamplers(void)::ref;
      unk_1EB3216F0 = 0;
    }
  }
}

void ggl::debugExtendedShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::debugExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DebugExtendedShaderFragment");
    *(_DWORD *)algn_1EB32688C = 1;
    qword_1EB326890 = (uint64_t)"DebugExtendedShader";
    unk_1EB326898 = 0;
    qword_1EB3268A0 = 0;
    unk_1EB3268A8 = &ggl::debugExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3268B0 = 1;
    unk_1EB3268B8 = &ggl::debugExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3268C0 = 0;
    unk_1EB3268C8 = &ggl::debugExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3268D0 = 0;
    unk_1EB3268D8 = &ggl::debugExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3268E8 = 0;
    unk_1EB3268F0 = 0;
    qword_1EB3268E0 = 0;
  }
}

void ggl::debugExtendedShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::debugExtendedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("DebugExtendedShaderVertex");
    *(_DWORD *)algn_1EB325AF4 = 0;
    qword_1EB325AF8 = (uint64_t)"DebugExtendedShader";
    unk_1EB325B00 = ggl::debugExtendedShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325B08 = 1;
    unk_1EB325B10 = &ggl::debugExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325B18 = 3;
    unk_1EB325B20 = &ggl::debugExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325B28 = 0;
    unk_1EB325B30 = &ggl::debugExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325B38 = 0;
    unk_1EB325B40 = &ggl::debugExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325B50 = 0;
    unk_1EB325B58 = 0;
    qword_1EB325B48 = 0;
  }
}

void ggl::ShadedColorShader::typedReflection(ggl::ShadedColorShader *this)
{
  {
    if (v1)
    {
      ggl::ShadedColorShader::typedReflection(void)::ref = (uint64_t)"ShadedColorShader";
      ggl::shadedColorShaderVertexFunctionDescriptor(v1);
      qword_1EB3211F0 = (uint64_t)&ggl::shadedColorShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("ShadedColorShaderVertex");
      dword_1EB3211F8 = (int)v2;
      ggl::shadedColorShaderFragmentFunctionDescriptor(v2);
      qword_1EB321200 = (uint64_t)&ggl::shadedColorShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321208 = ggl::crc32::compute<26ul>("ShadedColorShaderFragment");
      qword_1EB321210 = (uint64_t)ggl::shadedColorShaderShaderConstants(void)::ref;
      unk_1EB321218 = 2;
      qword_1EB321220 = (uint64_t)&ggl::shadedColorShaderShaderTextures(void)::ref;
      unk_1EB321228 = 0;
      qword_1EB321230 = (uint64_t)&ggl::shadedColorShaderShaderSamplers(void)::ref;
      unk_1EB321238 = 0;
    }
  }
}

void ggl::shadedColorShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::shadedColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ShadedColorShaderFragment");
    *(_DWORD *)algn_1EB32CBB4 = 1;
    qword_1EB32CBB8 = (uint64_t)"ShadedColorShader";
    unk_1EB32CBC0 = 0;
    qword_1EB32CBC8 = 0;
    unk_1EB32CBD0 = &ggl::shadedColorShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32CBD8 = 1;
    unk_1EB32CBE0 = &ggl::shadedColorShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32CBE8 = 0;
    unk_1EB32CBF0 = &ggl::shadedColorShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32CBF8 = 0;
    unk_1EB32CC00 = &ggl::shadedColorShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32CC10 = 0;
    unk_1EB32CC18 = 0;
    qword_1EB32CC08 = 0;
  }
}

void ggl::shadedColorShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::shadedColorShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ShadedColorShaderVertex");
    *(_DWORD *)algn_1EB32CA5C = 0;
    qword_1EB32CA60 = (uint64_t)"ShadedColorShader";
    unk_1EB32CA68 = ggl::shadedColorShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32CA70 = 1;
    unk_1EB32CA78 = &ggl::shadedColorShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32CA80 = 2;
    unk_1EB32CA88 = &ggl::shadedColorShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32CA90 = 0;
    unk_1EB32CA98 = &ggl::shadedColorShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32CAA0 = 0;
    unk_1EB32CAA8 = &ggl::shadedColorShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32CAB8 = 0;
    unk_1EB32CAC0 = 0;
    qword_1EB32CAB0 = 0;
  }
}

void ggl::SolidLineShader::typedReflection(ggl::SolidLineShader *this)
{
  {
    if (v1)
    {
      ggl::SolidLineShader::typedReflection(void)::ref = (uint64_t)"SolidLineShader";
      ggl::solidLineShaderVertexFunctionDescriptor(v1);
      qword_1EB320E30 = (uint64_t)&ggl::solidLineShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<22ul>("SolidLineShaderVertex");
      dword_1EB320E38 = (int)v2;
      ggl::solidLineShaderFragmentFunctionDescriptor(v2);
      qword_1EB320E40 = (uint64_t)&ggl::solidLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320E48 = ggl::crc32::compute<24ul>("SolidLineShaderFragment");
      qword_1EB320E50 = (uint64_t)ggl::solidLineShaderShaderConstants(void)::ref;
      unk_1EB320E58 = 2;
      qword_1EB320E60 = (uint64_t)&ggl::solidLineShaderShaderTextures(void)::ref;
      unk_1EB320E68 = 0;
      qword_1EB320E70 = (uint64_t)&ggl::solidLineShaderShaderSamplers(void)::ref;
      unk_1EB320E78 = 0;
    }
  }
}

void ggl::solidLineShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::solidLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("SolidLineShaderFragment");
    *(_DWORD *)algn_1EB325434 = 1;
    qword_1EB325438 = (uint64_t)"SolidLineShader";
    unk_1EB325440 = 0;
    qword_1EB325448 = 0;
    unk_1EB325450 = &ggl::solidLineShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325458 = 1;
    unk_1EB325460 = &ggl::solidLineShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB325468 = 0;
    unk_1EB325470 = &ggl::solidLineShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325478 = 0;
    unk_1EB325480 = &ggl::solidLineShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325490 = 0;
    unk_1EB325498 = 0;
    qword_1EB325488 = 0;
  }
}

void ggl::solidLineShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::solidLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("SolidLineShaderVertex");
    *(_DWORD *)algn_1EB324E6C = 0;
    qword_1EB324E70 = (uint64_t)"SolidLineShader";
    unk_1EB324E78 = ggl::solidLineShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324E80 = 1;
    unk_1EB324E88 = &ggl::solidLineShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324E90 = 2;
    unk_1EB324E98 = &ggl::solidLineShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324EA0 = 0;
    unk_1EB324EA8 = &ggl::solidLineShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324EB0 = 0;
    unk_1EB324EB8 = &ggl::solidLineShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324EC8 = 0;
    unk_1EB324ED0 = 0;
    qword_1EB324EC0 = 0;
  }
}

void ggl::PolylineOverlayFillShader::typedReflection(ggl::PolylineOverlayFillShader *this)
{
  {
    if (v1)
    {
      ggl::PolylineOverlayFillShader::typedReflection(void)::ref = (uint64_t)"PolylineOverlayFillShader";
      ggl::polylineOverlayFillShaderVertexFunctionDescriptor(v1);
      qword_1EB322A58 = (uint64_t)&ggl::polylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("PolylineOverlayFillShaderVertex");
      dword_1EB322A60 = (int)v2;
      ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(v2);
      qword_1EB322A68 = (uint64_t)&ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322A70 = ggl::crc32::compute<34ul>("PolylineOverlayFillShaderFragment");
      qword_1EB322A78 = (uint64_t)ggl::polylineOverlayFillShaderShaderConstants(void)::ref;
      unk_1EB322A80 = 3;
      qword_1EB322A88 = (uint64_t)ggl::polylineOverlayFillShaderShaderTextures(void)::ref;
      unk_1EB322A90 = 1;
      qword_1EB322A98 = (uint64_t)ggl::polylineOverlayFillShaderShaderSamplers(void)::ref;
      unk_1EB322AA0 = 1;
    }
  }
}

void ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("PolylineOverlayFillShaderFragment");
    *(_DWORD *)algn_1EB3293AC = 1;
    qword_1EB3293B0 = (uint64_t)"PolylineOverlayFillShader";
    unk_1EB3293B8 = 0;
    qword_1EB3293C0 = 0;
    unk_1EB3293C8 = &ggl::polylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3293D0 = 1;
    unk_1EB3293D8 = &ggl::polylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3293E0 = 0;
    unk_1EB3293E8 = &ggl::polylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3293F0 = 1;
    unk_1EB3293F8 = &ggl::polylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329408 = 0;
    unk_1EB329410 = 0;
    qword_1EB329400 = 1;
  }
}

void ggl::polylineOverlayFillShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PolylineOverlayFillShaderVertex");
    *(_DWORD *)algn_1EB3287E4 = 0;
    qword_1EB3287E8 = (uint64_t)"PolylineOverlayFillShader";
    unk_1EB3287F0 = ggl::polylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3287F8 = 1;
    unk_1EB328800 = &ggl::polylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB328808 = 3;
    unk_1EB328810 = &ggl::polylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB328818 = 0;
    unk_1EB328820 = &ggl::polylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB328828 = 0;
    unk_1EB328830 = &ggl::polylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328840 = 0;
    unk_1EB328848 = 0;
    qword_1EB328838 = 0;
  }
}

void ggl::FlyoverManeuverShader::typedReflection(ggl::FlyoverManeuverShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverManeuverShader::typedReflection(void)::ref = (uint64_t)"FlyoverManeuverShader";
      ggl::flyoverManeuverShaderVertexFunctionDescriptor(v1);
      qword_1EB321DD0 = (uint64_t)&ggl::flyoverManeuverShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("FlyoverManeuverShaderVertex");
      dword_1EB321DD8 = (int)v2;
      ggl::flyoverManeuverShaderFragmentFunctionDescriptor(v2);
      qword_1EB321DE0 = (uint64_t)&ggl::flyoverManeuverShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321DE8 = ggl::crc32::compute<30ul>("FlyoverManeuverShaderFragment");
      qword_1EB321DF0 = (uint64_t)ggl::flyoverManeuverShaderShaderConstants(void)::ref;
      unk_1EB321DF8 = 3;
      qword_1EB321E00 = (uint64_t)ggl::flyoverManeuverShaderShaderTextures(void)::ref;
      unk_1EB321E08 = 1;
      qword_1EB321E10 = (uint64_t)&ggl::flyoverManeuverShaderShaderSamplers(void)::ref;
      unk_1EB321E18 = 1;
    }
  }
}

void ggl::flyoverManeuverShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverManeuverShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverManeuverShaderFragment");
    *(_DWORD *)algn_1EB327904 = 1;
    qword_1EB327908 = (uint64_t)"FlyoverManeuverShader";
    unk_1EB327910 = 0;
    qword_1EB327918 = 0;
    unk_1EB327920 = &ggl::flyoverManeuverShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327928 = 1;
    unk_1EB327930 = &ggl::flyoverManeuverShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327938 = 0;
    unk_1EB327940 = &ggl::flyoverManeuverShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327948 = 1;
    unk_1EB327950 = &ggl::flyoverManeuverShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327960 = 0;
    unk_1EB327968 = 0;
    qword_1EB327958 = 1;
  }
}

void ggl::flyoverManeuverShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverManeuverShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverManeuverShaderVertex");
    *(_DWORD *)algn_1EB326A5C = 0;
    qword_1EB326A60 = (uint64_t)"FlyoverManeuverShader";
    unk_1EB326A68 = ggl::flyoverManeuverShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326A70 = 1;
    unk_1EB326A78 = &ggl::flyoverManeuverShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326A80 = 3;
    unk_1EB326A88 = &ggl::flyoverManeuverShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326A90 = 0;
    unk_1EB326A98 = &ggl::flyoverManeuverShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326AA0 = 0;
    unk_1EB326AA8 = &ggl::flyoverManeuverShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326AB8 = 0;
    unk_1EB326AC0 = 0;
    qword_1EB326AB0 = 0;
  }
}

void ggl::RouteLineArrowShader::typedReflection(ggl::RouteLineArrowShader *this)
{
  {
    if (v1)
    {
      ggl::RouteLineArrowShader::typedReflection(void)::ref = (uint64_t)"RouteLineArrowShader";
      ggl::routeLineArrowShaderVertexFunctionDescriptor(v1);
      qword_1EB321C00 = (uint64_t)&ggl::routeLineArrowShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<27ul>("RouteLineArrowShaderVertex");
      dword_1EB321C08 = (int)v2;
      ggl::routeLineArrowShaderFragmentFunctionDescriptor(v2);
      qword_1EB321C10 = (uint64_t)&ggl::routeLineArrowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321C18 = ggl::crc32::compute<29ul>("RouteLineArrowShaderFragment");
      qword_1EB321C20 = (uint64_t)ggl::routeLineArrowShaderShaderConstants(void)::ref;
      unk_1EB321C28 = 3;
      qword_1EB321C30 = (uint64_t)ggl::routeLineArrowShaderShaderTextures(void)::ref;
      unk_1EB321C38 = 1;
      qword_1EB321C40 = (uint64_t)&ggl::routeLineArrowShaderShaderSamplers(void)::ref;
      unk_1EB321C48 = 1;
    }
  }
}

void ggl::routeLineArrowShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineArrowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("RouteLineArrowShaderFragment");
    *(_DWORD *)algn_1EB3273E4 = 1;
    qword_1EB3273E8 = (uint64_t)"RouteLineArrowShader";
    unk_1EB3273F0 = 0;
    qword_1EB3273F8 = 0;
    unk_1EB327400 = &ggl::routeLineArrowShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327408 = 1;
    unk_1EB327410 = &ggl::routeLineArrowShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327418 = 0;
    unk_1EB327420 = &ggl::routeLineArrowShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327428 = 1;
    unk_1EB327430 = &ggl::routeLineArrowShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327440 = 0;
    unk_1EB327448 = 0;
    qword_1EB327438 = 1;
  }
}

void ggl::routeLineArrowShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::routeLineArrowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("RouteLineArrowShaderVertex");
    *(_DWORD *)algn_1EB32654C = 0;
    qword_1EB326550 = (uint64_t)"RouteLineArrowShader";
    unk_1EB326558 = ggl::routeLineArrowShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326560 = 1;
    unk_1EB326568 = &ggl::routeLineArrowShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326570 = 3;
    unk_1EB326578 = &ggl::routeLineArrowShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326580 = 0;
    unk_1EB326588 = &ggl::routeLineArrowShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326590 = 0;
    unk_1EB326598 = &ggl::routeLineArrowShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3265A8 = 0;
    unk_1EB3265B0 = 0;
    qword_1EB3265A0 = 0;
  }
}

void ggl::ARGroundShadowShader::typedReflection(ggl::ARGroundShadowShader *this)
{
  {
    if (v1)
    {
      ggl::ARGroundShadowShader::typedReflection(void)::ref = (uint64_t)"ARGroundShadowShader";
      ggl::aRGroundShadowShaderVertexFunctionDescriptor(v1);
      qword_1EB31A1C0 = (uint64_t)&ggl::aRGroundShadowShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<27ul>("ARGroundShadowShaderVertex");
      dword_1EB31A1C8 = (int)v2;
      ggl::aRGroundShadowShaderFragmentFunctionDescriptor(v2);
      qword_1EB31A1D0 = (uint64_t)&ggl::aRGroundShadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31A1D8 = ggl::crc32::compute<29ul>("ARGroundShadowShaderFragment");
      qword_1EB31A1E0 = (uint64_t)ggl::aRGroundShadowShaderShaderConstants(void)::ref;
      unk_1EB31A1E8 = 4;
      qword_1EB31A1F0 = (uint64_t)&ggl::aRGroundShadowShaderShaderTextures(void)::ref;
      unk_1EB31A1F8 = 0;
      qword_1EB31A200 = (uint64_t)&ggl::aRGroundShadowShaderShaderSamplers(void)::ref;
      unk_1EB31A208 = 0;
    }
  }
}

void ggl::aRGroundShadowShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::aRGroundShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("ARGroundShadowShaderFragment");
    *(_DWORD *)algn_1EB31A8BC = 1;
    qword_1EB31A8C0 = (uint64_t)"ARGroundShadowShader";
    unk_1EB31A8C8 = 0;
    qword_1EB31A8D0 = 0;
    unk_1EB31A8D8 = &ggl::aRGroundShadowShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31A8E0 = 1;
    unk_1EB31A8E8 = &ggl::aRGroundShadowShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31A8F0 = 0;
    unk_1EB31A8F8 = &ggl::aRGroundShadowShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31A900 = 0;
    unk_1EB31A908 = &ggl::aRGroundShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31A918 = 0;
    unk_1EB31A920 = 0;
    qword_1EB31A910 = 0;
  }
}

void ggl::aRGroundShadowShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::aRGroundShadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("ARGroundShadowShaderVertex");
    *(_DWORD *)algn_1EB31A7CC = 0;
    qword_1EB31A7D0 = (uint64_t)"ARGroundShadowShader";
    unk_1EB31A7D8 = ggl::aRGroundShadowShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31A7E0 = 2;
    unk_1EB31A7E8 = &ggl::aRGroundShadowShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31A7F0 = 3;
    unk_1EB31A7F8 = &ggl::aRGroundShadowShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31A800 = 1;
    unk_1EB31A808 = &ggl::aRGroundShadowShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31A810 = 0;
    unk_1EB31A818 = &ggl::aRGroundShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31A828 = 0;
    unk_1EB31A830 = 0;
    qword_1EB31A820 = 0;
  }
}

void ggl::VSCompositingShader::typedReflection(ggl::VSCompositingShader *this)
{
  {
    if (v1)
    {
      ggl::VSCompositingShader::typedReflection(void)::ref = (uint64_t)"VSCompositingShader";
      ggl::vSCompositingShaderVertexFunctionDescriptor(v1);
      qword_1EB321A38 = (uint64_t)&ggl::vSCompositingShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("VSCompositingShaderVertex");
      dword_1EB321A40 = (int)v2;
      ggl::vSCompositingShaderFragmentFunctionDescriptor(v2);
      qword_1EB321A48 = (uint64_t)&ggl::vSCompositingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321A50 = ggl::crc32::compute<28ul>("VSCompositingShaderFragment");
      qword_1EB321A58 = (uint64_t)ggl::vSCompositingShaderShaderConstants(void)::ref;
      unk_1EB321A60 = 1;
      qword_1EB321A68 = (uint64_t)ggl::vSCompositingShaderShaderTextures(void)::ref;
      unk_1EB321A70 = 7;
      qword_1EB321A78 = (uint64_t)ggl::vSCompositingShaderShaderSamplers(void)::ref;
      unk_1EB321A80 = 7;
    }
  }
}

void ggl::vSCompositingShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::vSCompositingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VSCompositingShaderFragment");
    *(_DWORD *)algn_1EB326F5C = 1;
    qword_1EB326F70 = 0;
    unk_1EB326F78 = &ggl::vSCompositingShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326F60 = (uint64_t)"VSCompositingShader";
    unk_1EB326F68 = 0;
    qword_1EB326F80 = 1;
    unk_1EB326F88 = &ggl::vSCompositingShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326F90 = 0;
    unk_1EB326F98 = &ggl::vSCompositingShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326FA0 = 7;
    unk_1EB326FA8 = &ggl::vSCompositingShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326FB8 = 0;
    unk_1EB326FC0 = 0;
    qword_1EB326FB0 = 7;
  }
}

void ggl::vSCompositingShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::vSCompositingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("VSCompositingShaderVertex");
    *(_DWORD *)algn_1EB3260C4 = 0;
    qword_1EB3260C8 = (uint64_t)"VSCompositingShader";
    unk_1EB3260D0 = ggl::vSCompositingShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3260D8 = 1;
    unk_1EB3260E0 = &ggl::vSCompositingShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3260E8 = 0;
    unk_1EB3260F0 = &ggl::vSCompositingShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3260F8 = 0;
    unk_1EB326100 = &ggl::vSCompositingShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326108 = 0;
    unk_1EB326110 = &ggl::vSCompositingShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326120 = 0;
    unk_1EB326128 = 0;
    qword_1EB326118 = 0;
  }
}

void ggl::ARDepthMeshShader::typedReflection(ggl::ARDepthMeshShader *this)
{
  {
    if (v1)
    {
      ggl::ARDepthMeshShader::typedReflection(void)::ref = (uint64_t)"ARDepthMeshShader";
      ggl::aRDepthMeshShaderVertexFunctionDescriptor(v1);
      qword_1EB31A160 = (uint64_t)&ggl::aRDepthMeshShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("ARDepthMeshShaderVertex");
      dword_1EB31A168 = (int)v2;
      ggl::aRDepthMeshShaderFragmentFunctionDescriptor(v2);
      qword_1EB31A170 = (uint64_t)&ggl::aRDepthMeshShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31A178 = ggl::crc32::compute<26ul>("ARDepthMeshShaderFragment");
      qword_1EB31A180 = (uint64_t)ggl::aRDepthMeshShaderShaderConstants(void)::ref;
      unk_1EB31A188 = 3;
      qword_1EB31A190 = (uint64_t)&ggl::aRDepthMeshShaderShaderTextures(void)::ref;
      unk_1EB31A198 = 0;
      qword_1EB31A1A0 = (uint64_t)&ggl::aRDepthMeshShaderShaderSamplers(void)::ref;
      unk_1EB31A1A8 = 0;
    }
  }
}

void ggl::aRDepthMeshShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::aRDepthMeshShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ARDepthMeshShaderFragment");
    *(_DWORD *)algn_1EB31A754 = 1;
    qword_1EB31A758 = (uint64_t)"ARDepthMeshShader";
    unk_1EB31A760 = 0;
    qword_1EB31A768 = 0;
    unk_1EB31A770 = &ggl::aRDepthMeshShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31A778 = 0;
    unk_1EB31A780 = &ggl::aRDepthMeshShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31A788 = 0;
    unk_1EB31A790 = &ggl::aRDepthMeshShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31A798 = 0;
    unk_1EB31A7A0 = &ggl::aRDepthMeshShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31A7B0 = 0;
    unk_1EB31A7B8 = 0;
    qword_1EB31A7A8 = 0;
  }
}

void ggl::aRDepthMeshShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::aRDepthMeshShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ARDepthMeshShaderVertex");
    *(_DWORD *)algn_1EB31EB14 = 0;
    qword_1EB31EB18 = (uint64_t)"ARDepthMeshShader";
    unk_1EB31EB20 = ggl::aRDepthMeshShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31EB28 = 2;
    unk_1EB31EB30 = &ggl::aRDepthMeshShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31EB38 = 3;
    unk_1EB31EB40 = &ggl::aRDepthMeshShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31EB48 = 1;
    unk_1EB31EB50 = &ggl::aRDepthMeshShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31EB58 = 0;
    unk_1EB31EB60 = &ggl::aRDepthMeshShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31EB70 = 0;
    unk_1EB31EB78 = 0;
    qword_1EB31EB68 = 0;
  }
}

void sub_1A1CCB56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1CCB66C(_Unwind_Exception *exception_object)
{
}

void ggl::SinglePassRouteLineShader::typedReflection(ggl::SinglePassRouteLineShader *this)
{
  {
    if (v1)
    {
      ggl::SinglePassRouteLineShader::typedReflection(void)::ref = (uint64_t)"SinglePassRouteLineShader";
      ggl::singlePassRouteLineShaderVertexFunctionDescriptor(v1);
      qword_1EB31A3D8 = (uint64_t)&ggl::singlePassRouteLineShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("SinglePassRouteLineShaderVertex");
      dword_1EB31A3E0 = (int)v2;
      ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(v2);
      qword_1EB31A3E8 = (uint64_t)&ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31A3F0 = ggl::crc32::compute<34ul>("SinglePassRouteLineShaderFragment");
      qword_1EB31A3F8 = (uint64_t)ggl::singlePassRouteLineShaderShaderConstants(void)::ref;
      unk_1EB31A400 = 5;
      qword_1EB31A408 = (uint64_t)ggl::singlePassRouteLineShaderShaderTextures(void)::ref;
      unk_1EB31A410 = 1;
      qword_1EB31A418 = (uint64_t)&ggl::singlePassRouteLineShaderShaderSamplers(void)::ref;
      unk_1EB31A420 = 1;
    }
  }
}

void ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("SinglePassRouteLineShaderFragment");
    *(_DWORD *)algn_1EB31ACBC = 1;
    qword_1EB31ACC0 = (uint64_t)"SinglePassRouteLineShader";
    unk_1EB31ACC8 = 0;
    qword_1EB31ACD0 = 0;
    unk_1EB31ACD8 = &ggl::singlePassRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31ACE0 = 2;
    unk_1EB31ACE8 = &ggl::singlePassRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31ACF0 = 0;
    unk_1EB31ACF8 = &ggl::singlePassRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31AD00 = 1;
    unk_1EB31AD08 = &ggl::singlePassRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31AD18 = 0;
    unk_1EB31AD20 = 0;
    qword_1EB31AD10 = 1;
  }
}

void ggl::singlePassRouteLineShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::singlePassRouteLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("SinglePassRouteLineShaderVertex");
    *(_DWORD *)algn_1EB31AAF4 = 0;
    qword_1EB31AAF8 = (uint64_t)"SinglePassRouteLineShader";
    unk_1EB31AB00 = ggl::singlePassRouteLineShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31AB08 = 1;
    unk_1EB31AB10 = &ggl::singlePassRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31AB18 = 4;
    unk_1EB31AB20 = &ggl::singlePassRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31AB28 = 0;
    unk_1EB31AB30 = &ggl::singlePassRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31AB38 = 0;
    unk_1EB31AB40 = &ggl::singlePassRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31AB50 = 0;
    unk_1EB31AB58 = 0;
    qword_1EB31AB48 = 0;
  }
}

void ggl::FlyoverBorderRibbonShader::typedReflection(ggl::FlyoverBorderRibbonShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverBorderRibbonShader::typedReflection(void)::ref = (uint64_t)"FlyoverBorderRibbonShader";
      ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(v1);
      qword_1EB322948 = (uint64_t)&ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("FlyoverBorderRibbonShaderVertex");
      dword_1EB322950 = (int)v2;
      ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(v2);
      qword_1EB322958 = (uint64_t)&ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322960 = ggl::crc32::compute<34ul>("FlyoverBorderRibbonShaderFragment");
      qword_1EB322968 = (uint64_t)ggl::flyoverBorderRibbonShaderShaderConstants(void)::ref;
      unk_1EB322970 = 5;
      qword_1EB322978 = (uint64_t)ggl::flyoverBorderRibbonShaderShaderTextures(void)::ref;
      unk_1EB322980 = 2;
      qword_1EB322988 = (uint64_t)ggl::flyoverBorderRibbonShaderShaderSamplers(void)::ref;
      unk_1EB322990 = 2;
    }
  }
}

void ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("FlyoverBorderRibbonShaderFragment");
    *(_DWORD *)algn_1EB32908C = 1;
    qword_1EB3290A0 = 0;
    unk_1EB3290A8 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329090 = (uint64_t)"FlyoverBorderRibbonShader";
    unk_1EB329098 = 0;
    qword_1EB3290B0 = 1;
    unk_1EB3290B8 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3290C0 = 0;
    unk_1EB3290C8 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3290D0 = 2;
    unk_1EB3290D8 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3290E8 = 0;
    unk_1EB3290F0 = 0;
    qword_1EB3290E0 = 2;
  }
}

void ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("FlyoverBorderRibbonShaderVertex");
    *(_DWORD *)algn_1EB3285A4 = 0;
    qword_1EB3285A8 = (uint64_t)"FlyoverBorderRibbonShader";
    unk_1EB3285B0 = ggl::flyoverBorderRibbonShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3285B8 = 1;
    unk_1EB3285C0 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3285C8 = 5;
    unk_1EB3285D0 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3285D8 = 0;
    unk_1EB3285E0 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3285E8 = 0;
    unk_1EB3285F0 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328600 = 0;
    unk_1EB328608 = 0;
    qword_1EB3285F8 = 0;
  }
}

void ggl::ElevatedStrokeColorShader::typedReflection(ggl::ElevatedStrokeColorShader *this)
{
  {
    if (v1)
    {
      ggl::ElevatedStrokeColorShader::typedReflection(void)::ref = (uint64_t)"ElevatedStrokeColorShader";
      ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(v1);
      qword_1EB31A380 = (uint64_t)&ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<32ul>("ElevatedStrokeColorShaderVertex");
      dword_1EB31A388 = (int)v2;
      ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(v2);
      qword_1EB31A390 = (uint64_t)&ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31A398 = ggl::crc32::compute<34ul>("ElevatedStrokeColorShaderFragment");
      qword_1EB31A3A0 = (uint64_t)ggl::elevatedStrokeColorShaderShaderConstants(void)::ref;
      unk_1EB31A3A8 = 5;
      qword_1EB31A3B0 = (uint64_t)ggl::elevatedStrokeColorShaderShaderTextures(void)::ref;
      unk_1EB31A3B8 = 1;
      qword_1EB31A3C0 = (uint64_t)ggl::elevatedStrokeColorShaderShaderSamplers(void)::ref;
      unk_1EB31A3C8 = 1;
    }
  }
}

void ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("ElevatedStrokeColorShaderFragment");
    *(_DWORD *)algn_1EB31AC44 = 1;
    qword_1EB31AC48 = (uint64_t)"ElevatedStrokeColorShader";
    unk_1EB31AC50 = 0;
    qword_1EB31AC58 = 0;
    unk_1EB31AC60 = &ggl::elevatedStrokeColorShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB31AC68 = 3;
    unk_1EB31AC70 = &ggl::elevatedStrokeColorShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB31AC78 = 0;
    unk_1EB31AC80 = &ggl::elevatedStrokeColorShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB31AC88 = 1;
    unk_1EB31AC90 = &ggl::elevatedStrokeColorShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31ACA0 = 0;
    unk_1EB31ACA8 = 0;
    qword_1EB31AC98 = 1;
  }
}

void ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ElevatedStrokeColorShaderVertex");
    *(_DWORD *)algn_1EB31AA7C = 0;
    qword_1EB31AA80 = (uint64_t)"ElevatedStrokeColorShader";
    unk_1EB31AA88 = ggl::elevatedStrokeColorShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB31AA90 = 1;
    unk_1EB31AA98 = &ggl::elevatedStrokeColorShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB31AAA0 = 4;
    unk_1EB31AAA8 = &ggl::elevatedStrokeColorShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB31AAB0 = 0;
    unk_1EB31AAB8 = &ggl::elevatedStrokeColorShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB31AAC0 = 0;
    unk_1EB31AAC8 = &ggl::elevatedStrokeColorShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB31AAD8 = 0;
    unk_1EB31AAE0 = 0;
    qword_1EB31AAD0 = 0;
  }
}

void ggl::PackedLinearDepthShader::typedReflection(ggl::PackedLinearDepthShader *this)
{
  {
    if (v1)
    {
      ggl::PackedLinearDepthShader::typedReflection(void)::ref = (uint64_t)"PackedLinearDepthShader";
      ggl::packedLinearDepthShaderVertexFunctionDescriptor(v1);
      qword_1EB317B40 = (uint64_t)&ggl::packedLinearDepthShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("PackedLinearDepthShaderVertex");
      dword_1EB317B48 = (int)v2;
      ggl::packedLinearDepthShaderFragmentFunctionDescriptor(v2);
      qword_1EB317B50 = (uint64_t)&ggl::packedLinearDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB317B58 = ggl::crc32::compute<32ul>("PackedLinearDepthShaderFragment");
      qword_1EB317B60 = (uint64_t)ggl::packedLinearDepthShaderShaderConstants(void)::ref;
      unk_1EB317B68 = 5;
      qword_1EB317B70 = (uint64_t)&ggl::packedLinearDepthShaderShaderTextures(void)::ref;
      unk_1EB317B78 = 0;
      qword_1EB317B80 = (uint64_t)&ggl::packedLinearDepthShaderShaderSamplers(void)::ref;
      unk_1EB317B88 = 0;
    }
  }
}

void ggl::packedLinearDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::packedLinearDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PackedLinearDepthShaderFragment");
    *(_DWORD *)algn_1EB3182D4 = 1;
    qword_1EB3182D8 = (uint64_t)"PackedLinearDepthShader";
    unk_1EB3182E0 = 0;
    qword_1EB3182E8 = 0;
    unk_1EB3182F0 = &ggl::packedLinearDepthShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3182F8 = 2;
    unk_1EB318300 = &ggl::packedLinearDepthShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB318308 = 0;
    unk_1EB318310 = &ggl::packedLinearDepthShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB318318 = 0;
    unk_1EB318320 = &ggl::packedLinearDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB318330 = 0;
    unk_1EB318338 = 0;
    qword_1EB318328 = 0;
  }
}

void ggl::packedLinearDepthShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::packedLinearDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PackedLinearDepthShaderVertex");
    *(_DWORD *)algn_1EB31808C = 0;
    qword_1EB318090 = (uint64_t)"PackedLinearDepthShader";
    unk_1EB318098 = ggl::packedLinearDepthShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3180A0 = 3;
    unk_1EB3180A8 = &ggl::packedLinearDepthShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3180B0 = 5;
    unk_1EB3180B8 = &ggl::packedLinearDepthShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3180C0 = 2;
    unk_1EB3180C8 = &ggl::packedLinearDepthShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3180D0 = 0;
    unk_1EB3180D8 = &ggl::packedLinearDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3180E8 = 0;
    unk_1EB3180F0 = 0;
    qword_1EB3180E0 = 0;
  }
}

void ggl::PatternedRibbonShader::typedReflection(ggl::PatternedRibbonShader *this)
{
  {
    if (v1)
    {
      ggl::PatternedRibbonShader::typedReflection(void)::ref = (uint64_t)"PatternedRibbonShader";
      ggl::patternedRibbonShaderVertexFunctionDescriptor(v1);
      qword_1EB321E90 = (uint64_t)&ggl::patternedRibbonShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("PatternedRibbonShaderVertex");
      dword_1EB321E98 = (int)v2;
      ggl::patternedRibbonShaderFragmentFunctionDescriptor(v2);
      qword_1EB321EA0 = (uint64_t)&ggl::patternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321EA8 = ggl::crc32::compute<30ul>("PatternedRibbonShaderFragment");
      qword_1EB321EB0 = (uint64_t)ggl::patternedRibbonShaderShaderConstants(void)::ref;
      unk_1EB321EB8 = 4;
      qword_1EB321EC0 = (uint64_t)ggl::patternedRibbonShaderShaderTextures(void)::ref;
      unk_1EB321EC8 = 1;
      qword_1EB321ED0 = (uint64_t)ggl::patternedRibbonShaderShaderSamplers(void)::ref;
      unk_1EB321ED8 = 1;
    }
  }
}

void ggl::patternedRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::patternedRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PatternedRibbonShaderFragment");
    *(_DWORD *)algn_1EB327AE4 = 1;
    qword_1EB327AE8 = (uint64_t)"PatternedRibbonShader";
    unk_1EB327AF0 = 0;
    qword_1EB327AF8 = 0;
    unk_1EB327B00 = &ggl::patternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB327B08 = 2;
    unk_1EB327B10 = &ggl::patternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB327B18 = 0;
    unk_1EB327B20 = &ggl::patternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB327B28 = 1;
    unk_1EB327B30 = &ggl::patternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327B40 = 0;
    unk_1EB327B48 = 0;
    qword_1EB327B38 = 1;
  }
}

void ggl::patternedRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::patternedRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PatternedRibbonShaderVertex");
    *(_DWORD *)algn_1EB326D0C = 0;
    qword_1EB326D10 = (uint64_t)"PatternedRibbonShader";
    unk_1EB326D18 = ggl::patternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326D20 = 1;
    unk_1EB326D28 = &ggl::patternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326D30 = 4;
    unk_1EB326D38 = &ggl::patternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB326D40 = 0;
    unk_1EB326D48 = &ggl::patternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB326D50 = 0;
    unk_1EB326D58 = &ggl::patternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326D68 = 0;
    unk_1EB326D70 = 0;
    qword_1EB326D60 = 0;
  }
}

void ggl::DiffuseLandmarkShader::typedReflection(ggl::DiffuseLandmarkShader *this)
{
  {
    if (v1)
    {
      ggl::DiffuseLandmarkShader::typedReflection(void)::ref = (uint64_t)"DiffuseLandmarkShader";
      ggl::diffuseLandmarkShaderVertexFunctionDescriptor(v1);
      qword_1EB321D78 = (uint64_t)&ggl::diffuseLandmarkShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<28ul>("DiffuseLandmarkShaderVertex");
      dword_1EB321D80 = (int)v2;
      ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(v2);
      qword_1EB321D88 = (uint64_t)&ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321D90 = ggl::crc32::compute<30ul>("DiffuseLandmarkShaderFragment");
      qword_1EB321D98 = (uint64_t)ggl::diffuseLandmarkShaderShaderConstants(void)::ref;
      unk_1EB321DA0 = 7;
      qword_1EB321DA8 = (uint64_t)ggl::diffuseLandmarkShaderShaderTextures(void)::ref;
      unk_1EB321DB0 = 1;
      qword_1EB321DB8 = (uint64_t)&ggl::diffuseLandmarkShaderShaderSamplers(void)::ref;
      unk_1EB321DC0 = 1;
    }
  }
}

void ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("DiffuseLandmarkShaderFragment");
    *(_DWORD *)algn_1EB32788C = 1;
    qword_1EB327890 = (uint64_t)"DiffuseLandmarkShader";
    unk_1EB327898 = 0;
    qword_1EB3278A0 = 0;
    unk_1EB3278A8 = &ggl::diffuseLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3278B0 = 3;
    unk_1EB3278B8 = &ggl::diffuseLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3278C0 = 0;
    unk_1EB3278C8 = &ggl::diffuseLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3278D0 = 1;
    unk_1EB3278D8 = &ggl::diffuseLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3278E8 = 0;
    unk_1EB3278F0 = 0;
    qword_1EB3278E0 = 1;
  }
}

void ggl::diffuseLandmarkShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::diffuseLandmarkShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DiffuseLandmarkShaderVertex");
    *(_DWORD *)algn_1EB326974 = 0;
    qword_1EB326978 = (uint64_t)"DiffuseLandmarkShader";
    unk_1EB326980 = ggl::diffuseLandmarkShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB326988 = 1;
    unk_1EB326990 = &ggl::diffuseLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB326998 = 6;
    unk_1EB3269A0 = &ggl::diffuseLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3269A8 = 0;
    unk_1EB3269B0 = &ggl::diffuseLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3269B8 = 0;
    unk_1EB3269C0 = &ggl::diffuseLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3269D0 = 0;
    unk_1EB3269D8 = 0;
    qword_1EB3269C8 = 0;
  }
}

void ggl::FlyoverMaskedShader::typedReflection(ggl::FlyoverMaskedShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverMaskedShader::typedReflection(void)::ref = (uint64_t)"FlyoverMaskedShader";
      ggl::flyoverMaskedShaderVertexFunctionDescriptor(v1);
      qword_1EB321768 = (uint64_t)&ggl::flyoverMaskedShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("FlyoverMaskedShaderVertex");
      dword_1EB321770 = (int)v2;
      ggl::flyoverMaskedShaderFragmentFunctionDescriptor(v2);
      qword_1EB321778 = (uint64_t)&ggl::flyoverMaskedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321780 = ggl::crc32::compute<28ul>("FlyoverMaskedShaderFragment");
      qword_1EB321788 = (uint64_t)ggl::flyoverMaskedShaderShaderConstants(void)::ref;
      unk_1EB321790 = 5;
      qword_1EB321798 = (uint64_t)ggl::flyoverMaskedShaderShaderTextures(void)::ref;
      unk_1EB3217A0 = 3;
      qword_1EB3217A8 = (uint64_t)ggl::flyoverMaskedShaderShaderSamplers(void)::ref;
      unk_1EB3217B0 = 3;
    }
  }
}

void ggl::flyoverMaskedShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverMaskedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverMaskedShaderFragment");
    *(_DWORD *)algn_1EB326ACC = 1;
    qword_1EB326AD0 = (uint64_t)"FlyoverMaskedShader";
    unk_1EB326AD8 = 0;
    qword_1EB326AE0 = 0;
    unk_1EB326AE8 = &ggl::flyoverMaskedShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326AF0 = 2;
    unk_1EB326AF8 = &ggl::flyoverMaskedShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326B00 = 0;
    unk_1EB326B08 = &ggl::flyoverMaskedShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326B10 = 2;
    unk_1EB326B18 = &ggl::flyoverMaskedShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326B28 = 0;
    unk_1EB326B30 = 0;
    qword_1EB326B20 = 2;
  }
}

void ggl::flyoverMaskedShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverMaskedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("FlyoverMaskedShaderVertex");
    *(_DWORD *)algn_1EB325C44 = 0;
    qword_1EB325C48 = (uint64_t)"FlyoverMaskedShader";
    unk_1EB325C50 = ggl::flyoverMaskedShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325C58 = 1;
    unk_1EB325C60 = &ggl::flyoverMaskedShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325C68 = 5;
    unk_1EB325C70 = &ggl::flyoverMaskedShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325C78 = 0;
    unk_1EB325C80 = &ggl::flyoverMaskedShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325C88 = 1;
    unk_1EB325C90 = &ggl::flyoverMaskedShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325CA0 = 0;
    unk_1EB325CA8 = 0;
    qword_1EB325C98 = 1;
  }
}

void ggl::FlyoverMorphNightShader::typedReflection(ggl::FlyoverMorphNightShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverMorphNightShader::typedReflection(void)::ref = (uint64_t)"FlyoverMorphNightShader";
      ggl::flyoverMorphNightShaderVertexFunctionDescriptor(v1);
      qword_1EB322460 = (uint64_t)&ggl::flyoverMorphNightShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("FlyoverMorphNightShaderVertex");
      dword_1EB322468 = (int)v2;
      ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(v2);
      qword_1EB322470 = (uint64_t)&ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322478 = ggl::crc32::compute<32ul>("FlyoverMorphNightShaderFragment");
      qword_1EB322480 = (uint64_t)ggl::flyoverMorphNightShaderShaderConstants(void)::ref;
      unk_1EB322488 = 6;
      qword_1EB322490 = (uint64_t)ggl::flyoverMorphNightShaderShaderTextures(void)::ref;
      unk_1EB322498 = 5;
      qword_1EB3224A0 = (uint64_t)ggl::flyoverMorphNightShaderShaderSamplers(void)::ref;
      unk_1EB3224A8 = 5;
    }
  }
}

void ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("FlyoverMorphNightShaderFragment");
    *(_DWORD *)algn_1EB328614 = 1;
    qword_1EB328618 = (uint64_t)"FlyoverMorphNightShader";
    unk_1EB328620 = 0;
    qword_1EB328628 = 0;
    unk_1EB328630 = &ggl::flyoverMorphNightShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328638 = 3;
    unk_1EB328640 = &ggl::flyoverMorphNightShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328648 = 0;
    unk_1EB328650 = &ggl::flyoverMorphNightShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328658 = 4;
    unk_1EB328660 = &ggl::flyoverMorphNightShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328670 = 0;
    unk_1EB328678 = 0;
    qword_1EB328668 = 4;
  }
}

void ggl::flyoverMorphNightShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverMorphNightShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverMorphNightShaderVertex");
    *(_DWORD *)algn_1EB32797C = 0;
    qword_1EB327980 = (uint64_t)"FlyoverMorphNightShader";
    unk_1EB327988 = ggl::flyoverMorphNightShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327990 = 1;
    unk_1EB327998 = &ggl::flyoverMorphNightShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3279A0 = 6;
    unk_1EB3279A8 = &ggl::flyoverMorphNightShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3279B0 = 0;
    unk_1EB3279B8 = &ggl::flyoverMorphNightShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3279C0 = 1;
    unk_1EB3279C8 = &ggl::flyoverMorphNightShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3279D8 = 0;
    unk_1EB3279E0 = 0;
    qword_1EB3279D0 = 1;
  }
}

void ggl::FlyoverBorderShader::typedReflection(ggl::FlyoverBorderShader *this)
{
  {
    if (v1)
    {
      ggl::FlyoverBorderShader::typedReflection(void)::ref = (uint64_t)"FlyoverBorderShader";
      ggl::flyoverBorderShaderVertexFunctionDescriptor(v1);
      qword_1EB321708 = (uint64_t)&ggl::flyoverBorderShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("FlyoverBorderShaderVertex");
      dword_1EB321710 = (int)v2;
      ggl::flyoverBorderShaderFragmentFunctionDescriptor(v2);
      qword_1EB321718 = (uint64_t)&ggl::flyoverBorderShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321720 = ggl::crc32::compute<28ul>("FlyoverBorderShaderFragment");
      qword_1EB321728 = (uint64_t)ggl::flyoverBorderShaderShaderConstants(void)::ref;
      unk_1EB321730 = 5;
      qword_1EB321738 = (uint64_t)ggl::flyoverBorderShaderShaderTextures(void)::ref;
      unk_1EB321740 = 4;
      qword_1EB321748 = (uint64_t)ggl::flyoverBorderShaderShaderSamplers(void)::ref;
      unk_1EB321750 = 4;
    }
  }
}

void ggl::flyoverBorderShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverBorderShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverBorderShaderFragment");
    *(_DWORD *)algn_1EB3269EC = 1;
    qword_1EB3269F0 = (uint64_t)"FlyoverBorderShader";
    unk_1EB3269F8 = 0;
    qword_1EB326A00 = 0;
    unk_1EB326A08 = &ggl::flyoverBorderShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB326A10 = 2;
    unk_1EB326A18 = &ggl::flyoverBorderShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB326A20 = 0;
    unk_1EB326A28 = &ggl::flyoverBorderShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB326A30 = 3;
    unk_1EB326A38 = &ggl::flyoverBorderShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB326A48 = 0;
    unk_1EB326A50 = 0;
    qword_1EB326A40 = 3;
  }
}

void ggl::flyoverBorderShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::flyoverBorderShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("FlyoverBorderShaderVertex");
    *(_DWORD *)algn_1EB325BD4 = 0;
    qword_1EB325BD8 = (uint64_t)"FlyoverBorderShader";
    unk_1EB325BE0 = ggl::flyoverBorderShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB325BE8 = 1;
    unk_1EB325BF0 = &ggl::flyoverBorderShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB325BF8 = 5;
    unk_1EB325C00 = &ggl::flyoverBorderShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB325C08 = 0;
    unk_1EB325C10 = &ggl::flyoverBorderShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB325C18 = 1;
    unk_1EB325C20 = &ggl::flyoverBorderShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325C30 = 0;
    unk_1EB325C38 = 0;
    qword_1EB325C28 = 1;
  }
}

void ggl::DaVinciRibbonShader::typedReflection(ggl::DaVinciRibbonShader *this)
{
  {
    if (v1)
    {
      ggl::DaVinciRibbonShader::typedReflection(void)::ref = (uint64_t)"DaVinciRibbonShader";
      ggl::daVinciRibbonShaderVertexFunctionDescriptor(v1);
      qword_1EB32BBA0 = (uint64_t)&ggl::daVinciRibbonShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("DaVinciRibbonShaderVertex");
      dword_1EB32BBA8 = (int)v2;
      ggl::daVinciRibbonShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BBB0 = (uint64_t)&ggl::daVinciRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BBB8 = ggl::crc32::compute<28ul>("DaVinciRibbonShaderFragment");
      qword_1EB32BBC0 = (uint64_t)ggl::daVinciRibbonShaderShaderConstants(void)::ref;
      unk_1EB32BBC8 = 11;
      qword_1EB32BBD0 = (uint64_t)ggl::daVinciRibbonShaderShaderTextures(void)::ref;
      unk_1EB32BBD8 = 4;
      qword_1EB32BBE0 = (uint64_t)ggl::daVinciRibbonShaderShaderSamplers(void)::ref;
      unk_1EB32BBE8 = 4;
    }
  }
}

void ggl::daVinciRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DaVinciRibbonShaderFragment");
    *(_DWORD *)algn_1EB32C374 = 1;
    qword_1EB32C378 = (uint64_t)"DaVinciRibbonShader";
    unk_1EB32C380 = 0;
    qword_1EB32C388 = 0;
    unk_1EB32C390 = &ggl::daVinciRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C398 = 4;
    unk_1EB32C3A0 = &ggl::daVinciRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C3A8 = 0;
    unk_1EB32C3B0 = &ggl::daVinciRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C3B8 = 3;
    unk_1EB32C3C0 = &ggl::daVinciRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C3D0 = 0;
    unk_1EB32C3D8 = 0;
    qword_1EB32C3C8 = 3;
  }
}

void ggl::daVinciRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("DaVinciRibbonShaderVertex");
    *(_DWORD *)algn_1EB32C0BC = 0;
    qword_1EB32C0C0 = (uint64_t)"DaVinciRibbonShader";
    unk_1EB32C0C8 = ggl::daVinciRibbonShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32C0D0 = 1;
    unk_1EB32C0D8 = &ggl::daVinciRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C0E0 = 8;
    unk_1EB32C0E8 = &ggl::daVinciRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C0F0 = 0;
    unk_1EB32C0F8 = &ggl::daVinciRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C100 = 1;
    unk_1EB32C108 = &ggl::daVinciRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C118 = 0;
    unk_1EB32C120 = 0;
    qword_1EB32C110 = 1;
  }
}

void mre::GGLResourceStore::createTexture()
{
}

{
  operator new();
}

unint64_t geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    uint64_t v7 = (-858993459 * ((a1[7] - a1[6]) >> 3)) | 0x100000000;
    char v9 = (uint64_t *)a1[4];
    unint64_t v8 = a1[5];
    if ((unint64_t)v9 >= v8)
    {
      unint64_t v11 = (uint64_t *)a1[3];
      uint64_t v12 = v9 - v11;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        goto LABEL_66;
      }
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          goto LABEL_67;
        }
        uint64_t v16 = operator new(8 * v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (uint64_t *)&v16[8 * v12];
      uint64_t v18 = &v16[8 * v15];
      *uint64_t v17 = v7;
      uint64_t v10 = v17 + 1;
      if (v9 == v11)
      {
        unint64_t v11 = v9;
      }
      else
      {
        unint64_t v19 = (char *)v9 - (char *)v11 - 8;
        if (v19 < 0x58) {
          goto LABEL_70;
        }
        if ((unint64_t)((char *)v11 - v16) < 0x20) {
          goto LABEL_70;
        }
        uint64_t v20 = (v19 >> 3) + 1;
        int v21 = &v16[8 * v12 - 16];
        float v22 = v9 - 2;
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          _OWORD *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v9 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_70:
          do
          {
            uint64_t v25 = *--v9;
            *--uint64_t v17 = v25;
          }
          while (v9 != v11);
          unint64_t v11 = (uint64_t *)a1[3];
        }
      }
      a1[3] = v17;
      a1[4] = v10;
      a1[5] = v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *char v9 = v7;
      uint64_t v10 = v9 + 1;
    }
    a1[4] = v10;
    unint64_t v6 = *(v10 - 1);
  }
  else
  {
    uint64_t v5 = *(void *)(v4 - 8);
    a1[1] = v4 - 8;
    *(_DWORD *)(a1[3] + 8 * v5) = -858993459 * ((a1[7] - a1[6]) >> 3);
    *(_DWORD *)(a1[3] + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32) + 0x100000000) >> 32;
    unint64_t v6 = v5 | ((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32);
  }
  uint64_t v27 = (char *)a1[7];
  unint64_t v26 = a1[8];
  if ((unint64_t)v27 >= v26)
  {
    float v31 = (char *)a1[6];
    unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v31) >> 3) + 1;
    if (v32 > 0x666666666666666) {
      goto LABEL_66;
    }
    unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - (void)v31) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x333333333333333) {
      unint64_t v34 = 0x666666666666666;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      if (v34 > 0x666666666666666) {
        goto LABEL_67;
      }
      uint64_t v35 = (char *)operator new(40 * v34);
    }
    else
    {
      uint64_t v35 = 0;
    }
    unint64_t v36 = &v35[8 * ((v27 - v31) >> 3)];
    long long v37 = a2[1];
    *(_OWORD *)unint64_t v36 = *a2;
    *((_OWORD *)v36 + 1) = v37;
    *((void *)v36 + 4) = *((void *)a2 + 4);
    uint64_t v30 = v36 + 40;
    if (v27 != v31)
    {
      do
      {
        long long v38 = *(_OWORD *)(v27 - 40);
        long long v39 = *(_OWORD *)(v27 - 24);
        *(v36 - 8) = *(v27 - 8);
        *(_OWORD *)(v36 - 24) = v39;
        *(_OWORD *)(v36 - 40) = v38;
        v36 -= 40;
        v27 -= 40;
      }
      while (v27 != v31);
      uint64_t v27 = (char *)a1[6];
    }
    a1[6] = v36;
    a1[7] = v30;
    a1[8] = &v35[40 * v34];
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    long long v28 = *a2;
    long long v29 = a2[1];
    *((void *)v27 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v27 = v28;
    *((_OWORD *)v27 + 1) = v29;
    uint64_t v30 = v27 + 40;
  }
  a1[7] = v30;
  uint64_t v41 = (char *)a1[10];
  unint64_t v40 = a1[11];
  if ((unint64_t)v41 < v40)
  {
    *(void *)uint64_t v41 = v6;
    int8x16_t v42 = v41 + 8;
    goto LABEL_65;
  }
  int8x16_t v43 = (char *)a1[9];
  uint64_t v44 = (v41 - v43) >> 3;
  unint64_t v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 61) {
LABEL_66:
  }
    abort();
  uint64_t v46 = v40 - (void)v43;
  if (v46 >> 2 > v45) {
    unint64_t v45 = v46 >> 2;
  }
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v47 = v45;
  }
  if (v47)
  {
    if (!(v47 >> 61))
    {
      uint64_t v48 = operator new(8 * v47);
      goto LABEL_56;
    }
LABEL_67:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v48 = 0;
LABEL_56:
  id v49 = &v48[8 * v44];
  id v50 = &v48[8 * v47];
  *id v49 = v6;
  int8x16_t v42 = v49 + 1;
  if (v41 != v43)
  {
    unint64_t v51 = v41 - v43 - 8;
    if (v51 < 0x58) {
      goto LABEL_71;
    }
    if ((unint64_t)(v43 - v48) < 0x20) {
      goto LABEL_71;
    }
    uint64_t v52 = (v51 >> 3) + 1;
    id v53 = &v48[8 * v44 - 16];
    uint64_t v54 = v41 - 16;
    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v56 = *(_OWORD *)v54;
      *(v53 - 1) = *((_OWORD *)v54 - 1);
      *id v53 = v56;
      v53 -= 2;
      v54 -= 32;
      v55 -= 4;
    }
    while (v55);
    v49 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
    v41 -= 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_71:
      do
      {
        uint64_t v57 = *((void *)v41 - 1);
        v41 -= 8;
        *--id v49 = v57;
      }
      while (v41 != v43);
    }
  }
  a1[9] = v49;
  a1[10] = v42;
  a1[11] = v50;
  if (v43) {
    operator delete(v43);
  }
LABEL_65:
  a1[10] = v42;
  return v6;
}

void sub_1A1CCDB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1CCDD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0,std::allocator<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  (*(void (**)(void, uint64_t))(**(void **)(*(void *)(v1 + 168) + 32) + 104))(*(void *)(*(void *)(v1 + 168) + 32), a1 + 16);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 168) + 48) + 8);
  return v2();
}

void non-virtual thunk to'md::MapNavLabeler::setRouteUserOffset(md::MapNavLabeler *this, const PolylineCoordinate *a2)
{
}

void md::MapNavLabeler::setRouteUserOffset(md::MapNavLabeler *this, const PolylineCoordinate *a2)
{
  *((PolylineCoordinate *)this + 101) = *a2;
  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4
    && ([v4 routeInfo],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        [v5 route],
        unint64_t v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        v5,
        v6))
  {
    id v7 = *((id *)this + 11);
    unint64_t v8 = [v7 routeInfo];
    char v9 = [v8 route];

    [v9 distanceFromPoint:0 toPoint:*a2];
    *((void *)this + 102) = v10;
  }
  else
  {
    *((void *)this + 102) = 0;
  }
  if ((*(unsigned int (**)(md::MapNavLabeler *))(*(void *)this + 352))(this))
  {
    uint64_t v11 = *((void *)this + 8);
    if (a2->index != *(_DWORD *)(v11 + 212) || vabds_f32(a2->offset, *(float *)(v11 + 216)) >= 0.00000011921)
    {
      *(PolylineCoordinate *)(v11 + 212) = *a2;
      md::RouteLineSupport::resolveCurrentRouteLeg((md::RouteLineSupport *)v11);
    }
    [*((id *)this + 7) setRouteUserOffset:*a2];
  }
  uint64_t v12 = (void *)*((void *)this + 9);
  uint64_t v13 = v12[6];
  if (v12[7] != v13)
  {
    unint64_t v14 = 0;
    do
    {
      id v15 = *(id *)(v13 + 8 * v14);
      id v18 = v15;
      uint64_t v16 = [v15 navigationState];
      [v15 updateNavigationStateForRouteUserOffset:a2];
      if (v16 != [v15 navigationState])
      {
        uint64_t v17 = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::find<VKTrafficFeature * {__strong}>(v12 + 22, &v18);
        if (v17) {
          (*(void (**)(void, void))(*(void *)v17[3] + 536))(v17[3], *v12);
        }
      }

      ++v14;
      uint64_t v13 = v12[6];
    }
    while (v14 < (v12[7] - v13) >> 3);
  }
}

void sub_1A1CCDFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::MuninAvailabilityData::MuninAvailabilityData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  md::MapTileData::MapTileData(a1, a2, (uint64_t)&v24, a3, 1);
  *(void *)a1 = &unk_1EF53FE60;
  *(void *)(a1 + 632) = &unk_1EF53FEA0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 744) = xmmword_1A28FC750;
  uint64_t v23 = a1;
  long long v24 = (void (**)(void **))&unk_1EF58F3C8;
  uint64_t v25 = a3;
  unint64_t v26 = &v23;
  uint64_t v27 = (void **)&v24;
  geo::codec::forEachRoad(a3, (uint64_t)&v24);
  if (v27 == (void **)&v24)
  {
    v24[4]((void **)&v24);
  }
  else if (v27)
  {
    (*((void (**)(void))*v27 + 5))();
  }
  if (*(void *)(a1 + 728) != *(void *)(a1 + 720))
  {
    int v5 = 1 << *(unsigned char *)(a1 + 169);
    double v6 = 1.0 / (double)v5;
    long double v7 = exp(v6 * 6.28318531 * ((double)(v5 + ~*(_DWORD *)(a1 + 172)) + 0.5) + -3.14159265);
    long double v8 = atan(v7) * 114.591559 + -90.0;
    double v9 = cos(v8 * 0.034906585);
    double v10 = cos(v8 * 0.0698131701);
    double v11 = cos(v8 * 0.104719755);
    long double v12 = v8 * 0.00872664626;
    long double v13 = tan(v8 * 0.00872664626 + 0.78103484);
    double v14 = log(v13);
    long double v15 = tan(v12 + 0.789761487);
    double v16 = log(v15);
    float v17 = *(float *)(a1 + 752);
    float v18 = *(float *)(a1 + 744);
    if (v17 >= v18)
    {
      float v20 = *(float *)(a1 + 756);
      float v19 = *(float *)(a1 + 748);
      if (v20 >= v19)
      {
        float v21 = fabs((v16 - v14) * 0.159154943)
            * -5000.0
            / ((v9 * -559.82 + 111132.92 + v10 * 1.175 + v11 * -0.0023)
             * v6);
        float v18 = v18 + v21;
        float v17 = v17 - v21;
        float v19 = v19 + v21;
        float v20 = v20 - v21;
      }
    }
    else
    {
      float v19 = *(float *)(a1 + 748);
      float v20 = *(float *)(a1 + 756);
    }
    *(float *)(a1 + 744) = v18;
    *(float *)(a1 + 748) = v19;
    *(float *)(a1 + 752) = v17;
    *(float *)(a1 + 756) = v20;
  }
  return a1;
}

void sub_1A1CCE320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*a13 + 40))();
  }
  double v16 = *v14;
  if (*v14)
  {
    *((void *)v13 + 91) = v16;
    operator delete(v16);
  }
  md::MapTileData::~MapTileData(v13);
  _Unwind_Resume(a1);
}

uint64_t md::InstanceData::identity(md::InstanceData *this)
{
  uint64_t v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1EF57F920;
  uint64_t result = md::InstanceData::InstanceData((uint64_t)(v2 + 3), 1u, 0);
  *(void *)this = result;
  *((void *)this + 1) = v2;
  uint64_t v4 = (void *)v2[3];
  unint64_t v5 = v4[6] - v4[5];
  uint64_t v6 = v4[9];
  unint64_t v7 = v5 % v4[1];
  *(_DWORD *)uint64_t v6 = 1065353216;
  *(void *)(v6 + 4) = 0;
  *(void *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 20) = 1065353216;
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 40) = 1065353216;
  *(void *)(v6 + 44) = 0;
  *(void *)(v6 + 52) = 0;
  *(_DWORD *)(v6 + 60) = 1065353216;
  unint64_t v8 = v5 - v7;
  if (v8)
  {
    if (v4[8] > v8) {
      unint64_t v8 = v4[8];
    }
    v4[7] = 0;
    v4[8] = v8;
  }
  *((unsigned char *)v2 + 44) = 1;
  return result;
}

void sub_1A1CCE470(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t md::InstanceData::InstanceData(uint64_t a1, unsigned int a2, char a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 20) = 0;
  uint64_t v6 = operator new(0xE0uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *uint64_t v6 = &unk_1EF583F90;
  uint64_t v7 = ggl::BufferData::BufferData((uint64_t)(v6 + 3), qword_1E95521A8, 3, a3, 6, a2);
  void v6[3] = &unk_1EF55B9B0;
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return a1;
}

void sub_1A1CCE578(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void *gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v16 = a2;
  uint64_t result = geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign((uint64_t)v14, a1 + 4, (uint64_t)&v16, a3);
  uint64_t v5 = a1[31];
  if (v15 == a1[11])
  {
    unint64_t v8 = (void *)a1[22];
    if (v8)
    {
      while (1)
      {
        float v18 = &v16;
        uint64_t v19 = 1;
        uint64_t v17 = v5;
        uint64_t v9 = v8[6];
        if (!v9) {
          break;
        }
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v9 + 48))(v9, &v17, &v18);
        unint64_t v8 = (void *)*v8;
        if (!v8) {
          return result;
        }
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = (void *)a1[16];
    if (v6)
    {
      while (1)
      {
        float v18 = &v16;
        uint64_t v19 = 1;
        uint64_t v17 = v5;
        uint64_t v7 = v6[6];
        if (!v7) {
          break;
        }
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v7 + 48))(v7, &v17, &v18);
        uint64_t v6 = (void *)*v6;
        if (!v6) {
          return result;
        }
      }
LABEL_10:
      std::__throw_bad_function_call[abi:nn180100]();
      return geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign(v10, v11, v12, v13);
    }
  }
  return result;
}

void *geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
  uint64_t result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a2, a3);
  if (v8)
  {
    double v14 = (_OWORD *)a2[7];
    unint64_t v13 = a2[8];
    if ((unint64_t)v14 >= v13)
    {
      float v20 = (_OWORD *)a2[6];
      unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * (v14 - v20) + 1;
      if (v21 > 0x249249249249249) {
        abort();
      }
      unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (void)v20) >> 4);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x124924924924924) {
        unint64_t v23 = 0x249249249249249;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 > 0x249249249249249) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v24 = (char *)operator new(112 * v23);
      }
      else
      {
        long long v24 = 0;
      }
      long long v27 = a4[5];
      uint64_t v28 = &v24[16 * (v14 - v20)];
      *((_OWORD *)v28 + 4) = a4[4];
      *((_OWORD *)v28 + 5) = v27;
      *((_OWORD *)v28 + 6) = a4[6];
      long long v29 = a4[1];
      *(_OWORD *)uint64_t v28 = *a4;
      *((_OWORD *)v28 + 1) = v29;
      long long v30 = a4[3];
      *((_OWORD *)v28 + 2) = a4[2];
      *((_OWORD *)v28 + 3) = v30;
      double v11 = v28 + 112;
      if (v14 != v20)
      {
        do
        {
          long long v31 = *(v14 - 7);
          long long v32 = *(v14 - 5);
          *((_OWORD *)v28 - 6) = *(v14 - 6);
          *((_OWORD *)v28 - 5) = v32;
          *((_OWORD *)v28 - 7) = v31;
          long long v33 = *(v14 - 4);
          long long v34 = *(v14 - 3);
          long long v35 = *(v14 - 1);
          *((_OWORD *)v28 - 2) = *(v14 - 2);
          *((_OWORD *)v28 - 1) = v35;
          *((_OWORD *)v28 - 4) = v33;
          *((_OWORD *)v28 - 3) = v34;
          v28 -= 112;
          v14 -= 7;
        }
        while (v14 != v20);
        double v14 = (_OWORD *)a2[6];
      }
      a2[6] = v28;
      a2[7] = v11;
      a2[8] = &v24[112 * v23];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      long long v15 = *a4;
      long long v16 = a4[2];
      v14[1] = a4[1];
      v14[2] = v16;
      _OWORD *v14 = v15;
      long long v17 = a4[3];
      long long v18 = a4[4];
      long long v19 = a4[6];
      v14[5] = a4[5];
      v14[6] = v19;
      void v14[3] = v17;
      v14[4] = v18;
      double v11 = v14 + 7;
    }
    a2[7] = v11;
    uint64_t result = (void *)a2[4];
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v11;
    char v25 = 1;
  }
  else
  {
    uint64_t v9 = a2[6];
    uint64_t v10 = ((uint64_t)result - a2[3]) >> 3;
    double v11 = (_OWORD *)(v9 + 112 * v10);
    *(void *)double v11 = *(void *)a4;
    if (*((unsigned __int8 *)v11 + 24) != *((unsigned __int8 *)a4 + 24))
    {
      if (*((unsigned char *)v11 + 24))
      {
        char v12 = 0;
      }
      else
      {
        *(_OWORD *)((char *)v11 + 8) = *(long long *)((char *)a4 + 8);
        char v12 = 1;
      }
      *((unsigned char *)v11 + 24) = v12;
    }
    char v25 = 0;
    uint64_t v26 = v9 + 112 * v10;
    *(unsigned char *)(v26 + 32) = *((unsigned char *)a4 + 32);
    *(_DWORD *)(v26 + 36) = *((_DWORD *)a4 + 9);
    *(_DWORD *)(v26 + 40) = *((_DWORD *)a4 + 10);
    *(_DWORD *)(v26 + 44) = *((_DWORD *)a4 + 11);
    *(_DWORD *)(v26 + 48) = *((_DWORD *)a4 + 12);
    *(_DWORD *)(v26 + 52) = *((_DWORD *)a4 + 13);
    *(_DWORD *)(v26 + 56) = *((_DWORD *)a4 + 14);
    *(_DWORD *)(v26 + 60) = *((_DWORD *)a4 + 15);
    *(_DWORD *)(v26 + 64) = *((_DWORD *)a4 + 16);
    *(_DWORD *)(v26 + 68) = *((_DWORD *)a4 + 17);
    *(_DWORD *)(v26 + 72) = *((_DWORD *)a4 + 18);
    *(_DWORD *)(v26 + 76) = *((_DWORD *)a4 + 19);
    *(_DWORD *)(v26 + 80) = *((_DWORD *)a4 + 20);
    *(_DWORD *)(v26 + 84) = *((_DWORD *)a4 + 21);
    *(_DWORD *)(v26 + 88) = *((_DWORD *)a4 + 22);
    *(_DWORD *)(v26 + 92) = *((_DWORD *)a4 + 23);
    *(_DWORD *)(v26 + 96) = *((_DWORD *)a4 + 24);
    *(_DWORD *)(v26 + 100) = *((_DWORD *)a4 + 25);
    *(_DWORD *)(v26 + 104) = *((_DWORD *)a4 + 26);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v11;
  }
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = v25;
  return result;
}

void md::CircleOverlayRenderable::SharedResources::SharedResources(md::CircleOverlayRenderable::SharedResources *this, const ggl::StandardLibrary *a2, const RenderTargetFormat *a3, int a4)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  if (a4) {
    int v6 = 1;
  }
  else {
    int v6 = 6;
  }
  if (a4) {
    int v7 = 0;
  }
  else {
    int v7 = 7;
  }
  v22[0] = a4 ^ 1;
  int v23 = v6;
  int v24 = v7;
  uint64_t v25 = 0x100000000;
  int v26 = v7;
  char v30 = 15;
  if ((a4 ^ 1))
  {
    uint64_t v14 = *((void *)a2 + 10);
    long long v15 = *(std::__shared_weak_count **)(v14 + 280);
    uint64_t v20 = *(void *)(v14 + 272);
    unint64_t v21 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = operator new(0x198uLL);
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = &unk_1EF589358;
    uint64_t v11 = (uint64_t)(v10 + 3);
    long long v16 = *(_OWORD *)&a3->colorFormatsCount;
    long long v31 = *(_OWORD *)a3->colorFormats;
    long long v32 = v16;
    char v13 = 0;
  }
  else
  {
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 280);
    uint64_t v20 = *(void *)(v8 + 272);
    unint64_t v21 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = operator new(0x198uLL);
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = &unk_1EF589358;
    uint64_t v11 = (uint64_t)(v10 + 3);
    long long v12 = *(_OWORD *)&a3->colorFormatsCount;
    long long v31 = *(_OWORD *)a3->colorFormats;
    long long v32 = v12;
    char v13 = 1;
  }
  uint64_t v17 = ggl::Circle::FillPipelineState::FillPipelineState(v11, &v20, (uint64_t)v22, &v31, v13);
  long long v18 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v17;
  *((void *)this + 1) = v10;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = v21;
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  operator new();
}

void sub_1A1CCED6C(_Unwind_Exception *exception_object)
{
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v4 = v1[4];
  v1[4] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[3];
  v1[3] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v1[2];
  v1[2] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (std::__shared_weak_count *)v1[1];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::Circle::FillPipelineState::FillPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    double v84 = a4;
    double v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1EB32B400 = 1;
          }
          ggl::Circle::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          unk_1EB323970 = &ggl::Circle::pipelineDataFillPipelineDeviceStructs(void)::ref;
          qword_1EB323978 = 0;
          {
            ggl::Circle::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Circle::Style::reflection(void)::reflection;
            *(void *)algn_1EB3239A8 = ggl::Circle::View::reflection(void)::reflection;
            qword_1EB3239B0 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1EB323980 = (uint64_t)&ggl::Circle::pipelineDataFillPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EB323988 = xmmword_1A28FCD30;
        }
      }
      ggl::Circle::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Circle::FillPipelineSetup::typedReflection(void)::ref;
      ggl::CircleShader::typedReflection(v85);
      qword_1E958DAA8 = (uint64_t)&ggl::CircleShader::typedReflection(void)::ref;
      {
        ggl::Circle::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9588908 = 0;
        qword_1E9588910 = (uint64_t)"";
        dword_1E9588918 = 0;
        qword_1E9588920 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
        unk_1E9588928 = 1;
      }
      qword_1E958DAB0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E958DAB8 = 1;
      qword_1E958DAC0 = 0;
      unk_1E958DAC8 = 0;
      qword_1E958DAD0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
      unk_1E958DAD8 = 0;
      {
        ggl::Circle::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9588878 = 0;
        qword_1E9588880 = (uint64_t)"style";
        dword_1E9588888 = 3;
        qword_1E9588890 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineConstantStyleBinding(void)::reflection;
        unk_1E9588898 = xmmword_1A28FD030;
        qword_1E95888A8 = 1;
        unk_1E95888B0 = "view";
        dword_1E95888B8 = 3;
        qword_1E95888C0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
        unk_1E95888C8 = xmmword_1A28FC6E0;
        qword_1E95888D8 = 2;
        unk_1E95888E0 = "alphaTint";
        dword_1E95888E8 = 3;
        qword_1E95888F0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1E95888F8 = 1;
      }
      qword_1E958DAE0 = (uint64_t)&ggl::Circle::pipelineStateFillPipelineConstantStructBinding(void)::ref;
      unk_1E958DAE8 = 3;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)id v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Circle::FillPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  *(void *)a1 = &unk_1EF560C30;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void ggl::CircleShader::typedReflection(ggl::CircleShader *this)
{
  {
    if (v1)
    {
      ggl::CircleShader::typedReflection(void)::ref = (uint64_t)"CircleShader";
      ggl::circleShaderVertexFunctionDescriptor(v1);
      qword_1EB320858 = (uint64_t)&ggl::circleShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<19ul>("CircleShaderVertex");
      dword_1EB320860 = (int)v2;
      ggl::circleShaderFragmentFunctionDescriptor(v2);
      qword_1EB320868 = (uint64_t)&ggl::circleShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320870 = ggl::crc32::compute<21ul>("CircleShaderFragment");
      qword_1EB320878 = (uint64_t)ggl::circleShaderShaderConstants(void)::ref;
      unk_1EB320880 = 3;
      qword_1EB320888 = (uint64_t)&ggl::circleShaderShaderTextures(void)::ref;
      unk_1EB320890 = 0;
      qword_1EB320898 = (uint64_t)&ggl::circleShaderShaderSamplers(void)::ref;
      unk_1EB3208A0 = 0;
    }
  }
}

void ggl::circleShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::circleShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("CircleShaderFragment");
    *(_DWORD *)algn_1EB32498C = 1;
    qword_1EB324990 = (uint64_t)"CircleShader";
    unk_1EB324998 = 0;
    qword_1EB3249A0 = 0;
    unk_1EB3249A8 = &ggl::circleShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB3249B0 = 2;
    unk_1EB3249B8 = &ggl::circleShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3249C0 = 0;
    unk_1EB3249C8 = &ggl::circleShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3249D0 = 0;
    unk_1EB3249D8 = &ggl::circleShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3249E8 = 0;
    unk_1EB3249F0 = 0;
    qword_1EB3249E0 = 0;
  }
}

void ggl::circleShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::circleShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("CircleShaderVertex");
    *(_DWORD *)algn_1EB3242C4 = 0;
    qword_1EB3242C8 = (uint64_t)"CircleShader";
    unk_1EB3242D0 = ggl::circleShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3242D8 = 1;
    unk_1EB3242E0 = &ggl::circleShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3242E8 = 2;
    unk_1EB3242F0 = &ggl::circleShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3242F8 = 0;
    unk_1EB324300 = &ggl::circleShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324308 = 0;
    unk_1EB324310 = &ggl::circleShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324320 = 0;
    unk_1EB324328 = 0;
    qword_1EB324318 = 0;
  }
}

void non-virtual thunk to'md::MapNavLabeler::setFocusedPolyline(id *this, VKPolylineOverlay *a2)
{
  uint64_t v7 = a2;
  objc_msgSend(this[6], "setRoute:");
  uint64_t v3 = (unsigned __int8 *)this[7];
  int v4 = v7 != 0;
  if (!*(void *)(*((void *)v3 + 1) + 184) && v3[254] != v4)
  {
    v3[254] = v4;
    uint64_t v5 = (md::WaypointStore *)*((void *)v3 + 9);
    if (v5)
    {
      int v6 = *((unsigned __int8 *)v5 + 49);
      if (v6 != v4)
      {
        if (*((unsigned char *)v5 + 48))
        {
          *((unsigned char *)v5 + 49) = v4;
          if ((v6 != 0) != (v7 != 0)) {
            md::WaypointStore::updateWaypointsForSelection(v5);
          }
        }
        else
        {
          *((unsigned char *)v5 + 49) = v4;
        }
      }
    }
  }
}

void sub_1A1CCFA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1CCFC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::LabelManager::LabelManager(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1EF53E788;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)notificationHandler, (CFStringRef)*MEMORY[0x1E4F1C370], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  *a1 = &unk_1EF531680;
  MEMORY[0x1A6238E70](a1 + 3);
  a1[11] = &unk_1EF559798;
  a1[12] = 0;
  id v5 = *(id *)(a3 + 24);
  int v6 = (void *)a1[12];
  a1[12] = v5;

  a1[14] = *(void *)(a3 + 112);
  uint64_t v7 = *(void *)(a3 + 120);
  a1[15] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a1[17] = *(void *)(a3 + 88);
  *((unsigned char *)a1 + 128) = 0;
  uint64_t v8 = *(void *)(a3 + 96);
  a1[18] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[19] = *(void *)(a3 + 72);
  uint64_t v9 = *(void *)(a3 + 80);
  a1[20] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1A1CD60B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, md::LabelLayoutContext *a17, uint64_t a18, uint64_t a19, md::LabelDebugSettings *a20,std::recursive_mutex *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,md::LabelLayoutContext *a33,uint64_t a34,uint64_t a35,md::StandardLabeler *a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  MEMORY[0x1A6239270](v57, 0x10A1C4066F3BFFFLL);
  *(void *)(v56 + 208) = a25;

  std::unique_ptr<md::LabelsState>::~unique_ptr[abi:nn180100]((md::LabelsState **)(v56 + 168));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a22);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a23);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a35);
  *(void *)(v56 + 88) = a24;

  std::recursive_mutex::~recursive_mutex(a21);
  md::NotificationObserver::~NotificationObserver((md::NotificationObserver *)v56);
  int32x4_t v59 = *(std::__shared_weak_count **)(v56 + 16);
  if (v59) {
    std::__shared_weak_count::__release_weak(v59);
  }
  _Unwind_Resume(a1);
}

void sub_1A1CD8134()
{
  uint64_t v1 = v0[15];
  v0[15] = 0;
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x81C40B8603338);
  }
  uint64_t v2 = v0[14];
  v0[14] = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x81C40B8603338);
  }
  uint64_t v3 = v0[13];
  v0[13] = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x81C40B8603338);
  }
  uint64_t v4 = v0[12];
  v0[12] = 0;
  if (v4) {
    MEMORY[0x1A6239270](v4, 0x81C40B8603338);
  }
  uint64_t v5 = v0[11];
  v0[11] = 0;
  if (v5) {
    MEMORY[0x1A6239270](v5, 0x81C40B8603338);
  }
  uint64_t v6 = v0[10];
  v0[10] = 0;
  if (v6) {
    MEMORY[0x1A6239270](v6, 0x1081C40FC6463CFLL);
  }
  uint64_t v7 = *v0;
  if (*v0)
  {
    v0[1] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v0[3] + 40))(v0[3], v7, v0[2] - v7);
  }
  MEMORY[0x1A6239270](v0, 0xA0C4086860989);
  JUMPOUT(0x1A1CD80E8);
}

void std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF51E020;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ta2::TextureAtlas::TextureAtlas(uint64_t a1, long long *a2, char a3, unsigned int a4, uint32x2_t *a5, uint32x2_t *a6, int a7, void *a8, uint64_t a9)
{
  *(void *)a1 = &unk_1EF5675E8;
  int8x16_t v16 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v17 = *a2;
    v16->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  *(_DWORD *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 36) = byte_1A2962250[a4];
  uint32x2_t v18 = vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vneg_s32(vclz_s32(vadd_s32((int32x2_t)vmin_u32(*a5, (uint32x2_t)0x100000001000), (int32x2_t)-1))), (int8x8_t)0x1F0000001FLL));
  *(uint32x2_t *)(a1 + 40) = v18;
  *(uint32x2_t *)(a1 + 48) = vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vneg_s32(vclz_s32(vadd_s32((int32x2_t)vmin_u32(*a6, (uint32x2_t)0x100000001000), (int32x2_t)-1))), (int8x8_t)0x1F0000001FLL));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = a3;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  if (a7) {
    int v19 = 0;
  }
  else {
    int v19 = 256;
  }
  *(_DWORD *)(a1 + 100) = 1;
  *(_DWORD *)(a1 + 104) = v19;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 160) = 850045863;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v20 = a8[1];
  *(void *)(a1 + 344) = *a8;
  *(void *)(a1 + 352) = v20;
  if (v20)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    uint32x2_t v18 = *(uint32x2_t *)(a1 + 40);
  }
  *(void *)(a1 + 360) = a9;
  float32x2_t v21 = vcvt_f32_u32(v18);
  if (*(void *)(a1 + 48)) {
    float32x2_t v21 = vminnm_f32(vcvt_f32_u32(*(uint32x2_t *)(a1 + 48)), v21);
  }
  *(uint32x2_t *)(a1 + 56) = vcvt_u32_f32(v21);
  *(uint32x2_t *)(a1 + 64) = vcvt_u32_f32(vmul_f32(v21, (float32x2_t)0x3F0000003F000000));
  int32x4_t v22 = (char *)operator new(0x58uLL);
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = 0;
  *(void *)int32x4_t v22 = &unk_1EF583858;
  *((void *)v22 + 5) = 0;
  *((void *)v22 + 6) = 0;
  *((_DWORD *)v22 + 14) = 0;
  *((void *)v22 + 3) = &unk_1EF55AE58;
  *((void *)v22 + 4) = 0;
  *(void *)&long long v23 = 0x100000001;
  *((void *)&v23 + 1) = 0x100000001;
  *(_OWORD *)(v22 + 60) = v23;
  *(void *)(v22 + 76) = 0x100000001;
  *((_DWORD *)v22 + 21) = 0;
  int8x16_t v24 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v22 + 24;
  *(void *)(a1 + 88) = v22;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(_DWORD *)(a1 + 100) = 4;
  int8x16_t v26 = *(void **)(a1 + 320);
  int8x16_t v25 = *(void ***)(a1 + 328);
  int8x16_t v27 = (char *)((char *)v25 - (char *)v26);
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v25 - (void **)v26);
  if (v28 > 3)
  {
    if (v27 != (char *)96)
    {
      int8x16_t v47 = (void **)(v26 + 12);
      if (v25 != v26 + 12)
      {
        int8x16_t v48 = *(void ***)(a1 + 328);
        do
        {
          int8x16_t v51 = (char *)*(v48 - 3);
          v48 -= 3;
          int8x16_t v50 = v51;
          if (v51)
          {
            int8x16_t v52 = (char *)*(v25 - 2);
            int8x16_t v49 = v50;
            if (v52 != v50)
            {
              do
              {
                int8x16_t v53 = (std::__shared_weak_count *)*((void *)v52 - 1);
                if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
                v52 -= 16;
              }
              while (v52 != v50);
              int8x16_t v49 = *v48;
            }
            *(v25 - 2) = v50;
            operator delete(v49);
          }
          int8x16_t v25 = v48;
        }
        while (v48 != v47);
      }
      *(void *)(a1 + 328) = v47;
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a1 + 336);
    if (0xAAAAAAAAAAAAAAABLL * ((v29 - (uint64_t)v25) >> 3) >= 4 - v28)
    {
      bzero(*(void **)(a1 + 328), 24 * ((72 - (uint64_t)v27) / 0x18uLL) + 24);
      *(void *)(a1 + 328) = &v25[3 * ((72 - (uint64_t)v27) / 0x18uLL) + 3];
    }
    else
    {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (uint64_t)v26) >> 3);
      unint64_t v31 = 0x5555555555555556 * ((v29 - (uint64_t)v26) >> 3);
      if (v31 <= 4) {
        unint64_t v31 = 4;
      }
      if (v30 >= 0x555555555555555) {
        unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_83;
      }
      uint64_t v33 = 24 * v32;
      int8x16_t v34 = (char *)operator new(24 * v32);
      int16x8_t v35 = &v34[8 * (v25 - (void **)v26)];
      int32x4_t v36 = &v34[v33];
      bzero(v35, 24 * ((72 - (uint64_t)v27) / 0x18uLL) + 24);
      int8x16_t v37 = &v35[24 * ((72 - (uint64_t)v27) / 0x18uLL) + 24];
      if (v25 == v26)
      {
        *(void *)(a1 + 320) = v35;
        *(void *)(a1 + 328) = v37;
        *(void *)(a1 + 336) = v36;
      }
      else
      {
        do
        {
          int32x4_t v38 = v35;
          *((void *)v35 - 2) = 0;
          *((void *)v35 - 1) = 0;
          long long v39 = *(_OWORD *)(v25 - 3);
          v25 -= 3;
          *(_OWORD *)(v35 - 24) = v39;
          v35 -= 24;
          *((void *)v38 - 1) = v25[2];
          *int8x16_t v25 = 0;
          v25[1] = 0;
          v25[2] = 0;
        }
        while (v25 != v26);
        int8x16_t v25 = *(void ***)(a1 + 320);
        int32x4_t v40 = *(void ***)(a1 + 328);
        *(void *)(a1 + 320) = v35;
        *(void *)(a1 + 328) = v37;
        *(void *)(a1 + 336) = v36;
        if (v40 != v25)
        {
          int8x16_t v41 = v40;
          do
          {
            int8x16_t v44 = (char *)*(v41 - 3);
            v41 -= 3;
            int8x16_t v43 = v44;
            if (v44)
            {
              int8x16_t v45 = (char *)*(v40 - 2);
              int8x16_t v42 = v43;
              if (v45 != v43)
              {
                do
                {
                  int8x16_t v46 = (std::__shared_weak_count *)*((void *)v45 - 1);
                  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                  v45 -= 16;
                }
                while (v45 != v43);
                int8x16_t v42 = *v41;
              }
              *(v40 - 2) = v43;
              operator delete(v42);
            }
            int32x4_t v40 = v41;
          }
          while (v41 != v25);
        }
      }
      if (v25) {
        operator delete(v25);
      }
    }
  }
  unint64_t v54 = *(unsigned int *)(a1 + 100);
  uint64_t v56 = *(void **)(a1 + 296);
  int16x8_t v55 = *(void **)(a1 + 304);
  unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (v55 - v56);
  unint64_t v58 = v54 - v57;
  if (v54 > v57)
  {
    uint64_t v59 = *(void *)(a1 + 312);
    if (0xAAAAAAAAAAAAAAABLL * ((v59 - (uint64_t)v55) >> 3) >= v58)
    {
      bzero(*(void **)(a1 + 304), 24 * ((24 * v58 - 24) / 0x18) + 24);
      *(void *)(a1 + 304) = &v55[3 * ((24 * v58 - 24) / 0x18) + 3];
      goto LABEL_79;
    }
    unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((v59 - (uint64_t)v56) >> 3);
    unint64_t v61 = 0x5555555555555556 * ((v59 - (uint64_t)v56) >> 3);
    if (v61 > v54) {
      unint64_t v54 = v61;
    }
    if (v60 >= 0x555555555555555) {
      unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v54 <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v62 = 24 * v54;
      int32x4_t v63 = (char *)operator new(24 * v54);
      int8x16_t v64 = &v63[8 * (v55 - v56)];
      int8x16_t v65 = &v63[v62];
      bzero(v64, 24 * ((24 * v58 - 24) / 0x18) + 24);
      int8x16_t v66 = &v64[24 * ((24 * v58 - 24) / 0x18) + 24];
      if (v55 == v56)
      {
        *(void *)(a1 + 296) = v64;
        *(void *)(a1 + 304) = v66;
        *(void *)(a1 + 312) = v65;
      }
      else
      {
        do
        {
          int8x16_t v67 = v64;
          *((void *)v64 - 2) = 0;
          *((void *)v64 - 1) = 0;
          long long v68 = *(_OWORD *)(v55 - 3);
          v55 -= 3;
          *(_OWORD *)(v64 - 24) = v68;
          v64 -= 24;
          *((void *)v67 - 1) = v55[2];
          void *v55 = 0;
          v55[1] = 0;
          v55[2] = 0;
        }
        while (v55 != v56);
        int16x8_t v55 = *(void **)(a1 + 296);
        int8x16_t v69 = *(void **)(a1 + 304);
        *(void *)(a1 + 296) = v64;
        *(void *)(a1 + 304) = v66;
        *(void *)(a1 + 312) = v65;
        if (v69 != v55)
        {
          int16x8_t v70 = v69;
          do
          {
            int8x16_t v72 = (void *)*(v70 - 3);
            v70 -= 3;
            int32x4_t v71 = v72;
            if (v72)
            {
              *(v69 - 2) = v71;
              operator delete(v71);
            }
            int8x16_t v69 = v70;
          }
          while (v70 != v55);
        }
      }
      if (v55) {
        operator delete(v55);
      }
      goto LABEL_79;
    }
LABEL_83:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v54 < v57)
  {
    int16x8_t v73 = &v56[3 * v54];
    if (v55 != v73)
    {
      int32x4_t v74 = *(void **)(a1 + 304);
      do
      {
        int32x4_t v76 = (void *)*(v74 - 3);
        v74 -= 3;
        int8x16_t v75 = v76;
        if (v76)
        {
          *(v55 - 2) = v75;
          operator delete(v75);
        }
        int16x8_t v55 = v74;
      }
      while (v74 != v73);
    }
    *(void *)(a1 + 304) = v73;
  }
LABEL_79:
  int8x16_t v77 = operator new(0x70uLL);
  v77[1] = 0;
  v77[2] = 0;
  *int8x16_t v77 = &unk_1EF58A7E8;
  *((_OWORD *)v77 + 2) = 0u;
  *((_OWORD *)v77 + 3) = 0u;
  *((_OWORD *)v77 + 4) = 0u;
  *((_OWORD *)v77 + 5) = 0u;
  *((_OWORD *)v77 + 6) = 0u;
  int32x4_t v78 = *(std::__shared_weak_count **)(a1 + 280);
  *(void *)(a1 + 280) = v77;
  v77[3] = 850045863;
  *(void *)(a1 + 272) = v77 + 3;
  if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  return a1;
}

uint64_t ggl::OcclusionLine::OcclusionLinePipelineState::OcclusionLinePipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    char v10 = a4;
    int8x16_t v12 = a2;
    uint64_t v13 = a3;
    a2 = v12;
    a3 = v13;
    a4 = v10;
    if (v11)
    {
      {
        if (v11)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1EB32B428 = 1;
          }
          ggl::OcclusionLine::OcclusionLinePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          unk_1E95827B0 = &ggl::OcclusionLine::pipelineDataOcclusionLinePipelineDeviceStructs(void)::ref;
          qword_1E95827B8 = 0;
          {
            ggl::OcclusionLine::pipelineDataOcclusionLinePipelineConstantStructs(void)::ref = (uint64_t)ggl::OcclusionLine::View::reflection(void)::reflection;
          }
          qword_1E95827C0 = (uint64_t)&ggl::OcclusionLine::pipelineDataOcclusionLinePipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E95827C8 = xmmword_1A28FCC60;
        }
      }
      ggl::OcclusionLine::OcclusionLinePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::OcclusionLine::OcclusionLinePipelineSetup::typedReflection(void)::ref;
      ggl::OcclusionLineShader::typedReflection(v11);
      qword_1EB318A28 = (uint64_t)&ggl::OcclusionLineShader::typedReflection(void)::ref;
      {
        ggl::OcclusionLine::pipelineStateOcclusionLinePipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9582828 = 0;
        qword_1E9582830 = (uint64_t)"";
        dword_1E9582838 = 0;
        qword_1E9582840 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineAttributeBinding_0(void)::attr;
        unk_1E9582848 = 1;
      }
      qword_1EB318A30 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB318A38 = 1;
      qword_1EB318A40 = 0;
      unk_1EB318A48 = 0;
      qword_1EB318A50 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineDeviceStructBinding(void)::ref;
      unk_1EB318A58 = 0;
      {
        ggl::OcclusionLine::pipelineStateOcclusionLinePipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E95827F8 = 0;
        qword_1E9582800 = (uint64_t)"view";
        dword_1E9582808 = 3;
        qword_1E9582810 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineConstantViewBinding(void)::reflection;
        unk_1E9582818 = 3;
      }
      qword_1EB318A60 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineConstantStructBinding(void)::ref;
      unk_1EB318A68 = 1;
      a4 = v10;
      a2 = v12;
      a3 = v13;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int8x16_t v16 = *(_OWORD *)a3;
  *(_OWORD *)&v16[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v14 = *a4;
  long long v15 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::OcclusionLine::OcclusionLinePipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 272) = v15;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v16;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v16[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1EF55B1B8;
  return a1;
}

uint64_t md::CompositeLabeler::addLabeler(uint64_t this, md::Labeler *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void **)(this + 16);
  unint64_t v5 = *(void *)(this + 24);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      *uint64_t v4 = a2;
    }
    uint64_t v6 = v4 + 1;
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)(this + 8);
  uint64_t v8 = ((uint64_t)v4 - v7) >> 3;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61) {
    abort();
  }
  uint64_t v10 = v5 - v7;
  if (v10 >> 2 > v9) {
    unint64_t v9 = v10 >> 2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    uint64_t v11 = 8 * v9;
    this = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(this + 32) + 16))(*(void *)(this + 32), 8 * v9, 8);
    int8x16_t v12 = (void *)(this + 8 * v8);
    unint64_t v9 = this + v11;
    if (this) {
      *int8x16_t v12 = a2;
    }
  }
  else
  {
    int8x16_t v12 = (void *)(8 * v8);
  }
  uint64_t v6 = v12 + 1;
  uint64_t v14 = *(void *)(v3 + 8);
  uint64_t v13 = *(void *)(v3 + 16);
  if (v13 != v14)
  {
    unint64_t v15 = v13 - v14 - 8;
    if (v15 < 0x38)
    {
      uint64_t v17 = *(void *)(v3 + 16);
    }
    else if ((unint64_t)(v13 - (void)v12) < 0x20)
    {
      uint64_t v17 = *(void *)(v3 + 16);
    }
    else
    {
      uint64_t v16 = (v15 >> 3) + 1;
      uint64_t v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      uint32x2_t v18 = v12 - 2;
      int v19 = (long long *)(v13 - 16);
      uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        _OWORD *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
    }
    do
    {
      uint64_t v22 = *(void *)(v17 - 8);
      v17 -= 8;
      *--int8x16_t v12 = v22;
    }
    while (v17 != v14);
LABEL_24:
    uint64_t v13 = *(void *)(v3 + 8);
  }
  *(void *)(v3 + 8) = v12;
  *(void *)(v3 + 16) = v6;
  uint64_t v23 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = v9;
  if (v13) {
    this = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 32) + 40))(*(void *)(v3 + 32), v13, v23 - v13);
  }
LABEL_27:
  *(void *)(v3 + 16) = v6;
  return this;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  uint64_t v8 = end;
  if (__n <= value - end)
  {
    if (!__n)
    {
LABEL_21:
      this->__end_ = v8;
      return;
    }
    std::vector<unsigned int>::size_type v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v16 >= 0xF && (end >= __x + 1 || &end[__n] <= __x))
    {
      std::vector<unsigned int>::size_type v17 = v16 + 1;
      float32x4_t v18 = vld1q_dup_f32((const float *)__x);
      int v19 = (float32x4_t *)(end + 4);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *int v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 == (v17 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_20;
      }
      uint64_t v8 = &end[v17 & 0x7FFFFFFFFFFFFFF8];
    }
    do
      *v8++ = *__x;
    while (v8 != &end[__n]);
LABEL_20:
    uint64_t v8 = &end[__n];
    goto LABEL_21;
  }
  std::vector<unsigned int>::pointer begin = this->__begin_;
  uint64_t v10 = (char *)end - (char *)this->__begin_;
  uint64_t v11 = v10 >> 2;
  unint64_t v12 = (v10 >> 2) + __n;
  if (v12 >> 62) {
    abort();
  }
  uint64_t v13 = (char *)value - (char *)begin;
  if (v13 >> 1 > v12) {
    unint64_t v12 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v15 = operator new(4 * v14);
  }
  else
  {
    unint64_t v15 = 0;
  }
  long long v21 = (unsigned int *)&v15[4 * v11];
  uint64_t v22 = &v21[__n];
  std::vector<unsigned int>::size_type v23 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
  int8x16_t v24 = v21;
  if (v23 >= 0x13)
  {
    if (v21 >= __x + 1 || (int8x16_t v24 = (unsigned int *)&v15[4 * v11], &v15[4 * __n + v10] <= (unsigned char *)__x))
    {
      uint64_t v25 = (v23 + 1) & 0x7FFFFFFFFFFFFFF8;
      float32x4_t v26 = vld1q_dup_f32((const float *)__x);
      int8x16_t v27 = (float32x4_t *)&v15[4 * v11 + 16];
      uint64_t v28 = v25;
      do
      {
        v27[-1] = v26;
        *int8x16_t v27 = v26;
        v27 += 2;
        v28 -= 8;
      }
      while (v28);
      if (v23 + 1 == v25) {
        goto LABEL_31;
      }
      int8x16_t v24 = &v21[v25];
    }
  }
  do
    *v24++ = *__x;
  while (v24 != v22);
LABEL_31:
  if (end != begin)
  {
    unint64_t v29 = (char *)end - (char *)begin - 4;
    if (v29 < 0x2C) {
      goto LABEL_47;
    }
    if ((unint64_t)((char *)end - &v15[v10]) < 0x20) {
      goto LABEL_47;
    }
    uint64_t v30 = (v29 >> 2) + 1;
    uint64_t v8 = &end[-(v30 & 0x7FFFFFFFFFFFFFF8)];
    unint64_t v31 = &v15[4 * v11 - 16];
    unint64_t v32 = (long long *)(end - 4);
    uint64_t v33 = v30 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v34 = *v32;
      *(v31 - 1) = *(v32 - 1);
      _OWORD *v31 = v34;
      v31 -= 2;
      v32 -= 2;
      v33 -= 8;
    }
    while (v33);
    v21 -= v30 & 0x7FFFFFFFFFFFFFF8;
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_47:
      do
      {
        unsigned int v35 = *--v8;
        *--long long v21 = v35;
      }
      while (v8 != begin);
    }
  }
  this->__begin_ = v21;
  this->__end_ = v22;
  this->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
  if (begin)
  {
    operator delete(begin);
  }
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_DWORD **)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      uint64_t v11 = 4 * a2;
      unint64_t v12 = &v4[a2];
      do
      {
        if (v4) {
          *uint64_t v4 = 0;
        }
        ++v4;
        v11 -= 4;
      }
      while (v11);
      uint64_t v4 = v12;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    uint64_t v6 = (uint64_t)v4 - *(void *)result;
    uint64_t v7 = v6 >> 2;
    unint64_t v8 = (v6 >> 2) + a2;
    if (v8 >> 62) {
      abort();
    }
    uint64_t v9 = v5 - *(void *)result;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      uint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * v10, 4);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v13 = (_DWORD *)(result + 4 * v7);
    uint64_t v14 = 4 * a2;
    unint64_t v15 = &v13[a2];
    std::vector<unsigned int>::size_type v16 = v13;
    do
    {
      if (v16) {
        *std::vector<unsigned int>::size_type v16 = 0;
      }
      ++v16;
      v14 -= 4;
    }
    while (v14);
    uint64_t v17 = *(void *)v3;
    uint64_t v18 = *(void *)(v3 + 8);
    if (v18 != *(void *)v3)
    {
      unint64_t v19 = v18 - *(void *)v3 - 4;
      if (v19 < 0x2C) {
        goto LABEL_37;
      }
      if ((unint64_t)(v18 - (v6 + result)) < 0x20) {
        goto LABEL_37;
      }
      uint64_t v20 = (v19 >> 2) + 1;
      uint64_t v21 = v18 - 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v22 = (_OWORD *)(result + 4 * v7 - 16);
      std::vector<unsigned int>::size_type v23 = (long long *)(v18 - 16);
      uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *uint64_t v22 = v25;
        v22 -= 2;
        v23 -= 2;
        v24 -= 8;
      }
      while (v24);
      v13 -= v20 & 0x7FFFFFFFFFFFFFF8;
      uint64_t v18 = v21;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_37:
        do
        {
          int v26 = *(_DWORD *)(v18 - 4);
          v18 -= 4;
          *--uint64_t v13 = v26;
        }
        while (v18 != v17);
      }
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v15;
    *(void *)(v3 + 16) = result + 4 * v10;
    if (v17)
    {
      int8x16_t v27 = *(uint64_t (**)(void))(**(void **)(v3 + 24) + 40);
      return v27();
    }
  }
  return result;
}

void md::ConfigValue<GEOConfigKeyString,std::string>::_update(uint64_t a1)
{
  GEOConfigGetString();
  id v14 = objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v14 UTF8String];
  if (v2) {
    uint64_t v3 = (const char *)v2;
  }
  else {
    uint64_t v3 = "";
  }
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = v5;
    int64_t v16 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v16) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_11:
  }
    memmove(p_dst, v3, v5);
  *((unsigned char *)p_dst + v5) = 0;
  uint64_t v9 = a1 + 16;
  int v10 = *(char *)(a1 + 39);
  char v11 = HIBYTE(v16);
  if (v10 < 0)
  {
    if (v16 >= 0) {
      unint64_t v12 = &__dst;
    }
    else {
      unint64_t v12 = (long long *)__dst;
    }
    if (v16 >= 0) {
      size_t v13 = HIBYTE(v16);
    }
    else {
      size_t v13 = *((void *)&__dst + 1);
    }
    std::string::__assign_no_alias<false>((void **)v9, v12, v13);
    if ((v11 & 0x80) == 0) {
      goto LABEL_25;
    }
  }
  else
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      *(_OWORD *)uint64_t v9 = __dst;
      *(void *)(v9 + 16) = v16;
      goto LABEL_25;
    }
    std::string::__assign_no_alias<true>((void *)v9, (void *)__dst, *((size_t *)&__dst + 1));
  }
  operator delete((void *)__dst);
LABEL_25:
}

void sub_1A1CD9608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

int16x8_t **geo::codec::VectorTile::daVinciSubTileBuildingIndices(geo::codec::VectorTile *this, int a2, int a3, unsigned int a4)
{
  uint64_t v8 = (std::mutex *)((char *)this + 2728);
  std::mutex::lock((std::mutex *)((char *)this + 2728));
  int64_t v16 = geo::codec::VectorTile::daVinciSubTileBuildingIndicesInternal(this, a2, a3, a4, v9, v10, v11, v12, v13, v14, v15);
  std::mutex::unlock(v8);
  return v16;
}

void sub_1A1CD9698(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

int16x8_t **geo::codec::VectorTile::daVinciSubTileBuildingIndicesInternal(geo::codec::VectorTile *this, int a2, int a3, unsigned int a4, double a5, double a6, float32x4_t a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  unsigned int v11 = a4;
  float32x4_t v14 = this;
  float32x4_t v15 = (char *)this + 32 * a4;
  int64_t v16 = (int16x8_t **)*((void *)v15 + 313);
  if (v16 == *((int16x8_t ***)v15 + 314))
  {
    uint64_t v17 = (int16x8_t ***)(v15 + 2504);
    unint64_t v18 = (1 << a4 << a4);
    if (v18) {
      std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::__append((uint64_t)v17, v18);
    }
    if (v11)
    {
      int v248 = a3;
      int v249 = a2;
      unint64_t v19 = geo::codec::VectorTile::_tileBoundsForBuildings(v14, a5, a6, a7, a8, a9, a10, a11);
      unsigned int v20 = 0;
      unsigned int v252 = v11 - 1;
      uint64_t v256 = (1 << (v11 - 1));
      float v21 = 1.0 / (float)v256;
      int32x4_t v251 = v14;
      unint64_t v265 = v19;
      char v250 = v11;
      while (1)
      {
        uint64_t v22 = 0;
        float v23 = (float)((float)v20 + 0.5) * v21;
        int v254 = ((2 * v20) | 1) << v11;
        int v255 = (2 * v20) << v11;
        unsigned int v253 = v20;
        do
        {
          float v24 = (float)((float)v22 + 0.5) * v21;
          uint64_t v25 = geo::codec::VectorTile::daVinciSubTileBuildingIndicesInternal(v14, v22, v20, v252);
          int8x16_t v27 = *(unsigned __int16 **)v25;
          uint64_t v28 = *(unsigned __int16 **)(v25 + 8);
          int16x8_t v258 = (unsigned __int16 **)v25;
          if (*(unsigned __int16 **)v25 == v28)
          {
            unsigned int v32 = 0;
            unsigned int v31 = 0;
            unsigned int v30 = 0;
            unsigned int v29 = 0;
          }
          else
          {
            unsigned int v29 = 0;
            unsigned int v30 = 0;
            unsigned int v31 = 0;
            unsigned int v32 = 0;
            do
            {
              unsigned int v33 = *v27++;
              long long v34 = (float *)(*v19 + 16 * v33);
              float v35 = v34[2];
              int v36 = (float)(1.0 - v34[3]) < v23;
              float v37 = *v34;
              int v38 = (float)(1.0 - v34[1]) >= v23;
              if (v37 < v24) {
                int v39 = v36;
              }
              else {
                int v39 = 0;
              }
              if (v37 < v24) {
                int v40 = v38;
              }
              else {
                int v40 = 0;
              }
              v29 += v39;
              if (v35 < v24) {
                int v36 = 0;
              }
              v30 += v36;
              v31 += v40;
              if (v35 < v24) {
                int v38 = 0;
              }
              v32 += v38;
            }
            while (v27 != v28);
          }
          uint64_t v257 = v22;
          int v262 = 2 * v22;
          uint64_t v264 = (2 * v22 + v255);
          uint64_t v41 = (uint64_t)&(*v17)[4 * v264];
          int8x16_t v42 = (uint64_t *)(v41 + 16);
          if (v29 > (unint64_t)((uint64_t)(*(void *)(v41 + 16) - *(void *)v41) >> 1))
          {
            int8x16_t v43 = (unint64_t *)(v41 + 8);
            uint64_t v44 = *(void *)(v41 + 8) - *(void *)v41;
            uint64_t v260 = 2 * v29;
            uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(v41 + 24) + 16))(*(void *)(v41 + 24));
            unint64_t v46 = v45 + (v44 & 0xFFFFFFFFFFFFFFFELL);
            uint64_t v47 = *(void *)(v41 + 8);
            uint64_t v48 = *(void *)v41;
            unint64_t v49 = v46;
            if (v47 != *(void *)v41)
            {
              unint64_t v50 = *v43 - *(void *)v41 - 2;
              if (v50 < 0x1E)
              {
                unint64_t v49 = v45 + (v44 & 0xFFFFFFFFFFFFFFFELL);
                goto LABEL_32;
              }
              unint64_t v49 = v45 + (v44 & 0xFFFFFFFFFFFFFFFELL);
              if (v47 - v49 < 0x20) {
                goto LABEL_201;
              }
              uint64_t v51 = (v50 >> 1) + 1;
              unint64_t v52 = 2 * (v51 & 0xFFFFFFFFFFFFFFF0);
              uint64_t v53 = v47 - v52;
              unint64_t v49 = v46 - v52;
              unint64_t v54 = (__n128 *)(v45 + 2 * (v44 >> 1) - 16);
              int16x8_t v55 = (__n128 *)(v47 - 16);
              unint64_t v56 = v51 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                __n128 v26 = *v55;
                v54[-1] = v55[-1];
                *unint64_t v54 = v26;
                v54 -= 2;
                v55 -= 2;
                v56 -= 16;
              }
              while (v56);
              uint64_t v47 = v53;
              if (v51 != (v51 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_201:
                do
                {
LABEL_32:
                  __int16 v57 = *(_WORD *)(v47 - 2);
                  v47 -= 2;
                  *(_WORD *)(v49 - 2) = v57;
                  v49 -= 2;
                }
                while (v47 != v48);
              }
            }
            *(void *)uint64_t v41 = v49;
            unint64_t *v43 = v46;
            uint64_t v58 = *v42;
            *int8x16_t v42 = v45 + v260;
            if (v48) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v41 + 24) + 40))(*(void *)(v41 + 24), v48, v58 - v48);
            }
          }
          uint64_t v261 = v264 | 1;
          uint64_t v59 = (uint64_t)&(*v17)[4 * v261];
          unint64_t v60 = v30;
          unint64_t v61 = (uint64_t *)(v59 + 16);
          if (v60 <= (uint64_t)(*(void *)(v59 + 16) - *(void *)v59) >> 1) {
            goto LABEL_46;
          }
          uint64_t v62 = (unint64_t *)(v59 + 8);
          uint64_t v63 = *(void *)(v59 + 8) - *(void *)v59;
          uint64_t v64 = 2 * v60;
          uint64_t v65 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v59 + 24) + 16))(*(void *)(v59 + 24), 2 * v60, 2);
          unint64_t v66 = v65 + (v63 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v67 = *(void *)(v59 + 8);
          uint64_t v68 = *(void *)v59;
          unint64_t v69 = v66;
          if (v67 != *(void *)v59)
          {
            unint64_t v70 = *v62 - *(void *)v59 - 2;
            if (v70 < 0x1E)
            {
              unint64_t v69 = v65 + (v63 & 0xFFFFFFFFFFFFFFFELL);
              do
              {
LABEL_43:
                __int16 v77 = *(_WORD *)(v67 - 2);
                v67 -= 2;
                *(_WORD *)(v69 - 2) = v77;
                v69 -= 2;
              }
              while (v67 != v68);
              goto LABEL_44;
            }
            unint64_t v69 = v65 + (v63 & 0xFFFFFFFFFFFFFFFELL);
            if (v67 - (v63 & 0xFFFFFFFFFFFFFFFELL) - v65 < 0x20) {
              goto LABEL_43;
            }
            uint64_t v71 = (v70 >> 1) + 1;
            unint64_t v72 = 2 * (v71 & 0xFFFFFFFFFFFFFFF0);
            uint64_t v73 = v67 - v72;
            unint64_t v69 = v66 - v72;
            int32x4_t v74 = (__n128 *)(v65 + 2 * (v63 >> 1) - 16);
            int8x16_t v75 = (__n128 *)(v67 - 16);
            unint64_t v76 = v71 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              __n128 v26 = *v75;
              v74[-1] = v75[-1];
              *int32x4_t v74 = v26;
              v74 -= 2;
              v75 -= 2;
              v76 -= 16;
            }
            while (v76);
            uint64_t v67 = v73;
            if (v71 != (v71 & 0xFFFFFFFFFFFFFFF0)) {
              goto LABEL_43;
            }
          }
LABEL_44:
          *(void *)uint64_t v59 = v69;
          *uint64_t v62 = v66;
          uint64_t v78 = *v61;
          uint64_t *v61 = v65 + v64;
          if (v68) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v59 + 24) + 40))(*(void *)(v59 + 24), v68, v78 - v68);
          }
LABEL_46:
          uint64_t v263 = (v262 + v254);
          uint64_t v79 = (uint64_t)&(*v17)[4 * v263];
          unint64_t v80 = v31;
          int8x16_t v81 = (uint64_t *)(v79 + 16);
          if (v80 <= (uint64_t)(*(void *)(v79 + 16) - *(void *)v79) >> 1) {
            goto LABEL_57;
          }
          int8x16_t v82 = (unint64_t *)(v79 + 8);
          uint64_t v83 = *(void *)(v79 + 8) - *(void *)v79;
          uint64_t v84 = 2 * v80;
          uint64_t v85 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v79 + 24) + 16))(*(void *)(v79 + 24), 2 * v80, 2);
          unint64_t v86 = v85 + (v83 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v87 = *(void *)(v79 + 8);
          uint64_t v88 = *(void *)v79;
          unint64_t v89 = v86;
          if (v87 != *(void *)v79)
          {
            unint64_t v90 = *v82 - *(void *)v79 - 2;
            if (v90 < 0x1E)
            {
              unint64_t v89 = v85 + (v83 & 0xFFFFFFFFFFFFFFFELL);
              do
              {
LABEL_54:
                __int16 v97 = *(_WORD *)(v87 - 2);
                v87 -= 2;
                *(_WORD *)(v89 - 2) = v97;
                v89 -= 2;
              }
              while (v87 != v88);
              goto LABEL_55;
            }
            unint64_t v89 = v85 + (v83 & 0xFFFFFFFFFFFFFFFELL);
            if (v87 - (v83 & 0xFFFFFFFFFFFFFFFELL) - v85 < 0x20) {
              goto LABEL_54;
            }
            uint64_t v91 = (v90 >> 1) + 1;
            unint64_t v92 = 2 * (v91 & 0xFFFFFFFFFFFFFFF0);
            uint64_t v93 = v87 - v92;
            unint64_t v89 = v86 - v92;
            uint64_t v94 = (__n128 *)(v85 + 2 * (v83 >> 1) - 16);
            unsigned int v95 = (__n128 *)(v87 - 16);
            unint64_t v96 = v91 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              __n128 v26 = *v95;
              v94[-1] = v95[-1];
              *uint64_t v94 = v26;
              v94 -= 2;
              v95 -= 2;
              v96 -= 16;
            }
            while (v96);
            uint64_t v87 = v93;
            if (v91 != (v91 & 0xFFFFFFFFFFFFFFF0)) {
              goto LABEL_54;
            }
          }
LABEL_55:
          *(void *)uint64_t v79 = v89;
          *int8x16_t v82 = v86;
          uint64_t v98 = *v81;
          *int8x16_t v81 = v85 + v84;
          if (v88) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 24) + 40))(*(void *)(v79 + 24), v88, v98 - v88);
          }
LABEL_57:
          uint64_t v259 = (v263 + 1);
          uint64_t v99 = (uint64_t)&(*v17)[4 * v259];
          unint64_t v100 = v32;
          uint64_t v101 = (uint64_t *)(v99 + 16);
          if (v100 > (uint64_t)(*(void *)(v99 + 16) - *(void *)v99) >> 1)
          {
            unint64_t v102 = (unint64_t *)(v99 + 8);
            uint64_t v103 = *(void *)(v99 + 8) - *(void *)v99;
            uint64_t v104 = 2 * v100;
            uint64_t v105 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v99 + 24) + 16))(*(void *)(v99 + 24), 2 * v100, 2);
            unint64_t v106 = v105 + (v103 & 0xFFFFFFFFFFFFFFFELL);
            uint64_t v107 = *(void *)(v99 + 8);
            uint64_t v108 = *(void *)v99;
            unint64_t v109 = v106;
            if (v107 != *(void *)v99)
            {
              unint64_t v110 = *v102 - *(void *)v99 - 2;
              if (v110 < 0x1E)
              {
                unint64_t v109 = v105 + (v103 & 0xFFFFFFFFFFFFFFFELL);
                goto LABEL_65;
              }
              unint64_t v109 = v105 + (v103 & 0xFFFFFFFFFFFFFFFELL);
              if (v107 - (v103 & 0xFFFFFFFFFFFFFFFELL) - v105 < 0x20) {
                goto LABEL_202;
              }
              uint64_t v111 = (v110 >> 1) + 1;
              unint64_t v112 = 2 * (v111 & 0xFFFFFFFFFFFFFFF0);
              uint64_t v113 = v107 - v112;
              unint64_t v109 = v106 - v112;
              unsigned int v114 = (__n128 *)(v105 + 2 * (v103 >> 1) - 16);
              size_t v115 = (__n128 *)(v107 - 16);
              unint64_t v116 = v111 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                __n128 v26 = *v115;
                v114[-1] = v115[-1];
                *unsigned int v114 = v26;
                v114 -= 2;
                v115 -= 2;
                v116 -= 16;
              }
              while (v116);
              uint64_t v107 = v113;
              if (v111 != (v111 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_202:
                do
                {
LABEL_65:
                  __int16 v117 = *(_WORD *)(v107 - 2);
                  v107 -= 2;
                  *(_WORD *)(v109 - 2) = v117;
                  v109 -= 2;
                }
                while (v107 != v108);
              }
            }
            *(void *)uint64_t v99 = v109;
            *unint64_t v102 = v106;
            uint64_t v118 = *v101;
            *uint64_t v101 = v105 + v104;
            if (v108) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v99 + 24) + 40))(*(void *)(v99 + 24), v108, v118 - v108);
            }
          }
          unsigned int v120 = *v258;
          uint64_t v119 = v258[1];
          while (v120 != v119)
          {
            uint64_t v122 = *v120;
            uint64_t v123 = (float *)(*v19 + 16 * v122);
            float v124 = v123[2];
            float v125 = *v123;
            float v126 = v123[1];
            if ((float)(1.0 - v123[3]) >= v23) {
              goto LABEL_130;
            }
            if (v125 < v24)
            {
              unint64_t v127 = &(*v17)[4 * v264];
              unint64_t v129 = v127 + 1;
              uint64_t v128 = v127[1];
              int8x8_t v131 = (uint64_t *)(v127 + 2);
              unint64_t v130 = (unint64_t)v127[2];
              if ((unint64_t)v128 < v130)
              {
                if (v128) {
                  v128->i16[0] = v122;
                }
                uint64_t v132 = (int16x8_t *)&v128->i16[1];
LABEL_101:
                int8x8_t *v129 = v132;
                goto LABEL_102;
              }
              uint64_t v133 = (char *)v128 - (char *)*v127;
              if (v133 <= -3) {
                goto LABEL_198;
              }
              uint64_t v134 = v127 + 3;
              uint64_t v135 = v133 >> 1;
              unint64_t v136 = v130 - (void)*v127;
              if (v136 <= (v133 >> 1) + 1) {
                uint64_t v137 = v135 + 1;
              }
              else {
                uint64_t v137 = v136;
              }
              if (v136 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v137 = 0x7FFFFFFFFFFFFFFFLL;
              }
              if (v137)
              {
                uint64_t v138 = 2 * v137;
                uint64_t v139 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v134 + 16))(*v134, 2 * v137, 2);
                __int16 v140 = (_WORD *)(v139 + 2 * v135);
                uint64_t v137 = v139 + v138;
                if (v139) {
                  *__int16 v140 = v122;
                }
                unint64_t v19 = v265;
                unsigned int v141 = *v129;
                float v142 = *v127;
                unint64_t v143 = (int16x8_t *)v140;
                uint64_t v144 = (char *)*v129 - (char *)*v127;
                if (*v129 == *v127) {
                  goto LABEL_99;
                }
LABEL_91:
                unint64_t v145 = v144 - 2;
                if (v145 < 0x1E)
                {
                  unint64_t v143 = (int16x8_t *)v140;
                }
                else
                {
                  unint64_t v143 = (int16x8_t *)v140;
                  if ((unint64_t)((char *)v141 - (char *)v140) >= 0x20)
                  {
                    uint64_t v146 = (v145 >> 1) + 1;
                    unint64_t v147 = 2 * (v146 & 0xFFFFFFFFFFFFFFF0);
                    unint64_t v148 = (int16x8_t *)((char *)v141 - v147);
                    unint64_t v143 = (int16x8_t *)&v140[v147 / 0xFFFFFFFFFFFFFFFELL];
                    uint64_t v149 = (__n128 *)(v140 - 8);
                    unint64_t v150 = (__n128 *)&v141[-1];
                    unint64_t v151 = v146 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      __n128 v26 = *v150;
                      v149[-1] = v150[-1];
                      *uint64_t v149 = v26;
                      v149 -= 2;
                      v150 -= 2;
                      v151 -= 16;
                    }
                    while (v151);
                    unsigned int v141 = v148;
                    if (v146 == (v146 & 0xFFFFFFFFFFFFFFF0)) {
                      goto LABEL_99;
                    }
                  }
                }
                do
                {
                  __int16 v152 = v141[-1].i16[7];
                  unsigned int v141 = (int16x8_t *)((char *)v141 - 2);
                  v143[-1].i16[7] = v152;
                  unint64_t v143 = (int16x8_t *)((char *)v143 - 2);
                }
                while (v141 != v142);
                goto LABEL_99;
              }
              __int16 v140 = (_WORD *)(2 * v135);
              unint64_t v19 = v265;
              unsigned int v141 = *v129;
              float v142 = *v127;
              unint64_t v143 = (int16x8_t *)v140;
              uint64_t v144 = (char *)*v129 - (char *)*v127;
              if (*v129 != *v127) {
                goto LABEL_91;
              }
LABEL_99:
              uint64_t v132 = (int16x8_t *)(v140 + 1);
              *unint64_t v127 = v143;
              int8x8_t *v129 = (int16x8_t *)(v140 + 1);
              uint64_t v153 = *v131;
              *int8x8_t v131 = v137;
              if (v142) {
                (*(void (**)(void, int16x8_t *, uint64_t))(*(void *)*v134 + 40))(*v134, v142, v153 - (void)v142);
              }
              goto LABEL_101;
            }
LABEL_102:
            if (v124 < v24) {
              goto LABEL_130;
            }
            id v154 = &(*v17)[4 * v261];
            long long v156 = v154 + 1;
            uint64_t v155 = v154[1];
            int8x16_t v158 = (uint64_t *)(v154 + 2);
            unint64_t v157 = (unint64_t)v154[2];
            if ((unint64_t)v155 >= v157)
            {
              uint64_t v160 = (char *)v155 - (char *)*v154;
              if (v160 <= -3) {
                goto LABEL_198;
              }
              std::string::size_type v161 = v154 + 3;
              uint64_t v162 = v160 >> 1;
              unint64_t v163 = v157 - (void)*v154;
              if (v163 <= (v160 >> 1) + 1) {
                uint64_t v164 = v162 + 1;
              }
              else {
                uint64_t v164 = v163;
              }
              if (v163 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v164 = 0x7FFFFFFFFFFFFFFFLL;
              }
              if (v164)
              {
                uint64_t v165 = 2 * v164;
                uint64_t v166 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v161 + 16))(*v161, 2 * v164, 2);
                int16x8_t v167 = (_WORD *)(v166 + 2 * v162);
                uint64_t v164 = v166 + v165;
                if (v166) {
                  *int16x8_t v167 = v122;
                }
                unint64_t v19 = v265;
                int v168 = *v156;
                std::string::size_type v169 = *v154;
                uint64_t v170 = (int16x8_t *)v167;
                uint64_t v171 = (char *)*v156 - (char *)*v154;
                if (*v156 == *v154) {
                  goto LABEL_127;
                }
LABEL_119:
                unint64_t v172 = v171 - 2;
                if (v172 < 0x1E)
                {
                  uint64_t v170 = (int16x8_t *)v167;
                }
                else
                {
                  uint64_t v170 = (int16x8_t *)v167;
                  if ((unint64_t)((char *)v168 - (char *)v167) >= 0x20)
                  {
                    uint64_t v173 = (v172 >> 1) + 1;
                    unint64_t v174 = 2 * (v173 & 0xFFFFFFFFFFFFFFF0);
                    char v175 = (int16x8_t *)((char *)v168 - v174);
                    uint64_t v170 = (int16x8_t *)&v167[v174 / 0xFFFFFFFFFFFFFFFELL];
                    int8x16_t v176 = (__n128 *)(v167 - 8);
                    uint64_t v177 = (__n128 *)&v168[-1];
                    unint64_t v178 = v173 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      __n128 v26 = *v177;
                      v176[-1] = v177[-1];
                      *int8x16_t v176 = v26;
                      v176 -= 2;
                      v177 -= 2;
                      v178 -= 16;
                    }
                    while (v178);
                    int v168 = v175;
                    if (v173 == (v173 & 0xFFFFFFFFFFFFFFF0)) {
                      goto LABEL_127;
                    }
                  }
                }
                do
                {
                  __int16 v179 = v168[-1].i16[7];
                  int v168 = (int16x8_t *)((char *)v168 - 2);
                  v170[-1].i16[7] = v179;
                  uint64_t v170 = (int16x8_t *)((char *)v170 - 2);
                }
                while (v168 != v169);
                goto LABEL_127;
              }
              int16x8_t v167 = (_WORD *)(2 * v162);
              unint64_t v19 = v265;
              int v168 = *v156;
              std::string::size_type v169 = *v154;
              uint64_t v170 = (int16x8_t *)v167;
              uint64_t v171 = (char *)*v156 - (char *)*v154;
              if (*v156 != *v154) {
                goto LABEL_119;
              }
LABEL_127:
              uint64_t v159 = (int16x8_t *)(v167 + 1);
              *id v154 = v170;
              *long long v156 = (int16x8_t *)(v167 + 1);
              uint64_t v180 = *v158;
              *int8x16_t v158 = v164;
              if (v169) {
                (*(void (**)(void, int16x8_t *, uint64_t))(*(void *)*v161 + 40))(*v161, v169, v180 - (void)v169);
              }
              goto LABEL_129;
            }
            if (v155) {
              v155->i16[0] = v122;
            }
            uint64_t v159 = (int16x8_t *)&v155->i16[1];
LABEL_129:
            *long long v156 = v159;
LABEL_130:
            v26.n128_f32[0] = 1.0 - v126;
            if ((float)(1.0 - v126) < v23) {
              goto LABEL_71;
            }
            if (v125 < v24)
            {
              unint64_t v181 = &(*v17)[4 * v263];
              uint64_t v183 = v181 + 1;
              long long v182 = v181[1];
              BOOL v185 = (uint64_t *)(v181 + 2);
              unint64_t v184 = (unint64_t)v181[2];
              if ((unint64_t)v182 < v184)
              {
                if (v182) {
                  v182->i16[0] = v122;
                }
                int8x16_t v186 = (int16x8_t *)&v182->i16[1];
LABEL_158:
                *uint64_t v183 = v186;
                goto LABEL_159;
              }
              uint64_t v187 = (char *)v182 - (char *)*v181;
              if (v187 <= -3) {
                goto LABEL_198;
              }
              int32x4_t v188 = v181 + 3;
              uint64_t v189 = v187 >> 1;
              unint64_t v190 = v184 - (void)*v181;
              if (v190 <= (v187 >> 1) + 1) {
                uint64_t v191 = v189 + 1;
              }
              else {
                uint64_t v191 = v190;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v191 = 0x7FFFFFFFFFFFFFFFLL;
              }
              if (v191)
              {
                uint64_t v192 = 2 * v191;
                uint64_t v193 = (*(uint64_t (**)(void, uint64_t, uint64_t, __n128))(*(void *)*v188 + 16))(*v188, 2 * v191, 2, v26);
                unint64_t v194 = (_WORD *)(v193 + 2 * v189);
                uint64_t v191 = v193 + v192;
                if (v193) {
                  *unint64_t v194 = v122;
                }
                unint64_t v19 = v265;
                uint64_t v195 = *v183;
                uint64_t v196 = *v181;
                uint64_t v197 = (int16x8_t *)v194;
                uint64_t v198 = (char *)*v183 - (char *)*v181;
                if (*v183 == *v181) {
                  goto LABEL_156;
                }
LABEL_148:
                unint64_t v199 = v198 - 2;
                if (v199 < 0x1E)
                {
                  uint64_t v197 = (int16x8_t *)v194;
                }
                else
                {
                  uint64_t v197 = (int16x8_t *)v194;
                  if ((unint64_t)((char *)v195 - (char *)v194) >= 0x20)
                  {
                    uint64_t v200 = (v199 >> 1) + 1;
                    unint64_t v201 = 2 * (v200 & 0xFFFFFFFFFFFFFFF0);
                    int8x16_t v202 = (int16x8_t *)((char *)v195 - v201);
                    uint64_t v197 = (int16x8_t *)&v194[v201 / 0xFFFFFFFFFFFFFFFELL];
                    int32x4_t v203 = (__n128 *)(v194 - 8);
                    unint64_t v204 = (__n128 *)&v195[-1];
                    unint64_t v205 = v200 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      __n128 v26 = *v204;
                      v203[-1] = v204[-1];
                      __n128 *v203 = v26;
                      v203 -= 2;
                      v204 -= 2;
                      v205 -= 16;
                    }
                    while (v205);
                    uint64_t v195 = v202;
                    if (v200 == (v200 & 0xFFFFFFFFFFFFFFF0)) {
                      goto LABEL_156;
                    }
                  }
                }
                do
                {
                  __int16 v206 = v195[-1].i16[7];
                  uint64_t v195 = (int16x8_t *)((char *)v195 - 2);
                  v197[-1].i16[7] = v206;
                  uint64_t v197 = (int16x8_t *)((char *)v197 - 2);
                }
                while (v195 != v196);
                goto LABEL_156;
              }
              unint64_t v194 = (_WORD *)(2 * v189);
              unint64_t v19 = v265;
              uint64_t v195 = *v183;
              uint64_t v196 = *v181;
              uint64_t v197 = (int16x8_t *)v194;
              uint64_t v198 = (char *)*v183 - (char *)*v181;
              if (*v183 != *v181) {
                goto LABEL_148;
              }
LABEL_156:
              int8x16_t v186 = (int16x8_t *)(v194 + 1);
              *unint64_t v181 = v197;
              *uint64_t v183 = (int16x8_t *)(v194 + 1);
              uint64_t v207 = *v185;
              uint64_t *v185 = v191;
              if (v196) {
                (*(void (**)(void, int16x8_t *, uint64_t))(*(void *)*v188 + 40))(*v188, v196, v207 - (void)v196);
              }
              goto LABEL_158;
            }
LABEL_159:
            if (v124 >= v24)
            {
              std::string::value_type v208 = &(*v17)[4 * v259];
              int8x16_t v210 = v208 + 1;
              uint64_t v209 = v208[1];
              long long v212 = (uint64_t *)(v208 + 2);
              unint64_t v211 = (unint64_t)v208[2];
              if ((unint64_t)v209 < v211)
              {
                if (v209) {
                  v209->i16[0] = v122;
                }
                float v121 = (int16x8_t *)&v209->i16[1];
LABEL_70:
                *int8x16_t v210 = v121;
                goto LABEL_71;
              }
              uint64_t v213 = (char *)v209 - (char *)*v208;
              if (v213 <= -3) {
LABEL_198:
              }
                std::vector<double>::__throw_length_error[abi:ne180100]();
              unint64_t v214 = v208 + 3;
              uint64_t v215 = v213 >> 1;
              unint64_t v216 = v211 - (void)*v208;
              if (v216 <= (v213 >> 1) + 1) {
                uint64_t v217 = v215 + 1;
              }
              else {
                uint64_t v217 = v216;
              }
              if (v216 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v217 = 0x7FFFFFFFFFFFFFFFLL;
              }
              if (v217)
              {
                uint64_t v218 = 2 * v217;
                uint64_t v219 = (*(uint64_t (**)(void, uint64_t, uint64_t, __n128))(*(void *)*v214 + 16))(*v214, 2 * v217, 2, v26);
                BOOL v220 = (_WORD *)(v219 + 2 * v215);
                uint64_t v217 = v219 + v218;
                if (v219) {
                  _WORD *v220 = v122;
                }
                unint64_t v19 = v265;
                unsigned int v221 = *v210;
                long long v222 = *v208;
                std::string::size_type v223 = (int16x8_t *)v220;
                uint64_t v224 = (char *)*v210 - (char *)*v208;
                if (*v210 == *v208) {
                  goto LABEL_183;
                }
LABEL_175:
                unint64_t v225 = v224 - 2;
                if (v225 < 0x1E)
                {
                  std::string::size_type v223 = (int16x8_t *)v220;
                }
                else
                {
                  std::string::size_type v223 = (int16x8_t *)v220;
                  if ((unint64_t)((char *)v221 - (char *)v220) >= 0x20)
                  {
                    uint64_t v226 = (v225 >> 1) + 1;
                    unint64_t v227 = 2 * (v226 & 0xFFFFFFFFFFFFFFF0);
                    uint64_t v228 = (int16x8_t *)((char *)v221 - v227);
                    std::string::size_type v223 = (int16x8_t *)&v220[v227 / 0xFFFFFFFFFFFFFFFELL];
                    uint64_t v229 = (__n128 *)(v220 - 8);
                    uint64_t v230 = (__n128 *)&v221[-1];
                    unint64_t v231 = v226 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      __n128 v26 = *v230;
                      v229[-1] = v230[-1];
                      __n128 *v229 = v26;
                      v229 -= 2;
                      v230 -= 2;
                      v231 -= 16;
                    }
                    while (v231);
                    unsigned int v221 = v228;
                    if (v226 == (v226 & 0xFFFFFFFFFFFFFFF0)) {
                      goto LABEL_183;
                    }
                  }
                }
                do
                {
                  __int16 v232 = v221[-1].i16[7];
                  unsigned int v221 = (int16x8_t *)((char *)v221 - 2);
                  v223[-1].i16[7] = v232;
                  std::string::size_type v223 = (int16x8_t *)((char *)v223 - 2);
                }
                while (v221 != v222);
                goto LABEL_183;
              }
              BOOL v220 = (_WORD *)(2 * v215);
              unint64_t v19 = v265;
              unsigned int v221 = *v210;
              long long v222 = *v208;
              std::string::size_type v223 = (int16x8_t *)v220;
              uint64_t v224 = (char *)*v210 - (char *)*v208;
              if (*v210 != *v208) {
                goto LABEL_175;
              }
LABEL_183:
              float v121 = (int16x8_t *)(v220 + 1);
              *std::string::value_type v208 = v223;
              *int8x16_t v210 = (int16x8_t *)(v220 + 1);
              uint64_t v233 = *v212;
              *long long v212 = v217;
              if (v222) {
                (*(void (**)(void, int16x8_t *, uint64_t))(*(void *)*v214 + 40))(*v214, v222, v233 - (void)v222);
              }
              goto LABEL_70;
            }
LABEL_71:
            ++v120;
          }
          uint64_t v22 = v257 + 1;
          float32x4_t v14 = v251;
          unsigned int v20 = v253;
        }
        while (v257 + 1 != v256);
        unsigned int v20 = v253 + 1;
        LOBYTE(v11) = v250;
        if (v253 + 1 == v256)
        {
          int64_t v16 = *v17;
          a3 = v248;
          a2 = v249;
          return &v16[4 * ((a3 << v11) + a2)];
        }
      }
    }
    int64_t v16 = *v17;
    unint64_t v234 = (unsigned __int16)(-13107 * ((*((_DWORD *)v14 + 582) - *((_DWORD *)v14 + 580)) >> 3));
    uint64_t v236 = **v17;
    uint64_t v235 = (*v17)[1];
    unint64_t v237 = ((char *)v235 - (char *)v236) >> 1;
    if (v234 <= v237)
    {
      if (v234 < v237)
      {
        uint64_t v235 = (int16x8_t *)((char *)v236 + 2 * v234);
        v16[1] = v235;
      }
    }
    else
    {
      std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__append((uint64_t)v16, v234 - v237);
      int64_t v16 = *v17;
      uint64_t v236 = **v17;
      uint64_t v235 = (*v17)[1];
    }
    if (v236 != v235)
    {
      unint64_t v238 = (char *)v235 - (char *)v236 - 2;
      if (v238 < 0x1E)
      {
        LODWORD(v239) = 0;
        id v240 = v236;
        do
        {
LABEL_196:
          v240->i16[0] = v239;
          id v240 = (int16x8_t *)((char *)v240 + 2);
          LODWORD(v239) = v239 + 1;
        }
        while (v240 != v235);
        return &v16[4 * ((a3 << v11) + a2)];
      }
      uint64_t v241 = (v238 >> 1) + 1;
      unint64_t v239 = v241 & 0xFFFFFFFFFFFFFFF0;
      id v240 = (int16x8_t *)((char *)v236 + 2 * (v241 & 0xFFFFFFFFFFFFFFF0));
      int16x8_t v242 = (int16x8_t)xmmword_1A28FD560;
      id v243 = v236 + 1;
      v244.i64[0] = 0x8000800080008;
      v244.i64[1] = 0x8000800080008;
      v245.i64[0] = 0x10001000100010;
      v245.i64[1] = 0x10001000100010;
      unint64_t v246 = v241 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v243[-1] = v242;
        *id v243 = vaddq_s16(v242, v244);
        int16x8_t v242 = vaddq_s16(v242, v245);
        v243 += 2;
        v246 -= 16;
      }
      while (v246);
      if (v241 != v239) {
        goto LABEL_196;
      }
    }
  }
  return &v16[4 * ((a3 << v11) + a2)];
}

uint64_t std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  size_t v5 = *(void **)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 5)
  {
    if (a2)
    {
      uint64_t v10 = 32 * a2;
      unsigned int v11 = &v5[4 * a2];
      do
      {
        if (v5)
        {
          void *v5 = 0;
          v5[1] = 0;
          _DWORD v5[2] = 0;
          uint64_t result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
          void v5[3] = result;
        }
        v5 += 4;
        v10 -= 32;
      }
      while (v10);
      size_t v5 = v11;
    }
    *(void *)(v3 + 8) = v5;
  }
  else
  {
    uint64_t v6 = ((uint64_t)v5 - *(void *)result) >> 5;
    if ((v6 + a2) >> 59) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = v4 - *(void *)result;
    uint64_t v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2) {
      uint64_t v8 = v6 + a2;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v9) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 32 * v9, 8);
    }
    else {
      uint64_t result = 0;
    }
    double v12 = (void *)(result + 32 * v6);
    uint64_t v13 = result + 32 * v9;
    uint64_t v14 = 4 * a2;
    float32x4_t v15 = &v12[v14];
    int64_t v16 = v12;
    do
    {
      if (v16)
      {
        *int64_t v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        uint64_t result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        v16[3] = result;
      }
      v16 += 4;
      v14 -= 4;
    }
    while (v14 * 8);
    uint64_t v17 = *(void *)v3;
    uint64_t v18 = *(void *)(v3 + 8);
    if (v18 == *(void *)v3)
    {
      *(void *)uint64_t v3 = v12;
      *(void *)(v3 + 8) = v15;
      uint64_t v23 = *(void *)(v3 + 16);
      *(void *)(v3 + 16) = v13;
    }
    else
    {
      unint64_t v19 = 0;
      do
      {
        unsigned int v20 = &v12[v19 / 8];
        uint64_t v21 = v18 + v19;
        *(v20 - 4) = 0;
        *(v20 - 3) = 0;
        *(v20 - 2) = 0;
        *(v20 - 1) = *(void *)(v18 + v19 - 8);
        *((_OWORD *)v20 - 2) = *(_OWORD *)(v18 + v19 - 32);
        *(v20 - 2) = *(void *)(v18 + v19 - 16);
        *(void *)(v21 - 32) = 0;
        *(void *)(v21 - 24) = 0;
        *(void *)(v21 - 16) = 0;
        v19 -= 32;
      }
      while (v18 + v19 != v17);
      uint64_t v18 = *(void *)v3;
      uint64_t v22 = *(void *)(v3 + 8);
      *(void *)uint64_t v3 = &v12[v19 / 8];
      *(void *)(v3 + 8) = v15;
      uint64_t v23 = *(void *)(v3 + 16);
      *(void *)(v3 + 16) = v13;
      if (v22 != v18)
      {
        uint64_t v24 = v22;
        do
        {
          uint64_t v26 = *(void *)(v24 - 32);
          v24 -= 32;
          uint64_t v25 = v26;
          if (v26)
          {
            *(void *)(v22 - 24) = v25;
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v22 - 8) + 40))(*(void *)(v22 - 8), v25, *(void *)(v22 - 16) - v25);
          }
          uint64_t v22 = v24;
        }
        while (v24 != v18);
      }
    }
    if (v18) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v18, v23 - v18);
    }
  }
  return result;
}

uint64_t ggl::ShaderLibrary::ShaderLibrary(uint64_t a1, void *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B278;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = &qword_1EB32C000;
  {
    operator new();
  }
  uint64_t v7 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 80) = 0;
  uint64_t v8 = (void *)(a1 + 80);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  {
    operator new();
  }
  uint64_t v9 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  __int16 v152 = (uint64_t *)(a1 + 112);
  {
    operator new();
  }
  uint64_t v10 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = v10;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v153 = (uint64_t *)(a1 + 144);
  {
    operator new();
  }
  uint64_t v11 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = v11;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  {
    operator new();
  }
  uint64_t v13 = *a3;
  uint64_t v12 = a3[1];
  *(void *)(a1 + 200) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 208) = v13;
  *(void *)(a1 + 216) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = a2;
  unint64_t v14 = a2[3];
  uint64_t v15 = *(void *)(a1 + 48);
  int64_t v16 = *(void **)(a1 + 56);
  unint64_t v17 = ((uint64_t)v16 - v15) >> 4;
  unint64_t v18 = v14 - v17;
  if (v14 <= v17)
  {
    if (v14 < v17)
    {
      uint64_t v28 = (void *)(v15 + 16 * v14);
      while (v16 != v28)
      {
        uint64_t v29 = *(v16 - 1);
        *(v16 - 1) = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
        v16 -= 2;
      }
      *(void *)(a1 + 56) = v28;
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 64);
    if (v18 <= (v19 - (uint64_t)v16) >> 4)
    {
      unsigned int v30 = &v16[2 * v18];
      uint64_t v31 = 16 * v14 - 16 * v17;
      do
      {
        if (v16)
        {
          *int64_t v16 = 0;
          v16[1] = 0;
        }
        v16 += 2;
        v31 -= 16;
      }
      while (v31);
      *(void *)(a1 + 56) = v30;
    }
    else
    {
      if (v14 >> 60) {
        goto LABEL_194;
      }
      uint64_t v20 = v19 - v15;
      uint64_t v21 = v20 >> 3;
      if (v20 >> 3 <= v14) {
        uint64_t v21 = a2[3];
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
        uint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v22 = v21;
      }
      uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), 16 * v22, 8);
      uint64_t v24 = (void *)(v23 + 16 * v17);
      unint64_t v25 = v23 + 16 * v14;
      uint64_t v26 = 16 * v14 - 16 * v17;
      int8x16_t v27 = v24;
      do
      {
        if (v27)
        {
          *int8x16_t v27 = 0;
          v27[1] = 0;
        }
        v27 += 2;
        v26 -= 16;
      }
      while (v26);
      uint64_t v32 = v23 + 16 * v22;
      uint64_t v33 = *(void *)(a1 + 48);
      uint64_t v34 = *(void *)(a1 + 56);
      if (v34 == v33)
      {
        *(void *)(a1 + 48) = v24;
        *(void *)(a1 + 56) = v25;
        uint64_t v38 = *(void *)(a1 + 64);
        *(void *)(a1 + 64) = v32;
      }
      else
      {
        do
        {
          int v35 = *(_DWORD *)(v34 - 16);
          v34 -= 16;
          *((_DWORD *)v24 - 4) = v35;
          v24 -= 2;
          uint64_t v36 = *(void *)(v34 + 8);
          *(void *)(v34 + 8) = 0;
          v24[1] = v36;
        }
        while (v34 != v33);
        uint64_t v34 = *(void *)(a1 + 48);
        uint64_t v37 = *(void *)(a1 + 56);
        *(void *)(a1 + 48) = v24;
        *(void *)(a1 + 56) = v25;
        uint64_t v38 = *(void *)(a1 + 64);
        *(void *)(a1 + 64) = v32;
        while (v37 != v34)
        {
          uint64_t v39 = *(void *)(v37 - 8);
          *(void *)(v37 - 8) = 0;
          if (v39) {
            (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
          }
          v37 -= 16;
        }
      }
      if (v34) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), v34, v38 - v34);
      }
    }
  }
  unint64_t v40 = a2[5];
  uint64_t v41 = *(void *)(a1 + 80);
  int8x16_t v42 = *(void **)(a1 + 88);
  unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v42 - v41) >> 3);
  unint64_t v44 = v40 - v43;
  if (v40 <= v43)
  {
    if (v40 < v43)
    {
      for (uint64_t i = (void *)(v41 + 24 * v40); v42 != i; v42 -= 3)
      {
        int16x8_t v55 = (std::__shared_weak_count *)*(v42 - 1);
        if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      *(void *)(a1 + 88) = i;
    }
  }
  else
  {
    uint64_t v45 = *(void *)(a1 + 96);
    if (0xAAAAAAAAAAAAAAABLL * ((v45 - (uint64_t)v42) >> 3) >= v44)
    {
      unint64_t v56 = &v42[3 * v44];
      uint64_t v57 = 24 * v40 - 24 * v43;
      do
      {
        if (v42)
        {
          *int8x16_t v42 = 0;
          v42[1] = 0;
          v42[2] = 0;
        }
        v42 += 3;
        v57 -= 24;
      }
      while (v57);
      *(void *)(a1 + 88) = v56;
    }
    else
    {
      if (v40 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_194;
      }
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((v45 - v41) >> 3);
      uint64_t v47 = 2 * v46;
      if (2 * v46 <= v40) {
        uint64_t v47 = a2[5];
      }
      if (v46 >= 0x555555555555555) {
        uint64_t v48 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        uint64_t v48 = v47;
      }
      uint64_t v49 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104), 24 * v48, 8);
      unint64_t v50 = v49 + 24 * v43;
      unint64_t v51 = v49 + 24 * v40;
      uint64_t v52 = 24 * v40 - 24 * v43;
      uint64_t v53 = (void *)v50;
      do
      {
        if (v53)
        {
          *uint64_t v53 = 0;
          v53[1] = 0;
          v53[2] = 0;
        }
        v53 += 3;
        v52 -= 24;
      }
      while (v52);
      uint64_t v58 = v49 + 24 * v48;
      uint64_t v59 = *(void *)(a1 + 80);
      uint64_t v60 = *(void *)(a1 + 88);
      if (v60 == v59)
      {
        *(void *)(a1 + 80) = v50;
        *(void *)(a1 + 88) = v51;
        uint64_t v63 = *(void *)(a1 + 96);
        *(void *)(a1 + 96) = v58;
        if (v60) {
LABEL_77:
        }
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), v60, v63 - v60);
      }
      else
      {
        do
        {
          uint64_t v61 = *(void *)(v60 - 24);
          v60 -= 24;
          *(void *)(v50 - 24) = v61;
          v50 -= 24;
          *(_OWORD *)(v50 + 8) = *(_OWORD *)(v60 + 8);
          *(void *)(v60 + 8) = 0;
          *(void *)(v60 + 16) = 0;
        }
        while (v60 != v59);
        uint64_t v60 = *(void *)(a1 + 80);
        uint64_t v62 = *(void *)(a1 + 88);
        *(void *)(a1 + 80) = v50;
        *(void *)(a1 + 88) = v51;
        uint64_t v63 = *(void *)(a1 + 96);
        *(void *)(a1 + 96) = v58;
        if (v62 != v60)
        {
          do
          {
            uint64_t v64 = *(std::__shared_weak_count **)(v62 - 8);
            if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
            v62 -= 24;
          }
          while (v62 != v60);
          uint64_t v6 = &qword_1EB32C000;
        }
        if (v60) {
          goto LABEL_77;
        }
      }
    }
  }
  unint64_t v65 = a2[5];
  uint64_t v66 = *(void *)(a1 + 176);
  uint64_t v67 = *(void **)(a1 + 184);
  unint64_t v68 = ((uint64_t)v67 - v66) >> 4;
  unint64_t v69 = v65 - v68;
  if (v65 <= v68)
  {
    if (v65 < v68)
    {
      for (uint64_t j = (void *)(v66 + 16 * v65); v67 != j; v67 -= 2)
      {
        unint64_t v80 = (std::__shared_weak_count *)*(v67 - 1);
        if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      *(void *)(a1 + 184) = j;
    }
    goto LABEL_114;
  }
  uint64_t v70 = *(void *)(a1 + 192);
  if (v69 <= (v70 - (uint64_t)v67) >> 4)
  {
    int8x16_t v81 = &v67[2 * v69];
    uint64_t v82 = 16 * v65 - 16 * v68;
    do
    {
      if (v67)
      {
        *uint64_t v67 = 0;
        v67[1] = 0;
      }
      v67 += 2;
      v82 -= 16;
    }
    while (v82);
    *(void *)(a1 + 184) = v81;
    goto LABEL_114;
  }
  if (v65 >> 60) {
LABEL_194:
  }
    abort();
  uint64_t v71 = v70 - v66;
  uint64_t v72 = v71 >> 3;
  if (v71 >> 3 <= v65) {
    uint64_t v72 = a2[5];
  }
  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
    uint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v73 = v72;
  }
  uint64_t v74 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 200) + 16))(*(void *)(a1 + 200), 16 * v73, 8);
  int8x16_t v75 = (void *)(v74 + 16 * v68);
  unint64_t v76 = v74 + 16 * v65;
  uint64_t v77 = 16 * v65 - 16 * v68;
  uint64_t v78 = v75;
  do
  {
    if (v78)
    {
      void *v78 = 0;
      v78[1] = 0;
    }
    v78 += 2;
    v77 -= 16;
  }
  while (v77);
  uint64_t v83 = v74 + 16 * v73;
  uint64_t v84 = *(void **)(a1 + 176);
  uint64_t v85 = *(void **)(a1 + 184);
  if (v85 == v84)
  {
    *(void *)(a1 + 176) = v75;
    *(void *)(a1 + 184) = v76;
    uint64_t v88 = *(void *)(a1 + 192);
    *(void *)(a1 + 192) = v83;
    if (v85) {
LABEL_113:
    }
      (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 200) + 40))(*(void *)(a1 + 200), v85, v88 - (void)v85);
  }
  else
  {
    do
    {
      long long v86 = *((_OWORD *)v85 - 1);
      v85 -= 2;
      *((_OWORD *)v75 - 1) = v86;
      v75 -= 2;
      *uint64_t v85 = 0;
      v85[1] = 0;
    }
    while (v85 != v84);
    uint64_t v85 = *(void **)(a1 + 176);
    uint64_t v87 = *(void **)(a1 + 184);
    *(void *)(a1 + 176) = v75;
    *(void *)(a1 + 184) = v76;
    uint64_t v88 = *(void *)(a1 + 192);
    *(void *)(a1 + 192) = v83;
    if (v87 != v85)
    {
      do
      {
        unint64_t v89 = (std::__shared_weak_count *)*(v87 - 1);
        if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
        v87 -= 2;
      }
      while (v87 != v85);
      uint64_t v6 = &qword_1EB32C000;
    }
    if (v85) {
      goto LABEL_113;
    }
  }
LABEL_114:
  unint64_t v90 = a2[7];
  uint64_t v91 = *(void *)(a1 + 112);
  unint64_t v92 = (*(void *)(a1 + 120) - v91) >> 4;
  if (v90 <= v92)
  {
    if (v90 < v92) {
      *(void *)(a1 + 120) = v91 + 16 * v90;
    }
  }
  else
  {
    std::vector<geo::Mercator2<double>,geo::StdAllocator<geo::Mercator2<double>,mdm::Allocator>>::__append((uint64_t)v152, v90 - v92);
  }
  unint64_t v93 = a2[9];
  uint64_t v94 = *(void *)(a1 + 144);
  unint64_t v95 = (*(void *)(a1 + 152) - v94) >> 4;
  if (v93 <= v95)
  {
    if (v93 < v95) {
      *(void *)(a1 + 152) = v94 + 16 * v93;
    }
  }
  else
  {
    std::vector<geo::Mercator2<double>,geo::StdAllocator<geo::Mercator2<double>,mdm::Allocator>>::__append((uint64_t)v153, v93 - v95);
  }
  if (a2[3])
  {
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    do
    {
      uint64_t v98 = *(_DWORD **)(a2[2] + 8 * v97);
      if (v98) {
        LODWORD(v98) = *v98;
      }
      uint64_t v99 = *(void *)(a1 + 48) + v96;
      *(_DWORD *)uint64_t v99 = v98;
      {
        operator new();
      }
      uint64_t v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[287] + 16))(v6[287], 56, 8);
      uint64_t v101 = *(void *)(a2[2] + 8 * v97);
      *(void *)(v100 + 16) = 0;
      *(void *)(v100 + 24) = 0;
      *(_DWORD *)(v100 + 32) = 0;
      *(void *)uint64_t v100 = &unk_1EF55B8C0;
      *(void *)(v100 + 8) = 0;
      *(void *)(v100 + 40) = v101;
      *(void *)(v100 + 48) = a1;
      uint64_t v102 = *(void *)(v99 + 8);
      *(void *)(v99 + 8) = v100;
      if (v102) {
        (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
      }
      ++v97;
      v96 += 16;
    }
    while (v97 != a2[3]);
  }
  if (a2[5])
  {
    uint64_t v103 = 0;
    do
    {
      uint64_t v104 = *(void *)(a2[4] + 8 * v103);
      if (v104)
      {
        int v105 = **(_DWORD **)(v104 + 8);
        unint64_t v106 = (_DWORD *)(*v8 + 24 * v103);
        int v107 = **(_DWORD **)(v104 + 24);
        *unint64_t v106 = v105;
        v106[1] = v107;
        {
          operator new();
        }
        uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[287] + 16))(v6[287], 96, 8);
        unint64_t v109 = *(uint64_t **)(a2[4] + 8 * v103);
        uint64_t v110 = *v109;
        *(_DWORD *)(v108 + 48) = 0;
        *(void *)(v108 + 32) = 0;
        *(void *)(v108 + 40) = 0;
        *(void *)uint64_t v108 = &unk_1EF560CD8;
        *(void *)(v108 + 8) = v110;
        *(void *)(v108 + 16) = &unk_1EF560CF8;
        *(void *)(v108 + 24) = 0;
        *(void *)(v108 + 56) = 0;
        *(void *)(v108 + 64) = 0;
        *(void *)(v108 + 72) = v109;
        *(void *)(v108 + 80) = 0;
        uint64_t v111 = (void *)(v108 + 80);
        *(void *)(v108 + 88) = 0;
        uint64_t v112 = *((unsigned int *)v109 + 4);
        uint64_t v113 = *((unsigned int *)v109 + 8);
        *(void *)(v108 + 56) = a1;
        *(void *)(v108 + 64) = v112 | (v113 << 32);
        uint64_t v114 = *(void *)(a1 + 48);
        uint64_t v115 = *(void *)(a1 + 56);
        if (v114 == v115)
        {
          uint64_t v120 = 0;
          void *v111 = 0;
        }
        else
        {
          uint64_t v116 = *(void *)(a1 + 48);
          do
          {
            if (*(_DWORD *)v116 == v112)
            {
              uint64_t v117 = *(void *)(v116 + 8);
              if (v117) {
                goto LABEL_146;
              }
            }
            v116 += 16;
          }
          while (v116 != v115);
          uint64_t v117 = 0;
LABEL_146:
          void *v111 = v117;
          if (v114 == v115)
          {
LABEL_147:
            uint64_t v120 = 0;
          }
          else
          {
            while (1)
            {
              if (*(_DWORD *)v114 == v113)
              {
                uint64_t v120 = *(void *)(v114 + 8);
                if (v120) {
                  break;
                }
              }
              v114 += 16;
              if (v114 == v115) {
                goto LABEL_147;
              }
            }
          }
        }
        *(void *)(v108 + 88) = v120;
        operator new();
      }
      uint64_t v118 = (void *)(*v8 + 24 * v103);
      void *v118 = 0;
      v118[1] = 0;
      uint64_t v119 = (std::__shared_weak_count *)v118[2];
      v118[2] = 0;
      if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
      uint64_t v121 = *v8 + 24 * v103;
      uint64_t v122 = *(void *)(a1 + 176);
      uint64_t v124 = *(void *)(v121 + 8);
      uint64_t v123 = *(void *)(v121 + 16);
      if (v123) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v123 + 8), 1uLL, memory_order_relaxed);
      }
      float v125 = (void *)(v122 + 16 * v103);
      float v126 = (std::__shared_weak_count *)v125[1];
      *float v125 = v124;
      v125[1] = v123;
      if (v126 && !atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
      ++v103;
      uint64_t v6 = &qword_1EB32C000;
    }
    while (v103 != a2[5]);
  }
  uint64_t v127 = a2[7];
  if (v127)
  {
    uint64_t v128 = a2[6];
    uint64_t v129 = *v152;
    if (v127 == 1)
    {
      unint64_t v130 = 0;
LABEL_169:
      uint64_t v135 = v127 - v130;
      unint64_t v136 = (_DWORD *)(v129 + 16 * v130);
      uint64_t v137 = (int *)(v128 + 4 * v130);
      do
      {
        int v138 = *v137++;
        *unint64_t v136 = v138;
        v136 += 4;
        --v135;
      }
      while (v135);
      goto LABEL_171;
    }
    unint64_t v130 = v127 & 0xFFFFFFFFFFFFFFFELL;
    int8x8_t v131 = (_DWORD *)(v129 + 16);
    uint64_t v132 = (int *)(v128 + 4);
    unint64_t v133 = v127 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      int v134 = *v132;
      *(v131 - 4) = *(v132 - 1);
      *int8x8_t v131 = v134;
      v131 += 8;
      v132 += 2;
      v133 -= 2;
    }
    while (v133);
    if (v127 != v130) {
      goto LABEL_169;
    }
  }
LABEL_171:
  uint64_t v139 = a2[9];
  if (!v139) {
    return a1;
  }
  uint64_t v140 = a2[8];
  uint64_t v141 = *v153;
  if (v139 == 1)
  {
    unint64_t v142 = 0;
LABEL_177:
    uint64_t v147 = v139 - v142;
    unint64_t v148 = (_DWORD *)(v141 + 16 * v142);
    uint64_t v149 = (int *)(v140 + 4 * v142);
    do
    {
      int v150 = *v149++;
      *unint64_t v148 = v150;
      v148 += 4;
      --v147;
    }
    while (v147);
    return a1;
  }
  unint64_t v142 = v139 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v143 = (_DWORD *)(v141 + 16);
  uint64_t v144 = (int *)(v140 + 4);
  unint64_t v145 = v139 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    int v146 = *v144;
    *(v143 - 4) = *(v144 - 1);
    *unint64_t v143 = v146;
    v143 += 8;
    v144 += 2;
    v145 -= 2;
  }
  while (v145);
  if (v139 != v142) {
    goto LABEL_177;
  }
  return a1;
}

uint64_t std::vector<geo::Mercator2<double>,geo::StdAllocator<geo::Mercator2<double>,mdm::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 4)
  {
    if (a2)
    {
      uint64_t v10 = 16 * a2;
      uint64_t v11 = &v4[2 * a2];
      do
      {
        if (v4)
        {
          *uint64_t v4 = 0;
          v4[1] = 0;
        }
        v4 += 2;
        v10 -= 16;
      }
      while (v10);
      uint64_t v4 = v11;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 4;
    unint64_t v7 = v6 + a2;
    if ((v6 + a2) >> 60) {
      abort();
    }
    uint64_t v8 = v5 - *(void *)result;
    if (v8 >> 3 > v7) {
      unint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 16 * v9, 8);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v12 = (void *)(result + 16 * v6);
    uint64_t v13 = 16 * a2;
    unint64_t v14 = &v12[2 * a2];
    uint64_t v15 = v12;
    do
    {
      if (v15)
      {
        void *v15 = 0;
        v15[1] = 0;
      }
      v15 += 2;
      v13 -= 16;
    }
    while (v13);
    uint64_t v17 = *(void *)v3;
    uint64_t v16 = *(void *)(v3 + 8);
    if (v16 != *(void *)v3)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *(_OWORD *)(v16 - 16);
        v12 -= 2;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v12;
    *(void *)(v3 + 8) = v14;
    *(void *)(v3 + 16) = result + 16 * v9;
    if (v16)
    {
      unint64_t v18 = *(uint64_t (**)(void))(**(void **)(v3 + 24) + 40);
      return v18();
    }
  }
  return result;
}

void VKTrafficIncidentSetTitleBlock(void *a1)
{
  id v4 = a1;
  {
    operator new();
  }
  uint64_t v1 = (std::__shared_mutex_base *)blockMutex(void)::lock;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)blockMutex(void)::lock);
  uint64_t v2 = [v4 copy];
  uint64_t v3 = (void *)_titleBlock;
  _titleBlocuint64_t k = v2;

  std::__shared_mutex_base::unlock(v1);
}

void sub_1A1CDBB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  MEMORY[0x1A6239270](v10, 0x1000C40B98A05D4);

  _Unwind_Resume(a1);
}

void md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1CDBD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1CDBF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::DebugDrawContext::~DebugDrawContext(md::DebugDrawContext *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 14);
    id v4 = (void *)*((void *)this + 13);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void *)(v3 - 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v3 - 16);
          uint64_t v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            uint64_t v8 = *(void *)(v3 - 16);
            do
            {
              uint64_t v10 = *(void **)(v8 - 24);
              v8 -= 24;
              uint64_t v9 = v10;
              if (v10)
              {
                *(void *)(v7 - 16) = v9;
                operator delete(v9);
              }
              uint64_t v7 = v8;
            }
            while (v8 != v6);
            uint64_t v5 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      id v4 = (void *)*((void *)this + 13);
    }
    *((void *)this + 14) = v2;
    operator delete(v4);
  }
  uint64_t v11 = *((void *)this + 10);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 11);
    uint64_t v13 = (void *)*((void *)this + 10);
    if (v12 != v11)
    {
      do
      {
        uint64_t v15 = *(void *)(v12 - 24);
        if (v15)
        {
          uint64_t v16 = *(void *)(v12 - 16);
          unint64_t v14 = *(void **)(v12 - 24);
          if (v16 != v15)
          {
            do
            {
              uint64_t v17 = v16 - 112;
              uint64_t v18 = *(unsigned int *)(v16 - 8);
              if (v18 != -1) {
                ((void (*)(char *, uint64_t))off_1EF58F500[v18])(&v37, v16 - 112);
              }
              *(_DWORD *)(v16 - 8) = -1;
              v16 -= 112;
            }
            while (v17 != v15);
            unint64_t v14 = *(void **)(v12 - 24);
          }
          *(void *)(v12 - 16) = v15;
          operator delete(v14);
        }
        v12 -= 40;
      }
      while (v12 != v11);
      uint64_t v13 = (void *)*((void *)this + 10);
    }
    *((void *)this + 11) = v11;
    operator delete(v13);
  }
  uint64_t v19 = (void *)*((void *)this + 7);
  if (v19)
  {
    do
    {
      uint64_t v21 = (void *)*v19;
      uint64_t v22 = v19[3];
      if (v22)
      {
        uint64_t v23 = v19[4];
        uint64_t v20 = (void *)v19[3];
        if (v23 != v22)
        {
          do
          {
            uint64_t v25 = *(void *)(v23 - 24);
            if (v25)
            {
              uint64_t v26 = *(void *)(v23 - 16);
              uint64_t v24 = *(void **)(v23 - 24);
              if (v26 != v25)
              {
                do
                {
                  uint64_t v27 = v26 - 56;
                  uint64_t v28 = *(unsigned int *)(v26 - 4);
                  if (v28 != -1) {
                    ((void (*)(char *, uint64_t))off_1EF58F518[v28])(&v38, v26 - 56);
                  }
                  *(_DWORD *)(v26 - 4) = -1;
                  v26 -= 56;
                }
                while (v27 != v25);
                uint64_t v24 = *(void **)(v23 - 24);
              }
              *(void *)(v23 - 16) = v25;
              operator delete(v24);
            }
            v23 -= 40;
          }
          while (v23 != v22);
          uint64_t v20 = (void *)v19[3];
        }
        v19[4] = v22;
        operator delete(v20);
      }
      operator delete(v19);
      uint64_t v19 = v21;
    }
    while (v21);
  }
  uint64_t v29 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v29) {
    operator delete(v29);
  }
  unsigned int v30 = (void *)*((void *)this + 2);
  if (v30)
  {
    do
    {
      uint64_t v33 = (void *)*v30;
      uint64_t v34 = v30[3];
      if (v34)
      {
        uint64_t v35 = v30[4];
        uint64_t v32 = (void *)v30[3];
        if (v35 != v34)
        {
          do
          {
            uint64_t v36 = *(void **)(v35 - 24);
            if (v36)
            {
              *(void *)(v35 - 16) = v36;
              operator delete(v36);
            }
            v35 -= 40;
          }
          while (v35 != v34);
          uint64_t v32 = (void *)v30[3];
        }
        v30[4] = v34;
        operator delete(v32);
      }
      operator delete(v30);
      unsigned int v30 = v33;
    }
    while (v33);
  }
  uint64_t v31 = *(void **)this;
  *(void *)this = 0;
  if (v31) {
    operator delete(v31);
  }
}

double md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

double md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

void md::LabelPool::clear(int64x2_t *this)
{
  uint64_t v2 = (uint64_t *)this[1].i64[0];
  uint64_t v3 = (uint64_t *)this[1].i64[1];
  if (v2 == v3) {
    goto LABEL_25;
  }
  do
  {
    uint64_t v4 = *v2;
    *(unsigned char *)(v4 + 120) = 0;
    if (*(unsigned char *)(v4 + 125))
    {
      *(unsigned char *)(v4 + 125) = 0;
      uint64_t v5 = *(void **)(v4 + 408);
      if (v5 != (void *)(v4 + 416))
      {
        while (1)
        {
          uint64_t v6 = v5[4];
          if (atomic_fetch_add((atomic_uchar *volatile)(v6 + 1296), 0xFFu) != 1) {
            goto LABEL_11;
          }
          if (*(unsigned char *)(v6 + 1264)) {
            break;
          }
          md::Label::updateStateMachineForStaging(v6, 1, 37);
          uint64_t v7 = (void *)v5[1];
          if (!v7)
          {
            do
            {
LABEL_15:
              uint64_t v8 = (void *)v5[2];
              BOOL v9 = *v8 == (void)v5;
              uint64_t v5 = v8;
            }
            while (!v9);
            goto LABEL_7;
          }
          do
          {
LABEL_12:
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
LABEL_7:
          uint64_t v5 = v8;
          if (v8 == (void *)(v4 + 416)) {
            goto LABEL_3;
          }
        }
        *(unsigned char *)(v6 + 1261) = 1;
        *(void *)(v6 + 1224) = 0;
LABEL_11:
        uint64_t v7 = (void *)v5[1];
        if (!v7) {
          goto LABEL_15;
        }
        goto LABEL_12;
      }
    }
LABEL_3:
    md::LabelMapTile::broadcastLabelDeactivate((md::LabelMapTile *)v4);
    v2 += 2;
  }
  while (v2 != v3);
  uint64_t v10 = (uint64_t *)this[1].i64[0];
  uint64_t v2 = (uint64_t *)this[1].i64[1];
  if (v2 != v10)
  {
    do
    {
      uint64_t v11 = (std::__shared_weak_count *)*(v2 - 1);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v2 -= 2;
    }
    while (v2 != v10);
    uint64_t v2 = v10;
  }
LABEL_25:
  this[1].i64[1] = (uint64_t)v2;
  this[3] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  this[4] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  uint64_t v12 = (void *)this[6].i64[1];
  if (v12)
  {
    while (1)
    {
      uint64_t v13 = v12[2];
      if (*(unsigned char *)(v13 + 125))
      {
        *(unsigned char *)(v13 + 125) = 0;
        unint64_t v14 = *(void **)(v13 + 408);
        if (v14 != (void *)(v13 + 416)) {
          break;
        }
      }
LABEL_27:
      md::LabelMapTile::broadcastLabelDeactivate((md::LabelMapTile *)v13);
      uint64_t v12 = (void *)*v12;
      if (!v12) {
        goto LABEL_42;
      }
    }
    while (1)
    {
      uint64_t v15 = v14[4];
      if (atomic_fetch_add((atomic_uchar *volatile)(v15 + 1296), 0xFFu) != 1) {
        goto LABEL_35;
      }
      if (*(unsigned char *)(v15 + 1264)) {
        break;
      }
      md::Label::updateStateMachineForStaging(v15, 1, 37);
      uint64_t v16 = (void *)v14[1];
      if (!v16)
      {
        do
        {
LABEL_39:
          uint64_t v17 = (void *)v14[2];
          BOOL v9 = *v17 == (void)v14;
          unint64_t v14 = v17;
        }
        while (!v9);
        goto LABEL_31;
      }
      do
      {
LABEL_36:
        uint64_t v17 = v16;
        uint64_t v16 = (void *)*v16;
      }
      while (v16);
LABEL_31:
      unint64_t v14 = v17;
      if (v17 == (void *)(v13 + 416)) {
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v15 + 1261) = 1;
    *(void *)(v15 + 1224) = 0;
LABEL_35:
    uint64_t v16 = (void *)v14[1];
    if (!v16) {
      goto LABEL_39;
    }
    goto LABEL_36;
  }
LABEL_42:
  if (this[7].i64[1])
  {
    uint64_t v18 = (void *)this[6].i64[1];
    while (v18)
    {
      uint64_t v19 = v18;
      uint64_t v18 = (void *)*v18;
      uint64_t v20 = (std::__shared_weak_count *)v19[3];
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)this[7].i64[0] + 40))(this[7].i64[0], v19, 32);
    }
    this[6].i64[1] = 0;
    uint64_t v21 = this[5].i64[1];
    if (v21)
    {
      for (uint64_t i = 0; i != v21; ++i)
        *(void *)(this[5].i64[0] + 8 * i) = 0;
    }
    this[7].i64[1] = 0;
  }
  for (uint64_t j = this[10].i64[0]; j; uint64_t j = *(void *)j)
    md::LabelMapTile::broadcastLabelDeactivate(*(md::LabelMapTile **)(j + 16));
  if (this[11].i64[0])
  {
    uint64_t v24 = (void *)this[10].i64[0];
    while (v24)
    {
      uint64_t v25 = v24;
      uint64_t v24 = (void *)*v24;
      uint64_t v26 = (std::__shared_weak_count *)v25[3];
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)this[10].i64[1] + 40))(this[10].i64[1], v25, 32);
    }
    this[10].i64[0] = 0;
    uint64_t v27 = this[9].i64[0];
    if (v27)
    {
      for (uint64_t k = 0; k != v27; ++k)
        *(void *)(this[8].i64[1] + 8 * k) = 0;
    }
    this[11].i64[0] = 0;
  }
  uint64_t v29 = (unint64_t *)this[42].i64[0];
  unsigned int v30 = &this[42].i8[8];
  if (v29 != &this[42].u64[1])
  {
    while (1)
    {
      uint64_t v31 = v29[4];
      if (atomic_fetch_add((atomic_uchar *volatile)(v31 + 1296), 0xFFu) != 1) {
        goto LABEL_72;
      }
      if (*(unsigned char *)(v31 + 1264)) {
        break;
      }
      md::Label::updateStateMachineForStaging(v31, 1, 37);
      uint64_t v32 = (unint64_t *)v29[1];
      if (!v32)
      {
        do
        {
LABEL_76:
          uint64_t v33 = (unint64_t *)v29[2];
          BOOL v9 = *v33 == (void)v29;
          uint64_t v29 = v33;
        }
        while (!v9);
        goto LABEL_68;
      }
      do
      {
LABEL_73:
        uint64_t v33 = v32;
        uint64_t v32 = (unint64_t *)*v32;
      }
      while (v32);
LABEL_68:
      uint64_t v29 = v33;
      if (v33 == (unint64_t *)v30) {
        goto LABEL_79;
      }
    }
    *(unsigned char *)(v31 + 1261) = 1;
    *(void *)(v31 + 1224) = 0;
LABEL_72:
    uint64_t v32 = (unint64_t *)v29[1];
    if (!v32) {
      goto LABEL_76;
    }
    goto LABEL_73;
  }
LABEL_79:
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)this[42].i64, (void *)this[42].i64[1]);
  this[43].i64[1] = 0;
  this[42].i64[0] = (uint64_t)v30;
  this[42].i64[1] = 0;
  this[47].i8[8] = 0;
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this[12].i64, (void *)this[12].i64[1]);
  uint64_t v35 = (unint64_t *)this[14].i64[0];
  this[13].i64[1] = 0;
  this[12].i64[0] = (uint64_t)&this[12].i64[1];
  this[12].i64[1] = 0;
  uint64_t v36 = &this[14].i8[8];
  if (v35 != &this[14].u64[1])
  {
    do
    {
      char v38 = (md::Label *)v35[6];
      if (v38 != (md::Label *)this[44].i64[0])
      {
        *((unsigned char *)v38 + 1252) = 0;
        if (*((unsigned char *)v38 + 1251))
        {
          *((unsigned char *)v38 + 1251) = 0;
          md::Label::clearAnimation(v38);
          char v38 = (md::Label *)v35[6];
        }
        md::Label::setActive((uint64_t)v38, 0, v34);
      }
      uint64_t v39 = (unint64_t *)v35[1];
      if (v39)
      {
        do
        {
          unint64_t v40 = v39;
          uint64_t v39 = (unint64_t *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          unint64_t v40 = (unint64_t *)v35[2];
          BOOL v9 = *v40 == (void)v35;
          uint64_t v35 = v40;
        }
        while (!v9);
      }
      uint64_t v35 = v40;
    }
    while (v40 != (unint64_t *)v36);
  }
  std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::clear((uint64_t)this[16].i64);
  if (this[25].i64[1])
  {
    char v37 = (void *)this[24].i64[1];
    while (v37)
    {
      uint64_t v41 = v37;
      char v37 = (void *)*v37;
      int8x16_t v42 = (std::__shared_weak_count *)v41[4];
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)this[25].i64[0] + 40))(this[25].i64[0], v41, 40);
    }
    this[24].i64[1] = 0;
    uint64_t v43 = this[23].i64[1];
    if (v43)
    {
      for (uint64_t m = 0; m != v43; ++m)
        *(void *)(this[23].i64[0] + 8 * m) = 0;
    }
    this[25].i64[1] = 0;
  }
  if (this[29].i64[0])
  {
    uint64_t v45 = (void *)this[28].i64[0];
    while (v45)
    {
      unint64_t v46 = v45;
      uint64_t v45 = (void *)*v45;
      uint64_t v47 = (std::__shared_weak_count *)v46[4];
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)this[28].i64[1] + 40))(this[28].i64[1], v46, 40);
    }
    this[28].i64[0] = 0;
    uint64_t v48 = this[27].i64[0];
    if (v48)
    {
      for (uint64_t n = 0; n != v48; ++n)
        *(void *)(this[26].i64[1] + 8 * n) = 0;
    }
    this[29].i64[0] = 0;
  }
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this[14].i64, (void *)this[14].i64[1]);
  this[15].i64[1] = 0;
  this[14].i64[0] = (uint64_t)v36;
  this[14].i64[1] = 0;
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this[34].i64, (void *)this[34].i64[1]);
  this[35].i64[1] = 0;
  this[34].i64[0] = (uint64_t)&this[34].i64[1];
  this[34].i64[1] = 0;
  this[47].i8[6] = 0;
  uint64_t v50 = this[36].i64[0];
  uint64_t v51 = this[36].i64[1];
  if (v50 != v51)
  {
    do
    {
      uint64_t v52 = *(std::__shared_weak_count **)(v51 - 8);
      if (v52)
      {
        if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v51 -= 16;
    }
    while (v51 != v50);
    this[36].i64[1] = v50;
    ++this[46].i32[3];
  }
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy(v3, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[7];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

void md::LabelNavTrafficSupport::setExternalTrafficFeatures(md::LabelNavTrafficSupport *this, NSArray *a2, char a3)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v121 = a2;
  *((unsigned char *)this + 152) = a3;
  uint64_t v127 = this;
  uint64_t v7 = (char *)this + 40;
  uint64_t v6 = (void (***)(void))*((void *)this + 5);
  uint64_t v5 = (void (***)(void))*((void *)v7 + 1);
  if (v5 != v6)
  {
    uint64_t v8 = v5 - 3;
    BOOL v9 = v5 - 3;
    uint64_t v10 = v5 - 3;
    do
    {
      uint64_t v11 = *v10;
      v10 -= 3;
      (*v11)(v9);
      v8 -= 3;
      BOOL v12 = v9 == v6;
      BOOL v9 = v10;
    }
    while (!v12);
  }
  uint64_t v13 = v127;
  *((void *)v127 + 6) = v6;
  uint64_t v137 = 0;
  {
    operator new();
  }
  uint64_t v138 = mdm::Allocator::instance(void)::alloc;
  uint64_t v139 = 0;
  unint64_t v136 = &v137;
  if ([(NSArray *)v121 count])
  {
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    id v14 = v122;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v132 objects:v141 count:16];
    if (!v15) {
      goto LABEL_56;
    }
    uint64_t v16 = *(void *)v133;
    id v125 = v14;
    while (1)
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v133 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v20 = *(void **)(*((void *)&v132 + 1) + 8 * i);
        if (![v20 trafficFeatureType] && (objc_msgSend(v20, "isNotForDisplay") & 1) == 0)
        {
          id v21 = v20;
          uint64_t v22 = v137;
          uint64_t v23 = &v137;
          uint64_t v24 = &v137;
          if (!v137) {
            goto LABEL_27;
          }
          uint64_t v24 = &v137;
          while (1)
          {
            while (1)
            {
              uint64_t v23 = (uint64_t **)v22;
              if (!VKTrafficIncidentFeatureSetLessThan::operator()(v21, (void *)v22[4])) {
                break;
              }
              uint64_t v22 = *v23;
              uint64_t v24 = v23;
              if (!*v23) {
                goto LABEL_27;
              }
            }
            if (!VKTrafficIncidentFeatureSetLessThan::operator()(v23[4], v21)) {
              break;
            }
            uint64_t v24 = v23 + 1;
            uint64_t v22 = v23[1];
            if (!v22) {
              goto LABEL_27;
            }
          }
          if (!*v24)
          {
LABEL_27:
            uint64_t v25 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v138 + 16))(v138, 40, 8);
            v25[4] = (uint64_t)v21;
            *uint64_t v25 = 0;
            v25[1] = 0;
            v25[2] = (uint64_t)v23;
            *uint64_t v24 = v25;
            if (*v136)
            {
              unint64_t v136 = (uint64_t **)*v136;
              uint64_t v25 = *v24;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v137, v25);
            ++v139;
            id v26 = v21;
            uint64_t v27 = v26;
            uint64_t v19 = v127;
            uint64_t v29 = (void *)*((void *)v127 + 6);
            unint64_t v28 = *((void *)v127 + 7);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v32 = *((void *)v127 + 5);
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v29 - v32) >> 3);
              unint64_t v34 = v33 + 1;
              if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - v32) >> 3);
              if (2 * v35 > v34) {
                unint64_t v34 = 2 * v35;
              }
              if (v35 >= 0x555555555555555) {
                uint64_t v36 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                uint64_t v36 = v34;
              }
              if (v36)
              {
                uint64_t v37 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v127 + 8) + 16))(*((void *)v127 + 8), 24 * v36, 8);
                uint64_t v38 = v37 + 24 * v33;
                uint64_t v39 = v37 + 24 * v36;
                if (v37)
                {
                  id v40 = v27;
                  *(void *)uint64_t v38 = &unk_1EF559B98;
                  *(void *)(v37 + 24 * v33 + 8) = v40;
                }
                uint64_t v41 = v39;
              }
              else
              {
                uint64_t v41 = 0;
                uint64_t v38 = 24 * v33;
              }
              uint64_t v31 = (void *)(v38 + 24);
              uint64_t v43 = (void **)*((void *)v127 + 5);
              int8x16_t v42 = (void **)*((void *)v127 + 6);
              if (v42 == v43)
              {
                *((void *)v127 + 5) = v38;
                *((void *)v127 + 6) = v31;
                uint64_t v18 = *((void *)v127 + 7);
                *((void *)v127 + 7) = v41;
                uint64_t v19 = v127;
                if (!v42) {
                  goto LABEL_12;
                }
              }
              else
              {
                uint64_t v44 = v38 - 24;
                do
                {
                  *(void *)(v38 - 24) = &unk_1EF559B98;
                  v38 -= 24;
                  *(void *)(v38 + 8) = 0;
                  unint64_t v46 = *(v42 - 2);
                  uint64_t v45 = v42 - 2;
                  objc_storeStrong((id *)(v38 + 8), v46);
                  uint64_t v47 = *v45;
                  *uint64_t v45 = 0;

                  int8x16_t v42 = v45 - 1;
                  v44 -= 24;
                }
                while (v42 != v43);
                int8x16_t v42 = (void **)*((void *)v127 + 5);
                uint64_t v48 = (void **)*((void *)v127 + 6);
                *((void *)v127 + 5) = v38;
                *((void *)v127 + 6) = v31;
                uint64_t v18 = *((void *)v127 + 7);
                *((void *)v127 + 7) = v41;
                if (v48 == v42)
                {
                  uint64_t v19 = v127;
                  if (!v42) {
                    goto LABEL_12;
                  }
                }
                else
                {
                  uint64_t v49 = v48 - 3;
                  uint64_t v50 = v48 - 3;
                  uint64_t v51 = v48 - 3;
                  do
                  {
                    uint64_t v52 = (void (**)(void **))*v51;
                    v51 -= 3;
                    (*v52)(v50);
                    v49 -= 3;
                    BOOL v12 = v50 == v42;
                    uint64_t v50 = v51;
                  }
                  while (!v12);
                  uint64_t v19 = v127;
                  if (!v42) {
                    goto LABEL_12;
                  }
                }
              }
              (*(void (**)(void, void **, uint64_t))(**((void **)v19 + 8) + 40))(*((void *)v19 + 8), v42, v18 - (void)v42);
              goto LABEL_12;
            }
            if (v29)
            {
              id v30 = v26;
              void *v29 = &unk_1EF559B98;
              v29[1] = v30;
            }
            uint64_t v31 = v29 + 3;
LABEL_12:
            *((void *)v19 + 6) = v31;
          }

          id v14 = v125;
          continue;
        }
      }
      uint64_t v15 = [v14 countByEnumeratingWithState:&v132 objects:v141 count:16];
      if (!v15)
      {
LABEL_56:

        uint64_t v13 = v127;
        break;
      }
    }
  }
  uint64_t v53 = (void *)*((void *)v13 + 4);
  if (v53)
  {
    [v53 removeAllObjects];
  }
  else
  {
    id v54 = objc_alloc(MEMORY[0x1E4F1CA48]);
    uint64_t v55 = [v54 initWithCapacity:v139];
    unint64_t v56 = (void *)*((void *)v13 + 4);
    *((void *)v13 + 4) = v55;

    uint64_t v13 = v127;
  }
  long long v129 = 0uLL;
  unint64_t v130 = 0;
  {
    operator new();
  }
  uint64_t v131 = mdm::Allocator::instance(void)::alloc;
  uint64_t v58 = (void *)*((void *)v13 + 9);
  uint64_t v57 = (void *)*((void *)v13 + 10);
  uint64_t v59 = (void *)((char *)v13 + 72);
  float v126 = v57;
  if (v58 == v57)
  {
    unint64_t v89 = v58;
  }
  else
  {
    uint64_t v124 = v59;
    do
    {
      uint64_t v60 = (*(void (**)(void))(*(void *)*v58 + 200))();
      uint64_t v61 = v137;
      if (!v137) {
        goto LABEL_63;
      }
      uint64_t v62 = &v137;
      do
      {
        uint64_t v63 = v61;
        uint64_t v64 = v62;
        BOOL v65 = VKTrafficIncidentFeatureSetLessThan::operator()((void *)v61[4], v60);
        BOOL v66 = v65;
        uint64_t v67 = (uint64_t **)(v63 + 1);
        if (v65) {
          unint64_t v68 = (uint64_t **)(v63 + 1);
        }
        else {
          unint64_t v68 = (uint64_t **)v63;
        }
        if (!v65) {
          uint64_t v62 = (uint64_t **)v63;
        }
        uint64_t v61 = *v68;
      }
      while (v61);
      if (v62 == &v137) {
        goto LABEL_63;
      }
      if (v65) {
        uint64_t v63 = (uint64_t *)v64;
      }
      if (VKTrafficIncidentFeatureSetLessThan::operator()(v60, (void *)v63[4]))
      {
LABEL_63:
      }
      else
      {

        unint64_t v69 = (void *)*((void *)&v129 + 1);
        if (*((void *)&v129 + 1) >= v130)
        {
          uint64_t v123 = v63;
          uint64_t v72 = (void *)v129;
          uint64_t v73 = (uint64_t)(*((void *)&v129 + 1) - v129) >> 4;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 60) {
            abort();
          }
          uint64_t v75 = v130 - v129;
          if ((uint64_t)(v130 - v129) >> 3 > v74) {
            unint64_t v74 = v75 >> 3;
          }
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0) {
            uint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v76 = v74;
          }
          if (v76)
          {
            uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v131 + 16))(v131, 16 * v76, 8);
            uint64_t v78 = (_OWORD *)(v77 + 16 * v73);
            uint64_t v79 = v77 + 16 * v76;
            if (v77)
            {
              long long v80 = *(_OWORD *)v58;
              _OWORD *v78 = *(_OWORD *)v58;
              if (*((void *)&v80 + 1))
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 1uLL, memory_order_relaxed);
                unint64_t v69 = (void *)*((void *)&v129 + 1);
              }
            }
          }
          else
          {
            uint64_t v79 = 0;
            uint64_t v78 = (_OWORD *)(16 * v73);
          }
          uint64_t v71 = v78 + 1;
          if (v69 == v72)
          {
            unint64_t v83 = v130;
            *(void *)&long long v129 = v78;
            unint64_t v130 = v79;
          }
          else
          {
            int8x16_t v81 = v69;
            do
            {
              long long v82 = *((_OWORD *)v81 - 1);
              v81 -= 2;
              *--uint64_t v78 = v82;
              *int8x16_t v81 = 0;
              v81[1] = 0;
            }
            while (v81 != v72);
            *(void *)&long long v129 = v78;
            *((void *)&v129 + 1) = v71;
            unint64_t v83 = v130;
            unint64_t v130 = v79;
            do
            {
              uint64_t v84 = (std::__shared_weak_count *)*(v69 - 1);
              if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
              v69 -= 2;
            }
            while (v69 != v72);
          }
          if (v72) {
            (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v131 + 40))(v131, v72, v83 - (void)v72);
          }
          uint64_t v63 = v123;
        }
        else
        {
          if (*((void *)&v129 + 1))
          {
            **((void **)&v129 + 1) = *v58;
            uint64_t v70 = v58[1];
            v69[1] = v70;
            if (v70) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
            }
          }
          uint64_t v71 = v69 + 2;
        }
        *((void *)&v129 + 1) = v71;
        uint64_t v85 = v64 + 1;
        if (!v66) {
          uint64_t v85 = v67;
        }
        long long v86 = *v85;
        uint64_t v87 = v62;
        if (*v85)
        {
          do
          {
            uint64_t v88 = (uint64_t **)v86;
            long long v86 = (uint64_t *)*v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            uint64_t v88 = (uint64_t **)v87[2];
            BOOL v12 = *v88 == (uint64_t *)v87;
            uint64_t v87 = v88;
          }
          while (!v12);
        }
        uint64_t v59 = v124;
        if (v136 == v62) {
          unint64_t v136 = v88;
        }
        --v139;
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v137, (uint64_t *)v62);

        (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(void *)v138 + 40))(v138, v62, 40);
      }
      v58 += 2;
    }
    while (v58 != v126);
    uint64_t v58 = (void *)*((void *)v127 + 9);
    unint64_t v89 = (void *)*((void *)v127 + 10);
    if (v89 == v58)
    {
      uint64_t v58 = (void *)*((void *)v127 + 10);
    }
    else
    {
      do
      {
        unint64_t v90 = (std::__shared_weak_count *)*(v89 - 1);
        if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
        v89 -= 2;
      }
      while (v89 != v58);
      unint64_t v89 = (void *)*v59;
    }
  }
  uint64_t v91 = (void **)((char *)v127 + 104);
  unint64_t v92 = (uint64_t *)*((void *)v127 + 13);
  *(_OWORD *)((char *)v127 + 72) = v129;
  *(void *)&long long v129 = v89;
  *((void *)&v129 + 1) = v58;
  unint64_t v93 = *((void *)v127 + 11);
  *((void *)v127 + 11) = v130;
  unint64_t v130 = v93;
  for (uint64_t j = (uint64_t *)*((void *)v127 + 14); j != v92; j -= 2)
  {
    unint64_t v95 = (std::__shared_weak_count *)*(j - 1);
    if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  uint64_t v96 = v127;
  *((void *)v127 + 14) = v92;
  uint64_t v97 = v136;
  if (v136 != &v137)
  {
    do
    {
      uint64_t v98 = v97[4];
      if ([v98 routeRelevance] == 3 || objc_msgSend(v98, "routeRelevance") == 2)
      {
        if ([v98 isOnSelectedRoute]
          && ((uint64_t v99 = [v98 routeOffset], v100 = *((_DWORD *)v96 + 34), v100 > v99)
           || v100 == v99 && *((float *)v96 + 35) > *((float *)&v99 + 1)))
        {
          uint64_t v101 = 2;
        }
        else
        {
          uint64_t v101 = 3;
        }
        [v98 setRouteRelevance:v101];
      }
      uint64_t v102 = operator new(0x1A0uLL);
      v102[1] = 0;
      v102[2] = 0;
      *uint64_t v102 = &unk_1EF582240;
      *(void *)&long long v128 = std::__construct_at[abi:nn180100]<md::TrafficIncidentLabelFeature,VKTrafficIncidentFeature * {__strong}&,std::shared_ptr<md::RouteAnnotationDedupingGroup> &,md::TrafficIncidentLabelFeature*>((uint64_t)(v102 + 3), v98, *((void *)v96 + 2), *((std::__shared_weak_count **)v96 + 3));
      *((void *)&v128 + 1) = v102;
      v102[12] = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*((void *)v96 + 1) + 288) + 680), 1uLL)
               + 1;
      uint64_t v103 = (void *)*((void *)v96 + 10);
      if ((unint64_t)v103 >= *((void *)v96 + 11))
      {
        int v105 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)v59, &v128);
      }
      else
      {
        if (v103)
        {
          *uint64_t v103 = v128;
          uint64_t v104 = *((void *)&v128 + 1);
          v103[1] = *((void *)&v128 + 1);
          if (v104) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v104 + 8), 1uLL, memory_order_relaxed);
          }
        }
        int v105 = v103 + 2;
      }
      *((void *)v96 + 10) = v105;
      if ([v98 isOnSelectedRoute] && objc_msgSend(v98, "routeRelevance") == 3)
      {
        unint64_t v106 = (void *)*((void *)v96 + 14);
        if ((unint64_t)v106 >= *((void *)v96 + 15))
        {
          uint64_t v108 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)v91, &v128);
        }
        else
        {
          if (v106)
          {
            *unint64_t v106 = v128;
            uint64_t v107 = *((void *)&v128 + 1);
            v106[1] = *((void *)&v128 + 1);
            if (v107) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
            }
          }
          uint64_t v108 = v106 + 2;
        }
        *((void *)v96 + 14) = v108;
      }
      [*((id *)v96 + 4) addObject:v98];
      unint64_t v109 = (std::__shared_weak_count *)*((void *)&v128 + 1);
      if (*((void *)&v128 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v128 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }

      uint64_t v110 = v97[1];
      if (v110)
      {
        do
        {
          uint64_t v111 = (uint64_t **)v110;
          uint64_t v110 = (uint64_t *)*v110;
        }
        while (v110);
      }
      else
      {
        do
        {
          uint64_t v111 = (uint64_t **)v97[2];
          BOOL v12 = *v111 == (uint64_t *)v97;
          uint64_t v97 = v111;
        }
        while (!v12);
      }
      uint64_t v97 = v111;
      uint64_t v96 = v127;
    }
    while (v111 != &v137);
    unint64_t v92 = (uint64_t *)*((void *)v127 + 14);
  }
  *((void *)v96 + 18) = 0xFFFFFFFFLL;
  uint64_t v112 = (uint64_t *)*((void *)v96 + 13);
  if (v112 != v92)
  {
    std::__introsort<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,false>(v112, v92, 126 - 2 * __clz(((char *)v92 - (char *)v112) >> 4), 1);
    uint64_t v113 = (*(void (**)(void))(*(void *)**v91 + 200))(**v91);
    *((void *)v127 + 18) = [v113 routeOffset];

    uint64_t v96 = v127;
  }
  uint64_t v114 = *((void *)v96 + 1);
  *(unsigned char *)(v114 + 3041) = 1;
  unsigned __int8 v115 = atomic_load((unsigned __int8 *)(v114 + 3058));
  if (v115)
  {
    uint64_t v116 = *(void *)(v114 + 136);
    if (v116)
    {
      uint64_t v117 = *(void *)(v116 + 56);
      if (v117)
      {
        *(void *)&long long v128 = v114;
        char v140 = 9;
        (*(void (**)(uint64_t, long long *, char *))(*(void *)v117 + 48))(v117, &v128, &v140);
      }
    }
  }
  uint64_t v118 = v129;
  if ((void)v129)
  {
    uint64_t v119 = *((void *)&v129 + 1);
    if (*((void *)&v129 + 1) != (void)v129)
    {
      do
      {
        uint64_t v120 = *(std::__shared_weak_count **)(v119 - 8);
        if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
        v119 -= 16;
      }
      while (v119 != v118);
      uint64_t v118 = v129;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v131 + 40))(v131, v118, v130 - v118);
  }
  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v136, (uint64_t)v137);
}

void sub_1A1CDD890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31)
{
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a17);
  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&a30, a31);

  _Unwind_Resume(a1);
}

uint64_t std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy(v3, *(void *)(a2 + 8));

    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

void md::CartographicMapEngineConfiguration::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 856);
  uint64_t v6 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v7 = v6[2];
  if (!*(void *)&v7) {
    goto LABEL_33;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v9 = 0x2FED70A4459DFCA1;
    if (*(void *)&v7 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v9 = 0x2FED70A4459DFCA1uLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v9 = (*(void *)&v7 - 1) & 0x2FED70A4459DFCA1;
  }
  uint64_t v10 = *(void **)(*(void *)&v6[1] + 8 * v9);
  if (!v10) {
    goto LABEL_33;
  }
  uint64_t v11 = (void *)*v10;
  if (!v11) {
    goto LABEL_33;
  }
  if (v8.u32[0] < 2uLL)
  {
    uint64_t v12 = *(void *)&v7 - 1;
    while (1)
    {
      uint64_t v14 = v11[1];
      if (v14 == 0x2FED70A4459DFCA1)
      {
        if (v11[2] == 0x2FED70A4459DFCA1) {
          goto LABEL_22;
        }
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_33;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_33;
      }
    }
  }
  while (1)
  {
    unint64_t v13 = v11[1];
    if (v13 == 0x2FED70A4459DFCA1) {
      break;
    }
    if (v13 >= *(void *)&v7) {
      v13 %= *(void *)&v7;
    }
    if (v13 != v9) {
      goto LABEL_33;
    }
LABEL_11:
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_33;
    }
  }
  if (v11[2] != 0x2FED70A4459DFCA1) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v15 = v11[5];
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 208);
    if (v16)
    {
      gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(v16, 0x10036u);
      char v50 = 4;
      uint64_t v17 = *(char **)(v15 + 1128);
      uint64_t v18 = *(char **)(v15 + 1136);
      if (v17 != v18)
      {
        while (*v17 <= 3u)
        {
          if (++v17 == v18) {
            goto LABEL_30;
          }
        }
      }
      if (v17 == v18 || (uint64_t v18 = v17, *v17 != 4)) {
LABEL_30:
      }
        std::vector<md::StyleManagerEvent>::insert(v15 + 1128, v18, &v50);
      uint64_t v19 = **(void **)(v15 + 1240);
      if (v19)
      {
        char v51 = 12;
        md::MapEngine::setNeedsTick(v19, &v51);
      }
    }
  }
LABEL_33:
  *(unsigned char *)(*(void *)(*(void *)(v5 + 40) + 320) + 268) = 1;
  uint64_t v20 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v21 = v20[2];
  if (v21)
  {
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      uint64_t v23 = 0x20A1ED17D78F322BLL;
      if (*(void *)&v21 <= 0x20A1ED17D78F322BuLL) {
        uint64_t v23 = 0x20A1ED17D78F322BuLL % *(void *)&v21;
      }
    }
    else
    {
      uint64_t v23 = (*(void *)&v21 - 1) & 0x20A1ED17D78F322BLL;
    }
    uint64_t v24 = *(void **)(*(void *)&v20[1] + 8 * v23);
    if (v24)
    {
      uint64_t v25 = (void *)*v24;
      if (v25)
      {
        if (v22.u32[0] < 2uLL)
        {
          uint64_t v26 = *(void *)&v21 - 1;
          while (1)
          {
            uint64_t v28 = v25[1];
            if (v28 == 0x20A1ED17D78F322BLL)
            {
              if (v25[2] == 0x20A1ED17D78F322BLL) {
                goto LABEL_101;
              }
            }
            else if ((v28 & v26) != v23)
            {
              goto LABEL_53;
            }
            uint64_t v25 = (void *)*v25;
            if (!v25) {
              goto LABEL_53;
            }
          }
        }
        do
        {
          unint64_t v27 = v25[1];
          if (v27 == 0x20A1ED17D78F322BLL)
          {
            if (v25[2] == 0x20A1ED17D78F322BLL)
            {
LABEL_101:
              uint64_t v29 = v25[5];
              goto LABEL_54;
            }
          }
          else
          {
            if (v27 >= *(void *)&v21) {
              v27 %= *(void *)&v21;
            }
            if (v27 != v23) {
              break;
            }
          }
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
    }
  }
LABEL_53:
  uint64_t v29 = 0;
LABEL_54:
  md::LabelsLogic::setWorldType(v29, *(unsigned __int8 *)(a1 + 32));
  uint64_t v30 = *(void *)(v5 + 40);
  if ((unint64_t)(*(void *)(v5 + 48) - v30) < 0x98) {
    return;
  }
  uint64_t v31 = *(void *)(v30 + 144);
  if (!v31) {
    return;
  }
  uint64_t v32 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v33 = v32[2];
  if (!*(void *)&v33) {
    return;
  }
  uint8x8_t v34 = (uint8x8_t)vcnt_s8(v33);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    uint64_t v35 = 0x20A1ED17D78F322BLL;
    if (*(void *)&v33 <= 0x20A1ED17D78F322BuLL) {
      uint64_t v35 = 0x20A1ED17D78F322BuLL % *(void *)&v33;
    }
  }
  else
  {
    uint64_t v35 = (*(void *)&v33 - 1) & 0x20A1ED17D78F322BLL;
  }
  int8x8_t v36 = v32[1];
  uint64_t v37 = *(void **)(*(void *)&v36 + 8 * v35);
  if (!v37 || (uint64_t v38 = (void *)*v37) == 0)
  {
LABEL_76:
    uint64_t v41 = 0;
    goto LABEL_77;
  }
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v40 = v38[1];
      if (v40 == 0x20A1ED17D78F322BLL)
      {
        if (v38[2] == 0x20A1ED17D78F322BLL) {
          goto LABEL_102;
        }
      }
      else if ((v40 & (*(void *)&v33 - 1)) != v35)
      {
        goto LABEL_76;
      }
      uint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_76;
      }
    }
  }
  while (2)
  {
    unint64_t v39 = v38[1];
    if (v39 != 0x20A1ED17D78F322BLL)
    {
      if (v39 >= *(void *)&v33) {
        v39 %= *(void *)&v33;
      }
      if (v39 != v35) {
        goto LABEL_76;
      }
      goto LABEL_66;
    }
    if (v38[2] != 0x20A1ED17D78F322BLL)
    {
LABEL_66:
      uint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_76;
      }
      continue;
    }
    break;
  }
LABEL_102:
  uint64_t v41 = v38[5];
LABEL_77:
  if (v34.u32[0] > 1uLL)
  {
    unint64_t v42 = 0xBEC1A12372CEEC00;
    if (*(void *)&v33 <= 0xBEC1A12372CEEC00) {
      unint64_t v42 = 0xBEC1A12372CEEC00 % *(void *)&v33;
    }
  }
  else
  {
    unint64_t v42 = (*(void *)&v33 - 1) & 0xBEC1A12372CEEC00;
  }
  uint64_t v43 = *(void **)(*(void *)&v36 + 8 * v42);
  if (!v43 || (uint64_t v44 = (void *)*v43) == 0)
  {
LABEL_96:
    uint64_t v48 = 0;
    if (v41) {
      goto LABEL_97;
    }
    goto LABEL_98;
  }
  if (v34.u32[0] < 2uLL)
  {
    uint64_t v45 = *(void *)&v33 - 1;
    while (1)
    {
      uint64_t v47 = v44[1];
      if (v47 == 0xBEC1A12372CEEC00)
      {
        if (v44[2] == 0xBEC1A12372CEEC00) {
          goto LABEL_103;
        }
      }
      else if ((v47 & v45) != v42)
      {
        goto LABEL_96;
      }
      uint64_t v44 = (void *)*v44;
      if (!v44) {
        goto LABEL_96;
      }
    }
  }
  while (2)
  {
    unint64_t v46 = v44[1];
    if (v46 != 0xBEC1A12372CEEC00)
    {
      if (v46 >= *(void *)&v33) {
        v46 %= *(void *)&v33;
      }
      if (v46 != v42) {
        goto LABEL_96;
      }
      goto LABEL_86;
    }
    if (v44[2] != 0xBEC1A12372CEEC00)
    {
LABEL_86:
      uint64_t v44 = (void *)*v44;
      if (!v44) {
        goto LABEL_96;
      }
      continue;
    }
    break;
  }
LABEL_103:
  uint64_t v48 = v44[5];
  if (!v41) {
    goto LABEL_98;
  }
LABEL_97:
  uint64_t v49 = *(void *)(*(void *)(*(void *)(v41 + 160) + 168) + 32);
  (*(void (**)(uint64_t, void))(*(void *)v49 + 120))(v49, *(void *)(v31 + 72));
LABEL_98:
  if (v48) {
    [*(id *)(v48 + 296) setRouteOverlayCache:*(void *)(v31 + 72)];
  }
}

uint64_t non-virtual thunk to'md::MapNavLabeler::setRouteOverlayCache(uint64_t this, const RouteOverlayCache *a2)
{
  if (*(const RouteOverlayCache **)(this + 96) != a2)
  {
    *(void *)(this + 96) = a2;
    *(void *)(*(void *)(this + 680) + 104) = a2;
  }
  return this;
}

void md::CoastLineRenderResources::CoastLineRenderResources(md::CoastLineRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3, char a4)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  int8x8_t v7 = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 72) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 34) = 0;
  unint64_t v109 = v7;
  uint64_t v8 = [(VKSharedResources *)v7 shaderLibrary];
  [(VKSharedResources *)v109 textureManager];
  uint64_t v10 = **(void **)v110;
  uint64_t v9 = *(void *)(*(void *)v110 + 8);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 29);
  *((void *)this + 28) = v10;
  *((void *)this + 29) = v9;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (*(void *)&v110[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v110[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**(void **)&v110[8] + 16))(*(void *)&v110[8]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v110[8]);
  }
  uint64_t v12 = *(void *)(v8 + 80);
  uint64_t v13 = *(void *)(v12 + 1664);
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 1672);
  uint64_t v113 = v13;
  uint64_t v114 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v110[20] = 0uLL;
  uint64_t v111 = 0;
  v110[0] = 0;
  *(_OWORD *)&v110[4] = xmmword_1A28FC970;
  char v112 = 0;
  uint64_t v15 = operator new(0x198uLL);
  v15[1] = 0;
  v15[2] = 0;
  void *v15 = &unk_1EF583468;
  long long v16 = *(_OWORD *)&a3->colorFormatsCount;
  long long v115 = *(_OWORD *)a3->colorFormats;
  long long v116 = v16;
  uint64_t v17 = ggl::PolygonFill::MeshPipelineState::MeshPipelineState((uint64_t)(v15 + 3), &v113, (uint64_t)v110, &v115);
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = v17;
  *((void *)this + 21) = v15;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v114;
  if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = *(void *)(v8 + 80);
  uint64_t v21 = *(void *)(v20 + 1664);
  uint8x8_t v22 = *(std::__shared_weak_count **)(v20 + 1672);
  uint64_t v113 = v21;
  uint64_t v114 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&v110[28] = 0;
  *(void *)&v110[20] = 0;
  uint64_t v111 = 0;
  v110[0] = 0;
  *(_OWORD *)&v110[4] = xmmword_1A28FC970;
  char v112 = 0;
  uint64_t v23 = operator new(0x198uLL);
  v23[1] = 0;
  _OWORD v23[2] = 0;
  void *v23 = &unk_1EF5834A0;
  long long v24 = *(_OWORD *)&a3->colorFormatsCount;
  long long v115 = *(_OWORD *)a3->colorFormats;
  long long v116 = v24;
  uint64_t v25 = ggl::PolygonFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v23 + 3), &v113, (uint64_t)v110, &v115);
  uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 23);
  *((void *)this + 22) = v25;
  *((void *)this + 23) = v23;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  unint64_t v27 = v114;
  if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = *(void *)(v8 + 80);
  uint64_t v29 = *(void *)(v28 + 1688);
  uint64_t v30 = *(void *)(v28 + 1696);
  *(void *)&long long v115 = v29;
  *((void *)&v115 + 1) = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = (char *)operator new(0x198uLL);
  *((void *)v31 + 1) = 0;
  *((void *)v31 + 2) = 0;
  *(void *)uint64_t v31 = &unk_1EF588558;
  long long v32 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)uint64_t v110 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v110[16] = v32;
  {
    if (v108)
    {
      {
        if (v108)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonShadowedStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B6A0 = 1;
          }
          ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9585FF8 = &ggl::PolygonShadowedStroke::pipelineDataShadowPathPipelineDeviceStructs(void)::ref;
          qword_1E9586000 = 0;
          {
            ggl::PolygonShadowedStroke::pipelineDataShadowPathPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9586030 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9586038 = (uint64_t)ggl::PolygonShadowedStroke::ShadowPath::reflection(void)::reflection;
          }
          qword_1E9586008 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineDataShadowPathPipelineConstantStructs(void)::ref;
          unk_1E9586010 = xmmword_1A28FCD30;
        }
      }
      ggl::PolygonShadowedStroke::ShadowPathPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonShadowedStrokeShader::typedReflection(v108);
      qword_1E958DEE0 = (uint64_t)&ggl::PolygonShadowedStrokeShader::typedReflection(void)::ref;
      {
        ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95860E0 = 0;
        qword_1E95860E8 = (uint64_t)"";
        dword_1E95860F0 = 0;
        qword_1E95860F8 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineAttributeBinding_0(void)::attr;
        unk_1E9586100 = 2;
      }
      qword_1E958DEE8 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineAttributeStructBinding(void)::attr;
      unk_1E958DEF0 = 1;
      qword_1E958DEF8 = 0;
      unk_1E958DF00 = 0;
      qword_1E958DF08 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineDeviceStructBinding(void)::ref;
      unk_1E958DF10 = 0;
      {
        ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9586050 = 0;
        qword_1E9586058 = (uint64_t)"view";
        dword_1E9586060 = 3;
        qword_1E9586068 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9586070 = xmmword_1A28FCEB0;
        qword_1E9586080 = 1;
        unk_1E9586088 = "transform";
        dword_1E9586090 = 3;
        qword_1E9586098 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantTransformBinding(void)::reflection;
        unk_1E95860A0 = xmmword_1A28FCF70;
        qword_1E95860B0 = 2;
        unk_1E95860B8 = "shadowPath";
        dword_1E95860C0 = 3;
        qword_1E95860C8 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantShadowPathBinding(void)::reflection;
        unk_1E95860D0 = 4;
      }
      qword_1E958DF18 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantStructBinding(void)::ref;
      unk_1E958DF20 = 3;
    }
  }
  long long v33 = v115;
  if (*((void *)&v115 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v115 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v31 + 4) = 0;
  *((void *)v31 + 5) = 0;
  *((_DWORD *)v31 + 14) = 0;
  *((void *)v31 + 6) = 0;
  *((void *)v31 + 3) = &unk_1EF55B208;
  *((void *)v31 + 8) = &ggl::PolygonShadowedStroke::ShadowPathPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v31 + 72) = v33;
  if (*((void *)&v33 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v31[136] = 0;
  *(_OWORD *)(v31 + 140) = xmmword_1A28FC970;
  *(void *)(v31 + 156) = 0;
  *(void *)(v31 + 172) = 0;
  *(void *)(v31 + 164) = 0;
  v31[184] = 0;
  *(_OWORD *)(v31 + 188) = xmmword_1A28FC970;
  *(void *)(v31 + 204) = 0;
  *(void *)(v31 + 220) = 0;
  *(void *)(v31 + 212) = 0;
  v31[232] = 0;
  *(_OWORD *)(v31 + 236) = xmmword_1A28FC970;
  *(void *)(v31 + 252) = 0;
  *(void *)(v31 + 268) = 0;
  *(void *)(v31 + 260) = 0;
  long long v34 = *(_OWORD *)&v110[16];
  *(_OWORD *)(v31 + 280) = *(_OWORD *)v110;
  *(_OWORD *)(v31 + 296) = v34;
  v31[312] = 0;
  *((void *)v31 + 48) = 0;
  *((_OWORD *)v31 + 22) = 0u;
  *((_OWORD *)v31 + 23) = 0u;
  *((_OWORD *)v31 + 20) = 0u;
  *((_OWORD *)v31 + 21) = 0u;
  *((void *)v31 + 49) = 0x100000001;
  v31[400] = 0;
  v31[88] = 1;
  *(_WORD *)(v31 + 89) = v113;
  v31[91] = BYTE2(v113);
  *(_OWORD *)(v31 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v31 + 27) = 7;
  *((void *)v31 + 14) = 0;
  *((void *)v31 + 15) = 0;
  *((_DWORD *)v31 + 32) = 0;
  v31[132] = 15;
  if (*((void *)&v33 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v33 + 1) + 16))(*((void *)&v33 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
  }
  v31[328] = a4;
  v31[329] = 0;
  int8x16_t v35 = vceqzq_s8(*(int8x16_t *)(v31 + 328));
  int16x8_t v36 = vmovl_high_s8(v35);
  int32x4_t v37 = vmovl_s16(*(int16x4_t *)v36.i8);
  v38.i64[0] = v37.u32[0];
  v38.i64[1] = v37.u32[1];
  int8x16_t v39 = v38;
  int16x8_t v40 = vmovl_s8(*(int8x8_t *)v35.i8);
  int32x4_t v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v38.i64[0] = v41.u32[0];
  v38.i64[1] = v41.u32[1];
  int8x16_t v42 = v38;
  int32x4_t v43 = vmovl_high_s16(v36);
  v38.i64[0] = v43.u32[0];
  v38.i64[1] = v43.u32[1];
  int8x16_t v44 = v38;
  int32x4_t v45 = vmovl_high_s16(v40);
  v38.i64[0] = v45.u32[0];
  v38.i64[1] = v45.u32[1];
  int8x16_t v46 = v38;
  v38.i64[0] = v37.u32[2];
  v38.i64[1] = v37.u32[3];
  int8x16_t v47 = v38;
  v38.i64[0] = v41.u32[2];
  v38.i64[1] = v41.u32[3];
  int8x16_t v48 = v38;
  v38.i64[0] = v43.u32[2];
  v38.i64[1] = v43.u32[3];
  int8x16_t v49 = v38;
  v38.i64[0] = v45.u32[2];
  v38.i64[1] = v45.u32[3];
  int8x16_t v50 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v38);
  int8x16_t v51 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v49);
  int8x16_t v52 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v48);
  int8x16_t v53 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v44);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(v31 + 344));
  int16x8_t v55 = vmovl_high_s8(v54);
  int32x4_t v56 = vmovl_s16(*(int16x4_t *)v55.i8);
  v38.i64[0] = v56.u32[0];
  v38.i64[1] = v56.u32[1];
  int8x16_t v57 = v38;
  int16x8_t v58 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
  v38.i64[0] = v59.u32[0];
  v38.i64[1] = v59.u32[1];
  int8x16_t v60 = v38;
  int32x4_t v61 = vmovl_high_s16(v55);
  v38.i64[0] = v61.u32[0];
  v38.i64[1] = v61.u32[1];
  int8x16_t v62 = v38;
  int32x4_t v63 = vmovl_high_s16(v58);
  v38.i64[0] = v63.u32[0];
  v38.i64[1] = v63.u32[1];
  int8x16_t v64 = v38;
  v38.i64[0] = v56.u32[2];
  v38.i64[1] = v56.u32[3];
  int8x16_t v65 = v38;
  v38.i64[0] = v59.u32[2];
  v38.i64[1] = v59.u32[3];
  int8x16_t v66 = v38;
  v38.i64[0] = v61.u32[2];
  v38.i64[1] = v61.u32[3];
  int8x16_t v67 = v38;
  v38.i64[0] = v63.u32[2];
  v38.i64[1] = v63.u32[3];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v67);
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v57), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v39));
  int8x16_t v70 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v60), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v42));
  int8x16_t v71 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v62), v53);
  int8x16_t v72 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v64), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v46));
  int8x16_t v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v65), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v47));
  int8x16_t v74 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v66), v52);
  int8x16_t v75 = vorrq_s8(v68, v51);
  int8x16_t v76 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v38), v50);
  int8x16_t v77 = vceqzq_s8(*(int8x16_t *)(v31 + 360));
  int16x8_t v78 = vmovl_high_s8(v77);
  int32x4_t v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v38.i64[0] = v79.i32[0];
  v38.i64[1] = v79.i32[1];
  int8x16_t v80 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v38);
  int8x16_t v81 = vceqzq_s8(*(int8x16_t *)(v31 + 376));
  int16x8_t v82 = vmovl_high_s8(v81);
  int32x4_t v83 = vmovl_s16(*(int16x4_t *)v82.i8);
  v38.i64[0] = v83.i32[0];
  v38.i64[1] = v83.i32[1];
  int8x16_t v84 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v38), v80), v69);
  int16x8_t v85 = vmovl_s8(*(int8x8_t *)v77.i8);
  int32x4_t v86 = vmovl_s16(*(int16x4_t *)v85.i8);
  v38.i64[0] = v86.i32[0];
  v38.i64[1] = v86.i32[1];
  int8x16_t v87 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v38);
  int16x8_t v88 = vmovl_s8(*(int8x8_t *)v81.i8);
  int32x4_t v89 = vmovl_s16(*(int16x4_t *)v88.i8);
  v38.i64[0] = v89.i32[0];
  v38.i64[1] = v89.i32[1];
  int8x16_t v90 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v38), v87), v70);
  int32x4_t v91 = vmovl_high_s16(v78);
  v38.i64[0] = v91.i32[0];
  v38.i64[1] = v91.i32[1];
  int8x16_t v92 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v38);
  int32x4_t v93 = vmovl_high_s16(v82);
  v38.i64[0] = v93.i32[0];
  v38.i64[1] = v93.i32[1];
  int8x16_t v94 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v38), v92), v71);
  int32x4_t v95 = vmovl_high_s16(v85);
  v38.i64[0] = v95.i32[0];
  v38.i64[1] = v95.i32[1];
  int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v38);
  int32x4_t v97 = vmovl_high_s16(v88);
  v38.i64[0] = v97.i32[0];
  v38.i64[1] = v97.i32[1];
  int8x16_t v98 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v38), v96), v72);
  v38.i64[0] = v79.i32[2];
  v38.i64[1] = v79.i32[3];
  int8x16_t v99 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v38);
  v38.i64[0] = v83.i32[2];
  v38.i64[1] = v83.i32[3];
  int8x16_t v100 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v38), v99), v73);
  v38.i64[0] = v86.i32[2];
  v38.i64[1] = v86.i32[3];
  int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v38);
  v38.i64[0] = v89.i32[2];
  v38.i64[1] = v89.i32[3];
  int8x16_t v102 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v38), v101), v74);
  v38.i64[0] = v91.i32[2];
  v38.i64[1] = v91.i32[3];
  int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v38);
  v38.i64[0] = v93.i32[2];
  v38.i64[1] = v93.i32[3];
  int8x16_t v104 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v38), v103), v75);
  v38.i64[0] = v95.i32[2];
  v38.i64[1] = v95.i32[3];
  int8x16_t v105 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v38);
  v38.i64[0] = v97.i32[2];
  v38.i64[1] = v97.i32[3];
  *((void *)v31 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v90, v84), vorrq_s8(v98, v94)), (int64x2_t)vorrq_s8(vorrq_s8(v102, v100), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v38), v105), v76), v104))));
  *((void *)v31 + 3) = &unk_1EF55F868;
  v31[312] = 1;
  unint64_t v106 = (std::__shared_weak_count *)*((void *)this + 25);
  *((void *)this + 24) = v31 + 24;
  *((void *)this + 25) = v31;
  if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }
  uint64_t v107 = (std::__shared_weak_count *)*((void *)&v115 + 1);
  if (*((void *)&v115 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v115 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  operator new();
}

void sub_1A1CE17C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x2F0]);
  std::vector<std::pair<std::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup>,std::unique_ptr<ggl::RenderItem>>>::~vector[abi:nn180100]((void **)(v16 + 256));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a11);
  uint64_t v18 = *(void *)(v16 + 216);
  *(void *)(v16 + 216) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(v16 + 208);
  *(void *)(v16 + 208) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a16);
  uint64_t v20 = *(void *)(v16 + 120);
  *(void *)(v16 + 120) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x250]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x258]);
  uint64_t v21 = *(void *)(v16 + 96);
  *(void *)(v16 + 96) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(v16 + 88);
  *(void *)(v16 + 88) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(void *)(v16 + 80);
  *(void *)(v16 + 80) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(v16 + 72);
  *(void *)(v16 + 72) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(void *)(v16 + 64);
  *(void *)(v16 + 64) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(v16 + 56);
  *(void *)(v16 + 56) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void *)(v16 + 48);
  *(void *)(v16 + 48) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(v16 + 40);
  *(void *)(v16 + 40) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *(void *)(v16 + 32);
  *(void *)(v16 + 32) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x268]);
  std::unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x270]);
  std::unique_ptr<ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x260]);
  std::unique_ptr<ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)v16);

  _Unwind_Resume(a1);
}

void ggl::PolygonShadowedStrokeShader::typedReflection(ggl::PolygonShadowedStrokeShader *this)
{
  {
    if (v1)
    {
      ggl::PolygonShadowedStrokeShader::typedReflection(void)::ref = (uint64_t)"PolygonShadowedStrokeShader";
      ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(v1);
      qword_1EB322EC0 = (uint64_t)&ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<34ul>("PolygonShadowedStrokeShaderVertex");
      dword_1EB322EC8 = (int)v2;
      ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(v2);
      qword_1EB322ED0 = (uint64_t)&ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322ED8 = ggl::crc32::compute<36ul>("PolygonShadowedStrokeShaderFragment");
      qword_1EB322EE0 = (uint64_t)ggl::polygonShadowedStrokeShaderShaderConstants(void)::ref;
      unk_1EB322EE8 = 3;
      qword_1EB322EF0 = (uint64_t)&ggl::polygonShadowedStrokeShaderShaderTextures(void)::ref;
      unk_1EB322EF8 = 0;
      qword_1EB322F00 = (uint64_t)&ggl::polygonShadowedStrokeShaderShaderSamplers(void)::ref;
      unk_1EB322F08 = 0;
    }
  }
}

void ggl::GlowShader::typedReflection(ggl::GlowShader *this)
{
  {
    if (v1)
    {
      ggl::GlowShader::typedReflection(void)::ref = (uint64_t)"GlowShader";
      ggl::glowShaderVertexFunctionDescriptor(v1);
      qword_1EB3203C0 = (uint64_t)&ggl::glowShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<17ul>("GlowShaderVertex");
      dword_1EB3203C8 = (int)v2;
      ggl::glowShaderFragmentFunctionDescriptor(v2);
      qword_1EB3203D0 = (uint64_t)&ggl::glowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3203D8 = ggl::crc32::compute<19ul>("GlowShaderFragment");
      qword_1EB3203E0 = (uint64_t)ggl::glowShaderShaderConstants(void)::ref;
      unk_1EB3203E8 = 3;
      qword_1EB3203F0 = (uint64_t)&ggl::glowShaderShaderTextures(void)::ref;
      unk_1EB3203F8 = 0;
      qword_1EB320400 = (uint64_t)&ggl::glowShaderShaderSamplers(void)::ref;
      unk_1EB320408 = 0;
    }
  }
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9GlowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C828;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Glow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BF28;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonShadowedStroke23ShadowPathPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B9D0;
}

uint64_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Glow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576A70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576A28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5769E0;
  a2[1] = v2;
  return result;
}

void ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonShadowedStrokeShaderFragment");
    *(_DWORD *)algn_1EB329D24 = 1;
    qword_1EB329D28 = (uint64_t)"PolygonShadowedStrokeShader";
    unk_1EB329D30 = 0;
    qword_1EB329D38 = 0;
    unk_1EB329D40 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB329D48 = 1;
    unk_1EB329D50 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB329D58 = 0;
    unk_1EB329D60 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB329D68 = 0;
    unk_1EB329D70 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329D80 = 0;
    unk_1EB329D88 = 0;
    qword_1EB329D78 = 0;
  }
}

void ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("PolygonShadowedStrokeShaderVertex");
    *(_DWORD *)algn_1EB32933C = 0;
    qword_1EB329340 = (uint64_t)"PolygonShadowedStrokeShader";
    unk_1EB329348 = ggl::polygonShadowedStrokeShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB329350 = 1;
    unk_1EB329358 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB329360 = 3;
    unk_1EB329368 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB329370 = 0;
    unk_1EB329378 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB329380 = 0;
    unk_1EB329388 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB329398 = 0;
    unk_1EB3293A0 = 0;
    qword_1EB329390 = 0;
  }
}

void ggl::glowShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::glowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("GlowShaderFragment");
    *(_DWORD *)algn_1EB324414 = 1;
    qword_1EB324418 = (uint64_t)"GlowShader";
    unk_1EB324420 = 0;
    qword_1EB324428 = 0;
    unk_1EB324430 = &ggl::glowShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB324438 = 1;
    unk_1EB324440 = &ggl::glowShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB324448 = 0;
    unk_1EB324450 = &ggl::glowShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB324458 = 0;
    unk_1EB324460 = &ggl::glowShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324470 = 0;
    unk_1EB324478 = 0;
    qword_1EB324468 = 0;
  }
}

void ggl::glowShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::glowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("GlowShaderVertex");
    *(_DWORD *)algn_1EB323D4C = 0;
    qword_1EB323D50 = (uint64_t)"GlowShader";
    unk_1EB323D58 = ggl::glowShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB323D60 = 1;
    unk_1EB323D68 = &ggl::glowShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB323D70 = 3;
    unk_1EB323D78 = &ggl::glowShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB323D80 = 0;
    unk_1EB323D88 = &ggl::glowShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB323D90 = 0;
    unk_1EB323D98 = &ggl::glowShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB323DA8 = 0;
    unk_1EB323DB0 = 0;
    qword_1EB323DA0 = 0;
  }
}

void md::CVenueRenderResources::CVenueRenderResources(md::CVenueRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)((char *)this + 324);
  uint64_t v6 = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = &unk_1EF55A890;
  *(void *)((char *)this + 108) = 65537;
  *((_DWORD *)this + 29) = 0;
  *((void *)this + 15) = 1;
  *((_WORD *)this + 64) = 0;
  *((unsigned char *)this + 130) = 3;
  *(void *)((char *)this + 139) = 0;
  *(void *)((char *)this + 131) = 0;
  *((unsigned char *)this + 147) = 0;
  *(void *)((char *)this + 204) = 0;
  *(void *)((char *)this + 196) = 0;
  *((_WORD *)this + 130) = 257;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((unsigned char *)this + 280) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((_DWORD *)this + 80) = 0;
  *((void *)this + 36) = &unk_1EF55A890;
  *((void *)this + 37) = 0;
  void *v5 = 65537;
  *((_DWORD *)this + 83) = 0;
  *((void *)this + 42) = 0xFF00FF0000000400;
  *((_WORD *)this + 172) = 0;
  *((unsigned char *)this + 346) = 3;
  *(void *)((char *)this + 347) = 0;
  *(void *)((char *)this + 355) = 0;
  *((unsigned char *)this + 363) = 0;
  *(void *)((char *)this + 420) = 0;
  *(void *)((char *)this + 412) = 0;
  *((_WORD *)this + 238) = 257;
  *((unsigned char *)this + 496) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  uint64_t v7 = *(void *)([(VKSharedResources *)v6 shaderLibrary] + 80);
  uint64_t v8 = *(void *)(v7 + 1664);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 1672);
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  v18[0] = 1;
  *(_OWORD *)&v18[4] = xmmword_1A28FCEC0;
  int v19 = 7;
  char v23 = 15;
  uint64_t v10 = operator new(0x198uLL);
  v10[1] = 0;
  v10[2] = 0;
  *uint64_t v10 = &unk_1EF583468;
  long long v11 = *(_OWORD *)&a3->colorFormatsCount;
  v24[0] = *(_OWORD *)a3->colorFormats;
  v24[1] = v11;
  uint64_t v12 = ggl::PolygonFill::MeshPipelineState::MeshPipelineState((uint64_t)(v10 + 3), &v16, (uint64_t)v18, v24);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = v12;
  *((void *)this + 5) = v10;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v6) {
      goto LABEL_13;
    }
  }
  else if (!v6)
  {
    goto LABEL_13;
  }
  [(VKSharedResources *)v6 textureManager];
  uint64_t v15 = *(std::__shared_weak_count **)&v18[8];
  if (*(void *)&v18[8])
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v18[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_13:
  operator new();
}

void sub_1A1CE520C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, md::VenueWallRenderResources *a9, ggl::RenderDataHolder *a10, ggl::RenderDataHolder *a11, uint64_t a12, ggl::RenderDataHolder *a13, void *a14, uint64_t *a15, md::VenueOpenToBelowRenderResources *a16, uint64_t *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a29);
  ggl::RenderDataHolder::~RenderDataHolder(v38);
  std::unique_ptr<ggl::FragmentedPool<ggl::VenueOpenToBelowShadow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v37 + 2472);
  ggl::RenderDataHolder::~RenderDataHolder(a10);
  std::unique_ptr<ggl::FragmentedPool<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v37 + 2232);
  ggl::RenderDataHolder::~RenderDataHolder(a11);
  std::unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)a16);

  md::VenueWallRenderResources::~VenueWallRenderResources(a9);
  md::VenueDimmingOverlayRenderResources::~VenueDimmingOverlayRenderResources(v37);

  _Unwind_Resume(a1);
}

uint64_t ggl::PolygonFill::MeshPipelineState::MeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int16x8_t v82 = a4;
    int8x16_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r;
            *(void *)algn_1EB32B470 = 1;
          }
          ggl::PolygonFill::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r;
          unk_1E9581AD0 = &ggl::PolygonFill::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1E9581AD8 = 0;
          {
            ggl::PolygonFill::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9581B38 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9581B40 = (uint64_t)ggl::PolygonFill::Fill::reflection(void)::reflection;
          }
          qword_1E9581AE0 = (uint64_t)&ggl::PolygonFill::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1E9581AE8 = xmmword_1A28FCEF0;
        }
      }
      ggl::PolygonFill::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonFill::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonFillShader::typedReflection(v83);
      qword_1EB3187D8 = (uint64_t)&ggl::PolygonFillShader::typedReflection(void)::ref;
      {
        ggl::PolygonFill::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9581BE8 = 0;
        qword_1E9581BF0 = (uint64_t)"";
        dword_1E9581BF8 = 0;
        qword_1E9581C00 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9581C08 = 1;
      }
      qword_1EB3187E0 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB3187E8 = 1;
      qword_1EB3187F0 = 0;
      unk_1EB3187F8 = 1;
      qword_1EB318800 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318808 = 0;
      {
        ggl::PolygonFill::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9581B58 = 0;
        qword_1E9581B60 = (uint64_t)"view";
        dword_1E9581B68 = 3;
        qword_1E9581B70 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9581B78 = xmmword_1A28FCEB0;
        qword_1E9581B88 = 1;
        unk_1E9581B90 = "transform";
        dword_1E9581B98 = 3;
        qword_1E9581BA0 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1E9581BA8 = xmmword_1A28FCF70;
        qword_1E9581BB8 = 2;
        unk_1E9581BC0 = "fill";
        dword_1E9581BC8 = 3;
        qword_1E9581BD0 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineConstantFillBinding(void)::reflection;
        unk_1E9581BD8 = 5;
      }
      qword_1EB318810 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB318818 = 3;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int16x8_t v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::PolygonFill::MeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55A820;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::PolygonSolidFill::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int16x8_t v82 = a4;
    int8x16_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::PolygonSolidFill::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          *(void *)algn_1E9583AE8 = &ggl::PolygonSolidFill::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1E9583AF0 = 0;
          {
            ggl::PolygonSolidFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9583CB0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9583CB8 = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
          }
          qword_1E9583AF8 = (uint64_t)&ggl::PolygonSolidFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1E9583B00 = xmmword_1A28FCD30;
        }
      }
      ggl::PolygonSolidFill::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonSolidFill::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonSolidFillShader::typedReflection(v83);
      qword_1EB318DB0 = (uint64_t)&ggl::PolygonSolidFillShader::typedReflection(void)::ref;
      {
        ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9583D90 = 0;
        qword_1E9583D98 = (uint64_t)"";
        dword_1E9583DA0 = 0;
        qword_1E9583DA8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9583DB0 = 1;
      }
      qword_1EB318DB8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EB318DC0 = 1;
      qword_1EB318DC8 = 0;
      unk_1EB318DD0 = 0;
      qword_1EB318DD8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318DE0 = 0;
      {
        ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9583D00 = 0;
        qword_1E9583D08 = (uint64_t)"view";
        dword_1E9583D10 = 3;
        qword_1E9583D18 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9583D20 = xmmword_1A28FCEB0;
        qword_1E9583D30 = 1;
        unk_1E9583D38 = "transform";
        dword_1E9583D40 = 3;
        qword_1E9583D48 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1E9583D50 = xmmword_1A28FCF70;
        qword_1E9583D60 = 2;
        unk_1E9583D68 = "solidFill";
        dword_1E9583D70 = 3;
        qword_1E9583D78 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantSolidFillBinding(void)::reflection;
        unk_1E9583D80 = 5;
      }
      qword_1EB318DE8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB318DF0 = 3;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int16x8_t v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::PolygonSolidFill::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55D498;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_27VenueOpenToBelowShadowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BDC0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22VenueOpenToBelowShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BB38;
}

uint64_t std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578690;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578648;
  a2[1] = v2;
  return result;
}

uint64_t ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::MeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int8x16_t v84 = a4;
    long long v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
          unk_1EB32B680 = 1;
        }
        ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
        *(void *)algn_1E9587518 = &ggl::VenueOpenToBelowShadowAlpha::pipelineDataMeshPipelineDeviceStructs(void)::ref;
        qword_1E9587520 = 0;
        {
          ggl::VenueOpenToBelowShadowAlpha::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1E9587550 = ggl::VenueOpenToBelowShadow::Style::reflection(void)::reflection;
        }
        qword_1E9587528 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineDataMeshPipelineConstantStructs(void)::ref;
        unk_1E9587530 = xmmword_1A28FCED0;
      }
      ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::typedReflection(void)::ref;
      {
        ggl::VenueOpenToBelowShadowAlphaShader::typedReflection(void)::ref = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
        {
          qword_1EB32ABC0 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
          unk_1EB32ABC8 = ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32ABD0 = 1;
          unk_1EB32ABD8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32ABE0 = 2;
          unk_1EB32ABE8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32ABF0 = 0;
          unk_1EB32ABF8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref = 1346813876;
          qword_1EB32AC00 = 0;
          unk_1EB32AC08 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AC18 = 0;
          unk_1EB32AC20 = 0;
          qword_1EB32AC10 = 0;
        }
        qword_1EB323750 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB323758 = 1346813876;
        {
          ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x19B3262D4;
          qword_1EB32AEE8 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
          unk_1EB32AEF0 = 0;
          qword_1EB32AEF8 = 0;
          unk_1EB32AF00 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AF08 = 0;
          unk_1EB32AF10 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AF18 = 0;
          unk_1EB32AF20 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AF28 = 0;
          unk_1EB32AF30 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AF40 = 0;
          unk_1EB32AF48 = 0;
          qword_1EB32AF38 = 0;
        }
        qword_1EB323760 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB323768 = -1691196716;
        qword_1EB323770 = (uint64_t)ggl::venueOpenToBelowShadowAlphaShaderShaderConstants(void)::ref;
        unk_1EB323778 = 2;
        qword_1EB323780 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderShaderTextures(void)::ref;
        unk_1EB323788 = 0;
        qword_1EB323790 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderShaderSamplers(void)::ref;
        unk_1EB323798 = 0;
      }
      qword_1E958DBF0 = (uint64_t)&ggl::VenueOpenToBelowShadowAlphaShader::typedReflection(void)::ref;
      {
        ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95875C0 = 0;
        qword_1E95875C8 = (uint64_t)"";
        dword_1E95875D0 = 0;
        qword_1E95875D8 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E95875E0 = 3;
      }
      qword_1E958DBF8 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1E958DC00 = 1;
      qword_1E958DC08 = 0;
      unk_1E958DC10 = 0;
      qword_1E958DC18 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1E958DC20 = 0;
      {
        ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9587560 = 0;
        qword_1E9587568 = (uint64_t)"view";
        dword_1E9587570 = 3;
        qword_1E9587578 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9587580 = xmmword_1A28FCEB0;
        qword_1E9587590 = 1;
        unk_1E9587598 = "style";
        dword_1E95875A0 = 3;
        qword_1E95875A8 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1E95875B0 = 2;
      }
      qword_1E958DC28 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1E958DC30 = 2;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  char v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int8x16_t v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  *(void *)a1 = &unk_1EF560098;
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void md::DaVinciGroundTileData::_buildTileMeshes(uint64_t a1, geo::codec::VectorTile **a2)
{
  uint64_t v2 = a2;
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = geo::codec::VectorTile::daVinciVertexCount(*a2);
  unsigned int v4 = geo::codec::VectorTile::daVinciMeshCount(*v2);
  uint64_t v5 = (uint16x4_t *)geo::codec::VectorTile::daVinciIndices(*v2);
  uint64_t v116 = geo::codec::VectorTile::daVinciVertices(*v2);
  geo::codec::VectorTile::key(*v2);
  uint64_t v6 = +[VKDebugSettings sharedSettings];
  [v6 daVinciSmoothEdgeMinZ];
  [v6 daVinciSmoothEdgeMaxZ];
  [v6 daVinciSmoothEdgeMinZAngle];
  [v6 daVinciSmoothEdgeMaxZAngle];

  unint64_t v136 = 0;
  long long v135 = 0;
  uint64_t v137 = 0;
  char v112 = v2;
  long long v115 = v5;
  unsigned int v110 = v4;
  if (v4)
  {
    uint64_t v7 = 0;
    std::string __p = 0;
    char v8 = 0;
    uint64_t v118 = 0;
    uint64_t v108 = 0;
    long long v9 = 0;
    uint64_t v117 = 0;
    size_t v111 = v4;
    uint64_t v10 = v116;
    do
    {
      uint64_t v11 = geo::codec::VectorTile::daVinciMeshes(*v2);
      uint64_t v13 = v11 + (v7 << 6);
      int32x4_t v14 = (unsigned int *)(v13 + 12);
      uint64_t v15 = (*(_DWORD *)(v13 + 16) + *(_DWORD *)(v13 + 12));
      uint64_t v122 = v15;
      uint64_t v119 = (unsigned int *)(v13 + 12);
      if (*(unsigned char *)v13)
      {
        if (v8 >= v118)
        {
          uint64_t v19 = (v8 - __p) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            abort();
          }
          if ((v118 - __p) >> 2 > v20) {
            unint64_t v20 = (v118 - __p) >> 2;
          }
          if ((unint64_t)(v118 - __p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21)
          {
            if (v21 >> 61) {
              goto LABEL_131;
            }
            int32x4_t v22 = (char *)operator new(8 * v21);
            uint64_t v15 = v122;
          }
          else
          {
            int32x4_t v22 = 0;
          }
          int8x16_t v27 = &v22[8 * v19];
          *(void *)int8x16_t v27 = 0;
          int8x16_t v28 = v27 + 8;
          for (uint64_t i = __p; v8 != __p; v27[4] = v31)
          {
            int v30 = *((_DWORD *)v8 - 2);
            v8 -= 8;
            char v31 = v8[4];
            *((_DWORD *)v27 - 2) = v30;
            v27 -= 8;
            uint64_t i = __p;
          }
          uint64_t v118 = &v22[8 * v21];
          if (i)
          {
            operator delete(i);
            uint64_t v15 = v122;
          }
          char v8 = v28;
          int8x16_t v16 = v27;
          uint64_t v10 = v116;
          int32x4_t v14 = v119;
        }
        else
        {
          *(void *)char v8 = 0;
          v8 += 8;
          int8x16_t v16 = __p;
        }
      }
      else
      {
        int16x8_t v17 = v136;
        unint64_t v18 = (char *)v136 - (unsigned char *)v135;
        if (v8 >= v118)
        {
          uint64_t v23 = (v8 - __p) >> 3;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61) {
            abort();
          }
          if ((v118 - __p) >> 2 > v24) {
            unint64_t v24 = (v118 - __p) >> 2;
          }
          if ((unint64_t)(v118 - __p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            if (v25 >> 61) {
              goto LABEL_131;
            }
            int8x16_t v26 = (char *)operator new(8 * v25);
            uint64_t v15 = v122;
          }
          else
          {
            int8x16_t v26 = 0;
          }
          int16x8_t v32 = &v26[8 * v23];
          *(void *)int16x8_t v32 = (v18 >> 4) | 0x100000000;
          int32x4_t v33 = v32 + 8;
          for (uint64_t j = __p; v8 != __p; v32[4] = v36)
          {
            int v35 = *((_DWORD *)v8 - 2);
            v8 -= 8;
            char v36 = v8[4];
            *((_DWORD *)v32 - 2) = v35;
            v32 -= 8;
            uint64_t j = __p;
          }
          uint64_t v118 = &v26[8 * v25];
          if (j)
          {
            operator delete(j);
            uint64_t v15 = v122;
          }
          std::string __p = v32;
          char v8 = v33;
          uint64_t v10 = v116;
          int32x4_t v14 = v119;
        }
        else
        {
          *(void *)char v8 = (v18 >> 4) | 0x100000000;
          v8 += 8;
          int16x8_t v17 = v136;
        }
        int v37 = *v14;
        uint64_t v38 = v11 + (v7 << 6);
        int v39 = *(_DWORD *)(v38 + 4);
        char v40 = *(unsigned char *)(v38 + 24);
        if (v17 >= (_DWORD *)v137)
        {
          int8x16_t v42 = v135;
          uint64_t v43 = ((char *)v17 - (unsigned char *)v135) >> 4;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60) {
            abort();
          }
          uint64_t v45 = v137 - (unsigned char *)v135;
          if ((v137 - (unsigned char *)v135) >> 3 > v44) {
            unint64_t v44 = v45 >> 3;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v46)
          {
            int v113 = *v14;
            uint64_t v114 = v11;
            if (v46 >> 60) {
              goto LABEL_131;
            }
            int v47 = v39;
            char v48 = v40;
            unint64_t v49 = v46;
            int8x16_t v50 = (char *)operator new(16 * v46);
            uint64_t v15 = v122;
            unint64_t v46 = v49;
            char v40 = v48;
            int v39 = v47;
            uint64_t v11 = v114;
            int v37 = v113;
          }
          else
          {
            int8x16_t v50 = 0;
          }
          int8x16_t v51 = &v50[16 * v43];
          *(_DWORD *)int8x16_t v51 = v37;
          *((_DWORD *)v51 + 1) = v15;
          *((_DWORD *)v51 + 2) = v39;
          v51[12] = v40;
          int8x16_t v52 = v51;
          if (v17 == v42)
          {
            uint64_t v2 = v112;
            uint64_t v5 = v115;
          }
          else
          {
            uint64_t v2 = v112;
            uint64_t v5 = v115;
            do
            {
              uint64_t v53 = *((void *)v17 - 2);
              v17 -= 4;
              uint64_t v54 = *(void *)((char *)v17 + 5);
              *((void *)v52 - 2) = v53;
              v52 -= 16;
              *(void *)(v52 + 5) = v54;
            }
            while (v17 != v42);
            int16x8_t v17 = v42;
          }
          int8x16_t v41 = v51 + 16;
          long long v135 = v52;
          uint64_t v137 = &v50[16 * v46];
          uint64_t v10 = v116;
          if (v17)
          {
            operator delete(v17);
            uint64_t v15 = v122;
          }
          int8x16_t v16 = __p;
          int32x4_t v14 = v119;
        }
        else
        {
          *int16x8_t v17 = v37;
          v17[1] = v15;
          v17[2] = v39;
          int8x16_t v41 = v17 + 4;
          *((unsigned char *)v17 + 12) = v40;
          int8x16_t v16 = __p;
          uint64_t v2 = v112;
        }
        unint64_t v136 = v41;
      }
      std::string __p = v16;
      if (v9 >= v117)
      {
        unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v108) >> 3) + 1;
        if (v56 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v117 - v108) >> 3) > v56) {
          unint64_t v56 = 0x5555555555555556 * ((v117 - v108) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v117 - v108) >> 3) >= 0x555555555555555) {
          unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57)
        {
          if (v57 > 0xAAAAAAAAAAAAAAALL) {
LABEL_131:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          int16x8_t v58 = (char *)operator new(24 * v57);
        }
        else
        {
          int16x8_t v58 = 0;
        }
        int32x4_t v59 = &v58[8 * ((v9 - v108) >> 3)];
        int8x16_t v55 = (int8x16_t)xmmword_1A28FC710;
        *(_OWORD *)int32x4_t v59 = xmmword_1A28FC710;
        *((void *)v59 + 2) = 0x80000000800000;
        if (v9 == v108)
        {
          int8x16_t v62 = &v58[8 * ((v9 - v108) >> 3)];
          int32x4_t v61 = v108;
        }
        else
        {
          int8x16_t v60 = &v58[8 * ((v9 - v108) >> 3)];
          int32x4_t v61 = v108;
          do
          {
            int8x16_t v62 = v60 - 24;
            int8x16_t v55 = *(int8x16_t *)(v9 - 24);
            *((void *)v60 - 1) = *((void *)v9 - 1);
            *(int8x16_t *)(v60 - 24) = v55;
            v9 -= 24;
            v60 -= 24;
          }
          while (v9 != v108);
        }
        uint64_t v117 = &v58[24 * v57];
        long long v9 = v59 + 24;
        if (v61) {
          operator delete(v61);
        }
        uint64_t v108 = v62;
        uint64_t v15 = v122;
        int32x4_t v14 = v119;
      }
      else
      {
        int8x16_t v55 = (int8x16_t)xmmword_1A28FC710;
        *(_OWORD *)long long v9 = xmmword_1A28FC710;
        *((void *)v9 + 2) = 0x80000000800000;
        v9 += 24;
      }
      uint64_t v63 = *v14;
      if (v63 < v15)
      {
        uint64_t v64 = v15 - v63;
        int8x16_t v65 = (unsigned __int16 *)v5 + v63;
        do
        {
          int v67 = *v65++;
          int v66 = v67;
          if (v67 != 0xFFFF)
          {
            uint64_t v68 = v10 + 12 * (*(_DWORD *)(v11 + (v7 << 6) + 4) + v66);
            v55.i32[0] = *(_DWORD *)v68;
            float32x4_t v69 = *(float32x4_t *)(v9 - 24);
            v69.i32[3] = *(_DWORD *)v68;
            v12.i64[0] = *(void *)(v68 + 4);
            int8x16_t v70 = vextq_s8(vextq_s8(v55, v55, 4uLL), v12, 0xCuLL);
            float32x4_t v71 = (float32x4_t)v70;
            v71.i32[3] = HIDWORD(*(_OWORD *)(v9 - 24));
            v70.i32[3] = v70.i32[0];
            int8x16_t v55 = vbslq_s8((int8x16_t)vcgtq_f32(v69, v71), v70, *(int8x16_t *)(v9 - 24));
            *(int8x16_t *)(v9 - 24) = v55;
            *(float32x2_t *)v55.i8 = vmaxnm_f32(*(float32x2_t *)(v9 - 8), *(float32x2_t *)v12.i8);
            *((void *)v9 - 1) = v55.i64[0];
          }
          --v64;
        }
        while (v64);
      }
      ++v7;
    }
    while (v7 != v111);
    *(_OWORD *)long long v132 = 0u;
    *(_OWORD *)long long v133 = 0u;
    float v134 = 1.0;
    unsigned int v4 = v110;
    if (v110 == 1)
    {
      size_t prime = 2;
      size_t v73 = 1;
      goto LABEL_103;
    }
    size_t v73 = v111;
  }
  else
  {
    size_t v73 = 0;
    *(_OWORD *)long long v132 = 0u;
    *(_OWORD *)long long v133 = 0u;
    float v134 = 1.0;
  }
  if ((v73 & (v73 - 1)) != 0)
  {
    size_t prime = std::__next_prime(v73);
    int32x4_t v74 = v132[1];
    BOOL v75 = (void *)prime >= v132[1];
    if ((void *)prime > v132[1]) {
      goto LABEL_103;
    }
  }
  else
  {
    int32x4_t v74 = 0;
    size_t prime = v73;
    BOOL v75 = 1;
    if (v73) {
      goto LABEL_103;
    }
  }
  if (v75) {
    goto LABEL_104;
  }
  unint64_t v76 = vcvtps_u32_f32((float)(unint64_t)v133[1] / v134);
  if ((unint64_t)v74 < 3
    || (uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v74), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
  {
    unint64_t v76 = std::__next_prime(v76);
  }
  else
  {
    uint64_t v78 = 1 << -(char)__clz(v76 - 1);
    if (v76 >= 2) {
      unint64_t v76 = v78;
    }
  }
  if (prime <= v76) {
    size_t prime = v76;
  }
  if (prime >= (unint64_t)v74)
  {
LABEL_104:
    if (v4)
    {
      uint64_t v79 = 4;
      size_t v80 = v73;
      do
      {
        uint64_t v81 = geo::codec::VectorTile::daVinciMeshes(*v2);
        unsigned int v82 = *(_DWORD *)(v81 + v79);
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v132, v82, (_DWORD *)(v81 + v79))+ 5) = v82;
        v79 += 64;
        --v80;
      }
      while (v80);
    }
    v131[1] = 0;
    v131[0] = 0;
    unint64_t v130 = v131;
    LODWORD(v83) = geo::codec::VectorTile::explicitTextureDataCount(*v2);
    uint64_t v84 = geo::codec::VectorTile::explicitTextureData(*v2);
    if (v83)
    {
      uint64_t v85 = v84;
      uint64_t v83 = v83;
      do
      {
        LODWORD(buf.__begin_) = *(_DWORD *)v85;
        HIDWORD(buf.__begin_) = *(_DWORD *)v85 + *(unsigned __int16 *)(v85 + 4);
        buf.__end_ = (std::vector<unsigned int>::pointer)v85;
        LODWORD(v143) = 0;
        geo::range_map<unsigned int,md::DaVinciGroundTileData::TextureMappingData,std::less<unsigned int>,std::allocator<std::pair<gm::Range<unsigned int> const,md::DaVinciGroundTileData::TextureMappingData>>>::insert((uint64_t *)&v130, (uint64_t)&buf);
        v85 += 16;
        --v83;
      }
      while (v83);
    }
    LODWORD(v86) = geo::codec::VectorTile::directionalXYTextureDataCount(*v2);
    uint64_t v87 = geo::codec::VectorTile::directionalXYTextureData(*v2);
    if (v86)
    {
      uint64_t v86 = v86;
      long long v88 = (_OWORD *)(v87 + 8);
      do
      {
        long long v89 = *v88;
        LODWORD(buf.__begin_) = *((_DWORD *)v88 - 2);
        HIDWORD(buf.__begin_) = *((_DWORD *)v88 - 2) + *((unsigned __int16 *)v88 - 2);
        *(_OWORD *)&buf.__end_ = v89;
        LODWORD(v143) = 1;
        geo::range_map<unsigned int,md::DaVinciGroundTileData::TextureMappingData,std::less<unsigned int>,std::allocator<std::pair<gm::Range<unsigned int> const,md::DaVinciGroundTileData::TextureMappingData>>>::insert((uint64_t *)&v130, (uint64_t)&buf);
        long long v88 = (_OWORD *)((char *)v88 + 24);
        --v86;
      }
      while (v86);
    }
    int8x16_t v90 = (geo::codec::Allocator *)geo::codec::VectorTile::daVinciIndexCount(*v2);
    unsigned int v91 = v90;
    if (v3)
    {
      int8x16_t v90 = (geo::codec::Allocator *)operator new(12 * v3);
      uint64_t v120 = v90;
    }
    else
    {
      uint64_t v120 = 0;
    }
    memset(v129, 0, sizeof(v129));
    memset(v128, 0, 24);
    v128[3] = geo::codec::Allocator::instance(v90);
    uint64_t v127 = 0;
    long long v125 = 0u;
    *(_OWORD *)float v126 = 0u;
    if (v3)
    {
      int8x16_t v94 = *(int8x16_t *)(a1 + 1180);
      float32x2_t v95 = *(float32x2_t *)(a1 + 1196);
      uint64_t v96 = v3;
      int32x4_t v97 = (float32x2_t *)((char *)v120 + 4);
      int8x16_t v98 = (void *)(v116 + 4);
      do
      {
        v92.i32[0] = *((_DWORD *)v98 - 1);
        v99.i32[0] = v92.i32[0];
        float32x2_t v100 = *(float32x2_t *)v98;
        int8x16_t v98 = (void *)((char *)v98 + 12);
        *(float32x2_t *)v93.i8 = v100;
        v97[-1].i32[1] = v92.i32[0];
        v99.i32[1] = v100.i32[0];
        *int32x4_t v97 = v100;
        int32x4_t v97 = (float32x2_t *)((char *)v97 + 12);
        v99.i64[1] = __PAIR64__(v94.u32[3], v100.u32[1]);
        float32x4_t v101 = (float32x4_t)v94;
        v101.i32[3] = v92.i32[0];
        int8x16_t v92 = vextq_s8(vextq_s8(v92, v92, 4uLL), v93, 0xCuLL);
        v92.i32[3] = v92.i32[0];
        int8x16_t v94 = vbslq_s8((int8x16_t)vcgtq_f32(v101, v99), v92, v94);
        *(int8x16_t *)(a1 + 1180) = v94;
        float32x2_t v95 = vmaxnm_f32(v95, v100);
        *(float32x2_t *)(a1 + 1196) = v95;
        --v96;
      }
      while (v96);
    }
    memset(&buf, 0, sizeof(buf));
    v123[0] = *(_WORD *)(a1 + 168);
    uint64_t v124 = *(void *)(a1 + 172);
    md::debugString<geo::QuadTile>(v138, (char *)v123);
    if (v139 >= 0) {
      int8x16_t v102 = v138;
    }
    else {
      int8x16_t v102 = (void **)v138[0];
    }
    size_t v103 = strlen((const char *)v102);
    if (v103 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v104 = v103;
    if (v103 >= 0x17)
    {
      uint64_t v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v103 | 7) != 0x17) {
        uint64_t v106 = v103 | 7;
      }
      uint64_t v107 = v106 + 1;
      int8x16_t v105 = operator new(v106 + 1);
      unint64_t v141 = v107 | 0x8000000000000000;
      __dst[0] = v105;
      __dst[1] = v104;
      uint64_t v5 = v115;
    }
    else
    {
      HIBYTE(v141) = v103;
      int8x16_t v105 = __dst;
      if (!v103)
      {
LABEL_130:
        *((unsigned char *)v105 + v104) = 0;
        md::DaVinciGroundTileData::_buildNormals((uint64_t)v120, v3, v91, (uint64_t)&v135, v5, (int)v132, (int)v129, (int)v128, &buf, a1 + 928, (uint64_t)__dst, (uint64_t)&v125);
      }
    }
    memmove(v105, v102, v104);
    goto LABEL_130;
  }
LABEL_103:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v132, prime);
  goto LABEL_104;
}

void sub_1A1CF0BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, ggl::BufferMemory *a15, ggl::BufferMemory *a16, ggl::BufferMemory *a17, ggl::BufferMemory *a18, void *a19, ggl::BufferMemory *a20,ggl::BufferMemory *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,ggl::BufferMemory *a33,uint64_t a34,ggl::BufferMemory *a35,uint64_t a36,ggl::BufferMemory *a37,uint64_t a38,ggl::BufferMemory *a39,uint64_t a40,ggl::BufferMemory *a41,uint64_t a42,ggl::BufferMemory *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x280])
  {
    operator delete((void *)STACK[0x280]);
    int v66 = *(void **)(v64 - 192);
    if (!v66)
    {
LABEL_3:
      int v67 = *(void **)(v64 - 216);
      if (!v67) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else
  {
    int v66 = *(void **)(v64 - 192);
    if (!v66) {
      goto LABEL_3;
    }
  }
  *(void *)(v64 - 184) = v66;
  operator delete(v66);
  int v67 = *(void **)(v64 - 216);
  if (!v67)
  {
LABEL_4:
    uint64_t v68 = *(void **)(v64 - 240);
    if (!v68) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  *(void *)(v64 - 208) = v67;
  operator delete(v67);
  uint64_t v68 = *(void **)(v64 - 240);
  if (!v68)
  {
LABEL_5:
    float32x4_t v69 = (void *)STACK[0x2C0];
    if (!STACK[0x2C0])
    {
LABEL_7:
      int8x16_t v70 = (std::__shared_weak_count *)STACK[0x2B8];
      if (STACK[0x2B8] && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      unint64_t v71 = STACK[0x2E0];
      if (STACK[0x2E0])
      {
        STACK[0x2E8] = v71;
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)STACK[0x2F8] + 40))(STACK[0x2F8], v71, STACK[0x2F0] - v71);
        int8x16_t v72 = (void *)STACK[0x300];
        if (!STACK[0x300])
        {
LABEL_12:
          size_t v73 = a64;
          if (!a64) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
      }
      else
      {
        int8x16_t v72 = (void *)STACK[0x300];
        if (!STACK[0x300]) {
          goto LABEL_12;
        }
      }
      STACK[0x308] = (unint64_t)v72;
      operator delete(v72);
      size_t v73 = a64;
      if (!a64)
      {
LABEL_14:
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)STACK[0x320]);
        int32x4_t v74 = (void *)STACK[0x340];
        if (STACK[0x340])
        {
          do
          {
            BOOL v75 = (void *)*v74;
            operator delete(v74);
            int32x4_t v74 = v75;
          }
          while (v75);
        }
        unint64_t v76 = (void *)STACK[0x330];
        STACK[0x330] = 0;
        if (v76)
        {
          operator delete(v76);
          uint8x8_t v77 = a14;
          if (!a14)
          {
LABEL_18:
            uint64_t v78 = a19;
            if (!a19) {
              goto LABEL_19;
            }
            goto LABEL_23;
          }
        }
        else
        {
          uint8x8_t v77 = a14;
          if (!a14) {
            goto LABEL_18;
          }
        }
        operator delete(v77);
        uint64_t v78 = a19;
        if (!a19)
        {
LABEL_19:
          uint64_t v79 = (void *)STACK[0x358];
          if (!STACK[0x358]) {
            goto LABEL_20;
          }
          goto LABEL_24;
        }
LABEL_23:
        operator delete(v78);
        uint64_t v79 = (void *)STACK[0x358];
        if (!STACK[0x358]) {
LABEL_20:
        }
          _Unwind_Resume(a1);
LABEL_24:
        STACK[0x360] = (unint64_t)v79;
        operator delete(v79);
        _Unwind_Resume(a1);
      }
LABEL_13:
      operator delete(v73);
      goto LABEL_14;
    }
LABEL_6:
    STACK[0x2C8] = (unint64_t)v69;
    operator delete(v69);
    goto LABEL_7;
  }
LABEL_31:
  *(void *)(v64 - 232) = v68;
  operator delete(v68);
  float32x4_t v69 = (void *)STACK[0x2C0];
  if (!STACK[0x2C0]) {
    goto LABEL_7;
  }
  goto LABEL_6;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    long long v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v6);
  if (v23)
  {
    *uint64_t v10 = *v23;
LABEL_58:
    void *v23 = v10;
    goto LABEL_59;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v6) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A1CF1530(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ggl::Mesh::setCustomDeviceData(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  unint64_t v3 = *a2;
  if (*a2)
  {
    uint8x8_t v8 = (uint64_t **)(a1 + 120);
    unint64_t v7 = *(uint64_t **)(a1 + 120);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          long long v9 = (uint64_t **)v7;
          unint64_t v10 = v7[4];
          if (v10 <= (unint64_t)a3) {
            break;
          }
          unint64_t v7 = *v9;
          uint8x8_t v8 = v9;
          if (!*v9) {
            goto LABEL_9;
          }
        }
        if (v10 >= (unint64_t)a3) {
          break;
        }
        unint64_t v7 = v9[1];
        if (!v7)
        {
          uint8x8_t v8 = v9 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      long long v9 = (uint64_t **)(a1 + 120);
LABEL_9:
      unint64_t v11 = (uint64_t *)v9;
      long long v9 = (uint64_t **)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 128) + 16))(*(void *)(a1 + 128), 56, 8);
      v9[5] = 0;
      v9[6] = 0;
      void v9[4] = a3;
      *long long v9 = 0;
      v9[1] = 0;
      v9[2] = v11;
      char *v8 = (uint64_t *)v9;
      uint64_t v12 = **(void **)(a1 + 112);
      float v13 = (uint64_t *)v9;
      if (v12)
      {
        *(void *)(a1 + 112) = v12;
        float v13 = *v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v13);
      ++*(void *)(a1 + 136);
      unint64_t v3 = *a2;
    }
    float v14 = a2[1];
    if (v14) {
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    }
    BOOL v15 = (std::__shared_weak_count *)v9[6];
    v9[5] = v3;
    v9[6] = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

uint64_t geo::codec::VectorTile::directionalXYTextureDataCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1008);
}

uint64_t geo::codec::VectorTile::explicitTextureDataCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1000);
}

uint64_t geo::codec::VectorTile::directionalXYTextureData(geo::codec::VectorTile *this)
{
  return *((void *)this + 253);
}

uint64_t geo::codec::VectorTile::explicitTextureData(geo::codec::VectorTile *this)
{
  return *((void *)this + 251);
}

uint64_t geo::codec::VectorTile::daVinciVertexCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 490);
}

uint64_t geo::codec::VectorTile::daVinciIndexCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 508);
}

uint64_t geo::codec::VectorTile::daVinciVertices(geo::codec::VectorTile *this)
{
  return *((void *)this + 246);
}

uint64_t geo::codec::VectorTile::daVinciIndices(geo::codec::VectorTile *this)
{
  return *((void *)this + 255);
}

uint64_t md::DaVinciGroundTileData::_buildIndexBuffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = a4[1] - *a4;
  unint64_t v41 = v8 >> 2;
  long long v9 = operator new(0xF8uLL);
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = &unk_1EF589D68;
  int v10 = *((_DWORD *)a4 + 6);
  unint64_t v11 = (v8 >> 2);
  uint64_t v12 = 4;
  if (v10 != 1) {
    uint64_t v12 = 1;
  }
  if (v10) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 2;
  }
  if (v10) {
    char v14 = 2 * (v10 == 1);
  }
  else {
    char v14 = 1;
  }
  uint64_t result = ggl::BufferData::BufferData((uint64_t)(v9 + 3), v13, 1, 0, 1, (v8 >> 2));
  v9[29] = a2;
  v9[3] = &unk_1EF561BA0;
  void v9[4] = v13;
  v9[28] = &unk_1EF561BC0;
  *((_DWORD *)v9 + 60) = v10;
  *a1 = result;
  a1[1] = (uint64_t)v9;
  if (!*((_DWORD *)a4 + 6))
  {
    if ((v8 >> 2))
    {
      if (!a3 || *((unsigned char *)v9 + 41) == 2)
      {
        unint64_t v16 = (int16x8_t *)v9[12];
        if (!v41) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(*(void *)a3 + 56))(a3, result, 0, v11 << v14, 1, 1);
        unint64_t v16 = (int16x8_t *)result;
        if (!v41) {
          goto LABEL_41;
        }
      }
      char v31 = (int16x8_t *)*a4;
      if (v11 > 0xF)
      {
        uint64_t v32 = (v8 >> 2) & 0xF;
        unint64_t v30 = v11 - v32;
        int32x4_t v33 = v16 + 1;
        int8x16_t v34 = v31 + 2;
        unint64_t v35 = v11 - v32;
        do
        {
          int16x8_t v37 = v34[-2];
          int16x8_t v36 = v34[-1];
          int16x8_t v39 = *v34;
          int16x8_t v38 = v34[1];
          v34 += 4;
          v33[-1] = vuzp1q_s16(v37, v36);
          int16x8_t *v33 = vuzp1q_s16(v39, v38);
          v33 += 2;
          v35 -= 16;
        }
        while (v35);
        if (!v32) {
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v30 = 0;
      }
    }
    else
    {
      if (!v41) {
        return result;
      }
      unint64_t v16 = 0;
      unint64_t v30 = 0;
      char v31 = (int16x8_t *)*a4;
    }
    do
    {
      v16->i16[v30] = v31->i32[v30];
      ++v30;
    }
    while (v11 != v30);
    goto LABEL_41;
  }
  if (!(v8 >> 2))
  {
    unint64_t v16 = 0;
    if (!v41) {
      goto LABEL_41;
    }
    goto LABEL_23;
  }
  if (a3 && *((unsigned char *)v9 + 41) != 2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(*(void *)a3 + 56))(a3, result, 0, v11 << v14, 1, 1);
    unint64_t v16 = (int16x8_t *)result;
    if (!v41) {
      goto LABEL_41;
    }
LABEL_23:
    unint64_t v17 = 0;
    unint64_t v18 = (int16x8_t *)*a4;
    if (v11 < 8) {
      goto LABEL_28;
    }
    if ((unint64_t)((char *)v16 - (char *)v18) <= 0x1F) {
      goto LABEL_28;
    }
    uint64_t v19 = (v8 >> 2) & 7;
    unint64_t v17 = v11 - v19;
    uint8x8_t v20 = v16 + 1;
    uint64_t v21 = v18 + 1;
    unint64_t v22 = v11 - v19;
    do
    {
      int16x8_t v23 = *v21;
      v20[-1] = v21[-1];
      int16x8_t *v20 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 8;
    }
    while (v22);
    if (v19)
    {
LABEL_28:
      unint64_t v24 = v17 - v11;
      uint64_t v25 = v17;
      int8x16_t v26 = &v16->i32[v17];
      int8x16_t v27 = &v18->i32[v25];
      do
      {
        __int32 v28 = *v27++;
        *v26++ = v28;
      }
      while (!__CFADD__(v24++, 1));
    }
    goto LABEL_41;
  }
  unint64_t v16 = (int16x8_t *)v9[12];
  if (v41) {
    goto LABEL_23;
  }
LABEL_41:
  if (v16 && (v8 >> 2) && a3 && *((unsigned char *)v9 + 41) != 2)
  {
    char v40 = *(uint64_t (**)(uint64_t))(*(void *)a3 + 64);
    return v40(a3);
  }
  return result;
}

void md::DaVinciGroundTileData::_planTileMeshVertexTransfers(std::shared_ptr<geo::codec::VectorTile> const&,std::vector<gm::Range<unsigned int>> const&,std::vector<gm::Range<unsigned int>>&,std::vector<md::DaVinciGroundTileData::TransferDetails> *,unsigned int *)::$_2::operator()(uint64_t a1, unsigned int *a2, unsigned int a3, int a4)
{
  uint64_t v4 = *a2;
  unsigned int v5 = a2[1];
  if (v5 != v4)
  {
    uint64_t v7 = ***(void ***)(a1 + 16);
    int v8 = *(_DWORD *)(v7 + 8 * (v5 - 1) + 4);
    int v9 = *(_DWORD *)(v7 + 8 * v4);
    int v10 = v8 - v9;
    if (v8 != v9)
    {
      uint64_t v13 = *(unsigned int *)(**(void **)a1 + 4 * a3);
      char v14 = (char **)(**(void **)(a1 + 8) + 24 * a3);
      uint64_t v15 = *(void *)a2;
      unint64_t v16 = v13 | ((unint64_t)(v13 + v10) << 32);
      unint64_t v18 = v14 + 1;
      unint64_t v17 = v14[1];
      unint64_t v19 = (unint64_t)v14[2];
      if ((unint64_t)v17 >= v19)
      {
        uint64_t v21 = *v14;
        unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *v14) >> 2);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          abort();
        }
        unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (void)v21) >> 2);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x666666666666666) {
          unint64_t v25 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *v14) >> 2);
          unint64_t v31 = v13 | ((unint64_t)(v13 + v10) << 32);
          uint64_t v32 = *(void *)a2;
          if (v25 > 0xCCCCCCCCCCCCCCCLL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int8x16_t v26 = (char *)operator new(20 * v25);
          unint64_t v16 = v31;
          uint64_t v15 = v32;
          unint64_t v22 = v30;
        }
        else
        {
          int8x16_t v26 = 0;
        }
        int8x16_t v27 = &v26[20 * v22];
        __int32 v28 = &v26[20 * v25];
        *(void *)int8x16_t v27 = v15;
        *((void *)v27 + 1) = v16;
        *((_DWORD *)v27 + 4) = a4;
        uint8x8_t v20 = v27 + 20;
        if (v17 != v21)
        {
          do
          {
            long long v29 = *(_OWORD *)(v17 - 20);
            *((_DWORD *)v27 - 1) = *((_DWORD *)v17 - 1);
            *(_OWORD *)(v27 - 20) = v29;
            v27 -= 20;
            v17 -= 20;
          }
          while (v17 != v21);
          unint64_t v17 = *v14;
        }
        uint64_t *v14 = v27;
        void *v18 = v20;
        v14[2] = v28;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)unint64_t v17 = v15;
        *((void *)v17 + 1) = v16;
        uint8x8_t v20 = v17 + 20;
        *((_DWORD *)v17 + 4) = a4;
      }
      void *v18 = v20;
      *(_DWORD *)(**(void **)a1 + 4 * a3) += v10;
    }
  }
}

uint64_t ggl::DaVinci::ElevationCompressedMesh::ElevationCompressedMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v15 = a3;
    uint64_t v22 = a2;
    a2 = v22;
    a3 = v15;
    if (v16)
    {
      {
        ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::elevationCompressedVboReflection;
      }
      ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::attributesReflection(void)::r;
      unk_1E958E2A8 = 1;
      a3 = v15;
      a2 = v22;
    }
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EF5606B0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1EF5606D0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = &ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::typedReflection(void)::r;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  {
    uint8x8_t v20 = a3;
    a3 = v20;
    uint64_t v6 = a1 + 64;
    if (v17) {
      operator new();
    }
  }
  uint64_t v7 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 120) = 0;
  uint64_t v8 = a1 + 120;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v7;
  {
    uint64_t v21 = a3;
    uint64_t v23 = v6;
    uint64_t v8 = a1 + 120;
    a3 = v21;
    int v19 = v18;
    uint64_t v6 = v23;
    if (v19) {
      operator new();
    }
  }
  *(void *)(a1 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = v8;
  *(void *)a1 = &unk_1EF562A60;
  *(void *)(a1 + 16) = &unk_1EF562A80;
  uint64_t v9 = a3[1];
  uint64_t v24 = *a3;
  unint64_t v25 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v6, &v24, &v26, 1uLL);
  int v10 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)a1 = &unk_1EF5610A8;
  *(void *)(a1 + 16) = &unk_1EF5610C8;
  return a1;
}

uint64_t geo::codec::VectorTile::daVinciAssets(geo::codec::VectorTile *this)
{
  return *((void *)this + 259);
}

void gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(void *a1, uint64_t a2, void *a3)
{
  uint64_t v30 = a2;
  unsigned int v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v30);
  if (v6)
  {
    uint64_t v12 = (char *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      char v14 = (char *)a1[10];
      uint64_t v15 = (v12 - v14) >> 3;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int v19 = operator new(8 * v18);
      }
      else
      {
        int v19 = 0;
      }
      uint8x8_t v20 = &v19[8 * v15];
      void *v20 = *a3;
      uint64_t v13 = v20 + 1;
      if (v12 != v14)
      {
        unint64_t v21 = v12 - v14 - 8;
        if (v21 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v14 - v19) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v22 = (v21 >> 3) + 1;
        uint64_t v23 = &v19[8 * v15 - 16];
        uint64_t v24 = v12 - 16;
        uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          _OWORD *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        v20 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        v12 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v27 = *((void *)v12 - 1);
            v12 -= 8;
            *--uint8x8_t v20 = v27;
          }
          while (v12 != v14);
        }
      }
      a1[10] = v20;
      a1[11] = v13;
      a1[12] = &v19[8 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(void *)uint64_t v12 = *a3;
      uint64_t v13 = v12 + 8;
    }
    a1[11] = v13;
    uint64_t v8 = a1[31];
  }
  else
  {
    uint64_t v7 = (void *)((char *)v5 + a1[10] - a1[7]);
    *uint64_t v7 = *a3;
    uint64_t v8 = a1[31];
    if (v7 != (void *)a1[11])
    {
      uint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v32 = &v30;
          uint64_t v33 = 1;
          uint64_t v31 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v31, &v32);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  __int32 v28 = (void *)a1[22];
  if (v28)
  {
    while (1)
    {
      uint64_t v32 = &v30;
      uint64_t v33 = 1;
      uint64_t v31 = v8;
      uint64_t v29 = v28[6];
      if (!v29) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v29 + 48))(v29, &v31, &v32);
      __int32 v28 = (void *)*v28;
      if (!v28) {
        return;
      }
    }
    goto LABEL_33;
  }
}

uint64_t std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 32);
  v13[0] = &unk_1EF57EFD0;
  v13[1] = v2;
  char v14 = v13;
  uint64_t v12 = 0;
  char v6 = operator new(0x20uLL);
  *char v6 = &unk_1EF57EF88;
  v6[1] = v2;
  _DWORD v6[2] = a1 + 40;
  void v6[3] = v8;
  uint64_t v12 = v6;
  gss::StyleSheet<gss::ScenePropertyID>::decodeStyl(v2, v3, v4, v5 != 0, (uint64_t)v13, (uint64_t)v11, v8);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v10);
}

void sub_1A1CF2540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v29 = *(void *)(v27 - 96);
  if (v29 == v26)
  {
    (*(void (**)(uint64_t))(*(void *)(v27 - 120) + 32))(v27 - 120);
  }
  else if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
  }
  uint64_t v30 = *(void *)(v27 - 64);
  if (v30 == v27 - 88)
  {
    (*(void (**)(uint64_t))(*(void *)(v27 - 88) + 32))(v27 - 88);
  }
  else if (v30)
  {
    (*(void (**)(uint64_t))(*(void *)v30 + 40))(v30);
  }
  a9 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a9 + *(void *)(a9 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a10 = MEMORY[0x1E4FBA470] + 16;
  if (a23 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](&a26);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (geo::codec::VectorTile **)(a1 + 16);
  uint64_t v3 = *(geo::codec::VectorTile **)(a1 + 16);
  unint64_t v76 = v4;
  uint64_t v72 = a1;
  uint64_t v79 = *(void *)(a1 + 8);
  uint64_t v80 = *a2;
  long long __p = 0u;
  long long v85 = 0u;
  LODWORD(v86) = 1065353216;
  unint64_t prime = vcvtps_u32_f32((float)geo::codec::VectorTile::daVinciMaterialRasterCount(v3) / 1.0);
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  if (prime > *((void *)&__p + 1)) {
    goto LABEL_6;
  }
  if (prime < *((void *)&__p + 1))
  {
    unint64_t v6 = vcvtps_u32_f32((float)*((unint64_t *)&v85 + 1) / *(float *)&v86);
    if (*((void *)&__p + 1) < 3uLL
      || (uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)), v7.i16[0] = vaddlv_u8(v7), v7.u32[0] > 1uLL))
    {
      unint64_t v6 = std::__next_prime(v6);
    }
    else
    {
      uint64_t v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2) {
        unint64_t v6 = v8;
      }
    }
    if (prime <= v6) {
      unint64_t prime = v6;
    }
    if (prime < *((void *)&__p + 1)) {
LABEL_6:
    }
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&__p, prime);
  }
  int v9 = geo::codec::VectorTile::daVinciMaterialRasterCount(*v76);
  uint64_t v10 = *v76;
  if (v9)
  {
    geo::codec::VectorTile::daVinciMaterialRasters(v10);
    operator new();
  }
  if (geo::codec::VectorTile::daVinciStyleAttributeRasterCount(v10)
    || geo::codec::VectorTile::daVinciMaterialRasterCount(*v76))
  {
    unint64_t v11 = (char *)operator new(0x70uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)unint64_t v11 = &unk_1EF581868;
    *(_OWORD *)(v11 + 24) = 0u;
    uint64_t v12 = (uint64_t *)(v11 + 24);
    *(_OWORD *)(v11 + 40) = 0u;
    *((_DWORD *)v11 + 14) = 1065353216;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_DWORD *)v11 + 24) = 1065353216;
    size_t v73 = (void **)(v11 + 64);
    unsigned int v13 = geo::codec::VectorTile::daVinciStyleAttributeRasterCount(*v76);
    unint64_t v14 = vcvtps_u32_f32((float)v13 / *((float *)v11 + 14));
    if (v14 == 1)
    {
      unint64_t v14 = 2;
    }
    else if ((v14 & (v14 - 1)) != 0)
    {
      unint64_t v14 = std::__next_prime(v14);
    }
    int8x8_t v15 = *(int8x8_t *)(v11 + 32);
    if (v14 > *(void *)&v15) {
      goto LABEL_26;
    }
    if (v14 < *(void *)&v15)
    {
      unint64_t v16 = vcvtps_u32_f32((float)*((unint64_t *)v11 + 6) / *((float *)v11 + 14));
      if (*(void *)&v15 < 3uLL || (uint8x8_t v17 = (uint8x8_t)vcnt_s8(v15), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
      {
        unint64_t v16 = std::__next_prime(v16);
      }
      else
      {
        uint64_t v18 = 1 << -(char)__clz(v16 - 1);
        if (v16 >= 2) {
          unint64_t v16 = v18;
        }
      }
      if (v14 <= v16) {
        unint64_t v14 = v16;
      }
      if (v14 < *(void *)&v15) {
LABEL_26:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v12, v14);
    }
    if (v13)
    {
      uint64_t v19 = 0;
      uint64_t v77 = 8;
      int32x4_t v74 = v11 + 40;
      uint64_t v75 = v13;
      while (1)
      {
        uint64_t v20 = geo::codec::VectorTile::daVinciStyleAttributeRasters(*v76);
        unint64_t v21 = (void *)(v20 + 24 * v19);
        unint64_t v22 = *((unsigned int *)v21 + 3);
        uint64_t v23 = (std::__shared_weak_count *)operator new(0x58uLL);
        BOOL v24 = (v22 - 153) < 2;
        *(_OWORD *)&v23->__shared_owners_ = 0u;
        p_unint64_t shared_owners = (std::__shared_weak_count *)&v23->__shared_owners_;
        v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
        LODWORD(v23[2].__shared_owners_) = 0;
        *(_OWORD *)__b = 0u;
        *(_OWORD *)&v23[1].__shared_weak_owners_ = 0u;
        v23[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55AE58;
        v23[1].__shared_owners_ = 0;
        *(uint64_t *)((char *)&v23[2].__shared_owners_ + 4) = 0x100000001;
        HIDWORD(v23[2].__shared_weak_owners_) = 1;
        LODWORD(v23[3].__vftable) = v24;
        v23[3].__shared_owners_ = 0;
        HIDWORD(v23[3].__vftable) = v24;
        *(void *)std::vector<unsigned int> buf = v23 + 1;
        long long v88 = v23;
        if (*((unsigned char *)v21 + 16))
        {
          uint64_t v12 = (uint64_t *)(v11 + 24);
          if (*(unsigned char *)(v20 + 24 * v19 + 16) == 1)
          {
            p_unint64_t shared_owners = (std::__shared_weak_count *)operator new(0x60uLL);
            p_shared_owners->__shared_owners_ = 0;
            p_shared_owners->__shared_weak_owners_ = 0;
            p_shared_owners->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583AF8;
            uint64_t v26 = ggl::TextureData2D::TextureData2D((uint64_t)&p_shared_owners[1], *(unsigned __int16 *)(v20 + 24 * v19 + 18), *(unsigned __int16 *)(v20 + 24 * v19 + 20), 1u, 2, 0);
            uint64_t v27 = (void *)((uint64_t (*)(void *, void))p_shared_owners[1].__on_zero_shared)(v26, 0);
            memcpy(v27, (const void *)*v21, *(unsigned int *)(v20 + 24 * v19 + 8));
            __int32 v28 = operator new(0xB0uLL);
            v28[1] = 0;
            v28[2] = 0;
            *__int32 v28 = &unk_1EF589EF0;
            *(void *)&long long v29 = std::construct_at[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> &,ggl::Texture2D*>((uint64_t)(v28 + 3), (uint64_t)&p_shared_owners[1], p_shared_owners, buf);
            *((void *)&v29 + 1) = v28;
            *(_OWORD *)__b = v29;
            if (!atomic_fetch_add(&p_shared_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))p_shared_owners->__on_zero_shared)(p_shared_owners);
              std::__shared_weak_count::__release_weak(p_shared_owners);
            }
          }
        }
        else
        {
          uint64_t v30 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:*v21 length:*(unsigned int *)(v20 + 24 * v19 + 8) freeWhenDone:0];
          *(void *)uint64_t v81 = v23 + 1;
          *(void *)&v81[8] = v23;
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          textureWithData(&v82, v30, v81, 2u, 0, 0);
          *(_OWORD *)__b = v82;
          long long v82 = 0uLL;
          uint64_t v12 = (uint64_t *)(v11 + 24);
          if (!atomic_fetch_add((atomic_ullong *volatile)p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        unint64_t v31 = *((void *)v11 + 4);
        if (v31)
        {
          uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
          v32.i16[0] = vaddlv_u8(v32);
          if (v32.u32[0] > 1uLL)
          {
            p_unint64_t shared_owners = (std::__shared_weak_count *)v22;
            if (v31 <= v22) {
              p_unint64_t shared_owners = (std::__shared_weak_count *)(v22 % v31);
            }
          }
          else
          {
            p_unint64_t shared_owners = (std::__shared_weak_count *)((v31 - 1) & v22);
          }
          uint64_t v33 = *(uint64_t ***)(*v12 + 8 * (void)p_shared_owners);
          if (v33)
          {
            int8x16_t v34 = *v33;
            if (v34)
            {
              if (v32.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v36 = v34[1];
                  if (v36 == v22)
                  {
                    if (*((_DWORD *)v34 + 4) == v22) {
                      goto LABEL_108;
                    }
                  }
                  else if ((std::__shared_weak_count *)(v36 & (v31 - 1)) != p_shared_owners)
                  {
                    goto LABEL_68;
                  }
                  int8x16_t v34 = (uint64_t *)*v34;
                  if (!v34) {
                    goto LABEL_68;
                  }
                }
              }
              do
              {
                unint64_t v35 = v34[1];
                if (v35 == v22)
                {
                  if (*((_DWORD *)v34 + 4) == v22) {
                    goto LABEL_108;
                  }
                }
                else
                {
                  if (v35 >= v31) {
                    v35 %= v31;
                  }
                  if ((std::__shared_weak_count *)v35 != p_shared_owners) {
                    break;
                  }
                }
                int8x16_t v34 = (uint64_t *)*v34;
              }
              while (v34);
            }
          }
        }
LABEL_68:
        int16x8_t v37 = (char *)operator new(0x28uLL);
        *(void *)int16x8_t v37 = 0;
        *((void *)v37 + 1) = v22;
        *((_DWORD *)v37 + 4) = v22;
        *(_OWORD *)(v37 + 24) = *(_OWORD *)__b;
        if (__b[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)__b[1] + 1, 1uLL, memory_order_relaxed);
        }
        float v38 = (float)(unint64_t)(*((void *)v11 + 6) + 1);
        float v39 = *((float *)v11 + 14);
        if (!v31 || (float)(v39 * (float)v31) < v38)
        {
          BOOL v40 = (v31 & (v31 - 1)) != 0;
          if (v31 < 3) {
            BOOL v40 = 1;
          }
          unint64_t v41 = v40 | (2 * v31);
          unint64_t v42 = vcvtps_u32_f32(v38 / v39);
          if (v41 <= v42) {
            size_t v43 = v42;
          }
          else {
            size_t v43 = v41;
          }
          if (v43 == 1)
          {
            size_t v43 = 2;
          }
          else if ((v43 & (v43 - 1)) != 0)
          {
            size_t v43 = std::__next_prime(v43);
          }
          int8x8_t v44 = *(int8x8_t *)(v11 + 32);
          if (v43 > *(void *)&v44) {
            goto LABEL_82;
          }
          if (v43 < *(void *)&v44)
          {
            unint64_t v45 = vcvtps_u32_f32((float)*((unint64_t *)v11 + 6) / *((float *)v11 + 14));
            if (*(void *)&v44 < 3uLL
              || (uint8x8_t v46 = (uint8x8_t)vcnt_s8(v44), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
            {
              unint64_t v45 = std::__next_prime(v45);
            }
            else
            {
              uint64_t v47 = 1 << -(char)__clz(v45 - 1);
              if (v45 >= 2) {
                unint64_t v45 = v47;
              }
            }
            if (v43 <= v45) {
              size_t v43 = v45;
            }
            if (v43 < *(void *)&v44) {
LABEL_82:
            }
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v12, v43);
          }
          unint64_t v31 = *((void *)v11 + 4);
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v31 <= v22) {
              p_unint64_t shared_owners = (std::__shared_weak_count *)(v22 % v31);
            }
            else {
              p_unint64_t shared_owners = (std::__shared_weak_count *)v22;
            }
          }
          else
          {
            p_unint64_t shared_owners = (std::__shared_weak_count *)((v31 - 1) & v22);
          }
        }
        uint64_t v48 = *v12;
        unint64_t v49 = *(void **)(*v12 + 8 * (void)p_shared_owners);
        if (v49) {
          break;
        }
        *(void *)int16x8_t v37 = *v74;
        *int32x4_t v74 = v37;
        *(void *)(v48 + 8 * (void)p_shared_owners) = v74;
        if (*(void *)v37)
        {
          unint64_t v50 = *(void *)(*(void *)v37 + 8);
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v50 >= v31) {
              v50 %= v31;
            }
          }
          else
          {
            v50 &= v31 - 1;
          }
          unint64_t v49 = (void *)(*v12 + 8 * v50);
          goto LABEL_106;
        }
LABEL_107:
        ++*((void *)v11 + 6);
LABEL_108:
        if (__b[0]) {
          v77 += (*((_DWORD *)__b[0] + 21) * *((_DWORD *)__b[0] + 20));
        }
        if (__b[1] && !atomic_fetch_add((atomic_ullong *volatile)__b[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void *))(*(void *)__b[1] + 16))(__b[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__b[1]);
          int8x16_t v51 = v88;
          if (v88)
          {
LABEL_113:
            if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
        else
        {
          int8x16_t v51 = v88;
          if (v88) {
            goto LABEL_113;
          }
        }
        if (++v19 == v75) {
          goto LABEL_118;
        }
      }
      *(void *)int16x8_t v37 = *v49;
LABEL_106:
      *unint64_t v49 = v37;
      goto LABEL_107;
    }
    uint64_t v77 = 8;
LABEL_118:
    *((void *)v11 + 13) = v77;
    if (*((void *)v11 + 11))
    {
      int8x16_t v52 = (void *)*((void *)v11 + 10);
      if (v52)
      {
        do
        {
          int32x4_t v61 = (void *)*v52;
          int8x16_t v62 = (md::MaterialRaster *)v52[3];
          void v52[3] = 0;
          if (v62)
          {
            md::MaterialRaster::~MaterialRaster(v62);
            MEMORY[0x1A6239270]();
          }
          operator delete(v52);
          int8x16_t v52 = v61;
        }
        while (v61);
      }
      *((void *)v11 + 10) = 0;
      uint64_t v53 = *((void *)v11 + 9);
      if (v53)
      {
        for (uint64_t i = 0; i != v53; ++i)
          *((void *)*v73 + i) = 0;
      }
      *((void *)v11 + 11) = 0;
    }
    int8x16_t v55 = (void *)__p;
    *(void *)&long long __p = 0;
    unint64_t v56 = *v73;
    *size_t v73 = v55;
    if (v56) {
      operator delete(v56);
    }
    unint64_t v57 = *((void *)&__p + 1);
    uint64_t v58 = v85;
    *((void *)v11 + 10) = v85;
    *((void *)v11 + 9) = v57;
    *((void *)&__p + 1) = 0;
    uint64_t v59 = *((void *)&v85 + 1);
    *((void *)v11 + 11) = *((void *)&v85 + 1);
    *((_DWORD *)v11 + 24) = v86;
    if (v59)
    {
      unint64_t v60 = *(void *)(v58 + 8);
      if ((v57 & (v57 - 1)) != 0)
      {
        if (v60 >= v57) {
          v60 %= v57;
        }
      }
      else
      {
        v60 &= v57 - 1;
      }
      *((void *)*v73 + v60) = v11 + 80;
      long long v85 = 0uLL;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  *(void *)(v79 + 1304) = v12;
  uint64_t v63 = *(std::__shared_weak_count **)(v79 + 1312);
  *(void *)(v79 + 1312) = v11;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  uint64_t v64 = (void *)v85;
  if ((void)v85)
  {
    do
    {
      int8x16_t v70 = (void *)*v64;
      unint64_t v71 = (md::MaterialRaster *)v64[3];
      v64[3] = 0;
      if (v71)
      {
        md::MaterialRaster::~MaterialRaster(v71);
        MEMORY[0x1A6239270]();
      }
      operator delete(v64);
      uint64_t v64 = v70;
    }
    while (v70);
  }
  int8x16_t v65 = (void *)__p;
  *(void *)&long long __p = 0;
  if (v65) {
    operator delete(v65);
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int v66 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v66))
  {
    LOWORD(__p) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v66, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "BuildTileMeshes", "", (uint8_t *)&__p, 2u);
  }

  uint64_t v67 = *(void *)(v72 + 32);
  uint64_t v68 = *(void *)(v72 + 64);
  float32x4_t v69 = operator new(0x30uLL);
  void *v69 = &unk_1EF57E910;
  v69[1] = v79;
  v69[2] = v76;
  v69[3] = &v80;
  v69[4] = v67;
  v69[5] = v68;
  uint64_t v83 = v69;
  md::DaVinciGroundTileData::_buildTileMeshes(v79, v76);
}

void sub_1A1CF6480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,long long __p,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
}

uint64_t geo::codec::VectorTile::daVinciMaterialRasterCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1428);
}

uint64_t geo::codec::VectorTile::daVinciStyleAttributeRasterCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1420);
}

uint64_t geo::codec::VectorTile::daVinciStyleAttributeRasters(geo::codec::VectorTile *this)
{
  return *((void *)this + 354);
}

uint64_t geo::codec::VectorTile::daVinciMaterialRasters(geo::codec::VectorTile *this)
{
  return *((void *)this + 356);
}

void md::DaVinciGroundTileData::_buildDecals(void *a1, geo::codec::VectorTile **a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v234 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)uint64_t v218 = 0u;
  long long v219 = 0u;
  long long __p = 0u;
  long long v222 = 0u;
  float v220 = 1.0;
  float v223 = 1.0;
  long long v224 = 0u;
  long long v225 = 0u;
  int v226 = 1065353216;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v8 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v8))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ReadDecal", "", (uint8_t *)&buf, 2u);
  }

  uint64_t v198 = a3;
  unint64_t v201 = a1;
  for (unint64_t i = 0; i < geo::codec::VectorTile::daVinciDecalCount(*a2); ++i)
  {
    uint64_t v10 = geo::codec::VectorTile::daVinciDecals(*a2);
    uint64_t v11 = v10;
    uint64_t v12 = (unint64_t *)(v10 + 72 * i);
    if (*v12)
    {
      uint64_t v230 = 0;
      unint64_t v231 = 0;
    }
    else
    {
      unint64_t v4 = *a4;
      md::createFeatureAttributeSet((gss::Allocator *)&buf, (uint64_t *)(v10 + 72 * i + 48));
      *(void *)((char *)v227 + 7) = 0;
      *(void *)&v227[0] = 0;
      HIBYTE(v227[0]) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v230, v4, (gss::FeatureAttributeSet *)&buf, (gss::QueryOverrides *)v227);
      if (buf.i64[0])
      {
        buf.i64[1] = buf.i64[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v205 + 40))(v205, buf.i64[0], (uint64_t)v204 - buf.i64[0]);
      }
    }
    unint64_t v13 = v11 + 72 * i;
    int v14 = *(_DWORD *)(v13 + 32);
    long long v202 = *(_OWORD *)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 24);
    uint64_t v16 = geo::codec::VectorTile::daVinciMeshes(*a2);
    unint64_t v17 = v11 + 72 * i;
    unint64_t v18 = v16 + ((unint64_t)*(unsigned __int16 *)(v17 + 66) << 6);
    unint64_t v19 = *v12;
    __int16 v200 = *(_WORD *)(v17 + 64);
    int v21 = *(_DWORD *)(v17 + 36);
    int v20 = *(_DWORD *)(v17 + 40);
    if (!*v12)
    {
      unint64_t v25 = (unint64_t)v230;
      BOOL v24 = v231;
      unint64_t v216 = v230;
      uint64_t v217 = (std::__shared_weak_count *)v231;
      if (v231) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v231 + 1, 1uLL, memory_order_relaxed);
      }
      unint64_t v26 = 0x9DDFEA08EB382D69 * (((8 * v25) + 8) ^ HIDWORD(v25));
      unint64_t v27 = 0x9DDFEA08EB382D69 * (HIDWORD(v25) ^ (v26 >> 47) ^ v26);
      unint64_t v28 = 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47));
      unint64_t v29 = (unint64_t)v218[1];
      if (v218[1])
      {
        uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v218[1]);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          unint64_t v4 = 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47));
          if ((void *)v28 >= v218[1]) {
            unint64_t v4 = v28 % (unint64_t)v218[1];
          }
        }
        else
        {
          unint64_t v4 = v28 & ((unint64_t)v218[1] - 1);
        }
        uint64_t v53 = (void **)*((void *)v218[0] + v4);
        if (v53)
        {
          uint64_t v54 = *v53;
          if (*v53)
          {
            if (v30.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v56 = v54[1];
                if (v56 == v28)
                {
                  if (v54[2] == v25) {
                    goto LABEL_205;
                  }
                }
                else if ((v56 & ((uint64_t)v218[1] - 1)) != v4)
                {
                  goto LABEL_88;
                }
                uint64_t v54 = (void *)*v54;
                if (!v54) {
                  goto LABEL_88;
                }
              }
            }
            do
            {
              unint64_t v55 = v54[1];
              if (v55 == v28)
              {
                if (v54[2] == v25) {
                  goto LABEL_205;
                }
              }
              else
              {
                if ((void *)v55 >= v218[1]) {
                  v55 %= (unint64_t)v218[1];
                }
                if (v55 != v4) {
                  break;
                }
              }
              uint64_t v54 = (void *)*v54;
            }
            while (v54);
          }
        }
      }
LABEL_88:
      unint64_t v57 = operator new(0x38uLL);
      uint64_t v54 = v57;
      buf.i64[0] = (uint64_t)v57;
      buf.i64[1] = (uint64_t)&v219;
      void *v57 = 0;
      v57[1] = v28;
      v57[2] = v25;
      v57[3] = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
      }
      v57[4] = 0;
      v57[5] = 0;
      v57[6] = 0;
      LOBYTE(v204) = 1;
      float v58 = (float)(unint64_t)(*((void *)&v219 + 1) + 1);
      if (!v29 || (float)(v220 * (float)v29) < v58)
      {
        BOOL v59 = (v29 & (v29 - 1)) != 0;
        if (v29 < 3) {
          BOOL v59 = 1;
        }
        unint64_t v60 = v59 | (2 * v29);
        unint64_t v61 = vcvtps_u32_f32(v58 / v220);
        if (v60 <= v61) {
          size_t prime = v61;
        }
        else {
          size_t prime = v60;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v29 = (unint64_t)v218[1];
        if ((void *)prime > v218[1])
        {
LABEL_102:
          if (prime >> 61) {
            goto LABEL_383;
          }
          uint64_t v63 = operator new(8 * prime);
          uint64_t v64 = v218[0];
          v218[0] = v63;
          if (v64) {
            operator delete(v64);
          }
          uint64_t v65 = 0;
          v218[1] = (void *)prime;
          do
            *((void *)v218[0] + v65++) = 0;
          while (prime != v65);
          int v66 = (void **)v219;
          if (!(void)v219) {
            goto LABEL_181;
          }
          size_t v67 = *(void *)(v219 + 8);
          size_t v68 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v69 = v67 & v68;
            *((void *)v218[0] + v69) = &v219;
            for (uint64_t j = *v66; *v66; uint64_t j = *v66)
            {
              size_t v71 = j[1] & v68;
              if (v71 == v69)
              {
                int v66 = (void **)j;
              }
              else if (*((void *)v218[0] + v71))
              {
                NSObject *v66 = (void *)*j;
                uint64_t v72 = 8 * v71;
                *uint64_t j = **(void **)((char *)v218[0] + v72);
                **(void **)((char *)v218[0] + v72) = j;
              }
              else
              {
                *((void *)v218[0] + v71) = v66;
                int v66 = (void **)j;
                size_t v69 = v71;
              }
            }
            goto LABEL_181;
          }
          if (v67 >= prime) {
            v67 %= prime;
          }
          *((void *)v218[0] + v67) = &v219;
          int8x16_t v98 = *v66;
          if (!*v66)
          {
LABEL_181:
            unint64_t v29 = prime;
            goto LABEL_182;
          }
          while (2)
          {
            size_t v100 = v98[1];
            if (v100 >= prime) {
              v100 %= prime;
            }
            if (v100 != v67)
            {
              if (!*((void *)v218[0] + v100))
              {
                *((void *)v218[0] + v100) = v66;
LABEL_186:
                int v66 = (void **)v98;
                int8x16_t v98 = (void *)*v98;
                size_t v67 = v100;
                if (!v98) {
                  goto LABEL_181;
                }
                continue;
              }
              NSObject *v66 = (void *)*v98;
              uint64_t v99 = 8 * v100;
              *int8x16_t v98 = **(void **)((char *)v218[0] + v99);
              **(void **)((char *)v218[0] + v99) = v98;
              int8x16_t v98 = v66;
            }
            break;
          }
          size_t v100 = v67;
          goto LABEL_186;
        }
        if ((void *)prime < v218[1])
        {
          unint64_t v73 = vcvtps_u32_f32((float)*((unint64_t *)&v219 + 1) / v220);
          if (v218[1] < (void *)3
            || (uint8x8_t v74 = (uint8x8_t)vcnt_s8((int8x8_t)v218[1]), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
          {
            unint64_t v73 = std::__next_prime(v73);
          }
          else
          {
            uint64_t v75 = 1 << -(char)__clz(v73 - 1);
            if (v73 >= 2) {
              unint64_t v73 = v75;
            }
          }
          if (prime <= v73) {
            size_t prime = v73;
          }
          if (prime >= v29)
          {
            unint64_t v29 = (unint64_t)v218[1];
          }
          else
          {
            if (prime) {
              goto LABEL_102;
            }
            uint64_t v119 = v218[0];
            v218[0] = 0;
            if (v119) {
              operator delete(v119);
            }
            unint64_t v29 = 0;
            v218[1] = 0;
          }
        }
LABEL_182:
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v28 >= v29) {
            unint64_t v4 = v28 % v29;
          }
          else {
            unint64_t v4 = v28;
          }
        }
        else
        {
          unint64_t v4 = (v29 - 1) & v28;
        }
      }
      float32x4_t v101 = v218[0];
      int8x16_t v102 = (void *)*((void *)v218[0] + v4);
      if (v102)
      {
        *uint64_t v54 = *v102;
        goto LABEL_203;
      }
      *uint64_t v54 = v219;
      *(void *)&long long v219 = v54;
      v101[v4] = &v219;
      if (*v54)
      {
        unint64_t v103 = *(void *)(*v54 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v103 >= v29) {
            v103 %= v29;
          }
        }
        else
        {
          v103 &= v29 - 1;
        }
        int8x16_t v102 = (char *)v218[0] + 8 * v103;
LABEL_203:
        *int8x16_t v102 = v54;
      }
      ++*((void *)&v219 + 1);
LABEL_205:
      unint64_t v4 = v54[5];
      unint64_t v104 = v54[6];
      if (v4 < v104)
      {
        *(void *)unint64_t v4 = v18;
        *(_WORD *)(v4 + 8) = v200;
        *(_OWORD *)(v4 + 12) = v202;
        *(void *)(v4 + 28) = v15;
        *(_DWORD *)(v4 + 36) = v14;
        *(_DWORD *)(v4 + 40) = v21;
        *(_DWORD *)(v4 + 44) = v20;
        unint64_t v105 = v4 + 56;
        *(_DWORD *)(v4 + 48) = 1065353216;
LABEL_219:
        v54[5] = v105;
        uint64_t v118 = v217;
        if (v217 && !atomic_fetch_add(&v217->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
        goto LABEL_165;
      }
      uint64_t v106 = v54[4];
      unint64_t v107 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - v106) >> 3) + 1;
      if (v107 > 0x492492492492492) {
        abort();
      }
      unint64_t v108 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v104 - v106) >> 3);
      if (2 * v108 > v107) {
        unint64_t v107 = 2 * v108;
      }
      if (v108 >= 0x249249249249249) {
        unint64_t v109 = 0x492492492492492;
      }
      else {
        unint64_t v109 = v107;
      }
      if (v109 <= 0x492492492492492)
      {
        unsigned int v110 = (char *)operator new(56 * v109);
        size_t v111 = &v110[8 * ((uint64_t)(v4 - v106) >> 3)];
        *(void *)size_t v111 = v18;
        *((_WORD *)v111 + 4) = v200;
        *(_OWORD *)(v111 + 12) = v202;
        *(void *)(v111 + 28) = v15;
        *((_DWORD *)v111 + 9) = v14;
        *((_DWORD *)v111 + 10) = v21;
        *((_DWORD *)v111 + 11) = v20;
        *((_DWORD *)v111 + 12) = 1065353216;
        char v112 = v111;
        if (v4 != v106)
        {
          do
          {
            uint64_t v113 = *(void *)(v4 - 56);
            v4 -= 56;
            __int16 v114 = *(_WORD *)(v4 + 8);
            *((void *)v112 - 7) = v113;
            v112 -= 56;
            *((_WORD *)v112 + 4) = v114;
            uint64_t v115 = *(void *)(v4 + 12);
            *((_DWORD *)v112 + 5) = *(_DWORD *)(v4 + 20);
            *(void *)(v112 + 12) = v115;
            uint64_t v116 = *(void *)(v4 + 24);
            *((_DWORD *)v112 + 8) = *(_DWORD *)(v4 + 32);
            *((void *)v112 + 3) = v116;
            *((_DWORD *)v112 + 9) = *(_DWORD *)(v4 + 36);
            uint64_t v117 = *(void *)(v4 + 40);
            *((_DWORD *)v112 + 12) = *(_DWORD *)(v4 + 48);
            *((void *)v112 + 5) = v117;
          }
          while (v4 != v106);
          unint64_t v4 = v106;
        }
        unint64_t v105 = (unint64_t)(v111 + 56);
        v54[4] = v112;
        v54[5] = v111 + 56;
        v54[6] = &v110[56 * v109];
        if (v4) {
          operator delete((void *)v4);
        }
        goto LABEL_219;
      }
LABEL_383:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v22 = *((void *)&__p + 1);
    if (*((void *)&__p + 1))
    {
      uint8x8_t v23 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        unint64_t v4 = *v12;
        if (v19 >= *((void *)&__p + 1)) {
          unint64_t v4 = v19 % *((void *)&__p + 1);
        }
      }
      else
      {
        unint64_t v4 = (*((void *)&__p + 1) - 1) & v19;
      }
      unint64_t v31 = *(void ***)(__p + 8 * v4);
      if (v31)
      {
        uint8x8_t v32 = *v31;
        if (*v31)
        {
          if (v23.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v34 = v32[1];
              if (v34 == v19)
              {
                if (v32[2] == v19) {
                  goto LABEL_150;
                }
              }
              else if ((v34 & (*((void *)&__p + 1) - 1)) != v4)
              {
                goto LABEL_38;
              }
              uint8x8_t v32 = (void *)*v32;
              if (!v32) {
                goto LABEL_38;
              }
            }
          }
          do
          {
            unint64_t v33 = v32[1];
            if (v33 == v19)
            {
              if (v32[2] == v19) {
                goto LABEL_150;
              }
            }
            else
            {
              if (v33 >= *((void *)&__p + 1)) {
                v33 %= *((void *)&__p + 1);
              }
              if (v33 != v4) {
                break;
              }
            }
            uint8x8_t v32 = (void *)*v32;
          }
          while (v32);
        }
      }
    }
LABEL_38:
    uint8x8_t v32 = operator new(0x30uLL);
    buf.i64[0] = (uint64_t)v32;
    buf.i64[1] = (uint64_t)&v222;
    *uint8x8_t v32 = 0;
    v32[1] = v19;
    v32[2] = v19;
    v32[3] = 0;
    v32[4] = 0;
    v32[5] = 0;
    LOBYTE(v204) = 1;
    float v35 = (float)(unint64_t)(*((void *)&v222 + 1) + 1);
    if (!v22 || (float)(v223 * (float)v22) < v35)
    {
      BOOL v36 = (v22 & (v22 - 1)) != 0;
      if (v22 < 3) {
        BOOL v36 = 1;
      }
      unint64_t v37 = v36 | (2 * v22);
      unint64_t v38 = vcvtps_u32_f32(v35 / v223);
      if (v37 <= v38) {
        size_t v39 = v38;
      }
      else {
        size_t v39 = v37;
      }
      if (v39 == 1)
      {
        size_t v39 = 2;
      }
      else if ((v39 & (v39 - 1)) != 0)
      {
        size_t v39 = std::__next_prime(v39);
        unint64_t v22 = *((void *)&__p + 1);
      }
      if (v39 <= v22)
      {
        if (v39 < v22)
        {
          unint64_t v50 = vcvtps_u32_f32((float)*((unint64_t *)&v222 + 1) / v223);
          if (v22 < 3 || (uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
          {
            unint64_t v50 = std::__next_prime(v50);
          }
          else
          {
            uint64_t v52 = 1 << -(char)__clz(v50 - 1);
            if (v50 >= 2) {
              unint64_t v50 = v52;
            }
          }
          if (v39 <= v50) {
            size_t v39 = v50;
          }
          if (v39 >= v22)
          {
            unint64_t v22 = *((void *)&__p + 1);
          }
          else
          {
            if (v39) {
              goto LABEL_50;
            }
            int32x4_t v97 = (void *)__p;
            *(void *)&long long __p = 0;
            if (v97) {
              operator delete(v97);
            }
            unint64_t v22 = 0;
            *((void *)&__p + 1) = 0;
          }
        }
LABEL_127:
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v19 >= v22) {
            unint64_t v4 = v19 % v22;
          }
          else {
            unint64_t v4 = v19;
          }
        }
        else
        {
          unint64_t v4 = (v22 - 1) & v19;
        }
        goto LABEL_140;
      }
LABEL_50:
      if (v39 >> 61) {
        goto LABEL_383;
      }
      BOOL v40 = operator new(8 * v39);
      unint64_t v41 = (void *)__p;
      *(void *)&long long __p = v40;
      if (v41) {
        operator delete(v41);
      }
      uint64_t v42 = 0;
      *((void *)&__p + 1) = v39;
      do
        *(void *)(__p + 8 * v42++) = 0;
      while (v39 != v42);
      size_t v43 = (void **)v222;
      if (!(void)v222) {
        goto LABEL_126;
      }
      size_t v44 = *(void *)(v222 + 8);
      size_t v45 = v39 - 1;
      if ((v39 & (v39 - 1)) == 0)
      {
        size_t v46 = v44 & v45;
        *(void *)(__p + 8 * v46) = &v222;
        for (uint64_t k = *v43; *v43; uint64_t k = *v43)
        {
          size_t v48 = k[1] & v45;
          if (v48 == v46)
          {
            size_t v43 = (void **)k;
          }
          else if (*(void *)(__p + 8 * v48))
          {
            void *v43 = (void *)*k;
            uint64_t v49 = 8 * v48;
            *uint64_t k = **(void **)(__p + v49);
            **(void **)(__p + v49) = k;
          }
          else
          {
            *(void *)(__p + 8 * v48) = v43;
            size_t v43 = (void **)k;
            size_t v46 = v48;
          }
        }
        goto LABEL_126;
      }
      if (v44 >= v39) {
        v44 %= v39;
      }
      *(void *)(__p + 8 * v44) = &v222;
      unint64_t v76 = *v43;
      if (!*v43)
      {
LABEL_126:
        unint64_t v22 = v39;
        goto LABEL_127;
      }
      while (2)
      {
        size_t v78 = v76[1];
        if (v78 >= v39) {
          v78 %= v39;
        }
        if (v78 != v44)
        {
          if (!*(void *)(__p + 8 * v78))
          {
            *(void *)(__p + 8 * v78) = v43;
LABEL_131:
            size_t v43 = (void **)v76;
            unint64_t v76 = (void *)*v76;
            size_t v44 = v78;
            if (!v76) {
              goto LABEL_126;
            }
            continue;
          }
          void *v43 = (void *)*v76;
          uint64_t v77 = 8 * v78;
          void *v76 = **(void **)(__p + v77);
          **(void **)(__p + v77) = v76;
          unint64_t v76 = v43;
        }
        break;
      }
      size_t v78 = v44;
      goto LABEL_131;
    }
LABEL_140:
    uint64_t v79 = __p;
    uint64_t v80 = *(void **)(__p + 8 * v4);
    if (v80)
    {
      *uint8x8_t v32 = *v80;
    }
    else
    {
      *uint8x8_t v32 = v222;
      *(void *)&long long v222 = v32;
      *(void *)(v79 + 8 * v4) = &v222;
      if (!*v32) {
        goto LABEL_149;
      }
      unint64_t v81 = *(void *)(*v32 + 8);
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v81 >= v22) {
          v81 %= v22;
        }
      }
      else
      {
        v81 &= v22 - 1;
      }
      uint64_t v80 = (void *)(__p + 8 * v81);
    }
    void *v80 = v32;
LABEL_149:
    ++*((void *)&v222 + 1);
LABEL_150:
    unint64_t v4 = v32[4];
    unint64_t v82 = v32[5];
    if (v4 >= v82)
    {
      uint64_t v84 = v32[3];
      unint64_t v85 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - v84) >> 3) + 1;
      if (v85 > 0x492492492492492) {
        abort();
      }
      unint64_t v86 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v82 - v84) >> 3);
      if (2 * v86 > v85) {
        unint64_t v85 = 2 * v86;
      }
      if (v86 >= 0x249249249249249) {
        unint64_t v87 = 0x492492492492492;
      }
      else {
        unint64_t v87 = v85;
      }
      if (v87 > 0x492492492492492) {
        goto LABEL_383;
      }
      long long v88 = (char *)operator new(56 * v87);
      uint64_t v89 = &v88[8 * ((uint64_t)(v4 - v84) >> 3)];
      *(void *)uint64_t v89 = v18;
      *((_WORD *)v89 + 4) = v200;
      *(_OWORD *)(v89 + 12) = v202;
      *(void *)(v89 + 28) = v15;
      *((_DWORD *)v89 + 9) = v14;
      *((_DWORD *)v89 + 10) = v21;
      *((_DWORD *)v89 + 11) = v20;
      *((_DWORD *)v89 + 12) = 1065353216;
      int8x16_t v90 = v89;
      if (v4 != v84)
      {
        do
        {
          uint64_t v91 = *(void *)(v4 - 56);
          v4 -= 56;
          __int16 v92 = *(_WORD *)(v4 + 8);
          *((void *)v90 - 7) = v91;
          v90 -= 56;
          *((_WORD *)v90 + 4) = v92;
          uint64_t v93 = *(void *)(v4 + 12);
          *((_DWORD *)v90 + 5) = *(_DWORD *)(v4 + 20);
          *(void *)(v90 + 12) = v93;
          uint64_t v94 = *(void *)(v4 + 24);
          *((_DWORD *)v90 + 8) = *(_DWORD *)(v4 + 32);
          *((void *)v90 + 3) = v94;
          *((_DWORD *)v90 + 9) = *(_DWORD *)(v4 + 36);
          uint64_t v95 = *(void *)(v4 + 40);
          *((_DWORD *)v90 + 12) = *(_DWORD *)(v4 + 48);
          *((void *)v90 + 5) = v95;
        }
        while (v4 != v84);
        unint64_t v4 = v84;
      }
      unint64_t v83 = (unint64_t)(v89 + 56);
      v32[3] = v90;
      v32[4] = v89 + 56;
      v32[5] = &v88[56 * v87];
      if (v4) {
        operator delete((void *)v4);
      }
    }
    else
    {
      *(void *)unint64_t v4 = v18;
      *(_WORD *)(v4 + 8) = v200;
      *(_OWORD *)(v4 + 12) = v202;
      *(void *)(v4 + 28) = v15;
      *(_DWORD *)(v4 + 36) = v14;
      *(_DWORD *)(v4 + 40) = v21;
      *(_DWORD *)(v4 + 44) = v20;
      unint64_t v83 = v4 + 56;
      *(_DWORD *)(v4 + 48) = 1065353216;
    }
    v32[4] = v83;
LABEL_165:
    uint64_t v96 = (std::__shared_weak_count *)v231;
    if (v231)
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)v231 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v120 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v120))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v120, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ReadDecal", "", (uint8_t *)&buf, 2u);
  }

  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v121 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v121))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v121, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "BuildDecalBatches", "", (uint8_t *)&buf, 2u);
  }

  unint64_t v214 = 0;
  uint64_t v215 = 0;
  uint64_t v213 = 0;
  unint64_t v122 = *((void *)&v222 + 1) + *((void *)&v219 + 1);
  if (*((void *)&v222 + 1) + *((void *)&v219 + 1))
  {
    if (v122 >= 0x555555555555556) {
      abort();
    }
    uint64_t v213 = operator new(48 * v122);
    unint64_t v214 = (char *)v213;
    uint64_t v215 = (char *)v213 + 48 * v122;
  }
  for (uint64_t m = (uint64_t **)v222; m; uint64_t m = (uint64_t **)*m)
  {
    v227[0] = 0uLL;
    md::DaVinciDecalBuilder::buildBatch(&buf, (uint64_t)v218, (uint64_t)m[2], (float *)m[3], (float *)m[4], a2, v198);
    if (buf.i8[0])
    {
      uint64_t v124 = v214;
      if (v214 >= v215)
      {
        long long v125 = std::vector<md::DaVinciDecalBatch>::__push_back_slow_path<md::DaVinciDecalBatch const&>(&v213, &buf.i64[1]);
      }
      else
      {
        std::construct_at[abi:nn180100]<md::DaVinciDecalBatch,md::DaVinciDecalBatch const&,md::DaVinciDecalBatch*>(v214, &buf.i64[1]);
        long long v125 = v124 + 48;
      }
      unint64_t v214 = v125;
      if (*(void *)v206)
      {
        *(void *)&v206[8] = *(void *)v206;
        operator delete(*(void **)v206);
      }
      float v126 = v204;
      if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
  }
  for (uint64_t n = (uint64_t **)v219; n; uint64_t n = (uint64_t **)*n)
  {
    long long v128 = (std::__shared_weak_count *)n[3];
    uint64_t v230 = n[2];
    unint64_t v231 = (long long *)v128;
    if (v128) {
      atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    md::DaVinciDecalBuilder::buildBatch(&buf, (uint64_t)v218, 0, (float *)n[4], (float *)n[5], a2, v198);
    if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
      if (buf.i8[0])
      {
LABEL_263:
        long long v129 = v214;
        if (v214 >= v215)
        {
          unint64_t v130 = std::vector<md::DaVinciDecalBatch>::__push_back_slow_path<md::DaVinciDecalBatch const&>(&v213, &buf.i64[1]);
        }
        else
        {
          std::construct_at[abi:nn180100]<md::DaVinciDecalBatch,md::DaVinciDecalBatch const&,md::DaVinciDecalBatch*>(v214, &buf.i64[1]);
          unint64_t v130 = v129 + 48;
        }
        unint64_t v214 = v130;
        if (*(void *)v206)
        {
          *(void *)&v206[8] = *(void *)v206;
          operator delete(*(void **)v206);
        }
        uint64_t v131 = v204;
        if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
    }
    else if (buf.i8[0])
    {
      goto LABEL_263;
    }
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  long long v132 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v132))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v132, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "BuildDecalBatches", "", (uint8_t *)&buf, 2u);
  }

  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  long long v133 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v133))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v133, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ProcessDecalBatches", "", (uint8_t *)&buf, 2u);
  }

  float v134 = (char *)v201[123];
  long long v135 = (char *)v201[122];
  uint64_t v136 = (v134 - v135) >> 4;
  unint64_t v137 = v136 - 0x5555555555555555 * ((v214 - (unsigned char *)v213) >> 4);
  if (v137 > (uint64_t)(v201[124] - (void)v135) >> 4)
  {
    if (v137 >> 60) {
      abort();
    }
    uint64_t v138 = (char *)operator new(16 * v137);
    char v139 = &v138[16 * v136];
    char v140 = &v138[16 * v137];
    if (v134 == v135)
    {
      v201[122] = v139;
      v201[123] = v139;
      v201[124] = v140;
    }
    else
    {
      unint64_t v141 = &v138[16 * v136];
      do
      {
        long long v142 = *((_OWORD *)v134 - 1);
        v134 -= 16;
        *((_OWORD *)v141 - 1) = v142;
        v141 -= 16;
        *(void *)float v134 = 0;
        *((void *)v134 + 1) = 0;
      }
      while (v134 != v135);
      float v134 = (char *)v201[122];
      uint64_t v143 = (char *)v201[123];
      v201[122] = v141;
      v201[123] = v139;
      for (v201[124] = v140; v143 != v134; v143 -= 16)
      {
        uint64_t v144 = (std::__shared_weak_count *)*((void *)v143 - 1);
        if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
    }
    if (v134) {
      operator delete(v134);
    }
  }
  unint64_t v145 = (char *)v213;
  uint64_t v197 = v214;
  if (v213 != v214)
  {
    while (1)
    {
      int v146 = (char *)v201[123];
      unint64_t v147 = v201[124];
      if ((unint64_t)v146 >= v147)
      {
        int v150 = (char *)v201[122];
        uint64_t v151 = (v146 - v150) >> 4;
        unint64_t v152 = v151 + 1;
        if ((unint64_t)(v151 + 1) >> 60) {
          abort();
        }
        uint64_t v153 = v147 - (void)v150;
        if (v153 >> 3 > v152) {
          unint64_t v152 = v153 >> 3;
        }
        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v154 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v154 = v152;
        }
        if (v154 >> 60) {
          goto LABEL_383;
        }
        uint64_t v155 = (char *)operator new(16 * v154);
        long long v156 = &v155[16 * v151];
        long long v157 = *(_OWORD *)v145;
        *(_OWORD *)long long v156 = *(_OWORD *)v145;
        if (*((void *)&v157 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v157 + 1) + 8), 1uLL, memory_order_relaxed);
          int v146 = (char *)v201[123];
          int v150 = (char *)v201[122];
        }
        int8x16_t v158 = &v155[16 * v154];
        uint64_t v149 = v156 + 16;
        if (v146 == v150)
        {
          v201[122] = v156;
          v201[123] = v149;
          v201[124] = v158;
        }
        else
        {
          do
          {
            long long v159 = *((_OWORD *)v146 - 1);
            v146 -= 16;
            *((_OWORD *)v156 - 1) = v159;
            v156 -= 16;
            *(void *)int v146 = 0;
            *((void *)v146 + 1) = 0;
          }
          while (v146 != v150);
          int v150 = (char *)v201[122];
          uint64_t v160 = (char *)v201[123];
          v201[122] = v156;
          v201[123] = v149;
          v201[124] = v158;
          while (v160 != v150)
          {
            std::string::size_type v161 = (std::__shared_weak_count *)*((void *)v160 - 1);
            if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
            v160 -= 16;
          }
        }
        if (v150) {
          operator delete(v150);
        }
      }
      else
      {
        *(void *)int v146 = *(void *)v145;
        uint64_t v148 = *((void *)v145 + 1);
        *((void *)v146 + 1) = v148;
        if (v148) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v148 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v149 = v146 + 16;
      }
      v201[123] = v149;
      uint64_t v162 = *((void *)v145 + 3);
      if (*((void *)v145 + 4) != v162) {
        break;
      }
      v145 += 48;
      if (v145 == v197) {
        goto LABEL_367;
      }
    }
    long long v212 = *(_OWORD *)(v162 + 48);
    unint64_t v163 = (_OWORD *)(v162 + 64);
    unint64_t v164 = v201[129];
    unint64_t v165 = v201[130];
    if (v164 < v165)
    {
      uint64_t v166 = *(void *)v145;
      int16x8_t v167 = (std::__shared_weak_count *)*((void *)v145 + 1);
      if (v167)
      {
        atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)unint64_t v164 = v166;
        *(void *)(v164 + 8) = v167;
        atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(void *)unint64_t v164 = v166;
        *(void *)(v164 + 8) = 0;
      }
      *(_OWORD *)(v164 + 16) = v212;
      *(unsigned char *)(v164 + 32) = 3;
      uint64_t v174 = *(void *)(v162 + 80);
      *(_OWORD *)(v164 + 36) = *v163;
      *(void *)(v164 + 52) = v174;
      *(_WORD *)(v164 + 60) = 1;
      *(void *)(v164 + 64) = 0;
      *(void *)(v164 + 72) = 0;
      if (v167 && !atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
      char v175 = (char *)(v164 + 80);
      goto LABEL_362;
    }
    uint64_t v168 = v201[128];
    unint64_t v169 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v164 - v168) >> 4);
    unint64_t v170 = v169 + 1;
    if (v169 + 1 > 0x333333333333333) {
      abort();
    }
    unint64_t v171 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v165 - v168) >> 4);
    if (2 * v171 > v170) {
      unint64_t v170 = 2 * v171;
    }
    if (v171 >= 0x199999999999999) {
      unint64_t v172 = 0x333333333333333;
    }
    else {
      unint64_t v172 = v170;
    }
    if (v172)
    {
      if (v172 > 0x333333333333333) {
        goto LABEL_383;
      }
      uint64_t v173 = (char *)operator new(80 * v172);
    }
    else
    {
      uint64_t v173 = 0;
    }
    int8x16_t v176 = &v173[80 * v169];
    uint64_t v177 = *(void *)v145;
    unint64_t v178 = (std::__shared_weak_count *)*((void *)v145 + 1);
    if (v178)
    {
      atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)int8x16_t v176 = v177;
      *((void *)v176 + 1) = v178;
      atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *(void *)int8x16_t v176 = v177;
      *((void *)v176 + 1) = 0;
    }
    __int16 v179 = &v173[80 * v169];
    *((_OWORD *)v179 + 1) = v212;
    v179[32] = 3;
    uint64_t v180 = *(void *)(v162 + 80);
    *(_OWORD *)(v179 + 36) = *v163;
    *(void *)(v179 + 52) = v180;
    *((_WORD *)v179 + 30) = 1;
    *((void *)v179 + 8) = 0;
    *((void *)v179 + 9) = 0;
    if (v178 && !atomic_fetch_add(&v178->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
    unint64_t v181 = &v173[80 * v172];
    char v175 = v176 + 80;
    long long v182 = (void *)v201[129];
    uint64_t v183 = (void *)v201[128];
    if (v182 == v183)
    {
      v201[128] = v176;
      v201[129] = v175;
      v201[130] = v181;
LABEL_360:
      if (v182) {
        operator delete(v182);
      }
LABEL_362:
      v201[129] = v175;
      unint64_t v190 = (gdc::Registry *)v201[165];
      buf.i64[0] = (uint64_t)(v175 - 80);
      buf.i8[8] = 0;
      LOBYTE(v205) = 0;
      v206[0] = 0;
      *(_OWORD *)&v206[4] = xmmword_1A28FC710;
      long long v207 = xmmword_1A28FF730;
      long long v208 = xmmword_1A28FCE90;
      long long v209 = xmmword_1A28FCE90;
      int v210 = 0;
      int v211 = 0;
      v227[0] = xmmword_1A28FCEA0;
      v227[1] = xmmword_1A28FD2A0;
      v227[2] = xmmword_1A28FCE90;
      v227[3] = xmmword_1A28FCDD0;
      long long v228 = xmmword_1A28FC710;
      uint64_t v229 = 0x80000000800000;
      uint64_t v230 = (uint64_t *)&unk_1EF57D5F0;
      unint64_t v231 = &v228;
      __int16 v232 = v227;
      uint64_t v233 = &v230;
      gm::Box<float,3>::forEachCorner((uint64_t *)(v175 - 44), (uint64_t)&v230);
      if (v233 == &v230)
      {
        ((void (*)(uint64_t **))v230[4])(&v230);
      }
      else if (v233)
      {
        ((void (*)(void))(*v233)[5])();
      }
      *(_OWORD *)&v206[4] = v228;
      *(void *)&long long v207 = v229;
      gdc::Registry::create(v190);
    }
    do
    {
      long long v184 = *((_OWORD *)v182 - 5);
      v182 -= 10;
      *((_OWORD *)v176 - 5) = v184;
      v176 -= 80;
      *long long v182 = 0;
      v182[1] = 0;
      long long v185 = *((_OWORD *)v182 + 1);
      long long v186 = *((_OWORD *)v182 + 2);
      *(_OWORD *)(v176 + 46) = *(_OWORD *)((char *)v182 + 46);
      *((_OWORD *)v176 + 1) = v185;
      *((_OWORD *)v176 + 2) = v186;
      *((_OWORD *)v176 + 4) = *((_OWORD *)v182 + 4);
      v182[8] = 0;
      v182[9] = 0;
    }
    while (v182 != v183);
    long long v182 = (void *)v201[128];
    uint64_t v187 = (void *)v201[129];
    v201[128] = v176;
    v201[129] = v175;
    v201[130] = v181;
    while (1)
    {
      if (v187 == v182) {
        goto LABEL_360;
      }
      int32x4_t v188 = (std::__shared_weak_count *)*(v187 - 1);
      if (v188 && !atomic_fetch_add(&v188->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
        uint64_t v189 = (std::__shared_weak_count *)*(v187 - 9);
        if (!v189) {
          goto LABEL_350;
        }
      }
      else
      {
        uint64_t v189 = (std::__shared_weak_count *)*(v187 - 9);
        if (!v189) {
          goto LABEL_350;
        }
      }
      if (!atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
LABEL_350:
      v187 -= 10;
    }
  }
LABEL_367:
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v191 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v191))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v191, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ProcessDecalBatches", "", (uint8_t *)&buf, 2u);
  }

  uint64_t v192 = (char *)v213;
  if (v213)
  {
    uint64_t v193 = v214;
    unint64_t v194 = v213;
    if (v214 != v213)
    {
      do
      {
        uint64_t v195 = (void *)*((void *)v193 - 3);
        if (v195)
        {
          *((void *)v193 - 2) = v195;
          operator delete(v195);
        }
        uint64_t v196 = (std::__shared_weak_count *)*((void *)v193 - 5);
        if (v196 && !atomic_fetch_add(&v196->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
        v193 -= 48;
      }
      while (v193 != v192);
      unint64_t v194 = v213;
    }
    unint64_t v214 = v192;
    operator delete(v194);
  }
  md::DaVinciDecalBuilder::~DaVinciDecalBuilder((md::DaVinciDecalBuilder *)v218);
}

void sub_1A1CF8A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void md::DaVinciDecalBuilder::~DaVinciDecalBuilder(md::DaVinciDecalBuilder *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[4];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  int v5 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    do
    {
      int v9 = (void *)*v6;
      uint64_t v10 = (void *)v6[3];
      if (v10)
      {
        void v6[4] = v10;
        operator delete(v10);
      }
      operator delete(v6);
      unint64_t v6 = v9;
    }
    while (v9);
  }
  uint8x8_t v7 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 2);
  while (v8)
  {
    uint64_t v11 = v8;
    uint64_t v8 = (void *)*v8;
    uint64_t v12 = (void *)v11[4];
    if (v12)
    {
      v11[5] = v12;
      operator delete(v12);
    }
    unint64_t v13 = (std::__shared_weak_count *)v11[3];
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    operator delete(v11);
  }
  int v14 = *(void **)this;
  *(void *)this = 0;
  if (v14) {
    operator delete(v14);
  }
}

void sub_1A1CF8E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

md::TransitLineSharedResources *md::TransitLineSharedResources::TransitLineSharedResources(md::TransitLineSharedResources *this, const ggl::StandardLibrary *a2, const RenderTargetFormat *a3)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  uint64_t v6 = *((void *)a2 + 10);
  uint64_t v7 = *(void *)(v6 + 3056);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 3064);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (char *)operator new(0x198uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int v9 = &unk_1EF588050;
  long long v236 = *(_OWORD *)a3->colorFormats;
  long long v239 = *(_OWORD *)&a3->colorFormatsCount;
  {
    if (v232)
    {
      {
        if (v232)
        {
          {
            {
              ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TransitLineRibbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r;
            *(void *)algn_1EB32B610 = 1;
          }
          ggl::TransitLineRibbon::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r;
          unk_1E957F3D0 = &ggl::TransitLineRibbon::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1E957F3D8 = 0;
          {
            ggl::TransitLineRibbon::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9585038 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9585040 = (uint64_t)ggl::TransitLineRibbon::Style::reflection(void)::reflection;
            unk_1E9585048 = ggl::TransitLineRibbon::Options::reflection(void)::reflection;
            qword_1E9585050 = (uint64_t)ggl::TransitLineRibbon::ClipParams::reflection(void)::reflection;
          }
          qword_1E957F3E0 = (uint64_t)&ggl::TransitLineRibbon::pipelineDataBasePipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E957F3E8 = xmmword_1A28FC930;
        }
      }
      ggl::TransitLineRibbon::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TransitLineRibbon::BasePipelineSetup::typedReflection(void)::ref;
      ggl::TransitLineRibbonShader::typedReflection(v232);
      qword_1EB318FA8 = (uint64_t)&ggl::TransitLineRibbonShader::typedReflection(void)::ref;
      {
        ggl::TransitLineRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9585158 = 0;
        qword_1E9585160 = (uint64_t)"";
        dword_1E9585168 = 0;
        qword_1E9585170 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1E9585178 = 7;
      }
      qword_1EB318FB0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB318FB8 = 1;
      qword_1EB318FC0 = 0;
      unk_1EB318FC8 = 2;
      qword_1EB318FD0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1EB318FD8 = 0;
      {
        ggl::TransitLineRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9585068 = 0;
        qword_1E9585070 = (uint64_t)"view";
        dword_1E9585078 = 3;
        qword_1E9585080 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1E9585088 = xmmword_1A28FCEB0;
        qword_1E9585098 = 1;
        unk_1E95850A0 = "transform";
        dword_1E95850A8 = 3;
        qword_1E95850B0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        unk_1E95850B8 = xmmword_1A28FCF70;
        qword_1E95850C8 = 2;
        unk_1E95850D0 = "style";
        dword_1E95850D8 = 3;
        qword_1E95850E0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1E95850E8 = xmmword_1A28FD040;
        qword_1E95850F8 = 3;
        unk_1E9585100 = "options";
        dword_1E9585108 = 3;
        qword_1E9585110 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantOptionsBinding(void)::reflection;
        unk_1E9585118 = xmmword_1A28FC960;
        qword_1E9585128 = 4;
        unk_1E9585130 = "clipParams";
        dword_1E9585138 = 3;
        qword_1E9585140 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantClipParamsBinding(void)::reflection;
        unk_1E9585148 = 2;
      }
      qword_1EB318FE0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB318FE8 = 5;
    }
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 5) = 0;
  *((_DWORD *)v9 + 14) = 0;
  *((void *)v9 + 6) = 0;
  *((void *)v9 + 3) = &unk_1EF55B208;
  *((void *)v9 + 8) = &ggl::TransitLineRibbon::BasePipelineState::typedReflection(void)::ref;
  *((void *)v9 + 9) = v7;
  *((void *)v9 + 10) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v9[136] = 0;
  *(_OWORD *)(v9 + 140) = xmmword_1A28FC970;
  *(void *)(v9 + 156) = 0;
  *(void *)(v9 + 172) = 0;
  *(void *)(v9 + 164) = 0;
  v9[184] = 0;
  *(_OWORD *)(v9 + 188) = xmmword_1A28FC970;
  *(void *)(v9 + 204) = 0;
  *(void *)(v9 + 220) = 0;
  *(void *)(v9 + 212) = 0;
  v9[232] = 0;
  *(_OWORD *)(v9 + 236) = xmmword_1A28FC970;
  *(void *)(v9 + 252) = 0;
  *(void *)(v9 + 268) = 0;
  *(void *)(v9 + 260) = 0;
  *(_OWORD *)(v9 + 280) = v236;
  *(_OWORD *)(v9 + 296) = v239;
  v9[312] = 0;
  *((void *)v9 + 48) = 0;
  *((_OWORD *)v9 + 22) = 0u;
  *((_OWORD *)v9 + 23) = 0u;
  *((_OWORD *)v9 + 20) = 0u;
  *((_OWORD *)v9 + 21) = 0u;
  *((void *)v9 + 49) = 0x100000001;
  v9[400] = 0;
  v9[88] = 1;
  *(_WORD *)(v9 + 89) = v234;
  v9[91] = v235;
  *(_OWORD *)(v9 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v9 + 27) = 7;
  *((void *)v9 + 14) = 0;
  *((void *)v9 + 15) = 0;
  *((_DWORD *)v9 + 32) = 0;
  v9[132] = 15;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *((_DWORD *)v9 + 84) = 0;
  *(void *)(v9 + 329) = 0;
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(v9 + 328));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(*(int8x16_t *)(v9 + 344));
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(v9 + 360));
  int16x8_t v53 = vmovl_high_s8(v52);
  int32x4_t v54 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v55 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v56 = vceqzq_s8(*(int8x16_t *)(v9 + 376));
  int16x8_t v57 = vmovl_high_s8(v56);
  int32x4_t v58 = vmovl_s16(*(int16x4_t *)v57.i8);
  v13.i64[0] = v58.i32[0];
  v13.i64[1] = v58.i32[1];
  int8x16_t v59 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v13), v55), v44);
  int16x8_t v60 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v60.i8);
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v62 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v13);
  int16x8_t v63 = vmovl_s8(*(int8x8_t *)v56.i8);
  int32x4_t v64 = vmovl_s16(*(int16x4_t *)v63.i8);
  v13.i64[0] = v64.i32[0];
  v13.i64[1] = v64.i32[1];
  int8x16_t v65 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v13), v62), v45);
  int32x4_t v66 = vmovl_high_s16(v53);
  v13.i64[0] = v66.i32[0];
  v13.i64[1] = v66.i32[1];
  int8x16_t v67 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v13);
  int32x4_t v68 = vmovl_high_s16(v57);
  v13.i64[0] = v68.i32[0];
  v13.i64[1] = v68.i32[1];
  int8x16_t v69 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v13), v67), v46);
  int32x4_t v70 = vmovl_high_s16(v60);
  v13.i64[0] = v70.i32[0];
  v13.i64[1] = v70.i32[1];
  int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v13);
  int32x4_t v72 = vmovl_high_s16(v63);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v13), v71), v47);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v74 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v13);
  v13.i64[0] = v58.i32[2];
  v13.i64[1] = v58.i32[3];
  int8x16_t v75 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v13), v74), v48);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v76 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v13);
  v13.i64[0] = v64.i32[2];
  v13.i64[1] = v64.i32[3];
  int8x16_t v77 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v13), v76), v49);
  v13.i64[0] = v66.i32[2];
  v13.i64[1] = v66.i32[3];
  int8x16_t v78 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v13);
  v13.i64[0] = v68.i32[2];
  v13.i64[1] = v68.i32[3];
  int8x16_t v79 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v13), v78), v50);
  v13.i64[0] = v70.i32[2];
  v13.i64[1] = v70.i32[3];
  int8x16_t v80 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v13);
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  *((void *)v9 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v65, v59), vorrq_s8(v73, v69)), (int64x2_t)vorrq_s8(vorrq_s8(v77, v75), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), v80), v51), v79))));
  *((void *)v9 + 3) = &unk_1EF55F028;
  v9[312] = 1;
  unint64_t v81 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v9 + 24;
  *((void *)this + 1) = v9;
  if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v82 = *((void *)a2 + 10);
  uint64_t v83 = *(void *)(v82 + 3080);
  uint64_t v84 = *(std::__shared_weak_count **)(v82 + 3088);
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v85 = (char *)operator new(0x198uLL);
  *((void *)v85 + 1) = 0;
  *((void *)v85 + 2) = 0;
  *(void *)unint64_t v85 = &unk_1EF588088;
  long long v237 = *(_OWORD *)a3->colorFormats;
  long long v240 = *(_OWORD *)&a3->colorFormatsCount;
  {
    {
      {
        {
          ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TransitLineRibbon::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::attributesReflection(void)::r;
        *(void *)algn_1EB32B610 = 1;
      }
      ggl::TransitLineRibbon::PatternedBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::typedReflection(void)::r;
      unk_1E9585000 = &ggl::TransitLineRibbon::pipelineDataPatternedBasePipelineDeviceStructs(void)::ref;
      qword_1E9585008 = 0;
      {
        ggl::TransitLineRibbon::pipelineDataPatternedBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        *(void *)algn_1E9585188 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1E9585190 = (uint64_t)ggl::TransitLineRibbon::Style::reflection(void)::reflection;
        unk_1E9585198 = ggl::TransitLineRibbon::Options::reflection(void)::reflection;
        qword_1E95851A0 = (uint64_t)ggl::TransitLineRibbon::PatternStyle::reflection(void)::reflection;
        unk_1E95851A8 = ggl::TransitLineRibbon::ClipParams::reflection(void)::reflection;
      }
      qword_1E9585010 = (uint64_t)&ggl::TransitLineRibbon::pipelineDataPatternedBasePipelineConstantStructs(void)::ref;
      unk_1E9585018 = xmmword_1A28FE170;
    }
    ggl::TransitLineRibbon::PatternedBasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TransitLineRibbon::PatternedBasePipelineSetup::typedReflection(void)::ref;
    {
      ggl::PatternedTransitLineRibbonShader::typedReflection(void)::ref = (uint64_t)"PatternedTransitLineRibbonShader";
      {
        qword_1EB32A738 = (uint64_t)"PatternedTransitLineRibbonShader";
        unk_1EB32A740 = ggl::patternedTransitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
        qword_1EB32A748 = 1;
        unk_1EB32A750 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1EB32A758 = 6;
        unk_1EB32A760 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1EB32A768 = 0;
        unk_1EB32A770 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref = 1746350796;
        qword_1EB32A778 = 1;
        unk_1EB32A780 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1EB32A790 = 0;
        unk_1EB32A798 = 0;
        qword_1EB32A788 = 1;
      }
      qword_1EB3235E8 = (uint64_t)&ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
      dword_1EB3235F0 = 1746350796;
      {
        ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x1EFDD56E6;
        qword_1EB32AD10 = (uint64_t)"PatternedTransitLineRibbonShader";
        unk_1EB32AD18 = 0;
        qword_1EB32AD20 = 0;
        unk_1EB32AD28 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1EB32AD30 = 1;
        unk_1EB32AD38 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1EB32AD40 = 0;
        unk_1EB32AD48 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1EB32AD50 = 2;
        unk_1EB32AD58 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1EB32AD68 = 0;
        unk_1EB32AD70 = 0;
        qword_1EB32AD60 = 2;
      }
      qword_1EB3235F8 = (uint64_t)&ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB323600 = -270706970;
      qword_1EB323608 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderConstants(void)::ref;
      unk_1EB323610 = 6;
      qword_1EB323618 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderTextures(void)::ref;
      unk_1EB323620 = 3;
      qword_1EB323628 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderSamplers(void)::ref;
      unk_1EB323630 = 3;
    }
    qword_1EB318FF8 = (uint64_t)&ggl::PatternedTransitLineRibbonShader::typedReflection(void)::ref;
    {
      ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineAttributeStructBinding(void)::attr = 0;
      *(void *)algn_1E95852D8 = 0;
      qword_1E95852E0 = (uint64_t)"";
      dword_1E95852E8 = 0;
      qword_1E95852F0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineAttributeBinding_0(void)::attr;
      unk_1E95852F8 = 7;
    }
    qword_1EB319000 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineAttributeStructBinding(void)::attr;
    *(void *)algn_1EB319008 = 1;
    qword_1EB319010 = 0;
    unk_1EB319018 = 3;
    qword_1EB319020 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineDeviceStructBinding(void)::ref;
    unk_1EB319028 = 0;
    {
      ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantStructBinding(void)::ref = 0;
      *(void *)algn_1E95851B8 = 0;
      qword_1E95851C0 = (uint64_t)"view";
      dword_1E95851C8 = 3;
      qword_1E95851D0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantViewBinding(void)::reflection;
      unk_1E95851D8 = xmmword_1A28FCEB0;
      qword_1E95851E8 = 1;
      unk_1E95851F0 = "transform";
      dword_1E95851F8 = 3;
      qword_1E9585200 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantTransformBinding(void)::reflection;
      unk_1E9585208 = xmmword_1A28FCF70;
      qword_1E9585218 = 2;
      unk_1E9585220 = "style";
      dword_1E9585228 = 3;
      qword_1E9585230 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantStyleBinding(void)::reflection;
      unk_1E9585238 = xmmword_1A28FD040;
      qword_1E9585248 = 3;
      unk_1E9585250 = "options";
      dword_1E9585258 = 3;
      qword_1E9585260 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantOptionsBinding(void)::reflection;
      unk_1E9585268 = xmmword_1A28FC960;
      qword_1E9585278 = 4;
      unk_1E9585280 = "patternStyle";
      dword_1E9585288 = 3;
      qword_1E9585290 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantPatternStyleBinding(void)::reflection;
      unk_1E9585298 = xmmword_1A28FE660;
      qword_1E95852A8 = 5;
      unk_1E95852B0 = "clipParams";
      dword_1E95852B8 = 3;
      qword_1E95852C0 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantClipParamsBinding(void)::reflection;
      unk_1E95852C8 = 2;
    }
    qword_1EB319030 = (uint64_t)&ggl::TransitLineRibbon::pipelineStatePatternedBasePipelineConstantStructBinding(void)::ref;
    unk_1EB319038 = 6;
  }
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v85 + 4) = 0;
  *((void *)v85 + 5) = 0;
  *((_DWORD *)v85 + 14) = 0;
  *((void *)v85 + 6) = 0;
  *((void *)v85 + 3) = &unk_1EF55B208;
  *((void *)v85 + 8) = &ggl::TransitLineRibbon::PatternedBasePipelineState::typedReflection(void)::ref;
  *((void *)v85 + 9) = v83;
  *((void *)v85 + 10) = v84;
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v85[136] = 0;
  *(_OWORD *)(v85 + 140) = xmmword_1A28FC970;
  *(void *)(v85 + 156) = 0;
  *(void *)(v85 + 172) = 0;
  *(void *)(v85 + 164) = 0;
  v85[184] = 0;
  *(_OWORD *)(v85 + 188) = xmmword_1A28FC970;
  *(void *)(v85 + 204) = 0;
  *(void *)(v85 + 220) = 0;
  *(void *)(v85 + 212) = 0;
  v85[232] = 0;
  *(_OWORD *)(v85 + 236) = xmmword_1A28FC970;
  *(void *)(v85 + 252) = 0;
  *(void *)(v85 + 268) = 0;
  *(void *)(v85 + 260) = 0;
  *(_OWORD *)(v85 + 280) = v237;
  *(_OWORD *)(v85 + 296) = v240;
  v85[312] = 0;
  *((void *)v85 + 48) = 0;
  *((_OWORD *)v85 + 22) = 0u;
  *((_OWORD *)v85 + 23) = 0u;
  *((_OWORD *)v85 + 20) = 0u;
  *((_OWORD *)v85 + 21) = 0u;
  *((void *)v85 + 49) = 0x100000001;
  v85[400] = 0;
  v85[88] = 1;
  *(_WORD *)(v85 + 89) = v234;
  v85[91] = v235;
  *(_OWORD *)(v85 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v85 + 27) = 7;
  *((void *)v85 + 14) = 0;
  *((void *)v85 + 15) = 0;
  *((_DWORD *)v85 + 32) = 0;
  v85[132] = 15;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  *((_DWORD *)v85 + 84) = 0;
  *(void *)(v85 + 329) = 0;
  int8x16_t v86 = vceqzq_s8(*(int8x16_t *)(v85 + 328));
  int16x8_t v87 = vmovl_high_s8(v86);
  int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
  v89.i64[0] = v88.u32[0];
  v89.i64[1] = v88.u32[1];
  int8x16_t v90 = v89;
  int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
  int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
  v89.i64[0] = v92.u32[0];
  v89.i64[1] = v92.u32[1];
  int8x16_t v93 = v89;
  int32x4_t v94 = vmovl_high_s16(v87);
  v89.i64[0] = v94.u32[0];
  v89.i64[1] = v94.u32[1];
  int8x16_t v95 = v89;
  int32x4_t v96 = vmovl_high_s16(v91);
  v89.i64[0] = v96.u32[0];
  v89.i64[1] = v96.u32[1];
  int8x16_t v97 = v89;
  v89.i64[0] = v88.u32[2];
  v89.i64[1] = v88.u32[3];
  int8x16_t v98 = v89;
  v89.i64[0] = v92.u32[2];
  v89.i64[1] = v92.u32[3];
  int8x16_t v99 = v89;
  v89.i64[0] = v94.u32[2];
  v89.i64[1] = v94.u32[3];
  int8x16_t v100 = v89;
  v89.i64[0] = v96.u32[2];
  v89.i64[1] = v96.u32[3];
  int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
  int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v100);
  int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v99);
  int8x16_t v104 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v95);
  int8x16_t v105 = vceqzq_s8(*(int8x16_t *)(v85 + 344));
  int16x8_t v106 = vmovl_high_s8(v105);
  int32x4_t v107 = vmovl_s16(*(int16x4_t *)v106.i8);
  v89.i64[0] = v107.u32[0];
  v89.i64[1] = v107.u32[1];
  int8x16_t v108 = v89;
  int16x8_t v109 = vmovl_s8(*(int8x8_t *)v105.i8);
  int32x4_t v110 = vmovl_s16(*(int16x4_t *)v109.i8);
  v89.i64[0] = v110.u32[0];
  v89.i64[1] = v110.u32[1];
  int8x16_t v111 = v89;
  int32x4_t v112 = vmovl_high_s16(v106);
  v89.i64[0] = v112.u32[0];
  v89.i64[1] = v112.u32[1];
  int8x16_t v113 = v89;
  int32x4_t v114 = vmovl_high_s16(v109);
  v89.i64[0] = v114.u32[0];
  v89.i64[1] = v114.u32[1];
  int8x16_t v115 = v89;
  v89.i64[0] = v107.u32[2];
  v89.i64[1] = v107.u32[3];
  int8x16_t v116 = v89;
  v89.i64[0] = v110.u32[2];
  v89.i64[1] = v110.u32[3];
  int8x16_t v117 = v89;
  v89.i64[0] = v112.u32[2];
  v89.i64[1] = v112.u32[3];
  int8x16_t v118 = v89;
  v89.i64[0] = v114.u32[2];
  v89.i64[1] = v114.u32[3];
  int8x16_t v119 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v118);
  int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v108), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
  int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v111), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
  int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v113), v104);
  int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v97));
  int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v116), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v98));
  int8x16_t v125 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v117), v103);
  int8x16_t v126 = vorrq_s8(v119, v102);
  int8x16_t v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v101);
  int8x16_t v128 = vceqzq_s8(*(int8x16_t *)(v85 + 360));
  int16x8_t v129 = vmovl_s8(*(int8x8_t *)v128.i8);
  int32x4_t v130 = vmovl_high_s16(v129);
  int16x8_t v131 = vmovl_high_s8(v128);
  int32x4_t v132 = vmovl_high_s16(v131);
  int32x4_t v133 = vmovl_s16(*(int16x4_t *)v129.i8);
  int32x4_t v134 = vmovl_s16(*(int16x4_t *)v131.i8);
  v89.i64[0] = v133.i32[0];
  v89.i64[1] = v133.i32[1];
  int8x16_t v135 = v89;
  v89.i64[0] = v134.i32[0];
  v89.i64[1] = v134.i32[1];
  int8x16_t v136 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
  int8x16_t v137 = vceqzq_s8(*(int8x16_t *)(v85 + 376));
  int16x8_t v138 = vmovl_high_s8(v137);
  int32x4_t v139 = vmovl_s16(*(int16x4_t *)v138.i8);
  v89.i64[0] = v139.i32[0];
  v89.i64[1] = v139.i32[1];
  int16x8_t v140 = vmovl_s8(*(int8x8_t *)v137.i8);
  int32x4_t v141 = vmovl_s16(*(int16x4_t *)v140.i8);
  int8x16_t v142 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v89), v136), v120);
  v89.i64[0] = v141.i32[0];
  v89.i64[1] = v141.i32[1];
  int8x16_t v143 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v89), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v135));
  v89.i64[0] = v132.i32[0];
  v89.i64[1] = v132.i32[1];
  int8x16_t v144 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v89);
  int32x4_t v145 = vmovl_high_s16(v138);
  int8x16_t v146 = vorrq_s8(v143, v121);
  v89.i64[0] = v145.i32[0];
  v89.i64[1] = v145.i32[1];
  int8x16_t v147 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v89), v144);
  v89.i64[0] = v130.i32[0];
  v89.i64[1] = v130.i32[1];
  int8x16_t v148 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v89);
  int32x4_t v149 = vmovl_high_s16(v140);
  v89.i64[0] = v149.i32[0];
  v89.i64[1] = v149.i32[1];
  int8x16_t v150 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v89), v148), v123);
  v89.i64[0] = v134.i32[2];
  v89.i64[1] = v134.i32[3];
  int8x16_t v151 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v89);
  v89.i64[0] = v139.i32[2];
  v89.i64[1] = v139.i32[3];
  int8x16_t v152 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v89), v151), v124);
  v89.i64[0] = v133.i32[2];
  v89.i64[1] = v133.i32[3];
  int8x16_t v153 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v89);
  v89.i64[0] = v141.i32[2];
  v89.i64[1] = v141.i32[3];
  int8x16_t v154 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v89), v153), v125);
  v89.i64[0] = v132.i32[2];
  v89.i64[1] = v132.i32[3];
  int8x16_t v155 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v89);
  v89.i64[0] = v145.i32[2];
  v89.i64[1] = v145.i32[3];
  int8x16_t v156 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v89), v155), v126);
  v89.i64[0] = v130.i32[2];
  v89.i64[1] = v130.i32[3];
  int8x16_t v157 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v89);
  v89.i64[0] = v149.i32[2];
  v89.i64[1] = v149.i32[3];
  *((void *)v85 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v146, v142), vorrq_s8(v150, vorrq_s8(v147, v122))), (int64x2_t)vorrq_s8(vorrq_s8(v154, v152), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), v157), v127), v156))));
  *((void *)v85 + 3) = &unk_1EF55F078;
  v85[312] = 1;
  int8x16_t v158 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = v85 + 24;
  *((void *)this + 3) = v85;
  if (v158 && !atomic_fetch_add(&v158->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
  }
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  uint64_t v159 = *((void *)a2 + 10);
  uint64_t v160 = *(void *)(v159 + 2312);
  std::string::size_type v161 = *(std::__shared_weak_count **)(v159 + 2320);
  if (v161) {
    atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v162 = (char *)operator new(0x198uLL);
  *((void *)v162 + 1) = 0;
  *((void *)v162 + 2) = 0;
  *(void *)uint64_t v162 = &unk_1EF5835B8;
  long long v238 = *(_OWORD *)a3->colorFormats;
  long long v241 = *(_OWORD *)&a3->colorFormatsCount;
  {
    if (v233)
    {
      {
        if (v233)
        {
          {
            {
              ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B738 = 1;
          }
          ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1EB320748 = &ggl::SolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1EB320750 = 0;
          {
            ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EB320780 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EB320788 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
            unk_1EB320790 = ggl::Tile::Clipping::reflection(void)::reflection;
          }
          qword_1EB320758 = (uint64_t)&ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1EB320760 = xmmword_1A28FC860;
        }
      }
      ggl::SolidRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref;
      ggl::SolidRibbonShader::typedReflection(v233);
      qword_1EB318880 = (uint64_t)&ggl::SolidRibbonShader::typedReflection(void)::ref;
      {
        ggl::SolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9581DA0 = 0;
        qword_1E9581DA8 = (uint64_t)"";
        dword_1E9581DB0 = 0;
        qword_1E9581DB8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1E9581DC0 = 4;
      }
      qword_1EB318888 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
      unk_1EB318890 = 1;
      qword_1EB318898 = 0;
      unk_1EB3188A0 = 2;
      qword_1EB3188A8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1EB3188B0 = 0;
      {
        ggl::SolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        unk_1E9581CE0 = 0;
        qword_1E9581CE8 = (uint64_t)"view";
        dword_1E9581CF0 = 3;
        qword_1E9581CF8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
        unk_1E9581D00 = xmmword_1A28FCEB0;
        qword_1E9581D10 = 1;
        qword_1E9581D18 = (uint64_t)"transform";
        dword_1E9581D20 = 3;
        qword_1E9581D28 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1E9581D30 = xmmword_1A28FCF70;
        qword_1E9581D40 = 2;
        unk_1E9581D48 = "style";
        dword_1E9581D50 = 3;
        qword_1E9581D58 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
        unk_1E9581D60 = xmmword_1A28FD1E0;
        qword_1E9581D70 = 3;
        unk_1E9581D78 = "tileClipping";
        dword_1E9581D80 = 3;
        qword_1E9581D88 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantTileClippingBinding(void)::reflection;
        unk_1E9581D90 = 2;
      }
      qword_1EB3188B8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
      unk_1EB3188C0 = 4;
    }
  }
  if (v161) {
    atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v162 + 4) = 0;
  *((void *)v162 + 5) = 0;
  *((_DWORD *)v162 + 14) = 0;
  *((void *)v162 + 6) = 0;
  *((void *)v162 + 3) = &unk_1EF55B208;
  *((void *)v162 + 8) = &ggl::SolidRibbon::PipelineState::typedReflection(void)::ref;
  *((void *)v162 + 9) = v160;
  *((void *)v162 + 10) = v161;
  if (v161) {
    atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v162[136] = 0;
  *(_OWORD *)(v162 + 140) = xmmword_1A28FC970;
  *(void *)(v162 + 156) = 0;
  *(void *)(v162 + 172) = 0;
  *(void *)(v162 + 164) = 0;
  v162[184] = 0;
  *(_OWORD *)(v162 + 188) = xmmword_1A28FC970;
  *(void *)(v162 + 204) = 0;
  *(void *)(v162 + 220) = 0;
  *(void *)(v162 + 212) = 0;
  v162[232] = 0;
  *(_OWORD *)(v162 + 236) = xmmword_1A28FC970;
  *(void *)(v162 + 252) = 0;
  *(void *)(v162 + 268) = 0;
  *(void *)(v162 + 260) = 0;
  *(_OWORD *)(v162 + 280) = v238;
  *(_OWORD *)(v162 + 296) = v241;
  v162[312] = 0;
  *((void *)v162 + 48) = 0;
  *((_OWORD *)v162 + 22) = 0u;
  *((_OWORD *)v162 + 23) = 0u;
  *((_OWORD *)v162 + 20) = 0u;
  *((_OWORD *)v162 + 21) = 0u;
  *((void *)v162 + 49) = 0x100000001;
  v162[400] = 0;
  v162[88] = 1;
  *(_WORD *)(v162 + 89) = v234;
  v162[91] = v235;
  *(_OWORD *)(v162 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v162 + 27) = 7;
  *((void *)v162 + 14) = 0;
  *((void *)v162 + 15) = 0;
  *((_DWORD *)v162 + 32) = 0;
  v162[132] = 15;
  if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  *(_DWORD *)(v162 + 329) = 0x10000;
  *((_DWORD *)v162 + 84) = 0;
  *(_DWORD *)(v162 + 333) = 0;
  int8x16_t v163 = vceqzq_s8(*(int8x16_t *)(v162 + 328));
  int16x8_t v164 = vmovl_s8(*(int8x8_t *)v163.i8);
  int32x4_t v165 = vmovl_high_s16(v164);
  v166.i64[0] = v165.u32[2];
  v166.i64[1] = v165.u32[3];
  int8x16_t v167 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v166);
  int16x8_t v168 = vmovl_high_s8(v163);
  int32x4_t v169 = vmovl_high_s16(v168);
  v166.i64[0] = v169.u32[2];
  v166.i64[1] = v169.u32[3];
  int8x16_t v170 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v166);
  int32x4_t v171 = vmovl_s16(*(int16x4_t *)v164.i8);
  v166.i64[0] = v171.u32[2];
  v166.i64[1] = v171.u32[3];
  int8x16_t v172 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v166);
  int32x4_t v173 = vmovl_s16(*(int16x4_t *)v168.i8);
  v166.i64[0] = v173.u32[2];
  v166.i64[1] = v173.u32[3];
  int8x16_t v174 = vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v166);
  v166.i64[0] = v165.u32[0];
  v166.i64[1] = v165.u32[1];
  int8x16_t v175 = vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v166);
  v166.i64[0] = v169.u32[0];
  v166.i64[1] = v169.u32[1];
  int8x16_t v176 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v166);
  v166.i64[0] = v171.u32[0];
  v166.i64[1] = v171.u32[1];
  int8x16_t v177 = vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v166);
  v166.i64[0] = v173.u32[0];
  v166.i64[1] = v173.u32[1];
  int8x16_t v178 = vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v166);
  int8x16_t v179 = vceqzq_s8(*(int8x16_t *)(v162 + 344));
  int16x8_t v180 = vmovl_s8(*(int8x8_t *)v179.i8);
  int32x4_t v181 = vmovl_high_s16(v180);
  v166.i64[0] = v181.u32[2];
  v166.i64[1] = v181.u32[3];
  int8x16_t v182 = vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v166);
  int16x8_t v183 = vmovl_high_s8(v179);
  int32x4_t v184 = vmovl_high_s16(v183);
  v166.i64[0] = v184.u32[2];
  v166.i64[1] = v184.u32[3];
  int8x16_t v185 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v166);
  int32x4_t v186 = vmovl_s16(*(int16x4_t *)v180.i8);
  v166.i64[0] = v186.u32[2];
  v166.i64[1] = v186.u32[3];
  int8x16_t v187 = vbicq_s8((int8x16_t)xmmword_1A28FCA10, v166);
  int32x4_t v188 = vmovl_s16(*(int16x4_t *)v183.i8);
  v166.i64[0] = v188.u32[2];
  v166.i64[1] = v188.u32[3];
  int8x16_t v189 = vbicq_s8((int8x16_t)xmmword_1A28FCA20, v166);
  v166.i64[0] = v181.u32[0];
  v166.i64[1] = v181.u32[1];
  int8x16_t v190 = vbicq_s8((int8x16_t)xmmword_1A28FCA30, v166);
  v166.i64[0] = v184.u32[0];
  v166.i64[1] = v184.u32[1];
  int8x16_t v191 = vbicq_s8((int8x16_t)xmmword_1A28FCA40, v166);
  v166.i64[0] = v186.u32[0];
  v166.i64[1] = v186.u32[1];
  int8x16_t v192 = vbicq_s8((int8x16_t)xmmword_1A28FCA50, v166);
  v166.i64[0] = v188.u32[0];
  v166.i64[1] = v188.u32[1];
  int8x16_t v193 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v166), v178);
  int8x16_t v194 = vorrq_s8(v192, v177);
  int8x16_t v195 = vorrq_s8(v191, v176);
  int8x16_t v196 = vorrq_s8(v190, v175);
  int8x16_t v197 = vorrq_s8(v189, v174);
  int8x16_t v198 = vorrq_s8(v187, v172);
  int8x16_t v199 = vorrq_s8(v185, v170);
  int8x16_t v200 = vorrq_s8(v182, v167);
  int8x16_t v201 = vceqzq_s8(*(int8x16_t *)(v162 + 360));
  int16x8_t v202 = vmovl_s8(*(int8x8_t *)v201.i8);
  int32x4_t v203 = vmovl_high_s16(v202);
  int16x8_t v204 = vmovl_high_s8(v201);
  int32x4_t v205 = vmovl_high_s16(v204);
  int32x4_t v206 = vmovl_s16(*(int16x4_t *)v202.i8);
  int32x4_t v207 = vmovl_s16(*(int16x4_t *)v204.i8);
  v166.i64[0] = v207.i32[0];
  v166.i64[1] = v207.i32[1];
  int8x16_t v208 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v166);
  v166.i64[0] = v206.i32[0];
  v166.i64[1] = v206.i32[1];
  int8x16_t v209 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v166);
  v166.i64[0] = v205.i32[0];
  v166.i64[1] = v205.i32[1];
  int8x16_t v210 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v166);
  v166.i64[0] = v203.i32[0];
  v166.i64[1] = v203.i32[1];
  int8x16_t v211 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v166);
  v166.i64[0] = v203.i32[2];
  v166.i64[1] = v203.i32[3];
  int8x16_t v212 = v166;
  v166.i64[0] = v205.i32[2];
  v166.i64[1] = v205.i32[3];
  int8x16_t v213 = v166;
  v166.i64[0] = v206.i32[2];
  v166.i64[1] = v206.i32[3];
  int8x16_t v214 = v166;
  v166.i64[0] = v207.i32[2];
  v166.i64[1] = v207.i32[3];
  int8x16_t v215 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v166);
  int8x16_t v216 = vceqzq_s8(*(int8x16_t *)(v162 + 376));
  int16x8_t v217 = vmovl_high_s8(v216);
  int32x4_t v218 = vmovl_s16(*(int16x4_t *)v217.i8);
  int16x8_t v219 = vmovl_s8(*(int8x8_t *)v216.i8);
  int32x4_t v220 = vmovl_s16(*(int16x4_t *)v219.i8);
  int32x4_t v221 = vmovl_high_s16(v217);
  int32x4_t v222 = vmovl_high_s16(v219);
  v166.i64[0] = v222.i32[2];
  v166.i64[1] = v222.i32[3];
  int8x16_t v223 = vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v166);
  v166.i64[0] = v221.i32[2];
  v166.i64[1] = v221.i32[3];
  int8x16_t v224 = vbicq_s8((int8x16_t)xmmword_1A28FCB00, v166);
  v166.i64[0] = v220.i32[2];
  v166.i64[1] = v220.i32[3];
  int8x16_t v225 = vbicq_s8((int8x16_t)xmmword_1A28FCB10, v166);
  v166.i64[0] = v218.i32[2];
  v166.i64[1] = v218.i32[3];
  int8x16_t v226 = vbicq_s8((int8x16_t)xmmword_1A28FCB20, v166);
  v166.i64[0] = v222.i32[0];
  v166.i64[1] = v222.i32[1];
  int8x16_t v227 = vbicq_s8((int8x16_t)xmmword_1A28FCB30, v166);
  v166.i64[0] = v221.i32[0];
  v166.i64[1] = v221.i32[1];
  int8x16_t v228 = vbicq_s8((int8x16_t)xmmword_1A28FCB40, v166);
  v166.i64[0] = v220.i32[0];
  v166.i64[1] = v220.i32[1];
  int8x16_t v229 = vbicq_s8((int8x16_t)xmmword_1A28FCB50, v166);
  v166.i64[0] = v218.i32[0];
  v166.i64[1] = v218.i32[1];
  *((void *)v162 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v229, v209), v194), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v166), v208), v193)), vorrq_s8(vorrq_s8(vorrq_s8(v227, v211), v196), vorrq_s8(vorrq_s8(v228, v210), v195))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v225, vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v214)), v198), vorrq_s8(vorrq_s8(v226, v215), v197)), vorrq_s8(vorrq_s8(vorrq_s8(v223, vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v212)),
                                                v200),
                                              vorrq_s8(vorrq_s8(v224, vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v213)), v199)))));
  *((void *)v162 + 3) = &unk_1EF55A930;
  v162[312] = 1;
  uint64_t v230 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = v162 + 24;
  *((void *)this + 5) = v162;
  if (v230 && !atomic_fetch_add(&v230->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
    std::__shared_weak_count::__release_weak(v230);
  }
  if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  return this;
}

void sub_1A1CFA9B0(_Unwind_Exception *exception_object)
{
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v4 = (std::__shared_weak_count *)v1[5];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = (std::__shared_weak_count *)v1[3];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[1];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

void ggl::TransitLineRibbonShader::typedReflection(ggl::TransitLineRibbonShader *this)
{
  {
    if (v1)
    {
      ggl::TransitLineRibbonShader::typedReflection(void)::ref = (uint64_t)"TransitLineRibbonShader";
      ggl::transitLineRibbonShaderVertexFunctionDescriptor(v1);
      qword_1EB322628 = (uint64_t)&ggl::transitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<30ul>("TransitLineRibbonShaderVertex");
      dword_1EB322630 = (int)v2;
      ggl::transitLineRibbonShaderFragmentFunctionDescriptor(v2);
      qword_1EB322638 = (uint64_t)&ggl::transitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB322640 = ggl::crc32::compute<32ul>("TransitLineRibbonShaderFragment");
      qword_1EB322648 = (uint64_t)ggl::transitLineRibbonShaderShaderConstants(void)::ref;
      unk_1EB322650 = 5;
      qword_1EB322658 = (uint64_t)ggl::transitLineRibbonShaderShaderTextures(void)::ref;
      unk_1EB322660 = 2;
      qword_1EB322668 = (uint64_t)ggl::transitLineRibbonShaderShaderSamplers(void)::ref;
      unk_1EB322670 = 2;
    }
  }
}

void ggl::SolidRibbonShader::typedReflection(ggl::SolidRibbonShader *this)
{
  {
    if (v1)
    {
      ggl::SolidRibbonShader::typedReflection(void)::ref = (uint64_t)"SolidRibbonShader";
      ggl::solidRibbonShaderVertexFunctionDescriptor(v1);
      qword_1EB321250 = (uint64_t)&ggl::solidRibbonShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<24ul>("SolidRibbonShaderVertex");
      dword_1EB321258 = (int)v2;
      ggl::solidRibbonShaderFragmentFunctionDescriptor(v2);
      qword_1EB321260 = (uint64_t)&ggl::solidRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB321268 = ggl::crc32::compute<26ul>("SolidRibbonShaderFragment");
      qword_1EB321270 = (uint64_t)ggl::solidRibbonShaderShaderConstants(void)::ref;
      unk_1EB321278 = 4;
      qword_1EB321280 = (uint64_t)ggl::solidRibbonShaderShaderTextures(void)::ref;
      unk_1EB321288 = 2;
      qword_1EB321290 = (uint64_t)ggl::solidRibbonShaderShaderSamplers(void)::ref;
      unk_1EB321298 = 2;
    }
  }
}

void ggl::transitLineRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::transitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("TransitLineRibbonShaderFragment");
    *(_DWORD *)algn_1EB328B7C = 1;
    qword_1EB328B80 = (uint64_t)"TransitLineRibbonShader";
    unk_1EB328B88 = 0;
    qword_1EB328B90 = 0;
    unk_1EB328B98 = &ggl::transitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB328BA0 = 1;
    unk_1EB328BA8 = &ggl::transitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB328BB0 = 0;
    unk_1EB328BB8 = &ggl::transitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB328BC0 = 1;
    unk_1EB328BC8 = &ggl::transitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB328BD8 = 0;
    unk_1EB328BE0 = 0;
    qword_1EB328BD0 = 1;
  }
}

void ggl::transitLineRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::transitLineRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("TransitLineRibbonShaderVertex");
    *(_DWORD *)algn_1EB327D24 = 0;
    qword_1EB327D28 = (uint64_t)"TransitLineRibbonShader";
    unk_1EB327D30 = ggl::transitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB327D38 = 1;
    unk_1EB327D40 = &ggl::transitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB327D48 = 5;
    unk_1EB327D50 = &ggl::transitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB327D58 = 0;
    unk_1EB327D60 = &ggl::transitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB327D68 = 1;
    unk_1EB327D70 = &ggl::transitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB327D80 = 0;
    unk_1EB327D88 = 0;
    qword_1EB327D78 = 1;
  }
}

void ggl::solidRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::solidRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("SolidRibbonShaderFragment");
    *(_DWORD *)algn_1EB325F74 = 1;
    qword_1EB325F78 = (uint64_t)"SolidRibbonShader";
    unk_1EB325F80 = 0;
    qword_1EB325F88 = 0;
    unk_1EB325F90 = &ggl::solidRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325F98 = 2;
    unk_1EB325FA0 = &ggl::solidRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB325FA8 = 0;
    unk_1EB325FB0 = &ggl::solidRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB325FB8 = 2;
    unk_1EB325FC0 = &ggl::solidRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325FD0 = 0;
    unk_1EB325FD8 = 0;
    qword_1EB325FC8 = 2;
  }
}

void ggl::solidRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::solidRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("SolidRibbonShaderVertex");
    *(_DWORD *)algn_1EB3254AC = 0;
    qword_1EB3254B0 = (uint64_t)"SolidRibbonShader";
    unk_1EB3254B8 = ggl::solidRibbonShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB3254C0 = 1;
    unk_1EB3254C8 = &ggl::solidRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3254D0 = 4;
    unk_1EB3254D8 = &ggl::solidRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3254E0 = 0;
    unk_1EB3254E8 = &ggl::solidRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3254F0 = 0;
    unk_1EB3254F8 = &ggl::solidRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB325508 = 0;
    unk_1EB325510 = 0;
    qword_1EB325500 = 0;
  }
}

unint64_t *ggl::FragmentedPool<ggl::CommonMesh::Pos4Mesh>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    operator new();
  }
  uint64_t v6 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v6;
  a1[5] = 0;
  a1[6] = 0;
  {
    operator new();
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  if (v7 != a2)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_6:
    a1[11] = v7;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(void, unint64_t *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1 + 8);
LABEL_8:
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8)
  {
LABEL_11:
    a1[15] = v8;
    goto LABEL_13;
  }
  if (v8 != a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(void, unint64_t *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  unint64_t v9 = *a1;
  if (a1[2] - *a1 > 0x31F) {
    goto LABEL_26;
  }
  unint64_t v10 = a1[1];
  uint64_t v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 800, 8);
  uint64_t v12 = v10 - v9;
  unint64_t v13 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = *a1;
  unint64_t v14 = a1[1];
  unint64_t v16 = v14 - *a1;
  if (v14 == *a1)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  unint64_t v17 = v16 - 8;
  if (v16 - 8 >= 0x58)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    if (v14 - (v12 & 0xFFFFFFFFFFFFFFF8) - v11 >= 0x20)
    {
      uint64_t v19 = v12 >> 3;
      uint64_t v20 = (v17 >> 3) + 1;
      int8x16_t v21 = (_OWORD *)(v11 + 8 * v19 - 16);
      int8x16_t v22 = (long long *)(v14 - 16);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      unint64_t v18 = v13 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v25 = *(void *)(v14 - 8);
    v14 -= 8;
    *(void *)(v18 - 8) = v25;
    v18 -= 8;
  }
  while (v14 != v15);
LABEL_23:
  unint64_t v14 = *a1;
LABEL_24:
  *a1 = v18;
  a1[1] = v13;
  unint64_t v26 = a1[2];
  a1[2] = v11 + 800;
  if (v14) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[3] + 40))(a1[3], v14, v26 - v14);
  }
LABEL_26:
  unint64_t v27 = a1[4];
  if (a1[6] - v27 > 0x31F) {
    return a1;
  }
  unint64_t v28 = a1[5];
  uint64_t v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[7] + 16))(a1[7], 800, 8);
  uint64_t v30 = v28 - v27;
  unint64_t v31 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = a1[4];
  unint64_t v32 = a1[5];
  unint64_t v34 = v32 - v33;
  if (v32 == v33)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  unint64_t v35 = v34 - 8;
  if (v34 - 8 >= 0x58)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    if (v32 - (v30 & 0xFFFFFFFFFFFFFFF8) - v29 >= 0x20)
    {
      uint64_t v37 = v30 >> 3;
      uint64_t v38 = (v35 >> 3) + 1;
      int8x16_t v39 = (_OWORD *)(v29 + 8 * v37 - 16);
      int8x16_t v40 = (long long *)(v32 - 16);
      uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *int8x16_t v39 = v42;
        v39 -= 2;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      unint64_t v36 = v31 - 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v32 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_36;
      }
    }
  }
  else
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v43 = *(void *)(v32 - 8);
    v32 -= 8;
    *(void *)(v36 - 8) = v43;
    v36 -= 8;
  }
  while (v32 != v33);
LABEL_36:
  unint64_t v32 = a1[4];
LABEL_37:
  a1[4] = v36;
  a1[5] = v31;
  unint64_t v44 = a1[6];
  a1[6] = v29 + 800;
  if (v32) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[7] + 40))(a1[7], v32, v44 - v32);
  }
  return a1;
}

void sub_1A1CFB41C(_Unwind_Exception *a1)
{
  std::function<ggl::CommonMesh::Pos4Mesh * ()(void)>::~function(v3);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v2);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10CommonMesh8Pos4MeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57ABC0;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577520;
}

unint64_t *ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    operator new();
  }
  uint64_t v6 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v6;
  a1[5] = 0;
  a1[6] = 0;
  {
    operator new();
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  if (v7 != a2)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_6:
    a1[11] = v7;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(void, unint64_t *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1 + 8);
LABEL_8:
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8)
  {
LABEL_11:
    a1[15] = v8;
    goto LABEL_13;
  }
  if (v8 != a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(void, unint64_t *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  unint64_t v9 = *a1;
  if (a1[2] - *a1 > 0x31F) {
    goto LABEL_26;
  }
  unint64_t v10 = a1[1];
  uint64_t v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 800, 8);
  uint64_t v12 = v10 - v9;
  unint64_t v13 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = *a1;
  unint64_t v14 = a1[1];
  unint64_t v16 = v14 - *a1;
  if (v14 == *a1)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  unint64_t v17 = v16 - 8;
  if (v16 - 8 >= 0x58)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    if (v14 - (v12 & 0xFFFFFFFFFFFFFFF8) - v11 >= 0x20)
    {
      uint64_t v19 = v12 >> 3;
      uint64_t v20 = (v17 >> 3) + 1;
      int8x16_t v21 = (_OWORD *)(v11 + 8 * v19 - 16);
      int8x16_t v22 = (long long *)(v14 - 16);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      unint64_t v18 = v13 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v25 = *(void *)(v14 - 8);
    v14 -= 8;
    *(void *)(v18 - 8) = v25;
    v18 -= 8;
  }
  while (v14 != v15);
LABEL_23:
  unint64_t v14 = *a1;
LABEL_24:
  *a1 = v18;
  a1[1] = v13;
  unint64_t v26 = a1[2];
  a1[2] = v11 + 800;
  if (v14) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[3] + 40))(a1[3], v14, v26 - v14);
  }
LABEL_26:
  unint64_t v27 = a1[4];
  if (a1[6] - v27 > 0x31F) {
    return a1;
  }
  unint64_t v28 = a1[5];
  uint64_t v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[7] + 16))(a1[7], 800, 8);
  uint64_t v30 = v28 - v27;
  unint64_t v31 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = a1[4];
  unint64_t v32 = a1[5];
  unint64_t v34 = v32 - v33;
  if (v32 == v33)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  unint64_t v35 = v34 - 8;
  if (v34 - 8 >= 0x58)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    if (v32 - (v30 & 0xFFFFFFFFFFFFFFF8) - v29 >= 0x20)
    {
      uint64_t v37 = v30 >> 3;
      uint64_t v38 = (v35 >> 3) + 1;
      int8x16_t v39 = (_OWORD *)(v29 + 8 * v37 - 16);
      int8x16_t v40 = (long long *)(v32 - 16);
      uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *int8x16_t v39 = v42;
        v39 -= 2;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      unint64_t v36 = v31 - 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v32 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_36;
      }
    }
  }
  else
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v43 = *(void *)(v32 - 8);
    v32 -= 8;
    *(void *)(v36 - 8) = v43;
    v36 -= 8;
  }
  while (v32 != v33);
LABEL_36:
  unint64_t v32 = a1[4];
LABEL_37:
  a1[4] = v36;
  a1[5] = v31;
  unint64_t v44 = a1[6];
  a1[6] = v29 + 800;
  if (v32) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[7] + 40))(a1[7], v32, v44 - v32);
  }
  return a1;
}

void sub_1A1CFB928(_Unwind_Exception *a1)
{
  std::function<ggl::Debug::BasePipelineSetup * ()(void)>::~function(v3);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v2);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug17BasePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C090;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Debug::BasePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577448;
  a2[1] = v2;
  return result;
}

void md::MapNavLabeler::layoutForStaging(uint64_t a1)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 64);
  md::RouteLineSupport::layoutForWaypointFeatures((md::RouteLineSupport *)v2, (const md::LabelLayoutContext *)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 8) + 432) + 26));
  *(_WORD *)(v2 + 250) = 0;
  if (*(void *)(a1 + 104))
  {
    uint64_t v3 = *(id **)(a1 + 688);
    if (v3[3])
    {
      if (*(unsigned char *)(a1 + 681))
      {
        *(unsigned char *)(a1 + 681) = 0;
        md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)v3);
        [v3[3] resetNotificationsForObserverType:2];
        md::LabelNavEtaLabeler::prepareAnnotatableSectionsRoutes((md::LabelNavEtaLabeler *)v3);
        md::LabelNavEtaLabeler::recreateRouteCollider((md::LabelNavEtaLabeler *)v3, (VKRouteContext *)v3[3]);
      }
      uint64_t v4 = *(void *)(a1 + 24);
      uint64_t v5 = *(void *)(v4 + 432);
      unint64_t v81 = &unk_1EF5303F0;
      uint64_t v82 = v4;
      uint64_t v83 = a1;
      uint64_t v84 = v5;
      uint64_t v85 = a1 + 136;
      int8x16_t v77 = 0;
      int8x16_t v78 = 0;
      int8x16_t v79 = 0;
      {
        operator new();
      }
      uint64_t v80 = mdm::Allocator::instance(void)::alloc;
      uint64_t v6 = *(void *)(a1 + 784) - *(void *)(a1 + 776);
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
      unint64_t v8 = v7 + 1;
      if (v7 == -1)
      {
        unint64_t v9 = 0;
      }
      else
      {
        if (v8 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v9 = (long long *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, v6 + 24, 4);
        int8x16_t v77 = v9;
        int8x16_t v78 = v9;
        int8x16_t v79 = (long long *)((char *)v9 + 24 * v8);
      }
      std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::AvoidanceRectWithPriority const*>,std::__wrap_iter<md::AvoidanceRectWithPriority const*>>((uint64_t *)&v77, (uint64_t)v9, *(long long **)(a1 + 776), *(long long **)(a1 + 784), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 784) - *(void *)(a1 + 776)) >> 3));
      unint64_t v10 = (float64x2_t *)v84;
      uint64_t v11 = (double *)v85;
      float v12 = *(float *)(v85 + 120);
      float v13 = *(float *)(v82 + 176);
      if (!md::LabelLayoutContext::isDistanceClipped(v84, v85 + 96))
      {
        v14.n128_f32[0] = v13 * v12;
        if ((float)(v13 * v12) != 0.0)
        {
          float64x2_t v15 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v10[60], v10[54], v11[12]), v10[56], v11[13]), v10[58], v11[14]), 1.0/ (v10[61].f64[1] + v10[55].f64[1] * v11[12] + v10[57].f64[1] * v11[13] + v10[59].f64[1] * v11[14]));
          v14.n128_f32[0] = v14.n128_f32[0] * 0.5;
          float32x4_t v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v15), v15);
          float32x4_t v17 = (float32x4_t)vdupq_lane_s32((int32x2_t)v14.n128_u64[0], 0);
          *(void *)&long long v18 = vsubq_f32(v16, v17).u64[0];
          __n128 v14 = (__n128)vaddq_f32(v16, v17);
          *((void *)&v18 + 1) = v14.n128_u64[1];
          uint64_t v19 = v78;
          uint64_t v20 = v79;
          if (v78 >= v79)
          {
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - (char *)v77) >> 3);
            unint64_t v23 = v22 + 1;
            if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * (((char *)v79 - (char *)v77) >> 3) > v23) {
              unint64_t v23 = 0x5555555555555556 * (((char *)v79 - (char *)v77) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v77) >> 3) >= 0x555555555555555) {
              uint64_t v24 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              uint64_t v24 = v23;
            }
            if (v24)
            {
              long long v76 = v18;
              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80 + 16))(v80, 24 * v24, 4);
              unint64_t v26 = (long long *)(v25 + 24 * v22);
              uint64_t v27 = v25 + 24 * v24;
              __n128 v14 = (__n128)v76;
              if (v25)
              {
                *unint64_t v26 = v76;
                unint64_t v28 = v25 + 24 * v22;
                *(_DWORD *)(v28 + 16) = 1065353216;
                *(unsigned char *)(v28 + 20) = 0;
              }
            }
            else
            {
              uint64_t v27 = 0;
              unint64_t v26 = (long long *)(8 * (((char *)v78 - (char *)v77) >> 3));
            }
            int8x16_t v21 = (long long *)((char *)v26 + 24);
            uint64_t v30 = v77;
            uint64_t v29 = v78;
            if (v78 != v77)
            {
              do
              {
                __n128 v14 = *(__n128 *)((char *)v29 - 24);
                *((void *)v26 - 1) = *((void *)v29 - 1);
                *(long long *)((char *)v26 - 24) = (__int128)v14;
                unint64_t v26 = (long long *)((char *)v26 - 24);
                uint64_t v29 = (long long *)((char *)v29 - 24);
              }
              while (v29 != v30);
              uint64_t v29 = v77;
            }
            int8x16_t v77 = v26;
            int8x16_t v79 = (long long *)v27;
            if (v29) {
              (*(void (**)(uint64_t, long long *, int64_t))(*(void *)v80 + 40))(v80, v29, (char *)v20 - (char *)v29);
            }
          }
          else
          {
            if (v78)
            {
              long long *v78 = v18;
              *((_DWORD *)v19 + 4) = 1065353216;
              *((unsigned char *)v19 + 20) = 0;
            }
            int8x16_t v21 = (long long *)((char *)v19 + 24);
          }
          int8x16_t v78 = v21;
        }
      }
      uint64_t v31 = *(void *)(a1 + 688);
      uint64_t v32 = *(void *)(v31 + 184);
      for (uint64_t i = *(void *)(v31 + 192); i != v32; i -= 16)
      {
        unint64_t v34 = *(std::__shared_weak_count **)(i - 8);
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v34->__on_zero_shared)(v34, v14);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      *(void *)(v31 + 192) = v32;
      unint64_t v36 = *(void (****)(void, __n128))(v31 + 152);
      unint64_t v35 = *(void (****)(void, __n128))(v31 + 160);
      if (v35 != v36)
      {
        uint64_t v37 = v35 - 3;
        uint64_t v38 = v35 - 3;
        int8x16_t v39 = v35 - 3;
        do
        {
          int8x16_t v40 = *v39;
          v39 -= 3;
          (*v40)(v38, v14);
          v37 -= 3;
          BOOL v41 = v38 == v36;
          uint64_t v38 = v39;
        }
        while (!v41);
      }
      *(void *)(v31 + 160) = v36;
      uint64_t v42 = *(void *)(v31 + 288);
      for (uint64_t j = *(void *)(v31 + 296); j != v42; j -= 8)
      {
        unint64_t v44 = *(void **)(j - 8);
      }
      *(void *)(v31 + 296) = v42;
      uint64_t v45 = *(void *)(v31 + 320);
      for (uint64_t k = *(void *)(v31 + 328); k != v45; k -= 8)
      {
        int8x16_t v47 = *(void **)(k - 8);
      }
      *(void *)(v31 + 328) = v45;
      *(unsigned char *)(v31 + 252) = 0;
      uint64_t v48 = *(void *)(v31 + 48);
      uint64_t v49 = v85;
      *(void *)(v48 + 40) = *(void *)(v84 + 48);
      md::RouteElevationSourceContext::RouteElevationSourceContext((md::RouteElevationSourceContext *)v101, (const md::RouteElevationSourceContext *)(v49 + 152));
      if ((void *)(v48 + 48) != v101)
      {
        *(_DWORD *)(v48 + 80) = v103;
        std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,void *> *>>((void *)(v48 + 48), v102);
        std::__tree<unsigned char,std::greater<unsigned char>,std::allocator<unsigned char>>::__assign_multi<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>((uint64_t **)(v48 + 88), v104, &v105);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v105);
      int8x16_t v50 = v102;
      while (v50)
      {
        int8x16_t v51 = v50;
        int8x16_t v50 = (uint64_t *)*v50;
        int8x16_t v52 = (std::__shared_weak_count *)v51[6];
        if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
        operator delete(v51);
      }
      int16x8_t v53 = (void *)v101[0];
      v101[0] = 0;
      if (v53) {
        operator delete(v53);
      }
      if (*(unsigned char *)(v31 + 707))
      {
        *(unsigned char *)(v31 + 707) = 0;
        md::LabelNavEtaLabeler::clearETALabels((md::LabelNavEtaLabeler *)v31);
      }
      md::LabelNavEtaLabeler::updateLabelPositions(v31, &v81, &v77);
      uint64_t v54 = *(void *)(v31 + 152);
      for (uint64_t m = *(void *)(v31 + 160); v54 != m; v54 += 24)
      {
        int8x16_t v89 = off_1EF559858;
        id v90 = 0;
        id v56 = *(id *)(v54 + 8);
        id v57 = v90;
        id v90 = v56;

        id v58 = v90;
        uint64_t v59 = [v58 label];

        id v60 = v90;
        [v60 layoutForStagingWithNavContext:&v81];

        if (*(unsigned char *)(*(void *)v59 + 298))
        {
          int32x4_t v61 = *(void **)(v31 + 192);
          if ((unint64_t)v61 >= *(void *)(v31 + 200))
          {
            int16x8_t v63 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(v31 + 184, (long long *)v59);
          }
          else
          {
            if (v61)
            {
              void *v61 = *(void *)v59;
              uint64_t v62 = *(void *)(v59 + 8);
              v61[1] = v62;
              if (v62) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
              }
            }
            int16x8_t v63 = v61 + 2;
          }
          *(void *)(v31 + 192) = v63;
        }
        int8x16_t v89 = off_1EF559858;
      }
      int32x4_t v64 = +[VKDebugSettings sharedSettings];
      int v65 = [v64 traceEtaDebugLog];

      if (!v65) {
        goto LABEL_96;
      }
      std::basic_stringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::basic_stringstream[abi:nn180100]((uint64_t)&v89);
      md::LabelNavEtaLabeler::describeDebugState(v31, v91, 1);
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      int32x4_t v66 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (!os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
      {
LABEL_93:

        int8x16_t v75 = +[VKDebugSettings sharedSettings];
        [v75 setTraceEtaDebugLog:0];

        int8x16_t v89 = off_1EF57F4A0;
        int8x16_t v100 = off_1EF57F4F0;
        v91[0] = off_1EF57F4C8;
        v91[1] = &unk_1EF57F2D0;
        if (SHIBYTE(v96) < 0) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v97 + 40))(v97, v95, v96 & 0x7FFFFFFFFFFFFFFFLL);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1A62391A0](&v100);
LABEL_96:
        if (v77)
        {
          int8x16_t v78 = v77;
          (*(void (**)(uint64_t, long long *, int64_t))(*(void *)v80 + 40))(v80, v77, (char *)v79 - (char *)v77);
        }
        return;
      }
      if ((v99 & 0x10) != 0)
      {
        unint64_t v69 = v98;
        if (v98 < v94)
        {
          unint64_t v98 = v94;
          unint64_t v69 = v94;
        }
        int32x4_t v70 = (const void **)&v93;
      }
      else
      {
        if ((v99 & 8) == 0)
        {
          size_t v67 = 0;
          uint64_t v88 = v97;
          HIBYTE(v87) = 0;
          int32x4_t v68 = __dst;
          goto LABEL_89;
        }
        int32x4_t v70 = (const void **)v92;
        unint64_t v69 = v92[2];
      }
      int8x16_t v71 = *v70;
      size_t v67 = v69 - (void)*v70;
      uint64_t v88 = v97;
      if (v67 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v67 >= 0x17)
      {
        uint64_t v72 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17) {
          uint64_t v72 = v67 | 7;
        }
        uint64_t v73 = v72 + 1;
        int32x4_t v68 = (void *)(*(uint64_t (**)(void))(*(void *)v97 + 16))();
        __dst[1] = v67;
        int64_t v87 = v73 | 0x8000000000000000;
        __dst[0] = v68;
      }
      else
      {
        HIBYTE(v87) = v67;
        int32x4_t v68 = __dst;
        if (!v67) {
          goto LABEL_89;
        }
      }
      memmove(v68, v71, v67);
LABEL_89:
      *((unsigned char *)v68 + v67) = 0;
      int8x16_t v74 = __dst;
      if (v87 < 0) {
        int8x16_t v74 = (void *)__dst[0];
      }
      *(_DWORD *)int64x2_t buf = 136315138;
      int32x4_t v107 = v74;
      _os_log_impl(&dword_1A1780000, v66, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
      if (SHIBYTE(v87) < 0) {
        (*(void (**)(uint64_t, void, int64_t))(*(void *)v88 + 40))(v88, __dst[0], v87 & 0x7FFFFFFFFFFFFFFFLL);
      }
      goto LABEL_93;
    }
  }
}

void sub_1A1CFC458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  std::basic_stringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringstream((uint64_t)va);
  if (a5)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a8 + 40))(a8, a5, a7 - a5);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::RouteLineSupport::layoutForWaypointFeatures(md::RouteLineSupport *this, const md::LabelLayoutContext *a2)
{
  uint64_t v428 = *MEMORY[0x1E4F143B8];
  int v3 = a2 == 2;
  int v4 = *((unsigned __int8 *)this + 253);
  if (v4 != v3) {
    *((unsigned char *)this + 253) = v3;
  }
  if (*((unsigned char *)this + 250))
  {
    id v5 = *((id *)this + 3);
    v416[0] = 0;
    uint64_t v6 = this;
    {
      id v396 = v5;
      id v5 = v396;
      if (v397) {
        operator new();
      }
    }
    v416[1] = mdm::Allocator::instance(void)::alloc;
    uint64_t v417 = 0;
    unint64_t v415 = v416;
    unint64_t v399 = v5;
    unint64_t v7 = [v5 routeInfo];
    v413 = 0;
    id v414 = v7;
    if (!v7)
    {
      uint64_t v25 = (unsigned __int8 **)((char *)this + 72);
      if (!*((void *)v6 + 9)) {
        goto LABEL_147;
      }
      unint64_t v26 = 0;
      goto LABEL_122;
    }
    unint64_t v8 = (char *)this + 48;
    unint64_t v9 = (void *)*((void *)this + 6);
    if (v9)
    {
      unint64_t v10 = (char *)this + 48;
      do
      {
        unint64_t v11 = v9[4];
        _CF = v11 >= (unint64_t)v7;
        if (v11 >= (unint64_t)v7) {
          float v13 = v9;
        }
        else {
          float v13 = v9 + 1;
        }
        if (_CF) {
          unint64_t v10 = (char *)v9;
        }
        unint64_t v9 = (void *)*v13;
      }
      while (*v13);
      if (v10 != v8 && (unint64_t)v7 >= *((void *)v10 + 4))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v414;
        unint64_t v94 = std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::__emplace_unique_key_args<VKRouteInfo * {__strong},std::piecewise_construct_t const&,std::tuple<VKRouteInfo * const {__strong}&>,std::tuple<>>(&v415, (unint64_t)v7, (id **)&__p);
        long long v95 = *(_OWORD *)(v10 + 40);
        *((void *)v10 + 5) = 0;
        *((void *)v10 + 6) = 0;
        uint64_t v96 = (std::__shared_weak_count *)v94[6];
        *(_OWORD *)(v94 + 5) = v95;
        if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
        uint64_t v97 = v94 + 7;
        uint64_t v98 = v94[7];
        if (v98)
        {
          uint64_t v99 = v94[8];
          uint64_t v100 = v94[7];
          if (v99 != v98)
          {
            do
            {
              int8x16_t v101 = *(std::__shared_weak_count **)(v99 - 8);
              if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v101->__on_zero_shared)(v101, v100);
                std::__shared_weak_count::__release_weak(v101);
              }
              v99 -= 16;
            }
            while (v99 != v98);
            uint64_t v100 = *v97;
          }
          v94[8] = v98;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v94[10] + 40))(v94[10], v100, v94[9] - v100);
          *uint64_t v97 = 0;
          v94[8] = 0;
          v94[9] = 0;
        }
        *(_OWORD *)(v94 + 7) = *(_OWORD *)(v10 + 56);
        v94[9] = *((void *)v10 + 9);
        *((void *)v10 + 7) = 0;
        *((void *)v10 + 8) = 0;
        *((void *)v10 + 9) = 0;
        unint64_t v391 = v94 + 11;
        uint64_t v392 = v94[11];
        if (v392)
        {
          uint64_t v393 = v94[12];
          uint64_t v394 = v94[11];
          if (v393 != v392)
          {
            do
            {
              v395 = *(std::__shared_weak_count **)(v393 - 8);
              if (v395 && !atomic_fetch_add(&v395->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v395->__on_zero_shared)(v395, v394);
                std::__shared_weak_count::__release_weak(v395);
              }
              v393 -= 16;
            }
            while (v393 != v392);
            uint64_t v394 = *v391;
          }
          v94[12] = v392;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v94[14] + 40))(v94[14], v394, v94[13] - v394);
          *unint64_t v391 = 0;
          v94[12] = 0;
          v94[13] = 0;
        }
        *(_OWORD *)(v94 + 11) = *(_OWORD *)(v10 + 88);
        v94[13] = *((void *)v10 + 13);
        *((void *)v10 + 11) = 0;
        *((void *)v10 + 12) = 0;
        *((void *)v10 + 13) = 0;
LABEL_112:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v414;
        int8x16_t v86 = std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::__emplace_unique_key_args<VKRouteInfo * {__strong},std::piecewise_construct_t const&,std::tuple<VKRouteInfo * const {__strong}&>,std::tuple<>>(&v415, (unint64_t)v414, (id **)&__p);
        unint64_t v26 = (unsigned __int8 *)v86[5];
        uint64_t v87 = v86[6];
        if (v87) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
        }
        v413 = (std::__shared_weak_count *)v87;
        uint64_t v6 = this;
        uint64_t v25 = (unsigned __int8 **)((char *)this + 72);
        if (*((unsigned __int8 **)this + 9) == v26) {
          goto LABEL_147;
        }
        if (v26)
        {
          if (v26[49])
          {
            int v88 = v26[48];
            v26[49] = 0;
            if (v88) {
              md::WaypointStore::updateWaypointsForSelection((md::WaypointStore *)v26);
            }
          }
          if (v26[48])
          {
            int v89 = v26[49];
            v26[48] = 0;
            if (v89) {
              md::WaypointStore::updateWaypointsForSelection((md::WaypointStore *)v26);
            }
          }
        }
LABEL_122:
        if (v413) {
          atomic_fetch_add_explicit(&v413->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v90 = v6;
        int16x8_t v91 = (std::__shared_weak_count *)*((void *)v6 + 10);
        *((void *)v90 + 9) = v26;
        *((void *)v90 + 10) = v413;
        if (v91)
        {
          if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
          unint64_t v26 = *v25;
        }
        uint64_t v6 = this;
        if (v26)
        {
          int v92 = *((unsigned __int8 *)this + 254);
          int v93 = v26[49];
          if (v93 != v92)
          {
            if (!v26[48])
            {
              v26[49] = v92;
              if (v26[48]) {
                goto LABEL_147;
              }
              goto LABEL_134;
            }
            v26[49] = v92;
            if ((v93 != 0) != (v92 != 0))
            {
              md::WaypointStore::updateWaypointsForSelection((md::WaypointStore *)v26);
              unint64_t v26 = *v25;
            }
          }
          if (v26[48]) {
            goto LABEL_147;
          }
LABEL_134:
          v26[48] = 1;
          if (v26[49]) {
            md::WaypointStore::updateWaypointsForSelection((md::WaypointStore *)v26);
          }
        }
LABEL_147:
        int v103 = (uint64_t *)((char *)v6 + 48);
        uint64_t v102 = *((void *)v6 + 6);
        int8x16_t v104 = (uint64_t **)((char *)v6 + 40);
        std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy((uint64_t)v104, v102);
        uint64_t v105 = v416[0];
        *(v103 - 1) = (uint64_t)v415;
        *int v103 = v105;
        uint64_t v106 = v417;
        v103[2] = v417;
        if (v106)
        {
          *(void *)(v105 + 16) = v103;
          unint64_t v415 = v416;
          v416[0] = 0;
          uint64_t v417 = 0;
          int32x4_t v107 = v413;
          if (!v413) {
            goto LABEL_153;
          }
        }
        else
        {
          *int8x16_t v104 = v103;
          int32x4_t v107 = v413;
          if (!v413)
          {
LABEL_153:

            std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy((uint64_t)&v415, v416[0]);
            uint64_t v108 = (void *)((char *)this + 120);
            if (*((void *)this + 20))
            {
              int16x8_t v109 = (void *)*((void *)this + 18);
              if (v109)
              {
                do
                {
                  int32x4_t v110 = (void *)*v109;
                  (*(void (**)(void))(**((void **)this + 19) + 40))(*((void *)this + 19));
                  int16x8_t v109 = v110;
                }
                while (v110);
              }
              *((void *)this + 18) = 0;
              uint64_t v111 = *((void *)this + 16);
              if (v111)
              {
                for (uint64_t i = 0; i != v111; ++i)
                  *(void *)(*v108 + 8 * i) = 0;
              }
              *((void *)this + 20) = 0;
            }
            int8x16_t v113 = *v104;
            if (*v104 != v103)
            {
              uint64_t v411 = v103;
              do
              {
                int8x16_t v115 = (std::string::size_type *)v113[7];
                int32x4_t v114 = (std::string::size_type *)v113[8];
                while (v115 != v114)
                {
                  std::string::size_type v116 = *v115;
                  __p.__r_.__value_.__r.__words[0] = *v115;
                  int8x16_t v117 = (std::__shared_weak_count *)v115[1];
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v117;
                  if (v117) {
                    atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (((*(uint64_t (**)(std::string::size_type))(*(void *)v116 + 328))(v116) & 1) == 0)
                  {
                    if ((*(uint64_t (**)(std::string::size_type))(*(void *)v116 + 176))(v116))
                    {
                      int8x16_t v118 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v116 + 176))(v116);
                      LOBYTE(v423) = 4;
                      *((void *)&v423 + 1) = v118;
                      std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>((unint64_t)v108, 4u, v118, &v423);
                    }
                    if ((*(uint64_t (**)(std::string::size_type))(*(void *)v116 + 168))(v116))
                    {
                      int8x16_t v119 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v116 + 168))(v116);
                      LOBYTE(v423) = 3;
                      *((void *)&v423 + 1) = v119;
                      std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>((unint64_t)v108, 3u, v119, &v423);
                    }
                  }
                  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                  v115 += 2;
                }
                int8x16_t v120 = (uint64_t *)v113[1];
                if (v120)
                {
                  do
                  {
                    int8x16_t v121 = v120;
                    int8x16_t v120 = (uint64_t *)*v120;
                  }
                  while (v120);
                }
                else
                {
                  do
                  {
                    int8x16_t v121 = (uint64_t *)v113[2];
                    _ZF = *v121 == (void)v113;
                    int8x16_t v113 = v121;
                  }
                  while (!_ZF);
                }
                int8x16_t v113 = v121;
              }
              while (v121 != v411);
            }
            uint64_t v24 = this;
            ++*((_DWORD *)this + 58);
            md::RouteLineSupport::updateRouteLine(this, 0);
            if (*((unsigned char *)this + 250) || md::RouteLineSupport::didCurrentWaypointChange(this)) {
              md::RouteLineSupport::updateWaypointProximities((id *)this);
            }
            goto LABEL_185;
          }
        }
        if (!atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
        goto LABEL_153;
      }
    }
    __n128 v14 = [v399 routeInfo];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v414;
    v404 = std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::__emplace_unique_key_args<VKRouteInfo * {__strong},std::piecewise_construct_t const&,std::tuple<VKRouteInfo * const {__strong}&>,std::tuple<>>(&v415, (unint64_t)v414, (id **)&__p);
    id v15 = v14;
    float32x4_t v16 = (std::__shared_weak_count *)operator new(0x138uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FBC0;
    float32x4_t v17 = v16 + 1;
    char v18 = *((unsigned char *)this + 254);
    uint64_t v19 = *((void *)this + 1);
    uint64_t v20 = (std::__shared_weak_count_vtbl *)v15;
    v16[1].__shared_owners_ = 0;
    v16[1].__shared_weak_owners_ = 0;
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5334C8;
    v398 = v20;
    v16[2].__vftable = v20;
    v16[2].__shared_owners_ = v19;
    id v21 = *(id *)(v19 + 3472);
    v16[3].__shared_weak_owners_ = 0;
    v16[2].__shared_weak_owners_ = (uint64_t)v21;
    LOBYTE(v16[3].__vftable) = 1;
    BYTE1(v16[3].__vftable) = v18;
    WORD1(v16[3].__vftable) = 1;
    {
      operator new();
    }
    v16[4].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
    v16[4].__shared_owners_ = 0;
    v16[3].__shared_owners_ = (uint64_t)&v16[3].__shared_weak_owners_;
    v16[5].__vftable = 0;
    v16[5].__shared_owners_ = 0;
    v16[4].__shared_weak_owners_ = 0;
    {
      operator new();
    }
    v16[5].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
    v16[6].__vftable = 0;
    v16[6].__shared_owners_ = 0;
    v16[6].__shared_weak_owners_ = 0;
    {
      operator new();
    }
    v16[7].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
    v16[7].__shared_owners_ = 0;
    v16[7].__shared_weak_owners_ = 0;
    v16[8].__vftable = 0;
    {
      operator new();
    }
    v16[8].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
    v16[8].__shared_weak_owners_ = 0;
    v16[9].__vftable = 0;
    v16[9].__shared_owners_ = 0;
    {
      operator new();
    }
    v16[9].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
    v16[10].__vftable = 0;
    v16[10].__shared_owners_ = 0;
    v16[10].__shared_weak_owners_ = 0;
    {
      operator new();
    }
    v16[11].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
    v16[11].__shared_owners_ = 0;
    v16[11].__shared_weak_owners_ = 0;
    v16[12].__vftable = 0;
    {
      operator new();
    }
    v16[12].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
    v16[12].__shared_weak_owners_ = (uint64_t)vdup_n_s32(0x437F0000u);
    unint64_t v418 = v16 + 1;
    v419 = v16;
    shared_weak_owners = (std::__shared_weak_count *)v16[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_40:
        uint64_t v28 = (uint64_t)v418;
        uint64_t v27 = (uint64_t)v419;
        if (v419) {
          atomic_fetch_add_explicit(&v419->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = (std::__shared_weak_count *)v404[6];
        v404[5] = v28;
        v404[6] = v27;
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        uint64_t v30 = (uint64_t)v418;
        if (!BYTE3(v418[2].__vftable))
        {
          WORD1(v418[2].__vftable) = 257;
          uint64_t v31 = [*(id *)(v30 + 24) waypoints];
          std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::resize(v30 + 88, [v31 count]);

          memset(v422, 0, 64);
          uint64_t v32 = [*(id *)(v30 + 24) waypoints];
          if ([v32 countByEnumeratingWithState:v422 objects:&__p count:16])
          {
            __asm { FMOV            V0.2D, #0.5 }
            unint64_t v36 = *(void **)v422[1];
            [*(id *)v422[1] setNeedsTextUpdate:0];
            if (*(unsigned char *)(v30 + 48)) {
              BOOL v37 = *(unsigned char *)(v30 + 49) != 0;
            }
            else {
              BOOL v37 = 0;
            }
            [v36 setIsOnSelectedRoute:v37];
            uint64_t v38 = [v36 polylineCoordinate];
            unint64_t v39 = [v36 waypoint];
            int8x16_t v40 = (void *)v39;
            BOOL v41 = (uint64_t **)(v30 + 64);
LABEL_51:
            uint64_t v42 = *v41;
            uint64_t v43 = v41;
            if (*v41)
            {
              while (1)
              {
                BOOL v41 = (uint64_t **)v42;
                unint64_t v44 = v42[4];
                if (v39 < v44) {
                  goto LABEL_51;
                }
                if (v44 >= v39) {
                  break;
                }
                uint64_t v42 = v41[1];
                if (!v42)
                {
                  uint64_t v43 = v41 + 1;
                  goto LABEL_56;
                }
              }
              uint64_t v45 = (uint64_t *)v41;
            }
            else
            {
LABEL_56:
              uint64_t v45 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v30 + 72) + 16))(*(void *)(v30 + 72), 48, 8);
              v45[4] = (uint64_t)v40;
              v45[5] = 0xBF80000000000000;
              *uint64_t v45 = 0;
              v45[1] = 0;
              v45[2] = (uint64_t)v41;
              void *v43 = v45;
              uint64_t v46 = **(void **)(v30 + 56);
              int8x16_t v47 = v45;
              if (v46)
              {
                *(void *)(v30 + 56) = v46;
                int8x16_t v47 = *v43;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v30 + 64), v47);
              int8x16_t v40 = 0;
              ++*(void *)(v30 + 80);
            }
            v45[5] = v38;

            objc_storeStrong(*(id **)(v30 + 88), v36);
            md::WaypointStore::buildFeatureForWaypoint((md::LabelExternalPointFeature **)v420, v30, v36, 0);
            uint64_t v48 = *(void *)&v420[0];
            *(_DWORD *)(*(void *)&v420[0] + 84) = 0;
            *(_DWORD *)(v48 + 72) = 1098907648;
            operator new();
          }

          uint64_t v49 = [*(id *)(v30 + 24) anchorpoints];
          std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::resize(v30 + 248, [v49 count]);

          memset(v420, 0, sizeof(v420));
          int8x16_t v50 = [*(id *)(v30 + 24) anchorpoints];
          if ([v50 countByEnumeratingWithState:v420 objects:&v423 count:16])
          {
            int8x16_t v51 = (void *)**((void **)&v420[0] + 1);
            uint64_t v52 = [**((id **)&v420[0] + 1) polylineCoordinate];
            unint64_t v53 = [v51 waypoint];
            uint64_t v54 = (void *)v53;
            int8x16_t v55 = (uint64_t **)(v30 + 64);
LABEL_63:
            id v56 = *v55;
            id v57 = v55;
            if (*v55)
            {
              while (1)
              {
                int8x16_t v55 = (uint64_t **)v56;
                unint64_t v58 = v56[4];
                if (v53 < v58) {
                  goto LABEL_63;
                }
                if (v58 >= v53) {
                  break;
                }
                id v56 = v55[1];
                if (!v56)
                {
                  id v57 = v55 + 1;
                  goto LABEL_68;
                }
              }
              uint64_t v59 = (uint64_t *)v55;
            }
            else
            {
LABEL_68:
              uint64_t v59 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v30 + 72) + 16))(*(void *)(v30 + 72), 48, 8);
              v59[4] = (uint64_t)v54;
              v59[5] = 0xBF80000000000000;
              uint64_t *v59 = 0;
              v59[1] = 0;
              v59[2] = (uint64_t)v55;
              void *v57 = v59;
              uint64_t v60 = **(void **)(v30 + 56);
              int32x4_t v61 = v59;
              if (v60)
              {
                *(void *)(v30 + 56) = v60;
                int32x4_t v61 = *v57;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v30 + 64), v61);
              uint64_t v54 = 0;
              ++*(void *)(v30 + 80);
            }
            v59[5] = v52;

            [v51 setNeedsTextUpdate:0];
            if (*(unsigned char *)(v30 + 48)) {
              BOOL v62 = *(unsigned char *)(v30 + 49) != 0;
            }
            else {
              BOOL v62 = 0;
            }
            [v51 setIsOnSelectedRoute:v62];
            objc_storeStrong(*(id **)(v30 + 248), v51);
            md::WaypointStore::buildFeatureForWaypoint(&v421, v30, v51, 3);
            *((_DWORD *)v421 + 21) = 0;
            operator new();
          }

          uint64_t v30 = (uint64_t)v418;
        }
        int16x8_t v63 = *(uint64_t **)(v30 + 152);
        int32x4_t v64 = *(uint64_t **)(v30 + 160);
        if (v63 != v64)
        {
          do
          {
            int v65 = (*(void (**)(void))(*(void *)*v63 + 88))();
            if (LOBYTE(v418[2].__vftable)) {
              char v66 = BYTE1(v418[2].__vftable) != 0;
            }
            else {
              char v66 = 0;
            }
            uint64_t v67 = *v63;
            char v68 = *(unsigned char *)(*v63 + 108);
            unint64_t v69 = operator new(0x308uLL);
            v69[1] = 0;
            v69[2] = 0;
            void *v69 = &unk_1EF581DA8;
            __p.__r_.__value_.__r.__words[0] = md::RouteWaypointLabelFeature::RouteWaypointLabelFeature((uint64_t)(v69 + 3), v65, v66, v68, (uint64_t *)(v67 + 88), *((void *)this + 1));
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v69;

            v69[12] = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*((void *)this + 1) + 288) + 680), 1uLL)+ 1;
            int32x4_t v70 = (void *)v404[8];
            if ((unint64_t)v70 >= v404[9])
            {
              uint64_t v72 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)(v404 + 7), (long long *)&__p);
            }
            else
            {
              if (v70)
              {
                *int32x4_t v70 = __p.__r_.__value_.__r.__words[0];
                std::string::size_type size = __p.__r_.__value_.__l.__size_;
                v70[1] = __p.__r_.__value_.__l.__size_;
                if (size) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
                }
              }
              uint64_t v72 = v70 + 2;
            }
            v404[8] = (uint64_t)v72;
            uint64_t v73 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
            ++v63;
          }
          while (v63 != v64);
          uint64_t v30 = (uint64_t)v418;
        }
        int8x16_t v74 = *(uint64_t **)(v30 + 216);
        for (uint64_t j = *(uint64_t **)(v30 + 224); v74 != j; ++v74)
        {
          long long v76 = (*(void (**)(void))(*(void *)*v74 + 88))();
          if (LOBYTE(v418[2].__vftable)) {
            char v77 = BYTE1(v418[2].__vftable) != 0;
          }
          else {
            char v77 = 0;
          }
          uint64_t v78 = *v74;
          char v79 = *(unsigned char *)(*v74 + 108);
          uint64_t v80 = operator new(0x308uLL);
          v80[1] = 0;
          v80[2] = 0;
          void *v80 = &unk_1EF581DA8;
          __p.__r_.__value_.__r.__words[0] = md::RouteWaypointLabelFeature::RouteWaypointLabelFeature((uint64_t)(v80 + 3), v76, v77, v79, (uint64_t *)(v78 + 88), *((void *)this + 1));
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v80;

          v80[12] = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*((void *)this + 1) + 288) + 680), 1uLL)+ 1;
          unint64_t v81 = (void *)v404[8];
          if ((unint64_t)v81 >= v404[9])
          {
            uint64_t v83 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)(v404 + 7), (long long *)&__p);
          }
          else
          {
            if (v81)
            {
              *unint64_t v81 = __p.__r_.__value_.__r.__words[0];
              std::string::size_type v82 = __p.__r_.__value_.__l.__size_;
              v81[1] = __p.__r_.__value_.__l.__size_;
              if (v82) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
              }
            }
            uint64_t v83 = v81 + 2;
          }
          v404[8] = (uint64_t)v83;
          uint64_t v84 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        uint64_t v85 = v419;
        if (v419 && !atomic_fetch_add(&v419->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }

        goto LABEL_112;
      }
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v16[1].__shared_owners_ = (uint64_t)v17;
      v16[1].__shared_weak_owners_ = (uint64_t)v16;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v16[1].__shared_owners_ = (uint64_t)v17;
      v16[1].__shared_weak_owners_ = (uint64_t)v16;
    }
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_40;
  }
  if (md::RouteLineSupport::didCurrentWaypointChange(this))
  {
    char updated = md::RouteLineSupport::updateWaypointProximities((id *)this);
    _ZF = v4 == v3;
    uint64_t v24 = this;
    if (!_ZF || (updated & 1) != 0) {
      goto LABEL_185;
    }
  }
  else
  {
    _ZF = v4 == v3;
    uint64_t v24 = this;
    if (!_ZF)
    {
LABEL_185:
      int8x16_t v122 = (uint64_t *)((char *)v24 + 88);
      uint64_t v123 = *((void *)v24 + 11);
      long long v400 = v122;
      for (uint64_t k = v122[1]; k != v123; k -= 16)
      {
        int8x16_t v125 = *(std::__shared_weak_count **)(k - 8);
        if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      *((void *)this + 12) = v123;
      uint64_t v24 = this;
      int8x16_t v126 = (md::RouteLineSupport *)*((void *)this + 5);
      if (v126 != (md::RouteLineSupport *)((char *)this + 48))
      {
        int8x8_t v127 = (int8x8_t)vdup_n_s32(0x437F0000u);
LABEL_194:
        uint64_t v410 = v126;
        uint64_t v128 = *((void *)v126 + 5);
        if (!*(unsigned char *)(v128 + 50)) {
          goto LABEL_499;
        }
        if (*((unsigned char *)this + 253)) {
          float v129 = 13.0;
        }
        else {
          float v129 = 16.0;
        }
        int32x4_t v130 = *(void **)(v128 + 88);
        int16x8_t v131 = *(void **)(v128 + 96);
        while (v130 != v131)
        {
          uint64_t v132 = v130[2];
          *(unsigned char *)(v132 + 80) = 0;
          *(void *)(v132 + 72) = 0;
          uint64_t v133 = *(void *)(v130[2] + 88);
          *(unsigned char *)(v133 + 112) = 0;
          *(float *)(v133 + 80) = v129;
          uint64_t v134 = v130[1];
          if (v134)
          {
            uint64_t v135 = *(void *)(v134 + 88);
            *(float *)(v135 + 72) = v129;
            *(unsigned char *)(v135 + 112) = 0;
          }
          uint64_t v136 = v130[3];
          if (v136) {
            *(unsigned char *)(*(void *)(v136 + 88) + 112) = 0;
          }
          v130 += 4;
        }
        uint64_t v137 = *(void *)(v128 + 184);
        uint64_t v138 = *(void *)(v128 + 192);
        if (v137 != v138)
        {
          do
          {
            int32x4_t v139 = *(void **)(*(void *)v137 + 88);
            v139[36] = 0;
            v139[37] = 0;
            int16x8_t v140 = (std::__shared_weak_count *)v139[38];
            v139[38] = 0;
            if (v140) {
              std::__shared_weak_count::__release_weak(v140);
            }
            v137 += 8;
          }
          while (v137 != v138);
          uint64_t v137 = *(void *)(v128 + 184);
        }
        *(void *)(v128 + 192) = v137;
        int32x4_t v141 = *(void **)(v128 + 120);
        int8x16_t v142 = *(void **)(v128 + 128);
        while (v142 != v141)
        {
          uint64_t v152 = *--v142;
          uint64_t v151 = v152;
          *int8x16_t v142 = 0;
          if (v152) {
            (*(void (**)(uint64_t))(*(void *)v151 + 8))(v151);
          }
        }
        *(void *)(v128 + 128) = v141;
        memset(&__p, 0, sizeof(__p));
        {
          operator new();
        }
        v426[0] = mdm::Allocator::instance(void)::alloc;
        uint64_t v143 = v128;
        uint64_t v144 = *(void *)(v128 + 96);
        uint64_t v412 = v143;
        uint64_t v145 = *(void *)(v143 + 88);
        uint64_t v146 = v144 - v145;
        if (v144 == v145) {
          goto LABEL_216;
        }
        if (v146 < 0) {
          goto LABEL_569;
        }
        int8x16_t v147 = (void *)(*(uint64_t (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 16))();
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v147;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v147[v146 >> 5];
        uint64_t v148 = *(void *)(v412 + 88);
        uint64_t v144 = *(void *)(v412 + 96);
        if (v148 == v144)
        {
LABEL_216:
          uint64_t v149 = v144;
          uint64_t v150 = v412;
          goto LABEL_254;
        }
        while (1)
        {
          id v154 = *(id *)v148;
          if [v154 when] == 3 || (objc_msgSend(v154, "isAtStart")) {
            goto LABEL_222;
          }
          uint64_t v155 = *(void *)(v148 + 16);
          std::string::size_type v156 = __p.__r_.__value_.__r.__words[2];
          if ((unint64_t)v147 >= __p.__r_.__value_.__r.__words[2]) {
            break;
          }
          if (v147) {
            *int8x16_t v147 = v155;
          }
          std::string::size_type v153 = (std::string::size_type)(v147 + 1);
LABEL_221:
          __p.__r_.__value_.__l.__size_ = v153;
          int8x16_t v147 = (void *)v153;
LABEL_222:

          v148 += 32;
          if (v148 == v144)
          {
            uint64_t v150 = v412;
            uint64_t v144 = *(void *)(v412 + 88);
            uint64_t v149 = *(void *)(v412 + 96);
LABEL_254:
            uint64_t v174 = v149 - v144;
            uint64_t v175 = v174 >> 5;
            uint64_t v176 = *(void *)(v150 + 120);
            uint64_t v177 = v150;
            if (v174 >> 5 <= (unint64_t)((*(void *)(v150 + 136) - v176) >> 3)) {
              goto LABEL_276;
            }
            if (v174 < 0) {
LABEL_569:
            }
              abort();
            uint64_t v178 = *(void *)(v412 + 128);
            uint64_t v179 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v412 + 144) + 16))(*(void *)(v412 + 144), v174 >> 2, 8);
            uint64_t v180 = v178 - v176;
            unint64_t v181 = v179 + ((v178 - v176) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v182 = v179 + 8 * v175;
            int16x8_t v183 = *(char **)(v412 + 120);
            int32x4_t v184 = *(char **)(v412 + 128);
            uint64_t v177 = v412;
            if (v184 == v183)
            {
              *(void *)(v412 + 120) = v181;
              *(void *)(v412 + 128) = v181;
              uint64_t v187 = *(void *)(v412 + 136);
              *(void *)(v412 + 136) = v182;
              if (v184) {
                goto LABEL_275;
              }
            }
            else
            {
              unint64_t v185 = v184 - v183 - 8;
              if (v185 <= 0x77)
              {
                unint64_t v186 = v181;
                goto LABEL_269;
              }
              BOOL v188 = (unint64_t)&v184[-(v185 & 0xFFFFFFFFFFFFFFF8) - 8] >= v181
                  || (v180 & 0xFFFFFFFFFFFFFFF8) - (v185 & 0xFFFFFFFFFFFFFFF8) + v179 - 8 >= (unint64_t)v184;
              unint64_t v186 = v181;
              if (!v188) {
                goto LABEL_591;
              }
              uint64_t v189 = v180 >> 3;
              uint64_t v190 = (v185 >> 3) + 1;
              int8x16_t v191 = (_OWORD *)(v179 + 8 * v189 - 16);
              int8x16_t v192 = v184 - 32;
              uint64_t v193 = v190 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v195 = *(_OWORD *)v192;
                long long v194 = *((_OWORD *)v192 + 1);
                *(_OWORD *)int8x16_t v192 = 0uLL;
                *((_OWORD *)v192 + 1) = 0uLL;
                v192 -= 32;
                *(v191 - 1) = v195;
                _OWORD *v191 = v194;
                v191 -= 2;
                v193 -= 4;
              }
              while (v193);
              unint64_t v186 = v181 - 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL);
              v184 -= 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL);
              if (v190 != (v190 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_591:
                do
                {
LABEL_269:
                  uint64_t v196 = *((void *)v184 - 1);
                  v184 -= 8;
                  *(void *)int32x4_t v184 = 0;
                  *(void *)(v186 - 8) = v196;
                  v186 -= 8;
                }
                while (v184 != v183);
              }
              int32x4_t v184 = *(char **)(v412 + 120);
              int8x16_t v197 = *(char **)(v412 + 128);
              *(void *)(v412 + 120) = v186;
              *(void *)(v412 + 128) = v181;
              uint64_t v187 = *(void *)(v412 + 136);
              *(void *)(v412 + 136) = v182;
              while (v197 != v184)
              {
                uint64_t v199 = *((void *)v197 - 1);
                v197 -= 8;
                uint64_t v198 = v199;
                *(void *)int8x16_t v197 = 0;
                if (v199) {
                  (*(void (**)(uint64_t, long long *))(*(void *)v198 + 8))(v198, &v423);
                }
              }
              uint64_t v177 = v412;
              if (v184) {
LABEL_275:
              }
                (*(void (**)(void, char *, uint64_t))(**(void **)(v177 + 144) + 40))(*(void *)(v177 + 144), v184, v187 - (void)v184);
            }
LABEL_276:
            double v200 = fminf(*(float *)(*(void *)(*(void *)(*(void *)(v177 + 32) + 336) + 136)+ 20 * *(unsigned __int8 *)(*(void *)(*(void *)(v177 + 32) + 336) + 158)+ 12), 2.0)* 30.0;
            *(float *)uint64_t v422 = v129;
            v422[1] = *(id *)&v200;
            *(void *)&long long v423 = &unk_1EF570770;
            *((void *)&v423 + 1) = v177;
            unint64_t v424 = &v423;
            md::LabelClusterBuilder::createClusters((uint64_t)v422, (uint64_t)&__p, (uint64_t)&v423);
            if (v424 == &v423)
            {
              (*(void (**)(long long *))(v423 + 32))(&v423);
              std::string::size_type v202 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0]) {
                goto LABEL_280;
              }
            }
            else
            {
              if (v424) {
                (*(void (**)(void))(*(void *)v424 + 40))();
              }
              std::string::size_type v202 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0]) {
LABEL_280:
              }
                (*(void (**)(void, std::string::size_type, std::string::size_type))(*(void *)v426[0]
                                                                                               + 40))(v426[0], v202, __p.__r_.__value_.__r.__words[2] - v202);
            }
            *(unsigned char *)(v177 + 50) = 0;
            int32x4_t v203 = *(int8x8_t ***)(v177 + 120);
            int8x8_t v204 = v127;
            uint64_t v401 = *(int8x8_t ***)(v177 + 128);
            if (v203 != v401)
            {
              *(void *)&long long v201 = 0x8000007F7FFFFFLL;
              long long v402 = v201;
              while (2)
              {
                int8x16_t v209 = *v203;
                if ((*v203)[10].i8[0] != 1) {
                  goto LABEL_285;
                }
                int8x16_t v210 = (std::__shared_weak_count *)operator new(0x1D8uLL);
                v210->__shared_owners_ = 0;
                v210->__shared_weak_owners_ = 0;
                v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581CC8;
                uint64_t v405 = (int64x2_t *)&v210[1];
                md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)&v210[1]);
                int8x16_t v211 = *(std::__shared_weak_count **)(v412 + 16);
                if (!v211 || (uint64_t v212 = *(void *)(v412 + 8), (v213 = std::__shared_weak_count::lock(v211)) == 0))
                {
                  std::__throw_bad_weak_ptr[abi:nn180100]();
                  __break(1u);
                }
                int8x16_t v214 = v213;
                p_unint64_t shared_owners = &v213->__shared_owners_;
                atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v213->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                v210[13].__vftable = (std::__shared_weak_count_vtbl *)v209;
                atomic_fetch_add_explicit(&v213->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                int8x16_t v216 = (std::__shared_weak_count *)v210[13].__shared_weak_owners_;
                v210[13].__shared_owners_ = v212;
                v210[13].__shared_weak_owners_ = (uint64_t)v214;
                v406 = v214;
                if (v216) {
                  std::__shared_weak_count::__release_weak(v216);
                }
                std::__shared_weak_count::__release_weak(v406);
                if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                  std::__shared_weak_count::__release_weak(v406);
                }
                LODWORD(v210[4].__vftable) = v209[1].i32[0];
                LODWORD(v210[4].__shared_owners_) = v209[1].i32[1];
                uint64_t v408 = (*(void (**)(void))(**(void **)&v209[21] + 88))(*(void *)&v209[21]);
                int16x8_t v217 = [v408 name];
                BOOL v218 = v217 == 0;

                if (!v218)
                {
                  id v219 = [v408 name];
                  md::LabelExternalFeature::addTextForZoom(v405, 0, 0, (const char *)[v219 UTF8String], 0);
                }
                unsigned int v220 = v209[23].u32[0];
                if (v220 >= 0x63) {
                  uint64_t v221 = 99;
                }
                else {
                  uint64_t v221 = v220;
                }
                uint64_t v222 = v412;
                int8x16_t v223 = *(void **)(v412 + 40);
                v422[0] = 0;
                *(void *)&v420[0] = 0;
                [v223 getClusterAnnotationTextForClusterCount:v221 text:v422 locale:v420];
                id v224 = v422[0];
                id v403 = *(id *)&v420[0];
                char v407 = v224;
                if ([v224 length])
                {
                  uint64_t v222 = v412;
                  md::LabelExternalFeature::addTextForZoom(v405, 0, 2, (const char *)[v224 UTF8String], 0);
                }
                int8x16_t v225 = v210[9].__vftable;
                if ((std::__shared_weak_count_vtbl *)v210[9].__shared_owners_ != v225)
                {
                  v225->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v209[2];
                  v225->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v209[3];
                  v225->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v209[4];
                  v225->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v209[5];
                  v225->__on_zero_shared_weauint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v209[6];
                  __int32 v226 = v209[7].i32[0];
                  *(_DWORD *)((char *)&v225[1].~__shared_weak_count + 3) = *(__int32 *)((char *)v209[7].i32 + 3);
                  LODWORD(v225[1].~__shared_weak_count) = v226;
                }
                {
                  operator new();
                }
                uint64_t v227 = mdm::Allocator::instance(void)::alloc;
                if (*(unsigned char *)(v222 + 48)) {
                  BOOL v228 = *(unsigned char *)(v222 + 49) != 0;
                }
                else {
                  BOOL v228 = 0;
                }
                int8x16_t v229 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
                uint64_t v230 = v229;
                if (v229) {
                  uint64_t *v229 = 0x500010023;
                }
                unint64_t v231 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v227 + 16))(v227, 16, 4);
                __int16 v232 = v231;
                if (v231)
                {
                  uint64_t v233 = 0x100010002;
                  if (!v228) {
                    uint64_t v233 = 65538;
                  }
                  v231[1] = v233;
                }
                uint64_t *v231 = *v230;
                (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v227 + 40))(v227, v230, 8);
                int8x8_t v234 = v209[21];
                char v235 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v227 + 16))(v227, 32, 4);
                long long v236 = v235;
                if (v235) {
                  v235[2] = 0x300000005;
                }
                v235[1] = v232[1];
                *char v235 = *v232;
                (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v227 + 40))(v227, v232, 16);
                v236[3] = 0x100010024;
                long long v237 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v227 + 16))(v227, 64, 4);
                long long v238 = v237;
                if (v237) {
                  v237[4] = 0x20001001FLL;
                }
                long long v239 = v237 + 8;
                v237[3] = v236[3];
                v237[2] = v236[2];
                v237[1] = v236[1];
                *long long v237 = *v236;
                (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v227 + 40))(v227, v236, 32);
                v238[5] = 0x10001002DLL;
                unsigned int v240 = v209[23].u32[0];
                unint64_t v241 = 0x50403020000uLL >> (8 * v240);
                _CF = v240 >= 6;
                uint64_t v242 = 0x60001005CLL;
                if (!_CF) {
                  uint64_t v242 = ((v241 & 7) << 32) | 0x1005C;
                }
                v238[6] = v242;
                id v243 = v238 + 7;
                if (!*(void *)&v234)
                {
                  uint64_t v246 = (uint64_t)(v238 + 8);
                  goto LABEL_358;
                }
                (*(void (**)(int8x8_t))(**(void **)&v234 + 88))(v234);
                id v244 = (id)objc_claimAutoreleasedReturnValue();
                if ([v244 isAtEnd])
                {
                  uint64_t v245 = 0x400000000;
                }
                else if ([v244 isAtStart])
                {
                  uint64_t v245 = 0x300000000;
                }
                else
                {
                  uint64_t v245 = 0x200000000;
                }

                *id v243 = v245 | 0x2C;
                if (*(unsigned char *)(*(void *)&v234 + 116))
                {
                  uint64_t v247 = *(unsigned int *)(*(void *)&v234 + 112);
                  uint64_t v248 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v227 + 16))(v227, 128, 4);
                  int v249 = (char *)v248;
                  char v250 = (uint64_t *)(v248 + 64);
                  if (v248) {
                    *char v250 = (v247 << 32) | 6;
                  }
                  if ((unint64_t)((char *)v239 - (char *)v250) >= 0x20)
                  {
                    long long v251 = *((_OWORD *)v238 + 3);
                    *(_OWORD *)(v248 + 32) = *((_OWORD *)v238 + 2);
                    *(_OWORD *)(v248 + 48) = v251;
                    long long v252 = *((_OWORD *)v238 + 1);
                    *(_OWORD *)uint64_t v248 = *(_OWORD *)v238;
                    *(_OWORD *)(v248 + 16) = v252;
                  }
                  else
                  {
                    *(void *)(v248 + 56) = v238[7];
                    *(void *)(v248 + 48) = v238[6];
                    *(void *)(v248 + 40) = v238[5];
                    *(void *)(v248 + 32) = v238[4];
                    *(void *)(v248 + 24) = v238[3];
                    *(void *)(v248 + 16) = v238[2];
                    *(void *)(v248 + 8) = v238[1];
                    *(void *)uint64_t v248 = *v238;
                  }
                  long long v239 = (uint64_t *)(v248 + 128);
                  id v243 = (uint64_t *)(v248 + 72);
                  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v227 + 40))(v227, v238, 64);
                  if (*(unsigned char *)(*(void *)&v234 + 124))
                  {
LABEL_334:
                    uint64_t v253 = *(unsigned int *)(*(void *)&v234 + 120);
                    if (v243 < v239)
                    {
                      *v243++ = (v253 << 32) | 4;
                      uint64_t v246 = (uint64_t)v239;
                      goto LABEL_359;
                    }
                    uint64_t v254 = ((char *)v243 - v249) >> 3;
                    unint64_t v255 = v254 + 1;
                    if ((unint64_t)(v254 + 1) >> 61) {
                      abort();
                    }
                    unint64_t v256 = (char *)v239 - v249;
                    if (((char *)v239 - v249) >> 2 > v255) {
                      unint64_t v255 = ((char *)v239 - v249) >> 2;
                    }
                    if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                      uint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v246 = v255;
                    }
                    if (v246)
                    {
                      uint64_t v257 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v227 + 16))(v227, 8 * v246, 4);
                      int16x8_t v258 = (uint64_t *)(v257 + 8 * v254);
                      uint64_t v246 = v257 + 8 * v246;
                      if (v257) {
                        *int16x8_t v258 = (v253 << 32) | 4;
                      }
                      unint64_t v256 = (char *)v239 - v249;
                      uint64_t v259 = (char *)((char *)v243 - v249);
                      if (v243 != (uint64_t *)v249)
                      {
LABEL_346:
                        unint64_t v260 = (unint64_t)(v259 - 8);
                        if (v260 < 0x38 || (unint64_t)((char *)v243 - (char *)v258) <= 0x1F)
                        {
                          int v262 = v243;
                          long long v238 = v258;
                        }
                        else
                        {
                          uint64_t v261 = (v260 >> 3) + 1;
                          int v262 = &v243[-(v261 & 0x3FFFFFFFFFFFFFFCLL)];
                          uint64_t v263 = v258 - 2;
                          uint64_t v264 = v243 - 2;
                          uint64_t v265 = v261 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v266 = *(_OWORD *)v264;
                            *((_OWORD *)v263 - 1) = *((_OWORD *)v264 - 1);
                            *(_OWORD *)uint64_t v263 = v266;
                            v263 -= 4;
                            v264 -= 4;
                            v265 -= 4;
                          }
                          while (v265);
                          long long v238 = &v258[-(v261 & 0x3FFFFFFFFFFFFFFCLL)];
                          if (v261 == (v261 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_356:
                            id v243 = (uint64_t *)v249;
LABEL_357:
                            char v268 = v258 + 1;
                            (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v227 + 40))(v227, v243, v256);
                            id v243 = v268;
LABEL_358:
                            int v249 = (char *)v238;
LABEL_359:
                            _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v423);
                            uint64_t v269 = v423;
                            if ((((char *)v243 - v249) & 0x7FFFFFFF8) != 0)
                            {
                              uint64_t v270 = 0;
                              char v271 = 0;
                              uint64_t v272 = ((unint64_t)((char *)v243 - v249) >> 3);
                              unsigned __int8 v273 = *(unsigned char *)(v423 + 33);
                              while (1)
                              {
                                size_t v274 = v273;
                                int8x16_t v275 = *(void **)v269;
                                if (v273) {
                                  break;
                                }
LABEL_361:
                                v275[v274] = *(void *)&v249[8 * v270];
                                unsigned __int8 v273 = *(unsigned char *)(v269 + 33) + 1;
                                *(unsigned char *)(v269 + 33) = v273;
                                ++v270;
                                char v271 = 1;
                                if (v270 == v272)
                                {
                                  int8x16_t v275 = *(void **)v269;
                                  size_t v274 = v273;
LABEL_378:
                                  qsort(v275, v274, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                                  goto LABEL_379;
                                }
                              }
                              if (v273 > 0x1Fu)
                              {
                                do
                                {
                                  uint64_t v279 = 0;
                                  unint64_t v280 = (int *)v275;
                                  while (1)
                                  {
                                    int v281 = *v280;
                                    v280 += 2;
                                    if (v281 == *(_DWORD *)&v249[8 * v270]) {
                                      break;
                                    }
                                    if (v274 == ++v279) {
                                      goto LABEL_372;
                                    }
                                  }
                                  HIDWORD(v275[v279]) = *(_DWORD *)&v249[8 * v270 + 4];
LABEL_372:
                                  ++v270;
                                }
                                while (v270 != v272);
                              }
                              else
                              {
                                do
                                {
                                  uint64_t v276 = 0;
                                  uint64_t v277 = (int *)v275;
                                  while (1)
                                  {
                                    int v278 = *v277;
                                    v277 += 2;
                                    if (v278 == *(_DWORD *)&v249[8 * v270]) {
                                      break;
                                    }
                                    if (v274 == ++v276) {
                                      goto LABEL_361;
                                    }
                                  }
                                  HIDWORD(v275[v276]) = *(_DWORD *)&v249[8 * v270++ + 4];
                                }
                                while (v270 != v272);
                              }
                              if (v271) {
                                goto LABEL_378;
                              }
                            }
LABEL_379:
                            if (v249)
                            {
                              (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v227 + 40))(v227, v249, v246 - (void)v249);
                              uint64_t v269 = v423;
                            }
                            id v282 = (std::__shared_weak_count *)*((void *)&v423 + 1);
                            long long v423 = 0uLL;
                            if (v282) {
                              atomic_fetch_add_explicit(&v282->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            uint64_t v283 = (std::__shared_weak_count *)v210[2].__shared_weak_owners_;
                            v210[2].__shared_owners_ = v269;
                            v210[2].__shared_weak_owners_ = (uint64_t)v282;
                            if (v283 && !atomic_fetch_add(&v283->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                              std::__shared_weak_count::__release_weak(v283);
                              if (v282) {
                                goto LABEL_386;
                              }
                            }
                            else if (v282)
                            {
LABEL_386:
                              if (!atomic_fetch_add(&v282->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                                std::__shared_weak_count::__release_weak(v282);
                              }
                            }
                            BOOL v284 = (std::__shared_weak_count *)*((void *)&v423 + 1);
                            if (*((void *)&v423 + 1)
                              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v423 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                              std::__shared_weak_count::__release_weak(v284);
                            }
                            extractCustomImageData(&__p, v408);
                            md::CustomImageData::operator=((uint64_t)&v210[6], &__p);
                            if (v427 == v426)
                            {
                              (*(void (**)(void *))(v426[0] + 32))(v426);
                              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                goto LABEL_396;
                              }
                            }
                            else
                            {
                              if (v427) {
                                (*(void (**)(void))(*v427 + 40))();
                              }
                              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              {
LABEL_396:

                                if (!atomic_fetch_add(&v406->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                                  std::__shared_weak_count::__release_weak(v406);
                                }
                                atomic_fetch_add_explicit(&v210->__shared_owners_, 1uLL, memory_order_relaxed);
                                uint64_t v285 = (std::__shared_weak_count *)v209[12];
                                v209[11] = (int8x8_t)v405;
                                v209[12] = (int8x8_t)v210;
                                uint64_t v177 = v412;
                                if (v285 && !atomic_fetch_add(&v285->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                                  std::__shared_weak_count::__release_weak(v285);
                                }
                                if (!atomic_fetch_add(&v210->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                                  std::__shared_weak_count::__release_weak(v210);
                                }
                                uint64_t v286 = *v203;
                                int8x16_t v287 = *(int8x8_t ***)(v412 + 192);
                                unint64_t v288 = *(void *)(v412 + 200);
                                if ((unint64_t)v287 < v288)
                                {
                                  if (v287) {
                                    *int8x16_t v287 = v286;
                                  }
                                  int32x4_t v205 = v287 + 1;
                                  goto LABEL_284;
                                }
                                uint64_t v289 = *(void *)(v412 + 184);
                                uint64_t v290 = ((uint64_t)v287 - v289) >> 3;
                                unint64_t v291 = v290 + 1;
                                if ((unint64_t)(v290 + 1) >> 61) {
                                  abort();
                                }
                                uint64_t v292 = v288 - v289;
                                if (v292 >> 2 > v291) {
                                  unint64_t v291 = v292 >> 2;
                                }
                                if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF8) {
                                  uint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  uint64_t v293 = v291;
                                }
                                if (v293)
                                {
                                  uint64_t v294 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v412 + 208)
                                                                                             + 16))(*(void *)(v412 + 208), 8 * v293, 8);
                                  unint64_t v295 = (int8x8_t **)(v294 + 8 * v290);
                                  uint64_t v296 = v294 + 8 * v293;
                                  if (v294) {
                                    char *v295 = v286;
                                  }
                                }
                                else
                                {
                                  uint64_t v296 = 0;
                                  unint64_t v295 = (int8x8_t **)(8 * v290);
                                }
                                uint64_t v177 = v412;
                                uint64_t v298 = *(void *)(v412 + 184);
                                uint64_t v297 = *(void *)(v412 + 192);
                                uint64_t v299 = v297 - v298;
                                if (v297 != v298)
                                {
                                  unint64_t v300 = v299 - 8;
                                  if ((unint64_t)(v299 - 8) < 0x38)
                                  {
                                    uint64_t v301 = v295;
                                  }
                                  else
                                  {
                                    uint64_t v301 = v295;
                                    if ((unint64_t)(v297 - (void)v295) >= 0x20)
                                    {
                                      uint64_t v302 = (v300 >> 3) + 1;
                                      uint64_t v303 = v295 - 2;
                                      uint64_t v304 = (long long *)(v297 - 16);
                                      uint64_t v305 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        long long v306 = *v304;
                                        *((_OWORD *)v303 - 1) = *(v304 - 1);
                                        *(_OWORD *)uint64_t v303 = v306;
                                        v303 -= 4;
                                        v304 -= 2;
                                        v305 -= 4;
                                      }
                                      while (v305);
                                      uint64_t v301 = &v295[-(v302 & 0x3FFFFFFFFFFFFFFCLL)];
                                      v297 -= 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                                      if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_428:
                                        uint64_t v297 = *(void *)(v412 + 184);
LABEL_429:
                                        int32x4_t v205 = v295 + 1;
                                        *(void *)(v412 + 184) = v301;
                                        *(void *)(v412 + 192) = v295 + 1;
                                        uint64_t v308 = *(void *)(v412 + 200);
                                        *(void *)(v412 + 200) = v296;
                                        if (v297) {
                                          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v412 + 208)
                                        }
                                                                                           + 40))(*(void *)(v412 + 208), v297, v308 - v297);
LABEL_284:
                                        *(void *)(v177 + 192) = v205;
                                        v206.i32[0] = (__int32)(*v203)[1];
                                        *((void *)&v207 + 1) = *((void *)&v402 + 1);
                                        v206.i32[1] = DWORD1(v402);
                                        v208.i32[0] = v402;
                                        v208.i32[1] = HIDWORD(*(void *)&(*v203)[1]);
                                        *(int8x8_t *)&long long v207 = vbsl_s8((int8x8_t)vcgt_f32(v208, v206), (*v203)[1], *(int8x8_t *)&v402);
                                        long long v402 = v207;
LABEL_285:
                                        if (++v203 == v401)
                                        {
                                          _ZF = *((float *)&v402 + 1) == 1.1755e-38 || *(float *)&v402 == 3.4028e38;
                                          if (_ZF) {
                                            unsigned int v310 = 0;
                                          }
                                          else {
                                            unsigned int v310 = -1;
                                          }
                                          int8x8_t v204 = vbsl_s8((int8x8_t)vdup_n_s32(v310), *(int8x8_t *)&v402, v127);
                                          goto LABEL_440;
                                        }
                                        continue;
                                      }
                                    }
                                  }
                                  do
                                  {
                                    uint64_t v307 = *(int8x8_t **)(v297 - 8);
                                    v297 -= 8;
                                    *--uint64_t v301 = v307;
                                  }
                                  while (v297 != v298);
                                  goto LABEL_428;
                                }
                                uint64_t v301 = v295;
                                goto LABEL_429;
                              }
                            }
                            operator delete(__p.__r_.__value_.__l.__data_);
                            goto LABEL_396;
                          }
                        }
                        do
                        {
                          uint64_t v267 = *--v262;
                          *--long long v238 = v267;
                        }
                        while (v262 != (uint64_t *)v249);
                        goto LABEL_356;
                      }
                    }
                    else
                    {
                      int16x8_t v258 = (uint64_t *)(8 * v254);
                      uint64_t v259 = (char *)((char *)v243 - v249);
                      if (v243 != (uint64_t *)v249) {
                        goto LABEL_346;
                      }
                    }
                    unint64_t v256 = (char *)v239 - (char *)v243;
                    long long v238 = v258;
                    goto LABEL_357;
                  }
                }
                else
                {
                  id v243 = v238 + 8;
                  int v249 = (char *)v238;
                  if (*(unsigned char *)(*(void *)&v234 + 124)) {
                    goto LABEL_334;
                  }
                }
                break;
              }
              uint64_t v246 = (uint64_t)v239;
              goto LABEL_359;
            }
LABEL_440:
            *(int8x8_t *)(v177 + 280) = v204;
            uint64_t v311 = *(void *)(v177 + 88);
            uint64_t v312 = *(void *)(v177 + 96);
            while (v311 != v312)
            {
              uint64_t v313 = *(void *)(v311 + 16);
              if (*(unsigned char *)(v313 + 80))
              {
                uint64_t v314 = *(void *)(v313 + 88);
                int v315 = *(_DWORD *)(v313 + 8);
                *(unsigned char *)(v314 + 112) = 1;
                *(_DWORD *)(v314 + 76) = v315;
                uint64_t v316 = *(void *)(v313 + 72);
                if (v316)
                {
                  if (((*(uint64_t (**)(uint64_t))(*(void *)v316 + 32))(v316) & 4) != 0)
                  {
                    uint64_t v317 = *(void *)(v313 + 72);
                    if (v317)
                    {
                      while (1)
                      {
                        uint64_t v318 = v317;
                        if (*(unsigned char *)(v317 + 80) == 1 && *(void *)(v317 + 136) == v313) {
                          break;
                        }
                        uint64_t v319 = *(void *)(v317 + 72);
                        if (!v319) {
                          goto LABEL_456;
                        }
                        if (((*(uint64_t (**)(uint64_t))(*(void *)v319 + 32))(v319) & 4) == 0) {
                          goto LABEL_456;
                        }
                        uint64_t v320 = *(void *)(v318 + 72);
                        if (!v320) {
                          goto LABEL_456;
                        }
                        char v321 = (*(uint64_t (**)(uint64_t))(*(void *)v320 + 32))(v320);
                        uint64_t v317 = 0;
                        uint64_t v313 = v318;
                        if ((v321 & 4) != 0)
                        {
                          uint64_t v317 = *(void *)(v318 + 72);
                          uint64_t v313 = v318;
                        }
                      }
                      uint64_t v322 = *(void *)(v311 + 24);
                      if (v322)
                      {
                        uint64_t v323 = *(void *)(v322 + 88);
                        int v324 = *(_DWORD *)(v318 + 12);
                        *(unsigned char *)(v323 + 112) = 1;
                        *(_DWORD *)(v323 + 76) = v324;
                      }
                    }
                  }
                }
              }
LABEL_456:
              if ([*(id *)v311 when] == 3)
              {
                uint64_t v325 = *(void *)(v311 + 8);
                if (v325)
                {
                  uint64_t v326 = *(void *)(v325 + 88);
                  *(unsigned char *)(v326 + 112) = 1;
                  *(_DWORD *)(v326 + 76) = 1093664768;
                }
              }
              v311 += 32;
            }
            v327 = v410;
            uint64_t v329 = *((void *)v410 + 11);
            uint64_t v330 = *((void *)v410 + 12);
            uint64_t v328 = (uint64_t *)((char *)v410 + 88);
            if (v330 != v329)
            {
              do
              {
                uint64_t v331 = *(std::__shared_weak_count **)(v330 - 8);
                if (v331 && !atomic_fetch_add(&v331->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                  std::__shared_weak_count::__release_weak(v331);
                }
                v330 -= 16;
              }
              while (v330 != v329);
              uint64_t v330 = *v328;
              v327 = v410;
            }
            *((void *)v327 + 12) = v329;
            uint64_t v332 = *(void *)(*((void *)v327 + 5) + 192) - *(void *)(*((void *)v327 + 5) + 184);
            uint64_t v333 = v332 >> 3;
            if (v332 >> 3 > (unint64_t)((*((void *)v327 + 13) - v330) >> 4))
            {
              if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF9) {
                abort();
              }
              uint64_t v335 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v410 + 14) + 16))(*((void *)v410 + 14), 2 * v332, 8);
              uint64_t v334 = v329 - v330;
              uint64_t v336 = v335 + v334;
              uint64_t v337 = v335 + 16 * v333;
              BOOL v338 = (void *)*((void *)v410 + 11);
              uint64_t v339 = (void *)*((void *)v410 + 12);
              if (v339 == v338)
              {
                *((void *)v410 + 11) = v336;
                *((void *)v410 + 12) = v336;
                uint64_t v343 = *((void *)v410 + 13);
                *((void *)v410 + 13) = v337;
              }
              else
              {
                uint64_t v340 = v335 + v334;
                do
                {
                  long long v341 = *((_OWORD *)v339 - 1);
                  v339 -= 2;
                  *(_OWORD *)(v340 - 16) = v341;
                  v340 -= 16;
                  *uint64_t v339 = 0;
                  v339[1] = 0;
                }
                while (v339 != v338);
                uint64_t v339 = (void *)*((void *)v410 + 11);
                unint64_t v342 = (void *)*((void *)v410 + 12);
                *((void *)v410 + 11) = v340;
                *((void *)v410 + 12) = v336;
                uint64_t v343 = *((void *)v410 + 13);
                *((void *)v410 + 13) = v337;
                while (v342 != v339)
                {
                  unint64_t v344 = (std::__shared_weak_count *)*(v342 - 1);
                  if (v344 && !atomic_fetch_add(&v344->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                    std::__shared_weak_count::__release_weak(v344);
                  }
                  v342 -= 2;
                }
              }
              v327 = v410;
              if (v339) {
                (*(void (**)(void, void *, uint64_t))(**((void **)v410 + 14) + 40))(*((void *)v410 + 14), v339, v343 - (void)v339);
              }
            }
            uint64_t v345 = *((void *)v327 + 5);
            uint8x8_t v346 = *(uint64_t **)(v345 + 184);
            unint64_t v347 = *(uint64_t **)(v345 + 192);
            while (v346 != v347)
            {
              __int16 v348 = (*(void (**)(void))(*(void *)*v346 + 88))();
              uint64_t v349 = *((void *)v410 + 5);
              if (*(unsigned char *)(v349 + 48)) {
                char v350 = *(unsigned char *)(v349 + 49) != 0;
              }
              else {
                char v350 = 0;
              }
              uint64_t v351 = *v346;
              char v352 = *(unsigned char *)(*v346 + 108);
              unint64_t v353 = operator new(0x308uLL);
              v353[1] = 0;
              v353[2] = 0;
              *unint64_t v353 = &unk_1EF581DA8;
              __p.__r_.__value_.__r.__words[0] = md::RouteWaypointLabelFeature::RouteWaypointLabelFeature((uint64_t)(v353 + 3), v348, v350, v352, (uint64_t *)(v351 + 88), *((void *)this + 1));
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v353;

              v353[12] = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*((void *)this + 1) + 288) + 680), 1uLL)+ 1;
              long long v354 = (void *)*((void *)v410 + 12);
              if ((unint64_t)v354 >= *((void *)v410 + 13))
              {
                long long v356 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)v328, (long long *)&__p);
              }
              else
              {
                if (v354)
                {
                  *long long v354 = __p.__r_.__value_.__r.__words[0];
                  std::string::size_type v355 = __p.__r_.__value_.__l.__size_;
                  v354[1] = __p.__r_.__value_.__l.__size_;
                  if (v355) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v355 + 8), 1uLL, memory_order_relaxed);
                  }
                }
                long long v356 = v354 + 2;
              }
              *((void *)v410 + 12) = v356;
              char v357 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_
                && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                std::__shared_weak_count::__release_weak(v357);
              }
              ++v346;
            }
            uint64_t v358 = (void *)*((void *)v410 + 7);
            for (uint64_t m = (void *)*((void *)v410 + 8); v358 != m; v358 += 2)
              (*(void (**)(void))(*(void *)*v358 + 648))(*v358);
LABEL_499:
            uint64_t v24 = this;
            std::vector<std::shared_ptr<md::RouteWaypointLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteWaypointLabelFeature>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>,std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>>(v400, *((void *)this + 12), *((uint64_t **)v410 + 11), *((uint64_t **)v410 + 12), (uint64_t)(*((void *)v410 + 12) - *((void *)v410 + 11)) >> 4);
            uint64_t v360 = v410;
            std::vector<std::shared_ptr<md::RouteWaypointLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteWaypointLabelFeature>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>,std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>>(v400, *((void *)this + 12), *((uint64_t **)v360 + 7), *((uint64_t **)v360 + 8), (uint64_t)(*((void *)v360 + 8) - *((void *)v360 + 7)) >> 4);
            unint64_t v361 = (md::RouteLineSupport *)*((void *)v410 + 1);
            if (v361)
            {
              do
              {
                unint64_t v362 = v361;
                unint64_t v361 = *(md::RouteLineSupport **)v361;
              }
              while (v361);
            }
            else
            {
              do
              {
                unint64_t v362 = (md::RouteLineSupport *)*((void *)v360 + 2);
                _ZF = *(void *)v362 == (void)v360;
                uint64_t v360 = v362;
              }
              while (!_ZF);
            }
            int8x16_t v126 = v362;
            if (v362 == (md::RouteLineSupport *)((char *)this + 48)) {
              goto LABEL_507;
            }
            goto LABEL_194;
          }
        }
        std::string::size_type v157 = __p.__r_.__value_.__r.__words[0];
        uint64_t v158 = (uint64_t)((uint64_t)v147 - __p.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 61) {
          abort();
        }
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v159) {
          unint64_t v159 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        }
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v160 = v159;
        }
        if (v160)
        {
          uint64_t v161 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v426[0] + 16))(v426[0], 8 * v160, 8);
          uint64_t v162 = (char *)(v161 + 8 * v158);
          std::string::size_type v163 = v161 + 8 * v160;
          if (v161) {
            *(void *)uint64_t v162 = v155;
          }
          std::string::size_type v164 = (std::string::size_type)v147 - v157;
          if (v147 != (void *)v157)
          {
LABEL_238:
            unint64_t v165 = v164 - 8;
            if (v165 < 0x138
              || &v162[-(v165 & 0xFFFFFFFFFFFFFFF8) - 8] > v162 - 8
              || (void *)((char *)v147 - (v165 & 0xFFFFFFFFFFFFFFF8) - 8) > v147 - 1
              || (unint64_t)((char *)v147 - v162) < 0x20)
            {
              int8x16_t v166 = v147;
              std::string::size_type v167 = (std::string::size_type)v162;
            }
            else
            {
              uint64_t v169 = (v165 >> 3) + 1;
              int8x16_t v166 = &v147[-(v169 & 0x3FFFFFFFFFFFFFFCLL)];
              int8x16_t v170 = v162 - 16;
              int32x4_t v171 = (long long *)(v147 - 2);
              uint64_t v172 = v169 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v173 = *v171;
                *((_OWORD *)v170 - 1) = *(v171 - 1);
                *(_OWORD *)int8x16_t v170 = v173;
                v170 -= 32;
                v171 -= 2;
                v172 -= 4;
              }
              while (v172);
              std::string::size_type v167 = (std::string::size_type)&v162[-8 * (v169 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v169 == (v169 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_241;
              }
            }
            do
            {
              uint64_t v168 = *--v166;
              *(void *)(v167 - 8) = v168;
              v167 -= 8;
            }
            while (v166 != (void *)v157);
LABEL_241:
            int8x16_t v147 = (void *)v157;
            goto LABEL_244;
          }
        }
        else
        {
          std::string::size_type v163 = 0;
          uint64_t v162 = (char *)(8 * v158);
          std::string::size_type v164 = (std::string::size_type)v147 - __p.__r_.__value_.__r.__words[0];
          if (v147 != (void *)__p.__r_.__value_.__l.__data_) {
            goto LABEL_238;
          }
        }
        std::string::size_type v167 = (std::string::size_type)v162;
LABEL_244:
        std::string::size_type v153 = (std::string::size_type)(v162 + 8);
        __p.__r_.__value_.__r.__words[0] = v167;
        __p.__r_.__value_.__r.__words[2] = v163;
        if (v147) {
          (*(void (**)(void, void *, std::string::size_type))(*(void *)v426[0] + 40))(v426[0], v147, v156 - (void)v147);
        }
        goto LABEL_221;
      }
LABEL_507:
      md::RouteLineSupport::restyleFeatures(v24);
    }
  }
  v363 = (uint64_t *)*((void *)v24 + 11);
  uint64_t v364 = (uint64_t *)*((void *)v24 + 12);
  if (v363 == v364) {
    return;
  }
  v365 = 0;
  v366 = 0;
  unint64_t v367 = 0;
  do
  {
    if (*(unsigned char *)(*v363 + 697) != 2)
    {
      id v369 = *(id *)(*v363 + 680);
      uint64_t v370 = v369;
      if (v369 && [v369 needsTextUpdate])
      {
        uint64_t v371 = *v363;
        if ((unint64_t)v366 >= v367)
        {
          uint64_t v372 = (v366 - v365) >> 3;
          unint64_t v373 = v372 + 1;
          if ((unint64_t)(v372 + 1) >> 61) {
            abort();
          }
          if ((uint64_t)(v367 - (void)v365) >> 2 > v373) {
            unint64_t v373 = (uint64_t)(v367 - (void)v365) >> 2;
          }
          if (v367 - (unint64_t)v365 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v374 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v374 = v373;
          }
          if (v374)
          {
            if (v374 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v375 = v374;
            uint64_t v376 = operator new(8 * v374);
            unint64_t v374 = v375;
          }
          else
          {
            uint64_t v376 = 0;
          }
          char v377 = &v376[8 * v372];
          *(void *)char v377 = v371;
          v368 = v377 + 8;
          if (v366 == v365) {
            goto LABEL_532;
          }
          unint64_t v378 = v366 - 8 - v365;
          if (v378 >= 0x168)
          {
            if (&v376[v366 - v365 - 8 - (v378 & 0xFFFFFFFFFFFFFFF8)] > &v376[v366 - v365 - 8])
            {
              v379 = v366;
            }
            else if (&v366[-(v378 & 0xFFFFFFFFFFFFFFF8) - 8] > v366 - 8)
            {
              v379 = v366;
            }
            else if ((unint64_t)(v365 - v376) >= 0x20)
            {
              uint64_t v382 = (v378 >> 3) + 1;
              v379 = &v366[-8 * (v382 & 0x3FFFFFFFFFFFFFFCLL)];
              v383 = &v376[8 * v372 - 16];
              uint64_t v384 = v366 - 16;
              uint64_t v385 = v382 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v386 = *(_OWORD *)v384;
                *(v383 - 1) = *((_OWORD *)v384 - 1);
                _OWORD *v383 = v386;
                v383 -= 2;
                v384 -= 32;
                v385 -= 4;
              }
              while (v385);
              v377 -= 8 * (v382 & 0x3FFFFFFFFFFFFFFCLL);
              if (v382 == (v382 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_532;
              }
            }
            else
            {
              v379 = v366;
            }
          }
          else
          {
            v379 = v366;
          }
          do
          {
            uint64_t v380 = *((void *)v379 - 1);
            v379 -= 8;
            *((void *)v377 - 1) = v380;
            v377 -= 8;
          }
          while (v379 != v365);
LABEL_532:
          v381 = &v376[8 * v374];
          if (v365) {
            operator delete(v365);
          }
          v365 = v377;
          unint64_t v367 = (unint64_t)v381;
          goto LABEL_512;
        }
        *(void *)v366 = v371;
        v366 += 8;
      }
      v368 = v366;
LABEL_512:

      v366 = v368;
    }
    v363 += 2;
  }
  while (v363 != v364);
  if (v365 != v366)
  {
    uint64_t v387 = v365;
    do
    {
      id v388 = *(id *)(*(void *)v387 + 680);
      [v388 setNeedsTextUpdate:0];
      unint64_t v389 = (int64x2_t *)(*(uint64_t (**)(void))(**(void **)v387 + 72))();
      md::WaypointStore::updateExternalFeatureText(v389, (md::LabelExternalPointFeature *)v388, v390);
      (*(void (**)(void, void, void))(**(void **)v387 + 32))(*(void *)v387, 0, 0);
      (*(void (**)(void, void))(**(void **)v387 + 536))(*(void *)v387, *((void *)this + 1));

      v387 += 8;
    }
    while (v387 != v366);
  }
  if (v365)
  {
    operator delete(v365);
  }
}

void sub_1A1D005A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a41);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a34);

  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy((uint64_t)&a37, a38);
  _Unwind_Resume(a1);
}

void sub_1A1D00DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::Debug::BasePipelineState::BasePipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    std::string::size_type v82 = a4;
    uint64_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1EB32B428 = 1;
          }
          ggl::Debug::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          unk_1E9588380 = &ggl::Debug::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1E9588388 = 0;
          {
            ggl::Debug::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
            *(void *)algn_1E9588478 = ggl::Debug::View::reflection(void)::reflection;
            qword_1E9588480 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1E9588390 = (uint64_t)&ggl::Debug::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1E9588398 = xmmword_1A28FCD30;
        }
      }
      ggl::Debug::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Debug::BasePipelineSetup::typedReflection(void)::ref;
      ggl::DebugShader::typedReflection(v83);
      qword_1EB319AB8 = (uint64_t)&ggl::DebugShader::typedReflection(void)::ref;
      {
        ggl::Debug::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9588618 = 0;
        qword_1E9588620 = (uint64_t)"";
        dword_1E9588628 = 0;
        qword_1E9588630 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1E9588638 = 1;
      }
      qword_1EB319AC0 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319AC8 = 1;
      qword_1EB319AD0 = 0;
      unk_1EB319AD8 = 0;
      qword_1EB319AE0 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1EB319AE8 = 0;
      {
        ggl::Debug::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E95884C8 = 0;
        qword_1E95884D0 = (uint64_t)"style";
        dword_1E95884D8 = 3;
        qword_1E95884E0 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1E95884E8 = xmmword_1A28FCEF0;
        qword_1E95884F8 = 1;
        unk_1E9588500 = "view";
        dword_1E9588508 = 3;
        qword_1E9588510 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1E9588518 = xmmword_1A28FC6E0;
        qword_1E9588528 = 2;
        unk_1E9588530 = "transform";
        dword_1E9588538 = 3;
        qword_1E9588540 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        unk_1E9588548 = 10;
      }
      qword_1EB319AF0 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1EB319AF8 = 3;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Debug::BasePipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF5607F0;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void ggl::DebugShader::typedReflection(ggl::DebugShader *this)
{
  {
    if (v1)
    {
      ggl::DebugShader::typedReflection(void)::ref = (uint64_t)"DebugShader";
      ggl::debugShaderVertexFunctionDescriptor(v1);
      qword_1EB320688 = (uint64_t)&ggl::debugShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<18ul>("DebugShaderVertex");
      dword_1EB320690 = (int)v2;
      ggl::debugShaderFragmentFunctionDescriptor(v2);
      qword_1EB320698 = (uint64_t)&ggl::debugShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3206A0 = ggl::crc32::compute<20ul>("DebugShaderFragment");
      qword_1EB3206A8 = (uint64_t)ggl::debugShaderShaderConstants(void)::ref;
      unk_1EB3206B0 = 3;
      qword_1EB3206B8 = (uint64_t)&ggl::debugShaderShaderTextures(void)::ref;
      unk_1EB3206C0 = 0;
      qword_1EB3206C8 = (uint64_t)&ggl::debugShaderShaderSamplers(void)::ref;
      unk_1EB3206D0 = 0;
    }
  }
}

void ggl::debugShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::debugShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("DebugShaderFragment");
    *(_DWORD *)algn_1EB32474C = 1;
    qword_1EB324750 = (uint64_t)"DebugShader";
    unk_1EB324758 = 0;
    qword_1EB324760 = 0;
    unk_1EB324768 = &ggl::debugShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB324770 = 1;
    unk_1EB324778 = &ggl::debugShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB324780 = 0;
    unk_1EB324788 = &ggl::debugShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB324790 = 0;
    unk_1EB324798 = &ggl::debugShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3247A8 = 0;
    unk_1EB3247B0 = 0;
    qword_1EB3247A0 = 0;
  }
}

void ggl::debugShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::debugShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("DebugShaderVertex");
    *(_DWORD *)algn_1EB324084 = 0;
    qword_1EB324088 = (uint64_t)"DebugShader";
    unk_1EB324090 = ggl::debugShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324098 = 1;
    unk_1EB3240A0 = &ggl::debugShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB3240A8 = 3;
    unk_1EB3240B0 = &ggl::debugShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB3240B8 = 0;
    unk_1EB3240C0 = &ggl::debugShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB3240C8 = 0;
    unk_1EB3240D0 = &ggl::debugShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3240E0 = 0;
    unk_1EB3240E8 = 0;
    qword_1EB3240D8 = 0;
  }
}

uint64_t ggl::GlowAlpha::MeshPipelineState::MeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    uint64_t v84 = a4;
    long long v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::GlowAlpha::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GlowAlpha::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::GlowAlpha::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GlowAlpha::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B778 = 1;
          }
          ggl::GlowAlpha::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GlowAlpha::DefaultVbo>::typedReflection(void)::r;
          unk_1E958B670 = &ggl::GlowAlpha::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1E958B678 = 0;
          {
            ggl::GlowAlpha::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E958B6A8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E958B6B0 = (uint64_t)ggl::GlowAlpha::Glow::reflection(void)::reflection;
          }
          qword_1E958B680 = (uint64_t)&ggl::GlowAlpha::pipelineDataMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E958B688 = xmmword_1A28FCD30;
        }
      }
      ggl::GlowAlpha::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GlowAlpha::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::GlowAlphaShader::typedReflection(v85);
      qword_1EB319EB8 = (uint64_t)&ggl::GlowAlphaShader::typedReflection(void)::ref;
      {
        ggl::GlowAlpha::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E958B758 = 0;
        qword_1E958B760 = (uint64_t)"";
        dword_1E958B768 = 0;
        qword_1E958B770 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E958B778 = 2;
      }
      qword_1EB319EC0 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319EC8 = 1;
      qword_1EB319ED0 = 0;
      unk_1EB319ED8 = 0;
      qword_1EB319EE0 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB319EE8 = 0;
      {
        ggl::GlowAlpha::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E958B6C8 = 0;
        qword_1E958B6D0 = (uint64_t)"view";
        dword_1E958B6D8 = 3;
        qword_1E958B6E0 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E958B6E8 = xmmword_1A28FCEB0;
        qword_1E958B6F8 = 1;
        unk_1E958B700 = "transform";
        dword_1E958B708 = 3;
        qword_1E958B710 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1E958B718 = xmmword_1A28FCF70;
        qword_1E958B728 = 2;
        unk_1E958B730 = "glow";
        dword_1E958B738 = 3;
        qword_1E958B740 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineConstantGlowBinding(void)::reflection;
        unk_1E958B748 = 2;
      }
      qword_1EB319EF0 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB319EF8 = 3;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  char v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)id v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::GlowAlpha::MeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  *(void *)a1 = &unk_1EF561AE0;
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void ggl::GlowAlphaShader::typedReflection(ggl::GlowAlphaShader *this)
{
  {
    if (v1)
    {
      ggl::GlowAlphaShader::typedReflection(void)::ref = (uint64_t)"GlowAlphaShader";
      ggl::glowAlphaShaderVertexFunctionDescriptor(v1);
      qword_1EB320D18 = (uint64_t)&ggl::glowAlphaShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<22ul>("GlowAlphaShaderVertex");
      dword_1EB320D20 = (int)v2;
      ggl::glowAlphaShaderFragmentFunctionDescriptor(v2);
      qword_1EB320D28 = (uint64_t)&ggl::glowAlphaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB320D30 = ggl::crc32::compute<24ul>("GlowAlphaShaderFragment");
      qword_1EB320D38 = (uint64_t)ggl::glowAlphaShaderShaderConstants(void)::ref;
      unk_1EB320D40 = 3;
      qword_1EB320D48 = (uint64_t)&ggl::glowAlphaShaderShaderTextures(void)::ref;
      unk_1EB320D50 = 0;
      qword_1EB320D58 = (uint64_t)&ggl::glowAlphaShaderShaderSamplers(void)::ref;
      unk_1EB320D60 = 0;
    }
  }
}

void ggl::glowAlphaShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::glowAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("GlowAlphaShaderFragment");
    *(_DWORD *)algn_1EB32526C = 1;
    qword_1EB325270 = (uint64_t)"GlowAlphaShader";
    unk_1EB325278 = 0;
    qword_1EB325280 = 0;
    unk_1EB325288 = &ggl::glowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB325290 = 0;
    unk_1EB325298 = &ggl::glowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB3252A0 = 0;
    unk_1EB3252A8 = &ggl::glowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB3252B0 = 0;
    unk_1EB3252B8 = &ggl::glowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB3252C8 = 0;
    unk_1EB3252D0 = 0;
    qword_1EB3252C0 = 0;
  }
}

void ggl::glowAlphaShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::glowAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("GlowAlphaShaderVertex");
    *(_DWORD *)algn_1EB324CA4 = 0;
    qword_1EB324CA8 = (uint64_t)"GlowAlphaShader";
    unk_1EB324CB0 = ggl::glowAlphaShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB324CB8 = 1;
    unk_1EB324CC0 = &ggl::glowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB324CC8 = 3;
    unk_1EB324CD0 = &ggl::glowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB324CD8 = 0;
    unk_1EB324CE0 = &ggl::glowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB324CE8 = 0;
    unk_1EB324CF0 = &ggl::glowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB324D00 = 0;
    unk_1EB324D08 = 0;
    qword_1EB324CF8 = 0;
  }
}

void gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingEverything(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  atomic_store(a2, (unsigned __int8 *)(a1 + 2787));
  LOBYTE(__dst) = a2;
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_43;
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v5 + 48))(v5, &__dst);
  std::mutex::lock((std::mutex *)(a1 + 2888));
  atomic_store(1u, (unsigned __int8 *)(a1 + 2786));
  std::promise<void>::set_value((std::promise<void> *)(a1 + 2800));
  uint64_t v8 = *(void *)(a1 + 2960);
  if (!v8) {
    goto LABEL_20;
  }
  long long v9 = *(void **)v8;
  char v10 = *(void **)(v8 + 8);
  if (*(void **)v8 == v10)
  {
    *(void *)(a1 + 2960) = 0;
    int8x16_t v12 = *(void **)v8;
    if (!*(void *)v8) {
      goto LABEL_19;
    }
LABEL_10:
    int16x8_t v13 = *(void **)(v8 + 8);
    int32x4_t v14 = v12;
    if (v13 != v12)
    {
      int8x16_t v15 = v13 - 4;
      int8x16_t v16 = v13 - 4;
      do
      {
        int32x4_t v18 = (void *)v16[3];
        if (v16 == v18)
        {
          (*(void (**)(void *))(*v16 + 32))(v16);
        }
        else if (v18)
        {
          (*(void (**)(void *, void *))(*v18 + 40))(v18, v14);
        }
        v15 -= 4;
        BOOL v17 = v16 == v12;
        v16 -= 4;
      }
      while (!v17);
      int32x4_t v14 = *(void **)v8;
    }
    *(void *)(v8 + 8) = v12;
    (*(void (**)(void, void *, void))(**(void **)(v8 + 24) + 40))(*(void *)(v8 + 24), v14, *(void *)(v8 + 16) - (void)v14);
LABEL_19:
    MEMORY[0x1A6239270](v8, 0x20C40DC1BFBCFLL);
LABEL_20:
    int v19 = *(_DWORD *)(a4 + 104);
    if ((v19 & 0x10) != 0)
    {
      unint64_t v22 = *(void *)(a4 + 96);
      unint64_t v23 = *(void *)(a4 + 56);
      if (v22 < v23)
      {
        *(void *)(a4 + 96) = v23;
        unint64_t v22 = v23;
      }
      int8x16_t v24 = (const void **)(a4 + 48);
    }
    else
    {
      if ((v19 & 8) == 0)
      {
        size_t v20 = 0;
        HIBYTE(v31) = 0;
        p_dst = &__dst;
        goto LABEL_35;
      }
      int8x16_t v24 = (const void **)(a4 + 24);
      unint64_t v22 = *(void *)(a4 + 40);
    }
    int8x16_t v25 = *v24;
    size_t v20 = v22 - (void)*v24;
    if (v20 < 0x7FFFFFFFFFFFFFF8)
    {
      if (v20 >= 0x17)
      {
        uint64_t v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17) {
          uint64_t v26 = v20 | 7;
        }
        uint64_t v27 = v26 + 1;
        p_dst = (long long *)operator new(v26 + 1);
        *((void *)&__dst + 1) = v20;
        unint64_t v31 = v27 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v31) = v22 - *(unsigned char *)v24;
        p_dst = &__dst;
        if (!v20) {
          goto LABEL_35;
        }
      }
      memmove(p_dst, v25, v20);
LABEL_35:
      *((unsigned char *)p_dst + v20) = 0;
      int8x16_t v28 = (void **)(a1 + 2976);
      if (*(char *)(a1 + 2999) < 0) {
        operator delete(*v28);
      }
      *(_OWORD *)int8x16_t v28 = __dst;
      *(void *)(a1 + 2992) = v31;
      std::mutex::unlock((std::mutex *)(a1 + 2888));
      int8x16_t v29 = *(std::__shared_weak_count **)(a1 + 24);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      if (v29)
      {
        if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      return;
    }
LABEL_43:
    abort();
  }
  while (1)
  {
    LOBYTE(__dst) = a2;
    uint64_t v11 = v9[3];
    if (!v11) {
      break;
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v11 + 48))(v11, &__dst);
    v9 += 4;
    if (v9 == v10)
    {
      uint64_t v8 = *(void *)(a1 + 2960);
      *(void *)(a1 + 2960) = 0;
      if (v8)
      {
        int8x16_t v12 = *(void **)v8;
        if (!*(void *)v8) {
          goto LABEL_19;
        }
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A1D02514(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, unsigned char *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    int v3 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        int v4 = (void *)*v4;
      }
      uint64_t v5 = [*(id *)(a1 + 56) UTF8String];
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 2080;
      uint64_t v9 = v5;
      _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_ERROR, "Failed to decode stylesheet %s %s", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1A1D0263C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::VenueWallRenderResources::VenueWallRenderResources(md::VenueWallRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)((char *)this + 1284);
  int v6 = (void *)((char *)this + 804);
  uint64_t v7 = (void *)((char *)this + 276);
  __int16 v8 = a2;
  *(void *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 3) = &unk_1EF55A890;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 60) = 256;
  *((_DWORD *)this + 17) = 0;
  *((void *)this + 9) = 1;
  *((_WORD *)this + 40) = 0;
  *((unsigned char *)this + 82) = 3;
  *(_OWORD *)((char *)this + 83) = 0u;
  *((unsigned char *)this + 99) = 0;
  *(_OWORD *)((char *)this + 148) = 0u;
  *((_WORD *)this + 106) = 257;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((unsigned char *)this + 232) = 0;
  *((_DWORD *)this + 68) = 0;
  *((void *)this + 33) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 30) = &unk_1EF55A890;
  *uint64_t v7 = 256;
  *((_DWORD *)this + 71) = 0;
  *((void *)this + 36) = 1;
  *((_WORD *)this + 148) = 0;
  *((unsigned char *)this + 298) = 3;
  *(_OWORD *)((char *)this + 299) = 0u;
  *((unsigned char *)this + 315) = 0;
  *(_OWORD *)((char *)this + 364) = 0u;
  *((_WORD *)this + 214) = 257;
  *((_OWORD *)this + 27) = 0u;
  *((unsigned char *)this + 448) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((void *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = &unk_1EF55A890;
  v7[30] = 0xC37A000000000100;
  *((_DWORD *)this + 131) = 0;
  *((void *)this + 66) = 1;
  *((_WORD *)this + 268) = 0;
  *((unsigned char *)this + 538) = 3;
  *((unsigned char *)this + 555) = 0;
  *(_OWORD *)((char *)this + 539) = 0u;
  *(_OWORD *)((char *)this + 604) = 0u;
  *((_WORD *)this + 334) = 257;
  *((unsigned char *)this + 688) = 0;
  *((_OWORD *)this + 42) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((void *)this + 95) = 0;
  *((void *)this + 99) = 0;
  *((_DWORD *)this + 200) = 0;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((void *)this + 96) = &unk_1EF55A890;
  *int v6 = 0xC3FA000000010100;
  *((_DWORD *)this + 203) = 0;
  *((void *)this + 102) = 1;
  *((_WORD *)this + 412) = 0;
  *((unsigned char *)this + 826) = 3;
  *((unsigned char *)this + 843) = 0;
  *(_OWORD *)((char *)this + 827) = 0u;
  *(_OWORD *)((char *)this + 892) = 0u;
  *((_WORD *)this + 478) = 257;
  *((unsigned char *)this + 976) = 0;
  *((_OWORD *)this + 60) = 0u;
  *((void *)this + 125) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_DWORD *)this + 260) = 0;
  *((void *)this + 129) = 0;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *((void *)this + 126) = &unk_1EF55A890;
  v6[30] = 256;
  *((_DWORD *)this + 263) = 0;
  *((void *)this + 132) = 1;
  *((_WORD *)this + 532) = 0;
  *((unsigned char *)this + 1066) = 3;
  *((unsigned char *)this + 1083) = 0;
  *(_OWORD *)((char *)this + 1067) = 0u;
  *(_OWORD *)((char *)this + 1132) = 0u;
  *((_WORD *)this + 598) = 257;
  *((unsigned char *)this + 1216) = 0;
  *((_OWORD *)this + 75) = 0u;
  *((void *)this + 155) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((void *)this + 158) = 0;
  *((void *)this + 157) = 0;
  *((_DWORD *)this + 320) = 0;
  *((void *)this + 159) = 0;
  *((void *)this + 156) = &unk_1EF55A890;
  void *v5 = 66048;
  *((_DWORD *)this + 323) = 0;
  *((void *)this + 162) = 1;
  *((_WORD *)this + 652) = 0;
  *((unsigned char *)this + 1306) = 3;
  *(void *)((char *)this + 1315) = 0;
  *(void *)((char *)this + 1307) = 0;
  *((unsigned char *)this + 1323) = 0;
  *(void *)((char *)this + 1380) = 0;
  *(void *)((char *)this + 1372) = 0;
  *((_WORD *)this + 718) = 257;
  *((void *)this + 181) = 0;
  *((void *)this + 180) = 0;
  *((unsigned char *)this + 1456) = 0;
  *((void *)this + 183) = 0;
  uint64_t v9 = [(VKSharedResources *)v8 shaderLibrary];
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 296) = 0;
  uint64_t v10 = *(void *)(v9 + 80);
  uint64_t v11 = *(void *)(v10 + 3152);
  int8x16_t v12 = *(std::__shared_weak_count **)(v10 + 3160);
  uint64_t v23 = v11;
  int8x16_t v24 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  int v21 = 0;
  LOBYTE(v18[0]) = 1;
  *(_OWORD *)&v18[1] = xmmword_1A28FCEC0;
  v18[5] = 7;
  char v22 = 15;
  int16x8_t v13 = operator new(0x198uLL);
  v13[1] = 0;
  v13[2] = 0;
  *int16x8_t v13 = &unk_1EF589F60;
  long long v14 = *(_OWORD *)&a3->colorFormatsCount;
  v25[0] = *(_OWORD *)a3->colorFormats;
  v25[1] = v14;
  uint64_t v15 = ggl::VenueWall::MeshPipelineState::MeshPipelineState((uint64_t)(v13 + 3), &v23, (uint64_t)v18, v25);
  int8x16_t v16 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v15;
  *((void *)this + 1) = v13;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  BOOL v17 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator new();
}

void sub_1A1D07148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ggl::RenderDataHolder *a10, uint64_t a11, ggl::RenderDataHolder *a12, uint64_t a13, ggl::RenderDataHolder *a14, uint64_t a15, ggl::RenderDataHolder *a16, uint64_t a17, ggl::RenderDataHolder *a18, ggl::RenderDataHolder *a19, uint64_t *a20,void *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26,uint64_t *a27,uint64_t *a28)
{
  std::function<ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::~function(v31);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v30);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v29);
  std::function<void ()(ggl::ConstantDataTyped<ggl::Building::Gradient> *)>::~function(&STACK[0x320]);
  std::function<ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::~function(&STACK[0x340]);
  MEMORY[0x1A6239270](v29, 0x10A0C40D234DDC7);
  std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::Building::Gradient>>>::~unique_ptr[abi:nn180100](a20);
  ggl::RenderDataHolder::~RenderDataHolder(a10);
  std::unique_ptr<ggl::FragmentedPool<ggl::VenueWallShadow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](a22);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a11);
  ggl::RenderDataHolder::~RenderDataHolder(a12);
  std::unique_ptr<ggl::FragmentedPool<ggl::VenueWallShadow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](a23);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  ggl::RenderDataHolder::~RenderDataHolder(a14);
  std::unique_ptr<ggl::FragmentedPool<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup>>::~unique_ptr[abi:nn180100](a24);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v28 + 744);
  std::unique_ptr<ggl::FragmentedPool<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup>>::~unique_ptr[abi:nn180100](a25);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v28 + 720);
  std::unique_ptr<ggl::FragmentedPool<ggl::VenueWall::WallEndCapMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a26);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a15);
  ggl::RenderDataHolder::~RenderDataHolder(a16);
  std::unique_ptr<ggl::FragmentedPool<ggl::VenueWall::WallTopMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a27);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a17);
  ggl::RenderDataHolder::~RenderDataHolder(a18);
  ggl::RenderDataHolder::~RenderDataHolder(a19);
  std::unique_ptr<ggl::FragmentedPool<ggl::VenueWall::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](a28);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v28);

  _Unwind_Resume(a1);
}

uint64_t ggl::VenueWallShadow::MeshPipelineState::MeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int8x16_t v82 = a4;
    uint64_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::VenueWall::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B7C0 = 1;
          }
          ggl::VenueWallShadow::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r;
          unk_1E95837B0 = &ggl::VenueWallShadow::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1E95837B8 = 0;
          {
            ggl::VenueWallShadow::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E95837E8 = ggl::VenueWallShadow::WallShadow::reflection(void)::reflection;
          }
          qword_1E95837C0 = (uint64_t)&ggl::VenueWallShadow::pipelineDataMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E95837C8 = xmmword_1A28FCED0;
        }
      }
      ggl::VenueWallShadow::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueWallShadow::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::VenueWallShadowShader::typedReflection(v83);
      qword_1EB318CB8 = (uint64_t)&ggl::VenueWallShadowShader::typedReflection(void)::ref;
      {
        ggl::VenueWallShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9583858 = 0;
        qword_1E9583860 = (uint64_t)"";
        dword_1E9583868 = 0;
        qword_1E9583870 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9583878 = 4;
      }
      qword_1EB318CC0 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB318CC8 = 1;
      qword_1EB318CD0 = 0;
      unk_1EB318CD8 = 0;
      qword_1EB318CE0 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318CE8 = 0;
      {
        ggl::VenueWallShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E95837F8 = 0;
        qword_1E9583800 = (uint64_t)"view";
        dword_1E9583808 = 3;
        qword_1E9583810 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9583818 = xmmword_1A28FCEB0;
        qword_1E9583828 = 1;
        unk_1E9583830 = "wall";
        dword_1E9583838 = 3;
        qword_1E9583840 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineConstantWallBinding(void)::reflection;
        unk_1E9583848 = 2;
      }
      qword_1EB318CF0 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB318CF8 = 2;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::VenueWallShadow::MeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55BF68;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall27WallEndCapMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C948;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall24WallTopMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C900;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C8B8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Building8GradientEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B6B8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke36HorizontalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AE00;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke34VerticalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57ADB8;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF577328;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577250;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577208;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5771C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577178;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::VenueWall::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577130;
  a2[1] = v2;
  return result;
}

void md::BuildingRenderResources::BuildingRenderResources(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v680 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  bzero((void *)(a1 + 8), 0x2F0uLL);
  {
    operator new();
  }
  *(void *)(a1 + 832) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(void *)(a1 + 880) = 32;
  int v6 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *int v6 = 0;
  v6[1] = 0;
  *(void *)(a1 + 864) = v6;
  *(void *)(a1 + 872) = v6;
  uint64_t v7 = objc_msgSend(v5, "shaderLibrary", a1 + 784);
  *(_DWORD *)a1 = 1065353216;
  v669 = +[VKPlatform sharedPlatform];
  *(unsigned char *)(a1 + 768) = [v669 supportsBuildingStrokes];
  *(unsigned char *)(a1 + 769) = [v669 supports3DBuildingStrokes];
  *(unsigned char *)(a1 + 770) = [v669 supportsBuildingShadows];
  *(unsigned char *)(a1 + 771) = [v669 supports3DBuildings];
  *(unsigned char *)(a1 + 772) = [v669 supportsPerFragmentLighting];
  uint64_t v8 = *(void *)(v7 + 80);
  uint64_t v10 = *(void *)(v8 + 176);
  uint64_t v9 = *(void *)(v8 + 184);
  *(void *)&long long v678 = v10;
  *((void *)&v678 + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  int16x8_t v11 = (char *)operator new(0x198uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)int16x8_t v11 = &unk_1EF5880F8;
  long long v12 = a3[1];
  *(_OWORD *)v672 = *a3;
  *(_OWORD *)&v672[16] = v12;
  {
    if (v663)
    {
      {
        if (v663)
        {
          {
            {
              ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFlatStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B638 = 1;
          }
          ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9585308 = &ggl::BuildingFlatStroke::pipelineDataBuildingFlatStrokePipelineDeviceStructs(void)::ref;
          qword_1E9585310 = 0;
          {
            ggl::BuildingFlatStroke::pipelineDataBuildingFlatStrokePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9585340 = ggl::BuildingFlatStroke::Building::reflection(void)::reflection;
          }
          qword_1E9585318 = (uint64_t)&ggl::BuildingFlatStroke::pipelineDataBuildingFlatStrokePipelineConstantStructs(void)::ref;
          unk_1E9585320 = xmmword_1A28FCEB0;
        }
      }
      ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup::typedReflection(void)::ref;
      ggl::BuildingFlatStrokeShader::typedReflection(v663);
      qword_1EB319050 = (uint64_t)&ggl::BuildingFlatStrokeShader::typedReflection(void)::ref;
      {
        ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95853B0 = 0;
        qword_1E95853B8 = (uint64_t)"";
        dword_1E95853C0 = 0;
        qword_1E95853C8 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineAttributeBinding_0(void)::attr;
        unk_1E95853D0 = 2;
      }
      qword_1EB319058 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineAttributeStructBinding(void)::attr;
      unk_1EB319060 = 1;
      qword_1EB319068 = 0;
      unk_1EB319070 = 1;
      qword_1EB319078 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineDeviceStructBinding(void)::ref;
      unk_1EB319080 = 0;
      {
        ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineConstantStructBinding(void)::ref = 0;
        unk_1E9585350 = 0;
        qword_1E9585358 = (uint64_t)"view";
        dword_1E9585360 = 3;
        qword_1E9585368 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9585370 = xmmword_1A28FCEB0;
        qword_1E9585380 = 1;
        unk_1E9585388 = "building";
        dword_1E9585390 = 3;
        qword_1E9585398 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineConstantBuildingBinding(void)::reflection;
        unk_1E95853A0 = 6;
      }
      qword_1EB319088 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB319090 = 2;
    }
  }
  long long v13 = v678;
  if (*((void *)&v678 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((_DWORD *)v11 + 14) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 3) = &unk_1EF55B208;
  *((void *)v11 + 8) = &ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v11 + 72) = v13;
  if (*((void *)&v13 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v11[136] = 0;
  *(_OWORD *)(v11 + 140) = xmmword_1A28FC970;
  *(void *)(v11 + 156) = 0;
  *(void *)(v11 + 172) = 0;
  *(void *)(v11 + 164) = 0;
  v11[184] = 0;
  *(_OWORD *)(v11 + 188) = xmmword_1A28FC970;
  *(void *)(v11 + 204) = 0;
  *(void *)(v11 + 220) = 0;
  *(void *)(v11 + 212) = 0;
  v11[232] = 0;
  *(_OWORD *)(v11 + 236) = xmmword_1A28FC970;
  *(void *)(v11 + 252) = 0;
  *(void *)(v11 + 268) = 0;
  *(void *)(v11 + 260) = 0;
  long long v14 = *(_OWORD *)&v672[16];
  *(_OWORD *)(v11 + 280) = *(_OWORD *)v672;
  *(_OWORD *)(v11 + 296) = v14;
  v11[312] = 0;
  *((void *)v11 + 48) = 0;
  *((_OWORD *)v11 + 22) = 0u;
  *((_OWORD *)v11 + 23) = 0u;
  *((_OWORD *)v11 + 20) = 0u;
  *((_OWORD *)v11 + 21) = 0u;
  *((void *)v11 + 49) = 0x100000001;
  v11[400] = 0;
  v11[88] = 1;
  *(_WORD *)(v11 + 89) = v676;
  v11[91] = v677;
  *(_OWORD *)(v11 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v11 + 27) = 7;
  *((void *)v11 + 14) = 0;
  *((void *)v11 + 15) = 0;
  *((_DWORD *)v11 + 32) = 0;
  v11[132] = 15;
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v13 + 1) + 16))(*((void *)&v13 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
  }
  v11[329] = 0;
  int8x16_t v15 = vceqzq_s8(*(int8x16_t *)(v11 + 328));
  int16x8_t v16 = vmovl_high_s8(v15);
  int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
  v18.i64[0] = v17.u32[0];
  v18.i64[1] = v17.u32[1];
  int8x16_t v19 = v18;
  int16x8_t v20 = vmovl_s8(*(int8x8_t *)v15.i8);
  int32x4_t v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v18.i64[0] = v21.u32[0];
  v18.i64[1] = v21.u32[1];
  int8x16_t v22 = v18;
  int32x4_t v23 = vmovl_high_s16(v16);
  v18.i64[0] = v23.u32[0];
  v18.i64[1] = v23.u32[1];
  int8x16_t v24 = v18;
  int32x4_t v25 = vmovl_high_s16(v20);
  v18.i64[0] = v25.u32[0];
  v18.i64[1] = v25.u32[1];
  int8x16_t v26 = v18;
  v18.i64[0] = v17.u32[2];
  v18.i64[1] = v17.u32[3];
  int8x16_t v27 = v18;
  v18.i64[0] = v21.u32[2];
  v18.i64[1] = v21.u32[3];
  int8x16_t v28 = v18;
  v18.i64[0] = v23.u32[2];
  v18.i64[1] = v23.u32[3];
  int8x16_t v29 = v18;
  v18.i64[0] = v25.u32[2];
  v18.i64[1] = v25.u32[3];
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v18);
  int8x16_t v31 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v29);
  int8x16_t v32 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v28);
  int8x16_t v33 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v24);
  int8x16_t v34 = vceqzq_s8(*(int8x16_t *)(v11 + 344));
  int16x8_t v35 = vmovl_high_s8(v34);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v18.i64[0] = v36.u32[0];
  v18.i64[1] = v36.u32[1];
  int8x16_t v37 = v18;
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v34.i8);
  int32x4_t v39 = vmovl_s16(*(int16x4_t *)v38.i8);
  v18.i64[0] = v39.u32[0];
  v18.i64[1] = v39.u32[1];
  int8x16_t v40 = v18;
  int32x4_t v41 = vmovl_high_s16(v35);
  v18.i64[0] = v41.u32[0];
  v18.i64[1] = v41.u32[1];
  int8x16_t v42 = v18;
  int32x4_t v43 = vmovl_high_s16(v38);
  v18.i64[0] = v43.u32[0];
  v18.i64[1] = v43.u32[1];
  int8x16_t v44 = v18;
  v18.i64[0] = v36.u32[2];
  v18.i64[1] = v36.u32[3];
  int8x16_t v45 = v18;
  v18.i64[0] = v39.u32[2];
  v18.i64[1] = v39.u32[3];
  int8x16_t v46 = v18;
  v18.i64[0] = v41.u32[2];
  v18.i64[1] = v41.u32[3];
  int8x16_t v47 = v18;
  v18.i64[0] = v43.u32[2];
  v18.i64[1] = v43.u32[3];
  int8x16_t v48 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v47);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v37), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v19));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v40), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v42), v33);
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v44), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v26));
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v45), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v27));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v46), v32);
  int8x16_t v55 = vorrq_s8(v48, v31);
  int8x16_t v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v18), v30);
  int8x16_t v57 = vceqzq_s8(*(int8x16_t *)(v11 + 360));
  int16x8_t v58 = vmovl_high_s8(v57);
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
  v18.i64[0] = v59.i32[0];
  v18.i64[1] = v59.i32[1];
  int8x16_t v60 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v18);
  int8x16_t v61 = vceqzq_s8(*(int8x16_t *)(v11 + 376));
  int16x8_t v62 = vmovl_high_s8(v61);
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v62.i8);
  v18.i64[0] = v63.i32[0];
  v18.i64[1] = v63.i32[1];
  int8x16_t v64 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v18), v60), v49);
  int16x8_t v65 = vmovl_s8(*(int8x8_t *)v57.i8);
  int32x4_t v66 = vmovl_s16(*(int16x4_t *)v65.i8);
  v18.i64[0] = v66.i32[0];
  v18.i64[1] = v66.i32[1];
  int8x16_t v67 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v18);
  int16x8_t v68 = vmovl_s8(*(int8x8_t *)v61.i8);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v18.i64[0] = v69.i32[0];
  v18.i64[1] = v69.i32[1];
  int8x16_t v70 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v18), v67), v50);
  int32x4_t v71 = vmovl_high_s16(v58);
  v18.i64[0] = v71.i32[0];
  v18.i64[1] = v71.i32[1];
  int8x16_t v72 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v18);
  int32x4_t v73 = vmovl_high_s16(v62);
  v18.i64[0] = v73.i32[0];
  v18.i64[1] = v73.i32[1];
  int8x16_t v74 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v18), v72), v51);
  int32x4_t v75 = vmovl_high_s16(v65);
  v18.i64[0] = v75.i32[0];
  v18.i64[1] = v75.i32[1];
  int8x16_t v76 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v18);
  int32x4_t v77 = vmovl_high_s16(v68);
  v18.i64[0] = v77.i32[0];
  v18.i64[1] = v77.i32[1];
  int8x16_t v78 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v18), v76), v52);
  v18.i64[0] = v59.i32[2];
  v18.i64[1] = v59.i32[3];
  int8x16_t v79 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v18);
  v18.i64[0] = v63.i32[2];
  v18.i64[1] = v63.i32[3];
  int8x16_t v80 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v18), v79), v53);
  v18.i64[0] = v66.i32[2];
  v18.i64[1] = v66.i32[3];
  int8x16_t v81 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v18);
  v18.i64[0] = v69.i32[2];
  v18.i64[1] = v69.i32[3];
  int8x16_t v82 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v18), v81), v54);
  v18.i64[0] = v71.i32[2];
  v18.i64[1] = v71.i32[3];
  int8x16_t v83 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v18);
  v18.i64[0] = v73.i32[2];
  v18.i64[1] = v73.i32[3];
  int8x16_t v84 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v18), v83), v55);
  v18.i64[0] = v75.i32[2];
  v18.i64[1] = v75.i32[3];
  int8x16_t v85 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v18);
  v18.i64[0] = v77.i32[2];
  v18.i64[1] = v77.i32[3];
  *((void *)v11 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v70, v64), vorrq_s8(v78, v74)), (int64x2_t)vorrq_s8(vorrq_s8(v82, v80), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v18), v85), v56), v84))));
  *((void *)v11 + 3) = &unk_1EF55F148;
  v11[312] = 1;
  long long v86 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v11 + 24;
  *(void *)(a1 + 32) = v11;
  if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
  if (*((void *)&v678 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v678 + 1) + 16))(*((void *)&v678 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v678 + 1));
  }
  uint64_t v87 = *(void *)(v7 + 80);
  uint64_t v89 = *(void *)(v87 + 152);
  long long v88 = *(std::__shared_weak_count **)(v87 + 160);
  uint64_t v674 = v89;
  v675 = v88;
  if (v88) {
    atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  id v90 = operator new(0x198uLL);
  v90[1] = 0;
  v90[2] = 0;
  *id v90 = &unk_1EF583698;
  long long v91 = a3[1];
  long long v678 = *a3;
  long long v679 = v91;
  uint64_t v92 = ggl::BuildingFlat::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v90 + 3), &v674, (uint64_t)v672, &v678);
  int v93 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v92;
  *(void *)(a1 + 48) = v90;
  if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
  }
  unint64_t v94 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
  }
  uint64_t v95 = *(void *)(v7 + 80);
  uint64_t v97 = *(void *)(v95 + 152);
  uint64_t v96 = *(std::__shared_weak_count **)(v95 + 160);
  uint64_t v674 = v97;
  v675 = v96;
  if (v96) {
    atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  uint64_t v98 = operator new(0x198uLL);
  v98[1] = 0;
  v98[2] = 0;
  *uint64_t v98 = &unk_1EF583698;
  long long v99 = a3[1];
  long long v678 = *a3;
  long long v679 = v99;
  uint64_t v100 = ggl::BuildingFlat::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v98 + 3), &v674, (uint64_t)v672, &v678);
  int8x16_t v101 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v100;
  *(void *)(a1 + 64) = v98;
  if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
  uint64_t v102 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }
  uint64_t v103 = *(void *)(v7 + 80);
  uint64_t v105 = *(void *)(v103 + 128);
  uint64_t v104 = *(void *)(v103 + 136);
  *(void *)&long long v678 = v105;
  *((void *)&v678 + 1) = v104;
  if (v104) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v104 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v674 = 0;
  uint64_t v106 = (char *)operator new(0x198uLL);
  *((void *)v106 + 1) = 0;
  *((void *)v106 + 2) = 0;
  *(void *)uint64_t v106 = &unk_1EF5881D8;
  long long v107 = a3[1];
  *(_OWORD *)v672 = *a3;
  *(_OWORD *)&v672[16] = v107;
  {
    if (v664)
    {
      {
        if (v664)
        {
          {
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B578 = 1;
          }
          ggl::BuildingFacadeDepth::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9585638 = &ggl::BuildingFacadeDepth::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1E9585640 = 0;
          {
            ggl::BuildingFacadeDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9585670 = ggl::Building::Scale::reflection(void)::reflection;
          }
          qword_1E9585648 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1E9585650 = xmmword_1A28FCED0;
        }
      }
      ggl::BuildingFacadeDepth::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingFacadeDepth::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingFacadeDepthShader::typedReflection(v664);
      qword_1EB319100 = (uint64_t)&ggl::BuildingFacadeDepthShader::typedReflection(void)::ref;
      {
        ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95856E0 = 0;
        qword_1E95856E8 = (uint64_t)"";
        dword_1E95856F0 = 0;
        qword_1E95856F8 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E9585700 = 2;
      }
      qword_1EB319108 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1EB319110 = 1;
      qword_1EB319118 = 0;
      unk_1EB319120 = 0;
      qword_1EB319128 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB319130 = 0;
      {
        ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9585680 = 0;
        qword_1E9585688 = (uint64_t)"view";
        dword_1E9585690 = 3;
        qword_1E9585698 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E95856A0 = xmmword_1A28FCEB0;
        qword_1E95856B0 = 1;
        unk_1E95856B8 = "scale";
        dword_1E95856C0 = 3;
        qword_1E95856C8 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1E95856D0 = 4;
      }
      qword_1EB319138 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1EB319140 = 2;
    }
  }
  long long v108 = v678;
  if (*((void *)&v678 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v106 + 4) = 0;
  *((void *)v106 + 5) = 0;
  *((_DWORD *)v106 + 14) = 0;
  *((void *)v106 + 6) = 0;
  *((void *)v106 + 3) = &unk_1EF55B208;
  *((void *)v106 + 8) = &ggl::BuildingFacadeDepth::BuildingPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v106 + 72) = v108;
  if (*((void *)&v108 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v108 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v106[136] = 0;
  *(_OWORD *)(v106 + 140) = xmmword_1A28FC970;
  *(void *)(v106 + 156) = 0;
  *(void *)(v106 + 172) = 0;
  *(void *)(v106 + 164) = 0;
  v106[184] = 0;
  *(_OWORD *)(v106 + 188) = xmmword_1A28FC970;
  *(void *)(v106 + 204) = 0;
  *(void *)(v106 + 220) = 0;
  *(void *)(v106 + 212) = 0;
  v106[232] = 0;
  *(_OWORD *)(v106 + 236) = xmmword_1A28FC970;
  *(void *)(v106 + 252) = 0;
  *(void *)(v106 + 268) = 0;
  *(void *)(v106 + 260) = 0;
  long long v109 = *(_OWORD *)&v672[16];
  *(_OWORD *)(v106 + 280) = *(_OWORD *)v672;
  *(_OWORD *)(v106 + 296) = v109;
  v106[312] = 0;
  *((void *)v106 + 48) = 0;
  *((_OWORD *)v106 + 22) = 0u;
  *((_OWORD *)v106 + 23) = 0u;
  *((_OWORD *)v106 + 20) = 0u;
  *((_OWORD *)v106 + 21) = 0u;
  *((void *)v106 + 49) = 0x100000001;
  v106[400] = 0;
  v106[88] = 0;
  *(_WORD *)(v106 + 89) = v670;
  v106[91] = v671;
  *(_OWORD *)(v106 + 92) = xmmword_1A28FC970;
  *(void *)(v106 + 108) = v674;
  *(void *)(v106 + 124) = 0;
  *(void *)(v106 + 116) = 0;
  v106[132] = 0;
  if (*((void *)&v108 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v108 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v108 + 1) + 16))(*((void *)&v108 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v108 + 1));
  }
  v106[329] = 0;
  int8x16_t v110 = vceqzq_s8(*(int8x16_t *)(v106 + 328));
  int16x8_t v111 = vmovl_high_s8(v110);
  int32x4_t v112 = vmovl_s16(*(int16x4_t *)v111.i8);
  v113.i64[0] = v112.u32[0];
  v113.i64[1] = v112.u32[1];
  int8x16_t v114 = v113;
  int16x8_t v115 = vmovl_s8(*(int8x8_t *)v110.i8);
  int32x4_t v116 = vmovl_s16(*(int16x4_t *)v115.i8);
  v113.i64[0] = v116.u32[0];
  v113.i64[1] = v116.u32[1];
  int8x16_t v117 = v113;
  int32x4_t v118 = vmovl_high_s16(v111);
  v113.i64[0] = v118.u32[0];
  v113.i64[1] = v118.u32[1];
  int8x16_t v119 = v113;
  int32x4_t v120 = vmovl_high_s16(v115);
  v113.i64[0] = v120.u32[0];
  v113.i64[1] = v120.u32[1];
  int8x16_t v121 = v113;
  v113.i64[0] = v112.u32[2];
  v113.i64[1] = v112.u32[3];
  int8x16_t v122 = v113;
  v113.i64[0] = v116.u32[2];
  v113.i64[1] = v116.u32[3];
  int8x16_t v123 = v113;
  v113.i64[0] = v118.u32[2];
  v113.i64[1] = v118.u32[3];
  int8x16_t v124 = v113;
  v113.i64[0] = v120.u32[2];
  v113.i64[1] = v120.u32[3];
  int8x16_t v125 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v113);
  int8x16_t v126 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v124);
  int8x16_t v127 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v123);
  int8x16_t v128 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v119);
  int8x16_t v129 = vceqzq_s8(*(int8x16_t *)(v106 + 344));
  int16x8_t v130 = vmovl_high_s8(v129);
  int32x4_t v131 = vmovl_s16(*(int16x4_t *)v130.i8);
  v113.i64[0] = v131.u32[0];
  v113.i64[1] = v131.u32[1];
  int8x16_t v132 = v113;
  int16x8_t v133 = vmovl_s8(*(int8x8_t *)v129.i8);
  int32x4_t v134 = vmovl_s16(*(int16x4_t *)v133.i8);
  v113.i64[0] = v134.u32[0];
  v113.i64[1] = v134.u32[1];
  int8x16_t v135 = v113;
  int32x4_t v136 = vmovl_high_s16(v130);
  v113.i64[0] = v136.u32[0];
  v113.i64[1] = v136.u32[1];
  int8x16_t v137 = v113;
  int32x4_t v138 = vmovl_high_s16(v133);
  v113.i64[0] = v138.u32[0];
  v113.i64[1] = v138.u32[1];
  int8x16_t v139 = v113;
  v113.i64[0] = v131.u32[2];
  v113.i64[1] = v131.u32[3];
  int8x16_t v140 = v113;
  v113.i64[0] = v134.u32[2];
  v113.i64[1] = v134.u32[3];
  int8x16_t v141 = v113;
  v113.i64[0] = v136.u32[2];
  v113.i64[1] = v136.u32[3];
  int8x16_t v142 = v113;
  v113.i64[0] = v138.u32[2];
  v113.i64[1] = v138.u32[3];
  int8x16_t v143 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v142);
  int8x16_t v144 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v132), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v114));
  int8x16_t v145 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v135), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v117));
  int8x16_t v146 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v137), v128);
  int8x16_t v147 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v139), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v121));
  int8x16_t v148 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v140), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v122));
  int8x16_t v149 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v141), v127);
  int8x16_t v150 = vorrq_s8(v143, v126);
  int8x16_t v151 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v113), v125);
  int8x16_t v152 = vceqzq_s8(*(int8x16_t *)(v106 + 360));
  int16x8_t v153 = vmovl_s8(*(int8x8_t *)v152.i8);
  int32x4_t v154 = vmovl_high_s16(v153);
  int16x8_t v155 = vmovl_high_s8(v152);
  int32x4_t v156 = vmovl_high_s16(v155);
  int32x4_t v157 = vmovl_s16(*(int16x4_t *)v153.i8);
  int32x4_t v158 = vmovl_s16(*(int16x4_t *)v155.i8);
  v113.i64[0] = v157.i32[0];
  v113.i64[1] = v157.i32[1];
  int8x16_t v159 = v113;
  v113.i64[0] = v158.i32[0];
  v113.i64[1] = v158.i32[1];
  int8x16_t v160 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v113);
  int8x16_t v161 = vceqzq_s8(*(int8x16_t *)(v106 + 376));
  int16x8_t v162 = vmovl_high_s8(v161);
  int32x4_t v163 = vmovl_s16(*(int16x4_t *)v162.i8);
  v113.i64[0] = v163.i32[0];
  v113.i64[1] = v163.i32[1];
  int16x8_t v164 = vmovl_s8(*(int8x8_t *)v161.i8);
  int32x4_t v165 = vmovl_s16(*(int16x4_t *)v164.i8);
  int8x16_t v166 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v113), v160), v144);
  v113.i64[0] = v165.i32[0];
  v113.i64[1] = v165.i32[1];
  int8x16_t v167 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v113), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v159));
  v113.i64[0] = v156.i32[0];
  v113.i64[1] = v156.i32[1];
  int8x16_t v168 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v113);
  int32x4_t v169 = vmovl_high_s16(v162);
  int8x16_t v170 = vorrq_s8(v167, v145);
  v113.i64[0] = v169.i32[0];
  v113.i64[1] = v169.i32[1];
  int8x16_t v171 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v113), v168);
  v113.i64[0] = v154.i32[0];
  v113.i64[1] = v154.i32[1];
  int8x16_t v172 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v113);
  int32x4_t v173 = vmovl_high_s16(v164);
  v113.i64[0] = v173.i32[0];
  v113.i64[1] = v173.i32[1];
  int8x16_t v174 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v113), v172), v147);
  v113.i64[0] = v158.i32[2];
  v113.i64[1] = v158.i32[3];
  int8x16_t v175 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v113);
  v113.i64[0] = v163.i32[2];
  v113.i64[1] = v163.i32[3];
  int8x16_t v176 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v113), v175), v148);
  v113.i64[0] = v157.i32[2];
  v113.i64[1] = v157.i32[3];
  int8x16_t v177 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v113);
  v113.i64[0] = v165.i32[2];
  v113.i64[1] = v165.i32[3];
  int8x16_t v178 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v113), v177), v149);
  v113.i64[0] = v156.i32[2];
  v113.i64[1] = v156.i32[3];
  int8x16_t v179 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v113);
  v113.i64[0] = v169.i32[2];
  v113.i64[1] = v169.i32[3];
  int8x16_t v180 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v113), v179), v150);
  v113.i64[0] = v154.i32[2];
  v113.i64[1] = v154.i32[3];
  int8x16_t v181 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v113);
  v113.i64[0] = v173.i32[2];
  v113.i64[1] = v173.i32[3];
  *((void *)v106 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v170, v166), vorrq_s8(v174, vorrq_s8(v171, v146))), (int64x2_t)vorrq_s8(vorrq_s8(v178, v176), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v113), v181), v151), v180))));
  *((void *)v106 + 3) = &unk_1EF55F310;
  v106[312] = 1;
  uint64_t v182 = *(std::__shared_weak_count **)(a1 + 80);
  *(void *)(a1 + 72) = v106 + 24;
  *(void *)(a1 + 80) = v106;
  if (v182 && !atomic_fetch_add(&v182->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
  }
  int16x8_t v183 = (std::__shared_weak_count *)*((void *)&v678 + 1);
  if (*((void *)&v678 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
  }
  uint64_t v184 = *(void *)(v7 + 80);
  uint64_t v186 = *(void *)(v184 + 248);
  uint64_t v185 = *(void *)(v184 + 256);
  *(void *)&long long v678 = v186;
  *((void *)&v678 + 1) = v185;
  if (v185) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v185 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v674 = 0;
  uint64_t v187 = (char *)operator new(0x198uLL);
  *((void *)v187 + 1) = 0;
  *((void *)v187 + 2) = 0;
  *(void *)uint64_t v187 = &unk_1EF585420;
  long long v188 = a3[1];
  *(_OWORD *)v672 = *a3;
  *(_OWORD *)&v672[16] = v188;
  {
    if (v665)
    {
      {
        if (v665)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::BuildingTopDepth::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1E9583890 = &ggl::BuildingTopDepth::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1E9583898 = 0;
          {
            ggl::BuildingTopDepth::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E95838C8 = ggl::Building::Scale::reflection(void)::reflection;
          }
          qword_1E95838A0 = (uint64_t)&ggl::BuildingTopDepth::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E95838A8 = xmmword_1A28FCED0;
        }
      }
      ggl::BuildingTopDepth::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingTopDepth::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingTopDepthShader::typedReflection(v665);
      qword_1EB318D08 = (uint64_t)&ggl::BuildingTopDepthShader::typedReflection(void)::ref;
      {
        ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9583938 = 0;
        qword_1E9583940 = (uint64_t)"";
        dword_1E9583948 = 0;
        qword_1E9583950 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9583958 = 1;
      }
      qword_1EB318D10 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB318D18 = 1;
      qword_1EB318D20 = 0;
      unk_1EB318D28 = 0;
      qword_1EB318D30 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318D38 = 0;
      {
        ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E95838D8 = 0;
        qword_1E95838E0 = (uint64_t)"view";
        dword_1E95838E8 = 3;
        qword_1E95838F0 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E95838F8 = xmmword_1A28FCEB0;
        qword_1E9583908 = 1;
        unk_1E9583910 = "scale";
        dword_1E9583918 = 3;
        qword_1E9583920 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        unk_1E9583928 = 4;
      }
      qword_1EB318D40 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB318D48 = 2;
    }
  }
  long long v189 = v678;
  if (*((void *)&v678 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v187 + 4) = 0;
  *((void *)v187 + 5) = 0;
  *((_DWORD *)v187 + 14) = 0;
  *((void *)v187 + 6) = 0;
  *((void *)v187 + 3) = &unk_1EF55B208;
  *((void *)v187 + 8) = &ggl::BuildingTopDepth::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v187 + 72) = v189;
  if (*((void *)&v189 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v189 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v187[136] = 0;
  *(_OWORD *)(v187 + 140) = xmmword_1A28FC970;
  *(void *)(v187 + 156) = 0;
  *(void *)(v187 + 172) = 0;
  *(void *)(v187 + 164) = 0;
  v187[184] = 0;
  *(_OWORD *)(v187 + 188) = xmmword_1A28FC970;
  *(void *)(v187 + 204) = 0;
  *(void *)(v187 + 220) = 0;
  *(void *)(v187 + 212) = 0;
  v187[232] = 0;
  *(_OWORD *)(v187 + 236) = xmmword_1A28FC970;
  *(void *)(v187 + 252) = 0;
  *(void *)(v187 + 268) = 0;
  *(void *)(v187 + 260) = 0;
  long long v190 = *(_OWORD *)&v672[16];
  *(_OWORD *)(v187 + 280) = *(_OWORD *)v672;
  *(_OWORD *)(v187 + 296) = v190;
  v187[312] = 0;
  *((void *)v187 + 48) = 0;
  *((_OWORD *)v187 + 22) = 0u;
  *((_OWORD *)v187 + 23) = 0u;
  *((_OWORD *)v187 + 20) = 0u;
  *((_OWORD *)v187 + 21) = 0u;
  *((void *)v187 + 49) = 0x100000001;
  v187[400] = 0;
  v187[88] = 0;
  *(_WORD *)(v187 + 89) = v670;
  v187[91] = v671;
  *(_OWORD *)(v187 + 92) = xmmword_1A28FC970;
  *(void *)(v187 + 108) = v674;
  *(void *)(v187 + 124) = 0;
  *(void *)(v187 + 116) = 0;
  v187[132] = 0;
  if (*((void *)&v189 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v189 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v189 + 1) + 16))(*((void *)&v189 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v189 + 1));
  }
  v187[329] = 0;
  int8x16_t v191 = vceqzq_s8(*(int8x16_t *)(v187 + 328));
  int16x8_t v192 = vmovl_high_s8(v191);
  int32x4_t v193 = vmovl_s16(*(int16x4_t *)v192.i8);
  v194.i64[0] = v193.u32[0];
  v194.i64[1] = v193.u32[1];
  int8x16_t v195 = v194;
  int16x8_t v196 = vmovl_s8(*(int8x8_t *)v191.i8);
  int32x4_t v197 = vmovl_s16(*(int16x4_t *)v196.i8);
  v194.i64[0] = v197.u32[0];
  v194.i64[1] = v197.u32[1];
  int8x16_t v198 = v194;
  int32x4_t v199 = vmovl_high_s16(v192);
  v194.i64[0] = v199.u32[0];
  v194.i64[1] = v199.u32[1];
  int8x16_t v200 = v194;
  int32x4_t v201 = vmovl_high_s16(v196);
  v194.i64[0] = v201.u32[0];
  v194.i64[1] = v201.u32[1];
  int8x16_t v202 = v194;
  v194.i64[0] = v193.u32[2];
  v194.i64[1] = v193.u32[3];
  int8x16_t v203 = v194;
  v194.i64[0] = v197.u32[2];
  v194.i64[1] = v197.u32[3];
  int8x16_t v204 = v194;
  v194.i64[0] = v199.u32[2];
  v194.i64[1] = v199.u32[3];
  int8x16_t v205 = v194;
  v194.i64[0] = v201.u32[2];
  v194.i64[1] = v201.u32[3];
  int8x16_t v206 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v194);
  int8x16_t v207 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v205);
  int8x16_t v208 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v204);
  int8x16_t v209 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v200);
  int8x16_t v210 = vceqzq_s8(*(int8x16_t *)(v187 + 344));
  int16x8_t v211 = vmovl_high_s8(v210);
  int32x4_t v212 = vmovl_s16(*(int16x4_t *)v211.i8);
  v194.i64[0] = v212.u32[0];
  v194.i64[1] = v212.u32[1];
  int8x16_t v213 = v194;
  int16x8_t v214 = vmovl_s8(*(int8x8_t *)v210.i8);
  int32x4_t v215 = vmovl_s16(*(int16x4_t *)v214.i8);
  v194.i64[0] = v215.u32[0];
  v194.i64[1] = v215.u32[1];
  int8x16_t v216 = v194;
  int32x4_t v217 = vmovl_high_s16(v211);
  v194.i64[0] = v217.u32[0];
  v194.i64[1] = v217.u32[1];
  int8x16_t v218 = v194;
  int32x4_t v219 = vmovl_high_s16(v214);
  v194.i64[0] = v219.u32[0];
  v194.i64[1] = v219.u32[1];
  int8x16_t v220 = v194;
  v194.i64[0] = v212.u32[2];
  v194.i64[1] = v212.u32[3];
  int8x16_t v221 = v194;
  v194.i64[0] = v215.u32[2];
  v194.i64[1] = v215.u32[3];
  int8x16_t v222 = v194;
  v194.i64[0] = v217.u32[2];
  v194.i64[1] = v217.u32[3];
  int8x16_t v223 = v194;
  v194.i64[0] = v219.u32[2];
  v194.i64[1] = v219.u32[3];
  int8x16_t v224 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v223);
  int8x16_t v225 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v213), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v195));
  int8x16_t v226 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v216), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v198));
  int8x16_t v227 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v218), v209);
  int8x16_t v228 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v220), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v202));
  int8x16_t v229 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v221), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v203));
  int8x16_t v230 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v222), v208);
  int8x16_t v231 = vorrq_s8(v224, v207);
  int8x16_t v232 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v194), v206);
  int8x16_t v233 = vceqzq_s8(*(int8x16_t *)(v187 + 360));
  int16x8_t v234 = vmovl_s8(*(int8x8_t *)v233.i8);
  int32x4_t v235 = vmovl_high_s16(v234);
  int16x8_t v236 = vmovl_high_s8(v233);
  int32x4_t v237 = vmovl_high_s16(v236);
  int32x4_t v238 = vmovl_s16(*(int16x4_t *)v234.i8);
  int32x4_t v239 = vmovl_s16(*(int16x4_t *)v236.i8);
  v194.i64[0] = v238.i32[0];
  v194.i64[1] = v238.i32[1];
  int8x16_t v240 = v194;
  v194.i64[0] = v239.i32[0];
  v194.i64[1] = v239.i32[1];
  int8x16_t v241 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v194);
  int8x16_t v242 = vceqzq_s8(*(int8x16_t *)(v187 + 376));
  int16x8_t v243 = vmovl_high_s8(v242);
  int32x4_t v244 = vmovl_s16(*(int16x4_t *)v243.i8);
  v194.i64[0] = v244.i32[0];
  v194.i64[1] = v244.i32[1];
  int16x8_t v245 = vmovl_s8(*(int8x8_t *)v242.i8);
  int32x4_t v246 = vmovl_s16(*(int16x4_t *)v245.i8);
  int8x16_t v247 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v194), v241), v225);
  v194.i64[0] = v246.i32[0];
  v194.i64[1] = v246.i32[1];
  int8x16_t v248 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v194), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v240));
  v194.i64[0] = v237.i32[0];
  v194.i64[1] = v237.i32[1];
  int8x16_t v249 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v194);
  int32x4_t v250 = vmovl_high_s16(v243);
  int8x16_t v251 = vorrq_s8(v248, v226);
  v194.i64[0] = v250.i32[0];
  v194.i64[1] = v250.i32[1];
  int8x16_t v252 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v194), v249);
  v194.i64[0] = v235.i32[0];
  v194.i64[1] = v235.i32[1];
  int8x16_t v253 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v194);
  int32x4_t v254 = vmovl_high_s16(v245);
  v194.i64[0] = v254.i32[0];
  v194.i64[1] = v254.i32[1];
  int8x16_t v255 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v194), v253), v228);
  v194.i64[0] = v239.i32[2];
  v194.i64[1] = v239.i32[3];
  int8x16_t v256 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v194);
  v194.i64[0] = v244.i32[2];
  v194.i64[1] = v244.i32[3];
  int8x16_t v257 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v194), v256), v229);
  v194.i64[0] = v238.i32[2];
  v194.i64[1] = v238.i32[3];
  int8x16_t v258 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v194);
  v194.i64[0] = v246.i32[2];
  v194.i64[1] = v246.i32[3];
  int8x16_t v259 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v194), v258), v230);
  v194.i64[0] = v237.i32[2];
  v194.i64[1] = v237.i32[3];
  int8x16_t v260 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v194);
  v194.i64[0] = v250.i32[2];
  v194.i64[1] = v250.i32[3];
  int8x16_t v261 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v194), v260), v231);
  v194.i64[0] = v235.i32[2];
  v194.i64[1] = v235.i32[3];
  int8x16_t v262 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v194);
  v194.i64[0] = v254.i32[2];
  v194.i64[1] = v254.i32[3];
  *((void *)v187 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v251, v247), vorrq_s8(v255, vorrq_s8(v252, v227))), (int64x2_t)vorrq_s8(vorrq_s8(v259, v257), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v194), v262), v232), v261))));
  *((void *)v187 + 3) = &unk_1EF55D0F8;
  v187[312] = 1;
  uint64_t v263 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v187 + 24;
  *(void *)(a1 + 96) = v187;
  if (v263 && !atomic_fetch_add(&v263->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
    std::__shared_weak_count::__release_weak(v263);
  }
  uint64_t v264 = (std::__shared_weak_count *)*((void *)&v678 + 1);
  if (*((void *)&v678 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
    std::__shared_weak_count::__release_weak(v264);
  }
  uint64_t v265 = *(void *)(v7 + 80);
  uint64_t v267 = *(void *)(v265 + 200);
  uint64_t v266 = *(void *)(v265 + 208);
  *(void *)&long long v678 = v267;
  *((void *)&v678 + 1) = v266;
  if (v266) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v266 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v674 = 0;
  char v268 = (char *)operator new(0x198uLL);
  *((void *)v268 + 1) = 0;
  *((void *)v268 + 2) = 0;
  *(void *)char v268 = &unk_1EF5887C0;
  long long v269 = a3[1];
  *(_OWORD *)v672 = *a3;
  *(_OWORD *)&v672[16] = v269;
  {
    if (v666)
    {
      {
        if (v666)
        {
          {
            {
              ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingPointyRoof::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B660 = 1;
          }
          ggl::BuildingPointyRoofDepth::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r;
          unk_1E95866F0 = &ggl::BuildingPointyRoofDepth::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1E95866F8 = 0;
          {
            ggl::BuildingPointyRoofDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9586728 = ggl::Building::Scale::reflection(void)::reflection;
          }
          qword_1E9586700 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E9586708 = xmmword_1A28FCED0;
        }
      }
      ggl::BuildingPointyRoofDepth::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingPointyRoofDepth::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingPointyRoofDepthShader::typedReflection(v666);
      qword_1EB3194F8 = (uint64_t)&ggl::BuildingPointyRoofDepthShader::typedReflection(void)::ref;
      {
        ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9586798 = 0;
        qword_1E95867A0 = (uint64_t)"";
        dword_1E95867A8 = 0;
        qword_1E95867B0 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E95867B8 = 2;
      }
      qword_1EB319500 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319508 = 1;
      qword_1EB319510 = 0;
      unk_1EB319518 = 0;
      qword_1EB319520 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB319528 = 0;
      {
        ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9586738 = 0;
        qword_1E9586740 = (uint64_t)"view";
        dword_1E9586748 = 3;
        qword_1E9586750 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E9586758 = xmmword_1A28FCEB0;
        qword_1E9586768 = 1;
        unk_1E9586770 = "scale";
        dword_1E9586778 = 3;
        qword_1E9586780 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1E9586788 = 4;
      }
      qword_1EB319530 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1EB319538 = 2;
    }
  }
  long long v270 = v678;
  if (*((void *)&v678 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v268 + 4) = 0;
  *((void *)v268 + 5) = 0;
  *((_DWORD *)v268 + 14) = 0;
  *((void *)v268 + 6) = 0;
  *((void *)v268 + 3) = &unk_1EF55B208;
  *((void *)v268 + 8) = &ggl::BuildingPointyRoofDepth::BuildingPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v268 + 72) = v270;
  if (*((void *)&v270 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v268[136] = 0;
  *(_OWORD *)(v268 + 140) = xmmword_1A28FC970;
  *(void *)(v268 + 156) = 0;
  *(void *)(v268 + 172) = 0;
  *(void *)(v268 + 164) = 0;
  v268[184] = 0;
  *(_OWORD *)(v268 + 188) = xmmword_1A28FC970;
  *(void *)(v268 + 204) = 0;
  *(void *)(v268 + 220) = 0;
  *(void *)(v268 + 212) = 0;
  v268[232] = 0;
  *(_OWORD *)(v268 + 236) = xmmword_1A28FC970;
  *(void *)(v268 + 252) = 0;
  *(void *)(v268 + 268) = 0;
  *(void *)(v268 + 260) = 0;
  long long v271 = *(_OWORD *)&v672[16];
  *(_OWORD *)(v268 + 280) = *(_OWORD *)v672;
  *(_OWORD *)(v268 + 296) = v271;
  v268[312] = 0;
  *((void *)v268 + 48) = 0;
  *((_OWORD *)v268 + 22) = 0u;
  *((_OWORD *)v268 + 23) = 0u;
  *((_OWORD *)v268 + 20) = 0u;
  *((_OWORD *)v268 + 21) = 0u;
  *((void *)v268 + 49) = 0x100000001;
  v268[400] = 0;
  v268[88] = 0;
  *(_WORD *)(v268 + 89) = v670;
  v268[91] = v671;
  *(_OWORD *)(v268 + 92) = xmmword_1A28FC970;
  *(void *)(v268 + 108) = v674;
  *(void *)(v268 + 124) = 0;
  *(void *)(v268 + 116) = 0;
  v268[132] = 0;
  if (*((void *)&v270 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v270 + 1) + 16))(*((void *)&v270 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v270 + 1));
  }
  v268[329] = 0;
  int8x16_t v272 = vceqzq_s8(*(int8x16_t *)(v268 + 328));
  int16x8_t v273 = vmovl_high_s8(v272);
  int32x4_t v274 = vmovl_s16(*(int16x4_t *)v273.i8);
  v275.i64[0] = v274.u32[0];
  v275.i64[1] = v274.u32[1];
  int8x16_t v276 = v275;
  int16x8_t v277 = vmovl_s8(*(int8x8_t *)v272.i8);
  int32x4_t v278 = vmovl_s16(*(int16x4_t *)v277.i8);
  v275.i64[0] = v278.u32[0];
  v275.i64[1] = v278.u32[1];
  int8x16_t v279 = v275;
  int32x4_t v280 = vmovl_high_s16(v273);
  v275.i64[0] = v280.u32[0];
  v275.i64[1] = v280.u32[1];
  int8x16_t v281 = v275;
  int32x4_t v282 = vmovl_high_s16(v277);
  v275.i64[0] = v282.u32[0];
  v275.i64[1] = v282.u32[1];
  int8x16_t v283 = v275;
  v275.i64[0] = v274.u32[2];
  v275.i64[1] = v274.u32[3];
  int8x16_t v284 = v275;
  v275.i64[0] = v278.u32[2];
  v275.i64[1] = v278.u32[3];
  int8x16_t v285 = v275;
  v275.i64[0] = v280.u32[2];
  v275.i64[1] = v280.u32[3];
  int8x16_t v286 = v275;
  v275.i64[0] = v282.u32[2];
  v275.i64[1] = v282.u32[3];
  int8x16_t v287 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v275);
  int8x16_t v288 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v286);
  int8x16_t v289 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v285);
  int8x16_t v290 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v281);
  int8x16_t v291 = vceqzq_s8(*(int8x16_t *)(v268 + 344));
  int16x8_t v292 = vmovl_high_s8(v291);
  int32x4_t v293 = vmovl_s16(*(int16x4_t *)v292.i8);
  v275.i64[0] = v293.u32[0];
  v275.i64[1] = v293.u32[1];
  int8x16_t v294 = v275;
  int16x8_t v295 = vmovl_s8(*(int8x8_t *)v291.i8);
  int32x4_t v296 = vmovl_s16(*(int16x4_t *)v295.i8);
  v275.i64[0] = v296.u32[0];
  v275.i64[1] = v296.u32[1];
  int8x16_t v297 = v275;
  int32x4_t v298 = vmovl_high_s16(v292);
  v275.i64[0] = v298.u32[0];
  v275.i64[1] = v298.u32[1];
  int8x16_t v299 = v275;
  int32x4_t v300 = vmovl_high_s16(v295);
  v275.i64[0] = v300.u32[0];
  v275.i64[1] = v300.u32[1];
  int8x16_t v301 = v275;
  v275.i64[0] = v293.u32[2];
  v275.i64[1] = v293.u32[3];
  int8x16_t v302 = v275;
  v275.i64[0] = v296.u32[2];
  v275.i64[1] = v296.u32[3];
  int8x16_t v303 = v275;
  v275.i64[0] = v298.u32[2];
  v275.i64[1] = v298.u32[3];
  int8x16_t v304 = v275;
  v275.i64[0] = v300.u32[2];
  v275.i64[1] = v300.u32[3];
  int8x16_t v305 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v304);
  int8x16_t v306 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v294), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v276));
  int8x16_t v307 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v297), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v279));
  int8x16_t v308 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v299), v290);
  int8x16_t v309 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v301), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v283));
  int8x16_t v310 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v302), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v284));
  int8x16_t v311 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v303), v289);
  int8x16_t v312 = vorrq_s8(v305, v288);
  int8x16_t v313 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v275), v287);
  int8x16_t v314 = vceqzq_s8(*(int8x16_t *)(v268 + 360));
  int16x8_t v315 = vmovl_s8(*(int8x8_t *)v314.i8);
  int32x4_t v316 = vmovl_high_s16(v315);
  int16x8_t v317 = vmovl_high_s8(v314);
  int32x4_t v318 = vmovl_high_s16(v317);
  int32x4_t v319 = vmovl_s16(*(int16x4_t *)v315.i8);
  int32x4_t v320 = vmovl_s16(*(int16x4_t *)v317.i8);
  v275.i64[0] = v319.i32[0];
  v275.i64[1] = v319.i32[1];
  int8x16_t v321 = v275;
  v275.i64[0] = v320.i32[0];
  v275.i64[1] = v320.i32[1];
  int8x16_t v322 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v275);
  int8x16_t v323 = vceqzq_s8(*(int8x16_t *)(v268 + 376));
  int16x8_t v324 = vmovl_high_s8(v323);
  int32x4_t v325 = vmovl_s16(*(int16x4_t *)v324.i8);
  v275.i64[0] = v325.i32[0];
  v275.i64[1] = v325.i32[1];
  int16x8_t v326 = vmovl_s8(*(int8x8_t *)v323.i8);
  int32x4_t v327 = vmovl_s16(*(int16x4_t *)v326.i8);
  int8x16_t v328 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v275), v322), v306);
  v275.i64[0] = v327.i32[0];
  v275.i64[1] = v327.i32[1];
  int8x16_t v329 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v275), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v321));
  v275.i64[0] = v318.i32[0];
  v275.i64[1] = v318.i32[1];
  int8x16_t v330 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v275);
  int32x4_t v331 = vmovl_high_s16(v324);
  int8x16_t v332 = vorrq_s8(v329, v307);
  v275.i64[0] = v331.i32[0];
  v275.i64[1] = v331.i32[1];
  int8x16_t v333 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v275), v330);
  v275.i64[0] = v316.i32[0];
  v275.i64[1] = v316.i32[1];
  int8x16_t v334 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v275);
  int32x4_t v335 = vmovl_high_s16(v326);
  v275.i64[0] = v335.i32[0];
  v275.i64[1] = v335.i32[1];
  int8x16_t v336 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v275), v334), v309);
  v275.i64[0] = v320.i32[2];
  v275.i64[1] = v320.i32[3];
  int8x16_t v337 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v275);
  v275.i64[0] = v325.i32[2];
  v275.i64[1] = v325.i32[3];
  int8x16_t v338 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v275), v337), v310);
  v275.i64[0] = v319.i32[2];
  v275.i64[1] = v319.i32[3];
  int8x16_t v339 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v275);
  v275.i64[0] = v327.i32[2];
  v275.i64[1] = v327.i32[3];
  int8x16_t v340 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v275), v339), v311);
  v275.i64[0] = v318.i32[2];
  v275.i64[1] = v318.i32[3];
  int8x16_t v341 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v275);
  v275.i64[0] = v331.i32[2];
  v275.i64[1] = v331.i32[3];
  int8x16_t v342 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v275), v341), v312);
  v275.i64[0] = v316.i32[2];
  v275.i64[1] = v316.i32[3];
  int8x16_t v343 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v275);
  v275.i64[0] = v335.i32[2];
  v275.i64[1] = v335.i32[3];
  *((void *)v268 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v332, v328), vorrq_s8(v336, vorrq_s8(v333, v308))), (int64x2_t)vorrq_s8(vorrq_s8(v340, v338), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v275), v343), v313), v342))));
  *((void *)v268 + 3) = &unk_1EF55FBD8;
  v268[312] = 1;
  unint64_t v344 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v268 + 24;
  *(void *)(a1 + 112) = v268;
  if (v344 && !atomic_fetch_add(&v344->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
    std::__shared_weak_count::__release_weak(v344);
  }
  uint64_t v345 = (std::__shared_weak_count *)*((void *)&v678 + 1);
  if (*((void *)&v678 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
    std::__shared_weak_count::__release_weak(v345);
  }
  uint64_t v346 = *(void *)(v7 + 80);
  uint64_t v348 = *(void *)(v346 + 488);
  unint64_t v347 = *(std::__shared_weak_count **)(v346 + 496);
  uint64_t v674 = v348;
  v675 = v347;
  if (v347) {
    atomic_fetch_add_explicit(&v347->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  uint64_t v349 = operator new(0x198uLL);
  v349[1] = 0;
  v349[2] = 0;
  *uint64_t v349 = &unk_1EF584038;
  long long v350 = a3[1];
  long long v678 = *a3;
  long long v679 = v350;
  uint64_t v351 = ggl::DiffuseBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v349 + 3), &v674, (uint64_t)v672, &v678);
  char v352 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v351;
  *(void *)(a1 + 128) = v349;
  if (v352 && !atomic_fetch_add(&v352->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
    std::__shared_weak_count::__release_weak(v352);
  }
  unint64_t v353 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
    std::__shared_weak_count::__release_weak(v353);
  }
  uint64_t v354 = *(void *)(v7 + 80);
  uint64_t v355 = *(void *)(v354 + 536);
  long long v356 = *(std::__shared_weak_count **)(v354 + 544);
  uint64_t v674 = v355;
  v675 = v356;
  if (v356) {
    atomic_fetch_add_explicit(&v356->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  char v357 = operator new(0x198uLL);
  v357[1] = 0;
  v357[2] = 0;
  *char v357 = &unk_1EF588130;
  long long v358 = a3[1];
  long long v678 = *a3;
  long long v679 = v358;
  uint64_t v359 = ggl::DiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v357 + 3), &v674, (uint64_t)v672, &v678);
  uint64_t v360 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v359;
  *(void *)(a1 + 144) = v357;
  if (v360 && !atomic_fetch_add(&v360->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
    std::__shared_weak_count::__release_weak(v360);
  }
  unint64_t v361 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
    std::__shared_weak_count::__release_weak(v361);
  }
  uint64_t v362 = *(void *)(v7 + 80);
  uint64_t v363 = *(void *)(v362 + 704);
  uint64_t v364 = *(std::__shared_weak_count **)(v362 + 712);
  uint64_t v674 = v363;
  v675 = v364;
  if (v364) {
    atomic_fetch_add_explicit(&v364->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  v365 = operator new(0x198uLL);
  v365[1] = 0;
  v365[2] = 0;
  void *v365 = &unk_1EF5884B0;
  long long v366 = a3[1];
  long long v678 = *a3;
  long long v679 = v366;
  uint64_t v367 = ggl::FoggedDiffuseBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v365 + 3), &v674, (uint64_t)v672, &v678);
  v368 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v367;
  *(void *)(a1 + 160) = v365;
  if (v368 && !atomic_fetch_add(&v368->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
    std::__shared_weak_count::__release_weak(v368);
  }
  id v369 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
    std::__shared_weak_count::__release_weak(v369);
  }
  uint64_t v370 = *(void *)(v7 + 80);
  uint64_t v371 = *(void *)(v370 + 728);
  uint64_t v372 = *(std::__shared_weak_count **)(v370 + 736);
  uint64_t v674 = v371;
  v675 = v372;
  if (v372) {
    atomic_fetch_add_explicit(&v372->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  unint64_t v373 = operator new(0x198uLL);
  v373[1] = 0;
  v373[2] = 0;
  *unint64_t v373 = &unk_1EF5888D8;
  long long v374 = a3[1];
  long long v678 = *a3;
  long long v679 = v374;
  uint64_t v375 = ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v373 + 3), &v674, (uint64_t)v672, &v678);
  uint64_t v376 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v375;
  *(void *)(a1 + 176) = v373;
  if (v376 && !atomic_fetch_add(&v376->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
    std::__shared_weak_count::__release_weak(v376);
  }
  char v377 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
    std::__shared_weak_count::__release_weak(v377);
  }
  uint64_t v378 = *(void *)(v7 + 80);
  uint64_t v379 = *(void *)(v378 + 512);
  uint64_t v380 = *(std::__shared_weak_count **)(v378 + 520);
  uint64_t v674 = v379;
  v675 = v380;
  if (v380) {
    atomic_fetch_add_explicit(&v380->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  v381 = operator new(0x198uLL);
  v381[1] = 0;
  v381[2] = 0;
  void *v381 = &unk_1EF588910;
  long long v382 = a3[1];
  long long v678 = *a3;
  long long v679 = v382;
  uint64_t v383 = ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState((uint64_t)(v381 + 3), &v674, (uint64_t)v672, &v678);
  uint64_t v384 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v383;
  *(void *)(a1 + 192) = v381;
  if (v384 && !atomic_fetch_add(&v384->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
    std::__shared_weak_count::__release_weak(v384);
  }
  uint64_t v385 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
    std::__shared_weak_count::__release_weak(v385);
  }
  uint64_t v386 = *(void *)(v7 + 80);
  uint64_t v387 = *(void *)(v386 + 2384);
  id v388 = *(std::__shared_weak_count **)(v386 + 2392);
  uint64_t v674 = v387;
  v675 = v388;
  if (v388) {
    atomic_fetch_add_explicit(&v388->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  unint64_t v389 = operator new(0x198uLL);
  v389[1] = 0;
  v389[2] = 0;
  *unint64_t v389 = &unk_1EF585848;
  long long v390 = a3[1];
  long long v678 = *a3;
  long long v679 = v390;
  uint64_t v391 = ggl::SpecularBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v389 + 3), &v674, (uint64_t)v672, &v678);
  uint64_t v392 = *(std::__shared_weak_count **)(a1 + 208);
  *(void *)(a1 + 200) = v391;
  *(void *)(a1 + 208) = v389;
  if (v392 && !atomic_fetch_add(&v392->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
    std::__shared_weak_count::__release_weak(v392);
  }
  uint64_t v393 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
    std::__shared_weak_count::__release_weak(v393);
  }
  uint64_t v394 = *(void *)(v7 + 80);
  uint64_t v395 = *(void *)(v394 + 2432);
  id v396 = *(std::__shared_weak_count **)(v394 + 2440);
  uint64_t v674 = v395;
  v675 = v396;
  if (v396) {
    atomic_fetch_add_explicit(&v396->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  int v397 = operator new(0x198uLL);
  v397[1] = 0;
  v397[2] = 0;
  void *v397 = &unk_1EF588360;
  long long v398 = a3[1];
  long long v678 = *a3;
  long long v679 = v398;
  uint64_t v399 = ggl::SpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v397 + 3), &v674, (uint64_t)v672, &v678);
  long long v400 = *(std::__shared_weak_count **)(a1 + 224);
  *(void *)(a1 + 216) = v399;
  *(void *)(a1 + 224) = v397;
  if (v400 && !atomic_fetch_add(&v400->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
    std::__shared_weak_count::__release_weak(v400);
  }
  uint64_t v401 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
    std::__shared_weak_count::__release_weak(v401);
  }
  uint64_t v402 = *(void *)(v7 + 80);
  uint64_t v403 = *(void *)(v402 + 776);
  v404 = *(std::__shared_weak_count **)(v402 + 784);
  uint64_t v674 = v403;
  v675 = v404;
  if (v404) {
    atomic_fetch_add_explicit(&v404->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  uint64_t v405 = operator new(0x198uLL);
  v405[1] = 0;
  v405[2] = 0;
  *uint64_t v405 = &unk_1EF588670;
  long long v406 = a3[1];
  long long v678 = *a3;
  long long v679 = v406;
  uint64_t v407 = ggl::FoggedSpecularBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v405 + 3), &v674, (uint64_t)v672, &v678);
  uint64_t v408 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v407;
  *(void *)(a1 + 240) = v405;
  if (v408 && !atomic_fetch_add(&v408->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
    std::__shared_weak_count::__release_weak(v408);
  }
  v409 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
    std::__shared_weak_count::__release_weak(v409);
  }
  uint64_t v410 = *(void *)(v7 + 80);
  uint64_t v411 = *(void *)(v410 + 800);
  uint64_t v412 = *(std::__shared_weak_count **)(v410 + 808);
  uint64_t v674 = v411;
  v675 = v412;
  if (v412) {
    atomic_fetch_add_explicit(&v412->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  v413 = operator new(0x198uLL);
  v413[1] = 0;
  v413[2] = 0;
  void *v413 = &unk_1EF5889B8;
  long long v414 = a3[1];
  long long v678 = *a3;
  long long v679 = v414;
  uint64_t v415 = ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v413 + 3), &v674, (uint64_t)v672, &v678);
  v416 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = v415;
  *(void *)(a1 + 256) = v413;
  if (v416 && !atomic_fetch_add(&v416->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
    std::__shared_weak_count::__release_weak(v416);
  }
  uint64_t v417 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
    std::__shared_weak_count::__release_weak(v417);
  }
  uint64_t v418 = *(void *)(v7 + 80);
  uint64_t v419 = *(void *)(v418 + 2408);
  uint64_t v420 = *(std::__shared_weak_count **)(v418 + 2416);
  uint64_t v674 = v419;
  v675 = v420;
  if (v420) {
    atomic_fetch_add_explicit(&v420->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[20], 0, 24);
  v672[0] = 0;
  *(_OWORD *)&v672[4] = xmmword_1A28FC970;
  char v673 = 15;
  v421 = operator new(0x198uLL);
  v421[1] = 0;
  v421[2] = 0;
  void *v421 = &unk_1EF588A98;
  long long v422 = a3[1];
  long long v678 = *a3;
  long long v679 = v422;
  uint64_t v423 = ggl::SpecularBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState((uint64_t)(v421 + 3), &v674, (uint64_t)v672, &v678);
  unint64_t v424 = *(std::__shared_weak_count **)(a1 + 272);
  *(void *)(a1 + 264) = v423;
  *(void *)(a1 + 272) = v421;
  if (v424 && !atomic_fetch_add(&v424->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
    std::__shared_weak_count::__release_weak(v424);
  }
  size_t v425 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
    std::__shared_weak_count::__release_weak(v425);
  }
  uint64_t v426 = *(void *)(v7 + 80);
  uint64_t v428 = *(void *)(v426 + 488);
  v427 = *(std::__shared_weak_count **)(v426 + 496);
  uint64_t v674 = v428;
  v675 = v427;
  if (v427) {
    atomic_fetch_add_explicit(&v427->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  v429 = operator new(0x198uLL);
  v429[1] = 0;
  v429[2] = 0;
  void *v429 = &unk_1EF584038;
  long long v430 = a3[1];
  long long v678 = *a3;
  long long v679 = v430;
  uint64_t v431 = ggl::DiffuseBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v429 + 3), &v674, (uint64_t)v672, &v678);
  v432 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v431;
  *(void *)(a1 + 288) = v429;
  if (v432 && !atomic_fetch_add(&v432->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
    std::__shared_weak_count::__release_weak(v432);
  }
  unint64_t v433 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
    std::__shared_weak_count::__release_weak(v433);
  }
  uint64_t v434 = *(void *)(v7 + 80);
  uint64_t v435 = *(void *)(v434 + 536);
  unint64_t v436 = *(std::__shared_weak_count **)(v434 + 544);
  uint64_t v674 = v435;
  v675 = v436;
  if (v436) {
    atomic_fetch_add_explicit(&v436->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  uint8x8_t v437 = operator new(0x198uLL);
  v437[1] = 0;
  v437[2] = 0;
  *uint8x8_t v437 = &unk_1EF588130;
  long long v438 = a3[1];
  long long v678 = *a3;
  long long v679 = v438;
  uint64_t v439 = ggl::DiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v437 + 3), &v674, (uint64_t)v672, &v678);
  v440 = *(std::__shared_weak_count **)(a1 + 304);
  *(void *)(a1 + 296) = v439;
  *(void *)(a1 + 304) = v437;
  if (v440 && !atomic_fetch_add(&v440->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
    std::__shared_weak_count::__release_weak(v440);
  }
  uint64_t v441 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
    std::__shared_weak_count::__release_weak(v441);
  }
  uint64_t v442 = *(void *)(v7 + 80);
  uint64_t v443 = *(void *)(v442 + 704);
  unint64_t v444 = *(std::__shared_weak_count **)(v442 + 712);
  uint64_t v674 = v443;
  v675 = v444;
  if (v444) {
    atomic_fetch_add_explicit(&v444->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  v445 = operator new(0x198uLL);
  v445[1] = 0;
  v445[2] = 0;
  void *v445 = &unk_1EF5884B0;
  long long v446 = a3[1];
  long long v678 = *a3;
  long long v679 = v446;
  uint64_t v447 = ggl::FoggedDiffuseBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v445 + 3), &v674, (uint64_t)v672, &v678);
  v448 = *(std::__shared_weak_count **)(a1 + 320);
  *(void *)(a1 + 312) = v447;
  *(void *)(a1 + 320) = v445;
  if (v448 && !atomic_fetch_add(&v448->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
    std::__shared_weak_count::__release_weak(v448);
  }
  uint64_t v449 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
    std::__shared_weak_count::__release_weak(v449);
  }
  uint64_t v450 = *(void *)(v7 + 80);
  uint64_t v451 = *(void *)(v450 + 728);
  unint64_t v452 = *(std::__shared_weak_count **)(v450 + 736);
  uint64_t v674 = v451;
  v675 = v452;
  if (v452) {
    atomic_fetch_add_explicit(&v452->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  unint64_t v453 = operator new(0x198uLL);
  v453[1] = 0;
  v453[2] = 0;
  *unint64_t v453 = &unk_1EF5888D8;
  long long v454 = a3[1];
  long long v678 = *a3;
  long long v679 = v454;
  uint64_t v455 = ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v453 + 3), &v674, (uint64_t)v672, &v678);
  v456 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v455;
  *(void *)(a1 + 336) = v453;
  if (v456 && !atomic_fetch_add(&v456->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
    std::__shared_weak_count::__release_weak(v456);
  }
  v457 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
    std::__shared_weak_count::__release_weak(v457);
  }
  uint64_t v458 = *(void *)(v7 + 80);
  uint64_t v459 = *(void *)(v458 + 512);
  uint64_t v460 = *(std::__shared_weak_count **)(v458 + 520);
  uint64_t v674 = v459;
  v675 = v460;
  if (v460) {
    atomic_fetch_add_explicit(&v460->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  uint64_t v461 = operator new(0x198uLL);
  v461[1] = 0;
  v461[2] = 0;
  *uint64_t v461 = &unk_1EF588910;
  long long v462 = a3[1];
  long long v678 = *a3;
  long long v679 = v462;
  uint64_t v463 = ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState((uint64_t)(v461 + 3), &v674, (uint64_t)v672, &v678);
  uint64_t v464 = *(std::__shared_weak_count **)(a1 + 352);
  *(void *)(a1 + 344) = v463;
  *(void *)(a1 + 352) = v461;
  if (v464 && !atomic_fetch_add(&v464->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
    std::__shared_weak_count::__release_weak(v464);
  }
  long long v465 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
    std::__shared_weak_count::__release_weak(v465);
  }
  uint64_t v466 = *(void *)(v7 + 80);
  uint64_t v467 = *(void *)(v466 + 2384);
  v468 = *(std::__shared_weak_count **)(v466 + 2392);
  uint64_t v674 = v467;
  v675 = v468;
  if (v468) {
    atomic_fetch_add_explicit(&v468->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  v469 = operator new(0x198uLL);
  v469[1] = 0;
  v469[2] = 0;
  void *v469 = &unk_1EF585848;
  long long v470 = a3[1];
  long long v678 = *a3;
  long long v679 = v470;
  uint64_t v471 = ggl::SpecularBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v469 + 3), &v674, (uint64_t)v672, &v678);
  unint64_t v472 = *(std::__shared_weak_count **)(a1 + 368);
  *(void *)(a1 + 360) = v471;
  *(void *)(a1 + 368) = v469;
  if (v472 && !atomic_fetch_add(&v472->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
    std::__shared_weak_count::__release_weak(v472);
  }
  v473 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
    std::__shared_weak_count::__release_weak(v473);
  }
  uint64_t v474 = *(void *)(v7 + 80);
  uint64_t v475 = *(void *)(v474 + 2432);
  v476 = *(std::__shared_weak_count **)(v474 + 2440);
  uint64_t v674 = v475;
  v675 = v476;
  if (v476) {
    atomic_fetch_add_explicit(&v476->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  v477 = operator new(0x198uLL);
  v477[1] = 0;
  v477[2] = 0;
  void *v477 = &unk_1EF588360;
  long long v478 = a3[1];
  long long v678 = *a3;
  long long v679 = v478;
  uint64_t v479 = ggl::SpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v477 + 3), &v674, (uint64_t)v672, &v678);
  uint64_t v480 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v479;
  *(void *)(a1 + 384) = v477;
  if (v480 && !atomic_fetch_add(&v480->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
    std::__shared_weak_count::__release_weak(v480);
  }
  unint64_t v481 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
    std::__shared_weak_count::__release_weak(v481);
  }
  uint64_t v482 = *(void *)(v7 + 80);
  uint64_t v483 = *(void *)(v482 + 776);
  v484 = *(std::__shared_weak_count **)(v482 + 784);
  uint64_t v674 = v483;
  v675 = v484;
  if (v484) {
    atomic_fetch_add_explicit(&v484->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  v485 = operator new(0x198uLL);
  v485[1] = 0;
  v485[2] = 0;
  void *v485 = &unk_1EF588670;
  long long v486 = a3[1];
  long long v678 = *a3;
  long long v679 = v486;
  uint64_t v487 = ggl::FoggedSpecularBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v485 + 3), &v674, (uint64_t)v672, &v678);
  v488 = *(std::__shared_weak_count **)(a1 + 400);
  *(void *)(a1 + 392) = v487;
  *(void *)(a1 + 400) = v485;
  if (v488 && !atomic_fetch_add(&v488->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
    std::__shared_weak_count::__release_weak(v488);
  }
  v489 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
    std::__shared_weak_count::__release_weak(v489);
  }
  uint64_t v490 = *(void *)(v7 + 80);
  uint64_t v491 = *(void *)(v490 + 800);
  unint64_t v492 = *(std::__shared_weak_count **)(v490 + 808);
  uint64_t v674 = v491;
  v675 = v492;
  if (v492) {
    atomic_fetch_add_explicit(&v492->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  v493 = operator new(0x198uLL);
  v493[1] = 0;
  v493[2] = 0;
  void *v493 = &unk_1EF5889B8;
  long long v494 = a3[1];
  long long v678 = *a3;
  long long v679 = v494;
  uint64_t v495 = ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v493 + 3), &v674, (uint64_t)v672, &v678);
  uint64_t v496 = *(std::__shared_weak_count **)(a1 + 416);
  *(void *)(a1 + 408) = v495;
  *(void *)(a1 + 416) = v493;
  if (v496 && !atomic_fetch_add(&v496->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
    std::__shared_weak_count::__release_weak(v496);
  }
  v497 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
    std::__shared_weak_count::__release_weak(v497);
  }
  uint64_t v498 = *(void *)(v7 + 80);
  uint64_t v499 = *(void *)(v498 + 2408);
  uint64_t v500 = *(std::__shared_weak_count **)(v498 + 2416);
  uint64_t v674 = v499;
  v675 = v500;
  if (v500) {
    atomic_fetch_add_explicit(&v500->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v672[24], 0, 20);
  v672[0] = 1;
  *(_OWORD *)&v672[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v672[20] = 7;
  char v673 = 15;
  uint64_t v501 = operator new(0x198uLL);
  v501[1] = 0;
  v501[2] = 0;
  *uint64_t v501 = &unk_1EF588A98;
  long long v502 = a3[1];
  long long v678 = *a3;
  long long v679 = v502;
  uint64_t v503 = ggl::SpecularBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState((uint64_t)(v501 + 3), &v674, (uint64_t)v672, &v678);
  char v504 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v503;
  *(void *)(a1 + 432) = v501;
  if (v504 && !atomic_fetch_add(&v504->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
    std::__shared_weak_count::__release_weak(v504);
  }
  unint64_t v505 = v675;
  if (v675 && !atomic_fetch_add(&v675->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
    std::__shared_weak_count::__release_weak(v505);
  }
  uint64_t v506 = *(void *)(v7 + 80);
  uint64_t v508 = *(void *)(v506 + 224);
  uint64_t v507 = *(void *)(v506 + 232);
  *(void *)&long long v678 = v508;
  *((void *)&v678 + 1) = v507;
  if (v507) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v507 + 8), 1uLL, memory_order_relaxed);
  }
  v509 = (char *)operator new(0x198uLL);
  *((void *)v509 + 1) = 0;
  *((void *)v509 + 2) = 0;
  *(void *)v509 = &unk_1EF583C10;
  long long v510 = a3[1];
  *(_OWORD *)v672 = *a3;
  *(_OWORD *)&v672[16] = v510;
  {
    if (v667)
    {
      {
        if (v667)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::BuildingShadow::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(void *)algn_1E9582B08 = &ggl::BuildingShadow::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1E9582B10 = 0;
          {
            ggl::BuildingShadow::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9582B40 = ggl::BuildingShadow::Shadow::reflection(void)::reflection;
          }
          qword_1E9582B18 = (uint64_t)&ggl::BuildingShadow::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1E9582B20 = xmmword_1A28FCEB0;
        }
      }
      ggl::BuildingShadow::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingShadow::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingShadowShader::typedReflection(v667);
      qword_1EB318B70 = (uint64_t)&ggl::BuildingShadowShader::typedReflection(void)::ref;
      {
        ggl::BuildingShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9582BB0 = 0;
        qword_1E9582BB8 = (uint64_t)"";
        dword_1E9582BC0 = 0;
        qword_1E9582BC8 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9582BD0 = 2;
      }
      qword_1EB318B78 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EB318B80 = 1;
      qword_1EB318B88 = 0;
      unk_1EB318B90 = 1;
      qword_1EB318B98 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318BA0 = 0;
      {
        ggl::BuildingShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9582B50 = 0;
        qword_1E9582B58 = (uint64_t)"view";
        dword_1E9582B60 = 3;
        qword_1E9582B68 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9582B70 = xmmword_1A28FCEB0;
        qword_1E9582B80 = 1;
        unk_1E9582B88 = "shadow";
        dword_1E9582B90 = 3;
        qword_1E9582B98 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineConstantShadowBinding(void)::reflection;
        unk_1E9582BA0 = 2;
      }
      qword_1EB318BA8 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB318BB0 = 2;
    }
  }
  long long v511 = v678;
  if (*((void *)&v678 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v509 + 4) = 0;
  *((void *)v509 + 5) = 0;
  *((_DWORD *)v509 + 14) = 0;
  *((void *)v509 + 6) = 0;
  *((void *)v509 + 3) = &unk_1EF55B208;
  *((void *)v509 + 8) = &ggl::BuildingShadow::MeshPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v509 + 72) = v511;
  if (*((void *)&v511 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v511 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v509[136] = 0;
  *(_OWORD *)(v509 + 140) = xmmword_1A28FC970;
  *(void *)(v509 + 156) = 0;
  *(void *)(v509 + 172) = 0;
  *(void *)(v509 + 164) = 0;
  v509[184] = 0;
  *(_OWORD *)(v509 + 188) = xmmword_1A28FC970;
  *(void *)(v509 + 204) = 0;
  *(void *)(v509 + 220) = 0;
  *(void *)(v509 + 212) = 0;
  v509[232] = 0;
  *(_OWORD *)(v509 + 236) = xmmword_1A28FC970;
  *(void *)(v509 + 252) = 0;
  *(void *)(v509 + 268) = 0;
  *(void *)(v509 + 260) = 0;
  long long v512 = *(_OWORD *)&v672[16];
  *(_OWORD *)(v509 + 280) = *(_OWORD *)v672;
  *(_OWORD *)(v509 + 296) = v512;
  v509[312] = 0;
  *((void *)v509 + 48) = 0;
  *((_OWORD *)v509 + 22) = 0u;
  *((_OWORD *)v509 + 23) = 0u;
  *((_OWORD *)v509 + 20) = 0u;
  *((_OWORD *)v509 + 21) = 0u;
  *((void *)v509 + 49) = 0x100000001;
  v509[400] = 0;
  v509[88] = 1;
  *(_WORD *)(v509 + 89) = v674;
  v509[91] = BYTE2(v674);
  *(_OWORD *)(v509 + 92) = xmmword_1A28FCEE0;
  *((_DWORD *)v509 + 27) = 7;
  *((void *)v509 + 14) = 0;
  *((void *)v509 + 15) = 0;
  *((_DWORD *)v509 + 32) = 0;
  v509[132] = 15;
  if (*((void *)&v511 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v511 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v511 + 1) + 16))(*((void *)&v511 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v511 + 1));
  }
  v509[329] = 0;
  int8x16_t v513 = vceqzq_s8(*(int8x16_t *)(v509 + 328));
  int16x8_t v514 = vmovl_high_s8(v513);
  int32x4_t v515 = vmovl_s16(*(int16x4_t *)v514.i8);
  v516.i64[0] = v515.u32[0];
  v516.i64[1] = v515.u32[1];
  int8x16_t v517 = v516;
  int16x8_t v518 = vmovl_s8(*(int8x8_t *)v513.i8);
  int32x4_t v519 = vmovl_s16(*(int16x4_t *)v518.i8);
  v516.i64[0] = v519.u32[0];
  v516.i64[1] = v519.u32[1];
  int8x16_t v520 = v516;
  int32x4_t v521 = vmovl_high_s16(v514);
  v516.i64[0] = v521.u32[0];
  v516.i64[1] = v521.u32[1];
  int8x16_t v522 = v516;
  int32x4_t v523 = vmovl_high_s16(v518);
  v516.i64[0] = v523.u32[0];
  v516.i64[1] = v523.u32[1];
  int8x16_t v524 = v516;
  v516.i64[0] = v515.u32[2];
  v516.i64[1] = v515.u32[3];
  int8x16_t v525 = v516;
  v516.i64[0] = v519.u32[2];
  v516.i64[1] = v519.u32[3];
  int8x16_t v526 = v516;
  v516.i64[0] = v521.u32[2];
  v516.i64[1] = v521.u32[3];
  int8x16_t v527 = v516;
  v516.i64[0] = v523.u32[2];
  v516.i64[1] = v523.u32[3];
  int8x16_t v528 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v516);
  int8x16_t v529 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v527);
  int8x16_t v530 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v526);
  int8x16_t v531 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v522);
  int8x16_t v532 = vceqzq_s8(*(int8x16_t *)(v509 + 344));
  int16x8_t v533 = vmovl_high_s8(v532);
  int32x4_t v534 = vmovl_s16(*(int16x4_t *)v533.i8);
  v516.i64[0] = v534.u32[0];
  v516.i64[1] = v534.u32[1];
  int8x16_t v535 = v516;
  int16x8_t v536 = vmovl_s8(*(int8x8_t *)v532.i8);
  int32x4_t v537 = vmovl_s16(*(int16x4_t *)v536.i8);
  v516.i64[0] = v537.u32[0];
  v516.i64[1] = v537.u32[1];
  int8x16_t v538 = v516;
  int32x4_t v539 = vmovl_high_s16(v533);
  v516.i64[0] = v539.u32[0];
  v516.i64[1] = v539.u32[1];
  int8x16_t v540 = v516;
  int32x4_t v541 = vmovl_high_s16(v536);
  v516.i64[0] = v541.u32[0];
  v516.i64[1] = v541.u32[1];
  int8x16_t v542 = v516;
  v516.i64[0] = v534.u32[2];
  v516.i64[1] = v534.u32[3];
  int8x16_t v543 = v516;
  v516.i64[0] = v537.u32[2];
  v516.i64[1] = v537.u32[3];
  int8x16_t v544 = v516;
  v516.i64[0] = v539.u32[2];
  v516.i64[1] = v539.u32[3];
  int8x16_t v545 = v516;
  v516.i64[0] = v541.u32[2];
  v516.i64[1] = v541.u32[3];
  int8x16_t v546 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v545);
  int8x16_t v547 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v535), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v517));
  int8x16_t v548 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v538), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v520));
  int8x16_t v549 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v540), v531);
  int8x16_t v550 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v542), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v524));
  int8x16_t v551 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v543), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v525));
  int8x16_t v552 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v544), v530);
  int8x16_t v553 = vorrq_s8(v546, v529);
  int8x16_t v554 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v516), v528);
  int8x16_t v555 = vceqzq_s8(*(int8x16_t *)(v509 + 360));
  int16x8_t v556 = vmovl_s8(*(int8x8_t *)v555.i8);
  int32x4_t v557 = vmovl_high_s16(v556);
  int16x8_t v558 = vmovl_high_s8(v555);
  int32x4_t v559 = vmovl_high_s16(v558);
  int32x4_t v560 = vmovl_s16(*(int16x4_t *)v556.i8);
  int32x4_t v561 = vmovl_s16(*(int16x4_t *)v558.i8);
  v516.i64[0] = v560.i32[0];
  v516.i64[1] = v560.i32[1];
  int8x16_t v562 = v516;
  v516.i64[0] = v561.i32[0];
  v516.i64[1] = v561.i32[1];
  int8x16_t v563 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v516);
  int8x16_t v564 = vceqzq_s8(*(int8x16_t *)(v509 + 376));
  int16x8_t v565 = vmovl_high_s8(v564);
  int32x4_t v566 = vmovl_s16(*(int16x4_t *)v565.i8);
  v516.i64[0] = v566.i32[0];
  v516.i64[1] = v566.i32[1];
  int16x8_t v567 = vmovl_s8(*(int8x8_t *)v564.i8);
  int32x4_t v568 = vmovl_s16(*(int16x4_t *)v567.i8);
  int8x16_t v569 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v516), v563), v547);
  v516.i64[0] = v568.i32[0];
  v516.i64[1] = v568.i32[1];
  int8x16_t v570 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v516), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v562));
  v516.i64[0] = v559.i32[0];
  v516.i64[1] = v559.i32[1];
  int8x16_t v571 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v516);
  int32x4_t v572 = vmovl_high_s16(v565);
  int8x16_t v573 = vorrq_s8(v570, v548);
  v516.i64[0] = v572.i32[0];
  v516.i64[1] = v572.i32[1];
  int8x16_t v574 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v516), v571);
  v516.i64[0] = v557.i32[0];
  v516.i64[1] = v557.i32[1];
  int8x16_t v575 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v516);
  int32x4_t v576 = vmovl_high_s16(v567);
  v516.i64[0] = v576.i32[0];
  v516.i64[1] = v576.i32[1];
  int8x16_t v577 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v516), v575), v550);
  v516.i64[0] = v561.i32[2];
  v516.i64[1] = v561.i32[3];
  int8x16_t v578 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v516);
  v516.i64[0] = v566.i32[2];
  v516.i64[1] = v566.i32[3];
  int8x16_t v579 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v516), v578), v551);
  v516.i64[0] = v560.i32[2];
  v516.i64[1] = v560.i32[3];
  int8x16_t v580 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v516);
  v516.i64[0] = v568.i32[2];
  v516.i64[1] = v568.i32[3];
  int8x16_t v581 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v516), v580), v552);
  v516.i64[0] = v559.i32[2];
  v516.i64[1] = v559.i32[3];
  int8x16_t v582 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v516);
  v516.i64[0] = v572.i32[2];
  v516.i64[1] = v572.i32[3];
  int8x16_t v583 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v516), v582), v553);
  v516.i64[0] = v557.i32[2];
  v516.i64[1] = v557.i32[3];
  int8x16_t v584 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v516);
  v516.i64[0] = v576.i32[2];
  v516.i64[1] = v576.i32[3];
  *((void *)v509 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v573, v569), vorrq_s8(v577, vorrq_s8(v574, v549))), (int64x2_t)vorrq_s8(vorrq_s8(v581, v579), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v516), v584), v554), v583))));
  *((void *)v509 + 3) = &unk_1EF55B480;
  v509[312] = 1;
  v585 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = v509 + 24;
  *(void *)(a1 + 448) = v509;
  if (v585 && !atomic_fetch_add(&v585->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
    std::__shared_weak_count::__release_weak(v585);
  }
  unint64_t v586 = (std::__shared_weak_count *)*((void *)&v678 + 1);
  if (*((void *)&v678 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
    std::__shared_weak_count::__release_weak(v586);
  }
  uint64_t v587 = *(void *)(v7 + 80);
  uint64_t v588 = *(void *)(v587 + 1952);
  uint64_t v589 = *(void *)(v587 + 1960);
  *(void *)&long long v678 = v588;
  *((void *)&v678 + 1) = v589;
  if (v589) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v589 + 8), 1uLL, memory_order_relaxed);
  }
  v590 = (char *)operator new(0x198uLL);
  *((void *)v590 + 1) = 0;
  *((void *)v590 + 2) = 0;
  *(void *)v590 = &unk_1EF584268;
  long long v591 = a3[1];
  *(_OWORD *)v672 = *a3;
  *(_OWORD *)&v672[16] = v591;
  {
    if (v668)
    {
      {
        if (v668)
        {
          {
            {
              ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PrefilteredLine::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B5C0 = 1;
          }
          ggl::PrefilteredLine::PrefilteredLinePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9583698 = &ggl::PrefilteredLine::pipelineDataPrefilteredLinePipelineDeviceStructs(void)::ref;
          qword_1E95836A0 = 0;
          {
            ggl::PrefilteredLine::pipelineDataPrefilteredLinePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E95836D0 = ggl::PrefilteredLine::Style::reflection(void)::reflection;
            qword_1E95836D8 = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          }
          qword_1E95836A8 = (uint64_t)&ggl::PrefilteredLine::pipelineDataPrefilteredLinePipelineConstantStructs(void)::ref;
          unk_1E95836B0 = xmmword_1A28FCEF0;
        }
      }
      ggl::PrefilteredLine::PrefilteredLinePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PrefilteredLine::PrefilteredLinePipelineSetup::typedReflection(void)::ref;
      ggl::PrefilteredLineShader::typedReflection(v668);
      qword_1EB318C60 = (uint64_t)&ggl::PrefilteredLineShader::typedReflection(void)::ref;
      {
        ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9583780 = 0;
        qword_1E9583788 = (uint64_t)"";
        dword_1E9583790 = 0;
        qword_1E9583798 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineAttributeBinding_0(void)::attr;
        unk_1E95837A0 = 2;
      }
      qword_1EB318C68 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineAttributeStructBinding(void)::attr;
      unk_1EB318C70 = 1;
      qword_1EB318C78 = 0;
      unk_1EB318C80 = 1;
      qword_1EB318C88 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineDeviceStructBinding(void)::ref;
      unk_1EB318C90 = 0;
      {
        ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantStructBinding(void)::ref = 0;
        unk_1E95836F0 = 0;
        qword_1E95836F8 = (uint64_t)"view";
        dword_1E9583700 = 3;
        qword_1E9583708 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9583710 = xmmword_1A28FCEB0;
        qword_1E9583720 = 1;
        unk_1E9583728 = "style";
        dword_1E9583730 = 3;
        qword_1E9583738 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantStyleBinding(void)::reflection;
        unk_1E9583740 = xmmword_1A28FCF00;
        qword_1E9583750 = 2;
        unk_1E9583758 = "skyfog";
        dword_1E9583760 = 3;
        qword_1E9583768 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantSkyfogBinding(void)::reflection;
        unk_1E9583770 = 6;
      }
      qword_1EB318C98 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantStructBinding(void)::ref;
      unk_1EB318CA0 = 3;
    }
  }
  long long v592 = v678;
  if (*((void *)&v678 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v590 + 4) = 0;
  *((void *)v590 + 5) = 0;
  *((_DWORD *)v590 + 14) = 0;
  *((void *)v590 + 6) = 0;
  *((void *)v590 + 3) = &unk_1EF55B208;
  *((void *)v590 + 8) = &ggl::PrefilteredLine::PrefilteredLinePipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v590 + 72) = v592;
  if (*((void *)&v592 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v592 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v590[136] = 0;
  *(_OWORD *)(v590 + 140) = xmmword_1A28FC970;
  *(void *)(v590 + 156) = 0;
  *(void *)(v590 + 172) = 0;
  *(void *)(v590 + 164) = 0;
  v590[184] = 0;
  *(_OWORD *)(v590 + 188) = xmmword_1A28FC970;
  *(void *)(v590 + 204) = 0;
  *(void *)(v590 + 220) = 0;
  *(void *)(v590 + 212) = 0;
  v590[232] = 0;
  *(_OWORD *)(v590 + 236) = xmmword_1A28FC970;
  *(void *)(v590 + 252) = 0;
  *(void *)(v590 + 268) = 0;
  *(void *)(v590 + 260) = 0;
  long long v593 = *(_OWORD *)&v672[16];
  *(_OWORD *)(v590 + 280) = *(_OWORD *)v672;
  *(_OWORD *)(v590 + 296) = v593;
  v590[312] = 0;
  *((void *)v590 + 48) = 0;
  *((_OWORD *)v590 + 22) = 0u;
  *((_OWORD *)v590 + 23) = 0u;
  *((_OWORD *)v590 + 20) = 0u;
  *((_OWORD *)v590 + 21) = 0u;
  *((void *)v590 + 49) = 0x100000001;
  v590[400] = 0;
  v590[88] = 1;
  *(_WORD *)(v590 + 89) = v674;
  v590[91] = BYTE2(v674);
  *(_OWORD *)(v590 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v590 + 27) = 7;
  *((void *)v590 + 14) = 0;
  *((void *)v590 + 15) = 0;
  *((_DWORD *)v590 + 32) = 0;
  v590[132] = 15;
  if (*((void *)&v592 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v592 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v592 + 1) + 16))(*((void *)&v592 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v592 + 1));
  }
  v590[329] = 0;
  int8x16_t v594 = vceqzq_s8(*(int8x16_t *)(v590 + 328));
  int16x8_t v595 = vmovl_s8(*(int8x8_t *)v594.i8);
  int32x4_t v596 = vmovl_high_s16(v595);
  v597.i64[0] = v596.u32[2];
  v597.i64[1] = v596.u32[3];
  int8x16_t v598 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v597);
  int16x8_t v599 = vmovl_high_s8(v594);
  int32x4_t v600 = vmovl_high_s16(v599);
  v597.i64[0] = v600.u32[2];
  v597.i64[1] = v600.u32[3];
  int8x16_t v601 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v597);
  int32x4_t v602 = vmovl_s16(*(int16x4_t *)v595.i8);
  v597.i64[0] = v602.u32[2];
  v597.i64[1] = v602.u32[3];
  int8x16_t v603 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v597);
  int32x4_t v604 = vmovl_s16(*(int16x4_t *)v599.i8);
  v597.i64[0] = v604.u32[2];
  v597.i64[1] = v604.u32[3];
  int8x16_t v605 = vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v597);
  v597.i64[0] = v596.u32[0];
  v597.i64[1] = v596.u32[1];
  int8x16_t v606 = vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v597);
  v597.i64[0] = v600.u32[0];
  v597.i64[1] = v600.u32[1];
  int8x16_t v607 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v597);
  v597.i64[0] = v602.u32[0];
  v597.i64[1] = v602.u32[1];
  int8x16_t v608 = vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v597);
  v597.i64[0] = v604.u32[0];
  v597.i64[1] = v604.u32[1];
  int8x16_t v609 = vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v597);
  int8x16_t v610 = vceqzq_s8(*(int8x16_t *)(v590 + 344));
  int16x8_t v611 = vmovl_s8(*(int8x8_t *)v610.i8);
  int32x4_t v612 = vmovl_high_s16(v611);
  v597.i64[0] = v612.u32[2];
  v597.i64[1] = v612.u32[3];
  int8x16_t v613 = vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v597);
  int16x8_t v614 = vmovl_high_s8(v610);
  int32x4_t v615 = vmovl_high_s16(v614);
  v597.i64[0] = v615.u32[2];
  v597.i64[1] = v615.u32[3];
  int8x16_t v616 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v597);
  int32x4_t v617 = vmovl_s16(*(int16x4_t *)v611.i8);
  v597.i64[0] = v617.u32[2];
  v597.i64[1] = v617.u32[3];
  int8x16_t v618 = vbicq_s8((int8x16_t)xmmword_1A28FCA10, v597);
  int32x4_t v619 = vmovl_s16(*(int16x4_t *)v614.i8);
  v597.i64[0] = v619.u32[2];
  v597.i64[1] = v619.u32[3];
  int8x16_t v620 = vbicq_s8((int8x16_t)xmmword_1A28FCA20, v597);
  v597.i64[0] = v612.u32[0];
  v597.i64[1] = v612.u32[1];
  int8x16_t v621 = vbicq_s8((int8x16_t)xmmword_1A28FCA30, v597);
  v597.i64[0] = v615.u32[0];
  v597.i64[1] = v615.u32[1];
  int8x16_t v622 = vbicq_s8((int8x16_t)xmmword_1A28FCA40, v597);
  v597.i64[0] = v617.u32[0];
  v597.i64[1] = v617.u32[1];
  int8x16_t v623 = vbicq_s8((int8x16_t)xmmword_1A28FCA50, v597);
  v597.i64[0] = v619.u32[0];
  v597.i64[1] = v619.u32[1];
  int8x16_t v624 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v597), v609);
  int8x16_t v625 = vorrq_s8(v623, v608);
  int8x16_t v626 = vorrq_s8(v622, v607);
  int8x16_t v627 = vorrq_s8(v621, v606);
  int8x16_t v628 = vorrq_s8(v620, v605);
  int8x16_t v629 = vorrq_s8(v618, v603);
  int8x16_t v630 = vorrq_s8(v616, v601);
  int8x16_t v631 = vorrq_s8(v613, v598);
  int8x16_t v632 = vceqzq_s8(*(int8x16_t *)(v590 + 360));
  int16x8_t v633 = vmovl_s8(*(int8x8_t *)v632.i8);
  int32x4_t v634 = vmovl_high_s16(v633);
  int16x8_t v635 = vmovl_high_s8(v632);
  int32x4_t v636 = vmovl_high_s16(v635);
  int32x4_t v637 = vmovl_s16(*(int16x4_t *)v633.i8);
  int32x4_t v638 = vmovl_s16(*(int16x4_t *)v635.i8);
  v597.i64[0] = v638.i32[0];
  v597.i64[1] = v638.i32[1];
  int8x16_t v639 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v597);
  v597.i64[0] = v637.i32[0];
  v597.i64[1] = v637.i32[1];
  int8x16_t v640 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v597);
  v597.i64[0] = v636.i32[0];
  v597.i64[1] = v636.i32[1];
  int8x16_t v641 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v597);
  v597.i64[0] = v634.i32[0];
  v597.i64[1] = v634.i32[1];
  int8x16_t v642 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v597);
  v597.i64[0] = v634.i32[2];
  v597.i64[1] = v634.i32[3];
  int8x16_t v643 = v597;
  v597.i64[0] = v636.i32[2];
  v597.i64[1] = v636.i32[3];
  int8x16_t v644 = v597;
  v597.i64[0] = v637.i32[2];
  v597.i64[1] = v637.i32[3];
  int8x16_t v645 = v597;
  v597.i64[0] = v638.i32[2];
  v597.i64[1] = v638.i32[3];
  int8x16_t v646 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v597);
  int8x16_t v647 = vceqzq_s8(*(int8x16_t *)(v590 + 376));
  int16x8_t v648 = vmovl_high_s8(v647);
  int32x4_t v649 = vmovl_s16(*(int16x4_t *)v648.i8);
  int16x8_t v650 = vmovl_s8(*(int8x8_t *)v647.i8);
  int32x4_t v651 = vmovl_s16(*(int16x4_t *)v650.i8);
  int32x4_t v652 = vmovl_high_s16(v648);
  int32x4_t v653 = vmovl_high_s16(v650);
  v597.i64[0] = v653.i32[2];
  v597.i64[1] = v653.i32[3];
  int8x16_t v654 = vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v597);
  v597.i64[0] = v652.i32[2];
  v597.i64[1] = v652.i32[3];
  int8x16_t v655 = vbicq_s8((int8x16_t)xmmword_1A28FCB00, v597);
  v597.i64[0] = v651.i32[2];
  v597.i64[1] = v651.i32[3];
  int8x16_t v656 = vbicq_s8((int8x16_t)xmmword_1A28FCB10, v597);
  v597.i64[0] = v649.i32[2];
  v597.i64[1] = v649.i32[3];
  int8x16_t v657 = vbicq_s8((int8x16_t)xmmword_1A28FCB20, v597);
  v597.i64[0] = v653.i32[0];
  v597.i64[1] = v653.i32[1];
  int8x16_t v658 = vbicq_s8((int8x16_t)xmmword_1A28FCB30, v597);
  v597.i64[0] = v652.i32[0];
  v597.i64[1] = v652.i32[1];
  int8x16_t v659 = vbicq_s8((int8x16_t)xmmword_1A28FCB40, v597);
  v597.i64[0] = v651.i32[0];
  v597.i64[1] = v651.i32[1];
  int8x16_t v660 = vbicq_s8((int8x16_t)xmmword_1A28FCB50, v597);
  v597.i64[0] = v649.i32[0];
  v597.i64[1] = v649.i32[1];
  *((void *)v590 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v660, v640), v625), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v597), v639), v624)), vorrq_s8(vorrq_s8(vorrq_s8(v658, v642), v627), vorrq_s8(vorrq_s8(v659, v641), v626))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v656, vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v645)), v629), vorrq_s8(vorrq_s8(v657, v646), v628)), vorrq_s8(vorrq_s8(vorrq_s8(v654, vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v643)),
                                                v631),
                                              vorrq_s8(vorrq_s8(v655, vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v644)), v630)))));
  *((void *)v590 + 3) = &unk_1EF55BE00;
  v590[312] = 1;
  v661 = *(std::__shared_weak_count **)(a1 + 464);
  *(void *)(a1 + 456) = v590 + 24;
  *(void *)(a1 + 464) = v590;
  if (v661 && !atomic_fetch_add(&v661->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
    std::__shared_weak_count::__release_weak(v661);
  }
  v662 = (std::__shared_weak_count *)*((void *)&v678 + 1);
  if (*((void *)&v678 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v678 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v662->__on_zero_shared)(v662);
      std::__shared_weak_count::__release_weak(v662);
    }
  }
  operator new();
}