void ggl::MetalResourceManager::onRenderDataReleased(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  NSObject *v6;
  void v7[6];
  uint64_t vars8;

  v2 = *(unsigned __int8 *)(a2 + 9);
  v3 = v2 > 9;
  v4 = (1 << v2) & 0x2E7;
  if (v3 || v4 == 0)
  {
    ggl::MetalResourceManager::deleteResource(a1, a2);
  }
  else
  {
    v6 = *(NSObject **)(a1 + 272);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___ZN3ggl20MetalResourceManager20onRenderDataReleasedEPNS_14RenderResourceE_block_invoke;
    v7[3] = &__block_descriptor_48_e5_v8__0l;
    v7[4] = a1;
    v7[5] = a2;
    dispatch_sync(v6, v7);
  }
}

void ta2::TextureAtlas::createRegionItems(void *a1, uint64_t a2)
{
  std::vector<ta2::TextureAtlas::RegionItem>::reserve(a2, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) + ((uint64_t)(a1[1] - *a1) >> 4));
  v4 = (void *)*a1;
  v5 = (void *)a1[1];
  if ((void *)*a1 != v5)
  {
    while (1)
    {
      uint64_t v6 = *v4;
      if (*(unsigned char *)(*v4 + 80) == 2) {
        goto LABEL_3;
      }
      char v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      v7 = (std::__shared_weak_count *)v4[1];
      if (!v7) {
        break;
      }
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v6;
      *((void *)&v14 + 1) = v7;
      uint64_t v8 = *v4;
      uint64_t v9 = *(void *)(*v4 + 24);
      if (v9) {
        goto LABEL_7;
      }
LABEL_8:
      unint64_t v12 = *(void *)(a2 + 8);
      if (v12 < *(void *)(a2 + 16))
      {
        *(void *)unint64_t v12 = v6;
        *(void *)(v12 + 8) = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v13 = v16;
        *(_OWORD *)(v12 + 16) = v15;
        *(_OWORD *)(v12 + 32) = v13;
        *(_OWORD *)(v12 + 48) = v17;
        *(unsigned char *)(v12 + 64) = v18;
        *(void *)(a2 + 8) = v12 + 72;
        if (!v7) {
          goto LABEL_3;
        }
LABEL_14:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        goto LABEL_3;
      }
      *(void *)(a2 + 8) = std::vector<ta2::TextureAtlas::RegionItem>::__push_back_slow_path<ta2::TextureAtlas::RegionItem const&>((char **)a2, (uint64_t)&v14);
      if (v7) {
        goto LABEL_14;
      }
LABEL_3:
      v4 += 2;
      if (v4 == v5) {
        return;
      }
    }
    *(void *)&long long v14 = v6;
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)(v6 + 24);
    if (!v9) {
      goto LABEL_8;
    }
LABEL_7:
    *(void *)&long long v17 = v9;
    uint64_t v11 = *(void *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 40);
    LODWORD(v15) = v11 - 1;
    DWORD1(v15) = (unint64_t)(v11 - 0x100000000) >> 32;
    DWORD2(v15) = v10 + 1;
    HIDWORD(v15) = (unint64_t)(v10 + 0x100000000) >> 32;
    goto LABEL_8;
  }
}

void std::vector<ta2::TextureAtlas::RegionItem>::reserve(uint64_t a1, unint64_t a2)
{
  v2 = *(char **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      abort();
    }
    v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 72 * a2;
    uint64_t v6 = (char *)operator new(72 * a2);
    v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 72);
        v4 -= 72;
        *(_OWORD *)(v9 - 72) = v10;
        v9 -= 72;
        *(void *)v4 = 0;
        *((void *)v4 + 1) = 0;
        long long v11 = *((_OWORD *)v4 + 1);
        long long v12 = *((_OWORD *)v4 + 2);
        long long v13 = *((_OWORD *)v4 + 3);
        v9[64] = v4[64];
        *((_OWORD *)v9 + 2) = v12;
        *((_OWORD *)v9 + 3) = v13;
        *((_OWORD *)v9 + 1) = v11;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      long long v14 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      for (*(void *)(a1 + 16) = v7; v14 != v2; v14 -= 72)
      {
        long long v15 = (std::__shared_weak_count *)*((void *)v14 - 8);
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void std::vector<std::shared_ptr<ta2::TextureAtlasRegion>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<ta2::TextureAtlasRegion>*>,std::__wrap_iter<std::shared_ptr<ta2::TextureAtlasRegion>*>>(void **a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = a3;
  uint64_t v8 = *a1;
  unint64_t v9 = (unint64_t)a1[1];
  uint64_t v10 = a2 - (void)*a1;
  uint64_t v11 = v10 >> 4;
  unint64_t v12 = (unint64_t)*a1 + (v10 & 0xFFFFFFFFFFFFFFF0);
  long long v13 = a1[2];
  if (a5 > (uint64_t)&v13[-v9] >> 4)
  {
    unint64_t v14 = a5 + ((uint64_t)(v9 - (void)v8) >> 4);
    if (v14 >> 60) {
      abort();
    }
    uint64_t v15 = v13 - (unsigned char *)v8;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      long long v17 = (char *)operator new(16 * v16);
    }
    else
    {
      long long v17 = 0;
    }
    v23 = &v17[16 * v11];
    v24 = &v23[16 * a5];
    v25 = v23;
    do
    {
      uint64_t v26 = v6[1];
      *(void *)v25 = *v6;
      *((void *)v25 + 1) = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      v25 += 16;
      v6 += 2;
    }
    while (v25 != v24);
    v27 = *a1;
    if (*a1 != (void *)v12)
    {
      v28 = (void *)v12;
      do
      {
        long long v29 = *((_OWORD *)v28 - 1);
        v28 -= 2;
        *((_OWORD *)v23 - 1) = v29;
        v23 -= 16;
        void *v28 = 0;
        v28[1] = 0;
      }
      while (v28 != v27);
    }
    v30 = a1[1];
    if (v30 != (void *)v12)
    {
      do
      {
        *(_OWORD *)v24 = *(_OWORD *)v12;
        v24 += 16;
        *(void *)unint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        v12 += 16;
      }
      while ((void *)v12 != v30);
      unint64_t v12 = (unint64_t)a1[1];
    }
    v31 = *a1;
    *a1 = v23;
    a1[1] = v24;
    for (a1[2] = &v17[16 * v16]; (void *)v12 != v31; v12 -= 16)
    {
      v32 = *(std::__shared_weak_count **)(v12 - 8);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v31)
    {
      operator delete(v31);
    }
    return;
  }
  uint64_t v18 = (uint64_t)(v9 - v12) >> 4;
  if (v18 >= a5)
  {
    v19 = &a3[2 * a5];
    v21 = (char *)a1[1];
LABEL_42:
    v33 = (char *)(v12 + 16 * a5);
    v34 = &v21[-16 * a5];
    v35 = v21;
    if ((unint64_t)v34 < v9)
    {
      v35 = v21;
      do
      {
        *(_OWORD *)v35 = *(_OWORD *)v34;
        v35 += 16;
        *(void *)v34 = 0;
        *((void *)v34 + 1) = 0;
        v34 += 16;
      }
      while ((unint64_t)v34 < v9);
    }
    a1[1] = v35;
    if (v21 != v33)
    {
      v36 = (std::__shared_weak_count **)(v21 - 8);
      uint64_t v37 = 16 * ((v21 - v33) >> 4);
      uint64_t v38 = (uint64_t)&v8[2 * v11 - 2];
      do
      {
        v39 = (void *)(v38 + v37);
        long long v40 = *(_OWORD *)(v38 + v37);
        void *v39 = 0;
        v39[1] = 0;
        v41 = *v36;
        *(_OWORD *)(v36 - 1) = v40;
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        v36 -= 2;
        v37 -= 16;
      }
      while (v37);
    }
    for (; v6 != v19; v12 += 16)
    {
      uint64_t v43 = *v6;
      uint64_t v42 = v6[1];
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      v44 = *(std::__shared_weak_count **)(v12 + 8);
      *(void *)unint64_t v12 = v43;
      *(void *)(v12 + 8) = v42;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      v6 += 2;
    }
    return;
  }
  v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    v21 = (char *)a1[1];
  }
  else
  {
    v20 = &a3[2 * v18];
    v21 = (char *)a1[1];
    do
    {
      uint64_t v22 = v20[1];
      *(void *)v21 = *v20;
      *((void *)v21 + 1) = v22;
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      }
      v21 += 16;
      v20 += 2;
    }
    while (v20 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v9 - v12) >= 1) {
    goto LABEL_42;
  }
}

void ta2::TextureAtlas::createReloadRegionItems(__n128 **a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  v4 = a1[1];
  uint64_t v6 = *a1;
  a1[1] = 0;
  *a1 = 0;
  a1[2] = 0;
  size_t v7 = (char *)v4 - (char *)v6;
  uint64_t v8 = v4 - v6;
  if (v4 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v9 = (__n128 *)operator new(v7);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v8];
  }
  std::vector<ta2::TextureAtlas::RegionItem>::reserve(a2, v8 - 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  if (v4 == v6)
  {
    if (v6) {
      goto LABEL_33;
    }
    return;
  }
  uint64_t v10 = v6;
  do
  {
    unint64_t v12 = v10->n128_u64[0];
    if (*(unsigned char *)(v10->n128_u64[0] + 80) == 2) {
      goto LABEL_8;
    }
    int v13 = (char)--*(unsigned char *)(v12 + 81);
    if (v13 > 0)
    {
      unint64_t v14 = a1[1];
      if (v14 >= a1[2])
      {
        uint64_t v11 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)a1, *v10);
      }
      else
      {
        v14->n128_u64[0] = v12;
        unint64_t v15 = v10->n128_u64[1];
        v14->n128_u64[1] = v15;
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = v14 + 1;
      }
      void *v5 = v11;
      goto LABEL_8;
    }
    char v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    unint64_t v16 = (std::__shared_weak_count *)v10->n128_u64[1];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v23 = v12;
      *((void *)&v23 + 1) = v16;
    }
    else
    {
      *(void *)&long long v23 = v12;
    }
    char v27 = 1;
    unint64_t v17 = v10->n128_u64[0];
    uint64_t v18 = *(void *)(v10->n128_u64[0] + 32);
    *((void *)&v26 + 1) = *(void *)(v10->n128_u64[0] + 24);
    uint64_t v19 = *(void *)(v17 + 40);
    LODWORD(v25) = v18 - 1;
    DWORD1(v25) = (unint64_t)(v18 - 0x100000000) >> 32;
    DWORD2(v25) = v19 + 1;
    HIDWORD(v25) = (unint64_t)(v19 + 0x100000000) >> 32;
    unint64_t v20 = *(void *)(a2 + 8);
    if (v20 >= *(void *)(a2 + 16))
    {
      *(void *)(a2 + 8) = std::vector<ta2::TextureAtlas::RegionItem>::__push_back_slow_path<ta2::TextureAtlas::RegionItem const&>((char **)a2, (uint64_t)&v23);
      if (!v16) {
        goto LABEL_8;
      }
LABEL_24:
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      goto LABEL_8;
    }
    *(void *)unint64_t v20 = v12;
    *(void *)(v20 + 8) = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v21 = v25;
    *(_OWORD *)(v20 + 16) = v24;
    *(_OWORD *)(v20 + 32) = v21;
    *(_OWORD *)(v20 + 48) = v26;
    *(unsigned char *)(v20 + 64) = v27;
    *(void *)(a2 + 8) = v20 + 72;
    if (v16) {
      goto LABEL_24;
    }
LABEL_8:
    ++v10;
  }
  while (v10 != v4);
  if (v6)
  {
    do
    {
      uint64_t v22 = (std::__shared_weak_count *)v4[-1].n128_u64[1];
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      --v4;
    }
    while (v4 != v6);
LABEL_33:
    operator delete(v6);
  }
}

void std::__shared_ptr_emplace<ta2::TextureAtlasPage>::__on_zero_shared(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_17999);
  }
  v2 = GEOGetVectorKitTextureAtlasLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(const char **)(a1 + 224);
    int v29 = 134218240;
    uint64_t v30 = a1 + 24;
    __int16 v31 = 2048;
    v32 = v3;
    _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_DEBUG, "TextureAtlasPage: Destroying TextureAtlasPage %p with Texture2D %llu", (uint8_t *)&v29, 0x16u);
  }
  v4 = *(char **)(a1 + 368);
  if (v4 != *(char **)(a1 + 376))
  {
    if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_17999);
    }
    uint64_t v5 = GEOGetVectorKitTextureAtlasLog(void)::log;
    BOOL v6 = os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_ERROR);
    size_t v7 = *(int32x2_t ***)(a1 + 368);
    v4 = *(char **)(a1 + 376);
    if (v6)
    {
      int v29 = 134218754;
      uint64_t v30 = (v4 - (char *)v7) >> 4;
      __int16 v31 = 2080;
      v32 = "_activeTextureRegions.empty()";
      __int16 v33 = 2080;
      v34 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/TextureAtlas2.cpp";
      __int16 v35 = 1024;
      int v36 = 556;
      _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_ERROR, "TextureAtlasPage: All textures should have been freed, since the atlas owns the textures. Destroyed page still has %lu active regions.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v29, 0x26u);
      size_t v7 = *(int32x2_t ***)(a1 + 368);
      v4 = *(char **)(a1 + 376);
    }
    if (v7 != (int32x2_t **)v4)
    {
      do
      {
        uint64_t v8 = *v7;
        v7 += 2;
        int32x2_t v9 = vsub_s32(v8[5], v8[4]);
        v8[3] = 0;
        v8[4] = 0;
        v8[5] = v9;
        v8[6] = 0;
        v8[7] = 0;
      }
      while (v7 != (int32x2_t **)v4);
      uint64_t v10 = *(char **)(a1 + 368);
      v4 = *(char **)(a1 + 376);
      if (v4 != v10)
      {
        do
        {
          uint64_t v11 = (std::__shared_weak_count *)*((void *)v4 - 1);
          if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          v4 -= 16;
        }
        while (v4 != v10);
        v4 = v10;
      }
    }
  }
  *(void *)(a1 + 376) = v4;
  (*(void (**)(void, void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32), *(void *)(a1 + 224));
  unint64_t v12 = *(void ***)(a1 + 392);
  if (v12)
  {
    int v13 = *(void ***)(a1 + 400);
    unint64_t v14 = *(void **)(a1 + 392);
    if (v13 != v12)
    {
      unint64_t v15 = *(void ***)(a1 + 400);
      do
      {
        uint64_t v18 = (char *)*(v15 - 3);
        v15 -= 3;
        unint64_t v17 = v18;
        if (v18)
        {
          uint64_t v19 = (char *)*(v13 - 2);
          unint64_t v16 = v17;
          if (v19 != v17)
          {
            do
            {
              unint64_t v20 = (std::__shared_weak_count *)*((void *)v19 - 1);
              if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
              v19 -= 16;
            }
            while (v19 != v17);
            unint64_t v16 = *v15;
          }
          *(v13 - 2) = v17;
          operator delete(v16);
        }
        int v13 = v15;
      }
      while (v15 != v12);
      unint64_t v14 = *(void **)(a1 + 392);
    }
    *(void *)(a1 + 400) = v12;
    operator delete(v14);
  }
  uint64_t v21 = *(void *)(a1 + 368);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 376);
    long long v23 = *(void **)(a1 + 368);
    if (v22 != v21)
    {
      do
      {
        long long v24 = *(std::__shared_weak_count **)(v22 - 8);
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        v22 -= 16;
      }
      while (v22 != v21);
      long long v23 = *(void **)(a1 + 368);
    }
    *(void *)(a1 + 376) = v21;
    operator delete(v23);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 304));
  std::mutex::~mutex((std::mutex *)(a1 + 240));
  *(void *)(a1 + 48) = &unk_1EF558FA0;
  *(void *)(a1 + 112) = &unk_1EF55A0D8;
  long long v25 = *(void **)(a1 + 168);
  if (v25)
  {
    *(void *)(a1 + 176) = v25;
    operator delete(v25);
  }
  long long v26 = *(void **)(a1 + 144);
  if (v26)
  {
    *(void *)(a1 + 152) = v26;
    operator delete(v26);
  }
  char v27 = *(void **)(a1 + 80);
  if (v27)
  {
    *(void *)(a1 + 88) = v27;
    operator delete(v27);
  }
  v28 = *(std::__shared_weak_count **)(a1 + 40);
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void std::allocate_shared[abi:nn180100]<ta2::TextureAtlasPage,std::allocator<ta2::TextureAtlasPage>,ta2::TextureAtlas &,gm::Matrix<unsigned int,2,1> &,unsigned int &,BOOL &,BOOL,std::shared_ptr<mre::GraphicsResourceStore> &,void>(void *a1, uint64_t a2, uint32x2_t *a3, unsigned int a4, char a5, char a6, uint64_t a7, std::__shared_weak_count *a8)
{
  unint64_t v16 = operator new(0x1A0uLL);
  unint64_t v17 = v16;
  v16[1] = 0;
  v16[2] = 0;
  *unint64_t v16 = &unk_1EF58A778;
  uint64_t v18 = v16 + 3;
  v21[0] = a7;
  v21[1] = a8;
  char v19 = a6 != 0;
  char v20 = a5 != 0;
  if (a8)
  {
    atomic_fetch_add_explicit(&a8->__shared_owners_, 1uLL, memory_order_relaxed);
    ta2::TextureAtlasPage::TextureAtlasPage((uint64_t)(v16 + 3), a2, a3, a4, v20, v19, v21);
    if (!atomic_fetch_add(&a8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a8->__on_zero_shared)(a8);
      std::__shared_weak_count::__release_weak(a8);
    }
  }
  else
  {
    ta2::TextureAtlasPage::TextureAtlasPage((uint64_t)(v16 + 3), a2, a3, a4, v20, v19, v21);
  }
  *a1 = v18;
  a1[1] = v17;
}

uint64_t ta2::TextureAtlasPage::TextureAtlasPage(uint64_t a1, uint64_t a2, uint32x2_t *a3, unsigned int a4, char a5, char a6, void *a7)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a7;
  uint64_t v12 = a7[1];
  *(void *)(a1 + 16) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = a3->i32[0];
  int v14 = a3->i32[1];
  *(void *)(a1 + 24) = &unk_1EF558FA0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 52) = 256;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = &unk_1EF55A0D8;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 116) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 108) = 512;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  unint64_t v15 = operator new(0x10uLL);
  *unint64_t v15 = 0;
  v15[1] = 0;
  *(void *)(a1 + 152) = v15 + 2;
  *(void *)(a1 + 160) = v15 + 2;
  *(void *)(a1 + 144) = v15;
  geo::SkylineBin::resize(a1 + 24, v13, v14, 1, 0);
  uint32x2_t v16 = *a3;
  __asm { FMOV            V1.2S, #1.0 }
  float32x2_t v22 = vdiv_f32(_D1, vcvt_f32_u32(*a3));
  *(uint32x2_t *)(a1 + 176) = *a3;
  *(float32x2_t *)(a1 + 184) = v22;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 850045863;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 850045863;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  if (a4)
  {
    long long v23 = (char *)operator new(24 * a4);
    bzero(v23, 24 * ((24 * (unint64_t)a4 - 24) / 0x18) + 24);
    *(void *)(a1 + 368) = v23;
    *(void *)(a1 + 376) = &v23[24 * ((24 * (unint64_t)a4 - 24) / 0x18) + 24];
    *(void *)(a1 + 384) = &v23[24 * a4];
  }
  *(unsigned char *)(a1 + 53) = a5;
  if (*(unsigned char *)(a1 + 80)) {
    *(unsigned char *)(a1 + 116) = a5;
  }
  if ((a6 & 1) == 0)
  {
    uint32x2_t v26 = v16;
    long long v24 = *(uint64_t (****)(void, uint32x2_t *))(a1 + 8);
    int v27 = *(_DWORD *)(*(void *)a1 + 32);
    int v28 = 3;
    *(void *)(a1 + 200) = (**v24)(v24, &v26);
  }
  return a1;
}

__n128 geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::erase(uint64_t a1, void *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2 < (*(void *)(a1 + 32) - v3) >> 3)
  {
    unint64_t v4 = *(void *)(v3 + 8 * v2);
    BOOL v6 = v4 == 0;
    unint64_t v5 = HIDWORD(v4);
    BOOL v6 = !v6 && HIDWORD(*a2) == v5;
    if (v6)
    {
      uint64_t v10 = *(unint64_t **)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = *(unint64_t **)a1;
        uint64_t v13 = (uint64_t)v10 - *(void *)a1;
        uint64_t v14 = v13 >> 3;
        unint64_t v15 = (v13 >> 3) + 1;
        if (v15 >> 61) {
          abort();
        }
        uint64_t v16 = v9 - (void)v12;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          if (v17 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v18 = operator new(8 * v17);
        }
        else
        {
          uint64_t v18 = 0;
        }
        char v19 = (unint64_t *)&v18[8 * v14];
        char v20 = &v18[8 * v17];
        unint64_t *v19 = v2;
        uint64_t v11 = v19 + 1;
        if (v10 != v12)
        {
          unint64_t v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58) {
            goto LABEL_34;
          }
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20) {
            goto LABEL_34;
          }
          uint64_t v22 = (v21 >> 3) + 1;
          long long v23 = &v18[8 * v14 - 16];
          long long v24 = v10 - 2;
          uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            _OWORD *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              unint64_t v27 = *--v10;
              *--char v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v11;
        *(void *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          uint64_t v3 = *(void *)(a1 + 24);
        }
      }
      else
      {
        *uint64_t v10 = v2;
        uint64_t v11 = v10 + 1;
      }
      *(void *)(a1 + 8) = v11;
      uint64_t v28 = *(void *)(v3 + 8 * *(unsigned int *)a2);
      uint64_t v30 = *(void *)(a1 + 48);
      uint64_t v29 = *(void *)(a1 + 56);
      uint64_t v31 = *(void *)(*(void *)(a1 + 72) + 0x6666666666666668 * ((unint64_t)(v29 - v30) >> 3) - 8);
      uint64_t v32 = v30 + 40 * v28;
      uint64_t v33 = *(void *)(v32 + 32);
      __n128 result = *(__n128 *)v32;
      long long v35 = *(_OWORD *)(v32 + 16);
      char v36 = *(unsigned char *)(v29 - 8);
      long long v37 = *(_OWORD *)(v29 - 24);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)(v29 - 40);
      *(_OWORD *)(v32 + 16) = v37;
      *(unsigned char *)(v32 + 32) = v36;
      *(_OWORD *)(v29 - 24) = v35;
      *(__n128 *)(v29 - 40) = result;
      *(unsigned char *)(v29 - 8) = v33;
      *(_DWORD *)(*(void *)(a1 + 24) + 8 * v31) = v28;
      uint64_t v38 = 8 * v28;
      uint64_t v39 = *(void *)(a1 + 72);
      long long v40 = *(void **)(a1 + 80);
      uint64_t v41 = *(void *)(v39 + v38);
      uint64_t v42 = *--v40;
      *(void *)(v39 + v38) = v42;
      *long long v40 = v41;
      *(void *)(a1 + 56) -= 40;
      *(void *)(a1 + 80) = v40;
      uint64_t v43 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(void *)(a1 + 24) + v43 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(a1 + 24) + v43 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(void *)(a1 + 24) + v43) = (*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

void geo::SkylineBin::resize(uint64_t a1, int a2, int a3, char a4, int a5)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(unsigned char *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 40) = v8;
  unint64_t v9 = *(void *)(a1 + 48);
  if ((unint64_t)v8 >= v9)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v8) >> 2);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= 1) {
      uint64_t v12 = 1;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13 > 0x1555555555555555) {
      goto LABEL_23;
    }
    uint64_t v14 = 3 * v13;
    unint64_t v15 = operator new(12 * v13);
    uint64_t v16 = (char *)&v15[v14];
    *(void *)unint64_t v15 = 0;
    v15[2] = a2;
    uint64_t v10 = v15 + 3;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v15 + 3;
    *(void *)(a1 + 48) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v8 = 0;
    uint64_t v10 = v8 + 3;
    v8[2] = a2;
  }
  *(void *)(a1 + 40) = v10;
  if (!*(unsigned char *)(a1 + 56)) {
    return;
  }
  char v17 = *(unsigned char *)(a1 + 28);
  *(_DWORD *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 76) = a3;
  *(_WORD *)(a1 + 84) = 769;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 144) = v17;
  *(void *)(a1 + 104) = *(void *)(a1 + 96);
  uint64_t v18 = *(_DWORD **)(a1 + 120);
  *(void *)(a1 + 128) = v18;
  unint64_t v19 = *(void *)(a1 + 136);
  if ((unint64_t)v18 >= v19)
  {
    uint64_t v20 = v19 - (void)v18;
    uint64_t v21 = v20 >> 3;
    if ((unint64_t)(v20 >> 3) <= 1) {
      uint64_t v21 = 1;
    }
    BOOL v22 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (!(v23 >> 60))
    {
      uint64_t v24 = 4 * v23;
      uint64_t v25 = operator new(16 * v23);
      *(void *)uint64_t v25 = 0;
      v25[2] = a2;
      v25[3] = a3;
      *(void *)(a1 + 120) = v25;
      *(void *)(a1 + 128) = v25 + 4;
      *(void *)(a1 + 136) = &v25[v24];
      if (v18) {
        operator delete(v18);
      }
      goto LABEL_21;
    }
LABEL_23:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  *(void *)uint64_t v18 = 0;
  v18[2] = a2;
  v18[3] = a3;
LABEL_21:
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1AE0ACC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1AE0B2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1AE0B8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_1A1AE0BEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v11 = &v10[24 * v6];
    *(void *)unint64_t v11 = 0x9C4E7BCF9B8D6334;
    *((void *)v11 + 1) = "md::ls::PipelineSetup]";
    *((void *)v11 + 2) = 21;
    unint64_t v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        long long v12 = *(_OWORD *)(v3 - 24);
        *((void *)v11 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      uint64_t v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0x9C4E7BCF9B8D6334;
    *((void *)v3 + 1) = "md::ls::PipelineSetup]";
    *((void *)v3 + 2) = 21;
    unint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v3);
  unint64_t v6 = v3;
  unint64_t v7 = (void *)v5;
  uint64_t v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  unint64_t v9 = (void *)v8;
  uint64_t v10 = (void *)(v4 + 32);
  if (v7[8] - v7[7] < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v10 = v7 + 4;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < v10[4] - v10[3]) {
    uint64_t v10 = (void *)(v8 + 32);
  }
  v152 = v10;
  v153 = (void *)v4;
  v154 = v7;
  v155 = (void *)v8;
  long long v12 = (void *)v10[3];
  unint64_t v11 = (void *)v10[4];
  v156 = v12;
  v151 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152))
  {
    unint64_t v13 = v12 + 1;
    do
    {
      long long v12 = v13;
      v156 = v13;
      if (v13 == v151) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152);
      unint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v151 != v12)
  {
    __n128 result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v148 = v7;
    v149 = result;
    v150 = v9;
    while (1)
    {
      *__n128 result = *v12;
      unint64_t v16 = *v12;
      uint64_t v17 = HIDWORD(*v12);
      unint64_t v18 = *v12 >> 39;
      uint64_t v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v7[7],
            uint64_t v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        long long v26 = (unint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        long long v26 = (unint64_t *)v7[11];
      }
      uint64_t v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v18)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v31 = v9[7],
            uint64_t v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v17) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v9[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        char v36 = 0;
      }
      else {
        char v36 = (unint64_t *)v35;
      }
      uint64_t v37 = **(void **)(v2 + 8);
      uint64_t v38 = *(void **)v37;
      uint64_t v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_41;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_41:
        uint64_t v41 = 0;
      }
      else
      {
        uint64_t v41 = (void *)v38[3];
        long long v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      uint64_t v42 = **(void **)(v2 + 8);
      uint64_t v43 = *(void **)v42;
      v44 = *(void **)(v42 + 8);
      if (v43 != v44)
      {
        while (*v43 != 0x348A0B0E758C07C2)
        {
          v43 += 5;
          if (v43 == v44) {
            goto LABEL_50;
          }
        }
      }
      if (v43 == v44)
      {
LABEL_50:
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v45 = v43[3];
        v46 = (std::__shared_weak_count *)v43[4];
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      uint64_t v47 = (uint64_t)(v41 + 37);
      unint64_t v48 = *v36;
      unint64_t v49 = *v36;
      uint64_t v50 = v41[50];
      unint64_t v51 = (v41[51] - v50) >> 3;
      if (v49 < v51
        && (uint64_t v52 = *(void *)(v50 + 8 * v49)) != 0
        && HIDWORD(v48) == HIDWORD(v52)
        && ((uint64_t v53 = v41[53], v53 + 16 * v52 != v41[54]) ? (v54 = v53 == 0) : (v54 = 1), !v54))
      {
        uint64_t v63 = v2;
        uint64_t v64 = *(void *)(v50 + 8 * v49);
        v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v48, v36);
        ++v65[3];
        uint64_t v66 = v53 + 16 * v64;
        uint64_t v2 = v63;
        unint64_t v7 = v148;
        v55 = *(void **)(v66 + 8);
        unint64_t v48 = *v36;
        uint64_t v50 = v41[50];
        unint64_t v49 = *v36;
        if (v49 >= (v41[51] - v50) >> 3) {
          goto LABEL_70;
        }
      }
      else
      {
        v55 = 0;
        if (v49 >= v51) {
          goto LABEL_70;
        }
      }
      uint64_t v56 = *(void *)(v50 + 8 * v49);
      if (!v56
        || HIDWORD(v48) != HIDWORD(v56)
        || ((uint64_t v57 = v41[53], v58 = (uint64_t *)v41[54], v59 = (uint64_t *)(v57 + 16 * v56), v59 != v58)
          ? (BOOL v60 = v57 == 0)
          : (BOOL v60 = 1),
            v60))
      {
LABEL_70:
        uint64_t v62 = 0;
        goto LABEL_71;
      }
      v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v47, v48, v36);
      ++v61[3];
      uint64_t v62 = *v59;
LABEL_71:
      unint64_t v67 = *v26;
      unint64_t v157 = v67;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v45 + 104));
      uint64_t v68 = *(void *)(v45 + 504);
      if (v67 < (unint64_t)((*(void *)(v45 + 512) - v68) >> 3)
        && ((uint64_t v69 = *(void *)(v68 + 8 * v67)) != 0 ? (v70 = HIDWORD(v67) == HIDWORD(v69)) : (v70 = 0),
            v70))
      {
        v72 = (uint64_t *)(*(void *)(v45 + 528) + 40 * v69);
        v71 = *(uint64_t **)(v45 + 536);
      }
      else
      {
        v71 = *(uint64_t **)(v45 + 536);
        v72 = v71;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v45 + 104));
      v73 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v45 + 440), v157, &v157);
      uint64_t v74 = 0;
      ++v73[3];
      if (v72 != v71 && v72) {
        uint64_t v74 = *v72;
      }
      {
        gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v75 = v55[1];
      if (!v75) {
        goto LABEL_152;
      }
      unint64_t v76 = gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index;
      uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        uint64_t v78 = gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index >= v75) {
          uint64_t v78 = gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index % v75;
        }
      }
      else
      {
        uint64_t v78 = (v75 - 1) & gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index;
      }
      v79 = *(void **)(*v55 + 8 * v78);
      if (!v79) {
        goto LABEL_152;
      }
      v80 = (void *)*v79;
      if (!v80) {
        goto LABEL_152;
      }
      if (v77.u32[0] < 2uLL)
      {
        unint64_t v81 = v75 - 1;
        while (1)
        {
          uint64_t v83 = v80[1];
          if (gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index == v83)
          {
            if (v80[2] == gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index) {
              goto LABEL_103;
            }
          }
          else if ((v83 & v81) != v78)
          {
            goto LABEL_152;
          }
          v80 = (void *)*v80;
          if (!v80) {
            goto LABEL_152;
          }
        }
      }
      while (1)
      {
        unint64_t v82 = v80[1];
        if (gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index == v82) {
          break;
        }
        if (v82 >= v75) {
          v82 %= v75;
        }
        if (v82 != v78) {
          goto LABEL_152;
        }
LABEL_91:
        v80 = (void *)*v80;
        if (!v80) {
          goto LABEL_152;
        }
      }
      if (v80[2] != gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index) {
        goto LABEL_91;
      }
LABEL_103:
      {
        if (v147)
        {
          md::typeToIntMap(v147);
          unint64_t v7 = v148;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_187;
      }
      uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        unint64_t v85 = v76;
        if (v76 >= qword_1E957F030) {
          unint64_t v85 = v76 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v85 = (qword_1E957F030 - 1) & v76;
      }
      v86 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v85);
      if (!v86 || (v87 = *v86) == 0) {
LABEL_187:
      }
        abort();
      if (v84.u32[0] < 2uLL)
      {
        while (1)
        {
          v89 = v87[1];
          if ((uint64_t *)v76 == v89)
          {
            if (v87[2] == (uint64_t *)v76) {
              goto LABEL_124;
            }
          }
          else if (((unint64_t)v89 & (qword_1E957F030 - 1)) != v85)
          {
            goto LABEL_187;
          }
          v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
        }
      }
      while (2)
      {
        unint64_t v88 = (unint64_t)v87[1];
        if (v76 != v88)
        {
          if (v88 >= qword_1E957F030) {
            v88 %= (unint64_t)qword_1E957F030;
          }
          if (v88 != v85) {
            goto LABEL_187;
          }
LABEL_114:
          v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
          continue;
        }
        break;
      }
      if (v87[2] != (uint64_t *)v76) {
        goto LABEL_114;
      }
LABEL_124:
      uint64_t v91 = *((int *)v87 + 6);
      uint64_t v90 = *((int *)v87 + 7);
      if (v91 != -1)
      {
        uint64_t v92 = *(void *)(v62 + 16);
        if (v92)
        {
          uint64_t v93 = *(void *)(*(void *)(v92 + 48) + 72);
          uint64_t v94 = *(void *)(v93 + 8);
          uint64_t v95 = *(void *)(v94 + 72);
          if (v95)
          {
            uint64_t v96 = 0;
            uint64_t v97 = *(void *)(v94 + 64);
            v98 = (unsigned __int8 *)(v97 + 1);
            while (1)
            {
              int v99 = *v98;
              v98 += 2;
              if (v99 == v91) {
                break;
              }
              if (v95 == ++v96) {
                goto LABEL_130;
              }
            }
            v106 = (unsigned __int8 *)(v97 + 2 * v96);
LABEL_137:
            *(void *)(*(void *)(v62 + 96) + 8 * *v106) = v74;
          }
          else
          {
LABEL_130:
            uint64_t v100 = *(void *)(v93 + 24);
            uint64_t v101 = *(void *)(v100 + 72);
            if (v101)
            {
              uint64_t v102 = 0;
              uint64_t v103 = *(void *)(v100 + 64);
              v104 = (unsigned __int8 *)(v103 + 1);
              while (1)
              {
                int v105 = *v104;
                v104 += 2;
                if (v105 == v91) {
                  break;
                }
                if (v101 == ++v102) {
                  goto LABEL_138;
                }
              }
              v106 = (unsigned __int8 *)(v103 + 2 * v102);
              goto LABEL_137;
            }
          }
        }
      }
LABEL_138:
      if (v90 != -1)
      {
        uint64_t v107 = *(void *)(v62 + 16);
        if (v107)
        {
          uint64_t v108 = *(void *)(*(void *)(v107 + 48) + 72);
          uint64_t v109 = *(void *)(v108 + 8);
          uint64_t v110 = *(void *)(v109 + 72);
          if (v110)
          {
            uint64_t v111 = 0;
            uint64_t v112 = *(void *)(v109 + 64);
            v113 = (unsigned __int8 *)(v112 + 1);
            while (1)
            {
              int v114 = *v113;
              v113 += 2;
              if (v114 == v90) {
                break;
              }
              if (v110 == ++v111) {
                goto LABEL_144;
              }
            }
            v121 = (unsigned __int8 *)(v112 + 2 * v111);
LABEL_151:
            *(void *)(*(void *)(v62 + 96) + 8 * *v121) = v74;
          }
          else
          {
LABEL_144:
            uint64_t v115 = *(void *)(v108 + 24);
            uint64_t v116 = *(void *)(v115 + 72);
            if (v116)
            {
              uint64_t v117 = 0;
              uint64_t v118 = *(void *)(v115 + 64);
              v119 = (unsigned __int8 *)(v118 + 1);
              while (1)
              {
                int v120 = *v119;
                v119 += 2;
                if (v120 == v90) {
                  break;
                }
                if (v116 == ++v117) {
                  goto LABEL_152;
                }
              }
              v121 = (unsigned __int8 *)(v118 + 2 * v117);
              goto LABEL_151;
            }
          }
        }
      }
LABEL_152:
      long long v12 = (void *)v152[4];
      v122 = v156 + 1;
      v156 = v122;
      if (v122 == v12)
      {
        __n128 result = v149;
        unint64_t v9 = v150;
      }
      else
      {
        uint64_t v123 = v153[4];
        __n128 result = v149;
        unint64_t v9 = v150;
        do
        {
          unint64_t v124 = *((unsigned int *)v122 + 1);
          unint64_t v125 = v124 >> 7;
          if (v124 >> 7 < (v153[5] - v123) >> 3)
          {
            uint64_t v126 = *(void *)(v123 + 8 * v125);
            if (v126)
            {
              uint64_t v127 = v124 & 0x7F;
              unint64_t v128 = *(unsigned __int16 *)(v126 + 2 * v127);
              uint64_t v129 = v153[7];
              uint64_t v130 = v153[8];
              if (v128 < (v130 - v129) >> 3)
              {
                uint64_t v131 = v129 + 8 * v128;
                if (v131 != v130 && *(_DWORD *)(v131 + 4) == v124)
                {
                  uint64_t v133 = v154[4];
                  if (v125 < (v154[5] - v133) >> 3)
                  {
                    uint64_t v134 = *(void *)(v133 + 8 * v125);
                    if (v134)
                    {
                      unint64_t v135 = *(unsigned __int16 *)(v134 + 2 * v127);
                      uint64_t v136 = v154[7];
                      uint64_t v137 = v154[8];
                      if (v135 < (v137 - v136) >> 3)
                      {
                        uint64_t v138 = v136 + 8 * v135;
                        if (v138 != v137 && *(_DWORD *)(v138 + 4) == v124)
                        {
                          uint64_t v140 = v155[4];
                          if (v125 < (v155[5] - v140) >> 3)
                          {
                            uint64_t v141 = *(void *)(v140 + 8 * v125);
                            if (v141)
                            {
                              unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * v127);
                              uint64_t v144 = v155[7];
                              uint64_t v143 = v155[8];
                              if (v142 < (v143 - v144) >> 3)
                              {
                                uint64_t v145 = v144 + 8 * v142;
                                if (*(_DWORD *)(v145 + 4) == v124 && v145 != v143)
                                {
                                  long long v12 = v122;
                                  goto LABEL_180;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v122;
        }
        while (v122 != v12);
        v122 = v12;
LABEL_180:
        v156 = v122;
      }
      if (v151 == v12) {
        goto LABEL_186;
      }
    }
  }
  __n128 result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_186:
  *__n128 result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A1AE16C8(_Unwind_Exception *a1)
{
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xDD9825BCFA7911B2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDD9825BCFA7911B2;
    if (*(void *)&v1 <= 0xDD9825BCFA7911B2) {
      unint64_t v3 = 0xDD9825BCFA7911B2 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDD9825BCFA7911B2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDD9825BCFA7911B2)
      {
        if (v5[2] == 0xDD9825BCFA7911B2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDD9825BCFA7911B2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDD9825BCFA7911B2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1AE191C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(int8x8_t *a1)
{
  uint64_t v10 = 0x3BD94B5787965DA7;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3BD94B5787965DA7;
    if (*(void *)&v1 <= 0x3BD94B5787965DA7uLL) {
      uint64_t v3 = 0x3BD94B5787965DA7uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3BD94B5787965DA7;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3BD94B5787965DA7)
      {
        if (v5[2] == 0x3BD94B5787965DA7) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3BD94B5787965DA7) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3BD94B5787965DA7) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1AE1B8C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *std::__formatter::__format_integer[abi:nn180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unsigned int a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, unsigned char *a8, unsigned int a9)
{
  unint64_t v9 = (char *)a7;
  unsigned int v13 = a1;
  char v14 = a3;
  if (a5)
  {
    char v15 = 45;
LABEL_7:
    *a6 = v15;
    uint64_t v17 = (int8x16_t *)(a6 + 1);
    goto LABEL_8;
  }
  int v16 = (a3 >> 3) & 3;
  if (v16 == 2)
  {
    char v15 = 43;
    goto LABEL_7;
  }
  uint64_t v17 = (int8x16_t *)a6;
  if (v16 == 3)
  {
    char v15 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      __int8 v18 = *a8;
      if (*a8)
      {
        uint64_t v19 = a8 + 1;
        do
        {
          v17->i8[0] = v18;
          uint64_t v17 = (int8x16_t *)((char *)v17 + 1);
          int v20 = *v19++;
          __int8 v18 = v20;
        }
        while (v20);
      }
    }
  }
  HIDWORD(v22) = a9;
  LODWORD(v22) = a9 - 2;
  int v21 = v22 >> 1;
  __src = a6;
  switch(v21)
  {
    case 4:
      if (a7 - (uint64_t)v17 > 9
        || (unsigned int v23 = (1233 * (32 - __clz(a1 | 1))) >> 12,
            a7 - (uint64_t)v17 >= (((__PAIR64__(v23, a1) - std::__itoa::__pow10_32[v23]) >> 32) + 1)))
      {
        uint64_t v24 = (uint64_t)std::__itoa::__base_10_u32[abi:nn180100](v17, a1);
LABEL_17:
        unint64_t v9 = (char *)v24;
      }
      break;
    case 0:
      uint64_t v24 = std::__to_chars_integral[abi:nn180100]<2u,unsigned int,0>((uint64_t)v17, a7, a1);
      goto LABEL_17;
    case 3:
      uint64_t v24 = std::__to_chars_integral[abi:nn180100]<8u,unsigned int,0>((uint64_t)v17, a7, a1);
      goto LABEL_17;
    case 7:
      uint64_t v24 = std::__to_chars_integral[abi:nn180100]<16u,unsigned int,0>((uint64_t)v17, a7, a1);
      goto LABEL_17;
    default:
      uint64_t v77 = a7 - (void)v17;
      int v78 = std::__to_chars_integral_width[abi:nn180100]<unsigned int>(a1, a9);
      if (v77 >= v78)
      {
        unint64_t v9 = &v17->i8[v78];
        v79 = v9 - 1;
        do
        {
          *v79-- = a0123456789abcd[v13 - v13 / a9 * a9];
          BOOL v80 = v13 >= a9;
          v13 /= a9;
        }
        while (v80);
      }
      break;
  }
  unint64_t v85 = v9;
  if ((v14 & 0x40) == 0)
  {
LABEL_68:
    unint64_t v49 = HIDWORD(a3);
    uint64_t v50 = *(void **)a2;
    if ((v14 & 7) == 4)
    {
      unint64_t v84 = a4;
      unint64_t v51 = (int8x16_t *)__src;
      size_t v52 = (char *)v17 - (unsigned char *)__src;
      size_t v54 = v50[1];
      uint64_t v53 = v50[2];
      if (v53 + (char *)v17 - (unsigned char *)__src >= v54)
      {
        ((void (*)(void))v50[3])(*v50);
        unint64_t v51 = (int8x16_t *)__src;
        uint64_t v53 = 0;
        v50[2] = 0;
        size_t v54 = v50[1];
      }
      size_t v55 = v52 - v54;
      if (v52 >= v54)
      {
        if (v54) {
          memmove((void *)(*v50 + v53), __src, v54);
        }
        v50[2] = v54;
        ((void (*)(void, size_t, void))v50[3])(*v50, v54, v50[4]);
        v50[2] = 0;
        if (v55)
        {
          v58 = (char *)__src + v54;
          do
          {
            if (v50[1] >= v55) {
              size_t v59 = v55;
            }
            else {
              size_t v59 = v50[1];
            }
            if (v59) {
              memmove((void *)*v50, v58, v59);
            }
            v50[2] = v59;
            v58 += v59;
            v55 -= v59;
            ((void (*)(void, size_t, void))v50[3])(*v50, v59, v50[4]);
            v50[2] = 0;
          }
          while (v55);
        }
      }
      else
      {
        if (v17 != v51)
        {
          memmove((void *)(*v50 + v53), v51, v52);
          uint64_t v53 = v50[2];
        }
        v50[2] = v53 + v52;
      }
      unsigned __int8 v57 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v52) {
        int v60 = v52;
      }
      else {
        int v60 = HIDWORD(a3);
      }
      unint64_t v49 = (HIDWORD(a3) - v60);
      uint64_t v50 = *(void **)a2;
      unsigned __int8 v56 = 48;
      a4 = v84;
      unint64_t v9 = v85;
    }
    else
    {
      unsigned __int8 v56 = BYTE4(a4);
      unsigned __int8 v57 = a3;
      uint64_t v17 = (int8x16_t *)__src;
    }
    uint64_t v61 = a3 & 0xFFFFFF00 | (v49 << 32) | v57;
    unint64_t v62 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v56 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v17, v9, v50, v61, v62);
    }
    else {
      std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v17->i8, v9 - (char *)v17, v50, v61, v62, v9 - (char *)v17);
    }
    return v50;
  }
  if (!*(unsigned char *)(a2 + 40))
  {
    MEMORY[0x1A6239040](&v90);
    if (*(unsigned char *)(a2 + 40))
    {
      std::locale::operator=((std::locale *)(a2 + 32), &v90);
    }
    else
    {
      std::locale::locale((std::locale *)(a2 + 32), &v90);
      *(unsigned char *)(a2 + 40) = 1;
    }
    std::locale::~locale(&v90);
  }
  int64_t v25 = v9 - (char *)v17;
  std::locale::locale(&v90, (const std::locale *)(a2 + 32));
  long long v26 = std::locale::use_facet(&v90, MEMORY[0x1E4FBA2A0]);
  std::locale::~locale(&v90);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v26->__vftable[1].__on_zero_shared)(&v90, v26);
  if ((char)v92 < 0)
  {
    locale = (unsigned __int8 *)v90.__locale_;
    uint64_t v28 = v91;
    if (v91 && v25 > *(char *)v90.__locale_)
    {
      unint64_t v82 = v26;
      unint64_t v29 = v90.__locale_;
      goto LABEL_31;
    }
    operator delete(v90.__locale_);
    goto LABEL_67;
  }
  if (!v92 || v25 <= SLOBYTE(v90.__locale_))
  {
LABEL_67:
    unint64_t v9 = v85;
    goto LABEL_68;
  }
  unint64_t v82 = v26;
  locale = (unsigned __int8 *)&v90;
  unint64_t v29 = v90.__locale_;
  uint64_t v28 = v91;
LABEL_31:
  unint64_t v81 = *(void **)a2;
  __p = 0;
  size_t v88 = 0;
  unint64_t v89 = 0;
  uint64_t v30 = (char *)v29 + v28;
  uint64_t v31 = (char *)&v90 + v92;
  if ((v92 & 0x80u) != 0) {
    uint64_t v31 = v30;
  }
  int64_t v32 = (char)*locale;
  char v33 = *locale;
  BOOL v34 = v25 <= v32;
  uint64_t v35 = v25 - v32;
  unint64_t v83 = a4;
  if (v34)
  {
    unsigned int v65 = 0;
    char v64 = v33 + v35;
    int v66 = (int)v85;
    unint64_t v67 = v82;
    goto LABEL_97;
  }
  char v36 = v31 - 1;
  do
  {
    if ((SHIBYTE(v89) & 0x80000000) == 0)
    {
      if (HIBYTE(v89) != 22)
      {
        size_t v38 = HIBYTE(v89);
        HIBYTE(v89) = (HIBYTE(v89) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_58;
      }
      uint64_t v37 = &__p;
      size_t v38 = 22;
LABEL_43:
      if (v38 + 1 > 2 * v38) {
        unint64_t v40 = v38 + 1;
      }
      else {
        unint64_t v40 = 2 * v38;
      }
      uint64_t v41 = (v40 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17) {
        uint64_t v41 = v40 | 7;
      }
      if (v40 >= 0x17) {
        size_t v39 = v41 + 1;
      }
      else {
        size_t v39 = 23;
      }
LABEL_51:
      uint64_t v42 = (char *)operator new(v39);
      p_p = v42;
      if (!v38 || (memmove(v42, v37, v38), v38 != 22)) {
        operator delete(v37);
      }
      __p = p_p;
      unint64_t v89 = v39 | 0x8000000000000000;
      goto LABEL_57;
    }
    size_t v38 = (v89 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v88 == v38)
    {
      if ((v89 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_130;
      }
      uint64_t v37 = __p;
      size_t v39 = 0x7FFFFFFFFFFFFFF7;
      if (v38 >= 0x3FFFFFFFFFFFFFF3) {
        goto LABEL_51;
      }
      goto LABEL_43;
    }
    p_p = (char *)__p;
    size_t v38 = v88;
LABEL_57:
    size_t v88 = v38 + 1;
LABEL_58:
    v44 = &p_p[v38];
    char *v44 = v33;
    v44[1] = 0;
    if (locale == (unsigned __int8 *)v36)
    {
      char v33 = *v36;
      locale = (unsigned __int8 *)v36;
    }
    else
    {
      uint64_t v45 = (char *)(locale + 1);
      v46 = (char *)(locale + 1);
      do
      {
        int v47 = *v46++;
        char v33 = v47;
        if (v47) {
          BOOL v48 = 1;
        }
        else {
          BOOL v48 = v45 == v36;
        }
        uint64_t v45 = v46;
      }
      while (!v48);
      locale = (unsigned __int8 *)(v46 - 1);
    }
    v35 -= v33;
  }
  while (v35 > 0);
  char v64 = v33 + v35;
  if (SHIBYTE(v89) < 0)
  {
    size_t v69 = (v89 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v66 = (int)v85;
    unint64_t v67 = v82;
    if (v88 == v69)
    {
      if ((v89 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
LABEL_130:
      }
        abort();
      uint64_t v68 = __p;
      size_t v71 = 0x7FFFFFFFFFFFFFF7;
      if (v69 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_101:
        if (v69 + 1 > 2 * v69) {
          unint64_t v72 = v69 + 1;
        }
        else {
          unint64_t v72 = 2 * v69;
        }
        uint64_t v73 = (v72 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v72 | 7) != 0x17) {
          uint64_t v73 = v72 | 7;
        }
        if (v72 >= 0x17) {
          size_t v71 = v73 + 1;
        }
        else {
          size_t v71 = 23;
        }
      }
      uint64_t v74 = (char *)operator new(v71);
      BOOL v70 = v74;
      if (!v69 || (memmove(v74, v68, v69), v69 != 22)) {
        operator delete(v68);
      }
      __p = v70;
      unint64_t v89 = v71 | 0x8000000000000000;
    }
    else
    {
      BOOL v70 = (char *)__p;
      size_t v69 = v88;
    }
    size_t v88 = v69 + 1;
  }
  else
  {
    unsigned int v65 = HIBYTE(v89);
    int v66 = (int)v85;
    unint64_t v67 = v82;
    if (HIBYTE(v89) == 22)
    {
      uint64_t v68 = &__p;
      size_t v69 = 22;
      goto LABEL_101;
    }
LABEL_97:
    size_t v69 = v65;
    HIBYTE(v89) = (v65 + 1) & 0x7F;
    BOOL v70 = (char *)&__p;
  }
  unint64_t v75 = &v70[v69];
  *unint64_t v75 = v64;
  v75[1] = 0;
  char v76 = ((uint64_t (*)(const std::locale::facet *))v67->__vftable[1].~facet_0)(v67);
  uint64_t v50 = std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v81, (int8x16_t *)__src, v17, v66, (uint64_t *)&__p, v76, a3, v83);
  if (SHIBYTE(v89) < 0) {
    operator delete(__p);
  }
  if ((char)v92 < 0) {
    operator delete(v90.__locale_);
  }
  return v50;
}

_WORD *std::__itoa::__base_10_u32[abi:nn180100](_WORD *a1, unsigned int a2)
{
  if (a2 >= 0xF4240)
  {
    if (a2 >= 0x5F5E100)
    {
      unsigned int v7 = a2 / 0x5F5E100;
      if (a2 > 0x3B9AC9FF)
      {
        *a1 = std::__itoa::__digits_base_10[v7];
        a1[1] = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240];
        a1[2] = std::__itoa::__digits_base_10[a2 % 0x5F5E100 % 0xF4240 / 0x2710uLL];
        unsigned __int16 v12 = a2 % 0x5F5E100 % 0xF4240 % 0x2710;
        a1[3] = std::__itoa::__digits_base_10[v12 / 0x64u];
        a1[4] = std::__itoa::__digits_base_10[v12 % 0x64u];
        return a1 + 5;
      }
      else
      {
        *(unsigned char *)a1 = v7 + 48;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240];
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[a2 % 0x5F5E100 % 0xF4240 / 0x2710uLL];
        unsigned __int16 v8 = a2 % 0x5F5E100 % 0xF4240 % 0x2710;
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[v8 / 0x64u];
        *(_WORD *)((char *)a1 + 7) = std::__itoa::__digits_base_10[v8 % 0x64u];
        return (_WORD *)((char *)a1 + 9);
      }
    }
    else
    {
      unsigned int v3 = a2 / 0xF4240;
      if (a2 > 0x98967F)
      {
        *a1 = std::__itoa::__digits_base_10[v3];
        a1[1] = std::__itoa::__digits_base_10[a2 % 0xF4240 / 0x2710uLL];
        unsigned __int16 v10 = a2 % 0xF4240 % 0x2710;
        a1[2] = std::__itoa::__digits_base_10[v10 / 0x64u];
        a1[3] = std::__itoa::__digits_base_10[v10 % 0x64u];
        return a1 + 4;
      }
      else
      {
        *(unsigned char *)a1 = v3 + 48;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[a2 % 0xF4240 / 0x2710uLL];
        unsigned __int16 v4 = a2 % 0xF4240 % 0x2710;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v4 / 0x64u];
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[v4 % 0x64u];
        return (_WORD *)((char *)a1 + 7);
      }
    }
  }
  else if (a2 >> 4 > 0x270)
  {
    unsigned int v5 = a2 / 0x2710;
    if (a2 >> 5 > 0xC34)
    {
      *a1 = std::__itoa::__digits_base_10[v5];
      unsigned __int16 v11 = a2 % 0x2710;
      a1[1] = std::__itoa::__digits_base_10[v11 / 0x64u];
      a1[2] = std::__itoa::__digits_base_10[v11 % 0x64u];
      return a1 + 3;
    }
    else
    {
      *(unsigned char *)a1 = v5 + 48;
      unsigned __int16 v6 = a2 % 0x2710;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[v6 / 0x64u];
      *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v6 % 0x64u];
      return (_WORD *)((char *)a1 + 5);
    }
  }
  else if (a2 > 0x63)
  {
    unsigned int v9 = (unsigned __int16)a2 / 0x64u;
    if (a2 > 0x3E7)
    {
      *a1 = std::__itoa::__digits_base_10[v9];
      a1[1] = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return a1 + 2;
    }
    else
    {
      *(unsigned char *)a1 = v9 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return (_WORD *)((char *)a1 + 3);
    }
  }
  else if (a2 > 9)
  {
    *a1 = std::__itoa::__digits_base_10[a2];
    return a1 + 1;
  }
  else
  {
    *(unsigned char *)a1 = a2 + 48;
    return (_WORD *)((char *)a1 + 1);
  }
}

void *std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, void *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  size_t v9 = (a4 >> 32) - a6;
  if (a4 >> 32 <= a6)
  {
    size_t v13 = a3[1];
    uint64_t v12 = a3[2];
    if (v12 + __len >= v13)
    {
      ((void (*)(void))a3[3])(*a3);
      uint64_t v12 = 0;
      a3[2] = 0;
      size_t v13 = a3[1];
    }
    size_t v14 = __len - v13;
    if (__len >= v13)
    {
      if (v13) {
        memmove((void *)(*a3 + v12), __src, v13);
      }
      a3[2] = v13;
      ((void (*)(void, size_t, void))a3[3])(*a3, v13, a3[4]);
      a3[2] = 0;
      if (v14)
      {
        char v15 = &__src[v13];
        do
        {
          if (a3[1] >= v14) {
            size_t v16 = v14;
          }
          else {
            size_t v16 = a3[1];
          }
          if (v16) {
            memmove((void *)*a3, v15, v16);
          }
          a3[2] = v16;
          v15 += v16;
          v14 -= v16;
          ((void (*)(void, size_t, void))a3[3])(*a3, v16, a3[4]);
          a3[2] = 0;
        }
        while (v14);
      }
    }
    else
    {
      if (__len)
      {
        memmove((void *)(*a3 + v12), __src, __len);
        uint64_t v12 = a3[2];
      }
      a3[2] = v12 + __len;
    }
  }
  else
  {
    unint64_t v10 = HIDWORD(a5);
    size_t v11 = 0;
    switch(a4 & 7)
    {
      case 1:
        break;
      case 2:
        size_t v11 = v9 >> 1;
        v9 -= v9 >> 1;
        break;
      default:
        size_t v11 = (a4 >> 32) - a6;
        size_t v9 = 0;
        break;
    }
    std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v11, SHIDWORD(a5));
    size_t v18 = a3[1];
    uint64_t v17 = a3[2];
    if (v17 + __len >= v18)
    {
      ((void (*)(void))a3[3])(*a3);
      uint64_t v17 = 0;
      a3[2] = 0;
      size_t v18 = a3[1];
    }
    size_t v19 = __len - v18;
    if (__len >= v18)
    {
      if (v18) {
        memmove((void *)(*a3 + v17), __src, v18);
      }
      a3[2] = v18;
      ((void (*)(void, size_t, void))a3[3])(*a3, v18, a3[4]);
      a3[2] = 0;
      if (v19)
      {
        int v20 = &__src[v18];
        do
        {
          if (a3[1] >= v19) {
            size_t v21 = v19;
          }
          else {
            size_t v21 = a3[1];
          }
          if (v21) {
            memmove((void *)*a3, v20, v21);
          }
          a3[2] = v21;
          v20 += v21;
          v19 -= v21;
          ((void (*)(void, size_t, void))a3[3])(*a3, v21, a3[4]);
          a3[2] = 0;
        }
        while (v19);
      }
    }
    else
    {
      if (__len)
      {
        memmove((void *)(*a3 + v17), __src, __len);
        uint64_t v17 = a3[2];
      }
      a3[2] = v17 + __len;
    }
    std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v9, v10);
  }
  return a3;
}

void md::TextureManager::cubeTexture(void *a1, uint64_t a2, uint64_t a3, void *a4, float a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = vcvtps_s32_f32(a5);
  if (v9 >= 2)
  {
    do
    {
      unint64_t v10 = (std::__shared_weak_count *)a4[1];
      v28[0] = *a4;
      v28[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v26[0] = 1;
      unsigned int v27 = v9;
      md::TextureManager::_cubeTexture(a1, a2, a3, v28, (uint64_t)v26);
      v26[0] = 0;
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        size_t v11 = (void *)*a1;
        if (!*a1) {
          goto LABEL_15;
        }
      }
      else
      {
        size_t v11 = (void *)*a1;
        if (!*a1) {
          goto LABEL_15;
        }
      }
      if (v11[2])
      {
        uint64_t v12 = (std::__shared_weak_count *)v11[1];
        if (!v12 || (size_t v13 = std::__shared_weak_count::lock(v12)) == 0)
        {
          std::__throw_bad_weak_ptr[abi:nn180100]();
          goto LABEL_45;
        }
        size_t v14 = v13;
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v11[4]) {
        return;
      }
LABEL_15:
      char v15 = (std::__shared_weak_count *)a1[1];
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      --v9;
    }
    while (v9 > 1);
  }
  uint64_t v16 = *a4;
  uint64_t v17 = (std::__shared_weak_count *)a4[1];
  v25[0] = v16;
  v25[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v24[0] = 0;
  md::TextureManager::_cubeTexture(a1, a2, a3, v25, (uint64_t)v24);
  if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v18 = (void *)*a1;
    if (*a1) {
      goto LABEL_25;
    }
LABEL_34:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v22 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v23 = a3;
      }
      else {
        uint64_t v23 = *(void *)a3;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = v23;
      _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_ERROR, "Missing cube texture: '%s'", buf, 0xCu);
    }

    return;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  size_t v18 = (void *)*a1;
  if (!*a1) {
    goto LABEL_34;
  }
LABEL_25:
  if (!v18[2])
  {
LABEL_29:
    if (v18[4]) {
      return;
    }
    goto LABEL_34;
  }
  size_t v19 = (std::__shared_weak_count *)v18[1];
  if (v19)
  {
    int v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      size_t v21 = v20;
      if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v21);
        if (v18[4]) {
          return;
        }
        goto LABEL_34;
      }
      goto LABEL_29;
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_45:
  __break(1u);
}

void sub_1A1AE2CC0(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A1AE2CE4()
{
}

void md::TextureManager::_cubeTexture(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v133 = *(std::string *)a3;
  }
  unsigned __int8 v134 = 0;
  if (*(unsigned char *)a5)
  {
    unsigned int v135 = *(_DWORD *)(a5 + 4);
    unsigned __int8 v134 = 1;
  }
  unsigned int v9 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 264));
  if (v9) {
    geo::read_write_lock::logFailure(v9, (uint64_t)"read lock", v10);
  }
  size_t v11 = std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>((void *)(a2 + 504), (uint64_t)&v133);
  if (!v11)
  {
    uint64_t v117 = a1;
    uint64_t v118 = (void **)(a2 + 504);
    char v15 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 264));
    if (v15) {
      geo::read_write_lock::logFailure(v15, (uint64_t)"unlock", v16);
    }
    uint64_t v17 = 0;
    memset(v132, 0, sizeof(v132));
    size_t v18 = v132;
    while (1)
    {
      v130[0] = 0;
      if (*(unsigned char *)a5)
      {
        int v131 = *(_DWORD *)(a5 + 4);
        v130[0] = 1;
      }
      v128[0] = 1;
      int v129 = v17;
      size_t v19 = md::TextureManager::_loadData(a2, (uint64_t *)a3, (uint64_t)v130, (uint64_t)v128);
      v128[0] = 0;
      v130[0] = 0;
      long long v20 = v136;
      long long v136 = 0uLL;
      size_t v21 = (std::__shared_weak_count *)*((void *)v18 + 1);
      *size_t v18 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        unint64_t v22 = (std::__shared_weak_count *)*((void *)&v136 + 1);
        if (!*((void *)&v136 + 1)) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v22 = (std::__shared_weak_count *)*((void *)&v136 + 1);
        if (!*((void *)&v136 + 1)) {
          goto LABEL_29;
        }
      }
      if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
LABEL_29:
      uint64_t v23 = *(void *)v18 == 0;

      if (v23)
      {
        uint64_t v126 = 0;
        uint64_t v127 = 0;
LABEL_33:
        int64_t v25 = v117;
        long long v125 = 0uLL;
        unint64_t v124 = (pthread_rwlock_t *)(a2 + 264);
        long long v26 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 264));
        if (v26) {
          geo::read_write_lock::logFailure(v26, (uint64_t)"write lock", v27);
        }
        uint64_t v28 = std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>(v118, (uint64_t)&v133);
        unint64_t v29 = v28;
        if (v28)
        {
          uint64_t v30 = v28[7];
          *uint64_t v117 = v28[6];
          v117[1] = v30;
          if (v30) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
          }
          goto LABEL_223;
        }
        uint64_t v31 = v126;
        if (!v126) {
          goto LABEL_223;
        }
        int64_t v32 = (char *)operator new(0x48uLL);
        char v33 = (std::__shared_weak_count *)v32;
        *((void *)v32 + 1) = 0;
        BOOL v34 = (atomic_ullong *)(v32 + 8);
        *((void *)v32 + 2) = 0;
        *(void *)int64_t v32 = &unk_1EF580560;
        *((void *)v32 + 3) = 0;
        uint64_t v35 = v32 + 24;
        uint64_t v36 = *(void *)(a2 + 576);
        *((void *)v32 + 4) = 0;
        *((void *)v32 + 5) = v36;
        *((_DWORD *)v32 + 12) = 0;
        uint64_t v37 = v127;
        *((void *)v32 + 7) = v31;
        *((void *)v32 + 8) = v37;
        if (!v37
          || (atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed),
              (size_t v38 = (std::__shared_weak_count *)*((void *)v32 + 4)) == 0))
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v33[1].__vftable = (std::__shared_weak_count_vtbl *)&v33[1];
          v33[1].__shared_owners_ = (uint64_t)v33;
          goto LABEL_44;
        }
        if (v38->__shared_owners_ == -1)
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v33[1].__vftable = (std::__shared_weak_count_vtbl *)&v33[1];
          v33[1].__shared_owners_ = (uint64_t)v33;
          std::__shared_weak_count::__release_weak(v38);
LABEL_44:
          if (!atomic_fetch_add(v34, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        size_t v39 = (std::__shared_weak_count *)*((void *)&v125 + 1);
        *(void *)&long long v125 = v35;
        *((void *)&v125 + 1) = v33;
        if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
        int v40 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v133.__r_.__value_.__l.__size_;
        uint64_t v41 = (const std::string::value_type *)v133.__r_.__value_.__r.__words[0];
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v43 = &v133;
        }
        else {
          uint64_t v43 = (std::string *)v133.__r_.__value_.__r.__words[0];
        }
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v133.__r_.__value_.__l.__size_;
        }
        __s2 = v43;
        unint64_t v45 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v43, v44);
        uint64_t v46 = ((v135 - 0x61C8864680B583ABLL) ^ 1) - 0x61C8864680B583EBLL;
        int v115 = v134;
        if (!v134) {
          uint64_t v46 = 0x9E3779B97F4A7C15;
        }
        unint64_t v47 = ((v45 >> 2) + (v45 << 6) + v46) ^ v45;
        unint64_t v48 = *(void *)(a2 + 512);
        int v120 = v40;
        if (v48)
        {
          uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
          v49.i16[0] = vaddlv_u8(v49);
          if (v49.u32[0] > 1uLL)
          {
            uint64_t v23 = ((v45 >> 2) + (v45 << 6) + v46) ^ v45;
            if (v47 >= v48) {
              uint64_t v23 = v47 % v48;
            }
          }
          else
          {
            uint64_t v23 = (v48 - 1) & v47;
          }
          uint64_t v50 = (uint64_t **)*((void *)*v118 + v23);
          if (v50)
          {
            unint64_t v51 = *v50;
            if (*v50)
            {
              unsigned int v114 = v135;
              if (v49.u32[0] <= 1uLL)
              {
                std::string::size_type v113 = size;
                unint64_t v52 = v48 - 1;
                if (!v134)
                {
                  while (1)
                  {
                    uint64_t v58 = v51[1];
                    if (v58 != v47)
                    {
                      if ((v58 & v52) != v23) {
                        goto LABEL_140;
                      }
                      goto LABEL_86;
                    }
                    uint64_t v59 = *((unsigned __int8 *)v51 + 39);
                    if ((v59 & 0x80u) == 0) {
                      uint64_t v60 = *((unsigned __int8 *)v51 + 39);
                    }
                    else {
                      uint64_t v60 = v51[3];
                    }
                    if (v60 == v44)
                    {
                      uint64_t v61 = (const void **)(v51 + 2);
                      if ((v59 & 0x80) != 0)
                      {
                        if (memcmp(*v61, __s2, v51[3])) {
                          goto LABEL_86;
                        }
                      }
                      else if (*((unsigned char *)v51 + 39))
                      {
                        unint64_t v62 = __s2;
                        while (*(unsigned __int8 *)v61 == v62->__r_.__value_.__s.__data_[0])
                        {
                          uint64_t v61 = (const void **)((char *)v61 + 1);
                          unint64_t v62 = (std::string *)((char *)v62 + 1);
                          if (!--v59) {
                            goto LABEL_99;
                          }
                        }
                        goto LABEL_86;
                      }
LABEL_99:
                      if (!*((unsigned char *)v51 + 40)) {
                        goto LABEL_205;
                      }
                    }
LABEL_86:
                    unint64_t v51 = (uint64_t *)*v51;
                    if (!v51) {
                      goto LABEL_140;
                    }
                  }
                }
                while (2)
                {
                  uint64_t v53 = v51[1];
                  if (v53 == v47)
                  {
                    uint64_t v54 = *((unsigned __int8 *)v51 + 39);
                    if ((v54 & 0x80u) == 0) {
                      uint64_t v55 = *((unsigned __int8 *)v51 + 39);
                    }
                    else {
                      uint64_t v55 = v51[3];
                    }
                    if (v55 != v44) {
                      goto LABEL_69;
                    }
                    unsigned __int8 v56 = (const void **)(v51 + 2);
                    if ((v54 & 0x80) != 0)
                    {
                      if (memcmp(*v56, __s2, v51[3])) {
                        goto LABEL_69;
                      }
                    }
                    else if (*((unsigned char *)v51 + 39))
                    {
                      unsigned __int8 v57 = __s2;
                      while (*(unsigned __int8 *)v56 == v57->__r_.__value_.__s.__data_[0])
                      {
                        unsigned __int8 v56 = (const void **)((char *)v56 + 1);
                        unsigned __int8 v57 = (std::string *)((char *)v57 + 1);
                        if (!--v54) {
                          goto LABEL_82;
                        }
                      }
                      goto LABEL_69;
                    }
LABEL_82:
                    if (*((unsigned char *)v51 + 40) && *((_DWORD *)v51 + 11) == v114) {
                      goto LABEL_205;
                    }
                  }
                  else if ((v53 & v52) != v23)
                  {
                    goto LABEL_140;
                  }
LABEL_69:
                  unint64_t v51 = (uint64_t *)*v51;
                  if (!v51)
                  {
LABEL_140:
                    std::string::size_type size = v113;
                    goto LABEL_141;
                  }
                  continue;
                }
              }
              if (!v134)
              {
                while (2)
                {
                  unint64_t v68 = v51[1];
                  if (v68 != v47)
                  {
                    if (v68 >= v48) {
                      v68 %= v48;
                    }
                    if (v68 != v23) {
                      goto LABEL_141;
                    }
                    goto LABEL_123;
                  }
                  uint64_t v69 = *((unsigned __int8 *)v51 + 39);
                  if ((v69 & 0x80u) == 0) {
                    uint64_t v70 = *((unsigned __int8 *)v51 + 39);
                  }
                  else {
                    uint64_t v70 = v51[3];
                  }
                  if (v70 == v44)
                  {
                    size_t v71 = (const void **)(v51 + 2);
                    if ((v69 & 0x80) == 0)
                    {
                      if (*((unsigned char *)v51 + 39))
                      {
                        unint64_t v72 = __s2;
                        while (*(unsigned __int8 *)v71 == v72->__r_.__value_.__s.__data_[0])
                        {
                          size_t v71 = (const void **)((char *)v71 + 1);
                          unint64_t v72 = (std::string *)((char *)v72 + 1);
                          if (!--v69) {
                            goto LABEL_138;
                          }
                        }
                        goto LABEL_123;
                      }
LABEL_138:
                      if (!*((unsigned char *)v51 + 40)) {
                        goto LABEL_205;
                      }
                      goto LABEL_123;
                    }
                    if (!memcmp(*v71, __s2, v51[3])) {
                      goto LABEL_138;
                    }
                  }
LABEL_123:
                  unint64_t v51 = (uint64_t *)*v51;
                  if (!v51) {
                    goto LABEL_141;
                  }
                  continue;
                }
              }
              while (2)
              {
                unint64_t v63 = v51[1];
                if (v63 != v47)
                {
                  if (v63 >= v48) {
                    v63 %= v48;
                  }
                  if (v63 != v23) {
                    break;
                  }
                  goto LABEL_104;
                }
                uint64_t v64 = *((unsigned __int8 *)v51 + 39);
                if ((v64 & 0x80u) == 0) {
                  uint64_t v65 = *((unsigned __int8 *)v51 + 39);
                }
                else {
                  uint64_t v65 = v51[3];
                }
                if (v65 == v44)
                {
                  int v66 = (const void **)(v51 + 2);
                  if ((v64 & 0x80) == 0)
                  {
                    if (*((unsigned char *)v51 + 39))
                    {
                      unint64_t v67 = __s2;
                      while (*(unsigned __int8 *)v66 == v67->__r_.__value_.__s.__data_[0])
                      {
                        int v66 = (const void **)((char *)v66 + 1);
                        unint64_t v67 = (std::string *)((char *)v67 + 1);
                        if (!--v64) {
                          goto LABEL_119;
                        }
                      }
                      goto LABEL_104;
                    }
LABEL_119:
                    if (*((unsigned char *)v51 + 40) && *((_DWORD *)v51 + 11) == v114) {
                      goto LABEL_205;
                    }
                    goto LABEL_104;
                  }
                  if (!memcmp(*v66, __s2, v51[3])) {
                    goto LABEL_119;
                  }
                }
LABEL_104:
                unint64_t v51 = (uint64_t *)*v51;
                if (!v51) {
                  break;
                }
                continue;
              }
            }
          }
        }
LABEL_141:
        uint64_t v73 = (char *)operator new(0x40uLL);
        uint64_t v74 = (void *)(a2 + 520);
        *(void *)&long long v136 = v73;
        *((void *)&v136 + 1) = a2 + 520;
        char v137 = 0;
        unint64_t v75 = (std::string *)(v73 + 16);
        *(void *)uint64_t v73 = 0;
        *((void *)v73 + 1) = v47;
        if (v120 < 0)
        {
          std::string::__init_copy_ctor_external(v75, v41, size);
          int v82 = v134;
          v73[40] = 0;
          if (v82)
          {
LABEL_143:
            *((_DWORD *)v73 + 11) = v135;
            v73[40] = 1;
          }
        }
        else
        {
          *(_OWORD *)&v75->__r_.__value_.__l.__data_ = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
          *((void *)v73 + 4) = *((void *)&v133.__r_.__value_.__l + 2);
          v73[40] = 0;
          if (v115) {
            goto LABEL_143;
          }
        }
        *((void *)v73 + 6) = 0;
        *((void *)v73 + 7) = 0;
        char v137 = 1;
        float v76 = (float)(unint64_t)(*(void *)(a2 + 528) + 1);
        float v77 = *(float *)(a2 + 536);
        if (!v48 || (float)(v77 * (float)v48) < v76)
        {
          BOOL v78 = 1;
          if (v48 >= 3) {
            BOOL v78 = (v48 & (v48 - 1)) != 0;
          }
          unint64_t v79 = v78 | (2 * v48);
          unint64_t v80 = vcvtps_u32_f32(v76 / v77);
          if (v79 <= v80) {
            size_t prime = v80;
          }
          else {
            size_t prime = v79;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
          }
          unint64_t v48 = *(void *)(a2 + 512);
          if (prime > v48)
          {
LABEL_158:
            if (prime >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v83 = operator new(8 * prime);
            unint64_t v84 = *v118;
            *uint64_t v118 = v83;
            if (v84) {
              operator delete(v84);
            }
            uint64_t v85 = 0;
            *(void *)(a2 + 512) = prime;
            do
              *((void *)*v118 + v85++) = 0;
            while (prime != v85);
            v86 = (void *)*v74;
            if (!*v74) {
              goto LABEL_182;
            }
            size_t v87 = v86[1];
            size_t v88 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              size_t v89 = v87 & v88;
              *((void *)*v118 + v89) = v74;
              for (i = (void *)*v86; *v86; i = (void *)*v86)
              {
                size_t v91 = i[1] & v88;
                if (v91 == v89)
                {
                  v86 = i;
                }
                else if (*((void *)*v118 + v91))
                {
                  void *v86 = *i;
                  uint64_t v92 = 8 * v91;
                  void *i = **(void **)((char *)*v118 + v92);
                  **(void **)((char *)*v118 + v92) = i;
                }
                else
                {
                  *((void *)*v118 + v91) = v86;
                  v86 = i;
                  size_t v89 = v91;
                }
              }
              goto LABEL_182;
            }
            if (v87 >= prime) {
              v87 %= prime;
            }
            *((void *)*v118 + v87) = v74;
            uint64_t v96 = (void *)*v86;
            if (!*v86)
            {
LABEL_182:
              unint64_t v48 = prime;
              goto LABEL_183;
            }
            while (2)
            {
              size_t v98 = v96[1];
              if (v98 >= prime) {
                v98 %= prime;
              }
              if (v98 != v87)
              {
                if (!*((void *)*v118 + v98))
                {
                  *((void *)*v118 + v98) = v86;
LABEL_187:
                  v86 = v96;
                  uint64_t v96 = (void *)*v96;
                  size_t v87 = v98;
                  if (!v96) {
                    goto LABEL_182;
                  }
                  continue;
                }
                void *v86 = *v96;
                uint64_t v97 = 8 * v98;
                *uint64_t v96 = **(void **)((char *)*v118 + v97);
                **(void **)((char *)*v118 + v97) = v96;
                uint64_t v96 = v86;
              }
              break;
            }
            size_t v98 = v87;
            goto LABEL_187;
          }
          if (prime < v48)
          {
            unint64_t v93 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 528) / *(float *)(a2 + 536));
            if (v48 < 3 || (uint8x8_t v94 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v94.i16[0] = vaddlv_u8(v94), v94.u32[0] > 1uLL))
            {
              unint64_t v93 = std::__next_prime(v93);
            }
            else
            {
              uint64_t v95 = 1 << -(char)__clz(v93 - 1);
              if (v93 >= 2) {
                unint64_t v93 = v95;
              }
            }
            if (prime <= v93) {
              size_t prime = v93;
            }
            if (prime >= v48)
            {
              unint64_t v48 = *(void *)(a2 + 512);
            }
            else
            {
              if (prime) {
                goto LABEL_158;
              }
              uint64_t v112 = *v118;
              *uint64_t v118 = 0;
              if (v112) {
                operator delete(v112);
              }
              unint64_t v48 = 0;
              *(void *)(a2 + 512) = 0;
            }
          }
LABEL_183:
          if ((v48 & (v48 - 1)) != 0)
          {
            if (v47 >= v48) {
              uint64_t v23 = v47 % v48;
            }
            else {
              uint64_t v23 = v47;
            }
          }
          else
          {
            uint64_t v23 = (v48 - 1) & v47;
          }
        }
        int v99 = (void *)*((void *)*v118 + v23);
        if (v99)
        {
          *(void *)long long v136 = *v99;
          *int v99 = v136;
        }
        else
        {
          *(void *)long long v136 = *v74;
          *uint64_t v74 = v136;
          *((void *)*v118 + v23) = v74;
          if (*(void *)v136)
          {
            unint64_t v100 = *(void *)(*(void *)v136 + 8);
            if ((v48 & (v48 - 1)) != 0)
            {
              if (v100 >= v48) {
                v100 %= v48;
              }
            }
            else
            {
              v100 &= v48 - 1;
            }
            *((void *)*v118 + v100) = v136;
          }
        }
        unint64_t v51 = (uint64_t *)v136;
        ++*(void *)(a2 + 528);
LABEL_205:
        uint64_t v101 = *((void *)&v125 + 1);
        int64_t v25 = v117;
        if (*((void *)&v125 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v125 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v102 = (std::__shared_weak_count *)v51[7];
        v51[6] = v125;
        v51[7] = v101;
        if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
        if (v126)
        {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 568) + 24))(&v123);
          *(void *)&long long v136 = &unk_1EF570DA0;
          *((void *)&v136 + 1) = &v126;
          uint64_t v138 = &v136;
          uint64_t v121 = 0;
          v122 = 0;
          (*(void (**)(uint64_t, long long *, uint64_t *))(*(void *)v123 + 16))(v123, &v136, &v121);
          uint64_t v103 = v122;
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
          if (v138 == &v136)
          {
            (*(void (**)(long long *))(v136 + 32))(&v136);
          }
          else if (v138)
          {
            (*(void (**)(void))(*(void *)v138 + 40))();
          }
          if (v123)
          {
            uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)v123 + 24))(v123);
            uint64_t v105 = v123;
            uint64_t v123 = 0;
            *(void *)&long long v136 = v105;
            (*(void (**)(uint64_t, long long *))(*(void *)v104 + 48))(v104, &v136);
            uint64_t v106 = v136;
            *(void *)&long long v136 = 0;
            if (v106) {
              (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
            }
            uint64_t v107 = v123;
            uint64_t v123 = 0;
            if (v107) {
              (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
            }
          }
        }
LABEL_223:
        uint64_t v108 = (geo::read_write_lock *)pthread_rwlock_unlock(v124);
        if (v108) {
          geo::read_write_lock::logFailure(v108, (uint64_t)"unlock", v109);
        }
        if (v29)
        {
          uint64_t v110 = (std::__shared_weak_count *)*((void *)&v125 + 1);
          if (*((void *)&v125 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v125 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        else
        {
          _OWORD *v25 = v125;
        }
        uint64_t v111 = v127;
        if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
        md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((md::realistic::RoadRenderLayer::RoadModelPipelineStates *)v132);
        if (v134) {
          goto LABEL_14;
        }
        goto LABEL_15;
      }
      ++v17;
      ++v18;
      if (v17 == 6)
      {
        uint64_t v24 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v24->__shared_owners_ = 0;
        v24->__shared_weak_owners_ = 0;
        v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5835F0;
        uint64_t v126 = ggl::TextureCube::TextureCube((uint64_t)&v24[1], v132, a4);
        uint64_t v127 = v24;
        goto LABEL_33;
      }
    }
  }
  uint64_t v12 = v11[7];
  *a1 = v11[6];
  a1[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v13 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 264));
  if (v13) {
    geo::read_write_lock::logFailure(v13, (uint64_t)"unlock", v14);
  }
  if (v134) {
LABEL_14:
  }
    unsigned __int8 v134 = 0;
LABEL_15:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
}

void sub_1A1AE3BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, pthread_rwlock_t *);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v10 - 128));
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((md::realistic::RoadRenderLayer::RoadModelPipelineStates *)va3);
  if (*(unsigned char *)(v10 - 136)) {
    *(unsigned char *)(v10 - 136) = 0;
  }
  if (*(char *)(v10 - 137) < 0)
  {
    operator delete(*(void **)(v10 - 160));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>(void *a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unsigned int v5 = (uint64_t *)a2;
  }
  else {
    unsigned int v5 = *(uint64_t **)a2;
  }
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  int v8 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v9 = ((*(unsigned int *)(a2 + 28) - 0x61C8864680B583ABLL) ^ 1) - 0x61C8864680B583EBLL;
  if (!*(unsigned char *)(a2 + 24)) {
    uint64_t v9 = 0x9E3779B97F4A7C15;
  }
  int8x8_t v10 = (int8x8_t)a1[1];
  if (v10)
  {
    unint64_t v11 = ((v7 >> 2) + (v7 << 6) + v9) ^ v7;
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = ((v7 >> 2) + (v7 << 6) + v9) ^ v7;
      if (v11 >= *(void *)&v10) {
        unint64_t v13 = v11 % *(void *)&v10;
      }
    }
    else
    {
      unint64_t v13 = (*(void *)&v10 - 1) & v11;
    }
    uint64_t v14 = *(uint64_t ***)(*a1 + 8 * v13);
    if (v14)
    {
      char v15 = *v14;
      if (*v14)
      {
        int v16 = *(_DWORD *)(a2 + 28);
        if (v12.u32[0] <= 1uLL)
        {
          uint64_t v17 = *(void *)&v10 - 1;
          if (!v8)
          {
            while (1)
            {
              uint64_t v24 = v15[1];
              if (v24 != v11)
              {
                if ((v24 & v17) != v13) {
                  return 0;
                }
                goto LABEL_37;
              }
              uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v26 = v15[3];
              }
              if (v26 == v6)
              {
                unsigned int v27 = (const void **)(v15 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (memcmp(*v27, v5, v15[3])) {
                    goto LABEL_37;
                  }
                }
                else if (*((unsigned char *)v15 + 39))
                {
                  uint64_t v28 = v5;
                  while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v28)
                  {
                    unsigned int v27 = (const void **)((char *)v27 + 1);
                    uint64_t v28 = (uint64_t *)((char *)v28 + 1);
                    if (!--v25) {
                      goto LABEL_50;
                    }
                  }
                  goto LABEL_37;
                }
LABEL_50:
                if (!*((unsigned char *)v15 + 40)) {
                  return v15;
                }
              }
LABEL_37:
              __n128 result = 0;
              char v15 = (uint64_t *)*v15;
              if (!v15) {
                return result;
              }
            }
          }
          while (1)
          {
            uint64_t v18 = v15[1];
            if (v18 != v11)
            {
              if ((v18 & v17) != v13) {
                return 0;
              }
              goto LABEL_20;
            }
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v6)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (memcmp(*v21, v5, v15[3])) {
                  goto LABEL_20;
                }
              }
              else if (*((unsigned char *)v15 + 39))
              {
                unint64_t v22 = v5;
                while (*(unsigned __int8 *)v21 == *(unsigned __int8 *)v22)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  unint64_t v22 = (uint64_t *)((char *)v22 + 1);
                  if (!--v19) {
                    goto LABEL_33;
                  }
                }
                goto LABEL_20;
              }
LABEL_33:
              if (*((unsigned char *)v15 + 40) && *((_DWORD *)v15 + 11) == v16) {
                return v15;
              }
            }
LABEL_20:
            char v15 = (uint64_t *)*v15;
            if (!v15) {
              return 0;
            }
          }
        }
        if (!v8)
        {
          while (1)
          {
            unint64_t v34 = v15[1];
            if (v34 == v11)
            {
              uint64_t v35 = *((unsigned __int8 *)v15 + 39);
              if ((v35 & 0x80u) == 0) {
                uint64_t v36 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v36 = v15[3];
              }
              if (v36 != v6) {
                goto LABEL_74;
              }
              uint64_t v37 = (const void **)(v15 + 2);
              if ((v35 & 0x80) != 0)
              {
                if (memcmp(*v37, v5, v15[3])) {
                  goto LABEL_74;
                }
              }
              else if (*((unsigned char *)v15 + 39))
              {
                size_t v38 = v5;
                while (*(unsigned __int8 *)v37 == *(unsigned __int8 *)v38)
                {
                  uint64_t v37 = (const void **)((char *)v37 + 1);
                  size_t v38 = (uint64_t *)((char *)v38 + 1);
                  if (!--v35) {
                    goto LABEL_89;
                  }
                }
                goto LABEL_74;
              }
LABEL_89:
              if (!*((unsigned char *)v15 + 40)) {
                return v15;
              }
            }
            else
            {
              if (v34 >= *(void *)&v10) {
                v34 %= *(void *)&v10;
              }
              if (v34 != v13) {
                return 0;
              }
            }
LABEL_74:
            __n128 result = 0;
            char v15 = (uint64_t *)*v15;
            if (!v15) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v29 = v15[1];
          if (v29 == v11)
          {
            uint64_t v30 = *((unsigned __int8 *)v15 + 39);
            if ((v30 & 0x80u) == 0) {
              uint64_t v31 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v31 = v15[3];
            }
            if (v31 != v6) {
              goto LABEL_55;
            }
            int64_t v32 = (const void **)(v15 + 2);
            if ((v30 & 0x80) != 0)
            {
              if (memcmp(*v32, v5, v15[3])) {
                goto LABEL_55;
              }
            }
            else if (*((unsigned char *)v15 + 39))
            {
              char v33 = v5;
              while (*(unsigned __int8 *)v32 == *(unsigned __int8 *)v33)
              {
                int64_t v32 = (const void **)((char *)v32 + 1);
                char v33 = (uint64_t *)((char *)v33 + 1);
                if (!--v30) {
                  goto LABEL_70;
                }
              }
              goto LABEL_55;
            }
LABEL_70:
            if (*((unsigned char *)v15 + 40) && *((_DWORD *)v15 + 11) == v16) {
              return v15;
            }
          }
          else
          {
            if (v29 >= *(void *)&v10) {
              v29 %= *(void *)&v10;
            }
            if (v29 != v13) {
              return 0;
            }
          }
LABEL_55:
          char v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  return 0;
}

void anonymous namespace'::_textureDataWithData(void *a1, void *a2, int a3, unsigned int a4, int a5, unsigned char *a6)
{
  CFDataRef v11 = a2;
  CFDataRef v75 = v11;
  if (!v11 || (uint8x8_t v12 = CGImageSourceCreateWithData(v11, 0), (v13 = v12) == 0))
  {
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_21;
  }
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v12, 0, 0);
  char v15 = ImageAtIndex;
  if (a6)
  {
    CGImageAlphaInfo AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
    *a6 = (AlphaInfo > kCGImageAlphaNoneSkipFirst) | (0x1Eu >> AlphaInfo) & 1;
  }
  if (a5)
  {
    CGColorSpaceRef ColorSpace = CGImageGetColorSpace(v15);
    CGColorSpaceRef v18 = ColorSpace;
    if (ColorSpace)
    {
      CFRetain(ColorSpace);
      int v19 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    CGColorSpaceRef v18 = 0;
  }
  int v19 = 1;
LABEL_10:
  CFRelease(v13);
  if (!v15)
  {
    if ((v19 & 1) == 0) {
      CFRelease(v18);
    }
    goto LABEL_20;
  }
  unint64_t Width = CGImageGetWidth(v15);
  size_t Height = CGImageGetHeight(v15);
  int v21 = Width;
  double v22 = (float)Height;
  size_t v71 = Height;
  if (Width <= Height) {
    int v21 = Height;
  }
  unsigned int v23 = 32 - __clz(v21 | 1);
  if (a3) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 1;
  }
  uint64_t v25 = (std::__shared_weak_count *)operator new(0x60uLL);
  int v73 = a3;
  v25->__shared_owners_ = 0;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583AF8;
  uint64_t v69 = v24;
  uint64_t v26 = ggl::TextureData2D::TextureData2D((uint64_t)&v25[1], Width, v71, v24, a4, 0);
  uint32_t v27 = 0;
  *(void *)&long long v76 = v26;
  *((void *)&v76 + 1) = v25;
  uint64_t v70 = 1;
  char v28 = 1;
  char v67 = a4;
  int v29 = 0;
  char v30 = 1;
  switch(a4)
  {
    case 0u:
    case 0x16u:
    case 0x17u:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
      int v29 = 0;
      char v28 = 0;
      uint64_t v70 = 0;
      uint32_t v27 = 0x4000;
      break;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0x1Au:
    case 0x2Au:
    case 0x2Bu:
      char v30 = 0;
      int v29 = 1;
      uint32_t v27 = 0x4000;
      uint64_t v31 = 2;
      goto LABEL_27;
    case 0xAu:
    case 0xBu:
    case 0x18u:
      char v30 = 0;
      int v29 = 1;
      uint32_t v27 = 0x4000;
      uint64_t v31 = 3;
      goto LABEL_27;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x1Bu:
    case 0x3Au:
      char v30 = 0;
      int v29 = 1;
      uint32_t v27 = 0x4000;
      uint64_t v31 = 4;
LABEL_27:
      uint64_t v70 = v31;
      char v28 = 1;
      break;
    default:
      break;
  }
  char v66 = v28;
  int64_t v32 = (void *)(*(uint64_t (**)(void *, void))(*v26 + 16))(v26, 0);
  int v33 = v19;
  if (a4 > 0x3A)
  {
    uint64_t v34 = 1;
    if (!v29) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v34 = qword_1A29CB020[a4];
    if (!v29)
    {
LABEL_37:
      unsigned int v35 = v69;
      unint64_t v36 = v70;
      if (!v33) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
  }
  if (a4 > 0x3A) {
    goto LABEL_37;
  }
  unsigned int v35 = v69;
  unint64_t v36 = v70;
  if (((1 << v67) & 0x7FFF3FFF807F000) != 0) {
    v27 |= 1u;
  }
  if (!v33) {
    goto LABEL_39;
  }
LABEL_38:
  CGColorSpaceRef v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC88]);
  if (!v18)
  {
    CGImageRelease(v15);
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_87;
  }
LABEL_39:
  uint64_t v37 = CGBitmapContextCreate(v32, Width, v71, 8uLL, v34 * Width, v18, v27);
  CFRelease(v18);
  if (v37)
  {
    CGContextSetBlendMode(v37, kCGBlendModeCopy);
    v78.origin.x = 0.0;
    v78.origin.y = 0.0;
    v78.size.width = (float)Width;
    v78.size.height = v22;
    CGContextDrawImage(v37, v78, v15);
    CGContextRelease(v37);
    CFRelease(v15);
    size_t v38 = v71;
    if (v73 && v35 >= 2)
    {
      if (v66)
      {
        if (v36 <= 1) {
          uint64_t v39 = 1;
        }
        else {
          uint64_t v39 = v36;
        }
        uint64_t v40 = 2 * v36;
        uint64_t v41 = 1;
        unint64_t v68 = a1;
        do
        {
          if (Width >> v41 <= 1) {
            uint64_t v42 = 1;
          }
          else {
            uint64_t v42 = Width >> v41;
          }
          if (v38 >> v41 <= 1) {
            uint64_t v43 = 1;
          }
          else {
            uint64_t v43 = v38 >> v41;
          }
          uint64_t v44 = v41 - 1;
          unint64_t v45 = Width >> (v41 - 1);
          if (v45 <= 1) {
            uint64_t v46 = 1;
          }
          else {
            uint64_t v46 = Width >> (v41 - 1);
          }
          uint64_t v74 = v41;
          unint64_t v47 = (unsigned char *)(*(uint64_t (**)(void))(*(void *)v76 + 16))(v76);
          uint64_t v48 = (*(uint64_t (**)(void, uint64_t))(*(void *)v76 + 16))(v76, v44);
          unint64_t v49 = v71 >> v44;
          size_t v38 = v71;
          uint64_t v50 = v46 * v70;
          if (v45 <= 1)
          {
            uint64_t v58 = 0;
            uint64_t v59 = v48 + 3;
            a1 = v68;
            do
            {
              uint64_t v60 = 0;
              uint64_t v61 = v48 + v50 * 2 * v58;
              if (v49 > 1) {
                uint64_t v61 = v48 + v50 * ((2 * v58) | 1);
              }
              uint64_t v62 = v61 + 1;
              uint64_t v63 = v42;
              do
              {
                *unint64_t v47 = (*(unsigned __int8 *)(v59 + v60 - 3) + *(unsigned __int8 *)(v62 + v60 - 1)) >> 1;
                if (v30)
                {
                  ++v47;
                }
                else
                {
                  v47[1] = (*(unsigned __int8 *)(v59 + v60 - 2) + *(unsigned __int8 *)(v62 + v60)) >> 1;
                  if (v39 == 2)
                  {
                    v47 += 2;
                  }
                  else
                  {
                    v47[2] = (*(unsigned __int8 *)(v59 + v60 - 1) + *(unsigned __int8 *)(v62 + v60 + 1)) >> 1;
                    if (v39 == 3)
                    {
                      v47 += 3;
                    }
                    else
                    {
                      v47[3] = (*(unsigned __int8 *)(v59 + v60) + *(unsigned __int8 *)(v62 + v60 + 2)) >> 1;
                      v47 += 4;
                    }
                  }
                }
                v60 += v40;
                --v63;
              }
              while (v63);
              ++v58;
              v59 += v40 * v46;
            }
            while (v58 != v43);
          }
          else
          {
            uint64_t v51 = 0;
            uint64_t v52 = v48;
            a1 = v68;
            do
            {
              uint64_t v53 = 0;
              uint64_t v54 = v48 + v50 * 2 * v51;
              if (v49 > 1) {
                uint64_t v54 = v48 + v50 * ((2 * v51) | 1);
              }
              uint64_t v55 = v52 + v70;
              uint64_t v56 = v54 + v70;
              uint64_t v57 = v42;
              do
              {
                *unint64_t v47 = (*(unsigned __int8 *)(v55 + v53)
                      + *(unsigned __int8 *)(v52 + v53)
                      + *(unsigned __int8 *)(v54 + v53)
                      + *(unsigned __int8 *)(v56 + v53)) >> 2;
                if (v30)
                {
                  ++v47;
                }
                else
                {
                  v47[1] = (*(unsigned __int8 *)(v55 + v53 + 1)
                          + *(unsigned __int8 *)(v52 + v53 + 1)
                          + *(unsigned __int8 *)(v54 + v53 + 1)
                          + *(unsigned __int8 *)(v56 + v53 + 1)) >> 2;
                  if (v39 == 2)
                  {
                    v47 += 2;
                  }
                  else
                  {
                    v47[2] = (*(unsigned __int8 *)(v55 + v53 + 2)
                            + *(unsigned __int8 *)(v52 + v53 + 2)
                            + *(unsigned __int8 *)(v54 + v53 + 2)
                            + *(unsigned __int8 *)(v56 + v53 + 2)) >> 2;
                    if (v39 == 3)
                    {
                      v47 += 3;
                    }
                    else
                    {
                      v47[3] = (*(unsigned __int8 *)(v55 + v53 + 3)
                              + *(unsigned __int8 *)(v52 + v53 + 3)
                              + *(unsigned __int8 *)(v54 + v53 + 3)
                              + *(unsigned __int8 *)(v56 + v53 + 3)) >> 2;
                      v47 += 4;
                    }
                  }
                }
                v53 += v40;
                --v57;
              }
              while (v57);
              ++v51;
              v52 += v40 * v46;
            }
            while (v51 != v43);
          }
          uint64_t v41 = v74 + 1;
        }
        while (v74 + 1 != v69);
      }
      else
      {
        uint64_t v64 = 1;
        do
        {
          (*(void (**)(void, uint64_t))(*(void *)v76 + 16))(v76, v64);
          uint64_t v65 = (v64 - 1);
          (*(void (**)(void, uint64_t))(*(void *)v76 + 16))(v76, v65);
          uint64_t v64 = (v65 + 2);
        }
        while (v64 != v35);
      }
    }
    *(_OWORD *)a1 = v76;
    goto LABEL_21;
  }
  CGImageRelease(v15);
  *a1 = 0;
  a1[1] = 0;
  if (!v25) {
    goto LABEL_21;
  }
LABEL_87:
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_21:
}

void sub_1A1AE4750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18, char a19)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::TextureCube::TextureCube(uint64_t result, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(*a2 + 12);
  *(_DWORD *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 56) = 0x100000003;
  *(_DWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 68) = v3;
  *(void *)(result + 72) = 0x100000001;
  *(void *)(result + 80) = 0;
  *(void *)__n128 result = &unk_1EF55A950;
  *(void *)(result + 8) = 0;
  *(void *)(result + 40) = &unk_1EF55A970;
  *(void *)(result + 48) = "";
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(_DWORD *)(result + 88) = *(_DWORD *)(*a2 + 8);
  *(void *)(result + 96) = v5;
  *(void *)(result + 104) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a2[3];
  *(void *)(result + 112) = a2[2];
  *(void *)(result + 120) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[5];
  *(void *)(result + 128) = a2[4];
  *(void *)(result + 136) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a2[7];
  *(void *)(result + 144) = a2[6];
  *(void *)(result + 152) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a2[9];
  *(void *)(result + 160) = a2[8];
  *(void *)(result + 168) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a2[11];
  *(void *)(result + 176) = a2[10];
  *(void *)(result + 184) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(result + 192) = 0;
  *(_DWORD *)(result + 196) = *(_DWORD *)(*a2 + 16);
  *(unsigned char *)(result + 200) = 1;
  uint64_t v11 = a3[1];
  *(void *)(result + 208) = *a3;
  *(void *)(result + 216) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1A1AE4DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::LabelSettings::setClientLocalizedStrings(md::LabelSettings *this, VKClientLocalizedStrings *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v3 = a2;
  uint64_t v4 = *((void *)this + 5);
  uint64_t v5 = v3;
  uint64_t v6 = v5;
  if (v5) {
    uint64_t v7 = v5;
  }
  uint64_t v8 = *(void **)(v4 + 280);
  *(void *)(v4 + 280) = v6;

  uint64_t v9 = (md::LabelManager *)*((void *)this + 3);
  uint8x8_t v12 = v6;
  uint64_t v11 = v12;

  uint64_t v10 = operator new(0x28uLL);
  *(void *)uint64_t v10 = &unk_1EF56EEB0;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 2) = &unk_1EF559B78;
  *((void *)v10 + 3) = 0;
  objc_storeStrong((id *)v10 + 3, v11);

  uint64_t v14 = v10;
  md::LabelManager::queueCommand(v9, 46, 1, v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
}

void sub_1A1AE500C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void *md::LabelSettings_Presentation::setShowsPOIs(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 17) = a3;
  v4[0] = &unk_1EF56ED90;
  v4[1] = this;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 18, 1, v4);
  __n128 result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1AE536C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelSettings_Presentation::setLocalizeLabels(md::LabelSettings_Presentation *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 24) = a3;
  v4[0] = &unk_1EF56E520;
  v4[1] = this;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 5, 1, v4);
  __n128 result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1AE55E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelSettings::setTrafficClosuresEnabled(md::LabelSettings *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 26) = a3;
  *((unsigned char *)this + 3569) = a3;
  v4[0] = &unk_1EF56EEF8;
  v4[1] = this;
  v4[2] = a3;
  uint64_t v5 = v4;
  md::LabelManager::queueCommand(this, 15, 1, v4);
  __n128 result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A1AE5940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1AE5A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1AE5BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 == v12)
  {
    (*(void (**)(uint64_t *))(a9 + 32))(&a9);
    _Unwind_Resume(exception_object);
  }
  if (a12)
  {
    (*(void (**)(void))(*(void *)a12 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1AE5CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::LabelSettings::addCustomFeatureDataSource(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [*(id *)(*(void *)(a1 + 40) + 168) addObject:v3];
  uint64_t v4 = *(void *)(a1 + 24);
  id v7 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 168) + 64) + 32))(*(void *)(*(void *)(v4 + 168) + 64));
  if (v5)
  {
    id v6 = v7;
    v8[0] = &unk_1EF5776D0;
    v8[1] = v5;
    v8[2] = v6;
    uint64_t v9 = v8;
    md::LabelCustomFeatureSupport::queueCommand(v5, 0, v8);
    if (v9 == v8)
    {
      (*(void (**)(void *))(v8[0] + 32))(v8);
    }
    else if (v9)
    {
      (*(void (**)(void))(*v9 + 40))();
    }
  }
}

void sub_1A1AE5E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  std::function<void ()(void)>::~function(&a10);

  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'md::StandardLabeler::customFeatureSupport(md::StandardLabeler *this)
{
  return *((void *)this + 2);
}

void sub_1A1AE62F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void md::LabelSettings::setExternalTrafficFeatures(uint64_t a1, void *a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = *(id *)(*(void *)(a1 + 40) + 64);
  id v7 = v5;
  if (v6 == v7) {
    int v8 = 1;
  }
  else {
    int v8 = [v6 isEqual:v7];
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (!v8 || *(unsigned __int8 *)(v9 + 264) != a3)
  {
    id v10 = v7;
    uint64_t v11 = v10;
    if (v10) {
      id v12 = v10;
    }
    unint64_t v13 = *(void **)(v9 + 64);
    *(void *)(v9 + 64) = v11;

    *(unsigned char *)(*(void *)(a1 + 40) + 264) = a3;
  }
  uint64_t v14 = *(md::LabelManager **)(a1 + 24);
  id v18 = v7;
  id v15 = v18;

  char v17 = a3;
  int v16 = operator new(0x30uLL);
  *(void *)int v16 = &unk_1EF56EF40;
  *((void *)v16 + 1) = v14;
  *((void *)v16 + 2) = &unk_1EF559E78;
  *((void *)v16 + 3) = 0;
  objc_storeStrong((id *)v16 + 3, v15);

  *((unsigned char *)v16 + 40) = v17;
  uint64_t v20 = v16;
  md::LabelManager::queueCommand(v14, 35, 1, v19);
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
}

void sub_1A1AE66BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::fetchResources(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v210 = *MEMORY[0x1E4F143B8];
  id v163 = a4;
  v189 = 0;
  if ((geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(a1 + 520), &v189) & 1) == 0)
  {
    uint64_t v6 = 7;
    if (!*(unsigned char *)(a1 + 504)) {
      uint64_t v6 = 3;
    }
    if (*(unsigned char *)(a1 + 505)) {
      v6 |= 8uLL;
    }
    uint64_t v161 = v6;
    id v7 = *(uint64_t **)(a2 + 16);
    if (v7)
    {
      uint64_t v160 = a1;
      while (1)
      {
        int v8 = v186;
        uint64_t v181 = v7[2];
        v182 = v186;
        v183 = v186;
        v184 = v186;
        uint64_t v185 = 32;
        uint64_t v9 = (char *)v7[3];
        id v10 = (char *)v7[4];
        unint64_t v11 = v10 - v9;
        if ((unint64_t)(v10 - v9) < 0x21) {
          goto LABEL_30;
        }
        size_t v12 = v11 <= 0x40 ? 64 : v10 - v9;
        int v8 = malloc_type_malloc(v12, 0x100004077774924uLL);
        unint64_t v13 = (char *)v182;
        uint64_t v14 = v183;
        if (v182 != v183) {
          break;
        }
LABEL_29:
        v182 = v8;
        v183 = v8;
        uint64_t v185 = v12;
LABEL_30:
        if (v9 == v10) {
          goto LABEL_48;
        }
        if (v11 < 8)
        {
          int v29 = v8;
          goto LABEL_46;
        }
        if ((unint64_t)(v8 - v9) < 0x20)
        {
          int v29 = v8;
          goto LABEL_46;
        }
        if (v11 >= 0x20)
        {
          unint64_t v28 = v11 & 0xFFFFFFFFFFFFFFE0;
          char v30 = (long long *)(v9 + 16);
          uint64_t v31 = v8 + 16;
          unint64_t v32 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v33 = *v30;
            *(v31 - 1) = *(v30 - 1);
            _OWORD *v31 = v33;
            v30 += 2;
            v31 += 2;
            v32 -= 32;
          }
          while (v32);
          if (v11 == v28) {
            goto LABEL_47;
          }
          if ((v11 & 0x18) == 0)
          {
            v9 += v28;
            int v29 = &v8[v28];
            goto LABEL_46;
          }
        }
        else
        {
          unint64_t v28 = 0;
        }
        unint64_t v34 = v11 & 0xFFFFFFFFFFFFFFF8;
        int v29 = &v8[v11 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v35 = v28 - (v11 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v36 = (uint64_t *)&v9[v28];
        uint64_t v37 = &v8[v28];
        do
        {
          uint64_t v38 = *v36++;
          *v37++ = v38;
          v35 += 8;
        }
        while (v35);
        if (v11 == v34) {
          goto LABEL_47;
        }
        v9 += v34;
        do
        {
LABEL_46:
          char v39 = *v9++;
          *v29++ = v39;
        }
        while (v9 != v10);
LABEL_47:
        int v8 = v183;
LABEL_48:
        uint64_t v40 = v7[11];
        v183 = &v8[v11];
        uint64_t v187 = v40;
        long long v188 = *((_OWORD *)v7 + 6);
        uint64_t v41 = v7[14];
        long long v209 = 0uLL;
        id v42 = *(id *)(a1 + 520);
        *(void *)&long long v209 = (*(uint64_t (**)(uint64_t, id, uint64_t *))(*(void *)a1 + 136))(a1, v42, &v181);
        *((void *)&v209 + 1) = v43;

        (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 144))(v180, a1, &v181);
        unint64_t v44 = atomic_load((unint64_t *)(a1 + 104));
        if (v44) {
          (*(void (**)(unint64_t))(*(void *)v44 + 16))(v44);
        }
        switch(WORD1(v181))
        {
          case 0x2Au:
LABEL_53:
            if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
            }
            unint64_t v45 = (id)GEOGetVectorKitResourceLoadingLog_log;
            uint64_t v46 = v45;
            os_signpost_id_t v47 = v188;
            if ((unint64_t)(v188 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v45))
            {
              *(_DWORD *)buf = 134218752;
              uint64_t v202 = *(void *)((char *)&v209 + 1);
              __int16 v203 = 1024;
              int v204 = BYTE9(v209);
              __int16 v205 = 1024;
              *(_DWORD *)v206 = BYTE10(v209);
              *(_WORD *)&v206[4] = 2048;
              *(void *)&v206[6] = *((void *)&v188 + 1);
              int v48 = 1;
              _os_signpost_emit_with_name_impl(&dword_1A1780000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v47, "ResourceFetch", "key=%llu@%d type=%d parent_signpost=%llu", buf, 0x22u);
            }
            else
            {
              int v48 = 1;
            }
            unint64_t v49 = @"ast";
            break;
          case 0x24u:
            if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
            }
            uint64_t v50 = (id)GEOGetVectorKitResourceLoadingLog_log;
            uint64_t v46 = v50;
            os_signpost_id_t v51 = v188;
            if ((unint64_t)(v188 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
            {
              *(_DWORD *)buf = 134218496;
              uint64_t v202 = *(void *)((char *)&v209 + 1);
              __int16 v203 = 1024;
              int v204 = BYTE10(v209);
              __int16 v205 = 2048;
              *(void *)v206 = *((void *)&v188 + 1);
              int v48 = 1;
              _os_signpost_emit_with_name_impl(&dword_1A1780000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v51, "ResourceFetch", "key=%llu type=%d parent_signpost=%llu", buf, 0x1Cu);
            }
            else
            {
              int v48 = 1;
            }
            unint64_t v49 = @"mtl";
            break;
          case 0x1Cu:
            goto LABEL_53;
          default:
            if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
            }
            uint64_t v46 = (id)GEOGetVectorKitResourceLoadingLog_log;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134219010;
              uint64_t v202 = *(void *)((char *)&v209 + 1);
              __int16 v203 = 1024;
              int v204 = BYTE10(v209);
              __int16 v205 = 2080;
              *(void *)v206 = "false";
              *(_WORD *)&v206[8] = 2080;
              *(void *)&v206[10] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/IdentifiedGEOResourceFetcher.mm";
              __int16 v207 = 1024;
              int v208 = 83;
              _os_log_impl(&dword_1A1780000, v46, OS_LOG_TYPE_ERROR, "Unexpected resource type - key=%llu type=%d: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x2Cu);
            }
            int v48 = 0;
            unint64_t v49 = 0;
            break;
        }

        uint64_t v52 = +[VKDebugSettings sharedSettings];
        int v53 = [v52 daVinciResourceOverrideEnabled];

        if (v53)
        {
          uint64_t v54 = objc_msgSend(NSString, "stringWithFormat:", @"%llu", *(void *)((char *)&v209 + 1));
          uint64_t v55 = [v54 stringByAppendingPathExtension:v49];

          uint64_t v56 = [MEMORY[0x1E4F64918] modernManager];
          uint64_t v57 = [v56 pathForResourceWithName:v55];

          uint64_t v58 = [MEMORY[0x1E4F28CB8] defaultManager];
          LODWORD(v56) = [v58 fileExistsAtPath:v57];

          if ((v48 & v56) == 1)
          {
            uint64_t v59 = GEOResourceDevResourcesPath();
            uint64_t v60 = objc_msgSend(NSString, "stringWithFormat:", @"%llu", *(void *)((char *)&v209 + 1));
            uint64_t v61 = [v59 stringByAppendingPathComponent:v60];
            uint64_t v62 = [v61 stringByAppendingPathExtension:v49];

            uint64_t v63 = (char *)v182;
            uint64_t v190 = a1;
            uint64_t v191 = v181;
            uint64_t v64 = v194;
            *(void *)&long long v192 = v194;
            *((void *)&v192 + 1) = v194;
            *(void *)&long long v193 = v194;
            *((void *)&v193 + 1) = 32;
            uint64_t v65 = v183;
            unint64_t v66 = v183 - (unsigned char *)v182;
            if ((unint64_t)(v183 - (unsigned char *)v182) < 0x21) {
              goto LABEL_141;
            }
            if (v66 <= 0x40) {
              size_t v67 = 64;
            }
            else {
              size_t v67 = v183 - (unsigned char *)v182;
            }
            uint64_t v64 = malloc_type_malloc(v67, 0x100004077774924uLL);
            uint64_t v69 = (char *)*((void *)&v192 + 1);
            unint64_t v68 = (char *)v192;
            if ((void)v192 == *((void *)&v192 + 1)) {
              goto LABEL_140;
            }
            unint64_t v70 = *((void *)&v192 + 1) - v192;
            if (*((void *)&v192 + 1) - (void)v192 < 8uLL)
            {
              size_t v71 = v64;
            }
            else
            {
              size_t v71 = v64;
              if ((unint64_t)((unint64_t)v64 - v192) >= 0x20)
              {
                if (v70 < 0x20)
                {
                  uint64_t v72 = 0;
LABEL_109:
                  unint64_t v102 = v70 & 0xFFFFFFFFFFFFFFF8;
                  size_t v71 = (char *)v64 + (v70 & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v103 = v72 - (v70 & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v104 = (uint64_t *)&v68[v72];
                  uint64_t v105 = (void *)((char *)v64 + v72);
                  do
                  {
                    uint64_t v106 = *v104++;
                    *v105++ = v106;
                    v103 += 8;
                  }
                  while (v103);
                  if (v70 != v102)
                  {
                    v68 += v102;
                    goto LABEL_139;
                  }
LABEL_140:
                  *(void *)&long long v192 = v64;
                  *((void *)&v192 + 1) = v64;
                  *((void *)&v193 + 1) = v67;
LABEL_141:
                  if (v63 == v65) {
                    goto LABEL_159;
                  }
                  if (v66 < 8)
                  {
                    unint64_t v124 = v64;
                  }
                  else if ((unint64_t)((char *)v64 - v63) < 0x20)
                  {
                    unint64_t v124 = v64;
                  }
                  else
                  {
                    if (v66 < 0x20)
                    {
                      uint64_t v123 = 0;
LABEL_152:
                      unint64_t v129 = v66 & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v124 = (char *)v64 + (v66 & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v130 = v123 - (v66 & 0xFFFFFFFFFFFFFFF8);
                      int v131 = (uint64_t *)&v63[v123];
                      v132 = (void *)((char *)v64 + v123);
                      do
                      {
                        uint64_t v133 = *v131++;
                        *v132++ = v133;
                        v130 += 8;
                      }
                      while (v130);
                      if (v66 != v129)
                      {
                        v63 += v129;
                        goto LABEL_157;
                      }
LABEL_158:
                      uint64_t v64 = (void *)*((void *)&v192 + 1);
LABEL_159:
                      unsigned int v135 = (char *)v64 + v66;
                      uint64_t v136 = v187;
                      *((void *)&v192 + 1) = v135;
                      v194[4] = v187;
                      long long v195 = v188;
                      *(void *)v196 = v41;
                      *(_OWORD *)&v196[8] = v209;
                      id v120 = v62;
                      id v197 = v120;
                      id v137 = v163;
                      id v198 = v137;
                      v200 = 0;
                      uint64_t v138 = (char *)operator new(0x98uLL);
                      uint64_t v139 = v190;
                      uint64_t v140 = v191;
                      *(void *)uint64_t v138 = &unk_1EF5780F0;
                      *((void *)v138 + 1) = v139;
                      uint64_t v141 = v138 + 56;
                      *((void *)v138 + 2) = v140;
                      *((void *)v138 + 3) = v138 + 56;
                      uint64_t v142 = *((void *)&v193 + 1);
                      *((void *)v138 + 5) = v138 + 56;
                      *((void *)v138 + 6) = v142;
                      uint64_t v143 = (char *)v192;
                      if ((void)v192 != (void)v193)
                      {
                        *((void *)v138 + 3) = v192;
                        *((void *)v138 + 4) = v135;
                        long long v192 = 0u;
                        long long v193 = 0u;
                        goto LABEL_176;
                      }
                      unint64_t v144 = (unint64_t)&v135[-v192];
                      *((void *)v138 + 4) = &v135[(void)v141 - v192];
                      if (v135 == v143) {
                        goto LABEL_176;
                      }
                      if (v144 >= 8 && (unint64_t)(v138 - v143 + 56) >= 0x20)
                      {
                        if (v144 < 0x20)
                        {
                          uint64_t v145 = 0;
LABEL_170:
                          unint64_t v150 = v144 & 0xFFFFFFFFFFFFFFF8;
                          v141 += v144 & 0xFFFFFFFFFFFFFFF8;
                          uint64_t v151 = v145 - (v144 & 0xFFFFFFFFFFFFFFF8);
                          v152 = (uint64_t *)&v143[v145];
                          v153 = &v138[v145 + 56];
                          do
                          {
                            uint64_t v154 = *v152++;
                            *(void *)v153 = v154;
                            v153 += 8;
                            v151 += 8;
                          }
                          while (v151);
                          if (v144 != v150)
                          {
                            v143 += v150;
                            goto LABEL_175;
                          }
LABEL_176:
                          *((void *)v138 + 11) = v136;
                          long long v156 = *(_OWORD *)v196;
                          *((_OWORD *)v138 + 6) = v188;
                          *((_OWORD *)v138 + 7) = v156;
                          *((void *)v138 + 16) = *(void *)&v196[16];
                          *((void *)v138 + 17) = v120;
                          id v198 = 0;
                          id v197 = 0;
                          *((void *)v138 + 18) = v137;
                          v200 = v138;
                          geo::TaskQueue::async(&v178, a3, v199);
                          unint64_t v157 = v179;
                          if (v179 && !atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                            std::__shared_weak_count::__release_weak(v157);
                          }
                          if (v200 == v199)
                          {
                            (*(void (**)(void *))(v199[0] + 32))(v199);
                          }
                          else if (v200)
                          {
                            (*(void (**)(void))(*v200 + 40))();
                          }

                          uint64_t v121 = (void *)v192;
                          if ((void)v192 == (void)v193) {
                            goto LABEL_136;
                          }
LABEL_135:
                          free(v121);
                          goto LABEL_136;
                        }
                        uint64_t v145 = v144 & 0xFFFFFFFFFFFFFFE0;
                        v146 = (long long *)(v143 + 16);
                        v147 = v138 + 72;
                        unint64_t v148 = v144 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          long long v149 = *v146;
                          *(v147 - 1) = *(v146 - 1);
                          _OWORD *v147 = v149;
                          v146 += 2;
                          v147 += 2;
                          v148 -= 32;
                        }
                        while (v148);
                        if (v144 == v145) {
                          goto LABEL_176;
                        }
                        if ((v144 & 0x18) != 0) {
                          goto LABEL_170;
                        }
                        v143 += v145;
                        v141 += v145;
                      }
                      do
                      {
LABEL_175:
                        char v155 = *v143++;
                        *v141++ = v155;
                      }
                      while (v143 != v135);
                      goto LABEL_176;
                    }
                    uint64_t v123 = v66 & 0xFFFFFFFFFFFFFFE0;
                    long long v125 = (long long *)(v63 + 16);
                    uint64_t v126 = v64 + 2;
                    unint64_t v127 = v66 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v128 = *v125;
                      *(v126 - 1) = *(v125 - 1);
                      *uint64_t v126 = v128;
                      v125 += 2;
                      v126 += 2;
                      v127 -= 32;
                    }
                    while (v127);
                    if (v66 == v123) {
                      goto LABEL_158;
                    }
                    if ((v66 & 0x18) != 0) {
                      goto LABEL_152;
                    }
                    v63 += v123;
                    unint64_t v124 = (char *)v64 + v123;
                  }
                  do
                  {
LABEL_157:
                    char v134 = *v63++;
                    *v124++ = v134;
                  }
                  while (v63 != v65);
                  goto LABEL_158;
                }
                uint64_t v72 = v70 & 0xFFFFFFFFFFFFFFE0;
                size_t v98 = (long long *)(v192 + 16);
                int v99 = v64 + 2;
                unint64_t v100 = v70 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v101 = *v98;
                  *(v99 - 1) = *(v98 - 1);
                  *int v99 = v101;
                  v98 += 2;
                  v99 += 2;
                  v100 -= 32;
                }
                while (v100);
                if (v70 == v72) {
                  goto LABEL_140;
                }
                if ((v70 & 0x18) != 0) {
                  goto LABEL_109;
                }
                v68 += v72;
                size_t v71 = (char *)v64 + v72;
              }
            }
            do
            {
LABEL_139:
              char v122 = *v68++;
              *v71++ = v122;
            }
            while (v68 != v69);
            goto LABEL_140;
          }
        }
        v166 = [MEMORY[0x1E4F64AC8] modernLoader];
        if (LOBYTE(v180[0])) {
          int v73 = (char *)v180 + 4;
        }
        else {
          int v73 = 0;
        }
        uint64_t v74 = HIDWORD(v181);
        id v75 = *(id *)(a1 + 448);
        qos_class_t v76 = qos_class_self();
        uint64_t v164 = v188;
        id v77 = *(id *)(a1 + 472);
        id v165 = *(id *)(a3 + 16);
        v167[0] = MEMORY[0x1E4F143A8];
        v167[1] = 3321888768;
        CGRect v78 = v175;
        v167[2] = ___ZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
        v167[3] = &unk_1EF58DEF0;
        uint64_t v79 = a1;
        unint64_t v80 = (char *)v182;
        uint64_t v169 = v79;
        uint64_t v170 = v181;
        v171 = v175;
        v172 = (char *)v175;
        v173 = v175;
        uint64_t v174 = 32;
        unint64_t v81 = v183;
        unint64_t v82 = v183 - (unsigned char *)v182;
        if ((unint64_t)(v183 - (unsigned char *)v182) >= 0x21)
        {
          id v159 = v77;
          if (v82 <= 0x40) {
            size_t v83 = 64;
          }
          else {
            size_t v83 = v183 - (unsigned char *)v182;
          }
          CGRect v78 = malloc_type_malloc(v83, 0x100004077774924uLL);
          unint64_t v84 = (char *)v171;
          uint64_t v85 = v172;
          if (v171 == v172) {
            goto LABEL_115;
          }
          unint64_t v86 = v172 - (unsigned char *)v171;
          if ((unint64_t)(v172 - (unsigned char *)v171) < 8)
          {
            size_t v87 = v78;
          }
          else
          {
            size_t v87 = v78;
            if ((unint64_t)((char *)v78 - (unsigned char *)v171) >= 0x20)
            {
              if (v86 < 0x20)
              {
                uint64_t v88 = 0;
LABEL_100:
                unint64_t v93 = v86 & 0xFFFFFFFFFFFFFFF8;
                size_t v87 = (char *)v78 + (v86 & 0xFFFFFFFFFFFFFFF8);
                uint64_t v94 = v88 - (v86 & 0xFFFFFFFFFFFFFFF8);
                uint64_t v95 = &v84[v88];
                uint64_t v96 = (void *)((char *)v78 + v88);
                do
                {
                  uint64_t v97 = *(void *)v95;
                  v95 += 8;
                  *v96++ = v97;
                  v94 += 8;
                }
                while (v94);
                if (v86 != v93)
                {
                  v84 += v93;
                  goto LABEL_114;
                }
LABEL_115:
                v171 = v78;
                v172 = (char *)v78;
                uint64_t v174 = v83;
                id v77 = v159;
                goto LABEL_116;
              }
              uint64_t v88 = v86 & 0xFFFFFFFFFFFFFFE0;
              size_t v89 = (long long *)((char *)v171 + 16);
              std::locale v90 = v78 + 2;
              unint64_t v91 = v86 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v92 = *v89;
                *(v90 - 1) = *(v89 - 1);
                *std::locale v90 = v92;
                v89 += 2;
                v90 += 2;
                v91 -= 32;
              }
              while (v91);
              if (v86 == v88) {
                goto LABEL_115;
              }
              if ((v86 & 0x18) != 0) {
                goto LABEL_100;
              }
              v84 += v88;
              size_t v87 = (char *)v78 + v88;
            }
          }
          do
          {
LABEL_114:
            char v107 = *v84++;
            *v87++ = v107;
          }
          while (v84 != v85);
          goto LABEL_115;
        }
LABEL_116:
        if (v80 == v81) {
          goto LABEL_134;
        }
        if (v82 < 8)
        {
          uint64_t v109 = v78;
          goto LABEL_132;
        }
        if ((unint64_t)((char *)v78 - v80) < 0x20)
        {
          uint64_t v109 = v78;
          goto LABEL_132;
        }
        if (v82 >= 0x20)
        {
          unint64_t v108 = v82 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v110 = (long long *)(v80 + 16);
          uint64_t v111 = v78 + 2;
          unint64_t v112 = v82 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v113 = *v110;
            *(v111 - 1) = *(v110 - 1);
            *uint64_t v111 = v113;
            v110 += 2;
            v111 += 2;
            v112 -= 32;
          }
          while (v112);
          if (v82 == v108) {
            goto LABEL_133;
          }
          if ((v82 & 0x18) == 0)
          {
            v80 += v108;
            uint64_t v109 = (char *)v78 + v108;
            goto LABEL_132;
          }
        }
        else
        {
          unint64_t v108 = 0;
        }
        unint64_t v114 = v82 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v109 = (char *)v78 + (v82 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v115 = v108 - (v82 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v116 = (uint64_t *)&v80[v108];
        uint64_t v117 = (void *)((char *)v78 + v108);
        do
        {
          uint64_t v118 = *v116++;
          *v117++ = v118;
          v115 += 8;
        }
        while (v115);
        if (v82 == v114) {
          goto LABEL_133;
        }
        v80 += v114;
        do
        {
LABEL_132:
          char v119 = *v80++;
          *v109++ = v119;
        }
        while (v80 != v81);
LABEL_133:
        CGRect v78 = v172;
LABEL_134:
        v172 = (char *)v78 + v82;
        v175[4] = v187;
        long long v176 = v188;
        uint64_t v177 = v41;
        id v168 = v163;
        LODWORD(v158) = v76;
        id v120 = v166;
        [v166 loadKey:&v209 additionalInfo:v73 priority:v74 forClient:v75 options:v161 reason:1 qos:v158 signpostID:v164 auditToken:v77 callbackQ:v165 beginNetwork:0 callback:v167];
        a1 = v160;

        uint64_t v121 = v171;
        if (v171 != v173) {
          goto LABEL_135;
        }
LABEL_136:

        if (v182 != v184) {
          free(v182);
        }
        id v7 = (uint64_t *)*v7;
        if (!v7) {
          goto LABEL_185;
        }
      }
      unint64_t v15 = v183 - (unsigned char *)v182;
      if ((unint64_t)(v183 - (unsigned char *)v182) < 8)
      {
        int v16 = v8;
      }
      else
      {
        int v16 = v8;
        if ((unint64_t)(v8 - (unsigned char *)v182) >= 0x20)
        {
          if (v15 < 0x20)
          {
            uint64_t v17 = 0;
LABEL_23:
            unint64_t v22 = v15 & 0xFFFFFFFFFFFFFFF8;
            int v16 = &v8[v15 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v23 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v24 = (uint64_t *)&v13[v17];
            uint64_t v25 = &v8[v17];
            do
            {
              uint64_t v26 = *v24++;
              *v25++ = v26;
              v23 += 8;
            }
            while (v23);
            if (v15 == v22) {
              goto LABEL_29;
            }
            v13 += v22;
            goto LABEL_28;
          }
          uint64_t v17 = v15 & 0xFFFFFFFFFFFFFFE0;
          id v18 = (long long *)((char *)v182 + 16);
          int v19 = v8 + 16;
          unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v21 = *v18;
            *(v19 - 1) = *(v18 - 1);
            _OWORD *v19 = v21;
            v18 += 2;
            v19 += 2;
            v20 -= 32;
          }
          while (v20);
          if (v15 == v17) {
            goto LABEL_29;
          }
          if ((v15 & 0x18) != 0) {
            goto LABEL_23;
          }
          v13 += v17;
          int v16 = &v8[v17];
        }
      }
      do
      {
LABEL_28:
        char v27 = *v13++;
        *v16++ = v27;
      }
      while (v13 != v14);
      goto LABEL_29;
    }
  }
LABEL_185:
}

void sub_1A1AE7684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3 = a1;
  uint64_t v4 = *a2;
  id v5 = v3;
  id v6 = v4;
  if (v6 == v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = [v5 isEqual:v6];
  }

  return v7;
}

void sub_1A1AE7840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::tileLoaderAdditionalInfo(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void std::__function::__func<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0,std::allocator<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF559E78;

  operator delete((void *)a1);
}

unint64_t *ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>>::each(uint64_t a1, uint64_t a2)
{
  gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::AssociationTileHandle,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>,md::ls::TileUnitsPerMeter,md::ls::MapDataTypeV,md::ls::TileViewConstantDataHandle,md::ls::TileMatrix,md::ls::TileRenderableDataHandle,md::ls::RenderablesCount,md::ls::TileTransformConstantDataHandle,md::ls::TransferStyleAttributeRasterSet,md::ls::TileClippingConstantDataHandle,md::ls::TileShadowConstantDataHandle,md::ls::TilePrepassShadowConstantDataHandle,md::ls::TilePrepassConstantDataHandle,md::ls::TileStyleCameraConstantDataHandle>((uint64_t *)v212, *(int8x8_t **)(*(void *)(a1 + 8) + 8));
  long long v198 = v212[1];
  long long v200 = v212[0];
  long long v196 = v212[2];
  long long v192 = v212[4];
  long long v193 = v212[5];
  long long v188 = v212[6];
  long long v190 = v212[3];
  __int16 v203 = v213;
  long long v202 = v214;
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::begin(v204, v212);
  v206[0] = v200;
  v206[1] = v198;
  v206[2] = v196;
  v206[3] = v190;
  v206[4] = v192;
  v206[5] = v193;
  uint8x8_t v2 = *(unint64_t **)(gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*>(v206)
                            + 32);
  id v3 = v205;
  v194 = v2;
  if (v2 == v205)
  {
    __n128 result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_201:
    *__n128 result = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v4 = (void *)v193;
    id v5 = (void *)v190;
    id v6 = (void *)v188;
    uint64_t v7 = (void *)v196;
    int v8 = (void *)v198;
    uint64_t v9 = (void *)v200;
    __n128 result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v191 = v11;
    v189 = v12;
    uint64_t v187 = result;
    while (1)
    {
      *__n128 result = *v3;
      unint64_t v13 = *v3;
      unint64_t v14 = HIDWORD(*v3);
      unint64_t v15 = *v3 >> 39;
      uint64_t v16 = v9[4];
      if (v15 < (v9[5] - v16) >> 3
        && (uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0
        && (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v20 = v9[7],
            uint64_t v19 = v9[8],
            v18 < (v19 - v20) >> 3)
        && ((v21 = v20 + 8 * v18, v21 != v19) ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v14) : (BOOL v22 = 0), v22))
      {
        uint64_t v23 = v9[11];
        uint64_t v24 = v9[10] + 8 * v18;
      }
      else
      {
        uint64_t v23 = v9[11];
        uint64_t v24 = v23;
      }
      if (v24 == v23) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = *(void *)(*((void *)&v200 + 1) + 32);
      if (v15 < (*(void *)(*((void *)&v200 + 1) + 40) - v26) >> 3
        && (uint64_t v27 = *(void *)(v26 + 8 * v15)) != 0
        && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v30 = *(void *)(*((void *)&v200 + 1) + 56),
            uint64_t v29 = *(void *)(*((void *)&v200 + 1) + 64),
            v28 < (v29 - v30) >> 3)
        && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v14) : (v32 = 0), v32))
      {
        unint64_t v33 = *(void *)(*((void *)&v200 + 1) + 88);
        unint64_t v34 = *(void *)(*((void *)&v200 + 1) + 80) + v28;
      }
      else
      {
        unint64_t v33 = *(void *)(*((void *)&v200 + 1) + 88);
        unint64_t v34 = v33;
      }
      if (v34 == v33) {
        unint64_t v35 = 0;
      }
      else {
        unint64_t v35 = v34;
      }
      uint64_t v36 = v8[4];
      if (v15 < (v8[5] - v36) >> 3
        && (uint64_t v37 = *(void *)(v36 + 8 * v15)) != 0
        && (unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v40 = v8[7],
            uint64_t v39 = v8[8],
            v38 < (v39 - v40) >> 3)
        && ((v41 = v40 + 8 * v38, v41 != v39) ? (BOOL v42 = *(_DWORD *)(v41 + 4) == v14) : (BOOL v42 = 0), v42))
      {
        uint64_t v43 = v8[11];
        uint64_t v44 = v8[10] + 8 * v38;
      }
      else
      {
        uint64_t v43 = v8[11];
        uint64_t v44 = v43;
      }
      if (v44 == v43) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = v44;
      }
      uint64_t v46 = *(void *)(*((void *)&v198 + 1) + 32);
      if (v15 < (*(void *)(*((void *)&v198 + 1) + 40) - v46) >> 3
        && (uint64_t v47 = *(void *)(v46 + 8 * v15)) != 0
        && (unint64_t v48 = *(unsigned __int16 *)(v47 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v50 = *(void *)(*((void *)&v198 + 1) + 56),
            uint64_t v49 = *(void *)(*((void *)&v198 + 1) + 64),
            v48 < (v49 - v50) >> 3)
        && ((uint64_t v51 = v50 + 8 * v48, v51 != v49) ? (v52 = *(_DWORD *)(v51 + 4) == v14) : (v52 = 0), v52))
      {
        uint64_t v53 = *(void *)(*((void *)&v198 + 1) + 88);
        uint64_t v54 = *(void *)(*((void *)&v198 + 1) + 80) + 8 * v48;
      }
      else
      {
        uint64_t v53 = *(void *)(*((void *)&v198 + 1) + 88);
        uint64_t v54 = v53;
      }
      if (v54 == v53) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = v54;
      }
      uint64_t v56 = v7[4];
      if (v15 < (v7[5] - v56) >> 3
        && (uint64_t v57 = *(void *)(v56 + 8 * v15)) != 0
        && (unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v60 = v7[7],
            uint64_t v59 = v7[8],
            v58 < (v59 - v60) >> 3)
        && ((v61 = v60 + 8 * v58, v61 != v59) ? (BOOL v62 = *(_DWORD *)(v61 + 4) == v14) : (BOOL v62 = 0), v62))
      {
        unint64_t v63 = v7[11];
        unint64_t v64 = v7[10] + v58;
      }
      else
      {
        unint64_t v63 = v7[11];
        unint64_t v64 = v63;
      }
      if (v64 == v63) {
        unint64_t v65 = 0;
      }
      else {
        unint64_t v65 = v64;
      }
      uint64_t v66 = v6[4];
      uint64_t v201 = v45;
      uint64_t v199 = v55;
      unint64_t v197 = v35;
      if (v15 < (v6[5] - v66) >> 3
        && (uint64_t v67 = *(void *)(v66 + 8 * v15)) != 0
        && (unint64_t v68 = *(unsigned __int16 *)(v67 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v70 = v6[7],
            uint64_t v69 = v6[8],
            v68 < (v69 - v70) >> 3)
        && ((uint64_t v71 = v70 + 8 * v68, v71 != v69) ? (v72 = *(_DWORD *)(v71 + 4) == v14) : (v72 = 0), v72))
      {
        uint64_t v73 = v6[11];
        uint64_t v74 = v6[10] + 8 * v68;
      }
      else
      {
        uint64_t v73 = v6[11];
        uint64_t v74 = v73;
      }
      if (v74 == v73) {
        uint64_t v75 = 0;
      }
      else {
        uint64_t v75 = v74;
      }
      uint64_t v76 = *(void *)(*((void *)&v196 + 1) + 32);
      if (v15 < (*(void *)(*((void *)&v196 + 1) + 40) - v76) >> 3
        && (uint64_t v77 = *(void *)(v76 + 8 * v15)) != 0
        && (unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v80 = *(void *)(*((void *)&v196 + 1) + 56),
            uint64_t v79 = *(void *)(*((void *)&v196 + 1) + 64),
            v78 < (v79 - v80) >> 3)
        && (uint64_t v81 = v80 + 8 * v78, v81 != v79)
        && *(_DWORD *)(v81 + 4) == v14)
      {
        unint64_t v82 = v65;
        uint64_t v83 = *(void *)(*((void *)&v196 + 1) + 88);
        uint64_t v84 = *(void *)(*((void *)&v196 + 1) + 80) + 12 * v78;
      }
      else
      {
        unint64_t v82 = v65;
        uint64_t v83 = *(void *)(*((void *)&v196 + 1) + 88);
        uint64_t v84 = v83;
      }
      if (v84 == v83) {
        uint64_t v85 = 0;
      }
      else {
        uint64_t v85 = v84;
      }
      uint64_t v86 = v5[4];
      if (v15 < (v5[5] - v86) >> 3
        && (uint64_t v87 = *(void *)(v86 + 8 * v15)) != 0
        && (unint64_t v88 = *(unsigned __int16 *)(v87 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v90 = v5[7],
            uint64_t v89 = v5[8],
            v88 < (v89 - v90) >> 3)
        && (uint64_t v91 = v90 + 8 * v88, v91 != v89)
        && *(_DWORD *)(v91 + 4) == v14)
      {
        uint64_t v92 = v5[11];
        uint64_t v93 = v5[10] + 2 * v88;
      }
      else
      {
        uint64_t v92 = v5[11];
        uint64_t v93 = v92;
      }
      if (v93 == v92) {
        uint64_t v94 = 0;
      }
      else {
        uint64_t v94 = v93;
      }
      uint64_t v95 = *(void *)(*((void *)&v188 + 1) + 32);
      if (v15 < (*(void *)(*((void *)&v188 + 1) + 40) - v95) >> 3
        && (uint64_t v96 = *(void *)(v95 + 8 * v15)) != 0
        && (unint64_t v97 = *(unsigned __int16 *)(v96 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v99 = *(void *)(*((void *)&v188 + 1) + 56),
            uint64_t v98 = *(void *)(*((void *)&v188 + 1) + 64),
            v97 < (v98 - v99) >> 3)
        && (uint64_t v100 = v99 + 8 * v97, v100 != v98)
        && *(_DWORD *)(v100 + 4) == v14)
      {
        uint64_t v101 = *(void *)(*((void *)&v188 + 1) + 88);
        uint64_t v102 = *(void *)(*((void *)&v188 + 1) + 80) + 8 * v97;
      }
      else
      {
        uint64_t v101 = *(void *)(*((void *)&v188 + 1) + 88);
        uint64_t v102 = v101;
      }
      if (v102 == v101) {
        uint64_t v103 = 0;
      }
      else {
        uint64_t v103 = v102;
      }
      uint64_t v104 = *(void *)(*((void *)&v190 + 1) + 32);
      if (v15 < (*(void *)(*((void *)&v190 + 1) + 40) - v104) >> 3
        && (uint64_t v105 = *(void *)(v104 + 8 * v15)) != 0
        && (unint64_t v106 = *(unsigned __int16 *)(v105 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v108 = *(void *)(*((void *)&v190 + 1) + 56),
            uint64_t v107 = *(void *)(*((void *)&v190 + 1) + 64),
            v106 < (v107 - v108) >> 3)
        && (uint64_t v109 = v108 + 8 * v106, v109 != v107)
        && *(_DWORD *)(v109 + 4) == v14)
      {
        uint64_t v110 = *(void *)(*((void *)&v190 + 1) + 88);
        uint64_t v111 = *(void *)(*((void *)&v190 + 1) + 80) + 8 * v106;
      }
      else
      {
        uint64_t v110 = *(void *)(*((void *)&v190 + 1) + 88);
        uint64_t v111 = v110;
      }
      if (v111 == v110) {
        uint64_t v112 = 0;
      }
      else {
        uint64_t v112 = v111;
      }
      uint64_t v113 = *(void *)(v192 + 32);
      if (v15 < (*(void *)(v192 + 40) - v113) >> 3
        && (uint64_t v114 = *(void *)(v113 + 8 * v15)) != 0
        && (unint64_t v115 = *(unsigned __int16 *)(v114 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v117 = *(void *)(v192 + 56),
            uint64_t v116 = *(void *)(v192 + 64),
            v115 < (v116 - v117) >> 3)
        && (uint64_t v118 = v117 + 8 * v115, v118 != v116)
        && *(_DWORD *)(v118 + 4) == v14)
      {
        uint64_t v119 = *(void *)(v192 + 88);
        uint64_t v120 = *(void *)(v192 + 80) + 8 * v115;
      }
      else
      {
        uint64_t v119 = *(void *)(v192 + 88);
        uint64_t v120 = v119;
      }
      if (v120 == v119) {
        uint64_t v121 = 0;
      }
      else {
        uint64_t v121 = v120;
      }
      uint64_t v122 = *(void *)(*((void *)&v192 + 1) + 32);
      if (v15 < (*(void *)(*((void *)&v192 + 1) + 40) - v122) >> 3
        && (uint64_t v123 = *(void *)(v122 + 8 * v15)) != 0
        && (unint64_t v124 = *(unsigned __int16 *)(v123 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v126 = *(void *)(*((void *)&v192 + 1) + 56),
            uint64_t v125 = *(void *)(*((void *)&v192 + 1) + 64),
            v124 < (v125 - v126) >> 3)
        && (uint64_t v127 = v126 + 8 * v124, v127 != v125)
        && *(_DWORD *)(v127 + 4) == v14)
      {
        uint64_t v128 = *(void *)(*((void *)&v192 + 1) + 88);
        uint64_t v129 = *(void *)(*((void *)&v192 + 1) + 80) + 8 * v124;
      }
      else
      {
        uint64_t v128 = *(void *)(*((void *)&v192 + 1) + 88);
        uint64_t v129 = v128;
      }
      if (v129 == v128) {
        uint64_t v130 = 0;
      }
      else {
        uint64_t v130 = v129;
      }
      uint64_t v131 = v4[4];
      if (v15 < (v4[5] - v131) >> 3
        && (uint64_t v132 = *(void *)(v131 + 8 * v15)) != 0
        && (unint64_t v133 = *(unsigned __int16 *)(v132 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v135 = v4[7],
            uint64_t v134 = v4[8],
            v133 < (v134 - v135) >> 3)
        && (uint64_t v136 = v135 + 8 * v133, v136 != v134)
        && *(_DWORD *)(v136 + 4) == v14)
      {
        uint64_t v137 = v4[11];
        uint64_t v138 = v4[10] + 32 * v133;
      }
      else
      {
        uint64_t v137 = v4[11];
        uint64_t v138 = v137;
      }
      if (v138 == v137) {
        uint64_t v139 = 0;
      }
      else {
        uint64_t v139 = v138;
      }
      uint64_t v140 = v11[4];
      if (v15 < (v11[5] - v140) >> 3
        && (uint64_t v141 = *(void *)(v140 + 8 * v15)) != 0
        && (unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v144 = v11[7],
            uint64_t v143 = v11[8],
            v142 < (v143 - v144) >> 3)
        && (uint64_t v145 = v144 + 8 * v142, v145 != v143)
        && *(_DWORD *)(v145 + 4) == v14)
      {
        uint64_t v146 = v11[11];
        uint64_t v147 = v11[10] + 8 * v142;
      }
      else
      {
        uint64_t v146 = v11[11];
        uint64_t v147 = v146;
      }
      if (v147 == v146) {
        uint64_t v147 = 0;
      }
      uint64_t v148 = v12[4];
      if (v15 < (v12[5] - v148) >> 3
        && (uint64_t v149 = *(void *)(v148 + 8 * v15)) != 0
        && (unint64_t v150 = *(unsigned __int16 *)(v149 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v151 = v12[7],
            uint64_t v152 = v12[8],
            v150 < (v152 - v151) >> 3)
        && (uint64_t v153 = v151 + 8 * v150, v153 != v152)
        && *(_DWORD *)(v153 + 4) == v14)
      {
        uint64_t v154 = v12[11];
        uint64_t v155 = v12[10] + 8 * v150;
      }
      else
      {
        uint64_t v154 = v12[11];
        uint64_t v155 = v154;
      }
      if (v155 == v154) {
        uint64_t v156 = 0;
      }
      else {
        uint64_t v156 = v155;
      }
      uint64_t v157 = v203[4];
      if (v15 < (v203[5] - v157) >> 3
        && (uint64_t v158 = *(void *)(v157 + 8 * v15)) != 0
        && (unint64_t v159 = *(unsigned __int16 *)(v158 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v161 = v203[7],
            uint64_t v160 = v203[8],
            v159 < (v160 - v161) >> 3)
        && (uint64_t v162 = v161 + 8 * v159, v162 != v160)
        && *(_DWORD *)(v162 + 4) == v14)
      {
        uint64_t v163 = v203[11];
        uint64_t v164 = v203[10] + 8 * v159;
      }
      else
      {
        uint64_t v163 = v203[11];
        uint64_t v164 = v163;
      }
      if (v164 == v163) {
        uint64_t v165 = 0;
      }
      else {
        uint64_t v165 = v164;
      }
      uint64_t v166 = *(void *)(v202 + 32);
      if (v15 < (*(void *)(v202 + 40) - v166) >> 3
        && (uint64_t v167 = *(void *)(v166 + 8 * v15)) != 0
        && (unint64_t v168 = *(unsigned __int16 *)(v167 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v169 = *(void *)(v202 + 56),
            uint64_t v170 = *(void *)(v202 + 64),
            v168 < (v170 - v169) >> 3)
        && (uint64_t v171 = v169 + 8 * v168, v171 != v170)
        && *(_DWORD *)(v171 + 4) == v14)
      {
        uint64_t v172 = *(void *)(v202 + 88);
        uint64_t v173 = *(void *)(v202 + 80) + 8 * v168;
      }
      else
      {
        uint64_t v172 = *(void *)(v202 + 88);
        uint64_t v173 = v172;
      }
      if (v173 == v172) {
        uint64_t v173 = 0;
      }
      uint64_t v174 = *(void *)(*((void *)&v202 + 1) + 32);
      if (v15 < (*(void *)(*((void *)&v202 + 1) + 40) - v174) >> 3
        && (uint64_t v175 = *(void *)(v174 + 8 * v15)) != 0
        && (unint64_t v176 = *(unsigned __int16 *)(v175 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v177 = *(void *)(*((void *)&v202 + 1) + 56),
            uint64_t v178 = *(void *)(*((void *)&v202 + 1) + 64),
            v176 < (v178 - v177) >> 3)
        && (uint64_t v179 = v177 + 8 * v176, v179 != v178)
        && *(_DWORD *)(v179 + 4) == v14)
      {
        uint64_t v180 = *(void *)(*((void *)&v202 + 1) + 88);
        uint64_t v181 = *(void *)(*((void *)&v202 + 1) + 80) + 8 * v176;
      }
      else
      {
        uint64_t v180 = *(void *)(*((void *)&v202 + 1) + 88);
        uint64_t v181 = v180;
      }
      uint64_t v182 = v181 == v180 ? 0 : v181;
      *(void *)&v206[0] = v75;
      uint64_t v210 = v156;
      uint64_t v211 = v103;
      uint64_t v209 = v165;
      uint64_t v208 = v173;
      uint64_t v207 = v182;
      uint64_t v183 = *(void *)(a2 + 24);
      if (!v183) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, _OWORD *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v183 + 48))(v183, v25, v197, v201, v199, v82, v206, v85, v94, &v211, v112, v121, v130, v139, v147, &v210, &v209, &v208, &v207);
      v184 = *(unint64_t **)(v204[0] + 32);
      while (1)
      {
        __int16 v205 = ++v3;
        if (v3 == v184) {
          break;
        }
        if (gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::Iterator::isValid(v204)) {
          goto LABEL_4;
        }
      }
      id v3 = v184;
LABEL_4:
      unint64_t v11 = v191;
      uint64_t v4 = (void *)v193;
      size_t v12 = v189;
      __n128 result = v187;
      if (v194 == v3) {
        goto LABEL_201;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (unint64_t *)gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::begin(v185, v186);
  }
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::begin(uint64_t *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v17 = a2[10];
  uint64_t v18 = a2[9];
  uint64_t v16 = a2[11];
  v19[0] = *a2;
  uint64_t v3 = v19[0];
  v19[1] = v4;
  v19[2] = v5;
  void v19[3] = v6;
  v19[4] = v7;
  v19[5] = v8;
  v19[6] = v9;
  v19[7] = v10;
  v19[8] = v11;
  v19[9] = v18;
  v19[10] = v17;
  v19[11] = v16;
  uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*>(v19);
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v18;
  a1[11] = v17;
  a1[12] = v16;
  uint64_t v14 = *(void *)(result + 24);
  uint64_t v13 = *(void *)(result + 32);
  a1[14] = v14;
  if (v13 != v14)
  {
    uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      uint64_t v15 = v14 + 8;
      do
      {
        a1[14] = v15;
        if (v15 == v13) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::Iterator::isValid(a1);
        v15 += 8;
      }
      while (!result);
    }
  }
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1) {
    uint64_t v2 = *a1 + 32;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v1) {
    uint64_t v3 = v1 + 32;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  if (v4) {
    uint64_t v6 = v4 + 32;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5) {
    uint64_t v7 = v5 + 32;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  if (v8) {
    uint64_t v10 = v8 + 32;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v9) {
    uint64_t v11 = v9 + 32;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  if (v12) {
    uint64_t v14 = v12 + 32;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13) {
    uint64_t v15 = v13 + 32;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = a1[8];
  uint64_t v17 = a1[9];
  if (v16) {
    uint64_t v18 = v16 + 32;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17) {
    uint64_t v19 = v17 + 32;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v21 = a1[10];
  uint64_t v20 = a1[11];
  uint64_t v22 = v21 + 32;
  if (!v21) {
    uint64_t v22 = 0;
  }
  uint64_t v23 = v20 + 32;
  if (!v20) {
    uint64_t v23 = 0;
  }
  if (*(void *)(v3 + 32) - *(void *)(v3 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v3;
  }
  if (*(void *)(v6 + 32) - *(void *)(v6 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v6;
  }
  if (*(void *)(v7 + 32) - *(void *)(v7 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v7;
  }
  if (*(void *)(v10 + 32) - *(void *)(v10 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v10;
  }
  if (*(void *)(v11 + 32) - *(void *)(v11 + 24) >= *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v11 = v2;
  }
  if (*(void *)(v14 + 32) - *(void *)(v14 + 24) >= *(void *)(v11 + 32) - *(void *)(v11 + 24)) {
    uint64_t v14 = v11;
  }
  if (*(void *)(v15 + 32) - *(void *)(v15 + 24) >= *(void *)(v14 + 32) - *(void *)(v14 + 24)) {
    uint64_t v15 = v14;
  }
  if (*(void *)(v18 + 32) - *(void *)(v18 + 24) >= *(void *)(v15 + 32) - *(void *)(v15 + 24)) {
    uint64_t v18 = v15;
  }
  if (*(void *)(v19 + 32) - *(void *)(v19 + 24) >= *(void *)(v18 + 32) - *(void *)(v18 + 24)) {
    uint64_t v19 = v18;
  }
  if (*(void *)(v22 + 32) - *(void *)(v22 + 24) >= *(void *)(v19 + 32) - *(void *)(v19 + 24)) {
    uint64_t v22 = v19;
  }
  if (*(void *)(v23 + 32) - *(void *)(v23 + 24) >= *(void *)(v22 + 32) - *(void *)(v22 + 24)) {
    return v22;
  }
  else {
    return v23;
  }
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1AE8CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::FlyoverOctileKey const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::FlyoverOctileKey const&>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::FlyoverOctileKey const&>>::~Model()
{
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *(unsigned __int8 *)(*a2 + 2);
  uint64_t v5 = *result;
  unsigned int v6 = *(unsigned __int8 *)(*result + 2);
  if (v4 == v6)
  {
    if (*(unsigned char *)(*a2 + 2))
    {
      double v7 = *(double *)(v3 + 104);
      uint64_t v8 = (double *)(v5 + 104);
    }
    else
    {
      double v7 = **(double **)(**(void **)(v3 + 40) + 16);
      uint64_t v8 = *(double **)(**(void **)(v5 + 40) + 16);
    }
    if (v7 <= *v8) {
      goto LABEL_12;
    }
LABEL_5:
    uint64_t v9 = *a3;
    unsigned int v10 = *(unsigned __int8 *)(*a3 + 2);
    if (v10 == v4)
    {
      if (*(unsigned char *)(*a2 + 2))
      {
        double v11 = *(double *)(v9 + 104);
        uint64_t v12 = (double *)(v3 + 104);
      }
      else
      {
        double v11 = **(double **)(**(void **)(v9 + 40) + 16);
        uint64_t v12 = *(double **)(**(void **)(v3 + 40) + 16);
      }
      if (v11 <= *v12)
      {
LABEL_19:
        *uint64_t result = v3;
        *a2 = v5;
        uint64_t v17 = *a3;
        unsigned int v18 = *(unsigned __int8 *)(*a3 + 2);
        if (v18 == v6)
        {
          if (v6)
          {
            double v19 = *(double *)(v17 + 104);
            uint64_t v20 = (double *)(v5 + 104);
          }
          else
          {
            double v19 = **(double **)(**(void **)(v17 + 40) + 16);
            uint64_t v20 = *(double **)(**(void **)(v5 + 40) + 16);
          }
          if (v19 <= *v20) {
            return result;
          }
        }
        else if (v18 >= v6)
        {
          return result;
        }
        *a2 = v17;
        *a3 = v5;
        return result;
      }
    }
    else if (v10 >= v4)
    {
      goto LABEL_19;
    }
    *uint64_t result = v9;
    *a3 = v5;
    return result;
  }
  if (v4 < v6) {
    goto LABEL_5;
  }
LABEL_12:
  uint64_t v13 = *a3;
  unsigned int v14 = *(unsigned __int8 *)(*a3 + 2);
  if (v14 == v4)
  {
    if (*(unsigned char *)(*a2 + 2))
    {
      double v15 = *(double *)(v13 + 104);
      uint64_t v16 = (double *)(v3 + 104);
    }
    else
    {
      double v15 = **(double **)(**(void **)(v13 + 40) + 16);
      uint64_t v16 = *(double **)(**(void **)(v3 + 40) + 16);
    }
    if (v15 <= *v16) {
      return result;
    }
  }
  else if (v14 >= v4)
  {
    return result;
  }
  *a2 = v13;
  *a3 = v3;
  uint64_t v21 = *a2;
  unsigned int v22 = *(unsigned __int8 *)(*a2 + 2);
  uint64_t v23 = *result;
  unsigned int v24 = *(unsigned __int8 *)(*result + 2);
  if (v22 == v24)
  {
    if (*(unsigned char *)(*a2 + 2))
    {
      double v25 = *(double *)(v21 + 104);
      unsigned int v26 = (double *)(v23 + 104);
    }
    else
    {
      double v25 = **(double **)(**(void **)(v21 + 40) + 16);
      unsigned int v26 = *(double **)(**(void **)(v23 + 40) + 16);
    }
    if (v25 > *v26) {
      goto LABEL_36;
    }
  }
  else if (v22 < v24)
  {
LABEL_36:
    *uint64_t result = v21;
    *a2 = v23;
  }
  return result;
}

double std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(a1, a2, a3, a4);
  uint64_t v11 = *a5;
  unsigned int v12 = *(unsigned __int8 *)(*a5 + 2);
  uint64_t v13 = *a4;
  unsigned int v14 = *(unsigned __int8 *)(*a4 + 2);
  if (v12 == v14)
  {
    if (*(unsigned char *)(*a5 + 2))
    {
      double result = *(double *)(v11 + 104);
      double v15 = (double *)(v13 + 104);
    }
    else
    {
      double result = **(double **)(**(void **)(v11 + 40) + 16);
      double v15 = *(double **)(**(void **)(v13 + 40) + 16);
    }
    if (result <= *v15) {
      return result;
    }
  }
  else if (v12 >= v14)
  {
    return result;
  }
  *a4 = v11;
  *a5 = v13;
  uint64_t v16 = *a4;
  unsigned int v17 = *(unsigned __int8 *)(*a4 + 2);
  uint64_t v18 = *a3;
  unsigned int v19 = *(unsigned __int8 *)(*a3 + 2);
  if (v17 == v19)
  {
    if (*(unsigned char *)(*a4 + 2))
    {
      double result = *(double *)(v16 + 104);
      uint64_t v20 = (double *)(v18 + 104);
    }
    else
    {
      double result = **(double **)(**(void **)(v16 + 40) + 16);
      uint64_t v20 = *(double **)(**(void **)(v18 + 40) + 16);
    }
    if (result <= *v20) {
      return result;
    }
  }
  else if (v17 >= v19)
  {
    return result;
  }
  *a3 = v16;
  *a4 = v18;
  uint64_t v21 = *a3;
  unsigned int v22 = *(unsigned __int8 *)(*a3 + 2);
  uint64_t v23 = *a2;
  unsigned int v24 = *(unsigned __int8 *)(*a2 + 2);
  if (v22 != v24)
  {
    if (v22 >= v24) {
      return result;
    }
LABEL_22:
    *a2 = v21;
    *a3 = v23;
    uint64_t v26 = *a2;
    unsigned int v27 = *(unsigned __int8 *)(*a2 + 2);
    uint64_t v28 = *a1;
    unsigned int v29 = *(unsigned __int8 *)(*a1 + 2);
    if (v27 == v29)
    {
      if (*(unsigned char *)(*a2 + 2))
      {
        double result = *(double *)(v26 + 104);
        uint64_t v30 = (double *)(v28 + 104);
      }
      else
      {
        double result = **(double **)(**(void **)(v26 + 40) + 16);
        uint64_t v30 = *(double **)(**(void **)(v28 + 40) + 16);
      }
      if (result <= *v30) {
        return result;
      }
    }
    else if (v27 >= v29)
    {
      return result;
    }
    *a1 = v26;
    *a2 = v28;
    return result;
  }
  if (*(unsigned char *)(*a3 + 2))
  {
    double result = *(double *)(v21 + 104);
    double v25 = (double *)(v23 + 104);
  }
  else
  {
    double result = **(double **)(**(void **)(v21 + 40) + 16);
    double v25 = *(double **)(**(void **)(v23 + 40) + 16);
  }
  if (result > *v25) {
    goto LABEL_22;
  }
  return result;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(a1, a2, a3);
  uint64_t v9 = *a4;
  unsigned int v10 = *(unsigned __int8 *)(*a4 + 2);
  uint64_t v11 = *a3;
  unsigned int v12 = *(unsigned __int8 *)(*a3 + 2);
  if (v10 == v12)
  {
    if (*(unsigned char *)(*a4 + 2))
    {
      double result = *(double *)(v9 + 104);
      uint64_t v13 = (double *)(v11 + 104);
    }
    else
    {
      double result = **(double **)(**(void **)(v9 + 40) + 16);
      uint64_t v13 = *(double **)(**(void **)(v11 + 40) + 16);
    }
    if (result <= *v13) {
      return result;
    }
  }
  else if (v10 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v11;
  uint64_t v14 = *a3;
  unsigned int v15 = *(unsigned __int8 *)(*a3 + 2);
  uint64_t v16 = *a2;
  unsigned int v17 = *(unsigned __int8 *)(*a2 + 2);
  if (v15 != v17)
  {
    if (v15 >= v17) {
      return result;
    }
LABEL_15:
    *a2 = v14;
    *a3 = v16;
    uint64_t v19 = *a2;
    unsigned int v20 = *(unsigned __int8 *)(*a2 + 2);
    uint64_t v21 = *a1;
    unsigned int v22 = *(unsigned __int8 *)(*a1 + 2);
    if (v20 == v22)
    {
      if (*(unsigned char *)(*a2 + 2))
      {
        double result = *(double *)(v19 + 104);
        uint64_t v23 = (double *)(v21 + 104);
      }
      else
      {
        double result = **(double **)(**(void **)(v19 + 40) + 16);
        uint64_t v23 = *(double **)(**(void **)(v21 + 40) + 16);
      }
      if (result <= *v23) {
        return result;
      }
    }
    else if (v20 >= v22)
    {
      return result;
    }
    *a1 = v19;
    *a2 = v21;
    return result;
  }
  if (*(unsigned char *)(*a3 + 2))
  {
    double result = *(double *)(v14 + 104);
    uint64_t v18 = (double *)(v16 + 104);
  }
  else
  {
    double result = **(double **)(**(void **)(v14 + 40) + 16);
    uint64_t v18 = *(double **)(**(void **)(v16 + 40) + 16);
  }
  if (result > *v18) {
    goto LABEL_15;
  }
  return result;
}

void sub_1A1AEA4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEA6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEA968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEA97C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t gdc::CameraView::mercatorCameraView(gdc::CameraView *this, const Camera *a2)
{
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformMercator(v27, (double *)a2 + 1, *(unsigned char *)a2 == 0);
  double v4 = *((double *)a2 + 1);
  double v5 = *((double *)a2 + 58);
  double v6 = *((double *)a2 + 59);
  double v7 = *((double *)a2 + 46);
  double v8 = *((double *)a2 + 47);
  v25[0] = (int)v7;
  v25[1] = (int)v8;
  float v9 = *((float *)a2 + 122);
  if (v8 >= v7)
  {
    double v15 = *((double *)a2 + 57);
  }
  else
  {
    double v10 = v8 * v7;
    double v11 = v8 / v7;
    if (v10 <= 0.0) {
      double v12 = 1.0;
    }
    else {
      double v12 = v11;
    }
    long double v13 = tan(*((double *)a2 + 57) * 0.5);
    long double v14 = atan(v13 * v12);
    double v15 = v14 + v14;
  }
  long double v16 = tan(v4 * 0.5 + 0.789761487);
  double v17 = log(v16);
  long double v18 = tan(v4 * 0.5 + 0.78103484);
  double v19 = fabs((v17 - log(v18)) * 0.159154943);
  long double v20 = cos(v4 + v4) * -559.82 + 111132.92;
  long double v21 = v20 + cos(v4 * 4.0) * 1.175;
  long double v22 = cos(v4 * 6.0);
  double v24 = v15;
  gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView((uint64_t)v26, (uint64_t)v27, v25, &v24, v9, 0.0, 16.0, v19 / (v21 + v22 * -0.0023) * v5, v19 / (v21 + v22 * -0.0023) * v6, *((double *)a2 + 60));
  return gdc::CameraView::CameraView((uint64_t)this, (uint64_t)a2, (uint64_t)v26);
}

double gdc::CameraFrame<geo::Radians,double>::toRigidTransformMercator(double *a1, double *a2, int a3)
{
  double v5 = a2[4];
  double v6 = a2[5];
  double v7 = a2[6];
  double v8 = *a2;
  if (a3)
  {
    double v27 = v8 * 0.5;
    double v9 = 0.0000000249532021;
  }
  else
  {
    long double v10 = cos(v8 + v8) * -559.82 + 111132.92;
    long double v11 = v10 + cos(v8 * 4.0) * 1.175;
    long double v12 = v11 + cos(v8 * 6.0) * -0.0023;
    double v13 = v8 * 0.5;
    long double v14 = tan(v8 * 0.5 + 0.78103484);
    double v15 = log(v14);
    double v27 = v13;
    long double v16 = tan(v13 + 0.789761487);
    double v9 = fabs((log(v16) - v15) * 0.159154943) / v12;
  }
  double v26 = v9;
  __double2 v17 = __sincos_stret((v6 - v7) * 0.5);
  __double2 v18 = __sincos_stret(v5 * 0.5);
  __double2 v19 = __sincos_stret((v7 + v6) * 0.5);
  double v20 = a2[1];
  double v21 = a2[2];
  long double v22 = tan(v27 + 0.785398163);
  long double v23 = log(v22);
  double v24 = a2[3] * v26;
  *a1 = v20 * 0.159154943
      + 0.5
      + v24
      * -(v17.__cosval * v18.__sinval * -2.0 * (v19.__sinval * v18.__cosval)
        - (v17.__sinval * v18.__sinval + v17.__sinval * v18.__sinval) * (v19.__cosval * v18.__cosval));
  a1[1] = v23 * 0.159154943
        + 0.5
        + v24
        * (v17.__cosval * v18.__sinval * -2.0 * (v19.__cosval * v18.__cosval)
         + (v17.__sinval * v18.__sinval + v17.__sinval * v18.__sinval) * (v19.__sinval * v18.__cosval));
  double result = -(v21 * -0.0000000249532021
           + v24
           * -(v17.__cosval * v18.__sinval * -2.0 * (v17.__cosval * v18.__sinval)
             + 1.0
             - (v17.__sinval * v18.__sinval + v17.__sinval * v18.__sinval) * (v17.__sinval * v18.__sinval)));
  a1[2] = result;
  a1[3] = v17.__cosval * v18.__sinval;
  a1[4] = v17.__sinval * v18.__sinval;
  a1[5] = v19.__sinval * v18.__cosval;
  a1[6] = v19.__cosval * v18.__cosval;
  return result;
}

void sub_1A1AEADE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1AEB230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEB43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

unint64_t MDDisplayLayerSwapchainProvider::nextDrawable(id *this)
{
  (*(void (**)(long long *__return_ptr))(*(void *)[this[37] swapchain] + 24))(&v60);
  if ((void)v60)
  {
    uint64_t v2 = this[23];
    if (this[22] == v2)
    {
      uint64_t v6 = ((unint64_t)((unsigned char *)this[29] - (unsigned char *)this[28]) >> 4) | 0x100000000;
      double v8 = (uint64_t *)this[26];
      double v7 = (uint64_t *)this[27];
      if (v8 >= v7)
      {
        long double v10 = (uint64_t *)this[25];
        uint64_t v11 = v8 - v10;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_79;
        }
        uint64_t v13 = (char *)v7 - (char *)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 61) {
            goto LABEL_80;
          }
          double v15 = operator new(8 * v14);
        }
        else
        {
          double v15 = 0;
        }
        long double v16 = (uint64_t *)&v15[8 * v11];
        __double2 v17 = &v15[8 * v14];
        *long double v16 = v6;
        double v9 = v16 + 1;
        if (v8 == v10)
        {
          long double v10 = v8;
        }
        else
        {
          unint64_t v18 = (char *)v8 - (char *)v10 - 8;
          if (v18 < 0x58) {
            goto LABEL_83;
          }
          if ((unint64_t)((char *)v10 - v15) < 0x20) {
            goto LABEL_83;
          }
          uint64_t v19 = (v18 >> 3) + 1;
          double v20 = &v15[8 * v11 - 16];
          double v21 = v8 - 2;
          uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v23 = *(_OWORD *)v21;
            *(v20 - 1) = *((_OWORD *)v21 - 1);
            _OWORD *v20 = v23;
            v20 -= 2;
            v21 -= 4;
            v22 -= 4;
          }
          while (v22);
          v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
          v8 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
          if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_83:
            do
            {
              uint64_t v24 = *--v8;
              *--long double v16 = v24;
            }
            while (v8 != v10);
            long double v10 = (uint64_t *)this[25];
          }
        }
        this[25] = v16;
        this[26] = v9;
        this[27] = v17;
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *double v8 = v6;
        double v9 = v8 + 1;
      }
      this[26] = v9;
      unint64_t v4 = *(v9 - 1);
    }
    else
    {
      uint64_t v3 = *(v2 - 1);
      this[23] = v2 - 1;
      *((_DWORD *)this[25] + 2 * v3) = (unint64_t)((unsigned char *)this[29] - (unsigned char *)this[28]) >> 4;
      *((_DWORD *)this[25] + 2 * v3 + 1) = (((unint64_t)*((unsigned int *)this[25] + 2 * v3 + 1) << 32)
                                          + 0x100000000) >> 32;
      unint64_t v4 = v3 | ((unint64_t)*((unsigned int *)this[25] + 2 * v3 + 1) << 32);
    }
    double v26 = (char *)this[29];
    double v25 = (char *)this[30];
    if (v26 >= v25)
    {
      unsigned int v29 = (char *)this[28];
      uint64_t v30 = (v26 - v29) >> 4;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 60) {
        goto LABEL_79;
      }
      uint64_t v32 = v25 - v29;
      if (v32 >> 3 > v31) {
        unint64_t v31 = v32 >> 3;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33 >> 60) {
        goto LABEL_80;
      }
      unint64_t v34 = (char *)operator new(16 * v33);
      uint64_t v35 = &v34[16 * v30];
      uint64_t v36 = *((void *)&v60 + 1);
      *(_OWORD *)uint64_t v35 = v60;
      if (v36)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
        unsigned int v29 = (char *)this[28];
        double v26 = (char *)this[29];
      }
      uint64_t v37 = &v34[16 * v33];
      uint64_t v28 = v35 + 16;
      if (v26 == v29)
      {
        this[28] = v35;
        this[29] = v28;
        this[30] = v37;
      }
      else
      {
        do
        {
          long long v38 = *((_OWORD *)v26 - 1);
          v26 -= 16;
          *((_OWORD *)v35 - 1) = v38;
          v35 -= 16;
          *(void *)double v26 = 0;
          *((void *)v26 + 1) = 0;
        }
        while (v26 != v29);
        unsigned int v29 = (char *)this[28];
        uint64_t v39 = (char *)this[29];
        this[28] = v35;
        this[29] = v28;
        for (this[30] = v37; v39 != v29; v39 -= 16)
        {
          uint64_t v40 = (std::__shared_weak_count *)*((void *)v39 - 1);
          if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)double v26 = v60;
      uint64_t v27 = *((void *)&v60 + 1);
      *((void *)v26 + 1) = *((void *)&v60 + 1);
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = v26 + 16;
    }
    this[29] = v28;
    double v42 = (char *)this[32];
    unsigned int v41 = (char *)this[33];
    if (v42 < v41)
    {
      *(void *)double v42 = v4;
      uint64_t v43 = v42 + 8;
      goto LABEL_75;
    }
    uint64_t v44 = (char *)this[31];
    uint64_t v45 = (v42 - v44) >> 3;
    unint64_t v46 = v45 + 1;
    if (!((unint64_t)(v45 + 1) >> 61))
    {
      uint64_t v47 = v41 - v44;
      if (v47 >> 2 > v46) {
        unint64_t v46 = v47 >> 2;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      if (!v48)
      {
        unsigned int v49 = 0;
LABEL_66:
        double v50 = &v49[8 * v45];
        uint64_t v51 = &v49[8 * v48];
        *double v50 = v4;
        uint64_t v43 = v50 + 1;
        if (v42 != v44)
        {
          unint64_t v52 = v42 - v44 - 8;
          if (v52 < 0x58) {
            goto LABEL_84;
          }
          if ((unint64_t)(v44 - v49) < 0x20) {
            goto LABEL_84;
          }
          uint64_t v53 = (v52 >> 3) + 1;
          double v54 = &v49[8 * v45 - 16];
          uint64_t v55 = v42 - 16;
          uint64_t v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v57 = *(_OWORD *)v55;
            *(v54 - 1) = *((_OWORD *)v55 - 1);
            *double v54 = v57;
            v54 -= 2;
            v55 -= 32;
            v56 -= 4;
          }
          while (v56);
          v50 -= v53 & 0x3FFFFFFFFFFFFFFCLL;
          v42 -= 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
          if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_84:
            do
            {
              uint64_t v58 = *((void *)v42 - 1);
              v42 -= 8;
              *--double v50 = v58;
            }
            while (v42 != v44);
          }
        }
        this[31] = v50;
        this[32] = v43;
        this[33] = v51;
        if (v44) {
          operator delete(v44);
        }
LABEL_75:
        this[32] = v43;
        double v5 = (std::__shared_weak_count *)*((void *)&v60 + 1);
        if (!*((void *)&v60 + 1)) {
          return v4;
        }
        goto LABEL_76;
      }
      if (!(v48 >> 61))
      {
        unsigned int v49 = operator new(8 * v48);
        goto LABEL_66;
      }
LABEL_80:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_79:
    abort();
  }
  unint64_t v4 = 0;
  double v5 = (std::__shared_weak_count *)*((void *)&v60 + 1);
  if (!*((void *)&v60 + 1)) {
    return v4;
  }
LABEL_76:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v4;
}

void sub_1A1AEB9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ggl::MetalSwapchain::nextDrawable(ggl::MetalSwapchain *this@<X0>, void *a2@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 3);
  [*(id *)(v4 + 16) contentsScale];
  double v6 = v5;
  [*(id *)(v4 + 16) bounds];
  unint64_t v8 = (v7 * v6);
  unint64_t v10 = (v9 * v6);
  if (*((void *)this + 9) != v8 || *((void *)this + 10) != v10)
  {
    ggl::MetalSwapchain::resize(this, v8, v10);
    unint64_t v8 = *((void *)this + 9);
    unint64_t v10 = *((void *)this + 10);
  }
  if (!(v10 * v8))
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  uint64_t v35 = a2;
  if (*((void *)this + 12))
  {
    uint64_t v12 = 0;
    unint64_t v13 = *((void *)this + 13);
    while (1)
    {
      uint64_t v14 = *((void *)this + 5);
      double v15 = (long long *)(v14 + 16 * v13);
      if (!*(void *)v15)
      {
        int v36 = *((_DWORD *)this + 20);
        int v37 = *((_DWORD *)this + 18);
        int v18 = *((_DWORD *)this + 16);
        uint64_t v19 = (char *)operator new(0xA8uLL);
        double v20 = v19;
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = 0;
        *(void *)uint64_t v19 = &unk_1EF5886E0;
        uint64_t v22 = *((void *)this + 1);
        uint64_t v21 = *((void *)this + 2);
        *((void *)v19 + 10) = 0;
        *((void *)v19 + 11) = v22;
        *((void *)v19 + 3) = 850045863;
        long long v38 = v19 + 24;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((void *)v19 + 12) = v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v23 = *((void *)this + 4);
        *((void *)v19 + 13) = *((void *)this + 3);
        *((void *)v19 + 14) = v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v19 + 148) = 0uLL;
        *(_OWORD *)(v19 + 136) = 0uLL;
        *(_OWORD *)(v19 + 120) = 0uLL;
        uint64_t v24 = (std::__shared_weak_count *)operator new(0x58uLL);
        v24->__shared_owners_ = 0;
        v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
        v24[1].__shared_weak_owners_ = 0;
        v24[2].__vftable = 0;
        v24[1].__shared_owners_ = 0;
        LODWORD(v24[2].__shared_owners_) = 0;
        v24->__shared_weak_owners_ = 0;
        v24[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55AE58;
        *(_OWORD *)((char *)&v24[2].__shared_owners_ + 4) = xmmword_1A28FD570;
        *(std::__shared_weak_count_vtbl **)((char *)&v24[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000000;
        HIDWORD(v24[3].__shared_owners_) = 0;
        double v25 = operator new(0xB0uLL);
        v25[1] = 0;
        _WORD v25[2] = 0;
        void *v25 = &unk_1EF589EF0;
        v25[5] = 0;
        v25[6] = 0;
        *((_DWORD *)v25 + 14) = 0;
        v25[10] = 0x100000001;
        *((_DWORD *)v25 + 22) = 0;
        *((_DWORD *)v25 + 23) = v18;
        v25[12] = 0x100000001;
        v25[14] = 0;
        v25[15] = 0;
        v25[3] = &unk_1EF562EE0;
        v25[4] = 0;
        v25[8] = &unk_1EF562F00;
        v25[9] = "";
        *((_DWORD *)v25 + 32) = 1;
        v25[17] = 0;
        v25[18] = 0;
        *((_WORD *)v25 + 76) = 0;
        *((unsigned char *)v25 + 154) = 1;
        v25[20] = v24 + 1;
        v25[21] = v24;
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        *((_DWORD *)v25 + 26) = v37;
        *((_DWORD *)v25 + 27) = v36;
        *((void *)v20 + 15) = v25 + 3;
        *((void *)v20 + 16) = v25;
        if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        *(void *)double v15 = v38;
        uint64_t v26 = v14 + 16 * v13;
        uint64_t v27 = *(std::__shared_weak_count **)(v26 + 8);
        *(void *)(v26 + 8) = v20;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (!atomic_load((unsigned int *)(*(void *)v15 + 132))) {
        break;
      }
      unint64_t v17 = *((void *)this + 12);
      unint64_t v13 = (v12 + *((void *)this + 13)) % v17;
      *((void *)this + 13) = v13;
      if (++v12 >= v17) {
        goto LABEL_22;
      }
    }
    unsigned int v29 = operator new(0x30uLL);
    uint64_t v30 = v29;
    v29[1] = 0;
    v29[2] = 0;
    *unsigned int v29 = &unk_1EF5889F0;
    unint64_t v31 = (char *)(v29 + 3);
    v29[3] = &unk_1EF55FEC8;
    long long v32 = *v15;
    *((_OWORD *)v29 + 2) = *v15;
    if (*((void *)&v32 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v33 = v29[4];
      unint64_t v34 = v35;
      if (!v33) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v33 = v32;
      unint64_t v34 = v35;
      if (!(void)v32)
      {
LABEL_33:
        void *v34 = v31;
        v34[1] = v30;
        return;
      }
    }
    std::mutex::lock((std::mutex *)v33);
    ++*(_DWORD *)(v33 + 128);
    std::mutex::unlock((std::mutex *)v33);
    goto LABEL_33;
  }
LABEL_22:
  if (GEOGetGeoGLMetalSwapchainLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetGeoGLMetalSwapchainLog(void)::onceToken, &__block_literal_global_53743);
  }
  uint64_t v28 = GEOGetGeoGLMetalSwapchainLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalSwapchainLog(void)::log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v40 = "false";
    __int16 v41 = 2080;
    double v42 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalSwapchain.mm";
    __int16 v43 = 1024;
    int v44 = 119;
    _os_log_impl(&dword_1A1780000, v28, OS_LOG_TYPE_ERROR, "Exhaused pool of swapchain drawables: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
  }
  void *v35 = 0;
  v35[1] = 0;
}

void sub_1A1AEBEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14)
{
  shared_weak_owners = (std::__shared_weak_count *)v14[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (!atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1A1AEC204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEC48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEC49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEC524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEC584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEC6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AECBCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AECD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1AECDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1AECEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1AECF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1AED038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::Renderer::setPerformanceHUDScale(uint64_t this, float a2)
{
  *(float *)(this + 44) = a2;
  return this;
}

void sub_1A1AED0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AED1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AED87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v23 = *v21;
  if (*v21)
  {
    uint64_t v24 = v20[3].__vftable;
    double v25 = *v21;
    if (v24 != v23)
    {
      do
      {
        on_zero_shared_weak = (std::__shared_weak_count *)v24[-1].__on_zero_shared_weak;
        if (on_zero_shared_weak && !atomic_fetch_add(&on_zero_shared_weak->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
          std::__shared_weak_count::__release_weak(on_zero_shared_weak);
        }
        uint64_t v24 = (std::__shared_weak_count_vtbl *)((char *)v24 - 16);
      }
      while (v24 != v23);
      double v25 = *v21;
    }
    v20[3].__vftable = v23;
    operator delete(v25);
  }
  shared_owners = (std::__shared_weak_count *)v20[2].__shared_owners_;
  if (shared_owners && !atomic_fetch_add(&shared_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v20[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (!atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a18);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<ggl::Data>>::__append(uint64_t a1, unint64_t a2)
{
  double v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      double v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    double v6 = *(void **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      abort();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    double v15 = &v11[16 * v10];
    bzero(v13, v14);
    long double v16 = &v13[v14];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v15;
    }
    else
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 16;
        void *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v6);
      double v5 = *(void **)a1;
      int v18 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      for (*(void *)(a1 + 16) = v15; v18 != v5; v18 -= 2)
      {
        uint64_t v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t ggl::MetalSwapchain::resize(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  double v6 = a1 + 5;
  if (v8 != v7)
  {
    do
    {
      uint64_t v9 = *(std::__shared_weak_count **)(v8 - 8);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v8 -= 16;
    }
    while (v8 != v7);
    uint64_t v8 = *v6;
  }
  a1[6] = v7;
  unint64_t v10 = a1[12];
  unint64_t v11 = (v7 - v8) >> 4;
  unint64_t v12 = v10 - v11;
  if (v10 <= v11)
  {
    if (v10 < v11)
    {
      for (uint64_t i = v8 + 16 * v10; v7 != i; v7 -= 16)
      {
        size_t v14 = *(std::__shared_weak_count **)(v7 - 8);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      a1[6] = i;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::Data>>::__append((uint64_t)v6, v12);
  }
  a1[13] = 0;
  a1[9] = a2;
  a1[10] = a3;
  double v15 = *(void **)(a1[3] + 16);
  return objc_msgSend(v15, "setDrawableSize:", (double)a2, (double)a3);
}

void sub_1A1AEDFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEE420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1AEE5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FlyoverCommonMaterialHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v8 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  unsigned int v118 = v8;
  double v119 = v3;
  uint64_t v120 = (void *)v4;
  uint64_t v121 = (void *)v5;
  uint64_t v9 = (void *)v8[3];
  unint64_t v10 = (void *)v8[4];
  uint64_t v122 = (void *)v6;
  unsigned int v123 = v9;
  if (v10 == v9)
  {
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v118))
    {
      unint64_t v12 = v9 + 1;
      do
      {
        uint64_t v9 = v12;
        unsigned int v123 = v12;
        if (v12 == v10) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v118);
        unint64_t v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  unsigned int v117 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *unsigned int v117 = *v9;
    unint64_t v15 = *v9;
    uint64_t v16 = HIDWORD(*v9);
    unint64_t v17 = *v9 >> 39;
    uint64_t v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
      && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), uint64_t v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
    {
      double v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      double v25 = (unint64_t *)v3[11];
    }
    uint64_t v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
      && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], uint64_t v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v7[10] + 8 * v28;
    }
    else
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v33;
    }
    if (v34 == v33) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = (unint64_t *)v34;
    }
    uint64_t v36 = **(void **)(v11 + 8);
    int v37 = *(void **)v36;
    long long v38 = *(void **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38) {
          goto LABEL_46;
        }
      }
    }
    if (v37 == v38)
    {
LABEL_46:
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v39 = (void *)v37[3];
      uint64_t v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    unint64_t v41 = *v35;
    unint64_t v42 = *v35;
    uint64_t v43 = v39[50];
    unint64_t v44 = (v39[51] - v43) >> 3;
    if (v42 < v44
      && (uint64_t v45 = *(void *)(v43 + 8 * v42)) != 0
      && HIDWORD(v41) == HIDWORD(v45)
      && ((v46 = v39[53], v46 + 16 * v45 != v39[54]) ? (BOOL v47 = v46 == 0) : (BOOL v47 = 1), !v47))
    {
      uint64_t v53 = *(void *)(v43 + 8 * v42);
      double v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v41, v35);
      ++v54[3];
      uint64_t v55 = v46 + 16 * v53;
      uint64_t v11 = a1;
      unint64_t v48 = *(void **)(v55 + 8);
      unint64_t v41 = *v35;
      uint64_t v43 = v39[50];
      unint64_t v42 = *v35;
      if (v42 >= (v39[51] - v43) >> 3)
      {
LABEL_67:
        uint64_t v101 = 0;
        goto LABEL_68;
      }
    }
    else
    {
      unint64_t v48 = 0;
      if (v42 >= v44) {
        goto LABEL_67;
      }
    }
    uint64_t v49 = *(void *)(v43 + 8 * v42);
    if (!v49 || HIDWORD(v41) != HIDWORD(v49)) {
      goto LABEL_67;
    }
    uint64_t v50 = v39[53];
    uint64_t v51 = (void **)(v50 + 16 * v49);
    if (v51 == (void **)v39[54] || v50 == 0)
    {
      uint64_t v101 = 0;
    }
    else
    {
      uint64_t v100 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v41, v35);
      ++v100[3];
      uint64_t v101 = *v51;
    }
    uint64_t v11 = a1;
LABEL_68:
    unint64_t v56 = *v25;
    unint64_t v124 = v56;
    uint64_t v57 = v39[662];
    if (v56 < (unint64_t)((v39[663] - v57) >> 3))
    {
      uint64_t v58 = *(void *)(v57 + 8 * v56);
      if (v58 && HIDWORD(v56) == HIDWORD(v58))
      {
        uint64_t v91 = v39[665];
        uint64_t v92 = (uint64_t *)(v91 + 24 * v58);
        if (v92 != (uint64_t *)v39[666] && v91 != 0)
        {
          uint64_t v94 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>> const&>,std::tuple<>>((uint64_t)(v39 + 649), v56, &v124);
          ++v94[3];
          uint64_t v95 = *v92;
          if (*v92)
          {
            {
              gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
            }
            unint64_t v96 = v48[1];
            if (v96)
            {
              unint64_t v97 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index;
              uint8x8_t v98 = (uint8x8_t)vcnt_s8((int8x8_t)v96);
              v98.i16[0] = vaddlv_u8(v98);
              if (v98.u32[0] > 1uLL)
              {
                uint64_t v99 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index;
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index >= v96) {
                  uint64_t v99 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index % v96;
                }
              }
              else
              {
                uint64_t v99 = (v96 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index;
              }
              uint64_t v102 = *(void **)(*v48 + 8 * v99);
              if (v102)
              {
                uint64_t v103 = (void *)*v102;
                if (v103)
                {
                  if (v98.u32[0] < 2uLL)
                  {
                    unint64_t v104 = v96 - 1;
                    while (1)
                    {
                      uint64_t v106 = v103[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index == v106)
                      {
                        if (v103[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index) {
                          goto LABEL_136;
                        }
                      }
                      else if ((v106 & v104) != v99)
                      {
                        goto LABEL_73;
                      }
                      uint64_t v103 = (void *)*v103;
                      if (!v103) {
                        goto LABEL_73;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v105 = v103[1];
                    if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index == v105)
                    {
                      if (v103[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index)
                      {
LABEL_136:
                        {
                          if (v115)
                          {
                            md::typeToIntMap(v115);
                            uint64_t v11 = a1;
                          }
                        }
                        if (!qword_1E957F030) {
                          goto LABEL_166;
                        }
                        uint8x8_t v107 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                        v107.i16[0] = vaddlv_u8(v107);
                        if (v107.u32[0] > 1uLL)
                        {
                          unint64_t v108 = v97;
                          if (v97 >= qword_1E957F030) {
                            unint64_t v108 = v97 % qword_1E957F030;
                          }
                        }
                        else
                        {
                          unint64_t v108 = (qword_1E957F030 - 1) & v97;
                        }
                        uint64_t v109 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v108);
                        if (!v109 || (int64_t v110 = *v109) == 0) {
LABEL_166:
                        }
                          abort();
                        if (v107.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            int64_t v112 = v110[1];
                            if ((uint64_t *)v97 == v112)
                            {
                              if (v110[2] == (uint64_t *)v97) {
                                goto LABEL_157;
                              }
                            }
                            else if (((unint64_t)v112 & (qword_1E957F030 - 1)) != v108)
                            {
                              goto LABEL_166;
                            }
                            int64_t v110 = (uint64_t **)*v110;
                            if (!v110) {
                              goto LABEL_166;
                            }
                          }
                        }
                        while (1)
                        {
                          unint64_t v111 = (unint64_t)v110[1];
                          if (v97 == v111)
                          {
                            if (v110[2] == (uint64_t *)v97)
                            {
LABEL_157:
                              uint64_t v113 = *((int *)v110 + 6);
                              uint64_t v114 = *((int *)v110 + 7);
                              if (v113 != -1) {
                                ggl::PipelineSetup::setConstantData(v101, v113, v95, 1);
                              }
                              if (v114 != -1) {
                                ggl::PipelineSetup::setConstantData(v101, v114, v95, 2);
                              }
                              goto LABEL_73;
                            }
                          }
                          else
                          {
                            if (v111 >= qword_1E957F030) {
                              v111 %= (unint64_t)qword_1E957F030;
                            }
                            if (v111 != v108) {
                              goto LABEL_166;
                            }
                          }
                          int64_t v110 = (uint64_t **)*v110;
                          if (!v110) {
                            goto LABEL_166;
                          }
                        }
                      }
                    }
                    else
                    {
                      if (v105 >= v96) {
                        v105 %= v96;
                      }
                      if (v105 != v99) {
                        break;
                      }
                    }
                    uint64_t v103 = (void *)*v103;
                  }
                  while (v103);
                }
              }
            }
          }
        }
      }
    }
LABEL_73:
    uint64_t v9 = (void *)v118[4];
    size_t v14 = v123 + 1;
    unsigned int v123 = v14;
    if (v14 != v9)
    {
      uint64_t v60 = v119[4];
      while (1)
      {
        unint64_t v61 = *((unsigned int *)v14 + 1);
        unint64_t v62 = v61 >> 7;
        if (v61 >> 7 < (v119[5] - v60) >> 3)
        {
          uint64_t v63 = *(void *)(v60 + 8 * v62);
          if (v63)
          {
            uint64_t v64 = v61 & 0x7F;
            unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
            uint64_t v67 = v119[7];
            uint64_t v66 = v119[8];
            if (v65 < (v66 - v67) >> 3)
            {
              uint64_t v68 = v67 + 8 * v65;
              if (v68 != v66 && *(_DWORD *)(v68 + 4) == v61)
              {
                uint64_t v70 = v120[4];
                if (v62 < (v120[5] - v70) >> 3)
                {
                  uint64_t v71 = *(void *)(v70 + 8 * v62);
                  if (v71)
                  {
                    unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                    uint64_t v74 = v120[7];
                    uint64_t v73 = v120[8];
                    if (v72 < (v73 - v74) >> 3)
                    {
                      uint64_t v75 = v74 + 8 * v72;
                      if (v75 != v73 && *(_DWORD *)(v75 + 4) == v61)
                      {
                        uint64_t v77 = v121[4];
                        if (v62 < (v121[5] - v77) >> 3)
                        {
                          uint64_t v78 = *(void *)(v77 + 8 * v62);
                          if (v78)
                          {
                            unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                            uint64_t v81 = v121[7];
                            uint64_t v80 = v121[8];
                            if (v79 < (v80 - v81) >> 3)
                            {
                              uint64_t v82 = v81 + 8 * v79;
                              if (v82 != v80 && *(_DWORD *)(v82 + 4) == v61)
                              {
                                uint64_t v84 = v122[4];
                                if (v62 < (v122[5] - v84) >> 3)
                                {
                                  uint64_t v85 = *(void *)(v84 + 8 * v62);
                                  if (v85)
                                  {
                                    unint64_t v86 = *(unsigned __int16 *)(v85 + 2 * v64);
                                    uint64_t v87 = v122[7];
                                    uint64_t v88 = v122[8];
                                    if (v86 < (v88 - v87) >> 3)
                                    {
                                      uint64_t v89 = v87 + 8 * v86;
                                      if (*(_DWORD *)(v89 + 4) == v61 && v89 != v88) {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          size_t v14 = v9;
          goto LABEL_17;
        }
      }
      uint64_t v9 = v14;
LABEL_17:
      unsigned int v123 = v14;
    }
  }
  *unsigned int v117 = 0xFFFFFFFF00000000;
  *(void *)(v11 + 8) = 0;
}

void sub_1A1AEEE94(_Unwind_Exception *a1)
{
}

uint64_t gdc::Registry::storage<md::ls::FlyoverCommonMaterialHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xB70B6DE024A5B9DALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB70B6DE024A5B9DALL;
    if (*(void *)&v1 <= 0xB70B6DE024A5B9DALL) {
      unint64_t v3 = 0xB70B6DE024A5B9DALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB70B6DE024A5B9DALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB70B6DE024A5B9DALL)
      {
        if (v5[2] == 0xB70B6DE024A5B9DALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB70B6DE024A5B9DALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB70B6DE024A5B9DALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1AEF0E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(int8x8_t *a1)
{
  unint64_t v10 = 0x8756C476CCEB09D6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8756C476CCEB09D6;
    if (*(void *)&v1 <= 0x8756C476CCEB09D6) {
      unint64_t v3 = 0x8756C476CCEB09D6 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8756C476CCEB09D6;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8756C476CCEB09D6)
      {
        if (v5[2] == 0x8756C476CCEB09D6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8756C476CCEB09D6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8756C476CCEB09D6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1AEF358(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::LabelRenderLayer::layout(md::LabelRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v406 = *MEMORY[0x1E4F143B8];
  v399[0] = &unk_1EF5720C0;
  v399[1] = a2;
  v397[0] = &unk_1EF572108;
  v397[1] = a2;
  v398 = v397;
  v402 = v401;
  v400 = v399;
  v401[0] = &unk_1EF572108;
  v401[1] = a2;
  std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v399);
  if (v398 == v397)
  {
    (*(void (**)(void *))(v397[0] + 32))(v397);
  }
  else if (v398)
  {
    (*(void (**)(void *))(*v398 + 40))(v398);
  }
  if (v400 == v399)
  {
    (*(void (**)(void *))(v399[0] + 32))(v399);
    if (*((unsigned char *)this + 269)) {
      goto LABEL_721;
    }
  }
  else
  {
    if (v400) {
      (*(void (**)(void *))(*v400 + 40))(v400);
    }
    if (*((unsigned char *)this + 269)) {
      goto LABEL_721;
    }
  }
  if (!*((unsigned char *)this + 268)) {
    goto LABEL_721;
  }
  uint64_t v4 = (void *)*((void *)a2 + 1);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_35;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0xA588623CD4116DAELL;
    if (*(void *)&v5 <= 0xA588623CD4116DAELL) {
      unint64_t v7 = 0xA588623CD4116DAELL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0xA588623CD4116DAELL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_35;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_35;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v9[2] == 0xA588623CD4116DAELL) {
          goto LABEL_33;
        }
      }
      else if ((v11 & (*(void *)&v5 - 1)) != v7)
      {
        goto LABEL_35;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_35;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0xA588623CD4116DAELL) {
      break;
    }
    if (v10 >= *(void *)&v5) {
      v10 %= *(void *)&v5;
    }
    if (v10 != v7) {
      goto LABEL_35;
    }
LABEL_22:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_35;
    }
  }
  if (v9[2] != 0xA588623CD4116DAELL) {
    goto LABEL_22;
  }
LABEL_33:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v13 = 0;
LABEL_36:
  size_t v14 = *(md::LabelManager **)(v13 + 16);
  if (v14 != *((md::LabelManager **)this + 6))
  {
    md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::clear((uint64_t)this + 56);
    size_t v14 = *(md::LabelManager **)(v13 + 16);
    *((void *)this + 6) = v14;
    uint64_t v4 = (void *)*((void *)a2 + 1);
    int8x8_t v5 = (int8x8_t)v4[1];
  }
  *((unsigned char *)v14 + 3350) = *(unsigned char *)(*((void *)a2 + 3) + 1);
  if (!*(void *)&v5) {
    goto LABEL_61;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v5);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = 0xC97B9E962ADF4AD4;
    if (*(void *)&v5 <= 0xC97B9E962ADF4AD4) {
      unint64_t v16 = 0xC97B9E962ADF4AD4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v16 = (*(void *)&v5 - 1) & 0xC97B9E962ADF4AD4;
  }
  unint64_t v17 = *(void **)(*v4 + 8 * v16);
  if (!v17) {
    goto LABEL_61;
  }
  uint64_t v18 = (void *)*v17;
  if (!v18) {
    goto LABEL_61;
  }
  if (v15.u32[0] < 2uLL)
  {
    uint64_t v19 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v21 = v18[1];
      if (v21 == 0xC97B9E962ADF4AD4)
      {
        if (v18[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_59;
        }
      }
      else if ((v21 & v19) != v16)
      {
        goto LABEL_61;
      }
      uint64_t v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_61;
      }
    }
  }
  while (2)
  {
    unint64_t v20 = v18[1];
    if (v20 != 0xC97B9E962ADF4AD4)
    {
      if (v20 >= *(void *)&v5) {
        v20 %= *(void *)&v5;
      }
      if (v20 != v16) {
        goto LABEL_61;
      }
      goto LABEL_48;
    }
    if (v18[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_48:
      uint64_t v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_61;
      }
      continue;
    }
    break;
  }
LABEL_59:
  uint64_t v22 = v18[5];
  if (*(void *)(v22 + 8) == 0xC97B9E962ADF4AD4)
  {
    uint64_t v23 = *(uint64_t **)(v22 + 32);
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v23 = 0;
LABEL_62:
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  uint64_t v26 = *v23;
  if (*v23 != v25)
  {
    uint64_t v26 = *v23;
    while (*(unsigned char *)v26 != 23)
    {
      v26 += 16;
      if (v26 == v25) {
        goto LABEL_69;
      }
    }
  }
  if (v26 == v25) {
LABEL_69:
  }
    uint64_t v27 = 0;
  else {
    uint64_t v27 = *(void *)(v26 + 8);
  }
  if (*((unsigned char *)v14 + 3031) != (v27 != 0))
  {
    *(void *)&long long v403 = &unk_1EF56EC70;
    *((void *)&v403 + 1) = v14;
    BOOL v404 = v27 != 0;
    v405 = &v403;
    md::LabelManager::queueCommand(v14, 17, 1, &v403);
    if (v405 == &v403)
    {
      (*(void (**)(long long *))(v403 + 32))(&v403);
    }
    else if (v405)
    {
      (*(void (**)(void))(*(void *)v405 + 40))();
    }
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
  }
  if (v24 == v25) {
    goto LABEL_88;
  }
  uint64_t v28 = v24;
  while (*(unsigned char *)v28 != 25)
  {
    v28 += 16;
    if (v28 == v25) {
      goto LABEL_88;
    }
  }
  if (v28 == v25 || !*(void *)(v28 + 8))
  {
LABEL_88:
    int v30 = 0;
  }
  else
  {
    if (v24 == v25) {
      goto LABEL_729;
    }
    uint64_t v29 = v24;
    while (*(unsigned char *)v29 != 28)
    {
      v29 += 16;
      if (v29 == v25) {
        goto LABEL_729;
      }
    }
    if (v29 == v25) {
LABEL_729:
    }
      uint64_t v354 = 0;
    else {
      uint64_t v354 = *(void *)(v29 + 8);
    }
    int v30 = v354 != 0;
  }
  int v31 = *((unsigned __int8 *)this + 271);
  BOOL v32 = v31 != v30;
  if (v31 != v30) {
    *((unsigned char *)this + 271) = v30;
  }
  int v33 = 0;
  if (v30 && v24 != v25)
  {
    while (*(unsigned char *)v24 != 39)
    {
      v24 += 16;
      if (v24 == v25) {
        goto LABEL_99;
      }
    }
    if (v24 != v25 && *(void *)(v24 + 8))
    {
      int v33 = *(unsigned char *)(*((void *)this + 6) + 3686) == 0;
      goto LABEL_100;
    }
LABEL_99:
    int v33 = 0;
  }
LABEL_100:
  if (*((unsigned __int8 *)this + 272) != v33)
  {
    *((unsigned char *)this + 272) = v33;
    BOOL v32 = 1;
  }
  int v34 = *((unsigned __int8 *)this + 276);
  if (v34 != *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 116))
  {
    int v35 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 116);
    *((unsigned char *)this + 276) = v35;
    *((unsigned char *)this + 277) = v35 == 6;
    md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::clear((uint64_t)this + 56);
    BOOL v32 = 1;
  }
  uint64_t v36 = *v23;
  uint64_t v37 = v23[1];
  uint64_t v38 = *v23;
  if (*v23 != v37)
  {
    uint64_t v38 = *v23;
    while (*(unsigned char *)v38)
    {
      v38 += 16;
      if (v38 == v37) {
        goto LABEL_111;
      }
    }
  }
  if (v38 == v37) {
LABEL_111:
  }
    uint64_t v39 = 0;
  else {
    uint64_t v39 = *(void *)(v38 + 8);
  }
  int v40 = v39 != 0;
  if (*((unsigned __int8 *)this + 273) != v40)
  {
    *((unsigned char *)this + 273) = v40;
    BOOL v32 = 1;
  }
  uint64_t v41 = v36;
  if (v36 != v37)
  {
    uint64_t v41 = v36;
    while (*(unsigned char *)v41 != 34)
    {
      v41 += 16;
      if (v41 == v37) {
        goto LABEL_121;
      }
    }
  }
  if (v41 == v37) {
LABEL_121:
  }
    uint64_t v42 = 0;
  else {
    uint64_t v42 = *(void *)(v41 + 8);
  }
  int v43 = v42 != 0;
  if (*((unsigned __int8 *)this + 274) != v43)
  {
    *((unsigned char *)this + 274) = v43;
    BOOL v32 = 1;
  }
  if (v36 != v37)
  {
    while (*(unsigned char *)v36 != 33)
    {
      v36 += 16;
      if (v36 == v37) {
        goto LABEL_130;
      }
    }
  }
  if (v36 == v37) {
LABEL_130:
  }
    uint64_t v44 = 0;
  else {
    uint64_t v44 = *(void *)(v36 + 8);
  }
  int v45 = v44 != 0;
  if (*((unsigned __int8 *)this + 275) != v45)
  {
    *((unsigned char *)this + 275) = v45;
    BOOL v32 = 1;
  }
  ++*((_DWORD *)this + 66);
  uint64_t v46 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v47 = (int8x8_t)v46[1];
  uint8x8_t v48 = (uint8x8_t)vcnt_s8(v47);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] > 1uLL)
  {
    unint64_t v49 = 0x99BED48DEFBBD82BLL % *(void *)&v47;
    if (*(void *)&v47 > 0x99BED48DEFBBD82BLL) {
      unint64_t v49 = 0x99BED48DEFBBD82BLL;
    }
  }
  else
  {
    unint64_t v49 = (*(void *)&v47 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v50 = *v46;
  uint64_t v51 = *(void **)(v50 + 8 * v49);
  if (!v51) {
    goto LABEL_155;
  }
  unint64_t v52 = (void *)*v51;
  if (!v52) {
    goto LABEL_155;
  }
  if (v48.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v54 = v52[1];
      if (v54 == 0x99BED48DEFBBD82BLL)
      {
        if (v52[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_153;
        }
      }
      else if ((v54 & (*(void *)&v47 - 1)) != v49)
      {
        goto LABEL_155;
      }
      unint64_t v52 = (void *)*v52;
      if (!v52) {
        goto LABEL_155;
      }
    }
  }
  while (2)
  {
    unint64_t v53 = v52[1];
    if (v53 != 0x99BED48DEFBBD82BLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
      if (v53 != v49) {
        goto LABEL_155;
      }
      goto LABEL_142;
    }
    if (v52[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_142:
      unint64_t v52 = (void *)*v52;
      if (!v52) {
        goto LABEL_155;
      }
      continue;
    }
    break;
  }
LABEL_153:
  uint64_t v55 = v52[5];
  if (*(void *)(v55 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v358 = *(uint64_t **)(v55 + 32);
    goto LABEL_156;
  }
LABEL_155:
  v358 = 0;
LABEL_156:
  if (v48.u32[0] >= 2uLL)
  {
    unint64_t v57 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v47 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v57 = 0x8BD499FBD96FBB9ELL % *(void *)&v47;
    }
    unint64_t v56 = *(void **)(v50 + 8 * v57);
    do
    {
      do
        unint64_t v56 = (void *)*v56;
      while (v56[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v56[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    unint64_t v56 = *(void **)(v50 + 8 * ((*(void *)&v47 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        unint64_t v56 = (void *)*v56;
      while (v56[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v56[2] != 0x8BD499FBD96FBB9ELL);
  }
  int v58 = **(unsigned __int8 **)(v56[5] + 32);
  v356 = a2;
  if (*((unsigned __int8 *)this + 270) != v58)
  {
    *((unsigned char *)this + 270) = v58;
    goto LABEL_170;
  }
  if (v32) {
LABEL_170:
  }
    md::LabelRenderLayer::updateMapDataUsed(this);
  uint64_t v60 = *(unsigned char **)(*v358 + 232);
  uint64_t v59 = *(unsigned char **)(*v358 + 240);
  int64_t v61 = v59 - v60;
  v389 = this;
  if (v59 != v60)
  {
    if (v61 < 0) {
      abort();
    }
    uint64_t v62 = 2 * (v61 >> 1);
    __p = (char *)operator new(v59 - v60);
    memcpy(__p, v60, v61);
    if (v62)
    {
      v357 = (unsigned __int16 *)&__p[v62];
      v375 = (float *)((char *)this + 304);
      v377 = (void *)((char *)this + 224);
      uint64_t v63 = (unsigned __int16 *)__p;
      do
      {
        int v379 = *v63;
        uint64_t v64 = *v358;
        uint64_t v66 = *(unsigned __int16 **)(*v358 + 112);
        unint64_t v65 = *(unsigned __int16 **)(*v358 + 120);
        uint64_t v67 = v66;
        if (v66 != v65)
        {
          while (*v67 != v379)
          {
            v67 += 56;
            if (v67 == v65)
            {
              uint64_t v67 = *(unsigned __int16 **)(*v358 + 120);
              break;
            }
          }
          if (v66 != v65)
          {
            while (*v66 != v379)
            {
              v66 += 56;
              if (v66 == v65)
              {
                uint64_t v66 = *(unsigned __int16 **)(*v358 + 120);
                break;
              }
            }
          }
        }
        uint64_t v68 = *(unsigned __int16 **)(v64 + 136);
        uint64_t v69 = *(unsigned __int16 **)(v64 + 144);
        v359 = v63;
        if (v68 != v69)
        {
          while (*v68 != v379)
          {
            v68 += 56;
            if (v68 == v69)
            {
              uint64_t v68 = *(unsigned __int16 **)(v64 + 144);
              break;
            }
          }
        }
        uint64_t v70 = (void *)*((void *)v66 + 13);
        unsigned int v71 = *(unsigned __int8 *)(v64 + 280);
        unint64_t v72 = (uint64_t *)(v64 + 256);
        if (v71) {
          uint64_t v73 = v72;
        }
        else {
          uint64_t v73 = 0;
        }
        uint64_t v74 = *v70;
        uint64_t v75 = v70[1];
        v381 = v70;
        uint64_t v76 = *v70;
        if (*v70 != v75)
        {
          uint64_t v77 = v74 + 144;
          uint64_t v78 = *v70;
          while (v77 != v75)
          {
            uint64_t v76 = v77;
            v78 += 144;
            if (*(unsigned __int8 *)(v77 + 112) != *(unsigned __int8 *)(v74 + 112)
              || *(unsigned __int8 *)(v77 + 113) != *(unsigned __int8 *)(v74 + 113)
              || *(_DWORD *)(v77 + 116) != *(_DWORD *)(v74 + 116))
            {
              uint64_t v76 = v78;
              goto LABEL_201;
            }
            v77 += 144;
            if (*(_DWORD *)(v76 + 120) != *(_DWORD *)(v74 + 120)) {
              goto LABEL_201;
            }
          }
          uint64_t v76 = v70[1];
        }
LABEL_201:
        v385 = (uint64_t *)*((void *)v68 + 13);
        unint64_t v79 = v67 + 8;
        uint64_t v80 = v70[1];
        unsigned int v367 = v71;
        v360 = v67 + 8;
        while (v74 != v80)
        {
          char v82 = *(unsigned char *)(v74 + 113);
          LOBYTE(v395) = *(unsigned char *)(v74 + 112);
          char v83 = v395;
          BYTE1(v395) = v82;
          uint64_t v370 = *(void *)(v74 + 116);
          *(void *)((char *)&v395 + 4) = v370;
          if (v395 == 2
            || (v395 != 255 ? (BOOL v84 = v395 == 5) : (BOOL v84 = 1), v84))
          {
            if (std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v79, (unsigned __int8 *)&v395))
            {
              int v85 = 1 << v82;
              int v86 = ((int)v370 % v85 + v85) % v85;
              LOBYTE(v403) = v83;
              BYTE1(v403) = v82;
              int v87 = (SHIDWORD(v370) % v85 + v85) % (1 << v82);
              *(void *)((char *)&v403 + 4) = __PAIR64__(v87, v86);
              LOWORD(v405) = v379;
              if (!std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::find<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(v375, (unsigned __int8 *)&v403))
              {
                int v362 = v87;
                int v364 = v86;
                char v371 = v82;
                uint64_t v88 = 0;
                uint64_t v89 = v367;
                while (1)
                {
                  while (1)
                  {
                    if (v74 == v76)
                    {
                      LOBYTE(v403) = v83;
                      BYTE1(v403) = v371;
                      *(void *)((char *)&v403 + 4) = __PAIR64__(v362, v364);
                      LOWORD(v405) = v379;
                      std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::__emplace_unique_key_args<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(v375, (unsigned __int8 *)&v403, (uint64_t)&v403);
                      unint64_t v79 = v360;
                      goto LABEL_315;
                    }
                    unint64_t v90 = *(unsigned __int16 *)(v74 + 8);
                    if (v89)
                    {
                      uint64_t v91 = *v73;
                      uint64_t v92 = v73[1];
                      if (*v73 != v92) {
                        break;
                      }
                    }
LABEL_236:
                    uint64_t v100 = (unsigned __int16 *)*((void *)v389 + 35);
                    uint64_t v101 = (unsigned __int16 *)*((void *)v389 + 36);
                    if (v100 != v101)
                    {
                      while (1)
                      {
                        unsigned int v102 = *v100;
                        if (v102 == v90) {
                          break;
                        }
                        ++v100;
                        if (v90 < v102 || v100 == v101) {
                          goto LABEL_216;
                        }
                      }
                    }
                    if (v100 != v101)
                    {
                      unint64_t v104 = (unsigned __int16 *)v381[3];
                      unint64_t v105 = (unsigned __int16 *)v381[4];
                      if (v104 != v105)
                      {
                        while (*v104 != v90)
                        {
                          v104 += 16;
                          if (v104 == v105)
                          {
                            unint64_t v104 = (unsigned __int16 *)v381[4];
                            break;
                          }
                        }
                      }
                      unint64_t v106 = *(void *)(v74 + 136);
                      uint64_t v107 = *((void *)v104 + 1);
                      if (0x8E38E38E38E38E39 * ((*((void *)v104 + 2) - v107) >> 4) <= v106) {
                        goto LABEL_731;
                      }
                      uint64_t v108 = v107 + 144 * v106;
                      uint64_t v110 = *(void *)(v108 + 112);
                      uint64_t v109 = (uint64_t *)(v108 + 112);
                      if (v110)
                      {
                        if (!v88)
                        {
                          unint64_t v111 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v377, (unsigned __int8 *)&v395);
                          if (!v111) {
                            operator new();
                          }
                          uint64_t v88 = v111[5];
                          uint64_t v89 = v367;
                        }
                        switch((int)v90)
                        {
                          case 2:
                            uint64_t v129 = *v109;
                            uint64_t v130 = *(void *)(*v109 + 856);
                            uint64_t v131 = *(void *)(*v109 + 864);
                            if (v131) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v132 = *(std::__shared_weak_count **)(v88 + 264);
                            *(void *)(v88 + 256) = v130;
                            *(void *)(v88 + 264) = v131;
                            if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *, uint64_t))v132->__on_zero_shared)(v132, v89);
                              std::__shared_weak_count::__release_weak(v132);
                              uint64_t v89 = v367;
                            }
                            *(void *)(v88 + 224) = v129 + 872;
                            long long v133 = *(_OWORD *)(v129 + 168);
                            *(void *)(v88 + 248) = *(void *)(v129 + 184);
                            *(_OWORD *)(v88 + 232) = v133;
                            *(unsigned char *)(v88 + 216) = *(void *)(v88 + 256) != 0;
                            v74 += 144;
                            continue;
                          case 12:
                            uint64_t v134 = *(void *)(*v109 + 824);
                            uint64_t v135 = *(void *)(*v109 + 832);
                            if (v135) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v135 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 112);
                            *(void *)(v88 + 104) = v134;
                            *(void *)(v88 + 112) = v135;
                            if (!v114) {
                              break;
                            }
                            goto LABEL_214;
                          case 18:
                          case 21:
                            uint64_t v117 = *(void *)(*v109 + 720);
                            uint64_t v118 = *(void *)(*v109 + 728);
                            if (v118) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v118 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 32);
                            *(void *)(v88 + 24) = v117;
                            *(void *)(v88 + 32) = v118;
                            if (!v114) {
                              break;
                            }
                            goto LABEL_214;
                          case 19:
                          case 22:
                          case 23:
                            uint64_t v112 = *(void *)(*v109 + 720);
                            uint64_t v113 = *(void *)(*v109 + 728);
                            if (v113) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 48);
                            *(void *)(v88 + 40) = v112;
                            *(void *)(v88 + 48) = v113;
                            if (!v114) {
                              break;
                            }
                            goto LABEL_214;
                          case 20:
                          case 24:
                            uint64_t v115 = *(void *)(*v109 + 720);
                            uint64_t v116 = *(void *)(*v109 + 728);
                            if (v116) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 64);
                            *(void *)(v88 + 56) = v115;
                            *(void *)(v88 + 64) = v116;
                            if (!v114) {
                              break;
                            }
                            goto LABEL_214;
                          case 25:
                            uint64_t v136 = *(void *)(*v109 + 720);
                            uint64_t v137 = *(void *)(*v109 + 728);
                            if (v137) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v137 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 80);
                            *(void *)(v88 + 72) = v136;
                            *(void *)(v88 + 80) = v137;
                            if (!v114) {
                              break;
                            }
                            goto LABEL_214;
                          case 26:
                            uint64_t v121 = *(void *)(*v109 + 720);
                            uint64_t v122 = *(void *)(*v109 + 728);
                            if (v122) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v122 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 96);
                            *(void *)(v88 + 88) = v121;
                            *(void *)(v88 + 96) = v122;
                            if (!v114) {
                              break;
                            }
                            goto LABEL_214;
                          case 27:
                            uint64_t v125 = *(void *)(*v109 + 720);
                            uint64_t v126 = *(void *)(*v109 + 728);
                            if (v126) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 192);
                            *(void *)(v88 + 184) = v125;
                            *(void *)(v88 + 192) = v126;
                            if (!v114) {
                              break;
                            }
                            goto LABEL_214;
                          case 66:
                            uint64_t v123 = *(void *)(*v109 + 720);
                            uint64_t v124 = *(void *)(*v109 + 728);
                            if (v124) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 128);
                            *(void *)(v88 + 120) = v123;
                            *(void *)(v88 + 128) = v124;
                            if (!v114) {
                              break;
                            }
                            goto LABEL_214;
                          case 73:
                          case 80:
                            uint64_t v119 = *(void *)(*v109 + 720);
                            uint64_t v120 = *(void *)(*v109 + 728);
                            if (v120) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = *(std::__shared_weak_count **)(v88 + 144);
                            *(void *)(v88 + 136) = v119;
                            *(void *)(v88 + 144) = v120;
                            if (!v114) {
                              break;
                            }
LABEL_214:
                            if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                              std::__shared_weak_count::__release_weak(v114);
                              uint64_t v89 = v367;
                            }
                            break;
                          default:
                            if ((v90 & 0xFFFE) == 0x34)
                            {
                              uint64_t v127 = *v109;
                              long long v128 = *(_OWORD *)(*v109 + 168);
                              *(void *)(v88 + 248) = *(void *)(*v109 + 184);
                              *(_OWORD *)(v88 + 232) = v128;
                              *(void *)(v88 + 224) = v127 + 800;
                              *(unsigned char *)(v88 + 216) = 1;
                              v74 += 144;
                              continue;
                            }
                            switch((int)v90)
                            {
                              case '+':
                              case 'M':
                                uint64_t v138 = *v109;
                                uint64_t v139 = *(void *)(v107 + 144 * v106 + 120);
                                if (v139) {
                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v139 + 8), 1uLL, memory_order_relaxed);
                                }
                                uint64_t v114 = *(std::__shared_weak_count **)(v88 + 208);
                                *(void *)(v88 + 200) = v138;
                                *(void *)(v88 + 208) = v139;
                                if (v114) {
                                  goto LABEL_214;
                                }
                                break;
                              case 'E':
                                uint64_t v142 = *(void *)(*v109 + 720);
                                uint64_t v143 = *(void *)(*v109 + 728);
                                if (v143) {
                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v143 + 8), 1uLL, memory_order_relaxed);
                                }
                                uint64_t v114 = *(std::__shared_weak_count **)(v88 + 160);
                                *(void *)(v88 + 152) = v142;
                                *(void *)(v88 + 160) = v143;
                                if (v114) {
                                  goto LABEL_214;
                                }
                                break;
                              case 'J':
                                uint64_t v140 = *(void *)(*v109 + 720);
                                uint64_t v141 = *(void *)(*v109 + 728);
                                if (v141) {
                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v141 + 8), 1uLL, memory_order_relaxed);
                                }
                                uint64_t v114 = *(std::__shared_weak_count **)(v88 + 176);
                                *(void *)(v88 + 168) = v140;
                                *(void *)(v88 + 176) = v141;
                                if (v114) {
                                  goto LABEL_214;
                                }
                                break;
                              default:
                                goto LABEL_216;
                            }
                            break;
                        }
                      }
                    }
LABEL_216:
                    v74 += 144;
                  }
                  double v93 = 1.0 / (double)(1 << SBYTE1(v395));
                  double v94 = v93 * (double)SDWORD2(v395);
                  double v95 = v93 * (double)((1 << SBYTE1(v395)) + ~DWORD1(v395));
                  double v96 = v94 + v93;
                  double v97 = v95 + v93;
                  if (v90 > 0x7F)
                  {
                    do
                    {
                      if (v94 >= *(double *)v91
                        && v96 <= *(double *)(v91 + 16)
                        && v95 >= *(double *)(v91 + 8)
                        && v97 <= *(double *)(v91 + 24))
                      {
                        abort();
                      }
                      v91 += 64;
                    }
                    while (v91 != v92);
                    goto LABEL_236;
                  }
                  unint64_t v98 = v90 >> 6;
                  uint64_t v99 = 1 << v90;
                  while (1)
                  {
                    if (v94 < *(double *)v91
                      || v96 > *(double *)(v91 + 16)
                      || v95 < *(double *)(v91 + 8)
                      || v97 > *(double *)(v91 + 24))
                    {
                      goto LABEL_228;
                    }
                    long long v403 = 0uLL;
                    *((void *)&v403 + v98) |= v99;
                    if ((*(_OWORD *)(v91 + 48) & v403) != 0) {
                      break;
                    }
                    long long v403 = 0uLL;
                    *((void *)&v403 + v98) |= v99;
                    if ((*(_OWORD *)(v91 + 32) & v403) == 0) {
                      goto LABEL_216;
                    }
LABEL_228:
                    v91 += 64;
                    if (v91 == v92) {
                      goto LABEL_236;
                    }
                  }
                  v74 += 144;
                }
              }
            }
          }
LABEL_315:
          uint64_t v81 = v75;
          if (v75 != v76)
          {
            uint64_t v144 = v76 + 144;
            uint64_t v81 = v76;
            while (1)
            {
              if (v144 == v75)
              {
                uint64_t v81 = v75;
                goto LABEL_203;
              }
              if (*(unsigned __int8 *)(v144 + 112) != *(unsigned __int8 *)(v76 + 112)) {
                break;
              }
              v81 += 144;
              if (*(unsigned __int8 *)(v144 + 113) == *(unsigned __int8 *)(v76 + 113)
                && *(_DWORD *)(v144 + 116) == *(_DWORD *)(v76 + 116))
              {
                int v145 = *(_DWORD *)(v144 + 120);
                v144 += 144;
                if (v145 == *(_DWORD *)(v76 + 120)) {
                  continue;
                }
              }
              goto LABEL_203;
            }
            uint64_t v81 = v144;
          }
LABEL_203:
          uint64_t v80 = v381[1];
          uint64_t v74 = v76;
          uint64_t v76 = v81;
        }
        this = v389;
        uint64_t v147 = *v385;
        uint64_t v146 = v385[1];
        uint64_t v148 = *v385;
        if (*v385 != v146)
        {
          uint64_t v149 = v147 + 144;
          uint64_t v150 = *v385;
          while (v149 != v146)
          {
            uint64_t v148 = v149;
            v150 += 144;
            if (*(unsigned __int8 *)(v149 + 112) != *(unsigned __int8 *)(v147 + 112)
              || *(unsigned __int8 *)(v149 + 113) != *(unsigned __int8 *)(v147 + 113)
              || *(_DWORD *)(v149 + 116) != *(_DWORD *)(v147 + 116))
            {
              uint64_t v148 = v150;
              goto LABEL_334;
            }
            v149 += 144;
            if (*(_DWORD *)(v148 + 120) != *(_DWORD *)(v147 + 120)) {
              goto LABEL_334;
            }
          }
          uint64_t v148 = v385[1];
        }
LABEL_334:
        uint64_t v151 = v385[1];
        while (v147 != v151)
        {
          char v153 = *(unsigned char *)(v147 + 113);
          LOBYTE(v395) = *(unsigned char *)(v147 + 112);
          char v154 = v395;
          BYTE1(v395) = v153;
          uint64_t v155 = *(void *)(v147 + 116);
          *(void *)((char *)&v395 + 4) = v155;
          if (v395 == 2
            || (v395 != 255 ? (BOOL v156 = v395 == 5) : (BOOL v156 = 1), v156))
          {
            int v157 = 1 << v153;
            int v158 = ((int)v155 % v157 + v157) % v157;
            LOBYTE(v403) = v395;
            BYTE1(v403) = v153;
            int v159 = (SHIDWORD(v155) % v157 + v157) % (1 << v153);
            *(void *)((char *)&v403 + 4) = __PAIR64__(v159, v158);
            LOWORD(v405) = v379;
            if (!std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::find<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(v375, (unsigned __int8 *)&v403))
            {
              int v372 = v159;
              int v382 = v158;
              uint64_t v160 = 0;
              while (v147 != v148)
              {
                unsigned int v162 = *(unsigned __int16 *)(v147 + 8);
                uint64_t v163 = (unsigned __int16 *)*((void *)this + 35);
                uint64_t v164 = (unsigned __int16 *)*((void *)this + 36);
                if (v163 != v164)
                {
                  while (1)
                  {
                    unsigned int v165 = *v163;
                    if (v165 == v162) {
                      break;
                    }
                    ++v163;
                    if (v162 < v165 || v163 == v164) {
                      goto LABEL_347;
                    }
                  }
                }
                if (v163 != v164)
                {
                  uint64_t v167 = (unsigned __int16 *)v385[3];
                  uint64_t v168 = (unsigned __int16 *)v385[4];
                  if (v167 != v168)
                  {
                    while (*v167 != v162)
                    {
                      v167 += 16;
                      if (v167 == v168)
                      {
                        uint64_t v167 = (unsigned __int16 *)v385[4];
                        break;
                      }
                    }
                  }
                  unint64_t v169 = *(void *)(v147 + 136);
                  uint64_t v170 = *((void *)v167 + 1);
                  if (0x8E38E38E38E38E39 * ((*((void *)v167 + 2) - v170) >> 4) <= v169) {
LABEL_731:
                  }
                    abort();
                  uint64_t v171 = v170 + 144 * v169;
                  uint64_t v173 = *(void *)(v171 + 112);
                  unsigned int v172 = (uint64_t *)(v171 + 112);
                  if (v173)
                  {
                    if (!v160)
                    {
                      unsigned int v174 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v377, (unsigned __int8 *)&v395);
                      if (!v174) {
                        operator new();
                      }
                      uint64_t v160 = v174[5];
                    }
                    switch(v162)
                    {
                      case 2u:
                        uint64_t v192 = *v172;
                        uint64_t v193 = *(void *)(*v172 + 856);
                        uint64_t v194 = *(void *)(*v172 + 864);
                        if (v194) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v194 + 8), 1uLL, memory_order_relaxed);
                        }
                        unsigned int v195 = *(std::__shared_weak_count **)(v160 + 264);
                        *(void *)(v160 + 256) = v193;
                        *(void *)(v160 + 264) = v194;
                        if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                          std::__shared_weak_count::__release_weak(v195);
                        }
                        *(void *)(v160 + 224) = v192 + 872;
                        long long v161 = *(_OWORD *)(v192 + 168);
                        *(void *)(v160 + 248) = *(void *)(v192 + 184);
                        *(_OWORD *)(v160 + 232) = v161;
                        *(unsigned char *)(v160 + 216) = *(void *)(v160 + 256) != 0;
                        break;
                      case 0xCu:
                        uint64_t v196 = *(void *)(*v172 + 824);
                        uint64_t v197 = *(void *)(*v172 + 832);
                        if (v197) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v197 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 112);
                        *(void *)(v160 + 104) = v196;
                        *(void *)(v160 + 112) = v197;
                        if (v177) {
                          goto LABEL_411;
                        }
                        break;
                      case 0x12u:
                      case 0x15u:
                        uint64_t v180 = *(void *)(*v172 + 720);
                        uint64_t v181 = *(void *)(*v172 + 728);
                        if (v181) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v181 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 32);
                        *(void *)(v160 + 24) = v180;
                        *(void *)(v160 + 32) = v181;
                        if (v177) {
                          goto LABEL_411;
                        }
                        break;
                      case 0x13u:
                      case 0x16u:
                      case 0x17u:
                        uint64_t v175 = *(void *)(*v172 + 720);
                        uint64_t v176 = *(void *)(*v172 + 728);
                        if (v176) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v176 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 48);
                        *(void *)(v160 + 40) = v175;
                        *(void *)(v160 + 48) = v176;
                        if (v177) {
                          goto LABEL_411;
                        }
                        break;
                      case 0x14u:
                      case 0x18u:
                        uint64_t v178 = *(void *)(*v172 + 720);
                        uint64_t v179 = *(void *)(*v172 + 728);
                        if (v179) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v179 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 64);
                        *(void *)(v160 + 56) = v178;
                        *(void *)(v160 + 64) = v179;
                        if (v177) {
                          goto LABEL_411;
                        }
                        break;
                      case 0x19u:
                        uint64_t v198 = *(void *)(*v172 + 720);
                        uint64_t v199 = *(void *)(*v172 + 728);
                        if (v199) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v199 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 80);
                        *(void *)(v160 + 72) = v198;
                        *(void *)(v160 + 80) = v199;
                        if (v177) {
                          goto LABEL_411;
                        }
                        break;
                      case 0x1Au:
                        uint64_t v184 = *(void *)(*v172 + 720);
                        uint64_t v185 = *(void *)(*v172 + 728);
                        if (v185) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v185 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 96);
                        *(void *)(v160 + 88) = v184;
                        *(void *)(v160 + 96) = v185;
                        if (v177) {
                          goto LABEL_411;
                        }
                        break;
                      case 0x1Bu:
                        uint64_t v188 = *(void *)(*v172 + 720);
                        uint64_t v189 = *(void *)(*v172 + 728);
                        if (v189) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v189 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 192);
                        *(void *)(v160 + 184) = v188;
                        *(void *)(v160 + 192) = v189;
                        if (v177) {
                          goto LABEL_411;
                        }
                        break;
                      case 0x42u:
                        uint64_t v186 = *(void *)(*v172 + 720);
                        uint64_t v187 = *(void *)(*v172 + 728);
                        if (v187) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v187 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 128);
                        *(void *)(v160 + 120) = v186;
                        *(void *)(v160 + 128) = v187;
                        if (v177) {
                          goto LABEL_411;
                        }
                        break;
                      case 0x49u:
                      case 0x50u:
                        uint64_t v182 = *(void *)(*v172 + 720);
                        uint64_t v183 = *(void *)(*v172 + 728);
                        if (v183) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v183 + 8), 1uLL, memory_order_relaxed);
                        }
                        uint64_t v177 = *(std::__shared_weak_count **)(v160 + 144);
                        *(void *)(v160 + 136) = v182;
                        *(void *)(v160 + 144) = v183;
                        if (v177)
                        {
LABEL_411:
                          if (!atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                            std::__shared_weak_count::__release_weak(v177);
                          }
                        }
                        break;
                      default:
                        if ((v162 & 0xFFFE) == 0x34)
                        {
                          uint64_t v190 = *v172;
                          long long v191 = *(_OWORD *)(*v172 + 168);
                          *(void *)(v160 + 248) = *(void *)(*v172 + 184);
                          *(_OWORD *)(v160 + 232) = v191;
                          *(void *)(v160 + 224) = v190 + 800;
                          *(unsigned char *)(v160 + 216) = 1;
                        }
                        else
                        {
                          switch(v162)
                          {
                            case '+':
                            case 'M':
                              uint64_t v200 = *v172;
                              uint64_t v201 = *(void *)(v170 + 144 * v169 + 120);
                              if (v201) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v201 + 8), 1uLL, memory_order_relaxed);
                              }
                              uint64_t v177 = *(std::__shared_weak_count **)(v160 + 208);
                              *(void *)(v160 + 200) = v200;
                              *(void *)(v160 + 208) = v201;
                              if (v177) {
                                goto LABEL_411;
                              }
                              break;
                            case 'E':
                              uint64_t v204 = *(void *)(*v172 + 720);
                              uint64_t v205 = *(void *)(*v172 + 728);
                              if (v205) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v205 + 8), 1uLL, memory_order_relaxed);
                              }
                              uint64_t v177 = *(std::__shared_weak_count **)(v160 + 160);
                              *(void *)(v160 + 152) = v204;
                              *(void *)(v160 + 160) = v205;
                              if (v177) {
                                goto LABEL_411;
                              }
                              break;
                            case 'J':
                              uint64_t v202 = *(void *)(*v172 + 720);
                              uint64_t v203 = *(void *)(*v172 + 728);
                              if (v203) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v203 + 8), 1uLL, memory_order_relaxed);
                              }
                              uint64_t v177 = *(std::__shared_weak_count **)(v160 + 176);
                              *(void *)(v160 + 168) = v202;
                              *(void *)(v160 + 176) = v203;
                              if (v177) {
                                goto LABEL_411;
                              }
                              break;
                            default:
                              goto LABEL_347;
                          }
                        }
                        break;
                    }
                  }
                }
LABEL_347:
                v147 += 144;
                this = v389;
              }
              LOBYTE(v403) = v154;
              BYTE1(v403) = v153;
              *(void *)((char *)&v403 + 4) = __PAIR64__(v372, v382);
              LOWORD(v405) = v379;
              std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::__emplace_unique_key_args<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(v375, (unsigned __int8 *)&v403, (uint64_t)&v403);
            }
          }
          uint64_t v152 = v146;
          if (v146 != v148)
          {
            uint64_t v206 = v148 + 144;
            uint64_t v152 = v148;
            while (1)
            {
              if (v206 == v146)
              {
                uint64_t v152 = v146;
                goto LABEL_336;
              }
              if (*(unsigned __int8 *)(v206 + 112) != *(unsigned __int8 *)(v148 + 112)) {
                break;
              }
              v152 += 144;
              if (*(unsigned __int8 *)(v206 + 113) == *(unsigned __int8 *)(v148 + 113)
                && *(_DWORD *)(v206 + 116) == *(_DWORD *)(v148 + 116))
              {
                int v207 = *(_DWORD *)(v206 + 120);
                v206 += 144;
                if (v207 == *(_DWORD *)(v148 + 120)) {
                  continue;
                }
              }
              goto LABEL_336;
            }
            uint64_t v152 = v206;
          }
LABEL_336:
          uint64_t v151 = v385[1];
          uint64_t v147 = v148;
          uint64_t v148 = v152;
        }
        uint64_t v63 = v359 + 1;
      }
      while (v359 + 1 != v357);
    }
    operator delete(__p);
  }
  uint64_t v208 = *((void *)this + 30);
  if (v208)
  {
    uint64_t v209 = (char *)this + 56;
    uint64_t v210 = (uint64_t *)((char *)this + 88);
    v376 = (uint64_t *)((char *)this + 112);
    v378 = (void *)((char *)this + 120);
    v380 = (char *)this + 168;
    do
    {
      uint64_t v211 = *(unsigned __int8 **)(v208 + 40);
      long long v392 = 0uLL;
      v212 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v210, v211);
      if (v212)
      {
        v213 = v212;
        long long v214 = (char *)v212[7];
        if (v214 != v209)
        {
          v215 = (char *)*((void *)this + 8);
          if (v215 != v214)
          {
            v216 = (char *)*((void *)v214 + 1);
            if (v216 != v215)
            {
              uint64_t v217 = *(void *)v214;
              *(void *)(v217 + 8) = v216;
              **((void **)v214 + 1) = v217;
              uint64_t v218 = *(void *)v215;
              *(void *)(v218 + 8) = v214;
              *(void *)long long v214 = v218;
              *(void *)v215 = v214;
              *((void *)v214 + 1) = v215;
            }
          }
          ++*((_DWORD *)this + 37);
          v220 = (md::LabelMapTile *)*((void *)v214 + 5);
          v219 = (std::__shared_weak_count *)*((void *)v214 + 6);
          v390 = v219;
          if (!v219) {
            goto LABEL_450;
          }
          atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_447:
          char v391 = 1;
          atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)&long long v392 = v220;
          *((void *)&v392 + 1) = v219;
LABEL_578:
          if (!v220) {
            goto LABEL_666;
          }
          goto LABEL_579;
        }
        if (*((unsigned char *)v212 + 64))
        {
          v220 = 0;
          ++*((_DWORD *)this + 37);
          v390 = 0;
LABEL_450:
          char v391 = 1;
          long long v392 = (unint64_t)v220;
          if (!v220) {
            goto LABEL_666;
          }
LABEL_579:
          uint64_t v292 = *((void *)this + 6);
          uint64_t v293 = *((void *)v211 + 25);
          v294 = (std::__shared_weak_count *)*((void *)v211 + 26);
          *(void *)&long long v395 = v220;
          *((void *)&v395 + 1) = v293;
          v396 = v294;
          if (v294) {
            atomic_fetch_add_explicit(&v294->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v405 = 0;
          v295 = (long long *)operator new(0x20uLL);
          *(void *)v295 = &unk_1EF575318;
          *((void *)v295 + 1) = v220;
          *((void *)v295 + 2) = v293;
          *((void *)v295 + 3) = v294;
          if (v294) {
            atomic_fetch_add_explicit(&v294->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v405 = v295;
          md::LabelMapTile::queueCommand((uint64_t)v220, 3, &v403);
          if (v405 == &v403)
          {
            (*(void (**)(long long *))(v403 + 32))(&v403);
            if (!v294) {
              goto LABEL_591;
            }
          }
          else
          {
            if (v405) {
              (*(void (**)(void))(*(void *)v405 + 40))();
            }
            if (!v294)
            {
LABEL_591:
              md::LabelMapTile::loadResourcesTile((uint64_t)v220, *((void *)v211 + 23), *((std::__shared_weak_count **)v211 + 24));
              v296 = v211 + 24;
              md::LabelMapTile::loadLabelTiles(v220, (const md::LabelTileSet *)(v211 + 24));
              long long v395 = 0uLL;
              if (!*(unsigned char *)(v292 + 3568) && !*(unsigned char *)(v292 + 3569)) {
                goto LABEL_658;
              }
              if (!v211[216]) {
                goto LABEL_658;
              }
              if (!*((void *)v211 + 28)) {
                goto LABEL_658;
              }
              v297 = (std::mutex *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v292 + 168) + 64)
                                                                     + 40))(*(void *)(*(void *)(v292 + 168) + 64));
              v298 = v297;
              if (!v297) {
                goto LABEL_658;
              }
              if (*((void *)v211 + 32))
              {
                if (!*(void *)v296)
                {
                  long long v302 = 0uLL;
                  goto LABEL_626;
                }
                v299 = *(geo::codec::VectorTile ***)(*(void *)v296 + 24);
                v300 = *v299;
                v301 = (std::__shared_weak_count *)v299[1];
                if (v301)
                {
                  atomic_fetch_add_explicit(&v301->__shared_owners_, 1uLL, memory_order_relaxed);
                  if (!atomic_fetch_add(&v301->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                    std::__shared_weak_count::__release_weak(v301);
                  }
                }
                long long v302 = 0uLL;
                if (v300 && *((void *)v211 + 32))
                {
                  v363 = (zilch::TrafficSkeletonTile *)*((void *)v211 + 32);
                  v365 = v300;
                  uint64_t v387 = v208;
                  v368 = (md::DynamicTrafficTileList *)*((void *)v211 + 28);
                  std::mutex::lock(v298);
                  v383 = (const QuadTile *)(v211 + 232);
                  sig = (uint64_t *)v298[1].__m_.__sig;
                  uint64_t v361 = (uint64_t)&v298[1];
                  v304 = *(uint64_t **)v298[1].__m_.__opaque;
                  for (uint64_t i = v298; sig != v304; sig += 2)
                  {
                    v331 = (std::__shared_weak_count *)sig[1];
                    if (v331)
                    {
                      v332 = std::__shared_weak_count::lock(v331);
                      *((void *)&v393 + 1) = v332;
                      if (v332)
                      {
                        v333 = v332;
                        uint64_t v334 = *sig;
                        *(void *)&long long v393 = *sig;
                        if (*sig)
                        {
                          if (v383->_type == *(unsigned __int8 *)(v334 + 8)
                            && v211[233] == *(unsigned __int8 *)(v334 + 9)
                            && *((_DWORD *)v211 + 59) == *(_DWORD *)(v334 + 12)
                            && *((_DWORD *)v211 + 60) == *(_DWORD *)(v334 + 16)
                            && !*(unsigned char *)(v334 + 72))
                          {
                            uint64_t v335 = *(void *)v368;
                            uint64_t v336 = *((void *)v368 + 1);
                            if ((v336 - *(void *)v368) >> 4 == (uint64_t)(*(void *)(v334 + 88)
                                                                          - *(void *)(v334 + 80)) >> 3)
                            {
                              if (v336 == v335) {
                                goto LABEL_625;
                              }
                              uint64_t v337 = 0;
                              unint64_t v338 = 0;
                              while (zilch::TrafficDynamicTile::feedUpdateTimeSeconds(*(zilch::TrafficDynamicTile **)(*(void *)(v335 + v337) + 144)) <= *(void *)(*(void *)(v334 + 80) + 8 * v338))
                              {
                                ++v338;
                                uint64_t v335 = *(void *)v368;
                                v337 += 16;
                                if (v338 >= (uint64_t)(*((void *)v368 + 1) - *(void *)v368) >> 4) {
                                  goto LABEL_625;
                                }
                              }
                              v298 = i;
                            }
                          }
                        }
                        if (!atomic_fetch_add(&v333->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                          std::__shared_weak_count::__release_weak(v333);
                        }
                      }
                    }
                  }
                  v305 = (std::__shared_weak_count *)operator new(0x100uLL);
                  v305->__shared_owners_ = 0;
                  v305->__shared_weak_owners_ = 0;
                  v305->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580250;
                  v306 = md::LabelTrafficTile::LabelTrafficTile((md::LabelTrafficTile *)&v305[1], v383, v365, v363, v368);
                  *(void *)&long long v393 = v306;
                  *((void *)&v393 + 1) = v305;
                  *(void *)&long long v403 = v306;
                  *((void *)&v403 + 1) = v305;
                  atomic_fetch_add_explicit(&v305->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  v307 = *(md::LabelTrafficTile ***)v298[1].__m_.__opaque;
                  if ((unint64_t)v307 >= *(void *)&v298[1].__m_.__opaque[8])
                  {
                    v313 = std::vector<std::weak_ptr<md::LabelTrafficTile>,geo::StdAllocator<std::weak_ptr<md::LabelTrafficTile>,mdm::Allocator>>::__push_back_slow_path<std::weak_ptr<md::LabelTrafficTile>>(v361, (uint64_t)&v403);
                    v305 = (std::__shared_weak_count *)*((void *)&v403 + 1);
                    *(void *)v298[1].__m_.__opaque = v313;
                    if (!v305) {
                      goto LABEL_625;
                    }
                  }
                  else
                  {
                    if (v307)
                    {
                      *v307 = v306;
                      v307[1] = (md::LabelTrafficTile *)v305;
                      long long v403 = 0uLL;
                      v305 = 0;
                    }
                    *(void *)v298[1].__m_.__opaque = v307 + 2;
                    if (!v305)
                    {
LABEL_625:
                      std::mutex::unlock(i);
                      long long v302 = v393;
                      uint64_t v208 = v387;
                      this = v389;
                      goto LABEL_626;
                    }
                  }
                  std::__shared_weak_count::__release_weak(v305);
                  goto LABEL_625;
                }
LABEL_626:
                v314 = (std::__shared_weak_count *)*((void *)&v395 + 1);
                long long v395 = v302;
                if (v314 && !atomic_fetch_add(&v314->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                  std::__shared_weak_count::__release_weak(v314);
                }
LABEL_658:
                md::LabelMapTile::loadTrafficTile((uint64_t)v220, v395, *((std::__shared_weak_count **)&v395 + 1));
                v327 = (std::__shared_weak_count *)*((void *)&v395 + 1);
                if (*((void *)&v395 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v395 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                  std::__shared_weak_count::__release_weak(v327);
                }
                long long v403 = v392;
                if (*((void *)&v392 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v392 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>((unint64_t)v380, v392, (uint64_t)&v403);
                v328 = (std::__shared_weak_count *)*((void *)&v403 + 1);
                if (*((void *)&v403 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v403 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                  std::__shared_weak_count::__release_weak(v328);
                }
                goto LABEL_666;
              }
              uint64_t v388 = v208;
              v369 = (md::DynamicTrafficTileList *)*((void *)v211 + 28);
              std::mutex::lock(v297);
              v384 = (const QuadTile *)(v211 + 232);
              v374 = v298;
              v308 = v298;
              v311 = (uint64_t *)v298[1].__m_.__sig;
              v310 = *(uint64_t **)v298[1].__m_.__opaque;
              uint64_t v309 = (uint64_t)&v308[1];
              while (v311 != v310)
              {
                v315 = (std::__shared_weak_count *)v311[1];
                if (v315)
                {
                  v316 = std::__shared_weak_count::lock(v315);
                  *((void *)&v394 + 1) = v316;
                  if (v316)
                  {
                    v317 = v316;
                    uint64_t v318 = *v311;
                    *(void *)&long long v394 = *v311;
                    if (*v311)
                    {
                      if (v384->_type == *(unsigned __int8 *)(v318 + 8)
                        && v211[233] == *(unsigned __int8 *)(v318 + 9)
                        && *((_DWORD *)v211 + 59) == *(_DWORD *)(v318 + 12)
                        && *((_DWORD *)v211 + 60) == *(_DWORD *)(v318 + 16))
                      {
                        if (*(unsigned char *)(v318 + 72))
                        {
                          uint64_t v319 = *(void *)v369;
                          uint64_t v320 = *((void *)v369 + 1);
                          if ((v320 - *(void *)v369) >> 4 == (uint64_t)(*(void *)(v318 + 88) - *(void *)(v318 + 80)) >> 3)
                          {
                            uint64_t v366 = v309;
                            if (v320 == v319) {
                              goto LABEL_654;
                            }
                            uint64_t v321 = 0;
                            unint64_t v322 = 0;
                            while (zilch::TrafficDynamicTile::feedUpdateTimeSeconds(*(zilch::TrafficDynamicTile **)(*(void *)(v319 + v321) + 144)) <= *(void *)(*(void *)(v318 + 80) + 8 * v322))
                            {
                              ++v322;
                              uint64_t v319 = *(void *)v369;
                              v321 += 16;
                              if (v322 >= (uint64_t)(*((void *)v369 + 1) - *(void *)v369) >> 4) {
                                goto LABEL_654;
                              }
                            }
                            uint64_t v309 = v366;
                          }
                        }
                      }
                    }
                    if (!atomic_fetch_add(&v317->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                      std::__shared_weak_count::__release_weak(v317);
                    }
                  }
                }
                v311 += 2;
              }
              v323 = (std::__shared_weak_count *)operator new(0x100uLL);
              v323->__shared_owners_ = 0;
              v323->__shared_weak_owners_ = 0;
              v323->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580250;
              v324 = md::LabelTrafficTile::LabelTrafficTile((md::LabelTrafficTile *)&v323[1], v384, 0, 0, v369);
              *(void *)&long long v394 = v324;
              *((void *)&v394 + 1) = v323;
              *(void *)&long long v403 = v324;
              *((void *)&v403 + 1) = v323;
              atomic_fetch_add_explicit(&v323->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              v325 = *(md::LabelTrafficTile ***)v374[1].__m_.__opaque;
              if ((unint64_t)v325 >= *(void *)&v374[1].__m_.__opaque[8])
              {
                v330 = std::vector<std::weak_ptr<md::LabelTrafficTile>,geo::StdAllocator<std::weak_ptr<md::LabelTrafficTile>,mdm::Allocator>>::__push_back_slow_path<std::weak_ptr<md::LabelTrafficTile>>(v309, (uint64_t)&v403);
                v323 = (std::__shared_weak_count *)*((void *)&v403 + 1);
                *(void *)v374[1].__m_.__opaque = v330;
                if (v323) {
                  goto LABEL_653;
                }
              }
              else
              {
                if (v325)
                {
                  *v325 = v324;
                  v325[1] = (md::LabelTrafficTile *)v323;
                  long long v403 = 0uLL;
                  v323 = 0;
                }
                *(void *)v374[1].__m_.__opaque = v325 + 2;
                if (v323) {
LABEL_653:
                }
                  std::__shared_weak_count::__release_weak(v323);
              }
LABEL_654:
              std::mutex::unlock(v374);
              v326 = (std::__shared_weak_count *)*((void *)&v395 + 1);
              long long v395 = v394;
              if (v326 && !atomic_fetch_add(&v326->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                std::__shared_weak_count::__release_weak(v326);
              }
              uint64_t v208 = v388;
              this = v389;
              goto LABEL_658;
            }
          }
          if (!atomic_fetch_add(&v294->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
            std::__shared_weak_count::__release_weak(v294);
          }
          goto LABEL_591;
        }
        v221 = (std::__shared_weak_count *)v212[6];
        if (v221)
        {
          v222 = std::__shared_weak_count::lock(v221);
          *((void *)&v403 + 1) = v222;
          if (v222)
          {
            v219 = v222;
            v220 = (md::LabelMapTile *)v213[5];
            *(void *)&long long v403 = v220;
            if (v220)
            {
              uint64_t v223 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), 56, 8);
              *(void *)uint64_t v223 = 0;
              *(void *)(v223 + 8) = 0;
              *(_WORD *)(v223 + 16) = *(_WORD *)v211;
              *(void *)(v223 + 20) = *(void *)(v211 + 4);
              *(void *)(v223 + 40) = v220;
              *(void *)(v223 + 48) = v219;
              atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
              *(void *)uint64_t v223 = v209;
              v224 = (uint64_t *)*((void *)this + 8);
              *(void *)(v223 + 8) = v224;
              uint64_t *v224 = v223;
              uint64_t v225 = *((void *)this + 9) + 1;
              *((void *)this + 8) = v223;
              *((void *)this + 9) = v225;
              v213[7] = v223;
              ++*((_DWORD *)this + 37);
              v390 = v219;
              goto LABEL_447;
            }
            if (!atomic_fetch_add(&v222->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v219);
            }
          }
        }
      }
      ++*((_DWORD *)this + 38);
      char v391 = 0;
      switch(*((unsigned char *)this + 276))
      {
        case 0:
        case 4:
          std::allocate_shared[abi:nn180100]<md::StandardLabelMapTile,std::allocator<md::StandardLabelMapTile>,geo::QuadTile const&,void>((md::LabelMapTile **)&v403, (const QuadTile *)v211);
          long long v226 = v403;
          long long v403 = 0uLL;
          long long v392 = v226;
          goto LABEL_469;
        case 5:
          v227 = (std::__shared_weak_count *)operator new(0x220uLL);
          v227->__shared_owners_ = 0;
          p_shared_owners = &v227->__shared_owners_;
          v227->__shared_weak_owners_ = 0;
          v227->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581DE0;
          v229 = (std::__shared_weak_count_vtbl *)&v227[1];
          md::LabelMapTile::LabelMapTile((md::LabelMapTile *)&v227[1], (const QuadTile *)v211);
          LODWORD(v227[21].__shared_weak_owners_) = 0;
          v227[22].__shared_owners_ = 0;
          v227[22].__vftable = 0;
          v230 = (std::__shared_weak_count_vtbl *)&unk_1EF546D28;
          goto LABEL_462;
        case 6:
          v227 = (std::__shared_weak_count *)operator new(0x220uLL);
          v227->__shared_owners_ = 0;
          p_shared_owners = &v227->__shared_owners_;
          v227->__shared_weak_owners_ = 0;
          v227->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580BF0;
          v229 = (std::__shared_weak_count_vtbl *)&v227[1];
          md::LabelMapTile::LabelMapTile((md::LabelMapTile *)&v227[1], (const QuadTile *)v211);
          LODWORD(v227[21].__shared_weak_owners_) = 0;
          v227[22].__shared_owners_ = 0;
          v227[22].__vftable = 0;
          v230 = (std::__shared_weak_count_vtbl *)&unk_1EF53B898;
LABEL_462:
          v227[1].__vftable = v230;
          shared_owners = (std::__shared_weak_count *)v227[4].__shared_owners_;
          if (!shared_owners)
          {
            atomic_fetch_add_explicit(&v227->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v227->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v227[4].__vftable = v229;
            v227[4].__shared_owners_ = (uint64_t)v227;
            if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_468;
            }
LABEL_467:
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
            goto LABEL_468;
          }
          if (shared_owners->__shared_owners_ == -1)
          {
            atomic_fetch_add_explicit(&v227->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v227->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v227[4].__vftable = v229;
            v227[4].__shared_owners_ = (uint64_t)v227;
            std::__shared_weak_count::__release_weak(shared_owners);
            if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_467;
            }
          }
LABEL_468:
          *(void *)&long long v232 = v229;
          *((void *)&v232 + 1) = v227;
          long long v392 = v232;
LABEL_469:
          uint64_t v233 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), 56, 8);
          uint64_t v234 = v233;
          *(void *)uint64_t v233 = 0;
          *(void *)(v233 + 8) = 0;
          *(_WORD *)(v233 + 16) = *(_WORD *)v211;
          *(void *)(v233 + 20) = *(void *)(v211 + 4);
          *(_OWORD *)(v233 + 40) = v392;
          uint64_t v386 = v208;
          if (*((void *)&v392 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v392 + 1) + 8), 1uLL, memory_order_relaxed);
            *(void *)uint64_t v233 = v209;
            v235 = (uint64_t *)*((void *)this + 8);
            *(void *)(v233 + 8) = v235;
            uint64_t *v235 = v233;
            uint64_t v236 = *((void *)this + 9) + 1;
            *((void *)this + 8) = v233;
            *((void *)this + 9) = v236;
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v392 + 1) + 16), 1uLL, memory_order_relaxed);
          }
          else
          {
            *(void *)uint64_t v233 = v209;
            v237 = (uint64_t *)*((void *)this + 8);
            *(void *)(v233 + 8) = v237;
            uint64_t *v237 = v233;
            uint64_t v238 = *((void *)this + 9) + 1;
            *((void *)this + 8) = v233;
            *((void *)this + 9) = v238;
          }
          v239 = this;
          BOOL v240 = (void)v392 == 0;
          uint64_t v241 = *v211;
          uint64_t v242 = v211[1];
          unint64_t v243 = (v242
                - 0x61C8864680B583EBLL
                + ((v241 - 0x61C8864680B583EBLL) << 6)
                + ((unint64_t)(v241 - 0x61C8864680B583EBLL) >> 2)) ^ (v241 - 0x61C8864680B583EBLL);
          uint64_t v244 = *((int *)v211 + 1);
          uint64_t v245 = *((int *)v211 + 2);
          unint64_t v246 = (v244 - 0x61C8864680B583EBLL + (v243 << 6) + (v243 >> 2)) ^ v243;
          unint64_t v247 = (v245 - 0x61C8864680B583EBLL + (v246 << 6) + (v246 >> 2)) ^ v246;
          unint64_t v248 = *((void *)v239 + 12);
          if (!v248) {
            goto LABEL_497;
          }
          uint8x8_t v249 = (uint8x8_t)vcnt_s8((int8x8_t)v248);
          v249.i16[0] = vaddlv_u8(v249);
          if (v249.u32[0] > 1uLL)
          {
            uint64_t v208 = (v245 - 0x61C8864680B583EBLL + (v246 << 6) + (v246 >> 2)) ^ v246;
            if (v247 >= v248) {
              uint64_t v208 = v247 % v248;
            }
          }
          else
          {
            uint64_t v208 = v247 & (v248 - 1);
          }
          v250 = *(uint64_t ***)(*v210 + 8 * v208);
          if (!v250 || (v251 = *v250) == 0)
          {
LABEL_497:
            uint64_t v255 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v378 + 16))(*v378, 72, 8);
            *(void *)&long long v403 = v255;
            *((void *)&v403 + 1) = v378;
            *(void *)uint64_t v255 = 0;
            *(void *)(v255 + 8) = v247;
            *(_WORD *)(v255 + 16) = *(_WORD *)v211;
            *(void *)(v255 + 20) = *(void *)(v211 + 4);
            *(_OWORD *)(v255 + 40) = v392;
            *(void *)(v255 + 56) = v234;
            *(unsigned char *)(v255 + 64) = v240;
            LOBYTE(v404) = 1;
            this = v389;
            float v256 = (float)(unint64_t)(*((void *)v389 + 16) + 1);
            float v257 = *((float *)v389 + 34);
            if (!v248 || (float)(v257 * (float)v248) < v256)
            {
              BOOL v258 = (v248 & (v248 - 1)) != 0;
              if (v248 < 3) {
                BOOL v258 = 1;
              }
              unint64_t v259 = v258 | (2 * v248);
              unint64_t v260 = vcvtps_u32_f32(v256 / v257);
              if (v259 <= v260) {
                size_t prime = v260;
              }
              else {
                size_t prime = v259;
              }
              if (prime == 1)
              {
                size_t prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                size_t prime = std::__next_prime(prime);
              }
              unint64_t v248 = *((void *)v389 + 12);
              if (prime > v248)
              {
LABEL_509:
                uint64_t v262 = (*(uint64_t (**)(void, size_t, uint64_t))(**((void **)v389 + 13) + 16))(*((void *)v389 + 13), 8 * prime, 8);
                uint64_t v263 = *v210;
                *uint64_t v210 = v262;
                if (v263) {
                  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v389 + 13) + 40))(*((void *)v389 + 13), v263, 8 * *((void *)v389 + 12));
                }
                uint64_t v264 = 0;
                *((void *)v389 + 12) = prime;
                do
                  *(void *)(*v210 + 8 * v264++) = 0;
                while (prime != v264);
                v265 = (void *)*v376;
                if (!*v376) {
                  goto LABEL_531;
                }
                size_t v266 = v265[1];
                size_t v267 = prime - 1;
                if ((prime & (prime - 1)) == 0)
                {
                  size_t v268 = v266 & v267;
                  *(void *)(*v210 + 8 * v268) = v376;
                  while (1)
                  {
                    v269 = (void *)*v265;
                    if (!*v265) {
                      break;
                    }
                    size_t v270 = v269[1] & v267;
                    if (v270 == v268)
                    {
                      v265 = (void *)*v265;
                    }
                    else if (*(void *)(*v210 + 8 * v270))
                    {
                      void *v265 = *v269;
                      uint64_t v271 = 8 * v270;
                      void *v269 = **(void **)(*v210 + v271);
                      **(void **)(*v210 + v271) = v269;
                    }
                    else
                    {
                      *(void *)(*v210 + 8 * v270) = v265;
                      v265 = v269;
                      size_t v268 = v270;
                    }
                  }
                  goto LABEL_531;
                }
                if (v266 >= prime) {
                  v266 %= prime;
                }
                *(void *)(*v210 + 8 * v266) = v376;
                v275 = (void *)*v265;
                if (!*v265)
                {
LABEL_531:
                  unint64_t v248 = prime;
                  goto LABEL_532;
                }
                while (2)
                {
                  size_t v277 = v275[1];
                  if (v277 >= prime) {
                    v277 %= prime;
                  }
                  if (v277 != v266)
                  {
                    if (!*(void *)(*v210 + 8 * v277))
                    {
                      *(void *)(*v210 + 8 * v277) = v265;
LABEL_536:
                      v265 = v275;
                      v275 = (void *)*v275;
                      size_t v266 = v277;
                      if (!v275) {
                        goto LABEL_531;
                      }
                      continue;
                    }
                    void *v265 = *v275;
                    uint64_t v276 = 8 * v277;
                    void *v275 = **(void **)(*v210 + v276);
                    **(void **)(*v210 + v276) = v275;
                    v275 = v265;
                  }
                  break;
                }
                size_t v277 = v266;
                goto LABEL_536;
              }
              if (prime < v248)
              {
                unint64_t v272 = vcvtps_u32_f32((float)*((unint64_t *)v389 + 16) / *((float *)v389 + 34));
                if (v248 < 3
                  || (uint8x8_t v273 = (uint8x8_t)vcnt_s8((int8x8_t)v248), v273.i16[0] = vaddlv_u8(v273), v273.u32[0] > 1uLL))
                {
                  unint64_t v272 = std::__next_prime(v272);
                }
                else
                {
                  uint64_t v274 = 1 << -(char)__clz(v272 - 1);
                  if (v272 >= 2) {
                    unint64_t v272 = v274;
                  }
                }
                if (prime <= v272) {
                  size_t prime = v272;
                }
                if (prime >= v248)
                {
                  unint64_t v248 = *((void *)v389 + 12);
                }
                else
                {
                  if (prime) {
                    goto LABEL_509;
                  }
                  uint64_t v312 = *v210;
                  *uint64_t v210 = 0;
                  if (v312) {
                    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v389 + 13) + 40))(*((void *)v389 + 13), v312, 8 * *((void *)v389 + 12));
                  }
                  unint64_t v248 = 0;
                  *((void *)v389 + 12) = 0;
                }
              }
LABEL_532:
              if ((v248 & (v248 - 1)) != 0)
              {
                if (v247 >= v248) {
                  uint64_t v208 = v247 % v248;
                }
                else {
                  uint64_t v208 = v247;
                }
              }
              else
              {
                uint64_t v208 = (v248 - 1) & v247;
              }
            }
            v278 = *(uint64_t **)(*v210 + 8 * v208);
            if (v278)
            {
              *(void *)uint64_t v255 = *v278;
              uint64_t v208 = v386;
              goto LABEL_553;
            }
            *(void *)uint64_t v255 = *v376;
            uint64_t *v376 = v255;
            *(void *)(*v210 + 8 * v208) = v376;
            uint64_t v208 = v386;
            if (*(void *)v255)
            {
              unint64_t v279 = *(void *)(*(void *)v255 + 8);
              if ((v248 & (v248 - 1)) != 0)
              {
                if (v279 >= v248) {
                  v279 %= v248;
                }
              }
              else
              {
                v279 &= v248 - 1;
              }
              v278 = (uint64_t *)(*v210 + 8 * v279);
LABEL_553:
              uint64_t *v278 = v255;
            }
            ++*((void *)v389 + 16);
            goto LABEL_556;
          }
          if (v249.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v253 = v251[1];
              if (v253 == v247)
              {
                if (__PAIR64__(*((unsigned __int8 *)v251 + 17), *((unsigned __int8 *)v251 + 16)) == __PAIR64__(v242, v241)
                  && *(uint64_t *)((char *)v251 + 20) == __PAIR64__(v245, v244))
                {
                  goto LABEL_494;
                }
              }
              else if ((v253 & (v248 - 1)) != v208)
              {
                goto LABEL_497;
              }
              v251 = (uint64_t *)*v251;
              if (!v251) {
                goto LABEL_497;
              }
            }
          }
          break;
        default:
          goto LABEL_469;
      }
      while (1)
      {
        unint64_t v252 = v251[1];
        if (v252 == v247) {
          break;
        }
        if (v252 >= v248) {
          v252 %= v248;
        }
        if (v252 != v208) {
          goto LABEL_497;
        }
LABEL_482:
        v251 = (uint64_t *)*v251;
        if (!v251) {
          goto LABEL_497;
        }
      }
      if (__PAIR64__(*((unsigned __int8 *)v251 + 17), *((unsigned __int8 *)v251 + 16)) != __PAIR64__(v242, v241)
        || *(uint64_t *)((char *)v251 + 20) != __PAIR64__(v245, v244))
      {
        goto LABEL_482;
      }
LABEL_494:
      v254 = (std::__shared_weak_count *)v251[6];
      *(_OWORD *)(v251 + 5) = v392;
      uint64_t v208 = v386;
      if (v254) {
        std::__shared_weak_count::__release_weak(v254);
      }
      v251[7] = v234;
      *((unsigned char *)v251 + 64) = v240;
      this = v389;
LABEL_556:
      while (1)
      {
        unint64_t v280 = *((void *)this + 9);
        if (v280 <= *((unsigned int *)this + 36)) {
          break;
        }
        v281 = *(uint64_t **)v209;
        v282 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v210, (unsigned __int8 *)(*(void *)v209 + 16));
        if (v282 && (uint64_t *)v282[7] == v281)
        {
          v282[7] = (uint64_t)v209;
          v281 = *(uint64_t **)v209;
        }
        uint64_t v283 = *v281;
        *(void *)(v283 + 8) = v281[1];
        *(void *)v281[1] = v283;
        *((void *)this + 9) = v280 - 1;
        v284 = (std::__shared_weak_count *)v281[6];
        if (v284 && !atomic_fetch_add(&v284->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
          std::__shared_weak_count::__release_weak(v284);
        }
        (*(void (**)(void, uint64_t *, uint64_t))(**((void **)this + 10) + 40))(*((void *)this + 10), v281, 56);
      }
      unsigned int v285 = *((_DWORD *)this + 40) + 1;
      *((_DWORD *)this + 40) = v285;
      if (v285 < 0x65)
      {
        v220 = (md::LabelMapTile *)v392;
        goto LABEL_578;
      }
      *((_DWORD *)this + 40) = 0;
      v286 = (uint64_t *)*((void *)this + 14);
      if (v286)
      {
        int v287 = 0;
        do
        {
          while (1)
          {
            if (!*((unsigned char *)v286 + 64))
            {
              uint64_t v288 = v286[6];
              if (!v288 || *(void *)(v288 + 8) == -1) {
                break;
              }
            }
            v286 = (uint64_t *)*v286;
            ++v287;
            if (!v286) {
              goto LABEL_610;
            }
          }
          v289 = (uint64_t *)*v286;
          std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v403, v210, v286);
          uint64_t v290 = v403;
          if ((void)v403)
          {
            if (v404)
            {
              v291 = *(std::__shared_weak_count **)(v403 + 48);
              if (v291) {
                std::__shared_weak_count::__release_weak(v291);
              }
            }
            (*(void (**)(void, uint64_t, uint64_t))(***((void ***)&v403 + 1) + 40))(**((void **)&v403 + 1), v290, 72);
          }
          v286 = v289;
        }
        while (v289);
      }
      else
      {
        int v287 = 0;
      }
LABEL_610:
      *((_DWORD *)this + 39) = v287;
      v220 = (md::LabelMapTile *)v392;
      if ((void)v392) {
        goto LABEL_579;
      }
LABEL_666:
      if (v391 && v390 && !atomic_fetch_add(&v390->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
        std::__shared_weak_count::__release_weak(v390);
        v329 = (std::__shared_weak_count *)*((void *)&v392 + 1);
        if (*((void *)&v392 + 1)) {
          goto LABEL_670;
        }
      }
      else
      {
        v329 = (std::__shared_weak_count *)*((void *)&v392 + 1);
        if (*((void *)&v392 + 1))
        {
LABEL_670:
          if (!atomic_fetch_add(&v329->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
            std::__shared_weak_count::__release_weak(v329);
          }
        }
      }
      uint64_t v208 = *(void *)v208;
    }
    while (v208);
  }
  if (*((void *)this + 31))
  {
    v339 = (void *)*((void *)this + 30);
    if (v339)
    {
      do
      {
        v348 = (void *)*v339;
        uint64_t v349 = v339[5];
        v339[5] = 0;
        if (v349) {
          std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](v349);
        }
        operator delete(v339);
        v339 = v348;
      }
      while (v348);
    }
    *((void *)this + 30) = 0;
    uint64_t v340 = *((void *)this + 29);
    if (v340)
    {
      for (uint64_t j = 0; j != v340; ++j)
        *(void *)(*((void *)this + 28) + 8 * j) = 0;
    }
    *((void *)this + 31) = 0;
  }
  v342 = (void *)MEMORY[0x1A6239C40]();
  md::LabelManager::layout(*((void *)this + 6), v356, (uint64_t)this + 168);
  if (*((void *)this + 41))
  {
    v343 = (void *)*((void *)this + 40);
    if (v343)
    {
      do
      {
        v344 = (void *)*v343;
        operator delete(v343);
        v343 = v344;
      }
      while (v344);
    }
    *((void *)this + 40) = 0;
    uint64_t v345 = *((void *)this + 39);
    if (v345)
    {
      for (uint64_t k = 0; k != v345; ++k)
        *(void *)(*((void *)this + 38) + 8 * k) = 0;
    }
    *((void *)this + 41) = 0;
  }
  if (*((void *)this + 26))
  {
    v347 = (void *)*((void *)this + 24);
    while (v347)
    {
      v350 = v347;
      v347 = (void *)*v347;
      v351 = (std::__shared_weak_count *)v350[3];
      if (v351 && !atomic_fetch_add(&v351->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
        std::__shared_weak_count::__release_weak(v351);
      }
      (*(void (**)(void, void *, uint64_t))(**((void **)this + 25) + 40))(*((void *)this + 25), v350, 32);
    }
    *((void *)this + 24) = 0;
    uint64_t v352 = *((void *)this + 22);
    if (v352)
    {
      for (uint64_t m = 0; m != v352; ++m)
        *(void *)(*((void *)this + 21) + 8 * m) = 0;
    }
    *((void *)this + 26) = 0;
  }
LABEL_721:
  if (v402)
  {
    (*(void (**)(void *))(*v402 + 48))(v402);
    if (v402 == v401)
    {
      (*(void (**)(void *))(v401[0] + 32))(v401);
    }
    else if (v402)
    {
      (*(void (**)(void))(*v402 + 40))();
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A1AF2410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::mutex *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  uint64_t v38 = *(std::__shared_weak_count **)(v36 - 136);
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a34);
  std::mutex::unlock(a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a36);
  std::optional<std::shared_ptr<md::StandardLabelMapTile>>::~optional((uint64_t)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a32);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v36 - 176));
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  uint64_t v6 = *((int *)a2 + 1);
  uint64_t v7 = *((int *)a2 + 2);
  unint64_t v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v11 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    if (v9 >= *(void *)&v2) {
      uint64_t v11 = v9 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v11 = v9 & (*(void *)&v2 - 1);
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  double result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v16 = result[1];
        if (v9 == v16)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
          {
            return result;
          }
        }
        else if ((v16 & v14) != v11)
        {
          return 0;
        }
        double result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v15 = result[1];
      if (v9 == v15)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
        {
          return result;
        }
      }
      else
      {
        if (v15 >= *(void *)&v2) {
          v15 %= *(void *)&v2;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      double result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(void *__p)
{
  int8x8_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::__emplace_unique_key_args<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(float *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = *((int *)a2 + 1);
  uint64_t v10 = *((int *)a2 + 2);
  unint64_t v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  unint64_t v12 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
  int v13 = *((unsigned __int16 *)a2 + 12);
  unint64_t v14 = ((v12 << 6) + v13 + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
  unint64_t v15 = *((void *)a1 + 1);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      uint64_t v3 = ((v12 << 6) + v13 + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
      if (v14 >= v15) {
        uint64_t v3 = v14 % v15;
      }
    }
    else
    {
      uint64_t v3 = v14 & (v15 - 1);
    }
    unint64_t v17 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v17)
    {
      uint64_t v18 = *v17;
      if (v18)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v18[1];
            if (v20 == v14)
            {
              if (__PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v18 + 20) == __PAIR64__(v10, v9)
                && *((unsigned __int16 *)v18 + 20) == v13)
              {
                return;
              }
            }
            else if ((v20 & (v15 - 1)) != v3)
            {
              goto LABEL_27;
            }
            uint64_t v18 = (uint64_t *)*v18;
            if (!v18) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v19 = v18[1];
          if (v19 == v14)
          {
            if (__PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v7, v6)
              && *(uint64_t *)((char *)v18 + 20) == __PAIR64__(v10, v9)
              && *((unsigned __int16 *)v18 + 20) == v13)
            {
              return;
            }
          }
          else
          {
            if (v19 >= v15) {
              v19 %= v15;
            }
            if (v19 != v3) {
              break;
            }
          }
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_27:
  uint64_t v21 = operator new(0x30uLL);
  void *v21 = 0;
  v21[1] = v14;
  *((_WORD *)v21 + 8) = *(_WORD *)a3;
  *(void *)((char *)v21 + 20) = *(void *)(a3 + 4);
  *((_WORD *)v21 + 20) = *(_WORD *)(a3 + 24);
  float v22 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v23 = a1[8];
  if (!v15 || (float)(v23 * (float)v15) < v22)
  {
    BOOL v24 = 1;
    if (v15 >= 3) {
      BOOL v24 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v15);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v15 = *((void *)a1 + 1);
    }
    if (prime <= v15)
    {
      if (prime >= v15) {
        goto LABEL_64;
      }
      unint64_t v39 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v15 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime >= v15)
      {
        unint64_t v15 = *((void *)a1 + 1);
LABEL_64:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15) {
            uint64_t v3 = v14 % v15;
          }
          else {
            uint64_t v3 = v14;
          }
        }
        else
        {
          uint64_t v3 = (v15 - 1) & v14;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        uint8x8_t v48 = *(void **)a1;
        *(void *)a1 = 0;
        if (v48) {
          operator delete(v48);
        }
        unint64_t v15 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v28 = operator new(8 * prime);
    uint64_t v29 = *(void **)a1;
    *(void *)a1 = v28;
    if (v29) {
      operator delete(v29);
    }
    uint64_t v30 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v30++) = 0;
    while (prime != v30);
    BOOL v32 = (uint64_t *)(a1 + 4);
    int v31 = (void *)*((void *)a1 + 2);
    if (!v31)
    {
LABEL_63:
      unint64_t v15 = prime;
      goto LABEL_64;
    }
    size_t v33 = v31[1];
    size_t v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v35 = v33 & v34;
      *(void *)(*(void *)a1 + 8 * v35) = v32;
      for (uint64_t i = (void *)*v31; *v31; uint64_t i = (void *)*v31)
      {
        size_t v37 = i[1] & v34;
        if (v37 == v35)
        {
          int v31 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v37))
        {
          void *v31 = *i;
          uint64_t v38 = 8 * v37;
          void *i = **(void **)(*(void *)a1 + v38);
          **(void **)(*(void *)a1 + v38) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v37) = v31;
          int v31 = i;
          size_t v35 = v37;
        }
      }
      goto LABEL_63;
    }
    if (v33 >= prime) {
      v33 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v33) = v32;
    uint64_t v42 = (void *)*v31;
    if (!*v31) {
      goto LABEL_63;
    }
    while (1)
    {
      size_t v44 = v42[1];
      if (v44 >= prime) {
        v44 %= prime;
      }
      if (v44 != v33)
      {
        if (!*(void *)(*(void *)a1 + 8 * v44))
        {
          *(void *)(*(void *)a1 + 8 * v44) = v31;
          goto LABEL_68;
        }
        void *v31 = *v42;
        uint64_t v43 = 8 * v44;
        *uint64_t v42 = **(void **)(*(void *)a1 + v43);
        **(void **)(*(void *)a1 + v43) = v42;
        uint64_t v42 = v31;
      }
      size_t v44 = v33;
LABEL_68:
      int v31 = v42;
      uint64_t v42 = (void *)*v42;
      size_t v33 = v44;
      if (!v42) {
        goto LABEL_63;
      }
    }
  }
LABEL_77:
  int v45 = *(void **)a1;
  uint64_t v46 = *(void **)(*(void *)a1 + 8 * v3);
  if (v46)
  {
    void *v21 = *v46;
LABEL_85:
    void *v46 = v21;
    goto LABEL_86;
  }
  void *v21 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v21;
  v45[v3] = a1 + 4;
  if (*v21)
  {
    unint64_t v47 = *(void *)(*v21 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v47 >= v15) {
        v47 %= v15;
      }
    }
    else
    {
      v47 &= v15 - 1;
    }
    uint64_t v46 = (void *)(*(void *)a1 + 8 * v47);
    goto LABEL_85;
  }
LABEL_86:
  ++*((void *)a1 + 3);
}

void sub_1A1AF2DAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile&,std::unique_ptr<md::LabelMapTileSourceData>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = (v9
       + ((v8 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v8 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v8 - 0x61C8864680B583EBLL);
  uint64_t v11 = *((int *)a2 + 1);
  uint64_t v12 = *((int *)a2 + 2);
  unint64_t v13 = (v11 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  unint64_t v14 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
  unint64_t v15 = a1[1];
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      uint64_t v4 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
      if (v14 >= v15) {
        uint64_t v4 = v14 % v15;
      }
    }
    else
    {
      uint64_t v4 = v14 & (v15 - 1);
    }
    unint64_t v17 = *(void ***)(*a1 + 8 * v4);
    if (v17)
    {
      uint64_t v18 = *v17;
      if (*v17)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v18[1];
            if (v20 == v14)
            {
              if (__PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v9, v8)
                && *(void *)((char *)v18 + 20) == __PAIR64__(v12, v11))
              {
                return v18;
              }
            }
            else if ((v20 & (v15 - 1)) != v4)
            {
              goto LABEL_25;
            }
            uint64_t v18 = (void *)*v18;
            if (!v18) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v19 = v18[1];
          if (v19 == v14)
          {
            if (__PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v9, v8)
              && *(void *)((char *)v18 + 20) == __PAIR64__(v12, v11))
            {
              return v18;
            }
          }
          else
          {
            if (v19 >= v15) {
              v19 %= v15;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_25:
  uint64_t v21 = a1 + 2;
  uint64_t v18 = operator new(0x30uLL);
  *uint64_t v18 = 0;
  v18[1] = v14;
  *((_WORD *)v18 + 8) = *(_WORD *)a3;
  *(void *)((char *)v18 + 20) = *(void *)(a3 + 4);
  uint64_t v22 = *a4;
  *a4 = 0;
  v18[5] = v22;
  float v23 = (float)(unint64_t)(a1[3] + 1);
  float v24 = *((float *)a1 + 8);
  if (!v15 || (float)(v24 * (float)v15) < v23)
  {
    BOOL v25 = 1;
    if (v15 >= 3) {
      BOOL v25 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v15);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v15 = a1[1];
    }
    if (prime <= v15)
    {
      if (prime >= v15) {
        goto LABEL_62;
      }
      unint64_t v39 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v15 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime >= v15)
      {
        unint64_t v15 = a1[1];
LABEL_62:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15) {
            uint64_t v4 = v14 % v15;
          }
          else {
            uint64_t v4 = v14;
          }
        }
        else
        {
          uint64_t v4 = (v15 - 1) & v14;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        unint64_t v49 = (void *)*a1;
        *a1 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v15 = 0;
        a1[1] = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v29 = operator new(8 * prime);
    uint64_t v30 = (void *)*a1;
    *a1 = (uint64_t)v29;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v31++) = 0;
    while (prime != v31);
    BOOL v32 = (void *)*v21;
    if (!*v21)
    {
LABEL_61:
      unint64_t v15 = prime;
      goto LABEL_62;
    }
    size_t v33 = v32[1];
    size_t v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v35 = v33 & v34;
      *(void *)(*a1 + 8 * v35) = v21;
      for (uint64_t i = (void *)*v32; *v32; uint64_t i = (void *)*v32)
      {
        size_t v37 = i[1] & v34;
        if (v37 == v35)
        {
          BOOL v32 = i;
        }
        else if (*(void *)(*a1 + 8 * v37))
        {
          void *v32 = *i;
          uint64_t v38 = 8 * v37;
          void *i = **(void **)(*a1 + v38);
          **(void **)(*a1 + v38) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v37) = v32;
          BOOL v32 = i;
          size_t v35 = v37;
        }
      }
      goto LABEL_61;
    }
    if (v33 >= prime) {
      v33 %= prime;
    }
    *(void *)(*a1 + 8 * v33) = v21;
    uint64_t v42 = (void *)*v32;
    if (!*v32) {
      goto LABEL_61;
    }
    while (1)
    {
      size_t v44 = v42[1];
      if (v44 >= prime) {
        v44 %= prime;
      }
      if (v44 != v33)
      {
        if (!*(void *)(*a1 + 8 * v44))
        {
          *(void *)(*a1 + 8 * v44) = v32;
          goto LABEL_66;
        }
        void *v32 = *v42;
        uint64_t v43 = 8 * v44;
        *uint64_t v42 = **(void **)(*a1 + v43);
        **(void **)(*a1 + v43) = v42;
        uint64_t v42 = v32;
      }
      size_t v44 = v33;
LABEL_66:
      BOOL v32 = v42;
      uint64_t v42 = (void *)*v42;
      size_t v33 = v44;
      if (!v42) {
        goto LABEL_61;
      }
    }
  }
LABEL_75:
  uint64_t v45 = *a1;
  uint64_t v46 = *(void **)(*a1 + 8 * v4);
  if (v46)
  {
    *uint64_t v18 = *v46;
LABEL_83:
    void *v46 = v18;
    goto LABEL_84;
  }
  *uint64_t v18 = *v21;
  void *v21 = v18;
  *(void *)(v45 + 8 * v4) = v21;
  if (*v18)
  {
    unint64_t v47 = *(void *)(*v18 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v47 >= v15) {
        v47 %= v15;
      }
    }
    else
    {
      v47 &= v15 - 1;
    }
    uint64_t v46 = (void *)(*a1 + 8 * v47);
    goto LABEL_83;
  }
LABEL_84:
  ++a1[3];
  return v18;
}

void sub_1A1AF32DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>(unint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(result + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void **)(*(void *)result + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return result;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return result;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 32) + 16))(*(void *)(result + 32), 32, 8);
  unint64_t v15 = result;
  *(void *)double result = 0;
  *(void *)(result + 8) = v8;
  *(_OWORD *)(result + 16) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  float v16 = (float)(unint64_t)(*(void *)(v5 + 40) + 1);
  float v17 = *(float *)(v5 + 48);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    if (v21 == 1)
    {
      size_t v21 = 2;
    }
    else if ((v21 & (v21 - 1)) != 0)
    {
      double result = std::__next_prime(v21);
      size_t v21 = result;
    }
    int8x8_t v22 = *(int8x8_t *)(v5 + 8);
    if (v21 > *(void *)&v22) {
      goto LABEL_34;
    }
    if (v21 < *(void *)&v22)
    {
      double result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        double result = std::__next_prime(result);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(result - 1);
        if (result >= 2) {
          double result = v24;
        }
      }
      if (v21 <= result) {
        size_t v21 = result;
      }
      if (v21 < *(void *)&v22) {
LABEL_34:
      }
        double result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v5, v21);
    }
    unint64_t v9 = *(void *)(v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  BOOL v25 = *(unint64_t **)(*(void *)v5 + 8 * v3);
  if (v25)
  {
    *(void *)unint64_t v15 = *v25;
LABEL_58:
    unint64_t *v25 = v15;
    goto LABEL_59;
  }
  *(void *)unint64_t v15 = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = v15;
  *(void *)(*(void *)v5 + 8 * v3) = v5 + 24;
  if (*(void *)v15)
  {
    unint64_t v26 = *(void *)(*(void *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    BOOL v25 = (unint64_t *)(*(void *)v5 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(v5 + 40);
  return result;
}

void sub_1A1AF3638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    int8x8_t v2 = *(std::__shared_weak_count **)(result + 264);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    unint64_t v3 = (std::__shared_weak_count *)v1[26];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v1[24];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(v1 + 3));
    JUMPOUT(0x1A6239270);
  }
  return result;
}

uint64_t *std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::find<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  uint64_t v6 = *((int *)a2 + 1);
  uint64_t v7 = *((int *)a2 + 2);
  unint64_t v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  int v10 = *((unsigned __int16 *)a2 + 12);
  unint64_t v11 = ((v9 << 6) + v10 + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v13 = ((v9 << 6) + v10 + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    if (v11 >= *(void *)&v2) {
      uint64_t v13 = v11 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v13 = v11 & (*(void *)&v2 - 1);
  }
  uint64_t v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  double result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      uint64_t v16 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v18 = result[1];
        if (v11 == v18)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
            && *((unsigned __int16 *)result + 20) == v10)
          {
            return result;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        double result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v17 = result[1];
      if (v11 == v17)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
          && *((unsigned __int16 *)result + 20) == v10)
        {
          return result;
        }
      }
      else
      {
        if (v17 >= *(void *)&v2) {
          v17 %= *(void *)&v2;
        }
        if (v17 != v13) {
          return 0;
        }
      }
      double result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LabelLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LabelLayout", "", v5, 2u);
  }
}

md::LabelMapTile *md::LabelMapTile::LabelMapTile(md::LabelMapTile *this, const QuadTile *a2)
{
  unsigned __int8 level = a2->_level;
  int v4 = 1 << level;
  int v5 = (a2->_yIdx % v4 + v4) % v4;
  int v6 = (a2->_xIdx % v4 + v4) % v4;
  *((unsigned char *)this + 8) = a2->_type;
  *((unsigned char *)this + 9) = level;
  *((_DWORD *)this + 3) = v5;
  *((_DWORD *)this + 4) = v6;
  *((_DWORD *)this + 8) = vcvtmd_s64_f64((double)a2->_xIdx / (double)(1 << a2->_level));
  double v7 = 1.0 / (double)(1 << level);
  double v8 = v7 * (double)v6;
  double v9 = v7 * (double)((1 << level) + ~v5);
  *((double *)this + 5) = v8;
  *((double *)this + 6) = v9;
  *((double *)this + 7) = v8 + v7;
  *((double *)this + 8) = v9 + v7;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)this = &unk_1EF5316A8;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 11) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 104) = _Q0;
  *((_DWORD *)this + 32) = 0x10000;
  *((void *)this + 15) = 0;
  *((void *)this + 45) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  unint64_t v15 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v31 = a2;
    unint64_t v15 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a2 = v31;
    if (v28) {
      operator new();
    }
  }
  *((void *)this + 46) = *((void *)v15 + 91);
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  {
    BOOL v32 = a2;
    unint64_t v15 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a2 = v32;
    if (v29) {
      operator new();
    }
  }
  *((void *)this + 50) = *((void *)v15 + 91);
  uint64_t v16 = (char *)this + 416;
  *((void *)this + 52) = 0;
  {
    size_t v33 = a2;
    uint64_t v16 = (char *)this + 416;
    a2 = v33;
    unint64_t v15 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v30) {
      operator new();
    }
  }
  *((void *)this + 53) = *((void *)v15 + 91);
  *((void *)this + 54) = 0;
  *((void *)this + 51) = v16;
  *((_DWORD *)this + 122) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((unsigned char *)this + 492) = -1;
  if (a2->_type == 255)
  {
    long double v17 = exp((*((double *)this + 6) + (*((double *)this + 8) - *((double *)this + 6)) * 0.5) * 6.28318531 + -3.14159265);
    long double v18 = atan(v17) * 114.591559 + -90.0;
    long double v19 = cos(v18 * 0.034906585) * -559.82 + 111132.92;
    long double v20 = v19 + cos(v18 * 0.0698131701) * 1.175;
    long double v21 = v20 + cos(v18 * 0.104719755) * -0.0023;
    long double v22 = v18 * 0.00872664626;
    long double v23 = tan(v18 * 0.00872664626 + 0.78103484);
    double v24 = log(v23);
    long double v25 = tan(v22 + 0.789761487);
    long double v26 = fabs((log(v25) - v24) * 0.159154943) / v21;
    *((long double *)this + 13) = v26;
    *((long double *)this + 14) = 1.0 / (v26 * v26);
  }
  return this;
}

void gms::MaterialManager<ggl::Texture2D>::setClientStyleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 88) != a2)
  {
    *(_DWORD *)(a1 + 392) = 0;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
    int v4 = *(std::__shared_weak_count **)(a1 + 96);
    *(void *)(a1 + 88) = a2;
    *(void *)(a1 + 96) = a3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 88);
    uint64_t v41 = v6 + 16;
    double v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v6 + 16));
    if (v7) {
      geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
    }
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(&v38, (uint64_t *)(v6 + 216));
    double v9 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v6 + 16));
    if (v9) {
      geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
    }
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(std::__shared_weak_count **)(v5 + 80);
    *(void *)(v5 + 72) = v12;
    *(void *)(v5 + 80) = v11;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    if (!v40 && v38)
    {
      uint64_t v14 = gss::Allocator::instance(v9);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v14 + 40))(v14, v38, v39);
      uint64_t v38 = 0;
    }
  }
  uint64_t v15 = *(void *)(a1 + 88);
  if (*(_DWORD *)(v15 + 248) == *(_DWORD *)(a1 + 392))
  {
    uint64_t v16 = (int8x16_t *)(a1 + 280);
    int8x16_t v17 = *(int8x16_t *)(a1 + 184);
    *(int8x16_t *)(a1 + 184) = vextq_s8(v17, v17, 8uLL);
    long double v18 = (void *)v17.i64[0];
    if (*(void *)(v17.i64[0] + 24))
    {
      long double v19 = *(void **)(v17.i64[0] + 16);
      while (v19)
      {
        long double v20 = v19;
        long double v19 = (void *)*v19;
        if (*((unsigned char *)v20 + 48))
        {
          long double v21 = (std::__shared_weak_count *)v20[5];
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
        operator delete(v20);
      }
      v18[2] = 0;
      uint64_t v22 = v18[1];
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(void *)(*v18 + 8 * i) = 0;
      }
      v18[3] = 0;
    }
    int8x16_t v24 = *v16;
    *uint64_t v16 = vextq_s8(*v16, *v16, 8uLL);
    long double v25 = (void *)v24.i64[0];
    if (*(void *)(v24.i64[0] + 24))
    {
      long double v26 = *(void **)(v24.i64[0] + 16);
      while (v26)
      {
        unint64_t v27 = v26;
        long double v26 = (void *)*v26;
        if (*((unsigned char *)v27 + 48))
        {
          int v28 = (std::__shared_weak_count *)v27[5];
          if (v28)
          {
            if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        operator delete(v27);
      }
      _WORD v25[2] = 0;
      uint64_t v29 = v25[1];
      if (v29)
      {
        for (uint64_t j = 0; j != v29; ++j)
          *(void *)(*v25 + 8 * j) = 0;
      }
      v25[3] = 0;
    }
    int8x16_t v31 = v16[6];
    v16[6] = vextq_s8(v31, v31, 8uLL);
    BOOL v32 = (void *)v31.i64[0];
    if (*(void *)(v31.i64[0] + 24))
    {
      size_t v33 = *(void **)(v31.i64[0] + 16);
      while (v33)
      {
        size_t v34 = v33;
        size_t v33 = (void *)*v33;
        if (*((unsigned char *)v34 + 48))
        {
          size_t v35 = (std::__shared_weak_count *)v34[5];
          if (v35)
          {
            if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
        }
        operator delete(v34);
      }
      v32[2] = 0;
      uint64_t v36 = v32[1];
      if (v36)
      {
        for (uint64_t k = 0; k != v36; ++k)
          *(void *)(*v32 + 8 * k) = 0;
      }
      v32[3] = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 392) = *(_DWORD *)(v15 + 248);
    geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear(a1 + 104);
    geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear(a1 + 200);
    geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear(a1 + 296);
  }
}

void sub_1A1AF42A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 80);
  if (v2[3])
  {
    uint64_t v3 = (void *)v2[2];
    while (v3)
    {
      int v4 = v3;
      uint64_t v3 = (void *)*v3;
      if (*((unsigned char *)v4 + 48))
      {
        uint64_t v5 = (std::__shared_weak_count *)v4[5];
        if (v5)
        {
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      operator delete(v4);
    }
    v2[2] = 0;
    uint64_t v6 = v2[1];
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*v2 + 8 * i) = 0;
    }
    v2[3] = 0;
  }
  double v8 = *(void **)(a1 + 88);
  if (v8[3])
  {
    double v9 = (void *)v8[2];
    while (v9)
    {
      int v10 = v9;
      double v9 = (void *)*v9;
      if (*((unsigned char *)v10 + 48))
      {
        uint64_t v11 = (std::__shared_weak_count *)v10[5];
        if (v11)
        {
          if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
      operator delete(v10);
    }
    v8[2] = 0;
    uint64_t v12 = v8[1];
    if (v12)
    {
      for (uint64_t j = 0; j != v12; ++j)
        *(void *)(*v8 + 8 * j) = 0;
    }
    void v8[3] = 0;
  }
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  int8x8_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  double v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    double v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    double v7 = (void *)(v5 + 32);
  }
  uint64_t v121 = v7;
  uint64_t v122 = v3;
  uint64_t v123 = (void *)v4;
  uint64_t v124 = (void *)v5;
  double v8 = (void *)v7[3];
  double v9 = (void *)v7[4];
  uint64_t v125 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v121))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        double v8 = v11;
        uint64_t v125 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v121);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    double result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v120 = result;
    while (1)
    {
      *double result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = v3[11];
        uint64_t v25 = v3[10] + 8 * v19;
      }
      else
      {
        uint64_t v24 = v3[11];
        uint64_t v25 = v24;
      }
      if (v25 == v24) {
        long double v26 = 0;
      }
      else {
        long double v26 = (unint64_t *)v25;
      }
      uint64_t v27 = v6[4];
      if (v16 < (v6[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v16)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v31 = v6[7],
            uint64_t v30 = v6[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v15) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v6[11];
        uint64_t v35 = v6[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v6[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = (unint64_t *)v35;
      }
      uint64_t v37 = **(void **)(v10 + 8);
      uint64_t v38 = *(void **)v37;
      unsigned __int16 v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_45;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_45:
        char v40 = 0;
      }
      else
      {
        char v40 = (void *)v38[3];
        uint64_t v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      unint64_t v42 = *v36;
      unint64_t v43 = *v36;
      uint64_t v44 = v40[50];
      unint64_t v45 = (v40[51] - v44) >> 3;
      if (v43 < v45
        && (uint64_t v46 = *(void *)(v44 + 8 * v43)) != 0
        && HIDWORD(v42) == HIDWORD(v46)
        && ((uint64_t v47 = v40[53], v47 + 16 * v46 != v40[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
      {
        uint64_t v54 = *(void *)(v44 + 8 * v43);
        uint64_t v55 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v42, v36);
        ++v55[3];
        uint64_t v56 = v47 + 16 * v54;
        uint64_t v10 = a1;
        unint64_t v49 = *(void **)(v56 + 8);
        unint64_t v42 = *v36;
        uint64_t v44 = v40[50];
        unint64_t v43 = *v36;
        if (v43 >= (v40[51] - v44) >> 3) {
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t v49 = 0;
        if (v43 >= v45) {
          goto LABEL_66;
        }
      }
      uint64_t v50 = *(void *)(v44 + 8 * v43);
      if (v50 && HIDWORD(v42) == HIDWORD(v50))
      {
        uint64_t v51 = v40[53];
        unint64_t v52 = (void **)(v51 + 16 * v50);
        if (v52 == (void **)v40[54] || v51 == 0)
        {
          unint64_t v79 = 0;
        }
        else
        {
          uint64_t v78 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v42, v36);
          ++v78[3];
          unint64_t v79 = *v52;
        }
        uint64_t v10 = a1;
        goto LABEL_67;
      }
LABEL_66:
      unint64_t v79 = 0;
LABEL_67:
      unint64_t v57 = *v26;
      unint64_t v58 = *v26;
      uint64_t v59 = v40[269];
      if (v58 < (v40[270] - v59) >> 3
        && ((uint64_t v60 = *(void *)(v59 + 8 * v58)) != 0 ? (v61 = HIDWORD(v57) == HIDWORD(v60)) : (v61 = 0), v61))
      {
        uint64_t v63 = v40[272] + 24 * v60;
        uint64_t v62 = v40[273];
      }
      else
      {
        uint64_t v62 = v40[273];
        uint64_t v63 = v62;
      }
      if (v63 == v62) {
        uint64_t v64 = 0;
      }
      else {
        uint64_t v64 = v63;
      }
      if (v64)
      {
        unint64_t v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::ColorStyleCacheKey>> const&>,std::tuple<>>((uint64_t)(v40 + 256), v57, v26);
        ++v65[3];
      }
      uint64_t v66 = std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>(v40 + 246, v64);
      if (v66) {
        unint64_t v67 = *(void *)(v66 + 40);
      }
      else {
        unint64_t v67 = 0;
      }
      unint64_t v126 = v67;
      uint64_t v68 = v40[232];
      if (v67 < (unint64_t)((v40[233] - v68) >> 3))
      {
        uint64_t v69 = *(void *)(v68 + 8 * v67);
        if (v69)
        {
          if (HIDWORD(v67) == HIDWORD(v69))
          {
            uint64_t v70 = v40[235];
            if (v70)
            {
              unsigned int v71 = (uint64_t *)(v70 + 24 * v69);
              if (v71 != (uint64_t *)v40[236])
              {
                unint64_t v72 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>> const&>,std::tuple<>>((uint64_t)(v40 + 219), v67, &v126);
                ++v72[3];
                uint64_t v73 = *v71;
                if (v73)
                {
                  {
                    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
                  }
                  unint64_t v74 = v49[1];
                  if (v74)
                  {
                    unint64_t v75 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index;
                    uint8x8_t v76 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
                    v76.i16[0] = vaddlv_u8(v76);
                    if (v76.u32[0] > 1uLL)
                    {
                      uint64_t v77 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index;
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index >= v74) {
                        uint64_t v77 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index
                      }
                            % v74;
                    }
                    else
                    {
                      uint64_t v77 = (v74 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index;
                    }
                    uint64_t v80 = *(void **)(*v49 + 8 * v77);
                    if (v80)
                    {
                      uint64_t v81 = (void *)*v80;
                      if (v81)
                      {
                        if (v76.u32[0] < 2uLL)
                        {
                          unint64_t v82 = v74 - 1;
                          while (1)
                          {
                            uint64_t v84 = v81[1];
                            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index == v84)
                            {
                              if (v81[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index) {
                                goto LABEL_111;
                              }
                            }
                            else if ((v84 & v82) != v77)
                            {
                              goto LABEL_136;
                            }
                            uint64_t v81 = (void *)*v81;
                            if (!v81) {
                              goto LABEL_136;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v83 = v81[1];
                          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index == v83)
                          {
                            if (v81[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index)
                            {
LABEL_111:
                              {
                                if (v118)
                                {
                                  md::typeToIntMap(v118);
                                  uint64_t v10 = a1;
                                }
                              }
                              if (!qword_1E957F030) {
                                goto LABEL_172;
                              }
                              uint8x8_t v85 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                              v85.i16[0] = vaddlv_u8(v85);
                              if (v85.u32[0] > 1uLL)
                              {
                                unint64_t v86 = v75;
                                if (v75 >= qword_1E957F030) {
                                  unint64_t v86 = v75 % qword_1E957F030;
                                }
                              }
                              else
                              {
                                unint64_t v86 = (qword_1E957F030 - 1) & v75;
                              }
                              int v87 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v86);
                              if (!v87 || (uint64_t v88 = *v87) == 0) {
LABEL_172:
                              }
                                abort();
                              if (v85.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  unint64_t v90 = v88[1];
                                  if ((uint64_t *)v75 == v90)
                                  {
                                    if (v88[2] == (uint64_t *)v75) {
                                      goto LABEL_132;
                                    }
                                  }
                                  else if (((unint64_t)v90 & (qword_1E957F030 - 1)) != v86)
                                  {
                                    goto LABEL_172;
                                  }
                                  uint64_t v88 = (uint64_t **)*v88;
                                  if (!v88) {
                                    goto LABEL_172;
                                  }
                                }
                              }
                              while (1)
                              {
                                unint64_t v89 = (unint64_t)v88[1];
                                if (v75 == v89)
                                {
                                  if (v88[2] == (uint64_t *)v75)
                                  {
LABEL_132:
                                    uint64_t v91 = *((int *)v88 + 6);
                                    uint64_t v92 = *((int *)v88 + 7);
                                    if (v91 != -1) {
                                      ggl::PipelineSetup::setConstantData(v79, v91, v73, 1);
                                    }
                                    if (v92 != -1) {
                                      ggl::PipelineSetup::setConstantData(v79, v92, v73, 2);
                                    }
                                    goto LABEL_136;
                                  }
                                }
                                else
                                {
                                  if (v89 >= qword_1E957F030) {
                                    v89 %= (unint64_t)qword_1E957F030;
                                  }
                                  if (v89 != v86) {
                                    goto LABEL_172;
                                  }
                                }
                                uint64_t v88 = (uint64_t **)*v88;
                                if (!v88) {
                                  goto LABEL_172;
                                }
                              }
                            }
                          }
                          else
                          {
                            if (v83 >= v74) {
                              v83 %= v74;
                            }
                            if (v83 != v77) {
                              break;
                            }
                          }
                          uint64_t v81 = (void *)*v81;
                        }
                        while (v81);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_136:
      double v8 = (void *)v121[4];
      double v93 = v125 + 1;
      uint64_t v125 = v93;
      if (v93 == v8)
      {
        double result = v120;
        if (v9 == v8) {
          goto LABEL_171;
        }
      }
      else
      {
        uint64_t v94 = v122[4];
        double result = v120;
        do
        {
          unint64_t v95 = *((unsigned int *)v93 + 1);
          unint64_t v96 = v95 >> 7;
          if (v95 >> 7 < (v122[5] - v94) >> 3)
          {
            uint64_t v97 = *(void *)(v94 + 8 * v96);
            if (v97)
            {
              uint64_t v98 = v95 & 0x7F;
              unint64_t v99 = *(unsigned __int16 *)(v97 + 2 * v98);
              uint64_t v100 = v122[7];
              uint64_t v101 = v122[8];
              if (v99 < (v101 - v100) >> 3)
              {
                uint64_t v102 = v100 + 8 * v99;
                if (v102 != v101 && *(_DWORD *)(v102 + 4) == v95)
                {
                  uint64_t v104 = v123[4];
                  if (v96 < (v123[5] - v104) >> 3)
                  {
                    uint64_t v105 = *(void *)(v104 + 8 * v96);
                    if (v105)
                    {
                      unint64_t v106 = *(unsigned __int16 *)(v105 + 2 * v98);
                      uint64_t v107 = v123[7];
                      uint64_t v108 = v123[8];
                      if (v106 < (v108 - v107) >> 3)
                      {
                        uint64_t v109 = v107 + 8 * v106;
                        if (v109 != v108 && *(_DWORD *)(v109 + 4) == v95)
                        {
                          uint64_t v111 = v124[4];
                          if (v96 < (v124[5] - v111) >> 3)
                          {
                            uint64_t v112 = *(void *)(v111 + 8 * v96);
                            if (v112)
                            {
                              unint64_t v113 = *(unsigned __int16 *)(v112 + 2 * v98);
                              uint64_t v115 = v124[7];
                              uint64_t v114 = v124[8];
                              if (v113 < (v114 - v115) >> 3)
                              {
                                uint64_t v116 = v115 + 8 * v113;
                                if (*(_DWORD *)(v116 + 4) == v95 && v116 != v114)
                                {
                                  double v8 = v93;
                                  goto LABEL_164;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v93;
        }
        while (v93 != v8);
        double v93 = v8;
LABEL_164:
        uint64_t v125 = v93;
        if (v9 == v8) {
          goto LABEL_171;
        }
      }
    }
  }
  double result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_171:
  *double result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A1AF4C80(_Unwind_Exception *a1)
{
}

uint64_t gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0x8E45E81B6E5A8E0ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8E45E81B6E5A8E0ELL;
    if (*(void *)&v1 <= 0x8E45E81B6E5A8E0ELL) {
      unint64_t v3 = 0x8E45E81B6E5A8E0ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8E45E81B6E5A8E0ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8E45E81B6E5A8E0ELL)
      {
        if (v5[2] == 0x8E45E81B6E5A8E0ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8E45E81B6E5A8E0ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8E45E81B6E5A8E0ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1AF4ED4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x12E52FADC2088C61;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x12E52FADC2088C61;
    if (*(void *)&v1 <= 0x12E52FADC2088C61uLL) {
      uint64_t v3 = 0x12E52FADC2088C61uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x12E52FADC2088C61;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x12E52FADC2088C61)
      {
        if (v5[2] == 0x12E52FADC2088C61) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x12E52FADC2088C61) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x12E52FADC2088C61) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1AF5144(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t result = *(void *)(a1 + 56);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void md::LineLabelPlacer::doUpdatePositions(uint64_t a1, uint64_t __e, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8 = __e;
  uint64_t v541 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(uint64_t **)(a1 + 32);
  v476 = (uint64_t *)(a1 + 40);
  if (v10 != (uint64_t *)(a1 + 40))
  {
    double v11 = *(double *)(a3 + 56);
    uint64_t v12 = 1 << __e;
    int v13 = ~(1 << __e);
    do
    {
      uint64_t v14 = v10[5];
      if ((v12 & *(_DWORD *)(v14 + 12)) == 0) {
        goto LABEL_18;
      }
      if (a5)
      {
        uint64_t v15 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 56))(v10[5]);
        unint64_t v16 = (float64x2_t *)md::LabelPoint::mercatorPoint(v15);
        uint64_t v17 = *(void *)(a4 + 432);
        _Q0 = *v16;
        _D2 = *(void *)(v17 + 920);
        __asm { FMLA            D3, D2, V0.D[1] }
        __n128 v24 = (__n128)vmulq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(v17 + 960), *(float64x2_t *)(v17 + 864), v16->f64[0]), *(float64x2_t *)(v17 + 896), *v16, 1), 1.0 / _D3);
        v24.n128_u64[0] = (unint64_t)vcvt_f32_f64((float64x2_t)v24);
        if (v24.n128_f32[0] < *(float *)(v17 + 1104)
          || v24.n128_f32[0] >= *(float *)(v17 + 1112)
          || (v24.n128_u32[0] = v24.n128_u32[1], v24.n128_f32[1] < *(float *)(v17 + 1108))
          || v24.n128_f32[1] >= *(float *)(v17 + 1116))
        {
          char v25 = (*(uint64_t (**)(void, float64x2_t *, __n128))(**(void **)(*(void *)(a4 + 168) + 64)
                                                                         + 56))(*(void *)(*(void *)(a4 + 168) + 64), v16, v24);
          uint64_t v14 = v10[5];
          if ((v25 & 1) == 0) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v14 = v10[5];
        }
      }
      char v26 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)v14 + 176))(v14, v8, v11);
      uint64_t v14 = v10[5];
      if (v26)
      {
        *(unsigned char *)(v14 + 11) = 0;
        goto LABEL_17;
      }
LABEL_15:
      *(_DWORD *)(v14 + 12) &= v13;
      if (*(_DWORD *)(v14 + 24) < (int)v8)
      {
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)v14 + 176))(v14, v8, 1.0);
        *(_DWORD *)(v14 + 24) = v8;
      }
LABEL_17:
      if (!*(_DWORD *)(v10[5] + 12))
      {
        unint64_t v29 = (uint64_t *)v10[1];
        uint64_t v30 = v10;
        if (v29)
        {
          do
          {
            uint64_t v28 = v29;
            unint64_t v29 = (uint64_t *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v28 = (uint64_t *)v30[2];
            _ZF = *v28 == (void)v30;
            uint64_t v30 = v28;
          }
          while (!_ZF);
        }
        if (*(uint64_t **)(a1 + 32) == v10) {
          *(void *)(a1 + 32) = v28;
        }
        --*(void *)(a1 + 56);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v10);
        uint64_t v31 = (std::__shared_weak_count *)v10[6];
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v10, 56);
        goto LABEL_4;
      }
LABEL_18:
      uint64_t v27 = (uint64_t *)v10[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (uint64_t *)v10[2];
          _ZF = *v28 == (void)v10;
          uint64_t v10 = v28;
        }
        while (!_ZF);
      }
LABEL_4:
      uint64_t v10 = v28;
    }
    while (v28 != v476);
  }
  uint64_t v32 = *(void *)a1;
  if (v8 >= 0x17) {
    uint64_t v33 = 23;
  }
  else {
    uint64_t v33 = v8;
  }
  int v34 = atomic_load((unsigned __int8 *)(v32 + 224 + v33));
  if (v34 == 254)
  {
    if (*(unsigned char *)(v32 + 289)) {
      unsigned int v35 = 24;
    }
    else {
      unsigned int v35 = 5;
    }
    uint64_t v36 = *(unsigned __int8 **)(v32 + 128);
    uint64_t v37 = *(void *)(v32 + 136) - (void)v36;
    if (v37)
    {
      uint64_t v38 = 0;
      unint64_t v39 = v37 / 112;
      if (v39 <= 1) {
        uint64_t v40 = 1;
      }
      else {
        uint64_t v40 = v39;
      }
      int v34 = -1;
      float v41 = 1000.0;
      while (1)
      {
        int v43 = *v36;
        v36 += 112;
        int v42 = v43;
        if (v33 == v43) {
          break;
        }
        int v44 = v33 - v42;
        if (v44 >= 0) {
          unsigned int v45 = v44;
        }
        else {
          unsigned int v45 = -v44;
        }
        if (v45 <= v35)
        {
          float v46 = (float)v44;
          if (v44 < 0) {
            float v46 = (float)v44 * -0.8;
          }
          if (v46 < v41) {
            int v34 = v38;
          }
          float v41 = fminf(v46, v41);
        }
        if (v40 == ++v38) {
          goto LABEL_61;
        }
      }
      int v34 = v38;
    }
    else
    {
      int v34 = -1;
    }
LABEL_61:
    atomic_store(v34, (unsigned __int8 *)(v32 + 224 + v33));
    uint64_t v493 = v8;
    if (v34 < 0) {
      goto LABEL_314;
    }
  }
  else
  {
    int v34 = (char)v34;
    uint64_t v493 = v8;
    if ((char)v34 < 0) {
      goto LABEL_314;
    }
  }
  uint64_t v47 = *(void *)(v32 + 128);
  if (v47)
  {
    BOOL v479 = *(double *)(a3 + 40) > 0.0 && *(unsigned char *)(a3 + 86) != 0;
    unsigned int v48 = v34;
    double v49 = *(double *)a3;
    v503 = 0;
    uint64_t v504 = 0;
    uint64_t v505 = 0;
    {
      operator new();
    }
    uint64_t v506 = mdm::Allocator::instance(void)::alloc;
    v499 = 0;
    v500 = 0;
    uint64_t v501 = 0;
    {
      operator new();
    }
    uint64_t v502 = mdm::Allocator::instance(void)::alloc;
    uint64_t v478 = *(unsigned __int8 *)(a1 + 24);
    __p = 0;
    v497 = 0;
    uint64_t v498 = 0;
    uint64_t v50 = v47 + 112 * v48;
    v460 = *(void ***)(v50 + 88);
    BOOL v51 = v479;
    if (*(void ***)(v50 + 80) == v460) {
      goto LABEL_303;
    }
    v480 = (double *)(a3 + 24);
    v462 = *(void ***)(v50 + 80);
    v464 = (double *)(a3 + 32);
    double v52 = 2.0;
    int64x2_t v469 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v471 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    double v486 = 1.0 / v49;
    int v481 = a5;
    while (1)
    {
      uint64_t v53 = (uint64_t)v503;
      for (uint64_t i = v504; i != v53; i -= 216)
      {
        uint64_t v55 = *(std::__shared_weak_count **)(i - 200);
        if (v55)
        {
          if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      uint64_t v504 = v53;
      v500 = v499;
      md::LineLabelPlacer::populateBlocks((uint64_t *)a1, v8, *v462, (uint64_t *)&v503, &v499);
      double v56 = *((double *)*v462 + 14);
      v497 = __p;
      unint64_t v58 = v503;
      unint64_t v57 = (int *)v504;
      v482 = (int *)v504;
      if (v503 != (int *)v504) {
        break;
      }
LABEL_70:
      ++v462;
      uint64_t v8 = v493;
      if (v462 == v460)
      {
        if (__p)
        {
          v497 = __p;
          operator delete(__p);
        }
LABEL_303:
        if (v499)
        {
          v500 = v499;
          (*(void (**)(uint64_t, __n128 *, uint64_t))(*(void *)v502 + 40))(v502, v499, v501 - (void)v499);
        }
        uint64_t v151 = (uint64_t)v503;
        if (v503)
        {
          uint64_t v152 = v504;
          uint64_t v153 = (uint64_t)v503;
          if ((int *)v504 != v503)
          {
            do
            {
              char v154 = *(std::__shared_weak_count **)(v152 - 200);
              if (v154 && !atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v154->__on_zero_shared)(v154, v153);
                std::__shared_weak_count::__release_weak(v154);
              }
              v152 -= 216;
            }
            while (v152 != v151);
            uint64_t v153 = (uint64_t)v503;
          }
          uint64_t v504 = v151;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v506 + 40))(v506, v153, v505 - v153);
        }
        goto LABEL_314;
      }
    }
    while (1)
    {
      if (*((double *)v58 + 23) - *((double *)v58 + 22) + fmin(*((double *)v58 + 25), *((double *)v58 + 24)) * v52 < *(double *)(a3 + 64)) {
        goto LABEL_80;
      }
      if (a5)
      {
        int64x2_t v510 = v471;
        v511[0] = v469;
        uint64_t v59 = *((void *)v58 + 1);
        if (!v59 || v58[12] != *(_DWORD *)(v59 + 252) || !*((void *)v58 + 4) || *((__int16 *)v58 + 21) < 0)
        {
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v58 + 2), *((unsigned __int8 *)v58 + 172), *(double *)v469.i64);
          uint64_t v59 = *((void *)v58 + 1);
        }
        uint64_t v60 = *((void *)v58 + 2);
        *(void *)v524 = v59;
        *(void *)&v524[2] = v60;
        if (v60) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)v525 = *(_OWORD *)(v58 + 6);
        *(void *)&v525[16] = *((void *)v58 + 5);
        *(_DWORD *)&v525[24] = v58[12];
        md::LabelLinePosition::offsetDistance((md::LabelLinePosition *)v524, (double *)v510.i64, *((double *)v58 + 23) - *((double *)v58 + 22));
        BOOL v61 = *(std::__shared_weak_count **)&v524[2];
        if (*(void *)&v524[2]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v524[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
        v509[0] = v510;
        v509[1] = v511[0];
        if (((*(uint64_t (**)(void, _OWORD *))(**(void **)(*(void *)(a4 + 168) + 64) + 64))(*(void *)(*(void *)(a4 + 168) + 64), v509) & 1) == 0)goto LABEL_80; {
      }
        }
      if (*(unsigned char *)(a1 + 24)) {
        double v56 = (v499[*v58].n128_f64[1] + v499[*v58].n128_f64[0]) * 0.5;
      }
      double v62 = *((double *)v58 + 22);
      double v63 = *((double *)v58 + 23);
      int v64 = (int)((v62 - v56) * v486);
      BOOL v65 = v62 > v56 || v63 < v56;
      double v66 = (v63 - v56) * v486;
      _ZF = v65 && v64 == (int)v66;
      if (_ZF) {
        goto LABEL_80;
      }
      BOOL v68 = v51 && *(unsigned char *)(a3 + 88) && *(unsigned char *)(a3 + 84) != 0;
      uint64_t v70 = v58 + 2;
      uint64_t v69 = *((void *)v58 + 1);
      if (!v69
        || (int v71 = v58[12], v71 != *(_DWORD *)(v69 + 252))
        || (unint64_t v72 = (uint64_t *)*((void *)v58 + 4)) == 0
        || *((__int16 *)v58 + 21) < 0)
      {
        md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v58 + 2), *((unsigned __int8 *)v58 + 172), v66);
        uint64_t v69 = *(void *)v70;
        if (!*(void *)v70)
        {
          BOOL v74 = 0;
LABEL_124:
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v58 + 2), *((unsigned __int8 *)v58 + 172), v66);
          uint64_t v69 = *(void *)v70;
          goto LABEL_125;
        }
        int v71 = v58[12];
        if (v71 != *(_DWORD *)(v69 + 252)) {
          goto LABEL_118;
        }
        unint64_t v72 = (uint64_t *)*((void *)v58 + 4);
        if (!v72 || *((__int16 *)v58 + 21) < 0) {
          goto LABEL_118;
        }
      }
      uint64_t v73 = *v72;
      if (v73 && *(unsigned __int8 *)(v73 + 38) != 255) {
        BOOL v74 = *(unsigned char *)(a3 + 84) != 0;
      }
      else {
LABEL_118:
      }
        BOOL v74 = 0;
      if (v71 != *(_DWORD *)(v69 + 252) || !*((void *)v58 + 4) || *((__int16 *)v58 + 21) < 0) {
        goto LABEL_124;
      }
LABEL_125:
      int v75 = *(unsigned __int8 *)(v69 + 120);
      int v76 = v58[12];
      int v77 = *(_DWORD *)(v69 + 252);
      if (*(unsigned char *)(v69 + 120) || v76 != v77)
      {
        BOOL v80 = 0;
        if (v76 != v77 || !*((void *)v58 + 4)) {
          goto LABEL_151;
        }
      }
      else
      {
        uint64_t v78 = (uint64_t *)*((void *)v58 + 4);
        if (v78
          && (*((__int16 *)v58 + 21) & 0x80000000) == 0
          && (uint64_t v79 = *v78) != 0
          && !*(unsigned char *)(v79 + 32)
          && (uint64_t v85 = *(void *)(v79 + 16)) != 0
          && *(unsigned char *)(v85 + 150))
        {
          BOOL v80 = *(unsigned char *)(a3 + 85) != 0;
          if (!*((void *)v58 + 4)) {
            goto LABEL_151;
          }
        }
        else
        {
          BOOL v80 = 0;
          if (!*((void *)v58 + 4)) {
            goto LABEL_151;
          }
        }
      }
      if ((*((__int16 *)v58 + 21) & 0x80000000) == 0)
      {
        if (v75 == 7) {
          goto LABEL_152;
        }
        goto LABEL_137;
      }
LABEL_151:
      md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v58 + 2), *((unsigned __int8 *)v58 + 172), v66);
      uint64_t v69 = *(void *)v70;
      int v75 = *(unsigned __int8 *)(*(void *)v70 + 120);
      if (v75 == 7)
      {
LABEL_152:
        if (v58[12] != *(_DWORD *)(v69 + 252)) {
          goto LABEL_163;
        }
        unint64_t v86 = (uint64_t *)*((void *)v58 + 4);
        if (!v86) {
          goto LABEL_163;
        }
        if (*((__int16 *)v58 + 21) < 0) {
          goto LABEL_163;
        }
        uint64_t v87 = *v86;
        if (!v87) {
          goto LABEL_163;
        }
        if (*(unsigned char *)(v87 + 32) != 1) {
          goto LABEL_163;
        }
        uint64_t v88 = *(uint64_t **)(v87 + 24);
        if (!v88) {
          goto LABEL_163;
        }
        uint64_t v89 = *v88;
        if (!v89) {
          goto LABEL_163;
        }
        unsigned int v84 = *(unsigned __int8 *)(v89 + 304);
        goto LABEL_160;
      }
LABEL_137:
      if (v75) {
        goto LABEL_163;
      }
      if (v58[12] != *(_DWORD *)(v69 + 252)) {
        goto LABEL_163;
      }
      uint64_t v81 = (uint64_t *)*((void *)v58 + 4);
      if (!v81) {
        goto LABEL_163;
      }
      if (*((__int16 *)v58 + 21) < 0) {
        goto LABEL_163;
      }
      uint64_t v82 = *v81;
      if (!v82) {
        goto LABEL_163;
      }
      if (*(unsigned char *)(v82 + 32)) {
        goto LABEL_163;
      }
      uint64_t v83 = *(void *)(v82 + 16);
      if (!v83) {
        goto LABEL_163;
      }
      unsigned int v84 = *(unsigned __int8 *)(v83 + 153);
      if (!v84) {
        goto LABEL_164;
      }
      if (v84 != 1 && v84 != 2)
      {
LABEL_163:
        unsigned int v84 = 4;
LABEL_164:
        int v90 = *(unsigned __int8 *)(a1 + 72);
        BOOL v91 = v90 == 7;
        goto LABEL_165;
      }
LABEL_160:
      int v90 = *(unsigned __int8 *)(a1 + 72);
      BOOL v91 = v90 == 7;
      if (v90 != 7 && v84 - 3 > 0xFFFFFFFD)
      {
        BOOL v92 = 0;
        uint64_t v93 = 4 * *(unsigned __int8 *)(a3 + 87);
        goto LABEL_171;
      }
LABEL_165:
      BOOL v92 = 0;
      if (v91 && v84 <= 1)
      {
        BOOL v92 = *(unsigned char *)(a3 + 87) != 0;
        if (*(unsigned char *)(a3 + 87)) {
          uint64_t v93 = 5;
        }
        else {
          uint64_t v93 = 0;
        }
      }
      else
      {
        uint64_t v93 = 0;
      }
LABEL_171:
      if (v68) {
        uint64_t v94 = 2;
      }
      else {
        uint64_t v94 = 3;
      }
      if (v51 || v68) {
        goto LABEL_184;
      }
      if (v74 && v80)
      {
        uint64_t v94 = 7;
LABEL_184:
        v539[0] = &unk_1EF51DCC0;
        v539[1] = &__p;
        v539[2] = v478;
        v540 = v539;
        double v96 = *(double *)(a3 + 48);
        double v97 = 0.0;
        float v98 = *(float *)(a3 + 76);
        unint64_t v99 = (double *)(a3 + 8);
        double v100 = v96;
        switch((char)v94)
        {
          case 1:
            uint64_t v101 = (double *)(a3 + 24);
            goto LABEL_192;
          case 2:
            double v102 = *(double *)(a3 + 24);
            double v103 = *(double *)(a3 + 40);
            goto LABEL_194;
          case 3:
            double v100 = *(double *)(a3 + 40);
            unint64_t v99 = (double *)(a3 + 16);
            goto LABEL_196;
          case 4:
          case 5:
            goto LABEL_196;
          case 6:
            uint64_t v101 = (double *)(a3 + 32);
LABEL_192:
            double v100 = *v101;
            goto LABEL_195;
          case 7:
            double v102 = *v480;
            double v103 = *v464;
LABEL_194:
            double v100 = v103 + v102;
            goto LABEL_195;
          case 8:
            double v100 = *v480 + v96;
LABEL_195:
            unint64_t v99 = (double *)a3;
LABEL_196:
            double v97 = *v99;
            break;
          default:
            break;
        }
        uint64_t v104 = (double *)(a3 + 8);
        double v105 = *(double *)(a3 + 48);
        switch((char)v94)
        {
          case 1:
            unint64_t v106 = (double *)(a3 + 24);
            goto LABEL_203;
          case 2:
            double v107 = *(double *)(a3 + 24);
            double v108 = *(double *)(a3 + 40);
            goto LABEL_205;
          case 3:
            double v105 = *(double *)(a3 + 40);
            uint64_t v104 = (double *)(a3 + 16);
            goto LABEL_207;
          case 4:
          case 5:
            goto LABEL_207;
          case 6:
            unint64_t v106 = (double *)(a3 + 32);
LABEL_203:
            double v105 = *v106;
            goto LABEL_206;
          case 7:
            double v107 = *v480;
            double v108 = *v464;
LABEL_205:
            double v105 = v108 + v107;
            goto LABEL_206;
          case 8:
            double v105 = *v480 + v96;
LABEL_206:
            uint64_t v104 = (double *)a3;
LABEL_207:
            double v105 = *v104 + v105;
            break;
          default:
            break;
        }
        double v109 = v98;
        BOOL v65 = v98 < 0.0;
        BOOL v110 = v98 >= 0.0;
        double v111 = 80.0;
        if (!v65) {
          double v111 = v109;
        }
        if (v493 < 0xE) {
          BOOL v110 = 1;
        }
        double v112 = v111;
        if (!v110)
        {
          double v112 = 10.0;
          if (*(unsigned char *)(*(void *)a1 + 122) == 2) {
            double v112 = 8.0;
          }
        }
        double v113 = *((double *)v58 + 23) - *((double *)v58 + 22);
        double v114 = v113 + fmin(*((double *)v58 + 25), *((double *)v58 + 24)) * 2.0;
        int v115 = v93 != 0;
        BOOL v116 = v100 > v114;
        if (!(_BYTE)v93 || v94 == v93 || v100 <= v114)
        {
          if (v94 == 7 && v100 > v114)
          {
            uint64_t v93 = 6;
            uint64_t v118 = (double *)(a3 + 32);
            goto LABEL_224;
          }
        }
        else
        {
          if (v93 - 4 < 2)
          {
            uint64_t v117 = (double *)(a3 + 8);
            double v100 = *(double *)(a3 + 48);
            goto LABEL_225;
          }
          double v100 = 0.0;
          uint64_t v118 = (double *)(a3 + 24);
          double v97 = 0.0;
          if (v93 == 1)
          {
LABEL_224:
            double v100 = *v118;
            uint64_t v117 = (double *)a3;
LABEL_225:
            double v97 = *v117;
          }
          uint64_t v119 = (double *)(a3 + 8);
          double v120 = *(double *)(a3 + 48);
          switch((char)v93)
          {
            case 1:
              uint64_t v121 = (double *)(a3 + 24);
              goto LABEL_230;
            case 2:
              double v120 = *(double *)(a3 + 40) + *(double *)(a3 + 24);
              goto LABEL_231;
            case 3:
              double v120 = *(double *)(a3 + 40);
              uint64_t v119 = (double *)(a3 + 16);
              goto LABEL_235;
            case 4:
            case 5:
              goto LABEL_235;
            case 6:
              uint64_t v121 = (double *)(a3 + 32);
LABEL_230:
              double v120 = *v121;
LABEL_231:
              uint64_t v119 = (double *)a3;
LABEL_235:
              double v105 = *v119 + v120;
              if (!v110) {
                goto LABEL_236;
              }
              goto LABEL_238;
            default:
              double v105 = 0.0;
              if (v110) {
                goto LABEL_238;
              }
LABEL_236:
              double v111 = 10.0;
              if (*(unsigned char *)(*(void *)a1 + 122) == 2) {
                double v111 = 8.0;
              }
LABEL_238:
              int v115 = 0;
              BOOL v116 = v100 > v114;
              double v112 = v111;
              uint64_t v94 = v93;
              LOBYTE(v93) = 0;
              break;
          }
        }
        *(double *)&v490 = v56;
        float v122 = *((float *)v58 + 52);
        double v123 = fmax(v97 + v100, v105);
        double v124 = v123 * 0.800000012 * (v123 * 0.800000012);
        double v125 = v112 * 0.0000000249532021;
        if (*(unsigned char *)(*(void *)a1 + 290)) {
          double v125 = v112;
        }
        double v488 = v125;
        unsigned int v126 = (v113 / v123);
        int v127 = 1 << (__clz(v126) ^ 0x1F);
        if (v126) {
          unsigned int v128 = v127;
        }
        else {
          unsigned int v128 = 0;
        }
        if (v128 > 2) {
          goto LABEL_260;
        }
        if (!v116)
        {
          *(_OWORD *)v524 = 0u;
          *(_OWORD *)v525 = 0u;
          *(void *)&v525[20] = 0;
          *(_DWORD *)&v525[16] = -1;
          int v526 = 0;
          long long v527 = 0u;
          long long v528 = 0u;
          uint64_t v529 = 0;
          *(_DWORD *)v530 = 2139095039;
          *(_WORD *)&v530[4] = 0;
          v530[6] = 0;
          long long v531 = 0u;
          long long v532 = 0u;
          uint64_t v533 = 0;
          *(_DWORD *)v534 = 2139095039;
          *(_WORD *)&v534[4] = 0;
          v534[6] = 0;
          int v536 = 0;
          uint64_t v535 = 0;
          int v537 = 255;
          if (!md::LabelLineResolvedPosition::positionAtDistance((md::LabelLineResolvedPosition *)(v58 + 2), (md::LabelLineResolvedPosition *)v524, v113 * 0.5))goto LABEL_256; {
          *(double *)v510.i64 = v123 * 0.800000012 * (v123 * 0.800000012);
          }
          if (!v540) {
            goto LABEL_633;
          }
          if ((*(uint64_t (**)(void *, int *, int64x2_t *))(*v540 + 48))(v540, v524, &v510)) {
            goto LABEL_256;
          }
          __n128 v129 = md::LineLabelPlacer::addPositionIfValid((uint64_t)&v510, a1, (uint64_t **)v524, 1, v94, v493, 0, v96, v114, v122);
          int64x2_t v130 = v510;
          if (v510.i64[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v510.i64[1] + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v131 = *(std::__shared_weak_count **)&v524[2];
          *(int64x2_t *)v524 = v130;
          if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, __n128))v131->__on_zero_shared)(v131, v129);
            std::__shared_weak_count::__release_weak(v131);
          }
          *(int64x2_t *)v525 = v511[0];
          *(int64x2_t *)&v525[12] = *(int64x2_t *)((char *)v511 + 12);
          int v526 = v512;
          long long v527 = v513;
          long long v528 = v514;
          *(_DWORD *)v530 = v516[0];
          *(_DWORD *)&v530[3] = *(_DWORD *)((char *)v516 + 3);
          long long v531 = v517;
          long long v532 = v518;
          uint64_t v529 = v515;
          uint64_t v533 = v519;
          *(_DWORD *)&v534[3] = *(_DWORD *)((char *)v520 + 3);
          *(_DWORD *)v534 = v520[0];
          uint64_t v535 = v521;
          int v536 = v522;
          int v537 = v523;
          uint64_t v132 = (std::__shared_weak_count *)v510.i64[1];
          if (!v510.i64[1]) {
            goto LABEL_256;
          }
          if (!atomic_fetch_add((atomic_ullong *volatile)(v510.i64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
            long long v133 = *(std::__shared_weak_count **)&v524[2];
            if (*(void *)&v524[2]) {
              goto LABEL_257;
            }
          }
          else
          {
LABEL_256:
            long long v133 = *(std::__shared_weak_count **)&v524[2];
            if (*(void *)&v524[2])
            {
LABEL_257:
              if (!atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
            }
          }
          int v90 = *(unsigned __int8 *)(a1 + 72);
LABEL_260:
          if (((v126 == 0) & ~v115) == 0 && !v90)
          {
            unsigned __int8 v134 = v94;
            if (v115)
            {
              double v123 = v100 * 0.5 + *(double *)(a3 + 48) * 2.0;
              unsigned __int8 v134 = v93;
            }
            if (v113 * 0.5 > v123 + v488)
            {
              *(_OWORD *)v524 = 0u;
              *(_OWORD *)v525 = 0u;
              *(void *)&v525[20] = 0;
              *(_DWORD *)&v525[16] = -1;
              int v526 = 0;
              long long v527 = 0u;
              long long v528 = 0u;
              uint64_t v529 = 0;
              *(_DWORD *)v530 = 2139095039;
              *(_WORD *)&v530[4] = 0;
              v530[6] = 0;
              long long v531 = 0u;
              long long v532 = 0u;
              uint64_t v533 = 0;
              *(_DWORD *)v534 = 2139095039;
              *(_WORD *)&v534[4] = 0;
              v534[6] = 0;
              int v536 = 0;
              uint64_t v535 = 0;
              int v537 = 255;
              if (md::LabelLineResolvedPosition::positionAtDistance((md::LabelLineResolvedPosition *)(v58 + 2), (md::LabelLineResolvedPosition *)v524, v488))
              {
                *(double *)v510.i64 = v124;
                if (!v540) {
                  goto LABEL_633;
                }
                if (((*(uint64_t (**)(void *, int *, int64x2_t *))(*v540 + 48))(v540, v524, &v510) & 1) == 0)
                {
                  __n128 v135 = md::LineLabelPlacer::addPositionIfValid((uint64_t)&v510, a1, (uint64_t **)v524, 0, v134, v493, 1, v96, v114, v122);
                  uint64_t v136 = (std::__shared_weak_count *)v510.i64[1];
                  if (v510.i64[1])
                  {
                    if (!atomic_fetch_add((atomic_ullong *volatile)(v510.i64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v136->__on_zero_shared)(v136, v135);
                      std::__shared_weak_count::__release_weak(v136);
                    }
                  }
                }
              }
              if (md::LabelLineResolvedPosition::positionAtDistance((md::LabelLineResolvedPosition *)(v58 + 2), (md::LabelLineResolvedPosition *)v524, v113 - v488))
              {
                *(double *)v509 = v124;
                if (!v540)
                {
LABEL_633:
                  std::__throw_bad_function_call[abi:nn180100]();
                  __break(1u);
                  return;
                }
                if (((*(uint64_t (**)(void *, int *, _OWORD *))(*v540 + 48))(v540, v524, v509) & 1) == 0)
                {
                  __n128 v137 = md::LineLabelPlacer::addPositionIfValid((uint64_t)v509, a1, (uint64_t **)v524, 2, v134, v493, 2, v96, v114, v122);
                  uint64_t v138 = (std::__shared_weak_count *)*((void *)&v509[0] + 1);
                  if (*((void *)&v509[0] + 1))
                  {
                    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v509[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v138->__on_zero_shared)(v138, v137);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                }
              }
              uint64_t v139 = *(std::__shared_weak_count **)&v524[2];
              if (*(void *)&v524[2]
                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v524[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
          }
          if (v128 >= 3)
          {
            *(_OWORD *)v524 = 0u;
            *(_OWORD *)v525 = 0u;
            *(void *)&v525[20] = 0;
            *(_DWORD *)&v525[16] = -1;
            int v526 = 0;
            long long v527 = 0u;
            long long v528 = 0u;
            uint64_t v529 = 0;
            *(_DWORD *)v530 = 2139095039;
            *(_WORD *)&v530[4] = 0;
            v530[6] = 0;
            long long v531 = 0u;
            long long v532 = 0u;
            uint64_t v533 = 0;
            *(_DWORD *)v534 = 2139095039;
            *(_WORD *)&v534[4] = 0;
            v534[6] = 0;
            int v536 = 0;
            uint64_t v535 = 0;
            int v537 = 255;
            unsigned int v140 = __clz(__rbit32(v128));
            unsigned int v141 = 1;
            uint64_t v142 = v94;
            do
            {
              int v144 = md::LabelLineResolvedPosition::positionAtDistance((md::LabelLineResolvedPosition *)(v58 + 2), (md::LabelLineResolvedPosition *)v524, v113 * (double)v141 * (1.0 / (double)v128));
              uint64_t v143 = v94;
              if (v144)
              {
                double v538 = v124;
                if (!v540) {
                  goto LABEL_633;
                }
                if ((*(uint64_t (**)(void *, int *, double *))(*v540 + 48))(v540, v524, &v538))
                {
                  uint64_t v143 = v142;
                }
                else
                {
                  unsigned int v145 = v140 + ~__clz(__rbit32(v141));
                  _ZF = v145 == 0;
                  int v146 = v145 + 3;
                  if (_ZF) {
                    int v147 = 0;
                  }
                  else {
                    int v147 = v146;
                  }
                  __n128 v148 = md::LineLabelPlacer::addPositionIfValid((uint64_t)v507, a1, (uint64_t **)v524, 1, v142, v493, v147, v96, v114, v122);
                  uint64_t v149 = v508;
                  uint64_t v143 = v94;
                  if (v508)
                  {
                    uint64_t v143 = v94;
                    if (!atomic_fetch_add(&v508->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *, uint64_t, __n128))v149->__on_zero_shared)(v149, v94, v148);
                      std::__shared_weak_count::__release_weak(v149);
                      uint64_t v143 = v94;
                    }
                  }
                }
              }
              ++v141;
              uint64_t v142 = v143;
            }
            while (v128 != v141);
            uint64_t v150 = *(std::__shared_weak_count **)&v524[2];
            if (*(void *)&v524[2]
              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v524[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
        }
        if (v540 == v539)
        {
          (*(void (**)(void *))(v539[0] + 32))(v539);
          a5 = v481;
          BOOL v51 = v479;
          double v52 = 2.0;
          unint64_t v57 = v482;
          double v56 = *(double *)&v490;
        }
        else
        {
          a5 = v481;
          BOOL v51 = v479;
          double v52 = 2.0;
          unint64_t v57 = v482;
          double v56 = *(double *)&v490;
          if (v540) {
            (*(void (**)(void))(*v540 + 40))();
          }
        }
        goto LABEL_80;
      }
      if (v74 && v92) {
        unsigned int v95 = 8;
      }
      else {
        unsigned int v95 = 1;
      }
      if (v74) {
        uint64_t v94 = v95;
      }
      else {
        uint64_t v94 = 6;
      }
      if (v74 || v80) {
        goto LABEL_184;
      }
      uint64_t v94 = v93;
      if ((_BYTE)v93) {
        goto LABEL_184;
      }
      a5 = v481;
      unint64_t v57 = v482;
LABEL_80:
      v58 += 54;
      if (v58 == v57) {
        goto LABEL_70;
      }
    }
  }
LABEL_314:
  int v155 = *(unsigned __int8 *)(*(void *)a1 + 290);
  BOOL v156 = *(uint64_t **)(a1 + 32);
  int v470 = v155;
  if (v156 == v476)
  {
    int v197 = 1;
    unint64_t v494 = 0;
    int v157 = 0;
    long long v191 = 0;
    uint64_t v196 = 0;
    size_t v192 = 0;
    v468 = 0;
    v487 = 0;
    goto LABEL_380;
  }
  int v157 = 0;
  v472 = 0;
  v491 = 0;
  uint64_t v158 = 1 << v8;
  int v159 = ~(1 << v8);
  do
  {
    uint64_t v160 = v156[5];
    uint64_t v161 = *(unsigned int *)(v160 + 12);
    if ((v158 & v161) == 0)
    {
LABEL_330:
      uint64_t v164 = (uint64_t *)v156[1];
      if (v164) {
        goto LABEL_331;
      }
      goto LABEL_369;
    }
    if (*(unsigned char *)(v160 + 11) == 1)
    {
      int v162 = *(unsigned __int8 *)(v160 + 9);
      if (v162 != 8 && v162 != 4)
      {
        *(unsigned char *)(v160 + 10) = 0;
        if (v472 < (char *)v491)
        {
          *(void *)v472 = v160;
          v472 += 8;
          uint64_t v164 = (uint64_t *)v156[1];
          if (v164) {
            goto LABEL_331;
          }
          goto LABEL_369;
        }
        int64_t v170 = v472 - v157;
        uint64_t v171 = v157;
        uint64_t v172 = (v472 - v157) >> 3;
        unint64_t v173 = v172 + 1;
        if ((unint64_t)(v172 + 1) >> 61) {
          abort();
        }
        v474 = v171;
        unint64_t v174 = v491 - (md::LabelPoint *)v171;
        unint64_t v175 = (v491 - (md::LabelPoint *)v171) >> 2;
        if (v175 > v173) {
          unint64_t v173 = v175;
        }
        if (v174 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v176 = v173;
        }
        if (v176)
        {
          if (v176 >> 61) {
LABEL_635:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          unint64_t v177 = v176;
          uint64_t v178 = operator new(8 * v176);
          unint64_t v176 = v177;
        }
        else
        {
          uint64_t v178 = 0;
        }
        uint64_t v179 = (uint64_t *)&v178[8 * v172];
        uint64_t *v179 = v160;
        uint64_t v180 = (char *)(v179 + 1);
        uint64_t v181 = v474;
        if (v472 != v474)
        {
          unint64_t v182 = v472 - 8 - v474;
          if (v182 < 0x168)
          {
            uint64_t v183 = v472;
LABEL_364:
            uint64_t v181 = v474;
            do
            {
LABEL_365:
              uint64_t v184 = *((void *)v183 - 1);
              v183 -= 8;
              *--uint64_t v179 = v184;
            }
            while (v183 != v181);
            goto LABEL_366;
          }
          if (&v178[v170 - 8 - (v182 & 0xFFFFFFFFFFFFFFF8)] > &v178[v170 - 8]
            || &v472[-(v182 & 0xFFFFFFFFFFFFFFF8) - 8] > v472 - 8
            || (unint64_t)(v472 - &v178[v170]) < 0x20)
          {
            uint64_t v183 = v472;
            goto LABEL_364;
          }
          uint64_t v186 = (v182 >> 3) + 1;
          uint64_t v183 = &v472[-8 * (v186 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v187 = &v178[8 * v172 - 16];
          uint64_t v188 = v472 - 16;
          uint64_t v189 = v186 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v190 = *(_OWORD *)v188;
            *(v187 - 1) = *((_OWORD *)v188 - 1);
            *uint64_t v187 = v190;
            v187 -= 2;
            v188 -= 32;
            v189 -= 4;
          }
          while (v189);
          v179 -= v186 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v181 = v474;
          if (v186 != (v186 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_365;
          }
        }
LABEL_366:
        v491 = (md::LabelPoint *)&v178[8 * v176];
        if (v181) {
          operator delete(v181);
        }
        v472 = v180;
        int v157 = (char *)v179;
        uint64_t v8 = v493;
        uint64_t v164 = (uint64_t *)v156[1];
        if (v164)
        {
          do
          {
LABEL_331:
            uint64_t v166 = v164;
            uint64_t v164 = (uint64_t *)*v164;
          }
          while (v164);
          goto LABEL_317;
        }
        goto LABEL_369;
      }
      *(unsigned char *)(v160 + 10) = 1;
      *(_DWORD *)(v160 + 16) |= v158;
      uint64_t v164 = (uint64_t *)v156[1];
      if (v164) {
        goto LABEL_331;
      }
      do
      {
LABEL_369:
        uint64_t v185 = v156;
        BOOL v156 = (uint64_t *)v156[2];
      }
      while ((uint64_t *)*v156 != v185);
      uint64_t v166 = v156;
      goto LABEL_317;
    }
    int v165 = v161 & v159;
    *(_DWORD *)(v160 + 12) = v165;
    if (*(_DWORD *)(v160 + 24) < (int)v8)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v160 + 176))(v160, v8, 1.0);
      *(_DWORD *)(v160 + 24) = v8;
      uint64_t v160 = v156[5];
      int v165 = *(_DWORD *)(v160 + 12);
    }
    *(_DWORD *)(v160 + 16) &= v159;
    if (v165) {
      goto LABEL_330;
    }
    uint64_t v167 = (uint64_t *)v156[1];
    uint64_t v168 = v156;
    if (v167)
    {
      do
      {
        uint64_t v166 = v167;
        uint64_t v167 = (uint64_t *)*v167;
      }
      while (v167);
    }
    else
    {
      do
      {
        uint64_t v166 = (uint64_t *)v168[2];
        _ZF = *v166 == (void)v168;
        uint64_t v168 = v166;
      }
      while (!_ZF);
    }
    if (*(uint64_t **)(a1 + 32) == v156) {
      *(void *)(a1 + 32) = v166;
    }
    --*(void *)(a1 + 56);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v156);
    unint64_t v169 = (std::__shared_weak_count *)v156[6];
    if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
    (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v156, 56);
LABEL_317:
    BOOL v156 = v166;
  }
  while (v166 != v476);
  long long v191 = (unint64_t *)v472;
  size_t v192 = v472 - v157;
  uint64_t v193 = (v472 - v157) >> 3;
  unint64_t v494 = v193;
  if (v472 == v157)
  {
    uint64_t v196 = 0;
    v468 = 0;
    v487 = 0;
    int v197 = 1;
    int v157 = v472;
    int v155 = v470;
  }
  else
  {
    int v155 = v470;
    if ((v192 & 0x8000000000000000) != 0) {
      abort();
    }
    uint64_t v194 = (char *)operator new(v472 - v157);
    memcpy(v194, v157, v192);
    unsigned int v195 = (unint64_t *)operator new(v192);
    uint64_t v196 = (int8x16_t *)&v194[8 * v193];
    v487 = (int8x16_t *)&v195[v193];
    v468 = v195;
    memcpy(v195, v157, v192);
    int v197 = 0;
    long long v191 = (unint64_t *)v472;
    size_t v192 = (size_t)v194;
  }
LABEL_380:
  unint64_t v457 = (uint64_t)((uint64_t)v196->i64 - v192) >> 3;
  unint64_t v198 = 126 - 2 * __clz(v457);
  if (v196 == (int8x16_t *)v192) {
    uint64_t v199 = 0;
  }
  else {
    uint64_t v199 = v198;
  }
  v459 = v196;
  if (v155)
  {
    std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(v192, v196, v199, 1);
    unint64_t v200 = 126 - 2 * __clz(((char *)v487 - (char *)v468) >> 3);
    if (v487 == (int8x16_t *)v468) {
      uint64_t v201 = 0;
    }
    else {
      uint64_t v201 = v200;
    }
    std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>((uint64_t)v468, v487, v201, 1);
  }
  else
  {
    std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>((unint64_t *)v192, v196, v199, 1);
    unint64_t v202 = 126 - 2 * __clz(((char *)v487 - (char *)v468) >> 3);
    if (v487 == (int8x16_t *)v468) {
      uint64_t v203 = 0;
    }
    else {
      uint64_t v203 = v202;
    }
    std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(v468, v487, v203, 1);
  }
  unint64_t v204 = 126 - 2 * __clz(v494);
  if (v197) {
    uint64_t v205 = 0;
  }
  else {
    uint64_t v205 = v204;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,false>((unint64_t *)v157, v191, v205, 1);
  BOOL v206 = *(double *)(a3 + 40) > 0.0 && *(unsigned char *)(a3 + 86) != 0;
  _ZF = (!v206 | a6) == 0;
  uint64_t v207 = 16;
  if (!_ZF) {
    uint64_t v207 = 0;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v207 = 56;
  }
  if (v197) {
    goto LABEL_626;
  }
  v483 = 0;
  v485 = 0;
  uint64_t v208 = v487;
  double v461 = *(double *)(a3 + v207);
  double v209 = v461 * v461;
  uint64_t v456 = 1 << v8;
  int v210 = ~(1 << v8);
  float64x2_t v465 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v463 = _Q0;
  v212 = (unint64_t *)v157;
  v475 = v157;
  v473 = v191;
  size_t v458 = v192;
  v213 = (char *)v459;
  int v489 = v210;
  while (2)
  {
    unint64_t v215 = *v212;
    if (*(unsigned char *)(*v212 + 10)) {
      goto LABEL_407;
    }
    v477 = v212;
    v216 = (char *)v468;
    uint64_t v217 = (*(uint64_t (**)(unint64_t))(*(void *)v215 + 56))(v215);
    uint64_t v218 = v217;
    memset(v524, 0, sizeof(v524));
    *(void *)v525 = 0;
    v219 = v485;
    v492 = (md::LabelPoint *)v217;
    unint64_t v495 = v215;
    if (!v155)
    {
      uint8x8_t v249 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v217);
      v250 = v249;
      if (v213 == (char *)v192)
      {
        unint64_t v260 = v213;
        if (v208 != (int8x16_t *)v468)
        {
LABEL_523:
          double v381 = v250[1];
          double v382 = v381 - v461;
          double v383 = v381 + v461;
          unint64_t v384 = ((char *)v487 - (char *)v468) >> 3;
          v385 = (char *)v208;
          size_t v270 = (char *)v468;
          while (1)
          {
            while (1)
            {
              unint64_t v386 = v384 >> 1;
              uint64_t v387 = &v270[8 * (v384 >> 1)];
              uint64_t v388 = (md::LabelPoint *)(*(uint64_t (**)(void))(**(void **)v387 + 56))();
              if (*(double *)(md::LabelPoint::mercatorPoint(v388) + 8) >= v382) {
                break;
              }
              size_t v270 = v387 + 8;
              v384 += ~v386;
              if (!v384) {
                goto LABEL_528;
              }
            }
            v389 = (md::LabelPoint *)(*(uint64_t (**)(void))(**(void **)v387 + 56))();
            if (*(double *)(md::LabelPoint::mercatorPoint(v389) + 8) <= v383) {
              break;
            }
            v385 = &v270[8 * (v384 >> 1)];
            v384 >>= 1;
            if (!v386)
            {
LABEL_528:
              v216 = v270;
              int v155 = v470;
              v219 = v485;
              double v209 = v461 * v461;
              goto LABEL_557;
            }
          }
          if (v384 >= 2)
          {
            do
            {
              v415 = &v270[8 * (v386 >> 1)];
              uint64_t v416 = (*(uint64_t (**)(void))(**(void **)v415 + 56))();
              uint64_t v417 = v416;
              if (*(unsigned char *)(v416 + 45)) {
                BOOL v418 = 1;
              }
              else {
                BOOL v418 = *(unsigned char *)(v416 + 46) == 0;
              }
              if (v418)
              {
                double v414 = *(double *)(v416 + 32);
              }
              else
              {
                long double v405 = *(double *)v416;
                long double v406 = *(double *)(v416 + 8);
                long double v407 = *(double *)(v416 + 16);
                double v408 = sqrt(v405 * v405 + v406 * v406);
                double v409 = atan2(v407, v408 * 0.996647189);
                double v410 = atan2(v406, v405);
                __double2 v411 = __sincos_stret(v409);
                long double v412 = atan2(v407 + v411.__sinval * v411.__sinval * 42841.3115 * v411.__sinval, v408 + v411.__cosval * v411.__cosval * -42697.6727 * v411.__cosval);
                long double v413 = tan(v412 * 0.5 + 0.785398163);
                double v414 = log(v413) * 0.159154943 + 0.5;
                *(double *)(v417 + 24) = v410 * 0.159154943 + 0.5;
                *(double *)(v417 + 32) = v414;
                *(unsigned char *)(v417 + 45) = 1;
              }
              if (v414 >= v382) {
                v386 >>= 1;
              }
              else {
                v386 += ~(v386 >> 1);
              }
              if (v414 < v382) {
                size_t v270 = v415 + 8;
              }
            }
            while (v386);
          }
          v216 = v387 + 8;
          if (v385 == v387 + 8)
          {
            int v155 = v470;
            v219 = v485;
            double v209 = v461 * v461;
          }
          else
          {
            unint64_t v390 = (v385 - (v387 + 8)) >> 3;
            v219 = v485;
            double v209 = v461 * v461;
            do
            {
              v401 = &v216[8 * (v390 >> 1)];
              uint64_t v402 = (*(uint64_t (**)(void))(**(void **)v401 + 56))();
              uint64_t v403 = v402;
              if (*(unsigned char *)(v402 + 45)) {
                BOOL v404 = 1;
              }
              else {
                BOOL v404 = *(unsigned char *)(v402 + 46) == 0;
              }
              if (v404)
              {
                double v400 = *(double *)(v402 + 32);
              }
              else
              {
                long double v391 = *(double *)v402;
                long double v392 = *(double *)(v402 + 8);
                long double v393 = *(double *)(v402 + 16);
                double v394 = sqrt(v391 * v391 + v392 * v392);
                double v395 = atan2(v393, v394 * 0.996647189);
                double v396 = atan2(v392, v391);
                __double2 v397 = __sincos_stret(v395);
                long double v398 = atan2(v393 + v397.__sinval * v397.__sinval * 42841.3115 * v397.__sinval, v394 + v397.__cosval * v397.__cosval * -42697.6727 * v397.__cosval);
                long double v399 = tan(v398 * 0.5 + 0.785398163);
                double v400 = log(v399) * 0.159154943 + 0.5;
                *(double *)(v403 + 24) = v396 * 0.159154943 + 0.5;
                *(double *)(v403 + 32) = v400;
                *(unsigned char *)(v403 + 45) = 1;
              }
              if (v400 > v383)
              {
                v390 >>= 1;
              }
              else
              {
                v216 = v401 + 8;
                v390 += ~(v390 >> 1);
              }
            }
            while (v390);
            int v155 = v470;
          }
          int v210 = v489;
LABEL_557:
          unint64_t v215 = v495;
LABEL_558:
          std::vector<md::RoadPosition *>::__assign_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(v524, v213, v260, (v260 - v213) >> 3);
          std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>((unint64_t *)v524, *(uint64_t *)&v524[2], v270, v216, (v216 - v270) >> 3);
          goto LABEL_559;
        }
      }
      else
      {
        double v251 = *v249 - v461;
        double v252 = *v249 + v461;
        unint64_t v253 = v457;
        v254 = v213;
        v213 = (char *)v192;
        while (1)
        {
          while (1)
          {
            unint64_t v255 = v253 >> 1;
            float v256 = &v213[8 * (v253 >> 1)];
            float v257 = (md::LabelPoint *)(*(uint64_t (**)(void))(**(void **)v256 + 56))();
            double v258 = *(double *)md::LabelPoint::mercatorPoint(v257);
            if (v258 >= v251) {
              break;
            }
            v213 = v256 + 8;
            v253 += ~v255;
            if (!v253) {
              goto LABEL_431;
            }
          }
          unint64_t v259 = (md::LabelPoint *)(*(uint64_t (**)(double))(**(void **)v256 + 56))(v258);
          if (*(double *)md::LabelPoint::mercatorPoint(v259) <= v252) {
            break;
          }
          v254 = &v213[8 * (v253 >> 1)];
          v253 >>= 1;
          if (!v255)
          {
LABEL_431:
            unint64_t v260 = v213;
            int v155 = v470;
            v219 = v485;
            double v209 = v461 * v461;
            goto LABEL_522;
          }
        }
        if (v253 >= 2)
        {
          do
          {
            v377 = &v213[8 * (v255 >> 1)];
            uint64_t v378 = (*(uint64_t (**)(void))(**(void **)v377 + 56))();
            uint64_t v379 = v378;
            if (*(unsigned char *)(v378 + 45)) {
              BOOL v380 = 1;
            }
            else {
              BOOL v380 = *(unsigned char *)(v378 + 46) == 0;
            }
            if (v380)
            {
              v376.f64[0] = *(float64_t *)(v378 + 24);
            }
            else
            {
              long double v366 = *(double *)v378;
              long double v367 = *(double *)(v378 + 8);
              long double v368 = *(double *)(v378 + 16);
              double v369 = sqrt(v366 * v366 + v367 * v367);
              double v370 = atan2(v368, v369 * 0.996647189);
              long double v467 = atan2(v367, v366);
              __double2 v371 = __sincos_stret(v370);
              long double v372 = atan2(v368 + v371.__sinval * v371.__sinval * 42841.3115 * v371.__sinval, v369 + v371.__cosval * v371.__cosval * -42697.6727 * v371.__cosval);
              long double v373 = tan(v372 * 0.5 + 0.785398163);
              long double v374 = log(v373);
              v375.f64[0] = v467;
              v375.f64[1] = v374;
              float64x2_t v376 = vmlaq_f64(v463, v465, v375);
              *(float64x2_t *)(v379 + 24) = v376;
              *(unsigned char *)(v379 + 45) = 1;
            }
            if (v376.f64[0] >= v251) {
              v255 >>= 1;
            }
            else {
              v255 += ~(v255 >> 1);
            }
            if (v376.f64[0] < v251) {
              v213 = v377 + 8;
            }
          }
          while (v255);
        }
        unint64_t v260 = v256 + 8;
        if (v254 == v256 + 8)
        {
          int v155 = v470;
          v219 = v485;
          double v209 = v461 * v461;
        }
        else
        {
          unint64_t v350 = (v254 - (v256 + 8)) >> 3;
          v219 = v485;
          double v209 = v461 * v461;
          do
          {
            int v362 = &v260[8 * (v350 >> 1)];
            uint64_t v363 = (*(uint64_t (**)(void))(**(void **)v362 + 56))();
            uint64_t v364 = v363;
            if (*(unsigned char *)(v363 + 45)) {
              BOOL v365 = 1;
            }
            else {
              BOOL v365 = *(unsigned char *)(v363 + 46) == 0;
            }
            if (v365)
            {
              v361.f64[0] = *(float64_t *)(v363 + 24);
            }
            else
            {
              long double v351 = *(double *)v363;
              long double v352 = *(double *)(v363 + 8);
              long double v353 = *(double *)(v363 + 16);
              double v354 = sqrt(v351 * v351 + v352 * v352);
              double v355 = atan2(v353, v354 * 0.996647189);
              long double v466 = atan2(v352, v351);
              __double2 v356 = __sincos_stret(v355);
              long double v357 = atan2(v353 + v356.__sinval * v356.__sinval * 42841.3115 * v356.__sinval, v354 + v356.__cosval * v356.__cosval * -42697.6727 * v356.__cosval);
              long double v358 = tan(v357 * 0.5 + 0.785398163);
              long double v359 = log(v358);
              v360.f64[0] = v466;
              v360.f64[1] = v359;
              float64x2_t v361 = vmlaq_f64(v463, v465, v360);
              *(float64x2_t *)(v364 + 24) = v361;
              *(unsigned char *)(v364 + 45) = 1;
            }
            if (v361.f64[0] > v252)
            {
              v350 >>= 1;
            }
            else
            {
              unint64_t v260 = v362 + 8;
              v350 += ~(v350 >> 1);
            }
          }
          while (v350);
          int v155 = v470;
        }
        int v210 = v489;
LABEL_522:
        unint64_t v215 = v495;
        if (v208 != (int8x16_t *)v468) {
          goto LABEL_523;
        }
      }
      size_t v270 = (char *)v468;
      goto LABEL_558;
    }
    if (*(unsigned char *)(v217 + 44))
    {
      double v220 = *(double *)v217;
      if (v213 != (char *)v192) {
        goto LABEL_412;
      }
LABEL_433:
      size_t v192 = (size_t)v213;
      if (v208 != (int8x16_t *)v468) {
        goto LABEL_458;
      }
LABEL_434:
      v269 = (char *)v468;
      goto LABEL_472;
    }
    long double v261 = *(double *)(v217 + 24) * 6.28318531;
    long double v262 = exp(*(double *)(v217 + 32) * 6.28318531 + -3.14159265);
    double v263 = atan(v262) * 2.0 + -1.57079633;
    long double v264 = fmod(v261, 6.28318531);
    double v265 = fmod(v264 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v266 = __sincos_stret(v263);
    double v267 = 6378137.0 / sqrt(v266.__sinval * v266.__sinval * -0.00669437999 + 1.0);
    __double2 v268 = __sincos_stret(v265);
    double v220 = v267 * v266.__cosval * v268.__cosval;
    *(double *)uint64_t v218 = v220;
    *(double *)(v218 + 8) = v267 * v266.__cosval * v268.__sinval;
    *(double *)(v218 + 16) = v266.__sinval * 0.99330562 * v267;
    *(unsigned char *)(v218 + 44) = 1;
    if (v213 == (char *)v192) {
      goto LABEL_433;
    }
LABEL_412:
    double v221 = v220 - v461;
    double v222 = v220 + v461;
    unint64_t v223 = v457;
    v224 = v213;
    while (2)
    {
      while (2)
      {
        unint64_t v225 = v223 >> 1;
        long long v226 = (char *)(v192 + 8 * (v223 >> 1));
        uint64_t v227 = (*(uint64_t (**)(void))(**(void **)v226 + 56))();
        uint64_t v228 = v227;
        if (*(unsigned char *)(v227 + 44))
        {
          if (*(double *)v227 < v221) {
            goto LABEL_413;
          }
        }
        else
        {
          long double v229 = *(double *)(v227 + 24) * 6.28318531;
          long double v230 = exp(*(double *)(v227 + 32) * 6.28318531 + -3.14159265);
          double v231 = atan(v230) * 2.0 + -1.57079633;
          long double v232 = fmod(v229, 6.28318531);
          double v233 = fmod(v232 + 6.28318531, 6.28318531) + -3.14159265;
          __double2 v234 = __sincos_stret(v231);
          double v235 = 6378137.0 / sqrt(v234.__sinval * v234.__sinval * -0.00669437999 + 1.0);
          __double2 v236 = __sincos_stret(v233);
          double v237 = v235 * v234.__cosval * v236.__cosval;
          *(double *)uint64_t v228 = v237;
          *(double *)(v228 + 8) = v235 * v234.__cosval * v236.__sinval;
          *(double *)(v228 + 16) = v234.__sinval * 0.99330562 * v235;
          *(unsigned char *)(v228 + 44) = 1;
          if (v237 < v221)
          {
LABEL_413:
            size_t v192 = (size_t)(v226 + 8);
            v223 += ~v225;
            if (!v223) {
              goto LABEL_423;
            }
            continue;
          }
        }
        break;
      }
      uint64_t v238 = (*(uint64_t (**)(void))(**(void **)v226 + 56))();
      uint64_t v239 = v238;
      if (*(unsigned char *)(v238 + 44))
      {
        if (*(double *)v238 <= v222) {
          goto LABEL_437;
        }
LABEL_422:
        v224 = (char *)(v192 + 8 * (v223 >> 1));
        v223 >>= 1;
        if (!v225)
        {
LABEL_423:
          v213 = (char *)v192;
LABEL_424:
          int v210 = v489;
          goto LABEL_457;
        }
        continue;
      }
      break;
    }
    long double v240 = *(double *)(v238 + 24) * 6.28318531;
    long double v241 = exp(*(double *)(v238 + 32) * 6.28318531 + -3.14159265);
    double v242 = atan(v241) * 2.0 + -1.57079633;
    long double v243 = fmod(v240, 6.28318531);
    double v244 = fmod(v243 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v245 = __sincos_stret(v242);
    double v246 = 6378137.0 / sqrt(v245.__sinval * v245.__sinval * -0.00669437999 + 1.0);
    __double2 v247 = __sincos_stret(v244);
    double v248 = v246 * v245.__cosval * v247.__cosval;
    *(double *)uint64_t v239 = v248;
    *(double *)(v239 + 8) = v246 * v245.__cosval * v247.__sinval;
    *(double *)(v239 + 16) = v245.__sinval * 0.99330562 * v246;
    *(unsigned char *)(v239 + 44) = 1;
    if (v248 > v222) {
      goto LABEL_422;
    }
LABEL_437:
    if (v223 >= 2)
    {
      do
      {
        size_t v293 = v192 + 8 * (v225 >> 1);
        uint64_t v294 = (*(uint64_t (**)(void))(**(void **)v293 + 56))();
        uint64_t v295 = v294;
        if (*(unsigned char *)(v294 + 44))
        {
          double v292 = *(double *)v294;
        }
        else
        {
          long double v284 = *(double *)(v294 + 24) * 6.28318531;
          long double v285 = exp(*(double *)(v294 + 32) * 6.28318531 + -3.14159265);
          double v286 = atan(v285) * 2.0 + -1.57079633;
          long double v287 = fmod(v284, 6.28318531);
          double v288 = fmod(v287 + 6.28318531, 6.28318531) + -3.14159265;
          __double2 v289 = __sincos_stret(v286);
          double v290 = 6378137.0 / sqrt(v289.__sinval * v289.__sinval * -0.00669437999 + 1.0);
          __double2 v291 = __sincos_stret(v288);
          double v292 = v290 * v289.__cosval * v291.__cosval;
          *(double *)uint64_t v295 = v292;
          *(double *)(v295 + 8) = v290 * v289.__cosval * v291.__sinval;
          *(double *)(v295 + 16) = v289.__sinval * 0.99330562 * v290;
          *(unsigned char *)(v295 + 44) = 1;
        }
        if (v292 >= v221) {
          v225 >>= 1;
        }
        else {
          v225 += ~(v225 >> 1);
        }
        if (v292 < v221) {
          size_t v192 = v293 + 8;
        }
      }
      while (v225);
    }
    v213 = v226 + 8;
    if (v224 == v226 + 8)
    {
      int v155 = v470;
      goto LABEL_424;
    }
    unint64_t v271 = (v224 - (v226 + 8)) >> 3;
    int v210 = v489;
    do
    {
      v281 = &v213[8 * (v271 >> 1)];
      uint64_t v282 = (*(uint64_t (**)(void))(**(void **)v281 + 56))();
      uint64_t v283 = v282;
      if (*(unsigned char *)(v282 + 44))
      {
        double v280 = *(double *)v282;
      }
      else
      {
        long double v272 = *(double *)(v282 + 24) * 6.28318531;
        long double v273 = exp(*(double *)(v282 + 32) * 6.28318531 + -3.14159265);
        double v274 = atan(v273) * 2.0 + -1.57079633;
        long double v275 = fmod(v272, 6.28318531);
        double v276 = fmod(v275 + 6.28318531, 6.28318531) + -3.14159265;
        __double2 v277 = __sincos_stret(v274);
        double v278 = 6378137.0 / sqrt(v277.__sinval * v277.__sinval * -0.00669437999 + 1.0);
        __double2 v279 = __sincos_stret(v276);
        double v280 = v278 * v277.__cosval * v279.__cosval;
        *(double *)uint64_t v283 = v280;
        *(double *)(v283 + 8) = v278 * v277.__cosval * v279.__sinval;
        *(double *)(v283 + 16) = v277.__sinval * 0.99330562 * v278;
        *(unsigned char *)(v283 + 44) = 1;
      }
      if (v280 > v222)
      {
        v271 >>= 1;
      }
      else
      {
        v213 = v281 + 8;
        v271 += ~(v271 >> 1);
      }
    }
    while (v271);
    int v155 = v470;
LABEL_457:
    uint64_t v218 = (uint64_t)v492;
    unint64_t v215 = v495;
    if (v208 == (int8x16_t *)v468) {
      goto LABEL_434;
    }
LABEL_458:
    double v296 = *(double *)(v218 + 8);
    double v297 = v296 - v461;
    double v298 = v296 + v461;
    unint64_t v299 = ((char *)v487 - (char *)v468) >> 3;
    v300 = (char *)v208;
    while (2)
    {
      while (2)
      {
        unint64_t v301 = v299 >> 1;
        long long v302 = &v216[8 * (v299 >> 1)];
        uint64_t v303 = (*(uint64_t (**)(void))(**(void **)v302 + 56))();
        uint64_t v304 = v303;
        if (*(unsigned char *)(v303 + 44))
        {
          if (*(double *)(v303 + 8) < v297) {
            goto LABEL_459;
          }
        }
        else
        {
          long double v305 = *(double *)(v303 + 24) * 6.28318531;
          long double v306 = exp(*(double *)(v303 + 32) * 6.28318531 + -3.14159265);
          double v307 = atan(v306) * 2.0 + -1.57079633;
          long double v308 = fmod(v305, 6.28318531);
          double v309 = fmod(v308 + 6.28318531, 6.28318531) + -3.14159265;
          __double2 v310 = __sincos_stret(v307);
          double v311 = 6378137.0 / sqrt(v310.__sinval * v310.__sinval * -0.00669437999 + 1.0);
          __double2 v312 = __sincos_stret(v309);
          double v313 = v311 * v310.__cosval * v312.__sinval;
          *(double *)uint64_t v304 = v311 * v310.__cosval * v312.__cosval;
          *(double *)(v304 + 8) = v313;
          *(double *)(v304 + 16) = v310.__sinval * 0.99330562 * v311;
          *(unsigned char *)(v304 + 44) = 1;
          if (v313 < v297)
          {
LABEL_459:
            v216 = v302 + 8;
            v299 += ~v301;
            if (!v299) {
              goto LABEL_469;
            }
            continue;
          }
        }
        break;
      }
      uint64_t v314 = (*(uint64_t (**)(void))(**(void **)v302 + 56))();
      uint64_t v315 = v314;
      if (*(unsigned char *)(v314 + 44))
      {
        if (*(double *)(v314 + 8) <= v298) {
          goto LABEL_473;
        }
LABEL_468:
        v300 = &v216[8 * (v299 >> 1)];
        v299 >>= 1;
        if (!v301)
        {
LABEL_469:
          v269 = v216;
LABEL_470:
          int v155 = v470;
          goto LABEL_471;
        }
        continue;
      }
      break;
    }
    long double v316 = *(double *)(v314 + 24) * 6.28318531;
    long double v317 = exp(*(double *)(v314 + 32) * 6.28318531 + -3.14159265);
    double v318 = atan(v317) * 2.0 + -1.57079633;
    long double v319 = fmod(v316, 6.28318531);
    double v320 = fmod(v319 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v321 = __sincos_stret(v318);
    double v322 = 6378137.0 / sqrt(v321.__sinval * v321.__sinval * -0.00669437999 + 1.0);
    __double2 v323 = __sincos_stret(v320);
    double v324 = v322 * v321.__cosval * v323.__sinval;
    *(double *)uint64_t v315 = v322 * v321.__cosval * v323.__cosval;
    *(double *)(v315 + 8) = v324;
    *(double *)(v315 + 16) = v321.__sinval * 0.99330562 * v322;
    *(unsigned char *)(v315 + 44) = 1;
    if (v324 > v298) {
      goto LABEL_468;
    }
LABEL_473:
    if (v299 >= 2)
    {
      do
      {
        v347 = &v216[8 * (v301 >> 1)];
        uint64_t v348 = (*(uint64_t (**)(void))(**(void **)v347 + 56))();
        uint64_t v349 = v348;
        if (*(unsigned char *)(v348 + 44))
        {
          double v346 = *(double *)(v348 + 8);
        }
        else
        {
          long double v338 = *(double *)(v348 + 24) * 6.28318531;
          long double v339 = exp(*(double *)(v348 + 32) * 6.28318531 + -3.14159265);
          double v340 = atan(v339) * 2.0 + -1.57079633;
          long double v341 = fmod(v338, 6.28318531);
          double v342 = fmod(v341 + 6.28318531, 6.28318531) + -3.14159265;
          __double2 v343 = __sincos_stret(v340);
          double v344 = 6378137.0 / sqrt(v343.__sinval * v343.__sinval * -0.00669437999 + 1.0);
          __double2 v345 = __sincos_stret(v342);
          double v346 = v344 * v343.__cosval * v345.__sinval;
          *(double *)uint64_t v349 = v344 * v343.__cosval * v345.__cosval;
          *(double *)(v349 + 8) = v346;
          *(double *)(v349 + 16) = v343.__sinval * 0.99330562 * v344;
          *(unsigned char *)(v349 + 44) = 1;
        }
        if (v346 >= v297) {
          v301 >>= 1;
        }
        else {
          v301 += ~(v301 >> 1);
        }
        if (v346 < v297) {
          v216 = v347 + 8;
        }
      }
      while (v301);
    }
    v269 = v302 + 8;
    if (v300 != v302 + 8)
    {
      unint64_t v325 = (v300 - (v302 + 8)) >> 3;
      v219 = v485;
      do
      {
        v327 = &v269[8 * (v325 >> 1)];
        uint64_t v328 = (*(uint64_t (**)(void))(**(void **)v327 + 56))();
        uint64_t v329 = v328;
        if (*(unsigned char *)(v328 + 44))
        {
          double v326 = *(double *)(v328 + 8);
        }
        else
        {
          long double v330 = *(double *)(v328 + 24) * 6.28318531;
          long double v331 = exp(*(double *)(v328 + 32) * 6.28318531 + -3.14159265);
          double v332 = atan(v331) * 2.0 + -1.57079633;
          long double v333 = fmod(v330, 6.28318531);
          double v334 = fmod(v333 + 6.28318531, 6.28318531) + -3.14159265;
          __double2 v335 = __sincos_stret(v332);
          double v336 = 6378137.0 / sqrt(v335.__sinval * v335.__sinval * -0.00669437999 + 1.0);
          __double2 v337 = __sincos_stret(v334);
          double v326 = v336 * v335.__cosval * v337.__sinval;
          *(double *)uint64_t v329 = v336 * v335.__cosval * v337.__cosval;
          *(double *)(v329 + 8) = v326;
          *(double *)(v329 + 16) = v335.__sinval * 0.99330562 * v336;
          *(unsigned char *)(v329 + 44) = 1;
        }
        if (v326 > v298)
        {
          v325 >>= 1;
        }
        else
        {
          v269 = v327 + 8;
          v325 += ~(v325 >> 1);
        }
      }
      while (v325);
      goto LABEL_470;
    }
    int v155 = v470;
    v219 = v485;
LABEL_471:
    int v210 = v489;
    unint64_t v215 = v495;
LABEL_472:
    std::vector<md::RoadPosition *>::__assign_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(v524, (char *)v192, v213, (uint64_t)&v213[-v192] >> 3);
    std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>((unint64_t *)v524, *(uint64_t *)&v524[2], v216, v269, (v269 - v216) >> 3);
LABEL_559:
    v419 = *(uint64_t **)v524;
    v420 = *(uint64_t **)&v524[2];
    unint64_t v421 = 126 - 2 * __clz((uint64_t)(*(void *)&v524[2] - *(void *)v524) >> 3);
    if (*(void *)&v524[2] == *(void *)v524) {
      uint64_t v422 = 0;
    }
    else {
      uint64_t v422 = v421;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **,false>(*(uint64_t *)v524, *(unint64_t **)&v524[2], v422, 1);
    if (v420 == v419)
    {
      v430 = v219;
      goto LABEL_615;
    }
    v424 = v419 + 1;
    while (v424 != v420)
    {
      v425 = v424 - 1;
      uint64_t v426 = *(v424 - 1);
      uint64_t v427 = *v424++;
      if (v426 == v427)
      {
        v428 = v425 + 2;
        if (v425 + 2 != v420)
        {
          do
          {
            uint64_t v429 = v426;
            uint64_t v426 = *v428;
            if (v429 != *v428)
            {
              v425[1] = v426;
              ++v425;
            }
            ++v428;
          }
          while (v428 != v420);
          v420 = *(uint64_t **)&v524[2];
        }
        if (v425 + 1 != v420)
        {
          v423 = v420;
          v420 = v425 + 1;
          *(void *)&v524[2] = v425 + 1;
        }
        break;
      }
    }
    v430 = v219;
    if (v419 != v420)
    {
      while (1)
      {
        v431 = (unsigned __int8 *)*v419;
        if (*v419 == v215) {
          goto LABEL_578;
        }
        int v432 = v431[9];
        if (v432 != *(unsigned __int8 *)(v215 + 9)) {
          goto LABEL_578;
        }
        if (v432 == 1)
        {
          int v433 = (*(uint64_t (**)(unint64_t, uint64_t *))(*(void *)v215 + 152))(v215, v423);
          if (v433 != (*(unsigned int (**)(unsigned __int8 *))(*(void *)v431 + 152))(v431))
          {
            uint64_t v208 = v487;
            int v210 = v489;
LABEL_606:
            unint64_t v215 = v495;
            goto LABEL_578;
          }
          uint64_t v208 = v487;
          int v210 = v489;
          unint64_t v215 = v495;
        }
        v434 = (const md::LabelPoint *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v431 + 56))(v431);
        md::LabelPoint::vectorToPoint(v492, v434, v155 != 0);
        if (v435 * v435 + v436 * v436 + v437 * v437 < v209)
        {
          if (v430 >= v483)
          {
            uint64_t v438 = (v430 - v219) >> 3;
            unint64_t v439 = v438 + 1;
            if ((unint64_t)(v438 + 1) >> 61) {
              abort();
            }
            if ((v483 - v219) >> 2 > v439) {
              unint64_t v439 = (v483 - v219) >> 2;
            }
            if ((unint64_t)(v483 - v219) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v440 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v440 = v439;
            }
            if (v440)
            {
              if (v440 >> 61) {
                goto LABEL_635;
              }
              v441 = operator new(8 * v440);
            }
            else
            {
              v441 = 0;
            }
            v442 = (unsigned __int8 **)&v441[8 * v438];
            *v442 = v431;
            v443 = (char *)(v442 + 1);
            if (v430 == v219)
            {
              uint64_t v208 = v487;
              goto LABEL_603;
            }
            unint64_t v444 = v430 - 8 - v219;
            if (v444 < 0x168
              || &v441[v430 - v219 - 8 - (v444 & 0xFFFFFFFFFFFFFFF8)] > &v441[v430 - v219 - 8]
              || &v430[-(v444 & 0xFFFFFFFFFFFFFFF8) - 8] > v430 - 8
              || (unint64_t)(v219 - v441) < 0x20)
            {
              v445 = v430;
              uint64_t v208 = v487;
            }
            else
            {
              uint64_t v447 = (v444 >> 3) + 1;
              v445 = &v430[-8 * (v447 & 0x3FFFFFFFFFFFFFFCLL)];
              v448 = &v441[8 * v438 - 16];
              v449 = v430 - 16;
              uint64_t v450 = v447 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v451 = *(_OWORD *)v449;
                *(v448 - 1) = *((_OWORD *)v449 - 1);
                _OWORD *v448 = v451;
                v448 -= 2;
                v449 -= 32;
                v450 -= 4;
              }
              while (v450);
              v442 -= v447 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v208 = v487;
              if (v447 == (v447 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_603:
                v483 = &v441[8 * v440];
                if (v219) {
                  operator delete(v219);
                }
                v219 = (char *)v442;
                v430 = v443;
                int v155 = v470;
                int v210 = v489;
                goto LABEL_606;
              }
            }
            do
            {
              v446 = (unsigned __int8 *)*((void *)v445 - 1);
              v445 -= 8;
              *--v442 = v446;
            }
            while (v445 != v219);
            goto LABEL_603;
          }
          *(void *)v430 = v431;
          v430 += 8;
        }
LABEL_578:
        if (++v419 == v420)
        {
          v419 = *(uint64_t **)v524;
          break;
        }
      }
    }
LABEL_615:
    if (v419) {
      operator delete(v419);
    }
    v452 = v219;
    v485 = v219;
    _ZF = v219 == v430;
    long long v191 = v473;
    size_t v192 = v458;
    v213 = (char *)v459;
    if (_ZF)
    {
      *(unsigned char *)(v215 + 10) = 1;
      int v214 = *(_DWORD *)(v215 + 16) | v456;
LABEL_405:
      *(_DWORD *)(v215 + 16) = v214;
    }
    else
    {
      do
      {
        if (*(unsigned char *)(*(void *)v452 + 10) == 1)
        {
          *(unsigned char *)(v215 + 10) = 2;
          int v214 = *(_DWORD *)(v215 + 16) & v210;
          goto LABEL_405;
        }
        v452 += 8;
      }
      while (v452 != v430);
      *(unsigned char *)(v215 + 10) = 1;
      *(_DWORD *)(v215 + 16) |= v456;
      v453 = v485;
      do
      {
        uint64_t v454 = *(void *)v453;
        v453 += 8;
        *(unsigned char *)(v454 + 10) = 2;
        *(_DWORD *)(v454 + 16) &= v210;
      }
      while (v453 != v430);
    }
    int v157 = v475;
    v212 = v477;
LABEL_407:
    if (++v212 != v191) {
      continue;
    }
    break;
  }
  if (v485) {
    operator delete(v485);
  }
LABEL_626:
  if (v468) {
    operator delete(v468);
  }
  if (v192) {
    operator delete((void *)v192);
  }
  if (v157) {
    operator delete(v157);
  }
}

void sub_1A1AF8560(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0,std::allocator<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0>,BOOL ()(md::LabelLineResolvedPosition const&,double)>::operator()(uint64_t a1, uint64_t a2, double *a3)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  double v4 = *a3;
  uint64_t v5 = (float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(a2 + 104));
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(float64x2_t **)v7;
  double v9 = *(float64x2_t **)(v7 + 8);
  if (*(float64x2_t **)v7 == v9)
  {
LABEL_6:
    unint64_t v12 = *(void *)(v7 + 16);
    if ((unint64_t)v9 >= v12)
    {
      uint64_t v15 = v9 - v8;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        abort();
      }
      uint64_t v17 = v12 - (void)v8;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = (char *)operator new(16 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = (float64x2_t *)&v19[16 * v15];
      float64x2_t *v20 = *v6;
      f64 = (_OWORD *)v20[1].f64;
      if (v8 != v9)
      {
        do
        {
          v20[-1] = v9[-1];
          --v20;
          --v9;
        }
        while (v9 != v8);
        uint64_t v8 = *(float64x2_t **)v7;
      }
      *(void *)uint64_t v7 = v20;
      *(void *)(v7 + 8) = f64;
      *(void *)(v7 + 16) = &v19[16 * v18];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *double v9 = *v5;
      f64 = (_OWORD *)v9[1].f64;
    }
    uint64_t result = 0;
    *(void *)(v7 + 8) = f64;
  }
  else
  {
    uint64_t v10 = *(float64x2_t **)v7;
    while (1)
    {
      float64x2_t v11 = vsubq_f64(*v5, *v10);
      if (vaddvq_f64(vmulq_f64(v11, v11)) < v4) {
        return 1;
      }
      if (++v10 == v9) {
        goto LABEL_6;
      }
    }
  }
  return result;
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,false>(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  double v9 = result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  uint64_t k = v9;
  while (1)
  {
    double v9 = k;
    uint64_t v12 = (char *)a2 - (char *)k;
    unint64_t v13 = a2 - k;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v78 = *v10;
          unint64_t v79 = *k;
          int v80 = *(_DWORD *)(*v10 + 20);
          int v81 = *(_DWORD *)(*k + 20);
          if (v80 == v81)
          {
            double v82 = *(double *)(v78 + 32);
            double v83 = *(double *)(v79 + 32);
            if (v82 == v83)
            {
              if (v78 >= v79) {
                return result;
              }
            }
            else if (v82 <= v83)
            {
              return result;
            }
          }
          else if (v80 >= v81)
          {
            return result;
          }
          unint64_t *k = v78;
          *uint64_t v10 = v79;
          break;
        case 3uLL:
          return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(k, k + 1, a2 - 1);
        case 4uLL:
          return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(k, k + 1, k + 2, a2 - 1);
        case 5uLL:
          return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,0>(k, k + 1, k + 2, k + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (k == a2) {
        return result;
      }
      int64_t v102 = (v13 - 2) >> 1;
      int64_t v103 = v102;
LABEL_181:
      int64_t v105 = v103;
      if (v102 < v103) {
        goto LABEL_180;
      }
      uint64_t v106 = (2 * v103) | 1;
      uint64_t v104 = &k[v106];
      if (2 * v105 + 2 >= (uint64_t)v13) {
        goto LABEL_189;
      }
      unint64_t v107 = *v104;
      unint64_t v108 = v104[1];
      uint64_t result = (unint64_t *)*(unsigned int *)(*v104 + 20);
      int v109 = *(_DWORD *)(v108 + 20);
      if (result == v109)
      {
        double v110 = *(double *)(v107 + 32);
        double v111 = *(double *)(v108 + 32);
        if (v110 == v111)
        {
          if (v107 >= v108) {
            goto LABEL_189;
          }
        }
        else if (v110 <= v111)
        {
          goto LABEL_189;
        }
      }
      else if ((int)result >= v109)
      {
LABEL_189:
        unint64_t v112 = *v104;
        unint64_t v113 = k[v105];
        int v114 = *(_DWORD *)(*v104 + 20);
        int v115 = *(_DWORD *)(v113 + 20);
        if (v114 == v115)
        {
          double v116 = *(double *)(v112 + 32);
          double v117 = *(double *)(v113 + 32);
          if (v116 == v117)
          {
            if (v112 < v113) {
              goto LABEL_180;
            }
          }
          else if (v116 > v117)
          {
            goto LABEL_180;
          }
        }
        else if (v114 < v115)
        {
          goto LABEL_180;
        }
        k[v105] = v112;
        while (1)
        {
          if (v102 < v106) {
            goto LABEL_179;
          }
          uint64_t v118 = v104;
          uint64_t v119 = 2 * v106;
          uint64_t v106 = (2 * v106) | 1;
          uint64_t v104 = &k[v106];
          uint64_t v120 = v119 + 2;
          if (v120 < (uint64_t)v13)
          {
            unint64_t v121 = *v104;
            unint64_t v122 = v104[1];
            int v123 = *(_DWORD *)(*v104 + 20);
            int v124 = *(_DWORD *)(v122 + 20);
            if (v123 != v124)
            {
              if (v123 >= v124) {
                goto LABEL_207;
              }
LABEL_206:
              ++v104;
              uint64_t v106 = v120;
              goto LABEL_207;
            }
            double v125 = *(double *)(v121 + 32);
            double v126 = *(double *)(v122 + 32);
            if (v125 == v126)
            {
              if (v121 < v122) {
                goto LABEL_206;
              }
            }
            else if (v125 > v126)
            {
              goto LABEL_206;
            }
          }
LABEL_207:
          unint64_t v127 = *v104;
          uint64_t result = (unint64_t *)*(unsigned int *)(*v104 + 20);
          if (result == v115)
          {
            double v128 = *(double *)(v127 + 32);
            double v129 = *(double *)(v113 + 32);
            if (v128 == v129)
            {
              if (v127 < v113)
              {
LABEL_178:
                uint64_t v104 = v118;
LABEL_179:
                unint64_t *v104 = v113;
LABEL_180:
                int64_t v103 = v105 - 1;
                if (v105) {
                  goto LABEL_181;
                }
                uint64_t v130 = (unint64_t)v12 >> 3;
                while (2)
                {
                  uint64_t v132 = 0;
                  unint64_t v133 = *k;
                  uint64_t v131 = k;
LABEL_224:
                  unsigned __int8 v134 = v131;
                  v131 += v132 + 1;
                  uint64_t v135 = 2 * v132;
                  uint64_t v132 = (2 * v132) | 1;
                  uint64_t v136 = v135 + 2;
                  if (v136 < v130)
                  {
                    unint64_t v137 = *v131;
                    unint64_t v138 = v131[1];
                    uint64_t result = (unint64_t *)*(unsigned int *)(*v131 + 20);
                    int v139 = *(_DWORD *)(v138 + 20);
                    if (result != v139)
                    {
                      if ((int)result >= v139) {
                        goto LABEL_223;
                      }
                      goto LABEL_222;
                    }
                    double v140 = *(double *)(v137 + 32);
                    double v141 = *(double *)(v138 + 32);
                    if (v140 != v141)
                    {
                      if (v140 <= v141) {
                        goto LABEL_223;
                      }
LABEL_222:
                      ++v131;
                      uint64_t v132 = v136;
                      goto LABEL_223;
                    }
                    if (v137 < v138) {
                      goto LABEL_222;
                    }
                  }
LABEL_223:
                  *unsigned __int8 v134 = *v131;
                  if (v132 > (uint64_t)((unint64_t)(v130 - 2) >> 1))
                  {
                    if (v131 == --a2) {
                      goto LABEL_219;
                    }
                    *uint64_t v131 = *a2;
                    *a2 = v133;
                    uint64_t v142 = (char *)v131 - (char *)k + 8;
                    if (v142 < 9) {
                      goto LABEL_220;
                    }
                    unint64_t v143 = ((unint64_t)v142 >> 3) - 2;
                    unint64_t v144 = v143 >> 1;
                    unsigned int v145 = &k[v143 >> 1];
                    unint64_t v146 = *v145;
                    unint64_t v133 = *v131;
                    int v147 = *(_DWORD *)(*v145 + 20);
                    int v148 = *(_DWORD *)(*v131 + 20);
                    if (v147 != v148)
                    {
                      if (v147 >= v148) {
                        goto LABEL_220;
                      }
LABEL_242:
                      *uint64_t v131 = v146;
                      if (v143 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v151 = v144 - 1;
                          unint64_t v144 = (v144 - 1) >> 1;
                          uint64_t v131 = &k[v144];
                          unint64_t v152 = *v131;
                          int v153 = *(_DWORD *)(*v131 + 20);
                          if (v153 == v148)
                          {
                            double v154 = *(double *)(v152 + 32);
                            double v155 = *(double *)(v133 + 32);
                            if (v154 == v155)
                            {
                              if (v152 >= v133) {
                                break;
                              }
                            }
                            else if (v154 <= v155)
                            {
                              break;
                            }
                          }
                          else if (v153 >= v148)
                          {
                            break;
                          }
                          *unsigned int v145 = v152;
                          unsigned int v145 = &k[v144];
                          if (v151 <= 1) {
                            goto LABEL_219;
                          }
                        }
                      }
                      uint64_t v131 = v145;
LABEL_219:
                      *uint64_t v131 = v133;
                      goto LABEL_220;
                    }
                    double v149 = *(double *)(v146 + 32);
                    double v150 = *(double *)(v133 + 32);
                    if (v149 == v150)
                    {
                      if (v146 < v133) {
                        goto LABEL_242;
                      }
                    }
                    else if (v149 > v150)
                    {
                      goto LABEL_242;
                    }
LABEL_220:
                    BOOL v22 = v130-- <= 2;
                    if (v22) {
                      return result;
                    }
                    continue;
                  }
                  goto LABEL_224;
                }
              }
            }
            else if (v128 > v129)
            {
              goto LABEL_178;
            }
          }
          else if ((int)result < v115)
          {
            goto LABEL_178;
          }
          *uint64_t v118 = v127;
        }
      }
      ++v104;
      uint64_t v106 = 2 * v105 + 2;
      goto LABEL_189;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = &k[v13 >> 1];
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v9, &v9[v13 >> 1], a2 - 1);
      unint64_t v16 = &v9[v14];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v9 + 1, v16 - 1, a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v9 + 2, &v9[v14 + 1], a2 - 3);
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v16 - 1, v15, &v9[v14 + 1]);
      unint64_t v17 = *v9;
      *double v9 = *v16;
      *unint64_t v16 = v17;
    }
    else
    {
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(&v9[v13 >> 1], v9, a2 - 1);
    }
    --a3;
    unint64_t v18 = *v9;
    if (a4)
    {
      int v19 = *(_DWORD *)(v18 + 20);
LABEL_21:
      for (uint64_t i = v9 + 1; ; ++i)
      {
        unint64_t v30 = *i;
        int v31 = *(_DWORD *)(*i + 20);
        if (v31 != v19)
        {
          if (v31 >= v19) {
            goto LABEL_29;
          }
          continue;
        }
        double v32 = *(double *)(v30 + 32);
        double v33 = *(double *)(v18 + 32);
        if (v32 == v33) {
          break;
        }
        if (v32 <= v33) {
          goto LABEL_29;
        }
LABEL_23:
        ;
      }
      if (v30 < v18) {
        goto LABEL_23;
      }
LABEL_29:
      int v34 = i - 1;
      uint64_t j = a2 - 1;
      if (i - 1 != v9)
      {
        while (1)
        {
          unint64_t v36 = *j;
          int v37 = *(_DWORD *)(*j + 20);
          if (v37 == v19)
          {
            double v38 = *(double *)(v36 + 32);
            double v39 = *(double *)(v18 + 32);
            if (v38 == v39)
            {
              if (v36 < v18) {
                goto LABEL_52;
              }
            }
            else if (v38 > v39)
            {
              goto LABEL_52;
            }
          }
          else if (v37 < v19)
          {
            goto LABEL_52;
          }
          --j;
        }
      }
      uint64_t j = a2;
      if (i < a2)
      {
        for (uint64_t j = a2 - 1; ; --j)
        {
          unint64_t v41 = *j;
          int v42 = *(_DWORD *)(*j + 20);
          if (v42 == v19)
          {
            double v43 = *(double *)(v41 + 32);
            double v44 = *(double *)(v18 + 32);
            if (v43 == v44)
            {
              if (v41 < v18 || i >= j) {
                break;
              }
            }
            else if (i >= j || v43 > v44)
            {
              break;
            }
          }
          else if (i >= j || v42 < v19)
          {
            break;
          }
        }
      }
LABEL_52:
      if (i < j)
      {
        unint64_t v45 = *j;
        unint64_t v46 = (unint64_t)i;
        uint64_t v47 = j;
        do
        {
          *(void *)unint64_t v46 = v45;
          v46 += 8;
          *uint64_t v47 = v30;
          while (1)
          {
            unint64_t v30 = *(void *)v46;
            int v48 = *(_DWORD *)(*(void *)v46 + 20);
            if (v48 != v19)
            {
              if (v48 >= v19) {
                goto LABEL_63;
              }
              goto LABEL_57;
            }
            double v49 = *(double *)(v30 + 32);
            double v50 = *(double *)(v18 + 32);
            if (v49 == v50) {
              break;
            }
            if (v49 <= v50) {
              goto LABEL_63;
            }
LABEL_57:
            v46 += 8;
          }
          if (v30 < v18) {
            goto LABEL_57;
          }
LABEL_63:
          int v34 = (unint64_t *)(v46 - 8);
          do
          {
            while (1)
            {
              while (1)
              {
                unint64_t v51 = *--v47;
                unint64_t v45 = v51;
                int v52 = *(_DWORD *)(v51 + 20);
                if (v52 == v19) {
                  break;
                }
                if (v52 < v19) {
                  goto LABEL_54;
                }
              }
              double v53 = *(double *)(v45 + 32);
              double v54 = *(double *)(v18 + 32);
              if (v53 == v54) {
                break;
              }
              if (v53 > v54) {
                goto LABEL_54;
              }
            }
          }
          while (v45 >= v18);
LABEL_54:
          ;
        }
        while (v46 < (unint64_t)v47);
      }
      if (v34 != v9) {
        *double v9 = *v34;
      }
      unint64_t *v34 = v18;
      if (i < j)
      {
LABEL_76:
        uint64_t result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,false>(v9, v34, a3, a4 & 1);
        a4 = 0;
        uint64_t k = v34 + 1;
      }
      else
      {
        BOOL v55 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v9, v34);
        uint64_t k = v34 + 1;
        uint64_t result = (unint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v34 + 1, a2);
        if (result)
        {
          a2 = v34;
          if (v55) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v55) {
          goto LABEL_76;
        }
      }
    }
    else
    {
      unint64_t v20 = *(v9 - 1);
      int v19 = *(_DWORD *)(v20 + 20);
      int v21 = *(_DWORD *)(v18 + 20);
      BOOL v22 = v19 < v21;
      if (v19 == v21)
      {
        double v23 = *(double *)(v20 + 32);
        double v24 = *(double *)(v18 + 32);
        if (v23 == v24)
        {
          if (v20 < v18) {
            goto LABEL_21;
          }
        }
        else if (v23 > v24)
        {
          goto LABEL_21;
        }
      }
      else
      {
        int v19 = *(_DWORD *)(v18 + 20);
        if (v22) {
          goto LABEL_21;
        }
      }
      unint64_t v25 = *v10;
      int v26 = *(_DWORD *)(*v10 + 20);
      if (v19 == v26)
      {
        double v27 = *(double *)(v18 + 32);
        double v28 = *(double *)(v25 + 32);
        if (v27 == v28)
        {
          if (v18 < v25)
          {
LABEL_89:
            for (uint64_t k = v9 + 1; ; ++k)
            {
              unint64_t v60 = *k;
              int v61 = *(_DWORD *)(*k + 20);
              if (v19 == v61)
              {
                double v62 = *(double *)(v18 + 32);
                double v63 = *(double *)(v60 + 32);
                if (v62 == v63)
                {
                  if (v18 < v60) {
                    goto LABEL_97;
                  }
                }
                else if (v62 > v63)
                {
                  goto LABEL_97;
                }
              }
              else if (v19 < v61)
              {
                goto LABEL_97;
              }
            }
          }
        }
        else if (v27 > v28)
        {
          goto LABEL_89;
        }
      }
      else if (v19 < v26)
      {
        goto LABEL_89;
      }
      for (uint64_t k = v9 + 1; k < a2; ++k)
      {
        unint64_t v56 = *k;
        int v57 = *(_DWORD *)(*k + 20);
        if (v19 == v57)
        {
          double v58 = *(double *)(v18 + 32);
          double v59 = *(double *)(v56 + 32);
          if (v58 == v59)
          {
            if (v18 < v56) {
              break;
            }
          }
          else if (v58 > v59)
          {
            break;
          }
        }
        else if (v19 < v57)
        {
          break;
        }
      }
LABEL_97:
      uint64_t m = a2;
      if (k < a2)
      {
        for (uint64_t m = a2 - 1; ; --m)
        {
          if (v19 == v26)
          {
            double v66 = *(double *)(v18 + 32);
            double v67 = *(double *)(v25 + 32);
            if (v66 == v67)
            {
              if (v18 >= v25) {
                break;
              }
            }
            else if (v66 <= v67)
            {
              break;
            }
          }
          else if (v19 >= v26)
          {
            break;
          }
          unint64_t v65 = *(m - 1);
          unint64_t v25 = v65;
          int v26 = *(_DWORD *)(v65 + 20);
        }
      }
      if (k < m)
      {
        unint64_t v68 = *k;
        unint64_t v69 = *m;
        do
        {
          *k++ = v69;
          unint64_t *m = v68;
          while (1)
          {
            unint64_t v68 = *k;
            int v70 = *(_DWORD *)(*k + 20);
            if (v19 != v70)
            {
              if (v19 < v70) {
                goto LABEL_119;
              }
              goto LABEL_111;
            }
            double v71 = *(double *)(v18 + 32);
            double v72 = *(double *)(v68 + 32);
            if (v71 == v72) {
              break;
            }
            if (v71 > v72) {
              goto LABEL_119;
            }
LABEL_111:
            ++k;
          }
          if (v18 >= v68) {
            goto LABEL_111;
          }
          do
          {
            while (1)
            {
LABEL_119:
              while (1)
              {
                unint64_t v73 = *--m;
                unint64_t v69 = v73;
                int v74 = *(_DWORD *)(v73 + 20);
                if (v19 == v74) {
                  break;
                }
                if (v19 >= v74) {
                  goto LABEL_108;
                }
              }
              double v75 = *(double *)(v18 + 32);
              double v76 = *(double *)(v69 + 32);
              if (v75 == v76) {
                break;
              }
              if (v75 <= v76) {
                goto LABEL_108;
              }
            }
          }
          while (v18 < v69);
LABEL_108:
          ;
        }
        while (k < m);
      }
      int v77 = k - 1;
      BOOL v4 = k - 1 >= v9;
      BOOL v5 = k - 1 == v9;
      if (k - 1 != v9) {
        *double v9 = *v77;
      }
      a4 = 0;
      *int v77 = v18;
    }
  }
  unsigned int v84 = k + 1;
  BOOL v86 = k == a2 || v84 == a2;
  if (a4)
  {
    if (v86) {
      return result;
    }
    uint64_t v87 = 0;
    uint64_t v88 = k;
LABEL_159:
    int v90 = v88;
    uint64_t v88 = v84;
    unint64_t v92 = *v90;
    unint64_t v91 = v90[1];
    int v93 = *(_DWORD *)(v91 + 20);
    int v94 = *(_DWORD *)(*v90 + 20);
    if (v93 == v94)
    {
      double v95 = *(double *)(v91 + 32);
      double v96 = *(double *)(v92 + 32);
      if (v95 == v96)
      {
        if (v91 >= v92) {
          goto LABEL_158;
        }
      }
      else if (v95 <= v96)
      {
        goto LABEL_158;
      }
    }
    else if (v93 >= v94)
    {
      goto LABEL_158;
    }
    v90[1] = v92;
    uint64_t v89 = k;
    if (v90 == k) {
      goto LABEL_157;
    }
    uint64_t v97 = v87;
    while (1)
    {
      unint64_t v98 = *(unint64_t *)((char *)k + v97 - 8);
      int v99 = *(_DWORD *)(v98 + 20);
      if (v93 == v99)
      {
        double v100 = *(double *)(v91 + 32);
        double v101 = *(double *)(v98 + 32);
        if (v100 == v101)
        {
          if (v91 >= v98)
          {
LABEL_175:
            uint64_t v89 = v90;
LABEL_157:
            unint64_t *v89 = v91;
LABEL_158:
            unsigned int v84 = v88 + 1;
            v87 += 8;
            if (v88 + 1 == a2) {
              return result;
            }
            goto LABEL_159;
          }
        }
        else if (v100 <= v101)
        {
          uint64_t v89 = (unint64_t *)((char *)k + v97);
          goto LABEL_157;
        }
      }
      else if (v93 >= v99)
      {
        goto LABEL_175;
      }
      --v90;
      *(unint64_t *)((char *)k + v97) = v98;
      v97 -= 8;
      if (!v97)
      {
        uint64_t v89 = k;
        goto LABEL_157;
      }
    }
  }
  if (!v86)
  {
    do
    {
      BOOL v156 = v9;
      double v9 = v84;
      unint64_t v158 = *v156;
      unint64_t v157 = v156[1];
      int v159 = *(_DWORD *)(v157 + 20);
      int v160 = *(_DWORD *)(*v156 + 20);
      if (v159 == v160)
      {
        double v161 = *(double *)(v157 + 32);
        double v162 = *(double *)(v158 + 32);
        if (v161 == v162)
        {
          if (v157 < v158)
          {
            do
            {
              while (1)
              {
LABEL_267:
                while (1)
                {
                  uint64_t v163 = v156;
                  unint64_t v164 = v158;
                  unint64_t v165 = *--v156;
                  unint64_t v158 = v165;
                  v156[2] = v164;
                  int v166 = *(_DWORD *)(v165 + 20);
                  if (v159 == v166) {
                    break;
                  }
                  if (v159 >= v166) {
                    goto LABEL_256;
                  }
                }
                double v167 = *(double *)(v157 + 32);
                double v168 = *(double *)(v158 + 32);
                if (v167 == v168) {
                  break;
                }
                if (v167 <= v168) {
                  goto LABEL_256;
                }
              }
            }
            while (v157 < v158);
LABEL_256:
            *uint64_t v163 = v157;
          }
        }
        else if (v161 > v162)
        {
          goto LABEL_267;
        }
      }
      else if (v159 < v160)
      {
        goto LABEL_267;
      }
      unsigned int v84 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

void *std::vector<md::RoadPosition *>::__assign_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  double v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      abort();
    uint64_t v13 = v12;
    uint64_t result = operator new(8 * v12);
    double v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memmove(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    int v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, 8 * v17);
    double v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    int v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a2, a3);
  if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a4, *a3))
  {
    unint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2))
    {
      unint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1))
      {
        unint64_t v12 = *a1;
        *a1 = *a2;
        *a2 = v12;
      }
    }
  }
  BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a5, *a4);
  if (result)
  {
    unint64_t v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a4, *a3);
    if (result)
    {
      unint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2);
      if (result)
      {
        unint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
        if (result)
        {
          unint64_t v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a2, a3);
  if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a4, *a3))
  {
    unint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2))
    {
      unint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1))
      {
        unint64_t v12 = *a1;
        *a1 = *a2;
        *a2 = v12;
      }
    }
  }
  BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a5, *a4);
  if (result)
  {
    unint64_t v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a4, *a3);
    if (result)
    {
      unint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2);
      if (result)
      {
        unint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
        if (result)
        {
          unint64_t v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

void md::RegistryManager::update(void *a1, uint64_t a2, uint64_t *a3, os_signpost_id_t a4)
{
  BOOL v5 = a1;
  uint64_t v695 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v675 = a4;
  uint64_t v6 = (void *)a1[41];
  uint64_t v7 = (void *)a1[42];
  while (v7 != v6)
  {
    double v9 = (gdc::Registry *)*--v7;
    uint64_t v8 = v9;
    void *v7 = 0;
    if (v9)
    {
      gdc::Registry::~Registry(v8);
      MEMORY[0x1A6239270]();
    }
  }
  v5[42] = v6;
  uint64_t v11 = v5[44];
  uint64_t v10 = v5[45];
  uint64_t v673 = a2;
  v674 = v5;
  if (v11 == v10) {
    goto LABEL_54;
  }
  v665 = v5 + 38;
  unint64_t v12 = v5 + 39;
  do
  {
    if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
      dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
    }
    uint64_t v13 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(unsigned __int16 *)(*(void *)(v11 + 104) + 40);
      memset(v689, 0, sizeof(v689));
      *(void *)&long long v682 = v689;
      *((void *)&v682 + 1) = v689;
      uint64_t v15 = *(unsigned int *)(v11 + 96);
      if (v15 == -1) {
        goto LABEL_1119;
      }
      v676 = (uint8_t *)&v682;
      ((void (*)(uint8_t **, uint64_t))off_1EF58FA68[v15])(&v676, v11);
      if (v689[11] >= 0) {
        unint64_t v16 = v689;
      }
      else {
        unint64_t v16 = *(_WORD **)v689;
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&buf[8] = 2080;
      *(void *)&buf[10] = v16;
      _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_DEBUG, "[RegistryDestroyed] Registry:%d key:%s", buf, 0x12u);
      if (SHIBYTE(v689[11]) < 0) {
        operator delete(*(void **)v689);
      }
    }

    uint64_t v17 = *v12;
    if (*v12)
    {
      unsigned int v18 = *(_DWORD *)(v11 + 96);
      if (v18 != -1)
      {
        uint64_t v19 = (uint64_t)v12;
        while (1)
        {
          uint64_t v20 = *(unsigned int *)(v17 + 128);
          if (v20 == -1 || v20 < v18)
          {
            uint64_t v17 = *(void *)(v17 + 8);
            if (!v17) {
              goto LABEL_36;
            }
            goto LABEL_32;
          }
          if (v20 <= v18) {
            break;
          }
          do
          {
            uint64_t v19 = v17;
            uint64_t v17 = *(void *)v17;
            if (!v17) {
              goto LABEL_36;
            }
LABEL_32:
            unsigned int v18 = *(_DWORD *)(v11 + 96);
          }
          while (v18 == -1);
        }
        *(void *)v689 = buf;
        if (((unsigned int (*)(_WORD *, uint64_t, uint64_t))off_1EF58FAA8[v20])(v689, v17 + 32, v11)) {
          v17 += 8;
        }
        else {
          uint64_t v19 = v17;
        }
        uint64_t v17 = *(void *)v17;
        if (!v17) {
          goto LABEL_36;
        }
        goto LABEL_32;
      }
      do
      {
        uint64_t v19 = v17;
        uint64_t v17 = *(void *)v17;
      }
      while (v17);
LABEL_36:
      if ((uint64_t *)v19 != v12)
      {
        unsigned int v22 = *(_DWORD *)(v19 + 128);
        if (v22 == -1
          || ((uint64_t v23 = *(unsigned int *)(v11 + 96), v23 != -1) ? (v24 = v23 >= v22) : (v24 = 0),
              v24
           && (v23 > v22
            || (*(void *)v689 = buf,
                (((uint64_t (*)(_WORD *, uint64_t, uint64_t))off_1EF58FAA8[v23])(v689, v11, v19 + 32) & 1) == 0))))
        {
          std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::erase(v665, v19);
        }
      }
    }
    v11 += 112;
  }
  while (v11 != v10);
  BOOL v5 = v674;
  uint64_t v25 = v674[44];
  uint64_t v11 = v674[45];
  if (v11 != v25)
  {
    do
    {
      int v26 = *(gdc::Registry **)(v11 - 8);
      *(void *)(v11 - 8) = 0;
      if (v26)
      {
        gdc::Registry::~Registry(v26);
        MEMORY[0x1A6239270]();
      }
      uint64_t v27 = v11 - 112;
      uint64_t v28 = *(unsigned int *)(v11 - 16);
      if (v28 != -1) {
        ((void (*)(_WORD *, uint64_t))off_1EF58FA78[v28])(v689, v11 - 112);
      }
      *(_DWORD *)(v11 - 16) = -1;
      v11 -= 112;
    }
    while (v27 != v25);
    uint64_t v11 = v25;
  }
LABEL_54:
  v5[45] = v11;
  v5[58] = v5[57];
  v5[112] = v5[111];
  v5[115] = v5[114];
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  unint64_t v29 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  unint64_t v30 = v29;
  if (v675 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v29))
  {
    v689[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v30, OS_SIGNPOST_INTERVAL_BEGIN, v675, "SynchPoint", "", (uint8_t *)v689, 2u);
  }

  std::mutex::lock((std::mutex *)(v674 + 18));
  uint64_t v31 = v674[36];
  uint64_t v32 = v674[37];
  double v33 = (void *)(v31 + 16);
  if (!v32) {
    double v33 = v674 + 32;
  }
  int v34 = v674 + 35;
  long long v35 = *((_OWORD *)v674 + 16);
  v674[32] = v674[35];
  v674[33] = v31;
  *(_OWORD *)(v674 + 35) = v35;
  uint64_t v36 = v674[34];
  v674[34] = v32;
  v674[37] = v36;
  void *v33 = v674 + 33;
  if (v36) {
    int v37 = (void *)(v674[36] + 16);
  }
  else {
    int v37 = v674 + 35;
  }
  v659 = v674 + 36;
  *int v37 = v674 + 36;
  std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy((void *)v674[33]);
  v674[33] = 0;
  v674[34] = 0;
  v674[32] = v674 + 33;
  std::mutex::unlock((std::mutex *)(v674 + 18));
  std::mutex::lock((std::mutex *)(v674 + 10));
  double v39 = v674 + 30;
  uint64_t v38 = v674[30];
  long long v40 = *((_OWORD *)v674 + 13);
  v674[27] = v38;
  unint64_t v41 = (unsigned int **)(v674 + 27);
  v674[26] = v674[29];
  *(_OWORD *)(v674 + 29) = v40;
  uint64_t v42 = v674[28];
  uint64_t v43 = v674[31];
  v674[28] = v43;
  v674[31] = v42;
  double v44 = (unsigned int ***)(v38 + 16);
  if (!v43) {
    double v44 = (unsigned int ***)(v674 + 26);
  }
  char *v44 = v41;
  unint64_t v45 = (void *)(*v39 + 16);
  v656 = (uint64_t **)(v674 + 29);
  if (!v42) {
    unint64_t v45 = v674 + 29;
  }
  v670 = v674 + 30;
  *unint64_t v45 = v39;
  std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*v41);
  v674[26] = v41;
  std::__shared_weak_count *v41 = 0;
  v674[28] = 0;
  std::mutex::unlock((std::mutex *)(v674 + 10));
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  unint64_t v46 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  uint64_t v47 = v46;
  if (v675 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v46))
  {
    v689[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v47, OS_SIGNPOST_INTERVAL_END, v675, "SynchPoint", "", (uint8_t *)v689, 2u);
  }

  int v48 = (void *)*v34;
  double v49 = v674;
  if ((void *)*v34 != v659)
  {
    v663 = v674 + 39;
    while (2)
    {
      uint64_t v50 = *v663;
      if (!*v663) {
        goto LABEL_100;
      }
      unsigned int v51 = *((_DWORD *)v48 + 32);
      if (v51 != -1)
      {
        uint64_t v52 = (uint64_t)(v674 + 39);
        while (1)
        {
          uint64_t v53 = *(unsigned int *)(v50 + 128);
          if (v53 == -1 || v53 < v51)
          {
            uint64_t v50 = *(void *)(v50 + 8);
            if (!v50) {
              goto LABEL_94;
            }
            goto LABEL_90;
          }
          if (v53 <= v51) {
            break;
          }
          do
          {
            uint64_t v52 = v50;
            uint64_t v50 = *(void *)v50;
            if (!v50) {
              goto LABEL_94;
            }
LABEL_90:
            unsigned int v51 = *((_DWORD *)v48 + 32);
          }
          while (v51 == -1);
        }
        *(void *)v689 = buf;
        if (((unsigned int (*)(_WORD *, uint64_t, void *))off_1EF58FAA8[v53])(v689, v50 + 32, v48 + 4)) {
          v50 += 8;
        }
        else {
          uint64_t v52 = v50;
        }
        uint64_t v50 = *(void *)v50;
        if (!v50) {
          goto LABEL_94;
        }
        goto LABEL_90;
      }
      do
      {
        uint64_t v52 = v50;
        uint64_t v50 = *(void *)v50;
      }
      while (v50);
LABEL_94:
      if ((uint64_t *)v52 != v663
        && ((v55 = v52 + 32, unsigned int v56 = *(_DWORD *)(v52 + 128), v56 == -1)
         || ((uint64_t v57 = *((unsigned int *)v48 + 32), v57 != -1) ? (v58 = v57 >= v56) : (v58 = 0),
             v58
          && (v57 > v56
           || (*(void *)v689 = buf,
               char v70 = ((uint64_t (*)(_WORD *, void *))off_1EF58FAA8[v57])(v689, v48 + 4),
               uint64_t v55 = v52 + 32,
               (v70 & 1) == 0)))))
      {
        uint64_t v666 = v55;
        if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
          dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
        }
        double v71 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          int v72 = *(unsigned __int16 *)(*(void *)(v52 + 136) + 40);
          memset(v689, 0, sizeof(v689));
          *(void *)&long long v682 = v689;
          *((void *)&v682 + 1) = v689;
          uint64_t v73 = *((unsigned int *)v48 + 32);
          if (v73 == -1) {
            goto LABEL_1119;
          }
          v676 = (uint8_t *)&v682;
          ((void (*)(uint8_t **, void *))off_1EF58FA68[v73])(&v676, v48 + 4);
          if (v689[11] >= 0) {
            int v74 = v689;
          }
          else {
            int v74 = *(_WORD **)v689;
          }
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v72;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = v74;
          _os_log_impl(&dword_1A1780000, v71, OS_LOG_TYPE_DEBUG, "[RegistryDestructionQueued] Registry:%d key:%s", buf, 0x12u);
          if (SHIBYTE(v689[11]) < 0) {
            operator delete(*(void **)v689);
          }
        }

        double v75 = v674;
        double v76 = (void *)v674[48];
        int v77 = (void *)v674[49];
        uint64_t v78 = *(void *)(v52 + 136);
        if (v77 != v76)
        {
          unint64_t v79 = v77 - v76;
          unsigned int v80 = *(unsigned __int16 *)(v78 + 40);
          do
          {
            unint64_t v81 = v79 >> 1;
            double v82 = &v76[v79 >> 1];
            uint64_t v84 = *v82;
            double v83 = v82 + 1;
            v79 += ~(v79 >> 1);
            if (*(unsigned __int16 *)(v84 + 40) < v80) {
              double v76 = v83;
            }
            else {
              unint64_t v79 = v81;
            }
          }
          while (v79);
          if (v76 != v77 && v80 >= *(unsigned __int16 *)(*v76 + 40) && *(_DWORD *)(v52 + 128) == 1)
          {
            uint64_t v85 = (char *)v674[115];
            unint64_t v86 = v674[116];
            if ((unint64_t)v85 >= v86)
            {
              unint64_t v91 = (char *)v674[114];
              uint64_t v92 = (v85 - v91) >> 3;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61) {
                abort();
              }
              uint64_t v94 = v86 - (void)v91;
              if (v94 >> 2 > v93) {
                unint64_t v93 = v94 >> 2;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v93;
              }
              if (v95)
              {
                if (v95 >> 61) {
                  goto LABEL_1114;
                }
                double v96 = operator new(8 * v95);
              }
              else
              {
                double v96 = 0;
              }
              uint64_t v97 = &v96[8 * v92];
              *uint64_t v97 = v78;
              uint64_t v87 = v97 + 1;
              if (v85 == v91)
              {
                unint64_t v91 = v85;
              }
              else
              {
                unint64_t v98 = v85 - 8 - v91;
                if (v98 < 0x58) {
                  goto LABEL_1138;
                }
                if ((unint64_t)(v91 - v96) < 0x20) {
                  goto LABEL_1138;
                }
                uint64_t v99 = (v98 >> 3) + 1;
                double v100 = &v96[8 * v92 - 16];
                double v101 = v85 - 16;
                uint64_t v102 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v103 = *(_OWORD *)v101;
                  *(v100 - 1) = *((_OWORD *)v101 - 1);
                  *double v100 = v103;
                  v100 -= 2;
                  v101 -= 32;
                  v102 -= 4;
                }
                while (v102);
                v97 -= v99 & 0x3FFFFFFFFFFFFFFCLL;
                v85 -= 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1138:
                  do
                  {
                    uint64_t v104 = *((void *)v85 - 1);
                    v85 -= 8;
                    *--uint64_t v97 = v104;
                  }
                  while (v85 != v91);
                  unint64_t v91 = (char *)v674[114];
                }
              }
              double v75 = v674;
              v674[114] = v97;
              v674[115] = v87;
              v674[116] = &v96[8 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(void *)uint64_t v85 = v78;
              uint64_t v87 = v85 + 8;
            }
            v75[115] = v87;
            uint64_t v78 = *(void *)(v52 + 136);
          }
        }
        unsigned int v105 = *(unsigned __int16 *)(v78 + 40);
        v689[0] = *(_WORD *)(v78 + 40);
        unint64_t v107 = (char *)v75[57];
        uint64_t v106 = (unsigned __int16 *)v75[58];
        unint64_t v108 = v107;
        if (v107 != (char *)v106)
        {
          unint64_t v108 = (char *)v75[57];
          while (*(unsigned __int16 *)v108 < v105)
          {
            v108 += 2;
            if (v108 == (char *)v106)
            {
              int v109 = (char *)v75[58];
              goto LABEL_196;
            }
          }
        }
        int v109 = (char *)v75[58];
        if (v108 == (char *)v106 || (int v109 = v108, v105 != *(unsigned __int16 *)v108))
        {
LABEL_196:
          uint64_t v110 = v109 - v107;
          uint64_t v111 = (v109 - v107) >> 1;
          unint64_t v112 = &v107[(v109 - v107) & 0xFFFFFFFFFFFFFFFELL];
          unint64_t v113 = v674[59];
          if ((unint64_t)v106 < v113)
          {
            if (v112 == (char *)v106)
            {
              unsigned __int16 *v106 = v105;
              v674[58] = v106 + 1;
            }
            else
            {
              int64_t v114 = (char *)v106 - (v112 + 2);
              uint64_t v115 = v114 >> 1;
              double v116 = v106 - 1;
              if ((unint64_t)v106 < 2)
              {
                int v123 = (unsigned __int16 *)v75[58];
              }
              else
              {
                unint64_t v117 = (v110 & 0xFFFFFFFFFFFFFFFELL) + v114;
                uint64_t v118 = &v107[v117];
                unint64_t v119 = (unint64_t)&v107[v117 + 2];
                if ((unint64_t)v106 > v119) {
                  unint64_t v119 = v75[58];
                }
                unint64_t v120 = v119 + ~(unint64_t)v107 - v117;
                unint64_t v121 = (char *)v106 - v118;
                BOOL v122 = v120 >= 0x1E && v121 > 0x1F;
                int v123 = (unsigned __int16 *)v75[58];
                if (!v122) {
                  goto LABEL_1139;
                }
                uint64_t v124 = (v120 >> 1) + 1;
                unint64_t v125 = v124 & 0xFFFFFFFFFFFFFFF0;
                double v116 = (unsigned __int16 *)((char *)v116 + v125 * 2);
                double v126 = v106 + 8;
                unint64_t v127 = &v107[2 * v115 + 16 + 2 * v111];
                unint64_t v128 = v124 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  long long v129 = *(_OWORD *)v127;
                  *(v126 - 1) = *((_OWORD *)v127 - 1);
                  *double v126 = v129;
                  v126 += 2;
                  v127 += 32;
                  v128 -= 16;
                }
                while (v128);
                int v123 = &v106[v125];
                if (v124 != (v124 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_1139:
                  do
                  {
                    unsigned __int16 v130 = *v116++;
                    *v123++ = v130;
                  }
                  while (v116 < v106);
                }
              }
              v674[58] = v123;
              if (v106 != (unsigned __int16 *)(v112 + 2))
              {
                memmove(&v106[-v115], v112, v114);
                unint64_t v112 = &v107[(v109 - v107) & 0xFFFFFFFFFFFFFFFELL];
              }
              unint64_t v151 = v689;
              if (v112 <= (char *)v689) {
                unint64_t v151 = &v689[v674[58] > (unint64_t)v689];
              }
              *(_WORD *)unint64_t v112 = *v151;
            }
            goto LABEL_249;
          }
          uint64_t v131 = (char *)v106 - v107;
          if (v131 <= -3) {
            abort();
          }
          uint64_t v132 = v131 >> 1;
          unint64_t v133 = v113 - (void)v107;
          if (v133 <= v132 + 1) {
            unint64_t v134 = v132 + 1;
          }
          else {
            unint64_t v134 = v133;
          }
          if (v133 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v135 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v135 = v134;
          }
          if (v135)
          {
            if (v135 < 0) {
              goto LABEL_1114;
            }
            uint64_t v136 = (char *)operator new(2 * v135);
            unint64_t v112 = &v107[(v109 - v107) & 0xFFFFFFFFFFFFFFFELL];
          }
          else
          {
            uint64_t v136 = 0;
          }
          unint64_t v137 = &v136[2 * v111];
          unint64_t v138 = &v136[2 * v135];
          if (v111 == v135)
          {
            if (v110 >= 1)
            {
              uint64_t v139 = v111 + 2;
              if (v111 >= -1) {
                uint64_t v139 = v111 + 1;
              }
              v137 -= v139 & 0xFFFFFFFFFFFFFFFELL;
              goto LABEL_228;
            }
            v652 = v112;
            if (v107 == v109) {
              uint64_t v188 = 1;
            }
            else {
              uint64_t v188 = v109 - v107;
            }
            if (v188 < 0) {
              goto LABEL_1114;
            }
            unint64_t v137 = (char *)operator new(2 * v188);
            unint64_t v138 = &v137[2 * v188];
            if (v136)
            {
              operator delete(v136);
              unint64_t v138 = &v137[2 * v188];
              double v140 = (char *)v674[57];
              LOWORD(v105) = v689[0];
            }
            else
            {
              double v140 = v107;
            }
            unint64_t v112 = v652;
          }
          else
          {
LABEL_228:
            double v140 = v107;
          }
          *(_WORD *)unint64_t v137 = v105;
          double v141 = v137 + 2;
          if (v140 == v112)
          {
            double v150 = v674;
            goto LABEL_245;
          }
          uint64_t v142 = &v107[v110 & 0xFFFFFFFFFFFFFFFELL];
          unint64_t v143 = v142 - v140 - 2;
          if (v143 < 0x1E || (unint64_t)(v142 - v137) < 0x20)
          {
            unsigned int v145 = v112;
            double v150 = v674;
          }
          else
          {
            uint64_t v144 = (v143 >> 1) + 1;
            unsigned int v145 = &v112[-2 * (v144 & 0xFFFFFFFFFFFFFFF0)];
            unint64_t v146 = v137 - 16;
            int v147 = &v107[2 * v111 - 16];
            unint64_t v148 = v144 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v149 = *(_OWORD *)v147;
              *((_OWORD *)v146 - 1) = *((_OWORD *)v147 - 1);
              *(_OWORD *)unint64_t v146 = v149;
              v146 -= 32;
              v147 -= 32;
              v148 -= 16;
            }
            while (v148);
            v137 -= 2 * (v144 & 0xFFFFFFFFFFFFFFF0);
            double v150 = v674;
            if (v144 == (v144 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_245:
              int v153 = (char *)v150[58];
              double v154 = v150;
              int64_t v155 = v153 - v112;
              if (v153 != v112)
              {
                BOOL v156 = v138;
                memmove(v141, v112, v153 - v112);
                unint64_t v138 = v156;
                double v140 = (char *)v154[57];
              }
              v154[57] = v137;
              v154[58] = &v141[v155];
              v154[59] = v138;
              if (v140) {
                operator delete(v140);
              }
              goto LABEL_249;
            }
          }
          do
          {
            __int16 v152 = *((_WORD *)v145 - 1);
            v145 -= 2;
            *((_WORD *)v137 - 1) = v152;
            v137 -= 2;
          }
          while (v145 != v140);
          goto LABEL_245;
        }
LABEL_249:
        unint64_t v157 = v674;
        unint64_t v159 = v674[45];
        unint64_t v158 = v674[46];
        if (v159 < v158)
        {
          *(unsigned char *)unint64_t v159 = 0;
          *(_DWORD *)(v159 + 96) = -1;
          uint64_t v160 = *(unsigned int *)(v52 + 128);
          if (v160 != -1)
          {
            ((void (*)(uint8_t *, unint64_t, uint64_t))off_1EF58FA88[v160])(buf, v159, v666);
            *(_DWORD *)(v159 + 96) = v160;
          }
          uint64_t v161 = *(void *)(v52 + 136);
          *(void *)(v52 + 136) = 0;
          *(void *)(v159 + 104) = v161;
          double v162 = (char *)(v159 + 112);
          v674[45] = v159 + 112;
          goto LABEL_276;
        }
        uint64_t v163 = v674[44];
        uint64_t v164 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v159 - v163) >> 4);
        unint64_t v165 = v164 + 1;
        if ((unint64_t)(v164 + 1) > 0x249249249249249) {
          abort();
        }
        unint64_t v166 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v158 - v163) >> 4);
        if (2 * v166 > v165) {
          unint64_t v165 = 2 * v166;
        }
        if (v166 >= 0x124924924924924) {
          unint64_t v167 = 0x249249249249249;
        }
        else {
          unint64_t v167 = v165;
        }
        *(void *)&v690[8] = v674 + 46;
        if (v167)
        {
          if (v167 > 0x249249249249249) {
            goto LABEL_1114;
          }
          double v168 = operator new(112 * v167);
          unint64_t v157 = v674;
        }
        else
        {
          double v168 = 0;
        }
        unint64_t v169 = (char *)&v168[14 * v164];
        *(void *)v689 = v168;
        *(void *)&v689[4] = v169;
        *(void *)&v689[8] = v169;
        *(void *)v690 = &v168[14 * v167];
        *unint64_t v169 = 0;
        *((_DWORD *)v169 + 24) = -1;
        int64_t v170 = v169 + 96;
        uint64_t v171 = *(unsigned int *)(v52 + 128);
        if (v171 == -1)
        {
          uint64_t v172 = (char *)&v168[14 * v164];
        }
        else
        {
          ((void (*)(long long *, void *, uint64_t))off_1EF58FA88[v171])(&v682, &v168[14 * v164], v666);
          *int64_t v170 = v171;
          unint64_t v169 = *(char **)&v689[4];
          uint64_t v172 = *(char **)&v689[8];
        }
        uint64_t v173 = *(void *)(v52 + 136);
        *(void *)(v52 + 136) = 0;
        v168[14 * v164 + 13] = v173;
        double v162 = v172 + 112;
        *(void *)&v689[8] = v172 + 112;
        unint64_t v174 = (void *)v157[45];
        v667 = (void *)v157[44];
        if (v174 == v667)
        {
          unint64_t v182 = (void *)v157[45];
        }
        else
        {
          unint64_t v175 = 0;
          do
          {
            unint64_t v177 = &v169[v175];
            v169[v175 - 112] = 0;
            uint64_t v178 = (char *)&v174[v175 / 8];
            *(_DWORD *)&v169[v175 - 16] = -1;
            uint64_t v179 = &v169[v175 - 16];
            uint64_t v180 = LODWORD(v174[v175 / 8 - 2]);
            if (v180 != -1)
            {
              uint64_t v181 = v169;
              ((void (*)(long long *, char *, char *))off_1EF58FA98[v180])(&v682, &v169[v175 - 112], v178 - 112);
              *(_DWORD *)uint64_t v179 = v180;
              unint64_t v169 = v181;
            }
            uint64_t v176 = *((void *)v178 - 1);
            *((void *)v178 - 1) = 0;
            *((void *)v177 - 1) = v176;
            v175 -= 112;
          }
          while (&v174[v175 / 8] != v667);
          v169 += v175;
          unint64_t v157 = v674;
          unint64_t v182 = (void *)v674[44];
          unint64_t v174 = (void *)v674[45];
          double v162 = *(char **)&v689[8];
        }
        v157[44] = v169;
        v157[45] = v162;
        uint64_t v183 = v157[46];
        v157[46] = *(void *)v690;
        *(void *)&v689[8] = v174;
        *(void *)v690 = v183;
        *(void *)v689 = v182;
        *(void *)&v689[4] = v182;
        if (v174 == v182)
        {
          if (!v174) {
            goto LABEL_276;
          }
          goto LABEL_275;
        }
        do
        {
          *(void *)&v689[8] = v174 - 14;
          uint64_t v186 = (gdc::Registry *)*(v174 - 1);
          *(v174 - 1) = 0;
          if (v186)
          {
            gdc::Registry::~Registry(v186);
            MEMORY[0x1A6239270]();
          }
          uint64_t v187 = *((unsigned int *)v174 - 4);
          if (v187 != -1) {
            ((void (*)(uint8_t *, void *))off_1EF58FA78[v187])(buf, v174 - 14);
          }
          *((_DWORD *)v174 - 4) = -1;
          unint64_t v174 = *(void **)&v689[8];
        }
        while (*(void **)&v689[8] != v182);
        unint64_t v174 = *(void **)v689;
        if (*(void *)v689) {
LABEL_275:
        }
          operator delete(v174);
LABEL_276:
        v157[45] = v162;
        std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::erase(v674 + 38, v52);
      }
      else
      {
LABEL_100:
        uint64_t v59 = *v670;
        if (!*v670) {
          goto LABEL_124;
        }
        unsigned int v60 = *((_DWORD *)v48 + 32);
        if (v60 != -1)
        {
          uint64_t v61 = (uint64_t)(v674 + 30);
          while (1)
          {
            uint64_t v62 = *(unsigned int *)(v59 + 128);
            if (v62 == -1 || v62 < v60)
            {
              uint64_t v59 = *(void *)(v59 + 8);
              if (!v59) {
                goto LABEL_118;
              }
              goto LABEL_114;
            }
            if (v62 <= v60) {
              break;
            }
            do
            {
              uint64_t v61 = v59;
              uint64_t v59 = *(void *)v59;
              if (!v59) {
                goto LABEL_118;
              }
LABEL_114:
              unsigned int v60 = *((_DWORD *)v48 + 32);
            }
            while (v60 == -1);
          }
          *(void *)v689 = buf;
          if (((unsigned int (*)(_WORD *, uint64_t, void *))off_1EF58FAA8[v62])(v689, v59 + 32, v48 + 4)) {
            v59 += 8;
          }
          else {
            uint64_t v61 = v59;
          }
          uint64_t v59 = *(void *)v59;
          if (!v59) {
            goto LABEL_118;
          }
          goto LABEL_114;
        }
        do
        {
          uint64_t v61 = v59;
          uint64_t v59 = *(void *)v59;
        }
        while (v59);
LABEL_118:
        if ((uint64_t *)v61 != v670
          && ((unsigned int v64 = *(_DWORD *)(v61 + 128), v64 == -1)
           || ((v65 = *((unsigned int *)v48 + 32), v65 != -1) ? (BOOL v66 = v65 >= v64) : (BOOL v66 = 0),
               v66
            && (v65 > v64
             || (*(void *)v689 = buf,
                 (((uint64_t (*)(_WORD *, void *, uint64_t))off_1EF58FAA8[v65])(v689, v48 + 4, v61 + 32) & 1) == 0)))))
        {
          if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
            dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
          }
          uint64_t v88 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
          {
            memset(v689, 0, sizeof(v689));
            *(void *)buf = v689;
            *(void *)&buf[8] = v689;
            uint64_t v89 = *((unsigned int *)v48 + 32);
            if (v89 == -1) {
              goto LABEL_1119;
            }
            v676 = buf;
            ((void (*)(uint8_t **, void *))off_1EF58FA68[v89])(&v676, v48 + 4);
            if (v689[11] >= 0) {
              int v90 = v689;
            }
            else {
              int v90 = *(_WORD **)v689;
            }
            LODWORD(v682) = 136315138;
            *(void *)((char *)&v682 + 4) = v90;
            _os_log_impl(&dword_1A1780000, v88, OS_LOG_TYPE_DEBUG, "Key:%s is both incoming and outgoing, do nothing", (uint8_t *)&v682, 0xCu);
            if (SHIBYTE(v689[11]) < 0) {
              operator delete(*(void **)v689);
            }
          }

          std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::erase(v656, v61);
        }
        else
        {
LABEL_124:
          if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
            dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
          }
          double v67 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            memset(buf, 0, sizeof(buf));
            *(void *)&long long v682 = buf;
            *((void *)&v682 + 1) = buf;
            uint64_t v68 = *((unsigned int *)v48 + 32);
            if (v68 == -1) {
              goto LABEL_1119;
            }
            v676 = (uint8_t *)&v682;
            ((void (*)(uint8_t **, void *))off_1EF58FA68[v68])(&v676, v48 + 4);
            unint64_t v69 = buf;
            if ((buf[23] & 0x80u) != 0) {
              unint64_t v69 = *(uint8_t **)buf;
            }
            *(_DWORD *)v689 = 136315906;
            *(void *)&v689[2] = v69;
            v689[6] = 2080;
            *(void *)&v689[7] = "false";
            v689[11] = 2080;
            *(void *)v690 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
            *(_WORD *)&v690[8] = 1024;
            *(_DWORD *)&v690[10] = 175;
            _os_log_impl(&dword_1A1780000, v67, OS_LOG_TYPE_ERROR, "No registry for key:%s to destroy: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)v689, 0x26u);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
      }
      uint64_t v184 = (void *)v48[1];
      double v49 = v674;
      if (v184)
      {
        do
        {
          uint64_t v185 = v184;
          uint64_t v184 = (void *)*v184;
        }
        while (v184);
      }
      else
      {
        do
        {
          uint64_t v185 = (void *)v48[2];
          BOOL v512 = *v185 == (void)v48;
          int v48 = v185;
        }
        while (!v512);
      }
      int v48 = v185;
      if (v185 == v659) {
        break;
      }
      continue;
    }
  }
  uint64_t v189 = *v656;
  if (*v656 != v670)
  {
    long long v190 = v49 + 39;
    do
    {
      long long v191 = (uint64_t *)*v190;
      if (*v190)
      {
        unsigned int v192 = *((_DWORD *)v189 + 32);
        if (v192 != -1)
        {
          uint64_t v193 = v190;
          while (1)
          {
            uint64_t v194 = *((unsigned int *)v191 + 32);
            if (v194 == -1 || v194 < v192)
            {
              long long v191 = (uint64_t *)v191[1];
              if (!v191) {
                goto LABEL_319;
              }
              goto LABEL_315;
            }
            if (v194 <= v192) {
              break;
            }
            do
            {
              uint64_t v193 = v191;
              long long v191 = (uint64_t *)*v191;
              if (!v191) {
                goto LABEL_319;
              }
LABEL_315:
              unsigned int v192 = *((_DWORD *)v189 + 32);
            }
            while (v192 == -1);
          }
          *(void *)v689 = buf;
          if (((unsigned int (*)(_WORD *, uint64_t *, uint64_t *))off_1EF58FAA8[v194])(v689, v191 + 4, v189 + 4))
          {
            ++v191;
          }
          else
          {
            uint64_t v193 = v191;
          }
          long long v191 = (uint64_t *)*v191;
          if (!v191) {
            goto LABEL_319;
          }
          goto LABEL_315;
        }
        do
        {
          uint64_t v193 = v191;
          long long v191 = (uint64_t *)*v191;
        }
        while (v191);
LABEL_319:
        if (v193 != v190)
        {
          unsigned int v196 = *((_DWORD *)v193 + 32);
          if (v196 == -1
            || ((uint64_t v197 = *((unsigned int *)v189 + 32), v197 != -1)
              ? (BOOL v198 = v197 >= v196)
              : (BOOL v198 = 0),
                v198
             && (v197 > v196
              || (*(void *)v689 = buf,
                  !((unsigned int (*)(_WORD *, uint64_t *, void *))off_1EF58FAA8[v197])(v689, v189 + 4, v193 + 4)))))
          {
            if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
              dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
            }
            v213 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
            if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
            {
              int v214 = *(unsigned __int16 *)(v193[17] + 40);
              memset(buf, 0, sizeof(buf));
              *(void *)&long long v682 = buf;
              *((void *)&v682 + 1) = buf;
              uint64_t v215 = *((unsigned int *)v189 + 32);
              if (v215 != -1)
              {
                v676 = (uint8_t *)&v682;
                ((void (*)(uint8_t **, uint64_t *))off_1EF58FA68[v215])(&v676, v189 + 4);
                v216 = buf;
                if ((buf[23] & 0x80u) != 0) {
                  v216 = *(uint8_t **)buf;
                }
                int v217 = *(unsigned __int16 *)(v189[17] + 40);
                *(_DWORD *)v689 = 67110402;
                *(_DWORD *)&v689[2] = v214;
                v689[4] = 2080;
                *(void *)&v689[5] = v216;
                v689[9] = 1024;
                *(_DWORD *)&v689[10] = v217;
                *(_WORD *)v690 = 2080;
                *(void *)&v690[2] = "false";
                *(_WORD *)&v690[10] = 2080;
                *(void *)&v690[12] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
                __int16 v691 = 1024;
                int v692 = 193;
                _os_log_impl(&dword_1A1780000, v213, OS_LOG_TYPE_ERROR, "Already have a registry(id:%d) associated with the key:%s for a new incoming registry(id:%d): Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)v689, 0x32u);
                if ((char)buf[23] < 0) {
                  operator delete(*(void **)buf);
                }
                goto LABEL_356;
              }
LABEL_1119:
              std::__throw_bad_variant_access[abi:nn180100]();
              goto LABEL_1135;
            }
LABEL_356:

            v219 = (void *)v674[42];
            unint64_t v218 = v674[43];
            if ((unint64_t)v219 < v218)
            {
              uint64_t v220 = v193[17];
              v193[17] = 0;
              void *v219 = v220;
              double v221 = v219 + 1;
LABEL_427:
              v674[42] = v221;
              uint64_t v266 = v189[17];
              v189[17] = 0;
              double v267 = (gdc::Registry *)v193[17];
              v193[17] = v266;
              double v49 = v674;
              if (v267)
              {
                gdc::Registry::~Registry(v267);
                MEMORY[0x1A6239270]();
              }
              goto LABEL_405;
            }
            uint64_t v222 = v674[41];
            unint64_t v223 = (char *)v219 - v222;
            uint64_t v224 = ((uint64_t)v219 - v222) >> 3;
            if ((unint64_t)(v224 + 1) >> 61) {
              abort();
            }
            uint64_t v225 = v218 - v222;
            uint64_t v226 = v225 >> 2;
            if (v225 >> 2 <= (unint64_t)(v224 + 1)) {
              uint64_t v226 = v224 + 1;
            }
            if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v227 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v227 = v226;
            }
            if (!v227)
            {
              uint64_t v228 = 0;
              goto LABEL_412;
            }
            if (!(v227 >> 61))
            {
              uint64_t v228 = (char *)operator new(8 * v227);
LABEL_412:
              v250 = &v228[8 * v224];
              double v251 = &v228[8 * v227];
              uint64_t v252 = v193[17];
              v193[17] = 0;
              *(void *)v250 = v252;
              double v221 = v250 + 8;
              unint64_t v253 = (char *)v674[41];
              v254 = (char *)v674[42];
              if (v254 == v253)
              {
                v674[41] = v250;
                v674[42] = v221;
                v674[43] = v251;
              }
              else
              {
                unint64_t v255 = v254 - v253 - 8;
                if (v255 <= 0x77
                  || &v254[-(v255 & 0xFFFFFFFFFFFFFFF8) - 8] < v250
                  && &v223[(void)v228 - (v255 & 0xFFFFFFFFFFFFFFF8) - 8] < v254)
                {
                  goto LABEL_1140;
                }
                uint64_t v256 = (v255 >> 3) + 1;
                float v257 = &v228[8 * v224 - 16];
                double v258 = v254 - 32;
                uint64_t v259 = v256 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v261 = *(_OWORD *)v258;
                  long long v260 = *((_OWORD *)v258 + 1);
                  *(_OWORD *)double v258 = 0uLL;
                  *((_OWORD *)v258 + 1) = 0uLL;
                  v258 -= 32;
                  *((_OWORD *)v257 - 1) = v261;
                  *(_OWORD *)float v257 = v260;
                  v257 -= 32;
                  v259 -= 4;
                }
                while (v259);
                v250 -= 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
                v254 -= 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
                if (v256 != (v256 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1140:
                  do
                  {
                    uint64_t v262 = *((void *)v254 - 1);
                    v254 -= 8;
                    *(void *)v254 = 0;
                    *((void *)v250 - 1) = v262;
                    v250 -= 8;
                  }
                  while (v254 != v253);
                }
                v254 = (char *)v674[41];
                double v263 = (char *)v674[42];
                v674[41] = v250;
                v674[42] = v221;
                v674[43] = v251;
                while (v263 != v254)
                {
                  double v265 = (gdc::Registry *)*((void *)v263 - 1);
                  v263 -= 8;
                  long double v264 = v265;
                  *(void *)double v263 = 0;
                  if (v265)
                  {
                    gdc::Registry::~Registry(v264);
                    MEMORY[0x1A6239270]();
                  }
                }
              }
              if (v254) {
                operator delete(v254);
              }
              goto LABEL_427;
            }
            goto LABEL_1114;
          }
        }
      }
      if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
      }
      uint64_t v199 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
      {
        int v200 = *(unsigned __int16 *)(v189[17] + 40);
        memset(v689, 0, sizeof(v689));
        *(void *)&long long v682 = v689;
        *((void *)&v682 + 1) = v689;
        uint64_t v201 = *((unsigned int *)v189 + 32);
        if (v201 == -1) {
          goto LABEL_1119;
        }
        v676 = (uint8_t *)&v682;
        ((void (*)(uint8_t **, uint64_t *))off_1EF58FA68[v201])(&v676, v189 + 4);
        if (v689[11] >= 0) {
          unint64_t v202 = v689;
        }
        else {
          unint64_t v202 = *(_WORD **)v689;
        }
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v200;
        *(_WORD *)&buf[8] = 2080;
        *(void *)&buf[10] = v202;
        _os_log_impl(&dword_1A1780000, v199, OS_LOG_TYPE_DEBUG, "[RegistryAdded] Registry:%d key:%s", buf, 0x12u);
        if (SHIBYTE(v689[11]) < 0) {
          operator delete(*(void **)v689);
        }
      }

      double v49 = v674;
      if (*((_DWORD *)v189 + 32) == 1)
      {
        uint64_t v203 = v189[17];
        unint64_t v204 = (char *)v674[112];
        unint64_t v205 = v674[113];
        if ((unint64_t)v204 >= v205)
        {
          uint64_t v207 = (char *)v674[111];
          uint64_t v208 = (v204 - v207) >> 3;
          unint64_t v209 = v208 + 1;
          if ((unint64_t)(v208 + 1) >> 61) {
            abort();
          }
          uint64_t v210 = v205 - (void)v207;
          if (v210 >> 2 > v209) {
            unint64_t v209 = v210 >> 2;
          }
          if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v211 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v211 = v209;
          }
          if (v211)
          {
            if (v211 >> 61) {
              goto LABEL_1114;
            }
            v212 = operator new(8 * v211);
          }
          else
          {
            v212 = 0;
          }
          long double v229 = (uint64_t *)&v212[8 * v208];
          uint64_t *v229 = v203;
          BOOL v206 = v229 + 1;
          if (v204 == v207)
          {
            uint64_t v207 = v204;
          }
          else
          {
            unint64_t v230 = v204 - 8 - v207;
            if (v230 < 0x58) {
              goto LABEL_1141;
            }
            if ((unint64_t)(v207 - v212) < 0x20) {
              goto LABEL_1141;
            }
            uint64_t v231 = (v230 >> 3) + 1;
            long double v232 = &v212[8 * v208 - 16];
            double v233 = v204 - 16;
            uint64_t v234 = v231 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v235 = *(_OWORD *)v233;
              *(v232 - 1) = *((_OWORD *)v233 - 1);
              *long double v232 = v235;
              v232 -= 2;
              v233 -= 32;
              v234 -= 4;
            }
            while (v234);
            v229 -= v231 & 0x3FFFFFFFFFFFFFFCLL;
            v204 -= 8 * (v231 & 0x3FFFFFFFFFFFFFFCLL);
            if (v231 != (v231 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1141:
              do
              {
                uint64_t v236 = *((void *)v204 - 1);
                v204 -= 8;
                *--long double v229 = v236;
              }
              while (v204 != v207);
              uint64_t v207 = (char *)v674[111];
            }
          }
          double v49 = v674;
          v674[111] = v229;
          v674[112] = v206;
          v674[113] = &v212[8 * v211];
          if (v207) {
            operator delete(v207);
          }
        }
        else
        {
          *(void *)unint64_t v204 = v203;
          BOOL v206 = v204 + 8;
          double v49 = v674;
        }
        v49[112] = v206;
      }
      double v237 = (uint64_t *)*v190;
      uint64_t v238 = v190;
      uint64_t v239 = v190;
      if (!*v190) {
        goto LABEL_400;
      }
      uint64_t v238 = v190;
      while (1)
      {
        while (1)
        {
          uint64_t v239 = v237;
          long double v240 = v237 + 4;
          unint64_t v241 = *((unsigned int *)v237 + 32);
          unint64_t v242 = *((unsigned int *)v189 + 32);
          if (v241 == -1) {
            goto LABEL_384;
          }
          if (v242 != 0xFFFFFFFF && v242 >= v241)
          {
            if (v242 > v241) {
              goto LABEL_386;
            }
            *(void *)v689 = buf;
            double v49 = v674;
            if ((((uint64_t (*)(_WORD *, uint64_t *, uint64_t *))off_1EF58FAA8[v242])(v689, v189 + 4, v240) & 1) == 0) {
              break;
            }
          }
          double v237 = (uint64_t *)*v239;
          uint64_t v238 = v239;
          if (!*v239) {
            goto LABEL_400;
          }
        }
        unint64_t v242 = *((unsigned int *)v189 + 32);
LABEL_384:
        if (v242 == 0xFFFFFFFF) {
          goto LABEL_399;
        }
        unint64_t v241 = *((unsigned int *)v239 + 32);
        if (v241 != -1) {
          break;
        }
LABEL_382:
        uint64_t v238 = v239 + 1;
        double v237 = (uint64_t *)v239[1];
        if (!v237) {
          goto LABEL_400;
        }
      }
LABEL_386:
      if (v241 < v242) {
        goto LABEL_382;
      }
      if (v241 <= v242)
      {
        *(void *)v689 = buf;
        double v49 = v674;
        if (((unsigned int (*)(_WORD *, uint64_t *, uint64_t *))off_1EF58FAA8[v241])(v689, v240, v189 + 4)) {
          goto LABEL_382;
        }
      }
LABEL_399:
      if (!*v238)
      {
LABEL_400:
        double v244 = operator new(0x90uLL);
        v244[32] = 0;
        *((_DWORD *)v244 + 32) = -1;
        uint64_t v245 = *((unsigned int *)v189 + 32);
        if (v245 != -1)
        {
          ((void (*)(uint8_t *, unsigned char *, uint64_t *))off_1EF58FA88[v245])(buf, v244 + 32, v189 + 4);
          *((_DWORD *)v244 + 32) = v245;
        }
        uint64_t v246 = v189[17];
        v189[17] = 0;
        *((void *)v244 + 17) = v246;
        *(void *)double v244 = 0;
        *((void *)v244 + 1) = 0;
        *((void *)v244 + 2) = v239;
        *uint64_t v238 = v244;
        double v49 = v674;
        uint64_t v247 = *(void *)v674[38];
        if (v247)
        {
          v674[38] = v247;
          double v244 = (unsigned char *)*v238;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v674[39], (uint64_t *)v244);
        ++v674[40];
      }
LABEL_405:
      double v248 = (uint64_t *)v189[1];
      if (v248)
      {
        do
        {
          uint8x8_t v249 = v248;
          double v248 = (uint64_t *)*v248;
        }
        while (v248);
      }
      else
      {
        do
        {
          uint8x8_t v249 = (uint64_t *)v189[2];
          BOOL v512 = *v249 == (void)v189;
          uint64_t v189 = v249;
        }
        while (!v512);
      }
      uint64_t v189 = v249;
    }
    while (v249 != v670);
  }
  std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy((unsigned int *)v49[30]);
  v49[30] = 0;
  v49[31] = 0;
  v49[29] = v670;
  std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy((void *)v49[36]);
  v49[36] = 0;
  v49[37] = 0;
  v49[35] = v659;
  v686 = (void (**)(void **))&unk_1EF571418;
  v687 = &v675;
  v688 = (void **)&v686;
  v684[0] = &unk_1EF571460;
  v684[1] = &v675;
  v685 = v684;
  *(void *)v690 = v689;
  *(void *)v689 = &unk_1EF571460;
  *(void *)&v689[4] = &v675;
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  __double2 v268 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v269 = v268;
  os_signpost_id_t v270 = *v687;
  if (*v687 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v268))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v269, OS_SIGNPOST_INTERVAL_BEGIN, v270, "ResolveRegistries", "", buf, 2u);
  }

  if (v685 == v684)
  {
    (*(void (**)(void *))(v684[0] + 32))(v684);
  }
  else if (v685)
  {
    (*(void (**)(void))(*v685 + 40))();
  }
  if (v688 == (void **)&v686)
  {
    v686[4]((void **)&v686);
  }
  else if (v688)
  {
    (*((void (**)(void))*v688 + 5))();
  }
  unint64_t v271 = (void *)(v673 + 128);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v673 + 128));
  *(void *)(v673 + 120) = v673 + 128;
  v668 = (void *)(v673 + 120);
  *(void *)(v673 + 136) = 0;
  *(void *)(v673 + 128) = 0;
  long double v272 = (void *)(v673 + 152);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v673 + 152));
  *(void *)(v673 + 144) = v673 + 152;
  *(void *)(v673 + 152) = 0;
  v671 = (void *)(v673 + 144);
  *(void *)(v673 + 160) = 0;
  long double v273 = kMapDataTypesWithRegistries;
  *((void *)&v682 + 1) = 0;
  uint64_t v683 = 0;
  *(void *)&long long v682 = (char *)&v682 + 8;
  do
  {
    int v274 = *(unsigned __int16 *)v273;
    uint64_t v275 = *a3;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    double v276 = *(unsigned __int16 **)(v275 + 48);
    __double2 v277 = *(unsigned __int16 **)(v275 + 56);
    if (v276 == v277) {
      goto LABEL_455;
    }
    double v278 = *(unsigned __int16 **)(v275 + 48);
    while (*v278 != v274)
    {
      v278 += 16;
      if (v278 == v277) {
        goto LABEL_455;
      }
    }
    if (v278 == v277)
    {
LABEL_455:
      __double2 v279 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v276 != v274)
      {
        v276 += 16;
        if (v276 == v277)
        {
          double v276 = *(unsigned __int16 **)(v275 + 56);
          break;
        }
      }
      __double2 v279 = (uint64_t *)(v276 + 4);
    }
    uint64_t v282 = *v279;
    double v280 = v279 + 1;
    v281 = (void *)v282;
    if ((uint64_t *)v282 != v280)
    {
      do
      {
        uint64_t v283 = operator new(0x28uLL);
        unsigned int v284 = *(_DWORD *)(v281[4] + 8);
        *((_DWORD *)v283 + 7) = v284;
        int v285 = *((char *)v281 + 48);
        *((unsigned char *)v283 + 32) = *((unsigned char *)v281 + 48);
        uint64_t v286 = *((void *)&v682 + 1);
        long double v287 = (void *)&v682 + 1;
        double v288 = (void *)&v682 + 1;
        if (*((void *)&v682 + 1))
        {
          while (1)
          {
            while (1)
            {
              double v288 = (void *)v286;
              int v289 = *(unsigned __int8 *)(v286 + 32);
              int v290 = (char)v289;
              unsigned int v291 = *(_DWORD *)(v286 + 28);
              if (!(v289 == v285 ? v284 < v291 : v285 < (char)v289)) {
                break;
              }
              uint64_t v286 = *v288;
              long double v287 = v288;
              if (!*v288) {
                goto LABEL_472;
              }
            }
            BOOL v293 = v291 < v284;
            int v294 = v285 == v290 ? v293 : v290 < v285;
            if (v294 != 1) {
              break;
            }
            uint64_t v286 = v288[1];
            if (!v286)
            {
              long double v287 = v288 + 1;
              goto LABEL_472;
            }
          }
          operator delete(v283);
          long double v305 = (uint64_t *)v281[1];
          if (!v305)
          {
            do
            {
LABEL_507:
              double v309 = (uint64_t *)v281[2];
              BOOL v512 = *v309 == (void)v281;
              v281 = v309;
            }
            while (!v512);
            goto LABEL_458;
          }
        }
        else
        {
LABEL_472:
          *uint64_t v283 = 0;
          v283[1] = 0;
          v283[2] = v288;
          *long double v287 = v283;
          if (*(void *)v682)
          {
            *(void *)&long long v682 = *(void *)v682;
            uint64_t v283 = (void *)*v287;
          }
          uint64_t v295 = (uint64_t *)*((void *)&v682 + 1);
          BOOL v512 = v283 == *((void **)&v682 + 1);
          *((unsigned char *)v283 + 24) = v283 == *((void **)&v682 + 1);
          if (!v512)
          {
            do
            {
              uint64_t v296 = v283[2];
              if (*(unsigned char *)(v296 + 24)) {
                break;
              }
              double v297 = *(uint64_t **)(v296 + 16);
              uint64_t v298 = *v297;
              if (*v297 == v296)
              {
                uint64_t v301 = v297[1];
                if (!v301 || (int v302 = *(unsigned __int8 *)(v301 + 24), v299 = (unsigned char *)(v301 + 24), v302))
                {
                  if (*(void **)v296 == v283)
                  {
                    uint64_t v303 = (uint64_t *)v283[2];
                  }
                  else
                  {
                    uint64_t v303 = *(uint64_t **)(v296 + 8);
                    uint64_t v304 = *v303;
                    *(void *)(v296 + 8) = *v303;
                    if (v304)
                    {
                      *(void *)(v304 + 16) = v296;
                      double v297 = *(uint64_t **)(v296 + 16);
                    }
                    v303[2] = (uint64_t)v297;
                    *(void *)(*(void *)(v296 + 16) + 8 * (**(void **)(v296 + 16) != v296)) = v303;
                    *uint64_t v303 = v296;
                    *(void *)(v296 + 16) = v303;
                    double v297 = (uint64_t *)v303[2];
                    uint64_t v296 = *v297;
                  }
                  *((unsigned char *)v303 + 24) = 1;
                  *((unsigned char *)v297 + 24) = 0;
                  uint64_t v308 = *(void *)(v296 + 8);
                  uint64_t *v297 = v308;
                  if (v308) {
                    *(void *)(v308 + 16) = v297;
                  }
                  *(void *)(v296 + 16) = v297[2];
                  *(void *)(v297[2] + 8 * (*(void *)v297[2] != (void)v297)) = v296;
                  *(void *)(v296 + 8) = v297;
                  goto LABEL_503;
                }
              }
              else if (!v298 || (v300 = *(unsigned __int8 *)(v298 + 24), unint64_t v299 = (unsigned char *)(v298 + 24), v300))
              {
                if (*(void **)v296 == v283)
                {
                  uint64_t v306 = v283[1];
                  *(void *)uint64_t v296 = v306;
                  if (v306)
                  {
                    *(void *)(v306 + 16) = v296;
                    double v297 = *(uint64_t **)(v296 + 16);
                  }
                  v283[2] = v297;
                  *(void *)(*(void *)(v296 + 16) + 8 * (**(void **)(v296 + 16) != v296)) = v283;
                  v283[1] = v296;
                  *(void *)(v296 + 16) = v283;
                  double v297 = (uint64_t *)v283[2];
                }
                else
                {
                  uint64_t v283 = (void *)v283[2];
                }
                *((unsigned char *)v283 + 24) = 1;
                *((unsigned char *)v297 + 24) = 0;
                uint64_t v296 = v297[1];
                double v307 = *(void **)v296;
                v297[1] = *(void *)v296;
                if (v307) {
                  v307[2] = v297;
                }
                *(void *)(v296 + 16) = v297[2];
                *(void *)(v297[2] + 8 * (*(void *)v297[2] != (void)v297)) = v296;
                *(void *)uint64_t v296 = v297;
LABEL_503:
                v297[2] = v296;
                break;
              }
              *(unsigned char *)(v296 + 24) = 1;
              uint64_t v283 = v297;
              *((unsigned char *)v297 + 24) = v297 == v295;
              *unint64_t v299 = 1;
            }
            while (v297 != v295);
          }
          ++v683;
          long double v305 = (uint64_t *)v281[1];
          if (!v305) {
            goto LABEL_507;
          }
        }
        do
        {
          double v309 = v305;
          long double v305 = (uint64_t *)*v305;
        }
        while (v305);
LABEL_458:
        v281 = v309;
      }
      while (v309 != v280);
    }
    ++v273;
  }
  while (v273 != (const __int16 *)&ggl::landmarkFlatShaderVertShaderFunctionConstantMapping(void)::ref);
  __double2 v310 = (void *)v673;
  uint64_t v311 = *(void *)(v673 + 168);
  uint64_t v312 = *(void *)(v673 + 120);
  v680 = (char *)&v682 + 8;
  uint64_t v681 = v682;
  v678 = (char *)(v673 + 176);
  uint64_t v679 = v311;
  v676 = (uint8_t *)(v673 + 120);
  uint64_t v677 = v312;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::insert_iterator<std::set<md::LayerDataIdentWithWorld>> &>((uint64_t)buf, (uint64_t)&v681, &v680, (uint64_t)&v679, &v678, (void **)&v676);
  uint64_t v313 = *(void *)(v673 + 168);
  uint64_t v314 = *(void *)(v673 + 144);
  v680 = (char *)(v673 + 176);
  uint64_t v681 = v313;
  v678 = (char *)&v682 + 8;
  uint64_t v679 = v682;
  v676 = (uint8_t *)(v673 + 144);
  uint64_t v677 = v314;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::insert_iterator<std::set<md::LayerDataIdentWithWorld>> &>((uint64_t)buf, (uint64_t)&v681, &v680, (uint64_t)&v679, &v678, (void **)&v676);
  uint64_t v315 = (void *)(v673 + 80);
  if (*(void *)(v673 + 104))
  {
    long double v316 = *(void **)(v673 + 96);
    if (v316)
    {
      do
      {
        long double v317 = (void *)*v316;
        operator delete(v316);
        long double v316 = v317;
      }
      while (v317);
    }
    *(void *)(v673 + 96) = 0;
    uint64_t v318 = *(void *)(v673 + 88);
    if (v318)
    {
      for (uint64_t i = 0; i != v318; ++i)
        *(void *)(*v315 + 8 * i) = 0;
    }
    __double2 v310 = (void *)v673;
    *(void *)(v673 + 104) = 0;
  }
  if (v310[3])
  {
    double v320 = (void *)v310[2];
    if (v320)
    {
      do
      {
        __double2 v321 = (void *)*v320;
        operator delete(v320);
        double v320 = v321;
      }
      while (v321);
    }
    __double2 v310 = (void *)v673;
    *(void *)(v673 + 16) = 0;
    uint64_t v322 = *(void *)(v673 + 8);
    if (v322)
    {
      for (uint64_t j = 0; j != v322; ++j)
        *(void *)(*(void *)v673 + 8 * j) = 0;
    }
    *(void *)(v673 + 24) = 0;
  }
  double v324 = v310 + 5;
  if (v310[8])
  {
    unint64_t v325 = (void *)v310[7];
    if (v325)
    {
      do
      {
        double v326 = (void *)*v325;
        operator delete(v325);
        unint64_t v325 = v326;
      }
      while (v326);
    }
    *(void *)(v673 + 56) = 0;
    uint64_t v327 = *(void *)(v673 + 48);
    if (v327)
    {
      for (uint64_t k = 0; k != v327; ++k)
        *(void *)(*v324 + 8 * k) = 0;
    }
    *(void *)(v673 + 64) = 0;
  }
  uint64_t v329 = (_OWORD *)v682;
  if ((long long *)v682 != (long long *)((char *)&v682 + 8))
  {
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(v673, *((_DWORD *)v329 + 7), *((_DWORD *)v329 + 7));
      double v334 = (void *)*((void *)v329 + 1);
      if (v334)
      {
        do
        {
          __double2 v335 = v334;
          double v334 = (void *)*v334;
        }
        while (v334);
      }
      else
      {
        do
        {
          __double2 v335 = (_OWORD *)*((void *)v329 + 2);
          BOOL v512 = *(void *)v335 == (void)v329;
          uint64_t v329 = v335;
        }
        while (!v512);
      }
      uint64_t v329 = v335;
    }
    while (v335 != (long long *)((char *)&v682 + 8));
  }
  long double v330 = (void *)*v671;
  if ((void *)*v671 != v272)
  {
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)v324, *((_DWORD *)v330 + 7), *((_DWORD *)v330 + 7));
      double v336 = (void *)v330[1];
      if (v336)
      {
        do
        {
          __double2 v337 = v336;
          double v336 = (void *)*v336;
        }
        while (v336);
      }
      else
      {
        do
        {
          __double2 v337 = (void *)v330[2];
          BOOL v512 = *v337 == (void)v330;
          long double v330 = v337;
        }
        while (!v512);
      }
      long double v330 = v337;
    }
    while (v337 != v272);
  }
  long double v331 = (void *)*v668;
  if ((void *)*v668 != v271)
  {
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)v315, *((_DWORD *)v331 + 7), *((_DWORD *)v331 + 7));
      long double v338 = (void *)v331[1];
      if (v338)
      {
        do
        {
          long double v339 = v338;
          long double v338 = (void *)*v338;
        }
        while (v338);
      }
      else
      {
        do
        {
          long double v339 = (void *)v331[2];
          BOOL v512 = *v339 == (void)v331;
          long double v331 = v339;
        }
        while (!v512);
      }
      long double v331 = v339;
    }
    while (v339 != v271);
  }
  v658 = (void *)(v673 + 80);
  v664 = v324;
  uint64_t v660 = v673 + 176;
  v674[49] = v674[48];
  v674[52] = v674[51];
  v674[55] = v674[54];
  v674[61] = v674[60];
  double v332 = (void *)v674[38];
  iuint64_t i = v674 + 39;
  if (v332 == v674 + 39)
  {
LABEL_907:
    long long v528 = v674;
    uint64_t v529 = (void *)v674[111];
    if (v529 != (void *)v674[112])
    {
      v530 = v674;
      long long v531 = (char *)v674[55];
      unint64_t v532 = v674[56];
      if ((unint64_t)v531 >= v532)
      {
        v534 = (char *)v674[54];
        uint64_t v535 = (v531 - v534) >> 3;
        unint64_t v536 = v535 + 1;
        if ((unint64_t)(v535 + 1) >> 61) {
          abort();
        }
        uint64_t v537 = v532 - (void)v534;
        if (v537 >> 2 > v536) {
          unint64_t v536 = v537 >> 2;
        }
        if ((unint64_t)v537 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v538 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v538 = v536;
        }
        if (v538)
        {
          if (v538 >> 61) {
            goto LABEL_1114;
          }
          v539 = operator new(8 * v538);
        }
        else
        {
          v539 = 0;
        }
        v540 = &v539[8 * v535];
        void *v540 = *v529;
        uint64_t v533 = v540 + 1;
        if (v531 == v534)
        {
          v534 = v531;
        }
        else
        {
          unint64_t v541 = v531 - 8 - v534;
          if (v541 < 0x58) {
            goto LABEL_1142;
          }
          if ((unint64_t)(v534 - v539) < 0x20) {
            goto LABEL_1142;
          }
          uint64_t v542 = (v541 >> 3) + 1;
          v543 = &v539[8 * v535 - 16];
          v544 = v531 - 16;
          uint64_t v545 = v542 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v546 = *(_OWORD *)v544;
            *(v543 - 1) = *((_OWORD *)v544 - 1);
            _OWORD *v543 = v546;
            v543 -= 2;
            v544 -= 32;
            v545 -= 4;
          }
          while (v545);
          v540 -= v542 & 0x3FFFFFFFFFFFFFFCLL;
          v531 -= 8 * (v542 & 0x3FFFFFFFFFFFFFFCLL);
          if (v542 != (v542 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1142:
            do
            {
              uint64_t v547 = *((void *)v531 - 1);
              v531 -= 8;
              *--v540 = v547;
            }
            while (v531 != v534);
            v534 = (char *)v674[54];
          }
        }
        v530 = v674;
        v674[54] = v540;
        v674[55] = v533;
        v674[56] = &v539[8 * v538];
        if (v534) {
          operator delete(v534);
        }
      }
      else
      {
        *(void *)long long v531 = *v529;
        uint64_t v533 = v531 + 8;
      }
      v530[55] = v533;
      operator new();
    }
    v548 = (void *)v674[114];
    v549 = (void *)v674[115];
    if (v548 == v549)
    {
LABEL_962:
      v568 = (unsigned int *)v528[44];
      for (uint64_t m = (unsigned int *)v528[45]; v568 != m; v568 += 28)
      {
        std::__hash_table<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>>>::__erase_unique<gdc::Registry *>(v528 + 5, *((void *)v568 + 13));
        if (!v568[24])
        {
          int8x8_t v570 = *(int8x8_t *)(v673 + 48);
          if (v570)
          {
            unint64_t v571 = *v568;
            uint8x8_t v572 = (uint8x8_t)vcnt_s8(v570);
            v572.i16[0] = vaddlv_u8(v572);
            if (v572.u32[0] > 1uLL)
            {
              unint64_t v573 = *v568;
              if (*(void *)&v570 <= v571) {
                unint64_t v573 = v571 % *(void *)&v570;
              }
            }
            else
            {
              unint64_t v573 = (v570.i32[0] - 1) & v571;
            }
            v574 = *(uint64_t ***)(*v664 + 8 * v573);
            if (v574)
            {
              v575 = *v574;
              if (v575)
              {
                if (v572.u32[0] < 2uLL)
                {
                  uint64_t v576 = *(void *)&v570 - 1;
                  while (1)
                  {
                    uint64_t v578 = v575[1];
                    if (v578 == v571)
                    {
                      if (*((_DWORD *)v575 + 4) == v571) {
                        goto LABEL_964;
                      }
                    }
                    else if ((v578 & v576) != v573)
                    {
                      goto LABEL_965;
                    }
                    v575 = (uint64_t *)*v575;
                    if (!v575) {
                      goto LABEL_965;
                    }
                  }
                }
                do
                {
                  unint64_t v577 = v575[1];
                  if (v577 == v571)
                  {
                    if (*((_DWORD *)v575 + 4) == v571)
                    {
LABEL_964:
                      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(v664, v571);
                      break;
                    }
                  }
                  else
                  {
                    if (v577 >= *(void *)&v570) {
                      v577 %= *(void *)&v570;
                    }
                    if (v577 != v573) {
                      break;
                    }
                  }
                  v575 = (uint64_t *)*v575;
                }
                while (v575);
              }
            }
          }
        }
LABEL_965:
        ;
      }
      if (*(void *)(v673 + 24))
      {
        if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
          dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
        }
        v579 = GEOGetVectorKitRegistryManagerLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "layerDataSets.keys.active.empty()";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
          *(_WORD *)&buf[22] = 1024;
          int v694 = 484;
          _os_log_impl(&dword_1A1780000, v579, OS_LOG_TYPE_ERROR, "Tracking a LayerData with no associated Registry: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
      }
      if (*(void *)(v673 + 104))
      {
        if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
          dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
        }
        v580 = GEOGetVectorKitRegistryManagerLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "layerDataSets.keys.entering.empty()";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
          *(_WORD *)&buf[22] = 1024;
          int v694 = 486;
          _os_log_impl(&dword_1A1780000, v580, OS_LOG_TYPE_ERROR, "Tracking a LayerData with no associated Registry: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
      }
      uint64_t v581 = v528[60];
      uint64_t v582 = v528[61];
      if (v581 != v582)
      {
        v583 = (unsigned __int16 *)v528[58];
        if ((unsigned __int16 *)v528[57] != v583)
        {
LABEL_1003:
          unsigned int v584 = *(unsigned __int16 *)(*(void *)v581 + 40);
          v585 = (unsigned __int16 *)v528[57];
          while (1)
          {
            unsigned int v586 = *v585;
            if (v586 == v584) {
              break;
            }
            ++v585;
            if (v586 > v584 || v585 == v583)
            {
LABEL_1002:
              v581 += 8;
              if (v581 == v582) {
                goto LABEL_1015;
              }
              goto LABEL_1003;
            }
          }
          if (v585 == v583) {
            goto LABEL_1002;
          }
          if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
            dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
          }
          v588 = GEOGetVectorKitRegistryManagerLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "!std::any_of(begin(_registries.cached), end(_registries.cached), f)";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
            *(_WORD *)&buf[22] = 1024;
            int v694 = 492;
            _os_log_impl(&dword_1A1780000, v588, OS_LOG_TYPE_ERROR, "Destroying registry should not be present in any cached set: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
        }
      }
LABEL_1015:
      uint64_t v589 = v528[54];
      uint64_t v590 = v528[55];
      if (v589 != v590)
      {
        v591 = (unsigned __int16 *)v528[58];
        if ((unsigned __int16 *)v528[57] != v591)
        {
LABEL_1020:
          unsigned int v592 = *(unsigned __int16 *)(*(void *)v589 + 40);
          v593 = (unsigned __int16 *)v528[57];
          while (1)
          {
            unsigned int v594 = *v593;
            if (v594 == v592) {
              break;
            }
            ++v593;
            if (v594 > v592 || v593 == v591)
            {
LABEL_1019:
              v589 += 8;
              if (v589 == v590) {
                goto LABEL_1032;
              }
              goto LABEL_1020;
            }
          }
          if (v593 == v591) {
            goto LABEL_1019;
          }
          if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
            dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
          }
          v596 = GEOGetVectorKitRegistryManagerLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "!std::any_of(begin(_registries.entering), end(_registries.entering), f)";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
            *(_WORD *)&buf[22] = 1024;
            int v694 = 493;
            _os_log_impl(&dword_1A1780000, v596, OS_LOG_TYPE_ERROR, "Destroying registry should not be present in any entering set: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
        }
      }
LABEL_1032:
      uint64_t v597 = v528[51];
      uint64_t v598 = v528[52];
      if (v597 != v598)
      {
        v599 = (unsigned __int16 *)v528[58];
        if ((unsigned __int16 *)v528[57] != v599)
        {
LABEL_1037:
          unsigned int v600 = *(unsigned __int16 *)(*(void *)v597 + 40);
          v601 = (unsigned __int16 *)v528[57];
          while (1)
          {
            unsigned int v602 = *v601;
            if (v602 == v600) {
              break;
            }
            ++v601;
            if (v602 > v600 || v601 == v599)
            {
LABEL_1036:
              v597 += 8;
              if (v597 == v598) {
                goto LABEL_1049;
              }
              goto LABEL_1037;
            }
          }
          if (v601 == v599) {
            goto LABEL_1036;
          }
          if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
            dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
          }
          v604 = GEOGetVectorKitRegistryManagerLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "!std::any_of(begin(_registries.exiting), end(_registries.exiting), f)";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
            *(_WORD *)&buf[22] = 1024;
            int v694 = 494;
            _os_log_impl(&dword_1A1780000, v604, OS_LOG_TYPE_ERROR, "Destroying registry should not be present in any exiting set: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
        }
      }
LABEL_1049:
      uint64_t v605 = v528[48];
      uint64_t v606 = v528[49];
      if (v605 != v606)
      {
        v607 = (unsigned __int16 *)v528[58];
        if ((unsigned __int16 *)v528[57] != v607)
        {
LABEL_1054:
          unsigned int v608 = *(unsigned __int16 *)(*(void *)v605 + 40);
          v609 = (unsigned __int16 *)v528[57];
          while (1)
          {
            unsigned int v610 = *v609;
            if (v610 == v608) {
              break;
            }
            ++v609;
            if (v610 > v608 || v609 == v607)
            {
LABEL_1053:
              v605 += 8;
              if (v605 == v606) {
                goto LABEL_1066;
              }
              goto LABEL_1054;
            }
          }
          if (v609 == v607) {
            goto LABEL_1053;
          }
          if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
            dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
          }
          v612 = GEOGetVectorKitRegistryManagerLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "!std::any_of(begin(_registries.active), end(_registries.active), f)";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
            *(_WORD *)&buf[22] = 1024;
            int v694 = 495;
            _os_log_impl(&dword_1A1780000, v612, OS_LOG_TYPE_ERROR, "Destroying registry should not be present in any active set: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
        }
      }
LABEL_1066:
      uint64_t v613 = v528[48];
      v614 = (uint64_t *)v528[49];
      unint64_t v615 = 126 - 2 * __clz(((uint64_t)v614 - v613) >> 3);
      if (v614 == (uint64_t *)v613) {
        uint64_t v616 = 0;
      }
      else {
        uint64_t v616 = v615;
      }
      std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v613, v614, v616, 1);
      uint64_t v617 = v528[54];
      v618 = (uint64_t *)v528[55];
      unint64_t v619 = 126 - 2 * __clz(((uint64_t)v618 - v617) >> 3);
      if (v618 == (uint64_t *)v617) {
        uint64_t v620 = 0;
      }
      else {
        uint64_t v620 = v619;
      }
      std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v617, v618, v620, 1);
      uint64_t v621 = v528[51];
      v622 = (uint64_t *)v528[52];
      unint64_t v623 = 126 - 2 * __clz(((uint64_t)v622 - v621) >> 3);
      if (v622 == (uint64_t *)v621) {
        uint64_t v624 = 0;
      }
      else {
        uint64_t v624 = v623;
      }
      std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v621, v622, v624, 1);
      uint64_t v625 = v528[60];
      v626 = (uint64_t *)v528[61];
      unint64_t v627 = 126 - 2 * __clz(((uint64_t)v626 - v625) >> 3);
      if (v626 == (uint64_t *)v625) {
        uint64_t v628 = 0;
      }
      else {
        uint64_t v628 = v627;
      }
      std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v625, v626, v628, 1);
      v629 = (unint64_t *)v528[41];
      v630 = (unint64_t *)v528[42];
      if (v629 != v630)
      {
        v631 = v528 + 5;
        uint64_t v672 = v528[42];
        do
        {
          unint64_t v632 = *v629;
          v634 = (unint64_t *)v528[52];
          unint64_t v633 = v528[53];
          if ((unint64_t)v634 >= v633)
          {
            v636 = (unint64_t *)v528[51];
            uint64_t v637 = v634 - v636;
            unint64_t v638 = v637 + 1;
            if ((unint64_t)(v637 + 1) >> 61) {
              abort();
            }
            uint64_t v639 = v633 - (void)v636;
            if (v639 >> 2 > v638) {
              unint64_t v638 = v639 >> 2;
            }
            if ((unint64_t)v639 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v640 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v640 = v638;
            }
            if (v640)
            {
              if (v640 >> 61) {
                goto LABEL_1114;
              }
              v641 = operator new(8 * v640);
            }
            else
            {
              v641 = 0;
            }
            v642 = (unint64_t *)&v641[8 * v637];
            unint64_t *v642 = v632;
            v635 = v642 + 1;
            if (v634 == v636)
            {
              v636 = v634;
            }
            else
            {
              unint64_t v643 = (char *)(v634 - 1) - (char *)v636;
              if (v643 < 0x58) {
                goto LABEL_1143;
              }
              if ((unint64_t)((char *)v636 - v641) < 0x20) {
                goto LABEL_1143;
              }
              uint64_t v644 = (v643 >> 3) + 1;
              v645 = &v641[8 * v637 - 16];
              v646 = v634 - 2;
              uint64_t v647 = v644 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v648 = *(_OWORD *)v646;
                *(v645 - 1) = *((_OWORD *)v646 - 1);
                _OWORD *v645 = v648;
                v645 -= 2;
                v646 -= 4;
                v647 -= 4;
              }
              while (v647);
              v642 -= v644 & 0x3FFFFFFFFFFFFFFCLL;
              v634 -= v644 & 0x3FFFFFFFFFFFFFFCLL;
              if (v644 != (v644 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1143:
                do
                {
                  unint64_t v649 = *--v634;
                  *--v642 = v649;
                }
                while (v634 != v636);
                v636 = (unint64_t *)v674[51];
              }
            }
            v674[51] = v642;
            v674[52] = v635;
            v674[53] = &v641[8 * v640];
            if (v636) {
              operator delete(v636);
            }
            v630 = (unint64_t *)v672;
          }
          else
          {
            unint64_t *v634 = v632;
            v635 = v634 + 1;
          }
          v674[52] = v635;
          long long v528 = v674;
          std::__hash_table<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>>>::__erase_unique<gdc::Registry *>(v631, *v629++);
        }
        while (v629 != v630);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v673 + 176));
      v650 = (void *)*((void *)&v682 + 1);
      *(void *)(v673 + 168) = v682;
      *(void *)(v673 + 176) = v650;
      uint64_t v651 = v683;
      *(void *)(v673 + 184) = v683;
      if (v651)
      {
        v650[2] = v660;
        *(void *)&long long v682 = (char *)&v682 + 8;
        *((void *)&v682 + 1) = 0;
        uint64_t v683 = 0;
        v650 = 0;
      }
      else
      {
        *(void *)(v673 + 168) = v660;
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v650);
      if (!*(void *)v690) {
        goto LABEL_1129;
      }
      (*(void (**)(void))(**(void **)v690 + 48))(*(void *)v690);
      if (*(_WORD **)v690 == v689)
      {
        (*(void (**)(_WORD *))(*(void *)v689 + 32))(v689);
      }
      else if (*(void *)v690)
      {
        (*(void (**)(void))(**(void **)v690 + 40))();
      }
      return;
    }
    v550 = (char *)v674[52];
    while (1)
    {
      unint64_t v552 = v528[53];
      if ((unint64_t)v550 >= v552) {
        break;
      }
      *(void *)v550 = *v548;
      v551 = v550 + 8;
LABEL_935:
      v528[52] = (uint64_t)v551;
      ++v548;
      v550 = v551;
      if (v548 == v549) {
        goto LABEL_962;
      }
    }
    v553 = (char *)v528[51];
    uint64_t v554 = (v550 - v553) >> 3;
    unint64_t v555 = v554 + 1;
    if ((unint64_t)(v554 + 1) >> 61) {
      abort();
    }
    uint64_t v556 = v552 - (void)v553;
    if (v556 >> 2 > v555) {
      unint64_t v555 = v556 >> 2;
    }
    if ((unint64_t)v556 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v557 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v557 = v555;
    }
    if (v557)
    {
      if (v557 >> 61) {
        goto LABEL_1114;
      }
      v558 = operator new(8 * v557);
    }
    else
    {
      v558 = 0;
    }
    v559 = &v558[8 * v554];
    void *v559 = *v548;
    v551 = (char *)(v559 + 1);
    if (v550 == v553)
    {
      v553 = v550;
      long long v528 = v674;
      goto LABEL_953;
    }
    unint64_t v560 = v550 - 8 - v553;
    if (v560 < 0x168
      || &v558[v550 - v553 - 8 - (v560 & 0xFFFFFFFFFFFFFFF8)] > &v558[v550 - v553 - 8]
      || &v550[-(v560 & 0xFFFFFFFFFFFFFFF8) - 8] > v550 - 8
      || (unint64_t)(v553 - v558) < 0x20)
    {
      v561 = v550;
      long long v528 = v674;
    }
    else
    {
      uint64_t v563 = (v560 >> 3) + 1;
      v561 = &v550[-8 * (v563 & 0x3FFFFFFFFFFFFFFCLL)];
      v564 = &v558[8 * v554 - 16];
      v565 = v550 - 16;
      uint64_t v566 = v563 & 0x3FFFFFFFFFFFFFFCLL;
      long long v528 = v674;
      do
      {
        long long v567 = *(_OWORD *)v565;
        *(v564 - 1) = *((_OWORD *)v565 - 1);
        _OWORD *v564 = v567;
        v564 -= 2;
        v565 -= 32;
        v566 -= 4;
      }
      while (v566);
      v559 -= v563 & 0x3FFFFFFFFFFFFFFCLL;
      if (v563 == (v563 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_953;
      }
    }
    do
    {
      uint64_t v562 = *((void *)v561 - 1);
      v561 -= 8;
      *--v559 = v562;
    }
    while (v561 != v553);
    v553 = (char *)v528[51];
LABEL_953:
    v528[51] = (uint64_t)v559;
    v528[52] = (uint64_t)v551;
    v528[53] = (uint64_t)&v558[8 * v557];
    if (v553) {
      operator delete(v553);
    }
    goto LABEL_935;
  }
  v669 = v674 + 5;
  v657 = v674 + 7;
LABEL_560:
  unint64_t v340 = v332[17];
  int v341 = *((_DWORD *)v332 + 32);
  if (v341) {
    double v342 = 0;
  }
  else {
    double v342 = (unsigned int *)(v332 + 4);
  }
  if (v341)
  {
    double v344 = (unint64_t *)v674[49];
    unint64_t v343 = v674[50];
    if ((unint64_t)v344 >= v343)
    {
      unint64_t v350 = (unint64_t *)v674[48];
      uint64_t v351 = v344 - v350;
      unint64_t v352 = v351 + 1;
      if ((unint64_t)(v351 + 1) >> 61) {
        abort();
      }
      uint64_t v353 = v343 - (void)v350;
      if (v353 >> 2 > v352) {
        unint64_t v352 = v353 >> 2;
      }
      if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v354 = v352;
      }
      if (v354)
      {
        if (v354 >> 61) {
          goto LABEL_1114;
        }
        double v355 = operator new(8 * v354);
      }
      else
      {
        double v355 = 0;
      }
      float64x2_t v361 = (unint64_t *)&v355[8 * v351];
      *float64x2_t v361 = v340;
      __double2 v345 = v361 + 1;
      if (v344 == v350)
      {
        unint64_t v350 = v344;
        double v346 = v674;
      }
      else
      {
        unint64_t v362 = (char *)(v344 - 1) - (char *)v350;
        double v346 = v674;
        if (v362 < 0x58) {
          goto LABEL_1144;
        }
        if ((unint64_t)((char *)v350 - v355) < 0x20) {
          goto LABEL_1144;
        }
        uint64_t v363 = (v362 >> 3) + 1;
        uint64_t v364 = &v355[8 * v351 - 16];
        BOOL v365 = v344 - 2;
        uint64_t v366 = v363 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v367 = *(_OWORD *)v365;
          *(v364 - 1) = *((_OWORD *)v365 - 1);
          *uint64_t v364 = v367;
          v364 -= 2;
          v365 -= 4;
          v366 -= 4;
        }
        while (v366);
        v361 -= v363 & 0x3FFFFFFFFFFFFFFCLL;
        v344 -= v363 & 0x3FFFFFFFFFFFFFFCLL;
        if (v363 != (v363 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1144:
          do
          {
            unint64_t v368 = *--v344;
            *--float64x2_t v361 = v368;
          }
          while (v344 != v350);
          unint64_t v350 = (unint64_t *)v674[48];
        }
      }
      v346[48] = v361;
      v346[49] = v345;
      v346[50] = &v355[8 * v354];
      if (v350) {
        operator delete(v350);
      }
      iuint64_t i = v674 + 39;
    }
    else
    {
      unint64_t *v344 = v340;
      __double2 v345 = v344 + 1;
      double v346 = v674;
    }
    v346[49] = v345;
    goto LABEL_677;
  }
  int8x8_t v347 = *(int8x8_t *)(v340 + 8);
  if (!*(void *)&v347) {
    goto LABEL_612;
  }
  uint8x8_t v348 = (uint8x8_t)vcnt_s8(v347);
  v348.i16[0] = vaddlv_u8(v348);
  if (v348.u32[0] > 1uLL)
  {
    uint64_t v349 = 0x3B7BEE224038A636;
    if (*(void *)&v347 <= 0x3B7BEE224038A636uLL) {
      uint64_t v349 = 0x3B7BEE224038A636uLL % *(void *)&v347;
    }
  }
  else
  {
    uint64_t v349 = (*(void *)&v347 - 1) & 0x3B7BEE224038A636;
  }
  __double2 v356 = *(void **)(*(void *)v340 + 8 * v349);
  if (!v356 || (long double v357 = (void *)*v356) == 0)
  {
LABEL_612:
    *(void *)buf = 0x3B7BEE224038A636;
    *(void *)&buf[8] = "md::MapDataType]";
    *(void *)&buf[16] = 15;
    operator new();
  }
  if (v348.u32[0] < 2uLL)
  {
    uint64_t v358 = *(void *)&v347 - 1;
    while (1)
    {
      uint64_t v360 = v357[1];
      if (v360 == 0x3B7BEE224038A636)
      {
        if (v357[2] == 0x3B7BEE224038A636) {
          goto LABEL_610;
        }
      }
      else if ((v360 & v358) != v349)
      {
        goto LABEL_612;
      }
      long double v357 = (void *)*v357;
      if (!v357) {
        goto LABEL_612;
      }
    }
  }
  while (1)
  {
    unint64_t v359 = v357[1];
    if (v359 == 0x3B7BEE224038A636) {
      break;
    }
    if (v359 >= *(void *)&v347) {
      v359 %= *(void *)&v347;
    }
    if (v359 != v349) {
      goto LABEL_612;
    }
LABEL_585:
    long double v357 = (void *)*v357;
    if (!v357) {
      goto LABEL_612;
    }
  }
  if (v357[2] != 0x3B7BEE224038A636) {
    goto LABEL_585;
  }
LABEL_610:
  uint64_t v369 = v357[5];
  if (*(void *)(v369 + 8) != 0x3B7BEE224038A636 || !*(void *)(v369 + 32)) {
    goto LABEL_612;
  }
  unint64_t v370 = *v342;
  int8x8_t v371 = *(int8x8_t *)(v673 + 8);
  if (!*(void *)&v371) {
    goto LABEL_633;
  }
  uint8x8_t v372 = (uint8x8_t)vcnt_s8(v371);
  v372.i16[0] = vaddlv_u8(v372);
  if (v372.u32[0] > 1uLL)
  {
    unint64_t v373 = *v342;
    if (*(void *)&v371 <= v370) {
      unint64_t v373 = v370 % *(void *)&v371;
    }
  }
  else
  {
    unint64_t v373 = (v371.i32[0] - 1) & v370;
  }
  long double v374 = *(uint64_t ***)(*(void *)v673 + 8 * v373);
  if (!v374 || (float64x2_t v375 = *v374) == 0)
  {
LABEL_633:
    int8x8_t v379 = *(int8x8_t *)(v673 + 48);
    if (!*(void *)&v379) {
      goto LABEL_653;
    }
    uint8x8_t v380 = (uint8x8_t)vcnt_s8(v379);
    v380.i16[0] = vaddlv_u8(v380);
    if (v380.u32[0] > 1uLL)
    {
      unint64_t v381 = *v342;
      if (*(void *)&v379 <= v370) {
        unint64_t v381 = v370 % *(void *)&v379;
      }
    }
    else
    {
      unint64_t v381 = (v379.i32[0] - 1) & v370;
    }
    double v382 = *(uint64_t ***)(*v324 + 8 * v381);
    if (!v382 || (double v383 = *v382) == 0)
    {
LABEL_653:
      uint64_t v388 = (unint64_t *)v674[61];
      unint64_t v387 = v674[62];
      if ((unint64_t)v388 < v387)
      {
        *uint64_t v388 = v340;
        v674[61] = v388 + 1;
        goto LABEL_677;
      }
      v389 = (unint64_t *)v674[60];
      uint64_t v390 = v388 - v389;
      unint64_t v391 = v390 + 1;
      if ((unint64_t)(v390 + 1) >> 61) {
LABEL_1122:
      }
        abort();
      uint64_t v392 = v387 - (void)v389;
      if (v392 >> 2 > v391) {
        unint64_t v391 = v392 >> 2;
      }
      if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v393 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v393 = v391;
      }
      if (v393)
      {
        if (v393 >> 61) {
          goto LABEL_1114;
        }
        double v394 = operator new(8 * v393);
      }
      else
      {
        double v394 = 0;
      }
      double v395 = (unint64_t *)&v394[8 * v390];
      *double v395 = v340;
      double v396 = v395 + 1;
      if (v388 == v389)
      {
        v389 = v388;
        long double v398 = v674;
      }
      else
      {
        unint64_t v397 = (char *)(v388 - 1) - (char *)v389;
        long double v398 = v674;
        if (v397 < 0x58) {
          goto LABEL_1145;
        }
        if ((unint64_t)((char *)v389 - v394) < 0x20) {
          goto LABEL_1145;
        }
        uint64_t v399 = (v397 >> 3) + 1;
        double v400 = &v394[8 * v390 - 16];
        v401 = v388 - 2;
        uint64_t v402 = v399 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v403 = *(_OWORD *)v401;
          *(v400 - 1) = *((_OWORD *)v401 - 1);
          _OWORD *v400 = v403;
          v400 -= 2;
          v401 -= 4;
          v402 -= 4;
        }
        while (v402);
        v395 -= v399 & 0x3FFFFFFFFFFFFFFCLL;
        v388 -= v399 & 0x3FFFFFFFFFFFFFFCLL;
        if (v399 != (v399 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1145:
          do
          {
            unint64_t v404 = *--v388;
            *--double v395 = v404;
          }
          while (v388 != v389);
          v389 = (unint64_t *)v674[60];
        }
      }
      v398[60] = v395;
      v398[61] = v396;
      v398[62] = &v394[8 * v393];
      if (v389) {
        operator delete(v389);
      }
      iuint64_t i = v674 + 39;
      v398[61] = v396;
      goto LABEL_677;
    }
    if (v380.u32[0] < 2uLL)
    {
      uint64_t v384 = *(void *)&v379 - 1;
      while (1)
      {
        uint64_t v386 = v383[1];
        if (v386 == v370)
        {
          if (*((_DWORD *)v383 + 4) == v370) {
            goto LABEL_685;
          }
        }
        else if ((v386 & v384) != v381)
        {
          goto LABEL_653;
        }
        double v383 = (uint64_t *)*v383;
        if (!v383) {
          goto LABEL_653;
        }
      }
    }
    while (1)
    {
      unint64_t v385 = v383[1];
      if (v385 == v370)
      {
        if (*((_DWORD *)v383 + 4) == v370)
        {
LABEL_685:
          __double2 v411 = (unint64_t *)v674[52];
          unint64_t v410 = v674[53];
          if ((unint64_t)v411 < v410)
          {
            *__double2 v411 = v340;
            long double v412 = v411 + 1;
            goto LABEL_753;
          }
          unint64_t v421 = (unint64_t *)v674[51];
          uint64_t v422 = v411 - v421;
          unint64_t v423 = v422 + 1;
          if ((unint64_t)(v422 + 1) >> 61) {
            goto LABEL_1122;
          }
          uint64_t v424 = v410 - (void)v421;
          if (v424 >> 2 > v423) {
            unint64_t v423 = v424 >> 2;
          }
          if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v425 = v423;
          }
          if (!v425)
          {
            uint64_t v427 = 0;
            goto LABEL_742;
          }
          if (v425 >> 61) {
            goto LABEL_1114;
          }
          unint64_t v426 = v425;
          uint64_t v427 = operator new(8 * v425);
          unint64_t v425 = v426;
LABEL_742:
          v446 = (unint64_t *)&v427[8 * v422];
          unint64_t *v446 = v340;
          long double v412 = v446 + 1;
          if (v411 == v421)
          {
            unint64_t v421 = v411;
          }
          else
          {
            unint64_t v447 = (char *)(v411 - 1) - (char *)v421;
            if (v447 < 0x58) {
              goto LABEL_1146;
            }
            if ((unint64_t)((char *)v421 - v427) < 0x20) {
              goto LABEL_1146;
            }
            uint64_t v448 = (v447 >> 3) + 1;
            v449 = &v427[8 * v422 - 16];
            uint64_t v450 = v411 - 2;
            uint64_t v451 = v448 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v452 = *(_OWORD *)v450;
              *(v449 - 1) = *((_OWORD *)v450 - 1);
              _OWORD *v449 = v452;
              v449 -= 2;
              v450 -= 4;
              v451 -= 4;
            }
            while (v451);
            v446 -= v448 & 0x3FFFFFFFFFFFFFFCLL;
            v411 -= v448 & 0x3FFFFFFFFFFFFFFCLL;
            if (v448 != (v448 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1146:
              do
              {
                unint64_t v453 = *--v411;
                *--v446 = v453;
              }
              while (v411 != v421);
              unint64_t v421 = (unint64_t *)v674[51];
            }
          }
          v674[51] = v446;
          v674[52] = v412;
          v674[53] = &v427[8 * v425];
          if (v421) {
            operator delete(v421);
          }
LABEL_753:
          v674[52] = v412;
          std::__hash_table<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>>>::__erase_unique<gdc::Registry *>(v669, v340);
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)buf, v324, v383);
          if (*(void *)buf) {
            operator delete(*(void **)buf);
          }
          iuint64_t i = v674 + 39;
LABEL_677:
          long double v405 = (void *)v332[1];
          if (v405)
          {
            do
            {
              long double v406 = v405;
              long double v405 = (void *)*v405;
            }
            while (v405);
          }
          else
          {
            do
            {
              long double v406 = (void *)v332[2];
              BOOL v512 = *v406 == (void)v332;
              double v332 = v406;
            }
            while (!v512);
          }
          double v332 = v406;
          if (v406 == ii) {
            goto LABEL_907;
          }
          goto LABEL_560;
        }
      }
      else
      {
        if (v385 >= *(void *)&v379) {
          v385 %= *(void *)&v379;
        }
        if (v385 != v381) {
          goto LABEL_653;
        }
      }
      double v383 = (uint64_t *)*v383;
      if (!v383) {
        goto LABEL_653;
      }
    }
  }
  if (v372.u32[0] < 2uLL)
  {
    uint64_t v376 = *(void *)&v371 - 1;
    while (1)
    {
      uint64_t v378 = v375[1];
      if (v378 == v370)
      {
        if (*((_DWORD *)v375 + 4) == v370) {
          goto LABEL_683;
        }
      }
      else if ((v378 & v376) != v373)
      {
        goto LABEL_633;
      }
      float64x2_t v375 = (uint64_t *)*v375;
      if (!v375) {
        goto LABEL_633;
      }
    }
  }
  while (2)
  {
    unint64_t v377 = v375[1];
    if (v377 != v370)
    {
      if (v377 >= *(void *)&v371) {
        v377 %= *(void *)&v371;
      }
      if (v377 != v373) {
        goto LABEL_633;
      }
      goto LABEL_623;
    }
    if (*((_DWORD *)v375 + 4) != v370)
    {
LABEL_623:
      float64x2_t v375 = (uint64_t *)*v375;
      if (!v375) {
        goto LABEL_633;
      }
      continue;
    }
    break;
  }
LABEL_683:
  double v408 = (unint64_t *)v674[49];
  unint64_t v407 = v674[50];
  if ((unint64_t)v408 >= v407)
  {
    long double v413 = (unint64_t *)v674[48];
    int64_t v414 = (char *)v408 - (char *)v413;
    uint64_t v415 = v408 - v413;
    unint64_t v416 = v415 + 1;
    if ((unint64_t)(v415 + 1) >> 61) {
      abort();
    }
    uint64_t v417 = v407 - (void)v413;
    if (v417 >> 2 > v416) {
      unint64_t v416 = v417 >> 2;
    }
    if ((unint64_t)v417 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v418 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v418 = v416;
    }
    if (v418)
    {
      if (v418 >> 61) {
        goto LABEL_1114;
      }
      unint64_t v419 = v418;
      v420 = operator new(8 * v418);
      unint64_t v418 = v419;
      int64_t v414 = (char *)v408 - (char *)v413;
    }
    else
    {
      v420 = 0;
    }
    v428 = (unint64_t *)&v420[8 * v415];
    unint64_t *v428 = v340;
    double v409 = v428 + 1;
    if (v408 == v413)
    {
      long double v413 = v408;
    }
    else
    {
      unint64_t v429 = (char *)(v408 - 1) - (char *)v413;
      if (v429 < 0x58) {
        goto LABEL_1147;
      }
      if ((unint64_t)((char *)v408 - &v420[v414]) < 0x20) {
        goto LABEL_1147;
      }
      uint64_t v430 = (v429 >> 3) + 1;
      v431 = &v420[8 * v415 - 16];
      int v432 = v408 - 2;
      uint64_t v433 = v430 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v434 = *(_OWORD *)v432;
        *(v431 - 1) = *((_OWORD *)v432 - 1);
        _OWORD *v431 = v434;
        v431 -= 2;
        v432 -= 4;
        v433 -= 4;
      }
      while (v433);
      v428 -= v430 & 0x3FFFFFFFFFFFFFFCLL;
      v408 -= v430 & 0x3FFFFFFFFFFFFFFCLL;
      if (v430 != (v430 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1147:
        do
        {
          unint64_t v435 = *--v408;
          *--v428 = v435;
        }
        while (v408 != v413);
        long double v413 = (unint64_t *)v674[48];
      }
    }
    v674[48] = v428;
    v674[49] = v409;
    v674[50] = &v420[8 * v418];
    if (v413)
    {
      double v436 = v409;
      operator delete(v413);
      double v409 = v436;
    }
    iuint64_t i = v674 + 39;
    goto LABEL_718;
  }
  *double v408 = v340;
  double v409 = v408 + 1;
LABEL_718:
  v674[49] = v409;
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)buf, (void *)v673, v375);
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  int8x8_t v437 = *(int8x8_t *)(v673 + 88);
  if (!*(void *)&v437) {
    goto LABEL_677;
  }
  unint64_t v438 = *v342;
  uint8x8_t v439 = (uint8x8_t)vcnt_s8(v437);
  v439.i16[0] = vaddlv_u8(v439);
  if (v439.u32[0] > 1uLL)
  {
    unint64_t v440 = *v342;
    if (*(void *)&v437 <= v438) {
      unint64_t v440 = v438 % *(void *)&v437;
    }
  }
  else
  {
    unint64_t v440 = (v437.i32[0] - 1) & v438;
  }
  v441 = *(uint64_t ***)(*v658 + 8 * v440);
  if (!v441) {
    goto LABEL_677;
  }
  v442 = *v441;
  if (!*v441) {
    goto LABEL_677;
  }
  if (v439.u32[0] < 2uLL)
  {
    uint64_t v443 = *(void *)&v437 - 1;
    while (1)
    {
      uint64_t v445 = v442[1];
      if (v445 == v438)
      {
        if (*((_DWORD *)v442 + 4) == v438) {
          goto LABEL_756;
        }
      }
      else if ((v445 & v443) != v440)
      {
        goto LABEL_677;
      }
      v442 = (uint64_t *)*v442;
      if (!v442) {
        goto LABEL_677;
      }
    }
  }
  while (2)
  {
    unint64_t v444 = v442[1];
    if (v444 != v438)
    {
      if (v444 >= *(void *)&v437) {
        v444 %= *(void *)&v437;
      }
      if (v444 != v440) {
        goto LABEL_677;
      }
      goto LABEL_730;
    }
    if (*((_DWORD *)v442 + 4) != v438)
    {
LABEL_730:
      v442 = (uint64_t *)*v442;
      if (!v442) {
        goto LABEL_677;
      }
      continue;
    }
    break;
  }
LABEL_756:
  unint64_t v455 = v674[55];
  unint64_t v454 = v674[56];
  if (v455 < v454)
  {
    *(void *)unint64_t v455 = v340;
    v455 += 8;
    uint64_t v456 = (void *)v455;
    goto LABEL_780;
  }
  unint64_t v457 = (unsigned char *)v674[54];
  uint64_t v458 = (uint64_t)(v455 - (void)v457) >> 3;
  unint64_t v459 = v458 + 1;
  if ((unint64_t)(v458 + 1) >> 61) {
    abort();
  }
  uint64_t v460 = v454 - (void)v457;
  if (v460 >> 2 > v459) {
    unint64_t v459 = v460 >> 2;
  }
  if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v461 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v461 = v459;
  }
  if (!v461)
  {
    float64x2_t v463 = 0;
    goto LABEL_768;
  }
  if (v461 >> 61) {
LABEL_1114:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unint64_t v462 = v461;
  float64x2_t v463 = operator new(8 * v461);
  unint64_t v461 = v462;
LABEL_768:
  v464 = (unint64_t *)&v463[8 * v458];
  unint64_t *v464 = v340;
  uint64_t v456 = v464 + 1;
  if ((unsigned char *)v455 == v457)
  {
    unint64_t v457 = (unsigned char *)v455;
  }
  else
  {
    unint64_t v465 = v455 - 8 - (void)v457;
    if (v465 < 0x58) {
      goto LABEL_1148;
    }
    if ((unint64_t)(v457 - v463) < 0x20) {
      goto LABEL_1148;
    }
    uint64_t v466 = (v465 >> 3) + 1;
    long double v467 = &v463[8 * v458 - 16];
    v468 = (long long *)(v455 - 16);
    uint64_t v469 = v466 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v470 = *v468;
      *(v467 - 1) = *(v468 - 1);
      *long double v467 = v470;
      v467 -= 2;
      v468 -= 2;
      v469 -= 4;
    }
    while (v469);
    v464 -= v466 & 0x3FFFFFFFFFFFFFFCLL;
    v455 -= 8 * (v466 & 0x3FFFFFFFFFFFFFFCLL);
    if (v466 != (v466 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1148:
      do
      {
        unint64_t v471 = *(void *)(v455 - 8);
        v455 -= 8;
        *--v464 = v471;
      }
      while ((unsigned char *)v455 != v457);
      unint64_t v457 = (unsigned char *)v674[54];
    }
  }
  v674[54] = v464;
  v674[55] = v456;
  v674[56] = &v463[8 * v461];
  if (v457) {
    operator delete(v457);
  }
  iuint64_t i = v674 + 39;
LABEL_780:
  v674[55] = v456;
  v472 = (uint64_t *)v674[2];
  if (!v472)
  {
LABEL_905:
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)buf, v658, v442);
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
    goto LABEL_677;
  }
  unint64_t v473 = 0x9DDFEA08EB382D69 * (((8 * v340) + 8) ^ HIDWORD(v340));
  unint64_t v474 = 0x9DDFEA08EB382D69 * (HIDWORD(v340) ^ (v473 >> 47) ^ v473);
  unint64_t v662 = 0x9DDFEA08EB382D69 * (v474 ^ (v474 >> 47));
  while (2)
  {
    *(void *)buf = v340;
    uint64_t v475 = v472[7];
    if (v475)
    {
      (*(void (**)(uint8_t **__return_ptr))(*(void *)v475 + 48))(&v676);
      if (v676)
      {
        (*(void (**)(uint8_t *, unint64_t))(*(void *)v676 + 16))(v676, v340);
        unint64_t v476 = v674[6];
        if (v476)
        {
          uint8x8_t v477 = (uint8x8_t)vcnt_s8((int8x8_t)v476);
          v477.i16[0] = vaddlv_u8(v477);
          if (v477.u32[0] > 1uLL)
          {
            unint64_t v455 = v662;
            if (v662 >= v476) {
              unint64_t v455 = v662 % v476;
            }
          }
          else
          {
            unint64_t v455 = v662 & (v476 - 1);
          }
          uint64_t v478 = *(void ***)(*v669 + 8 * v455);
          if (v478)
          {
            BOOL v479 = *v478;
            if (*v478)
            {
              if (v477.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v481 = v479[1];
                  if (v481 == v662)
                  {
                    if (v479[2] == v340) {
                      goto LABEL_864;
                    }
                  }
                  else if ((v481 & (v476 - 1)) != v455)
                  {
                    goto LABEL_805;
                  }
                  BOOL v479 = (void *)*v479;
                  if (!v479) {
                    goto LABEL_805;
                  }
                }
              }
              do
              {
                unint64_t v480 = v479[1];
                if (v480 == v662)
                {
                  if (v479[2] == v340) {
                    goto LABEL_864;
                  }
                }
                else
                {
                  if (v480 >= v476) {
                    v480 %= v476;
                  }
                  if (v480 != v455) {
                    break;
                  }
                }
                BOOL v479 = (void *)*v479;
              }
              while (v479);
            }
          }
        }
LABEL_805:
        BOOL v479 = operator new(0x30uLL);
        *(void *)buf = v479;
        *(void *)&buf[8] = v674 + 7;
        *BOOL v479 = 0;
        v479[1] = v662;
        v479[2] = v340;
        v479[3] = 0;
        v479[4] = 0;
        v479[5] = 0;
        buf[16] = 1;
        float v482 = (float)(unint64_t)(v674[8] + 1);
        float v483 = *((float *)v674 + 18);
        if (!v476 || (float)(v483 * (float)v476) < v482)
        {
          BOOL v484 = (v476 & (v476 - 1)) != 0;
          if (v476 < 3) {
            BOOL v484 = 1;
          }
          unint64_t v485 = v484 | (2 * v476);
          unint64_t v486 = vcvtps_u32_f32(v482 / v483);
          if (v485 <= v486) {
            size_t prime = v486;
          }
          else {
            size_t prime = v485;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
            unint64_t v476 = v674[6];
          }
          if (prime > v476)
          {
LABEL_817:
            if (prime >> 61) {
              goto LABEL_1114;
            }
            double v488 = operator new(8 * prime);
            int v489 = (void *)*v669;
            uint64_t *v669 = (uint64_t)v488;
            if (v489) {
              operator delete(v489);
            }
            uint64_t v490 = 0;
            v674[6] = prime;
            do
              *(void *)(*v669 + 8 * v490++) = 0;
            while (prime != v490);
            v491 = (void *)*v657;
            if (!*v657) {
              goto LABEL_841;
            }
            size_t v492 = v491[1];
            size_t v493 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              size_t v494 = v492 & v493;
              *(void *)(*v669 + 8 * v494) = v657;
              for (n = (void *)*v491; *v491; n = (void *)*v491)
              {
                size_t v496 = n[1] & v493;
                if (v496 == v494)
                {
                  v491 = n;
                }
                else if (*(void *)(*v669 + 8 * v496))
                {
                  void *v491 = *n;
                  uint64_t v497 = 8 * v496;
                  void *n = **(void **)(*v669 + v497);
                  **(void **)(*v669 + v497) = n;
                }
                else
                {
                  *(void *)(*v669 + 8 * v496) = v491;
                  v491 = n;
                  size_t v494 = v496;
                }
              }
              goto LABEL_841;
            }
            if (v492 >= prime) {
              v492 %= prime;
            }
            *(void *)(*v669 + 8 * v492) = v657;
            uint64_t v501 = (void *)*v491;
            if (!*v491)
            {
LABEL_841:
              unint64_t v476 = prime;
              goto LABEL_842;
            }
            while (2)
            {
              size_t v503 = v501[1];
              if (v503 >= prime) {
                v503 %= prime;
              }
              if (v503 != v492)
              {
                if (!*(void *)(*v669 + 8 * v503))
                {
                  *(void *)(*v669 + 8 * v503) = v491;
LABEL_846:
                  v491 = v501;
                  uint64_t v501 = (void *)*v501;
                  size_t v492 = v503;
                  if (!v501) {
                    goto LABEL_841;
                  }
                  continue;
                }
                void *v491 = *v501;
                uint64_t v502 = 8 * v503;
                *uint64_t v501 = **(void **)(*v669 + v502);
                **(void **)(*v669 + v502) = v501;
                uint64_t v501 = v491;
              }
              break;
            }
            size_t v503 = v492;
            goto LABEL_846;
          }
          if (prime < v476)
          {
            unint64_t v498 = vcvtps_u32_f32((float)(unint64_t)v674[8] / *((float *)v674 + 18));
            if (v476 < 3
              || (uint8x8_t v499 = (uint8x8_t)vcnt_s8((int8x8_t)v476), v499.i16[0] = vaddlv_u8(v499), v499.u32[0] > 1uLL))
            {
              unint64_t v498 = std::__next_prime(v498);
            }
            else
            {
              uint64_t v500 = 1 << -(char)__clz(v498 - 1);
              if (v498 >= 2) {
                unint64_t v498 = v500;
              }
            }
            if (prime <= v498) {
              size_t prime = v498;
            }
            if (prime >= v476)
            {
              unint64_t v476 = v674[6];
            }
            else
            {
              if (prime) {
                goto LABEL_817;
              }
              long long v527 = (void *)*v669;
              uint64_t *v669 = 0;
              if (v527) {
                operator delete(v527);
              }
              unint64_t v476 = 0;
              v674[6] = 0;
            }
          }
LABEL_842:
          if ((v476 & (v476 - 1)) != 0)
          {
            unint64_t v455 = v662;
            if (v662 >= v476) {
              unint64_t v455 = v662 % v476;
            }
          }
          else
          {
            unint64_t v455 = (v476 - 1) & v662;
          }
        }
        uint64_t v504 = *v669;
        uint64_t v505 = *(void **)(*v669 + 8 * v455);
        if (v505)
        {
          *BOOL v479 = *v505;
          goto LABEL_862;
        }
        *BOOL v479 = *v657;
        void *v657 = v479;
        *(void *)(v504 + 8 * v455) = v657;
        if (*v479)
        {
          unint64_t v506 = *(void *)(*v479 + 8);
          if ((v476 & (v476 - 1)) != 0)
          {
            if (v506 >= v476) {
              v506 %= v476;
            }
          }
          else
          {
            v506 &= v476 - 1;
          }
          uint64_t v505 = (void *)(*v669 + 8 * v506);
LABEL_862:
          *uint64_t v505 = v479;
        }
        ++v674[8];
LABEL_864:
        unint64_t v455 = v472[2];
        int v508 = *((_DWORD *)v472 + 6);
        int v507 = *((_DWORD *)v472 + 7);
        v655 = v676;
        v676 = 0;
        uint64_t v509 = v479[3];
        unint64_t v510 = v479[4];
        uint64_t v511 = v509;
        if (v509 != v510)
        {
          while (1)
          {
            BOOL v512 = v455 == *(void *)v511 && v508 == *(_DWORD *)(v511 + 8);
            if (v512) {
              break;
            }
            v511 += 24;
            if (v511 == v510) {
              goto LABEL_874;
            }
          }
        }
        if (v511 == v510)
        {
LABEL_874:
          unint64_t v513 = v479[5];
          if (v510 >= v513)
          {
            v654 = v472;
            unint64_t v515 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v510 - v509) >> 3);
            unint64_t v516 = v515 + 1;
            if (v515 + 1 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            int v653 = v507;
            unint64_t v517 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v513 - v509) >> 3);
            if (2 * v517 > v516) {
              unint64_t v516 = 2 * v517;
            }
            if (v517 >= 0x555555555555555) {
              unint64_t v518 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v518 = v516;
            }
            if (v518 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_1114;
            }
            uint64_t v519 = (char *)operator new(24 * v518);
            v520 = &v519[24 * v515];
            uint64_t v521 = &v519[24 * v518];
            *(void *)v520 = v455;
            *((_DWORD *)v520 + 2) = v508;
            *((_DWORD *)v520 + 3) = v653;
            *((void *)v520 + 2) = v655;
            long long v514 = v520 + 24;
            int v522 = (void *)v479[3];
            unint64_t v455 = v479[4];
            if ((void *)v455 == v522)
            {
              v479[3] = v520;
              v479[4] = v514;
              v479[5] = v521;
              iuint64_t i = v674 + 39;
            }
            else
            {
              do
              {
                *(_OWORD *)(v520 - 24) = *(_OWORD *)(v455 - 24);
                uint64_t v523 = *(void *)(v455 - 8);
                *(void *)(v455 - 8) = 0;
                *((void *)v520 - 1) = v523;
                v520 -= 24;
                v455 -= 24;
              }
              while ((void *)v455 != v522);
              unint64_t v455 = v479[3];
              v524 = (void *)v479[4];
              v479[3] = v520;
              v479[4] = v514;
              v479[5] = v521;
              for (iuint64_t i = v674 + 39; v524 != (void *)v455; v524 -= 3)
              {
                uint64_t v525 = *(v524 - 1);
                *(v524 - 1) = 0;
                if (v525) {
                  (*(void (**)(uint64_t))(*(void *)v525 + 8))(v525);
                }
              }
            }
            v472 = v654;
            if (v455) {
              operator delete((void *)v455);
            }
          }
          else
          {
            *(void *)unint64_t v510 = v455;
            *(_DWORD *)(v510 + 8) = v508;
            *(_DWORD *)(v510 + 12) = v507;
            long long v514 = (char *)(v510 + 24);
            *(void *)(v510 + 16) = v655;
          }
          v479[4] = v514;
        }
        else if (v655)
        {
          (*(void (**)(uint8_t *))(*(void *)v655 + 8))(v655);
        }
        int v526 = v676;
        v676 = 0;
        if (v526) {
          (*(void (**)(uint8_t *))(*(void *)v526 + 8))(v526);
        }
      }
      v472 = (uint64_t *)*v472;
      if (!v472) {
        goto LABEL_905;
      }
      continue;
    }
    break;
  }
LABEL_1129:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_1135:
  __break(1u);
}

void sub_1A1AFDED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a40);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v40 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  double v9 = (uint64_t *)result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  uint64_t v11 = v9;
  while (1)
  {
    double v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v81 = *v11;
          if (*(unsigned __int16 *)(*v10 + 40) < *(unsigned __int16 *)(*v11 + 40))
          {
            *uint64_t v11 = *v10;
            *uint64_t v10 = v81;
          }
          return result;
        case 3:
          uint64_t v82 = *v11;
          uint64_t v83 = v11[1];
          unsigned int v84 = *(unsigned __int16 *)(v83 + 40);
          unsigned int v85 = *(unsigned __int16 *)(*v11 + 40);
          uint64_t v86 = *v10;
          unsigned int v87 = *(unsigned __int16 *)(*v10 + 40);
          if (v84 >= v85)
          {
            if (v87 < v84)
            {
              v11[1] = v86;
              *uint64_t v10 = v83;
              uint64_t v138 = *v11;
              uint64_t v137 = v11[1];
              if (*(unsigned __int16 *)(v137 + 40) < *(unsigned __int16 *)(*v11 + 40))
              {
                *uint64_t v11 = v137;
                v11[1] = v138;
              }
            }
          }
          else
          {
            if (v87 >= v84)
            {
              *uint64_t v11 = v83;
              v11[1] = v82;
              if (*(unsigned __int16 *)(*v10 + 40) >= v85) {
                return result;
              }
              v11[1] = *v10;
            }
            else
            {
              *uint64_t v11 = v86;
            }
            *uint64_t v10 = v82;
          }
          return result;
        case 4:
          uint64_t v88 = v11 + 1;
          uint64_t v89 = v11[1];
          int v90 = v11 + 2;
          uint64_t v91 = v11[2];
          uint64_t v92 = *v11;
          unsigned int v93 = *(unsigned __int16 *)(v89 + 40);
          unsigned int v94 = *(unsigned __int16 *)(*v11 + 40);
          unsigned int v95 = *(unsigned __int16 *)(v91 + 40);
          if (v93 >= v94)
          {
            if (v95 >= v93) {
              goto LABEL_169;
            }
            *uint64_t v88 = v91;
            *int v90 = v89;
            double v96 = v11;
            uint64_t v97 = v11 + 1;
            BOOL result = v89;
            if (v95 >= v94) {
              goto LABEL_170;
            }
          }
          else
          {
            double v96 = v11;
            uint64_t v97 = v11 + 2;
            BOOL result = *v11;
            if (v95 >= v93)
            {
              *uint64_t v11 = v89;
              v11[1] = v92;
              double v96 = v11 + 1;
              uint64_t v97 = v11 + 2;
              BOOL result = v92;
              if (v95 >= v94)
              {
LABEL_169:
                uint64_t v89 = v91;
LABEL_170:
                if (*(unsigned __int16 *)(*v10 + 40) < *(unsigned __int16 *)(v89 + 40))
                {
                  *int v90 = *v10;
                  *uint64_t v10 = v89;
                  uint64_t v142 = *v90;
                  uint64_t v143 = *v88;
                  unsigned int v144 = *(unsigned __int16 *)(v142 + 40);
                  if (v144 < *(unsigned __int16 *)(v143 + 40))
                  {
                    v11[1] = v142;
                    v11[2] = v143;
                    uint64_t v145 = *v11;
                    if (v144 < *(unsigned __int16 *)(*v11 + 40))
                    {
                      *uint64_t v11 = v142;
                      v11[1] = v145;
                    }
                  }
                }
                return result;
              }
            }
          }
          *double v96 = v91;
          *uint64_t v97 = v92;
          uint64_t v89 = result;
          goto LABEL_170;
        case 5:
          return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,0>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v109 = (unint64_t)(v13 - 2) >> 1;
        int64_t v110 = v109;
        do
        {
          if (v109 >= v110)
          {
            uint64_t v112 = (2 * v110) | 1;
            unint64_t v113 = &v11[v112];
            uint64_t v114 = *v113;
            if (2 * v110 + 2 < v13)
            {
              BOOL result = *(unsigned __int16 *)(v114 + 40);
              if (result < *(unsigned __int16 *)(v113[1] + 40))
              {
                uint64_t v114 = v113[1];
                ++v113;
                uint64_t v112 = 2 * v110 + 2;
              }
            }
            uint64_t v115 = &v11[v110];
            uint64_t v116 = *v115;
            unsigned int v117 = *(unsigned __int16 *)(*v115 + 40);
            if (*(unsigned __int16 *)(v114 + 40) >= v117)
            {
              do
              {
                uint64_t v118 = v113;
                *uint64_t v115 = v114;
                if (v109 < v112) {
                  break;
                }
                BOOL result = (2 * v112) | 1;
                unint64_t v113 = &v11[result];
                uint64_t v119 = 2 * v112 + 2;
                uint64_t v114 = *v113;
                if (v119 < v13 && *(unsigned __int16 *)(v114 + 40) < *(unsigned __int16 *)(v113[1] + 40))
                {
                  uint64_t v114 = v113[1];
                  ++v113;
                  BOOL result = v119;
                }
                uint64_t v115 = v118;
                uint64_t v112 = result;
              }
              while (*(unsigned __int16 *)(v114 + 40) >= v117);
              *uint64_t v118 = v116;
            }
          }
          BOOL v111 = v110-- <= 0;
        }
        while (!v111);
        uint64_t v120 = (unint64_t)v12 >> 3;
        do
        {
          uint64_t v121 = 0;
          uint64_t v122 = *v11;
          int v123 = v11;
          do
          {
            uint64_t v124 = &v123[v121];
            uint64_t v127 = v124[1];
            unint64_t v125 = v124 + 1;
            uint64_t v126 = v127;
            uint64_t v128 = (2 * v121) | 1;
            uint64_t v129 = 2 * v121 + 2;
            if (v129 < v120)
            {
              BOOL result = *(unsigned __int16 *)(v126 + 40);
              if (result < *(unsigned __int16 *)(v125[1] + 40))
              {
                uint64_t v126 = v125[1];
                ++v125;
                uint64_t v128 = v129;
              }
            }
            *int v123 = v126;
            int v123 = v125;
            uint64_t v121 = v128;
          }
          while (v128 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
          if (v125 == --a2)
          {
            *unint64_t v125 = v122;
          }
          else
          {
            *unint64_t v125 = *a2;
            *a2 = v122;
            uint64_t v130 = (char *)v125 - (char *)v11 + 8;
            if (v130 >= 9)
            {
              unint64_t v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              uint64_t v132 = &v11[v131];
              uint64_t v133 = *v132;
              uint64_t v134 = *v125;
              unsigned int v135 = *(unsigned __int16 *)(*v125 + 40);
              if (*(unsigned __int16 *)(*v132 + 40) < v135)
              {
                do
                {
                  uint64_t v136 = v132;
                  *unint64_t v125 = v133;
                  if (!v131) {
                    break;
                  }
                  unint64_t v131 = (v131 - 1) >> 1;
                  uint64_t v132 = &v11[v131];
                  uint64_t v133 = *v132;
                  unint64_t v125 = v136;
                }
                while (*(unsigned __int16 *)(*v132 + 40) < v135);
                *uint64_t v136 = v134;
              }
            }
          }
          BOOL v111 = v120-- <= 2;
        }
        while (!v111);
      }
      return result;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = &v11[(unint64_t)v13 >> 1];
    uint64_t v16 = *v10;
    unsigned int v17 = *(unsigned __int16 *)(*v10 + 40);
    if ((unint64_t)v12 >= 0x401)
    {
      uint64_t v18 = *v15;
      uint64_t v19 = *v11;
      unsigned int v20 = *(unsigned __int16 *)(*v15 + 40);
      unsigned int v21 = *(unsigned __int16 *)(*v11 + 40);
      if (v20 >= v21)
      {
        if (v17 < v20)
        {
          *uint64_t v15 = v16;
          *uint64_t v10 = v18;
          uint64_t v26 = *v11;
          if (*(unsigned __int16 *)(*v15 + 40) < *(unsigned __int16 *)(*v11 + 40))
          {
            *uint64_t v11 = *v15;
            *uint64_t v15 = v26;
          }
        }
      }
      else
      {
        if (v17 < v20)
        {
          *uint64_t v11 = v16;
          goto LABEL_22;
        }
        *uint64_t v11 = v18;
        *uint64_t v15 = v19;
        if (*(unsigned __int16 *)(*v10 + 40) < v21)
        {
          *uint64_t v15 = *v10;
LABEL_22:
          *uint64_t v10 = v19;
        }
      }
      uint64_t v28 = &v11[v14];
      uint64_t v31 = *(v28 - 1);
      unint64_t v29 = v28 - 1;
      uint64_t v30 = v31;
      uint64_t v32 = v11[1];
      unsigned int v33 = *(unsigned __int16 *)(v31 + 40);
      unsigned int v34 = *(unsigned __int16 *)(v32 + 40);
      uint64_t v35 = *(a2 - 2);
      unsigned int v36 = *(unsigned __int16 *)(v35 + 40);
      if (v33 >= v34)
      {
        if (v36 < v33)
        {
          *unint64_t v29 = v35;
          *(a2 - 2) = v30;
          uint64_t v37 = v11[1];
          if (*(unsigned __int16 *)(*v29 + 40) < *(unsigned __int16 *)(v37 + 40))
          {
            v11[1] = *v29;
            *unint64_t v29 = v37;
          }
        }
      }
      else
      {
        if (v36 < v33)
        {
          v11[1] = v35;
          goto LABEL_34;
        }
        v11[1] = v30;
        *unint64_t v29 = v32;
        uint64_t v38 = *(a2 - 2);
        if (*(unsigned __int16 *)(v38 + 40) < v34)
        {
          *unint64_t v29 = v38;
LABEL_34:
          *(a2 - 2) = v32;
        }
      }
      double v39 = &v11[v14];
      uint64_t v42 = v39[1];
      uint64_t v40 = v39 + 1;
      uint64_t v41 = v42;
      uint64_t v43 = v11[2];
      unsigned int v44 = *(unsigned __int16 *)(v42 + 40);
      unsigned int v45 = *(unsigned __int16 *)(v43 + 40);
      uint64_t v46 = *(a2 - 3);
      unsigned int v47 = *(unsigned __int16 *)(v46 + 40);
      if (v44 >= v45)
      {
        if (v47 < v44)
        {
          *uint64_t v40 = v46;
          *(a2 - 3) = v41;
          uint64_t v48 = v11[2];
          if (*(unsigned __int16 *)(*v40 + 40) < *(unsigned __int16 *)(v48 + 40))
          {
            v11[2] = *v40;
            *uint64_t v40 = v48;
          }
        }
      }
      else
      {
        if (v47 < v44)
        {
          v11[2] = v46;
          goto LABEL_43;
        }
        v11[2] = v41;
        *uint64_t v40 = v43;
        uint64_t v49 = *(a2 - 3);
        if (*(unsigned __int16 *)(v49 + 40) < v45)
        {
          *uint64_t v40 = v49;
LABEL_43:
          *(a2 - 3) = v43;
        }
      }
      uint64_t v50 = *v15;
      uint64_t v51 = *v29;
      unsigned int v52 = *(unsigned __int16 *)(*v15 + 40);
      unsigned int v53 = *(unsigned __int16 *)(*v29 + 40);
      uint64_t v54 = *v40;
      unsigned int v55 = *(unsigned __int16 *)(*v40 + 40);
      if (v52 >= v53)
      {
        if (v55 >= v52) {
          goto LABEL_51;
        }
        *uint64_t v15 = v54;
        *uint64_t v40 = v50;
        uint64_t v40 = v15;
        uint64_t v50 = v51;
        if (v55 >= v53)
        {
          uint64_t v50 = v54;
          goto LABEL_51;
        }
      }
      else if (v55 >= v52)
      {
        *unint64_t v29 = v50;
        *uint64_t v15 = v51;
        unint64_t v29 = v15;
        uint64_t v50 = v54;
        if (v55 >= v53)
        {
          uint64_t v50 = v51;
LABEL_51:
          uint64_t v56 = *v11;
          *uint64_t v11 = v50;
          *uint64_t v15 = v56;
          goto LABEL_52;
        }
      }
      *unint64_t v29 = v54;
      *uint64_t v40 = v51;
      goto LABEL_51;
    }
    uint64_t v22 = *v11;
    uint64_t v23 = *v15;
    unsigned int v24 = *(unsigned __int16 *)(*v11 + 40);
    unsigned int v25 = *(unsigned __int16 *)(*v15 + 40);
    if (v24 >= v25)
    {
      if (v17 < v24)
      {
        *uint64_t v11 = v16;
        *uint64_t v10 = v22;
        uint64_t v27 = *v15;
        if (*(unsigned __int16 *)(*v11 + 40) < *(unsigned __int16 *)(*v15 + 40))
        {
          *uint64_t v15 = *v11;
          *uint64_t v11 = v27;
        }
      }
      goto LABEL_52;
    }
    if (v17 < v24)
    {
      *uint64_t v15 = v16;
LABEL_31:
      *uint64_t v10 = v23;
      goto LABEL_52;
    }
    *uint64_t v15 = v22;
    *uint64_t v11 = v23;
    if (*(unsigned __int16 *)(*v10 + 40) < v25)
    {
      *uint64_t v11 = *v10;
      goto LABEL_31;
    }
LABEL_52:
    --a3;
    uint64_t v57 = *v11;
    if (a4)
    {
      unsigned int v58 = *(unsigned __int16 *)(v57 + 40);
LABEL_55:
      uint64_t v59 = v11;
      do
      {
        unsigned int v60 = v59;
        uint64_t v62 = v59[1];
        ++v59;
        uint64_t v61 = v62;
      }
      while (*(unsigned __int16 *)(v62 + 40) < v58);
      double v63 = a2;
      if (v60 == v11)
      {
        double v63 = a2;
        do
        {
          if (v59 >= v63) {
            break;
          }
          uint64_t v65 = *--v63;
        }
        while (*(unsigned __int16 *)(v65 + 40) >= v58);
      }
      else
      {
        do
          uint64_t v64 = *--v63;
        while (*(unsigned __int16 *)(v64 + 40) >= v58);
      }
      if (v59 < v63)
      {
        uint64_t v66 = *v63;
        double v67 = v59;
        uint64_t v68 = v63;
        do
        {
          *double v67 = v66;
          *uint64_t v68 = v61;
          do
          {
            unsigned int v60 = v67;
            uint64_t v69 = v67[1];
            ++v67;
            uint64_t v61 = v69;
          }
          while (*(unsigned __int16 *)(v69 + 40) < v58);
          do
          {
            uint64_t v70 = *--v68;
            uint64_t v66 = v70;
          }
          while (*(unsigned __int16 *)(v70 + 40) >= v58);
        }
        while (v67 < v68);
      }
      if (v60 != v11) {
        *uint64_t v11 = *v60;
      }
      *unsigned int v60 = v57;
      if (v59 < v63) {
        goto LABEL_74;
      }
      BOOL v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **>(v11, v60);
      uint64_t v11 = v60 + 1;
      BOOL result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **>(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_74:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v9, v60, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v60 + 1;
      }
    }
    else
    {
      unsigned int v58 = *(unsigned __int16 *)(v57 + 40);
      if (*(unsigned __int16 *)(*(v11 - 1) + 40) < v58) {
        goto LABEL_55;
      }
      if (v58 < *(unsigned __int16 *)(*v10 + 40))
      {
        do
        {
          uint64_t v72 = v11[1];
          ++v11;
        }
        while (v58 >= *(unsigned __int16 *)(v72 + 40));
      }
      else
      {
        uint64_t v73 = v11 + 1;
        do
        {
          uint64_t v11 = v73;
          if (v73 >= a2) {
            break;
          }
          ++v73;
        }
        while (v58 >= *(unsigned __int16 *)(*v11 + 40));
      }
      int v74 = a2;
      if (v11 < a2)
      {
        int v74 = a2;
        do
          uint64_t v75 = *--v74;
        while (v58 < *(unsigned __int16 *)(v75 + 40));
      }
      if (v11 < v74)
      {
        uint64_t v76 = *v11;
        uint64_t v77 = *v74;
        do
        {
          *uint64_t v11 = v77;
          *int v74 = v76;
          do
          {
            uint64_t v78 = v11[1];
            ++v11;
            uint64_t v76 = v78;
          }
          while (v58 >= *(unsigned __int16 *)(v78 + 40));
          do
          {
            uint64_t v79 = *--v74;
            uint64_t v77 = v79;
          }
          while (v58 < *(unsigned __int16 *)(v79 + 40));
        }
        while (v11 < v74);
      }
      unsigned int v80 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        *double v9 = *v80;
      }
      a4 = 0;
      uint64_t *v80 = v57;
    }
  }
  unint64_t v98 = v11 + 1;
  BOOL v100 = v11 == a2 || v98 == a2;
  if (a4)
  {
    if (!v100)
    {
      uint64_t v101 = 8;
      uint64_t v102 = v11;
      do
      {
        uint64_t v105 = *v102;
        uint64_t v104 = v102[1];
        uint64_t v102 = v98;
        unsigned int v106 = *(unsigned __int16 *)(v104 + 40);
        if (v106 < *(unsigned __int16 *)(v105 + 40))
        {
          uint64_t v107 = v101;
          do
          {
            *(uint64_t *)((char *)v11 + v107) = v105;
            uint64_t v108 = v107 - 8;
            if (v107 == 8)
            {
              long long v103 = v11;
              goto LABEL_118;
            }
            uint64_t v105 = *(uint64_t *)((char *)v11 + v107 - 16);
            v107 -= 8;
          }
          while (v106 < *(unsigned __int16 *)(v105 + 40));
          long long v103 = (uint64_t *)((char *)v11 + v108);
LABEL_118:
          *long long v103 = v104;
        }
        unint64_t v98 = v102 + 1;
        v101 += 8;
      }
      while (v102 + 1 != a2);
    }
  }
  else if (!v100)
  {
    do
    {
      uint64_t v140 = *v9;
      uint64_t v139 = v9[1];
      double v9 = v98;
      unsigned int v141 = *(unsigned __int16 *)(v139 + 40);
      if (v141 < *(unsigned __int16 *)(v140 + 40))
      {
        do
        {
          uint64_t *v98 = v140;
          uint64_t v140 = *(v98 - 2);
          --v98;
        }
        while (v141 < *(unsigned __int16 *)(v140 + 40));
        uint64_t *v98 = v139;
      }
      unint64_t v98 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

void std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(*a1);
    std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(a1[1]);
    uint64_t v2 = *((unsigned int *)a1 + 32);
    if (v2 != -1) {
      ((void (*)(char *, void *))off_1EF58FA78[v2])(&v3, a1 + 4);
    }
    operator delete(a1);
  }
}

__n128 std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::insert_iterator<std::set<md::LayerDataIdentWithWorld>> &>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void **a6)
{
  uint64_t v8 = *(void **)a2;
  double v9 = (void *)*a3;
  if (*(void *)a2 == *a3) {
    goto LABEL_64;
  }
  uint64_t v12 = *(void **)a4;
  if (*(void *)a4 == *a5)
  {
LABEL_45:
    uint64_t v43 = (void **)*a6;
    uint64_t v42 = a6[1];
    if (v8 == v9) {
      goto LABEL_66;
    }
    while (1)
    {
      unsigned int v44 = std::__tree<md::LayerDataIdentWithWorld>::__find_equal<md::LayerDataIdentWithWorld>(v43, v42, &v55, &v54, *((_DWORD *)v8 + 7), *((unsigned char *)v8 + 32));
      unsigned int v45 = (uint64_t *)*v44;
      if (*v44)
      {
        uint64_t v46 = (uint64_t *)v45[1];
        if (!v46) {
          goto LABEL_56;
        }
      }
      else
      {
        unsigned int v47 = v44;
        unsigned int v45 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v45 + 28) = *(void *)((char *)v8 + 28);
        uint64_t v48 = v55;
        *unsigned int v45 = 0;
        v45[1] = 0;
        v45[2] = (uint64_t)v48;
        *unsigned int v47 = (uint64_t)v45;
        uint64_t v49 = (void *)**v43;
        uint64_t v50 = v45;
        if (v49)
        {
          *uint64_t v43 = v49;
          uint64_t v50 = (uint64_t *)*v47;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v43[1], v50);
        v43[2] = (void *)((char *)v43[2] + 1);
        uint64_t v46 = (uint64_t *)v45[1];
        if (!v46)
        {
          do
          {
LABEL_56:
            uint64_t v42 = (uint64_t *)v45[2];
            BOOL v30 = *v42 == (void)v45;
            unsigned int v45 = v42;
          }
          while (!v30);
          goto LABEL_58;
        }
      }
      do
      {
        uint64_t v42 = v46;
        uint64_t v46 = (uint64_t *)*v46;
      }
      while (v46);
LABEL_58:
      uint64_t v51 = (void *)v8[1];
      if (v51)
      {
        do
        {
          unsigned int v52 = v51;
          uint64_t v51 = (void *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          unsigned int v52 = (void *)v8[2];
          BOOL v30 = *v52 == (void)v8;
          uint64_t v8 = v52;
        }
        while (!v30);
      }
      uint64_t v8 = v52;
      if (v52 == v9)
      {
        uint64_t v8 = v9;
        goto LABEL_66;
      }
    }
  }
  while (1)
  {
    int v15 = *((unsigned __int8 *)v8 + 32);
    int v16 = (char)v15;
    int v17 = *((unsigned __int8 *)v12 + 32);
    unsigned int v18 = *((_DWORD *)v8 + 7);
    unsigned int v19 = *((_DWORD *)v12 + 7);
    if (v15 == v17 ? v18 < v19 : (char)v15 < (char)v17)
    {
      unsigned int v21 = (void **)*a6;
      uint64_t v22 = std::__tree<md::LayerDataIdentWithWorld>::__find_equal<md::LayerDataIdentWithWorld>(*a6, a6[1], &v55, &v54, v18, v16);
      uint64_t v23 = (uint64_t *)*v22;
      if (!*v22)
      {
        unsigned int v24 = v22;
        uint64_t v23 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v23 + 28) = *(void *)((char *)v8 + 28);
        unsigned int v25 = v55;
        uint64_t *v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        uint64_t *v24 = (uint64_t)v23;
        uint64_t v26 = (void *)**v21;
        uint64_t v27 = v23;
        if (v26)
        {
          std::__shared_weak_count *v21 = v26;
          uint64_t v27 = (uint64_t *)*v24;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v21[1], v27);
        void v21[2] = (void *)((char *)v21[2] + 1);
      }
      a6[1] = v23;
      uint64_t v28 = (uint64_t *)v23[1];
      if (v28)
      {
        do
        {
          unint64_t v29 = v28;
          uint64_t v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          unint64_t v29 = (uint64_t *)v23[2];
          BOOL v30 = *v29 == (void)v23;
          uint64_t v23 = v29;
        }
        while (!v30);
      }
      a6[1] = v29;
      uint64_t v31 = *(void **)a2;
      uint64_t v32 = *(void **)(*(void *)a2 + 8);
      if (v32)
      {
        do
        {
          unsigned int v33 = v32;
          uint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          unsigned int v33 = (void *)v31[2];
          BOOL v30 = *v33 == (void)v31;
          uint64_t v31 = v33;
        }
        while (!v30);
      }
      *(void *)a2 = v33;
    }
    else
    {
      BOOL v34 = v19 < v18;
      int v35 = v16 == (char)v17 ? v34 : (char)v17 < v16;
      if (v35 == 1)
      {
        unsigned int v36 = (void *)v12[1];
        if (v36)
        {
          do
          {
            uint64_t v37 = v36;
            unsigned int v36 = (void *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            uint64_t v37 = (void *)v12[2];
            BOOL v30 = *v37 == (void)v12;
            uint64_t v12 = v37;
          }
          while (!v30);
        }
      }
      else
      {
        uint64_t v38 = (void *)v8[1];
        if (v38)
        {
          do
          {
            double v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            double v39 = (void *)v8[2];
            BOOL v30 = *v39 == (void)v8;
            uint64_t v8 = v39;
          }
          while (!v30);
        }
        *(void *)a2 = v39;
        uint64_t v40 = *(void **)a4;
        uint64_t v41 = *(void **)(*(void *)a4 + 8);
        if (v41)
        {
          do
          {
            uint64_t v37 = v41;
            uint64_t v41 = (void *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v37 = (void *)v40[2];
            BOOL v30 = *v37 == (void)v40;
            uint64_t v40 = v37;
          }
          while (!v30);
        }
      }
      *(void *)a4 = v37;
    }
    uint64_t v8 = *(void **)a2;
    double v9 = (void *)*a3;
    if (*(void *)a2 == *a3) {
      break;
    }
    uint64_t v12 = *(void **)a4;
    if (*(void *)a4 == *a5) {
      goto LABEL_45;
    }
  }
LABEL_64:
  uint64_t v43 = (void **)*a6;
  uint64_t v42 = a6[1];
LABEL_66:
  result.n128_u64[0] = (unint64_t)v43;
  result.n128_u64[1] = (unint64_t)v42;
  *(void *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

void std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  char v3 = v2;
  os_signpost_id_t v4 = **(void **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ResolveRegistries", "", v5, 2u);
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  unsigned int v7 = *(unsigned __int16 *)(*a2 + 40);
  unsigned int v8 = *(unsigned __int16 *)(*result + 40);
  uint64_t v9 = *a3;
  unsigned int v10 = *(unsigned __int16 *)(*a3 + 40);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      uint64_t v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      uint64_t v11 = *result;
      if (*(unsigned __int16 *)(*a2 + 40) < *(unsigned __int16 *)(*result + 40))
      {
        *__n128 result = *a2;
        *a2 = v11;
        uint64_t v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *__n128 result = v9;
LABEL_9:
      *a3 = v6;
      uint64_t v5 = v6;
      goto LABEL_11;
    }
    *__n128 result = v5;
    *a2 = v6;
    uint64_t v5 = *a3;
    if (*(unsigned __int16 *)(*a3 + 40) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(unsigned __int16 *)(*a4 + 40) < *(unsigned __int16 *)(v5 + 40))
  {
    *a3 = *a4;
    *a4 = v5;
    uint64_t v12 = *a2;
    if (*(unsigned __int16 *)(*a3 + 40) < *(unsigned __int16 *)(*a2 + 40))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *result;
      if (*(unsigned __int16 *)(*a2 + 40) < *(unsigned __int16 *)(*result + 40))
      {
        *__n128 result = *a2;
        *a2 = v13;
      }
    }
  }
  uint64_t v14 = *a4;
  if (*(unsigned __int16 *)(*a5 + 40) < *(unsigned __int16 *)(*a4 + 40))
  {
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *a3;
    if (*(unsigned __int16 *)(*a4 + 40) < *(unsigned __int16 *)(*a3 + 40))
    {
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      if (*(unsigned __int16 *)(*a3 + 40) < *(unsigned __int16 *)(*a2 + 40))
      {
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *result;
        if (*(unsigned __int16 *)(*a2 + 40) < *(unsigned __int16 *)(*result + 40))
        {
          *__n128 result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__tree<md::LayerDataIdentWithWorld>::__find_equal<md::LayerDataIdentWithWorld>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int a5, unsigned __int8 a6)
{
  uint64_t v6 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_5;
  }
  int v7 = *((unsigned __int8 *)a2 + 32);
  BOOL v8 = *((char *)a2 + 32) > (char)a6;
  unsigned int v9 = *((_DWORD *)a2 + 7);
  if (v7 == a6) {
    BOOL v8 = v9 > a5;
  }
  if (v8)
  {
LABEL_5:
    unsigned int v10 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v12 = a2;
LABEL_25:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      uint64_t v11 = (uint64_t *)*a2;
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      unsigned int v18 = a2;
      do
      {
        uint64_t v12 = (uint64_t *)v18[2];
        BOOL v19 = *v12 == (void)v18;
        unsigned int v18 = v12;
      }
      while (v19);
    }
    int v20 = *((char *)v12 + 32);
    if (a6 == v20) {
      BOOL v21 = *((_DWORD *)v12 + 7) < a5;
    }
    else {
      BOOL v21 = v20 < (char)a6;
    }
    if (v21) {
      goto LABEL_25;
    }
    uint64_t v23 = *v6;
    if (*v6)
    {
      do
      {
        while (1)
        {
          unsigned int v24 = (void *)v23;
          int v25 = *(char *)(v23 + 32);
          int v26 = *(unsigned __int8 *)(v23 + 32);
          BOOL v27 = v25 > (char)a6;
          unsigned int v28 = *((_DWORD *)v24 + 7);
          if (v26 == a6) {
            BOOL v27 = v28 > a5;
          }
          if (!v27) {
            break;
          }
          uint64_t v23 = *v24;
          uint64_t v6 = v24;
          if (!*v24) {
            goto LABEL_62;
          }
        }
        BOOL v29 = v28 < a5;
        if (v26 == a6) {
          BOOL v30 = v29;
        }
        else {
          BOOL v30 = (char)v26 < (char)a6;
        }
        if (!v30) {
          break;
        }
        uint64_t v6 = v24 + 1;
        uint64_t v23 = v24[1];
      }
      while (v23);
      goto LABEL_62;
    }
LABEL_28:
    unsigned int v24 = a1 + 1;
LABEL_62:
    *a3 = v24;
    return v6;
  }
  BOOL v13 = v9 < a5;
  if (v7 == a6) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = (char)v7 < (char)a6;
  }
  if (!v14)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  uint64_t v15 = a2[1];
  if (v15)
  {
    uint64_t v16 = (uint64_t *)a2[1];
    do
    {
      uint64_t v17 = v16;
      uint64_t v16 = (uint64_t *)*v16;
    }
    while (v16);
  }
  else
  {
    uint64_t v31 = a2;
    do
    {
      uint64_t v17 = (uint64_t *)v31[2];
      BOOL v19 = *v17 == (void)v31;
      uint64_t v31 = v17;
    }
    while (!v19);
  }
  if (v17 != v6)
  {
    int v32 = *((char *)v17 + 32);
    if (!(a6 == v32 ? *((_DWORD *)v17 + 7) > a5 : v32 > (char)a6))
    {
      uint64_t v34 = *v6;
      if (*v6)
      {
        do
        {
          while (1)
          {
            unsigned int v24 = (void *)v34;
            int v35 = *(char *)(v34 + 32);
            int v36 = *(unsigned __int8 *)(v34 + 32);
            BOOL v37 = v35 > (char)a6;
            unsigned int v38 = *((_DWORD *)v24 + 7);
            if (v36 == a6) {
              BOOL v37 = v38 > a5;
            }
            if (!v37) {
              break;
            }
            uint64_t v34 = *v24;
            uint64_t v6 = v24;
            if (!*v24) {
              goto LABEL_62;
            }
          }
          BOOL v39 = v38 < a5;
          if (v36 == a6) {
            BOOL v40 = v39;
          }
          else {
            BOOL v40 = (char)v36 < (char)a6;
          }
          if (!v40) {
            break;
          }
          uint64_t v6 = v24 + 1;
          uint64_t v34 = v24[1];
        }
        while (v34);
        goto LABEL_62;
      }
      goto LABEL_28;
    }
  }
  if (v15)
  {
    *a3 = v17;
    return v17;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

void gdc::UpdateCollector<md::components::Material>::observe(int8x8_t **a1, int8x8_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1[7] != a2) {
    ((void (*)(int8x8_t **))(*a1)[3])(a1);
  }
  a1[7] = a2;
  uint64_t v4 = gdc::Registry::storage<md::components::Material>(a2);
  BOOL v13 = (void (**)(void **))&unk_1EF521308;
  BOOL v14 = a1;
  uint64_t v15 = (void **)&v13;
  uint64_t v5 = gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect(v4 + 104, &v13);
  if (v15 == (void **)&v13)
  {
    v13[4]((void **)&v13);
  }
  else if (v15)
  {
    (*((void (**)(void))*v15 + 5))();
  }
  if (v5 != -1)
  {
    uint64_t v6 = a1 + 13;
    {
      uint64_t v6 = a1 + 13;
      if (v10)
      {
        uint64_t v11 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
        gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v11;
        uint64_t v6 = a1 + 13;
      }
    }
    v6[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId] = (int8x8_t *)v5;
  }
  uint64_t v7 = gdc::Registry::storage<md::components::Material>(a1[7]);
  BOOL v13 = (void (**)(void **))&unk_1EF5212C0;
  BOOL v14 = a1;
  uint64_t v15 = (void **)&v13;
  uint64_t v8 = gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect(v7 + 200, &v13);
  if (v15 == (void **)&v13)
  {
    v13[4]((void **)&v13);
    if (v8 == -1) {
      return;
    }
    goto LABEL_16;
  }
  if (v15) {
    (*((void (**)(void))*v15 + 5))();
  }
  if (v8 != -1)
  {
LABEL_16:
    unsigned int v9 = a1 + 14;
    {
      {
        uint64_t v12 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
        gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v12;
      }
    }
    v9[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId] = (int8x8_t *)v8;
  }
}

void sub_1A1AFF75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 != v13)
  {
    if (a13) {
      (*(void (**)(void))(*(void *)a13 + 40))();
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo,gdc::ManagedObjectHolder<md::MapDataType> *>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2) {
                return;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2) {
              return;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t v16 = operator new(0x30uLL);
  *uint64_t v16 = 0;
  v16[1] = v7;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  v16[4] = *(void *)(a3 + 16);
  v16[5] = a4;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_35;
    }
    if (prime < v9)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v9) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7) {
        v7 %= v9;
      }
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  uint64_t v26 = *(void *)a1;
  BOOL v27 = *(void **)(*(void *)a1 + 8 * v7);
  if (v27)
  {
    *uint64_t v16 = *v27;
LABEL_58:
    void *v27 = v16;
    goto LABEL_59;
  }
  *uint64_t v16 = *v15;
  *uint64_t v15 = v16;
  *(void *)(v26 + 8 * v7) = v15;
  if (*v16)
  {
    unint64_t v28 = *(void *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9) {
        v28 %= v9;
      }
    }
    else
    {
      v28 &= v9 - 1;
    }
    BOOL v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A1AFFACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void gdc::EnteringCollector<md::components::Material>::~EnteringCollector(gdc::EntityCollector *a1)
{
  *(void *)a1 = &unk_1EF558E70;
  gdc::RegistrySignalCollector<md::components::Material>::unobserve((uint64_t)a1);
  gdc::EntityCollector::~EntityCollector(a1);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1EF558E70;
  gdc::RegistrySignalCollector<md::components::Material>::unobserve((uint64_t)a1);
  gdc::EntityCollector::~EntityCollector(a1);
}

void sub_1A1AFFB48(_Unwind_Exception *a1)
{
  gdc::EntityCollector::~EntityCollector(v1);
  _Unwind_Resume(a1);
}

void sub_1A1B00414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)(v17 - 112));
  _Unwind_Resume(a1);
}

void *md::MapEngineSyncAccessor::clearScene(md::MapEngineSyncAccessor *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*((void *)this + 1) + 8);
  v3[0] = &unk_1EF579530;
  v3[1] = this;
  unint64_t v4 = v3;
  geo::TaskQueue::barrierSync(v1, v3);
  __n128 result = v4;
  if (v4 == v3) {
    return (void *)(*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (void *)(*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void sub_1A1B006CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1B00878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B008F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B00998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B00A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B00AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B00BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::MapEngine::updateDaVinciPOILabelsAvailable(md::MapEngine *this)
{
  uint64_t v2 = *((void *)this + 112);
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  if (v3 != v4)
  {
    while (*(_WORD *)v3 != 24)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == v4 || (uint64_t v5 = *(void *)(v3 + 8)) == 0)
  {
LABEL_8:
    BOOL v6 = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v5 + 8) + 24))(&v14);
    BOOL v6 = (_BYTE)v14 != 0;
  }
  uint64_t v7 = *((void *)this + 141);
  LOBYTE(v14) = 28;
  md::MapEngineSettings::set(v7, &v14, (void *)v6);
  uint64_t v8 = *((void *)this + 112);
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *(void *)(v8 + 64);
  if (v9 != v10)
  {
    while (*(_WORD *)v9 != 74)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_18;
      }
    }
  }
  if (v9 == v10 || (uint64_t v11 = *(void *)(v9 + 8)) == 0)
  {
LABEL_18:
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v11 + 8) + 24))(&v14);
    if ((_BYTE)v14) {
      uint64_t v12 = (void *)v6;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  uint64_t v13 = *((void *)this + 141);
  LOBYTE(v14) = 39;
  md::MapEngineSettings::set(v13, &v14, v12);
}

void sub_1A1B01260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::World::setEnableGlobe(uint64_t this, uint64_t a2, char a3)
{
  uint64_t v3 = this;
  if (this != a2)
  {
    uint64_t v3 = this;
    while (*(_WORD *)v3 != 44)
    {
      v3 += 16;
      if (v3 == a2) {
        goto LABEL_9;
      }
    }
  }
  if (v3 != a2)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      *(unsigned char *)(v4 + 776) = a3;
    }
  }
LABEL_9:
  if (this != a2)
  {
    uint64_t v5 = this;
    while (*(_WORD *)v5 != 45)
    {
      v5 += 16;
      if (v5 == a2) {
        goto LABEL_17;
      }
    }
    if (v5 != a2)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        *(unsigned char *)(v6 + 776) = a3;
      }
    }
LABEL_17:
    if (this != a2)
    {
      uint64_t v7 = this;
      while (*(_WORD *)v7 != 46)
      {
        v7 += 16;
        if (v7 == a2) {
          goto LABEL_31;
        }
      }
      if (v7 != a2)
      {
        uint64_t v8 = *(void *)(v7 + 8);
        if (v8)
        {
          *(unsigned char *)(v8 + 776) = a3;
          uint64_t v9 = this;
          while (*(_WORD *)v9 != 48)
          {
            v9 += 16;
            if (v9 == a2) {
              goto LABEL_31;
            }
          }
          if (v9 != a2)
          {
            uint64_t v10 = *(void *)(v9 + 8);
            if (v10) {
              *(unsigned char *)(v10 + 776) = a3;
            }
          }
        }
      }
LABEL_31:
      if (this != a2)
      {
        uint64_t v11 = this;
        while (*(_WORD *)v11 != 47)
        {
          v11 += 16;
          if (v11 == a2) {
            goto LABEL_39;
          }
        }
        if (v11 != a2)
        {
          uint64_t v12 = *(void *)(v11 + 8);
          if (v12) {
            *(unsigned char *)(v12 + 776) = a3;
          }
        }
LABEL_39:
        if (this != a2)
        {
          uint64_t v13 = this;
          while (*(_WORD *)v13 != 49)
          {
            v13 += 16;
            if (v13 == a2) {
              goto LABEL_49;
            }
          }
          if (v13 != a2)
          {
            uint64_t v14 = *(void *)(v13 + 8);
            if (v14) {
              *(unsigned char *)(v14 + 776) = a3;
            }
          }
LABEL_49:
          while (this != a2)
          {
            if (*(_WORD *)this == 52)
            {
              if (this != a2)
              {
                uint64_t v15 = *(void *)(this + 8);
                if (v15) {
                  *(unsigned char *)(v15 + 784) = a3;
                }
              }
              return this;
            }
            this += 16;
          }
        }
      }
    }
  }
  return this;
}

void sub_1A1B01748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void md::MapEngineSettings::set(uint64_t a1, unsigned char *a2, void *a3)
{
  uint64_t v6 = *(char **)a1;
  uint64_t v7 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v8 = v6;
  if (v6 != (char *)v7)
  {
    uint64_t v8 = v6;
    while (*a2 != *v8)
    {
      v8 += 16;
      if (v8 == (char *)v7) {
        goto LABEL_8;
      }
    }
  }
  if (v8 != (char *)v7 && *((void **)v8 + 1) == a3) {
    return;
  }
LABEL_8:
  unsigned int v9 = *a2;
  if (v6 != (char *)v7)
  {
    while (v9 != *v6)
    {
      v6 += 16;
      if (v6 == (char *)v7) {
        goto LABEL_13;
      }
    }
  }
  if (v6 == (char *)v7)
  {
LABEL_13:
    LOBYTE(v51) = *a2;
    uint64_t v52 = 0;
    uint64_t v6 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(a1, (unsigned __int8 *)&v51);
    unsigned int v9 = *a2;
  }
  *((void *)v6 + 1) = a3;
  uint64_t v11 = (uint64_t **)(a1 + 32);
  uint64_t v10 = *(uint64_t **)(a1 + 32);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v10;
        unsigned int v13 = *((unsigned __int8 *)v10 + 25);
        if (v9 >= v13) {
          break;
        }
        uint64_t v10 = *v12;
        uint64_t v11 = v12;
        if (!*v12) {
          goto LABEL_21;
        }
      }
      if (v13 >= v9) {
        break;
      }
      uint64_t v10 = v12[1];
      if (!v10)
      {
        uint64_t v11 = v12 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
    uint64_t v12 = (uint64_t **)(a1 + 32);
LABEL_21:
    uint64_t v14 = operator new(0x20uLL);
    v14[25] = v9;
    *(void *)uint64_t v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v12;
    *uint64_t v11 = (uint64_t *)v14;
    uint64_t v15 = **(void **)(a1 + 24);
    if (v15)
    {
      *(void *)(a1 + 24) = v15;
      uint64_t v16 = *v11;
    }
    else
    {
      uint64_t v16 = (uint64_t *)v14;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v16);
    ++*(void *)(a1 + 40);
    unsigned int v9 = *a2;
  }
  unint64_t v17 = *(void *)(a1 + 64);
  if (!v17) {
    goto LABEL_108;
  }
  float v18 = (uint64_t *)(a1 + 56);
  unint64_t v19 = v9;
  uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v20.i16[0] = vaddlv_u8(v20);
  unint64_t v21 = v20.u32[0];
  if (v20.u32[0] > 1uLL)
  {
    unint64_t v22 = v9;
    if (v17 <= v9) {
      unint64_t v22 = v9 % v17;
    }
  }
  else
  {
    unint64_t v22 = (v17 - 1) & v9;
  }
  unint64_t v23 = *(uint64_t ****)(*v18 + 8 * v22);
  if (!v23) {
    goto LABEL_108;
  }
  uint8x8_t v24 = *v23;
  if (!*v23) {
    goto LABEL_108;
  }
  unint64_t v25 = v17 - 1;
  if (v20.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v26 = v24[1];
      if (v26 == (uint64_t *)v9)
      {
        if (*((unsigned __int8 *)v24 + 16) == v9) {
          goto LABEL_46;
        }
      }
      else if (((unint64_t)v26 & v25) != v22)
      {
        goto LABEL_108;
      }
      uint8x8_t v24 = (uint64_t **)*v24;
      if (!v24) {
        goto LABEL_108;
      }
    }
  }
  while (1)
  {
    unint64_t v27 = (unint64_t)v24[1];
    if (v27 == v9) {
      break;
    }
    if (v27 >= v17) {
      v27 %= v17;
    }
    if (v27 != v22) {
      goto LABEL_108;
    }
LABEL_40:
    uint8x8_t v24 = (uint64_t **)*v24;
    if (!v24) {
      goto LABEL_108;
    }
  }
  if (*((unsigned __int8 *)v24 + 16) != v9) {
    goto LABEL_40;
  }
LABEL_46:
  if (v20.u32[0] > 1uLL)
  {
    unint64_t v28 = v9;
    if (v17 <= v9) {
      unint64_t v28 = v9 % v17;
    }
  }
  else
  {
    unint64_t v28 = (v17 - 1) & v9;
  }
  BOOL v29 = *(void ***)(*v18 + 8 * v28);
  if (v29)
  {
    BOOL v30 = *v29;
    if (*v29)
    {
      if (v20.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v31 = v30[1];
          if (v31 == v19)
          {
            if (*((unsigned __int8 *)v30 + 16) == v19) {
              goto LABEL_106;
            }
          }
          else if ((v31 & v25) != v28)
          {
            goto LABEL_65;
          }
          BOOL v30 = (void *)*v30;
          if (!v30) {
            goto LABEL_65;
          }
        }
      }
      do
      {
        unint64_t v32 = v30[1];
        if (v32 == v19)
        {
          if (*((unsigned __int8 *)v30 + 16) == v19) {
            goto LABEL_106;
          }
        }
        else
        {
          if (v32 >= v17) {
            v32 %= v17;
          }
          if (v32 != v28) {
            break;
          }
        }
        BOOL v30 = (void *)*v30;
      }
      while (v30);
    }
  }
LABEL_65:
  unsigned int v33 = (void *)(a1 + 72);
  BOOL v30 = operator new(0x38uLL);
  uint64_t v51 = v30;
  uint64_t v52 = a1 + 72;
  void *v30 = 0;
  v30[1] = v19;
  *((unsigned char *)v30 + 16) = *a2;
  v30[6] = 0;
  float v34 = (float)(unint64_t)(*(void *)(a1 + 80) + 1);
  char v53 = 1;
  float v35 = *(float *)(a1 + 88);
  if ((float)(v35 * (float)v17) >= v34)
  {
    unint64_t v19 = v28;
  }
  else
  {
    BOOL v37 = v17 < 3 || v21 > 1;
    unint64_t v38 = v37 | (2 * v17);
    unint64_t v39 = vcvtps_u32_f32(v34 / v35);
    if (v38 <= v39) {
      size_t prime = v39;
    }
    else {
      size_t prime = v38;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v17 = *(void *)(a1 + 64);
    }
    if (prime > v17) {
      goto LABEL_81;
    }
    if (prime < v17)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 80) / *(float *)(a1 + 88));
      if (v17 < 3 || (uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < v17) {
LABEL_81:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 56, prime);
    }
    unint64_t v17 = *(void *)(a1 + 64);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v17 <= v19) {
        v19 %= v17;
      }
    }
    else
    {
      unint64_t v19 = (v17 - 1) & v19;
    }
  }
  uint64_t v44 = *v18;
  unsigned int v45 = *(void **)(*v18 + 8 * v19);
  if (v45)
  {
    void *v30 = *v45;
    goto LABEL_104;
  }
  void *v30 = *v33;
  void *v33 = v30;
  *(void *)(v44 + 8 * v19) = v33;
  if (*v30)
  {
    unint64_t v46 = *(void *)(*v30 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v46 >= v17) {
        v46 %= v17;
      }
    }
    else
    {
      v46 &= v17 - 1;
    }
    unsigned int v45 = (void *)(*v18 + 8 * v46);
LABEL_104:
    *unsigned int v45 = v30;
  }
  ++*(void *)(a1 + 80);
LABEL_106:
  uint64_t v51 = a3;
  uint64_t v47 = v30[6];
  if (!v47)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    uint64_t v50 = v49;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MapEngineSetting,std::function<void ()(long long)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MapEngineSetting,std::function<void ()(long long)>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&v51);
    _Unwind_Resume(v50);
  }
  (*(void (**)(uint64_t, void **))(*(void *)v47 + 48))(v47, &v51);
LABEL_108:
  uint64_t v48 = **(void **)(a1 + 48);
  if (v48)
  {
    LOBYTE(v51) = 5;
    md::MapEngine::setNeedsTick(v48, &v51);
  }
}

void sub_1A1B01E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B01E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::PuckLocationAnimationTracingLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  int v5 = *(unsigned __int8 *)(a1 + 176);
  if (*(void *)(a1 + 368))
  {
    uint64_t v6 = [MEMORY[0x1E4F64860] sharedPlatform];
    int v7 = [v6 isInternalInstall];
  }
  else
  {
    int v7 = 0;
  }
  if (v5) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    uint64_t v9 = *a3;
    id v10 = *(id *)(v9 + 40);
    if (v10)
    {
      uint64_t v11 = v10;
      id v12 = *(id *)(v9 + 40);
      unsigned int v13 = [v12 routeInfo];
      int v147 = [v13 route];

      if (*(void *)(a1 + 280))
      {
        if (v147)
        {
          uint64_t v14 = md::LayoutContext::frameState(a2);
          uint64_t v140 = objc_msgSend(v147, "closestPointOnRoute:", *(double *)(v14 + 56) * 57.2957795, *(double *)(v14 + 64) * 57.2957795);
          if (*(void *)(a1 + 280))
          {
            unint64_t v15 = *(void *)(a1 + 272);
            unint64_t v146 = (char **)(a1 + 296);
            while (1)
            {
              uint64_t v17 = v15 & 0x7F;
              uint64_t v148 = *(void *)(*(void *)(a1 + 248) + ((v15 >> 4) & 0xFFFFFFFFFFFFFF8));
              uint64_t v18 = v148 + 32 * v17;
              if (*(void **)(v18 + 16) == v147) {
                break;
              }
              if (*(unsigned char *)(a1 + 176))
              {
                if (GEOGetVectorKitPuckTrackingLog(void)::onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitPuckTrackingLog(void)::onceToken, &__block_literal_global_50819);
                }
                unint64_t v19 = GEOGetVectorKitPuckTrackingLog(void)::log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitPuckTrackingLog(void)::log, OS_LOG_TYPE_INFO))
                {
                  uint64_t v20 = *(void *)(v148 + 32 * v17 + 24);
                  *(_DWORD *)buf = 138412290;
                  uint64_t v150 = v20;
                  _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_INFO, "[VK] [%@] Dropped - route no longer valid", buf, 0xCu);
                }
                uint64_t v21 = *(void *)(*(void *)(a1 + 248) + ((*(void *)(a1 + 272) >> 4) & 0xFFFFFFFFFFFFFF8));
                uint64_t v17 = *(void *)(a1 + 272) & 0x7FLL;
              }
              else
              {
                uint64_t v21 = *(void *)(*(void *)(a1 + 248) + ((v15 >> 4) & 0xFFFFFFFFFFFFFF8));
              }
              md::PuckLocationAnimationTracingLogic::publishEvent(a1, v21 + 32 * v17, 0);
              uint64_t v43 = (id *)(*(void *)(*(void *)(a1 + 248) + ((*(void *)(a1 + 272) >> 4) & 0xFFFFFFFFFFFFFF8))
                         + 32 * (*(void *)(a1 + 272) & 0x7FLL));

              uint64_t v16 = *(void *)(a1 + 280) - 1;
              *(void *)(a1 + 280) = v16;
              unint64_t v15 = *(void *)(a1 + 272) + 1;
              *(void *)(a1 + 272) = v15;
              if (v15 < 0x100) {
                goto LABEL_15;
              }
LABEL_13:
              operator delete(**(void ***)(a1 + 248));
              *(void *)(a1 + 248) += 8;
              unint64_t v15 = *(void *)(a1 + 272) - 128;
              *(void *)(a1 + 272) = v15;
LABEL_14:
              uint64_t v16 = *(void *)(a1 + 280);
LABEL_15:
              if (!v16) {
                goto LABEL_152;
              }
            }
            unsigned int v22 = *(_DWORD *)(v18 + 8);
            unsigned int v144 = (void *)(v18 + 8);
            if (v22 < v140
              || v22 == v140 && *(float *)(v148 + 32 * v17 + 12) <= *((float *)&v140 + 1))
            {
              unsigned int v141 = (id *)v18;
              uint64_t v142 = (id *)(v18 + 16);
              uint64_t v143 = *(void *)(md::LayoutContext::frameState(a2) + 96);
              if (*(unsigned char *)(a1 + 176))
              {
                if (GEOGetVectorKitPuckTrackingLog(void)::onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitPuckTrackingLog(void)::onceToken, &__block_literal_global_50819);
                }
                unint64_t v23 = (id)GEOGetVectorKitPuckTrackingLog(void)::log;
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  uint64_t v24 = *(void *)(v148 + 32 * v17 + 24);
                  GEOPolylineCoordinateAsFullString();
                  id v25 = (id)objc_claimAutoreleasedReturnValue();
                  uint64_t v26 = GEOPolylineCoordinateAsFullString();
                  *(_DWORD *)buf = 138413058;
                  uint64_t v150 = v24;
                  __int16 v151 = 2112;
                  id v152 = v25;
                  __int16 v153 = 2112;
                  double v154 = v26;
                  __int16 v155 = 2048;
                  uint64_t v156 = v143;
                  _os_log_impl(&dword_1A1780000, v23, OS_LOG_TYPE_INFO, "[VK] [%@] Animation Reached Location - routeCoordinate:%@ presentationRouteCoordinate:(%@) frameStamp:%lu", buf, 0x2Au);
                }
              }
              md::PuckLocationAnimationTracingLogic::publishEvent(a1, *(void *)(*(void *)(a1 + 248) + ((*(void *)(a1 + 272) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*(void *)(a1 + 272) & 0x7FLL), 2);
              unint64_t v27 = *(char **)(a1 + 304);
              unint64_t v28 = *v146;
              uint64_t v29 = v27 - *v146;
              uint64_t v30 = v29 >> 3;
              if (v27 == *v146) {
                uint64_t v31 = 0;
              }
              else {
                uint64_t v31 = 102 * v30 - 1;
              }
              unint64_t v32 = *(void *)(a1 + 320);
              unint64_t v33 = *(void *)(a1 + 328) + v32;
              if (v31 != v33)
              {
LABEL_122:
                int64_t v110 = (void *)(*(void *)&v28[8 * (v33 / 0x66)] + 40 * (v33 % 0x66));
                *int64_t v110 = v143;
                v110[1] = *v141;
                v110[2] = *v144;
                v110[3] = *v142;
                v110[4] = *(id *)(v148 + 32 * v17 + 24);
                ++*(void *)(a1 + 328);
                BOOL v111 = (id *)(*(void *)(*(void *)(a1 + 248) + ((*(void *)(a1 + 272) >> 4) & 0xFFFFFFFFFFFFFF8))
                            + 32 * (*(void *)(a1 + 272) & 0x7FLL));

                int64x2_t v112 = vaddq_s64(*(int64x2_t *)(a1 + 272), (int64x2_t)xmmword_1A28FE7B0);
                *(int64x2_t *)(a1 + 272) = v112;
                unint64_t v15 = v112.i64[0];
                if (v112.i64[0] < 0x100uLL) {
                  goto LABEL_14;
                }
                goto LABEL_13;
              }
              if (v32 >= 0x66)
              {
                *(void *)(a1 + 320) = v32 - 102;
                float v35 = v28 + 8;
                uint64_t v34 = *(void *)v28;
                *(void *)(a1 + 296) = v28 + 8;
                if (*(char **)(a1 + 312) != v27)
                {
LABEL_119:
                  *(void *)unint64_t v27 = v34;
                  goto LABEL_120;
                }
                int v36 = *(char **)(a1 + 288);
                if (v35 > v36)
                {
                  uint64_t v37 = (v35 - v36) >> 3;
                  if (v37 >= -1) {
                    uint64_t v38 = v37 + 1;
                  }
                  else {
                    uint64_t v38 = v37 + 2;
                  }
                  uint64_t v39 = v38 >> 1;
                  BOOL v40 = &v35[-8 * (v38 >> 1)];
                  int64_t v41 = v27 - v35;
                  if (v27 == v35)
                  {
                    uint8x8_t v42 = v27;
                  }
                  else
                  {
                    memmove(&v35[-8 * (v38 >> 1)], v35, v27 - v35);
                    uint8x8_t v42 = *v146;
                  }
                  unint64_t v27 = &v40[v41];
                  *(void *)(a1 + 296) = &v42[-8 * v39];
                  *(void *)(a1 + 304) = &v40[v41];
                  goto LABEL_119;
                }
                if (v27 == v36) {
                  unint64_t v53 = 1;
                }
                else {
                  unint64_t v53 = (v27 - v36) >> 2;
                }
                if (!(v53 >> 61))
                {
                  uint64_t v54 = operator new(8 * v53);
                  unint64_t v55 = v53 >> 2;
                  uint64_t v56 = &v54[8 * (v53 >> 2)];
                  int64_t v57 = v27 - v35;
                  BOOL v8 = v27 == v35;
                  unint64_t v27 = v56;
                  if (v8) {
                    goto LABEL_117;
                  }
                  unint64_t v27 = &v56[v57 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v58 = v57 - 8;
                  if (v58 >= 0x38)
                  {
                    uint64_t v101 = 8 * v55;
                    unint64_t v102 = &v54[8 * v55] - v35;
                    uint64_t v59 = &v54[8 * (v53 >> 2)];
                    if (v102 >= 0x20)
                    {
                      uint64_t v103 = (v58 >> 3) + 1;
                      uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
                      uint64_t v59 = &v56[v104];
                      uint64_t v105 = (long long *)(v28 + 24);
                      unsigned int v106 = &v54[v101 + 16];
                      uint64_t v107 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v108 = *v105;
                        *(v106 - 1) = *(v105 - 1);
                        _OWORD *v106 = v108;
                        v105 += 2;
                        v106 += 2;
                        v107 -= 4;
                      }
                      while (v107);
                      if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_117:
                        *(void *)(a1 + 288) = v54;
                        *(void *)(a1 + 296) = v56;
                        *(void *)(a1 + 304) = v27;
                        *(void *)(a1 + 312) = &v54[8 * v53];
                        if (v36)
                        {
                          operator delete(v36);
                          unint64_t v27 = *(char **)(a1 + 304);
                        }
                        goto LABEL_119;
                      }
                      v35 += v104;
                    }
                  }
                  else
                  {
                    uint64_t v59 = &v54[8 * (v53 >> 2)];
                  }
                  do
                  {
                    uint64_t v109 = *(void *)v35;
                    v35 += 8;
                    *(void *)uint64_t v59 = v109;
                    v59 += 8;
                  }
                  while (v59 != v27);
                  goto LABEL_117;
                }
LABEL_156:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v44 = *(char **)(a1 + 312);
              unsigned int v45 = *(char **)(a1 + 288);
              uint64_t v46 = v44 - v45;
              if (v30 < (unint64_t)((v44 - v45) >> 3))
              {
                if (v44 != v27)
                {
                  *(void *)unint64_t v27 = operator new(0xFF0uLL);
LABEL_120:
                  *(void *)(a1 + 304) += 8;
LABEL_121:
                  unint64_t v28 = *(char **)(a1 + 296);
                  unint64_t v33 = *(void *)(a1 + 328) + *(void *)(a1 + 320);
                  goto LABEL_122;
                }
                unsigned int v60 = operator new(0xFF0uLL);
                uint64_t v61 = v28;
                if (v45 != v28)
                {
LABEL_128:
                  *((void *)v61 - 1) = v60;
                  uint64_t v114 = *(char **)(a1 + 296);
                  uint64_t v115 = *(char **)(a1 + 304);
                  *(void *)(a1 + 296) = v114 - 8;
                  uint64_t v116 = *((void *)v114 - 1);
                  *(void *)(a1 + 296) = v114;
                  if (v115 != *(char **)(a1 + 312))
                  {
LABEL_129:
                    *(void *)uint64_t v115 = v116;
                    goto LABEL_120;
                  }
                  unsigned int v117 = *(char **)(a1 + 288);
                  if (v114 > v117)
                  {
                    uint64_t v118 = (v114 - v117) >> 3;
                    if (v118 >= -1) {
                      uint64_t v119 = v118 + 1;
                    }
                    else {
                      uint64_t v119 = v118 + 2;
                    }
                    uint64_t v120 = v119 >> 1;
                    uint64_t v121 = &v114[-8 * (v119 >> 1)];
                    int64_t v122 = v115 - v114;
                    if (v115 != v114)
                    {
                      memmove(&v114[-8 * (v119 >> 1)], v114, v115 - v114);
                      uint64_t v114 = *v146;
                    }
                    *(void *)(a1 + 296) = &v114[-8 * v120];
                    *(void *)(a1 + 304) = &v121[v122];
                    *(void *)&v121[v122] = v116;
                    goto LABEL_120;
                  }
                  if (v115 == v117) {
                    unint64_t v123 = 1;
                  }
                  else {
                    unint64_t v123 = (v115 - v117) >> 2;
                  }
                  if (v123 >> 61) {
                    goto LABEL_156;
                  }
                  uint64_t v124 = operator new(8 * v123);
                  unint64_t v125 = v123 >> 2;
                  uint64_t v126 = &v124[8 * (v123 >> 2)];
                  int64_t v127 = v115 - v114;
                  BOOL v8 = v115 == v114;
                  uint64_t v115 = v126;
                  if (!v8)
                  {
                    uint64_t v115 = &v126[v127 & 0xFFFFFFFFFFFFFFF8];
                    unint64_t v128 = v127 - 8;
                    if (v128 < 0x38)
                    {
                      uint64_t v129 = &v124[8 * (v123 >> 2)];
                      goto LABEL_149;
                    }
                    uint64_t v130 = 8 * v125;
                    unint64_t v131 = &v124[8 * v125] - v114;
                    uint64_t v129 = &v124[8 * (v123 >> 2)];
                    if (v131 < 0x20)
                    {
                      do
                      {
LABEL_149:
                        uint64_t v138 = *(void *)v114;
                        v114 += 8;
                        *(void *)uint64_t v129 = v138;
                        v129 += 8;
                      }
                      while (v129 != v115);
                      goto LABEL_150;
                    }
                    uint64_t v132 = (v128 >> 3) + 1;
                    uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v129 = &v126[v133];
                    uint64_t v134 = (long long *)(v114 + 16);
                    unsigned int v135 = &v124[v130 + 16];
                    uint64_t v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v137 = *v134;
                      *(v135 - 1) = *(v134 - 1);
                      *unsigned int v135 = v137;
                      v134 += 2;
                      v135 += 2;
                      v136 -= 4;
                    }
                    while (v136);
                    if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      v114 += v133;
                      goto LABEL_149;
                    }
                  }
LABEL_150:
                  *(void *)(a1 + 288) = v124;
                  *(void *)(a1 + 296) = v126;
                  *(void *)(a1 + 304) = v115;
                  *(void *)(a1 + 312) = &v124[8 * v123];
                  if (v117)
                  {
                    operator delete(v117);
                    uint64_t v115 = *(char **)(a1 + 304);
                  }
                  goto LABEL_129;
                }
                if (v27 == v28) {
                  unint64_t v62 = 1;
                }
                else {
                  unint64_t v62 = v46 >> 2;
                }
                if (v62 >> 61) {
                  goto LABEL_156;
                }
                double v63 = (char *)operator new(8 * v62);
                unint64_t v64 = (v62 + 3) >> 2;
                uint64_t v61 = &v63[8 * v64];
                uint64_t v65 = &v63[8 * v62];
                uint64_t v66 = v61;
                if (v27 != v28)
                {
                  uint64_t v66 = &v61[(v27 - v45) & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v67 = v27 - v45 - 8;
                  uint64_t v68 = &v63[8 * v64];
                  uint64_t v69 = v28;
                  if (v67 > 0x37)
                  {
                    uint64_t v70 = 8 * v64;
                    uint64_t v68 = &v63[8 * v64];
                    uint64_t v69 = v28;
                    if ((unint64_t)(v68 - v45) >= 0x20)
                    {
                      uint64_t v71 = (v67 >> 3) + 1;
                      uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
                      uint64_t v68 = &v61[v72];
                      uint64_t v73 = (long long *)(v28 + 16);
                      int v74 = &v63[v70 + 16];
                      uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v76 = *v73;
                        *((_OWORD *)v74 - 1) = *(v73 - 1);
                        *(_OWORD *)int v74 = v76;
                        v73 += 2;
                        v74 += 32;
                        v75 -= 4;
                      }
                      while (v75);
                      if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        *(void *)(a1 + 288) = v63;
                        *(void *)(a1 + 296) = v61;
                        *(void *)(a1 + 304) = v66;
                        *(void *)(a1 + 312) = v65;
LABEL_127:
                        operator delete(v28);
                        uint64_t v61 = *v146;
                        goto LABEL_128;
                      }
                      uint64_t v69 = &v28[v72];
                    }
                  }
                  do
                  {
                    uint64_t v113 = *(void *)v69;
                    v69 += 8;
                    *(void *)uint64_t v68 = v113;
                    v68 += 8;
                  }
                  while (v68 != v66);
                }
                *(void *)(a1 + 288) = v63;
                *(void *)(a1 + 296) = v61;
                *(void *)(a1 + 304) = v66;
                *(void *)(a1 + 312) = v65;
                if (!v28) {
                  goto LABEL_128;
                }
                goto LABEL_127;
              }
              if (v44 == v45) {
                unint64_t v47 = 1;
              }
              else {
                unint64_t v47 = v46 >> 2;
              }
              if (v47 >> 61) {
                goto LABEL_156;
              }
              uint64_t v48 = (char *)operator new(8 * v47);
              uint64_t v49 = operator new(0xFF0uLL);
              uint64_t v50 = &v48[8 * v30];
              uint64_t v51 = &v48[8 * v47];
              if (v30 == v47)
              {
                if (v29 < 1)
                {
                  if (v27 == v28) {
                    unint64_t v77 = 1;
                  }
                  else {
                    unint64_t v77 = v29 >> 2;
                  }
                  if (v77 >> 61) {
                    goto LABEL_156;
                  }
                  uint64_t v78 = v49;
                  uint64_t v50 = (char *)operator new(8 * v77);
                  uint64_t v51 = &v50[8 * v77];
                  operator delete(v48);
                  unint64_t v28 = *(char **)(a1 + 296);
                  unint64_t v27 = *(char **)(a1 + 304);
                  uint64_t v48 = v50;
                  uint64_t v49 = v78;
                }
                else
                {
                  unint64_t v52 = v30 + 2;
                  if (v30 >= -1) {
                    unint64_t v52 = v30 + 1;
                  }
                  v50 -= 8 * (v52 >> 1);
                }
              }
              *(void *)uint64_t v50 = v49;
              uint64_t v79 = v50 + 8;
              if (v27 == v28)
              {
LABEL_84:
                unsigned int v80 = *(void **)(a1 + 288);
                *(void *)(a1 + 288) = v48;
                *(void *)(a1 + 296) = v50;
                *(void *)(a1 + 304) = v79;
                *(void *)(a1 + 312) = v51;
                if (v80) {
                  operator delete(v80);
                }
                goto LABEL_121;
              }
              while (v50 != v48)
              {
                uint64_t v81 = v50;
                uint64_t v82 = v79;
LABEL_87:
                uint64_t v83 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v81 - 1) = v83;
                uint64_t v50 = v81 - 8;
                uint64_t v79 = v82;
                if (v27 == *v146) {
                  goto LABEL_84;
                }
              }
              if (v79 < v51)
              {
                uint64_t v84 = (v51 - v79) >> 3;
                if (v84 >= -1) {
                  unint64_t v85 = v84 + 1;
                }
                else {
                  unint64_t v85 = v84 + 2;
                }
                uint64_t v82 = &v79[8 * (v85 >> 1)];
                uint64_t v81 = &v50[8 * (v85 >> 1)];
                if (v79 == v50)
                {
                  uint64_t v48 = v79;
                }
                else
                {
                  memmove(&v50[8 * (v85 >> 1)], v50, v79 - v50);
                  uint64_t v48 = v50;
                }
                goto LABEL_87;
              }
              if (v51 == v50) {
                unint64_t v86 = 1;
              }
              else {
                unint64_t v86 = (v51 - v50) >> 2;
              }
              if (v86 >> 61) {
                goto LABEL_156;
              }
              unsigned int v87 = (char *)operator new(8 * v86);
              uint64_t v48 = v87;
              unint64_t v88 = (v86 + 3) >> 2;
              uint64_t v81 = &v87[8 * v88];
              uint64_t v82 = v81;
              int64_t v89 = v79 - v50;
              if (v79 != v50)
              {
                uint64_t v82 = &v81[v89 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v90 = v89 - 8;
                uint64_t v91 = &v87[8 * v88];
                uint64_t v92 = v50;
                if (v90 >= 0x38)
                {
                  uint64_t v93 = 8 * v88;
                  uint64_t v91 = &v87[8 * v88];
                  uint64_t v92 = v50;
                  if ((unint64_t)(v91 - v50) >= 0x20)
                  {
                    uint64_t v94 = (v90 >> 3) + 1;
                    uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v91 = &v81[v95];
                    double v96 = (long long *)(v50 + 16);
                    uint64_t v97 = &v87[v93 + 16];
                    uint64_t v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v99 = *v96;
                      *((_OWORD *)v97 - 1) = *(v96 - 1);
                      *(_OWORD *)uint64_t v97 = v99;
                      v96 += 2;
                      v97 += 32;
                      v98 -= 4;
                    }
                    while (v98);
                    if (v94 == (v94 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_107;
                    }
                    uint64_t v92 = &v50[v95];
                  }
                }
                do
                {
                  uint64_t v100 = *(void *)v92;
                  v92 += 8;
                  *(void *)uint64_t v91 = v100;
                  v91 += 8;
                }
                while (v91 != v82);
              }
LABEL_107:
              uint64_t v51 = &v87[8 * v86];
              operator delete(v50);
              goto LABEL_87;
            }
          }
        }
      }
LABEL_152:
      uint64_t v139 = v147;
    }
    else
    {
      uint64_t v139 = 0;
    }
  }
}

void sub_1A1B02A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  operator delete(v23);
  operator delete(v24);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_26>,void ()(long long)>::operator()(uint64_t a1, void *a2)
{
  return md::World::setEnableGlobe(*(void *)(*(void *)(*(void *)(a1 + 8) + 896) + 32), *(void *)(*(void *)(*(void *)(a1 + 8) + 896) + 40), *a2 != 0);
}

void sub_1A1B02B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B050E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  md::StyleSettingsParser::~StyleSettingsParser((md::StyleSettingsParser *)(v55 - 224));

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v55 - 256));
  _Unwind_Resume(a1);
}

uint64_t md::StyleSettingsObjectNode::getValue<BOOL>(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 16, a2);
  if ((uint64_t *)(a1 + 24) != v3)
  {
    uint64_t v4 = v3[7];
    if (!*(unsigned char *)(v4 + 8))
    {
      uint64_t v8 = *(void *)(v4 + 24);
      if (v8 == 5)
      {
        uint64_t v9 = *(int **)(v4 + 16);
        int v10 = *v9;
        int v11 = *((unsigned __int8 *)v9 + 4);
        if (v10 == 1936482662 && v11 == 101)
        {
          int v6 = 0;
          int v5 = 1;
          return v6 | (v5 << 8);
        }
      }
      else if (v8 == 4 && **(_DWORD **)(v4 + 16) == 1702195828)
      {
        int v5 = 1;
        int v6 = 1;
        return v6 | (v5 << 8);
      }
    }
  }
  int v5 = 0;
  int v6 = 0;
  return v6 | (v5 << 8);
}

void md::DisplayOptions::readThermalOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = a2 + 8;
  do
  {
    int v6 = md::DisplayOptions::readThermalOptions(md::StyleSettingsObjectNode const*,md::ThermalOptions *)::thermalLevelNames[v2];
    size_t v7 = strlen(v6);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (long long *)operator new(v10 + 1);
      *((void *)&__dst + 1) = v8;
      unint64_t v27 = v11 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
LABEL_10:
      memmove(p_dst, v6, v8);
      goto LABEL_11;
    }
    HIBYTE(v27) = v7;
    p_dst = &__dst;
    if (v7) {
      goto LABEL_10;
    }
LABEL_11:
    *((unsigned char *)p_dst + v8) = 0;
    id v12 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v3, (const void **)&__dst);
    if (v4 == v12)
    {
      uint64_t v13 = 0;
      if (SHIBYTE(v27) < 0) {
        goto LABEL_16;
      }
    }
    else
    {
      if (*(unsigned char *)(v12[7] + 8) == 1) {
        uint64_t v13 = v12[7];
      }
      else {
        uint64_t v13 = 0;
      }
      if (SHIBYTE(v27) < 0) {
LABEL_16:
      }
        operator delete((void *)__dst);
    }
    if (!v13) {
      goto LABEL_2;
    }
    HIBYTE(v27) = 10;
    strcpy((char *)&__dst, "target-fps");
    uint64_t v14 = v13 + 16;
    unint64_t v15 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v13 + 16, (const void **)&__dst);
    uint64_t v16 = (uint64_t *)(v13 + 24);
    if (v16 != v15)
    {
      uint64_t v17 = v15[7];
      if (!*(unsigned char *)(v17 + 8))
      {
        size_t v23 = *(void *)(v17 + 24);
        if (v23 == 4)
        {
          uint64_t v24 = *(_DWORD **)(v17 + 16);
          if (*v24 != 1819047278)
          {
            uint64_t v25 = md::StyleSettingsValueNode::value_as<int>(v24, 4uLL);
            if ((v25 & 0x100000000) != 0)
            {
LABEL_35:
              *(_DWORD *)(v5 - 8) = v25;
              *(unsigned char *)(v5 - 4) = 1;
            }
          }
        }
        else
        {
          uint64_t v25 = md::StyleSettingsValueNode::value_as<int>(*(void **)(v17 + 16), v23);
          if ((v25 & 0x100000000) != 0) {
            goto LABEL_35;
          }
        }
      }
    }
    HIBYTE(v27) = 7;
    strcpy((char *)&__dst, "max-fps");
    uint64_t v18 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v14, (const void **)&__dst);
    if (v16 != v18)
    {
      uint64_t v19 = v18[7];
      if (!*(unsigned char *)(v19 + 8))
      {
        size_t v20 = *(void *)(v19 + 24);
        if (v20 != 4)
        {
          uint64_t v22 = md::StyleSettingsValueNode::value_as<int>(*(void **)(v19 + 16), v20);
          if ((v22 & 0x100000000) == 0) {
            goto LABEL_2;
          }
LABEL_33:
          *(_DWORD *)uint64_t v5 = v22;
          *(unsigned char *)(v5 + 4) = 1;
          goto LABEL_2;
        }
        uint64_t v21 = *(_DWORD **)(v19 + 16);
        if (*v21 != 1819047278)
        {
          uint64_t v22 = md::StyleSettingsValueNode::value_as<int>(v21, 4uLL);
          if ((v22 & 0x100000000) != 0) {
            goto LABEL_33;
          }
        }
      }
    }
LABEL_2:
    ++v2;
    v5 += 16;
  }
  while (v2 != 4);
}

uint64_t md::StyleSettingsValueNode::value_as<int>(void *__src, size_t __n)
{
  if (__n >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__n >= 0x17)
  {
    size_t v5 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17) {
      size_t v5 = __n | 7;
    }
    size_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)__n;
    int64_t v13 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v13) = __n;
  uint64_t v4 = __dst;
  if (__n) {
LABEL_8:
  }
    memcpy(v4, __src, __n);
  *((unsigned char *)v4 + __n) = 0;
  uint64_t v11 = 0;
  if (v13 >= 0) {
    size_t v7 = (const char *)__dst;
  }
  else {
    size_t v7 = (const char *)__dst[0];
  }
  unsigned int v8 = strtol(v7, &v11, 10);
  int v9 = *v11;
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  if (v9) {
    return 0;
  }
  else {
    return v8 | 0x100000000;
  }
}

void md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 16;
  size_t v5 = (uint64_t *)(a1 + 24);
  while (1)
  {
    size_t v6 = (&md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::scaleNames)[(void)v3];
    size_t v7 = strlen(v6);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    unsigned int v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      int v9 = operator new(v10 + 1);
      __p[1] = v8;
      unint64_t v24 = v11 | 0x8000000000000000;
      __p[0] = v9;
    }
    else
    {
      HIBYTE(v24) = v7;
      int v9 = __p;
      if (!v7) {
        goto LABEL_11;
      }
    }
    memmove(v9, v6, (size_t)v8);
LABEL_11:
    *((unsigned char *)v8 + (void)v9) = 0;
    id v12 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v4, (const void **)__p);
    if (v5 == v12 || (uint64_t v13 = v12[7], *(unsigned char *)(v13 + 8)))
    {
LABEL_13:
      int v14 = 0;
      uint64_t v15 = 0;
      int v16 = 0;
      if ((SHIBYTE(v24) & 0x80000000) == 0) {
        goto LABEL_15;
      }
LABEL_14:
      operator delete(__p[0]);
      goto LABEL_15;
    }
    size_t v18 = *(void *)(v13 + 24);
    if (v18 == 4)
    {
      uint64_t v19 = *(_DWORD **)(v13 + 16);
      if (*v19 == 1819047278) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v19 = *(_DWORD **)(v13 + 16);
    }
    uint64_t v20 = md::StyleSettingsValueNode::value_as<float>(v19, v18);
    uint64_t v15 = v20 & 0x100000000;
    int v14 = v20 & 0xFFFFFF00;
    int v16 = v20;
    if (SHIBYTE(v24) < 0) {
      goto LABEL_14;
    }
LABEL_15:
    if (v15) {
      break;
    }
LABEL_2:
    uint64_t v3 = (char *)v3 + 1;
    if (v3 == (void *)6) {
      return;
    }
  }
  __p[0] = v3;
  int v25 = v16 | v14;
  uint64_t v17 = *(void *)(a2 + 24);
  if (v17)
  {
    (*(void (**)(uint64_t, void **, int *))(*(void *)v17 + 48))(v17, __p, &v25);
    goto LABEL_2;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v21, v22);
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v8 = *((char *)v3 + 55);
      int v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v11 = v6 >= v10 ? v10 : v6;
      int v12 = memcmp(v9, v5, v11);
      if (v12) {
        break;
      }
      if (v10 >= v6) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_24;
      }
    }
    if (v12 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    size_t v7 = v3;
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2) {
    return v2;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    int v14 = v7 + 4;
  }
  else {
    int v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= v6) {
    size_t v16 = v6;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v5, v14, v16);
  if (!v17)
  {
    if (v6 >= v15) {
      return v7;
    }
    return v2;
  }
  if (v17 < 0) {
    return v2;
  }
  return v7;
}

uint64_t md::StyleSettingsValueNode::value_as<float>(void *__src, size_t __n)
{
  if (__n >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__n >= 0x17)
  {
    size_t v5 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17) {
      size_t v5 = __n | 7;
    }
    size_t v6 = v5 + 1;
    int v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)__n;
    int64_t v13 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v13) = __n;
  int v4 = __dst;
  if (__n) {
LABEL_8:
  }
    memcpy(v4, __src, __n);
  *((unsigned char *)v4 + __n) = 0;
  size_t v11 = 0;
  if (v13 >= 0) {
    size_t v7 = (const char *)__dst;
  }
  else {
    size_t v7 = (const char *)__dst[0];
  }
  float v8 = strtof(v7, &v11);
  int v9 = *v11;
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  if (v9) {
    return 0;
  }
  else {
    return LODWORD(v8) | 0x100000000;
  }
}

float std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(a1 + 8) + 20 * *a2 + 16) = *a3;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3>,void ()(unsigned long,float)>::operator()(uint64_t result, void *a2, float *a3)
{
  uint64_t v3 = *(void *)(result + 8) + 20 * *a2;
  float v4 = *a3 * 1.4;
  if (*a2 < 2uLL) {
    float v4 = *a3;
  }
  *(float *)(v3 + 8) = *a3;
  *(float *)(v3 + 12) = v4;
  return result;
}

float std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(a1 + 8) + 20 * *a2 + 4) = *a3;
  return result;
}

float std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(a1 + 8) + 20 * *a2) = *a3;
  return result;
}

void sub_1A1B06598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a14 == &a11)
  {
    (*(void (**)(uint64_t *))(a11 + 32))(&a11);
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1B067B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B06880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>>::emplace<md::MapEngineSetting,long long>(unsigned __int8 **a1, unsigned __int8 a2, uint64_t a3)
{
  size_t v6 = *a1;
  size_t v7 = a1[1];
  float v8 = *a1;
  if (*a1 != v7)
  {
    float v8 = *a1;
    while (*v8 != a2)
    {
      v8 += 16;
      if (v8 == v7) {
        goto LABEL_7;
      }
    }
  }
  if (v8 == v7)
  {
LABEL_7:
    int v9 = a1[2];
    if (v7 >= v9)
    {
      uint64_t v11 = (v7 - v6) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        abort();
      }
      uint64_t v13 = v9 - v6;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        size_t v15 = (char *)operator new(16 * v14);
      }
      else
      {
        size_t v15 = 0;
      }
      size_t v16 = &v15[16 * v11];
      *size_t v16 = a2;
      *((void *)v16 + 1) = a3;
      size_t v10 = (unsigned __int8 *)(v16 + 16);
      if (v6 != v7)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
          v16 -= 16;
          v7 -= 16;
        }
        while (v7 != v6);
        size_t v6 = *a1;
      }
      *a1 = (unsigned __int8 *)v16;
      a1[1] = v10;
      a1[2] = (unsigned __int8 *)&v15[16 * v14];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      unsigned __int8 *v7 = a2;
      *((void *)v7 + 1) = a3;
      size_t v10 = v7 + 16;
    }
    a1[1] = v10;
  }
}

uint64_t md::MapEngine::setDisplayRate(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 64);
  if (v2)
  {
    uint64_t v3 = this;
    if (*(unsigned char *)(this + 1242))
    {
      size_t v5 = *(void **)(v2 + 72);
      float v4 = (void **)(v2 + 72);
      [v5 maximumRefreshRate];
      double v7 = 1.0;
      double v9 = 1.0 / v8;
      *(float *)&double v9 = (float)(int)llround(v9);
    }
    else
    {
      uint64_t v11 = +[VKPlatform sharedPlatform];
      unsigned int v12 = [v11 explicitDefaultRefreshRate];

      uint64_t v13 = *(void *)(v3 + 64);
      if ((unint64_t)(a2 + 1) <= 1 && v12)
      {
        *(float *)&double v9 = (float)v12;
      }
      else
      {
        if (a2 == -1) {
          int v14 = 0;
        }
        else {
          int v14 = a2;
        }
        if (v14 <= 0)
        {
          [*(id *)(v13 + 72) maximumRefreshRate];
          double v7 = 1.0;
          double v9 = 1.0 / v15;
          int v14 = llround(v9);
        }
        *(float *)&double v9 = (float)v14;
      }
      float v4 = (void **)(v13 + 72);
    }
    size_t v16 = *v4;
    LODWORD(v7) = LODWORD(v9);
    LODWORD(v6) = LODWORD(v9);
    return objc_msgSend(v16, "setPreferredFrameRateRange:", v9, v7, v6);
  }
  return this;
}

void sub_1A1B06BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

md::AnimationManager *md::AnimationManager::AnimationManager(md::AnimationManager *this)
{
  *(void *)this = &unk_1EF535BD0;
  *((void *)this + 1) = &unk_1EF559AB8;
  *((void *)this + 2) = 0;
  uint64_t v2 = (id *)((char *)this + 16);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 850045863;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *((unsigned char *)this + 184) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 1065353216;
  *((_WORD *)this + 116) = 1;
  size_t v5 = [[_AnimationManagerRunner alloc] initWithAnimationManager:this];
  objc_storeStrong(v2, v5);
  uint64_t v3 = v5;

  atomic_store(0, (unsigned __int8 *)this + 184);
  return this;
}

void sub_1A1B06D04(_Unwind_Exception *a1)
{
  std::unordered_map<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>::~unordered_map[abi:nn180100](v4);
  std::array<std::unordered_set<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,2ul>::~array(v1 + 104);
  std::mutex::~mutex(v3);
  *(void *)(v1 + 8) = v2;

  _Unwind_Resume(a1);
}

void md::StyleLogic::setMapKitClientMode(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 175) != a2)
  {
    *(unsigned char *)(a1 + 175) = a2;
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x1007Eu, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x1007Eu, *(unsigned __int8 *)(a1 + 175));
    if (*(unsigned char *)(a1 + 174))
    {
      char v6 = 4;
      uint64_t v3 = *(char **)(a1 + 1128);
      uint64_t v4 = *(char **)(a1 + 1136);
      if (v3 != v4)
      {
        while (*v3 <= 3u)
        {
          if (++v3 == v4) {
            goto LABEL_9;
          }
        }
      }
      if (v3 == v4 || (uint64_t v4 = v3, *v3 != 4)) {
LABEL_9:
      }
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v4, &v6);
      uint64_t v5 = **(void **)(a1 + 1240);
      if (v5)
      {
        char v7 = 12;
        md::MapEngine::setNeedsTick(v5, &v7);
      }
    }
  }
}

void checkForBogusContentScale(double a1)
{
  if (fabs(a1) == INFINITY)
  {
    uint64_t v1 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"contentScale is unreasonable (NaN or Inf)" userInfo:0];
    [v1 raise];
  }
}

void sub_1A1B071E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B07504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::RouteRenderLayer::runLayoutLogic(md::RouteRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v488 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = 0x8BD499FBD96FBB9ELL;
  uint64_t v3 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v4 - 1;
    unint64_t v7 = (*(void *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
    uint64_t v8 = *v3;
    double v9 = **(float ***)(v8 + 8 * v7);
    while (1)
    {
      uint64_t v10 = *((void *)v9 + 1);
      if (v10 == 0x8BD499FBD96FBB9ELL)
      {
        if (*((void *)v9 + 2) == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_18;
        }
      }
      else if ((v10 & v6) != v7)
      {
        goto LABEL_20;
      }
      double v9 = *(float **)v9;
      if (!v9) {
        goto LABEL_21;
      }
    }
  }
  unint64_t v11 = 0x8BD499FBD96FBB9ELL;
  if (*(void *)&v4 <= 0x8BD499FBD96FBB9ELL) {
    unint64_t v11 = 0x8BD499FBD96FBB9ELL % *(void *)&v4;
  }
  uint64_t v8 = *v3;
  double v9 = **(float ***)(v8 + 8 * v11);
  uint64_t v6 = *(void *)&v4 - 1;
  while (1)
  {
    unint64_t v12 = *((void *)v9 + 1);
    if (v12 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v12 >= *(void *)&v4) {
      v12 %= *(void *)&v4;
    }
    if (v12 != v11) {
      goto LABEL_20;
    }
LABEL_12:
    double v9 = *(float **)v9;
    if (!v9) {
      goto LABEL_21;
    }
  }
  if (*((void *)v9 + 2) != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_12;
  }
LABEL_18:
  uint64_t v13 = *((void *)v9 + 5);
  if (*(void *)(v13 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    double v9 = *(float **)(v13 + 32);
    goto LABEL_21;
  }
LABEL_20:
  double v9 = 0;
LABEL_21:
  int v408 = *(unsigned __int8 *)v9;
  double v395 = v9;
  if (v5.u32[0] >= 2uLL)
  {
    unint64_t v15 = 0xE42D19AFCA302E68;
    if (*(void *)&v4 <= 0xE42D19AFCA302E68) {
      unint64_t v15 = 0xE42D19AFCA302E68 % *(void *)&v4;
    }
    int v14 = *(void **)(v8 + 8 * v15);
    do
    {
      do
        int v14 = (void *)*v14;
      while (v14[1] != 0xE42D19AFCA302E68);
    }
    while (v14[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    int v14 = *(void **)(v8 + 8 * (v6 & 0xE42D19AFCA302E68));
    do
    {
      do
        int v14 = (void *)*v14;
      while (v14[1] != 0xE42D19AFCA302E68);
    }
    while (v14[2] != 0xE42D19AFCA302E68);
  }
  uint64_t v16 = *(void *)(v14[5] + 32);
  v486[0] = &unk_1EF572468;
  v486[1] = this;
  v486[2] = v16;
  v487 = v486;
  int v17 = *(unsigned char **)(v16 + 48);
  size_t v18 = *(unsigned char **)(v16 + 56);
  if (v17 == v18) {
    goto LABEL_37;
  }
  do
  {
    v478[0] = *v17;
    if (!v487)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(void *, unsigned char *))(*v487 + 48))(v487, v478);
    ++v17;
  }
  while (v17 != v18);
  if (v487 == v486)
  {
LABEL_37:
    (*(void (**)(void *))(v486[0] + 32))(v486);
  }
  else if (v487)
  {
    (*(void (**)(void *))(*v487 + 40))(v487);
  }
  uint64_t v19 = (uint64_t **)*((void *)this + 8);
  uint64_t v20 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v21 = (int8x8_t)v20[1];
  if (!*(void *)&v21)
  {
    unint64_t v24 = 0;
    goto LABEL_85;
  }
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    uint64_t v23 = 0x1AF456233693CD46;
    if (*(void *)&v21 <= 0x1AF456233693CD46uLL) {
      uint64_t v23 = 0x1AF456233693CD46uLL % *(void *)&v21;
    }
  }
  else
  {
    uint64_t v23 = (*(void *)&v21 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v25 = *v20;
  uint64_t v26 = *(void **)(v25 + 8 * v23);
  if (!v26) {
    goto LABEL_66;
  }
  unint64_t v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_66;
  }
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0x1AF456233693CD46)
      {
        if (v27[2] == 0x1AF456233693CD46) {
          goto LABEL_60;
        }
      }
      else if ((v29 & (*(void *)&v21 - 1)) != v23)
      {
        goto LABEL_66;
      }
      unint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_66;
      }
    }
  }
  while (1)
  {
    unint64_t v28 = v27[1];
    if (v28 == 0x1AF456233693CD46) {
      break;
    }
    if (v28 >= *(void *)&v21) {
      v28 %= *(void *)&v21;
    }
    if (v28 != v23) {
      goto LABEL_66;
    }
LABEL_49:
    unint64_t v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_66;
    }
  }
  if (v27[2] != 0x1AF456233693CD46) {
    goto LABEL_49;
  }
LABEL_60:
  uint64_t v30 = v27[5];
  if (*(void *)(v30 + 8) != 0x1AF456233693CD46)
  {
LABEL_66:
    unint64_t v24 = 0;
    if (v22.u32[0] > 1uLL) {
      goto LABEL_62;
    }
    goto LABEL_67;
  }
  unint64_t v24 = *(double **)(v30 + 32);
  if (v22.u32[0] > 1uLL)
  {
LABEL_62:
    if (*(void *)&v21 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v2 = 0x8BD499FBD96FBB9ELL % *(void *)&v21;
    }
    uint64_t v31 = *(void **)(v25 + 8 * v2);
    if (!v31) {
      goto LABEL_85;
    }
    goto LABEL_68;
  }
LABEL_67:
  unint64_t v2 = (*(void *)&v21 - 1) & 0x8BD499FBD96FBB9ELL;
  uint64_t v31 = *(void **)(v25 + 8 * v2);
  if (!v31) {
    goto LABEL_85;
  }
LABEL_68:
  unint64_t v32 = (void *)*v31;
  if (!v32) {
    goto LABEL_85;
  }
  if (v22.u32[0] < 2uLL)
  {
    uint64_t v33 = *(void *)&v21 - 1;
    while (1)
    {
      uint64_t v35 = v32[1];
      if (v35 == 0x8BD499FBD96FBB9ELL)
      {
        if (v32[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_83;
        }
      }
      else if ((v35 & v33) != v2)
      {
        goto LABEL_85;
      }
      unint64_t v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_85;
      }
    }
  }
  while (2)
  {
    unint64_t v34 = v32[1];
    if (v34 != 0x8BD499FBD96FBB9ELL)
    {
      if (v34 >= *(void *)&v21) {
        v34 %= *(void *)&v21;
      }
      if (v34 != v2) {
        goto LABEL_85;
      }
      goto LABEL_72;
    }
    if (v32[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_72:
      unint64_t v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_85;
      }
      continue;
    }
    break;
  }
LABEL_83:
  uint64_t v36 = v32[5];
  if (*(void *)(v36 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v37 = *(void *)(v36 + 32);
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v37 = 0;
LABEL_86:
  int v38 = *((unsigned __int8 *)this + 108);
  uint64_t v415 = v37;
  int v39 = *(unsigned __int8 *)(v37 + 5);
  *((unsigned char *)this + 108) = v39;
  double v40 = v24[62];
  double v41 = v24[63];
  double v409 = v24;
  double v42 = v24[64];
  if (*(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128) - 1 <= 2)
  {
    double v43 = sqrt(v40 * v40 + v41 * v41);
    double v44 = atan2(v42, v43 * 0.996647189);
    __double2 v45 = __sincos_stret(v44);
    double v46 = atan2(v42 + v45.__sinval * v45.__sinval * 42841.3115 * v45.__sinval, v43 + v45.__cosval * v45.__cosval * -42697.6727 * v45.__cosval);
    __double2 v47 = __sincos_stret(v46);
    double v42 = (v43 / v47.__cosval + -6378137.0 / sqrt(v47.__sinval * v47.__sinval * -0.00669437999 + 1.0))
        * 0.0000000249532021;
  }
  double v48 = v409[470];
  id v49 = *(id *)a2;
  [v49 size];
  double v51 = v50;

  unint64_t v52 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v53 = (int8x8_t)v52[1];
  if (!*(void *)&v53)
  {
    uint64_t v406 = 0;
    int v56 = 0;
    BOOL v57 = 0;
    int v58 = *(unsigned __int8 *)(*((void *)this + 8) + 72);
    goto LABEL_144;
  }
  uint8x8_t v54 = (uint8x8_t)vcnt_s8(v53);
  v54.i16[0] = vaddlv_u8(v54);
  if (v54.u32[0] > 1uLL)
  {
    unint64_t v55 = 0xE42D19AFCA302E68;
    if (*(void *)&v53 <= 0xE42D19AFCA302E68) {
      unint64_t v55 = 0xE42D19AFCA302E68 % *(void *)&v53;
    }
  }
  else
  {
    unint64_t v55 = (*(void *)&v53 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v59 = *v52;
  unsigned int v60 = *(void **)(v59 + 8 * v55);
  if (!v60) {
    goto LABEL_113;
  }
  uint64_t v61 = (void *)*v60;
  if (!v61) {
    goto LABEL_113;
  }
  if (v54.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v63 = v61[1];
      if (v63 == 0xE42D19AFCA302E68)
      {
        if (v61[2] == 0xE42D19AFCA302E68) {
          goto LABEL_110;
        }
      }
      else if ((v63 & (*(void *)&v53 - 1)) != v55)
      {
        goto LABEL_113;
      }
      uint64_t v61 = (void *)*v61;
      if (!v61) {
        goto LABEL_113;
      }
    }
  }
  while (2)
  {
    unint64_t v62 = v61[1];
    if (v62 != 0xE42D19AFCA302E68)
    {
      if (v62 >= *(void *)&v53) {
        v62 %= *(void *)&v53;
      }
      if (v62 != v55) {
        goto LABEL_113;
      }
      goto LABEL_99;
    }
    if (v61[2] != 0xE42D19AFCA302E68)
    {
LABEL_99:
      uint64_t v61 = (void *)*v61;
      if (!v61) {
        goto LABEL_113;
      }
      continue;
    }
    break;
  }
LABEL_110:
  uint64_t v64 = v61[5];
  if (*(void *)(v64 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v65 = *(void *)(v64 + 32);
    if (v65)
    {
      int v56 = *(unsigned __int8 *)(v65 + 84) == 3;
      goto LABEL_114;
    }
  }
LABEL_113:
  int v56 = 0;
LABEL_114:
  int v58 = *(unsigned __int8 *)(*((void *)this + 8) + 72);
  if (v54.u32[0] > 1uLL)
  {
    uint64_t v66 = 0x1B8B241A8D896A1DLL;
    if (*(void *)&v53 <= 0x1B8B241A8D896A1DuLL) {
      uint64_t v66 = 0x1B8B241A8D896A1DuLL % *(void *)&v53;
    }
  }
  else
  {
    uint64_t v66 = (*(void *)&v53 - 1) & 0x1B8B241A8D896A1DLL;
  }
  unint64_t v67 = *(void **)(v59 + 8 * v66);
  if (!v67) {
    goto LABEL_142;
  }
  uint64_t v68 = (void *)*v67;
  if (!v68) {
    goto LABEL_142;
  }
  if (v54.u32[0] < 2uLL)
  {
    uint64_t v69 = *(void *)&v53 - 1;
    while (1)
    {
      uint64_t v71 = v68[1];
      if (v71 == 0x1B8B241A8D896A1DLL)
      {
        if (v68[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_134;
        }
      }
      else if ((v71 & v69) != v66)
      {
        goto LABEL_142;
      }
      uint64_t v68 = (void *)*v68;
      if (!v68) {
        goto LABEL_142;
      }
    }
  }
  while (1)
  {
    unint64_t v70 = v68[1];
    if (v70 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v70 >= *(void *)&v53) {
      v70 %= *(void *)&v53;
    }
    if (v70 != v66) {
      goto LABEL_142;
    }
LABEL_123:
    uint64_t v68 = (void *)*v68;
    if (!v68) {
      goto LABEL_142;
    }
  }
  if (v68[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_123;
  }
LABEL_134:
  uint64_t v72 = v68[5];
  if (*(void *)(v72 + 8) != 0x1B8B241A8D896A1DLL || (uint64_t v406 = *(void *)(v72 + 32)) == 0)
  {
LABEL_142:
    uint64_t v406 = 0;
    goto LABEL_143;
  }
  uint64_t v73 = +[VKDebugSettings sharedSettings];
  char v74 = [v73 showStaticRouteWidth];

  if (v74)
  {
LABEL_143:
    BOOL v57 = 0;
    goto LABEL_144;
  }
  std::unordered_set<md::NavigationLogicEvent>::unordered_set((uint64_t)v478, v406 + 104);
  if (*(void *)&v478[8])
  {
    uint64_t v75 = **(uint64_t ***)v478;
    if (**(void **)v478)
    {
      uint64_t v75 = (uint64_t *)*v75;
      if (v75)
      {
        uint8x8_t v76 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v478[8]);
        v76.i16[0] = vaddlv_u8(v76);
        if (v76.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v114 = v75[1];
            if (v114)
            {
              if ((v114 & (*(void *)&v478[8] - 1)) != 0) {
                goto LABEL_243;
              }
            }
            else if (!*((_DWORD *)v75 + 4))
            {
              goto LABEL_244;
            }
            uint64_t v75 = (uint64_t *)*v75;
            if (!v75) {
              goto LABEL_244;
            }
          }
        }
        do
        {
          unint64_t v115 = v75[1];
          if (v115)
          {
            if (v115 < *(void *)&v478[8] || v115 % *(void *)&v478[8]) {
              goto LABEL_243;
            }
          }
          else if (!*((_DWORD *)v75 + 4))
          {
            break;
          }
          uint64_t v75 = (uint64_t *)*v75;
        }
        while (v75);
      }
    }
  }
  else
  {
LABEL_243:
    uint64_t v75 = 0;
  }
LABEL_244:
  BOOL v57 = v75 != 0;
  uint64_t v116 = *(void **)&v478[16];
  if (*(void *)&v478[16])
  {
    do
    {
      unsigned int v117 = (void *)*v116;
      operator delete(v116);
      uint64_t v116 = v117;
    }
    while (v117);
  }
  uint64_t v118 = *(void **)v478;
  *(void *)uint64_t v478 = 0;
  if (v118) {
    operator delete(v118);
  }
LABEL_144:
  unint64_t v77 = (void *)*((void *)a2 + 1);
  int8x8_t v78 = (int8x8_t)v77[1];
  if (!*(void *)&v78) {
    goto LABEL_168;
  }
  uint8x8_t v79 = (uint8x8_t)vcnt_s8(v78);
  v79.i16[0] = vaddlv_u8(v79);
  if (v79.u32[0] > 1uLL)
  {
    unint64_t v80 = 0x8E4587A431F9C696;
    if (*(void *)&v78 <= 0x8E4587A431F9C696) {
      unint64_t v80 = 0x8E4587A431F9C696 % *(void *)&v78;
    }
  }
  else
  {
    unint64_t v80 = (*(void *)&v78 - 1) & 0x8E4587A431F9C696;
  }
  uint64_t v81 = *(void **)(*v77 + 8 * v80);
  if (!v81) {
    goto LABEL_168;
  }
  uint64_t v82 = (void *)*v81;
  if (!v82) {
    goto LABEL_168;
  }
  if (v79.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v84 = v82[1];
      if (v84 == 0x8E4587A431F9C696)
      {
        if (v82[2] == 0x8E4587A431F9C696) {
          goto LABEL_165;
        }
      }
      else if ((v84 & (*(void *)&v78 - 1)) != v80)
      {
        goto LABEL_168;
      }
      uint64_t v82 = (void *)*v82;
      if (!v82) {
        goto LABEL_168;
      }
    }
  }
  while (1)
  {
    unint64_t v83 = v82[1];
    if (v83 == 0x8E4587A431F9C696) {
      break;
    }
    if (v83 >= *(void *)&v78) {
      v83 %= *(void *)&v78;
    }
    if (v83 != v80) {
      goto LABEL_168;
    }
LABEL_154:
    uint64_t v82 = (void *)*v82;
    if (!v82) {
      goto LABEL_168;
    }
  }
  if (v82[2] != 0x8E4587A431F9C696) {
    goto LABEL_154;
  }
LABEL_165:
  uint64_t v85 = v82[5];
  if (*(void *)(v85 + 8) != 0x8E4587A431F9C696)
  {
LABEL_168:
    uint64_t v407 = 0;
    if (!v57) {
      goto LABEL_169;
    }
    goto LABEL_181;
  }
  uint64_t v407 = *(void *)(v85 + 32);
  if (v57)
  {
LABEL_181:
    BOOL v89 = 1;
    goto LABEL_182;
  }
LABEL_169:
  uint64_t v86 = *((void *)this + 8);
  if (*(unsigned char *)(v86 + 48)) {
    BOOL v87 = 0;
  }
  else {
    BOOL v87 = v58 == v56;
  }
  if (!v87 || *(unsigned __int8 *)(v86 + 73) != v408) {
    goto LABEL_181;
  }
  BOOL v89 = v38 != v39 || *(unsigned char *)(v407 + 72) != 0;
LABEL_182:
  BOOL v412 = v89;
  if ((*(void *)&v78 & (*(void *)&v78 - 1)) != 0)
  {
    unint64_t v91 = 0xE42D19AFCA302E68;
    if (*(void *)&v78 <= 0xE42D19AFCA302E68) {
      unint64_t v91 = 0xE42D19AFCA302E68 % *(void *)&v78;
    }
    unint64_t v90 = *(void **)(*v77 + 8 * v91);
    do
    {
      do
        unint64_t v90 = (void *)*v90;
      while (v90[1] != 0xE42D19AFCA302E68);
    }
    while (v90[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    unint64_t v90 = *(void **)(*v77 + 8 * ((*(void *)&v78 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        unint64_t v90 = (void *)*v90;
      while (v90[1] != 0xE42D19AFCA302E68);
    }
    while (v90[2] != 0xE42D19AFCA302E68);
  }
  uint64_t v404 = *(void *)(v90[5] + 32);
  uint64_t v92 = *(void *)(*(void *)v404 + 520);
  uint64_t v93 = *(std::__shared_weak_count **)(*(void *)v404 + 528);
  *(void *)uint64_t v478 = v92;
  *(void *)&v478[8] = v93;
  if (v93) {
    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v438 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v92);
  if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
  }
  uint64_t v94 = (int8x8_t *)*((void *)a2 + 1);
  md::LayoutContext::zoomAtCentrePoint(v94);
  float v96 = v95;
  int8x8_t v97 = v94[1];
  if (!*(void *)&v97) {
    goto LABEL_257;
  }
  uint8x8_t v98 = (uint8x8_t)vcnt_s8(v97);
  v98.i16[0] = vaddlv_u8(v98);
  if (v98.u32[0] > 1uLL)
  {
    unint64_t v99 = 0xE42D19AFCA302E68;
    if (*(void *)&v97 <= 0xE42D19AFCA302E68) {
      unint64_t v99 = 0xE42D19AFCA302E68 % *(void *)&v97;
    }
  }
  else
  {
    unint64_t v99 = (*(void *)&v97 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v100 = *(void **)(*(void *)v94 + 8 * v99);
  if (!v100 || (uint64_t v101 = (void *)*v100) == 0)
  {
LABEL_257:
    uint64_t v119 = *((void *)this + 8);
    uint64_t v120 = *(void *)(v119 + 56);
    if (!v120) {
      goto LABEL_269;
    }
    uint64_t v121 = *(std::__shared_weak_count **)(v119 + 64);
    double v463 = *(double *)(v119 + 56);
    double v464 = *(double *)&v121;
    if (*(double *)&v121 != 0.0) {
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v478, v120, (uint64_t)v121);
    if (*(double *)&v121 == 0.0 || atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (v478[32]) {
        goto LABEL_263;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
      if (v478[32])
      {
LABEL_263:
        LOBYTE(v452) = 1;
        uint64_t v122 = *(void *)(*(void *)v478 + 24);
        if ((int)v96 >= 0x17) {
          unsigned int v123 = 23;
        }
        else {
          unsigned int v123 = (int)v96;
        }
        unsigned int v124 = *(unsigned __int8 *)(v122 + 12);
        if (v124 == 2)
        {
          LOBYTE(v463) = 1;
          LOBYTE(v439[0]) = 1;
          unsigned int v397 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v122, 0x1E0u, v123, 0, &v463);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v122, 0x1E0u, v123, 1u, v439);
          if (LOBYTE(v463) | LOBYTE(v439[0])) {
            goto LABEL_290;
          }
        }
        else
        {
          unsigned int v397 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)v478 + 24), 0x1E0u, v123, v124, &v452);
          if ((_BYTE)v452) {
            goto LABEL_290;
          }
        }
        uint64_t v125 = *(void *)(*(void *)v478 + 24);
        uint64_t v126 = *(float **)v125;
        if (*(void *)v125
          && (float v127 = *v126, LODWORD(v126) = *v126 == 1.0, *(unsigned char *)(v125 + 10))
          && (v127 != 0.0 ? (BOOL v128 = v127 == 1.0) : (BOOL v128 = 1), !v128)
          || (v129 = *(unsigned __int8 *)(v125 + v126 + 11), float v127 = 0.0, v129 == 2))
        {
          LOBYTE(v463) = 1;
          LOBYTE(v439[0]) = 1;
          uint64_t v130 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v125, 0x106u, 0, &v463);
          float v131 = *v130
               + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v125, 0x106u, 1u, v439)- *v130)* v127);
          BOOL v132 = v96 < v131;
          if (v96 < v131) {
            goto LABEL_280;
          }
        }
        else
        {
          unsigned int v135 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(*(void *)v478 + 24), 0x106u, v129, 0);
          BOOL v132 = v96 < *v135;
          if (v96 < *v135)
          {
LABEL_280:
            if (!v132
              || (gss::QueryableLocker<gss::PropertyID>::value<(gss::PropertyID)263>(*(void *)(*(void *)v478 + 24)),
                  v96 <= v133))
            {
              unsigned int v397 = 0;
              goto LABEL_290;
            }
            int v134 = 1;
LABEL_289:
            unsigned int v397 = v134;
LABEL_290:
            unint64_t v136 = *(void *)(*(void *)v478 + 24);
            long long v137 = *(float **)v136;
            if (*(void *)v136
              && (float v138 = *v137, LODWORD(v137) = *v137 == 1.0, *(unsigned char *)(v136 + 10))
              && (v138 != 0.0 ? (BOOL v139 = v138 == 1.0) : (BOOL v139 = 1), !v139)
              || (v140 = *(unsigned __int8 *)(v136 + v137 + 11), float v138 = 0.0, v140 == 2))
            {
              LOBYTE(v463) = 1;
              LOBYTE(v439[0]) = 1;
              unint64_t v141 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v136, 0x1E1u, 0, &v463);
              unint64_t v142 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v136, 0x1E1u, 1u, v439);
              if (v138 >= 1.0) {
                uint64_t v143 = (char *)v142;
              }
              else {
                uint64_t v143 = (char *)v141;
              }
              char v144 = *v143;
            }
            else
            {
              char v144 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(void *)(*(void *)v478 + 24), 0x1E1u, v140, 0);
            }
            BOOL v396 = v144 != 0;
            goto LABEL_304;
          }
        }
        int v134 = 2;
        goto LABEL_289;
      }
    }
    BOOL v396 = 0;
    unsigned int v397 = 0;
LABEL_304:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v478);
    goto LABEL_305;
  }
  if (v98.u32[0] < 2uLL)
  {
    uint64_t v102 = *(void *)&v97 - 1;
    while (1)
    {
      uint64_t v104 = v101[1];
      if (v104 == 0xE42D19AFCA302E68)
      {
        if (v101[2] == 0xE42D19AFCA302E68) {
          goto LABEL_218;
        }
      }
      else if ((v104 & v102) != v99)
      {
        goto LABEL_257;
      }
      uint64_t v101 = (void *)*v101;
      if (!v101) {
        goto LABEL_257;
      }
    }
  }
  while (1)
  {
    unint64_t v103 = v101[1];
    if (v103 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v103 >= *(void *)&v97) {
      v103 %= *(void *)&v97;
    }
    if (v103 != v99) {
      goto LABEL_257;
    }
LABEL_207:
    uint64_t v101 = (void *)*v101;
    if (!v101) {
      goto LABEL_257;
    }
  }
  if (v101[2] != 0xE42D19AFCA302E68) {
    goto LABEL_207;
  }
LABEL_218:
  uint64_t v105 = v101[5];
  if (*(void *)(v105 + 8) != 0xE42D19AFCA302E68) {
    goto LABEL_257;
  }
  unsigned int v106 = *(uint64_t **)(v105 + 32);
  if (!v106) {
    goto LABEL_257;
  }
  uint64_t v107 = *v106;
  long long v108 = (std::__shared_weak_count *)v106[1];
  *(void *)uint64_t v478 = *v106;
  *(void *)&v478[8] = v108;
  if (v108) {
    atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v107)
  {
    double v109 = *(double *)(v107 + 520);
    int64_t v110 = *(std::__shared_weak_count **)(v107 + 528);
    double v463 = v109;
    double v464 = *(double *)&v110;
    if (*(double *)&v110 != 0.0) {
      atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v109 == 0.0)
    {
      BOOL v113 = 0;
    }
    else
    {
      uint64_t v111 = *(void *)(v107 + 520);
      int64x2_t v112 = *(std::__shared_weak_count **)(v107 + 528);
      *(void *)&v439[0] = v111;
      *((void *)&v439[0] + 1) = v112;
      if (v112) {
        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v113 = (gss::ClientStyleState<gss::PropertyID>::sourceMapDisplayStyle(v111) & 0xFF00) == 512;
      if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
      *(double *)&int64_t v110 = v464;
    }
    if (*(double *)&v110 != 0.0 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
    long long v108 = *(std::__shared_weak_count **)&v478[8];
  }
  else
  {
    BOOL v113 = 0;
  }
  if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
  if (!v113) {
    goto LABEL_257;
  }
LABEL_269:
  BOOL v396 = 0;
  unsigned int v397 = 0;
LABEL_305:
  uint64_t v145 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v146 = (int8x8_t)v145[1];
  if (!*(void *)&v146)
  {
    long long v149 = 0;
    goto LABEL_352;
  }
  uint8x8_t v147 = (uint8x8_t)vcnt_s8(v146);
  v147.i16[0] = vaddlv_u8(v147);
  if (v147.u32[0] > 1uLL)
  {
    unint64_t v148 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v146 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v148 = 0x99BED48DEFBBD82BLL % *(void *)&v146;
    }
  }
  else
  {
    unint64_t v148 = (*(void *)&v146 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v150 = *v145;
  __int16 v151 = *(void **)(v150 + 8 * v148);
  if (!v151) {
    goto LABEL_329;
  }
  id v152 = (void *)*v151;
  if (!v152) {
    goto LABEL_329;
  }
  if (v147.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v154 = v152[1];
      if (v154 == 0x99BED48DEFBBD82BLL)
      {
        if (v152[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_327;
        }
      }
      else if ((v154 & (*(void *)&v146 - 1)) != v148)
      {
        goto LABEL_329;
      }
      id v152 = (void *)*v152;
      if (!v152) {
        goto LABEL_329;
      }
    }
  }
  while (2)
  {
    unint64_t v153 = v152[1];
    if (v153 != 0x99BED48DEFBBD82BLL)
    {
      if (v153 >= *(void *)&v146) {
        v153 %= *(void *)&v146;
      }
      if (v153 != v148) {
        goto LABEL_329;
      }
      goto LABEL_316;
    }
    if (v152[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_316:
      id v152 = (void *)*v152;
      if (!v152) {
        goto LABEL_329;
      }
      continue;
    }
    break;
  }
LABEL_327:
  uint64_t v155 = v152[5];
  if (*(void *)(v155 + 8) == 0x99BED48DEFBBD82BLL)
  {
    long long v149 = *(uint64_t **)(v155 + 32);
    goto LABEL_330;
  }
LABEL_329:
  long long v149 = 0;
LABEL_330:
  if (v147.u32[0] > 1uLL)
  {
    unint64_t v156 = 0xA60DDA5A69582425;
    if (*(void *)&v146 <= 0xA60DDA5A69582425) {
      unint64_t v156 = 0xA60DDA5A69582425 % *(void *)&v146;
    }
  }
  else
  {
    unint64_t v156 = (*(void *)&v146 - 1) & 0xA60DDA5A69582425;
  }
  uint64_t v157 = *(void **)(v150 + 8 * v156);
  if (!v157) {
    goto LABEL_352;
  }
  unint64_t v158 = (void *)*v157;
  if (!v158) {
    goto LABEL_352;
  }
  if (v147.u32[0] < 2uLL)
  {
    uint64_t v159 = *(void *)&v146 - 1;
    while (1)
    {
      uint64_t v161 = v158[1];
      if (v161 == 0xA60DDA5A69582425)
      {
        if (v158[2] == 0xA60DDA5A69582425) {
          goto LABEL_350;
        }
      }
      else if ((v161 & v159) != v156)
      {
        goto LABEL_352;
      }
      unint64_t v158 = (void *)*v158;
      if (!v158) {
        goto LABEL_352;
      }
    }
  }
  while (2)
  {
    unint64_t v160 = v158[1];
    if (v160 != 0xA60DDA5A69582425)
    {
      if (v160 >= *(void *)&v146) {
        v160 %= *(void *)&v146;
      }
      if (v160 != v156) {
        goto LABEL_352;
      }
      goto LABEL_339;
    }
    if (v158[2] != 0xA60DDA5A69582425)
    {
LABEL_339:
      unint64_t v158 = (void *)*v158;
      if (!v158) {
        goto LABEL_352;
      }
      continue;
    }
    break;
  }
LABEL_350:
  uint64_t v162 = v158[5];
  if (*(void *)(v162 + 8) == 0xA60DDA5A69582425)
  {
    long double v405 = *(id **)(v162 + 32);
    goto LABEL_353;
  }
LABEL_352:
  long double v405 = 0;
LABEL_353:
  int64_t v414 = v149;
  uint64_t v164 = *(void **)(*v149 + 112);
  uint64_t v163 = *(void **)(*v149 + 120);
  if (v164 != v163)
  {
    while (*(unsigned __int16 *)v164 != *(unsigned __int16 *)(*v149 + 282))
    {
      v164 += 14;
      if (v164 == v163)
      {
        uint64_t v164 = *(void **)(*v149 + 120);
        break;
      }
    }
  }
  uint64_t v165 = *((void *)this + 8);
  if (*(void *)(v165 + 112) == v164[11])
  {
    unint64_t v166 = (unsigned __int8 *)(v165 + 104);
    while (1)
    {
      unint64_t v166 = *(unsigned __int8 **)v166;
      BOOL v167 = v166 != 0;
      if (!v166) {
        break;
      }
      double v168 = std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v164 + 8, v166 + 16);
      if (!v168
        || v166[16] != *((unsigned __int8 *)v168 + 16)
        || v166[17] != *((unsigned __int8 *)v168 + 17)
        || *((_DWORD *)v166 + 5) != *((_DWORD *)v168 + 5)
        || *((_DWORD *)v166 + 6) != *((_DWORD *)v168 + 6))
      {
        BOOL v167 = 1;
        break;
      }
    }
    int v398 = v167;
  }
  else
  {
    int v398 = 1;
  }
  int64x2_t v436 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v437 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  unint64_t v169 = +[VKDebugSettings sharedSettings];
  int v170 = [v169 dontMatchRouteLine];

  int v171 = v56 & ~v170;
  v433[0] = 0;
  v433[1] = 0;
  int v432 = (double *)v433;
  int64x2_t v434 = v436;
  int64x2_t v435 = v437;
  uint64_t v172 = (uint64_t *)v164[10];
  if (v172)
  {
    int v173 = 0;
    uint64_t v174 = v415;
    do
    {
      unsigned int v175 = *((unsigned __int8 *)v172 + 17);
      double v176 = 1.0 / (double)(1 << v175);
      double v177 = v176 * (double)((1 << v175) + ~*((_DWORD *)v172 + 5));
      *(double *)uint64_t v478 = v176 * (double)*((int *)v172 + 6);
      *(double *)&v478[8] = v177;
      *(double *)&v478[16] = *(double *)v478 + v176;
      *(double *)&v478[24] = v177 + v176;
      v436.i64[0] = fmin(*(double *)v478, *(double *)v436.i64);
      v436.i64[1] = fmin(v177, *(double *)&v436.i64[1]);
      v437.i64[0] = fmax(*(double *)v437.i64, *(double *)v478 + v176);
      v437.i64[1] = fmax(*(double *)&v437.i64[1], v177 + v176);
      if (v171)
      {
        if (v175 < 0xF)
        {
          v173 |= v175 > 0xE;
        }
        else
        {
          md::MultiRectRegion::addRect(&v432, (double *)v478);
          int v173 = 1;
        }
      }
      uint64_t v172 = (uint64_t *)*v172;
    }
    while (v172);
  }
  else
  {
    int v173 = 0;
    uint64_t v174 = v415;
  }
  uint64_t v417 = *v19;
  __double2 v411 = v19[1];
  if (*v19 != v411)
  {
    unsigned int v413 = v171 & v173;
    double v178 = v42 * (v48 + v48) / v51;
    int64x2_t v402 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v403 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    while (1)
    {
      if (v412)
      {
        uint64_t v179 = 1;
      }
      else
      {
        uint64_t v180 = *(void **)(*v417 + 160);
        if (v180) {
          uint64_t v179 = [v180 needsUpdateForViewingScale:v178];
        }
        else {
          uint64_t v179 = 0;
        }
        if (((v398 | v179) & 1) == 0)
        {
          if (*(float *)(*((void *)this + 8) + 80) != (float)(*(float *)(v174 + 16) * *(float *)(v174 + 20))
            && *(unsigned char *)v174)
          {
            md::RouteRenderLayer::setElevatedRoutelineMatrix(a2, v417);
          }
          goto LABEL_379;
        }
      }
      if ((v413 & 1) == 0) {
        break;
      }
      id v181 = *(id *)(*v417 + 144);
      unint64_t v182 = [v181 composedRoute];
      int v183 = [v182 supportsSnapping];

      v428 = 0;
      uint64_t v429 = 0;
      uint64_t v427 = (uint64_t *)&v428;
      int64x2_t v430 = v403;
      int64x2_t v431 = v402;
      if (v183)
      {
        std::__tree<gm::Box<double,2>,md::MultiRectSetCompare,std::allocator<gm::Box<double,2>>>::__assign_multi<std::__tree_const_iterator<gm::Box<double,2>,std::__tree_node<gm::Box<double,2>,void *> *,long>>(&v427, v432, (double *)v433);
        int64x2_t v185 = v434;
        int64x2_t v184 = v435;
LABEL_390:
        int64x2_t v430 = v185;
        int64x2_t v431 = v184;
        uint64_t v186 = v413;
        goto LABEL_395;
      }
      uint64_t v186 = 0;
LABEL_395:
      unint64_t v425 = 0;
      uint64_t v426 = 0;
      uint64_t v424 = &v425;
      uint64_t v187 = *v414;
      {
        qword_1EB3176C0 = 0;
        qword_1EB3176B8 = 0;
        md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
        __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
      }
      uint64_t v188 = *(_WORD **)(v187 + 48);
      uint64_t v189 = *(_WORD **)(v187 + 56);
      if (v188 == v189) {
        goto LABEL_406;
      }
      long long v190 = *(_WORD **)(v187 + 48);
      while (*v190 != 15)
      {
        v190 += 16;
        if (v190 == v189) {
          goto LABEL_406;
        }
      }
      if (v190 == v189)
      {
LABEL_406:
        long long v191 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v188 != 15)
        {
          v188 += 16;
          if (v188 == v189)
          {
            uint64_t v188 = *(_WORD **)(v187 + 56);
            break;
          }
        }
        long long v191 = (uint64_t *)(v188 + 4);
      }
      uint64_t v194 = (uint64_t *)*v191;
      unsigned int v192 = v191 + 1;
      uint64_t v193 = v194;
      if (v194 != v192)
      {
        do
        {
          double v199 = *((double *)v193 + 4);
          BOOL v198 = *((std::__shared_weak_count **)v193 + 5);
          double v463 = v199;
          double v464 = *(double *)&v198;
          if (*(double *)&v198 != 0.0) {
            atomic_fetch_add_explicit(&v198->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v200 = *(unsigned __int8 *)(*(void *)&v199 + 169);
          BOOL v132 = v200 > 0xE;
          LODWORD(v200) = 1 << v200;
          double v201 = 1.0 / (double)(int)v200;
          double v202 = v201 * (double)((int)v200 + ~*(_DWORD *)(*(void *)&v199 + 172));
          *(double *)uint64_t v478 = v201 * (double)*(int *)(*(void *)&v199 + 176);
          *(double *)&v478[8] = v202;
          *(double *)&v478[16] = *(double *)v478 + v201;
          *(double *)&v478[24] = v202 + v201;
          v436.i64[0] = fmin(*(double *)v478, *(double *)v436.i64);
          v436.i64[1] = fmin(v202, *(double *)&v436.i64[1]);
          v437.i64[0] = fmax(*(double *)v437.i64, *(double *)v478 + v201);
          v437.i64[1] = fmax(*(double *)&v437.i64[1], v202 + v201);
          if (v132) {
            int v203 = v186;
          }
          else {
            int v203 = 0;
          }
          if (v203 == 1) {
            md::MultiRectRegion::addRect((double **)&v427, (double *)v478);
          }
          unint64_t v204 = v425;
          unint64_t v205 = &v425;
LABEL_422:
          BOOL v206 = v205;
          if (v204)
          {
            do
            {
              unint64_t v205 = (double **)v204;
              unint64_t v207 = *((void *)v204 + 4);
              if (*(void *)&v199 < v207)
              {
                unint64_t v204 = *v205;
                goto LABEL_422;
              }
              if (v207 >= *(void *)&v199) {
                goto LABEL_460;
              }
              unint64_t v204 = v205[1];
            }
            while (v204);
            BOOL v206 = v205 + 1;
          }
          uint64_t v208 = (double *)operator new(0x30uLL);
          v208[4] = v199;
          v208[5] = *(double *)&v198;
          if (*(double *)&v198 != 0.0) {
            atomic_fetch_add_explicit(&v198->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *uint64_t v208 = 0.0;
          v208[1] = 0.0;
          *((void *)v208 + 2) = v205;
          *BOOL v206 = v208;
          if (*v424)
          {
            uint64_t v424 = (double **)*v424;
            uint64_t v208 = *v206;
          }
          unint64_t v209 = v425;
          BOOL v87 = v208 == v425;
          *((unsigned char *)v208 + 24) = v208 == v425;
          if (!v87)
          {
            do
            {
              uint64_t v210 = *((void *)v208 + 2);
              if (*(unsigned char *)(v210 + 24)) {
                break;
              }
              unint64_t v211 = *(double **)(v210 + 16);
              uint64_t v212 = *(void *)v211;
              if (*(void *)v211 == v210)
              {
                uint64_t v215 = *((void *)v211 + 1);
                if (!v215 || (int v216 = *(unsigned __int8 *)(v215 + 24), v213 = (unsigned char *)(v215 + 24), v216))
                {
                  if (*(double **)v210 == v208)
                  {
                    int v217 = (uint64_t *)*((void *)v208 + 2);
                  }
                  else
                  {
                    int v217 = *(uint64_t **)(v210 + 8);
                    uint64_t v218 = *v217;
                    *(void *)(v210 + 8) = *v217;
                    if (v218)
                    {
                      *(void *)(v218 + 16) = v210;
                      unint64_t v211 = *(double **)(v210 + 16);
                    }
                    v217[2] = (uint64_t)v211;
                    *(void *)(*(void *)(v210 + 16) + 8 * (**(void **)(v210 + 16) != v210)) = v217;
                    *int v217 = v210;
                    *(void *)(v210 + 16) = v217;
                    unint64_t v211 = (double *)v217[2];
                    uint64_t v210 = *(void *)v211;
                  }
                  *((unsigned char *)v217 + 24) = 1;
                  *((unsigned char *)v211 + 24) = 0;
                  uint64_t v221 = *(void *)(v210 + 8);
                  *(void *)unint64_t v211 = v221;
                  if (v221) {
                    *(void *)(v221 + 16) = v211;
                  }
                  *(double *)(v210 + 16) = v211[2];
                  *(void *)(*((void *)v211 + 2) + 8 * (**((void **)v211 + 2) != (void)v211)) = v210;
                  *(void *)(v210 + 8) = v211;
                  goto LABEL_458;
                }
              }
              else if (!v212 || (int v214 = *(unsigned __int8 *)(v212 + 24), v213 = (unsigned char *)(v212 + 24), v214))
              {
                if (*(double **)v210 == v208)
                {
                  uint64_t v219 = *((void *)v208 + 1);
                  *(void *)uint64_t v210 = v219;
                  if (v219)
                  {
                    *(void *)(v219 + 16) = v210;
                    unint64_t v211 = *(double **)(v210 + 16);
                  }
                  *((void *)v208 + 2) = v211;
                  *(void *)(*(void *)(v210 + 16) + 8 * (**(void **)(v210 + 16) != v210)) = v208;
                  *((void *)v208 + 1) = v210;
                  *(void *)(v210 + 16) = v208;
                  unint64_t v211 = (double *)*((void *)v208 + 2);
                }
                else
                {
                  uint64_t v208 = (double *)*((void *)v208 + 2);
                }
                *((unsigned char *)v208 + 24) = 1;
                *((unsigned char *)v211 + 24) = 0;
                uint64_t v210 = *((void *)v211 + 1);
                uint64_t v220 = *(double **)v210;
                v211[1] = *(double *)v210;
                if (v220) {
                  *((void *)v220 + 2) = v211;
                }
                *(double *)(v210 + 16) = v211[2];
                *(void *)(*((void *)v211 + 2) + 8 * (**((void **)v211 + 2) != (void)v211)) = v210;
                *(void *)uint64_t v210 = v211;
LABEL_458:
                *((void *)v211 + 2) = v210;
                break;
              }
              *(unsigned char *)(v210 + 24) = 1;
              uint64_t v208 = v211;
              *((unsigned char *)v211 + 24) = v211 == v209;
              unsigned char *v213 = 1;
            }
            while (v211 != v209);
          }
          ++v426;
          *(double *)&BOOL v198 = v464;
LABEL_460:
          if (*(double *)&v198 == 0.0 || atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v222 = (uint64_t *)v193[1];
            if (!v222) {
              goto LABEL_466;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
            uint64_t v222 = (uint64_t *)v193[1];
            if (!v222)
            {
              do
              {
LABEL_466:
                unint64_t v223 = (uint64_t *)v193[2];
                BOOL v87 = *v223 == (void)v193;
                uint64_t v193 = v223;
              }
              while (!v87);
              goto LABEL_412;
            }
          }
          do
          {
            unint64_t v223 = v222;
            uint64_t v222 = (uint64_t *)*v222;
          }
          while (v222);
LABEL_412:
          uint64_t v193 = v223;
        }
        while (v223 != v192);
      }
      uint64_t v195 = *v414;
      unsigned int v196 = *(_WORD **)(*v414 + 48);
      uint64_t v197 = *(_WORD **)(*v414 + 56);
      if (v196 != v197)
      {
        while (*v196 != 13)
        {
          v196 += 16;
          if (v196 == v197) {
            goto LABEL_483;
          }
        }
      }
      if (v196 != v197)
      {
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
        }
        uint64_t v224 = *(_WORD **)(v195 + 48);
        uint64_t v225 = *(_WORD **)(v195 + 56);
        if (v224 == v225) {
          goto LABEL_481;
        }
        uint64_t v226 = *(_WORD **)(v195 + 48);
        while (*v226 != 13)
        {
          v226 += 16;
          if (v226 == v225) {
            goto LABEL_481;
          }
        }
        if (v226 == v225)
        {
LABEL_481:
          unint64_t v227 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
        }
        else
        {
          while (*v224 != 13)
          {
            v224 += 16;
            if (v224 == v225)
            {
              uint64_t v224 = *(_WORD **)(v195 + 56);
              break;
            }
          }
          unint64_t v227 = (uint64_t *)(v224 + 4);
        }
        unint64_t v230 = (uint64_t *)*v227;
        uint64_t v228 = v227 + 1;
        long double v229 = v230;
        if (v230 != v228)
        {
          do
          {
            uint64_t v237 = v229[4];
            unint64_t v238 = *(unsigned __int8 *)(v237 + 169);
            double v239 = 1.0 / (double)(1 << v238);
            double v240 = v239 * (double)((1 << v238) + ~*(_DWORD *)(v237 + 172));
            *(double *)uint64_t v478 = v239 * (double)*(int *)(v237 + 176);
            *(double *)&v478[8] = v240;
            *(double *)&v478[16] = *(double *)v478 + v239;
            *(double *)&v478[24] = v240 + v239;
            v436.i64[0] = fmin(*(double *)v478, *(double *)v436.i64);
            v436.i64[1] = fmin(v240, *(double *)&v436.i64[1]);
            v437.i64[0] = fmax(*(double *)v437.i64, *(double *)v478 + v239);
            v437.i64[1] = fmax(*(double *)&v437.i64[1], v240 + v239);
            if (v238 >= 0xF) {
              md::MultiRectRegion::addRect((double **)&v427, (double *)v478);
            }
            unint64_t v241 = (uint64_t *)v229[1];
            if (v241)
            {
              do
              {
                unint64_t v242 = v241;
                unint64_t v241 = (uint64_t *)*v241;
              }
              while (v241);
            }
            else
            {
              do
              {
                unint64_t v242 = (uint64_t *)v229[2];
                BOOL v87 = *v242 == (void)v229;
                long double v229 = v242;
              }
              while (!v87);
            }
            long double v229 = v242;
          }
          while (v242 != v228);
        }
      }
LABEL_483:
      id v231 = [[VKPolylineOverlayRenderRegion alloc] initForVisibleRect:&v436 snappingRegion:&v427 routeLineDatas:&v424];
      id v232 = *v405;
      int v233 = *(_DWORD *)([v232 alphaAtlas] + 16);

      uint64_t v234 = (void *)*((void *)a2 + 1);
      unint64_t v235 = v234[1];
      if ((v235 & (v235 - 1)) != 0)
      {
        unint64_t v243 = 0xC97B9E962ADF4AD4;
        if (v235 <= 0xC97B9E962ADF4AD4) {
          unint64_t v243 = 0xC97B9E962ADF4AD4 % v235;
        }
        uint64_t v236 = *(void **)(*v234 + 8 * v243);
        do
        {
          do
            uint64_t v236 = (void *)*v236;
          while (v236[1] != 0xC97B9E962ADF4AD4);
        }
        while (v236[2] != 0xC97B9E962ADF4AD4);
      }
      else
      {
        uint64_t v236 = *(void **)(*v234 + 8 * ((v235 - 1) & 0xC97B9E962ADF4AD4));
        do
        {
          do
            uint64_t v236 = (void *)*v236;
          while (v236[1] != 0xC97B9E962ADF4AD4);
        }
        while (v236[2] != 0xC97B9E962ADF4AD4);
      }
      double v244 = *(uint64_t **)(v236[5] + 32);
      uint64_t v245 = *v244;
      uint64_t v246 = v244[1];
      if (v245 != v246)
      {
        while (*(unsigned char *)v245 != 21)
        {
          v245 += 16;
          if (v245 == v246) {
            goto LABEL_509;
          }
        }
      }
      if (v245 == v246 || !*(void *)(v245 + 8))
      {
LABEL_509:
        uint64_t v248 = 0;
      }
      else
      {
        uint64_t v247 = +[VKDebugSettings sharedSettings];
        uint64_t v248 = [v247 enableDaVinciStyleRoute];
      }
      uint8x8_t v249 = *(unsigned __int8 **)v407;
      md::RouteElevationSourceContext::RouteElevationSourceContext((md::RouteElevationSourceContext *)v421, (const md::RouteElevationSourceContext *)(v407 + 8));
      if (!v249)
      {
        int v252 = 0;
        goto LABEL_518;
      }
      int v251 = v249[24];
      if (v249[24])
      {
        double v400 = [*(id *)(*v417 + 160) overlay];
        uint64_t v399 = [v400 composedRoute];
        if (![v399 elevationModel])
        {
          int v252 = 1;
LABEL_517:

          goto LABEL_518;
        }
      }
      int v252 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v249 + 24))(v249);
      if (v251) {
        goto LABEL_517;
      }
LABEL_518:
      if (*(unsigned char *)(v406 + 32)) {
        uint64_t v253 = *(unsigned int *)(v406 + 36);
      }
      else {
        uint64_t v253 = 0;
      }
      if (v408) {
        uint64_t v254 = 0;
      }
      else {
        uint64_t v254 = v186;
      }
      if (v252) {
        unint64_t v255 = v249;
      }
      else {
        unint64_t v255 = 0;
      }
      LODWORD(v250) = v233;
      char v256 = [*(id *)(*v417 + 160) buildRouteLine:v231 matchToRoads:v186 shouldGenerateSnapPath:v254 viewUnitsPerPoint:v179 force:v248 boundsInflation:v253 isGradientTraffic:v178 currentLegIndex:v250 elevationSource:v255 elevationSourceContext:v421];
      float v257 = (void *)*((void *)a2 + 1);
      int8x8_t v258 = (int8x8_t)v257[1];
      if (!*(void *)&v258) {
        goto LABEL_550;
      }
      uint8x8_t v259 = (uint8x8_t)vcnt_s8(v258);
      v259.i16[0] = vaddlv_u8(v259);
      if (v259.u32[0] > 1uLL)
      {
        uint64_t v260 = 0x13043386C0978CC2;
        if (*(void *)&v258 <= 0x13043386C0978CC2uLL) {
          uint64_t v260 = 0x13043386C0978CC2uLL % *(void *)&v258;
        }
      }
      else
      {
        uint64_t v260 = (*(void *)&v258 - 1) & 0x13043386C0978CC2;
      }
      long long v261 = *(void **)(*v257 + 8 * v260);
      if (!v261) {
        goto LABEL_550;
      }
      uint64_t v262 = (void *)*v261;
      if (!v262) {
        goto LABEL_550;
      }
      if (v259.u32[0] < 2uLL)
      {
        uint64_t v263 = *(void *)&v258 - 1;
        while (1)
        {
          uint64_t v265 = v262[1];
          if (v265 == 0x13043386C0978CC2)
          {
            if (v262[2] == 0x13043386C0978CC2) {
              goto LABEL_548;
            }
          }
          else if ((v265 & v263) != v260)
          {
            goto LABEL_550;
          }
          uint64_t v262 = (void *)*v262;
          if (!v262) {
            goto LABEL_550;
          }
        }
      }
      while (1)
      {
        unint64_t v264 = v262[1];
        if (v264 == 0x13043386C0978CC2) {
          break;
        }
        if (v264 >= *(void *)&v258) {
          v264 %= *(void *)&v258;
        }
        if (v264 != v260) {
          goto LABEL_550;
        }
LABEL_537:
        uint64_t v262 = (void *)*v262;
        if (!v262) {
          goto LABEL_550;
        }
      }
      if (v262[2] != 0x13043386C0978CC2) {
        goto LABEL_537;
      }
LABEL_548:
      uint64_t v266 = v262[5];
      if (*(void *)(v266 + 8) == 0x13043386C0978CC2)
      {
        uint64_t v267 = *(void *)(v266 + 32);
        goto LABEL_551;
      }
LABEL_550:
      uint64_t v267 = 0;
LABEL_551:
      int v268 = *(unsigned __int8 *)(v267 + 176);
      float v269 = fmaxf(*((float *)v409 + 770) + *((float *)v409 + 769), 1.0);
      os_signpost_id_t v270 = *(void **)(*v417 + 160);
      v418[0] = MEMORY[0x1E4F143A8];
      v418[1] = 3221225472;
      v418[2] = ___ZN2md16RouteRenderLayer21updateRouteLineMeshesERKNS_13LayoutContextERKNSt3__16vectorINS4_10shared_ptrINS_16RouteLineOverlayEEENS4_9allocatorIS8_EEEEb_block_invoke;
      v418[3] = &__block_descriptor_61_e92_v16__0_fast_shared_ptr_md::RouteLineSection__mdm::MDAllocator_____fast_shared_ptr_control__8l;
      v418[4] = v417;
      v418[5] = v404;
      v418[6] = &v438;
      BOOL v420 = v268 == 2;
      float v419 = v269;
      [v270 forEachSection:v418];
      uint64_t v271 = *v417;
      *(unsigned char *)(*v417 + 208) = v397 != 0;
      if (v256)
      {
        long double v272 = *(void **)(v271 + 288);
        long double v273 = *(void **)(v271 + 296);
        int v274 = (void *)v271;
        if (v273 != v272)
        {
          do
          {
            uint64_t v276 = *--v273;
            uint64_t v275 = v276;
            *long double v273 = 0;
            if (v276) {
              (*(void (**)(uint64_t))(*(void *)v275 + 8))(v275);
            }
          }
          while (v273 != v272);
          int v274 = (void *)*v417;
        }
        id v401 = v231;
        *(void *)(v271 + 296) = v272;
        __double2 v277 = (char *)v274[37];
        double v278 = (char *)v274[36];
        int64_t v279 = v277 - v278;
        unint64_t v280 = (v277 - v278) >> 3;
        if (v280 < (uint64_t)(v274[38] - (void)v278) >> 3)
        {
          int64_t v281 = v277 - v278;
          if (v277 == v278)
          {
            v274[36] = 8 * v280;
            v274[37] = 8 * v280;
            v274[38] = 8 * v280;
          }
          else
          {
            if (v279 < 0) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v282 = (char *)operator new(v277 - v278);
            unint64_t v283 = (unint64_t)&v282[8 * v280];
            unint64_t v284 = v281 - 8;
            if ((unint64_t)(v281 - 8) < 0x78)
            {
              int v285 = &v282[8 * v280];
              goto LABEL_599;
            }
            BOOL v299 = (unint64_t)&v277[-(v284 & 0xFFFFFFFFFFFFFFF8) - 8] >= v283
                || &v282[v279 - (v284 & 0xFFFFFFFFFFFFFFF8) - 8] >= v277;
            int v285 = &v282[8 * v280];
            if (!v299) {
              goto LABEL_723;
            }
            uint64_t v300 = (v284 >> 3) + 1;
            uint64_t v301 = &v282[8 * v280 - 16];
            int v302 = v277 - 32;
            uint64_t v303 = v300 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v305 = *(_OWORD *)v302;
              long long v304 = *((_OWORD *)v302 + 1);
              *(_OWORD *)int v302 = 0uLL;
              *((_OWORD *)v302 + 1) = 0uLL;
              v302 -= 32;
              *((_OWORD *)v301 - 1) = v305;
              *(_OWORD *)uint64_t v301 = v304;
              v301 -= 32;
              v303 -= 4;
            }
            while (v303);
            int v285 = (char *)(v283 - 8 * (v300 & 0x3FFFFFFFFFFFFFFCLL));
            v277 -= 8 * (v300 & 0x3FFFFFFFFFFFFFFCLL);
            if (v300 != (v300 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_723:
              do
              {
LABEL_599:
                uint64_t v306 = *((void *)v277 - 1);
                v277 -= 8;
                *(void *)__double2 v277 = 0;
                *((void *)v285 - 1) = v306;
                v285 -= 8;
              }
              while (v277 != v278);
            }
            double v278 = (char *)v274[36];
            double v307 = (char *)v274[37];
            v274[36] = v285;
            v274[37] = v283;
            v274[38] = v283;
            while (v307 != v278)
            {
              uint64_t v309 = *((void *)v307 - 1);
              v307 -= 8;
              uint64_t v308 = v309;
              *(void *)double v307 = 0;
              if (v309) {
                (*(void (**)(uint64_t))(*(void *)v308 + 8))(v308);
              }
            }
          }
          if (v278) {
            operator delete(v278);
          }
        }
        uint64_t v286 = *(void *)(*v417 + 320);
        *(void *)(*v417 + 320) = 0;
        if (v286) {
          (*(void (**)(uint64_t))(*(void *)v286 + 8))(v286);
        }
        uint64_t v287 = *(void *)(*v417 + 336);
        *(void *)(*v417 + 336) = 0;
        id v231 = v401;
        if (v287) {
          (*(void (**)(uint64_t))(*(void *)v287 + 8))(v287);
        }
        uint64_t v288 = *(void *)(*v417 + 328);
        *(void *)(*v417 + 328) = 0;
        if (v288) {
          (*(void (**)(uint64_t))(*(void *)v288 + 8))(v288);
        }
        uint64_t v289 = *(void *)(*v417 + 272);
        *(void *)(*v417 + 272) = 0;
        if (v289) {
          (*(void (**)(uint64_t))(*(void *)v289 + 8))(v289);
        }
        uint64_t v290 = *(void *)(*v417 + 264);
        *(void *)(*v417 + 264) = 0;
        if (v290) {
          (*(void (**)(uint64_t))(*(void *)v290 + 8))(v290);
        }
        unsigned int v291 = *(void **)(*v417 + 160);
        if (v291)
        {
          [v291 bounds];
          double v292 = *(double *)&v478[24] - *(double *)v478;
        }
        else
        {
          double v292 = 0.0;
          memset(v478, 0, 48);
        }
        *(double *)(*v417 + 168) = 1.0 / v292;
        uint64_t v293 = *v417;
        uint64_t v294 = *(void *)(*v417 + 504);
        if (v294)
        {
          uint64_t v295 = *(uint64_t *)(v294 + 256);
          uint64_t v296 = *(std::__shared_weak_count **)(v294 + 264);
          if (*(double *)&v296 != 0.0) {
            atomic_fetch_add_explicit(&v296->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double v463 = *(double *)&v295;
          double v464 = *(double *)&v296;
          v439[0] = 0uLL;
          gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v478, v295, (uint64_t)v296);
          if (*(double *)&v296 == 0.0 || atomic_fetch_add(&v296->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            double v297 = (std::__shared_weak_count *)*((void *)&v439[0] + 1);
            if (*((void *)&v439[0] + 1))
            {
LABEL_588:
              if (!atomic_fetch_add(&v297->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                std::__shared_weak_count::__release_weak(v297);
              }
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
            std::__shared_weak_count::__release_weak(v296);
            double v297 = (std::__shared_weak_count *)*((void *)&v439[0] + 1);
            if (*((void *)&v439[0] + 1)) {
              goto LABEL_588;
            }
          }
          if (v478[32])
          {
            unint64_t v310 = *(void *)(*(void *)v478 + 24);
            float v311 = fminf(fmaxf(fmaxf(*((float *)v409 + 770) + *((float *)v409 + 768), 1.0), 0.0), 23.0);
            uint64_t v312 = *(float **)v310;
            if (*(void *)v310
              && (float v313 = *v312, LODWORD(v312) = *v312 == 1.0, *(unsigned char *)(v310 + 10))
              && v313 != 0.0
              && v313 != 1.0
              || (v314 = *(unsigned __int8 *)(v310 + v312 + 11), float v313 = 0.0, v314 == 2))
            {
              LOBYTE(v463) = 1;
              LOBYTE(v439[0]) = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v310, 0x61u, 0, (BOOL *)&v463, v311);
              float v316 = v315;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v310, 0x61u, 1u, (BOOL *)v439, v311);
              float v298 = v316 + (float)((float)(v317 - v316) * v313);
            }
            else
            {
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(*(void *)v478 + 24), 0x61u, v314, 0, v311);
              float v298 = v318;
            }
          }
          else
          {
            float v298 = 0.0;
          }
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v478);
          uint64_t v293 = *v417;
        }
        else
        {
          float v298 = 0.0;
        }
        long double v319 = *(void **)(v293 + 160);
        if (v268 == 2 && v396)
        {
          memset(v478, 0, 24);
          uint64_t v322 = *(unsigned char **)(v267 + 200);
          __double2 v321 = *(unsigned char **)(v267 + 208);
          int64_t v323 = v321 - v322;
          double v324 = (unsigned char *)v415;
          if (v321 != v322)
          {
            if (v323 < 0) {
              abort();
            }
            *(void *)uint64_t v478 = operator new(v321 - v322);
            *(void *)&v478[8] = *(void *)v478;
            uint64_t v325 = *(void *)v478 + 8 * (v323 >> 3);
            *(void *)&v478[16] = v325;
            memcpy(*(void **)v478, v322, v323);
            *(void *)&v478[8] = v325;
          }
        }
        else
        {
          memset(v478, 0, 24);
          double v324 = (unsigned char *)v415;
        }
        [v319 generateArrowsForManeuverDisplayMode:v397 routeLineWidth:v478 collideTrafficFeatures:v298];
        if (*(void *)v478)
        {
          *(void *)&v478[8] = *(void *)v478;
          operator delete(*(void **)v478);
        }
        if (*v324) {
          goto LABEL_640;
        }
        double v326 = (void *)*((void *)a2 + 1);
        unint64_t v327 = v326[1];
        if ((v327 & (v327 - 1)) != 0)
        {
          unint64_t v329 = 0xE42D19AFCA302E68;
          if (v327 <= 0xE42D19AFCA302E68) {
            unint64_t v329 = 0xE42D19AFCA302E68 % v327;
          }
          uint64_t v328 = *(void **)(*v326 + 8 * v329);
          do
          {
            do
              uint64_t v328 = (void *)*v328;
            while (v328[1] != 0xE42D19AFCA302E68);
          }
          while (v328[2] != 0xE42D19AFCA302E68);
        }
        else
        {
          uint64_t v328 = *(void **)(*v326 + 8 * ((v327 - 1) & 0xE42D19AFCA302E68));
          do
          {
            do
              uint64_t v328 = (void *)*v328;
            while (v328[1] != 0xE42D19AFCA302E68);
          }
          while (v328[2] != 0xE42D19AFCA302E68);
        }
        unsigned int v330 = *(_DWORD *)(*(void *)(v328[5] + 32) + 88);
        BOOL v132 = v330 > 0xA;
        int v331 = (1 << v330) & 0x418;
        if (v132 || v331 == 0)
        {
          unint64_t v343 = *(void **)(*v417 + 160);
          if (v343)
          {
            [v343 bounds];
            double v344 = *((double *)&v449 + 1);
            double v345 = *(double *)&v449;
            double v346 = *(double *)&v451;
            double v347 = *((double *)&v450 + 1);
          }
          else
          {
            double v345 = 0.0;
            double v344 = 0.0;
            double v347 = 0.0;
            double v346 = 0.0;
            long long v450 = 0u;
            long long v451 = 0u;
            long long v449 = 0u;
          }
          v448[0] = v345;
          v448[1] = v344;
          v448[2] = v347;
          v448[3] = v346;
          unsigned int v348 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128) - 1;
          if (v348 > 2)
          {
            double v367 = v345;
            *((void *)&v360 + 1) = 0;
            *(double *)&long long v360 = v347 - v345;
            *((void *)&v362 + 1) = 0;
            *(double *)&long long v362 = v346 - v344;
            long long v368 = *(unint64_t *)&v344;
            long long v361 = 0uLL;
            uint64_t v366 = 0;
            double v369 = 1.0;
            uint64_t v365 = 0;
            uint64_t v364 = 0;
            long long v363 = 0uLL;
          }
          else
          {
            gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v452, v448, 0.0, 0.0);
            uint64_t v482 = 0;
            long long v479 = 0u;
            uint64_t v480 = 0;
            memset(&v478[8], 0, 48);
            uint64_t v485 = 0x3FF0000000000000;
            long long v483 = v458;
            double v484 = v459;
            *(double *)uint64_t v478 = v460 - *(double *)&v458;
            *(double *)&v478[40] = v461 - *((double *)&v458 + 1);
            double v481 = v462 - v459;
            double v349 = v455;
            double v350 = v456;
            double v351 = v349 + v349;
            double v352 = (v349 + v349) * v349;
            double v353 = (v350 + v350) * v350;
            double v354 = v454;
            double v355 = v354 + v354;
            double v356 = (v354 + v354) * v455;
            double v357 = (v350 + v350) * v457;
            double v358 = v456 * (v354 + v354);
            double v359 = 1.0 - (v354 + v354) * v354;
            double v463 = 1.0 - (v352 + v353);
            double v464 = v357 + v356;
            double v467 = v356 - v357;
            double v468 = v359 - v353;
            double v471 = v457 * v351 + v358;
            double v472 = v351 * v456 - v457 * v355;
            double v465 = v358 - v457 * v351;
            double v469 = v457 * v355 + v351 * v456;
            double v473 = v359 - v352;
            uint64_t v466 = 0;
            uint64_t v470 = 0;
            uint64_t v474 = 0;
            long long v475 = v452;
            uint64_t v476 = v453;
            uint64_t v477 = 0x3FF0000000000000;
            gm::operator*<double,4,4,4>((double *)v439, &v463, (double *)v478);
            long long v360 = v439[0];
            long long v361 = v439[1];
            long long v362 = v441;
            long long v363 = v442;
            uint64_t v364 = v440;
            uint64_t v365 = v443;
            uint64_t v366 = v444;
            double v367 = v445;
            long long v368 = v446;
            double v369 = v447;
          }
          uint64_t v370 = *v417;
          *(_OWORD *)(v370 + 8) = v360;
          *(_OWORD *)(v370 + 24) = v361;
          *(void *)(v370 + 40) = v364;
          *(_OWORD *)(v370 + 48) = v362;
          *(_OWORD *)(v370 + 64) = v363;
          *(void *)(v370 + 80) = v365;
          *(void *)(v370 + 96) = v366;
          *(double *)(v370 + 104) = v367;
          *(_OWORD *)(v370 + 112) = v368;
          *(double *)(v370 + 128) = v369;
          *(void *)(v370 + 88) = 0;
          int8x8_t v371 = *(void **)(v370 + 232);
          if (!v371)
          {
            md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v478);
            uint64_t v372 = *v417;
            long long v373 = *(_OWORD *)v478;
            *(void *)&v478[8] = 0;
            *(void *)uint64_t v478 = 0;
            long double v374 = *(std::__shared_weak_count **)(v372 + 240);
            *(_OWORD *)(v372 + 232) = v373;
            if (v374 && !atomic_fetch_add(&v374->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
              std::__shared_weak_count::__release_weak(v374);
            }
            float64x2_t v375 = *(std::__shared_weak_count **)&v478[8];
            if (*(void *)&v478[8]
              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v478[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
              std::__shared_weak_count::__release_weak(v375);
            }
            uint64_t v370 = *v417;
            int8x8_t v371 = *(void **)(*v417 + 232);
          }
          uint64_t v376 = *(std::__shared_weak_count **)(v370 + 240);
          *(void *)uint64_t v478 = v371;
          *(void *)&v478[8] = v376;
          if (v376) {
            atomic_fetch_add_explicit(&v376->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          md::GeometryLogic::setTransformConstantDataWithMercatorRect(v371, v448, v348 < 3, 0.0, 0.0, 0.0);
          if (v376 && !atomic_fetch_add(&v376->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
            std::__shared_weak_count::__release_weak(v376);
          }
          long double v333 = v417;
        }
        else
        {
LABEL_640:
          long double v333 = v417;
          md::RouteRenderLayer::setElevatedRoutelineMatrix(a2, v417);
        }
        double v334 = *(void **)(*v333 + 160);
        __double2 v335 = [v334 overlay];
        double v336 = [v335 composedRoute];
        objc_msgSend(v334, "createMeshIfNecessary:", objc_msgSend(v336, "currentDisplayStep"));

        uint64_t v337 = *(void *)(*v417 + 400);
        *(void *)(*v417 + 400) = 0;
        if (v337)
        {
          uint64_t v338 = ggl::FragmentedPool<ggl::Debug::ExtendedPipelineSetup>::~FragmentedPool(v337);
          MEMORY[0x1A6239270](v338, 0x10A0C40D234DDC7);
        }
      }
      else if (*(float *)(*((void *)this + 8) + 80) != (float)(*(float *)(v415 + 16) * *(float *)(v415 + 20)) {
             && *(unsigned char *)v415)
      }
      {
        md::RouteRenderLayer::setElevatedRoutelineMatrix(a2, v417);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v423);
      long double v339 = v422;
      if (v422)
      {
        do
        {
          int v341 = v339;
          long double v339 = (void *)*v339;
          double v342 = (std::__shared_weak_count *)v341[6];
          if (v342 && !atomic_fetch_add(&v342->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
          operator delete(v341);
        }
        while (v339);
      }
      unint64_t v340 = v421[0];
      v421[0] = 0;
      if (v340) {
        operator delete(v340);
      }

      std::__tree<gdc::LayerDataWithWorld>::destroy(v425);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v428);
      uint64_t v174 = v415;
LABEL_379:
      v417 += 2;
      if (v417 == v411) {
        goto LABEL_674;
      }
    }
    v428 = 0;
    uint64_t v429 = 0;
    uint64_t v427 = (uint64_t *)&v428;
    int64x2_t v184 = v402;
    int64x2_t v185 = v403;
    goto LABEL_390;
  }
LABEL_674:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v433[0]);
  uint64_t v377 = *((void *)this + 8);
  *(unsigned char *)(v377 + 48) = 0;
  uint64_t v378 = (void *)*((void *)a2 + 1);
  int8x8_t v379 = (int8x8_t)v378[1];
  if (!*(void *)&v379)
  {
    LOBYTE(v383) = 0;
    unint64_t v381 = v395;
    goto LABEL_700;
  }
  uint8x8_t v380 = (uint8x8_t)vcnt_s8(v379);
  v380.i16[0] = vaddlv_u8(v380);
  unint64_t v381 = v395;
  if (v380.u32[0] > 1uLL)
  {
    unint64_t v382 = 0xE42D19AFCA302E68;
    if (*(void *)&v379 <= 0xE42D19AFCA302E68) {
      unint64_t v382 = 0xE42D19AFCA302E68 % *(void *)&v379;
    }
  }
  else
  {
    unint64_t v382 = (*(void *)&v379 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v384 = *(void **)(*v378 + 8 * v382);
  if (!v384) {
    goto LABEL_699;
  }
  unint64_t v385 = (void *)*v384;
  if (!v385) {
    goto LABEL_699;
  }
  if (v380.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v387 = v385[1];
      if (v387 == 0xE42D19AFCA302E68)
      {
        if (v385[2] == 0xE42D19AFCA302E68) {
          goto LABEL_696;
        }
      }
      else if ((v387 & (*(void *)&v379 - 1)) != v382)
      {
        goto LABEL_699;
      }
      unint64_t v385 = (void *)*v385;
      if (!v385) {
        goto LABEL_699;
      }
    }
  }
  while (1)
  {
    unint64_t v386 = v385[1];
    if (v386 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v386 >= *(void *)&v379) {
      v386 %= *(void *)&v379;
    }
    if (v386 != v382) {
      goto LABEL_699;
    }
LABEL_685:
    unint64_t v385 = (void *)*v385;
    if (!v385) {
      goto LABEL_699;
    }
  }
  if (v385[2] != 0xE42D19AFCA302E68) {
    goto LABEL_685;
  }
LABEL_696:
  uint64_t v388 = v385[5];
  if (*(void *)(v388 + 8) != 0xE42D19AFCA302E68)
  {
LABEL_699:
    LOBYTE(v383) = 0;
    goto LABEL_700;
  }
  uint64_t v383 = *(void *)(v388 + 32);
  if (v383) {
    LOBYTE(v383) = *(unsigned char *)(v383 + 84) == 3;
  }
LABEL_700:
  *(unsigned char *)(v377 + 72) = v383;
  *(unsigned char *)(v377 + 73) = v408;
  *(float *)(v377 + 80) = v381[4] * v381[5];
  if ((*(void *)&v379 & (*(void *)&v379 - 1)) != 0)
  {
    unint64_t v390 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v379 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v390 = 0x99BED48DEFBBD82BLL % *(void *)&v379;
    }
    v389 = *(void **)(*v378 + 8 * v390);
    do
    {
      do
        v389 = (void *)*v389;
      while (v389[1] != 0x99BED48DEFBBD82BLL);
    }
    while (v389[2] != 0x99BED48DEFBBD82BLL);
  }
  else
  {
    v389 = *(void **)(*v378 + 8 * ((*(void *)&v379 - 1) & 0x99BED48DEFBBD82BLL));
    do
    {
      do
        v389 = (void *)*v389;
      while (v389[1] != 0x99BED48DEFBBD82BLL);
    }
    while (v389[2] != 0x99BED48DEFBBD82BLL);
  }
  uint64_t v391 = **(void **)(v389[5] + 32);
  uint64_t v392 = *(unsigned __int16 **)(v391 + 112);
  unint64_t v393 = *(unsigned __int16 **)(v391 + 120);
  if (v392 != v393)
  {
    int v394 = *(unsigned __int16 *)(v391 + 282);
    while (*v392 != v394)
    {
      v392 += 56;
      if (v392 == v393)
      {
        uint64_t v392 = v393;
        break;
      }
    }
  }
  if ((unsigned __int16 *)(v377 + 88) != v392 + 32)
  {
    *(_DWORD *)(v377 + 120) = *((_DWORD *)v392 + 24);
    std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((void *)(v377 + 88), *((uint64_t **)v392 + 10));
  }
}

void sub_1A1B0A6D0(_Unwind_Exception *a1)
{
}

void sub_1A1B0A6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B0A8C4()
{
}

uint64_t gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(uint64_t a1)
{
  unint64_t v2 = (pthread_rwlock_t *)(a1 + 16);
  v13[1] = a1 + 16;
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  }
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(&v10, (uint64_t *)(a1 + 232));
  uint8x8_t v5 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"unlock", v6);
  }
  unint64_t v7 = (gss::Allocator *)gss::DisplayStyle::DisplayStyle((uint64_t)v13, (uint64_t)&v10);
  if (!v12 && v10)
  {
    uint64_t v8 = gss::Allocator::instance(v7);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v8 + 40))(v8, v10, v11);
  }
  return v13[0];
}

void sub_1A1B0AA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t gss::DisplayStyle::DisplayStyle(uint64_t result, uint64_t a2)
{
  *(void *)float result = 0x1010000000000;
  unint64_t v2 = *(unsigned __int16 *)(a2 + 10);
  if (!*(_WORD *)(a2 + 10))
  {
    uint64_t v3 = 0;
    goto LABEL_29;
  }
  uint64_t v3 = *(void *)a2;
  if (*(unsigned char *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      uint64_t v8 = *(_DWORD **)a2;
      unint64_t v9 = *(unsigned __int16 *)(a2 + 10);
      do
      {
        unint64_t v10 = v9 >> 1;
        unsigned __int16 v11 = &v8[v9 >> 1];
        unsigned int v13 = *v11;
        char v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < 0x10001) {
          uint64_t v8 = v12;
        }
        else {
          unint64_t v9 = v10;
        }
      }
      while (v9);
      if (v8 == (_DWORD *)(v3 + 4 * v2)) {
        goto LABEL_29;
      }
      if (*v8 != 65537) {
        goto LABEL_29;
      }
      uint64_t v3 = ((unint64_t)v8 - v3) >> 2;
      if (v2 == (unsigned __int16)v3) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v4 = 0;
      while (1)
      {
        unsigned int v5 = *(_DWORD *)(v3 + 4 * v4);
        if (v5 >= 0x10001) {
          break;
        }
        if (v2 == ++v4) {
          goto LABEL_29;
        }
      }
      if (v5 == 65537) {
        uint64_t v3 = v4;
      }
      else {
        uint64_t v3 = *(unsigned __int16 *)(a2 + 10);
      }
      if (v2 == (unsigned __int16)v3) {
        goto LABEL_29;
      }
    }
LABEL_23:
    uint64_t v3 = *(void *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v3;
    *(unsigned char *)float result = *(_WORD *)v3;
    if (!v2) {
      goto LABEL_58;
    }
    goto LABEL_30;
  }
  uint64_t v6 = 4 * v2;
  unint64_t v7 = *(_DWORD **)a2;
  while (*v7 != 65537)
  {
    ++v7;
    v6 -= 4;
    if (!v6)
    {
      unint64_t v7 = (_DWORD *)(v3 + 4 * v2);
      break;
    }
  }
  uint64_t v3 = ((unint64_t)v7 - v3) >> 2;
  if (v2 != (unsigned __int16)v3) {
    goto LABEL_23;
  }
LABEL_29:
  *(unsigned char *)float result = 0;
  if (!v2) {
    goto LABEL_58;
  }
LABEL_30:
  uint64_t v14 = *(void *)a2;
  if (*(unsigned char *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      uint64_t v20 = *(_DWORD **)a2;
      unint64_t v21 = v2;
      do
      {
        unint64_t v22 = v21 >> 1;
        uint64_t v23 = &v20[v21 >> 1];
        unsigned int v25 = *v23;
        unint64_t v24 = v23 + 1;
        v21 += ~(v21 >> 1);
        if (v25 < 0x1000D) {
          uint64_t v20 = v24;
        }
        else {
          unint64_t v21 = v22;
        }
      }
      while (v21);
      if (v20 == (_DWORD *)(v14 + 4 * v2)) {
        goto LABEL_58;
      }
      if (*v20 != 65549) {
        goto LABEL_58;
      }
      unint64_t v19 = ((unint64_t)v20 - v14) >> 2;
      if (v2 == (unsigned __int16)v19) {
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v15 = 0;
      while (1)
      {
        unsigned int v16 = *(_DWORD *)(v14 + 4 * v15);
        if (v16 >= 0x1000D) {
          break;
        }
        if (v2 == ++v15) {
          goto LABEL_58;
        }
      }
      if (v16 == 65549) {
        LOWORD(v19) = v15;
      }
      else {
        LOWORD(v19) = v2;
      }
      if (v2 == (unsigned __int16)v19) {
        goto LABEL_58;
      }
    }
LABEL_50:
    if (v2 > (unsigned __int16)v19) {
      uint64_t v3 = *(void *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v19;
    }
    *(unsigned char *)(result + 1) = *(unsigned char *)v3;
    goto LABEL_59;
  }
  uint64_t v17 = 4 * v2;
  size_t v18 = *(_DWORD **)a2;
  while (*v18 != 65549)
  {
    ++v18;
    v17 -= 4;
    if (!v17)
    {
      size_t v18 = (_DWORD *)(v14 + 4 * v2);
      break;
    }
  }
  unint64_t v19 = ((unint64_t)v18 - v14) >> 2;
  if (v2 != (unsigned __int16)v19) {
    goto LABEL_50;
  }
LABEL_58:
  *(unsigned char *)(result + 1) = 0;
  if (!v2) {
    goto LABEL_87;
  }
LABEL_59:
  uint64_t v26 = *(void *)a2;
  if (*(unsigned char *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      unint64_t v32 = *(_DWORD **)a2;
      unint64_t v33 = v2;
      do
      {
        unint64_t v34 = v33 >> 1;
        uint64_t v35 = &v32[v33 >> 1];
        unsigned int v37 = *v35;
        uint64_t v36 = v35 + 1;
        v33 += ~(v33 >> 1);
        if (v37 < 0x1000E) {
          unint64_t v32 = v36;
        }
        else {
          unint64_t v33 = v34;
        }
      }
      while (v33);
      if (v32 == (_DWORD *)(v26 + 4 * v2)) {
        goto LABEL_87;
      }
      if (*v32 != 65550) {
        goto LABEL_87;
      }
      unint64_t v31 = ((unint64_t)v32 - v26) >> 2;
      if (v2 == (unsigned __int16)v31) {
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v27 = 0;
      while (1)
      {
        unsigned int v28 = *(_DWORD *)(v26 + 4 * v27);
        if (v28 >= 0x1000E) {
          break;
        }
        if (v2 == ++v27) {
          goto LABEL_87;
        }
      }
      if (v28 == 65550) {
        LOWORD(v31) = v27;
      }
      else {
        LOWORD(v31) = v2;
      }
      if (v2 == (unsigned __int16)v31) {
        goto LABEL_87;
      }
    }
LABEL_79:
    if (v2 > (unsigned __int16)v31) {
      uint64_t v3 = *(void *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v31;
    }
    *(unsigned char *)(result + 2) = *(unsigned char *)v3;
    goto LABEL_88;
  }
  uint64_t v29 = 4 * v2;
  uint64_t v30 = *(_DWORD **)a2;
  while (*v30 != 65550)
  {
    ++v30;
    v29 -= 4;
    if (!v29)
    {
      uint64_t v30 = (_DWORD *)(v26 + 4 * v2);
      break;
    }
  }
  unint64_t v31 = ((unint64_t)v30 - v26) >> 2;
  if (v2 != (unsigned __int16)v31) {
    goto LABEL_79;
  }
LABEL_87:
  *(unsigned char *)(result + 2) = 0;
  if (!v2) {
    goto LABEL_116;
  }
LABEL_88:
  uint64_t v38 = *(void *)a2;
  if (*(unsigned char *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      double v44 = *(_DWORD **)a2;
      unint64_t v45 = v2;
      do
      {
        unint64_t v46 = v45 >> 1;
        __double2 v47 = &v44[v45 >> 1];
        unsigned int v49 = *v47;
        double v48 = v47 + 1;
        v45 += ~(v45 >> 1);
        if (v49 < 0x10084) {
          double v44 = v48;
        }
        else {
          unint64_t v45 = v46;
        }
      }
      while (v45);
      if (v44 == (_DWORD *)(v38 + 4 * v2)) {
        goto LABEL_116;
      }
      if (*v44 != 65668) {
        goto LABEL_116;
      }
      unint64_t v43 = ((unint64_t)v44 - v38) >> 2;
      if (v2 == (unsigned __int16)v43) {
        goto LABEL_116;
      }
    }
    else
    {
      uint64_t v39 = 0;
      while (1)
      {
        unsigned int v40 = *(_DWORD *)(v38 + 4 * v39);
        if (v40 >= 0x10084) {
          break;
        }
        if (v2 == ++v39) {
          goto LABEL_116;
        }
      }
      if (v40 == 65668) {
        LOWORD(v43) = v39;
      }
      else {
        LOWORD(v43) = v2;
      }
      if (v2 == (unsigned __int16)v43) {
        goto LABEL_116;
      }
    }
LABEL_108:
    if (v2 > (unsigned __int16)v43) {
      uint64_t v3 = *(void *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v43;
    }
    *(unsigned char *)(result + 3) = *(unsigned char *)v3;
    goto LABEL_117;
  }
  uint64_t v41 = 4 * v2;
  double v42 = *(_DWORD **)a2;
  while (*v42 != 65668)
  {
    ++v42;
    v41 -= 4;
    if (!v41)
    {
      double v42 = (_DWORD *)(v38 + 4 * v2);
      break;
    }
  }
  unint64_t v43 = ((unint64_t)v42 - v38) >> 2;
  if (v2 != (unsigned __int16)v43) {
    goto LABEL_108;
  }
LABEL_116:
  *(unsigned char *)(result + 3) = 0;
  if (!v2) {
    goto LABEL_145;
  }
LABEL_117:
  uint64_t v50 = *(void *)a2;
  if (*(unsigned char *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      int v56 = *(_DWORD **)a2;
      unint64_t v57 = v2;
      do
      {
        unint64_t v58 = v57 >> 1;
        uint64_t v59 = &v56[v57 >> 1];
        unsigned int v61 = *v59;
        unsigned int v60 = v59 + 1;
        v57 += ~(v57 >> 1);
        if (v61 < 0x10033) {
          int v56 = v60;
        }
        else {
          unint64_t v57 = v58;
        }
      }
      while (v57);
      if (v56 == (_DWORD *)(v50 + 4 * v2)) {
        goto LABEL_145;
      }
      if (*v56 != 65587) {
        goto LABEL_145;
      }
      unint64_t v55 = ((unint64_t)v56 - v50) >> 2;
      if (v2 == (unsigned __int16)v55) {
        goto LABEL_145;
      }
    }
    else
    {
      uint64_t v51 = 0;
      while (1)
      {
        unsigned int v52 = *(_DWORD *)(v50 + 4 * v51);
        if (v52 >= 0x10033) {
          break;
        }
        if (v2 == ++v51) {
          goto LABEL_145;
        }
      }
      if (v52 == 65587) {
        LOWORD(v55) = v51;
      }
      else {
        LOWORD(v55) = v2;
      }
      if (v2 == (unsigned __int16)v55) {
        goto LABEL_145;
      }
    }
LABEL_137:
    if (v2 > (unsigned __int16)v55) {
      uint64_t v3 = *(void *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v55;
    }
    *(unsigned char *)(result + 4) = *(unsigned char *)v3;
    goto LABEL_146;
  }
  uint64_t v53 = 4 * v2;
  uint8x8_t v54 = *(_DWORD **)a2;
  while (*v54 != 65587)
  {
    ++v54;
    v53 -= 4;
    if (!v53)
    {
      uint8x8_t v54 = (_DWORD *)(v50 + 4 * v2);
      break;
    }
  }
  unint64_t v55 = ((unint64_t)v54 - v50) >> 2;
  if (v2 != (unsigned __int16)v55) {
    goto LABEL_137;
  }
LABEL_145:
  *(unsigned char *)(result + 4) = 0;
  if (!v2) {
    goto LABEL_174;
  }
LABEL_146:
  uint64_t v62 = *(void *)a2;
  if (*(unsigned char *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      uint64_t v68 = *(_DWORD **)a2;
      unint64_t v69 = v2;
      do
      {
        unint64_t v70 = v69 >> 1;
        uint64_t v71 = &v68[v69 >> 1];
        unsigned int v73 = *v71;
        uint64_t v72 = v71 + 1;
        v69 += ~(v69 >> 1);
        if (v73 < 0x1003C) {
          uint64_t v68 = v72;
        }
        else {
          unint64_t v69 = v70;
        }
      }
      while (v69);
      if (v68 == (_DWORD *)(v62 + 4 * v2)) {
        goto LABEL_174;
      }
      if (*v68 != 65596) {
        goto LABEL_174;
      }
      unint64_t v67 = ((unint64_t)v68 - v62) >> 2;
      if (v2 == (unsigned __int16)v67) {
        goto LABEL_174;
      }
    }
    else
    {
      uint64_t v63 = 0;
      while (1)
      {
        unsigned int v64 = *(_DWORD *)(v62 + 4 * v63);
        if (v64 >= 0x1003C) {
          break;
        }
        if (v2 == ++v63) {
          goto LABEL_174;
        }
      }
      if (v64 == 65596) {
        LOWORD(v67) = v63;
      }
      else {
        LOWORD(v67) = v2;
      }
      if (v2 == (unsigned __int16)v67) {
        goto LABEL_174;
      }
    }
LABEL_166:
    if (v2 > (unsigned __int16)v67) {
      uint64_t v3 = *(void *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v67;
    }
    *(unsigned char *)(result + 5) = *(unsigned char *)v3;
    goto LABEL_175;
  }
  uint64_t v65 = 4 * v2;
  uint64_t v66 = *(_DWORD **)a2;
  while (*v66 != 65596)
  {
    ++v66;
    v65 -= 4;
    if (!v65)
    {
      uint64_t v66 = (_DWORD *)(v62 + 4 * v2);
      break;
    }
  }
  unint64_t v67 = ((unint64_t)v66 - v62) >> 2;
  if (v2 != (unsigned __int16)v67) {
    goto LABEL_166;
  }
LABEL_174:
  *(unsigned char *)(result + 5) = 1;
  if (!v2) {
    goto LABEL_203;
  }
LABEL_175:
  uint64_t v74 = *(void *)a2;
  if (*(unsigned char *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      unint64_t v80 = *(_DWORD **)a2;
      unint64_t v81 = v2;
      do
      {
        unint64_t v82 = v81 >> 1;
        unint64_t v83 = &v80[v81 >> 1];
        unsigned int v85 = *v83;
        uint64_t v84 = v83 + 1;
        v81 += ~(v81 >> 1);
        if (v85 < 0x10045) {
          unint64_t v80 = v84;
        }
        else {
          unint64_t v81 = v82;
        }
      }
      while (v81);
      if (v80 == (_DWORD *)(v74 + 4 * v2)) {
        goto LABEL_203;
      }
      if (*v80 != 65605) {
        goto LABEL_203;
      }
      unint64_t v79 = ((unint64_t)v80 - v74) >> 2;
      if (v2 == (unsigned __int16)v79) {
        goto LABEL_203;
      }
    }
    else
    {
      uint64_t v75 = 0;
      while (1)
      {
        unsigned int v76 = *(_DWORD *)(v74 + 4 * v75);
        if (v76 >= 0x10045) {
          break;
        }
        if (v2 == ++v75) {
          goto LABEL_203;
        }
      }
      if (v76 == 65605) {
        LOWORD(v79) = v75;
      }
      else {
        LOWORD(v79) = v2;
      }
      if (v2 == (unsigned __int16)v79) {
        goto LABEL_203;
      }
    }
LABEL_195:
    if (v2 > (unsigned __int16)v79) {
      uint64_t v3 = *(void *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v79;
    }
    *(unsigned char *)(result + 6) = *(unsigned char *)v3;
    goto LABEL_204;
  }
  uint64_t v77 = 4 * v2;
  int8x8_t v78 = *(_DWORD **)a2;
  while (*v78 != 65605)
  {
    ++v78;
    v77 -= 4;
    if (!v77)
    {
      int8x8_t v78 = (_DWORD *)(v74 + 4 * v2);
      break;
    }
  }
  unint64_t v79 = ((unint64_t)v78 - v74) >> 2;
  if (v2 != (unsigned __int16)v79) {
    goto LABEL_195;
  }
LABEL_203:
  *(unsigned char *)(result + 6) = 1;
  if (!v2) {
    goto LABEL_232;
  }
LABEL_204:
  uint64_t v86 = *(void *)a2;
  if (!*(unsigned char *)(a2 + 15))
  {
    uint64_t v89 = 4 * v2;
    unint64_t v90 = *(_DWORD **)a2;
    while (*v90 != 65597)
    {
      ++v90;
      v89 -= 4;
      if (!v89)
      {
        unint64_t v90 = (_DWORD *)(v86 + 4 * v2);
        break;
      }
    }
    unint64_t v91 = ((unint64_t)v90 - v86) >> 2;
    if (v2 == (unsigned __int16)v91) {
      goto LABEL_232;
    }
    goto LABEL_224;
  }
  if (v2 >= 0x1E)
  {
    uint64_t v92 = *(_DWORD **)a2;
    unint64_t v93 = v2;
    do
    {
      unint64_t v94 = v93 >> 1;
      float v95 = &v92[v93 >> 1];
      unsigned int v97 = *v95;
      float v96 = v95 + 1;
      v93 += ~(v93 >> 1);
      if (v97 < 0x1003D) {
        uint64_t v92 = v96;
      }
      else {
        unint64_t v93 = v94;
      }
    }
    while (v93);
    if (v92 != (_DWORD *)(v86 + 4 * v2) && *v92 == 65597)
    {
      unint64_t v91 = ((unint64_t)v92 - v86) >> 2;
      if (v2 != (unsigned __int16)v91) {
        goto LABEL_224;
      }
    }
LABEL_232:
    *(unsigned char *)(result + 7) = 0;
    return result;
  }
  uint64_t v87 = 0;
  while (1)
  {
    unsigned int v88 = *(_DWORD *)(v86 + 4 * v87);
    if (v88 >= 0x1003D) {
      break;
    }
    if (v2 == ++v87) {
      goto LABEL_232;
    }
  }
  if (v88 == 65597) {
    LOWORD(v91) = v87;
  }
  else {
    LOWORD(v91) = v2;
  }
  if (v2 == (unsigned __int16)v91) {
    goto LABEL_232;
  }
LABEL_224:
  if (v2 <= (unsigned __int16)v91) {
    uint8x8_t v98 = (unsigned char *)v3;
  }
  else {
    uint8x8_t v98 = (unsigned char *)(*(void *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v91);
  }
  *(unsigned char *)(result + 7) = *v98;
  return result;
}

uint64_t std::unordered_set<md::NavigationLogicEvent>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<md::NavigationLogicEvent,std::hash<md::NavigationLogicEvent>,std::equal_to<md::NavigationLogicEvent>,std::allocator<md::NavigationLogicEvent>>::__emplace_unique_key_args<md::NavigationLogicEvent,md::NavigationLogicEvent const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_1A1B0B4B0(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t gss::ClientStyleState<gss::PropertyID>::sourceMapDisplayStyle(uint64_t a1)
{
  unint64_t v2 = (pthread_rwlock_t *)(a1 + 16);
  v13[1] = a1 + 16;
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  }
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(&v10, (uint64_t *)(a1 + 216));
  int8x8_t v5 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"unlock", v6);
  }
  unint64_t v7 = (gss::Allocator *)gss::DisplayStyle::DisplayStyle((uint64_t)v13, (uint64_t)&v10);
  if (!v12 && v10)
  {
    uint64_t v8 = gss::Allocator::instance(v7);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v8 + 40))(v8, v10, v11);
  }
  return v13[0];
}

void sub_1A1B0B588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0>,void ()(md::StyleManagerEvent)>::operator()(gss::Allocator *a1, unsigned __int8 *a2)
{
  if ((*a2 | 4) == 4)
  {
    uint64_t v2 = *((void *)a1 + 1);
    uint64_t v3 = (uint64_t *)*((void *)a1 + 2);
    if (*v3)
    {
      uint64_t v4 = gss::Allocator::instance(a1);
      uint64_t v19 = v4;
      int8x8_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 16, 4);
      BOOL v6 = v5;
      *(void *)&long long v17 = v5;
      size_t v18 = v5 + 2;
      if (v5) {
        void *v5 = 0xB00000005;
      }
      v5[1] = 65552;
      *((void *)&v17 + 1) = v5 + 2;
      gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)v20, (uint64_t)&v17);
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 40))(v4, v6, 16);
      *(void *)((char *)&v17 + 7) = 0;
      *(void *)&long long v17 = 0;
      HIBYTE(v17) = 1;
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)&v17, 0x10002u) = 1;
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)&v17, 0x10000u) = 0;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v16, *v3, (gss::FeatureAttributeSet *)v20, (gss::QueryOverrides *)&v17);
      uint64_t v8 = *(void *)(v2 + 64);
      long long v9 = v16;
      long long v16 = 0uLL;
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 64);
      *(_OWORD *)(v8 + 56) = v9;
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      unsigned __int16 v11 = (std::__shared_weak_count *)*((void *)&v16 + 1);
      if (*((void *)&v16 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      if (!BYTE14(v17))
      {
        uint64_t v12 = v17;
        if ((void)v17)
        {
          uint64_t v13 = gss::Allocator::instance(v7);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v13 + 40))(v13, v12, WORD6(v17));
        }
      }
      if (v20[0])
      {
        v20[1] = v20[0];
        (*(void (**)(uint64_t, void, void))(*(void *)v21 + 40))(v21, v20[0], v20[2] - v20[0]);
      }
    }
    else
    {
      uint64_t v14 = *(void *)(v2 + 64);
      uint64_t v15 = *(std::__shared_weak_count **)(v14 + 64);
      *(void *)(v14 + 56) = 0;
      *(void *)(v14 + 64) = 0;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    *(unsigned char *)(*(void *)(v2 + 64) + 48) = 1;
  }
}

void sub_1A1B0B858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned __int16 a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (!a14 && a11)
  {
    uint64_t v21 = gss::Allocator::instance((gss::Allocator *)exception_object);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 40))(v21, a11, a13);
  }
  if (a17) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a20 + 40))(a20, a17, a19 - a17);
  }
  _Unwind_Resume(exception_object);
}

long long *md::GridLogic::defaultBackgroundColor(long long *result, unsigned int a2, int a3, int a4)
{
  if (a2 <= 0xB)
  {
    if (((1 << a2) & 0xC9E) != 0)
    {
      {
        uint64_t v20 = result;
        float result = v20;
        if (v9)
        {
          geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::GridLogic::_defaultSatelliteBackgroundColor(void)::_defaultSatelliteBackgroundLinearColor, (uint64_t)&kDefaultSatelliteBackgroundColor);
          float result = v20;
        }
      }
      long long v4 = md::GridLogic::_defaultSatelliteBackgroundColor(void)::_defaultSatelliteBackgroundLinearColor;
LABEL_5:
      *float result = v4;
      return result;
    }
    if (((1 << a2) & 0x261) != 0)
    {
      if (a3 == 1)
      {
        {
          uint64_t v21 = result;
          float result = v21;
          if (v10)
          {
            md::GridLogic::_defaultStandardDarkBackgroundColor(void)::_defaultStandardDarkBackgroundLinearColor = xmmword_1A28FF7D0;
            float result = v21;
          }
        }
        long long v4 = md::GridLogic::_defaultStandardDarkBackgroundColor(void)::_defaultStandardDarkBackgroundLinearColor;
        goto LABEL_5;
      }
      if (!a3)
      {
        switch(a4)
        {
          case 2:
            BOOL v6 = &qword_1E958C000;
            {
              unint64_t v24 = result;
              BOOL v6 = &qword_1E958C000;
              int v15 = v14;
              float result = v24;
              if (v15)
              {
                md::GridLogic::_defaultExploreBackgroundColor(void)::_defaultExploreBackgroundLinearColor = xmmword_1A28FF7E0;
                BOOL v6 = &qword_1E958C000;
                float result = v24;
              }
            }
            long long v4 = *((_OWORD *)v6 + 162);
            goto LABEL_5;
          case 1:
            {
              unsigned int v25 = result;
              int v17 = v16;
              float result = v25;
              if (v17)
              {
                md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor = xmmword_1A28FF7E0;
                float result = v25;
              }
            }
            long long v4 = *((_OWORD *)v7 + 52);
            goto LABEL_5;
          case 0:
            {
              unint64_t v22 = result;
              float result = v22;
              if (v11)
              {
                md::GridLogic::_defaultMutedBackgroundColor(void)::_defaultMutedBackgroundLinearColor = xmmword_1A28FF7E0;
                float result = v22;
              }
            }
            long long v4 = md::GridLogic::_defaultMutedBackgroundColor(void)::_defaultMutedBackgroundLinearColor;
            goto LABEL_5;
        }
      }
    }
    else
    {
      if (a3 == 1)
      {
        uint64_t v8 = &qword_1E957E000;
        {
          uint64_t v26 = result;
          uint64_t v8 = &qword_1E957E000;
          int v19 = v18;
          float result = v26;
          if (v19)
          {
            md::GridLogic::_defaultStandardDarkBackgroundColor(void)::_defaultStandardDarkBackgroundLinearColor = xmmword_1A28FF7D0;
            uint64_t v8 = &qword_1E957E000;
            float result = v26;
          }
        }
        long long v4 = *((_OWORD *)v8 + 133);
        goto LABEL_5;
      }
      if (!a3)
      {
        p_info = VKManifestTileGroupObserverProxy.info;
        {
          uint64_t v23 = result;
          p_info = VKManifestTileGroupObserverProxy.info;
          int v13 = v12;
          float result = v23;
          if (v13)
          {
            md::GridLogic::_defaultMutedBackgroundColor(void)::_defaultMutedBackgroundLinearColor = xmmword_1A28FF7E0;
            p_info = (__objc2_class_ro **)(VKManifestTileGroupObserverProxy + 32);
            float result = v23;
          }
        }
        long long v4 = *((_OWORD *)p_info + 113);
        goto LABEL_5;
      }
    }
  }
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1B0C004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v16)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  long long v4 = (void *)gdc::Registry::storage<md::ls::FinishedProcessingDepthPrePass>(v3);
  int8x8_t v5 = (void *)gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(v3);
  BOOL v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  int v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  int v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *int v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      unint64_t v23 = v4[11];
      unint64_t v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      unint64_t v23 = v4[11];
      unint64_t v24 = v23;
    }
    unint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    unint64_t v33 = v6[11];
    unint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    int v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unsigned int v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      int v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  unint64_t v33 = v6[11];
  unint64_t v34 = v6[10] + v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  int v12 = (void *)result;
LABEL_56:
  *int v12 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)5>>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::TileType>(v3);
  uint64_t v7 = gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(v3);
  uint64_t v8 = gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(v3);
  uint64_t v9 = gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v3);
  gdc::Registry::storage<md::ls::AssociationHandle>(v3);
  gdc::Registry::storage<md::ls::HasMeshHandle>(v3);
  gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v3);
  gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v3);
  gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v3);
  gdc::Registry::storage<md::ls::IndexRange>(v3);
  gdc::Registry::storage<md::ls::NormalsHandle>(v3);
  gdc::Registry::storage<md::ls::InstanceTransformHandle>(v3);
  gdc::Registry::storage<md::ls::UVsHandle>(v3);
  gdc::Registry::storage<md::ls::NeedsZBias>(v3);
  gdc::Registry::storage<md::ls::ElevationHandle>(v3);
  gdc::Registry::storage<md::ls::PreserveHeight>(v3);
  gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v3);
  gdc::Registry::storage<md::ls::IsMercator>(v3);
  gdc::Registry::storage<md::ls::InstanceCount>(v3);
  uint64_t v10 = v4 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v10 = v5 + 32;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v6 + 32;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v7 + 32;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v8 + 32;
  }
  if (*(void *)(v9 + 64) - *(void *)(v9 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v9 + 32;
  }
  v25[0] = v10;
  v25[1] = v4;
  _WORD v25[2] = v5;
  v25[3] = v6;
  v25[4] = v7;
  v25[5] = v8;
  int v12 = *(void **)(v10 + 24);
  int v11 = *(void **)(v10 + 32);
  v25[6] = v9;
  uint64_t v26 = v12;
  unint64_t v24 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v25))
  {
    unint64_t v13 = v12 + 1;
    do
    {
      int v12 = v13;
      uint64_t v26 = v13;
      if (v13 == v24) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v25);
      unint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v16 = result;
  if (v24 != v12)
  {
    *uint64_t result = *v12;
    uint64_t v17 = **(void **)(a1 + 8);
    unint64_t v18 = *(void **)v17;
    uint64_t v19 = *(void **)(v17 + 8);
    if (v18 != v19)
    {
      while (*v18 != 0x41D4E9297E100630)
      {
        v18 += 5;
        if (v18 == v19) {
          goto LABEL_25;
        }
      }
    }
    if (v18 != v19)
    {
      uint64_t v20 = (std::__shared_weak_count *)v18[4];
      if (v20)
      {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
LABEL_25:
    uint64_t v21 = *(void **)(a1 + 8);
    uint64_t v22 = HIDWORD(*v16);
    uint64_t v23 = *v16 << 32;
    v28[0] = &unk_1EF5258C8;
    v28[1] = v23;
    LODWORD(v29) = v22;
    unint64_t v33 = v31;
    uint64_t v30 = v28;
    v31[0] = &unk_1EF5258C8;
    v31[1] = v23;
    int v32 = v22;
    int v34 = 0;
    ecs2::Runtime::queueCommand(v21, (uint64_t)v31);
    if (v34 != -1) {
      ((void (*)(char *, void *))off_1EF591178[v34])(&v27, v31);
    }
    int v34 = -1;
    if (v30 == v28)
    {
      (*(void (**)(void *))(v28[0] + 32))(v28);
    }
    else if (v30)
    {
      (*(void (**)(void))(*v30 + 40))();
    }
    gdc::Registry::create(*(gdc::Registry **)(*(void *)(a1 + 8) + 8));
  }
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(int8x8_t *a1)
{
  unint64_t v10 = 0xB7D4B4C2109DE954;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB7D4B4C2109DE954;
    if (*(void *)&v1 <= 0xB7D4B4C2109DE954) {
      unint64_t v3 = 0xB7D4B4C2109DE954 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB7D4B4C2109DE954;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB7D4B4C2109DE954)
      {
        if (v5[2] == 0xB7D4B4C2109DE954) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB7D4B4C2109DE954) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB7D4B4C2109DE954) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B0F100(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)5>>(int8x8_t *a1)
{
  uint64_t v10 = 0x2DFCB5932E0A2DE3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2DFCB5932E0A2DE3;
    if (*(void *)&v1 <= 0x2DFCB5932E0A2DE3uLL) {
      uint64_t v3 = 0x2DFCB5932E0A2DE3uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2DFCB5932E0A2DE3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2DFCB5932E0A2DE3)
      {
        if (v5[2] == 0x2DFCB5932E0A2DE3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2DFCB5932E0A2DE3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2DFCB5932E0A2DE3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B0F370(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::FinishedProcessingShadow>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PendingProcessingShadow>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  uint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  int v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *int v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      unint64_t v23 = v4[11];
      unint64_t v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      unint64_t v23 = v4[11];
      unint64_t v24 = v23;
    }
    unint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    unint64_t v33 = v6[11];
    unint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    int v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unsigned int v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      int v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  unint64_t v33 = v6[11];
  unint64_t v34 = v6[10] + v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  int v12 = (void *)result;
LABEL_56:
  *int v12 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::PendingProcessingShadow>(int8x8_t *a1)
{
  unint64_t v10 = 0xEC85A518158AB507;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEC85A518158AB507;
    if (*(void *)&v1 <= 0xEC85A518158AB507) {
      unint64_t v3 = 0xEC85A518158AB507 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEC85A518158AB507;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEC85A518158AB507)
      {
        if (v5[2] == 0xEC85A518158AB507) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEC85A518158AB507) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEC85A518158AB507) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B0F8D0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::FinishedProcessing>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PendingProcessing>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  int v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *int v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      unint64_t v23 = v4[11];
      unint64_t v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      unint64_t v23 = v4[11];
      unint64_t v24 = v23;
    }
    unint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    unint64_t v33 = v6[11];
    unint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    int v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unsigned int v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      int v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  unint64_t v33 = v6[11];
  unint64_t v34 = v6[10] + v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  int v12 = (void *)result;
LABEL_56:
  *int v12 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::FinishedProcessingDepthPrePass>(int8x8_t *a1)
{
  uint64_t v10 = 0x2B00F9EAE99A5837;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2B00F9EAE99A5837;
    if (*(void *)&v1 <= 0x2B00F9EAE99A5837uLL) {
      uint64_t v3 = 0x2B00F9EAE99A5837uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2B00F9EAE99A5837;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2B00F9EAE99A5837)
      {
        if (v5[2] == 0x2B00F9EAE99A5837) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2B00F9EAE99A5837) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2B00F9EAE99A5837) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B0FE30(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FinishedProcessingShadow>(int8x8_t *a1)
{
  uint64_t v10 = 0x343B7A672BA2F664;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x343B7A672BA2F664;
    if (*(void *)&v1 <= 0x343B7A672BA2F664uLL) {
      uint64_t v3 = 0x343B7A672BA2F664uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x343B7A672BA2F664;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x343B7A672BA2F664)
      {
        if (v5[2] == 0x343B7A672BA2F664) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x343B7A672BA2F664) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x343B7A672BA2F664) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B100A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FinishedProcessing>(int8x8_t *a1)
{
  unint64_t v10 = 0xCAB567F400206020;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCAB567F400206020;
    if (*(void *)&v1 <= 0xCAB567F400206020) {
      unint64_t v3 = 0xCAB567F400206020 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCAB567F400206020;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCAB567F400206020)
      {
        if (v5[2] == 0xCAB567F400206020) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCAB567F400206020) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCAB567F400206020) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B10310(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *md::VenueRenderLayer::layout(md::VenueRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  v81[0] = &unk_1EF572E88;
  v81[1] = a2;
  unint64_t v82 = v81;
  v79[0] = &unk_1EF572ED0;
  v79[1] = a2;
  unint64_t v80 = v79;
  uint64_t v84 = v83;
  v83[0] = &unk_1EF572ED0;
  v83[1] = a2;
  std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v81);
  if (v80 == v79)
  {
    (*(void (**)(void *))(v79[0] + 32))(v79);
  }
  else if (v80)
  {
    (*(void (**)(void))(*v80 + 40))();
  }
  if (v82 == v81)
  {
    (*(void (**)(void *))(v81[0] + 32))(v81);
  }
  else if (v82)
  {
    (*(void (**)(void))(*v82 + 40))();
  }
  uint64_t v4 = (void *)*((void *)a2 + 1);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_163;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x4927EB92E562CC46;
    if (*(void *)&v5 <= 0x4927EB92E562CC46uLL) {
      uint64_t v7 = 0x4927EB92E562CC46uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x4927EB92E562CC46;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_163;
  }
  uint64_t v9 = (void *)*v8;
  if (!*v8) {
    goto LABEL_163;
  }
  uint64_t v10 = *(void *)&v5 - 1;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x4927EB92E562CC46)
      {
        if (v9[2] == 0x4927EB92E562CC46) {
          goto LABEL_30;
        }
      }
      else if ((v11 & v10) != v7)
      {
        goto LABEL_163;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_163;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v9[1];
    if (v12 == 0x4927EB92E562CC46) {
      break;
    }
    if (v12 >= *(void *)&v5) {
      v12 %= *(void *)&v5;
    }
    if (v12 != v7) {
      goto LABEL_163;
    }
LABEL_24:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_163;
    }
  }
  if (v9[2] != 0x4927EB92E562CC46) {
    goto LABEL_24;
  }
LABEL_30:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x4927EB92E562CC46) {
    goto LABEL_163;
  }
  uint64_t v14 = *(void *)(v13 + 32);
  if (!v14) {
    goto LABEL_163;
  }
  long long v76 = *((_OWORD *)this + 17);
  if (v6.u32[0] >= 2uLL)
  {
    unint64_t v16 = 0xE42D19AFCA302E68;
    if (*(void *)&v5 <= 0xE42D19AFCA302E68) {
      unint64_t v16 = 0xE42D19AFCA302E68 % *(void *)&v5;
    }
    unint64_t v15 = *(void **)(*v4 + 8 * v16);
    do
    {
      do
        unint64_t v15 = (void *)*v15;
      while (v15[1] != 0xE42D19AFCA302E68);
    }
    while (v15[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    unint64_t v15 = *(void **)(*v4 + 8 * (v10 & 0xE42D19AFCA302E68));
    do
    {
      do
        unint64_t v15 = (void *)*v15;
      while (v15[1] != 0xE42D19AFCA302E68);
    }
    while (v15[2] != 0xE42D19AFCA302E68);
  }
  uint64_t v17 = *(void *)(v15[5] + 32);
  v77[0] = &unk_1EF572F18;
  v77[1] = this;
  v77[2] = &v76;
  int8x8_t v78 = v77;
  md::StyleLogicContext::parseEvents(*(void *)(v17 + 48), *(char **)(v17 + 56), (uint64_t)v77);
  if (v78 == v77)
  {
    (*(void (**)(void *))(v77[0] + 32))(v77);
  }
  else if (v78)
  {
    (*(void (**)(void))(*v78 + 40))();
  }
  unint64_t v18 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v19 = (int8x8_t)v18[1];
  if (!*(void *)&v19)
  {
    BOOL v22 = 0;
    goto LABEL_93;
  }
  uint8x8_t v20 = (uint8x8_t)vcnt_s8(v19);
  v20.i16[0] = vaddlv_u8(v20);
  if (v20.u32[0] > 1uLL)
  {
    unint64_t v21 = 0xC97B9E962ADF4AD4;
    if (*(void *)&v19 <= 0xC97B9E962ADF4AD4) {
      unint64_t v21 = 0xC97B9E962ADF4AD4 % *(void *)&v19;
    }
  }
  else
  {
    unint64_t v21 = (*(void *)&v19 - 1) & 0xC97B9E962ADF4AD4;
  }
  uint64_t v23 = *v18;
  unint64_t v24 = *(void **)(v23 + 8 * v21);
  if (!v24) {
    goto LABEL_70;
  }
  unint64_t v25 = (void *)*v24;
  if (!v25) {
    goto LABEL_70;
  }
  if (v20.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v27 = v25[1];
      if (v27 == 0xC97B9E962ADF4AD4)
      {
        if (v25[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_68;
        }
      }
      else if ((v27 & (*(void *)&v19 - 1)) != v21)
      {
        goto LABEL_70;
      }
      unint64_t v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_70;
      }
    }
  }
  while (2)
  {
    unint64_t v26 = v25[1];
    if (v26 != 0xC97B9E962ADF4AD4)
    {
      if (v26 >= *(void *)&v19) {
        v26 %= *(void *)&v19;
      }
      if (v26 != v21) {
        goto LABEL_70;
      }
      goto LABEL_57;
    }
    if (v25[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_57:
      unint64_t v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_70;
      }
      continue;
    }
    break;
  }
LABEL_68:
  uint64_t v28 = v25[5];
  if (*(void *)(v28 + 8) == 0xC97B9E962ADF4AD4)
  {
    BOOL v22 = *(uint64_t **)(v28 + 32);
    goto LABEL_71;
  }
LABEL_70:
  BOOL v22 = 0;
LABEL_71:
  if (v20.u32[0] > 1uLL)
  {
    unint64_t v29 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v19 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v29 = 0x8BD499FBD96FBB9ELL % *(void *)&v19;
    }
  }
  else
  {
    unint64_t v29 = (*(void *)&v19 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v30 = *(void **)(v23 + 8 * v29);
  if (!v30) {
    goto LABEL_93;
  }
  uint64_t v31 = (void *)*v30;
  if (!v31) {
    goto LABEL_93;
  }
  if (v20.u32[0] < 2uLL)
  {
    uint64_t v32 = *(void *)&v19 - 1;
    while (1)
    {
      uint64_t v34 = v31[1];
      if (v34 == 0x8BD499FBD96FBB9ELL)
      {
        if (v31[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_91;
        }
      }
      else if ((v34 & v32) != v29)
      {
        goto LABEL_93;
      }
      uint64_t v31 = (void *)*v31;
      if (!v31) {
        goto LABEL_93;
      }
    }
  }
  while (1)
  {
    unint64_t v33 = v31[1];
    if (v33 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v33 >= *(void *)&v19) {
      v33 %= *(void *)&v19;
    }
    if (v33 != v29) {
      goto LABEL_93;
    }
LABEL_80:
    uint64_t v31 = (void *)*v31;
    if (!v31) {
      goto LABEL_93;
    }
  }
  if (v31[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_80;
  }
LABEL_91:
  uint64_t v35 = v31[5];
  if (*(void *)(v35 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_93:
    uint64_t v36 = 0;
    goto LABEL_94;
  }
  uint64_t v36 = *(void *)(v35 + 32);
  if (!*(unsigned char *)v36) {
    goto LABEL_102;
  }
LABEL_94:
  uint64_t v37 = *v22;
  uint64_t v38 = v22[1];
  if (v37 != v38)
  {
    while (*(unsigned char *)v37 != 21)
    {
      v37 += 16;
      if (v37 == v38) {
        goto LABEL_102;
      }
    }
  }
  if (v37 != v38 && *(void *)(v37 + 8)) {
    char v39 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128) - 1 < 3;
  }
  else {
LABEL_102:
  }
    char v39 = 0;
  md::PolygonRenderResources::resetPools(*((md::PolygonRenderResources **)this + 46));
  md::CVenueRenderResources::resetPools(*((md::CVenueRenderResources **)this + 47));
  *((unsigned char *)this + 392) = v39;
  *((unsigned char *)this + 393) = v39;
  unint64_t v40 = (int8x8_t *)*((void *)a2 + 1);
  uint64_t v41 = md::VenueRenderLayer::_venuesCommandBuffer(this, v40);
  uint64_t v42 = *(void *)(v41 + 72);
  if (*(void *)(v41 + 80) != v42) {
    *(void *)(v41 + 80) = v42;
  }
  *((void *)this + 56) = v41;
  md::LayoutContext::zoomAtCentrePoint(v40);
  if (fminf(fmaxf((float)(v43 * 2.0) + -31.0, 0.0), 1.0) < 0.00000011921) {
    goto LABEL_163;
  }
  int8x8_t v44 = v40[1];
  if (!*(void *)&v44) {
    goto LABEL_163;
  }
  uint8x8_t v45 = (uint8x8_t)vcnt_s8(v44);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    uint64_t v46 = 0x41E8D6E445F4145;
    if (*(void *)&v44 <= 0x41E8D6E445F4145uLL) {
      uint64_t v46 = 0x41E8D6E445F4145uLL % *(void *)&v44;
    }
  }
  else
  {
    uint64_t v46 = (*(void *)&v44 - 1) & 0x41E8D6E445F4145;
  }
  uint64_t v47 = *(void **)(*(void *)v40 + 8 * v46);
  if (!v47) {
    goto LABEL_163;
  }
  double v48 = (void *)*v47;
  if (!v48) {
    goto LABEL_163;
  }
  if (v45.u32[0] < 2uLL)
  {
    uint64_t v49 = *(void *)&v44 - 1;
    while (1)
    {
      uint64_t v51 = v48[1];
      if (v51 == 0x41E8D6E445F4145)
      {
        if (v48[2] == 0x41E8D6E445F4145) {
          goto LABEL_127;
        }
      }
      else if ((v51 & v49) != v46)
      {
        goto LABEL_163;
      }
      double v48 = (void *)*v48;
      if (!v48) {
        goto LABEL_163;
      }
    }
  }
  while (2)
  {
    unint64_t v50 = v48[1];
    if (v50 != 0x41E8D6E445F4145)
    {
      if (v50 >= *(void *)&v44) {
        v50 %= *(void *)&v44;
      }
      if (v50 != v46) {
        goto LABEL_163;
      }
      goto LABEL_116;
    }
    if (v48[2] != 0x41E8D6E445F4145)
    {
LABEL_116:
      double v48 = (void *)*v48;
      if (!v48) {
        goto LABEL_163;
      }
      continue;
    }
    break;
  }
LABEL_127:
  uint64_t v52 = v48[5];
  if (*(void *)(v52 + 8) != 0x41E8D6E445F4145 || !*(void *)(v52 + 32)) {
    goto LABEL_163;
  }
  *((unsigned char *)this + 438) = *(unsigned char *)(v14 + 352);
  *((void *)this + 55) = v14;
  md::PolygonLayoutCharacteristics::setSelectedFeatureIds((uint64_t)this + 384, (char **)(v14 + 120));
  if (!*((unsigned char *)this + 393))
  {
    unint64_t v57 = (uint64_t *)*((void *)this + 34);
    uint64_t v58 = (uint64_t *)*((void *)this + 35);
    if (v57 != v58)
    {
      float v60 = *(float *)(v36 + 16);
      float v59 = *(float *)(v36 + 20);
      do
        md::BaseMapTileDataRenderable::adjustZScale(*v57++, v60, v59);
      while (v57 != v58);
    }
    goto LABEL_158;
  }
  uint64_t v53 = (void *)*((void *)a2 + 1);
  int8x8_t v54 = (int8x8_t)v53[1];
  if (!*(void *)&v54) {
    goto LABEL_158;
  }
  uint8x8_t v55 = (uint8x8_t)vcnt_s8(v54);
  v55.i16[0] = vaddlv_u8(v55);
  if (v55.u32[0] > 1uLL)
  {
    uint64_t v56 = 0x1B8B241A8D896A1DLL;
    if (*(void *)&v54 <= 0x1B8B241A8D896A1DuLL) {
      uint64_t v56 = 0x1B8B241A8D896A1DuLL % *(void *)&v54;
    }
  }
  else
  {
    uint64_t v56 = (*(void *)&v54 - 1) & 0x1B8B241A8D896A1DLL;
  }
  unsigned int v61 = *(void **)(*v53 + 8 * v56);
  if (!v61 || (uint64_t v62 = (void *)*v61) == 0)
  {
LABEL_158:
    *(void *)(*((void *)this + 46) + 264) = 0;
    md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>((uint64_t **)this + 34, *((uint64_t **)a2 + 1), (uint64_t)this + 384);
    md::VenueRenderLayer::_layoutDimmingOverlay(this, *((int8x8_t **)a2 + 1));
    md::VenueRenderLayer::_layoutVenueWalls(this, (int8x8_t **)a2);
    md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>((uint64_t)this + 272, (uint64_t)a2, *((void *)this + 5), *((void *)this + 46), (unsigned __int8 *)this + 384, v39);
    md::VenueRenderLayer::_layoutOpenToBelowAreas(this, (int8x8_t **)a2);
    md::VenueRenderLayer::_layoutVenueFootprints(this, *((int8x8_t **)a2 + 1));
    (*(void (**)(unsigned __int8 **__return_ptr, md::VenueRenderLayer *, const md::LayoutContext *))(*(void *)this + 32))(&v74, this, a2);
    uint64_t v68 = v74;
    unint64_t v69 = v75;
    if (v74 != v75)
    {
      do
      {
        unsigned __int8 v70 = v68[1];
        unsigned __int8 v71 = *v68;
        v68 += 2;
        uint64_t v72 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), v71, v70);
        ggl::CommandBuffer::stableSortRenderItems(*(__n128 **)(v72 + 72), *(char **)(v72 + 80));
      }
      while (v68 != v69);
      uint64_t v68 = v74;
    }
    if (v68)
    {
      uint64_t v75 = v68;
      operator delete(v68);
    }
    goto LABEL_163;
  }
  if (v55.u32[0] < 2uLL)
  {
    uint64_t v63 = *(void *)&v54 - 1;
    while (1)
    {
      uint64_t v65 = v62[1];
      if (v65 == 0x1B8B241A8D896A1DLL)
      {
        if (v62[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_155;
        }
      }
      else if ((v65 & v63) != v56)
      {
        goto LABEL_158;
      }
      uint64_t v62 = (void *)*v62;
      if (!v62) {
        goto LABEL_158;
      }
    }
  }
  while (1)
  {
    unint64_t v64 = v62[1];
    if (v64 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v64 >= *(void *)&v54) {
      v64 %= *(void *)&v54;
    }
    if (v64 != v56) {
      goto LABEL_158;
    }
LABEL_144:
    uint64_t v62 = (void *)*v62;
    if (!v62) {
      goto LABEL_158;
    }
  }
  if (v62[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_144;
  }
LABEL_155:
  uint64_t v66 = v62[5];
  if (*(void *)(v66 + 8) != 0x1B8B241A8D896A1DLL) {
    goto LABEL_158;
  }
  unint64_t v67 = *(unsigned char **)(v66 + 32);
  if (!v67 || !*v67) {
    goto LABEL_158;
  }
LABEL_163:
  if (!v84)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v84 + 48))(v84);
  uint64_t result = v84;
  if (v84 == v83) {
    return (void *)(*(uint64_t (**)(void *))(v83[0] + 32))(v83);
  }
  if (v84) {
    return (void *)(*(uint64_t (**)(void))(*v84 + 40))();
  }
  return result;
}

void sub_1A1B10DE0(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1A1B10E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v15 = *(void *)(v13 - 96);
  if (v15 == v12)
  {
    (*(void (**)(uint64_t))(*(void *)(v13 - 120) + 32))(v13 - 120);
  }
  else if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
  }
  std::function<void ()(void)>::~function((uint64_t *)va);
  std::function<void ()(void)>::~function((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1A1B10E94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 96);
  if (v3 == v1 - 120)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 120) + 32))(v1 - 120);
    _Unwind_Resume(exception_object);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "VenueLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "VenueLayout", "", v5, 2u);
  }
}

uint64_t md::StyleLogicContext::parseEvents(uint64_t result, char *a2, uint64_t a3)
{
  if ((char *)result != a2)
  {
    int8x8_t v5 = (char *)result;
    while (1)
    {
      char v8 = *v5;
      uint64_t v6 = *(void *)(a3 + 24);
      if (!v6) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 48))(v6, &v8);
      if (++v5 == a2) {
        return result;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return md::PolygonRenderResources::resetPools(v7);
  }
  return result;
}

void md::PolygonRenderResources::resetPools(md::PolygonRenderResources *this)
{
  uint8x8_t v2 = (uint64_t *)*((void *)this + 22);
  uint64_t v3 = (uint64_t *)v2[4];
  os_signpost_id_t v4 = (uint64_t *)v2[5];
  if (v3 == v4) {
    goto LABEL_33;
  }
  int8x8_t v5 = (void *)v2[1];
  do
  {
    uint64_t v6 = *v3;
    unint64_t v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5) {
        void *v5 = v6;
      }
      ++v5;
      goto LABEL_4;
    }
    uint64_t v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
LABEL_207:
    }
      abort();
    uint64_t v9 = v7 - *v2;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 16))(v2[3], 8 * v11, 8);
      uint64_t v14 = (void *)(v13 + 8 * v8);
      uint64_t v11 = v13 + v12;
      if (v13) {
        *uint64_t v14 = v6;
      }
    }
    else
    {
      uint64_t v14 = (void *)(8 * v8);
    }
    uint64_t v16 = *v2;
    uint64_t v15 = v2[1];
    uint64_t v17 = v15 - *v2;
    if (v15 == *v2)
    {
      uint64_t v19 = v14;
      goto LABEL_29;
    }
    unint64_t v18 = v17 - 8;
    if ((unint64_t)(v17 - 8) < 0x38)
    {
      uint64_t v19 = v14;
    }
    else
    {
      uint64_t v19 = v14;
      if ((unint64_t)(v15 - (void)v14) >= 0x20)
      {
        uint64_t v20 = (v18 >> 3) + 1;
        unint64_t v21 = v14 - 2;
        BOOL v22 = (long long *)(v15 - 16);
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          _OWORD *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        uint64_t v19 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
    }
    do
    {
      uint64_t v25 = *(void *)(v15 - 8);
      v15 -= 8;
      *--uint64_t v19 = v25;
    }
    while (v15 != v16);
LABEL_28:
    uint64_t v15 = *v2;
LABEL_29:
    int8x8_t v5 = v14 + 1;
    uint64_t *v2 = (uint64_t)v19;
    v2[1] = (uint64_t)(v14 + 1);
    uint64_t v26 = v2[2];
    v2[2] = v11;
    if (v15) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v15, v26 - v15);
    }
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  uint64_t v27 = v2[4];
  if (v27 != v2[5]) {
    v2[5] = v27;
  }
LABEL_33:
  uint64_t v28 = (uint64_t *)*((void *)this + 23);
  unint64_t v29 = (uint64_t *)v28[4];
  uint64_t v30 = (uint64_t *)v28[5];
  if (v29 == v30) {
    goto LABEL_65;
  }
  uint64_t v31 = (void *)v28[1];
  while (2)
  {
    uint64_t v32 = *v29;
    unint64_t v33 = v28[2];
    if ((unint64_t)v31 < v33)
    {
      if (v31) {
        void *v31 = v32;
      }
      ++v31;
      goto LABEL_36;
    }
    uint64_t v34 = ((uint64_t)v31 - *v28) >> 3;
    if ((unint64_t)(v34 + 1) >> 61) {
      goto LABEL_207;
    }
    uint64_t v35 = v33 - *v28;
    uint64_t v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
      uint64_t v36 = v34 + 1;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v37 = v36;
    }
    if (v37)
    {
      uint64_t v38 = 8 * v37;
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[3] + 16))(v28[3], 8 * v37, 8);
      unint64_t v40 = (void *)(v39 + 8 * v34);
      uint64_t v37 = v39 + v38;
      if (v39) {
        *unint64_t v40 = v32;
      }
    }
    else
    {
      unint64_t v40 = (void *)(8 * v34);
    }
    uint64_t v42 = *v28;
    uint64_t v41 = v28[1];
    uint64_t v43 = v41 - *v28;
    if (v41 == *v28)
    {
      uint8x8_t v45 = v40;
      goto LABEL_61;
    }
    unint64_t v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      uint8x8_t v45 = v40;
      do
      {
LABEL_59:
        uint64_t v51 = *(void *)(v41 - 8);
        v41 -= 8;
        *--uint8x8_t v45 = v51;
      }
      while (v41 != v42);
      goto LABEL_60;
    }
    uint8x8_t v45 = v40;
    if ((unint64_t)(v41 - (void)v40) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v46 = (v44 >> 3) + 1;
    uint64_t v47 = v40 - 2;
    double v48 = (long long *)(v41 - 16);
    uint64_t v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *uint64_t v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    uint8x8_t v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
    v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_59;
    }
LABEL_60:
    uint64_t v41 = *v28;
LABEL_61:
    uint64_t v31 = v40 + 1;
    uint64_t *v28 = (uint64_t)v45;
    v28[1] = (uint64_t)(v40 + 1);
    uint64_t v52 = v28[2];
    void v28[2] = v37;
    if (v41) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[3] + 40))(v28[3], v41, v52 - v41);
    }
LABEL_36:
    v28[1] = (uint64_t)v31;
    if (++v29 != v30) {
      continue;
    }
    break;
  }
  uint64_t v53 = v28[4];
  if (v53 != v28[5]) {
    v28[5] = v53;
  }
LABEL_65:
  int8x8_t v54 = (uint64_t *)*((void *)this + 24);
  uint8x8_t v55 = (uint64_t *)v54[4];
  uint64_t v56 = (uint64_t *)v54[5];
  if (v55 == v56) {
    goto LABEL_97;
  }
  unint64_t v57 = (void *)v54[1];
  while (2)
  {
    uint64_t v58 = *v55;
    unint64_t v59 = v54[2];
    if ((unint64_t)v57 < v59)
    {
      if (v57) {
        *unint64_t v57 = v58;
      }
      ++v57;
      goto LABEL_68;
    }
    uint64_t v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_207;
    }
    uint64_t v61 = v59 - *v54;
    uint64_t v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1)) {
      uint64_t v62 = v60 + 1;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v63 = v62;
    }
    if (v63)
    {
      uint64_t v64 = 8 * v63;
      uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54[3] + 16))(v54[3], 8 * v63, 8);
      uint64_t v66 = (void *)(v65 + 8 * v60);
      uint64_t v63 = v65 + v64;
      if (v65) {
        *uint64_t v66 = v58;
      }
    }
    else
    {
      uint64_t v66 = (void *)(8 * v60);
    }
    uint64_t v68 = *v54;
    uint64_t v67 = v54[1];
    uint64_t v69 = v67 - *v54;
    if (v67 == *v54)
    {
      unsigned __int8 v71 = v66;
      goto LABEL_93;
    }
    unint64_t v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      unsigned __int8 v71 = v66;
      do
      {
LABEL_91:
        uint64_t v77 = *(void *)(v67 - 8);
        v67 -= 8;
        *--unsigned __int8 v71 = v77;
      }
      while (v67 != v68);
      goto LABEL_92;
    }
    unsigned __int8 v71 = v66;
    if ((unint64_t)(v67 - (void)v66) < 0x20) {
      goto LABEL_91;
    }
    uint64_t v72 = (v70 >> 3) + 1;
    unsigned int v73 = v66 - 2;
    uint64_t v74 = (long long *)(v67 - 16);
    uint64_t v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v76 = *v74;
      *(v73 - 1) = *(v74 - 1);
      _OWORD *v73 = v76;
      v73 -= 2;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    unsigned __int8 v71 = &v66[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_91;
    }
LABEL_92:
    uint64_t v67 = *v54;
LABEL_93:
    unint64_t v57 = v66 + 1;
    *int8x8_t v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v66 + 1);
    uint64_t v78 = v54[2];
    v54[2] = v63;
    if (v67) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54[3] + 40))(v54[3], v67, v78 - v67);
    }
LABEL_68:
    v54[1] = (uint64_t)v57;
    if (++v55 != v56) {
      continue;
    }
    break;
  }
  uint64_t v79 = v54[4];
  if (v79 != v54[5]) {
    v54[5] = v79;
  }
LABEL_97:
  unint64_t v80 = (uint64_t *)*((void *)this + 25);
  unint64_t v81 = (uint64_t *)v80[4];
  unint64_t v82 = (uint64_t *)v80[5];
  if (v81 == v82) {
    goto LABEL_129;
  }
  unint64_t v83 = (void *)v80[1];
  while (2)
  {
    uint64_t v84 = *v81;
    unint64_t v85 = v80[2];
    if ((unint64_t)v83 < v85)
    {
      if (v83) {
        *unint64_t v83 = v84;
      }
      ++v83;
      goto LABEL_100;
    }
    uint64_t v86 = ((uint64_t)v83 - *v80) >> 3;
    if ((unint64_t)(v86 + 1) >> 61) {
      goto LABEL_207;
    }
    uint64_t v87 = v85 - *v80;
    uint64_t v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1)) {
      uint64_t v88 = v86 + 1;
    }
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v89 = v88;
    }
    if (v89)
    {
      uint64_t v90 = 8 * v89;
      uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80[3] + 16))(v80[3], 8 * v89, 8);
      uint64_t v92 = (void *)(v91 + 8 * v86);
      uint64_t v89 = v91 + v90;
      if (v91) {
        *uint64_t v92 = v84;
      }
    }
    else
    {
      uint64_t v92 = (void *)(8 * v86);
    }
    uint64_t v94 = *v80;
    uint64_t v93 = v80[1];
    uint64_t v95 = v93 - *v80;
    if (v93 == *v80)
    {
      unsigned int v97 = v92;
      goto LABEL_125;
    }
    unint64_t v96 = v95 - 8;
    if ((unint64_t)(v95 - 8) < 0x38)
    {
      unsigned int v97 = v92;
      do
      {
LABEL_123:
        uint64_t v103 = *(void *)(v93 - 8);
        v93 -= 8;
        *--unsigned int v97 = v103;
      }
      while (v93 != v94);
      goto LABEL_124;
    }
    unsigned int v97 = v92;
    if ((unint64_t)(v93 - (void)v92) < 0x20) {
      goto LABEL_123;
    }
    uint64_t v98 = (v96 >> 3) + 1;
    unint64_t v99 = v92 - 2;
    uint64_t v100 = (long long *)(v93 - 16);
    uint64_t v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v102 = *v100;
      *(v99 - 1) = *(v100 - 1);
      *unint64_t v99 = v102;
      v99 -= 2;
      v100 -= 2;
      v101 -= 4;
    }
    while (v101);
    unsigned int v97 = &v92[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
    v93 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_123;
    }
LABEL_124:
    uint64_t v93 = *v80;
LABEL_125:
    unint64_t v83 = v92 + 1;
    uint64_t *v80 = (uint64_t)v97;
    v80[1] = (uint64_t)(v92 + 1);
    uint64_t v104 = v80[2];
    v80[2] = v89;
    if (v93) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80[3] + 40))(v80[3], v93, v104 - v93);
    }
LABEL_100:
    v80[1] = (uint64_t)v83;
    if (++v81 != v82) {
      continue;
    }
    break;
  }
  uint64_t v105 = v80[4];
  if (v105 != v80[5]) {
    v80[5] = v105;
  }
LABEL_129:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 26));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 27));
  unsigned int v106 = (uint64_t *)*((void *)this + 28);
  uint64_t v107 = (uint64_t *)v106[4];
  long long v108 = (uint64_t *)v106[5];
  if (v107 == v108) {
    goto LABEL_161;
  }
  double v109 = (void *)v106[1];
  while (2)
  {
    uint64_t v110 = *v107;
    unint64_t v111 = v106[2];
    if ((unint64_t)v109 < v111)
    {
      if (v109) {
        *double v109 = v110;
      }
      ++v109;
      goto LABEL_132;
    }
    uint64_t v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61) {
      goto LABEL_207;
    }
    uint64_t v113 = v111 - *v106;
    uint64_t v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1)) {
      uint64_t v114 = v112 + 1;
    }
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v115 = v114;
    }
    if (v115)
    {
      uint64_t v116 = 8 * v115;
      uint64_t v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106[3] + 16))(v106[3], 8 * v115, 8);
      uint64_t v118 = (void *)(v117 + 8 * v112);
      uint64_t v115 = v117 + v116;
      if (v117) {
        *uint64_t v118 = v110;
      }
    }
    else
    {
      uint64_t v118 = (void *)(8 * v112);
    }
    uint64_t v120 = *v106;
    uint64_t v119 = v106[1];
    uint64_t v121 = v119 - *v106;
    if (v119 == *v106)
    {
      unsigned int v123 = v118;
      goto LABEL_157;
    }
    unint64_t v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      unsigned int v123 = v118;
      do
      {
LABEL_155:
        uint64_t v129 = *(void *)(v119 - 8);
        v119 -= 8;
        *--unsigned int v123 = v129;
      }
      while (v119 != v120);
      goto LABEL_156;
    }
    unsigned int v123 = v118;
    if ((unint64_t)(v119 - (void)v118) < 0x20) {
      goto LABEL_155;
    }
    uint64_t v124 = (v122 >> 3) + 1;
    uint64_t v125 = v118 - 2;
    uint64_t v126 = (long long *)(v119 - 16);
    uint64_t v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v128 = *v126;
      *(v125 - 1) = *(v126 - 1);
      *uint64_t v125 = v128;
      v125 -= 2;
      v126 -= 2;
      v127 -= 4;
    }
    while (v127);
    unsigned int v123 = &v118[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
    v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_155;
    }
LABEL_156:
    uint64_t v119 = *v106;
LABEL_157:
    double v109 = v118 + 1;
    uint64_t *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v118 + 1);
    uint64_t v130 = v106[2];
    v106[2] = v115;
    if (v119) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106[3] + 40))(v106[3], v119, v130 - v119);
    }
LABEL_132:
    v106[1] = (uint64_t)v109;
    if (++v107 != v108) {
      continue;
    }
    break;
  }
  uint64_t v131 = v106[4];
  if (v131 != v106[5]) {
    v106[5] = v131;
  }
LABEL_161:
  BOOL v132 = (uint64_t *)*((void *)this + 29);
  float v133 = (uint64_t *)v132[4];
  int v134 = (uint64_t *)v132[5];
  if (v133 == v134) {
    goto LABEL_193;
  }
  unsigned int v135 = (void *)v132[1];
  while (2)
  {
    uint64_t v136 = *v133;
    unint64_t v137 = v132[2];
    if ((unint64_t)v135 < v137)
    {
      if (v135) {
        *unsigned int v135 = v136;
      }
      ++v135;
      goto LABEL_164;
    }
    uint64_t v138 = ((uint64_t)v135 - *v132) >> 3;
    if ((unint64_t)(v138 + 1) >> 61) {
      goto LABEL_207;
    }
    uint64_t v139 = v137 - *v132;
    uint64_t v140 = v139 >> 2;
    if (v139 >> 2 <= (unint64_t)(v138 + 1)) {
      uint64_t v140 = v138 + 1;
    }
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v141 = v140;
    }
    if (v141)
    {
      uint64_t v142 = 8 * v141;
      uint64_t v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v132[3] + 16))(v132[3], 8 * v141, 8);
      char v144 = (void *)(v143 + 8 * v138);
      uint64_t v141 = v143 + v142;
      if (v143) {
        *char v144 = v136;
      }
    }
    else
    {
      char v144 = (void *)(8 * v138);
    }
    uint64_t v146 = *v132;
    uint64_t v145 = v132[1];
    uint64_t v147 = v145 - *v132;
    if (v145 == *v132)
    {
      long long v149 = v144;
      goto LABEL_189;
    }
    unint64_t v148 = v147 - 8;
    if ((unint64_t)(v147 - 8) < 0x38)
    {
      long long v149 = v144;
      do
      {
LABEL_187:
        uint64_t v155 = *(void *)(v145 - 8);
        v145 -= 8;
        *--long long v149 = v155;
      }
      while (v145 != v146);
      goto LABEL_188;
    }
    long long v149 = v144;
    if ((unint64_t)(v145 - (void)v144) < 0x20) {
      goto LABEL_187;
    }
    uint64_t v150 = (v148 >> 3) + 1;
    __int16 v151 = v144 - 2;
    id v152 = (long long *)(v145 - 16);
    uint64_t v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v154 = *v152;
      *(v151 - 1) = *(v152 - 1);
      _OWORD *v151 = v154;
      v151 -= 2;
      v152 -= 2;
      v153 -= 4;
    }
    while (v153);
    long long v149 = &v144[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
    v145 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
    if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_187;
    }
LABEL_188:
    uint64_t v145 = *v132;
LABEL_189:
    unsigned int v135 = v144 + 1;
    uint64_t *v132 = (uint64_t)v149;
    v132[1] = (uint64_t)(v144 + 1);
    uint64_t v156 = v132[2];
    v132[2] = v141;
    if (v145) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v132[3] + 40))(v132[3], v145, v156 - v145);
    }
LABEL_164:
    v132[1] = (uint64_t)v135;
    if (++v133 != v134) {
      continue;
    }
    break;
  }
  uint64_t v157 = v132[4];
  if (v157 != v132[5]) {
    v132[5] = v157;
  }
LABEL_193:
  uint64_t v158 = *((void *)this + 127);
  uint64_t v159 = *((void *)this + 126);
  if (v158 != v159)
  {
    uint64_t v160 = *((void *)this + 127);
    do
    {
      uint64_t v162 = *(void **)(v160 - 24);
      v160 -= 24;
      uint64_t v161 = v162;
      if (v162)
      {
        *(void *)(v158 - 16) = v161;
        operator delete(v161);
      }
      uint64_t v158 = v160;
    }
    while (v160 != v159);
  }
  *((void *)this + 127) = v159;
  *((void *)this + 124) = *((void *)this + 123);
  uint64_t v163 = (void *)*((void *)this + 133);
  if (v163)
  {
    do
    {
      if (v163[1])
      {
        unint64_t v165 = 0;
        unint64_t v166 = v163 + 2;
        BOOL v167 = v163 + 2;
        double v168 = (void (***)(void))(v163 + 2);
        do
        {
          unint64_t v169 = (void (**)(void *))*v168;
          v168 += 15;
          (*v169)(v167);
          ++v165;
          v166 += 15;
          BOOL v167 = v168;
        }
        while (v165 < v163[1]);
      }
      v163[1] = 0;
      uint64_t v163 = (void *)*v163;
    }
    while (v163);
    uint64_t v164 = *((void *)this + 133);
  }
  else
  {
    uint64_t v164 = 0;
  }
  *((void *)this + 134) = v164;
}

void md::CVenueRenderResources::resetPools(md::CVenueRenderResources *this)
{
  uint8x8_t v2 = (uint64_t *)*((void *)this + 67);
  uint64_t v3 = (uint64_t *)v2[4];
  os_signpost_id_t v4 = (uint64_t *)v2[5];
  if (v3 == v4) {
    goto LABEL_33;
  }
  int8x8_t v5 = (void *)v2[1];
  do
  {
    uint64_t v6 = *v3;
    unint64_t v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5) {
        void *v5 = v6;
      }
      ++v5;
      goto LABEL_4;
    }
    uint64_t v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
LABEL_271:
    }
      abort();
    uint64_t v9 = v7 - *v2;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 16))(v2[3], 8 * v11, 8);
      uint64_t v14 = (void *)(v13 + 8 * v8);
      uint64_t v11 = v13 + v12;
      if (v13) {
        *uint64_t v14 = v6;
      }
    }
    else
    {
      uint64_t v14 = (void *)(8 * v8);
    }
    uint64_t v16 = *v2;
    uint64_t v15 = v2[1];
    uint64_t v17 = v15 - *v2;
    if (v15 == *v2)
    {
      uint64_t v19 = v14;
      goto LABEL_29;
    }
    unint64_t v18 = v17 - 8;
    if ((unint64_t)(v17 - 8) < 0x38)
    {
      uint64_t v19 = v14;
    }
    else
    {
      uint64_t v19 = v14;
      if ((unint64_t)(v15 - (void)v14) >= 0x20)
      {
        uint64_t v20 = (v18 >> 3) + 1;
        unint64_t v21 = v14 - 2;
        BOOL v22 = (long long *)(v15 - 16);
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          _OWORD *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        uint64_t v19 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
    }
    do
    {
      uint64_t v25 = *(void *)(v15 - 8);
      v15 -= 8;
      *--uint64_t v19 = v25;
    }
    while (v15 != v16);
LABEL_28:
    uint64_t v15 = *v2;
LABEL_29:
    int8x8_t v5 = v14 + 1;
    uint64_t *v2 = (uint64_t)v19;
    v2[1] = (uint64_t)(v14 + 1);
    uint64_t v26 = v2[2];
    v2[2] = v11;
    if (v15) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v15, v26 - v15);
    }
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  uint64_t v27 = v2[4];
  if (v27 != v2[5]) {
    v2[5] = v27;
  }
LABEL_33:
  uint64_t v28 = (uint64_t *)*((void *)this + 124);
  unint64_t v29 = (uint64_t *)v28[4];
  uint64_t v30 = (uint64_t *)v28[5];
  if (v29 == v30) {
    goto LABEL_65;
  }
  uint64_t v31 = (void *)v28[1];
  while (2)
  {
    uint64_t v32 = *v29;
    unint64_t v33 = v28[2];
    if ((unint64_t)v31 < v33)
    {
      if (v31) {
        void *v31 = v32;
      }
      ++v31;
      goto LABEL_36;
    }
    uint64_t v34 = ((uint64_t)v31 - *v28) >> 3;
    if ((unint64_t)(v34 + 1) >> 61) {
      goto LABEL_271;
    }
    uint64_t v35 = v33 - *v28;
    uint64_t v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
      uint64_t v36 = v34 + 1;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v37 = v36;
    }
    if (v37)
    {
      uint64_t v38 = 8 * v37;
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[3] + 16))(v28[3], 8 * v37, 8);
      unint64_t v40 = (void *)(v39 + 8 * v34);
      uint64_t v37 = v39 + v38;
      if (v39) {
        *unint64_t v40 = v32;
      }
    }
    else
    {
      unint64_t v40 = (void *)(8 * v34);
    }
    uint64_t v42 = *v28;
    uint64_t v41 = v28[1];
    uint64_t v43 = v41 - *v28;
    if (v41 == *v28)
    {
      uint8x8_t v45 = v40;
      goto LABEL_61;
    }
    unint64_t v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      uint8x8_t v45 = v40;
      do
      {
LABEL_59:
        uint64_t v51 = *(void *)(v41 - 8);
        v41 -= 8;
        *--uint8x8_t v45 = v51;
      }
      while (v41 != v42);
      goto LABEL_60;
    }
    uint8x8_t v45 = v40;
    if ((unint64_t)(v41 - (void)v40) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v46 = (v44 >> 3) + 1;
    uint64_t v47 = v40 - 2;
    double v48 = (long long *)(v41 - 16);
    uint64_t v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *uint64_t v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    uint8x8_t v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
    v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_59;
    }
LABEL_60:
    uint64_t v41 = *v28;
LABEL_61:
    uint64_t v31 = v40 + 1;
    uint64_t *v28 = (uint64_t)v45;
    v28[1] = (uint64_t)(v40 + 1);
    uint64_t v52 = v28[2];
    void v28[2] = v37;
    if (v41) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[3] + 40))(v28[3], v41, v52 - v41);
    }
LABEL_36:
    v28[1] = (uint64_t)v31;
    if (++v29 != v30) {
      continue;
    }
    break;
  }
  uint64_t v53 = v28[4];
  if (v53 != v28[5]) {
    v28[5] = v53;
  }
LABEL_65:
  int8x8_t v54 = (uint64_t *)*((void *)this + 154);
  uint8x8_t v55 = (uint64_t *)v54[4];
  uint64_t v56 = (uint64_t *)v54[5];
  if (v55 == v56) {
    goto LABEL_97;
  }
  unint64_t v57 = (void *)v54[1];
  while (2)
  {
    uint64_t v58 = *v55;
    unint64_t v59 = v54[2];
    if ((unint64_t)v57 < v59)
    {
      if (v57) {
        *unint64_t v57 = v58;
      }
      ++v57;
      goto LABEL_68;
    }
    uint64_t v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_271;
    }
    uint64_t v61 = v59 - *v54;
    uint64_t v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1)) {
      uint64_t v62 = v60 + 1;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v63 = v62;
    }
    if (v63)
    {
      uint64_t v64 = 8 * v63;
      uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54[3] + 16))(v54[3], 8 * v63, 8);
      uint64_t v66 = (void *)(v65 + 8 * v60);
      uint64_t v63 = v65 + v64;
      if (v65) {
        *uint64_t v66 = v58;
      }
    }
    else
    {
      uint64_t v66 = (void *)(8 * v60);
    }
    uint64_t v68 = *v54;
    uint64_t v67 = v54[1];
    uint64_t v69 = v67 - *v54;
    if (v67 == *v54)
    {
      unsigned __int8 v71 = v66;
      goto LABEL_93;
    }
    unint64_t v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      unsigned __int8 v71 = v66;
      do
      {
LABEL_91:
        uint64_t v77 = *(void *)(v67 - 8);
        v67 -= 8;
        *--unsigned __int8 v71 = v77;
      }
      while (v67 != v68);
      goto LABEL_92;
    }
    unsigned __int8 v71 = v66;
    if ((unint64_t)(v67 - (void)v66) < 0x20) {
      goto LABEL_91;
    }
    uint64_t v72 = (v70 >> 3) + 1;
    unsigned int v73 = v66 - 2;
    uint64_t v74 = (long long *)(v67 - 16);
    uint64_t v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v76 = *v74;
      *(v73 - 1) = *(v74 - 1);
      _OWORD *v73 = v76;
      v73 -= 2;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    unsigned __int8 v71 = &v66[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_91;
    }
LABEL_92:
    uint64_t v67 = *v54;
LABEL_93:
    unint64_t v57 = v66 + 1;
    *int8x8_t v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v66 + 1);
    uint64_t v78 = v54[2];
    v54[2] = v63;
    if (v67) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54[3] + 40))(v54[3], v67, v78 - v67);
    }
LABEL_68:
    v54[1] = (uint64_t)v57;
    if (++v55 != v56) {
      continue;
    }
    break;
  }
  uint64_t v79 = v54[4];
  if (v79 != v54[5]) {
    v54[5] = v79;
  }
LABEL_97:
  unint64_t v80 = (uint64_t *)*((void *)this + 157);
  unint64_t v81 = (uint64_t *)v80[4];
  unint64_t v82 = (uint64_t *)v80[5];
  if (v81 == v82) {
    goto LABEL_129;
  }
  unint64_t v83 = (void *)v80[1];
  while (2)
  {
    uint64_t v84 = *v81;
    unint64_t v85 = v80[2];
    if ((unint64_t)v83 < v85)
    {
      if (v83) {
        *unint64_t v83 = v84;
      }
      ++v83;
      goto LABEL_100;
    }
    uint64_t v86 = ((uint64_t)v83 - *v80) >> 3;
    if ((unint64_t)(v86 + 1) >> 61) {
      goto LABEL_271;
    }
    uint64_t v87 = v85 - *v80;
    uint64_t v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1)) {
      uint64_t v88 = v86 + 1;
    }
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v89 = v88;
    }
    if (v89)
    {
      uint64_t v90 = 8 * v89;
      uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80[3] + 16))(v80[3], 8 * v89, 8);
      uint64_t v92 = (void *)(v91 + 8 * v86);
      uint64_t v89 = v91 + v90;
      if (v91) {
        *uint64_t v92 = v84;
      }
    }
    else
    {
      uint64_t v92 = (void *)(8 * v86);
    }
    uint64_t v94 = *v80;
    uint64_t v93 = v80[1];
    uint64_t v95 = v93 - *v80;
    if (v93 == *v80)
    {
      unsigned int v97 = v92;
      goto LABEL_125;
    }
    unint64_t v96 = v95 - 8;
    if ((unint64_t)(v95 - 8) < 0x38)
    {
      unsigned int v97 = v92;
      do
      {
LABEL_123:
        uint64_t v103 = *(void *)(v93 - 8);
        v93 -= 8;
        *--unsigned int v97 = v103;
      }
      while (v93 != v94);
      goto LABEL_124;
    }
    unsigned int v97 = v92;
    if ((unint64_t)(v93 - (void)v92) < 0x20) {
      goto LABEL_123;
    }
    uint64_t v98 = (v96 >> 3) + 1;
    unint64_t v99 = v92 - 2;
    uint64_t v100 = (long long *)(v93 - 16);
    uint64_t v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v102 = *v100;
      *(v99 - 1) = *(v100 - 1);
      *unint64_t v99 = v102;
      v99 -= 2;
      v100 -= 2;
      v101 -= 4;
    }
    while (v101);
    unsigned int v97 = &v92[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
    v93 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_123;
    }
LABEL_124:
    uint64_t v93 = *v80;
LABEL_125:
    unint64_t v83 = v92 + 1;
    uint64_t *v80 = (uint64_t)v97;
    v80[1] = (uint64_t)(v92 + 1);
    uint64_t v104 = v80[2];
    v80[2] = v89;
    if (v93) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80[3] + 40))(v80[3], v93, v104 - v93);
    }
LABEL_100:
    v80[1] = (uint64_t)v83;
    if (++v81 != v82) {
      continue;
    }
    break;
  }
  uint64_t v105 = v80[4];
  if (v105 != v80[5]) {
    v80[5] = v105;
  }
LABEL_129:
  unsigned int v106 = (uint64_t *)*((void *)this + 160);
  uint64_t v107 = (uint64_t *)v106[4];
  long long v108 = (uint64_t *)v106[5];
  if (v107 == v108) {
    goto LABEL_161;
  }
  double v109 = (void *)v106[1];
  while (2)
  {
    uint64_t v110 = *v107;
    unint64_t v111 = v106[2];
    if ((unint64_t)v109 < v111)
    {
      if (v109) {
        *double v109 = v110;
      }
      ++v109;
      goto LABEL_132;
    }
    uint64_t v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61) {
      goto LABEL_271;
    }
    uint64_t v113 = v111 - *v106;
    uint64_t v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1)) {
      uint64_t v114 = v112 + 1;
    }
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v115 = v114;
    }
    if (v115)
    {
      uint64_t v116 = 8 * v115;
      uint64_t v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106[3] + 16))(v106[3], 8 * v115, 8);
      uint64_t v118 = (void *)(v117 + 8 * v112);
      uint64_t v115 = v117 + v116;
      if (v117) {
        *uint64_t v118 = v110;
      }
    }
    else
    {
      uint64_t v118 = (void *)(8 * v112);
    }
    uint64_t v120 = *v106;
    uint64_t v119 = v106[1];
    uint64_t v121 = v119 - *v106;
    if (v119 == *v106)
    {
      unsigned int v123 = v118;
      goto LABEL_157;
    }
    unint64_t v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      unsigned int v123 = v118;
      do
      {
LABEL_155:
        uint64_t v129 = *(void *)(v119 - 8);
        v119 -= 8;
        *--unsigned int v123 = v129;
      }
      while (v119 != v120);
      goto LABEL_156;
    }
    unsigned int v123 = v118;
    if ((unint64_t)(v119 - (void)v118) < 0x20) {
      goto LABEL_155;
    }
    uint64_t v124 = (v122 >> 3) + 1;
    uint64_t v125 = v118 - 2;
    uint64_t v126 = (long long *)(v119 - 16);
    uint64_t v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v128 = *v126;
      *(v125 - 1) = *(v126 - 1);
      *uint64_t v125 = v128;
      v125 -= 2;
      v126 -= 2;
      v127 -= 4;
    }
    while (v127);
    unsigned int v123 = &v118[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
    v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_155;
    }
LABEL_156:
    uint64_t v119 = *v106;
LABEL_157:
    double v109 = v118 + 1;
    uint64_t *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v118 + 1);
    uint64_t v130 = v106[2];
    v106[2] = v115;
    if (v119) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106[3] + 40))(v106[3], v119, v130 - v119);
    }
LABEL_132:
    v106[1] = (uint64_t)v109;
    if (++v107 != v108) {
      continue;
    }
    break;
  }
  uint64_t v131 = v106[4];
  if (v131 != v106[5]) {
    v106[5] = v131;
  }
LABEL_161:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 220));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 190));
  BOOL v132 = (uint64_t *)*((void *)this + 248);
  float v133 = (uint64_t *)v132[4];
  int v134 = (uint64_t *)v132[5];
  if (v133 == v134) {
    goto LABEL_193;
  }
  unsigned int v135 = (void *)v132[1];
  while (2)
  {
    uint64_t v136 = *v133;
    unint64_t v137 = v132[2];
    if ((unint64_t)v135 < v137)
    {
      if (v135) {
        *unsigned int v135 = v136;
      }
      ++v135;
      goto LABEL_164;
    }
    uint64_t v138 = ((uint64_t)v135 - *v132) >> 3;
    if ((unint64_t)(v138 + 1) >> 61) {
      goto LABEL_271;
    }
    uint64_t v139 = v137 - *v132;
    uint64_t v140 = v139 >> 2;
    if (v139 >> 2 <= (unint64_t)(v138 + 1)) {
      uint64_t v140 = v138 + 1;
    }
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v141 = v140;
    }
    if (v141)
    {
      uint64_t v142 = 8 * v141;
      uint64_t v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v132[3] + 16))(v132[3], 8 * v141, 8);
      char v144 = (void *)(v143 + 8 * v138);
      uint64_t v141 = v143 + v142;
      if (v143) {
        *char v144 = v136;
      }
    }
    else
    {
      char v144 = (void *)(8 * v138);
    }
    uint64_t v146 = *v132;
    uint64_t v145 = v132[1];
    uint64_t v147 = v145 - *v132;
    if (v145 == *v132)
    {
      long long v149 = v144;
      goto LABEL_189;
    }
    unint64_t v148 = v147 - 8;
    if ((unint64_t)(v147 - 8) < 0x38)
    {
      long long v149 = v144;
      do
      {
LABEL_187:
        uint64_t v155 = *(void *)(v145 - 8);
        v145 -= 8;
        *--long long v149 = v155;
      }
      while (v145 != v146);
      goto LABEL_188;
    }
    long long v149 = v144;
    if ((unint64_t)(v145 - (void)v144) < 0x20) {
      goto LABEL_187;
    }
    uint64_t v150 = (v148 >> 3) + 1;
    __int16 v151 = v144 - 2;
    id v152 = (long long *)(v145 - 16);
    uint64_t v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v154 = *v152;
      *(v151 - 1) = *(v152 - 1);
      _OWORD *v151 = v154;
      v151 -= 2;
      v152 -= 2;
      v153 -= 4;
    }
    while (v153);
    long long v149 = &v144[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
    v145 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
    if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_187;
    }
LABEL_188:
    uint64_t v145 = *v132;
LABEL_189:
    unsigned int v135 = v144 + 1;
    uint64_t *v132 = (uint64_t)v149;
    v132[1] = (uint64_t)(v144 + 1);
    uint64_t v156 = v132[2];
    v132[2] = v141;
    if (v145) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v132[3] + 40))(v132[3], v145, v156 - v145);
    }
LABEL_164:
    v132[1] = (uint64_t)v135;
    if (++v133 != v134) {
      continue;
    }
    break;
  }
  uint64_t v157 = v132[4];
  if (v157 != v132[5]) {
    v132[5] = v157;
  }
LABEL_193:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 251));
  uint64_t v158 = (uint64_t *)*((void *)this + 281);
  uint64_t v159 = (uint64_t *)v158[4];
  uint64_t v160 = (uint64_t *)v158[5];
  if (v159 == v160) {
    goto LABEL_225;
  }
  uint64_t v161 = (void *)v158[1];
  while (2)
  {
    uint64_t v162 = *v159;
    unint64_t v163 = v158[2];
    if ((unint64_t)v161 < v163)
    {
      if (v161) {
        *uint64_t v161 = v162;
      }
      ++v161;
      goto LABEL_196;
    }
    uint64_t v164 = ((uint64_t)v161 - *v158) >> 3;
    if ((unint64_t)(v164 + 1) >> 61) {
      goto LABEL_271;
    }
    uint64_t v165 = v163 - *v158;
    uint64_t v166 = v165 >> 2;
    if (v165 >> 2 <= (unint64_t)(v164 + 1)) {
      uint64_t v166 = v164 + 1;
    }
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v167 = v166;
    }
    if (v167)
    {
      uint64_t v168 = 8 * v167;
      uint64_t v169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v158[3] + 16))(v158[3], 8 * v167, 8);
      int v170 = (void *)(v169 + 8 * v164);
      uint64_t v167 = v169 + v168;
      if (v169) {
        *int v170 = v162;
      }
    }
    else
    {
      int v170 = (void *)(8 * v164);
    }
    uint64_t v172 = *v158;
    uint64_t v171 = v158[1];
    uint64_t v173 = v171 - *v158;
    if (v171 == *v158)
    {
      unsigned int v175 = v170;
      goto LABEL_221;
    }
    unint64_t v174 = v173 - 8;
    if ((unint64_t)(v173 - 8) < 0x38)
    {
      unsigned int v175 = v170;
      do
      {
LABEL_219:
        uint64_t v181 = *(void *)(v171 - 8);
        v171 -= 8;
        *--unsigned int v175 = v181;
      }
      while (v171 != v172);
      goto LABEL_220;
    }
    unsigned int v175 = v170;
    if ((unint64_t)(v171 - (void)v170) < 0x20) {
      goto LABEL_219;
    }
    uint64_t v176 = (v174 >> 3) + 1;
    double v177 = v170 - 2;
    double v178 = (long long *)(v171 - 16);
    uint64_t v179 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v180 = *v178;
      *(v177 - 1) = *(v178 - 1);
      *double v177 = v180;
      v177 -= 2;
      v178 -= 2;
      v179 -= 4;
    }
    while (v179);
    unsigned int v175 = &v170[-(v176 & 0x3FFFFFFFFFFFFFFCLL)];
    v171 -= 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_219;
    }
LABEL_220:
    uint64_t v171 = *v158;
LABEL_221:
    uint64_t v161 = v170 + 1;
    *uint64_t v158 = (uint64_t)v175;
    v158[1] = (uint64_t)(v170 + 1);
    uint64_t v182 = v158[2];
    v158[2] = v167;
    if (v171) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v158[3] + 40))(v158[3], v171, v182 - v171);
    }
LABEL_196:
    v158[1] = (uint64_t)v161;
    if (++v159 != v160) {
      continue;
    }
    break;
  }
  uint64_t v183 = v158[4];
  if (v183 != v158[5]) {
    v158[5] = v183;
  }
LABEL_225:
  int64x2_t v184 = (uint64_t *)*((void *)this + 311);
  int64x2_t v185 = (uint64_t *)v184[4];
  uint64_t v186 = (uint64_t *)v184[5];
  if (v185 == v186) {
    goto LABEL_257;
  }
  uint64_t v187 = (void *)v184[1];
  while (2)
  {
    uint64_t v188 = *v185;
    unint64_t v189 = v184[2];
    if ((unint64_t)v187 < v189)
    {
      if (v187) {
        *uint64_t v187 = v188;
      }
      ++v187;
      goto LABEL_228;
    }
    uint64_t v190 = ((uint64_t)v187 - *v184) >> 3;
    if ((unint64_t)(v190 + 1) >> 61) {
      goto LABEL_271;
    }
    uint64_t v191 = v189 - *v184;
    uint64_t v192 = v191 >> 2;
    if (v191 >> 2 <= (unint64_t)(v190 + 1)) {
      uint64_t v192 = v190 + 1;
    }
    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v193 = v192;
    }
    if (v193)
    {
      uint64_t v194 = 8 * v193;
      uint64_t v195 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v184[3] + 16))(v184[3], 8 * v193, 8);
      unsigned int v196 = (void *)(v195 + 8 * v190);
      uint64_t v193 = v195 + v194;
      if (v195) {
        *unsigned int v196 = v188;
      }
    }
    else
    {
      unsigned int v196 = (void *)(8 * v190);
    }
    uint64_t v198 = *v184;
    uint64_t v197 = v184[1];
    uint64_t v199 = v197 - *v184;
    if (v197 == *v184)
    {
      double v201 = v196;
      goto LABEL_253;
    }
    unint64_t v200 = v199 - 8;
    if ((unint64_t)(v199 - 8) < 0x38)
    {
      double v201 = v196;
      do
      {
LABEL_251:
        uint64_t v207 = *(void *)(v197 - 8);
        v197 -= 8;
        *--double v201 = v207;
      }
      while (v197 != v198);
      goto LABEL_252;
    }
    double v201 = v196;
    if ((unint64_t)(v197 - (void)v196) < 0x20) {
      goto LABEL_251;
    }
    uint64_t v202 = (v200 >> 3) + 1;
    int v203 = v196 - 2;
    unint64_t v204 = (long long *)(v197 - 16);
    uint64_t v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v206 = *v204;
      *(v203 - 1) = *(v204 - 1);
      *int v203 = v206;
      v203 -= 2;
      v204 -= 2;
      v205 -= 4;
    }
    while (v205);
    double v201 = &v196[-(v202 & 0x3FFFFFFFFFFFFFFCLL)];
    v197 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
    if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_251;
    }
LABEL_252:
    uint64_t v197 = *v184;
LABEL_253:
    uint64_t v187 = v196 + 1;
    uint64_t *v184 = (uint64_t)v201;
    v184[1] = (uint64_t)(v196 + 1);
    uint64_t v208 = v184[2];
    v184[2] = v193;
    if (v197) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v184[3] + 40))(v184[3], v197, v208 - v197);
    }
LABEL_228:
    v184[1] = (uint64_t)v187;
    if (++v185 != v186) {
      continue;
    }
    break;
  }
  uint64_t v209 = v184[4];
  if (v209 != v184[5]) {
    v184[5] = v209;
  }
LABEL_257:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 341));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 401));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 431));
  uint64_t v210 = *((void *)this + 468);
  uint64_t v211 = *((void *)this + 467);
  if (v210 != v211)
  {
    uint64_t v212 = *((void *)this + 468);
    do
    {
      int v214 = *(void **)(v212 - 24);
      v212 -= 24;
      v213 = v214;
      if (v214)
      {
        *(void *)(v210 - 16) = v213;
        operator delete(v213);
      }
      uint64_t v210 = v212;
    }
    while (v212 != v211);
  }
  *((void *)this + 468) = v211;
  *((void *)this + 465) = *((void *)this + 464);
  uint64_t v215 = (void *)*((void *)this + 474);
  if (v215)
  {
    do
    {
      if (v215[1])
      {
        unint64_t v217 = 0;
        uint64_t v218 = v215 + 2;
        uint64_t v219 = v215 + 2;
        uint64_t v220 = (void (***)(void))(v215 + 2);
        do
        {
          uint64_t v221 = (void (**)(void *))*v220;
          v220 += 15;
          (*v221)(v219);
          ++v217;
          v218 += 15;
          uint64_t v219 = v220;
        }
        while (v217 < v215[1]);
      }
      v215[1] = 0;
      uint64_t v215 = (void *)*v215;
    }
    while (v215);
    uint64_t v216 = *((void *)this + 474);
  }
  else
  {
    uint64_t v216 = 0;
  }
  *((void *)this + 475) = v216;
}

uint64_t md::VenueRenderLayer::_venuesCommandBuffer(md::VenueRenderLayer *this, int8x8_t *a2)
{
  int8x8_t v2 = a2[1];
  if (!*(void *)&v2) {
    goto LABEL_24;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v2 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v4 = 0x8BD499FBD96FBB9ELL % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  int8x8_t v5 = *(void **)(*(void *)a2 + 8 * v4);
  if (!v5) {
    goto LABEL_24;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_24;
  }
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == 0x8BD499FBD96FBB9ELL)
      {
        if (v6[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_22;
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_24;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_24;
    }
  }
  if (v6[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v10 = v6[5];
  if (*(void *)(v10 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_24:
    uint64_t v11 = 0;
    goto LABEL_25;
  }
  uint64_t v11 = *(void *)(v10 + 32);
LABEL_25:
  if (*(float *)(v11 + 16) <= 0.01)
  {
    if (*(unsigned char *)(v11 + 3)) {
      uint64_t v12 = (unsigned __int8 *)this + 484;
    }
    else {
      uint64_t v12 = (unsigned __int8 *)this + 482;
    }
  }
  else
  {
    uint64_t v12 = (unsigned __int8 *)this + 482;
  }
  if (!*((unsigned char *)this + 393)) {
    uint64_t v12 = (unsigned __int8 *)this + 480;
  }
  uint64_t v13 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
  uint64_t v14 = v13[3];
  uint64_t v15 = v13[4];
  uint64_t v16 = v15 - v14;
  if (v15 == v14) {
    return 0;
  }
  uint64_t v17 = 0;
  unint64_t v18 = v16 >> 3;
  while (1)
  {
    uint64_t v19 = *(unsigned __int8 **)(v14 + 8 * v17);
    if (*v19 == *v12)
    {
      unint64_t v20 = *((void *)v19 + 1);
      uint64_t v21 = v13[15];
      if (v20 < (v13[16] - v21) >> 3) {
        break;
      }
    }
    if (++v17 >= v18) {
      return 0;
    }
  }
  uint64_t v22 = *(void *)(v21 + 8 * v20);
  if (!v22) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v22 + 24) + 8 * v12[1]);
  }
}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2;
  if (v2 <= 4 && v2 != 2) {
    md::VenueRenderLayer::_updateStyles(**(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  }
}

uint64_t *md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(uint64_t a1)
{
  __int16 v89 = 6;
  char v90 = 4;
  uint64_t v2 = *(void *)(a1 + 336);
  uint64_t v3 = *(void *)(a1 + 344);
  if (v2 != v3)
  {
    while (1)
    {
      BOOL v4 = *(unsigned char *)v2 == 6 && *(unsigned char *)(v2 + 1) == 0;
      if (v4 && *(unsigned char *)(v2 + 2) == 4) {
        break;
      }
      v2 += 16;
      if (v2 == v3) {
        goto LABEL_13;
      }
    }
  }
  if (v2 == v3) {
LABEL_13:
  }
    operator new();
  uint64_t v6 = *(uint64_t **)(v2 + 8);
  if (!*((unsigned char *)v6 + 12))
  {
    uint64_t v8 = *v6;
    *((unsigned char *)v6 + 12) = 1;
    if (*(void *)a1)
    {
      uint64_t v9 = (uint64_t *)md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 6, 0);
      uint64_t v10 = *v9;
      if (*v9)
      {
        uint64_t v11 = (std::__shared_weak_count *)v9[1];
        v86[0] = *v9;
        v86[1] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v87, v10, (uint64_t)v11);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        if (v88)
        {
          float v12 = *(float *)(a1 + 88);
          if ((int)*(float *)(a1 + 104) >= 0x17) {
            unsigned int v13 = 23;
          }
          else {
            unsigned int v13 = (int)*(float *)(a1 + 104);
          }
          *(_OWORD *)(v8 + 8) = 0u;
          *(void *)(v8 + 56) = 0;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_OWORD *)(v8 + 40) = 0u;
          unsigned __int8 v91 = 1;
          uint64_t v14 = *(void *)(v87[0] + 24);
          unsigned int v15 = *(unsigned __int8 *)(v14 + 12);
          if (v15 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v16 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v14, 0xD4u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v14, 0xD4u, v13, 1u, &v92);
            int v17 = (LOBYTE(v86[0]) | v92) != 0;
          }
          else
          {
            int v16 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0xD4u, v13, v15, &v91);
            int v17 = v91;
          }
          if (v17) {
            char v18 = v16;
          }
          else {
            char v18 = 1;
          }
          *(unsigned char *)(v8 + 45) = v18;
          uint64_t v19 = *(void *)(v87[0] + 24);
          unsigned int v20 = *(unsigned __int8 *)(v19 + 12);
          if (v20 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v21 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v19, 0x176u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v19, 0x176u, v13, 1u, &v92);
          }
          else
          {
            int v21 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x176u, v13, v20, 0);
          }
          *(unsigned char *)(v8 + 46) = v21;
          uint64_t v22 = *(void *)(v87[0] + 24);
          unsigned int v23 = *(unsigned __int8 *)(v22 + 12);
          if (v23 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v24 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v22, 0x153u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v22, 0x153u, v13, 1u, &v92);
          }
          else
          {
            int v24 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x153u, v13, v23, 0);
          }
          *(unsigned char *)(v8 + 47) = v24;
          uint64_t v25 = *(void *)(v87[0] + 24);
          unsigned int v26 = *(unsigned __int8 *)(v25 + 12);
          if (v26 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0x16Du, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0x16Du, v13, 1u, &v92);
          }
          else
          {
            int v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x16Du, v13, v26, 0);
          }
          *(unsigned char *)(v8 + 48) = v27;
          uint64_t v28 = *(void *)(v87[0] + 24);
          unsigned int v29 = *(unsigned __int8 *)(v28 + 12);
          if (v29 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v30 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v28, 0x16Fu, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v28, 0x16Fu, v13, 1u, &v92);
          }
          else
          {
            int v30 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x16Fu, v13, v29, 0);
          }
          *(unsigned char *)(v8 + 49) = v30;
          uint64_t v31 = *(void *)(v87[0] + 24);
          unsigned int v32 = *(unsigned __int8 *)(v31 + 12);
          if (v32 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v33 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v31, 0x170u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v31, 0x170u, v13, 1u, &v92);
          }
          else
          {
            int v33 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x170u, v13, v32, 0);
          }
          *(unsigned char *)(v8 + 50) = v33;
          uint64_t v34 = *(void *)(v87[0] + 24);
          unsigned int v35 = *(unsigned __int8 *)(v34 + 12);
          if (v35 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v36 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v34, 0x177u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v34, 0x177u, v13, 1u, &v92);
          }
          else
          {
            int v36 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x177u, v13, v35, 0);
          }
          *(unsigned char *)(v8 + 51) = v36;
          uint64_t v37 = *(void *)(v87[0] + 24);
          unsigned int v38 = *(unsigned __int8 *)(v37 + 12);
          if (v38 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v39 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v37, 0x178u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v37, 0x178u, v13, 1u, &v92);
          }
          else
          {
            int v39 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x178u, v13, v38, 0);
          }
          *(unsigned char *)(v8 + 52) = v39;
          uint64_t v40 = *(void *)(v87[0] + 24);
          unsigned int v41 = *(unsigned __int8 *)(v40 + 12);
          if (v41 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v42 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v40, 0x179u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v40, 0x179u, v13, 1u, &v92);
          }
          else
          {
            int v42 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x179u, v13, v41, 0);
          }
          *(unsigned char *)(v8 + 53) = v42;
          uint64_t v43 = *(void *)(v87[0] + 24);
          unsigned int v44 = *(unsigned __int8 *)(v43 + 12);
          if (v44 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v45 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v43, 0x199u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v43, 0x199u, v13, 1u, &v92);
          }
          else
          {
            int v45 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x199u, v13, v44, 0);
          }
          *(_DWORD *)(v8 + 56) = v45;
          uint64_t v46 = *(void *)(v87[0] + 24);
          unsigned int v47 = *(unsigned __int8 *)(v46 + 12);
          if (v47 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v48 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v46, 0x19Au, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v46, 0x19Au, v13, 1u, &v92);
          }
          else
          {
            int v48 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x19Au, v13, v47, 0);
          }
          *(_DWORD *)(v8 + 60) = v48;
          uint64_t v49 = *(void *)(v87[0] + 24);
          unsigned int v50 = *(unsigned __int8 *)(v49 + 12);
          if (v50 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v51 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v49, 0x19Bu, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v49, 0x19Bu, v13, 1u, &v92);
          }
          else
          {
            int v51 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x19Bu, v13, v50, 0);
          }
          *(unsigned char *)(v8 + 54) = v51;
          uint64_t v52 = *(void *)(v87[0] + 24);
          unsigned int v53 = *(unsigned __int8 *)(v52 + 12);
          if (v53 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v54 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x19Cu, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x19Cu, v13, 1u, &v92);
          }
          else
          {
            int v54 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x19Cu, v13, v53, 0);
          }
          *(unsigned char *)(v8 + 55) = v54;
          uint64_t v55 = *(void *)(v87[0] + 24);
          unsigned int v56 = *(unsigned __int8 *)(v55 + 12);
          if (v56 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            float v57 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v55, 0x11Cu, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v55, 0x11Cu, v13, 1u, &v92);
          }
          else
          {
            float v57 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v87[0] + 24), 0x11Cu, v13, v56, 0);
          }
          *(float *)(v8 + 32) = v57 * v12;
          uint64_t v58 = *(void *)(v87[0] + 24);
          unsigned int v59 = *(unsigned __int8 *)(v58 + 12);
          if (v59 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v60 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v58, 0x192u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v58, 0x192u, v13, 1u, &v92);
          }
          else
          {
            int v60 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v87[0] + 24), 0x192u, v13, v59, 0);
          }
          *(_DWORD *)(v8 + 8) = v60;
          uint64_t v61 = *(void *)(v87[0] + 24);
          unsigned int v62 = *(unsigned __int8 *)(v61 + 12);
          if (v62 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v63 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v61, 0x70u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v61, 0x70u, v13, 1u, &v92);
          }
          else
          {
            int v63 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x70u, v13, v62, 0);
          }
          *(_DWORD *)(v8 + 12) = v63;
          uint64_t v64 = *(void *)(v87[0] + 24);
          unsigned int v65 = *(unsigned __int8 *)(v64 + 12);
          if (v65 == 2)
          {
            if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v64, 0xE8u, v13, 0) & 1) != 0
              || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v64, 0xE8u, v13, 1u) & 1) != 0)
            {
              LOBYTE(v86[0]) = 1;
              unsigned __int8 v92 = 1;
              int v66 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v64, 0xE8u, v13, 0, v86);
              uint64_t v67 = v64;
              unsigned int v68 = 232;
            }
            else
            {
              LOBYTE(v86[0]) = 1;
              unsigned __int8 v92 = 1;
              int v66 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v64, 0x70u, v13, 0, v86);
              uint64_t v67 = v64;
              unsigned int v68 = 112;
            }
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v67, v68, v13, 1u, &v92);
          }
          else
          {
            if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v64, 0xE8u, v13, *(unsigned __int8 *)(v64 + 12)))
            {
              uint64_t v69 = v64;
              unsigned int v70 = 232;
            }
            else
            {
              uint64_t v69 = v64;
              unsigned int v70 = 112;
            }
            int v66 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v69, v70, v13, v65, 0);
          }
          *(_DWORD *)(v8 + 16) = v66;
          uint64_t v71 = *(void *)(v87[0] + 24);
          int v72 = *(unsigned __int8 *)(v71 + 12);
          if (v72 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v73 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v71, 0x171u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v71, 0x171u, v13, 1, &v92);
          }
          else
          {
            int v73 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>(*(unsigned __int16 **)(v87[0] + 24), 0x171u, v13, v72, 0);
          }
          *(_DWORD *)(v8 + 20) = v73;
          uint64_t v74 = *(void *)(v87[0] + 24);
          unsigned int v75 = *(unsigned __int8 *)(v74 + 12);
          if (v75 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v76 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v74, 0x16Cu, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v74, 0x16Cu, v13, 1u, &v92);
          }
          else
          {
            int v76 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x16Cu, v13, v75, 0);
          }
          *(_DWORD *)(v8 + 24) = v76;
          uint64_t v77 = *(void *)(v87[0] + 24);
          unsigned int v78 = *(unsigned __int8 *)(v77 + 12);
          if (v78 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v77, 0x174u, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v77, 0x174u, v13, 1u, &v92);
          }
          else
          {
            int v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v87[0] + 24), 0x174u, v13, v78, 0);
          }
          *(_DWORD *)(v8 + 28) = v79;
          uint64_t v80 = *(void *)(v87[0] + 24);
          unsigned int v81 = *(unsigned __int8 *)(v80 + 12);
          if (v81 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v82 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v80, 0x1DFu, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v80, 0x1DFu, v13, 1u, &v92);
          }
          else
          {
            int v82 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v87[0] + 24), 0x1DFu, v13, v81, 0);
          }
          *(_DWORD *)(v8 + 40) = v82;
          uint64_t v83 = *(void *)(v87[0] + 24);
          unsigned int v84 = *(unsigned __int8 *)(v83 + 12);
          if (v84 == 2)
          {
            LOBYTE(v86[0]) = 1;
            unsigned __int8 v92 = 1;
            int v85 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v83, 0x1DBu, v13, 0, v86);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v83, 0x1DBu, v13, 1u, &v92);
          }
          else
          {
            int v85 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v87[0] + 24), 0x1DBu, v13, v84, 0);
          }
          *(_DWORD *)(v8 + 36) = v85;
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v87);
      }
    }
  }
  return v6;
}

void sub_1A1B13AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1B13B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v3 = 256;
  }
  else {
    unsigned int v3 = 0;
  }
  __int16 v17 = v3 | 1;
  char v18 = 3;
  uint64_t v4 = *(void *)(a1 + 336);
  uint64_t v5 = *(void *)(a1 + 344);
  if (v4 != v5)
  {
    unsigned int v6 = v3 >> 8;
    while (1)
    {
      BOOL v7 = *(unsigned char *)v4 == 1 && *(unsigned __int8 *)(v4 + 1) == v6;
      if (v7 && *(unsigned char *)(v4 + 2) == 3) {
        break;
      }
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_17;
      }
    }
  }
  if (v4 == v5) {
LABEL_17:
  }
    operator new();
  uint64_t v9 = *(void *)(v4 + 8);
  if (!*(unsigned char *)(v9 + 12))
  {
    uint64_t v11 = *(void *)v9;
    *(unsigned char *)(v9 + 12) = 1;
    if (*(void *)a1)
    {
      float v12 = (uint64_t *)md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 1, a2);
      uint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = (std::__shared_weak_count *)v12[1];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v15, v13, (uint64_t)v14);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        if (v16) {
          md::LabelIconStyleGroup::update(v11, (uint64_t)v15, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 93), *(float *)(a1 + 104), *(float *)(a1 + 88));
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v15);
      }
    }
  }
  return v9;
}

void sub_1A1B13DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1B13DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

int *md::LabelIconStyleGroup::update(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, float a5, float a6)
{
  if ((int)a5 >= 0x17) {
    unsigned int v11 = 23;
  }
  else {
    unsigned int v11 = (int)a5;
  }
  *(_OWORD *)(a1 + 8) = 0u;
  float v12 = (float *)(a1 + 8);
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(unsigned char *)(a1 + 100)) {
    *(unsigned char *)(a1 + 100) = 0;
  }
  uint64_t v13 = *(void *)(*(void *)a2 + 24);
  unsigned int v14 = *(unsigned __int8 *)(v13 + 12);
  if (v14 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v15 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v13, 0xAAu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v13, 0xAAu, v11, 1u, &v108);
  }
  else
  {
    int v15 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xAAu, v11, v14, 0);
  }
  *(unsigned char *)(a1 + 88) = v15;
  uint64_t v16 = *(void *)(*(void *)a2 + 24);
  unsigned int v17 = *(unsigned __int8 *)(v16 + 12);
  if (v17 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v18 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v16, 0xBAu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v16, 0xBAu, v11, 1u, &v108);
  }
  else
  {
    int v18 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xBAu, v11, v17, 0);
  }
  *(_DWORD *)(a1 + 64) = v18;
  uint64_t v19 = *(void *)(*(void *)a2 + 24);
  unsigned int v20 = *(unsigned __int8 *)(v19 + 12);
  if (v20 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v21 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v19, 0xBEu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v19, 0xBEu, v11, 1u, &v108);
  }
  else
  {
    int v21 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xBEu, v11, v20, 0);
  }
  *(_DWORD *)(a1 + 68) = v21;
  uint64_t v22 = *(void *)(*(void *)a2 + 24);
  unsigned int v23 = *(unsigned __int8 *)(v22 + 12);
  if (v23 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v24 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v22, 0xC0u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v22, 0xC0u, v11, 1u, &v108);
  }
  else
  {
    int v24 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xC0u, v11, v23, 0);
  }
  *(unsigned char *)(a1 + 93) = v24;
  uint64_t v25 = *(void *)(*(void *)a2 + 24);
  unsigned int v26 = *(unsigned __int8 *)(v25 + 12);
  if (v26 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0xBDu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0xBDu, v11, 1u, &v108);
  }
  else
  {
    int v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xBDu, v11, v26, 0);
  }
  *(unsigned char *)(a1 + 92) = v27;
  uint64_t v28 = *(void *)(*(void *)a2 + 24);
  unsigned int v29 = *(unsigned __int8 *)(v28 + 12);
  if (v29 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v30 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v28, 0xD4u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v28, 0xD4u, v11, 1u, &v108);
  }
  else
  {
    int v30 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xD4u, v11, v29, 0);
  }
  *(unsigned char *)(a1 + 89) = v30;
  float v31 = fminf((float)v11, 23.0);
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v106, *(void *)(*(void *)a2 + 24), 0xD3u, 1u, v31);
  float32x4_t v105 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  int16x8_t v32 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v106)), v105));
  *(int16x4_t *)v32.i8 = vmovn_s32((int32x4_t)v32);
  *(_DWORD *)(a1 + 72) = vmovn_s16(v32).u32[0];
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v106, *(void *)(*(void *)a2 + 24), 0xACu, 1u, v31);
  int16x8_t v33 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v106)), v105));
  *(int16x4_t *)v33.i8 = vmovn_s32((int32x4_t)v33);
  *(_DWORD *)(a1 + 76) = vmovn_s16(v33).u32[0];
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v106, *(void *)(*(void *)a2 + 24), 0x5Du, 1u, v31);
  int16x8_t v34 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v106)), v105));
  *(int16x4_t *)v34.i8 = vmovn_s32((int32x4_t)v34);
  *(_DWORD *)(a1 + 80) = vmovn_s16(v34).u32[0];
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v106, *(void *)(*(void *)a2 + 24), 0x193u, 1u, v31);
  int16x8_t v35 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v106)), v105));
  *(int16x4_t *)v35.i8 = vmovn_s32((int32x4_t)v35);
  *(_DWORD *)(a1 + 84) = vmovn_s16(v35).u32[0];
  uint64_t v36 = *(void *)(*(void *)a2 + 24);
  unsigned int v37 = *(unsigned __int8 *)(v36 + 12);
  if (v37 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    float v38 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v36, 0x5Eu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v36, 0x5Eu, v11, 1u, &v108);
  }
  else
  {
    float v38 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x5Eu, v11, v37, 0);
  }
  *(float *)(a1 + 44) = v38 * a6;
  uint64_t v39 = *(void *)(*(void *)a2 + 24);
  unsigned int v40 = *(unsigned __int8 *)(v39 + 12);
  if (v40 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    float v41 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39, 0x61u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39, 0x61u, v11, 1u, &v108);
  }
  else
  {
    float v41 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x61u, v11, v40, 0);
  }
  *(float *)(a1 + 48) = v41 * a6;
  uint64_t v42 = *(void *)(*(void *)a2 + 24);
  unsigned int v43 = *(unsigned __int8 *)(v42 + 12);
  if (v43 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    float v44 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v42, 0x194u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v42, 0x194u, v11, 1u, &v108);
  }
  else
  {
    float v44 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x194u, v11, v43, 0);
  }
  *(float *)(a1 + 52) = v44 * a6;
  uint64_t v45 = *(void *)(*(void *)a2 + 24);
  unsigned int v46 = *(unsigned __int8 *)(v45 + 12);
  if (v46 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0xD1u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0xD1u, v11, 1u, &v108);
  }
  else
  {
    int v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xD1u, v11, v46, 0);
  }
  *(unsigned char *)(a1 + 90) = v47;
  uint64_t v48 = *(void *)(*(void *)a2 + 24);
  unsigned int v49 = *(unsigned __int8 *)(v48 + 12);
  if (v49 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v48, 0xCFu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v48, 0xCFu, v11, 1u, &v108);
  }
  else
  {
    int v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xCFu, v11, v49, 0);
  }
  *(unsigned char *)(a1 + 91) = v50;
  uint64_t v51 = *(void *)(*(void *)a2 + 24);
  unsigned int v52 = *(unsigned __int8 *)(v51 + 12);
  if (v52 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v51, 0xDAu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v51, 0xDAu, v11, 1u, &v108);
  }
  else
  {
    int v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0xDAu, v11, v52, 0);
  }
  *(_DWORD *)(a1 + 16) = v53;
  uint64_t v54 = *(void *)(*(void *)a2 + 24);
  unsigned int v55 = *(unsigned __int8 *)(v54 + 12);
  if (v55 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v54, 0xBBu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v54, 0xBBu, v11, 1u, &v108);
  }
  else
  {
    int v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0xBBu, v11, v55, 0);
  }
  *(_DWORD *)(a1 + 20) = v56;
  uint64_t v57 = *(void *)(*(void *)a2 + 24);
  unsigned int v58 = *(unsigned __int8 *)(v57 + 12);
  if (v58 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v59 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v57, 0x112u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v57, 0x112u, v11, 1u, &v108);
  }
  else
  {
    int v59 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x112u, v11, v58, 0);
  }
  *(_DWORD *)(a1 + 28) = v59;
  uint64_t v60 = *(void *)(*(void *)a2 + 24);
  unsigned int v61 = *(unsigned __int8 *)(v60 + 12);
  if (v61 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v62 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v60, 0xA6u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v60, 0xA6u, v11, 1u, &v108);
  }
  else
  {
    int v62 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0xA6u, v11, v61, 0);
  }
  *(_DWORD *)(a1 + 24) = v62;
  uint64_t v63 = *(void *)(*(void *)a2 + 24);
  int v64 = *(unsigned __int8 *)(v63 + 12);
  if (v64 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    char v65 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v63, 0x182u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v63, 0x182u, v11, 1, &v108);
  }
  else
  {
    char v65 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)a2 + 24), 0x182u, v11, v64, 0);
  }
  *(unsigned char *)(a1 + 96) = v65;
  uint64_t v66 = *(void *)(*(void *)a2 + 24);
  unsigned int v67 = *(unsigned __int8 *)(v66 + 12);
  if (v67 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x1B1u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x1B1u, v11, 1u, &v108);
  }
  else
  {
    int v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x1B1u, v11, v67, 0);
  }
  *(_DWORD *)(a1 + 32) = v68;
  uint64_t v69 = *(void *)(*(void *)a2 + 24);
  int v70 = *(unsigned __int8 *)(v69 + 12);
  if (v70 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    char v71 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v69, 0x1DAu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v69, 0x1DAu, v11, 1, &v108);
  }
  else
  {
    char v71 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>(*(unsigned __int16 **)(*(void *)a2 + 24), 0x1DAu, v11, v70, 0);
  }
  *(unsigned char *)(a1 + 97) = v71;
  uint64_t v72 = *(void *)(*(void *)a2 + 24);
  unsigned int v73 = *(unsigned __int8 *)(v72 + 12);
  if (v73 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0x1DFu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0x1DFu, v11, 1u, &v108);
  }
  else
  {
    int v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x1DFu, v11, v73, 0);
  }
  *(_DWORD *)(a1 + 40) = v74;
  uint64_t v75 = *(void *)(*(void *)a2 + 24);
  unsigned int v76 = *(unsigned __int8 *)(v75 + 12);
  if (v76 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0x1DBu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0x1DBu, v11, 1u, &v108);
  }
  else
  {
    int v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x1DBu, v11, v76, 0);
  }
  *(_DWORD *)(a1 + 36) = v77;
  unsigned int v78 = a4;
  uint64_t v79 = *(void *)(*(void *)a2 + 24);
  unsigned int v80 = *(unsigned __int8 *)(v79 + 12);
  if (v80 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    float v81 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x111u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x111u, v11, 1u, &v108);
  }
  else
  {
    float v81 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x111u, v11, v80, 0);
  }
  uint64_t v82 = a3 + 20 * v78;
  float v84 = *(float *)(v82 + 12);
  uint64_t v83 = (float *)(v82 + 12);
  *float v12 = v81 * (float)(a6 * v84);
  char v107 = 1;
  uint64_t v85 = *(void *)(*(void *)a2 + 24);
  unsigned int v86 = *(unsigned __int8 *)(v85 + 12);
  if (v86 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    float v87 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x172u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x172u, v11, 1u, &v108);
    if (v106.u8[0] | v108)
    {
LABEL_71:
      float v88 = fminf((float)(v87 * a6) * *v83, *v12);
      goto LABEL_74;
    }
  }
  else
  {
    float v87 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x172u, v11, v86, &v107);
    if (v107) {
      goto LABEL_71;
    }
  }
  float v88 = *v12;
LABEL_74:
  *(float *)(a1 + 12) = v88;
  uint64_t v89 = *(void *)(*(void *)a2 + 24);
  int v90 = *(unsigned __int8 *)(v89 + 12);
  if (v90 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    char v91 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v89, 0x173u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v89, 0x173u, v11, 1, &v108);
  }
  else
  {
    char v91 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)a2 + 24), 0x173u, v11, v90, 0);
  }
  *(unsigned char *)(a1 + 95) = v91;
  uint64_t v92 = *(void *)(*(void *)a2 + 24);
  unsigned int v93 = *(unsigned __int8 *)(v92 + 12);
  if (v93 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0x113u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0x113u, v11, 1u, &v108);
  }
  else
  {
    int v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0x113u, v11, v93, 0);
  }
  *(unsigned char *)(a1 + 94) = v94;
  uint64_t v95 = *(void *)(*(void *)a2 + 24);
  unsigned int v96 = *(unsigned __int8 *)(v95 + 12);
  if (v96 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v95, 0x16Cu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v95, 0x16Cu, v11, 1u, &v108);
  }
  else
  {
    int v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0x16Cu, v11, v96, 0);
  }
  *(_DWORD *)(a1 + 56) = v97;
  uint64_t v98 = *(void *)(*(void *)a2 + 24);
  unsigned int v99 = *(unsigned __int8 *)(v98 + 12);
  if (v99 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v100 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98, 0x174u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98, 0x174u, v11, 1u, &v108);
  }
  else
  {
    int v100 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0x174u, v11, v99, 0);
  }
  *(_DWORD *)(a1 + 60) = v100;
  char v107 = 1;
  uint64_t v101 = *(void *)(*(void *)a2 + 24);
  unsigned int v102 = *(unsigned __int8 *)(v101 + 12);
  if (v102 == 2)
  {
    v106.i8[0] = 1;
    unsigned __int8 v108 = 1;
    int v103 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x162u, v11, 0, &v106);
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x162u, v11, 1u, &v108);
    if (!(v106.u8[0] | v108)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x162u, v11, v102, &v107);
    int v103 = *result;
    if (!v107) {
      return result;
    }
  }
  if (!*(unsigned char *)(a1 + 100)) {
    *(unsigned char *)(a1 + 100) = 1;
  }
  *(unsigned char *)(a1 + 101) = v103;
  return result;
}

uint64_t *md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(uint64_t a1)
{
  __int16 v97 = 0;
  char v98 = 1;
  uint64_t v2 = *(void *)(a1 + 336);
  uint64_t v3 = *(void *)(a1 + 344);
  if (v2 != v3)
  {
    while (1)
    {
      BOOL v4 = !*(unsigned char *)v2 && *(unsigned char *)(v2 + 1) == 0;
      if (v4 && *(unsigned char *)(v2 + 2) == 1) {
        break;
      }
      v2 += 16;
      if (v2 == v3) {
        goto LABEL_13;
      }
    }
  }
  if (v2 == v3) {
LABEL_13:
  }
    operator new();
  unsigned int v6 = *(uint64_t **)(v2 + 8);
  if (!*((unsigned char *)v6 + 12))
  {
    uint64_t v8 = *v6;
    *((unsigned char *)v6 + 12) = 1;
    if (*(void *)a1)
    {
      uint64_t v9 = (uint64_t *)md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 0, 0);
      uint64_t v10 = *v9;
      if (*v9)
      {
        unsigned int v11 = (std::__shared_weak_count *)v9[1];
        __p.__r_.__value_.__r.__words[0] = *v9;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v95, v10, (uint64_t)v11);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        if (!v96)
        {
LABEL_155:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v95);
          return v6;
        }
        uint64_t v12 = *(void *)(a1 + 16);
        float v13 = *(float *)(a1 + 88);
        unsigned int v14 = *(unsigned __int8 *)(a1 + 93);
        if ((int)*(float *)(a1 + 104) >= 0x17) {
          unsigned int v15 = 23;
        }
        else {
          unsigned int v15 = (int)*(float *)(a1 + 104);
        }
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 52) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 40) = 0u;
        if (*(char *)(v8 + 95) < 0)
        {
          **(unsigned char **)(v8 + 72) = 0;
          *(void *)(v8 + 80) = 0;
        }
        else
        {
          *(unsigned char *)(v8 + 72) = 0;
          *(unsigned char *)(v8 + 95) = 0;
        }
        uint64_t v16 = *(void *)(v95[0] + 24);
        unsigned int v17 = *(unsigned __int8 *)(v16 + 12);
        if (v17 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          unsigned __int8 v101 = 1;
          int v18 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v16, 0x78u, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v16, 0x78u, 1u, &v101);
          int v19 = *v18;
        }
        else
        {
          int v19 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v95[0] + 24), 0x78u, v17, 0);
        }
        *(_DWORD *)(v8 + 16) = v19;
        uint64_t v20 = *(void *)(v95[0] + 24);
        unsigned int v21 = *(unsigned __int8 *)(v20 + 12);
        if (v21 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          unsigned __int8 v101 = 1;
          uint64_t v22 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v20, 0x79u, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v20, 0x79u, 1u, &v101);
          int v23 = *v22;
        }
        else
        {
          int v23 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v95[0] + 24), 0x79u, v21, 0);
        }
        *(_DWORD *)(v8 + 20) = v23;
        uint64_t v24 = *(void *)(v95[0] + 24);
        unsigned int v25 = *(unsigned __int8 *)(v24 + 12);
        if (v25 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          unsigned __int8 v101 = 1;
          int v26 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v24, 0x85u, v15, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v24, 0x85u, v15, 1u, &v101);
        }
        else
        {
          int v26 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(*(void *)(v95[0] + 24), 0x85u, v15, v25, 0);
        }
        int v27 = (char)v26;
        if ((char)v26 <= -3) {
          int v27 = -3;
        }
        if (v27 >= 7) {
          LOBYTE(v27) = 7;
        }
        if ((v26 - 8) >= 0xF5u) {
          LOBYTE(v27) = v26;
        }
        *(unsigned char *)(v8 + 63) = v27;
        uint64_t v28 = *(void *)(v95[0] + 24);
        int v29 = *(unsigned __int8 *)(v28 + 12);
        if (v29 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          unsigned __int8 v101 = 1;
          char v30 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v28, 0x5Bu, v15, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v28, 0x5Bu, v15, 1, &v101);
        }
        else
        {
          char v30 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v95[0] + 24), 0x5Bu, v15, v29, 0);
        }
        *(unsigned char *)(v8 + 56) = v30;
        char v31 = *(unsigned char *)(a1 + 241);
        if (v31) {
          char v31 = v15 >= *(float *)(v8 + 16);
        }
        *(unsigned char *)(v8 + 60) = v31;
        uint64_t v32 = *(void *)(v95[0] + 24);
        int v33 = *(unsigned __int8 *)(v32 + 12);
        if (v33 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          unsigned __int8 v101 = 1;
          int v34 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v32, 0x1CCu, v15, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v32, 0x1CCu, v15, 1, &v101);
          if (v34)
          {
LABEL_52:
            BOOL v35 = v15 >= *(float *)(v8 + 16);
            goto LABEL_55;
          }
        }
        else if (*(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v95[0] + 24), 0x1CCu, v15, v33, 0))
        {
          goto LABEL_52;
        }
        BOOL v35 = 0;
LABEL_55:
        *(unsigned char *)(v8 + 59) = v35;
        uint64_t v36 = *(void *)(v95[0] + 24);
        int v37 = *(unsigned __int8 *)(v36 + 12);
        if (v37 == 2)
        {
          __p.__r_.__value_.__s.__data_[0] = 1;
          unsigned __int8 v101 = 1;
          int v38 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x80u, v15, 0, &__p);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x80u, v15, 1, &v101);
          if (v38)
          {
LABEL_57:
            BOOL v39 = v15 >= *(float *)(v8 + 20);
LABEL_60:
            *(unsigned char *)(v8 + 58) = v39;
            uint64_t v40 = *(void *)(v95[0] + 24);
            int v41 = *(unsigned __int8 *)(v40 + 12);
            if (v41 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v101 = 1;
              char v42 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v40, 0x81u, v15, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v40, 0x81u, v15, 1, &v101);
            }
            else
            {
              char v42 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v95[0] + 24), 0x81u, v15, v41, 0);
            }
            *(unsigned char *)(v8 + 57) = v42;
            switch(v14)
            {
              case 0u:
                uint64_t v43 = *(void *)(v95[0] + 24);
                unsigned int v44 = *(unsigned __int8 *)(v43 + 12);
                if (v44 == 2)
                {
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x15u, v15, 0) & 1) != 0
                    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x15u, v15, 1u) & 1) != 0)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    unsigned __int8 v101 = 1;
                    int v45 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v43, 0x15u, v15, 0, &__p);
                    uint64_t v46 = v43;
                    unsigned int v47 = 21;
                    goto LABEL_102;
                  }
                  goto LABEL_100;
                }
                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x15u, v15, *(unsigned __int8 *)(v43 + 12)))goto LABEL_103; {
                uint64_t v50 = v43;
                }
                unsigned int v51 = 21;
                goto LABEL_105;
              case 1u:
                uint64_t v43 = *(void *)(v95[0] + 24);
                unsigned int v44 = *(unsigned __int8 *)(v43 + 12);
                if (v44 == 2)
                {
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x16u, v15, 0) & 1) != 0
                    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x16u, v15, 1u) & 1) != 0)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    unsigned __int8 v101 = 1;
                    int v45 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v43, 0x16u, v15, 0, &__p);
                    uint64_t v46 = v43;
                    unsigned int v47 = 22;
                    goto LABEL_102;
                  }
                  goto LABEL_100;
                }
                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x16u, v15, *(unsigned __int8 *)(v43 + 12)))goto LABEL_103; {
                uint64_t v50 = v43;
                }
                unsigned int v51 = 22;
                goto LABEL_105;
              case 2u:
                uint64_t v43 = *(void *)(v95[0] + 24);
                unsigned int v44 = *(unsigned __int8 *)(v43 + 12);
                if (v44 != 2)
                {
                  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x17u, v15, *(unsigned __int8 *)(v43 + 12)))goto LABEL_103; {
                  goto LABEL_104;
                  }
                }
                if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x17u, v15, 0) & 1) != 0
                  || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x17u, v15, 1u) & 1) != 0)
                {
                  goto LABEL_99;
                }
                goto LABEL_100;
              case 3u:
                uint64_t v43 = *(void *)(v95[0] + 24);
                unsigned int v44 = *(unsigned __int8 *)(v43 + 12);
                if (v44 == 2)
                {
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x20u, v15, 0) & 1) != 0
                    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x20u, v15, 1u) & 1) != 0)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    unsigned __int8 v101 = 1;
                    int v45 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v43, 0x20u, v15, 0, &__p);
                    uint64_t v46 = v43;
                    unsigned int v47 = 32;
                    goto LABEL_102;
                  }
                  goto LABEL_95;
                }
                int hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x20u, v15, *(unsigned __int8 *)(v43 + 12));
                unsigned int v49 = v44;
                if (!hasValueForKeyAtZAtEnd) {
                  goto LABEL_97;
                }
                uint64_t v50 = v43;
                unsigned int v51 = 32;
                goto LABEL_105;
              case 4u:
              case 5u:
                uint64_t v43 = *(void *)(v95[0] + 24);
                unsigned int v44 = *(unsigned __int8 *)(v43 + 12);
                if (v44 == 2)
                {
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x27u, v15, 0) & 1) != 0
                    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x27u, v15, 1u) & 1) != 0)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    unsigned __int8 v101 = 1;
                    int v45 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v43, 0x27u, v15, 0, &__p);
                    uint64_t v46 = v43;
                    unsigned int v47 = 39;
LABEL_102:
                    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v46, v47, v15, 1u, &v101);
                    goto LABEL_106;
                  }
LABEL_95:
                  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x17u, v15, 0)) {
                    goto LABEL_98;
                  }
                  unsigned int v49 = 1;
                }
                else
                {
                  int v48 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x27u, v15, *(unsigned __int8 *)(v43 + 12));
                  unsigned int v49 = v44;
                  if (v48)
                  {
                    uint64_t v50 = v43;
                    unsigned int v51 = 39;
                    goto LABEL_105;
                  }
                }
LABEL_97:
                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v43, 0x17u, v15, v49))
                {
LABEL_100:
                  if (v44 == 2)
                  {
                    __p.__r_.__value_.__s.__data_[0] = 1;
                    unsigned __int8 v101 = 1;
                    int v45 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v43, 0x7Au, v15, 0, &__p);
                    uint64_t v46 = v43;
                    unsigned int v47 = 122;
                    goto LABEL_102;
                  }
LABEL_103:
                  uint64_t v50 = v43;
                  unsigned int v51 = 122;
                  goto LABEL_105;
                }
LABEL_98:
                if (v44 == 2)
                {
LABEL_99:
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v45 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v43, 0x17u, v15, 0, &__p);
                  uint64_t v46 = v43;
                  unsigned int v47 = 23;
                  goto LABEL_102;
                }
LABEL_104:
                uint64_t v50 = v43;
                unsigned int v51 = 23;
LABEL_105:
                int v45 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v50, v51, v15, v44, 0);
LABEL_106:
                *(_DWORD *)(v8 + 24) = v45;
                uint64_t v53 = *(void *)(v95[0] + 24);
                unsigned int v54 = *(unsigned __int8 *)(v53 + 12);
                if (v54 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v55 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v53, 0x83u, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v53, 0x83u, v15, 1u, &v101);
                }
                else
                {
                  int v55 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v95[0] + 24), 0x83u, v15, v54, 0);
                }
                *(_DWORD *)(v8 + 28) = v55;
                uint64_t v56 = *(void *)(v95[0] + 24);
                unsigned int v57 = *(unsigned __int8 *)(v56 + 12);
                if (v57 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v56, 0xE2u, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v56, 0xE2u, v15, 1u, &v101);
                }
                else
                {
                  int v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v95[0] + 24), 0xE2u, v15, v57, 0);
                }
                *(_DWORD *)(v8 + 32) = v58;
                uint64_t v59 = *(void *)(v95[0] + 24);
                unsigned int v60 = *(unsigned __int8 *)(v59 + 12);
                if (v60 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v59, 0xE3u, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v59, 0xE3u, v15, 1u, &v101);
                }
                else
                {
                  int v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v95[0] + 24), 0xE3u, v15, v60, 0);
                }
                *(_DWORD *)(v8 + 36) = v61;
                uint64_t v62 = *(void *)(v95[0] + 24);
                unsigned int v63 = *(unsigned __int8 *)(v62 + 12);
                if (v63 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v64 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v62, 0xE4u, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v62, 0xE4u, v15, 1u, &v101);
                }
                else
                {
                  int v64 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v95[0] + 24), 0xE4u, v15, v63, 0);
                }
                *(_DWORD *)(v8 + 40) = v64;
                uint64_t v65 = *(void *)(v95[0] + 24);
                unsigned int v66 = *(unsigned __int8 *)(v65 + 12);
                if (v66 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v67 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v65, 0x1B0u, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v65, 0x1B0u, v15, 1u, &v101);
                }
                else
                {
                  int v67 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v95[0] + 24), 0x1B0u, v15, v66, 0);
                }
                *(_DWORD *)(v8 + 52) = v67;
                unsigned __int8 v100 = 1;
                uint64_t v68 = *(void *)(v95[0] + 24);
                unsigned int v69 = *(unsigned __int8 *)(v68 + 12);
                if (v69 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  float v70 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v68, 0x1DCu, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v68, 0x1DCu, v15, 1u, &v101);
                  int v71 = (__p.__r_.__value_.__s.__data_[0] | v101) != 0;
                }
                else
                {
                  float v70 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v95[0] + 24), 0x1DCu, v15, v69, &v100);
                  int v71 = v100;
                }
                float v72 = -1.0;
                if (v71) {
                  float v72 = v70;
                }
                *(float *)(v8 + 44) = v72;
                uint64_t v73 = *(void *)(v95[0] + 24);
                unsigned int v74 = *(unsigned __int8 *)(v73 + 12);
                if (v74 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v75 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v73, 0xE9u, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v73, 0xE9u, v15, 1u, &v101);
                }
                else
                {
                  int v75 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v95[0] + 24), 0xE9u, v15, v74, 0);
                }
                *(unsigned char *)(v8 + 61) = gss::MaskToLabelPosition((unsigned __int16)v75);
                unsigned __int8 v100 = 1;
                uint64_t v76 = *(void *)(v95[0] + 24);
                unsigned int v77 = *(unsigned __int8 *)(v76 + 12);
                if (v77 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v78 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v76, 0x1DDu, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v76, 0x1DDu, v15, 1u, &v101);
                  if (__p.__r_.__value_.__s.__data_[0] | v101)
                  {
LABEL_131:
                    char v79 = gss::MaskToLabelPosition((unsigned __int16)v78);
                    goto LABEL_134;
                  }
                }
                else
                {
                  int v78 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v95[0] + 24), 0x1DDu, v15, v77, &v100);
                  if (v100) {
                    goto LABEL_131;
                  }
                }
                char v79 = *(unsigned char *)(v8 + 61);
LABEL_134:
                *(unsigned char *)(v8 + 62) = v79;
                uint64_t v80 = *(void *)(v95[0] + 24);
                unsigned int v81 = *(unsigned __int8 *)(v80 + 12);
                if (v81 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v82 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v80, 0xDBu, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v80, 0xDBu, v15, 1u, &v101);
                }
                else
                {
                  int v82 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(*(void *)(v95[0] + 24), 0xDBu, v15, v81, 0);
                }
                *(_DWORD *)(v8 + 8) = v82;
                uint64_t v83 = (float *)(v12 + 20 * v14);
                uint64_t v84 = *(void *)(v95[0] + 24);
                unsigned int v85 = *(unsigned __int8 *)(v84 + 12);
                if (v85 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  float v86 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v84, 0x82u, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v84, 0x82u, v15, 1u, &v101);
                }
                else
                {
                  float v86 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v95[0] + 24), 0x82u, v15, v85, 0);
                }
                *(float *)(v8 + 48) = (float)(v13 * *v83) * (float)(1.3 * v86);
                gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&__p, 0x71u, 1, *(void *)(v95[0] + 24), 0);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t size = __p.__r_.__value_.__l.__size_;
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(v8 + 72), p_p, size);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                uint64_t v89 = *(void *)(v95[0] + 24);
                unsigned int v90 = *(unsigned __int8 *)(v89 + 12);
                if (v90 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v91 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v89, 0x199u, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v89, 0x199u, v15, 1u, &v101);
                }
                else
                {
                  int v91 = *(unsigned __int16 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v95[0] + 24), 0x199u, v15, v90, 0);
                }
                *(_DWORD *)(v8 + 12) = v91;
                uint64_t v92 = *(void *)(v95[0] + 24);
                unsigned int v93 = *(unsigned __int8 *)(v92 + 12);
                if (v93 == 2)
                {
                  __p.__r_.__value_.__s.__data_[0] = 1;
                  unsigned __int8 v101 = 1;
                  int v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0x19Bu, v15, 0, &__p);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0x19Bu, v15, 1u, &v101);
                }
                else
                {
                  int v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v95[0] + 24), 0x19Bu, v15, v93, 0);
                }
                *(unsigned char *)(v8 + 64) = v94;
                break;
              default:
                uint64_t v43 = *(void *)(v95[0] + 24);
                unsigned int v44 = *(unsigned __int8 *)(v43 + 12);
                goto LABEL_100;
            }
            goto LABEL_155;
          }
        }
        else if (*(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v95[0] + 24), 0x80u, v15, v37, 0))
        {
          goto LABEL_57;
        }
        BOOL v39 = 0;
        goto LABEL_60;
      }
    }
  }
  return v6;
}

void sub_1A1B15DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1B15DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

unsigned __int8 *geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>(unsigned __int8 **a1, __int16 *a2, uint64_t **a3)
{
  __int16 v27 = *a2;
  unsigned __int8 v28 = *((unsigned char *)a2 + 2);
  BOOL v4 = *a3;
  *a3 = 0;
  uint64_t v5 = *a1;
  unsigned int v6 = a1[1];
  BOOL v7 = *a1;
  if (*a1 != v6)
  {
    BOOL v7 = *a1;
    while (1)
    {
      BOOL v8 = v27 == *v7 && HIBYTE(v27) == v7[1];
      if (v8 && v28 == v7[2]) {
        break;
      }
      v7 += 16;
      if (v7 == v6) {
        goto LABEL_17;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_17:
    unsigned int v11 = a1[2];
    if (v6 >= v11)
    {
      uint64_t v13 = (v6 - v5) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        abort();
      }
      uint64_t v15 = v11 - v5;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v17 = (char *)operator new(16 * v16);
      int v18 = &v17[16 * v13];
      *(_WORD *)int v18 = v27;
      int v19 = (unsigned __int8 *)&v17[16 * v16];
      v18[2] = v28;
      *((void *)v18 + 1) = v4;
      uint64_t v12 = (unsigned __int8 *)(v18 + 16);
      if (v5 == v6)
      {
        *a1 = (unsigned __int8 *)v18;
        a1[1] = v12;
        a1[2] = v19;
      }
      else
      {
        do
        {
          __int16 v20 = *((_WORD *)v6 - 8);
          v6 -= 16;
          char v21 = v6[2];
          *((_WORD *)v18 - 8) = v20;
          v18 -= 16;
          v18[2] = v21;
          uint64_t v22 = *((void *)v6 + 1);
          *((void *)v6 + 1) = 0;
          *((void *)v18 + 1) = v22;
        }
        while (v6 != v5);
        uint64_t v5 = *a1;
        int v23 = a1[1];
        *a1 = (unsigned __int8 *)v18;
        a1[1] = v12;
        a1[2] = v19;
        while (v23 != v5)
        {
          uint64_t v24 = (uint64_t *)*((void *)v23 - 1);
          *((void *)v23 - 1) = 0;
          if (v24)
          {
            uint64_t v25 = *v24;
            uint64_t *v24 = 0;
            if (v25) {
              (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
            }
            MEMORY[0x1A6239270](v24, 0x1020C4034E03FFCLL);
          }
          v23 -= 16;
        }
      }
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      v6[2] = v28;
      *(_WORD *)unsigned int v6 = v27;
      *((void *)v6 + 1) = v4;
      uint64_t v12 = v6 + 16;
    }
    a1[1] = v12;
    return v12 - 16;
  }
  else if (v4)
  {
    uint64_t v10 = *v4;
    uint64_t *v4 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    MEMORY[0x1A6239270](v4, 0x1020C4034E03FFCLL);
  }
  return v7;
}

void sub_1A1B1605C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(uint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,float>(a2);
  }
  uint64_t v5 = result + 16 * a3;
  uint64_t v6 = *(unsigned __int16 *)(v5 + 56);
  if (!*(_WORD *)(v5 + 56))
  {
LABEL_31:
    uint64_t v24 = *(unsigned __int16 ****)(v4 + 72);
    if (v24)
    {
      unsigned int v11 = *v24;
      uint64_t v25 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        LOWORD(v33) = 0;
        goto LABEL_66;
      }
      uint64_t v26 = (uint64_t)*v11;
      if (!*((unsigned char *)v11 + 15))
      {
        uint64_t v34 = 2 * v25;
        BOOL v35 = *v11;
        while (*v35 != a2)
        {
          ++v35;
          v34 -= 2;
          if (!v34)
          {
            BOOL v35 = (unsigned __int16 *)(v26 + 2 * v25);
            break;
          }
        }
        unint64_t v33 = ((unint64_t)v35 - v26) >> 1;
LABEL_66:
        if (v25 != (unsigned __int16)v33)
        {
          uint64_t v42 = *((unsigned __int16 *)v11 + 21);
          if (!*((_WORD *)v11 + 21)) {
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          }
          char v30 = v11[4];
          if (*((unsigned char *)v11 + 47))
          {
            if (v42 >= 0x1E)
            {
              unsigned int v54 = v11[4];
              unint64_t v55 = *((unsigned __int16 *)v11 + 21);
              do
              {
                unint64_t v56 = v55 >> 1;
                unsigned int v57 = &v54[v55 >> 1];
                unsigned int v59 = *v57;
                int v58 = v57 + 1;
                v55 += ~(v55 >> 1);
                if (v59 < a2) {
                  unsigned int v54 = v58;
                }
                else {
                  unint64_t v55 = v56;
                }
              }
              while (v55);
              if (v54 == &v30[v42] || *v54 != a2) {
                return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              }
              unint64_t v31 = (unint64_t)((char *)v54 - (char *)v30) >> 1;
            }
            else
            {
              unint64_t v31 = 0;
              uint64_t result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              while (1)
              {
                unsigned int v43 = v30[v31];
                if (v43 >= a2) {
                  break;
                }
                if (v42 == ++v31) {
                  return result;
                }
              }
              if (v43 != a2) {
                LOWORD(v31) = *((_WORD *)v11 + 21);
              }
            }
          }
          else
          {
            uint64_t v46 = 2 * v42;
            unsigned int v47 = v11[4];
            while (*v47 != a2)
            {
              ++v47;
              v46 -= 2;
              if (!v46)
              {
                unsigned int v47 = &v30[v42];
                break;
              }
            }
            unint64_t v31 = (unint64_t)((char *)v47 - (char *)v30) >> 1;
          }
          if (v42 == (unsigned __int16)v31) {
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          }
          if (v42 <= (unsigned __int16)v31) {
            return result;
          }
          return (uint64_t)&v30[2 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 20);
        }
        goto LABEL_67;
      }
      if (v25 < 0x1E)
      {
        uint64_t v27 = 0;
        while (1)
        {
          unsigned int v28 = *(unsigned __int16 *)(v26 + 2 * v27);
          if (v28 >= a2) {
            break;
          }
          if (v25 == ++v27) {
            goto LABEL_67;
          }
        }
        if (v28 == a2) {
          LOWORD(v33) = v27;
        }
        else {
          LOWORD(v33) = *((_WORD *)v11 + 5);
        }
        goto LABEL_66;
      }
      uint64_t v36 = *v11;
      unint64_t v37 = *((unsigned __int16 *)v11 + 5);
      do
      {
        unint64_t v38 = v37 >> 1;
        BOOL v39 = &v36[v37 >> 1];
        unsigned int v41 = *v39;
        uint64_t v40 = v39 + 1;
        v37 += ~(v37 >> 1);
        if (v41 < a2) {
          uint64_t v36 = v40;
        }
        else {
          unint64_t v37 = v38;
        }
      }
      while (v37);
      if (v36 != (unsigned __int16 *)(v26 + 2 * v25) && *v36 == a2)
      {
        unint64_t v33 = ((unint64_t)v36 - v26) >> 1;
        goto LABEL_66;
      }
    }
LABEL_67:
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,float>(a2);
  }
  uint64_t v7 = *(void *)(v5 + 48);
  uint64_t v8 = v7 + 8 * v6;
  while (1)
  {
    uint64_t v10 = *(unsigned __int16 ****)(*(void *)v7 + 72);
    if (v10)
    {
      unsigned int v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (*((_WORD *)v11 + 5))
      {
        uint64_t v13 = (uint64_t)*v11;
        if (*((unsigned char *)v11 + 15))
        {
          if (v12 >= 0x1E)
          {
            int v18 = *v11;
            unint64_t v19 = *((unsigned __int16 *)v11 + 5);
            do
            {
              unint64_t v20 = v19 >> 1;
              char v21 = &v18[v19 >> 1];
              unsigned int v23 = *v21;
              uint64_t v22 = v21 + 1;
              uint64_t result = v23;
              v19 += ~(v19 >> 1);
              if (v23 < a2) {
                int v18 = v22;
              }
              else {
                unint64_t v19 = v20;
              }
            }
            while (v19);
            if (v18 == (unsigned __int16 *)(v13 + 2 * v12) || *v18 != a2) {
              goto LABEL_6;
            }
            unint64_t v9 = ((unint64_t)v18 - v13) >> 1;
          }
          else
          {
            uint64_t v14 = 0;
            while (1)
            {
              unsigned int v15 = *(unsigned __int16 *)(v13 + 2 * v14);
              if (v15 >= a2) {
                break;
              }
              if (v12 == ++v14) {
                goto LABEL_6;
              }
            }
            LOWORD(v9) = v15 == a2 ? v14 : *((_WORD *)v11 + 5);
          }
        }
        else
        {
          uint64_t v16 = 2 * v12;
          unsigned int v17 = *v11;
          while (*v17 != a2)
          {
            ++v17;
            v16 -= 2;
            if (!v16)
            {
              unsigned int v17 = (unsigned __int16 *)(v13 + 2 * v12);
              break;
            }
          }
          unint64_t v9 = ((unint64_t)v17 - v13) >> 1;
        }
      }
      else
      {
        LOWORD(v9) = 0;
      }
      if (v12 != (unsigned __int16)v9) {
        break;
      }
    }
LABEL_6:
    v7 += 8;
    if (v7 == v8) {
      goto LABEL_31;
    }
  }
  uint64_t v29 = *((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21)) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  char v30 = v11[4];
  if (!*((unsigned char *)v11 + 47))
  {
    uint64_t v44 = 2 * v29;
    int v45 = v11[4];
    while (*v45 != a2)
    {
      ++v45;
      v44 -= 2;
      if (!v44)
      {
        int v45 = &v30[v29];
        break;
      }
    }
    unint64_t v31 = (unint64_t)((char *)v45 - (char *)v30) >> 1;
LABEL_105:
    if (v29 <= (unsigned __int16)v31) {
      return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    }
    return (uint64_t)&v30[2 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 20);
  }
  if (v29 < 0x1E)
  {
    unint64_t v31 = 0;
    uint64_t result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      unsigned int v32 = v30[v31];
      if (v32 >= a2) {
        break;
      }
      if (v29 == ++v31) {
        return result;
      }
    }
    if (v32 != a2) {
      LOWORD(v31) = *((_WORD *)v11 + 21);
    }
    goto LABEL_105;
  }
  int v48 = v11[4];
  unint64_t v49 = *((unsigned __int16 *)v11 + 21);
  do
  {
    unint64_t v50 = v49 >> 1;
    unsigned int v51 = &v48[v49 >> 1];
    unsigned int v53 = *v51;
    unsigned int v52 = v51 + 1;
    v49 += ~(v49 >> 1);
    if (v53 < a2) {
      int v48 = v52;
    }
    else {
      unint64_t v49 = v50;
    }
  }
  while (v49);
  if (v48 != &v30[v29] && *v48 == a2)
  {
    unint64_t v31 = (unint64_t)((char *)v48 - (char *)v30) >> 1;
    goto LABEL_105;
  }
  return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

void gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(std::string *a1, unsigned int a2, int a3, unint64_t a4, BOOL *a5)
{
  if (a3 == 2)
  {
    uint64_t v9 = *(void *)a4;
    if (*(void *)a4)
    {
      float v10 = *(float *)v9;
      LODWORD(v9) = *(float *)v9 == 1.0;
      if (*(unsigned char *)(a4 + 10))
      {
        if (v10 != 0.0 && v10 != 1.0) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v9 = v9;
  }
  else
  {
    uint64_t v9 = 1;
  }
  unsigned int v12 = *(unsigned __int8 *)(a4 + v9 + 11);
  float v10 = 0.0;
  if (v12 == 2)
  {
LABEL_12:
    unsigned __int8 v22 = 1;
    unsigned __int8 v21 = 1;
    uint64_t v13 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<std::string>(a4, a2, 0, &v22);
    uint64_t v14 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<std::string>(a4, a2, 1u, &v21);
    if (a5) {
      *a5 = (v22 | v21) != 0;
    }
    if (v10 >= 1.0) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v13;
    }
    if ((*((char *)v15 + 23) & 0x80000000) == 0)
    {
      long long v16 = *(_OWORD *)v15;
      std::string::size_type v17 = v15[2];
LABEL_21:
      a1->__r_.__value_.__r.__words[2] = v17;
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v16;
      return;
    }
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)*v15, v15[1]);
    return;
  }
  int v18 = (const std::string::value_type **)gss::RenderStyle<gss::PropertyID>::styleValueForKey<std::string>(a4, a2, v12, a5);
  if ((*((char *)v18 + 23) & 0x80000000) == 0)
  {
    long long v16 = *(_OWORD *)v18;
    std::string::size_type v17 = (std::string::size_type)v18[2];
    goto LABEL_21;
  }
  unint64_t v19 = *v18;
  std::string::size_type v20 = (std::string::size_type)v18[1];
  std::string::__init_copy_ctor_external(a1, v19, v20);
}

void *gss::RenderStyle<gss::PropertyID>::styleValueForKey<std::string>(unint64_t a1, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(a1 + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return gss::defaultValueForKey<gss::PropertyID,std::string>();
  }
  uint64_t v5 = (char *)(a1 + 16 * a3);
  uint64_t v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_31:
    uint64_t v24 = *(unsigned __int16 ****)(v4 + 72);
    if (v24)
    {
      uint64_t v25 = *v24;
      uint64_t v26 = *((unsigned __int16 *)v25 + 5);
      if (!*((_WORD *)v25 + 5))
      {
        LOWORD(v34) = 0;
        goto LABEL_66;
      }
      uint64_t v27 = (uint64_t)*v25;
      if (!*((unsigned char *)v25 + 15))
      {
        uint64_t v35 = 2 * v26;
        uint64_t v36 = *v25;
        while (*v36 != a2)
        {
          ++v36;
          v35 -= 2;
          if (!v35)
          {
            uint64_t v36 = (unsigned __int16 *)(v27 + 2 * v26);
            break;
          }
        }
        unint64_t v34 = ((unint64_t)v36 - v27) >> 1;
LABEL_66:
        if (v26 != (unsigned __int16)v34)
        {
          uint64_t v44 = *((unsigned __int16 *)v25 + 37);
          if (*((_WORD *)v25 + 37))
          {
            int v45 = v25[8];
            if (*((unsigned char *)v25 + 79))
            {
              if (v44 >= 0x1E)
              {
                unsigned int v59 = v25[8];
                unint64_t v60 = *((unsigned __int16 *)v25 + 37);
                do
                {
                  unint64_t v61 = v60 >> 1;
                  uint64_t v62 = &v59[v60 >> 1];
                  unsigned int v64 = *v62;
                  unsigned int v63 = v62 + 1;
                  v60 += ~(v60 >> 1);
                  if (v64 < a2) {
                    unsigned int v59 = v63;
                  }
                  else {
                    unint64_t v60 = v61;
                  }
                }
                while (v60);
                if (v59 == &v45[v44] || *v59 != a2) {
                  return gss::PropertySetDefaultStringValue((gss *)a1);
                }
                unint64_t v48 = (unint64_t)((char *)v59 - (char *)v45) >> 1;
              }
              else
              {
                uint64_t v46 = 0;
                while (1)
                {
                  unsigned int v47 = v45[v46];
                  if (v47 >= a2) {
                    break;
                  }
                  if (v44 == ++v46) {
                    return gss::PropertySetDefaultStringValue((gss *)a1);
                  }
                }
                if (v47 == a2) {
                  LOWORD(v48) = v46;
                }
                else {
                  LOWORD(v48) = *((_WORD *)v25 + 37);
                }
              }
            }
            else
            {
              uint64_t v51 = 2 * v44;
              unsigned int v52 = v25[8];
              while (*v52 != a2)
              {
                ++v52;
                v51 -= 2;
                if (!v51)
                {
                  unsigned int v52 = &v45[v44];
                  break;
                }
              }
              unint64_t v48 = (unint64_t)((char *)v52 - (char *)v45) >> 1;
            }
          }
          else
          {
            LOWORD(v48) = 0;
          }
          if (v44 == (unsigned __int16)v48) {
            return gss::PropertySetDefaultStringValue((gss *)a1);
          }
          return *(void **)((char *)&v25[8][8 * (unsigned __int16)v48 + 4] + *((unsigned __int16 *)v25 + 36));
        }
        goto LABEL_67;
      }
      if (v26 < 0x1E)
      {
        uint64_t v28 = 0;
        while (1)
        {
          unsigned int v29 = *(unsigned __int16 *)(v27 + 2 * v28);
          if (v29 >= a2) {
            break;
          }
          if (v26 == ++v28) {
            goto LABEL_67;
          }
        }
        if (v29 == a2) {
          LOWORD(v34) = v28;
        }
        else {
          LOWORD(v34) = *((_WORD *)v25 + 5);
        }
        goto LABEL_66;
      }
      unint64_t v37 = *v25;
      unint64_t v38 = *((unsigned __int16 *)v25 + 5);
      do
      {
        unint64_t v39 = v38 >> 1;
        uint64_t v40 = &v37[v38 >> 1];
        unsigned int v42 = *v40;
        unsigned int v41 = v40 + 1;
        v38 += ~(v38 >> 1);
        if (v42 < a2) {
          unint64_t v37 = v41;
        }
        else {
          unint64_t v38 = v39;
        }
      }
      while (v38);
      if (v37 != (unsigned __int16 *)(v27 + 2 * v26) && *v37 == a2)
      {
        unint64_t v34 = ((unint64_t)v37 - v27) >> 1;
        goto LABEL_66;
      }
    }
LABEL_67:
    if (a4) {
      *a4 = 0;
    }
    return gss::defaultValueForKey<gss::PropertyID,std::string>();
  }
  uint64_t v7 = *((void *)v5 + 6);
  uint64_t v8 = v7 + 8 * v6;
  while (1)
  {
    float v10 = *(unsigned __int16 ****)(*(void *)v7 + 72);
    if (v10)
    {
      unsigned int v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (*((_WORD *)v11 + 5))
      {
        uint64_t v13 = *v11;
        if (*((unsigned char *)v11 + 15))
        {
          if (v12 >= 0x1E)
          {
            int v18 = *v11;
            unint64_t v19 = *((unsigned __int16 *)v11 + 5);
            do
            {
              unint64_t v20 = v19 >> 1;
              unsigned __int8 v21 = &v18[v19 >> 1];
              unsigned int v23 = *v21;
              unsigned __int8 v22 = v21 + 1;
              a1 = v23;
              v19 += ~(v19 >> 1);
              if (v23 < a2) {
                int v18 = v22;
              }
              else {
                unint64_t v19 = v20;
              }
            }
            while (v19);
            if (v18 == &v13[v12] || *v18 != a2) {
              goto LABEL_6;
            }
            unint64_t v9 = (unint64_t)((char *)v18 - (char *)v13) >> 1;
          }
          else
          {
            uint64_t v14 = 0;
            while (1)
            {
              unsigned int v15 = v13[v14];
              if (v15 >= a2) {
                break;
              }
              if (v12 == ++v14) {
                goto LABEL_6;
              }
            }
            LOWORD(v9) = v15 == a2 ? v14 : *((_WORD *)v11 + 5);
          }
        }
        else
        {
          uint64_t v16 = 2 * v12;
          std::string::size_type v17 = *v11;
          while (*v17 != a2)
          {
            ++v17;
            v16 -= 2;
            if (!v16)
            {
              std::string::size_type v17 = &v13[v12];
              break;
            }
          }
          unint64_t v9 = (unint64_t)((char *)v17 - (char *)v13) >> 1;
        }
      }
      else
      {
        LOWORD(v9) = 0;
      }
      if (v12 != (unsigned __int16)v9) {
        break;
      }
    }
LABEL_6:
    v7 += 8;
    if (v7 == v8) {
      goto LABEL_31;
    }
  }
  uint64_t v30 = *((unsigned __int16 *)v11 + 37);
  if (!*((_WORD *)v11 + 37)) {
    return gss::PropertySetDefaultStringValue((gss *)a1);
  }
  unint64_t v31 = v11[8];
  if (*((unsigned char *)v11 + 79))
  {
    if (v30 < 0x1E)
    {
      unint64_t v32 = 0;
      while (1)
      {
        unsigned int v33 = v31[v32];
        if (v33 >= a2) {
          break;
        }
        if (v30 == ++v32) {
          return gss::PropertySetDefaultStringValue((gss *)a1);
        }
      }
      if (v33 != a2) {
        LOWORD(v32) = *((_WORD *)v11 + 37);
      }
      goto LABEL_106;
    }
    unsigned int v53 = v11[8];
    unint64_t v54 = *((unsigned __int16 *)v11 + 37);
    do
    {
      unint64_t v55 = v54 >> 1;
      unint64_t v56 = &v53[v54 >> 1];
      unsigned int v58 = *v56;
      unsigned int v57 = v56 + 1;
      v54 += ~(v54 >> 1);
      if (v58 < a2) {
        unsigned int v53 = v57;
      }
      else {
        unint64_t v54 = v55;
      }
    }
    while (v54);
    if (v53 != &v31[v30] && *v53 == a2)
    {
      unint64_t v32 = (unint64_t)((char *)v53 - (char *)v31) >> 1;
      goto LABEL_106;
    }
    return gss::PropertySetDefaultStringValue((gss *)a1);
  }
  else
  {
    uint64_t v49 = 2 * v30;
    unint64_t v50 = v11[8];
    while (*v50 != a2)
    {
      ++v50;
      v49 -= 2;
      if (!v49)
      {
        unint64_t v50 = &v31[v30];
        break;
      }
    }
    unint64_t v32 = (unint64_t)((char *)v50 - (char *)v31) >> 1;
LABEL_106:
    if (v30 == (unsigned __int16)v32) {
      return gss::PropertySetDefaultStringValue((gss *)a1);
    }
    return *(void **)((char *)&v31[8 * (unsigned __int16)v32 + 4] + *((unsigned __int16 *)v11 + 36));
  }
}

uint64_t md::CurvedTextLabelPart::placeGlyphsOnRoadPath(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, float a8)
{
  unint64_t v67 = __PAIR64__(LODWORD(a8), LODWORD(a7));
  if (a2)
  {
    uint64_t v14 = *(void *)(a1 + 592);
    uint64_t v17 = *(void *)(v14 + 32);
    uint64_t v16 = (void *)(v14 + 32);
    uint64_t v15 = v17;
    unint64_t v19 = v16 + 1;
    uint64_t v18 = v16[1];
    if (v17 != v18)
    {
      unint64_t v20 = (uint64_t *)(a1 + 592);
      *(_DWORD *)(a6 + 3396) -= 1171354717 * ((unint64_t)(v18 - v15) >> 3);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 576);
    uint64_t v22 = *(void *)(v21 + 32);
    uint64_t v16 = (void *)(v21 + 32);
    unint64_t v19 = v16 + 1;
    if (v22 != v16[1])
    {
      unint64_t v20 = (uint64_t *)(a1 + 576);
LABEL_6:
      md::LabelPart::createHiker(&v66, a1, a2, *(void *)(a4 + 112), a5);
      float v23 = *(float *)(a1 + 1400);
      BOOL v24 = v23 != 0.0;
      int v25 = *a3;
      if (v25 == 103) {
        BOOL v24 = 1;
      }
      uint64_t v26 = v66;
      v66[12] = v24;
      if (v23 != 0.0)
      {
        float v27 = -(float)(v23 * *(float *)(a6 + 176));
        goto LABEL_10;
      }
      if (v25 == 103)
      {
        int v38 = a3[3];
        if (v38 != 6)
        {
          float v27 = 0.0;
          if (v38 != 2) {
            goto LABEL_10;
          }
          goto LABEL_51;
        }
      }
      else
      {
        if (v25 != 4)
        {
          if (v25 == 1)
          {
            if (*(unsigned char *)(*(void *)(a1 + 16) + 1269)
              && !*(unsigned char *)(md::LabelSettingsStyleCache::styleCaps(*(md::LabelSettingsStyleCache **)(*(void *)(a6 + 336) + 200))
                           + 2))
            {
              unint64_t v37 = (float *)(a4 + 12);
            }
            else
            {
              unint64_t v37 = (float *)(a4 + 8);
            }
            float v27 = *v37;
            int v62 = a3[3];
            if (v62 == 8)
            {
              int v40 = *(unsigned __int8 *)(a1 + 1456);
LABEL_86:
              if (!v40) {
                float v27 = 0.0;
              }
              goto LABEL_10;
            }
            if (v62 == 6) {
              float v27 = -v27;
            }
          }
          else
          {
            int v41 = a3[3];
            float v27 = 0.0;
            if (v41 != 8)
            {
              float v42 = fminf(fmaxf((float)(*(float *)a4 * 0.16667) + -2.1667, 0.0), 1.0);
              float v43 = 14.0;
              if (v25 == 102) {
                float v43 = 12.0;
              }
              float v44 = 2.0;
              if (v25 == 102) {
                float v44 = 4.0;
              }
              float v45 = fmaxf(*(float *)(a4 + 24) + 1.0, *(float *)(a6 + 176) * (float)(v44 + (float)(v42 * v43)))
                  + (float)(*(float *)(a4 + 20) * 0.5);
              float v27 = -v45;
              if (v41 != 6) {
                float v27 = v45;
              }
            }
          }
LABEL_10:
          *(float *)(a4 + 4) = v27;
          (*(void (**)(unsigned char *))(*(void *)v26 + 64))(v26);
          (*(void (**)(unsigned char *))(*(void *)v26 + 88))(v26);
          if (v26[9])
          {
            char v65 = 0;
            md::CurvedTextLabelPart::placeQuads(a1, a2, *v20, a5, a4, (uint64_t *)&v66, (float32x2_t *)&v67, &v65);
            if (!v65)
            {
              uint64_t v36 = 13;
LABEL_81:
              (*(void (**)(unsigned char *))(*(void *)v26 + 8))(v26);
              return v36;
            }
            if (*(unsigned char *)(*(void *)(a1 + 16) + 1267))
            {
              uint64_t v28 = *(float32x2_t **)(*v20 + 32);
              unint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(*v20 + 40) - (void)v28) >> 3);
              float v30 = 1.0;
              if (v29 >= 2)
              {
                if (*(unsigned char *)(a1 + 1141) == 2)
                {
                  unint64_t v31 = v28 + 18;
                  unint64_t v32 = v29 - 1;
                  do
                  {
                    if (!*(unsigned char *)(*(void *)&v31[-7] + 59) && !*(unsigned char *)(*(void *)&v31[-18] + 59))
                    {
                      uint64_t v70 = 0;
                      int v71 = 0;
                      if (*(void *)((char *)&v31[-12] + 4) || v31[-11].i32[1] != 0)
                      {
                        uint64_t v68 = 0;
                        if (*(void *)((char *)&v31[-1] + 4) || v31->i32[1] != 0)
                        {
                          float32x2_t v35 = vmul_f32(*v31, v31[-11]);
                          float v30 = fminf(v30, (float)(v35.f32[0] + (float)(v31[-1].f32[1] * v31[-12].f32[1])) + v35.f32[1]);
                        }
                      }
                    }
                    v31 += 11;
                    --v32;
                  }
                  while (v32);
                }
                else
                {
                  unint64_t v46 = v29 - 1;
                  unsigned int v47 = (char *)&v28[17] + 4;
                  do
                  {
                    uint64_t v70 = 0;
                    int v71 = 0;
                    if (*((void *)v47 - 11)) {
                      BOOL v48 = 0;
                    }
                    else {
                      BOOL v48 = *((unsigned int *)v47 - 20) == 0;
                    }
                    if (!v48)
                    {
                      uint64_t v68 = 0;
                      if (*(void *)v47 || *((_DWORD *)v47 + 2) != 0)
                      {
                        float32x2_t v50 = vmul_f32(*(float32x2_t *)(v47 + 4), *(float32x2_t *)(v47 - 84));
                        float v30 = fminf(v30, (float)(v50.f32[0] + (float)(*(float *)v47 * *((float *)v47 - 22))) + v50.f32[1]);
                      }
                    }
                    v47 += 88;
                    --v46;
                  }
                  while (v46);
                }
              }
              float v51 = fminf(fmaxf(v30, 0.0), 1.0);
              float v52 = 0.6;
              if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v19 - *v16) >> 3)) < 4) {
                float v52 = 0.8;
              }
              if (v51 < v52)
              {
                uint64_t v36 = 18;
                goto LABEL_81;
              }
            }
            if (a2 | *(unsigned __int8 *)(a4 + 184) || *(unsigned char *)(a1 + 1457))
            {
              uint64_t v36 = 37;
              goto LABEL_81;
            }
            float v53 = (*(float (**)(uint64_t, void))(*(void *)a1 + 336))(a1, 0);
            int v71 = 0;
            uint64_t v70 = 0;
            (*(void (**)(unsigned char *))(*(void *)v26 + 16))(v26);
            unint64_t v54 = *(unsigned __int8 **)(a1 + 1072);
            int v55 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v54 + 80))(v54);
            int v58 = v54[45];
            if (v54[45]) {
              char v59 = 1;
            }
            else {
              char v59 = 2;
            }
            if (v58 == 2) {
              char v59 = 0;
            }
            if (v55) {
              LOBYTE(v58) = v59;
            }
            if (md::CurvedTextLabelPart::findLineLayoutDirection((uint64_t)v26, 0, v58, (uint64_t)&v70, v53, v56, v57))
            {
              uint64_t v60 = v70;
              *(_DWORD *)(a1 + 1392) = v71;
              *(void *)(a1 + 1384) = v60;
              if (*(unsigned char *)(a1 + 565))
              {
                uint64_t v68 = *(void *)(a5 + 96);
                int v69 = *(_DWORD *)(a5 + 104);
                uint64_t v63 = *(void *)(a5 + 84);
                int v64 = *(_DWORD *)(a5 + 92);
              }
              else
              {
                uint64_t v68 = *(void *)(a5 + 76);
                int v69 = 0;
                uint64_t v63 = *(void *)(a5 + 68);
                int v64 = 0;
              }
              md::CurvedTextLabelPart::updateTextLayoutOptions(*(unsigned __int8 *)(a1 + 1455), (float *)&v68, (float *)&v63, (float *)&v70, *(unsigned char *)(a4 + 181), *(unsigned char *)(a4 + 176), (char *)(a1 + 1452), (char *)(a1 + 1454));
              uint64_t v36 = 37;
              goto LABEL_81;
            }
          }
          uint64_t v36 = 9;
          goto LABEL_81;
        }
        int v39 = a3[3];
        if (v39 != 6)
        {
          if (v39 == 8)
          {
            int v40 = *(unsigned __int8 *)(a1 + 1456);
            float v27 = *(float *)(a4 + 8);
            goto LABEL_86;
          }
LABEL_51:
          float v27 = *(float *)(a4 + 12);
          goto LABEL_10;
        }
      }
      float v27 = -*(float *)(a4 + 12);
      goto LABEL_10;
    }
  }
  return 37;
}

void sub_1A1B17014(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::MultipleShieldLabelPart::placeShieldsOnPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, int8x16_t *a7)
{
  uint64_t v12 = 664;
  if (a2)
  {
    uint64_t v13 = a1 + 664;
  }
  else
  {
    uint64_t v12 = 632;
    uint64_t v13 = a1 + 632;
  }
  double v14 = md::LabelPart::createHiker(&v71, a1, a2, *(void *)(a1 + v12), a3);
  uint64_t v15 = v71;
  (*(void (**)(unsigned char *, double))(*(void *)v71 + 88))(v71, v14);
  if (!v15[9]) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(v13 + 30))
  {
    v15[11] = *(unsigned char *)(v13 + 29);
    v15[8] = 1;
    (*(void (**)(unsigned char *, float))(*(void *)v15 + 56))(v15, *(float *)(v13 + 20));
    (*(void (**)(unsigned char *))(*(void *)v15 + 88))(v15);
    if (v15[10] || ((*(void (**)(unsigned char *))(*(void *)v15 + 88))(v15), !v15[9]))
    {
LABEL_7:
      uint64_t v16 = 9;
LABEL_8:
      (*(void (**)(unsigned char *))(*(void *)v15 + 8))(v15);
      return v16;
    }
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)v15 + 88))(v15);
    v15[11] = *((float *)v15 + 7) <= 0.0;
    v15[8] = 1;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 336))(a1, a2);
    if (*(unsigned char *)(v13 + 28) == 2)
    {
      v18.n128_f32[0] = -v18.n128_f32[0];
    }
    else
    {
      if (*(unsigned char *)(v13 + 28)) {
        goto LABEL_17;
      }
      v18.n128_f32[0] = v18.n128_f32[0] * -0.5;
    }
    (*(void (**)(unsigned char *, __n128))(*(void *)v15 + 32))(v15, v18);
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 565))
  {
    uint64_t v19 = *(void *)(a3 + 328);
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = (long long *)(v20 + 592);
    uint64_t v22 = (long long *)(v20 + 408);
    if (!a2) {
      uint64_t v22 = v21;
    }
    float32x2_t v60 = *(float32x2_t *)(a3 + 328);
    uint64_t v63 = v19;
    long long v61 = 0u;
    uint64_t v66 = v19;
    long long v62 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    uint64_t v67 = 0;
    long long v68 = *v22;
    uint64_t v69 = *((void *)v22 + 2);
    uint64_t v70 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>(v52.f64, (double *)(a3 + 864), (double *)&v60);
    double v23 = v53;
    double v24 = v55;
    double v25 = v57;
    float64x2_t v48 = v52;
    float64x2_t v49 = v54;
    float64x2_t v46 = v56;
    float64x2_t v47 = v58;
    double v26 = v59;
  }
  else
  {
    float64x2_t v49 = (float64x2_t)xmmword_1A28FCCC0;
    float64x2_t v47 = 0u;
    float64x2_t v48 = (float64x2_t)xmmword_1A28FCBD0;
    double v25 = 0.0;
    double v26 = 1.0;
    double v24 = 0.0;
    double v23 = 0.0;
    float64x2_t v46 = 0u;
  }
  uint64_t v27 = *(void *)(a1 + 584) - *(void *)(a1 + 576);
  if (!v27)
  {
    uint64_t v16 = 37;
    goto LABEL_8;
  }
  uint64_t v28 = 0;
  unint64_t v29 = v27 >> 3;
  if (v29 <= 1) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = v29;
  }
  do
  {
    unsigned int v33 = *(float **)(*(void *)(a1 + 576) + 8 * v28);
    if ((*(uint64_t (**)(float *, uint64_t))(*(void *)v33 + 736))(v33, a2))
    {
      float v34 = (*(float (**)(float *, uint64_t))(*(void *)v33 + 336))(v33, a2) * 0.5;
      (*(void (**)(unsigned char *, float))(*(void *)v15 + 40))(v15, v34);
      (*(void (**)(unsigned char *))(*(void *)v15 + 88))(v15);
      if (!v15[9]) {
        goto LABEL_7;
      }
      (*(void (**)(unsigned char *))(*(void *)v15 + 88))(v15);
      if (v15[10]) {
        goto LABEL_7;
      }
      float32x2_t v35 = *(void (**)(unsigned char *))(*(void *)v15 + 88);
      if (*(unsigned char *)(a1 + 565))
      {
        v35(v15);
        float32x2_t v36 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v47, v48, *((float *)v15 + 4)), v49, *((float *)v15 + 5)), v46, *((float *)v15 + 6)), 1.0 / (v26 + v23 * *((float *)v15 + 4) + v24 * *((float *)v15 + 5) + v25 * *((float *)v15 + 6))));
      }
      else
      {
        v35(v15);
        float32x2_t v36 = *(float32x2_t *)(v15 + 16);
        (*(void (**)(unsigned char *))(*(void *)v15 + 88))(v15);
        float32_t v37 = -*((float *)v15 + 7);
        v60.i32[0] = *((_DWORD *)v15 + 8);
        v60.f32[1] = v37;
        (*(void (**)(float *, uint64_t, float32x2_t *))(*(void *)v33 + 168))(v33, a2, &v60);
      }
      float32x2_t v60 = vsub_f32(v36, *a6);
      uint64_t v38 = *(void *)v33;
      if (a2)
      {
        (*(void (**)(float *, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(v38 + 120))(v33, a4, a5, a6, &v60);
      }
      else
      {
        uint64_t v16 = (*(uint64_t (**)(float *, uint64_t, float32x2_t *, float32x2_t *))(v38 + 80))(v33, a4, a6, &v60);
        if (v16 != 37) {
          goto LABEL_8;
        }
      }
      int v39 = v33 + 18;
      uint64_t v40 = 78;
      if (a2) {
        int v39 = v33 + 78;
      }
      else {
        uint64_t v40 = 18;
      }
      float v41 = v39[2];
      v42.f32[0] = v33[v40];
      int8x16_t v43 = (int8x16_t)xmmword_1A28FC750;
      if (v41 >= v42.f32[0])
      {
        float v44 = v39[3];
        int8x16_t v43 = (int8x16_t)xmmword_1A28FC750;
        if (v44 >= v39[1])
        {
          *(float32x2_t *)v45.f32 = vsub_f32(v36, *a6);
          v45.i64[1] = v45.i64[0];
          v42.f32[1] = v39[1];
          v42.i64[1] = __PAIR64__(LODWORD(v44), LODWORD(v41));
          int8x16_t v43 = (int8x16_t)vaddq_f32(v42, v45);
        }
      }
      v31.i64[0] = v43.i64[0];
      v31.i64[1] = a7->i64[1];
      v32.i64[0] = a7->i64[0];
      v32.i64[1] = v43.i64[1];
      *a7 = vbslq_s8((int8x16_t)vcgtq_f32(v32, v31), v43, *a7);
      (*(void (**)(unsigned char *, float))(*(void *)v15 + 40))(v15, *(float *)(v13 + 16) + v34);
    }
    ++v28;
  }
  while (v30 != v28);
  uint64_t v16 = 37;
  if (v15) {
    goto LABEL_8;
  }
  return v16;
}

void sub_1A1B1772C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

float md::ShieldIconLabelPart::hikerWidth(uint64_t a1, int a2)
{
  uint64_t v2 = (float *)(a1 + 72);
  uint64_t v3 = 312;
  if (a2) {
    uint64_t v2 = (float *)(a1 + 312);
  }
  else {
    uint64_t v3 = 72;
  }
  float v4 = v2[2];
  float v5 = *(float *)(a1 + v3);
  float v6 = 0.0;
  if (v4 < v5) {
    return fmaxf(0.0, 0.0);
  }
  float v8 = v2[3];
  float v9 = v2[1];
  float v10 = 0.0;
  if (v8 >= v9)
  {
    float v6 = v4 - v5;
    float v10 = v8 - v9;
  }
  return fmaxf(v6, v10);
}

double md::LabelPart::createHiker(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  if (*(unsigned char *)(a2 + 565))
  {
    double v9 = 1.0 / *(double *)(a5 + 328);
    float v10 = *(float64x2_t **)(a2 + 16);
    unsigned int v11 = (float64x2_t *)((char *)v10 + 616);
    uint64_t v12 = v10 + 60;
    if (!a3) {
      uint64_t v12 = v11;
    }
    double v13 = -(v9 * v12[1].f64[0]);
    float64x2_t v14 = vmulq_n_f64(*v12, -v9);
    *(double *)double v24 = 1.0 / *(double *)(a5 + 328);
    *(double *)&v24[40] = v9;
    memset(&v24[8], 0, 32);
    long long v27 = *(unint64_t *)&v9;
    long long v25 = 0u;
    long long v26 = 0u;
    float64x2_t v28 = v14;
    *(double *)&long long v29 = v13;
    *((void *)&v29 + 1) = 0x3FF0000000000000;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, BOOL, unsigned char *, void))(*(void *)a4 + 40))(&v23, a4, *(unsigned char *)(a5 + 8) == 0, v24, 0);
    uint64_t v15 = v23;
  }
  else
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t, BOOL, uint64_t, uint64_t))(*(void *)a4 + 40))(v24, a4, *(unsigned char *)(a5 + 8) == 0, a5 + 864, 1);
    uint64_t v15 = *(void *)v24;
  }
  *a1 = v15;
  uint64_t v16 = *(void *)(a2 + 16);
  float v17 = *(double *)(v16 + 232);
  double result = v17;
  *(double *)(v15 + 56) = result;
  LODWORD(result) = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(v15 + 52) = LODWORD(result);
  uint64_t v19 = 992;
  if (!a3) {
    uint64_t v19 = 672;
  }
  uint64_t v20 = *(void *)(v16 + v19);
  if (v20)
  {
    if (!*(unsigned char *)(v20 + 208)) {
      md::GeocentricFrame::_updateMatrix((md::GeocentricFrame *)v20);
    }
    *(unsigned char *)(v15 + 64) = 1;
    gm::operator*<double,4,4,4>((double *)v24, (double *)(v15 + 72), (double *)(v20 + 80));
    long long v21 = *(_OWORD *)&v24[16];
    *(_OWORD *)(v15 + 200) = *(_OWORD *)v24;
    *(_OWORD *)(v15 + 216) = v21;
    long long v22 = v25;
    *(_OWORD *)(v15 + 232) = *(_OWORD *)&v24[32];
    *(_OWORD *)(v15 + 248) = v22;
    *(_OWORD *)(v15 + 264) = v26;
    *(_OWORD *)(v15 + 280) = v27;
    *(float64x2_t *)(v15 + 296) = v28;
    double result = *(double *)&v29;
    *(_OWORD *)(v15 + 312) = v29;
  }
  return result;
}

void sub_1A1B179E4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

void sub_1A1B179EC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

void md::PolylineLabelPlacement::createHiker()
{
}

void sub_1A1B17C7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 328) = v2;
  float v4 = *(std::__shared_weak_count **)(v1 + 384);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  MEMORY[0x1A6239270](v1, 0x10E1C4072222FA1);
  _Unwind_Resume(a1);
}

void md::PolylinePixelHiker::~PolylinePixelHiker(md::PolylinePixelHiker *this)
{
  *(void *)this = &unk_1EF53A560;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 69);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 41) = &unk_1EF542140;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF53A560;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 69);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 41) = &unk_1EF542140;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void md::CurvedTextLabelPart::placeQuads(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, float32x2_t *a7, unsigned char *a8)
{
  v245[1] = *MEMORY[0x1E4F143B8];
  *a8 = 0;
  float v8 = *(uint64_t **)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40) - (void)v8;
  if (!v9)
  {
    *a8 = 1;
    return;
  }
  uint64_t v10 = *v8;
  if (*v8)
  {
    if (*(unsigned char *)(v10 + 61))
    {
      uint64_t v219 = a8;
      uint64_t v220 = a7;
      *(void *)&long long v225 = a4;
      unint64_t v14 = v9 / 88;
      LODWORD(v226) = CGFontGetXHeight(*(CGFontRef *)(v10 + 16));
      LODWORD(v222) = CGFontGetAscent(*(CGFontRef *)(*v8 + 16));
      UnitsPerEuint64_t m = CGFontGetUnitsPerEm(*(CGFontRef *)(*v8 + 16));
      int v17 = UnitsPerEm;
      unint64_t v227 = &v212;
      float v18 = *(float *)(*v8 + 48);
      float v19 = *(float *)(a5 + 16);
      float v20 = *(float *)(a5 + 20);
      v245[0] = 0x8000007F7FFFFFLL;
      size_t v21 = 8 * (v14 + 1);
      MEMORY[0x1F4188790](UnitsPerEm);
      uint64_t v221 = v22;
      LODWORD(v223.f64[0]) = a2;
      int v23 = a2;
      size_t v24 = v14;
      *(void *)&long long v224 = (char *)&v212 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (md::CurvedTextLabelPart::populateGlyphOffsets(v22, v23, v224, (float *)v245))
      {
        if (*(float *)(v225 + 424) > 0.0
          || (float v25 = -(*(float *)(*(void *)(a5 + 112) + 40)
                    + exp2f(*(float *)a5) * -512.0 * *(double *)(*(void *)(a5 + 112) + 32)),
              (float)(*((float *)v245 + 1) - *(float *)v245) <= (float)(*(float *)(v225 + 40) * v25)))
        {
          if (*(unsigned char *)(a5 + 184))
          {
            long long v26 = (unsigned char *)*a6;
            v26[11] = *(unsigned char *)(a5 + 183);
            v26[8] = 1;
            (*(void (**)(unsigned char *, float))(*(void *)v26 + 56))(v26, *(float *)(a5 + 28));
            uint64_t v27 = *a6;
            (*(void (**)(uint64_t))(*(void *)*a6 + 88))(*a6);
            if (*(unsigned char *)(v27 + 10)) {
              return;
            }
            uint64_t v36 = *a6;
            uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)*a6 + 88))(*a6);
            float v35 = 0.0;
            if (!*(unsigned char *)(v36 + 9)) {
              return;
            }
          }
          else
          {
            int v28 = LODWORD(v223.f64[0]);
            if (!LODWORD(v223.f64[0]) && (!*(unsigned char *)(a5 + 176) || !*(unsigned char *)(a5 + 181)))
            {
              if (!md::CurvedTextLabelPart::initializeLayoutDirection(v221, *a6, (float *)v225, *((float *)v245 + 1) - *(float *)v245))return; {
              (*(void (**)(void))(*(void *)*a6 + 16))();
              }
              int v28 = LODWORD(v223.f64[0]);
            }
            uint64_t v29 = *a6;
            *(unsigned char *)(v29 + 11) = *(unsigned char *)(a5 + 176) == 2;
            *(unsigned char *)(v29 + 8) = 1;
            uint64_t v30 = v221 + 960;
            if (v28) {
              uint64_t v30 = v221 + 1152;
            }
            float32x4_t v31 = *(unsigned __int8 **)(v30 + 112);
            uint64_t v32 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v31 + 80))(v31);
            int v33 = v31[45];
            if (v31[45]) {
              char v34 = 1;
            }
            else {
              char v34 = 2;
            }
            if (v33 == 2) {
              char v34 = 0;
            }
            if (v32) {
              LOBYTE(v33) = v34;
            }
            if (v33 == 2)
            {
              float v35 = *(unsigned char *)(*a6 + 11) ? 0.0 : *((float *)v245 + 1);
            }
            else if ((_BYTE)v33)
            {
              float v35 = (float)(*((float *)v245 + 1) + *(float *)v245) * 0.5;
            }
            else
            {
              float v35 = *(unsigned char *)(*a6 + 11) ? *((float *)v245 + 1) : 0.0;
            }
          }
          float v37 = 1.0 / (float)v17;
          float v38 = v37 * (float)(int)v226;
          float v39 = fminf(fmaxf((float)((float)(v19 * 2.1) / v20) + -0.336, 0.0), 0.42);
          float v40 = -(float)(v38 - (float)(v37 * (float)(int)v222));
          uint64_t v222 = -1;
          if (!LODWORD(v223.f64[0]))
          {
            float v41 = *(std::__shared_weak_count **)(a5 + 168);
            *(void *)(a5 + 160) = 0;
            *(void *)(a5 + 168) = 0;
            if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
            uint64_t v42 = v14 >> 1;
            if (v14 <= 7) {
              uint64_t v42 = -1;
            }
            uint64_t v222 = v42;
          }
          float v43 = v38 + (float)(v39 * v40);
          float v44 = v20 / v18;
          MEMORY[0x1F4188790](v32);
          float64x2_t v46 = (float32x2_t *)((char *)&v212 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
          bzero(v46, v45);
          MEMORY[0x1F4188790](v47);
          float64x2_t v49 = (_DWORD *)((char *)&v212 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
          bzero(v49, v48);
          MEMORY[0x1F4188790](v50);
          *(void *)&long long v226 = (char *)&v212 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero((void *)v226, v21);
          unint64_t v51 = 0;
          float64x2_t v52 = (float *)v224;
          uint64_t v218 = v46;
          do
          {
            (*(void (**)(float))(*(void *)*a6 + 32))(*v52 - v35);
            uint64_t v53 = *a6;
            (*(void (**)(uint64_t))(*(void *)*a6 + 88))(*a6);
            if (*(unsigned char *)(v53 + 10)) {
              return;
            }
            uint64_t v54 = *a6;
            (*(void (**)(uint64_t))(*(void *)*a6 + 88))(*a6);
            if (!*(unsigned char *)(v54 + 9)) {
              return;
            }
            uint64_t v55 = *a6;
            (*(void (**)(uint64_t))(*(void *)*a6 + 88))(*a6);
            float32x2_t v56 = *(float32x2_t *)(v55 + 16);
            v46[1].i32[0] = *(_DWORD *)(v55 + 24);
            float32x2_t *v46 = v56;
            uint64_t v57 = *a6;
            (*(void (**)(uint64_t))(*(void *)*a6 + 88))(*a6);
            v49[v51] = *(_DWORD *)(v57 + 48);
            uint64_t v58 = *a6;
            *(void *)(v226 + 8 * v51) = *(void *)(*a6 + 40);
            if (v51)
            {
              if (v222 == v51)
              {
                (*(void (**)(unsigned char *__return_ptr))(*(void *)v58 + 24))(v236);
                long long v59 = *(_OWORD *)v236;
                *(void *)uint64_t v236 = 0;
                *(void *)&v236[8] = 0;
                float32x2_t v60 = *(std::__shared_weak_count **)(a5 + 168);
                *(_OWORD *)(a5 + 160) = v59;
                if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
                long long v61 = *(std::__shared_weak_count **)&v236[8];
                if (*(void *)&v236[8]
                  && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v236[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
            }
            else
            {
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v58 + 24))(v236);
              long long v62 = *(_OWORD *)v236;
              *(void *)uint64_t v236 = 0;
              *(void *)&v236[8] = 0;
              uint64_t v63 = *(std::__shared_weak_count **)(a5 + 136);
              *(_OWORD *)(a5 + 128) = v62;
              if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
              long long v64 = *(std::__shared_weak_count **)&v236[8];
              if (*(void *)&v236[8]
                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v236[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
              if (!*(void *)(a5 + 128)) {
                return;
              }
            }
            ++v51;
            float64x2_t v46 = (float32x2_t *)((char *)v46 + 12);
            v52 += 2;
          }
          while (v51 <= v24);
          (*(void (**)(unsigned char *__return_ptr))(*(void *)*a6 + 24))(v236);
          long long v65 = *(_OWORD *)v236;
          *(void *)uint64_t v236 = 0;
          *(void *)&v236[8] = 0;
          uint64_t v66 = *(std::__shared_weak_count **)(a5 + 152);
          *(_OWORD *)(a5 + 144) = v65;
          if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
          uint64_t v67 = *(std::__shared_weak_count **)&v236[8];
          if (*(void *)&v236[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v236[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
          uint64_t v68 = *(void *)(a5 + 144);
          if (v68)
          {
            if (*(float *)(v225 + 424) <= 0.0
              || (double v69 = (*(double (**)(uint64_t))(*(void *)v68 + 208))(v68),
                  vabdd_f64(v69, (*(double (**)(void))(**(void **)(a5 + 128) + 208))(*(void *)(a5 + 128))) <= *(double *)(*(void *)(a5 + 112) + 32)))
            {
              if (!LODWORD(v223.f64[0]))
              {
                uint64_t v70 = *(float32x2_t **)(v221 + 1008);
                float32x2_t v71 = vsub_f32(*(float32x2_t *)((char *)v218 + 12 * v24), *v218);
                v70[3] = vmul_n_f32(v71, 1.0 / sqrtf(vaddv_f32(vmul_f32(v71, v71))));
                v70[24].i8[5] = 1;
              }
              MEMORY[0x1F4188790](v68);
              unint64_t v217 = (char *)&v212 - ((12 * v24 + 15) & 0xFFFFFFFFFFFFFFF0);
              bzero(v217, 12 * v24);
              MEMORY[0x1F4188790](v72);
              uint64_t v222 = (uint64_t)&v212 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
              bzero((void *)v222, v24);
              uint64_t v76 = 0;
              size_t v77 = 0;
              float v78 = *(float *)v245 - v35;
              v213 = (char *)v218 + 12 * v24;
              if (v24 <= 1) {
                uint64_t v79 = 1;
              }
              else {
                uint64_t v79 = v24;
              }
              uint64_t v215 = v224 + 8;
              uint64_t v216 = (char *)&v218[1] + 4;
              __asm { FMOV            V0.4S, #1.0 }
              float32x4_t v214 = _Q0;
              do
              {
                if (v77 && *(float *)(v224 + 8 * v77) <= *(float *)(v224 + 8 * v77 - 8))
                {
                  *(unsigned char *)(v222 + v77) = 1;
                  uint64_t v85 = v77 + 1;
                }
                else
                {
                  uint64_t v85 = v77 + 1;
                  if (v77 >= v24)
                  {
LABEL_88:
                    if (v77)
                    {
                      *(unsigned char *)(v222 + v77) = 1;
                    }
                    else
                    {
                      uint64_t v93 = v76;
                      (*(void (**)(float))(*(void *)*a6 + 32))(v78);
                      uint64_t v94 = *a6;
                      (*(void (**)(uint64_t))(*(void *)*a6 + 88))(*a6);
                      if (!*(unsigned char *)(v94 + 9)) {
                        return;
                      }
                      uint64_t v95 = *a6;
                      float32x4_t v96 = (float32x4_t)((__n128 (*)(uint64_t))*(void *)(*(void *)*a6 + 88))(*a6);
                      v96.i64[0] = *(void *)v213;
                      v96.i32[2] = *((_DWORD *)v213 + 2);
                      v97.i64[0] = *(void *)(v95 + 16);
                      v97.i32[2] = *(_DWORD *)(v95 + 24);
                      float32x4_t v98 = vsubq_f32(v96, v97);
                      float32x4_t v99 = vmulq_f32(v98, v98);
                      int32x2_t v100 = (int32x2_t)vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1), v99), (float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2)).u64[0];
                      *(float *)v100.i32 = sqrtf(*(float *)v100.i32);
                      if (*(float *)v100.i32 <= 0.01) {
                        return;
                      }
                      v75.i32[3] = v214.i32[3];
                      float32x4_t v74 = vdivq_f32(v214, (float32x4_t)vdupq_lane_s32(v100, 0));
                      float32x4_t v101 = vmulq_f32(v98, v74);
                      unsigned int v102 = &v217[12 * v93];
                      *((_DWORD *)v102 + 2) = v101.i32[2];
                      *(void *)unsigned int v102 = v101.i64[0];
                      uint64_t v76 = v93 + 1;
                      uint64_t v85 = 1;
                    }
                  }
                  else
                  {
                    float v86 = (char *)v218 + 12 * v77;
                    float v87 = &v216[12 * v77];
                    float v88 = (float *)(v215 + 8 * v77);
                    size_t v89 = v77 + 1;
                    while (1)
                    {
                      if (*(float *)(v224 + 8 * v77) < *v88)
                      {
                        v74.i64[0] = *(void *)v87;
                        v74.i32[2] = *((_DWORD *)v87 + 2);
                        v75.i64[0] = *(void *)v86;
                        v75.i32[2] = *((_DWORD *)v86 + 2);
                        float32x4_t v74 = vsubq_f32(v74, v75);
                        float32x4_t v90 = vmulq_f32(v74, v74);
                        float32x4_t v75 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 1), v90), (float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 2));
                        v75.f32[0] = sqrtf(v75.f32[0]);
                        if (v75.f32[0] > 0.01) {
                          break;
                        }
                      }
                      ++v89;
                      v87 += 12;
                      v88 += 2;
                      if (v89 > v24) {
                        goto LABEL_88;
                      }
                    }
                    v75.i32[3] = v214.i32[3];
                    float32x4_t v91 = vmulq_f32(v74, vdivq_f32(v214, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 0)));
                    uint64_t v92 = &v217[12 * v76];
                    *((_DWORD *)v92 + 2) = v91.i32[2];
                    *(void *)uint64_t v92 = v91.i64[0];
                    ++v76;
                  }
                }
                size_t v77 = v85;
              }
              while (v85 != v79);
              MEMORY[0x1F4188790](v73);
              float32x4_t v105 = (char *)&v212 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v106 = 0;
              uint64_t v107 = 0;
              unsigned __int8 v108 = v217;
              v109.n128_u64[0] = (unint64_t)vdup_n_s32(0x3ECCCCCDu);
              v110.n128_u64[0] = (unint64_t)vdup_n_s32(0x3E4CCCCDu);
              v111.n128_u32[0] = 1.0;
              int v112 = LODWORD(v223.f64[0]);
              uint64_t v113 = v222;
              do
              {
                if (*(unsigned char *)(v113 + v107))
                {
                  uint64_t v114 = (float *)&v105[12 * v107];
                  *(void *)uint64_t v114 = *(void *)(v114 - 3);
                  float v115 = *(v114 - 1);
                }
                else
                {
                  uint64_t v116 = &v108[12 * v106];
                  float v117 = *(float *)v116;
                  float32x2_t v118 = *(float32x2_t *)(v116 + 4);
                  uint64_t v119 = v106 + 1;
                  if (v106 + 1 < v103)
                  {
                    uint64_t v120 = &v108[12 * v119];
                    float v117 = v117 + (float)(*(float *)v120 * 0.4);
                    float32x2_t v118 = vmla_f32(v118, (float32x2_t)v109.n128_u64[0], *(float32x2_t *)(v120 + 4));
                    if (v106 + 2 < v103)
                    {
                      uint64_t v121 = &v108[12 * v106 + 24];
                      float v117 = v117 + (float)(*(float *)v121 * 0.2);
                      float32x2_t v118 = vmla_f32(v118, (float32x2_t)v110.n128_u64[0], *(float32x2_t *)(v121 + 4));
                    }
                  }
                  if (v106 - 1 >= 0)
                  {
                    if (v106 == 1) {
                      uint64_t v122 = 1;
                    }
                    else {
                      uint64_t v122 = 2;
                    }
                    uint64_t v123 = (uint64_t)&v108[12 * v106 - 12];
                    uint64_t v124 = (float *)&meanTangentWeights;
                    do
                    {
                      float v125 = *v124++;
                      float v117 = v117 + (float)(*(float *)v123 * v125);
                      float32x2_t v118 = vmla_n_f32(v118, *(float32x2_t *)(v123 + 4), v125);
                      v123 -= 12;
                      --v122;
                    }
                    while (v122);
                  }
                  float32x2_t v126 = vmul_f32(v118, v118);
                  float v127 = 1.0 / sqrtf((float)(v126.f32[0] + (float)(v117 * v117)) + v126.f32[1]);
                  float v115 = vmuls_lane_f32(v127, v118, 1);
                  float32x2_t v128 = (float32x2_t)vdup_lane_s32((int32x2_t)v118, 0);
                  v128.f32[0] = v117;
                  *(float32x2_t *)&v105[12 * v107] = vmul_n_f32(v128, v127);
                  uint64_t v106 = v119;
                }
                *(float *)&v105[12 * v107++ + 8] = v115;
              }
              while (v107 != v79);
              if (v112 == 1)
              {
                (*(void (**)(void, __n128, __n128, __n128))(**(void **)(a5 + 112) + 192))(*(void *)(a5 + 112), v109, v110, v111);
                int v129 = *(unsigned __int8 *)(a5 + 182);
                if (v129 != (*(unsigned int (**)(void))(**(void **)(a5 + 112) + 80))()) {
                  *(unsigned char *)(a5 + 179) = 1;
                }
              }
              uint64_t v130 = 0;
              uint64_t v131 = *(void *)(a3 + 32);
              int v132 = *(unsigned __int8 *)(a5 + 181);
              uint64_t v133 = v131 + 44;
              int v134 = (float *)(v105 + 8);
              unsigned int v135 = (float *)(v226 + 4);
              uint64_t v136 = (float *)(v224 + 4);
              unint64_t v137 = (float *)&v218[1];
              uint64_t v138 = v79;
              uint64_t v139 = (float *)v220;
              uint64_t v140 = v221;
              while (1)
              {
                *(unsigned char *)(v133 + 40) = 0;
                uint64_t v143 = *(void *)(v133 - 44);
                if (!v143 || !*(unsigned char *)(v143 + 61)) {
                  goto LABEL_114;
                }
                int v144 = *(unsigned __int8 *)(v140 + 869);
                if (*(unsigned char *)(v140 + 869))
                {
                  float v145 = *(v134 - 1);
                  float v147 = *(float *)(a5 + 84);
                  float v146 = *(float *)(a5 + 88);
                  float v148 = *(v134 - 2);
                  float v149 = *(float *)(a5 + 80);
                  float v150 = -(float)((float)(v145 * v146) - (float)(*v134 * v147));
                  float v151 = -(float)((float)(v149 * *v134) - (float)(v148 * v146));
                  float v152 = -(float)((float)(v148 * v147) - (float)(v149 * v145));
                  float v153 = 1.0 / sqrtf((float)((float)(v150 * v150) + (float)(v151 * v151)) + (float)(v152 * v152));
                  float v154 = v153 * v150;
                  float v155 = v153 * v151;
                  float v156 = v153 * v152;
                  float v157 = -(float)((float)((float)(v153 * v152) * v148) - (float)(v154 * *v134));
                  *(float *)(v133 + 20) = -(float)((float)(v155 * *v134) - (float)((float)(v153 * v152) * v145));
                  *(float *)(v133 + 24) = v157;
                  *(float *)(v133 + 28) = -(float)((float)(v154 * v145) - (float)(v155 * v148));
                  if (v132 != 2) {
                    goto LABEL_122;
                  }
                }
                else
                {
                  float v148 = *(v134 - 2);
                  float v145 = *(v134 - 1);
                  float v154 = -v145;
                  float v156 = 0.0;
                  float v155 = v148;
                  if (v132 != 2)
                  {
LABEL_122:
                    float v164 = *v136 - (float)((float)(v20 * 0.5) * v43);
                    float v161 = *(v137 - 2) + (float)(v164 * v154);
                    float v162 = *(v137 - 1) + (float)(v164 * v155);
                    float v163 = *v137 + (float)(v164 * v156);
                    *(float *)(v133 + 8) = v148;
                    *(float *)(v133 + 12) = v145;
                    float v156 = *v134;
                    goto LABEL_124;
                  }
                }
                float v158 = (float)(*(float *)(v143 + 32)
                             + (float)((float)(*(float *)(v143 + 40) - *(float *)(v143 + 32)) * 0.5))
                     * v44;
                float v159 = (float)(*(float *)(v143 + 36)
                             + (float)((float)(*(float *)(v143 + 44) - *(float *)(v143 + 36)) * 0.5))
                     * v44;
                if (*(unsigned char *)(v143 + 59))
                {
                  float v160 = *v134;
                  float v161 = *(v137 - 2) - (float)((float)(v159 * v154) + (float)(v148 * v158));
                  float v162 = *(v137 - 1) - (float)((float)(v159 * v155) + (float)(v145 * v158));
                  float v163 = *v137 - (float)((float)(v159 * v156) + (float)(*v134 * v158));
                  *(float *)(v133 + 8) = v148;
                  *(float *)(v133 + 12) = v145;
                  float v156 = v160;
                }
                else
                {
                  float v161 = *(v137 - 2) - (float)((float)(v158 * v154) - (float)(v148 * v159));
                  float v162 = *(v137 - 1) - (float)((float)(v158 * v155) - (float)(v145 * v159));
                  float v163 = *v137 - (float)((float)(v158 * v156) - (float)(*v134 * v159));
                  *(float *)(v133 + 8) = v154;
                  *(float *)(v133 + 12) = v155;
                }
LABEL_124:
                *(float *)(v133 + 16) = v156;
                if (*(unsigned char *)(v140 + 565))
                {
                  *(float *)(v133 - 4) = v161;
                  *(float *)uint64_t v133 = v162;
                  *(float *)(v133 + 4) = v163;
                  if (v144) {
                    goto LABEL_113;
                  }
                  *(_DWORD *)(v133 + 32) = *v49;
                  float v141 = *v135;
                  uint64_t v142 = v131 + 88 * v130 + 64;
                  *(float *)(v133 + 20) = *(v135 - 1);
                }
                else
                {
                  float v141 = v162 - v139[1];
                  *(float *)(v133 - 4) = v161 - *v139;
                  uint64_t v142 = v133 - 4;
                }
                *(float *)(v142 + 4) = v141;
                *(_DWORD *)(v142 + 8) = 0;
LABEL_113:
                *(unsigned char *)(v133 + 40) = 1;
LABEL_114:
                ++v130;
                v133 += 88;
                v134 += 3;
                v135 += 2;
                v136 += 2;
                ++v49;
                v137 += 3;
                if (!--v138)
                {
                  if (*(unsigned char *)(v140 + 565))
                  {
                    *(void *)uint64_t v236 = *(void *)(v225 + 328);
                    uint64_t v237 = *(void *)v236;
                    memset(&v236[8], 0, 32);
                    uint64_t v240 = *(void *)v236;
                    long long v238 = 0u;
                    long long v239 = 0u;
                    uint64_t v241 = 0;
                    long long v242 = *(_OWORD *)(a5 + 56);
                    uint64_t v243 = *(void *)(a5 + 72);
                    uint64_t v244 = 0x3FF0000000000000;
                    gm::operator*<double,4,4,4>((double *)&v228, (double *)(v225 + 864), (double *)v236);
                    double v165 = v229;
                    double v166 = v231;
                    double v167 = v233;
                    long long v225 = v228;
                    long long v226 = v230;
                    float64x2_t v223 = v232;
                    long long v224 = v234;
                    double v168 = v235;
                  }
                  else
                  {
                    long long v226 = xmmword_1A28FCCC0;
                    long long v224 = 0u;
                    long long v225 = xmmword_1A28FCBD0;
                    double v167 = 0.0;
                    double v168 = 1.0;
                    double v166 = 0.0;
                    double v165 = 0.0;
                    float64x2_t v223 = 0u;
                  }
                  md::CollisionObject::resetWithCircles(*(void ***)(a5 + 48), v24);
                  int v170 = *(int8x16_t **)(a5 + 48);
                  uint64_t v171 = *(void *)(a3 + 32) + 44;
                  uint64_t v172 = v220;
                  uint64_t v173 = v221;
                  unint64_t v174 = v219;
                  float64x2_t v176 = (float64x2_t)v225;
                  float64x2_t v175 = (float64x2_t)v226;
                  float64x2_t v178 = v223;
                  float64x2_t v177 = (float64x2_t)v224;
                  while (!*(unsigned char *)(v171 + 40))
                  {
LABEL_131:
                    v171 += 88;
                    if (!--v79)
                    {
                      *unint64_t v174 = 1;
                      return;
                    }
                  }
                  uint64_t v179 = *(void *)(v171 - 44);
                  float v180 = *(float *)(v179 + 32);
                  float v181 = *(float *)(v179 + 40) - v180;
                  float v182 = v181 * 0.5;
                  if (*(unsigned char *)(v179 + 58))
                  {
                    float v180 = 0.0;
                    float v183 = 0.0;
                    float v184 = v181 * 0.5;
                  }
                  else
                  {
                    float v183 = *(float *)(v179 + 36);
                    float v184 = (float)(*(float *)(v179 + 44) - v183) * 0.5;
                  }
                  *(float *)v169.i32 = fmaxf(v182, v184) * v44;
                  float v185 = (float)(v182 + v180) * v44;
                  float v186 = (float)(v184 + v183) * v44;
                  if (*(unsigned char *)(v173 + 869))
                  {
                    if (*(unsigned char *)(v173 + 565))
                    {
                      float v188 = *(float *)(v171 + 12);
                      float v187 = *(float *)(v171 + 16);
                      float v190 = *(float *)(a5 + 84);
                      float v189 = *(float *)(a5 + 88);
                      float v191 = *(float *)(v171 + 8);
                      float v192 = *(float *)(a5 + 80);
                      float v193 = -(float)((float)(v188 * v189) - (float)(v187 * v190));
                      float v194 = -(float)((float)(v192 * v187) - (float)(v191 * v189));
                      float v195 = -(float)((float)(v191 * v190) - (float)(v192 * v188));
                      float v196 = v186 / sqrtf((float)((float)(v193 * v193) + (float)(v194 * v194)) + (float)(v195 * v195));
                      v197.f32[0] = (float)(*(float *)(v171 - 4) + (float)(v191 * v185)) + (float)(v196 * v193);
                      float v198 = (float)(*(float *)v171 + (float)(v188 * v185)) + (float)(v196 * v194);
                      float v199 = (float)(*(float *)(v171 + 4) + (float)(v187 * v185)) + (float)(v196 * v195);
                      goto LABEL_141;
                    }
                    v197.i64[0] = 0;
                  }
                  else
                  {
                    float v200 = *(float *)(v171 + 8);
                    float v201 = *(float *)(v171 + 12);
                    float v202 = v200 * v186;
                    float v203 = -(float)((float)(v201 * v186) - (float)(v200 * v185));
                    float v204 = v202 + (float)(v201 * v185);
                    v197.f32[0] = *(float *)(v171 - 4) + v203;
                    if (*(unsigned char *)(v173 + 565))
                    {
                      float v199 = *(float *)(v171 + 4);
                      float v198 = *(float *)v171 + v204;
LABEL_141:
                      *(float32x2_t *)v197.f32 = vsub_f32(vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v177, v176, v197.f32[0]), v175, v198), v178, v199), 1.0 / (v168 + v165 * v197.f32[0] + v166 * v198 + v167 * v199))), *v172);
                      *(float *)v169.i32 = *(float *)(a5 + 104) * *(float *)v169.i32;
                    }
                    else
                    {
                      v197.f32[1] = *(float *)v171 + v204;
                    }
                  }
                  uint64_t v205 = v170[10].i64[1];
                  unsigned __int32 v206 = v170[11].u32[0];
                  v170[11].i32[0] = v206 + 1;
                  uint64_t v207 = v205 + 12 * v206;
                  *(void *)uint64_t v207 = v197.i64[0];
                  *(_DWORD *)(v207 + 8) = v169.i32[0];
                  if (*(float *)v169.i32 != 0.0)
                  {
                    v197.i64[1] = v197.i64[0];
                    float32x4_t v208 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v169.i8, 0);
                    v209.i64[0] = vsubq_f32(v197, v208).u64[0];
                    v209.i64[1] = vaddq_f32(v197, v208).i64[1];
                    v210.i64[0] = v209.i64[0];
                    v210.i64[1] = v170->i64[1];
                    v211.i64[0] = v170->i64[0];
                    v211.i64[1] = v209.i64[1];
                    int8x16_t v169 = vbslq_s8((int8x16_t)vcgtq_f32(v211, v210), v209, *v170);
                    *int v170 = v169;
                  }
                  goto LABEL_131;
                }
              }
            }
          }
        }
      }
    }
  }
}

void md::PolylinePixelHiker::validateIfNeeded(md::PolylinePixelHiker *this)
{
  if (*((unsigned char *)this + 8)) {
    md::PolylinePixelHiker::validate(this);
  }
}

void md::PolylinePixelHiker::moveCursor(md::PolylinePixelHiker *this, float a2)
{
  if (*((unsigned char *)this + 8)) {
    md::PolylinePixelHiker::validate(this);
  }
  *((float *)this + 192) = *((float *)this + 192) + a2;
  if (*((unsigned char *)this + 11)) {
    float v5 = -a2;
  }
  else {
    float v5 = a2;
  }
  uint64_t v6 = *((void *)this + 86);
  float v7 = *((float *)this + 174);
  float v8 = *((float *)this + 175);
  uint64_t v9 = *((void *)this + 88);
  float v10 = *((float *)this + 190);
  v11.i64[0] = v9;
  v11.i64[1] = v6;
  if (v10 == 0.0)
  {
    float v13 = *((float *)this + 175);
    v2.n128_u32[0] = *((_DWORD *)this + 174);
  }
  else
  {
    v2.n128_f32[0] = v7 + (float)(*((float *)this + 182) * v10);
    v12.i64[0] = *((void *)this + 92);
    v12.i64[1] = *((void *)this + 90);
    float v13 = v8 + (float)(*((float *)this + 183) * v10);
    float32x4_t v11 = vmlaq_n_f32(v11, v12, v10);
  }
  float v14 = v11.f32[2];
  v15.i32[0] = vdup_laneq_s32((int32x4_t)v11, 3).u32[0];
  v15.i32[1] = v2.n128_u32[0];
  float32x2_t v16 = vsub_f32(v15, *(float32x2_t *)v11.f32);
  float32x2_t v17 = vmul_f32(v16, v16);
  float v18 = sqrtf((float)(v17.f32[0] + (float)((float)(v11.f32[2] - v13) * (float)(v11.f32[2] - v13))) + v17.f32[1]);
  float v19 = v5 + (float)(v18 * *((float *)this + 191));
  uint64_t v112 = 0;
  long long v110 = 0u;
  long long v111 = 0u;
  *(_DWORD *)uint64_t v113 = 2139095039;
  *(_WORD *)&v113[4] = 0;
  v113[6] = 0;
  if (v19 >= 0.0 && v19 <= v18)
  {
    float v81 = *((float *)&v9 + 1);
    float v82 = *((float *)&v6 + 1);
    goto LABEL_56;
  }
  float v103 = v13;
  __n128 v104 = (__n128)v11;
  __n128 v105 = v2;
  char v21 = md::PolylinePixelHiker::moveAlongEdgeInDirection(this, v5 >= 0.0, (md::LabelPoint *)&v110);
  if (!*((unsigned char *)this + 9)) {
    return;
  }
  if ((v21 & 1) == 0)
  {
    float v8 = *((float *)this + 175);
    LODWORD(v6) = *((_DWORD *)this + 172);
    LODWORD(v9) = *((_DWORD *)this + 176);
    float v82 = *((float *)this + 173);
    float v81 = *((float *)this + 177);
    float v7 = *((float *)this + 174);
    float32x4_t v11 = (float32x4_t)v104;
    v2.n128_u32[0] = v105.n128_u32[0];
    float v13 = v103;
LABEL_56:
    *((float *)this + 191) = v19 / v18;
    float v83 = v2.n128_f32[0] + (float)((float)(v19 / v18) * (float)(v11.f32[1] - v2.n128_f32[0]));
    float32x2_t v84 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
    v84.f32[0] = v13;
    float32x2_t v85 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    *((float32x2_t *)this + 2) = vmla_n_f32(v85, vsub_f32(v84, v85), v19 / v18);
    *((float *)this + 6) = v83;
    float v86 = *((float *)this + 178);
    v84.i32[0] = *((_DWORD *)this + 179);
    v85.f32[0] = v86 + (float)((float)(v84.f32[0] - v86) * (float)(v19 / v18));
    float v87 = v86 - v84.f32[0];
    float v88 = (float)((float)((float)(v8 - *(float *)&v6) * (float)(v8 - *(float *)&v6))
                + (float)((float)(*(float *)&v9 - v82) * (float)(*(float *)&v9 - v82)))
        + (float)((float)(v81 - v7) * (float)(v81 - v7));
    float v89 = sqrtf(v88);
    float v90 = 1.0 / sqrtf(v88 + (float)(v87 * v87));
    *((float *)this + 10) = v90 * v87;
    *((float *)this + 11) = v90 * v89;
    *((_DWORD *)this + 12) = v85.i32[0];
    BOOL v91 = (float)(v19 / v18) < 0.0;
    BOOL v92 = (float)(v19 / v18) <= 1.0;
LABEL_57:
    if (!v92) {
      BOOL v91 = 1;
    }
    *((unsigned char *)this + 10) = v91;
    return;
  }
  uint64_t v22 = *((void *)this + 68);
  __n128 v23 = v104;
  if (!v22
    || *((_DWORD *)this + 146) != *(_DWORD *)(v22 + 252)
    || (uint64_t v24 = *((void *)this + 71)) == 0
    || *((__int16 *)this + 289) < 0
    || (unsigned int v25 = *((unsigned __int8 *)this + 540),
        unint64_t v26 = *((unsigned __int16 *)this + 289),
        unint64_t v27 = (*(uint64_t (**)(__n128))(**(void **)v24 + 16))(v104),
        __n128 v23 = v104,
        v27 <= v26)
    || (v28 = (*(uint64_t (**)(void, void, __n128))(***((void ***)this + 71) + 32))(**((void **)this + 71), *((__int16 *)this + 289), v104), __n128 v23 = v104, *(unsigned __int8 *)(v28 + 2) <= v25))
  {
    uint64_t v29 = (uint64_t *)((char *)this + 688);
    float v30 = v5 * v5;
    float32x4_t v31 = (_DWORD *)((char *)this + 680);
    uint64_t v32 = (_DWORD *)((char *)this + 632);
    float v33 = v23.n128_f32[1];
    float v34 = v23.n128_f32[3];
    while (1)
    {
      if (v5 < 0.0)
      {
        uint64_t v39 = *v29;
        *((_DWORD *)this + 177) = *((_DWORD *)this + 174);
        *(void *)((char *)this + 700) = v39;
        *((_DWORD *)this + 179) = *((_DWORD *)this + 178);
        uint64_t v40 = *((void *)this + 90);
        *((_DWORD *)this + 185) = *((_DWORD *)this + 182);
        *(void *)((char *)this + 732) = v40;
        long long v41 = *((_OWORD *)this + 38);
        *((_OWORD *)this + 40) = *((_OWORD *)this + 37);
        *((_OWORD *)this + 41) = v41;
        *((void *)this + 84) = *((void *)this + 78);
        _DWORD *v31 = *v32;
        *(_DWORD *)((char *)this + 683) = *(_DWORD *)((char *)this + 635);
      }
      else
      {
        uint64_t v35 = *(void *)((char *)this + 700);
        *((_DWORD *)this + 174) = *((_DWORD *)this + 177);
        *uint64_t v29 = v35;
        *((_DWORD *)this + 178) = *((_DWORD *)this + 179);
        uint64_t v36 = *(void *)((char *)this + 732);
        *((_DWORD *)this + 182) = *((_DWORD *)this + 185);
        *((void *)this + 90) = v36;
        long long v37 = *((_OWORD *)this + 41);
        *((_OWORD *)this + 37) = *((_OWORD *)this + 40);
        *((_OWORD *)this + 38) = v37;
        *((void *)this + 78) = *((void *)this + 84);
        _DWORD *v32 = *v31;
        float v14 = v103;
        __n128 v38 = v104;
        float v34 = v104.n128_f32[0];
        v38.n128_f32[0] = v33;
        __n128 v105 = v38;
        *(_DWORD *)((char *)this + 635) = *(_DWORD *)((char *)this + 683);
      }
      int v107 = 0;
      int v42 = md::RoadHiker::pixelForPoint((uint64_t)this, (md::LabelPoint *)&v110, (float32x2_t *)&v108, (float *)&v107);
      *((unsigned char *)this + 9) = v42;
      if (!v42) {
        return;
      }
      LODWORD(v45) = v108;
      if (v5 < 0.0)
      {
        *((_DWORD *)this + 172) = v108;
        float v46 = *((float *)&v108 + 1);
        float v47 = v109;
        *((_DWORD *)this + 173) = HIDWORD(v108);
        *((float *)this + 174) = v47;
        *((_DWORD *)this + 178) = v107;
        long long v58 = v111;
        *((_OWORD *)this + 37) = v110;
        *((_OWORD *)this + 38) = v58;
        *((void *)this + 78) = v112;
        _DWORD *v32 = *(_DWORD *)v113;
        float v59 = *((float *)this + 190);
        *(_DWORD *)((char *)this + 635) = *(_DWORD *)&v113[3];
        if (v59 == 0.0)
        {
          float v57 = v14;
          v44.n128_f32[0] = v34;
        }
        else
        {
          v106.i32[0] = -1;
          int PointCoordinateAtOffset = md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this + 544, -1, (uint64_t)&v106);
          if (PointCoordinateAtOffset)
          {
            uint64_t v61 = *(void *)(*(void *)(*((void *)this + 70) + 8) + 16 * v106.i16[0]);
            long long v62 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, void))(*(void *)v61 + 24))(v61, v106.i16[1]);
            md::RoadHiker::pixelForPoint((uint64_t)this, v62, &v106, 0);
          }
          float v63 = md::PolylinePixelHiker::computeBisector(this, (uint64_t)&v106, PointCoordinateAtOffset, (uint64_t *)this + 86, (uint64_t *)((char *)this + 700), 1, (md::LabelPoint *)&v110);
          *((float *)this + 180) = v63;
          *((float *)this + 181) = v64;
          *((float *)this + 182) = v65;
          float v66 = *((float *)this + 190);
          float v45 = *((float *)this + 172) + (float)(v66 * v63);
          float v46 = *((float *)this + 173) + (float)(v66 * v64);
          float v47 = *((float *)this + 174) + (float)(v66 * v65);
          float v57 = v14;
          v44.n128_f32[0] = v34;
          unint64_t v108 = __PAIR64__(LODWORD(v46), LODWORD(v45));
          float v109 = v47;
        }
        float v33 = v105.n128_f32[0];
        float v14 = v45;
        float v34 = v46;
        v43.n128_f32[0] = v47;
        if (!*((unsigned char *)this + 772)) {
          goto LABEL_40;
        }
      }
      else
      {
        *((_DWORD *)this + 175) = v108;
        float v46 = *((float *)&v108 + 1);
        float v47 = v109;
        *((_DWORD *)this + 176) = HIDWORD(v108);
        *((float *)this + 177) = v47;
        *((_DWORD *)this + 179) = v107;
        long long v48 = v111;
        *((_OWORD *)this + 40) = v110;
        *((_OWORD *)this + 41) = v48;
        *((void *)this + 84) = v112;
        _DWORD *v31 = *(_DWORD *)v113;
        float v49 = *((float *)this + 190);
        *(_DWORD *)((char *)this + 683) = *(_DWORD *)&v113[3];
        if (v49 != 0.0)
        {
          v106.i32[0] = -1;
          int v50 = md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this + 544, 2, (uint64_t)&v106);
          if (v50)
          {
            uint64_t v51 = *(void *)(*(void *)(*((void *)this + 70) + 8) + 16 * v106.i16[0]);
            float64x2_t v52 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, void))(*(void *)v51 + 24))(v51, v106.i16[1]);
            md::RoadHiker::pixelForPoint((uint64_t)this, v52, &v106, 0);
          }
          float v53 = md::PolylinePixelHiker::computeBisector(this, (uint64_t)this + 688, 1, (uint64_t *)((char *)this + 700), (uint64_t *)&v106, v50, (md::LabelPoint *)&v110);
          *((float *)this + 183) = v53;
          *((float *)this + 184) = v54;
          *((float *)this + 185) = v55;
          float v56 = *((float *)this + 190);
          float v45 = *((float *)this + 175) + (float)(v56 * v53);
          float v46 = *((float *)this + 176) + (float)(v56 * v54);
          float v47 = *((float *)this + 177) + (float)(v56 * v55);
        }
        float v57 = v45;
        v44.n128_f32[0] = v46;
        float v33 = v47;
        __n128 v43 = v105;
        if (!*((unsigned char *)this + 772)) {
          goto LABEL_40;
        }
      }
      if ((float)((float)((float)(*((float *)this + 186) * (float)(v57 - v14))
                         + (float)(*((float *)this + 187) * (float)(v44.n128_f32[0] - v34)))
                 + (float)(*((float *)this + 188) * (float)(v33 - v43.n128_f32[0]))) <= 0.0)
        break;
LABEL_40:
      float v103 = v57;
      __n128 v104 = v44;
      __n128 v105 = v43;
      float v67 = (float)((float)((float)(v45 - *((float *)this + 4)) * (float)(v45 - *((float *)this + 4)))
                  + (float)((float)(v46 - *((float *)this + 5)) * (float)(v46 - *((float *)this + 5))))
          + (float)((float)(v47 - *((float *)this + 6)) * (float)(v47 - *((float *)this + 6)));
      if (v67 <= v30)
      {
        char v68 = md::PolylinePixelHiker::moveAlongEdgeInDirection(this, v5 >= 0.0, (md::LabelPoint *)&v110);
        if (!*((unsigned char *)this + 9)) {
          return;
        }
        if (v68) {
          continue;
        }
      }
      float v69 = v103 - v14;
      float v70 = v104.n128_f32[0] - v34;
      float v71 = v33 - v105.n128_f32[0];
      float v72 = sqrtf((float)((float)(v69 * v69) + (float)(v70 * v70)) + (float)(v71 * v71));
      float v73 = 1.0;
      *((float *)this + 7) = (float)(v103 - v14) * (float)(1.0 / v72);
      *((float *)this + 8) = (float)(v104.n128_f32[0] - v34) * (float)(1.0 / v72);
      *((float *)this + 9) = (float)(v33 - v105.n128_f32[0]) * (float)(1.0 / v72);
      if (v5 >= 0.0) {
        float v74 = 0.0;
      }
      else {
        float v74 = 1.0;
      }
      if (v5 < 0.0) {
        float v73 = 0.0;
      }
      if (v67 <= v30)
      {
        float v75 = v5 / v72;
        float v76 = *((float *)this + 4);
        float v77 = *((float *)this + 5);
        float v78 = *((float *)this + 6);
        float v79 = (float)(v5 / v72) + v73;
        if ((float)((float)((float)((float)((float)(v14 + (float)(v79 * v69)) - v76)
                                   * (float)((float)(v14 + (float)(v79 * v69)) - v76))
                           + (float)((float)((float)(v34 + (float)(v79 * v70)) - v77)
                                   * (float)((float)(v34 + (float)(v79 * v70)) - v77)))
                   + (float)((float)((float)(v105.n128_f32[0] + (float)(v79 * v71)) - v78)
                           * (float)((float)(v105.n128_f32[0] + (float)(v79 * v71)) - v78))) <= v30)
        {
          float v80 = v79 + v75;
          if ((float)((float)((float)((float)((float)(v14 + (float)((float)(v79 + v75) * v69)) - v76)
                                     * (float)((float)(v14 + (float)((float)(v79 + v75) * v69)) - v76))
                             + (float)((float)((float)(v34 + (float)((float)(v79 + v75) * v70)) - v77)
                                     * (float)((float)(v34 + (float)((float)(v79 + v75) * v70)) - v77)))
                     + (float)((float)((float)(v105.n128_f32[0] + (float)((float)(v79 + v75) * v71)) - v78)
                             * (float)((float)(v105.n128_f32[0] + (float)((float)(v79 + v75) * v71)) - v78))) > v30)
          {
            float v73 = (float)(v5 / v72) + v73;
            float v79 = v79 + v75;
          }
          else
          {
            float v79 = v80 + v75;
            if ((float)((float)((float)((float)((float)(v14 + (float)((float)(v80 + v75) * v69)) - v76)
                                       * (float)((float)(v14 + (float)((float)(v80 + v75) * v69)) - v76))
                               + (float)((float)((float)(v34 + (float)((float)(v80 + v75) * v70)) - v77)
                                       * (float)((float)(v34 + (float)((float)(v80 + v75) * v70)) - v77)))
                       + (float)((float)((float)(v105.n128_f32[0] + (float)((float)(v80 + v75) * v71)) - v78)
                               * (float)((float)(v105.n128_f32[0] + (float)((float)(v80 + v75) * v71)) - v78))) > v30)
            {
              float v73 = v80;
            }
            else
            {
              float v73 = v80 + v75;
              float v79 = v79 + v75;
              if ((float)((float)((float)((float)((float)(v14 + (float)(v79 * v69)) - v76)
                                         * (float)((float)(v14 + (float)(v79 * v69)) - v76))
                                 + (float)((float)((float)(v34 + (float)(v79 * v70)) - v77)
                                         * (float)((float)(v34 + (float)(v79 * v70)) - v77)))
                         + (float)((float)((float)(v105.n128_f32[0] + (float)(v79 * v71)) - v78)
                                 * (float)((float)(v105.n128_f32[0] + (float)(v79 * v71)) - v78))) <= v30)
                break;
            }
          }
        }
        float v72 = fabsf(v75) * v72;
        float v74 = v73;
        float v73 = v79;
      }
      for (; v72 > 0.5; float v72 = v72 * 0.5)
      {
        float v93 = (float)(v73 + v74) * 0.5;
        float v94 = (float)(v34 + (float)(v93 * v70)) - *((float *)this + 5);
        if ((float)((float)((float)((float)((float)(v14 + (float)(v93 * v69)) - *((float *)this + 4))
                                   * (float)((float)(v14 + (float)(v93 * v69)) - *((float *)this + 4)))
                           + (float)(v94 * v94))
                   + (float)((float)((float)(v105.n128_f32[0] + (float)(v93 * v71)) - *((float *)this + 6))
                           * (float)((float)(v105.n128_f32[0] + (float)(v93 * v71)) - *((float *)this + 6)))) >= v30)
          float v73 = (float)(v73 + v74) * 0.5;
        else {
          float v74 = (float)(v73 + v74) * 0.5;
        }
      }
      *((float *)this + 191) = v73;
      *((float *)this + 4) = v14 + (float)(v73 * v69);
      *((float *)this + 5) = v34 + (float)(v73 * v70);
      *((float *)this + 6) = v105.n128_f32[0] + (float)(v73 * v71);
      float v95 = *((float *)this + 178);
      float v96 = *((float *)this + 179);
      *((float *)this + 12) = v95 + (float)((float)(v96 - v95) * v73);
      float v97 = v95 - v96;
      float v98 = *((float *)this + 175) - *((float *)this + 172);
      float v99 = *((float *)this + 176) - *((float *)this + 173);
      float v100 = (float)((float)(v98 * v98) + (float)(v99 * v99))
           + (float)((float)(*((float *)this + 177) - *((float *)this + 174))
                   * (float)(*((float *)this + 177) - *((float *)this + 174)));
      float v101 = sqrtf(v100);
      float v102 = 1.0 / sqrtf(v100 + (float)(v97 * v97));
      *((float *)this + 10) = v102 * v97;
      *((float *)this + 11) = v102 * v101;
      BOOL v91 = v73 < 0.0;
      BOOL v92 = v73 <= 1.0;
      goto LABEL_57;
    }
  }
  *((unsigned char *)this + 9) = 0;
}

uint64_t md::PolylinePixelHiker::setCursor(md::PolylinePixelHiker *this, float a2)
{
  return (*(uint64_t (**)(float))(*(void *)this + 40))(a2 - *((float *)this + 192));
}

void md::PolylinePixelHiker::getCursorPosition(md::PolylinePixelHiker *this)
{
  (*(void (**)(md::PolylinePixelHiker *))(*(void *)this + 88))(this);
  uint64_t v2 = *((void *)this + 69);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1A1B19C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3 - 80);
  _Unwind_Resume(a1);
}

void md::PolylineLabelPlacement::lineOffset(md::PolylineLabelPlacement *this, double a2)
{
  uint64_t v5 = *((void *)this + 6);
  uint64_t v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  uint64_t v4 = v5;
  if (!v5 || *((_DWORD *)this + 22) != *(_DWORD *)(v4 + 252) || !*((void *)this + 9) || *((__int16 *)this + 41) < 0) {
    md::LabelLineResolvedPosition::moveOntoPathForZoom(v3, *((unsigned __int8 *)this + 212), a2);
  }
  uint64_t v6 = *((void *)this + 8);
  unint64_t v7 = *((__int16 *)this + 40);
  uint64_t v8 = *(void *)(v6 + 8);
  if (v7 < (*(void *)(v6 + 16) - v8) >> 4)
  {
    double v9 = 0.0;
    if (!*((_WORD *)this + 40)) {
      goto LABEL_16;
    }
    if (*((_WORD *)this + 40) == 1)
    {
      unint64_t v10 = 0;
    }
    else
    {
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFELL;
      float32x4_t v11 = (uint64_t *)(v8 + 16);
      double v12 = 0.0;
      unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFFELL;
      double v14 = 0.0;
      do
      {
        uint64_t v15 = *(v11 - 2);
        uint64_t v16 = *v11;
        v11 += 4;
        double v12 = *(double *)(v15 + 8) + v12;
        double v14 = *(double *)(v16 + 8) + v14;
        v13 -= 2;
      }
      while (v13);
      double v9 = v14 + v12;
      if (v10 == v7)
      {
LABEL_16:
        float v20 = (unsigned __int8 **)(v8 + 16 * v7);
        char v21 = *v20;
        unint64_t v22 = *((__int16 *)this + 41);
        if ((unint64_t)*((unsigned __int16 *)*v20 + 23) - 1 > v22)
        {
          unint64_t v23 = 0;
          double v24 = *((float *)this + 21);
          double v25 = 0.0;
          do
          {
            unint64_t v26 = (md::LabelPoint *)(*(uint64_t (**)(unsigned __int8 *, unint64_t))(*(void *)v21 + 24))(v21, v23);
            unint64_t v27 = (const md::LabelPoint *)(*(uint64_t (**)(unsigned __int8 *, unint64_t))(*(void *)v21 + 24))(v21, v23 + 1);
            md::LabelPoint::vectorToPoint(v26, v27, v21[33]);
            double v31 = sqrt(v28 * v28 + v29 * v29 + v30 * v30);
            BOOL v32 = v23 == v22;
            if (v23 >= v22) {
              double v33 = v24;
            }
            else {
              double v33 = 1.0;
            }
            double v25 = v25 + v31 * v33;
            ++v23;
          }
          while (!v32);
        }
        return;
      }
    }
    unint64_t v17 = v7 - v10;
    float v18 = (uint64_t *)(v8 + 16 * v10);
    do
    {
      uint64_t v19 = *v18;
      v18 += 2;
      double v9 = *(double *)(v19 + 8) + v9;
      --v17;
    }
    while (v17);
    goto LABEL_16;
  }
}

uint64_t md::CurvedTextLabelPart::populateGlyphOffsets(uint64_t a1, int a2, uint64_t a3, float *a4)
{
  uint64_t v4 = 592;
  if (!a2) {
    uint64_t v4 = 576;
  }
  uint64_t v5 = *(void **)(a1 + v4);
  uint64_t v6 = (char *)v5[4];
  unint64_t v7 = (char *)v5[5];
  int64_t v8 = v7 - v6;
  if (v7 == v6) {
    return 0;
  }
  uint64_t v9 = *(void *)v6;
  if (!*(void *)v6 || !*(unsigned char *)(v9 + 61)) {
    return 0;
  }
  uint64_t v12 = (unsigned __int128)(v8 * (__int128)0x2E8BA2E8BA2E8BA3) >> 64;
  uint64_t v14 = *(void *)(a1 + 32);
  if (a2 == 1)
  {
    float v15 = *(float *)(v14 + 68) * *(float *)(a1 + 740);
    uint64_t v16 = a1 + 1152;
  }
  else
  {
    float v15 = *(float *)(v14 + 20) * *(float *)(a1 + 628);
    if (a2) {
      uint64_t v16 = a1 + 1152;
    }
    else {
      uint64_t v16 = a1 + 960;
    }
  }
  uint64_t v13 = v12 >> 4;
  unint64_t v18 = (v12 >> 4) + ((unint64_t)v12 >> 63);
  float v19 = v15 / *(float *)(v9 + 48);
  if (*(unsigned char *)(v16 + 181) == 2)
  {
    float v20 = v15 * 0.5;
    float v21 = v19 * 0.5;
    if (v18 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v13 + ((unint64_t)v12 >> 63);
    }
    unint64_t v23 = (float *)(a3 + 4);
    float v24 = 0.0;
    float v25 = -3.4028e38;
    float v26 = 3.4028e38;
    float v27 = 0.0;
    do
    {
      uint64_t v29 = *(void *)v6;
      if (*(void *)v6 && *(unsigned char *)(v29 + 61))
      {
        if (*(unsigned char *)(v29 + 59))
        {
          float v30 = v21 * (float)(*(float *)(v29 + 40) - *(float *)(v29 + 32));
          float v28 = fmaxf(v20, v30);
        }
        else
        {
          float v30 = v21 * (float)(*(float *)(v29 + 44) - *(float *)(v29 + 36));
          float v28 = v20;
        }
        float v27 = (float)(v24 + v27) + v28;
        if (a3)
        {
          *(v23 - 1) = v27;
          float *v23 = 0.0;
        }
        float v26 = fminf(v26, v27 - v30);
        float v25 = fmaxf(v25, v27 + v30);
      }
      else
      {
        float v28 = v24;
      }
      v23 += 2;
      v6 += 88;
      float v24 = v28;
      --v22;
    }
    while (v22);
  }
  else
  {
    if (v18 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v13 + ((unint64_t)v12 >> 63);
    }
    BOOL v32 = (uint64_t *)(v6 + 32);
    float v25 = -3.4028e38;
    float v26 = 3.4028e38;
    if (a3)
    {
      double v33 = (uint64_t *)a3;
      do
      {
        uint64_t v34 = *v32;
        uint64_t *v33 = *v32;
        uint64_t v35 = *(v32 - 4);
        if (v35 && *(unsigned char *)(v35 + 61))
        {
          float v26 = fminf(v26, *(float *)&v34 + (float)(*(float *)(v35 + 32) * v19));
          float v25 = fmaxf(v25, *(float *)&v34 + (float)(*(float *)(v35 + 40) * v19));
        }
        ++v33;
        v32 += 11;
        --v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        uint64_t v36 = *(v32 - 4);
        if (v36 && *(unsigned char *)(v36 + 61))
        {
          float v26 = fminf(v26, *(float *)v32 + (float)(*(float *)(v36 + 32) * v19));
          float v25 = fmaxf(v25, *(float *)v32 + (float)(*(float *)(v36 + 40) * v19));
        }
        v32 += 11;
        --v31;
      }
      while (v31);
    }
  }
  unint64_t v37 = v18 - 2;
  if (v18 >= 2)
  {
    if (*(unsigned char *)(a1 + 1416))
    {
      float v38 = *(float *)(v16 + 188);
      if (v38 > 0.0)
      {
        double v39 = *(double *)(a1 + 1424);
        float v40 = (float)(v26 - v25) + v39 * 409.600006 * exp2f(*(float *)v16) * *(float *)(v16 + 36);
        if (v40 > 0.0)
        {
          uint64_t v41 = v5[2];
          if (*(unsigned char *)(*(void *)v41 + 131))
          {
            unint64_t v42 = v18 - 1;
            float v43 = (float)(v18 - 1);
            float v44 = fminf(v40 / v43, v38);
            if (a3)
            {
              if (v18 >= 3)
              {
                uint64_t v45 = 1;
                if (a3 + 8 + 8 * v37 >= a3 + 8 && !(v37 >> 61))
                {
                  uint64_t v53 = 0;
                  unint64_t v54 = v42 & 0xFFFFFFFFFFFFFFFELL;
                  float v55 = (float *)(a3 + 16);
                  do
                  {
                    float v56 = *v55 + (float)(v44 * (float)(unint64_t)(v53 + 2));
                    *(v55 - 2) = *(v55 - 2) + (float)(v44 * (float)(unint64_t)(v53 + 1));
                    float *v55 = v56;
                    v55 += 4;
                    v53 += 2;
                  }
                  while (v54 != v53);
                  if (v42 == v54) {
                    goto LABEL_62;
                  }
                  uint64_t v45 = v42 | 1;
                }
              }
              else
              {
                uint64_t v45 = 1;
              }
              float v57 = (float *)(a3 + 8 * v45);
              do
              {
                *float v57 = *v57 + (float)(v44 * (float)(unint64_t)v45);
                v57 += 2;
                ++v45;
              }
              while (v18 != v45);
            }
LABEL_62:
            float v25 = v25 + (float)(v44 * v43);
            goto LABEL_63;
          }
          if (*(unsigned char *)(*(void *)v41 + 132))
          {
            unsigned int v46 = *(unsigned __int8 *)(v41 + 123);
            if (v46 >= 2)
            {
              float v43 = (float)(v46 - 1);
              float v44 = fminf(v40 / v43, v38);
              if (a3)
              {
                int v47 = 0;
                uint64_t v48 = *(void *)(v41 + 56);
                unint64_t v49 = v18 - 1;
                int v50 = (float *)(a3 + 8);
                uint64_t v51 = (unsigned __int8 *)(v48 + 43);
                do
                {
                  int v52 = *v51;
                  v51 += 24;
                  v47 += v52;
                  *int v50 = *v50 + (float)(v44 * (float)v47);
                  v50 += 2;
                  --v49;
                }
                while (v49);
              }
              goto LABEL_62;
            }
          }
        }
      }
    }
  }
LABEL_63:
  if (a3)
  {
    uint64_t v58 = a3 + 8 * v18;
    *(float *)uint64_t v58 = v25;
    *(_DWORD *)(v58 + 4) = 0;
  }
  *a4 = v26;
  a4[1] = v25;
  return 1;
}

uint64_t md::PolylinePixelHiker::setPathOffset(uint64_t this, float a2)
{
  *(float *)(this + 760) = a2;
  return this;
}

uint64_t md::CurvedTextLabelPart::findLineLayoutDirection(uint64_t a1, int a2, int a3, uint64_t a4, float a5, __n128 a6, __n128 a7)
{
  *(unsigned char *)(a1 + 11) = 0;
  *(unsigned char *)(a1 + 8) = 1;
  a6.n128_u64[0] = 0;
  a7.n128_f32[0] = a5 * -0.5;
  float v10 = a5 * 0.5;
  if (a3 == 2)
  {
    a7.n128_f32[0] = -a5;
    float v10 = 0.0;
  }
  if (a3) {
    float v11 = a7.n128_f32[0];
  }
  else {
    float v11 = 0.0;
  }
  if (a3) {
    float v12 = v10;
  }
  else {
    float v12 = a5;
  }
  (*(void (**)(uint64_t, float, __n128, __n128))(*(void *)a1 + 32))(a1, (float)(v12 + v11) * 0.5, a6, a7);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  v27.i32[2] = *(_DWORD *)(a1 + 36);
  v27.i64[0] = *(void *)(a1 + 28);
  float32x4_t v25 = v27;
  if (a2) {
    (*(void (**)(uint64_t, float32x4_t *))(*(void *)a1 + 72))(a1, &v27);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t, float))(*(void *)a1 + 32))(a1, v11);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  float32x4_t v13 = (float32x4_t)((__n128 (*)(uint64_t))*(void *)(*(void *)a1 + 88))(a1);
  v13.i64[0] = *(void *)(a1 + 28);
  v13.i32[2] = *(_DWORD *)(a1 + 36);
  float32x4_t v23 = v13;
  float32x4_t v14 = (float32x4_t)((__n128 (*)(uint64_t))*(void *)(*(void *)a1 + 88))(a1);
  v14.i64[0] = *(void *)(a1 + 16);
  v14.i32[2] = *(_DWORD *)(a1 + 24);
  float32x4_t v24 = v14;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t, float))(*(void *)a1 + 32))(a1, v12);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  float32x4_t v15 = (float32x4_t)((__n128 (*)(uint64_t))*(void *)(*(void *)a1 + 88))(a1);
  v15.i64[0] = *(void *)(a1 + 28);
  v15.i32[2] = *(_DWORD *)(a1 + 36);
  float32x4_t v26 = vaddq_f32(vaddq_f32(v23, v25), v15);
  float32x4_t v16 = (float32x4_t)((__n128 (*)(uint64_t))*(void *)(*(void *)a1 + 88))(a1);
  v16.i64[0] = *(void *)(a1 + 16);
  v16.i32[2] = *(_DWORD *)(a1 + 24);
  float32x4_t v17 = vsubq_f32(v16, v24);
  float32x4_t v18 = vmulq_f32(v17, v17);
  float32x4_t v19 = vmlaq_n_f32(v26, v17, 3.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1), v18), (float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2)).f32[0]));
  float32x4_t v20 = vmulq_f32(v19, v19);
  float32x4_t v21 = vmulq_n_f32(v19, 1.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1), v20), (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2)).f32[0]));
  *(_DWORD *)(a4 + 8) = v21.i32[2];
  *(void *)a4 = v21.i64[0];
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  return 1;
}

__n128 md::PolylinePixelHiker::resetPosition(md::PolylinePixelHiker *this, double a2)
{
  *((_DWORD *)this + 192) = 0;
  uint64_t v3 = *((void *)this + 47);
  if (!v3
    || *((_DWORD *)this + 104) != *(_DWORD *)(v3 + 252)
    || !*((void *)this + 50)
    || *((__int16 *)this + 205) < 0)
  {
    md::LabelLineResolvedPosition::moveOntoPathForZoom((md::PolylinePixelHiker *)((char *)this + 376), *((unsigned __int8 *)this + 540), a2);
    uint64_t v3 = *((void *)this + 47);
  }
  uint64_t v4 = *((void *)this + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 68) = v3;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 69);
  *((void *)this + 69) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *((_OWORD *)this + 35) = *(_OWORD *)((char *)this + 392);
  __n128 result = *(__n128 *)((char *)this + 404);
  *(__n128 *)((char *)this + 572) = result;
  *((unsigned char *)this + 8) = 1;
  return result;
}

uint64_t md::PolylinePixelHiker::disablePathRetraceCheck(uint64_t this)
{
  *(unsigned char *)(this + 772) = 0;
  return this;
}

float md::CurvedTextLabelPart::hikerWidth(uint64_t a1, int a2)
{
  uint64_t v4 = 0x8000007F7FFFFFLL;
  int v2 = md::CurvedTextLabelPart::populateGlyphOffsets(a1, a2, 0, (float *)&v4);
  float result = *((float *)&v4 + 1) - *(float *)&v4;
  if (!v2) {
    return 0.0;
  }
  return result;
}

uint64_t md::CurvedTextLabelPart::updateTextLayoutOptions(uint64_t result, float *a2, float *a3, float *a4, char a5, char a6, char *a7, char *a8)
{
  float v8 = a4[1];
  float v9 = a4[2];
  float v10 = (float)((float)(*a4 * *a2) + (float)(v8 * a2[1])) + (float)(v9 * a2[2]);
  float v11 = v10;
  if (a5 == 2) {
    float v11 = -(float)((float)((float)(*a3 * *a4) + (float)(a3[1] * v8)) + (float)(a3[2] * v9));
  }
  if (a6 == 1)
  {
    if (v11 >= -0.01) {
      goto LABEL_9;
    }
    char v12 = 2;
  }
  else
  {
    if (v11 <= 0.01) {
      goto LABEL_9;
    }
    char v12 = 1;
  }
  *a8 = v12;
LABEL_9:
  if (!result) {
    return result;
  }
  float v13 = fabsf(v10);
  if (a5 == 1)
  {
    if (v13 >= 0.69711) {
      return result;
    }
    char v14 = 2;
  }
  else
  {
    if (v13 <= 0.71711) {
      return result;
    }
    char v14 = 1;
  }
  *a7 = v14;
  return result;
}

uint64_t md::LightingLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  v31[0] = &unk_1EF56FB58;
  v31[1] = a2;
  BOOL v32 = v31;
  v29[0] = &unk_1EF56FBA0;
  v29[1] = a2;
  float v30 = v29;
  uint64_t v34 = v33;
  v33[0] = &unk_1EF56FBA0;
  v33[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEEclEv((uint64_t)v31);
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void))(*v30 + 40))();
  }
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void))(*v32 + 40))();
  }
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  float v10 = (uint64_t *)a3[2];
  uint64_t v11 = a3[3];
  char v12 = *(std::__shared_weak_count **)(v9 + 24);
  uint64_t v25 = *(void *)(v9 + 16);
  float32x4_t v26 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v13 = *(std::__shared_weak_count **)(v9 + 8);
  uint64_t v23 = *(void *)v9;
  float32x4_t v24 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)(v9 + 82))
  {
    char v14 = operator new(0x20uLL);
    *char v14 = &unk_1EF56FBE8;
    v14[1] = a1;
    v14[2] = &v25;
    v14[3] = &v23;
    float v28 = v14;
    float32x4_t v16 = *(unsigned char **)(v9 + 48);
    float32x4_t v15 = *(unsigned char **)(v9 + 56);
    if (v16 == v15)
    {
LABEL_19:
      (*(void (**)(void *))(*v14 + 40))(v14);
      goto LABEL_21;
    }
    do
    {
      LOBYTE(v22.f64[0]) = *v16;
      if (!v28) {
        goto LABEL_38;
      }
      (*(void (**)(void *, float64x2_t *))(*v28 + 48))(v28, &v22);
      ++v16;
    }
    while (v16 != v15);
    char v14 = v28;
    if (v28 != v27)
    {
      if (!v28) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
    (*(void (**)(void *))(v27[0] + 32))(v27);
  }
LABEL_21:
  float64x2_t v22 = vmulq_f64(*(float64x2_t *)(v8 + 8), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  uint64_t v17 = *(void *)(a2 + 32);
  float32x4_t v18 = *(std::__shared_weak_count **)(a2 + 40);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::LightingLogic::writeLogicContext(a1, v8, v11, v10, &v25, v22.f64, a4, v17);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  float32x4_t v19 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  float32x4_t v20 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (!v34)
  {
LABEL_38:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v34 + 48))(v34);
  uint64_t result = (uint64_t)v34;
  if (v34 == v33) {
    return (*(uint64_t (**)(void *))(v33[0] + 32))(v33);
  }
  if (v34) {
    return (*(uint64_t (**)(void *))(*v34 + 40))(v34);
  }
  return result;
}

void sub_1A1B1AE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v6 - 120));
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__1NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LightingLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LightingLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__2NS_9allocatorISM_EEFvNS2_17StyleManagerEventEEEclEOSP_(gss::Allocator *a1, unsigned __int8 *a2)
{
  if ((*a2 | 4) != 4) {
    return;
  }
  int v2 = a1;
  uint64_t v3 = (void *)*((void *)a1 + 1);
  os_signpost_id_t v4 = (uint64_t *)*((void *)a1 + 2);
  uint64_t v5 = (std::__shared_weak_count *)v3[23];
  v3[22] = 0;
  v3[23] = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = *v4;
    if (*v4)
    {
LABEL_5:
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = gss::Allocator::instance(a1);
      *(void *)((char *)&v20 + 7) = 0;
      *(void *)&long long v20 = 0;
      HIBYTE(v20) = 1;
      gss::StylesheetManager<gss::ScenePropertyID>::styleQueryForFeatureAttributes((uint64_t *)&v19, v6, (gss::FeatureAttributeSet *)&v23, (gss::QueryOverrides *)&v20);
      long long v7 = v19;
      uint64_t v8 = (std::__shared_weak_count *)v3[23];
      long long v19 = 0uLL;
      *((_OWORD *)v3 + 11) = v7;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      uint64_t v9 = (std::__shared_weak_count *)*((void *)&v19 + 1);
      if (*((void *)&v19 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v23)
      {
        uint64_t v24 = v23;
        a1 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 40))(v26, v23, v25 - v23);
      }
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (*v4) {
      goto LABEL_5;
    }
  }
  uint64_t v10 = (uint64_t *)*((void *)v2 + 3);
  uint64_t v11 = (std::__shared_weak_count *)v3[25];
  v3[24] = 0;
  v3[25] = 0;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!*v10) {
      return;
    }
  }
  else if (!*v10)
  {
    return;
  }
  uint64_t v12 = gss::Allocator::instance(a1);
  uint64_t v22 = v12;
  float v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, 8, 4);
  char v14 = v13;
  *(void *)&long long v20 = v13;
  float32x4_t v21 = v13 + 1;
  if (v13) {
    *float v13 = 0x90001004BLL;
  }
  *((void *)&v20 + 1) = v13 + 1;
  gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v23, (uint64_t)&v20);
  if (v14) {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v12 + 40))(v12, v14, 8);
  }
  uint64_t v15 = *v10;
  *(void *)((char *)&v20 + 7) = 0;
  *(void *)&long long v20 = 0;
  HIBYTE(v20) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v19, v15, (gss::FeatureAttributeSet *)&v23, (gss::QueryOverrides *)&v20);
  long long v16 = v19;
  uint64_t v17 = (std::__shared_weak_count *)v3[25];
  long long v19 = 0uLL;
  *((_OWORD *)v3 + 12) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  float32x4_t v18 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 40))(v26, v23, v25 - v23);
  }
}

void sub_1A1B1B488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a15) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a18 + 40))(a18);
  _Unwind_Resume(exception_object);
}

void gss::StylesheetManager<gss::ScenePropertyID>::styleQueryForFeatureAttributes(uint64_t *a1, uint64_t a2, gss::FeatureAttributeSet *a3, gss::QueryOverrides *a4)
{
  gss::StyleKey::StyleKey((gss::StyleKey *)&v134, a3, a4);
  long long v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 120));
  uint64_t v131 = a1;
  if (v7) {
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  }
  unint64_t v10 = (v135 - v134) >> 3;
  if (v135 != v134)
  {
    uint64_t v11 = v134;
    do
    {
      unint64_t v12 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *(unsigned int *)v11) ^ v10;
      unint64_t v10 = (*((unsigned __int16 *)v11 + 2) - 0x61C8864680B583EBLL + (v12 << 6) + (v12 >> 2)) ^ v12;
      v11 += 8;
    }
    while (v11 != v135);
  }
  if (HIWORD(v139))
  {
    unint64_t v13 = 0;
    char v14 = 0;
    unsigned int v15 = 0;
    do
    {
      if (v15 < HIWORD(v139))
      {
        char v14 = &v138[v15];
        uint64_t v9 = (unsigned __int16 *)((char *)v138 + 2 * v15 + (unsigned __int16)v139);
      }
      v13 ^= (*v9
            - 0x61C8864680B583EBLL
            + ((((v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + *v14) ^ v13) << 6)
            + ((((v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + *v14) ^ v13) >> 2)) ^ ((v13 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v13 >> 2)
                                                                                       + *v14);
      unsigned int v16 = v15 + 1;
      if (v15 + 1 < HIWORD(v139)) {
        ++v15;
      }
      else {
        unsigned int v15 = HIWORD(v139);
      }
    }
    while (v16 < HIWORD(v139));
    int8x8_t v17 = *(int8x8_t *)(a2 + 40);
    if (!*(void *)&v17) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v13 = 0;
    int8x8_t v17 = *(int8x8_t *)(a2 + 40);
    if (!*(void *)&v17) {
      goto LABEL_58;
    }
  }
  unint64_t v18 = v13 ^ v10;
  uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    unint64_t v20 = v18;
    if (v18 >= *(void *)&v17) {
      unint64_t v20 = v18 % *(void *)&v17;
    }
  }
  else
  {
    unint64_t v20 = (*(void *)&v17 - 1) & v18;
  }
  float32x4_t v21 = *(uint64_t **)(*(void *)(a2 + 32) + 8 * v20);
  if (!v21) {
    goto LABEL_58;
  }
  uint64_t v4 = *v21;
  if (!*v21) {
    goto LABEL_58;
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v138 + (unsigned __int16)v139);
  while (1)
  {
    unint64_t v23 = *(void *)(v4 + 8);
    if (v23 != v18)
    {
      if (v19.u32[0] <= 1uLL)
      {
        v23 &= *(void *)&v17 - 1;
      }
      else if (v23 >= *(void *)&v17)
      {
        v23 %= *(void *)&v17;
      }
      if (v23 != v20) {
        goto LABEL_58;
      }
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v4 + 16);
    uint64_t v24 = *(void *)(v4 + 24);
    if (v24 - v25 == v135 - v134)
    {
      if (v25 != v24)
      {
        uint64_t v26 = v134;
        while (*(_DWORD *)v25 == *(_DWORD *)v26 && *(unsigned __int16 *)(v25 + 4) == *((unsigned __int16 *)v26 + 2))
        {
          v25 += 8;
          v26 += 8;
          if (v25 == v24) {
            goto LABEL_37;
          }
        }
        goto LABEL_26;
      }
LABEL_37:
      unint64_t v28 = *(unsigned __int16 *)(v4 + 58);
      if (v28 == HIWORD(v139))
      {
        if (!HIWORD(v139)) {
          goto LABEL_51;
        }
        uint64_t v29 = *(_DWORD **)(v4 + 48);
        if (*v29 == *v138)
        {
          float v30 = (unsigned __int16 *)((char *)v29 + *(unsigned __int16 *)(v4 + 56));
          if (*v30 == *v22)
          {
            uint64_t v31 = 1;
            do
            {
              if (v28 == v31) {
                goto LABEL_50;
              }
              unint64_t v32 = v31;
              if (v29[v31] != v138[v31]) {
                break;
              }
              ++v31;
            }
            while (v30[v32] == v22[v32]);
            if (v32 >= v28) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    uint64_t v4 = *(void *)v4;
    if (!v4) {
      goto LABEL_58;
    }
  }
LABEL_50:
  if (v4)
  {
LABEL_51:
    *a1 = 0;
    a1[1] = 0;
    double v33 = *(std::__shared_weak_count **)(v4 + 72);
    if (v33)
    {
      uint64_t v34 = std::__shared_weak_count::lock(v33);
      a1[1] = (uint64_t)v34;
      if (v34)
      {
        uint64_t v35 = *(void *)(v4 + 64);
        *a1 = v35;
        if (v35)
        {
          uint64_t v36 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 120));
          if (!v36) {
            goto LABEL_209;
          }
          goto LABEL_208;
        }
        float v38 = v34;
        if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
  }
LABEL_58:
  double v39 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 120));
  if (v39) {
    geo::read_write_lock::logFailure(v39, (uint64_t)"unlock", v40);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(a2 + 8);
  v133[0] = *(pthread_rwlock_t **)a2;
  if (!v41 || (unint64_t v42 = (gss::Allocator *)std::__shared_weak_count::lock(v41), (v133[1] = (pthread_rwlock_t *)v42) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
    return;
  }
  uint64_t v130 = (pthread_rwlock_t *)(a2 + 120);
  uint64_t v43 = gss::Allocator::instance(v42);
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43 + 16))(v43, 352, 8);
  uint64_t v45 = v44;
  *(_OWORD *)(v44 + 8) = 0u;
  *(void *)uint64_t v44 = &unk_1EF58A5F0;
  *(void *)(v44 + 24) = v43;
  uint64_t v132 = v44 + 32;
  long long v142 = *(_OWORD *)v133;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v133[1]->__opaque, 1uLL, memory_order_relaxed);
  uint64_t v46 = *((void *)&v142 + 1);
  *(void *)(v44 + 32) = &unk_1EF567528;
  int v47 = (int)v133[0];
  *(pthread_rwlock_t **)(v44 + 40) = v133[0];
  *(void *)(v44 + 48) = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v44 + 56) = 0u;
  *(_OWORD *)(v44 + 232) = 0u;
  *(_OWORD *)(v44 + 248) = 0u;
  *(_OWORD *)(v44 + 200) = 0u;
  *(_OWORD *)(v44 + 216) = 0u;
  *(_OWORD *)(v44 + 168) = 0u;
  *(_OWORD *)(v44 + 184) = 0u;
  *(_OWORD *)(v44 + 136) = 0u;
  *(_OWORD *)(v44 + 152) = 0u;
  *(_OWORD *)(v44 + 104) = 0u;
  *(_OWORD *)(v44 + 120) = 0u;
  *(_OWORD *)(v44 + 72) = 0u;
  *(_OWORD *)(v44 + 88) = 0u;
  uint64_t v48 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v44 + 64), 0);
  if (v48) {
    geo::read_write_lock::logFailure(v48, (uint64_t)"initialization", v49);
  }
  if (!v133[0]) {
    goto LABEL_79;
  }
  uint64_t v50 = *(void *)&v133[0][2].__opaque[112];
  uint64_t v51 = *(std::__shared_weak_count **)&v133[0][2].__opaque[120];
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v50)
  {
    int v47 = 0;
LABEL_75:
    if (v51) {
      goto LABEL_76;
    }
    goto LABEL_79;
  }
  uint64_t v52 = *(void *)&v133[0][2].__opaque[112];
  uint64_t v53 = *(std::__shared_weak_count **)&v133[0][2].__opaque[120];
  if (!v53)
  {
    int v47 = *(_DWORD *)(v52 + 248) - 1;
    if (v51) {
      goto LABEL_76;
    }
    goto LABEL_79;
  }
  atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  int v47 = *(_DWORD *)(v52 + 248) - 1;
  if (atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_75;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  if (!v51) {
    goto LABEL_79;
  }
LABEL_76:
  if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
LABEL_79:
  *(_DWORD *)(v45 + 264) = v47;
  unint64_t v54 = (std::__shared_weak_count *)*((void *)&v142 + 1);
  if (*((void *)&v142 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v142 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  *(void *)(v45 + 32) = &unk_1EF5673D0;
  *(void *)(v45 + 280) = 0;
  *(void *)(v45 + 288) = 0;
  *(void *)(v45 + 272) = 0;
  *(void *)(v45 + 296) = gss::Allocator::instance(v48);
  if ((char **)(v45 + 272) != &v134) {
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)(v45 + 272), (uint64_t)v134, v135, (v135 - v134) >> 3);
  }
  *(void *)(v45 + 304) = 0;
  *(void *)(v45 + 311) = 0;
  *(unsigned char *)(v45 + 319) = 1;
  if ((_BYTE)v141)
  {
    *(void *)(v45 + 304) = v138;
    *(_DWORD *)(v45 + 312) = v139;
  }
  else
  {
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reserve((void *)(v45 + 304), HIWORD(v139));
    int v66 = HIWORD(v139);
    if (HIWORD(v139))
    {
      unsigned int v67 = 0;
      char v68 = 0;
      do
      {
        if (!geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)(v45 + 304))) {
          break;
        }
        if (v67 < HIWORD(v139))
        {
          char v68 = &v138[v67];
          uint64_t v4 = (uint64_t)v138 + 2 * v67 + (unsigned __int16)v139;
        }
        uint64_t v69 = *(unsigned __int16 *)(v45 + 314);
        uint64_t v70 = *(void *)(v45 + 304);
        *(_DWORD *)(v70 + 4 * v69) = *v68;
        *(_WORD *)(v70 + *(unsigned __int16 *)(v45 + 312) + 2 * v69) = *(_WORD *)v4;
        ++*(_WORD *)(v45 + 314);
        if (v67 + 1 < HIWORD(v139)) {
          ++v67;
        }
        else {
          unsigned int v67 = HIWORD(v139);
        }
      }
      while (v67 != v66);
    }
  }
  *(_WORD *)(v45 + 318) = v141;
  *(_OWORD *)(v45 + 320) = 0u;
  *(_OWORD *)(v45 + 336) = 0u;
  if (v133[1] && !atomic_fetch_add((atomic_ullong *volatile)v133[1]->__opaque, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(pthread_rwlock_t *))(v133[1]->__sig + 16))(v133[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v133[1]);
  }
  *uint64_t v131 = v132;
  v131[1] = v45;
  unint64_t v55 = 0;
  float v56 = (geo::read_write_lock *)pthread_rwlock_wrlock(v130);
  if (v56) {
    geo::read_write_lock::logFailure(v56, (uint64_t)"write lock", v57);
  }
  unint64_t v59 = (v135 - v134) >> 3;
  if (v135 != v134)
  {
    float32x2_t v60 = v134;
    do
    {
      unint64_t v61 = ((v59 << 6) - 0x61C8864680B583EBLL + (v59 >> 2) + *(unsigned int *)v60) ^ v59;
      unint64_t v59 = (*((unsigned __int16 *)v60 + 2) - 0x61C8864680B583EBLL + (v61 << 6) + (v61 >> 2)) ^ v61;
      v60 += 8;
    }
    while (v60 != v135);
  }
  if (HIWORD(v139))
  {
    unint64_t v62 = 0;
    float v63 = 0;
    unsigned int v64 = 0;
    do
    {
      if (v64 < HIWORD(v139))
      {
        float v63 = &v138[v64];
        uint64_t v58 = (unsigned __int16 *)((char *)v138 + 2 * v64 + (unsigned __int16)v139);
      }
      v62 ^= (*v58
            - 0x61C8864680B583EBLL
            + ((((v62 << 6) - 0x61C8864680B583EBLL + (v62 >> 2) + *v63) ^ v62) << 6)
            + ((((v62 << 6) - 0x61C8864680B583EBLL + (v62 >> 2) + *v63) ^ v62) >> 2)) ^ ((v62 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v62 >> 2)
                                                                                       + *v63);
      unsigned int v65 = v64 + 1;
      if (v64 + 1 < HIWORD(v139)) {
        ++v64;
      }
      else {
        unsigned int v64 = HIWORD(v139);
      }
    }
    while (v65 < HIWORD(v139));
  }
  else
  {
    unint64_t v62 = 0;
  }
  unint64_t v71 = v62 ^ v59;
  unint64_t v72 = *(void *)(a2 + 40);
  if (!v72)
  {
    float v74 = v131;
LABEL_148:
    float v88 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 64) + 16))(*(void *)(a2 + 64), 80, 8);
    *(void *)&long long v142 = v88;
    *((void *)&v142 + 1) = a2 + 64;
    char v143 = 0;
    *float v88 = 0;
    v88[1] = v71;
    gss::StyleKey::StyleKey((gss::StyleKey *)(v88 + 2), (const gss::FeatureAttributeSet *)&v134, (const gss::QueryOverrides *)&v138);
    v88[8] = *v74;
    uint64_t v89 = v74[1];
    v88[9] = v89;
    if (v89) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 16), 1uLL, memory_order_relaxed);
    }
    char v143 = 1;
    float v90 = (float)(unint64_t)(*(void *)(a2 + 72) + 1);
    float v91 = *(float *)(a2 + 80);
    if (v72 && (float)(v91 * (float)v72) >= v90)
    {
LABEL_199:
      float v115 = *(void **)(*(void *)(a2 + 32) + 8 * v55);
      if (v115)
      {
        uint64_t v116 = v142;
        *(void *)long long v142 = *v115;
        *float v115 = v116;
        float v117 = (pthread_rwlock_t *)(a2 + 120);
      }
      else
      {
        uint64_t v118 = v142;
        *(void *)long long v142 = *(void *)(a2 + 56);
        *(void *)(a2 + 56) = v118;
        *(void *)(*(void *)(a2 + 32) + 8 * v55) = a2 + 56;
        float v117 = (pthread_rwlock_t *)(a2 + 120);
        if (*(void *)v118)
        {
          unint64_t v119 = *(void *)(*(void *)v118 + 8);
          if ((v72 & (v72 - 1)) != 0)
          {
            if (v119 >= v72) {
              v119 %= v72;
            }
          }
          else
          {
            v119 &= v72 - 1;
          }
          *(void *)(*(void *)(a2 + 32) + 8 * v119) = v118;
        }
      }
      ++*(void *)(a2 + 72);
      uint64_t v36 = (geo::read_write_lock *)pthread_rwlock_unlock(v117);
      if (!v36) {
        goto LABEL_209;
      }
LABEL_208:
      geo::read_write_lock::logFailure(v36, (uint64_t)"unlock", v37);
      goto LABEL_209;
    }
    BOOL v92 = 1;
    if (v72 >= 3) {
      BOOL v92 = (v72 & (v72 - 1)) != 0;
    }
    unint64_t v93 = v92 | (2 * v72);
    unint64_t v94 = vcvtps_u32_f32(v90 / v91);
    if (v93 <= v94) {
      size_t prime = v94;
    }
    else {
      size_t prime = v93;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v72 = *(void *)(a2 + 40);
    if (prime <= v72)
    {
      if (prime >= v72) {
        goto LABEL_186;
      }
      unint64_t v108 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 72) / *(float *)(a2 + 80));
      if (v72 < 3 || (uint8x8_t v109 = (uint8x8_t)vcnt_s8((int8x8_t)v72), v109.i16[0] = vaddlv_u8(v109), v109.u32[0] > 1uLL))
      {
        unint64_t v108 = std::__next_prime(v108);
      }
      else
      {
        uint64_t v110 = 1 << -(char)__clz(v108 - 1);
        if (v108 >= 2) {
          unint64_t v108 = v110;
        }
      }
      if (prime <= v108) {
        size_t prime = v108;
      }
      if (prime >= v72)
      {
        unint64_t v72 = *(void *)(a2 + 40);
LABEL_186:
        if ((v72 & (v72 - 1)) != 0)
        {
          if (v71 >= v72) {
            unint64_t v55 = v71 % v72;
          }
          else {
            unint64_t v55 = v71;
          }
        }
        else
        {
          unint64_t v55 = (v72 - 1) & v71;
        }
        goto LABEL_199;
      }
      if (!prime)
      {
        uint64_t v121 = *(void *)(a2 + 32);
        *(void *)(a2 + 32) = 0;
        if (v121) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), v121, 8 * *(void *)(a2 + 40));
        }
        unint64_t v72 = 0;
        *(void *)(a2 + 40) = 0;
        goto LABEL_186;
      }
    }
    uint64_t v96 = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(a2 + 48) + 16))(*(void *)(a2 + 48), 8 * prime, 8);
    uint64_t v97 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v96;
    if (v97) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), v97, 8 * *(void *)(a2 + 40));
    }
    uint64_t v98 = 0;
    *(void *)(a2 + 40) = prime;
    do
      *(void *)(*(void *)(a2 + 32) + 8 * v98++) = 0;
    while (prime != v98);
    uint64_t v100 = a2 + 56;
    float v99 = *(void **)(a2 + 56);
    if (!v99)
    {
LABEL_185:
      unint64_t v72 = prime;
      goto LABEL_186;
    }
    size_t v101 = v99[1];
    size_t v102 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v103 = v101 & v102;
      *(void *)(*(void *)(a2 + 32) + 8 * v103) = v100;
      for (uint64_t i = (void *)*v99; *v99; uint64_t i = (void *)*v99)
      {
        size_t v105 = i[1] & v102;
        if (v105 == v103)
        {
          float v99 = i;
        }
        else
        {
          uint64_t v106 = *(void *)(a2 + 32);
          if (*(void *)(v106 + 8 * v105))
          {
            *float v99 = *i;
            uint64_t v107 = 8 * v105;
            void *i = **(void **)(*(void *)(a2 + 32) + v107);
            **(void **)(*(void *)(a2 + 32) + v107) = i;
          }
          else
          {
            *(void *)(v106 + 8 * v105) = v99;
            float v99 = i;
            size_t v103 = v105;
          }
        }
      }
      goto LABEL_185;
    }
    if (v101 >= prime) {
      v101 %= prime;
    }
    *(void *)(*(void *)(a2 + 32) + 8 * v101) = v100;
    long long v111 = (void *)*v99;
    if (!*v99) {
      goto LABEL_185;
    }
    while (1)
    {
      size_t v113 = v111[1];
      if (v113 >= prime) {
        v113 %= prime;
      }
      if (v113 != v101)
      {
        uint64_t v114 = *(void *)(a2 + 32);
        if (!*(void *)(v114 + 8 * v113))
        {
          *(void *)(v114 + 8 * v113) = v99;
          goto LABEL_190;
        }
        *float v99 = *v111;
        uint64_t v112 = 8 * v113;
        *long long v111 = **(void **)(*(void *)(a2 + 32) + v112);
        **(void **)(*(void *)(a2 + 32) + v112) = v111;
        long long v111 = v99;
      }
      size_t v113 = v101;
LABEL_190:
      float v99 = v111;
      long long v111 = (void *)*v111;
      size_t v101 = v113;
      if (!v111) {
        goto LABEL_185;
      }
    }
  }
  uint8x8_t v73 = (uint8x8_t)vcnt_s8((int8x8_t)v72);
  v73.i16[0] = vaddlv_u8(v73);
  float v74 = v131;
  if (v73.u32[0] > 1uLL)
  {
    unint64_t v55 = v62 ^ v59;
    if (v71 >= v72) {
      unint64_t v55 = v71 % v72;
    }
  }
  else
  {
    unint64_t v55 = (v72 - 1) & v71;
  }
  float v75 = *(uint64_t ****)(*(void *)(a2 + 32) + 8 * v55);
  if (!v75) {
    goto LABEL_148;
  }
  float v76 = *v75;
  if (!*v75) {
    goto LABEL_148;
  }
  float v77 = (unsigned __int16 *)((char *)v138 + (unsigned __int16)v139);
  while (1)
  {
    unint64_t v78 = (unint64_t)v76[1];
    if (v78 != v71)
    {
      if (v73.u32[0] <= 1uLL)
      {
        v78 &= v72 - 1;
      }
      else if (v78 >= v72)
      {
        v78 %= v72;
      }
      if (v78 != v55) {
        goto LABEL_148;
      }
      goto LABEL_124;
    }
    float v80 = v76[2];
    float v79 = v76[3];
    if ((char *)v79 - (char *)v80 == v135 - v134)
    {
      if (v80 != v79)
      {
        float v81 = v134;
        while (*(_DWORD *)v80 == *(_DWORD *)v81 && *((unsigned __int16 *)v80 + 2) == *((unsigned __int16 *)v81 + 2))
        {
          ++v80;
          v81 += 8;
          if (v80 == v79) {
            goto LABEL_135;
          }
        }
        goto LABEL_124;
      }
LABEL_135:
      unint64_t v83 = *((unsigned __int16 *)v76 + 29);
      if (v83 == HIWORD(v139))
      {
        if (!HIWORD(v139)) {
          break;
        }
        float32x2_t v84 = v76[6];
        if (*(_DWORD *)v84 == *v138)
        {
          float32x2_t v85 = (unsigned __int16 *)((char *)v84 + *((unsigned __int16 *)v76 + 28));
          if (*v85 == *v77)
          {
            uint64_t v86 = 1;
            do
            {
              if (v83 == v86) {
                goto LABEL_224;
              }
              unint64_t v87 = v86;
              if (*((_DWORD *)v84 + v86) != v138[v86]) {
                break;
              }
              ++v86;
            }
            while (v85[v87] == v77[v87]);
            if (v87 >= v83) {
              break;
            }
          }
        }
      }
    }
LABEL_124:
    float v76 = (uint64_t **)*v76;
    if (!v76) {
      goto LABEL_148;
    }
  }
LABEL_224:
  uint64_t v122 = (std::__shared_weak_count *)v76[9];
  if (v122)
  {
    uint64_t v123 = std::__shared_weak_count::lock(v122);
    uint64_t v124 = v123;
    if (v123)
    {
      uint64_t v125 = (uint64_t)v76[8];
      if (v125)
      {
        float32x2_t v126 = (std::__shared_weak_count *)v131[1];
        *uint64_t v131 = v125;
        v131[1] = (uint64_t)v123;
        if (v126 && !atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v124 = v126;
          goto LABEL_237;
        }
        goto LABEL_238;
      }
    }
  }
  else
  {
    uint64_t v124 = 0;
  }
  uint64_t v128 = *v131;
  uint64_t v127 = v131[1];
  if (v127) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v127 + 16), 1uLL, memory_order_relaxed);
  }
  int v129 = (std::__shared_weak_count *)v76[9];
  v76[8] = (uint64_t *)v128;
  v76[9] = (uint64_t *)v127;
  if (v129) {
    std::__shared_weak_count::__release_weak(v129);
  }
  if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_237:
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v124);
  }
LABEL_238:
  uint64_t v36 = (geo::read_write_lock *)pthread_rwlock_unlock(v130);
  if (v36) {
    goto LABEL_208;
  }
LABEL_209:
  if (!(_BYTE)v141 && v138)
  {
    uint64_t v120 = gss::Allocator::instance(v36);
    (*(void (**)(uint64_t, _DWORD *, void))(*(void *)v120 + 40))(v120, v138, v140);
    uint64_t v138 = 0;
  }
  if (v134)
  {
    unsigned int v135 = v134;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v137 + 40))(v137, v134, v136 - (void)v134);
  }
}

void sub_1A1B1C458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  gss::FeatureAttributeSet::~FeatureAttributeSet(v23);
  gss::Queryable<gss::ScenePropertyID>::~Queryable(a12);
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)a9 + 40))(a9, v21, 352);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a13);
  gss::StyleKey::~StyleKey((gss::StyleKey *)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<gss::StylesheetQuery<gss::ScenePropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 352);
}

uint64_t std::__shared_ptr_emplace<gss::StylesheetQuery<gss::ScenePropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

uint64_t gss::StylesheetQuery<gss::ScenePropertyID>::~StylesheetQuery(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5673D0;
  int v2 = *(std::__shared_weak_count **)(a1 + 312);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 296);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (!*(unsigned char *)(a1 + 286) && *(void *)(a1 + 272))
  {
    uint64_t v4 = gss::Allocator::instance((gss::Allocator *)v3);
    (*(void (**)(uint64_t, void, void))(*(void *)v4 + 40))(v4, *(void *)(a1 + 272), *(unsigned __int16 *)(a1 + 284));
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 240);
  if (v5)
  {
    *(void *)(a1 + 248) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 264) + 40))(*(void *)(a1 + 264), v5, *(void *)(a1 + 256) - v5);
  }
  *(void *)a1 = &unk_1EF567528;
  uint64_t v6 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if (v6) {
    geo::read_write_lock::logFailure(v6, (uint64_t)"destruction", v7);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v8) {
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  return a1;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UpdatesWithStyleZChange>(*(int8x8_t **)(a2 + 8));
  uint64_t v4 = v3;
  uint64_t v6 = (unint64_t *)v3[7];
  uint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((unint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      float32x4_t v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        unint64_t *v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v4[10] + 4 * v27;
        }
        else
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v33;
        }
        if (v34 == v33) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = (float *)v34;
        }
        uint64_t v36 = ***(uint64_t ****)(a1 + 8);
        if (v36 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v36 != 0x22D45F5AAD4BF408)
        {
          unint64_t v37 = v36 + 5;
          do
          {
            uint64_t v38 = *v37;
            v37 += 5;
          }
          while (v38 != 0x22D45F5AAD4BF408);
          uint64_t v36 = v37 - 5;
        }
        double v39 = (uint64_t (***)(void))v36[3];
        float v40 = (std::__shared_weak_count *)v36[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        uint64_t v41 = *(void **)((**v39)(v39) + 8);
        unint64_t v42 = v41[1];
        if ((v42 & (v42 - 1)) != 0)
        {
          unint64_t v44 = 0x1AF456233693CD46;
          if (v42 <= 0x1AF456233693CD46) {
            unint64_t v44 = 0x1AF456233693CD46 % v42;
          }
          uint64_t i = *(void **)(*v41 + 8 * v44);
          do
          {
            do
              uint64_t i = (void *)*i;
            while (i[1] != 0x1AF456233693CD46);
          }
          while (i[2] != 0x1AF456233693CD46);
        }
        else
        {
          for (uint64_t i = **(void ***)(*v41 + 8 * ((v42 - 1) & 0x1AF456233693CD46));
                i[1] != 0x1AF456233693CD46 || i[2] != 0x1AF456233693CD46;
        }
        float v45 = fmaxf(*(float *)(*(void *)(i[5] + 32) + 3080) + *(float *)(*(void *)(i[5] + 32) + 3076), 1.0);
        if (vabds_f32(*v35, v45) > 0.05)
        {
          float *v35 = v45;
          uint64_t v46 = *(void **)(a1 + 8);
          unint64_t v47 = HIDWORD(*v21);
          unint64_t v48 = LODWORD(v45) | (*v21 << 32);
          v58[0] = &unk_1EF5244D0;
          v58[1] = v48;
          int v59 = v47;
          float v63 = v61;
          float32x2_t v60 = v58;
          v61[0] = &unk_1EF5244D0;
          v61[1] = v48;
          int v62 = v47;
          int v64 = 0;
          ecs2::Runtime::queueCommand(v46, (uint64_t)v61);
          if (v64 != -1) {
            ((void (*)(char *, void *))off_1EF5909D0[v64])(&v57, v61);
          }
          int v64 = -1;
          if (v60 == v58)
          {
            (*(void (**)(void *))(v58[0] + 32))(v58);
          }
          else if (v60)
          {
            (*(void (**)(void))(*v60 + 40))();
          }
        }
        uint64_t v49 = v4[4];
        uint64_t v50 = v4[7];
        uint64_t v22 = (uint64_t *)v4[8];
        uint64_t v51 = (uint64_t *)(v6 + 1);
        while (v51 != v22)
        {
          unint64_t v52 = *((unsigned int *)v51 + 1);
          uint64_t v53 = v4[8];
          if (v52 >> 7 < (v4[5] - v49) >> 3)
          {
            uint64_t v54 = *(void *)(v49 + 8 * (v52 >> 7));
            uint64_t v53 = v4[8];
            if (v54)
            {
              unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * (v52 & 0x7F));
              uint64_t v53 = v4[8];
              if (((uint64_t)v22 - v50) >> 3 > v55)
              {
                uint64_t v53 = v50 + 8 * v55;
                if (*(_DWORD *)(v53 + 4) != v52) {
                  uint64_t v53 = v4[8];
                }
              }
            }
          }
          ++v51;
          if ((uint64_t *)v53 != v22)
          {
            uint64_t v22 = v51 - 1;
            break;
          }
        }
        uint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    unsigned int v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      unint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        unint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          unint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            unint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              unint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        uint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::UpdatesWithStyleZChange>(int8x8_t *a1)
{
  uint64_t v10 = 0x79DDAE60A4170168;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x79DDAE60A4170168;
    if (*(void *)&v1 <= 0x79DDAE60A4170168uLL) {
      uint64_t v3 = 0x79DDAE60A4170168uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x79DDAE60A4170168;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x79DDAE60A4170168)
      {
        if (v5[2] == 0x79DDAE60A4170168) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x79DDAE60A4170168) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x79DDAE60A4170168) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B1CEC0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t ggl::FragmentedPool<ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup>::pop(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)a1)
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    uint64_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v14 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = ((uint64_t)v4 - v16) >> 3;
      unint64_t v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v18 = v14 - v16;
      if (v18 >> 2 > v8) {
        unint64_t v8 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        uint64_t v20 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        unint64_t v12 = (uint64_t *)(v20 + 8 * v17);
        unint64_t v8 = v20 + v19;
        if (v20) {
          *unint64_t v12 = v3;
        }
      }
      else
      {
        unint64_t v12 = (uint64_t *)(8 * v17);
      }
      unint64_t v15 = v12 + 1;
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v30) {
        goto LABEL_48;
      }
      unint64_t v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v32 = (v31 >> 3) + 1;
        uint64_t v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v34 = v12 - 2;
        uint64_t v35 = (long long *)(v21 - 16);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)uint64_t v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v39 = *(void *)(v33 - 8);
        v33 -= 8;
        *--unint64_t v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 8);
    *(void *)(a1 + 8) = v2 - 8;
    uint64_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v9 = v5 - v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        unint64_t v12 = (uint64_t *)(v11 + 8 * v7);
        unint64_t v8 = v11 + v10;
        if (v11) {
          *unint64_t v12 = v3;
        }
      }
      else
      {
        unint64_t v12 = (uint64_t *)(8 * v7);
      }
      unint64_t v15 = v12 + 1;
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v22) {
        goto LABEL_48;
      }
      unint64_t v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = v12 - 2;
        unint64_t v27 = (long long *)(v21 - 16);
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)uint64_t v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v38 = *(void *)(v25 - 8);
        v25 -= 8;
        *--unint64_t v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      uint64_t v21 = *(void *)(a1 + 32);
LABEL_48:
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v15;
      uint64_t v40 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v8;
      if (v21) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v21, v40 - v21);
      }
      goto LABEL_50;
    }
  }
  if (v4) {
    uint64_t *v4 = v3;
  }
  unint64_t v15 = v4 + 1;
LABEL_50:
  *(void *)(a1 + 40) = v15;
  uint64_t v43 = v3;
  uint64_t v41 = *(void *)(a1 + 120);
  if (!v41) {
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v43);
  return v3;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3>,ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup * ()(void)>::operator()()
{
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x1AF456233693CD46 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v4 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v6 = 0x8BD499FBD96FBB9ELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x8BD499FBD96FBB9ELL)
      {
        if (v8[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::CameraLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v313 = *MEMORY[0x1E4F143B8];
  v309[0] = &unk_1EF56D7E8;
  v309[1] = a2;
  v307[0] = &unk_1EF56D830;
  v307[1] = a2;
  uint64_t v308 = v307;
  uint64_t v312 = v311;
  unint64_t v310 = v309;
  v311[0] = &unk_1EF56D830;
  v311[1] = a2;
  _ZNSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__0NS_9allocatorISJ_EEFvvEEclEv((uint64_t)v309);
  if (v308 == v307)
  {
    (*(void (**)(void *))(v307[0] + 32))(v307);
  }
  else if (v308)
  {
    (*(void (**)(void *))(*v308 + 40))(v308);
  }
  if (v310 == v309)
  {
    (*(void (**)(void *))(v309[0] + 32))(v309);
  }
  else if (v310)
  {
    (*(void (**)(void *))(*v310 + 40))(v310);
  }
  uint64_t v8 = *a3;
  *(_DWORD *)(a4 + 5596) = *(_DWORD *)(a1 + 120);
  if (*(unsigned char *)(v8 + 5)) {
    uint64_t v9 = *(void *)(a1 + 128);
  }
  else {
    uint64_t v9 = 0;
  }
  *(_DWORD *)(a4 + 5592) = 0;
  [*(id *)a2 size];
  if (v10 <= 0.0 || v11 <= 0.0)
  {
    float v12 = *(float *)(a4 + 5592);
  }
  else
  {
    float v12 = log2(v10 * 0.001953125 * *(float *)(a4 + 5596));
    *(float *)(a4 + 5592) = v12;
  }
  *(unsigned char *)(a4 + 3776) = *(unsigned char *)(md::LayoutContext::frameState((md::LayoutContext *)a2) + 128);
  id v13 = *(id *)a2;
  [v13 sizeInPixels];
  *(void *)(a4 + 1368) = v14;
  *(void *)(a4 + 1376) = v15;

  id v16 = *(id *)a2;
  [v16 contentScale];
  *(void *)(a4 + 1384) = v17;

  id v18 = *(id *)a2;
  [v18 size];
  double v20 = v19;
  [*(id *)a2 size];
  double v22 = v21;

  uint64_t v23 = md::LayoutContext::frameState((md::LayoutContext *)a2);
  LOBYTE(v271) = *(unsigned char *)(v23 + 128);
  long long v272 = *(_OWORD *)(v23 + 136);
  long long v273 = *(_OWORD *)(v23 + 152);
  long long v274 = *(_OWORD *)(v23 + 168);
  long long v275 = *(_OWORD *)(v23 + 184);
  uint64_t v276 = *(void *)(v23 + 200);
  long long v24 = *(_OWORD *)(v23 + 224);
  long long v277 = *(_OWORD *)(v23 + 208);
  long long v278 = v24;
  long long v279 = *(_OWORD *)(v23 + 240);
  long long v25 = *(_OWORD *)(v23 + 440);
  long long v291 = *(_OWORD *)(v23 + 424);
  long long v292 = v25;
  long long v26 = *(_OWORD *)(v23 + 408);
  uint64_t v27 = *(void *)(v23 + 256);
  long long v289 = *(_OWORD *)(v23 + 392);
  long long v290 = v26;
  uint64_t v28 = *(void *)(v23 + 456);
  uint64_t v280 = v27;
  uint64_t v293 = v28;
  long long v286 = *(_OWORD *)(v23 + 344);
  long long v287 = *(_OWORD *)(v23 + 360);
  long long v288 = *(_OWORD *)(v23 + 376);
  long long v282 = *(_OWORD *)(v23 + 280);
  long long v283 = *(_OWORD *)(v23 + 296);
  long long v284 = *(_OWORD *)(v23 + 312);
  long long v285 = *(_OWORD *)(v23 + 328);
  long long v281 = *(_OWORD *)(v23 + 264);
  char v294 = 0;
  if (*(unsigned char *)(v23 + 464))
  {
    uint64_t v295 = *(void *)(v23 + 472);
    char v294 = 1;
  }
  char v296 = 0;
  if (*(unsigned char *)(v23 + 480))
  {
    uint64_t v297 = *(void *)(v23 + 488);
    char v296 = 1;
  }
  long long v29 = *(_OWORD *)(v23 + 512);
  long long v298 = *(_OWORD *)(v23 + 496);
  long long v299 = v29;
  long long v30 = *(_OWORD *)(v23 + 544);
  long long v300 = *(_OWORD *)(v23 + 528);
  long long v301 = v30;
  long long v302 = *(_OWORD *)(v23 + 560);
  int v303 = *(_DWORD *)(v23 + 576);
  uint64_t v304 = *(void *)(v23 + 584);
  long long v31 = *(_OWORD *)(v23 + 608);
  long long v305 = *(_OWORD *)(v23 + 592);
  long long v306 = v31;
  if (*(unsigned char *)(a4 + 3776) == 3)
  {
    gdc::CameraView::ecefCameraView((gdc::CameraView *)&v265, (const Camera *)&v271);
  }
  else if (*(unsigned char *)(a4 + 3776))
  {
    gdc::CameraView::geocentricCameraView((gdc::CameraView *)&v265, (const Camera *)&v271);
  }
  else
  {
    gdc::CameraView::mercatorCameraView((gdc::CameraView *)&v265, (const Camera *)&v271);
  }
  gdc::CameraView::operator=(a4, (uint64_t)&v265);
  unsigned int v32 = (int)v20;
  double v33 = *(double *)(a4 + 528);
  double v34 = *(double *)(a4 + 536);
  double v35 = *(double *)(a4 + 520);
  double v36 = v33 * -2.0;
  double v37 = *(double *)(a4 + 544);
  double v38 = v37 * (v33 * -2.0);
  double v39 = (v35 + v35) * v37;
  double v40 = (v35 + v35) * v35;
  double v41 = -1.0 - v33 * -2.0 * v33;
  *(double *)(a4 + 3088) = v38 - (v35 + v35) * v34;
  *(double *)(a4 + 3096) = v39 + v33 * -2.0 * v34;
  *(double *)(a4 + 3104) = v41 + v40;
  *(double *)(a4 + 3136) = -(v41 + (v34 + v34) * v34);
  *(double *)(a4 + 3144) = -(v35 * (v33 * -2.0) - v37 * (v34 + v34));
  *(double *)(a4 + 3152) = v38 + (v34 + v34) * v35;
  double v42 = v37 * (v34 * -2.0);
  *(double *)(a4 + 3112) = v42 + (v35 + v35) * v33;
  *(double *)(a4 + 3120) = v34 * -2.0 * v34 + 1.0 - v40;
  *(double *)(a4 + 3128) = v39 - v34 * -2.0 * v33;
  double v44 = *(double *)(a4 + 504);
  double v43 = *(double *)(a4 + 512);
  double v45 = *(double *)(a4 + 496);
  double v46 = -(v43 * v33 - v44 * v34) - (v43 * v33 - v44 * v34);
  double v47 = -(v45 * v34 - v43 * v35) - (v45 * v34 - v43 * v35);
  double v48 = -(v44 * v35 - v45 * v33) - (v44 * v35 - v45 * v33);
  double v49 = -(v48 * v35 - (-(v44 - v46 * v34) - v47 * v37));
  double v50 = -(v45 + v46 * v37 + v47 * v34 - v48 * v33);
  double v51 = -(v43 + v46 * v33 + v48 * v37 - v47 * v35);
  double v52 = -(v33 * (v33 * -2.0));
  double v53 = 1.0 - (v52 - v34 * (v34 * -2.0));
  double v54 = v35 * -2.0;
  double v55 = -(v33 * (v35 * -2.0));
  double v56 = -(v34 * (v35 * -2.0));
  double v57 = v38 - v34 * (v35 * -2.0);
  double v58 = v35 * -2.0 * v35 + 1.0;
  double v59 = v58 - -(v34 * (v34 * -2.0));
  double v60 = -(v34 * v36);
  *(double *)(a4 + 3160) = v53;
  *(double *)(a4 + 3168) = v42 + v55;
  *(double *)(a4 + 3176) = v56 - v38;
  *(void *)(a4 + 3184) = 0;
  *(double *)(a4 + 3192) = v55 - v42;
  *(double *)(a4 + 3200) = v59;
  *(double *)(a4 + 3208) = v37 * v54 + v60;
  *(void *)(a4 + 3216) = 0;
  *(double *)(a4 + 3224) = v57;
  *(double *)(a4 + 3232) = v60 - v37 * v54;
  *(double *)(a4 + 3240) = v58 - v52;
  *(void *)(a4 + 3248) = 0;
  *(double *)(a4 + 3256) = v50;
  *(double *)(a4 + 3264) = v49;
  *(double *)(a4 + 3272) = v51;
  *(void *)(a4 + 3280) = 0x3FF0000000000000;
  double v62 = *(double *)(a4 + 368);
  double v61 = *(double *)(a4 + 376);
  if (v61 >= v62)
  {
    double v68 = *(double *)(a4 + 456);
  }
  else
  {
    double v63 = v61 * v62;
    double v64 = v61 / v62;
    if (v63 <= 0.0) {
      double v65 = 1.0;
    }
    else {
      double v65 = v64;
    }
    long double v66 = tan(*(double *)(a4 + 456) * 0.5);
    long double v67 = atan(v65 * v66);
    double v68 = v67 + v67;
  }
  long double v69 = tan(v68 * 0.5);
  *(long double *)(a4 + 3752) = v69;
  *(long double *)(a4 + 3760) = v69 * (double)v32 / (double)(int)v22;
  int v70 = *(unsigned __int8 *)(a4 + 3776);
  double v71 = 0.0;
  if (v9)
  {
    switch(*(unsigned char *)a4)
    {
      case 0:
      case 1:
      case 3:
        double v71 = *(double *)(a4 + 24) * 0.0000000249532021;
        break;
      case 2:
        double v73 = fmin(fmax(*(double *)(a4 + 8), -1.48352986), 1.48352986);
        double v74 = *(double *)(a4 + 24);
        long double v75 = cos(v73 + v73) * -559.82 + 111132.92;
        long double v76 = v75 + cos(v73 * 4.0) * 1.175;
        long double v77 = v76 + cos(v73 * 6.0) * -0.0023;
        double v78 = v73 * 0.5;
        long double v79 = tan(v73 * 0.5 + 0.78103484);
        double v80 = log(v79);
        long double v81 = tan(v78 + 0.789761487);
        double v71 = fabs((log(v81) - v80) * 0.159154943) * v74 / v77;
        if (!v70) {
          goto LABEL_40;
        }
        goto LABEL_35;
      default:
        break;
    }
  }
  if (*(unsigned char *)(a4 + 3776))
  {
LABEL_35:
    gdc::CameraView::mercatorCameraView((gdc::CameraView *)&v227, (const Camera *)&v271);
    if (v70 == 3) {
      md::MercatorCameraContext::MercatorCameraContext((uint64_t)&v265, (uint64_t)&v227, 0, *(double *)(a4 + 1368), *(double *)(a4 + 1376), *(double *)(a4 + 1384), 0.0);
    }
    else {
      md::MercatorCameraContext::MercatorCameraContext((uint64_t)&v265, (uint64_t)&v227, 0, *(double *)(a4 + 1368), *(double *)(a4 + 1376), *(double *)(a4 + 1384), v71);
    }
    md::MercatorCameraContext::operator=(a4 + 1392, (uint64_t)&v265);
  }
  else
  {
LABEL_40:
    md::MercatorCameraContext::MercatorCameraContext((uint64_t)&v265, a4, v9, *(double *)(a4 + 1368), *(double *)(a4 + 1376), *(double *)(a4 + 1384), v71);
    md::MercatorCameraContext::operator=(a4 + 1392, (uint64_t)&v265);
  }
  if (__p)
  {
    int v268 = __p;
    operator delete(__p);
  }
  float v82 = gdc::DisplayZoomLevel::centerZoomLevel((gdc::DisplayZoomLevel *)a4, v72);
  *(long double *)(a4 + 3768) = exp2((float)-v82);
  float v83 = v82;
  if (!v70)
  {
    float v84 = log2(*(long double *)(a4 + 2984));
    float v83 = -v84;
  }
  *(void *)(a4 + 3064) = a4;
  *(float *)(a4 + 3072) = fmaxf(v83, 1.0);
  *(float *)(a4 + 3076) = fmaxf(v82, 1.0);
  *(float *)(a4 + 3080) = v12;
  *(unsigned char *)(a4 + 3084) = v70 == 0;
  float32x2_t v85 = +[VKDebugSettings sharedSettings];
  int v86 = [v85 shouldFreezeLayoutCamera];

  uint64_t v87 = *(void *)(a4 + 5584);
  if (v86)
  {
    if (!v87) {
      operator new();
    }
  }
  else if (v87)
  {
    *(void *)(a4 + 5584) = 0;
    float v88 = *(void **)(v87 + 2960);
    if (v88)
    {
      *(void *)(v87 + 2968) = v88;
      operator delete(v88);
    }
    if (*(unsigned char *)(v87 + 1752)) {
      *(unsigned char *)(v87 + 1752) = 0;
    }
    if (*(unsigned char *)(v87 + 1736)) {
      *(unsigned char *)(v87 + 1736) = 0;
    }
    if (*(unsigned char *)(v87 + 352)) {
      *(unsigned char *)(v87 + 352) = 0;
    }
    if (*(unsigned char *)(v87 + 336)) {
      *(unsigned char *)(v87 + 336) = 0;
    }
    MEMORY[0x1A6239270](v87, 0x1060C409A3A3550);
  }
  uint64_t v89 = *(void *)(a2 + 72);
  if (v89 && *(unsigned char *)v89)
  {
    uint64_t v90 = md::LayoutContext::frameState((md::LayoutContext *)a2);
    uint64_t v91 = v90;
    LOBYTE(v227) = *(unsigned char *)(v90 + 128);
    long long v92 = *(_OWORD *)(v90 + 152);
    long long v228 = *(_OWORD *)(v90 + 136);
    long long v229 = v92;
    long long v93 = *(_OWORD *)(v90 + 184);
    long long v230 = *(_OWORD *)(v90 + 168);
    long long v231 = v93;
    uint64_t v232 = *(void *)(v90 + 200);
    long long v94 = *(_OWORD *)(v90 + 224);
    long long v233 = *(_OWORD *)(v90 + 208);
    long long v234 = v94;
    long long v235 = *(_OWORD *)(v90 + 240);
    uint64_t v95 = *(void *)(v90 + 256);
    long long v96 = *(_OWORD *)(v90 + 440);
    long long v247 = *(_OWORD *)(v90 + 424);
    long long v248 = v96;
    long long v97 = *(_OWORD *)(v90 + 408);
    long long v245 = *(_OWORD *)(v90 + 392);
    long long v246 = v97;
    uint64_t v98 = *(void *)(v90 + 456);
    uint64_t v236 = v95;
    uint64_t v249 = v98;
    long long v242 = *(_OWORD *)(v90 + 344);
    long long v243 = *(_OWORD *)(v90 + 360);
    long long v244 = *(_OWORD *)(v90 + 376);
    long long v238 = *(_OWORD *)(v90 + 280);
    long long v239 = *(_OWORD *)(v90 + 296);
    long long v240 = *(_OWORD *)(v90 + 312);
    long long v241 = *(_OWORD *)(v90 + 328);
    long long v237 = *(_OWORD *)(v90 + 264);
    char v250 = 0;
    if (*(unsigned char *)(v90 + 464))
    {
      uint64_t v251 = *(void *)(v90 + 472);
      char v250 = 1;
    }
    char v252 = 0;
    if (*(unsigned char *)(v90 + 480))
    {
      uint64_t v253 = *(void *)(v90 + 488);
      char v252 = 1;
    }
    double v99 = *(double *)(v90 + 504);
    double v223 = *(double *)(v90 + 496);
    double v254 = v223;
    double v255 = v99;
    double v221 = v99;
    long long v100 = *(_OWORD *)(v90 + 528);
    long long v256 = *(_OWORD *)(v90 + 512);
    long long v257 = v100;
    long long v101 = *(_OWORD *)(v90 + 560);
    long long v258 = *(_OWORD *)(v90 + 544);
    long long v259 = v101;
    int v260 = *(_DWORD *)(v90 + 576);
    double v102 = *(double *)(v90 + 592);
    double v222 = *(double *)(v90 + 584);
    double v261 = v222;
    double v225 = v102;
    double v262 = v102;
    double v224 = *(double *)(v90 + 600);
    double v263 = v224;
    long long v264 = *(_OWORD *)(v90 + 608);
    long double v103 = *(double *)(v89 + 16);
    long double v104 = *(double *)(v89 + 24);
    long double v105 = *(double *)(v89 + 32);
    double v106 = v103 * v103 + v104 * v104;
    double v107 = sqrt(v106);
    double v108 = atan2(v105, v107 * 0.996647189);
    double v109 = atan2(v104, v103);
    __double2 v110 = __sincos_stret(v108);
    double v226 = atan2(v105 + v110.__sinval * v110.__sinval * 42841.3115 * v110.__sinval, v107 + v110.__cosval * v110.__cosval * -42697.6727 * v110.__cosval);
    __double2 v111 = __sincos_stret(v226);
    double v112 = 6378137.0 / sqrt(v111.__sinval * v111.__sinval * -0.00669437999 + 1.0);
    double v220 = v109;
    double v113 = v109 + 0.00001;
    double v114 = v107 / v111.__cosval - v112;
    double v115 = v107 / v111.__cosval * v111.__cosval;
    __double2 v116 = __sincos_stret(v113);
    double v117 = 1.0 / sqrt(v106 + v105 * v105);
    double v118 = v117 * v103;
    double v119 = v117 * v104;
    double v120 = v117 * v105;
    long double v121 = -(v103 - v115 * v116.__cosval);
    long double v122 = -(v104 - v115 * v116.__sinval);
    long double v123 = -(v105 - (v114 + v112 * 0.99330562) * v111.__sinval);
    double v124 = 1.0 / sqrt(v121 * v121 + v122 * v122 + v123 * v123);
    long double v125 = v124 * v121;
    long double v126 = v124 * v122;
    double v127 = -(v124 * v122 * v120 - v124 * v123 * v119);
    double v128 = -(v124 * v123 * v118 - v124 * v121 * v120);
    double v129 = -(v125 * v119 - v126 * v118);
    double v130 = -(v129 * v119 - v128 * v120);
    double v131 = -(v127 * v120 - v129 * v118);
    double v132 = -(v128 * v118 - v127 * v119);
    double v133 = v128 - (v129 * v119 - v128 * v120);
    if (v133 + v120 <= 0.0)
    {
      if (v130 <= v128 || v130 <= v120)
      {
        BOOL v158 = v128 <= v120;
        double v159 = sqrt(v120 + 1.0 - v133);
        double v160 = 1.0 / (v159 + v159);
        double v161 = (v118 - (v128 * v118 - v127 * v119)) * v160;
        double v162 = v129 + v119;
        double v163 = v162 * v160;
        double v164 = v159 * 0.5;
        double v165 = (v131 - v127) * v160;
        double v166 = sqrt(v128 + 1.0 - (v120 + v130));
        double v167 = 1.0 / (v166 + v166);
        double v168 = (v131 + v127) * v167;
        double v169 = v166 * 0.5;
        double v170 = v162 * v167;
        double v138 = (v118 - v132) * v167;
        if (v158) {
          double v135 = v161;
        }
        else {
          double v135 = v168;
        }
        if (v158) {
          double v136 = v163;
        }
        else {
          double v136 = v169;
        }
        if (v158) {
          double v137 = v164;
        }
        else {
          double v137 = v170;
        }
        if (v158) {
          double v138 = v165;
        }
      }
      else
      {
        double v171 = sqrt(1.0 - (v120 + v128) - (v129 * v119 - v128 * v120));
        double v172 = v171 + v171;
        double v135 = v171 * 0.5;
        double v136 = (v127 - (v127 * v120 - v129 * v118)) * (1.0 / v172);
        double v137 = (v132 + v118) * (1.0 / v172);
        double v138 = (v129 - v119) * (1.0 / v172);
      }
    }
    else
    {
      double v134 = 0.5 / sqrt(v133 + v120 + 1.0);
      double v135 = v134 * (v129 - v119);
      double v136 = v134 * (v118 - v132);
      double v137 = v134 * (v131 - v127);
      double v138 = 0.25 / v134;
    }
    double v173 = *(double *)(v89 + 40);
    double v174 = *(double *)(v89 + 48);
    double v175 = *(double *)(v89 + 56);
    double v176 = *(double *)(v89 + 64);
    double v177 = v173 * v138 + v174 * v137 - (v175 * v136 + v176 * v135);
    double v178 = v174 * v138 + v175 * v135 - (v173 * v137 + v176 * v136);
    double v179 = v173 * v136 + v175 * v138 - (v174 * v135 + v176 * v137);
    double v180 = v173 * v135 + v174 * v136 + v175 * v137 + v176 * v138;
    double v181 = v179 * v179 + v180 * v180 - (v178 * v178 + v177 * v177);
    if (v181 >= 1.0)
    {
      double v189 = acos((v179 * v179 + v178 * v178) * -2.0 + 1.0);
      double v219 = 0.0;
      double v187 = 0.0;
    }
    else
    {
      double v182 = v180 * v178;
      double v183 = v114;
      double v184 = v177 * v179;
      double v185 = v177 * v180;
      double v186 = v179 * v178;
      double v219 = atan2(v177 * v179 - v180 * v178, v177 * v180 + v179 * v178);
      double v187 = acos(v181);
      long double v188 = v184 + v182;
      double v114 = v183;
      double v189 = atan2(v188, v185 - v186);
    }
    double v190 = v226;
    if (v187 + -1.57079633 == 0.0)
    {
      double v199 = 0.0;
    }
    else
    {
      long double v191 = v114 / cos(v187);
      double v192 = tan(v187);
      long double v193 = cos(v226 + v226) * -559.82 + 111132.92;
      long double v194 = v193 + cos(v226 * 4.0) * 1.175;
      long double v195 = v194 + cos(v226 * 6.0) * -0.0023;
      long double v196 = tan(v226 * 0.5 + 0.78103484);
      double v197 = log(v196);
      long double v198 = tan(v226 * 0.5 + 0.789761487);
      double v199 = v192 * fabs((log(v198) - v197) * 0.159154943) * v114 / v195;
      double v190 = v226;
      double v114 = v191;
    }
    __double2 v200 = __sincos_stret(v189);
    *(double *)&long long v228 = v190 + v199 * v200.__cosval;
    *((double *)&v228 + 1) = v220 + v199 * v200.__sinval;
    *(void *)&long long v229 = 0;
    *((double *)&v229 + 1) = v114;
    *(double *)&long long v230 = v187;
    *((double *)&v230 + 1) = v189;
    *(double *)&long long v231 = -v219;
    double v201 = *(double *)(v91 + 504);
    v270[0] = (int)*(double *)(v91 + 496);
    v270[1] = (int)v201;
    uint64_t v202 = *((void *)&v264 + 1);
    if (v221 >= v223)
    {
      double v206 = v222;
    }
    else
    {
      if (v221 * v223 <= 0.0) {
        double v203 = 1.0;
      }
      else {
        double v203 = v221 / v223;
      }
      long double v204 = tan(v222 * 0.5);
      long double v205 = atan(v204 * v203);
      double v206 = v205 + v205;
    }
    double v269 = v206;
    gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView((uint64_t)&v271, v89 + 16, v270, &v269, *(float *)&v202, *((float *)&v202 + 1), 1.0, v225, v224, *(double *)&v264);
    gdc::CameraView::CameraView((uint64_t)&v265, (uint64_t)&v227, (uint64_t)&v271);
    id v207 = *(id *)a2;
    [v207 sizeInPixels];
    float32x4_t v208 = (unsigned __int8 *)(a4 + 3784);
    double v227 = v209;
    *(void *)&long long v228 = v210;
    md::ViewTransform::setCoordinateSpaceEtc(v208, 1u, (float64x2_t *)&v227, (uint64_t)&v265);

    long double v211 = *(double *)(v89 + 72);
    long double v212 = *(double *)(v89 + 80);
    long double v213 = *(double *)(v89 + 88);
    double v227 = v211;
    *(long double *)&long long v228 = v212;
    *((long double *)&v228 + 1) = v213;
    double v214 = sqrt(v211 * v211 + v212 * v212);
    double v215 = atan2(v213, v214 * 0.996647189);
    double v216 = atan2(v212, v211);
    __double2 v217 = __sincos_stret(v215);
    double v271 = atan2(v213 + v217.__sinval * v217.__sinval * 42841.3115 * v217.__sinval, v214 + v217.__cosval * v217.__cosval * -42697.6727 * v217.__cosval)* 57.2957795;
    *(double *)&long long v272 = v216 * 57.2957795;
    float v150 = (float64x2_t *)&v227;
    float v151 = &v271;
    uint64_t v152 = (uint64_t)v208;
  }
  else
  {
    if (*(unsigned __int8 *)(a4 + 3776) - 1 > 2)
    {
      int v153 = *(unsigned __int8 *)(md::LayoutContext::frameState((md::LayoutContext *)a2) + 128);
      id v154 = *(id *)a2;
      [v154 sizeInPixels];
      v265.f64[0] = v155;
      v265.f64[1] = v156;
      md::ViewTransform::setCoordinateSpaceEtc((unsigned __int8 *)(a4 + 3784), (v153 - 1) < 3, &v265, a4);

      goto LABEL_102;
    }
    int v139 = *(unsigned __int8 *)(md::LayoutContext::frameState((md::LayoutContext *)a2) + 128);
    id v140 = *(id *)a2;
    [v140 sizeInPixels];
    v265.f64[0] = v141;
    v265.f64[1] = v142;
    md::ViewTransform::setCoordinateSpaceEtc((unsigned __int8 *)(a4 + 3784), (v139 - 1) < 3, &v265, a4);

    double v143 = *(double *)(a4 + 8);
    double v144 = *(double *)(a4 + 16);
    double v145 = *(double *)(a4 + 24);
    __double2 v146 = __sincos_stret(v143);
    double v147 = 6378137.0 / sqrt(v146.__sinval * v146.__sinval * -0.00669437999 + 1.0);
    double v148 = (v147 + v145) * v146.__cosval;
    __double2 v149 = __sincos_stret(v144);
    v265.f64[0] = v148 * v149.__cosval;
    v265.f64[1] = v148 * v149.__sinval;
    double v266 = (v145 + v147 * 0.99330562) * v146.__sinval;
    double v227 = v143 * 57.2957795;
    *(double *)&long long v228 = v144 * 57.2957795;
    float v150 = &v265;
    float v151 = &v227;
    uint64_t v152 = a4 + 3784;
  }
  md::ViewTransform::setFocus(v152, (uint64_t)v150, v151);
LABEL_102:
  if (!v312)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v312 + 48))(v312);
  uint64_t result = (uint64_t)v312;
  if (v312 == v311) {
    return (*(uint64_t (**)(void *))(v311[0] + 32))(v311);
  }
  if (v312) {
    return (*(uint64_t (**)(void))(*v312 + 40))();
  }
  return result;
}

void sub_1A1B1EBBC(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 352)) {
    *(unsigned char *)(v1 + 352) = 0;
  }
  if (*(unsigned char *)(v1 + 336)) {
    *(unsigned char *)(v1 + 336) = 0;
  }
  MEMORY[0x1A6239270](v1, 0x1060C409A3A3550);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 168));
  _Unwind_Resume(a1);
}

void *md::MapEngine::updateForConfigurationAndMode(md::MapEngine *this, double a2)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  v192[0] = &unk_1EF520DF8;
  v192[1] = this;
  long double v193 = v192;
  v190[0] = &unk_1EF520E40;
  v190[1] = this;
  long double v191 = v190;
  long double v195 = v194;
  v194[0] = &unk_1EF520E40;
  v194[1] = this;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v4 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v5 = v4;
  os_signpost_id_t v6 = *((void *)this + 152);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v6, "ApplyConfiguration", "", buf, 2u);
  }

  if (v191 == v190)
  {
    (*(void (**)(void *))(v190[0] + 32))(v190);
  }
  else if (v191)
  {
    (*(void (**)(void))(*v191 + 40))();
  }
  if (v193 == v192)
  {
    (*(void (**)(void *))(v192[0] + 32))(v192);
  }
  else if (v193)
  {
    (*(void (**)(void))(*v193 + 40))();
  }
  uint64_t v7 = *((void *)this + 151);
  uint64_t v8 = (unsigned __int8 *)*((void *)this + 133);
  uint64_t v9 = (uint64_t *)*((void *)this + 141);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = *v9;
  if (*v9 != v11)
  {
    uint64_t v12 = *v9;
    while (*(unsigned char *)v12 != 29)
    {
      v12 += 16;
      if (v12 == v11) {
        goto LABEL_21;
      }
    }
  }
  if (v12 == v11) {
LABEL_21:
  }
    uint64_t v13 = 0;
  else {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  uint64_t v14 = (long double *)(v8 + 8);
  if (v10 != v11)
  {
    while (*(unsigned char *)v10 != 20)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_28;
      }
    }
  }
  if (v10 == v11) {
LABEL_28:
  }
    LODWORD(v15) = 0;
  else {
    uint64_t v15 = *(void *)(v10 + 8);
  }
  long long v16 = *(_OWORD *)v14;
  *(void *)(v7 + 32) = *((void *)v8 + 3);
  *(_OWORD *)(v7 + 16) = v16;
  uint64_t v18 = *v9;
  uint64_t v17 = v9[1];
  if (v18 != v17)
  {
    while (*(unsigned char *)v18 != 38)
    {
      v18 += 16;
      if (v18 == v17) {
        goto LABEL_35;
      }
    }
  }
  if (v18 == v17) {
LABEL_35:
  }
    uint64_t v188 = 0;
  else {
    uint64_t v188 = *(void *)(v18 + 8);
  }
  double v19 = +[VKDebugSettings sharedSettings];
  int v20 = [v19 daVinciForceElevatedGround];

  if (v15 > 8 || ((1 << v15) & 0x121) == 0)
  {
    *(unsigned char *)(v7 + 42) = 0;
    *(unsigned char *)(v7 + 40) = 0;
    if (*(_DWORD *)(v7 + 112) != v15)
    {
      uint64_t v30 = *(void *)(v7 + 8);
      if (v30)
      {
        uint64_t v31 = *(void *)(v30 + 32);
        uint64_t v32 = *(void *)(v30 + 40);
        uint64_t v33 = v31;
        if (v31 != v32)
        {
          uint64_t v33 = v31;
          while (*(_WORD *)v33 != 27)
          {
            v33 += 16;
            if (v33 == v32) {
              goto LABEL_64;
            }
          }
        }
        if (v33 != v32)
        {
          uint64_t v34 = *(void *)(v33 + 8);
          if (v34) {
            *(unsigned char *)(v34 + 618) = 0;
          }
        }
LABEL_64:
        uint64_t v35 = v31;
        if (v31 != v32)
        {
          uint64_t v35 = v31;
          while (*(_WORD *)v35 != 32)
          {
            v35 += 16;
            if (v35 == v32) {
              goto LABEL_72;
            }
          }
        }
        if (v35 != v32)
        {
          uint64_t v36 = *(void *)(v35 + 8);
          if (v36) {
            *(unsigned char *)(v36 + 618) = 0;
          }
        }
LABEL_72:
        if (v31 != v32)
        {
          while (*(_WORD *)v31 != 30)
          {
            v31 += 16;
            if (v31 == v32) {
              goto LABEL_79;
            }
          }
        }
        if (v31 != v32)
        {
          uint64_t v37 = *(void *)(v31 + 8);
          if (v37) {
            *(unsigned char *)(v37 + 618) = 0;
          }
        }
      }
LABEL_79:
      *(_DWORD *)(v7 + 112) = v15;
    }
    goto LABEL_255;
  }
  *(_DWORD *)(v7 + 112) = v15;
  uint64_t v21 = 2;
  if ((v13 & 0xFFFFFFFFFFFFFFFDLL) != 1) {
    uint64_t v21 = v13;
  }
  if (*(unsigned char *)(v7 + 136)) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = v13;
  }
  if (v15 == 5 && !v188)
  {
    long long v23 = *(_OWORD *)v14;
    *(void *)(v7 + 32) = *((void *)v8 + 3);
    *(_OWORD *)(v7 + 16) = v23;
  }
  *(unsigned char *)(v7 + 86) = *(unsigned char *)(v7 + 80);
  *(unsigned char *)(v7 + 87) = *(unsigned char *)(v7 + 41);
  int v24 = *v8;
  long long v25 = +[VKDebugSettings sharedSettings];
  char v26 = [v25 shouldFreezeLayoutCamera];

  if ((v26 & 1) == 0)
  {
    if (!v22)
    {
LABEL_109:
      *(unsigned char *)(v7 + 40) = 0;
      goto LABEL_110;
    }
    if (v20)
    {
LABEL_107:
      *(unsigned char *)(v7 + 40) = 1;
LABEL_110:
      *(unsigned char *)(v7 + 42) = 0;
      goto LABEL_111;
    }
    uint64_t v27 = *(void *)(v7 + 8);
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 32);
      uint64_t v29 = *(void *)(v27 + 40);
      if (v28 != v29)
      {
        while (*(_WORD *)v28 != 27)
        {
          v28 += 16;
          if (v28 == v29) {
            goto LABEL_83;
          }
        }
      }
      if (v28 == v29) {
LABEL_83:
      }
        uint64_t v38 = 0;
      else {
        uint64_t v38 = *(void *)(v28 + 8);
      }
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v38 + 72))(buf);
      if (buf[0]) {
        int v39 = *(_DWORD *)&buf[4];
      }
      else {
        int v39 = 512;
      }
    }
    else
    {
      int v39 = 512;
    }
    *(unsigned char *)(v7 + 44) = 0;
    if ((v24 - 1) >= 3)
    {
      if (v24)
      {
        *(unsigned char *)(v7 + 43) = 0;
LABEL_108:
        if (v22 != 2)
        {
          double v175 = *(const QuadTile **)v7;
          if (*(void *)v7)
          {
            long long v187 = *(_OWORD *)(v7 + 24);
            long double v176 = tan(*(double *)(v7 + 16) * 0.5 + 0.785398163);
            long double v177 = log(v176);
            *(void *)&v178.f64[0] = v187;
            v178.f64[1] = v177;
            __asm { FMOV            V1.2D, #0.5 }
            *(float64x2_t *)buf = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v178);
            md::DaVinciGroundMetaData::flagsForPoint((char *)&v189, v175, (double *)buf);
            double v184 = a2 * 1000.0;
            if (!*(unsigned char *)(v7 + 104))
            {
              *(double *)(v7 + 96) = v184;
              *(unsigned char *)(v7 + 104) = 1;
            }
            if ((_BYTE)v189)
            {
              *(_WORD *)(v7 + 41) = 257;
              __int16 v185 = BYTE1(v189);
              int v186 = (BYTE1(v189) >> 1) & 1;
              *(unsigned char *)(v7 + 40) = (BYTE1(v189) & 2) != 0;
              *(unsigned char *)(v7 + 43) = v186;
              *(_WORD *)(v7 + 45) = v185 | 0x100;
              *(double *)(v7 + 96) = v184;
              *(unsigned char *)(v7 + 104) = 1;
              *(unsigned char *)(v7 + 88) = 0;
              goto LABEL_111;
            }
            *(unsigned char *)(v7 + 88) = v184 - *(double *)(v7 + 96) > 2000.0;
          }
          *(unsigned char *)(v7 + 42) = 1;
          *(_WORD *)(v7 + 40) = 0;
          goto LABEL_111;
        }
        goto LABEL_109;
      }
      double v50 = *((double *)v8 + 46);
      double v49 = *((double *)v8 + 47);
      double v51 = v49 * v50;
      if (v49 >= v50)
      {
        double v55 = *((double *)v8 + 57);
      }
      else
      {
        if (v51 <= 0.0) {
          double v52 = 1.0;
        }
        else {
          double v52 = v49 / v50;
        }
        long double v53 = tan(*((double *)v8 + 57) * 0.5);
        long double v54 = atan(v52 * v53);
        double v55 = v54 + v54;
      }
      long double v61 = tan(v55 * 0.5);
      double v59 = v61 * v61 * ((double)(v39 * v39) * (4.0 * v50));
      double v60 = v51 * v49;
    }
    else
    {
      unsigned int v40 = v39;
      double v41 = +[VKDebugSettings sharedSettings];
      char v42 = [v41 daVinciCameraController];
      double v43 = *((double *)v8 + 46);
      double v44 = *((double *)v8 + 47);
      if (v44 >= v43)
      {
        double v48 = *((double *)v8 + 57);
      }
      else
      {
        if (v44 * v43 <= 0.0) {
          double v45 = 1.0;
        }
        else {
          double v45 = v44 / v43;
        }
        long double v46 = tan(*((double *)v8 + 57) * 0.5);
        long double v47 = atan(v45 * v46);
        double v48 = v47 + v47;
      }
      double v56 = 1.0;
      if ((v42 & 1) == 0)
      {
        long double v57 = cos(*v14);
        double v56 = 1.0 / v57 * (1.0 / v57);
      }
      double v58 = tan(v48 * 0.5);

      double v59 = v58 * (double)v40 * (v58 * (double)v40) * (v43 * (4.0 * v56));
      double v60 = v44 * v44 * v43;
    }
    double v62 = 9783.9397 / sqrt(v59 / v60);
    double v63 = *((double *)v8 + 4);
    *(unsigned char *)(v7 + 44) = v63 > v62;
    *(unsigned char *)(v7 + 43) = 0;
    if (v63 > v62) {
      goto LABEL_107;
    }
    goto LABEL_108;
  }
LABEL_111:
  double v64 = *(double *)(v7 + 216);
  BOOL v65 = v64 > 0.0 && *((double *)v8 + 5) * 57.2957795 <= v64;
  if (*(unsigned char *)(v7 + 81)) {
    int v66 = v65;
  }
  else {
    int v66 = 1;
  }
  int v67 = *(unsigned __int8 *)(v7 + 42);
  if (*(unsigned char *)(v7 + 42)) {
    int v67 = *(unsigned __int8 *)(v7 + 87) != *(unsigned __int8 *)(v7 + 41);
  }
  if (v22)
  {
    if (v20)
    {
      *(unsigned char *)(v7 + 80) = *(unsigned char *)(v7 + 40);
      *(_DWORD *)(v7 + 48) = 1065353216;
      uint64_t v68 = *(void *)(v7 + 8);
      if (v68)
      {
        uint64_t v69 = *(void *)(v68 + 32);
        uint64_t v70 = *(void *)(v68 + 40);
        uint64_t v71 = v69;
        if (v69 != v70)
        {
          uint64_t v71 = v69;
          while (*(_WORD *)v71 != 27)
          {
            v71 += 16;
            if (v71 == v70) {
              goto LABEL_178;
            }
          }
        }
        if (v71 != v70)
        {
          uint64_t v96 = *(void *)(v71 + 8);
          if (v96) {
            *(unsigned char *)(v96 + 618) = 0;
          }
        }
LABEL_178:
        uint64_t v97 = v69;
        if (v69 != v70)
        {
          uint64_t v97 = v69;
          while (*(_WORD *)v97 != 32)
          {
            v97 += 16;
            if (v97 == v70) {
              goto LABEL_186;
            }
          }
        }
        if (v97 != v70)
        {
          uint64_t v98 = *(void *)(v97 + 8);
          if (v98) {
            *(unsigned char *)(v98 + 618) = 0;
          }
        }
LABEL_186:
        if (v69 != v70)
        {
          while (*(_WORD *)v69 != 30)
          {
            v69 += 16;
            if (v69 == v70) {
              goto LABEL_193;
            }
          }
        }
        if (v69 != v70)
        {
          uint64_t v99 = *(void *)(v69 + 8);
          if (v99) {
            *(unsigned char *)(v99 + 618) = 0;
          }
        }
      }
LABEL_193:
      *(_DWORD *)(v7 + 76) = 0;
      goto LABEL_255;
    }
    if (v66 | v67)
    {
      int v76 = *(unsigned __int8 *)(v7 + 40);
      *(unsigned char *)(v7 + 80) = v76;
      float v77 = 1.0;
      if (!v76) {
        float v77 = 0.0;
      }
      *(float *)(v7 + 72) = v77;
      *(float *)(v7 + 48) = v77;
      char v78 = *(unsigned char *)(v7 + 43);
      uint64_t v79 = *(void *)(v7 + 8);
      if (v79)
      {
        uint64_t v80 = *(void *)(v79 + 32);
        uint64_t v81 = *(void *)(v79 + 40);
        uint64_t v82 = v80;
        if (v80 != v81)
        {
          uint64_t v82 = v80;
          while (*(_WORD *)v82 != 27)
          {
            v82 += 16;
            if (v82 == v81) {
              goto LABEL_206;
            }
          }
        }
        if (v82 != v81)
        {
          uint64_t v105 = *(void *)(v82 + 8);
          if (v105) {
            *(unsigned char *)(v105 + 618) = v78 ^ 1;
          }
        }
LABEL_206:
        uint64_t v106 = v80;
        if (v80 != v81)
        {
          uint64_t v106 = v80;
          while (*(_WORD *)v106 != 32)
          {
            v106 += 16;
            if (v106 == v81) {
              goto LABEL_214;
            }
          }
        }
        if (v106 != v81)
        {
          uint64_t v107 = *(void *)(v106 + 8);
          if (v107) {
            *(unsigned char *)(v107 + 618) = v78 ^ 1;
          }
        }
LABEL_214:
        if (v80 != v81)
        {
          while (*(_WORD *)v80 != 30)
          {
            v80 += 16;
            if (v80 == v81) {
              goto LABEL_221;
            }
          }
        }
        if (v80 != v81)
        {
          uint64_t v108 = *(void *)(v80 + 8);
          if (v108) {
            *(unsigned char *)(v108 + 618) = v78 ^ 1;
          }
        }
      }
LABEL_221:
      *(unsigned char *)(v7 + 82) = v78;
      *(_DWORD *)(v7 + 76) = 0;
      *(float *)(v7 + 72) = v77;
      goto LABEL_255;
    }
    uint64_t v87 = +[VKDebugSettings sharedSettings];
    [v87 daVinciTransitionDuration];
    float v89 = v88;
    if (*(unsigned char *)(v7 + 86)) {
      float v90 = 1.0;
    }
    else {
      float v90 = 0.0;
    }
    int v91 = *(unsigned __int8 *)(v7 + 40);
    if (v91 == *(unsigned __int8 *)(v7 + 84))
    {
      if (*(double *)(v7 + 64) > a2) {
        goto LABEL_170;
      }
LABEL_166:
      if (v91) {
        float v90 = 1.0;
      }
      else {
        float v90 = 0.0;
      }
      *(unsigned char *)(v7 + 85) |= v91;
LABEL_170:
      int v92 = *(_DWORD *)(v7 + 76);
      if (v92)
      {
        float v93 = a2 - *(double *)(v7 + 56);
        float v94 = fminf(fmaxf(v93 / v89, 0.0), 1.0);
        float v95 = 1.0 - v94;
        if (v92 >= 0) {
          float v95 = v94;
        }
        *(float *)(v7 + 72) = v95;
        if (v94 >= 1.0) {
          *(_DWORD *)(v7 + 76) = 0;
        }
      }
      else
      {
        float v109 = *(float *)(v7 + 72);
        if (v109 != v90)
        {
          char v110 = *(unsigned char *)(v7 + 82);
          if (v109 < v90) {
            int v111 = 1;
          }
          else {
            int v111 = -1;
          }
          *(_DWORD *)(v7 + 76) = v111;
          *(double *)(v7 + 56) = a2;
          *(unsigned char *)(v7 + 83) = v110;
        }
      }
      if (*(unsigned char *)(v7 + 83))
      {
        BOOL v112 = 0;
        uint64_t v113 = *(void *)(v7 + 8);
        if (!v113) {
          goto LABEL_254;
        }
      }
      else
      {
        BOOL v112 = *(unsigned char *)(v7 + 43) == 0;
        uint64_t v113 = *(void *)(v7 + 8);
        if (!v113)
        {
LABEL_254:
          float v121 = *(float *)(v7 + 72);
          *(float *)(v7 + 48) = v121;
          *(unsigned char *)(v7 + 80) = v121 > 0.0;
          *(unsigned char *)(v7 + 82) = *(unsigned char *)(v7 + 43);

          goto LABEL_255;
        }
      }
      uint64_t v114 = *(void *)(v113 + 32);
      uint64_t v115 = *(void *)(v113 + 40);
      uint64_t v116 = v114;
      if (v114 != v115)
      {
        uint64_t v116 = v114;
        while (*(_WORD *)v116 != 27)
        {
          v116 += 16;
          if (v116 == v115) {
            goto LABEL_239;
          }
        }
      }
      if (v116 != v115)
      {
        uint64_t v117 = *(void *)(v116 + 8);
        if (v117) {
          *(unsigned char *)(v117 + 618) = v112;
        }
      }
LABEL_239:
      uint64_t v118 = v114;
      if (v114 != v115)
      {
        uint64_t v118 = v114;
        while (*(_WORD *)v118 != 32)
        {
          v118 += 16;
          if (v118 == v115) {
            goto LABEL_247;
          }
        }
      }
      if (v118 != v115)
      {
        uint64_t v119 = *(void *)(v118 + 8);
        if (v119) {
          *(unsigned char *)(v119 + 618) = v112;
        }
      }
LABEL_247:
      if (v114 != v115)
      {
        while (*(_WORD *)v114 != 30)
        {
          v114 += 16;
          if (v114 == v115) {
            goto LABEL_254;
          }
        }
      }
      if (v114 != v115)
      {
        uint64_t v120 = *(void *)(v114 + 8);
        if (v120) {
          *(unsigned char *)(v120 + 618) = v112;
        }
      }
      goto LABEL_254;
    }
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    long long v100 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
    {
      int v101 = *(unsigned __int8 *)(v7 + 84);
      int v102 = *(unsigned __int8 *)(v7 + 40);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v101;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v102;
      _os_log_impl(&dword_1A1780000, v100, OS_LOG_TYPE_INFO, "DaVinciTransitionManager: transition delay timer reset. Transition from %d to %d", buf, 0xEu);
    }

    double v103 = a2 + 30.0;
    *(double *)(v7 + 64) = a2 + 30.0;
    if (*(unsigned char *)(v7 + 85)) {
      BOOL v104 = v15 != 5;
    }
    else {
      BOOL v104 = 1;
    }
    if (v104 || v188 != 0)
    {
      int v91 = *(unsigned __int8 *)(v7 + 40);
    }
    else
    {
      int v91 = *(unsigned __int8 *)(v7 + 40);
      if (!*(unsigned char *)(v7 + 44) && *(unsigned char *)(v7 + 40))
      {
        int v91 = 1;
LABEL_367:
        *(unsigned char *)(v7 + 84) = v91;
        if (v103 > a2) {
          goto LABEL_170;
        }
        goto LABEL_166;
      }
    }
    *(double *)(v7 + 64) = a2;
    double v103 = a2;
    goto LABEL_367;
  }
  *(unsigned char *)(v7 + 80) = *(unsigned char *)(v7 + 40);
  *(_DWORD *)(v7 + 48) = 0;
  uint64_t v72 = *(void *)(v7 + 8);
  if (v72)
  {
    uint64_t v73 = *(void *)(v72 + 32);
    uint64_t v74 = *(void *)(v72 + 40);
    uint64_t v75 = v73;
    if (v73 != v74)
    {
      uint64_t v75 = v73;
      while (*(_WORD *)v75 != 27)
      {
        v75 += 16;
        if (v75 == v74) {
          goto LABEL_145;
        }
      }
    }
    if (v75 != v74)
    {
      uint64_t v83 = *(void *)(v75 + 8);
      if (v83) {
        *(unsigned char *)(v83 + 618) = 0;
      }
    }
LABEL_145:
    uint64_t v84 = v73;
    if (v73 != v74)
    {
      uint64_t v84 = v73;
      while (*(_WORD *)v84 != 32)
      {
        v84 += 16;
        if (v84 == v74) {
          goto LABEL_153;
        }
      }
    }
    if (v84 != v74)
    {
      uint64_t v85 = *(void *)(v84 + 8);
      if (v85) {
        *(unsigned char *)(v85 + 618) = 0;
      }
    }
LABEL_153:
    if (v73 != v74)
    {
      while (*(_WORD *)v73 != 30)
      {
        v73 += 16;
        if (v73 == v74) {
          goto LABEL_160;
        }
      }
    }
    if (v73 != v74)
    {
      uint64_t v86 = *(void *)(v73 + 8);
      if (v86) {
        *(unsigned char *)(v86 + 618) = 0;
      }
    }
  }
LABEL_160:
  *(unsigned char *)(v7 + 82) = 0;
  *(_DWORD *)(v7 + 76) = 0;
LABEL_255:
  long double v122 = (uint64_t *)*((void *)this + 141);
  uint64_t v123 = *v122;
  uint64_t v124 = v122[1];
  uint64_t v125 = v123;
  if (v123 != v124)
  {
    uint64_t v125 = v123;
    while (*(unsigned char *)v125 != 20)
    {
      v125 += 16;
      if (v125 == v124) {
        goto LABEL_263;
      }
    }
  }
  if (v125 == v124)
  {
LABEL_263:
    LODWORD(v126) = 0;
    if (v123 != v124)
    {
LABEL_264:
      while (*(unsigned char *)v123 != 22)
      {
        v123 += 16;
        if (v123 == v124) {
          goto LABEL_269;
        }
      }
    }
  }
  else
  {
    uint64_t v126 = *(void *)(v125 + 8);
    if (v123 != v124) {
      goto LABEL_264;
    }
  }
  if (v123 == v124) {
LABEL_269:
  }
    uint64_t v127 = 0;
  else {
    uint64_t v127 = *(void *)(v123 + 8);
  }
  if (*((unsigned char *)this + 1241)) {
    BOOL v128 = v126 > 0xA;
  }
  else {
    BOOL v128 = 1;
  }
  if (!v128 && (((1 << v126) & 0x418) != 0 || ((1 << v126) & 6) != 0 && v127))
  {
    *(unsigned char *)(*((void *)this + 112) + 377) = 1;
    int v129 = 3;
  }
  else
  {
    *(unsigned char *)(*((void *)this + 112) + 377) = 0;
    int v129 = 4;
    if (v126 <= 0xB)
    {
      if (((1 << v126) & 0x1E7) != 0)
      {
        if (v127) {
          int v129 = 3;
        }
        else {
          int v129 = 0;
        }
      }
      else if (((1 << v126) & 0x418) != 0)
      {
        int v129 = 1;
      }
      else if (v126 == 11)
      {
        int v129 = 2;
      }
    }
  }
  double v130 = (unsigned __int8 *)*((void *)this + 148);
  if (!v130 || v129 != v130[8])
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    double v131 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
    {
      uint64_t v132 = *((void *)this + 148);
      if (v132)
      {
        unint64_t v133 = *(unsigned __int8 *)(v132 + 8);
        if (v133 > 4) {
          double v134 = "<Invalid>";
        }
        else {
          double v134 = off_1E5A990C0[v133];
        }
      }
      else
      {
        double v134 = "None";
      }
      double v135 = off_1E5A990C0[v129];
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v134;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v135;
      _os_log_impl(&dword_1A1780000, v131, OS_LOG_TYPE_INFO, "Transitioning configuration from '%s' to '%s'", buf, 0x16u);
    }

    uint64_t v136 = *((void *)this + 149);
    if (v136)
    {
      (*(void (**)(uint64_t, md::MapEngine *, md::MapEngine *, void))(*(void *)v136 + 48))(v136, this, this, *((void *)this + 141));
      uint64_t v137 = *((void *)this + 149);
      *((void *)this + 149) = 0;
      if (v137) {
        (*(void (**)(uint64_t))(*(void *)v137 + 8))(v137);
      }
    }
    uint64_t v138 = *((void *)this + 148);
    if (v138) {
      (*(void (**)(uint64_t, md::MapEngine *, md::MapEngine *, void))(*(void *)v138 + 48))(v138, this, this, *((void *)this + 141));
    }
    switch(v129)
    {
      case 1:
        if (*((unsigned char *)this + 1241)) {
          operator new();
        }
        operator new();
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      default:
        operator new();
    }
  }
  int v139 = (*(uint64_t (**)(unsigned __int8 *, md::MapEngine *))(*(void *)v130 + 72))(v130, this);
  int v140 = (*(uint64_t (**)(void, md::MapEngine *))(**((void **)this + 148) + 88))(*((void *)this + 148), this);
  int v141 = v140;
  uint64_t v142 = *((void *)this + 149);
  if (!v142 || (*(unsigned __int8 *)(v142 + 48) != v139 ? (int v143 = 1) : (int v143 = v140), v143 == 1))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 148) + 80))(&v189);
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    double v144 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
    {
      uint64_t v145 = *((void *)this + 149);
      if (v145)
      {
        unint64_t v146 = *(unsigned __int8 *)(v145 + 48);
        if (v146 > 0x12) {
          double v147 = "<Invalid>";
        }
        else {
          double v147 = off_1E5A92CE0[v146];
        }
      }
      else
      {
        double v147 = "None";
      }
      unint64_t v148 = *(unsigned __int8 *)(v189 + 48);
      if (v148 > 0x12) {
        __double2 v149 = "<Invalid>";
      }
      else {
        __double2 v149 = off_1E5A92CE0[v148];
      }
      float v150 = "NO";
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v147;
      *(_WORD *)&buf[12] = 2080;
      if (v141) {
        float v150 = "YES";
      }
      *(void *)&buf[14] = v149;
      __int16 v197 = 2080;
      long double v198 = v150;
      _os_log_impl(&dword_1A1780000, v144, OS_LOG_TYPE_INFO, "Transitioning mode from '%s' to '%s' (force:%s)", buf, 0x20u);
    }

    uint64_t v151 = *((void *)this + 149);
    if (v151)
    {
      (*(void (**)(uint64_t, md::MapEngine *, md::MapEngine *, void))(*(void *)v151 + 48))(v151, this, this, *((void *)this + 141));
      uint64_t v152 = *((void *)this + 149);
      uint64_t v153 = v189;
      *(void *)&long long v189 = 0;
      *((void *)this + 149) = v153;
      if (v152) {
        (*(void (**)(uint64_t))(*(void *)v152 + 8))(v152);
      }
    }
    else
    {
      uint64_t v154 = v189;
      *(void *)&long long v189 = 0;
      *((void *)this + 149) = v154;
    }
    float64_t v155 = (uint64_t *)**((void **)this + 564);
    if (v155 != *(uint64_t **)(*((void *)this + 564) + 8) && *v155 != 0x25FDEB4E57A24DE1)
    {
      float64_t v156 = v155 + 5;
      do
      {
        uint64_t v157 = *v156;
        v156 += 5;
      }
      while (v157 != 0x25FDEB4E57A24DE1);
      float64_t v155 = v156 - 5;
    }
    uint64_t v159 = v155[3];
    BOOL v158 = (std::__shared_weak_count *)v155[4];
    if (v158)
    {
      atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v158->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    uint64_t v160 = *((void *)this + 149);
    int v161 = *(unsigned __int8 *)(v160 + 48);
    *(unsigned char *)(v159 + 16) = v161;
    uint64_t v162 = *((void *)this + 133);
    *(unsigned char *)uint64_t v162 = *(unsigned char *)(v160 + 224);
    if (v161 == 18)
    {
      double v163 = *(double *)(v160 + 56);
    }
    else
    {
      double v165 = *(double *)(v162 + 368);
      double v164 = *(double *)(v162 + 376);
      if (v164 >= v165)
      {
        double v163 = 0.523598776;
      }
      else
      {
        double v166 = v164 * v165;
        double v167 = v165 * 0.267949192 / v164;
        if (v166 <= 0.0) {
          double v167 = 0.267949192;
        }
        long double v168 = atan(v167);
        double v163 = v168 + v168;
      }
    }
    *(double *)(v162 + 456) = v163;
    md::MapEngine::updateSettings(this, 1);
    (*(void (**)(void, md::MapEngine *, md::MapEngine *, void))(**((void **)this + 149) + 40))(*((void *)this + 149), this, this, *((void *)this + 141));
    if (*((unsigned char *)this + 4608)) {
      md::MapEngine::updateLogicsFrequency((uint64_t)this, *(void **)(*((void *)this + 135) + 8), kVariableLogicFrequency, 1);
    }
    id WeakRetained = objc_loadWeakRetained((id *)this + 106);
    [WeakRetained snapMapAfterModeChange];

    md::LogicManager::resetFrequencyCounter(*((md::LogicManager **)this + 140));
    uint64_t v170 = v189;
    *(void *)&long long v189 = 0;
    if (v170) {
      (*(void (**)(uint64_t))(*(void *)v170 + 8))(v170);
    }
  }
  md::MapEngine::updateSettings(this, 0);
  uint64_t v171 = *((void *)this + 113);
  uint64_t v172 = *((void *)this + 149);
  char v173 = *(unsigned char *)(v172 + 225);
  LOBYTE(v172) = *(unsigned char *)(v172 + 224);
  *(unsigned char *)(v171 + 8) = v173;
  *(unsigned char *)(v171 + 9) = v172;
  if (!v195)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v195 + 48))(v195);
  uint64_t result = v195;
  if (v195 == v194) {
    return (void *)(*(uint64_t (**)(void *))(v194[0] + 32))(v194);
  }
  if (v195) {
    return (void *)(*(uint64_t (**)(void))(*v195 + 40))();
  }
  return result;
}

void sub_1A1B20C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  MEMORY[0x1A6239270](v17, 0x10A1C40BEF108A7);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::updateForConfigurationAndMode(double)::$_1,std::allocator<md::MapEngine::updateForConfigurationAndMode(double)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ApplyConfiguration", "", v5, 2u);
  }
}

uint64_t md::CartographicMapEngineConfiguration::resolveMode(md::CartographicMapEngineConfiguration *this, md::MapEngine *a2)
{
  uint64_t v2 = *((void *)a2 + 141);
  uint64_t v3 = *(unsigned char **)v2;
  os_signpost_id_t v4 = *(unsigned char **)(v2 + 8);
  uint8x8_t v5 = v3;
  if (v3 != v4)
  {
    uint8x8_t v5 = v3;
    while (*v5 != 20)
    {
      v5 += 16;
      if (v5 == v4) {
        goto LABEL_10;
      }
    }
  }
  if (v5 == v4)
  {
LABEL_10:
    int v6 = 0;
  }
  else
  {
    int v6 = *((_DWORD *)v5 + 2);
    if ((v6 - 1) < 4) {
      return (0x9080703u >> (8 * (v6 - 1))) & 0xF;
    }
  }
  uint64_t v9 = v3;
  if (v3 != v4)
  {
    uint64_t v9 = v3;
    while (*v9 != 21)
    {
      v9 += 16;
      if (v9 == v4) {
        goto LABEL_18;
      }
    }
  }
  if (v9 == v4) {
LABEL_18:
  }
    uint64_t v10 = 0;
  else {
    uint64_t v10 = *((void *)v9 + 1);
  }
  uint64_t v11 = v3;
  if (v3 != v4)
  {
    uint64_t v11 = v3;
    while (*v11 != 22)
    {
      v11 += 16;
      if (v11 == v4) {
        goto LABEL_31;
      }
    }
  }
  if (v11 != v4)
  {
    if (v10 | *((void *)v11 + 1)) {
      goto LABEL_26;
    }
LABEL_32:
    uint64_t v15 = v3;
    if (v3 != v4)
    {
      uint64_t v15 = v3;
      while (*v15 != 20)
      {
        v15 += 16;
        if (v15 == v4) {
          return 1;
        }
      }
    }
    if (v15 != v4)
    {
      switch(*((_DWORD *)v15 + 2))
      {
        case 1:
          return 3;
        case 2:
          return 7;
        case 3:
          return 8;
        case 4:
          return 9;
        case 5:
          return 5;
        case 6:
          return 2;
        case 7:
          return 4;
        case 8:
          return 6;
        case 9:
          if (v3 == v4) {
            goto LABEL_90;
          }
          break;
        case 0xA:
          return 10;
        case 0xB:
          return 18;
        default:
          return 1;
      }
      while (*v3 != 26)
      {
        v3 += 16;
        if (v3 == v4) {
          goto LABEL_93;
        }
      }
      goto LABEL_90;
    }
    return 1;
  }
LABEL_31:
  if (!v10) {
    goto LABEL_32;
  }
LABEL_26:
  uint64_t v12 = *((void *)a2 + 140);
  unint64_t v13 = *(void *)(v12 + 16);
  if ((v13 & (v13 - 1)) != 0)
  {
    unint64_t v16 = 0x17767EADC5B287BLL;
    if (v13 <= 0x17767EADC5B287BLL) {
      unint64_t v16 = 0x17767EADC5B287BLL % v13;
    }
    uint64_t v14 = *(void **)(*(void *)(v12 + 8) + 8 * v16);
    do
    {
      do
        uint64_t v14 = (void *)*v14;
      while (v14[1] != 0x17767EADC5B287BLL);
    }
    while (v14[2] != 0x17767EADC5B287BLL);
  }
  else
  {
    uint64_t v14 = *(void **)(*(void *)(v12 + 8) + 8 * ((v13 - 1) & 0x17767EADC5B287BLL));
    do
    {
      do
        uint64_t v14 = (void *)*v14;
      while (v14[1] != 0x17767EADC5B287BLL);
    }
    while (v14[2] != 0x17767EADC5B287BLL);
  }
  uint64_t v17 = *(unsigned char **)(v14[5] + 160);
  if (!v17[41] && v17[42])
  {
    LOBYTE(v7) = v17[88];
    if (!(_BYTE)v7) {
      return v7;
    }
    double v19 = v3;
    if (v3 != v4)
    {
      double v19 = v3;
      while (*v19 != 20)
      {
        v19 += 16;
        LOBYTE(v7) = 1;
        if (v19 == v4) {
          return v7;
        }
      }
    }
    if (v19 != v4)
    {
      switch(*((_DWORD *)v19 + 2))
      {
        case 1:
          return 3;
        case 2:
          return 7;
        case 3:
          return 8;
        case 4:
          return 9;
        case 5:
          return 5;
        case 6:
          return 2;
        case 7:
          return 4;
        case 8:
          return 6;
        case 9:
          if (v3 == v4) {
            goto LABEL_90;
          }
          break;
        case 0xA:
          return 10;
        case 0xB:
          return 18;
        default:
          return 1;
      }
      while (*v3 != 26)
      {
        v3 += 16;
        if (v3 == v4) {
          goto LABEL_93;
        }
      }
      goto LABEL_90;
    }
    return 1;
  }
  if (v17[80])
  {
    switch(v6)
    {
      case 0:
        return 11;
      case 8:
        return 13;
      case 5:
        return 12;
    }
  }
  uint64_t v18 = v3;
  if (v3 != v4)
  {
    uint64_t v18 = v3;
    while (*v18 != 20)
    {
      v18 += 16;
      if (v18 == v4) {
        return 1;
      }
    }
  }
  if (v18 == v4) {
    return 1;
  }
  switch(*((_DWORD *)v18 + 2))
  {
    case 1:
      return 3;
    case 2:
      return 7;
    case 3:
      return 8;
    case 4:
      return 9;
    case 5:
      return 5;
    case 6:
      return 2;
    case 7:
      return 4;
    case 8:
      return 6;
    case 9:
      if (v3 == v4) {
        goto LABEL_90;
      }
      break;
    case 0xA:
      return 10;
    case 0xB:
      return 18;
    default:
      return 1;
  }
  while (*v3 != 26)
  {
    v3 += 16;
    if (v3 == v4) {
      goto LABEL_93;
    }
  }
LABEL_90:
  if (v3 == v4)
  {
LABEL_93:
    LOBYTE(v20) = 0;
  }
  else
  {
    unsigned int v20 = v3[8];
    if (v20 >= 4) {
      return 10;
    }
  }
  return (v20 + 14);
}

void _ZNSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__1NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CameraLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__0NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "CameraLogic", "", v5, 2u);
  }
}

uint64_t md::MercatorCameraContext::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  gdc::CameraView::operator=(a1 + 8, a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1376) = v4;
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(void *)(a1 + 1416) = *(void *)(a2 + 1416);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(void *)(a1 + 1464) = *(void *)(a2 + 1464);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1480) = *(void *)(a2 + 1480);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(void *)(a1 + 1512) = *(void *)(a2 + 1512);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  *(void *)(a1 + 1544) = *(void *)(a2 + 1544);
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  *(void *)(a1 + 1560) = *(void *)(a2 + 1560);
  if (a1 != a2) {
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a1 + 1568, *(void *)(a2 + 1568), *(char **)(a2 + 1576), (uint64_t)(*(void *)(a2 + 1576) - *(void *)(a2 + 1568)) >> 4);
  }
  *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(void *)(a1 + 1624) = *(void *)(a2 + 1624);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  long long v5 = *(_OWORD *)(a2 + 1648);
  *(unsigned char *)(a1 + 1664) = *(unsigned char *)(a2 + 1664);
  *(_OWORD *)(a1 + 1648) = v5;
  return a1;
}

void md::ViewTransform::setFocus(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5 = a1 + 1728;
  double v6 = *(double *)a2;
  *(void *)(a1 + 1728) = *(void *)a2;
  *(void *)(a1 + 1736) = *(void *)(a2 + 8);
  *(void *)(a1 + 1744) = *(void *)(a2 + 16);
  double v7 = a3[1];
  long double v8 = tan(*a3 * 0.00872664626 + 0.785398163);
  long double v9 = log(v8);
  *(double *)(a1 + 1752) = v7 * 0.00277777778 + 0.5;
  *(long double *)(a1 + 1760) = v9 * 0.159154943 + 0.5;
  *(void *)(a1 + 1768) = 0;
  float64x2_t v10 = vsubq_f64(*(float64x2_t *)(v5 + 8), *(float64x2_t *)(a1 + 512));
  float64x2_t v11 = vmulq_f64(v10, v10);
  double v12 = sqrt(v11.f64[0] + (v6 - *(double *)(a1 + 504)) * (v6 - *(double *)(a1 + 504)) + v11.f64[1]);
  *(double *)(a1 + 1776) = v12;
  double v13 = v12 * *(double *)(a1 + 1456);
  double v14 = *a3;
  long double v15 = cos(*a3 * 0.034906585) * -559.82 + 111132.92;
  long double v16 = v15 + cos(v14 * 0.0698131701) * 1.175;
  long double v17 = v16 + cos(v14 * 0.104719755) * -0.0023;
  double v18 = v14 * 0.00872664626;
  long double v19 = tan(v18 + 0.78103484);
  double v20 = log(v19);
  long double v21 = tan(v18 + 0.789761487);
  long double v22 = fabs((log(v21) - v20) * 0.159154943) / v17;
  float v23 = 1.0 / v22;
  *(double *)(a1 + 1792) = log2f(v23);
  *(long double *)(a1 + 1784) = v13 * v22 * (v13 * v22);
  *(unsigned char *)(a1 + 1720) = v13 * v22 < 0.1;
}

void md::CartographicMapEngineConfiguration::createPassList(md::CartographicMapEngineConfiguration *this, md::FrameGraphResourceRegistry *a2)
{
}

void sub_1A1B2261C(_Unwind_Exception *a1)
{
  unint64_t shared_weak_owners = v3[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xC) {
    unint64_t shared_weak_owners = 12;
  }
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = shared_weak_owners;
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (!atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  double v7 = (std::__shared_weak_count *)v1[43];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  long double v8 = (std::__shared_weak_count *)v1[41];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = v1[39];
  v1[39] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  float64x2_t v10 = (std::__shared_weak_count *)v1[38];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = v1[36];
  v1[36] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v1[25];
  v1[25] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  double v13 = (std::__shared_weak_count *)v1[24];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v1[8];
  v1[8] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  long double v15 = (std::__shared_weak_count *)v1[7];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long double v16 = (std::__shared_weak_count *)v1[5];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *uint64_t v1 = &unk_1EF553DD8;
  long double v17 = (ggl::RenderQueue *)v1[2];
  v1[2] = 0;
  if (v17)
  {
    ggl::RenderQueue::~RenderQueue(v17);
    MEMORY[0x1A6239270]();
  }
  double v18 = (md::FrameGraph *)v1[1];
  v1[1] = 0;
  if (v18)
  {
    md::FrameGraph::~FrameGraph(v18);
    MEMORY[0x1A6239270]();
  }
  MEMORY[0x1A6239270](v1, 0x10A1C40DA00B628);
  _Unwind_Resume(a1);
}

void sub_1A1B22A00()
{
}

void md::StandardMapEngineMode::~StandardMapEngineMode(md::StandardMapEngineMode *this)
{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
}

void md::RouteRenderLayer::prepare(md::RouteRenderLayer *this, md::LayoutContext *a2)
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)a2 + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x13043386C0978CC2;
    if (*(void *)&v4 <= 0x13043386C0978CC2uLL) {
      uint64_t v6 = 0x13043386C0978CC2uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x13043386C0978CC2;
  }
  double v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  long double v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x13043386C0978CC2)
      {
        if (v8[2] == 0x13043386C0978CC2) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      long double v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x13043386C0978CC2) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    long double v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x13043386C0978CC2) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x13043386C0978CC2)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 9) + 104))(*((void *)this + 9), v13 + 104, 1);
  (*(void (**)(void, uint64_t, void))(**((void **)this + 9) + 104))(*((void *)this + 9), v13, 0);
  uint64_t v14 = (uint64_t *)*((void *)this + 8);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = v16 - *v14;
  if (v16 != *v14)
  {
    do
    {
      double v18 = *(std::__shared_weak_count **)(v16 - 8);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v16 -= 16;
    }
    while (v16 != v15);
  }
  v14[1] = v15;
  uint64_t v19 = *((void *)this + 8);
  uint64_t v20 = *(void *)(v19 + 24);
  for (uint64_t i = *(void *)(v19 + 32); i != v20; i -= 16)
  {
    long double v22 = *(std::__shared_weak_count **)(i - 8);
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(void *)(v19 + 32) = v20;
  float v23 = (void *)*((void *)a2 + 1);
  int8x8_t v24 = (int8x8_t)v23[1];
  uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    unint64_t v26 = 0xE42D19AFCA302E68;
    if (*(void *)&v24 <= 0xE42D19AFCA302E68) {
      unint64_t v26 = 0xE42D19AFCA302E68 % *(void *)&v24;
    }
  }
  else
  {
    unint64_t v26 = (*(void *)&v24 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v27 = *(void **)(*v23 + 8 * v26);
  if (!v27) {
    goto LABEL_62;
  }
  uint64_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_62;
  }
  if (v25.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      if (v30 == 0xE42D19AFCA302E68)
      {
        if (v28[2] == 0xE42D19AFCA302E68) {
          goto LABEL_57;
        }
      }
      else if ((v30 & (*(void *)&v24 - 1)) != v26)
      {
        goto LABEL_62;
      }
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_62;
      }
    }
  }
  while (1)
  {
    unint64_t v29 = v28[1];
    if (v29 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v29 >= *(void *)&v24) {
      v29 %= *(void *)&v24;
    }
    if (v29 != v26) {
      goto LABEL_62;
    }
LABEL_46:
    uint64_t v28 = (void *)*v28;
    if (!v28) {
      goto LABEL_62;
    }
  }
  if (v28[2] != 0xE42D19AFCA302E68) {
    goto LABEL_46;
  }
LABEL_57:
  uint64_t v31 = v28[5];
  if (*(void *)(v31 + 8) != 0xE42D19AFCA302E68 || (uint64_t v32 = *(void *)(v31 + 32)) == 0)
  {
LABEL_62:
    char v35 = 0;
    goto LABEL_63;
  }
  unsigned int v33 = *(_DWORD *)(v32 + 88);
  BOOL v82 = v33 > 0xA;
  unsigned int v34 = (0x418u >> v33) & 1;
  if (v82) {
    char v35 = 0;
  }
  else {
    char v35 = v34;
  }
LABEL_63:
  if (v25.u32[0] > 1uLL)
  {
    uint64_t v36 = 0x1AF456233693CD46;
    if (*(void *)&v24 <= 0x1AF456233693CD46uLL) {
      uint64_t v36 = 0x1AF456233693CD46uLL % *(void *)&v24;
    }
  }
  else
  {
    uint64_t v36 = (*(void *)&v24 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v37 = *(void **)(*v23 + 8 * v36);
  uint64_t v188 = v17;
  if (!v37) {
    goto LABEL_85;
  }
  uint64_t v38 = (void *)*v37;
  if (!v38) {
    goto LABEL_85;
  }
  if (v25.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v40 = v38[1];
      if (v40 == 0x1AF456233693CD46)
      {
        if (v38[2] == 0x1AF456233693CD46) {
          goto LABEL_83;
        }
      }
      else if ((v40 & (*(void *)&v24 - 1)) != v36)
      {
        goto LABEL_85;
      }
      uint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_85;
      }
    }
  }
  while (2)
  {
    unint64_t v39 = v38[1];
    if (v39 != 0x1AF456233693CD46)
    {
      if (v39 >= *(void *)&v24) {
        v39 %= *(void *)&v24;
      }
      if (v39 != v36) {
        goto LABEL_85;
      }
      goto LABEL_72;
    }
    if (v38[2] != 0x1AF456233693CD46)
    {
LABEL_72:
      uint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_85;
      }
      continue;
    }
    break;
  }
LABEL_83:
  uint64_t v41 = v38[5];
  if (*(void *)(v41 + 8) == 0x1AF456233693CD46)
  {
    char v42 = *(double **)(v41 + 32);
    goto LABEL_86;
  }
LABEL_85:
  char v42 = 0;
LABEL_86:
  if (v25.u32[0] >= 2uLL)
  {
    unint64_t v44 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v24 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v44 = 0x8BD499FBD96FBB9ELL % *(void *)&v24;
    }
    double v43 = *(void **)(*v23 + 8 * v44);
    do
    {
      do
        double v43 = (void *)*v43;
      while (v43[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v43[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    double v43 = *(void **)(*v23 + 8 * ((*(void *)&v24 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        double v43 = (void *)*v43;
      while (v43[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v43[2] != 0x8BD499FBD96FBB9ELL);
  }
  int v45 = **(unsigned __int8 **)(v43[5] + 32);
  long double v46 = (void **)*((void *)this + 8);
  long double v47 = (void *)(*(uint64_t (**)(void))(**((void **)this + 9) + 112))(*((void *)this + 9));
  double v48 = (void *)*v47;
  long double v194 = v47 + 1;
  if ((void *)*v47 == v47 + 1)
  {
    uint64_t v191 = 0;
    goto LABEL_292;
  }
  uint64_t v191 = 0;
  uint64_t v189 = (uint64_t)(v46 + 3);
  if (v45) {
    char v49 = 1;
  }
  else {
    char v49 = v35;
  }
  char v192 = v49;
  int v193 = v45;
  do
  {
    id v50 = (id)v48[4];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    id v52 = v50;
    __int16 v197 = v52;
    if ((isKindOfClass & 1) == 0)
    {
      md::StandardRouteOverlayCache::getInternalOverlay((md::StandardRouteOverlayCache *)buf, *((VKPolylineOverlay **)this + 9), v52);
      uint64_t v99 = *(void *)buf;
      if (*(void *)buf)
      {
        id v196 = v197;
        *(unsigned char *)(v99 + 620) = [v196 selected];
        *(unsigned char *)(v99 + 621) = [v196 hasFocus];
        *(unsigned char *)(v99 + 622) = [v196 skipped];
        *(unsigned char *)(v99 + 623) = [v196 showTraffic];
        uint64_t v100 = [v196 boundingMapRegion];
        id v101 = *(id *)v99;
        *(void *)uint64_t v99 = v100;

        *(unsigned char *)(v99 + 624) = [v196 containsTransit];
        [*(id *)(v99 + 160) setSimplificationEpsilonPoints:*(float *)(*((void *)this + 8) + 76)];
        if (v193 || !*(unsigned char *)(v99 + 625)) {
          goto LABEL_154;
        }
        id v108 = *(id *)v99;
        [v108 northLat];
        double v110 = v109;
        [v108 westLng];
        double v112 = v111;
        [v108 southLat];
        double v114 = v113;
        [v108 eastLng];
        double v116 = v115;

        if (v116 * 0.00277777778 + 0.5 <= v42[366]) {
          goto LABEL_171;
        }
        long double v117 = tan(v110 * 0.00872664626 + 0.785398163);
        double v118 = log(v117);
        long double v119 = tan(v114 * 0.00872664626 + 0.785398163);
        double v120 = log(v119);
        if (v112 * 0.00277777778 + 0.5 >= v42[368]) {
          goto LABEL_171;
        }
        double v121 = v120 * 0.159154943 + 0.5;
        if (v118 * 0.159154943 + 0.5 > v42[367] && v121 < v42[369])
        {
LABEL_154:
          int v102 = v46[1];
          if (v102 >= v46[2])
          {
            v46[1] = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v46, *(__n128 *)buf);
          }
          else
          {
            *int v102 = v99;
            uint64_t v103 = *(void *)&buf[8];
            v102[1] = *(void *)&buf[8];
            if (v103) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
            }
            v46[1] = v102 + 2;
          }
        }
        else
        {
LABEL_171:
          ++HIDWORD(v191);
        }
      }
      goto LABEL_270;
    }
    uint64_t v53 = *((void *)this + 9);
    id v54 = v52;
    double v55 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)(v53 + 136), (unint64_t)v54);
    if (!v55)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;

      goto LABEL_270;
    }
    long double v195 = v54;
    long double v57 = (void *)v55[3];
    uint64_t v56 = v55[4];
    *(void *)buf = v57;
    *(void *)&buf[8] = v56;
    if (v56) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
    }

    if (v57)
    {
      uint64_t v58 = [v54 boundingMapRegion];
      double v59 = (void *)v57[11];
      v57[11] = v58;

      double v62 = (void *)*v57;
      long double v61 = v57 + 1;
      double v60 = v62;
      if (v62 == v61)
      {
LABEL_108:
        if ((v192 & 1) == 0 && *(unsigned char *)(*(void *)buf + 136))
        {
          long long v201 = 0u;
          long long v202 = 0u;
          long long v199 = 0u;
          long long v200 = 0u;
          double v63 = [v195 polylines];
          uint64_t v64 = [v63 countByEnumeratingWithState:&v199 objects:v207 count:16];
          if (v64)
          {
            char v65 = 0;
            uint64_t v66 = *(void *)v200;
            do
            {
              for (uint64_t j = 0; j != v64; ++j)
              {
                if (*(void *)v200 != v66) {
                  objc_enumerationMutation(v63);
                }
                md::StandardRouteOverlayCache::getInternalOverlay((md::StandardRouteOverlayCache *)&v203, *((VKPolylineOverlay **)this + 9), *(void **)(*((void *)&v199 + 1) + 8 * j));
                unint64_t v68 = v203.n128_u64[0];
                id v69 = *(id *)v203.n128_u64[0];
                [v69 northLat];
                double v71 = v70;
                [v69 westLng];
                double v73 = v72;
                [v69 southLat];
                double v75 = v74;
                [v69 eastLng];
                double v77 = v76;

                v78.n128_f64[0] = v77 * 0.00277777778 + 0.5;
                if (v78.n128_f64[0] > v42[366])
                {
                  long double v79 = tan(v71 * 0.00872664626 + 0.785398163);
                  double v80 = log(v79) * 0.159154943 + 0.5;
                  long double v81 = tan(v75 * 0.00872664626 + 0.785398163);
                  v78.n128_f64[0] = log(v81) * 0.159154943 + 0.5;
                  BOOL v82 = v73 * 0.00277777778 + 0.5 >= v42[368] || v80 <= v42[367];
                  if (!v82 && v78.n128_f64[0] < v42[369])
                  {
                    uint64_t v84 = (__n128 *)v46[1];
                    if (v84 >= v46[2])
                    {
                      uint64_t v86 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v46, v203);
                    }
                    else
                    {
                      v84->n128_u64[0] = v68;
                      unint64_t v85 = v203.n128_u64[1];
                      v84->n128_u64[1] = v203.n128_u64[1];
                      if (v85) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
                      }
                      uint64_t v86 = v84 + 1;
                    }
                    v46[1] = v86;
                    char v65 = 1;
                  }
                }
                uint64_t v87 = (std::__shared_weak_count *)v203.n128_u64[1];
                if (v203.n128_u64[1]
                  && !atomic_fetch_add((atomic_ullong *volatile)(v203.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v87->__on_zero_shared)(v87, v78);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              uint64_t v64 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v199, v207, 16, v78.n128_f64[0]);
            }
            while (v64);

            if (v65)
            {
              float v88 = (__n128 *)v46[4];
              if (v88 >= v46[5])
              {
                float v90 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v189, *(__n128 *)buf);
              }
              else
              {
                v88->n128_u64[0] = *(void *)buf;
                uint64_t v89 = *(void *)&buf[8];
                v88->n128_u64[1] = *(void *)&buf[8];
                if (v89) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
                }
                float v90 = v88 + 1;
              }
              v46[4] = v90;
              goto LABEL_270;
            }
          }
          else
          {
          }
          LODWORD(v191) = v191 + 1;
          goto LABEL_270;
        }
        BOOL v104 = (__n128 *)v46[4];
        if (v104 >= v46[5])
        {
          double v190 = *(void **)buf;
          uint64_t v106 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v189, *(__n128 *)buf);
          uint64_t v107 = v190;
        }
        else
        {
          v104->n128_u64[0] = *(void *)buf;
          uint64_t v105 = *(void *)&buf[8];
          v104->n128_u64[1] = *(void *)&buf[8];
          if (v105) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v105 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v106 = v104 + 1;
          uint64_t v107 = *(void **)buf;
        }
        v46[4] = v106;
        uint64_t v125 = (void *)*v107;
        uint64_t v123 = v107 + 1;
        uint64_t v124 = v125;
        if (v125 != v123)
        {
          uint64_t v126 = 0;
          unint64_t v127 = (unint64_t)v46[1];
          BOOL v128 = v124;
          do
          {
            uint64_t v129 = v126;
            double v130 = (void *)v128[1];
            if (v130)
            {
              do
              {
                double v131 = v130;
                double v130 = (void *)*v130;
              }
              while (v130);
            }
            else
            {
              do
              {
                double v131 = (void *)v128[2];
                BOOL v98 = *v131 == (void)v128;
                BOOL v128 = v131;
              }
              while (!v98);
            }
            ++v126;
            BOOL v128 = v131;
          }
          while (v131 != v123);
          uint64_t v132 = *v46;
          uint64_t v133 = v127 - (void)*v46;
          uint64_t v134 = v133 >> 4;
          unint64_t v135 = (unint64_t)*v46 + (v133 & 0xFFFFFFFFFFFFFFF0);
          uint64_t v136 = v46[2];
          if (v129 >= (uint64_t)&v136[-v127] >> 4)
          {
            unint64_t v141 = v134 + v126;
            if ((unint64_t)(v134 + v126) >> 60) {
              abort();
            }
            uint64_t v142 = v136 - (unsigned char *)v132;
            if (v142 >> 3 > v141) {
              unint64_t v141 = v142 >> 3;
            }
            if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v143 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v143 = v141;
            }
            if (v143)
            {
              if (v143 >> 60) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              double v144 = (char *)operator new(16 * v143);
            }
            else
            {
              double v144 = 0;
            }
            float v150 = &v144[16 * v134];
            uint64_t v151 = &v150[16 * v126];
            uint64_t v152 = v150;
            do
            {
              *(void *)uint64_t v152 = v124[4];
              uint64_t v153 = v124[5];
              *((void *)v152 + 1) = v153;
              if (v153) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v153 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v154 = (void *)v124[1];
              if (v154)
              {
                do
                {
                  float64_t v155 = v154;
                  uint64_t v154 = (void *)*v154;
                }
                while (v154);
              }
              else
              {
                do
                {
                  float64_t v155 = (void *)v124[2];
                  BOOL v98 = *v155 == (void)v124;
                  uint64_t v124 = v155;
                }
                while (!v98);
              }
              v152 += 16;
              uint64_t v124 = v155;
            }
            while (v152 != v151);
            float64_t v156 = *v46;
            if (*v46 != (void *)v135)
            {
              uint64_t v157 = (void *)v135;
              do
              {
                long long v158 = *((_OWORD *)v157 - 1);
                v157 -= 2;
                *((_OWORD *)v150 - 1) = v158;
                v150 -= 16;
                *uint64_t v157 = 0;
                v157[1] = 0;
              }
              while (v157 != v156);
            }
            uint64_t v159 = v46[1];
            if (v159 != (void *)v135)
            {
              do
              {
                *(_OWORD *)uint64_t v151 = *(_OWORD *)v135;
                v151 += 16;
                *(void *)unint64_t v135 = 0;
                *(void *)(v135 + 8) = 0;
                v135 += 16;
              }
              while ((void *)v135 != v159);
              unint64_t v135 = (unint64_t)v46[1];
            }
            uint64_t v160 = *v46;
            void *v46 = v150;
            v46[1] = v151;
            v46[2] = &v144[16 * v143];
            while ((void *)v135 != v160)
            {
              int v161 = *(std::__shared_weak_count **)(v135 - 8);
              if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
              v135 -= 16;
            }
            if (v160) {
              operator delete(v160);
            }
          }
          else
          {
            uint64_t v137 = v129 + 1;
            uint64_t v138 = v124;
            do
            {
              int v139 = (void *)v138[1];
              int v140 = v138;
              if (v139)
              {
                do
                {
                  uint64_t v138 = v139;
                  int v139 = (void *)*v139;
                }
                while (v139);
              }
              else
              {
                do
                {
                  uint64_t v138 = (void *)v140[2];
                  BOOL v98 = *v138 == (void)v140;
                  int v140 = v138;
                }
                while (!v98);
              }
              BOOL v82 = v137-- <= 1;
            }
            while (!v82);
            uint64_t v145 = v127 - v135;
            uint64_t v146 = (uint64_t)(v127 - v135) >> 4;
            if (v146 > v129)
            {
              double v147 = v46[1];
              goto LABEL_261;
            }
            if (v145 <= -16)
            {
              uint64_t v162 = v124;
              do
              {
                double v164 = (void *)*v162;
                if (*v162)
                {
                  do
                  {
                    uint64_t v138 = v164;
                    double v164 = (void *)v164[1];
                  }
                  while (v164);
                }
                else
                {
                  do
                  {
                    uint64_t v138 = (void *)v162[2];
                    BOOL v98 = *v138 == (void)v162;
                    uint64_t v162 = v138;
                  }
                  while (v98);
                }
                uint64_t v162 = v138;
              }
              while (!__CFADD__(v146++, 1));
            }
            else
            {
              uint64_t v138 = v124;
              if (v127 != v135)
              {
                unint64_t v148 = v124;
                do
                {
                  __double2 v149 = (void *)v148[1];
                  if (v149)
                  {
                    do
                    {
                      uint64_t v138 = v149;
                      __double2 v149 = (void *)*v149;
                    }
                    while (v149);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v138 = (void *)v148[2];
                      BOOL v98 = *v138 == (void)v148;
                      unint64_t v148 = v138;
                    }
                    while (!v98);
                  }
                  unint64_t v148 = v138;
                  BOOL v82 = v146-- <= 1;
                }
                while (!v82);
              }
            }
            if (v138 == v123)
            {
              double v147 = v46[1];
            }
            else
            {
              double v165 = v138;
              double v147 = v46[1];
              do
              {
                void *v147 = v165[4];
                uint64_t v166 = v165[5];
                v147[1] = v166;
                if (v166) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v166 + 8), 1uLL, memory_order_relaxed);
                }
                double v167 = (void *)v165[1];
                if (v167)
                {
                  do
                  {
                    long double v168 = v167;
                    double v167 = (void *)*v167;
                  }
                  while (v167);
                }
                else
                {
                  do
                  {
                    long double v168 = (void *)v165[2];
                    BOOL v98 = *v168 == (void)v165;
                    double v165 = v168;
                  }
                  while (!v98);
                }
                v147 += 2;
                double v165 = v168;
              }
              while (v168 != v123);
            }
            v46[1] = v147;
            if (v145 >= 1)
            {
LABEL_261:
              uint64_t v169 = 16 * v126;
              uint64_t v170 = &v147[-2 * v126];
              for (uint64_t k = v147; (unint64_t)v170 < v127; v170 += 2)
              {
                *k++ = *(_OWORD *)v170;
                *uint64_t v170 = 0;
                v170[1] = 0;
              }
              v46[1] = k;
              if (v147 != (void *)(v135 + v169))
              {
                uint64_t v172 = (std::__shared_weak_count **)(v147 - 1);
                uint64_t v173 = 16 * ((uint64_t)((uint64_t)v147 - v135 - v169) >> 4);
                uint64_t v174 = (uint64_t)&v132[2 * v134 - 2];
                do
                {
                  double v175 = (void *)(v174 + v173);
                  long long v176 = *(_OWORD *)(v174 + v173);
                  *double v175 = 0;
                  v175[1] = 0;
                  long double v177 = *v172;
                  *(_OWORD *)(v172 - 1) = v176;
                  if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                  v172 -= 2;
                  v173 -= 16;
                }
                while (v173);
              }
              if (v138 == v124) {
                goto LABEL_270;
              }
              while (1)
              {
                uint64_t v182 = v124[4];
                uint64_t v181 = v124[5];
                if (v181) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v181 + 8), 1uLL, memory_order_relaxed);
                }
                double v183 = *(std::__shared_weak_count **)(v135 + 8);
                *(void *)unint64_t v135 = v182;
                *(void *)(v135 + 8) = v181;
                if (v183 && !atomic_fetch_add(&v183->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                  std::__shared_weak_count::__release_weak(v183);
                  double v184 = (void *)v124[1];
                  if (!v184)
                  {
                    do
                    {
LABEL_288:
                      __int16 v185 = (void *)v124[2];
                      BOOL v98 = *v185 == (void)v124;
                      uint64_t v124 = v185;
                    }
                    while (!v98);
                    goto LABEL_279;
                  }
                }
                else
                {
                  double v184 = (void *)v124[1];
                  if (!v184) {
                    goto LABEL_288;
                  }
                }
                do
                {
                  __int16 v185 = v184;
                  double v184 = (void *)*v184;
                }
                while (v184);
LABEL_279:
                v135 += 16;
                uint64_t v124 = v185;
                if (v185 == v138) {
                  goto LABEL_270;
                }
              }
            }
          }
        }
        goto LABEL_270;
      }
      while (1)
      {
        unint64_t v91 = v60[4];
        int v92 = (std::__shared_weak_count *)v60[5];
        v203.n128_u64[0] = v91;
        v203.n128_u64[1] = (unint64_t)v92;
        if (v92) {
          atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v93 = *(id *)(v91 + 144);
        *(unsigned char *)(v91 + 620) = [v93 selected];
        *(unsigned char *)(v91 + 621) = [v93 hasFocus];
        *(unsigned char *)(v91 + 622) = [v93 skipped];
        *(unsigned char *)(v91 + 623) = [v93 showTraffic];
        uint64_t v94 = [v93 boundingMapRegion];
        float v95 = *(void **)v91;
        *(void *)unint64_t v91 = v94;

        *(unsigned char *)(v91 + 624) = [v93 containsTransit];
        [*(id *)(v91 + 160) setSimplificationEpsilonPoints:*(float *)(*((void *)this + 8) + 76)];
        if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
          uint64_t v96 = (void *)v60[1];
          if (!v96)
          {
            do
            {
LABEL_149:
              uint64_t v97 = (void *)v60[2];
              BOOL v98 = *v97 == (void)v60;
              double v60 = v97;
            }
            while (!v98);
            goto LABEL_140;
          }
        }
        else
        {
          uint64_t v96 = (void *)v60[1];
          if (!v96) {
            goto LABEL_149;
          }
        }
        do
        {
          uint64_t v97 = v96;
          uint64_t v96 = (void *)*v96;
        }
        while (v96);
LABEL_140:
        double v60 = v97;
        if (v97 == v61) {
          goto LABEL_108;
        }
      }
    }
LABEL_270:
    float64x2_t v178 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }

    double v179 = (void *)v48[1];
    if (v179)
    {
      do
      {
        double v180 = v179;
        double v179 = (void *)*v179;
      }
      while (v179);
    }
    else
    {
      do
      {
        double v180 = (void *)v48[2];
        BOOL v98 = *v180 == (void)v48;
        double v48 = v180;
      }
      while (!v98);
    }
    double v48 = v180;
  }
  while (v180 != v194);
LABEL_292:
  uint64_t v186 = ((unsigned char *)v46[1] - (unsigned char *)*v46) >> 4;
  if (v188 >> 4 != v186)
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
    }
    long long v187 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218496;
      *(void *)&uint8_t buf[4] = v186;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v191;
      __int16 v205 = 1024;
      int v206 = HIDWORD(v191);
      _os_log_impl(&dword_1A1780000, v187, OS_LOG_TYPE_INFO, "RouteRenderLayer::prepare routelines to process %zu, group culled %d, culled %d", buf, 0x18u);
    }
  }
}

void sub_1A1B23D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Unwind_Resume(a1);
}

void md::StandardRouteOverlayCache::update(VKPolylineOverlay *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint8x8_t v5 = a2 + 1;
  uint64_t v6 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    p_trafficSegments = &a1[1]._trafficSegments;
    unsigned int v93 = a3;
    while (1)
    {
      id v8 = (id)v6[4];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          md::StandardRouteOverlayCache::getInternalOverlay((md::StandardRouteOverlayCache *)&v94, a1, v8);
          uint64_t v14 = v94;
          uint64_t v13 = v95;
          if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            if (v14)
            {
LABEL_15:
              int v15 = v14[625];

              if (v15 == v3) {
                goto LABEL_24;
              }
              goto LABEL_23;
            }
          }
          else if (v14)
          {
            goto LABEL_15;
          }
        }
        goto LABEL_22;
      }
      id v9 = v8;
      unint64_t v10 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(p_trafficSegments, (unint64_t)v9);
      if (!v10) {
        break;
      }
      uint64_t v12 = v10[3];
      uint64_t v11 = (std::__shared_weak_count *)v10[4];
      if (!v11) {
        goto LABEL_18;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);

      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v3 = v93;
      if (v12)
      {
LABEL_19:
        int v16 = *(unsigned __int8 *)(v12 + 136);

        if (v16 == v3) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
LABEL_22:

LABEL_23:
      (*((void (**)(VKPolylineOverlay *, id, uint64_t))a1->super.isa + 11))(a1, v8, v3);
LABEL_24:

      uint64_t v17 = (void *)v6[1];
      if (v17)
      {
        do
        {
          double v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          double v18 = (void *)v6[2];
          BOOL v19 = *v18 == (void)v6;
          uint64_t v6 = v18;
        }
        while (!v19);
      }
      uint64_t v6 = v18;
      if (v18 == v5) {
        goto LABEL_30;
      }
    }
    uint64_t v12 = 0;
LABEL_18:

    if (v12) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
LABEL_30:
  uint64_t v94 = 0;
  float v95 = 0;
  unint64_t v96 = 0;
  routeRibbon = a1[1]._routeRibbon;
  if (routeRibbon)
  {
    long double v21 = 0;
    while (1)
    {
      if (*(unsigned __int8 *)(*((void *)routeRibbon + 3) + 625) != v3) {
        goto LABEL_34;
      }
      float v23 = (void *)*((void *)routeRibbon + 2);
      int8x8_t v24 = (void *)*v5;
      if (*v5)
      {
        uint8x8_t v25 = v5;
        do
        {
          unint64_t v26 = v24[4];
          BOOL v27 = v26 >= (unint64_t)v23;
          if (v26 >= (unint64_t)v23) {
            uint64_t v28 = v24;
          }
          else {
            uint64_t v28 = v24 + 1;
          }
          if (v27) {
            uint8x8_t v25 = v24;
          }
          int8x8_t v24 = (void *)*v28;
        }
        while (*v28);
        if (v25 != v5 && (unint64_t)v23 >= v25[4]) {
          goto LABEL_34;
        }
      }
      id v29 = v23;
      id v30 = v29;
      if ((unint64_t)v21 < v96)
      {
        id *v21 = v29;
        long double v22 = (std::__shared_weak_count *)(v21 + 1);
      }
      else
      {
        uint64_t v31 = v94;
        uint64_t v32 = (char *)((char *)v21 - v94);
        uint64_t v33 = ((char *)v21 - v94) >> 3;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61) {
          abort();
        }
        uint64_t v35 = v96 - (void)v94;
        if ((uint64_t)(v96 - (void)v94) >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        long long v37 = 0uLL;
        if (v36)
        {
          if (v36 >> 61) {
LABEL_133:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          uint64_t v38 = (char *)operator new(8 * v36);
          long long v37 = 0uLL;
        }
        else
        {
          uint64_t v38 = 0;
        }
        unint64_t v39 = &v38[8 * v33];
        uint64_t v40 = &v38[8 * v36];
        *(void *)unint64_t v39 = v30;
        long double v22 = (std::__shared_weak_count *)(v39 + 8);
        uint64_t v41 = (char *)((char *)v21 - v31);
        if (v21 != (id *)v31)
        {
          char v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) <= 0x137
            || (unint64_t v47 = (unint64_t)v42 & 0xFFFFFFFFFFFFFFF8,
                (id *)((char *)v21 - ((unint64_t)v42 & 0xFFFFFFFFFFFFFFF8) - 8) > v21 - 1)
            || &v32[(void)(v38 - 8) - v47] > &v32[(void)(v38 - 8)]
            || (unint64_t v48 = (unint64_t)v42 >> 3, &v21[-v48 - 1] < (id *)v39)
            && &v32[(void)(v38 - 8) - v47] < (char *)v21)
          {
            double v43 = v21;
          }
          else
          {
            unint64_t v49 = v48 + 1;
            double v43 = &v21[-(v49 & 0x3FFFFFFFFFFFFFFCLL)];
            id v50 = &v38[8 * v33 - 16];
            double v51 = v21 - 4;
            uint64_t v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v54 = *(_OWORD *)v51;
              long long v53 = *((_OWORD *)v51 + 1);
              *(_OWORD *)double v51 = v37;
              *((_OWORD *)v51 + 1) = v37;
              v51 -= 4;
              *((_OWORD *)v50 - 1) = v54;
              *(_OWORD *)id v50 = v53;
              v50 -= 32;
              v52 -= 4;
            }
            while (v52);
            v39 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
            if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_62:
              long double v21 = (id *)v94;
              int v45 = (id *)&v95->__vftable;
              uint64_t v94 = v39;
              unint64_t v96 = (unint64_t)v40;
              if (v95 != (std::__shared_weak_count *)v21)
              {
                do
                {
                  long double v46 = *--v45;
                }
                while (v45 != v21);
              }
              if (!v21) {
                goto LABEL_33;
              }
LABEL_67:
              operator delete(v21);
              goto LABEL_33;
            }
          }
          do
          {
            uint64_t v44 = (uint64_t)*--v43;
            *double v43 = 0;
            *((void *)v39 - 1) = v44;
            v39 -= 8;
          }
          while (v43 != (id *)v31);
          goto LABEL_62;
        }
        uint64_t v94 = &v38[8 * v33];
        unint64_t v96 = (unint64_t)v40;
        if (v21) {
          goto LABEL_67;
        }
      }
LABEL_33:
      float v95 = v22;
      long double v21 = (id *)&v22->__vftable;
LABEL_34:
      routeRibbon = *(VKRouteLine **)routeRibbon;
      if (!routeRibbon) {
        goto LABEL_77;
      }
    }
  }
  long double v21 = 0;
LABEL_77:
  for (uint64_t i = a1[1]._traffic; i; uint64_t i = *(GEOComposedRouteTraffic **)i)
  {
    if (*(unsigned __int8 *)(*((void *)i + 3) + 136) != v3) {
      continue;
    }
    long double v61 = (void *)*((void *)i + 2);
    double v62 = (void *)*v5;
    if (*v5)
    {
      double v63 = v5;
      do
      {
        unint64_t v64 = v62[4];
        BOOL v65 = v64 >= (unint64_t)v61;
        if (v64 >= (unint64_t)v61) {
          uint64_t v66 = v62;
        }
        else {
          uint64_t v66 = v62 + 1;
        }
        if (v65) {
          double v63 = v62;
        }
        double v62 = (void *)*v66;
      }
      while (*v66);
      if (v63 != v5 && (unint64_t)v61 >= v63[4]) {
        continue;
      }
    }
    id v67 = v61;
    id v68 = v67;
    if ((unint64_t)v21 < v96)
    {
      id *v21 = v67;
      double v60 = (std::__shared_weak_count *)(v21 + 1);
    }
    else
    {
      id v69 = v94;
      double v70 = (char *)((char *)v21 - v94);
      uint64_t v71 = ((char *)v21 - v94) >> 3;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 61) {
        abort();
      }
      uint64_t v73 = v96 - (void)v94;
      if ((uint64_t)(v96 - (void)v94) >> 2 > v72) {
        unint64_t v72 = v73 >> 2;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      long long v75 = 0uLL;
      if (v74)
      {
        if (v74 >> 61) {
          goto LABEL_133;
        }
        double v76 = (char *)operator new(8 * v74);
        long long v75 = 0uLL;
      }
      else
      {
        double v76 = 0;
      }
      double v77 = &v76[8 * v71];
      __n128 v78 = &v76[8 * v74];
      *(void *)double v77 = v68;
      double v60 = (std::__shared_weak_count *)(v77 + 8);
      long double v79 = (char *)((char *)v21 - v69);
      if (v21 != (id *)v69)
      {
        double v80 = v79 - 8;
        if ((unint64_t)(v79 - 8) <= 0x137
          || (unint64_t v85 = (unint64_t)v80 & 0xFFFFFFFFFFFFFFF8,
              (id *)((char *)v21 - ((unint64_t)v80 & 0xFFFFFFFFFFFFFFF8) - 8) > v21 - 1)
          || &v70[(void)(v76 - 8) - v85] > &v70[(void)(v76 - 8)]
          || (unint64_t v86 = (unint64_t)v80 >> 3, &v21[-v86 - 1] < (id *)v77)
          && &v70[(void)(v76 - 8) - v85] < (char *)v21)
        {
          long double v81 = v21;
        }
        else
        {
          unint64_t v87 = v86 + 1;
          long double v81 = &v21[-(v87 & 0x3FFFFFFFFFFFFFFCLL)];
          float v88 = &v76[8 * v71 - 16];
          uint64_t v89 = v21 - 4;
          uint64_t v90 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v92 = *(_OWORD *)v89;
            long long v91 = *((_OWORD *)v89 + 1);
            *(_OWORD *)uint64_t v89 = v75;
            *((_OWORD *)v89 + 1) = v75;
            v89 -= 4;
            *((_OWORD *)v88 - 1) = v92;
            *(_OWORD *)float v88 = v91;
            v88 -= 32;
            v90 -= 4;
          }
          while (v90);
          v77 -= 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_114:
            long double v21 = (id *)v94;
            uint64_t v83 = (id *)&v95->__vftable;
            uint64_t v94 = v77;
            unint64_t v96 = (unint64_t)v78;
            if (v95 != (std::__shared_weak_count *)v21)
            {
              do
              {
                uint64_t v84 = *--v83;
              }
              while (v83 != v21);
            }
            if (!v21) {
              goto LABEL_85;
            }
LABEL_119:
            operator delete(v21);
            goto LABEL_85;
          }
        }
        do
        {
          uint64_t v82 = (uint64_t)*--v81;
          *long double v81 = 0;
          *((void *)v77 - 1) = v82;
          v77 -= 8;
        }
        while (v81 != (id *)v69);
        goto LABEL_114;
      }
      uint64_t v94 = &v76[8 * v71];
      unint64_t v96 = (unint64_t)v78;
      if (v21) {
        goto LABEL_119;
      }
    }
LABEL_85:
    float v95 = v60;
    long double v21 = (id *)&v60->__vftable;
  }
  uint64_t v56 = (id *)v94;
  if (v94 == (char *)v21)
  {
    if (!v21) {
      return;
    }
  }
  else
  {
    long double v57 = (id *)v94;
    do
    {
      id v58 = *v57;
      (*((void (**)(VKPolylineOverlay *, id, uint64_t))a1->super.isa + 12))(a1, v58, v3);

      ++v57;
    }
    while (v57 != v21);
    if (!v56) {
      return;
    }
    do
    {
      double v59 = *--v21;
    }
    while (v21 != v56);
  }
  operator delete(v56);
}

void sub_1A1B24554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

void md::FrameGraphBuilder::build(md::FrameGraphBuilder *this, md::FrameGraphResourceRegistry *a2, void *a3)
{
  uint64_t v316 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  uint8x8_t v5 = (unsigned __int8 **)*((void *)a2 + 1);
  unint64_t v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 3);
  if (v5 == (unsigned __int8 **)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *,false>(v4, v5, v7, 1);
  uint64_t v8 = *((void *)a2 + 3);
  id v9 = (unsigned __int8 **)*((void *)a2 + 4);
  unint64_t v10 = 126 - 2 * __clz(((uint64_t)v9 - v8) >> 3);
  if (v9 == (unsigned __int8 **)v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,false>(v8, v9, v11, 1);
  long long v305 = 0;
  uint64_t v306 = 0;
  uint64_t v304 = &v305;
  uint64_t v12 = *(unsigned __int8 ***)a2;
  long long v298 = a2;
  long long v299 = (unsigned __int8 **)*((void *)a2 + 1);
  if (*(unsigned __int8 ***)a2 == v299) {
    goto LABEL_244;
  }
  do
  {
    uint64_t v13 = *v12;
    uint64_t v14 = v305;
    int v15 = &v305;
    int v16 = &v305;
    if (v305)
    {
      unsigned int v17 = *v13;
      double v18 = v305;
      do
      {
        unsigned int v19 = *(unsigned __int8 *)v18[4];
        if (v17 >= v19)
        {
          if (v19 >= v17) {
            goto LABEL_27;
          }
          ++v18;
        }
        double v18 = (uint64_t *)*v18;
      }
      while (v18);
      unsigned int v20 = *v13;
      while (1)
      {
        while (1)
        {
          int v16 = (uint64_t **)v14;
          unsigned int v21 = *(unsigned __int8 *)v14[4];
          if (v20 >= v21) {
            break;
          }
          uint64_t v14 = *v16;
          int v15 = v16;
          if (!*v16) {
            goto LABEL_23;
          }
        }
        if (v21 >= v20) {
          break;
        }
        uint64_t v14 = v16[1];
        if (!v14)
        {
          int v15 = v16 + 1;
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      long double v22 = (uint64_t *)operator new(0x40uLL);
      v22[4] = (uint64_t)v13;
      v22[5] = 0;
      v22[6] = 0;
      v22[7] = 0;
      *long double v22 = 0;
      v22[1] = 0;
      v22[2] = (uint64_t)v16;
      *int v15 = v22;
      if (*v304)
      {
        uint64_t v304 = (uint64_t **)*v304;
        float v23 = *v15;
      }
      else
      {
        float v23 = v22;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v305, v23);
      ++v306;
      uint64_t v13 = *v12;
    }
LABEL_27:
    int8x8_t v24 = (unsigned __int8 *)*((void *)v13 + 7);
    uint8x8_t v25 = v13 + 64;
    if (v24 != v13 + 64)
    {
      do
      {
        uint64_t v26 = *((void *)v24 + 4);
        BOOL v27 = *(void **)(v26 + 64);
        uint64_t v28 = (void *)(v26 + 72);
        if (v27 != (void *)(v26 + 72))
        {
          do
          {
            uint64_t v31 = (uint64_t *)*v12;
            uint64_t v308 = (unsigned __int8 *)v27[4];
            uint64_t v32 = v305;
            uint64_t v33 = &v305;
            unint64_t v34 = &v305;
            if (v305)
            {
              unsigned int v35 = *(unsigned __int8 *)v31;
              while (1)
              {
                while (1)
                {
                  unint64_t v34 = (uint64_t **)v32;
                  unsigned int v36 = *(unsigned __int8 *)v32[4];
                  if (v35 >= v36) {
                    break;
                  }
                  uint64_t v32 = *v34;
                  uint64_t v33 = v34;
                  if (!*v34) {
                    goto LABEL_42;
                  }
                }
                if (v36 >= v35) {
                  break;
                }
                uint64_t v32 = v34[1];
                if (!v32)
                {
                  uint64_t v33 = v34 + 1;
                  goto LABEL_42;
                }
              }
            }
            else
            {
LABEL_42:
              long long v37 = (uint64_t *)v34;
              unint64_t v34 = (uint64_t **)operator new(0x40uLL);
              v34[4] = v31;
              v34[5] = 0;
              v34[6] = 0;
              v34[7] = 0;
              uint64_t *v34 = 0;
              v34[1] = 0;
              v34[2] = v37;
              std::__shared_weak_count *v33 = (uint64_t *)v34;
              uint64_t v38 = (uint64_t *)v34;
              if (*v304)
              {
                uint64_t v304 = (uint64_t **)*v304;
                uint64_t v38 = *v33;
              }
              unint64_t v39 = v305;
              BOOL v224 = v38 == v305;
              *((unsigned char *)v38 + 24) = v38 == v305;
              if (!v224)
              {
                do
                {
                  uint64_t v40 = v38[2];
                  if (*(unsigned char *)(v40 + 24)) {
                    break;
                  }
                  uint64_t v41 = *(uint64_t **)(v40 + 16);
                  uint64_t v42 = *v41;
                  if (*v41 == v40)
                  {
                    uint64_t v45 = v41[1];
                    if (!v45 || (v46 = *(unsigned __int8 *)(v45 + 24), double v43 = (unsigned char *)(v45 + 24), v46))
                    {
                      if (*(uint64_t **)v40 == v38)
                      {
                        uint64_t v47 = v38[2];
                      }
                      else
                      {
                        uint64_t v47 = *(void *)(v40 + 8);
                        uint64_t v48 = *(void *)v47;
                        *(void *)(v40 + 8) = *(void *)v47;
                        if (v48)
                        {
                          *(void *)(v48 + 16) = v40;
                          uint64_t v41 = *(uint64_t **)(v40 + 16);
                        }
                        *(void *)(v47 + 16) = v41;
                        *(void *)(*(void *)(v40 + 16) + 8 * (**(void **)(v40 + 16) != v40)) = v47;
                        *(void *)uint64_t v47 = v40;
                        *(void *)(v40 + 16) = v47;
                        uint64_t v41 = *(uint64_t **)(v47 + 16);
                        uint64_t v40 = *v41;
                      }
                      *(unsigned char *)(v47 + 24) = 1;
                      *((unsigned char *)v41 + 24) = 0;
                      uint64_t v51 = *(void *)(v40 + 8);
                      uint64_t *v41 = v51;
                      if (v51) {
                        *(void *)(v51 + 16) = v41;
                      }
                      *(void *)(v40 + 16) = v41[2];
                      *(void *)(v41[2] + 8 * (*(void *)v41[2] != (void)v41)) = v40;
                      *(void *)(v40 + 8) = v41;
                      goto LABEL_71;
                    }
                  }
                  else if (!v42 || (v44 = *(unsigned __int8 *)(v42 + 24), double v43 = (unsigned char *)(v42 + 24), v44))
                  {
                    if (*(uint64_t **)v40 == v38)
                    {
                      uint64_t v49 = v38[1];
                      *(void *)uint64_t v40 = v49;
                      if (v49)
                      {
                        *(void *)(v49 + 16) = v40;
                        uint64_t v41 = *(uint64_t **)(v40 + 16);
                      }
                      v38[2] = (uint64_t)v41;
                      *(void *)(*(void *)(v40 + 16) + 8 * (**(void **)(v40 + 16) != v40)) = v38;
                      v38[1] = v40;
                      *(void *)(v40 + 16) = v38;
                      uint64_t v41 = (uint64_t *)v38[2];
                    }
                    else
                    {
                      uint64_t v38 = (uint64_t *)v38[2];
                    }
                    *((unsigned char *)v38 + 24) = 1;
                    *((unsigned char *)v41 + 24) = 0;
                    uint64_t v40 = v41[1];
                    id v50 = *(uint64_t **)v40;
                    v41[1] = *(void *)v40;
                    if (v50) {
                      v50[2] = (uint64_t)v41;
                    }
                    *(void *)(v40 + 16) = v41[2];
                    *(void *)(v41[2] + 8 * (*(void *)v41[2] != (void)v41)) = v40;
                    *(void *)uint64_t v40 = v41;
LABEL_71:
                    v41[2] = v40;
                    break;
                  }
                  *(unsigned char *)(v40 + 24) = 1;
                  uint64_t v38 = v41;
                  *((unsigned char *)v41 + 24) = v41 == v39;
                  *double v43 = 1;
                }
                while (v41 != v39);
              }
              ++v306;
            }
            long long v53 = (unsigned __int8 **)v34[5];
            long long v54 = (unsigned __int8 **)v34[6];
            uint64_t v52 = (unint64_t *)(v34 + 5);
            if (v53 != v54)
            {
              while (**v53 < *v308)
              {
                if (++v53 == v54)
                {
                  long long v53 = v54;
                  goto LABEL_79;
                }
              }
            }
            if (v53 == v54 || (double v55 = v308, *v308 != **v53))
            {
LABEL_79:
              std::vector<md::FrameGraphPass *>::insert(v52, v53, (char *)&v308);
              double v55 = v308;
            }
            uint64_t v56 = v305;
            long double v57 = &v305;
            id v58 = &v305;
            if (v305)
            {
              unsigned int v59 = *v55;
              double v60 = v305;
              do
              {
                unsigned int v61 = *(unsigned __int8 *)v60[4];
                if (v59 >= v61)
                {
                  if (v61 >= v59) {
                    goto LABEL_122;
                  }
                  ++v60;
                }
                double v60 = (uint64_t *)*v60;
              }
              while (v60);
              while (1)
              {
                while (1)
                {
                  id v58 = (uint64_t **)v56;
                  unsigned int v62 = *(unsigned __int8 *)v56[4];
                  if (v59 >= v62) {
                    break;
                  }
                  uint64_t v56 = *v58;
                  long double v57 = v58;
                  if (!*v58) {
                    goto LABEL_91;
                  }
                }
                if (v62 >= v59) {
                  break;
                }
                uint64_t v56 = v58[1];
                if (!v56)
                {
                  long double v57 = v58 + 1;
                  goto LABEL_91;
                }
              }
            }
            else
            {
LABEL_91:
              double v63 = (uint64_t *)operator new(0x40uLL);
              v63[4] = (uint64_t)v55;
              v63[5] = 0;
              v63[6] = 0;
              v63[7] = 0;
              *double v63 = 0;
              v63[1] = 0;
              v63[2] = (uint64_t)v58;
              *long double v57 = v63;
              if (*v304)
              {
                uint64_t v304 = (uint64_t **)*v304;
                double v63 = *v57;
              }
              unint64_t v64 = v305;
              BOOL v224 = v63 == v305;
              *((unsigned char *)v63 + 24) = v63 == v305;
              if (!v224)
              {
                do
                {
                  uint64_t v65 = v63[2];
                  if (*(unsigned char *)(v65 + 24)) {
                    break;
                  }
                  uint64_t v66 = *(uint64_t **)(v65 + 16);
                  uint64_t v67 = *v66;
                  if (*v66 == v65)
                  {
                    uint64_t v70 = v66[1];
                    if (!v70 || (v71 = *(unsigned __int8 *)(v70 + 24), id v68 = (unsigned char *)(v70 + 24), v71))
                    {
                      if (*(uint64_t **)v65 == v63)
                      {
                        uint64_t v72 = v63[2];
                      }
                      else
                      {
                        uint64_t v72 = *(void *)(v65 + 8);
                        uint64_t v73 = *(void *)v72;
                        *(void *)(v65 + 8) = *(void *)v72;
                        if (v73)
                        {
                          *(void *)(v73 + 16) = v65;
                          uint64_t v66 = *(uint64_t **)(v65 + 16);
                        }
                        *(void *)(v72 + 16) = v66;
                        *(void *)(*(void *)(v65 + 16) + 8 * (**(void **)(v65 + 16) != v65)) = v72;
                        *(void *)uint64_t v72 = v65;
                        *(void *)(v65 + 16) = v72;
                        uint64_t v66 = *(uint64_t **)(v72 + 16);
                        uint64_t v65 = *v66;
                      }
                      *(unsigned char *)(v72 + 24) = 1;
                      *((unsigned char *)v66 + 24) = 0;
                      uint64_t v76 = *(void *)(v65 + 8);
                      *uint64_t v66 = v76;
                      if (v76) {
                        *(void *)(v76 + 16) = v66;
                      }
                      *(void *)(v65 + 16) = v66[2];
                      *(void *)(v66[2] + 8 * (*(void *)v66[2] != (void)v66)) = v65;
                      *(void *)(v65 + 8) = v66;
                      goto LABEL_120;
                    }
                  }
                  else if (!v67 || (v69 = *(unsigned __int8 *)(v67 + 24), id v68 = (unsigned char *)(v67 + 24), v69))
                  {
                    if (*(uint64_t **)v65 == v63)
                    {
                      uint64_t v74 = v63[1];
                      *(void *)uint64_t v65 = v74;
                      if (v74)
                      {
                        *(void *)(v74 + 16) = v65;
                        uint64_t v66 = *(uint64_t **)(v65 + 16);
                      }
                      v63[2] = (uint64_t)v66;
                      *(void *)(*(void *)(v65 + 16) + 8 * (**(void **)(v65 + 16) != v65)) = v63;
                      v63[1] = v65;
                      *(void *)(v65 + 16) = v63;
                      uint64_t v66 = (uint64_t *)v63[2];
                    }
                    else
                    {
                      double v63 = (uint64_t *)v63[2];
                    }
                    *((unsigned char *)v63 + 24) = 1;
                    *((unsigned char *)v66 + 24) = 0;
                    uint64_t v65 = v66[1];
                    long long v75 = *(uint64_t **)v65;
                    v66[1] = *(void *)v65;
                    if (v75) {
                      v75[2] = (uint64_t)v66;
                    }
                    *(void *)(v65 + 16) = v66[2];
                    *(void *)(v66[2] + 8 * (*(void *)v66[2] != (void)v66)) = v65;
                    *(void *)uint64_t v65 = v66;
LABEL_120:
                    v66[2] = v65;
                    break;
                  }
                  *(unsigned char *)(v65 + 24) = 1;
                  double v63 = v66;
                  *((unsigned char *)v66 + 24) = v66 == v64;
                  *id v68 = 1;
                }
                while (v66 != v64);
              }
              ++v306;
            }
LABEL_122:
            double v77 = (void *)v27[1];
            if (v77)
            {
              do
              {
                __n128 v78 = v77;
                double v77 = (void *)*v77;
              }
              while (v77);
            }
            else
            {
              do
              {
                __n128 v78 = (void *)v27[2];
                BOOL v224 = *v78 == (void)v27;
                BOOL v27 = v78;
              }
              while (!v224);
            }
            BOOL v27 = v78;
          }
          while (v78 != v28);
        }
        id v29 = (unsigned __int8 *)*((void *)v24 + 1);
        if (v29)
        {
          do
          {
            id v30 = v29;
            id v29 = *(unsigned __int8 **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            id v30 = (unsigned __int8 *)*((void *)v24 + 2);
            BOOL v224 = *(void *)v30 == (void)v24;
            int8x8_t v24 = v30;
          }
          while (!v224);
        }
        int8x8_t v24 = v30;
      }
      while (v30 != v25);
      uint64_t v13 = *v12;
    }
    long double v79 = (unsigned __int8 *)*((void *)v13 + 13);
    double v80 = v13 + 112;
    if (v79 != v13 + 112)
    {
      do
      {
        long double v81 = (uint64_t *)*v12;
        uint64_t v308 = (unsigned __int8 *)*((void *)v79 + 4);
        uint64_t v82 = v305;
        uint64_t v83 = &v305;
        uint64_t v84 = &v305;
        if (v305)
        {
          unsigned int v85 = *(unsigned __int8 *)v81;
          while (1)
          {
            while (1)
            {
              uint64_t v84 = (uint64_t **)v82;
              unsigned int v86 = *(unsigned __int8 *)v82[4];
              if (v85 >= v86) {
                break;
              }
              uint64_t v82 = *v84;
              uint64_t v83 = v84;
              if (!*v84) {
                goto LABEL_142;
              }
            }
            if (v86 >= v85) {
              break;
            }
            uint64_t v82 = v84[1];
            if (!v82)
            {
              uint64_t v83 = v84 + 1;
              goto LABEL_142;
            }
          }
        }
        else
        {
LABEL_142:
          unint64_t v87 = (uint64_t *)v84;
          uint64_t v84 = (uint64_t **)operator new(0x40uLL);
          v84[4] = v81;
          v84[5] = 0;
          v84[6] = 0;
          v84[7] = 0;
          *uint64_t v84 = 0;
          v84[1] = 0;
          v84[2] = v87;
          *uint64_t v83 = (uint64_t *)v84;
          float v88 = (uint64_t *)v84;
          if (*v304)
          {
            uint64_t v304 = (uint64_t **)*v304;
            float v88 = *v83;
          }
          uint64_t v89 = v305;
          BOOL v224 = v88 == v305;
          *((unsigned char *)v88 + 24) = v88 == v305;
          if (!v224)
          {
            do
            {
              uint64_t v90 = v88[2];
              if (*(unsigned char *)(v90 + 24)) {
                break;
              }
              long long v91 = *(uint64_t **)(v90 + 16);
              uint64_t v92 = *v91;
              if (*v91 == v90)
              {
                uint64_t v95 = v91[1];
                if (!v95 || (v96 = *(unsigned __int8 *)(v95 + 24), unsigned int v93 = (unsigned char *)(v95 + 24), v96))
                {
                  if (*(uint64_t **)v90 == v88)
                  {
                    uint64_t v97 = v88[2];
                  }
                  else
                  {
                    uint64_t v97 = *(void *)(v90 + 8);
                    uint64_t v98 = *(void *)v97;
                    *(void *)(v90 + 8) = *(void *)v97;
                    if (v98)
                    {
                      *(void *)(v98 + 16) = v90;
                      long long v91 = *(uint64_t **)(v90 + 16);
                    }
                    *(void *)(v97 + 16) = v91;
                    *(void *)(*(void *)(v90 + 16) + 8 * (**(void **)(v90 + 16) != v90)) = v97;
                    *(void *)uint64_t v97 = v90;
                    *(void *)(v90 + 16) = v97;
                    long long v91 = *(uint64_t **)(v97 + 16);
                    uint64_t v90 = *v91;
                  }
                  *(unsigned char *)(v97 + 24) = 1;
                  *((unsigned char *)v91 + 24) = 0;
                  uint64_t v101 = *(void *)(v90 + 8);
                  *long long v91 = v101;
                  if (v101) {
                    *(void *)(v101 + 16) = v91;
                  }
                  *(void *)(v90 + 16) = v91[2];
                  *(void *)(v91[2] + 8 * (*(void *)v91[2] != (void)v91)) = v90;
                  *(void *)(v90 + 8) = v91;
                  goto LABEL_171;
                }
              }
              else if (!v92 || (v94 = *(unsigned __int8 *)(v92 + 24), unsigned int v93 = (unsigned char *)(v92 + 24), v94))
              {
                if (*(uint64_t **)v90 == v88)
                {
                  uint64_t v99 = v88[1];
                  *(void *)uint64_t v90 = v99;
                  if (v99)
                  {
                    *(void *)(v99 + 16) = v90;
                    long long v91 = *(uint64_t **)(v90 + 16);
                  }
                  v88[2] = (uint64_t)v91;
                  *(void *)(*(void *)(v90 + 16) + 8 * (**(void **)(v90 + 16) != v90)) = v88;
                  v88[1] = v90;
                  *(void *)(v90 + 16) = v88;
                  long long v91 = (uint64_t *)v88[2];
                }
                else
                {
                  float v88 = (uint64_t *)v88[2];
                }
                *((unsigned char *)v88 + 24) = 1;
                *((unsigned char *)v91 + 24) = 0;
                uint64_t v90 = v91[1];
                uint64_t v100 = *(uint64_t **)v90;
                v91[1] = *(void *)v90;
                if (v100) {
                  v100[2] = (uint64_t)v91;
                }
                *(void *)(v90 + 16) = v91[2];
                *(void *)(v91[2] + 8 * (*(void *)v91[2] != (void)v91)) = v90;
                *(void *)uint64_t v90 = v91;
LABEL_171:
                v91[2] = v90;
                break;
              }
              *(unsigned char *)(v90 + 24) = 1;
              float v88 = v91;
              *((unsigned char *)v91 + 24) = v91 == v89;
              *unsigned int v93 = 1;
            }
            while (v91 != v89);
          }
          ++v306;
        }
        uint64_t v103 = (unsigned __int8 **)v84[5];
        BOOL v104 = (unsigned __int8 **)v84[6];
        int v102 = (unint64_t *)(v84 + 5);
        if (v103 != v104)
        {
          while (**v103 < *v308)
          {
            if (++v103 == v104)
            {
              uint64_t v103 = v104;
              goto LABEL_179;
            }
          }
        }
        if (v103 == v104 || (uint64_t v105 = v308, *v308 != **v103))
        {
LABEL_179:
          std::vector<md::FrameGraphPass *>::insert(v102, v103, (char *)&v308);
          uint64_t v105 = v308;
        }
        uint64_t v106 = v305;
        uint64_t v107 = &v305;
        id v108 = &v305;
        if (v305)
        {
          unsigned int v109 = *v105;
          double v110 = v305;
          do
          {
            unsigned int v111 = *(unsigned __int8 *)v110[4];
            if (v109 >= v111)
            {
              if (v111 >= v109) {
                goto LABEL_223;
              }
              ++v110;
            }
            double v110 = (uint64_t *)*v110;
          }
          while (v110);
          while (1)
          {
            while (1)
            {
              id v108 = (uint64_t **)v106;
              unsigned int v112 = *(unsigned __int8 *)v106[4];
              if (v109 >= v112) {
                break;
              }
              uint64_t v106 = *v108;
              uint64_t v107 = v108;
              if (!*v108) {
                goto LABEL_192;
              }
            }
            if (v112 >= v109) {
              break;
            }
            uint64_t v106 = v108[1];
            if (!v106)
            {
              uint64_t v107 = v108 + 1;
              goto LABEL_192;
            }
          }
        }
        else
        {
LABEL_192:
          double v113 = (uint64_t *)operator new(0x40uLL);
          v113[4] = (uint64_t)v105;
          v113[5] = 0;
          v113[6] = 0;
          unsigned char v113[7] = 0;
          uint64_t *v113 = 0;
          v113[1] = 0;
          v113[2] = (uint64_t)v108;
          *uint64_t v107 = v113;
          if (*v304)
          {
            uint64_t v304 = (uint64_t **)*v304;
            double v113 = *v107;
          }
          double v114 = v305;
          BOOL v224 = v113 == v305;
          *((unsigned char *)v113 + 24) = v113 == v305;
          if (!v224)
          {
            do
            {
              uint64_t v115 = v113[2];
              if (*(unsigned char *)(v115 + 24)) {
                break;
              }
              double v116 = *(uint64_t **)(v115 + 16);
              uint64_t v117 = *v116;
              if (*v116 == v115)
              {
                uint64_t v120 = v116[1];
                if (!v120 || (v121 = *(unsigned __int8 *)(v120 + 24), double v118 = (unsigned char *)(v120 + 24), v121))
                {
                  if (*(uint64_t **)v115 == v113)
                  {
                    uint64_t v122 = v113[2];
                  }
                  else
                  {
                    uint64_t v122 = *(void *)(v115 + 8);
                    uint64_t v123 = *(void *)v122;
                    *(void *)(v115 + 8) = *(void *)v122;
                    if (v123)
                    {
                      *(void *)(v123 + 16) = v115;
                      double v116 = *(uint64_t **)(v115 + 16);
                    }
                    *(void *)(v122 + 16) = v116;
                    *(void *)(*(void *)(v115 + 16) + 8 * (**(void **)(v115 + 16) != v115)) = v122;
                    *(void *)uint64_t v122 = v115;
                    *(void *)(v115 + 16) = v122;
                    double v116 = *(uint64_t **)(v122 + 16);
                    uint64_t v115 = *v116;
                  }
                  *(unsigned char *)(v122 + 24) = 1;
                  *((unsigned char *)v116 + 24) = 0;
                  uint64_t v126 = *(void *)(v115 + 8);
                  *double v116 = v126;
                  if (v126) {
                    *(void *)(v126 + 16) = v116;
                  }
                  *(void *)(v115 + 16) = v116[2];
                  *(void *)(v116[2] + 8 * (*(void *)v116[2] != (void)v116)) = v115;
                  *(void *)(v115 + 8) = v116;
                  goto LABEL_221;
                }
              }
              else if (!v117 || (v119 = *(unsigned __int8 *)(v117 + 24), double v118 = (unsigned char *)(v117 + 24), v119))
              {
                if (*(uint64_t **)v115 == v113)
                {
                  uint64_t v124 = v113[1];
                  *(void *)uint64_t v115 = v124;
                  if (v124)
                  {
                    *(void *)(v124 + 16) = v115;
                    double v116 = *(uint64_t **)(v115 + 16);
                  }
                  v113[2] = (uint64_t)v116;
                  *(void *)(*(void *)(v115 + 16) + 8 * (**(void **)(v115 + 16) != v115)) = v113;
                  v113[1] = v115;
                  *(void *)(v115 + 16) = v113;
                  double v116 = (uint64_t *)v113[2];
                }
                else
                {
                  double v113 = (uint64_t *)v113[2];
                }
                *((unsigned char *)v113 + 24) = 1;
                *((unsigned char *)v116 + 24) = 0;
                uint64_t v115 = v116[1];
                uint64_t v125 = *(uint64_t **)v115;
                v116[1] = *(void *)v115;
                if (v125) {
                  v125[2] = (uint64_t)v116;
                }
                *(void *)(v115 + 16) = v116[2];
                *(void *)(v116[2] + 8 * (*(void *)v116[2] != (void)v116)) = v115;
                *(void *)uint64_t v115 = v116;
LABEL_221:
                v116[2] = v115;
                break;
              }
              *(unsigned char *)(v115 + 24) = 1;
              double v113 = v116;
              *((unsigned char *)v116 + 24) = v116 == v114;
              *double v118 = 1;
            }
            while (v116 != v114);
          }
          ++v306;
        }
LABEL_223:
        unint64_t v127 = (unsigned __int8 *)*((void *)v79 + 1);
        if (v127)
        {
          do
          {
            BOOL v128 = v127;
            unint64_t v127 = *(unsigned __int8 **)v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            BOOL v128 = (unsigned __int8 *)*((void *)v79 + 2);
            BOOL v224 = *(void *)v128 == (void)v79;
            long double v79 = v128;
          }
          while (!v224);
        }
        long double v79 = v128;
      }
      while (v128 != v80);
    }
    ++v12;
  }
  while (v12 != v299);
  uint64_t v129 = v304;
  uint64_t v308 = 0;
  uint64_t v309 = 0;
  uint64_t v310 = 0;
  memset(__p, 0, sizeof(__p));
  if (v304 == &v305) {
    goto LABEL_244;
  }
  do
  {
    int isAcyclicDFS = geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::isAcyclicDFS((uint64_t)&v304, (unsigned __int8 *)v129[4], (unint64_t *)&v308, (unint64_t *)__p);
    char v131 = isAcyclicDFS;
    if (!isAcyclicDFS) {
      break;
    }
    uint64_t v132 = v129[1];
    if (v132)
    {
      do
      {
        uint64_t v133 = (uint64_t **)v132;
        uint64_t v132 = (uint64_t *)*v132;
      }
      while (v132);
    }
    else
    {
      do
      {
        uint64_t v133 = (uint64_t **)v129[2];
        BOOL v224 = *v133 == (uint64_t *)v129;
        uint64_t v129 = v133;
      }
      while (!v224);
    }
    uint64_t v129 = v133;
  }
  while (v133 != &v305);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v308) {
    operator delete(v308);
  }
  if (v131)
  {
LABEL_244:
    long long v302 = 0uLL;
    uint64_t v303 = 0;
    uint64_t v308 = 0;
    uint64_t v309 = 0;
    uint64_t v310 = 0;
    uint64_t v134 = v304;
    if (v304 != &v305)
    {
      do
      {
        geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::topologicalSortedDFS((uint64_t)&v304, (unsigned __int8 *)v134[4], (unint64_t *)&v308, (uint64_t)&v302);
        unint64_t v135 = v134[1];
        if (v135)
        {
          do
          {
            uint64_t v136 = (uint64_t **)v135;
            unint64_t v135 = (uint64_t *)*v135;
          }
          while (v135);
        }
        else
        {
          do
          {
            uint64_t v136 = (uint64_t **)v134[2];
            BOOL v224 = *v136 == (uint64_t *)v134;
            uint64_t v134 = v136;
          }
          while (!v224);
        }
        uint64_t v134 = v136;
      }
      while (v136 != &v305);
      if (v308) {
        operator delete(v308);
      }
    }
    uint64_t v137 = v302;
    uint64_t v138 = v298;
    if (*((void *)&v302 + 1) != (void)v302)
    {
      unint64_t v139 = (uint64_t)(*((void *)&v302 + 1) - v302) >> 3;
      if (v139 <= 1) {
        unint64_t v139 = 1;
      }
      if (v139 >= 2)
      {
        uint64_t v141 = 0;
        unint64_t v140 = v139 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v142 = (uint64_t *)(v137 + 8 * v141);
          uint64_t v144 = *v142;
          uint64_t v143 = v142[1];
          *(void *)(v144 + 16) = v141;
          *(void *)(v143 + 16) = v141 + 1;
          v141 += 2;
        }
        while (v141 != v140);
        goto LABEL_265;
      }
      unint64_t v140 = 0;
      do
      {
        *(void *)(*(void *)(v137 + 8 * v140) + 16) = v140;
        ++v140;
LABEL_265:
        ;
      }
      while (v139 != v140);
    }
    uint64_t v145 = (unint64_t *)*((void *)v298 + 3);
    uint64_t v146 = (unint64_t *)*((void *)v298 + 4);
    uint64_t v147 = (char *)v146 - (char *)v145;
    if (v146 == v145) {
      goto LABEL_488;
    }
    if (v147 < 0) {
      goto LABEL_534;
    }
    unint64_t v148 = v147 >> 3;
    __double2 v149 = operator new((char *)v146 - (char *)v145);
    bzero(v149, (char *)v146 - (char *)v145);
    float v150 = (void *)((char *)v298 + 88);
    if (*((void *)v298 + 14))
    {
      uint64_t v151 = 0;
      if (v148 <= 1) {
        uint64_t v152 = 1;
      }
      else {
        uint64_t v152 = v147 >> 3;
      }
      do
      {
        int8x8_t v153 = *(int8x8_t *)((char *)v298 + 96);
        if (v153)
        {
          unint64_t v154 = v145[v151];
          unint64_t v155 = 0x9DDFEA08EB382D69 * (((8 * v154) + 8) ^ HIDWORD(v154));
          unint64_t v156 = 0x9DDFEA08EB382D69 * (HIDWORD(v154) ^ (v155 >> 47) ^ v155);
          unint64_t v157 = 0x9DDFEA08EB382D69 * (v156 ^ (v156 >> 47));
          uint8x8_t v158 = (uint8x8_t)vcnt_s8(v153);
          v158.i16[0] = vaddlv_u8(v158);
          if (v158.u32[0] > 1uLL)
          {
            unint64_t v159 = v157;
            if (v157 >= *(void *)&v153) {
              unint64_t v159 = v157 % *(void *)&v153;
            }
          }
          else
          {
            unint64_t v159 = v157 & (*(void *)&v153 - 1);
          }
          uint64_t v160 = *(void **)(*v150 + 8 * v159);
          if (v160)
          {
            int v161 = (void *)*v160;
            if (v161)
            {
              if (v158.u32[0] < 2uLL)
              {
                uint64_t v162 = *(void *)&v153 - 1;
                while (1)
                {
                  uint64_t v164 = v161[1];
                  if (v164 == v157)
                  {
                    if (v161[2] == v154) {
                      goto LABEL_272;
                    }
                  }
                  else if ((v164 & v162) != v159)
                  {
                    goto LABEL_273;
                  }
                  int v161 = (void *)*v161;
                  if (!v161) {
                    goto LABEL_273;
                  }
                }
              }
              do
              {
                unint64_t v163 = v161[1];
                if (v163 == v157)
                {
                  if (v161[2] == v154)
                  {
LABEL_272:
                    *(void *)(v154 + 32) = v151;
                    *((void *)v149 + v151) = v161[3];
                    break;
                  }
                }
                else
                {
                  if (v163 >= *(void *)&v153) {
                    v163 %= *(void *)&v153;
                  }
                  if (v163 != v159) {
                    break;
                  }
                }
                int v161 = (void *)*v161;
              }
              while (v161);
            }
          }
        }
LABEL_273:
        ++v151;
      }
      while (v151 != v152);
      if (*((unsigned char *)v298 + 152))
      {
        if (v146 == v145) {
          goto LABEL_488;
        }
LABEL_300:
        if ((unint64_t)v147 < 0x7FFFFFFFFFFFFFF9)
        {
          double v165 = (char *)operator new(2 * v147);
          uint64_t v166 = 0;
          if (v148 <= 1) {
            uint64_t v167 = 1;
          }
          else {
            uint64_t v167 = v147 >> 3;
          }
          do
          {
            uint64_t v169 = (void *)v145[v166];
            uint64_t v170 = (void *)v169[5];
            if (v170 == v169 + 6)
            {
              unint64_t v171 = 0;
              unint64_t v172 = -1;
            }
            else
            {
              unint64_t v171 = 0;
              unint64_t v172 = -1;
              do
              {
                unint64_t v173 = *(void *)(v170[4] + 16);
                if (v173 < v172) {
                  unint64_t v172 = *(void *)(v170[4] + 16);
                }
                if (v171 <= v173) {
                  unint64_t v171 = *(void *)(v170[4] + 16);
                }
                uint64_t v174 = (void *)v170[1];
                if (v174)
                {
                  do
                  {
                    double v175 = v174;
                    uint64_t v174 = (void *)*v174;
                  }
                  while (v174);
                }
                else
                {
                  do
                  {
                    double v175 = (void *)v170[2];
                    BOOL v224 = *v175 == (void)v170;
                    uint64_t v170 = v175;
                  }
                  while (!v224);
                }
                uint64_t v170 = v175;
              }
              while (v175 != v169 + 6);
            }
            long long v176 = (void *)v169[8];
            long double v177 = v169 + 9;
            if (v176 != v177)
            {
              do
              {
                unint64_t v178 = *(void *)(v176[4] + 16);
                if (v178 < v172) {
                  unint64_t v172 = *(void *)(v176[4] + 16);
                }
                if (v171 <= v178) {
                  unint64_t v171 = *(void *)(v176[4] + 16);
                }
                double v179 = (void *)v176[1];
                if (v179)
                {
                  do
                  {
                    double v180 = v179;
                    double v179 = (void *)*v179;
                  }
                  while (v179);
                }
                else
                {
                  do
                  {
                    double v180 = (void *)v176[2];
                    BOOL v224 = *v180 == (void)v176;
                    long long v176 = v180;
                  }
                  while (!v224);
                }
                long long v176 = v180;
              }
              while (v180 != v177);
            }
            long double v168 = (unint64_t *)&v165[16 * v166];
            *long double v168 = v172;
            v168[1] = v171;
            ++v166;
          }
          while (v166 != v167);
          uint64_t v293 = v165;
          uint64_t v181 = 0;
          char v294 = 0;
          long long v300 = 0;
          uint64_t v182 = (void *)((char *)v298 + 88);
          while (1)
          {
            double v183 = (unsigned __int8 *)v145[v181];
            if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v182, (unint64_t)v183)&& *((void *)v183 + 4) == -1)
            {
              break;
            }
LABEL_333:
            if (++v181 >= (unint64_t)(v146 - v145))
            {
              if (v300) {
                operator delete(v300);
              }
              operator delete(v293);
              uint64_t v145 = (unint64_t *)*((void *)v138 + 3);
              uint64_t v146 = (unint64_t *)*((void *)v138 + 4);
              float v150 = (void *)((char *)v298 + 88);
              if (v146 == v145) {
                goto LABEL_488;
              }
LABEL_423:
              uint64_t v215 = 0;
              float32x2_t v216 = (float32x2_t)vdup_n_s32(0x3F2AAAABu);
              while (2)
              {
                __double2 v217 = (unsigned __int8 *)v145[v215];
                if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v150, (unint64_t)v217)|| *((void *)v149 + *((void *)v217 + 4)))
                {
                  goto LABEL_425;
                }
                unsigned int v219 = *v217;
                if (v219 >= 3)
                {
                  if (v219 == 3)
                  {
                    uint64_t v226 = *((unsigned int *)v217 + 24);
                    uint64_t v227 = *((void *)v217 + 11);
                    uint64_t v309 = v227;
                    LODWORD(v310) = v226;
                    LOBYTE(v308) = 1;
                    char v311 = 0;
                    long long v228 = std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::find<md::ResourceKey>(a3, (unsigned __int8 *)&v308);
                    if (!v228 || (uint64_t v229 = v228[8], v230 = v228[9], v229 == v230))
                    {
LABEL_441:
                      LOBYTE(v308) = 0;
LABEL_442:
                      long long v233 = operator new(0x48uLL);
                      v233[1] = 0;
                      *long long v233 = &unk_1EF589320;
                      v233[5] = 0;
                      v233[6] = 0;
                      v233[4] = 0;
                      *((_DWORD *)v233 + 14) = 0;
                      v233[2] = 0;
                      v233[3] = &unk_1EF560BE0;
                      *((_DWORD *)v233 + 15) = 769;
                      v233[8] = v227 * v226;
                      operator new();
                    }
                    long long v231 = (unint64_t *)a3[16];
                    while (1)
                    {
                      uint64_t v232 = *(unint64_t ***)v229;
                      if (*(unint64_t **)(*(void *)v229 + 8) != v231) {
                        break;
                      }
                      v229 += 8;
                      if (v229 == v230) {
                        goto LABEL_441;
                      }
                    }
                    v232[1] = v231;
                    uint64_t v146 = *v232;
                    LOBYTE(v308) = 0;
                    if (!v146) {
                      goto LABEL_442;
                    }
                  }
                  else
                  {
                    uint64_t v146 = 0;
                  }
                  goto LABEL_424;
                }
                unsigned int v220 = v217[140];
                if (v220 > 2) {
                  goto LABEL_424;
                }
                if (v220 == 1)
                {
                  double v221 = (std::__shared_weak_count *)a3[15];
                  if (v221) {
                    atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  double v222 = (int *)(v217 + 108);
                  int v223 = v217[112];
                  BOOL v224 = v223 == 0;
                  double v225 = (int *)a3 + 19;
LABEL_447:
                  if (v224) {
                    double v222 = v225;
                  }
                  int v234 = *v222;
                  uint32x2_t v235 = (uint32x2_t)a3[5];
                  switch(v217[88])
                  {
                    case 0u:
                      double v236 = *(double *)(v217 + 92);
                      HIDWORD(v236) = *((_DWORD *)v217 + 25);
                      break;
                    case 1u:
                      float32x2_t v237 = *(float32x2_t *)(v217 + 96);
                      v237.i32[1] = *((_DWORD *)v217 + 26);
                      double v236 = COERCE_DOUBLE(vcvt_u32_f32(vmul_f32(v237, vcvt_f32_u32(v235))));
                      break;
                    case 2u:
                      float32x2_t v238 = *(float32x2_t *)(v217 + 96);
                      v238.i32[1] = *((_DWORD *)v217 + 26);
                      float32x2_t v239 = vrndp_f32(vmul_f32(vrnd_f32(vmul_f32(v238, vcvt_f32_u32(v235))), v216));
                      goto LABEL_457;
                    case 3u:
                      float32x2_t v240 = *(float32x2_t *)(v217 + 96);
                      v240.i32[1] = *((_DWORD *)v217 + 26);
                      float32x2_t v239 = vmul_f32(v240, vcvt_f32_u32(v235));
LABEL_457:
                      double v236 = COERCE_DOUBLE(vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vneg_s32(vclz_s32(vadd_s32((int32x2_t)vcvt_u32_f32(v239), (int32x2_t)-1))), (int8x8_t)0x1F0000001FLL)));
                      break;
                    case 4u:
                      double v241 = (double)v235.u32[1];
                      double v242 = (double)v235.u32[0];
                      double v236 = *(double *)(v217 + 92);
                      LODWORD(v218) = *((_DWORD *)v217 + 25);
                      HIDWORD(v236) = ((double)v218 * v241 / v242);
                      break;
                    case 5u:
                      double v243 = (double)v235.u32[1];
                      unsigned int v244 = a3[5];
                      double v245 = (double)v235.u32[0];
                      if (v244 >= *((_DWORD *)v217 + 23)) {
                        unsigned int v244 = *((_DWORD *)v217 + 23);
                      }
                      double v236 = COERCE_DOUBLE(__PAIR64__(((double)v244 * v243 / v245), v244));
                      break;
                    default:
                      double v236 = 0.0;
                      break;
                  }
                  unsigned int v246 = HIDWORD(v236);
                  if (LODWORD(v236) > HIDWORD(v236)) {
                    unsigned int v246 = LODWORD(v236);
                  }
                  double v247 = COERCE_DOUBLE(vdup_n_s32(v246));
                  if (v217[89]) {
                    double v248 = v247;
                  }
                  else {
                    double v248 = v236;
                  }
                  if (v223) {
                    int v249 = *((_DWORD *)v217 + 27);
                  }
                  else {
                    int v249 = v234;
                  }
                  int v251 = *((_DWORD *)v217 + 32);
                  int v250 = *((_DWORD *)v217 + 33);
                  LOBYTE(v308) = 0;
                  double v312 = v248;
                  int v313 = v251;
                  int v314 = v250;
                  int v315 = v249;
                  char v311 = 1;
                  char v252 = std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::find<md::ResourceKey>(a3, (unsigned __int8 *)&v308);
                  if (!v252 || (uint64_t v253 = v252[8], v254 = v252[9], v253 == v254))
                  {
LABEL_475:
                    char v311 = 0;
LABEL_476:
                    if (v251 != 1)
                    {
                      if (!v251) {
                        operator new();
                      }
                      operator new();
                    }
                    operator new();
                  }
                  double v255 = (unint64_t *)a3[16];
                  while (1)
                  {
                    long long v256 = *(unint64_t ***)v253;
                    if (*(unint64_t **)(*(void *)v253 + 8) != v255) {
                      break;
                    }
                    v253 += 8;
                    if (v253 == v254) {
                      goto LABEL_475;
                    }
                  }
                  v256[1] = v255;
                  uint64_t v146 = *v256;
                  char v311 = 0;
                  if (!v146) {
                    goto LABEL_476;
                  }
                  if (v221 && !atomic_fetch_add(&v221->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                    std::__shared_weak_count::__release_weak(v221);
                  }
LABEL_424:
                  *((void *)v149 + *((void *)v217 + 4)) = v146;
                  uint64_t v145 = (unint64_t *)*((void *)v138 + 3);
                  uint64_t v146 = (unint64_t *)*((void *)v138 + 4);
LABEL_425:
                  if (++v215 >= (unint64_t)(v146 - v145)) {
                    goto LABEL_488;
                  }
                  continue;
                }
                break;
              }
              if (*((_DWORD *)v217 + 33))
              {
                double v221 = (std::__shared_weak_count *)a3[11];
                if (v221) {
                  goto LABEL_445;
                }
              }
              else
              {
                double v221 = (std::__shared_weak_count *)a3[13];
                if (v221) {
LABEL_445:
                }
                  atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              double v222 = (int *)(v217 + 108);
              int v223 = v217[112];
              BOOL v224 = v223 == 0;
              double v225 = (int *)(a3 + 6);
              goto LABEL_447;
            }
          }
          double v184 = &v293[16 * v181];
          if (v300 >= v294)
          {
            unint64_t v186 = (v294 - v300) >> 3;
            if (v186 <= 1) {
              unint64_t v186 = 1;
            }
            unint64_t v187 = 0xFFFFFFFFFFFFFFFLL;
            if ((unint64_t)(v294 - v300) < 0x7FFFFFFFFFFFFFF0) {
              unint64_t v187 = v186;
            }
            if (v187 >> 60) {
LABEL_535:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            uint64_t v188 = 16 * v187;
            uint64_t v189 = (char *)operator new(16 * v187);
            char v294 = &v189[v188];
            *(_OWORD *)uint64_t v189 = *(_OWORD *)v184;
            __int16 v185 = v189 + 16;
            if (v300)
            {
              operator delete(v300);
              __int16 v185 = v189 + 16;
            }
            long long v300 = v189;
          }
          else
          {
            *(_OWORD *)long long v300 = *(_OWORD *)v184;
            __int16 v185 = v300 + 16;
          }
          uint64_t v138 = v298;
          *((void *)v183 + 4) = v181;
          unint64_t v190 = v181 + 1;
          uint64_t v145 = (unint64_t *)*((void *)v298 + 3);
          uint64_t v146 = (unint64_t *)*((void *)v298 + 4);
          while (1)
          {
            if (v190 >= v146 - v145) {
              goto LABEL_333;
            }
            unint64_t v191 = v145[v190];
            int8x8_t v192 = *(int8x8_t *)((char *)v138 + 96);
            if (v192)
            {
              unint64_t v193 = 0x9DDFEA08EB382D69 * (((8 * v191) + 8) ^ HIDWORD(v191));
              unint64_t v194 = 0x9DDFEA08EB382D69 * (HIDWORD(v191) ^ (v193 >> 47) ^ v193);
              unint64_t v195 = 0x9DDFEA08EB382D69 * (v194 ^ (v194 >> 47));
              uint8x8_t v196 = (uint8x8_t)vcnt_s8(v192);
              v196.i16[0] = vaddlv_u8(v196);
              if (v196.u32[0] > 1uLL)
              {
                unint64_t v197 = v195;
                if (v195 >= *(void *)&v192) {
                  unint64_t v197 = v195 % *(void *)&v192;
                }
              }
              else
              {
                unint64_t v197 = v195 & (*(void *)&v192 - 1);
              }
              long double v198 = *(void **)(*v182 + 8 * v197);
              if (v198)
              {
                long long v199 = (void *)*v198;
                if (v199)
                {
                  if (v196.u32[0] < 2uLL)
                  {
                    uint64_t v200 = *(void *)&v192 - 1;
                    while (1)
                    {
                      uint64_t v202 = v199[1];
                      if (v195 == v202)
                      {
                        if (v199[2] == v191) {
                          goto LABEL_348;
                        }
                      }
                      else if ((v202 & v200) != v197)
                      {
                        goto LABEL_347;
                      }
                      long long v199 = (void *)*v199;
                      if (!v199) {
                        goto LABEL_347;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v201 = v199[1];
                    if (v195 == v201)
                    {
                      if (v199[2] == v191) {
                        goto LABEL_348;
                      }
                    }
                    else
                    {
                      if (v201 >= *(void *)&v192) {
                        v201 %= *(void *)&v192;
                      }
                      if (v201 != v197) {
                        break;
                      }
                    }
                    long long v199 = (void *)*v199;
                  }
                  while (v199);
                }
              }
            }
LABEL_347:
            if (*(void *)(v191 + 32) == -1
              && *v183 == *(unsigned __int8 *)v191
              && v183[88] == *(unsigned __int8 *)(v191 + 88)
              && v183[89] == *(unsigned __int8 *)(v191 + 89)
              && *((_DWORD *)v183 + 23) == *(_DWORD *)(v191 + 92)
              && *((float *)v183 + 24) == *(float *)(v191 + 96)
              && *((_DWORD *)v183 + 25) == *(_DWORD *)(v191 + 100)
              && *((float *)v183 + 26) == *(float *)(v191 + 104))
            {
              if (v183[112] && *(unsigned char *)(v191 + 112))
              {
                if (*((_DWORD *)v183 + 27) != *(_DWORD *)(v191 + 108)) {
                  goto LABEL_348;
                }
              }
              else if ((v183[112] != 0) != (*(unsigned char *)(v191 + 112) != 0))
              {
                goto LABEL_348;
              }
              if (*((_DWORD *)v183 + 32) == *(_DWORD *)(v191 + 128)
                && *((_DWORD *)v183 + 33) == *(_DWORD *)(v191 + 132)
                && *((_DWORD *)v183 + 34) == *(_DWORD *)(v191 + 136)
                && v183[140] == *(unsigned __int8 *)(v191 + 140))
              {
                __n128 v203 = &v293[16 * v190];
                if (v300 == v185) {
                  goto LABEL_393;
                }
                uint64_t v204 = 0;
                __int16 v205 = v300;
                do
                {
                  if (*((void *)v203 + 1) >= *(void *)v205) {
                    v204 += *(void *)v203 <= *((void *)v205 + 1);
                  }
                  v205 += 16;
                }
                while (v205 != v185);
                if (!v204)
                {
LABEL_393:
                  if (v185 >= v294)
                  {
                    uint64_t v207 = (v185 - v300) >> 4;
                    unint64_t v208 = v207 + 1;
                    if ((unint64_t)(v207 + 1) >> 60) {
                      break;
                    }
                    if ((v294 - v300) >> 3 > v208) {
                      unint64_t v208 = (v294 - v300) >> 3;
                    }
                    if ((unint64_t)(v294 - v300) >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v209 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v209 = v208;
                    }
                    if (v209)
                    {
                      if (v209 >> 60) {
                        goto LABEL_535;
                      }
                      uint64_t v210 = v185;
                      unint64_t v295 = v209;
                      long double v211 = (char *)operator new(16 * v209);
                      unint64_t v209 = v295;
                      __int16 v185 = v210;
                      __n128 v203 = &v293[16 * v190];
                    }
                    else
                    {
                      long double v211 = 0;
                    }
                    long double v212 = &v211[16 * v207];
                    *(_OWORD *)long double v212 = *(_OWORD *)v203;
                    long double v213 = v212;
                    if (v300 != v185)
                    {
                      do
                      {
                        *((_OWORD *)v213 - 1) = *((_OWORD *)v185 - 1);
                        v213 -= 16;
                        v185 -= 16;
                      }
                      while (v185 != v300);
                      __int16 v185 = v300;
                    }
                    int v206 = v212 + 16;
                    long long v300 = v213;
                    char v294 = &v211[16 * v209];
                    if (v185) {
                      operator delete(v185);
                    }
                  }
                  else
                  {
                    *(_OWORD *)__int16 v185 = *(_OWORD *)v203;
                    int v206 = v185 + 16;
                  }
                  *(void *)(v191 + 32) = v181;
                  uint64_t v145 = (unint64_t *)*((void *)v298 + 3);
                  uint64_t v146 = (unint64_t *)*((void *)v298 + 4);
                  __int16 v185 = v206;
                  uint64_t v138 = v298;
                }
              }
            }
LABEL_348:
            ++v190;
          }
        }
LABEL_534:
        abort();
      }
    }
    else if (*((unsigned char *)v298 + 152))
    {
      goto LABEL_300;
    }
    if (v146 != v145)
    {
      if (v148 <= 1) {
        uint64_t v214 = 1;
      }
      else {
        uint64_t v214 = v147 >> 3;
      }
      if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v150, *v145))*(void *)(*v145 + 32) = 0; {
      if ((unint64_t)v147 >= 0x10)
      }
      {
        uint64_t v291 = 1;
        do
        {
          unint64_t v292 = v145[v291];
          if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v150, v292))*(void *)(v292 + 32) = v291; {
          ++v291;
          }
        }
        while (v214 != v291);
      }
      uint64_t v138 = v298;
      if (v146 != v145) {
        goto LABEL_423;
      }
    }
LABEL_488:
    uint64_t v258 = *(void *)v138;
    uint64_t v257 = *((void *)v138 + 1);
    size_t v259 = v257 - *(void *)v138;
    if (v257 != *(void *)v138)
    {
      if ((v259 & 0x8000000000000000) != 0) {
        goto LABEL_534;
      }
      int v260 = operator new(v257 - *(void *)v138);
      bzero(v260, v259);
      do
      {
        if (!*(unsigned char *)(*(void *)v258 + 48)) {
          operator new();
        }
        v258 += 8;
      }
      while (v258 != v257);
    }
    double v261 = (void *)*((void *)v138 + 13);
    if (!v261) {
LABEL_529:
    }
      operator new();
    double v262 = 0;
    double v263 = 0;
    long long v264 = 0uLL;
    *(_OWORD *)long long v301 = 0u;
    while (v263 < v262)
    {
      uint64_t v265 = v261[3];
      v261[3] = 0;
      *(void *)double v263 = v265;
      double v266 = v263 + 8;
LABEL_497:
      *(void **)&long long v267 = v301[0];
      *((void *)&v267 + 1) = v266;
      *(_OWORD *)long long v301 = v267;
      double v261 = (void *)*v261;
      double v263 = v266;
      if (!v261) {
        goto LABEL_529;
      }
    }
    int v268 = (char *)v301[0];
    int64_t v269 = v263 - (char *)v301[0];
    uint64_t v270 = (v263 - (char *)v301[0]) >> 3;
    unint64_t v271 = v270 + 1;
    if ((unint64_t)(v270 + 1) >> 61) {
      goto LABEL_534;
    }
    if ((v262 - (char *)v301[0]) >> 2 > v271) {
      unint64_t v271 = (v262 - (char *)v301[0]) >> 2;
    }
    if ((unint64_t)(v262 - (char *)v301[0]) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v272 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v272 = v271;
    }
    if (v272)
    {
      if (v272 >> 61) {
        goto LABEL_535;
      }
      long long v273 = (char *)operator new(8 * v272);
      long long v264 = 0uLL;
    }
    else
    {
      long long v273 = 0;
    }
    long long v274 = &v273[8 * v270];
    uint64_t v275 = v261[3];
    v261[3] = 0;
    *(void *)long long v274 = v275;
    double v266 = v274 + 8;
    int64_t v276 = v263 - (char *)v301[0];
    if (v263 == v301[0])
    {
      v301[0] = &v273[8 * v270];
      goto LABEL_523;
    }
    unint64_t v277 = v276 - 8;
    if ((unint64_t)(v276 - 8) > 0x137
      && (unint64_t v278 = v277 & 0xFFFFFFFFFFFFFFF8, &v263[-(v277 & 0xFFFFFFFFFFFFFFF8) - 8] <= v263 - 8)
      && &v273[v269 - 8 - v278] <= &v273[v269 - 8]
      && ((unint64_t v279 = v277 >> 3, &v263[-8 * v279 - 8] >= v274) || &v273[v269 - v278 - 8] >= v263))
    {
      unint64_t v285 = v279 + 1;
      uint64_t v280 = &v263[-8 * (v285 & 0x3FFFFFFFFFFFFFFCLL)];
      long long v286 = &v273[8 * v270 - 16];
      long long v287 = v263 - 32;
      uint64_t v288 = v285 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v290 = *(_OWORD *)v287;
        long long v289 = *((_OWORD *)v287 + 1);
        *(_OWORD *)long long v287 = v264;
        *((_OWORD *)v287 + 1) = v264;
        v287 -= 32;
        *((_OWORD *)v286 - 1) = v290;
        *(_OWORD *)long long v286 = v289;
        v286 -= 32;
        v288 -= 4;
      }
      while (v288);
      v274 -= 8 * (v285 & 0x3FFFFFFFFFFFFFFCLL);
      if (v285 == (v285 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_517;
      }
    }
    else
    {
      uint64_t v280 = v263;
    }
    do
    {
      uint64_t v281 = *((void *)v280 - 1);
      v280 -= 8;
      *(void *)uint64_t v280 = 0;
      *((void *)v274 - 1) = v281;
      v274 -= 8;
    }
    while (v280 != v301[0]);
LABEL_517:
    long long v282 = (char *)v301[1];
    v301[0] = v274;
    while (v282 != v268)
    {
      uint64_t v284 = *((void *)v282 - 1);
      v282 -= 8;
      uint64_t v283 = v284;
      *(void *)long long v282 = 0;
      if (v284)
      {
        (*(void (**)(uint64_t))(*(void *)v283 + 8))(v283);
        long long v264 = 0uLL;
      }
    }
    double v263 = v268;
LABEL_523:
    double v262 = &v273[8 * v272];
    if (v263)
    {
      operator delete(v263);
      long long v264 = 0uLL;
    }
    goto LABEL_497;
  }
  *(void *)this = 0;
  std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(v305);
}

void *std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v12 = result[1];
        if (v5 == v12)
        {
          if (result[2] == a2) {
            return result;
          }
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        uint64_t result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = result[1];
      if (v5 == v11)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(*a1);
    std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(a1[1]);
    int8x8_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,false>(uint64_t result, unsigned __int8 **a2, uint64_t a3, char a4)
{
  id v9 = (unsigned __int8 **)result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  uint64_t i = v9;
  while (1)
  {
    id v9 = i;
    uint64_t v12 = (char *)a2 - (char *)i;
    uint64_t v13 = a2 - i;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          double v60 = *v10;
          unsigned int v61 = *v9;
          unsigned int v62 = **v10;
          unsigned int v63 = **v9;
          BOOL v64 = v62 >= v63;
          if (v62 == v63) {
            BOOL v64 = *((void *)v60 + 3) + (unint64_t)*((unsigned int *)v60 + 5) >= *((void *)v61 + 3)
          }
                                                                                       + (unint64_t)*((unsigned int *)v61 + 5);
          if (!v64)
          {
            *id v9 = v60;
            *uint64_t v10 = v61;
          }
          break;
        case 3:
          uint64_t result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v9, v9 + 1, a2 - 1);
          break;
        case 4:
          uint64_t result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v9, v9 + 1, v9 + 2, a2 - 1);
          break;
        case 5:
          uint64_t result = (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return result;
      }
      int64_t v82 = (unint64_t)(v13 - 2) >> 1;
      int64_t v83 = v82;
      do
      {
        int64_t v84 = v83;
        if (v82 >= v83)
        {
          uint64_t v85 = (2 * v83) | 1;
          unsigned int v86 = &v9[v85];
          if (2 * v84 + 2 < v13)
          {
            unint64_t v87 = v86[1];
            unsigned int v88 = **v86;
            unsigned int v89 = *v87;
            BOOL v90 = v88 >= v89;
            if (v88 == v89) {
              BOOL v90 = *((void *)*v86 + 3) + (unint64_t)*((unsigned int *)*v86 + 5) >= *((void *)v87 + 3)
            }
                                                                                           + (unint64_t)*((unsigned int *)v87 + 5);
            if (!v90)
            {
              ++v86;
              uint64_t v85 = 2 * v84 + 2;
            }
          }
          uint64_t v92 = &v9[v84];
          unsigned int v93 = *v92;
          unsigned int v94 = **v86;
          unsigned int v95 = **v92;
          BOOL v96 = v94 >= v95;
          if (v94 == v95) {
            BOOL v96 = *((void *)*v86 + 3) + (unint64_t)*((unsigned int *)*v86 + 5) >= *((void *)v93 + 3)
          }
                                                                                         + (unint64_t)*((unsigned int *)v93 + 5);
          if (v96)
          {
            *uint64_t v92 = 0;
            uint64_t v97 = *v86;
            while (1)
            {
              uint64_t v98 = v86;
              __n128 *v86 = 0;
              uint64_t v99 = *v92;
              *uint64_t v92 = v97;
              if (v99)
              {
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v99 + 9));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v99 + 6));
                uint64_t result = MEMORY[0x1A6239270](v99, 0x1070C4044CBF76DLL);
              }
              if (v82 < v85) {
                break;
              }
              unsigned int v86 = &v9[(2 * v85) | 1];
              if (2 * v85 + 2 < v13)
              {
                uint64_t v100 = v86[1];
                unsigned int v101 = **v86;
                unsigned int v102 = *v100;
                BOOL v103 = v101 >= v102;
                if (v101 == v102) {
                  BOOL v103 = *((void *)*v86 + 3) + (unint64_t)*((unsigned int *)*v86 + 5) >= *((void *)v100 + 3)
                }
                                                                                                + (unint64_t)*((unsigned int *)v100 + 5);
                if (!v103)
                {
                  ++v86;
                  uint64_t v85 = 2 * v85 + 2;
                }
                else
                {
                  uint64_t v85 = (2 * v85) | 1;
                }
              }
              else
              {
                uint64_t v85 = (2 * v85) | 1;
              }
              uint64_t v97 = *v86;
              unsigned int v105 = **v86;
              unsigned int v106 = *v93;
              BOOL v107 = v105 >= v106;
              if (v105 == v106)
              {
                uint64_t v92 = v98;
                if (*((void *)v97 + 3) + (unint64_t)*((unsigned int *)v97 + 5) < *((void *)v93 + 3)
                                                                                         + (unint64_t)*((unsigned int *)v93 + 5))
                  break;
              }
              else
              {
                uint64_t v92 = v98;
                if (!v107) {
                  break;
                }
              }
            }
            id v108 = *v98;
            unsigned char *v98 = v93;
            if (v108)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v108 + 9));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v108 + 6));
              uint64_t result = MEMORY[0x1A6239270](v108, 0x1070C4044CBF76DLL);
            }
          }
        }
        int64_t v83 = v84 - 1;
      }
      while (v84);
      uint64_t v109 = (unint64_t)v12 >> 3;
      while (1)
      {
        uint64_t v112 = 0;
        double v113 = *v9;
        *id v9 = 0;
        double v114 = v9;
        do
        {
          uint64_t v115 = &v114[v112 + 1];
          uint64_t v116 = 2 * v112;
          uint64_t v112 = (2 * v112) | 1;
          if (v116 + 2 < v109)
          {
            uint64_t v117 = v115[1];
            unsigned int v118 = **v115;
            unsigned int v119 = *v117;
            BOOL v120 = v118 >= v119;
            if (v118 == v119) {
              BOOL v120 = *((void *)*v115 + 3) + (unint64_t)*((unsigned int *)*v115 + 5) >= *((void *)v117 + 3)
            }
                                                                                              + (unint64_t)*((unsigned int *)v117 + 5);
            if (!v120)
            {
              ++v115;
              uint64_t v112 = v116 + 2;
            }
          }
          uint64_t v122 = *v115;
          *uint64_t v115 = 0;
          uint64_t v123 = *v114;
          *double v114 = v122;
          if (v123)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v123 + 9));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v123 + 6));
            uint64_t result = MEMORY[0x1A6239270](v123, 0x1070C4044CBF76DLL);
          }
          double v114 = v115;
        }
        while (v112 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
        if (v115 != --a2) {
          break;
        }
        double v110 = *v115;
        *uint64_t v115 = v113;
        if (v110) {
          goto LABEL_174;
        }
LABEL_175:
        if (v109-- <= 2) {
          return result;
        }
      }
      uint64_t v124 = *a2;
      *a2 = 0;
      uint64_t v125 = *v115;
      *uint64_t v115 = v124;
      if (v125)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v125 + 9));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v125 + 6));
        uint64_t result = MEMORY[0x1A6239270](v125, 0x1070C4044CBF76DLL);
      }
      uint64_t v126 = *a2;
      *a2 = v113;
      if (v126)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v126 + 9));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v126 + 6));
        uint64_t result = MEMORY[0x1A6239270](v126, 0x1070C4044CBF76DLL);
      }
      uint64_t v127 = (char *)(v115 + 1) - (char *)v9;
      if (v127 < 9) {
        goto LABEL_175;
      }
      unint64_t v128 = (((unint64_t)v127 >> 3) - 2) >> 1;
      uint64_t v129 = &v9[v128];
      double v130 = *v115;
      unsigned int v131 = **v129;
      unsigned int v132 = **v115;
      BOOL v133 = v131 >= v132;
      if (v131 == v132) {
        BOOL v133 = *((void *)*v129 + 3) + (unint64_t)*((unsigned int *)*v129 + 5) >= *((void *)v130 + 3)
      }
                                                                                        + (unint64_t)*((unsigned int *)v130 + 5);
      if (v133) {
        goto LABEL_175;
      }
      *uint64_t v115 = 0;
      uint64_t v134 = *v129;
      while (1)
      {
        unint64_t v135 = v129;
        *uint64_t v129 = 0;
        uint64_t v136 = *v115;
        *uint64_t v115 = v134;
        if (v136)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v136 + 9));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v136 + 6));
          uint64_t result = MEMORY[0x1A6239270](v136, 0x1070C4044CBF76DLL);
        }
        if (!v128) {
          break;
        }
        unint64_t v128 = (v128 - 1) >> 1;
        uint64_t v129 = &v9[v128];
        uint64_t v134 = *v129;
        unsigned int v137 = **v129;
        unsigned int v138 = *v130;
        if (v137 == v138)
        {
          uint64_t v115 = v135;
          if (*((void *)v134 + 3) + (unint64_t)*((unsigned int *)v134 + 5) >= *((void *)v130 + 3)
                                                                                      + (unint64_t)*((unsigned int *)v130 + 5))
            break;
        }
        else
        {
          uint64_t v115 = v135;
          if (v137 >= v138) {
            break;
          }
        }
      }
      double v110 = *v135;
      *unint64_t v135 = v130;
      if (!v110) {
        goto LABEL_175;
      }
LABEL_174:
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v110 + 9));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v110 + 6));
      uint64_t result = MEMORY[0x1A6239270](v110, 0x1070C4044CBF76DLL);
      goto LABEL_175;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    int v15 = &v9[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 < 0x401)
    {
      uint64_t result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v15, v9, a2 - 1);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v9, v15, a2 - 1);
      uint64_t v16 = v14;
      unsigned int v17 = &v9[v14];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v9 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v9 + 2, &v9[v16 + 1], a2 - 3);
      uint64_t result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v17 - 1, v15, &v9[v16 + 1]);
      double v18 = *v9;
      *id v9 = *v17;
      *unsigned int v17 = v18;
    }
    --a3;
    unsigned int v19 = *v9;
    unsigned int v20 = **v9;
    if (a4) {
      goto LABEL_14;
    }
    unsigned int v21 = *(v9 - 1);
    unsigned int v22 = *v21;
    BOOL v23 = v22 >= v20;
    if (v22 == v20) {
      BOOL v23 = *((void *)v21 + 3) + (unint64_t)*((unsigned int *)v21 + 5) >= *((void *)v19 + 3)
    }
                                                                                 + (unint64_t)*((unsigned int *)v19 + 5);
    if (v23)
    {
      *id v9 = 0;
      double v43 = *v10;
      unsigned int v44 = **v10;
      if (v20 == v44)
      {
        if (*((void *)v19 + 3) + (unint64_t)*((unsigned int *)v19 + 5) < *((void *)v43 + 3)
                                                                                 + (unint64_t)*((unsigned int *)v43 + 5))
          goto LABEL_65;
      }
      else if (v20 < v44)
      {
LABEL_65:
        for (uint64_t i = v9 + 1; ; ++i)
        {
          unsigned int v46 = **i;
          if (v20 == v46)
          {
            if (*((void *)v19 + 3) + (unint64_t)*((unsigned int *)v19 + 5) < *((void *)*i + 3)
                                                                                     + (unint64_t)*((unsigned int *)*i + 5))
              goto LABEL_70;
          }
          else if (v20 < v46)
          {
            goto LABEL_70;
          }
        }
      }
      for (uint64_t i = v9 + 1; i < a2; ++i)
      {
        unsigned int v45 = **i;
        if (v20 == v45)
        {
          if (*((void *)v19 + 3) + (unint64_t)*((unsigned int *)v19 + 5) < *((void *)*i + 3)
                                                                                   + (unint64_t)*((unsigned int *)*i + 5))
            break;
        }
        else if (v20 < v45)
        {
          break;
        }
      }
LABEL_70:
      uint64_t j = a2;
      if (i < a2)
      {
        for (uint64_t j = a2 - 1; ; --j)
        {
          if (v20 == v44)
          {
            if (*((void *)v19 + 3) + (unint64_t)*((unsigned int *)v19 + 5) >= *((void *)v43 + 3)
                                                                                      + (unint64_t)*((unsigned int *)v43 + 5))
              break;
          }
          else if (v20 >= v44)
          {
            break;
          }
          uint64_t v48 = *(j - 1);
          double v43 = v48;
          unsigned int v44 = *v48;
        }
      }
      if (i < j)
      {
        uint64_t v49 = *i;
        id v50 = *j;
        do
        {
          *i++ = v50;
          unint64_t *j = v49;
          while (1)
          {
            uint64_t v49 = *i;
            unsigned int v51 = **i;
            BOOL v52 = v20 >= v51;
            if (v20 == v51) {
              BOOL v52 = *((void *)v19 + 3) + (unint64_t)*((unsigned int *)v19 + 5) >= *((void *)v49 + 3)
            }
                                                                                         + (unint64_t)*((unsigned int *)v49 + 5);
            if (!v52) {
              break;
            }
            ++i;
          }
          do
          {
            long long v53 = *--j;
            id v50 = v53;
            unsigned int v54 = *v53;
            BOOL v55 = v20 >= v54;
            if (v20 == v54) {
              BOOL v55 = *((void *)v19 + 3) + (unint64_t)*((unsigned int *)v19 + 5) >= *((void *)v50 + 3)
            }
                                                                                         + (unint64_t)*((unsigned int *)v50 + 5);
          }
          while (!v55);
        }
        while (i < j);
      }
      uint64_t v56 = i - 1;
      BOOL v4 = i - 1 >= v9;
      BOOL v5 = i - 1 == v9;
      if (i - 1 != v9)
      {
        long double v57 = *v56;
        *uint64_t v56 = 0;
        id v58 = *v9;
        *id v9 = v57;
        if (v58)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v58 + 9));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v58 + 6));
          uint64_t result = MEMORY[0x1A6239270](v58, 0x1070C4044CBF76DLL);
        }
      }
      a4 = 0;
      unsigned int v59 = *v56;
      *uint64_t v56 = v19;
      if (v59)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v59 + 9));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v59 + 6));
        uint64_t result = MEMORY[0x1A6239270](v59, 0x1070C4044CBF76DLL);
        a4 = 0;
      }
    }
    else
    {
LABEL_14:
      *id v9 = 0;
      for (uint64_t k = v9 + 1; ; ++k)
      {
        uint8x8_t v25 = *k;
        unsigned int v26 = **k;
        if (v26 == v20) {
          break;
        }
        if (v26 >= v20) {
          goto LABEL_19;
        }
LABEL_16:
        ;
      }
      if (*((void *)v25 + 3) + (unint64_t)*((unsigned int *)v25 + 5) < *((void *)v19 + 3)
                                                                               + (unint64_t)*((unsigned int *)v19 + 5))
        goto LABEL_16;
LABEL_19:
      BOOL v27 = k - 1;
      uint64_t m = a2 - 1;
      if (k - 1 == v9)
      {
        for (uint64_t m = a2 - 1; k < m + 1; --m)
        {
          unsigned int v31 = **m;
          if (v31 == v20)
          {
            if (*((void *)*m + 3) + (unint64_t)*((unsigned int *)*m + 5) < *((void *)v19 + 3)
                                                                                   + (unint64_t)*((unsigned int *)v19 + 5))
              goto LABEL_33;
          }
          else if (v31 < v20)
          {
            goto LABEL_33;
          }
        }
        ++m;
      }
      else
      {
        while (1)
        {
          unsigned int v29 = **m;
          BOOL v30 = v29 >= v20;
          if (v29 == v20) {
            BOOL v30 = *((void *)*m + 3) + (unint64_t)*((unsigned int *)*m + 5) >= *((void *)v19 + 3)
          }
                                                                                     + (unint64_t)*((unsigned int *)v19 + 5);
          if (!v30) {
            break;
          }
          --m;
        }
      }
LABEL_33:
      if (k < m)
      {
        uint64_t v32 = *m;
        uint64_t v33 = k;
        unint64_t v34 = m;
        do
        {
          *v33++ = v32;
          uint64_t *v34 = v25;
          while (1)
          {
            uint8x8_t v25 = *v33;
            unsigned int v35 = **v33;
            if (v35 == v20) {
              break;
            }
            if (v35 >= v20) {
              goto LABEL_41;
            }
LABEL_38:
            ++v33;
          }
          if (*((void *)v25 + 3) + (unint64_t)*((unsigned int *)v25 + 5) < *((void *)v19 + 3)
                                                                                   + (unint64_t)*((unsigned int *)v19 + 5))
            goto LABEL_38;
LABEL_41:
          BOOL v27 = v33 - 1;
          do
          {
            unsigned int v36 = *--v34;
            uint64_t v32 = v36;
            unsigned int v37 = *v36;
            BOOL v38 = v37 >= v20;
            if (v37 == v20) {
              BOOL v38 = *((void *)v32 + 3) + (unint64_t)*((unsigned int *)v32 + 5) >= *((void *)v19 + 3)
            }
                                                                                         + (unint64_t)*((unsigned int *)v19 + 5);
          }
          while (v38);
        }
        while (v33 < v34);
      }
      if (v27 != v9)
      {
        unint64_t v39 = *v27;
        void *v27 = 0;
        uint64_t v40 = *v9;
        *id v9 = v39;
        if (v40)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v40 + 9));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v40 + 6));
          MEMORY[0x1A6239270](v40, 0x1070C4044CBF76DLL);
        }
      }
      uint64_t v41 = *v27;
      void *v27 = v19;
      if (v41)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v41 + 9));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v41 + 6));
        MEMORY[0x1A6239270](v41, 0x1070C4044CBF76DLL);
      }
      if (k < m)
      {
LABEL_54:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,false>(v9, v27, a3, a4 & 1);
        a4 = 0;
        uint64_t i = v27 + 1;
      }
      else
      {
        BOOL v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v9, v27);
        uint64_t i = v27 + 1;
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(v27 + 1, a2);
        if (result)
        {
          a2 = v27;
          if (v42) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v42) {
          goto LABEL_54;
        }
      }
    }
  }
  uint64_t v65 = v9 + 1;
  BOOL v67 = v9 == a2 || v65 == a2;
  if ((a4 & 1) == 0)
  {
    if (v67) {
      return result;
    }
    while (1)
    {
      unint64_t v139 = v9;
      id v9 = v65;
      unint64_t v140 = *v139;
      uint64_t v141 = v139[1];
      unsigned int v142 = *v141;
      unsigned int v143 = **v139;
      BOOL v144 = v142 >= v143;
      if (v142 == v143) {
        BOOL v144 = *((void *)v141 + 3) + (unint64_t)*((unsigned int *)v141 + 5) >= *((void *)v140 + 3)
      }
                                                                                      + (unint64_t)*((unsigned int *)v140 + 5);
      if (!v144)
      {
        uint64_t v145 = 0;
        *id v9 = 0;
        do
        {
          while (1)
          {
            uint64_t v146 = v139;
            *unint64_t v139 = 0;
            v139[1] = v140;
            if (v145)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v145 + 9));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v145 + 6));
              uint64_t result = MEMORY[0x1A6239270](v145, 0x1070C4044CBF76DLL);
              unsigned int v142 = *v141;
            }
            unint64_t v139 = v146 - 1;
            unint64_t v140 = *(v146 - 1);
            unsigned int v147 = *v140;
            if (v142 == v147) {
              break;
            }
            uint64_t v145 = *v146;
            if (v142 >= v147) {
              goto LABEL_218;
            }
          }
          uint64_t v145 = *v146;
        }
        while (*((void *)v141 + 3) + (unint64_t)*((unsigned int *)v141 + 5) < *((void *)v140 + 3)
                                                                                      + (unint64_t)*((unsigned int *)v140 + 5));
LABEL_218:
        unint64_t *v146 = v141;
        if (v145)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v145 + 9));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v145 + 6));
          uint64_t result = MEMORY[0x1A6239270](v145, 0x1070C4044CBF76DLL);
        }
      }
      uint64_t v65 = v9 + 1;
      if (v9 + 1 == a2) {
        return result;
      }
    }
  }
  if (v67) {
    return result;
  }
  uint64_t v68 = 0;
  int v69 = v9;
  while (2)
  {
    uint64_t v70 = v69;
    int v69 = v65;
    int v71 = *v70;
    uint64_t v72 = v70[1];
    unsigned int v73 = *v72;
    unsigned int v74 = **v70;
    BOOL v75 = v73 >= v74;
    if (v73 == v74) {
      BOOL v75 = *((void *)v72 + 3) + (unint64_t)*((unsigned int *)v72 + 5) >= *((void *)v71 + 3)
    }
                                                                                 + (unint64_t)*((unsigned int *)v71 + 5);
    if (v75) {
      goto LABEL_119;
    }
    uint64_t v76 = 0;
    *int v69 = 0;
    uint64_t v77 = v68;
    while (2)
    {
      __n128 v78 = (uint64_t *)((char *)v9 + v77);
      *__n128 v78 = 0;
      v78[1] = (uint64_t)v71;
      if (v76)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v76 + 72));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v76 + 48));
        uint64_t result = MEMORY[0x1A6239270](v76, 0x1070C4044CBF76DLL);
      }
      if (!v77)
      {
        uint64_t v70 = v9;
        goto LABEL_134;
      }
      int v71 = *(unsigned __int8 **)((char *)v9 + v77 - 8);
      unsigned int v79 = *v72;
      unsigned int v80 = *v71;
      if (v79 == v80)
      {
        if (*((void *)v72 + 3) + (unint64_t)*((unsigned int *)v72 + 5) >= *((void *)v71 + 3)
                                                                                  + (unint64_t)*((unsigned int *)v71 + 5))
          goto LABEL_134;
        goto LABEL_125;
      }
      if (v79 < v80)
      {
LABEL_125:
        --v70;
        uint64_t v76 = *v78;
        v77 -= 8;
        continue;
      }
      break;
    }
    uint64_t v70 = (unsigned __int8 **)((char *)v9 + v77);
LABEL_134:
    long double v81 = *v70;
    *uint64_t v70 = v72;
    if (v81)
    {
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v81 + 9));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v81 + 6));
      uint64_t result = MEMORY[0x1A6239270](v81, 0x1070C4044CBF76DLL);
    }
LABEL_119:
    uint64_t v65 = v69 + 1;
    v68 += 8;
    if (v69 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *,false>(uint64_t result, unsigned __int8 **a2, uint64_t a3, char a4)
{
  id v9 = (unsigned __int8 **)result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  unint64_t v11 = v9;
  while (1)
  {
    id v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    unint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v87 = *v9;
          if (**v10 < **v9)
          {
            *id v9 = *v10;
            *uint64_t v10 = v87;
          }
          return result;
        case 3uLL:
          unsigned int v88 = *v9;
          unsigned int v89 = v9[1];
          unsigned int v90 = *v89;
          unsigned int v91 = **v9;
          uint64_t v92 = *v10;
          unsigned int v93 = **v10;
          if (v90 >= v91)
          {
            if (v93 < v90)
            {
              v9[1] = v92;
              *uint64_t v10 = v89;
              uint64_t v152 = *v9;
              uint64_t v151 = v9[1];
              if (*v151 < **v9)
              {
                *id v9 = v151;
                v9[1] = v152;
              }
            }
          }
          else
          {
            if (v93 >= v90)
            {
              *id v9 = v89;
              v9[1] = v88;
              if (**v10 >= v91) {
                return result;
              }
              v9[1] = *v10;
            }
            else
            {
              *id v9 = v92;
            }
            *uint64_t v10 = v88;
          }
          break;
        case 4uLL:
          return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(v9, v9 + 1, v9 + 2, a2 - 1);
        case 5uLL:
          unsigned int v94 = v9 + 1;
          unsigned int v95 = v9 + 2;
          BOOL v96 = v9 + 3;
          uint64_t result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(v9, v9 + 1, v9 + 2, v9 + 3);
          uint64_t v97 = v9[3];
          if (**v10 < *v97)
          {
            *BOOL v96 = *v10;
            *uint64_t v10 = v97;
            uint64_t v98 = *v96;
            uint64_t v99 = *v95;
            unsigned int v100 = **v96;
            if (v100 < **v95)
            {
              *unsigned int v95 = v98;
              *BOOL v96 = v99;
              unsigned int v101 = *v94;
              if (v100 < **v94)
              {
                v9[1] = v98;
                v9[2] = v101;
                unsigned int v102 = *v9;
                if (v100 < **v9)
                {
                  *id v9 = v98;
                  v9[1] = v102;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return result;
      }
      int64_t v115 = (v13 - 2) >> 1;
      int64_t v116 = v115;
      do
      {
        int64_t v117 = v116;
        if (v115 >= v116)
        {
          uint64_t v118 = (2 * v116) | 1;
          unsigned int v119 = &v9[v118];
          if (2 * v117 + 2 < (uint64_t)v13)
          {
            unsigned int v122 = **v119;
            unsigned int v120 = *v119[1];
            BOOL v121 = v122 >= v120;
            if (v122 <= v120) {
              unsigned int v122 = *v119[1];
            }
            if (!v121)
            {
              ++v119;
              uint64_t v118 = 2 * v117 + 2;
            }
          }
          else
          {
            unsigned int v122 = **v119;
          }
          uint64_t v123 = &v9[v117];
          uint64_t v124 = *v123;
          if (v122 >= **v123)
          {
            *uint64_t v123 = 0;
            uint64_t v125 = *v119;
            do
            {
              uint64_t v129 = v119;
              double *v119 = 0;
              double v130 = *v123;
              *uint64_t v123 = v125;
              if (v130)
              {
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v130 + 14));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v130 + 11));
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v130 + 8));
                if ((char)v130[47] < 0) {
                  operator delete(*((void **)v130 + 3));
                }
                uint64_t result = MEMORY[0x1A6239270](v130, 0x1032C4041C7693DLL);
              }
              if (v115 < v118) {
                break;
              }
              unsigned int v119 = &v9[(2 * v118) | 1];
              if (2 * v118 + 2 < (uint64_t)v13)
              {
                uint64_t v125 = *v119;
                unsigned int v126 = **v119;
                unsigned int v127 = *v119[1];
                BOOL v128 = v126 >= v127;
                if (v126 <= v127) {
                  unsigned int v126 = *v119[1];
                }
                if (v128)
                {
                  uint64_t v118 = (2 * v118) | 1;
                }
                else
                {
                  uint64_t v125 = v119[1];
                  ++v119;
                  uint64_t v118 = 2 * v118 + 2;
                }
              }
              else
              {
                uint64_t v125 = *v119;
                unsigned int v126 = **v119;
                uint64_t v118 = (2 * v118) | 1;
              }
              uint64_t v123 = v129;
            }
            while (v126 >= *v124);
            unsigned int v131 = *v129;
            *uint64_t v129 = v124;
            if (v131)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v131 + 14));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v131 + 11));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v131 + 8));
              if ((char)v131[47] < 0) {
                operator delete(*((void **)v131 + 3));
              }
              uint64_t result = MEMORY[0x1A6239270](v131, 0x1032C4041C7693DLL);
            }
          }
        }
        int64_t v116 = v117 - 1;
      }
      while (v117);
      uint64_t v132 = (unint64_t)v12 >> 3;
      while (2)
      {
        uint64_t v134 = 0;
        unint64_t v135 = *v9;
        *id v9 = 0;
        uint64_t v136 = v9;
        do
        {
          unsigned int v137 = &v136[v134 + 1];
          if (2 * v134 + 2 >= v132)
          {
            unsigned int v138 = *v137;
            uint64_t v134 = (2 * v134) | 1;
          }
          else
          {
            unsigned int v138 = *v137;
            if (**v137 >= *v136[v134 + 2])
            {
              uint64_t v134 = (2 * v134) | 1;
            }
            else
            {
              unsigned int v138 = v136[v134 + 2];
              unsigned int v137 = &v136[v134 + 2];
              uint64_t v134 = 2 * v134 + 2;
            }
          }
          *unsigned int v137 = 0;
          unint64_t v139 = *v136;
          *uint64_t v136 = v138;
          if (v139)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v139 + 14));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v139 + 11));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v139 + 8));
            if ((char)v139[47] < 0) {
              operator delete(*((void **)v139 + 3));
            }
            uint64_t result = MEMORY[0x1A6239270](v139, 0x1032C4041C7693DLL);
          }
          uint64_t v136 = v137;
        }
        while (v134 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
        if (v137 == --a2)
        {
          float v150 = *v137;
          *unsigned int v137 = v135;
          if (!v150) {
            goto LABEL_178;
          }
        }
        else
        {
          unint64_t v140 = *a2;
          *a2 = 0;
          uint64_t v141 = *v137;
          *unsigned int v137 = v140;
          if (v141)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v141 + 14));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v141 + 11));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v141 + 8));
            if ((char)v141[47] < 0) {
              operator delete(*((void **)v141 + 3));
            }
            uint64_t result = MEMORY[0x1A6239270](v141, 0x1032C4041C7693DLL);
          }
          unsigned int v142 = *a2;
          *a2 = v135;
          if (v142)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v142 + 14));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v142 + 11));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v142 + 8));
            if ((char)v142[47] < 0) {
              operator delete(*((void **)v142 + 3));
            }
            uint64_t result = MEMORY[0x1A6239270](v142, 0x1032C4041C7693DLL);
          }
          uint64_t v143 = (char *)(v137 + 1) - (char *)v9;
          if (v143 < 9) {
            goto LABEL_178;
          }
          unint64_t v144 = (((unint64_t)v143 >> 3) - 2) >> 1;
          uint64_t v145 = &v9[v144];
          uint64_t v146 = *v137;
          if (**v145 >= **v137) {
            goto LABEL_178;
          }
          *unsigned int v137 = 0;
          unsigned int v147 = *v145;
          do
          {
            unint64_t v148 = v145;
            *uint64_t v145 = 0;
            __double2 v149 = *v137;
            *unsigned int v137 = v147;
            if (v149)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v149 + 14));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v149 + 11));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v149 + 8));
              if ((char)v149[47] < 0) {
                operator delete(*((void **)v149 + 3));
              }
              uint64_t result = MEMORY[0x1A6239270](v149, 0x1032C4041C7693DLL);
            }
            if (!v144) {
              break;
            }
            unint64_t v144 = (v144 - 1) >> 1;
            uint64_t v145 = &v9[v144];
            unsigned int v147 = *v145;
            unsigned int v137 = v148;
          }
          while (**v145 < *v146);
          float v150 = *v148;
          void *v148 = v146;
          if (!v150)
          {
LABEL_178:
            if (v132-- <= 2) {
              return result;
            }
            continue;
          }
        }
        break;
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v150 + 14));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v150 + 11));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v150 + 8));
      if ((char)v150[47] < 0) {
        operator delete(*((void **)v150 + 3));
      }
      uint64_t result = MEMORY[0x1A6239270](v150, 0x1032C4041C7693DLL);
      goto LABEL_178;
    }
    unint64_t v14 = v13 >> 1;
    int v15 = &v9[v13 >> 1];
    uint64_t v16 = *v10;
    unsigned int v17 = **v10;
    if ((unint64_t)v12 >= 0x401)
    {
      double v18 = *v15;
      unsigned int v19 = *v9;
      unsigned int v20 = **v15;
      unsigned int v21 = **v9;
      if (v20 >= v21)
      {
        if (v17 < v20)
        {
          *int v15 = v16;
          *uint64_t v10 = v18;
          unsigned int v26 = *v9;
          if (**v15 < **v9)
          {
            *id v9 = *v15;
            *int v15 = v26;
          }
        }
      }
      else
      {
        if (v17 < v20)
        {
          *id v9 = v16;
          goto LABEL_22;
        }
        *id v9 = v18;
        *int v15 = v19;
        if (**v10 < v21)
        {
          *int v15 = *v10;
LABEL_22:
          *uint64_t v10 = v19;
        }
      }
      uint64_t v28 = &v9[v14];
      unsigned int v31 = *(v28 - 1);
      unsigned int v29 = v28 - 1;
      BOOL v30 = v31;
      uint64_t v32 = v9[1];
      unsigned int v33 = *v31;
      unsigned int v34 = *v32;
      unsigned int v35 = *(a2 - 2);
      unsigned int v36 = *v35;
      if (v33 >= v34)
      {
        if (v36 < v33)
        {
          *unsigned int v29 = v35;
          *(a2 - 2) = v30;
          unsigned int v37 = v9[1];
          if (**v29 < *v37)
          {
            v9[1] = *v29;
            *unsigned int v29 = v37;
          }
        }
      }
      else
      {
        if (v36 < v33)
        {
          v9[1] = v35;
          goto LABEL_34;
        }
        v9[1] = v30;
        *unsigned int v29 = v32;
        BOOL v38 = *(a2 - 2);
        if (*v38 < v34)
        {
          *unsigned int v29 = v38;
LABEL_34:
          *(a2 - 2) = v32;
        }
      }
      unint64_t v39 = &v9[v14];
      BOOL v42 = v39[1];
      uint64_t v40 = v39 + 1;
      uint64_t v41 = v42;
      double v43 = v9[2];
      unsigned int v44 = *v42;
      unsigned int v45 = *v43;
      unsigned int v46 = *(a2 - 3);
      unsigned int v47 = *v46;
      if (v44 >= v45)
      {
        if (v47 < v44)
        {
          *uint64_t v40 = v46;
          *(a2 - 3) = v41;
          uint64_t v48 = v9[2];
          if (**v40 < *v48)
          {
            v9[2] = *v40;
            *uint64_t v40 = v48;
          }
        }
      }
      else
      {
        if (v47 < v44)
        {
          v9[2] = v46;
          goto LABEL_43;
        }
        v9[2] = v41;
        *uint64_t v40 = v43;
        uint64_t v49 = *(a2 - 3);
        if (*v49 < v45)
        {
          *uint64_t v40 = v49;
LABEL_43:
          *(a2 - 3) = v43;
        }
      }
      id v50 = *v15;
      unsigned int v51 = *v29;
      unsigned int v52 = **v15;
      unsigned int v53 = **v29;
      unsigned int v54 = *v40;
      unsigned int v55 = **v40;
      if (v52 >= v53)
      {
        if (v55 >= v52) {
          goto LABEL_52;
        }
        *int v15 = v54;
        *uint64_t v40 = v50;
        uint64_t v40 = &v9[v13 >> 1];
        id v50 = v51;
        if (v55 >= v53)
        {
          id v50 = v54;
          goto LABEL_52;
        }
      }
      else if (v55 >= v52)
      {
        *unsigned int v29 = v50;
        *int v15 = v51;
        unsigned int v29 = &v9[v13 >> 1];
        id v50 = v54;
        if (v55 >= v53)
        {
          id v50 = v51;
LABEL_52:
          uint64_t v56 = *v9;
          *id v9 = v50;
          *int v15 = v56;
          goto LABEL_53;
        }
      }
      *unsigned int v29 = v54;
      *uint64_t v40 = v51;
      goto LABEL_52;
    }
    unsigned int v22 = *v9;
    BOOL v23 = *v15;
    unsigned int v24 = **v9;
    unsigned int v25 = **v15;
    if (v24 >= v25)
    {
      if (v17 < v24)
      {
        *id v9 = v16;
        *uint64_t v10 = v22;
        BOOL v27 = *v15;
        if (**v9 < **v15)
        {
          *int v15 = *v9;
          *id v9 = v27;
        }
      }
      goto LABEL_53;
    }
    if (v17 >= v24)
    {
      *int v15 = v22;
      *id v9 = v23;
      if (**v10 >= v25) {
        goto LABEL_53;
      }
      *id v9 = *v10;
    }
    else
    {
      *int v15 = v16;
    }
    *uint64_t v10 = v23;
LABEL_53:
    --a3;
    long double v57 = *v9;
    unsigned int v58 = **v9;
    if ((a4 & 1) != 0 || **(v9 - 1) < v58)
    {
      *id v9 = 0;
      unsigned int v59 = v9;
      do
      {
        double v60 = v59;
        unsigned int v62 = v59[1];
        ++v59;
        unsigned int v61 = v62;
      }
      while (*v62 < v58);
      unsigned int v63 = a2;
      if (v60 == v9)
      {
        unsigned int v63 = a2;
        do
        {
          if (v59 >= v63) {
            break;
          }
          uint64_t v65 = *--v63;
        }
        while (*v65 >= v58);
      }
      else
      {
        do
          BOOL v64 = *--v63;
        while (*v64 >= v58);
      }
      if (v59 < v63)
      {
        uint64_t v66 = *v63;
        BOOL v67 = v59;
        uint64_t v68 = v63;
        do
        {
          *BOOL v67 = v66;
          *uint64_t v68 = v61;
          do
          {
            double v60 = v67;
            int v69 = v67[1];
            ++v67;
            unsigned int v61 = v69;
          }
          while (*v69 < v58);
          do
          {
            uint64_t v70 = *--v68;
            uint64_t v66 = v70;
          }
          while (*v70 >= v58);
        }
        while (v67 < v68);
      }
      if (v60 != v9)
      {
        int v71 = *v60;
        *double v60 = 0;
        uint64_t v72 = *v9;
        *id v9 = v71;
        if (v72)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v72 + 14));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v72 + 11));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v72 + 8));
          if ((char)v72[47] < 0) {
            operator delete(*((void **)v72 + 3));
          }
          MEMORY[0x1A6239270](v72, 0x1032C4041C7693DLL);
        }
      }
      unsigned int v73 = *v60;
      *double v60 = v57;
      if (v73)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v73 + 14));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v73 + 11));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v73 + 8));
        if ((char)v73[47] < 0) {
          operator delete(*((void **)v73 + 3));
        }
        MEMORY[0x1A6239270](v73, 0x1032C4041C7693DLL);
      }
      if (v59 < v63) {
        goto LABEL_81;
      }
      BOOL v74 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(v9, v60);
      unint64_t v11 = v60 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *>(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v74) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v74)
      {
LABEL_81:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *,false>(v9, v60, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v60 + 1;
      }
    }
    else
    {
      *id v9 = 0;
      if (v58 < **v10)
      {
        unint64_t v11 = v9;
        do
        {
          BOOL v75 = v11[1];
          ++v11;
        }
        while (v58 >= *v75);
      }
      else
      {
        uint64_t v76 = v9 + 1;
        do
        {
          unint64_t v11 = v76;
          if (v76 >= a2) {
            break;
          }
          ++v76;
        }
        while (v58 >= **v11);
      }
      uint64_t v77 = a2;
      if (v11 < a2)
      {
        uint64_t v77 = a2;
        do
          __n128 v78 = *--v77;
        while (v58 < *v78);
      }
      if (v11 < v77)
      {
        unsigned int v79 = *v11;
        unsigned int v80 = *v77;
        do
        {
          *unint64_t v11 = v80;
          *uint64_t v77 = v79;
          do
          {
            long double v81 = v11[1];
            ++v11;
            unsigned int v79 = v81;
          }
          while (v58 >= *v81);
          do
          {
            int64_t v82 = *--v77;
            unsigned int v80 = v82;
          }
          while (v58 < *v82);
        }
        while (v11 < v77);
      }
      int64_t v83 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9)
      {
        int64_t v84 = *v83;
        *int64_t v83 = 0;
        uint64_t v85 = *v9;
        *id v9 = v84;
        if (v85)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v85 + 14));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v85 + 11));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v85 + 8));
          if ((char)v85[47] < 0) {
            operator delete(*((void **)v85 + 3));
          }
          uint64_t result = MEMORY[0x1A6239270](v85, 0x1032C4041C7693DLL);
        }
      }
      a4 = 0;
      unsigned int v86 = *v83;
      *int64_t v83 = v57;
      if (v86)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v86 + 14));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v86 + 11));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v86 + 8));
        if ((char)v86[47] < 0) {
          operator delete(*((void **)v86 + 3));
        }
        uint64_t result = MEMORY[0x1A6239270](v86, 0x1032C4041C7693DLL);
        a4 = 0;
      }
    }
  }
  BOOL v103 = v9 + 1;
  BOOL v105 = v9 == a2 || v103 == a2;
  if (a4)
  {
    if (!v105)
    {
      uint64_t v106 = 0;
      BOOL v107 = v9;
      do
      {
        id v108 = *v107;
        uint64_t v109 = v107[1];
        BOOL v107 = v103;
        if (*v109 < *v108)
        {
          uint64_t v110 = 0;
          *BOOL v103 = 0;
          for (uint64_t i = v106; ; i -= 8)
          {
            uint64_t v112 = (uint64_t *)((char *)v9 + i);
            *uint64_t v112 = 0;
            v112[1] = (uint64_t)v108;
            if (v110)
            {
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v110 + 112));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v110 + 88));
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v110 + 64));
              if (*(char *)(v110 + 47) < 0) {
                operator delete(*(void **)(v110 + 24));
              }
              uint64_t result = MEMORY[0x1A6239270](v110, 0x1032C4041C7693DLL);
            }
            if (!i) {
              break;
            }
            double v113 = (unsigned __int8 **)((char *)v9 + i);
            id v108 = *(unsigned __int8 **)((char *)v9 + i - 8);
            if (*v109 >= *v108) {
              goto LABEL_144;
            }
            uint64_t v110 = *v112;
          }
          double v113 = v9;
LABEL_144:
          double v114 = *v113;
          unsigned __int8 *v113 = v109;
          if (v114)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v114 + 14));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v114 + 11));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v114 + 8));
            if ((char)v114[47] < 0) {
              operator delete(*((void **)v114 + 3));
            }
            uint64_t result = MEMORY[0x1A6239270](v114, 0x1032C4041C7693DLL);
          }
        }
        BOOL v103 = v107 + 1;
        v106 += 8;
      }
      while (v107 + 1 != a2);
    }
  }
  else if (!v105)
  {
    do
    {
      unint64_t v154 = *v9;
      int8x8_t v153 = v9[1];
      id v9 = v103;
      unsigned int v155 = *v153;
      if (v155 < *v154)
      {
        *id v9 = 0;
        unint64_t v156 = v9;
        do
        {
          unint64_t v157 = v156;
          *--unint64_t v156 = 0;
          *unint64_t v157 = v154;
          unint64_t v154 = *(v157 - 2);
        }
        while (v155 < *v154);
        void *v156 = v153;
      }
      BOOL v103 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

unsigned __int8 **std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *>(unsigned __int8 **result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unint64_t v3 = *a2;
  BOOL v4 = *result;
  unsigned int v5 = **a2;
  unsigned int v6 = **result;
  if (v5 == v6)
  {
    unint64_t v7 = *a3;
    if (*((void *)v3 + 3) + (unint64_t)*((unsigned int *)v3 + 5) >= *((void *)v4 + 3)
                                                                            + (unint64_t)*((unsigned int *)v4 + 5))
    {
LABEL_3:
      unsigned int v8 = *v7;
      BOOL v9 = v8 >= v5;
      if (v8 == v5) {
        BOOL v9 = *((void *)v7 + 3) + (unint64_t)*((unsigned int *)v7 + 5) >= *((void *)v3 + 3)
      }
                                                                                + (unint64_t)*((unsigned int *)v3 + 5);
      if (!v9)
      {
        *a2 = v7;
        *a3 = v3;
        uint64_t v10 = *a2;
        unint64_t v11 = *result;
        unsigned int v12 = **a2;
        unsigned int v13 = **result;
        BOOL v14 = v12 >= v13;
        if (v12 == v13) {
          BOOL v14 = *((void *)v10 + 3) + (unint64_t)*((unsigned int *)v10 + 5) >= *((void *)v11 + 3)
        }
                                                                                     + (unint64_t)*((unsigned int *)v11 + 5);
        if (!v14)
        {
          *uint64_t result = v10;
          *a2 = v11;
        }
      }
      return result;
    }
  }
  else
  {
    unint64_t v7 = *a3;
    if (v5 >= v6) {
      goto LABEL_3;
    }
  }
  unsigned int v15 = *v7;
  BOOL v16 = v15 >= v5;
  if (v15 == v5) {
    BOOL v16 = *((void *)v7 + 3) + (unint64_t)*((unsigned int *)v7 + 5) >= *((void *)v3 + 3)
  }
                                                                             + (unint64_t)*((unsigned int *)v3 + 5);
  if (!v16)
  {
    *uint64_t result = v7;
LABEL_19:
    *a3 = v4;
    return result;
  }
  *uint64_t result = v3;
  *a2 = v4;
  unsigned int v17 = *a3;
  unsigned int v18 = **a3;
  BOOL v19 = v18 >= v6;
  if (v18 == v6) {
    BOOL v19 = *((void *)v17 + 3) + (unint64_t)*((unsigned int *)v17 + 5) >= *((void *)v4 + 3)
  }
                                                                               + (unint64_t)*((unsigned int *)v4 + 5);
  if (!v19)
  {
    *a2 = v17;
    goto LABEL_19;
  }
  return result;
}

void geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::topologicalSortedDFS(uint64_t a1, unsigned __int8 *a2, unint64_t *a3, uint64_t a4)
{
  unsigned int v46 = a2;
  unsigned int v8 = (unsigned __int8 **)*a3;
  BOOL v9 = (unsigned __int8 **)a3[1];
  if ((unsigned __int8 **)*a3 != v9)
  {
    unsigned int v10 = *a2;
    unint64_t v11 = (unsigned __int8 **)*a3;
    do
    {
      unsigned int v12 = **v11;
      if (v12 == v10)
      {
        if (v11 == v9) {
          break;
        }
        return;
      }
      ++v11;
    }
    while (v10 >= v12 && v11 != v9);
    while (**v8 < *a2)
    {
      if (++v8 == v9)
      {
        unsigned int v8 = (unsigned __int8 **)a3[1];
        goto LABEL_16;
      }
    }
  }
  if (v8 == v9 || *a2 != **v8) {
LABEL_16:
  }
    std::vector<md::FrameGraphPass *>::insert(a3, v8, (char *)&v46);
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unsigned int v15 = *v46;
    uint64_t v16 = a1 + 8;
    do
    {
      unsigned int v17 = **(unsigned __int8 **)(v14 + 32);
      BOOL v18 = v17 >= v15;
      if (v17 >= v15) {
        BOOL v19 = (uint64_t *)v14;
      }
      else {
        BOOL v19 = (uint64_t *)(v14 + 8);
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      uint64_t v14 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 8 && v15 >= **(unsigned __int8 **)(v16 + 32))
    {
      BOOL v30 = *(unsigned __int8 ***)(v16 + 40);
      unsigned int v31 = *(unsigned __int8 ***)(v16 + 48);
      while (v30 != v31)
      {
        uint64_t v32 = (unsigned __int8 **)*a3;
        unsigned int v33 = (unsigned __int8 **)a3[1];
        if ((unsigned __int8 **)*a3 == v33) {
          goto LABEL_40;
        }
        unsigned int v34 = **v30;
        while (1)
        {
          unsigned int v35 = **v32;
          if (v35 == v34) {
            break;
          }
          ++v32;
          if (v34 < v35 || v32 == v33) {
            goto LABEL_40;
          }
        }
        if (v32 == v33) {
LABEL_40:
        }
          geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::topologicalSortedDFS(a1);
        ++v30;
      }
    }
  }
  unsigned int v21 = *(void **)(a4 + 8);
  unint64_t v20 = *(void *)(a4 + 16);
  if ((unint64_t)v21 >= v20)
  {
    BOOL v23 = *(unsigned char **)a4;
    uint64_t v24 = (uint64_t)v21 - *(void *)a4;
    uint64_t v25 = v24 >> 3;
    unint64_t v26 = (v24 >> 3) + 1;
    if (v26 >> 61) {
      abort();
    }
    uint64_t v27 = v20 - (void)v23;
    if (v27 >> 2 > v26) {
      unint64_t v26 = v27 >> 2;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      if (v28 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v29 = operator new(8 * v28);
    }
    else
    {
      unsigned int v29 = 0;
    }
    unsigned int v37 = &v29[8 * v25];
    BOOL v38 = &v29[8 * v28];
    *unsigned int v37 = v46;
    unsigned int v22 = v37 + 1;
    if (v21 == (void *)v23)
    {
      BOOL v23 = v21;
    }
    else
    {
      unint64_t v39 = (char *)v21 - v23 - 8;
      if (v39 < 0x58) {
        goto LABEL_72;
      }
      if ((unint64_t)((char *)v21 - v29 - v24) < 0x20) {
        goto LABEL_72;
      }
      uint64_t v40 = (v39 >> 3) + 1;
      uint64_t v41 = &v29[8 * v25 - 16];
      BOOL v42 = (long long *)(v21 - 2);
      uint64_t v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        _OWORD *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v37 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
      v21 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
      if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_72:
        do
        {
          uint64_t v45 = *--v21;
          *--unsigned int v37 = v45;
        }
        while (v21 != (void *)v23);
        BOOL v23 = *(unsigned char **)a4;
      }
    }
    *(void *)a4 = v37;
    *(void *)(a4 + 8) = v22;
    *(void *)(a4 + 16) = v38;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    void *v21 = v46;
    unsigned int v22 = v21 + 1;
  }
  *(void *)(a4 + 8) = v22;
}

uint64_t md::StandardRouteOverlayCache::overlaysInView(md::StandardRouteOverlayCache *this)
{
  return (uint64_t)this + 48;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xDFC317497CF9A4BFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xDFC317497CF9A4BFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xDFC317497CF9A4BFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_117;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v4 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  BOOL v9 = *(void **)(a2 + 8 * v4);
  if (!v9) {
    goto LABEL_25;
  }
  unsigned int v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v10[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      unsigned int v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == 0x1AF456233693CD46) {
      break;
    }
    if (v11 >= a3) {
      v11 %= a3;
    }
    if (v11 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    unsigned int v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v13 = v10[5];
  if (*(void *)(v13 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v7 = *(void *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v14 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL) {
      unint64_t v14 = 0xFBD83FDA8879FF7ELL % a3;
    }
  }
  else
  {
    unint64_t v14 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  unsigned int v15 = *(void **)(a2 + 8 * v14);
  if (!v15) {
    goto LABEL_48;
  }
  uint64_t v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v18 = v16[1];
      if (v18 == 0xFBD83FDA8879FF7ELL)
      {
        if (v16[2] == 0xFBD83FDA8879FF7ELL) {
          goto LABEL_46;
        }
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v16[1];
    if (v17 != 0xFBD83FDA8879FF7ELL)
    {
      if (v17 >= a3) {
        v17 %= a3;
      }
      if (v17 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v16[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_35:
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v19 = v16[5];
  if (*(void *)(v19 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    uint64_t v6 = *(void *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v20 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL) {
      uint64_t v20 = 0x1B8B241A8D896A1DLL % a3;
    }
  }
  else
  {
    uint64_t v20 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  unsigned int v21 = *(void **)(a2 + 8 * v20);
  if (!v21) {
    goto LABEL_71;
  }
  unsigned int v22 = (void *)*v21;
  if (!v22) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v24 = v22[1];
      if (v24 == 0x1B8B241A8D896A1DLL)
      {
        if (v22[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_69;
        }
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      unsigned int v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v23 = v22[1];
    if (v23 != 0x1B8B241A8D896A1DLL)
    {
      if (v23 >= a3) {
        v23 %= a3;
      }
      if (v23 != v20) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v22[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_58:
      unsigned int v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v25 = v22[5];
  if (*(void *)(v25 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v8 = *(void *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v26 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v26 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v26 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v27 = *(void **)(a2 + 8 * v26);
  if (!v27) {
    goto LABEL_94;
  }
  unint64_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      if (v30 == 0xE42D19AFCA302E68)
      {
        if (v28[2] == 0xE42D19AFCA302E68) {
          goto LABEL_92;
        }
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      unint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v29 = v28[1];
    if (v29 != 0xE42D19AFCA302E68)
    {
      if (v29 >= a3) {
        v29 %= a3;
      }
      if (v29 != v26) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (v28[2] != 0xE42D19AFCA302E68)
    {
LABEL_81:
      unint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  uint64_t v31 = v28[5];
  if (*(void *)(v31 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v5 = *(void *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v32 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4) {
      unint64_t v32 = 0xC97B9E962ADF4AD4 % a3;
    }
  }
  else
  {
    unint64_t v32 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  unsigned int v33 = *(void **)(a2 + 8 * v32);
  if (!v33) {
    goto LABEL_117;
  }
  unsigned int v34 = (void *)*v33;
  if (!v34) {
    goto LABEL_117;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v36 = v34[1];
      if (v36 == 0xC97B9E962ADF4AD4)
      {
        if (v34[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_115;
        }
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      unsigned int v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_117;
      }
    }
  }
  while (1)
  {
    unint64_t v35 = v34[1];
    if (v35 == 0xC97B9E962ADF4AD4) {
      break;
    }
    if (v35 >= a3) {
      v35 %= a3;
    }
    if (v35 != v32) {
      goto LABEL_117;
    }
LABEL_104:
    unsigned int v34 = (void *)*v34;
    if (!v34) {
      goto LABEL_117;
    }
  }
  if (v34[2] != 0xC97B9E962ADF4AD4) {
    goto LABEL_104;
  }
LABEL_115:
  uint64_t v37 = v34[5];
  if (*(void *)(v37 + 8) != 0xC97B9E962ADF4AD4)
  {
LABEL_117:
    uint64_t v38 = 0;
    goto LABEL_118;
  }
  uint64_t v38 = *(void *)(v37 + 32);
LABEL_118:
  *uint64_t result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

uint64_t md::SceneQueryLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  v163[0] = &unk_1EF571730;
  v163[1] = a2;
  v161[0] = &unk_1EF571778;
  v161[1] = a2;
  uint64_t v162 = v161;
  uint64_t v166 = v165;
  uint64_t v164 = v163;
  v165[0] = &unk_1EF571778;
  v165[1] = a2;
  _ZNSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__0NS_9allocatorISN_EEFvvEEclEv((uint64_t)v163);
  if (v162 == v161)
  {
    (*(void (**)(void *))(v161[0] + 32))(v161);
  }
  else if (v162)
  {
    (*(void (**)(void))(*v162 + 40))();
  }
  if (v164 == v163)
  {
    (*(void (**)(void *))(v163[0] + 32))(v163);
  }
  else if (v164)
  {
    (*(void (**)(void *))(*v164 + 40))(v164);
  }
  uint64_t v7 = (id *)a3[2];
  uint64_t v141 = (uint64_t *)a3[3];
  unint64_t v139 = (uint64_t *)a3[4];
  id v8 = v7[5];
  id v140 = v8;
  if (v8)
  {
    BOOL v9 = v8;
    unsigned int v10 = [v8 routeInfo];
    unint64_t v11 = [v10 route];
    uint64_t v143 = v11;

    BOOL v138 = [v9 useType] == 1;
  }
  else
  {
    unint64_t v11 = 0;
    BOOL v138 = 0;
    uint64_t v143 = 0;
  }
  int v12 = geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(a1 + 304), &v143);
  id v13 = v11;
  unint64_t v14 = v13;
  if (v13) {
    id v15 = v13;
  }
  uint64_t v16 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v14;

  int v17 = *(unsigned __int8 *)(a1 + 369);
  int v18 = *(unsigned __int8 *)v7;
  *(unsigned char *)(a1 + 369) = v18;
  uint64_t v20 = *(void *)(a1 + 320);
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)&long long v160 = v20;
  *((void *)&v160 + 1) = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v159 = 0;
  *(void *)buf = &unk_1EF571538;
  *(void *)&buf[8] = &v159;
  long double v168 = buf;
  unsigned int v21 = (unsigned char *)v141[6];
  unsigned int v22 = (unsigned char *)v141[7];
  if (v21 == v22) {
    goto LABEL_22;
  }
  do
  {
    LOBYTE(v153) = *v21;
    if (!v168) {
      goto LABEL_270;
    }
    (*(void (**)(uint8_t *, unsigned int **))(*(void *)v168 + 48))(v168, &v153);
    ++v21;
  }
  while (v21 != v22);
  unint64_t v23 = (gss::Allocator *)v168;
  if (v168 == buf)
  {
LABEL_22:
    unint64_t v23 = (gss::Allocator *)(*(uint64_t (**)(uint8_t *))(*(void *)buf + 32))(buf);
  }
  else if (v168)
  {
    unint64_t v23 = (gss::Allocator *)(*(uint64_t (**)(uint8_t *))(*(void *)v168 + 40))(v168);
  }
  int v24 = v12 ^ 1;
  uint64_t v25 = v140;
  if (v159)
  {
    int v26 = *(unsigned __int8 *)(a1 + 369);
    if (*(unsigned char *)(a1 + 369)) {
      BOOL v27 = 0;
    }
    else {
      BOOL v27 = v17 == v18;
    }
    if (v27) {
      char v28 = v24;
    }
    else {
      char v28 = 1;
    }
    if ((v28 & 1) == 0) {
      goto LABEL_60;
    }
    uint64_t v157 = 0;
    uint8x8_t v158 = 0;
    if (v26) {
      goto LABEL_32;
    }
    goto LABEL_53;
  }
  char v36 = v24 ^ 1;
  if (v17 != v18) {
    char v36 = 0;
  }
  if ((v36 & 1) == 0)
  {
    int v37 = *(unsigned __int8 *)(a1 + 369);
    uint64_t v157 = 0;
    uint8x8_t v158 = 0;
    if (v37)
    {
LABEL_32:
      int8x8_t v153 = 0;
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      uint64_t v156 = gss::Allocator::instance(v23);
      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v156 + 16))(v156, 16, 4);
      int8x8_t v153 = (unsigned int *)v29;
      uint64_t v155 = v29 + 16;
      if (v29) {
        *(void *)uint64_t v29 = 65624;
      }
      *(void *)(v29 + 8) = 0xB00000005;
      unint64_t v154 = (unsigned int *)(v29 + 16);
      memset(v151, 0, sizeof(v151));
      char v152 = 1;
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v151, 0x10002u) = 1;
      uint64_t v30 = [*(id *)(a1 + 304) styleAttributes];
      md::createFeatureAttributeSet((md *)&v147, v30);

      gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v147, &v153, v145);
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v144, *v141, (gss::FeatureAttributeSet *)v145, (gss::QueryOverrides *)v151);
      long long v32 = v144;
      long long v144 = 0uLL;
      long long v160 = v32;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      unsigned int v33 = (std::__shared_weak_count *)*((void *)&v144 + 1);
      if (*((void *)&v144 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v144 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      if (v145[0])
      {
        v145[1] = v145[0];
        uint64_t v31 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unsigned int *, int64_t))(*(void *)v146 + 40))(v146, v145[0], (char *)v145[2] - (char *)v145[0]);
      }
      if (v147)
      {
        unint64_t v148 = v147;
        uint64_t v31 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)v150 + 40))(v150, v147, v149 - (void)v147);
      }
      if (!v151[14])
      {
        uint64_t v34 = *(void *)v151;
        if (*(void *)v151)
        {
          uint64_t v35 = gss::Allocator::instance(v31);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v35 + 40))(v35, v34, *(unsigned __int16 *)&v151[12]);
        }
      }
      if (v153)
      {
        unint64_t v154 = v153;
        (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v156 + 40))(v156, v153, v155 - (void)v153);
      }
LABEL_56:
      uint64_t v38 = v158;
      if (v158 && !atomic_fetch_add(&v158->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
      uint64_t v19 = (std::__shared_weak_count *)*((void *)&v160 + 1);
      uint64_t v20 = v160;
      goto LABEL_60;
    }
LABEL_53:
    long long v160 = 0uLL;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    goto LABEL_56;
  }
LABEL_60:
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v39 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)(a1 + 320) = v20;
  *(void *)(a1 + 328) = v19;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  int v40 = *(unsigned __int8 *)(a1 + 120);
  int v41 = *(unsigned __int8 *)(a1 + 121);
  BOOL v42 = (std::__shared_weak_count *)*((void *)&v160 + 1);
  if (*((void *)&v160 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v160 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (v41) {
    uint64_t v43 = (std::__shared_weak_count **)(a1 + 320);
  }
  else {
    uint64_t v43 = 0;
  }
  if (v40)
  {
    uint64_t v44 = *(void *)(a1 + 320);
    uint64_t v45 = *(std::__shared_weak_count **)(a1 + 328);
    *(void *)buf = v44;
    *(void *)&buf[8] = v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v44 = 0;
    *(_OWORD *)buf = 0uLL;
  }
  md::SceneQueryLogic::handleNavigationFlex(a1, a2, v44, (uint64_t)v45, v24, a4);
  if (!v45 || atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v41) {
      goto LABEL_78;
    }
LABEL_81:
    unsigned int v46 = 0;
    unsigned int v47 = 0;
    unsigned int v147 = 0;
    unint64_t v148 = 0;
    goto LABEL_82;
  }
  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
  std::__shared_weak_count::__release_weak(v45);
  if (!v41) {
    goto LABEL_81;
  }
LABEL_78:
  unsigned int v47 = *v43;
  unsigned int v46 = v43[1];
  unsigned int v147 = *v43;
  unint64_t v148 = v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_82:
  uint64_t v48 = *v139;
  uint64_t v49 = v139[1];
  if (*v139 != v49)
  {
    while (*(unsigned char *)v48 != 21)
    {
      v48 += 16;
      if (v48 == v49) {
        goto LABEL_114;
      }
    }
  }
  if (v48 == v49)
  {
    int v51 = 0;
    if (!v46) {
      goto LABEL_90;
    }
LABEL_89:
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_90;
  }
  if (*(void *)(v48 + 8))
  {
    id v50 = +[VKDebugSettings sharedSettings];
    int v51 = [v50 enableDaVinciStyleRoute];

    if (!v46) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
LABEL_114:
  int v51 = 0;
  if (v46) {
    goto LABEL_89;
  }
LABEL_90:
  unsigned int v52 = *(std::__shared_weak_count **)(a1 + 360);
  *(void *)(a1 + 352) = v47;
  *(void *)(a1 + 360) = v46;
  if (v52)
  {
    if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
    unsigned int v47 = *(std::__shared_weak_count **)(a1 + 352);
  }
  if (!v47)
  {
    LODWORD(v65) = 0;
    goto LABEL_163;
  }
  md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(a2 + 8));
  float v54 = v53;
  unsigned int v55 = *(std::__shared_weak_count **)(a4 + 80);
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = 0;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  uint64_t v56 = *(unsigned int **)(a1 + 352);
  long double v57 = *(std::__shared_weak_count **)(a1 + 360);
  int8x8_t v153 = v56;
  unint64_t v154 = (unsigned int *)v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)buf, (uint64_t)v56, (uint64_t)v57);
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    if (!v169) {
      goto LABEL_159;
    }
  }
  else if (!v169)
  {
    goto LABEL_159;
  }
  uint64_t v58 = *(void *)buf;
  uint64_t v59 = *(void *)(*(void *)buf + 24);
  if ((int)v54 >= 0x17) {
    unsigned int v60 = 23;
  }
  else {
    unsigned int v60 = (int)v54;
  }
  unsigned int v61 = *(float **)v59;
  if (!*(void *)v59)
  {
    BOOL v63 = 0;
    goto LABEL_122;
  }
  float v62 = *v61;
  BOOL v63 = *v61 == 1.0;
  if (!*(unsigned char *)(v59 + 10) || (v62 != 0.0 ? (BOOL v64 = v62 == 1.0) : (BOOL v64 = 1), v64))
  {
LABEL_122:
    unsigned int v66 = *(unsigned __int8 *)(v59 + v63 + 11);
    if (v66 != 2) {
      goto LABEL_125;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)buf + 24), 0x190u, v60, 0)) {
    goto LABEL_126;
  }
  unsigned int v66 = 1;
LABEL_125:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x190u, v60, v66)) {
    goto LABEL_159;
  }
LABEL_126:
  if (v61)
  {
    float v67 = *v61;
    BOOL v68 = *v61 == 1.0;
    if (*(unsigned char *)(v59 + 10))
    {
      if (v67 != 0.0 && v67 != 1.0) {
        goto LABEL_136;
      }
    }
  }
  else
  {
    BOOL v68 = 0;
  }
  unsigned int v70 = *(unsigned __int8 *)(v59 + v68 + 11);
  if (v70 == 2)
  {
LABEL_136:
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x191u, v60, 0))
    {
LABEL_139:
      int v71 = (char *)operator new(0x28uLL);
      *((void *)v71 + 1) = 0;
      *((void *)v71 + 2) = 0;
      *((void *)v71 + 3) = 0;
      uint64_t v72 = (double *)(v71 + 24);
      *(void *)int v71 = &unk_1EF580528;
      *((void *)v71 + 4) = 0;
      int8x8_t v153 = (unsigned int *)(v71 + 24);
      unint64_t v154 = (unsigned int *)v71;
      uint64_t v73 = *(void *)(v58 + 24);
      BOOL v74 = *(float **)v73;
      if (*(void *)v73 && (float v75 = *v74, LODWORD(v74) = *v74 == 1.0, *(unsigned char *)(v73 + 10)) && v75 != 0.0 && v75 != 1.0
        || (v76 = *(unsigned __int8 *)(v73 + v74 + 11), float v75 = 0.0, v76 == 2))
      {
        LOBYTE(v145[0]) = 1;
        LOBYTE(v160) = 1;
        float v77 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v73, 0x190u, v60, 0, v145);
        float v78 = v77
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v73, 0x190u, v60, 1u, &v160)- v77)* v75);
      }
      else
      {
        float v78 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v73, 0x190u, v60, v76, 0);
      }
      double *v72 = v78;
      uint64_t v79 = *(void *)(*(void *)buf + 24);
      unsigned int v80 = *(float **)v79;
      if (*(void *)v79 && (float v81 = *v80, LODWORD(v80) = *v80 == 1.0, *(unsigned char *)(v79 + 10)) && v81 != 0.0 && v81 != 1.0
        || (v82 = *(unsigned __int8 *)(v79 + v80 + 11), float v81 = 0.0, v82 == 2))
      {
        LOBYTE(v145[0]) = 1;
        LOBYTE(v160) = 1;
        float v83 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x191u, v60, 0, v145);
        float v84 = v83
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x191u, v60, 1u, &v160)- v83)* v81);
      }
      else
      {
        float v84 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)buf + 24), 0x191u, v60, v82, 0);
      }
      *((double *)v71 + 4) = v84;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v71 + 1, 1uLL, memory_order_relaxed);
      uint64_t v85 = *(std::__shared_weak_count **)(a4 + 80);
      *(void *)(a4 + 72) = v72;
      *(void *)(a4 + 80) = v71;
      if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
      unsigned int v86 = (std::__shared_weak_count *)v154;
      uint64_t v25 = v140;
      if (v154 && !atomic_fetch_add((atomic_ullong *volatile)v154 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
      goto LABEL_159;
    }
    unsigned int v70 = 1;
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x191u, v60, v70)) {
    goto LABEL_139;
  }
LABEL_159:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);
  uint64_t v65 = *(void *)(a1 + 352);
  if (v65)
  {
    uint64_t v65 = *(void *)(a1 + 304);
    if (v65)
    {
      LODWORD(v65) = v51 & v138;
      if (!*(unsigned char *)(a1 + 369)) {
        LODWORD(v65) = 0;
      }
    }
  }
LABEL_163:
  if (*(unsigned __int8 *)(a4 + 64) != v65)
  {
    *(unsigned char *)(a4 + 64) = v65;
    if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_23989);
    }
    unint64_t v87 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(a4 + 64)) {
        unsigned int v88 = "YES";
      }
      else {
        unsigned int v88 = "NO";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v88;
      _os_log_impl(&dword_1A1780000, v87, OS_LOG_TYPE_INFO, "RouteLineMaskingEnabled:%s", buf, 0xCu);
    }
  }
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  if (a1 + 272 != a4)
  {
    unsigned int v89 = *(void **)(a1 + 272);
    unsigned int v90 = (void *)(a1 + 280);
    if (!*(void *)(a4 + 16)) {
      goto LABEL_215;
    }
    unsigned int v91 = *(uint64_t **)a4;
    unsigned int v93 = (uint64_t **)(a4 + 8);
    uint64_t v92 = *(void *)(a4 + 8);
    *(void *)a4 = a4 + 8;
    *(void *)(v92 + 16) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 8) = 0;
    unsigned int v94 = v91[1] ? (uint64_t *)v91[1] : v91;
    if (v94)
    {
      unsigned int v95 = (uint64_t *)v94[2];
      if (v95)
      {
        BOOL v96 = (uint64_t *)*v95;
        if ((uint64_t *)*v95 == v94)
        {
          *unsigned int v95 = 0;
          while (1)
          {
            unsigned int v137 = (uint64_t *)v95[1];
            if (!v137) {
              break;
            }
            do
            {
              unsigned int v95 = v137;
              unsigned int v137 = (uint64_t *)*v137;
            }
            while (v137);
          }
        }
        else
        {
          for (v95[1] = 0; v96; BOOL v96 = (uint64_t *)v95[1])
          {
            do
            {
              unsigned int v95 = v96;
              BOOL v96 = (uint64_t *)*v96;
            }
            while (v96);
          }
        }
      }
      if (v89 == v90)
      {
        BOOL v105 = v89;
        uint64_t v97 = v94;
      }
      else
      {
        do
        {
          uint64_t v97 = v95;
          char v98 = *((unsigned char *)v89 + 28);
          *((unsigned char *)v94 + 28) = v98;
          v94[4] = v89[4];
          uint64_t v99 = *v93;
          unsigned int v100 = (uint64_t **)(a4 + 8);
          unsigned int v101 = (uint64_t **)(a4 + 8);
          if (*v93)
          {
            unsigned __int8 v102 = v98 - 1;
            do
            {
              while (1)
              {
                unsigned int v100 = (uint64_t **)v99;
                if (v102 >= (*((unsigned char *)v99 + 28) - 1)) {
                  break;
                }
                uint64_t v99 = (uint64_t *)*v99;
                unsigned int v101 = v100;
                if (!*v100) {
                  goto LABEL_193;
                }
              }
              uint64_t v99 = (uint64_t *)v99[1];
            }
            while (v99);
            unsigned int v101 = v100 + 1;
          }
LABEL_193:
          *unsigned int v94 = 0;
          v94[1] = 0;
          v94[2] = (uint64_t)v100;
          *unsigned int v101 = v94;
          uint64_t v103 = **(void **)a4;
          if (v103)
          {
            *(void *)a4 = v103;
            unsigned int v94 = *v101;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 8), v94);
          ++*(void *)(a4 + 16);
          if (v95)
          {
            unsigned int v95 = (uint64_t *)v95[2];
            if (v95)
            {
              uint64_t v106 = (uint64_t *)*v95;
              if ((uint64_t *)*v95 == v97)
              {
                *unsigned int v95 = 0;
                while (1)
                {
                  BOOL v107 = (uint64_t *)v95[1];
                  if (!v107) {
                    break;
                  }
                  do
                  {
                    unsigned int v95 = v107;
                    BOOL v107 = (uint64_t *)*v107;
                  }
                  while (v107);
                }
              }
              else
              {
                for (v95[1] = 0; v106; uint64_t v106 = (uint64_t *)v95[1])
                {
                  do
                  {
                    unsigned int v95 = v106;
                    uint64_t v106 = (uint64_t *)*v106;
                  }
                  while (v106);
                }
              }
            }
          }
          else
          {
            unsigned int v95 = 0;
          }
          BOOL v104 = (void *)v89[1];
          if (v104)
          {
            do
            {
              BOOL v105 = v104;
              BOOL v104 = (void *)*v104;
            }
            while (v104);
          }
          else
          {
            do
            {
              BOOL v105 = (void *)v89[2];
              BOOL v27 = *v105 == (void)v89;
              unsigned int v89 = v105;
            }
            while (!v27);
          }
          if (!v97) {
            break;
          }
          unsigned int v94 = v97;
          unsigned int v89 = v105;
        }
        while (v105 != v90);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v97);
      if (v95)
      {
        for (uint64_t i = (uint64_t *)v95[2]; i; uint64_t i = (uint64_t *)i[2])
          unsigned int v95 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v95);
      }
    }
    else
    {
LABEL_215:
      BOOL v105 = v89;
    }
    if (v105 != v90)
    {
      uint64_t v109 = (uint64_t ***)(a4 + 8);
      do
      {
        uint64_t v110 = (uint64_t *)operator new(0x28uLL);
        unsigned int v111 = v110;
        int v112 = *((_DWORD *)v105 + 9);
        *(uint64_t *)((char *)v110 + 28) = *(void *)((char *)v105 + 28);
        *((_DWORD *)v110 + 9) = v112;
        double v113 = *v109;
        double v114 = (uint64_t **)(a4 + 8);
        int64_t v115 = (uint64_t **)(a4 + 8);
        if (*v109)
        {
          do
          {
            while (1)
            {
              double v114 = v113;
              if ((*((unsigned char *)v110 + 28) - 1) >= (*((unsigned char *)v113 + 28)
                                                                                                 - 1))
                break;
              double v113 = (uint64_t **)*v113;
              int64_t v115 = v114;
              if (!*v114) {
                goto LABEL_231;
              }
            }
            double v113 = (uint64_t **)v113[1];
          }
          while (v113);
          int64_t v115 = v114 + 1;
        }
LABEL_231:
        *uint64_t v110 = 0;
        v110[1] = 0;
        v110[2] = (uint64_t)v114;
        *int64_t v115 = v110;
        uint64_t v116 = **(void **)a4;
        if (v116)
        {
          *(void *)a4 = v116;
          unsigned int v111 = *v115;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 8), v111);
        ++*(void *)(a4 + 16);
        int64_t v117 = (void *)v105[1];
        if (v117)
        {
          do
          {
            uint64_t v118 = v117;
            int64_t v117 = (void *)*v117;
          }
          while (v117);
        }
        else
        {
          do
          {
            uint64_t v118 = (void *)v105[2];
            BOOL v27 = *v118 == (void)v105;
            BOOL v105 = v118;
          }
          while (!v27);
        }
        BOOL v105 = v118;
      }
      while (v118 != v90);
    }
  }
  uint64_t v119 = *(void *)(a4 + 24);
  *(void *)(a4 + 24) = 0;
  uint64_t v120 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  BOOL v121 = *(void **)(a4 + 24);
  *(void *)(a4 + 24) = v120;
  if (v121) {
    operator delete(v121);
  }
  unsigned int v122 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = v119;
  if (v122) {
    operator delete(v122);
  }
  uint64_t v123 = *(void *)(a4 + 40);
  uint64_t v124 = *(void *)(a4 + 32);
  uint64_t v125 = *(void *)(a1 + 224);
  *(void *)(a4 + 32) = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v124;
  *(void *)(a4 + 40) = v125;
  *(void *)(a1 + 224) = v123;
  uint64_t v126 = *(void *)(a4 + 48);
  *(void *)(a4 + 48) = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = v126;
  int v127 = *(_DWORD *)(a4 + 56);
  *(_DWORD *)(a4 + 56) = *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 240) = v127;
  if (*(void *)(a4 + 48))
  {
    unint64_t v128 = *(void *)(a4 + 32);
    unint64_t v129 = *(void *)(*(void *)(a4 + 40) + 8);
    if ((v128 & (v128 - 1)) != 0)
    {
      if (v129 >= v128) {
        v129 %= v128;
      }
    }
    else
    {
      v129 &= v128 - 1;
    }
    *(void *)(*(void *)(a4 + 24) + 8 * v129) = a4 + 40;
  }
  if (v126)
  {
    unint64_t v130 = *(void *)(a1 + 216);
    unint64_t v131 = *(void *)(*(void *)(a1 + 224) + 8);
    if ((v130 & (v130 - 1)) != 0)
    {
      if (v131 >= v130) {
        v131 %= v130;
      }
    }
    else
    {
      v131 &= v130 - 1;
    }
    *(void *)(*(void *)(a1 + 208) + 8 * v131) = a1 + 224;
    uint64_t v132 = *(void **)(a1 + 224);
    if (v132)
    {
      do
      {
        BOOL v133 = (void *)*v132;
        operator delete(v132);
        uint64_t v132 = v133;
      }
      while (v133);
    }
    *(void *)(a1 + 224) = 0;
    uint64_t v134 = *(void *)(a1 + 216);
    if (v134)
    {
      for (uint64_t j = 0; j != v134; ++j)
        *(void *)(*(void *)(a1 + 208) + 8 * j) = 0;
    }
    *(void *)(a1 + 232) = 0;
  }

  if (!v166)
  {
LABEL_270:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v166 + 48))(v166);
  uint64_t result = (uint64_t)v166;
  if (v166 == v165) {
    return (*(uint64_t (**)(void *))(v165[0] + 32))(v165);
  }
  if (v166) {
    return (*(uint64_t (**)(void))(*v166 + 40))();
  }
  return result;
}

void sub_1A1B2A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v14 - 160);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v14 - 192));
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__1NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SceneQueryLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__0NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SceneQueryLogic", "", v5, 2u);
  }
}

uint64_t geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3 = a1;
  os_signpost_id_t v4 = *a2;
  id v5 = v3;
  id v6 = v4;
  if (v6 == v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = [v5 isEqual:v6];
  }

  return v7;
}

void sub_1A1B2A8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::SceneQueryLogic::handleNavigationFlex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v9 = a1;
  uint64_t v661 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 336);
  if (v10 == a3)
  {
    BOOL v622 = 0;
    BOOL v12 = 0;
  }
  else
  {
    BOOL v11 = a3 != 0;
    if (v10) {
      BOOL v11 = 0;
    }
    BOOL v622 = v11;
    if (a3) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v10 != 0;
    }
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
    id v13 = *(std::__shared_weak_count **)(a1 + 344);
    *(void *)(a1 + 336) = a3;
    *(void *)(a1 + 344) = a4;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  int v14 = *(void *)(v9 + 336) != 0;
  if (*(unsigned __int8 *)(a6 + 65) != v14)
  {
    *(unsigned char *)(a6 + 65) = v14;
    if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_23989);
    }
    id v15 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(a6 + 65)) {
        uint64_t v16 = "YES";
      }
      else {
        uint64_t v16 = "NO";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_INFO, "SpatialFlexingEnabled:%s", buf, 0xCu);
    }
  }
  int v625 = a5;
  uint64_t v17 = *(void *)(v9 + 152);
  int v18 = *(unsigned __int16 **)(v17 + 456);
  uint64_t v19 = *(unsigned __int16 **)(v17 + 464);
  if (v18 != v19 && *(void *)(v9 + 496))
  {
    uint64_t v20 = (uint64_t **)(v9 + 488);
    do
    {
      unint64_t v21 = *v18;
      unsigned int v22 = *v20;
      if (*v20)
      {
        uint64_t v23 = v9 + 488;
        int v24 = *v20;
        do
        {
          unsigned int v25 = *((unsigned __int16 *)v24 + 16);
          BOOL v26 = v25 >= v21;
          if (v25 >= v21) {
            BOOL v27 = (uint64_t **)v24;
          }
          else {
            BOOL v27 = (uint64_t **)(v24 + 1);
          }
          if (v26) {
            uint64_t v23 = (uint64_t)v24;
          }
          int v24 = *v27;
        }
        while (*v27);
        if ((uint64_t **)v23 != v20 && v21 >= *(unsigned __int16 *)(v23 + 32))
        {
          char v28 = *(void **)(v23 + 8);
          uint64_t v29 = (void *)v23;
          if (v28)
          {
            do
            {
              uint64_t v30 = v28;
              char v28 = (void *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              uint64_t v30 = (void *)v29[2];
              BOOL v50 = *v30 == (void)v29;
              uint64_t v29 = v30;
            }
            while (!v50);
          }
          if (*(void *)(v9 + 480) == v23) {
            *(void *)(v9 + 480) = v30;
          }
          --*(void *)(v9 + 496);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v22, (uint64_t *)v23);
          operator delete((void *)v23);
        }
      }
      int8x8_t v31 = *(int8x8_t *)(v9 + 512);
      if (v31)
      {
        uint8x8_t v32 = (uint8x8_t)vcnt_s8(v31);
        v32.i16[0] = vaddlv_u8(v32);
        if (v32.u32[0] > 1uLL)
        {
          unint64_t v33 = v21;
          if (*(void *)&v31 <= v21) {
            unint64_t v33 = v21 % *(void *)&v31;
          }
        }
        else
        {
          unint64_t v33 = (v31.i32[0] - 1) & v21;
        }
        uint64_t v34 = *(void *)(v9 + 504);
        uint64_t v35 = *(unsigned __int16 ***)(v34 + 8 * v33);
        if (v35)
        {
          char v36 = *v35;
          if (*v35)
          {
            uint64_t v37 = *(void *)&v31 - 1;
            if (v32.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v38 = *((void *)v36 + 1);
                if (v38 == v21)
                {
                  if (v36[8] == v21) {
                    goto LABEL_66;
                  }
                }
                else if ((v38 & v37) != v33)
                {
                  goto LABEL_25;
                }
                char v36 = *(unsigned __int16 **)v36;
                if (!v36) {
                  goto LABEL_25;
                }
              }
            }
            do
            {
              unint64_t v39 = *((void *)v36 + 1);
              if (v39 == v21)
              {
                if (v36[8] == v21)
                {
LABEL_66:
                  if (v32.u32[0] > 1uLL)
                  {
                    if (*(void *)&v31 <= v21) {
                      v21 %= *(void *)&v31;
                    }
                  }
                  else
                  {
                    v21 &= v37;
                  }
                  int v40 = *(unsigned __int16 **)(v34 + 8 * v21);
                  do
                  {
                    int v41 = v40;
                    int v40 = *(unsigned __int16 **)v40;
                  }
                  while (v40 != v36);
                  if (v41 == (void *)(v9 + 520)) {
                    goto LABEL_83;
                  }
                  unint64_t v42 = v41[1];
                  if (v32.u32[0] > 1uLL)
                  {
                    if (v42 >= *(void *)&v31) {
                      v42 %= *(void *)&v31;
                    }
                  }
                  else
                  {
                    v42 &= v37;
                  }
                  if (v42 != v21)
                  {
LABEL_83:
                    if (!*(void *)v36) {
                      goto LABEL_84;
                    }
                    unint64_t v43 = *(void *)(*(void *)v36 + 8);
                    if (v32.u32[0] > 1uLL)
                    {
                      if (v43 >= *(void *)&v31) {
                        v43 %= *(void *)&v31;
                      }
                    }
                    else
                    {
                      v43 &= v37;
                    }
                    if (v43 != v21) {
LABEL_84:
                    }
                      *(void *)(v34 + 8 * v21) = 0;
                  }
                  uint64_t v44 = *(unsigned __int16 **)v36;
                  if (*(void *)v36)
                  {
                    unint64_t v45 = *((void *)v44 + 1);
                    if (v32.u32[0] > 1uLL)
                    {
                      if (v45 >= *(void *)&v31) {
                        v45 %= *(void *)&v31;
                      }
                    }
                    else
                    {
                      v45 &= v37;
                    }
                    if (v45 != v21)
                    {
                      *(void *)(*(void *)(v9 + 504) + 8 * v45) = v41;
                      uint64_t v44 = *(unsigned __int16 **)v36;
                    }
                  }
                  void *v41 = v44;
                  --*(void *)(v9 + 528);
                  operator delete(v36);
                  break;
                }
              }
              else
              {
                if (v39 >= *(void *)&v31) {
                  v39 %= *(void *)&v31;
                }
                if (v39 != v33) {
                  break;
                }
              }
              char v36 = *(unsigned __int16 **)v36;
            }
            while (v36);
          }
        }
      }
LABEL_25:
      ++v18;
    }
    while (v18 != v19);
  }
  unsigned int v46 = *(void **)(v9 + 336);
  if (!v46)
  {
    if (!v12) {
      return;
    }
    v644[0] = &unk_1EF5716A0;
    v644[1] = a2;
    v645 = v644;
    v642[0] = &unk_1EF5716E8;
    v642[1] = a2;
    unint64_t v643 = v642;
    *((void *)&v659 + 1) = buf;
    *(void *)buf = &unk_1EF5716E8;
    *(void *)&buf[8] = a2;
    std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_4>,void ()(void)>::operator()((uint64_t)v644);
    if (v643 == v642)
    {
      (*(void (**)(void *))(v642[0] + 32))(v642);
    }
    else if (v643)
    {
      (*(void (**)(void))(*v643 + 40))();
    }
    if (v645 == v644)
    {
      (*(void (**)(void *))(v644[0] + 32))(v644);
    }
    else if (v645)
    {
      (*(void (**)(void))(*v645 + 40))();
    }
    md::SceneQueryLogic::clearNavigationFlexState((md::SceneQueryLogic *)v9);
    md::SceneQueryLogic::prepareNavigationFlexSegmentsForRoute((md::SceneQueryLogic *)v9, 0);
    *(unsigned char *)(v9 + 368) = -1;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v9 + 464));
    *(void *)(v9 + 464) = 0;
    *(void *)(v9 + 472) = 0;
    *(void *)(v9 + 456) = v9 + 464;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v9 + 280));
    *(void *)(v9 + 280) = 0;
    *(void *)(v9 + 288) = 0;
    *(void *)(v9 + 272) = v9 + 280;
    *(void *)(v9 + 256) = *(void *)(v9 + 248);
    std::__hash_table<md::SceneQueryEvent,std::hash<md::SceneQueryEvent>,std::equal_to<md::SceneQueryEvent>,std::allocator<md::SceneQueryEvent>>::__emplace_unique_key_args<md::SceneQueryEvent,md::SceneQueryEvent&>((float *)(v9 + 208), 0, 0);
    *(void *)(v9 + 544) = 0;
    if (*((void *)&v659 + 1))
    {
      (*(void (**)(void))(**((void **)&v659 + 1) + 48))(*((void *)&v659 + 1));
      float v62 = (uint64_t **)*((void *)&v659 + 1);
      if (*((uint8_t **)&v659 + 1) == buf)
      {
        (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
        return;
      }
      goto LABEL_909;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_922:
    __break(1u);
    return;
  }
  unsigned int v47 = (uint64_t *)a2;
  md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(a2 + 8));
  unsigned int v49 = (int)v48;
  BOOL v50 = *(unsigned __int8 *)(v9 + 368) == (int)v48 && v10 == a3;
  if (v50) {
    goto LABEL_289;
  }
  *(unsigned char *)(v9 + 368) = v49;
  int v51 = *(std::__shared_weak_count **)(v9 + 344);
  uint64_t v651 = 0;
  uint64_t v652 = 0;
  v650 = (uint64_t *)&v651;
  uint64_t v639 = v46;
  unint64_t v640 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)buf, (uint64_t)v46, (uint64_t)v51);
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if ((_BYTE)v660)
    {
LABEL_102:
      uint64_t v52 = *(void *)(*(void *)buf + 24);
      if (v49 >= 0x17) {
        unsigned int v53 = 23;
      }
      else {
        unsigned int v53 = v49;
      }
      float v54 = *(float **)v52;
      if (*(void *)v52)
      {
        float v55 = *v54;
        BOOL v56 = *v54 == 1.0;
        if (*(unsigned char *)(v52 + 10))
        {
          if (v55 != 0.0 && v55 != 1.0)
          {
LABEL_121:
            if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)buf + 24), 0x18Au, v53, 0))goto LABEL_124; {
            unsigned int v58 = 1;
            }
LABEL_123:
            if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v52, 0x18Au, v53, v58))
            {
              LODWORD(v63) = 0;
              if (v54) {
                goto LABEL_155;
              }
              goto LABEL_141;
            }
LABEL_124:
            if (v54)
            {
              float v59 = *v54;
              BOOL v60 = *v54 == 1.0;
              if (*(unsigned char *)(v52 + 10))
              {
                if (v59 != 0.0 && v59 != 1.0) {
                  goto LABEL_144;
                }
              }
            }
            else
            {
              BOOL v60 = 0;
            }
            unsigned int v65 = *(unsigned __int8 *)(v52 + v60 + 11);
            float v59 = 0.0;
            if (v65 != 2)
            {
              int v66 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Au, v53, v65, 0);
              goto LABEL_147;
            }
LABEL_144:
            LOBYTE(v639) = 1;
            LOBYTE(v636) = 1;
            int v66 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Au, v53, 0, &v639);
            int v67 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Au, v53, 1u, &v636);
            if (v59 >= 1.0) {
              int v66 = v67;
            }
LABEL_147:
            BOOL v68 = v651;
            int v69 = &v651;
            if (v651)
            {
              while (1)
              {
                int v69 = (uint64_t **)v68;
                if (*((unsigned char *)v68 + 28) == 1) {
                  break;
                }
                BOOL v68 = (uint64_t *)*v68;
                if (!*v69) {
                  goto LABEL_150;
                }
              }
              unsigned int v70 = v68;
            }
            else
            {
LABEL_150:
              unsigned int v70 = operator new(0x28uLL);
              v70[28] = 1;
              *(void *)unsigned int v70 = 0;
              *((void *)v70 + 1) = 0;
              *((void *)v70 + 2) = v69;
              *int v69 = (uint64_t *)v70;
              int v71 = (uint64_t *)v70;
              if (*v650)
              {
                v650 = (uint64_t *)*v650;
                int v71 = *v69;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v651, v71);
              ++v652;
            }
            uint64_t v63 = (v66 * v66);
            *((void *)v70 + 4) = v63 << 32;
            uint64_t v52 = *(void *)(*(void *)buf + 24);
            float v54 = *(float **)v52;
            if (*(void *)v52)
            {
LABEL_155:
              float v72 = *v54;
              BOOL v64 = *v54 == 1.0;
              if (*(unsigned char *)(v52 + 10))
              {
                if (v72 != 0.0 && v72 != 1.0)
                {
LABEL_162:
                  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v52, 0x18Bu, v53, 0)) {
                    goto LABEL_165;
                  }
                  unsigned int v74 = 1;
LABEL_164:
                  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v52, 0x18Bu, v53, v74)) {
                    goto LABEL_194;
                  }
LABEL_165:
                  if (v54)
                  {
                    float v75 = *v54;
                    BOOL v76 = *v54 == 1.0;
                    if (*(unsigned char *)(v52 + 10))
                    {
                      if (v75 != 0.0 && v75 != 1.0) {
                        goto LABEL_175;
                      }
                    }
                  }
                  else
                  {
                    BOOL v76 = 0;
                  }
                  unsigned int v78 = *(unsigned __int8 *)(v52 + v76 + 11);
                  float v75 = 0.0;
                  if (v78 != 2)
                  {
                    int v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Bu, v53, v78, 0);
LABEL_179:
                    unsigned int v81 = v80 * v80;
                    if (v63 <= v81) {
                      uint64_t v82 = v81;
                    }
                    else {
                      uint64_t v82 = v63;
                    }
                    float v83 = v651;
                    float v84 = &v651;
                    uint64_t v85 = &v651;
                    if (v651)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          uint64_t v85 = (uint64_t **)v83;
                          unsigned __int8 v86 = *((unsigned char *)v83 + 28) - 1;
                          if (v86 < 2u) {
                            break;
                          }
                          float v83 = *v85;
                          float v84 = v85;
                          if (!*v85) {
                            goto LABEL_189;
                          }
                        }
                        if (v86) {
                          break;
                        }
                        float v83 = v85[1];
                        if (!v83)
                        {
                          float v84 = v85 + 1;
                          goto LABEL_189;
                        }
                      }
                      unint64_t v87 = v85;
                    }
                    else
                    {
LABEL_189:
                      unint64_t v87 = operator new(0x28uLL);
                      v87[28] = 2;
                      *(void *)unint64_t v87 = 0;
                      *((void *)v87 + 1) = 0;
                      *((void *)v87 + 2) = v85;
                      *float v84 = (uint64_t *)v87;
                      unsigned int v88 = (uint64_t *)v87;
                      if (*v650)
                      {
                        v650 = (uint64_t *)*v650;
                        unsigned int v88 = *v84;
                      }
                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v651, v88);
                      ++v652;
                    }
                    *((void *)v87 + 4) = v63 | (unint64_t)(v82 << 32);
                    uint64_t v52 = *(void *)(*(void *)buf + 24);
                    float v54 = *(float **)v52;
                    LODWORD(v63) = v82;
LABEL_194:
                    if (v54)
                    {
                      float v89 = *v54;
                      BOOL v90 = *v54 == 1.0;
                      if (*(unsigned char *)(v52 + 10))
                      {
                        if (v89 != 0.0 && v89 != 1.0)
                        {
LABEL_204:
                          if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v52, 0x18Cu, v53, 0)) {
                            goto LABEL_207;
                          }
                          unsigned int v92 = 1;
LABEL_206:
                          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v52, 0x18Cu, v53, v92))
                          {
LABEL_236:
                            BOOL v107 = v651;
                            id v108 = &v651;
                            uint64_t v109 = &v651;
                            if (v651)
                            {
                              while (1)
                              {
                                uint64_t v109 = (uint64_t **)v107;
                                if (!*((unsigned char *)v107 + 28)) {
                                  break;
                                }
                                BOOL v107 = (uint64_t *)v107[1];
                                if (!v107)
                                {
                                  id v108 = v109 + 1;
                                  goto LABEL_240;
                                }
                              }
                              uint64_t v110 = v107;
                            }
                            else
                            {
LABEL_240:
                              uint64_t v110 = operator new(0x28uLL);
                              v110[28] = 0;
                              *(void *)uint64_t v110 = 0;
                              *((void *)v110 + 1) = 0;
                              *((void *)v110 + 2) = v109;
                              *id v108 = (uint64_t *)v110;
                              if (*v650) {
                                v650 = (uint64_t *)*v650;
                              }
                              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v651, (uint64_t *)v110);
                              ++v652;
                            }
                            *((void *)v110 + 4) = v63 | 0xFFFFFFFF00000000;
                            goto LABEL_245;
                          }
LABEL_207:
                          if (v54)
                          {
                            float v93 = *v54;
                            BOOL v94 = *v54 == 1.0;
                            if (*(unsigned char *)(v52 + 10))
                            {
                              if (v93 != 0.0 && v93 != 1.0) {
                                goto LABEL_217;
                              }
                            }
                          }
                          else
                          {
                            BOOL v94 = 0;
                          }
                          unsigned int v96 = *(unsigned __int8 *)(v52 + v94 + 11);
                          float v93 = 0.0;
                          if (v96 != 2)
                          {
                            int v98 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Cu, v53, v96, 0);
LABEL_221:
                            unsigned int v99 = v98 * v98;
                            if (v63 <= v99) {
                              uint64_t v100 = v99;
                            }
                            else {
                              uint64_t v100 = v63;
                            }
                            unsigned int v101 = v651;
                            unsigned __int8 v102 = &v651;
                            uint64_t v103 = &v651;
                            if (v651)
                            {
                              while (1)
                              {
                                while (1)
                                {
                                  uint64_t v103 = (uint64_t **)v101;
                                  unsigned int v104 = *((unsigned __int8 *)v101 + 28) - 1;
                                  if (v104 < 3) {
                                    break;
                                  }
                                  unsigned int v101 = *v103;
                                  unsigned __int8 v102 = v103;
                                  if (!*v103) {
                                    goto LABEL_231;
                                  }
                                }
                                if (v104 == 2) {
                                  break;
                                }
                                unsigned int v101 = v103[1];
                                if (!v101)
                                {
                                  unsigned __int8 v102 = v103 + 1;
                                  goto LABEL_231;
                                }
                              }
                              BOOL v105 = v103;
                            }
                            else
                            {
LABEL_231:
                              BOOL v105 = operator new(0x28uLL);
                              v105[28] = 3;
                              *(void *)BOOL v105 = 0;
                              *((void *)v105 + 1) = 0;
                              *((void *)v105 + 2) = v103;
                              *unsigned __int8 v102 = (uint64_t *)v105;
                              uint64_t v106 = (uint64_t *)v105;
                              if (*v650)
                              {
                                v650 = (uint64_t *)*v650;
                                uint64_t v106 = *v102;
                              }
                              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v651, v106);
                              ++v652;
                            }
                            *((void *)v105 + 4) = v63 | (unint64_t)(v100 << 32);
                            LODWORD(v63) = v100;
                            goto LABEL_236;
                          }
LABEL_217:
                          LOBYTE(v639) = 1;
                          LOBYTE(v636) = 1;
                          int v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Cu, v53, 0, &v639);
                          int v98 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Cu, v53, 1u, &v636);
                          if (v93 < 1.0) {
                            int v98 = v97;
                          }
                          goto LABEL_221;
                        }
                      }
                    }
                    else
                    {
                      BOOL v90 = 0;
                    }
                    unsigned int v92 = *(unsigned __int8 *)(v52 + v90 + 11);
                    if (v92 != 2) {
                      goto LABEL_206;
                    }
                    goto LABEL_204;
                  }
LABEL_175:
                  LOBYTE(v639) = 1;
                  LOBYTE(v636) = 1;
                  int v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Bu, v53, 0, &v639);
                  int v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v52, 0x18Bu, v53, 1u, &v636);
                  if (v75 < 1.0) {
                    int v80 = v79;
                  }
                  goto LABEL_179;
                }
              }
LABEL_161:
              unsigned int v74 = *(unsigned __int8 *)(v52 + v64 + 11);
              if (v74 != 2) {
                goto LABEL_164;
              }
              goto LABEL_162;
            }
LABEL_141:
            BOOL v64 = 0;
            goto LABEL_161;
          }
        }
      }
      else
      {
        BOOL v56 = 0;
      }
      unsigned int v58 = *(unsigned __int8 *)(v52 + v56 + 11);
      if (v58 != 2) {
        goto LABEL_123;
      }
      goto LABEL_121;
    }
  }
  else if ((_BYTE)v660)
  {
    goto LABEL_102;
  }
LABEL_245:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);
  if (v652 != *(void *)(v9 + 288)) {
    goto LABEL_263;
  }
  unsigned int v111 = v650;
  if (v650 != (uint64_t *)&v651)
  {
    int v112 = *(void **)(v9 + 272);
    while (*((unsigned __int8 *)v111 + 28) == *((unsigned __int8 *)v112 + 28)
         && *((_DWORD *)v111 + 8) == *((_DWORD *)v112 + 8)
         && *((_DWORD *)v111 + 9) == *((_DWORD *)v112 + 9))
    {
      double v113 = (uint64_t *)v111[1];
      double v114 = v111;
      if (v113)
      {
        do
        {
          unsigned int v111 = v113;
          double v113 = (uint64_t *)*v113;
        }
        while (v113);
      }
      else
      {
        do
        {
          unsigned int v111 = (uint64_t *)v114[2];
          BOOL v50 = *v111 == (void)v114;
          double v114 = v111;
        }
        while (!v50);
      }
      int64_t v115 = (void *)v112[1];
      if (v115)
      {
        do
        {
          uint64_t v116 = v115;
          int64_t v115 = (void *)*v115;
        }
        while (v115);
      }
      else
      {
        do
        {
          uint64_t v116 = (void *)v112[2];
          BOOL v50 = *v116 == (void)v112;
          int v112 = v116;
        }
        while (!v50);
      }
      int v112 = v116;
      if (v111 == (uint64_t *)&v651) {
        goto LABEL_288;
      }
    }
LABEL_263:
    int64_t v117 = (void *)(v9 + 280);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v9 + 280));
    uint64_t v118 = v651;
    *(void *)(v9 + 272) = v650;
    *(void *)(v9 + 280) = v118;
    uint64_t v119 = v652;
    *(void *)(v9 + 288) = v652;
    if (v119)
    {
      v118[2] = (uint64_t)v117;
      v650 = (uint64_t *)&v651;
      uint64_t v651 = 0;
      uint64_t v652 = 0;
      uint64_t v120 = *(void **)(v9 + 272);
      BOOL v121 = *(unsigned char **)(v9 + 248);
      *(void *)(v9 + 256) = v121;
      if (v120 == v117)
      {
        uint64_t v118 = 0;
      }
      else
      {
        do
        {
          unint64_t v122 = *(void *)(v9 + 264);
          if ((unint64_t)v121 >= v122)
          {
            uint64_t v123 = *(unsigned char **)(v9 + 248);
            unint64_t v124 = 0xAAAAAAAAAAAAAAABLL * ((v121 - v123) >> 2) + 1;
            if (v124 > 0x1555555555555555) {
              abort();
            }
            unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - (void)v123) >> 2);
            if (2 * v125 > v124) {
              unint64_t v124 = 2 * v125;
            }
            if (v125 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v126 = 0x1555555555555555;
            }
            else {
              unint64_t v126 = v124;
            }
            if (v126 > 0x1555555555555555) {
LABEL_913:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            int v127 = (char *)operator new(12 * v126);
            unint64_t v128 = &v127[4 * ((v121 - v123) >> 2)];
            *unint64_t v128 = *((unsigned char *)v120 + 28);
            *(void *)(v128 + 4) = v120[4];
            for (uint64_t i = v128; v121 != v123; *((_DWORD *)i + 2) = v131)
            {
              uint64_t v130 = *(void *)(v121 - 12);
              v121 -= 12;
              int v131 = *((_DWORD *)v121 + 2);
              *(void *)(i - 12) = v130;
              i -= 12;
            }
            BOOL v121 = v128 + 12;
            *(void *)(v9 + 248) = i;
            *(void *)(v9 + 256) = v128 + 12;
            *(void *)(v9 + 264) = &v127[12 * v126];
            if (v123) {
              operator delete(v123);
            }
          }
          else
          {
            unsigned char *v121 = *((unsigned char *)v120 + 28);
            *(void *)(v121 + 4) = v120[4];
            v121 += 12;
          }
          *(void *)(v9 + 256) = v121;
          uint64_t v132 = (void *)v120[1];
          if (v132)
          {
            do
            {
              BOOL v133 = v132;
              uint64_t v132 = (void *)*v132;
            }
            while (v132);
          }
          else
          {
            do
            {
              BOOL v133 = (void *)v120[2];
              BOOL v50 = *v133 == (void)v120;
              uint64_t v120 = v133;
            }
            while (!v50);
          }
          uint64_t v120 = v133;
        }
        while (v133 != v117);
        uint64_t v118 = v651;
      }
      unsigned int v47 = (uint64_t *)a2;
    }
    else
    {
      *(void *)(v9 + 272) = v117;
      *(void *)(v9 + 256) = *(void *)(v9 + 248);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v118);
    std::__hash_table<md::SceneQueryEvent,std::hash<md::SceneQueryEvent>,std::equal_to<md::SceneQueryEvent>,std::allocator<md::SceneQueryEvent>>::__emplace_unique_key_args<md::SceneQueryEvent,md::SceneQueryEvent&>((float *)(v9 + 208), 0, 0);
    int v134 = v625;
    md::SceneQueryLogic::updatePendingRegistries(v9, (int8x8_t ***)(*(void *)(v9 + 152) + 384));
    if (!(v622 | v625)) {
      goto LABEL_314;
    }
    goto LABEL_295;
  }
LABEL_288:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v651);
LABEL_289:
  int v134 = v625;
  uint64_t v135 = *(void *)(v9 + 152);
  if ((v622 | v625) != 1)
  {
    md::SceneQueryLogic::updatePendingRegistries(v9, (int8x8_t ***)(v135 + 432));
    goto LABEL_314;
  }
  md::SceneQueryLogic::updatePendingRegistries(v9, (int8x8_t ***)(v135 + 384));
LABEL_295:
  if (v134)
  {
    if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_23989);
    }
    uint64_t v136 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A1780000, v136, OS_LOG_TYPE_DEBUG, "Route didChange", buf, 2u);
    }
    v656[0] = &unk_1EF571580;
    v656[1] = v47;
    v654[0] = &unk_1EF5715C8;
    v654[1] = v47;
    v655 = v654;
    *((void *)&v659 + 1) = buf;
    v657 = v656;
    *(void *)buf = &unk_1EF5715C8;
    *(void *)&buf[8] = v47;
    std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_0>,void ()(void)>::operator()((uint64_t)v656);
    if (v655 == v654)
    {
      (*(void (**)(void *))(v654[0] + 32))(v654);
    }
    else if (v655)
    {
      (*(void (**)(void))(*v655 + 40))();
    }
    if (v657 == v656)
    {
      (*(void (**)(void *))(v656[0] + 32))(v656);
    }
    else if (v657)
    {
      (*(void (**)(void))(*v657 + 40))();
    }
    md::SceneQueryLogic::clearNavigationFlexState((md::SceneQueryLogic *)v9);
    if (!*((void *)&v659 + 1))
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_922;
    }
    (*(void (**)(void))(**((void **)&v659 + 1) + 48))(*((void *)&v659 + 1));
    if (*((uint8_t **)&v659 + 1) == buf)
    {
      (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    }
    else if (*((void *)&v659 + 1))
    {
      (*(void (**)(void))(**((void **)&v659 + 1) + 40))();
    }
  }
  md::SceneQueryLogic::prepareNavigationFlexSegmentsForRoute((md::SceneQueryLogic *)v9, *(GEOComposedRoute **)(v9 + 304));
LABEL_314:
  v648[0] = &unk_1EF571610;
  v648[1] = v47;
  v646[0] = &unk_1EF571658;
  v646[1] = v47;
  uint64_t v647 = v646;
  int v653 = &v650;
  unint64_t v649 = v648;
  v650 = (uint64_t *)&unk_1EF571658;
  uint64_t v651 = v47;
  std::__function::__func<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2,std::allocator<md::SceneQueryLogic::handleNavigationFlex(md::LayoutContext const&,md::CameraContext const&,md::NavigationContext const&,md::StyleLogicContext const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,BOOL,md::SceneQueryContext &)::$_2>,void ()(void)>::operator()((uint64_t)v648);
  if (v647 == v646)
  {
    (*(void (**)(void *))(v646[0] + 32))(v646);
  }
  else if (v647)
  {
    (*(void (**)(void))(*v647 + 40))();
  }
  if (v649 == v648)
  {
    (*(void (**)(void *))(v648[0] + 32))(v648);
    if (!*(void *)(v9 + 304)) {
      goto LABEL_907;
    }
LABEL_324:
    uint64_t v137 = *(void *)(v9 + 152);
    BOOL v138 = *(int8x8_t ***)(v137 + 384);
    unint64_t v139 = *(int8x8_t ***)(v137 + 392);
    if (v138 != v139)
    {
      id v140 = 0;
      uint64_t v141 = 0;
      unint64_t v142 = 0;
      while (1)
      {
        long long v144 = *v138;
        uint64_t v145 = gdc::Registry::storage<md::components::DidResolvePendingMaterial>(*v138);
        if (*(void *)(v145 + 88) != *(void *)(v145 + 80))
        {
          if ((unint64_t)v141 >= v142)
          {
            uint64_t v146 = v141 - v140;
            unint64_t v147 = v146 + 1;
            if ((unint64_t)(v146 + 1) >> 61) {
              abort();
            }
            if ((uint64_t)(v142 - (void)v140) >> 2 > v147) {
              unint64_t v147 = (uint64_t)(v142 - (void)v140) >> 2;
            }
            if (v142 - (unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v148 = v147;
            }
            if (v148)
            {
              if (v148 >> 61) {
                goto LABEL_913;
              }
              uint64_t v149 = operator new(8 * v148);
            }
            else
            {
              uint64_t v149 = 0;
            }
            uint64_t v150 = (int8x8_t **)&v149[8 * v146];
            unsigned __int8 *v150 = v144;
            if (v141 == v140)
            {
              uint64_t v143 = v150 + 1;
              unint64_t v154 = &v149[8 * v148];
              if (v140) {
                goto LABEL_347;
              }
            }
            else
            {
              unint64_t v151 = (char *)(v141 - 1) - (char *)v140;
              if (v151 < 0x58 || (unint64_t)((char *)v140 - v149) < 0x20)
              {
                char v152 = v141;
                uint64_t v143 = v150 + 1;
                goto LABEL_345;
              }
              uint64_t v155 = (v151 >> 3) + 1;
              char v152 = &v141[-(v155 & 0x3FFFFFFFFFFFFFFCLL)];
              uint64_t v156 = &v149[8 * v146 - 16];
              uint64_t v157 = v141 - 2;
              uint64_t v158 = v155 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v143 = v150 + 1;
              do
              {
                long long v159 = *(_OWORD *)v157;
                *(v156 - 1) = *((_OWORD *)v157 - 1);
                _OWORD *v156 = v159;
                v156 -= 2;
                v157 -= 4;
                v158 -= 4;
              }
              while (v158);
              v150 -= v155 & 0x3FFFFFFFFFFFFFFCLL;
              if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_345:
                  int8x8_t v153 = *--v152;
                  *--uint64_t v150 = v153;
                }
                while (v152 != v140);
              }
              unint64_t v154 = &v149[8 * v148];
              if (v140) {
LABEL_347:
              }
                operator delete(v140);
            }
            id v140 = v150;
            unint64_t v142 = (unint64_t)v154;
            goto LABEL_328;
          }
          *v141++ = v144;
        }
        uint64_t v143 = v141;
LABEL_328:
        ++v138;
        uint64_t v141 = v143;
        if (v138 == v139) {
          goto LABEL_356;
        }
      }
    }
    id v140 = 0;
    uint64_t v143 = 0;
    unint64_t v142 = 0;
LABEL_356:
    v630 = (int8x8_t **)v142;
    if (*(void *)(v9 + 248) != *(void *)(v9 + 256))
    {
      uint64_t v160 = *(void *)(v9 + 280);
      if (v160)
      {
        while (1)
        {
          uint64_t v161 = v160;
          if (!*(unsigned char *)(v160 + 28)) {
            break;
          }
          uint64_t v160 = *(void *)(v160 + 8);
          if (!v160)
          {
            uint64_t v162 = (uint64_t **)(v161 + 8);
            goto LABEL_362;
          }
        }
        unint64_t v163 = (unsigned char *)v160;
      }
      else
      {
        uint64_t v162 = (uint64_t **)(v9 + 280);
        uint64_t v161 = v9 + 280;
LABEL_362:
        unint64_t v163 = operator new(0x28uLL);
        v163[28] = 0;
        *(void *)unint64_t v163 = 0;
        *((void *)v163 + 1) = 0;
        *((void *)v163 + 2) = v161;
        *uint64_t v162 = (uint64_t *)v163;
        uint64_t v164 = **(void **)(v9 + 272);
        double v165 = (uint64_t *)v163;
        if (v164)
        {
          *(void *)(v9 + 272) = v164;
          double v165 = *v162;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 280), v165);
        ++*(void *)(v9 + 288);
      }
      uint64_t v639 = 0;
      unint64_t v640 = 0;
      unint64_t v641 = 0;
      v636 = 0;
      uint64_t v637 = 0;
      uint64_t v638 = 0;
      std::string __p = 0;
      v634 = 0;
      uint64_t v635 = 0;
      if (v140 != v143)
      {
        uint64_t v166 = 0;
        uint64_t v167 = v140;
        v614 = v143;
        uint64_t v626 = v9;
        do
        {
          long double v168 = *v167;
          ++*(_DWORD *)(v9 + 544);
          char v169 = (std::__shared_weak_count *)v639;
          uint64_t v170 = v640;
          if (v640 != v639)
          {
            unint64_t v171 = v168;
            do
            {
              unint64_t shared_weak_owners = (void *)v170[-1].__shared_weak_owners_;
              uint64_t v170 = (std::__shared_weak_count *)((char *)v170 - 8);
            }
            while (v170 != v169);
            uint64_t v166 = v636;
            long double v168 = v171;
          }
          unint64_t v640 = v169;
          v634 = __p;
          uint64_t v637 = v166;
          unint64_t v632 = 0;
          int8x8_t v173 = v168[1];
          if (v173)
          {
            uint8x8_t v174 = (uint8x8_t)vcnt_s8(v173);
            v174.i16[0] = vaddlv_u8(v174);
            if (v174.u32[0] > 1uLL)
            {
              uint64_t v175 = 0x64A448A5CD5D38DBLL;
              if (*(void *)&v173 <= 0x64A448A5CD5D38DBuLL) {
                uint64_t v175 = 0x64A448A5CD5D38DBuLL % *(void *)&v173;
              }
            }
            else
            {
              uint64_t v175 = (*(void *)&v173 - 1) & 0x64A448A5CD5D38DBLL;
            }
            long long v176 = *(void **)(*(void *)v168 + 8 * v175);
            if (v176)
            {
              long double v177 = (void *)*v176;
              if (v177)
              {
                if (v174.u32[0] < 2uLL)
                {
                  uint64_t v178 = *(void *)&v173 - 1;
                  while (1)
                  {
                    uint64_t v180 = v177[1];
                    if (v180 == 0x64A448A5CD5D38DBLL)
                    {
                      if (v177[2] == 0x64A448A5CD5D38DBLL) {
                        goto LABEL_395;
                      }
                    }
                    else if ((v180 & v178) != v175)
                    {
                      goto LABEL_369;
                    }
                    long double v177 = (void *)*v177;
                    if (!v177) {
                      goto LABEL_369;
                    }
                  }
                }
                do
                {
                  unint64_t v179 = v177[1];
                  if (v179 == 0x64A448A5CD5D38DBLL)
                  {
                    if (v177[2] == 0x64A448A5CD5D38DBLL)
                    {
LABEL_395:
                      uint64_t v181 = v177[5];
                      if (*(void *)(v181 + 8) != 0x64A448A5CD5D38DBLL) {
                        break;
                      }
                      unint64_t v632 = *(double **)(v181 + 32);
                      if (!v632) {
                        break;
                      }
                      uint64_t v617 = v168;
                      uint64_t v182 = *(uint64_t ***)(v9 + 184);
                      uint64_t v183 = MEMORY[0x1E4F63F08];
                      unint64_t v623 = v163;
                      if (!v182)
                      {
LABEL_398:
                        double v184 = v617;
                        __int16 v185 = (void *)gdc::Registry::storage<md::components::MeshInstance>(v617);
                        unint64_t v186 = (void *)gdc::Registry::storage<md::components::ClientState>(v617);
                        uint64_t v620 = (void *)gdc::Registry::storage<md::components::SupportsFlexing>(v617);
                        uint64_t v187 = gdc::Registry::storage<md::components::DidResolvePendingMaterial>(v617);
                        uint64_t v188 = v186 + 4;
                        uint64_t v189 = v620 + 4;
                        uint64_t v191 = v185[7];
                        uint64_t v190 = v185[8];
                        if (v186[8] - v186[7] >= (unint64_t)(v190 - v191)) {
                          int8x8_t v192 = v185 + 4;
                        }
                        else {
                          int8x8_t v192 = v186 + 4;
                        }
                        if (v620[8] - v620[7] < v192[4] - v192[3]) {
                          int8x8_t v192 = v620 + 4;
                        }
                        if (*(void *)(v187 + 64) - *(void *)(v187 + 56) < v192[4] - v192[3]) {
                          int8x8_t v192 = (void *)(v187 + 32);
                        }
                        uint64_t v613 = (void *)v187;
                        uint64_t v611 = v187 + 32;
                        v612 = v192;
                        if (v185 + 4 == v192)
                        {
                          *(void *)buf = v9;
                          *(void *)&buf[8] = &v632;
                          *(void *)&long long v659 = &v639;
                          *((void *)&v659 + 1) = &v636;
                          *(void *)&long long v660 = &__p;
                          if (v191 != v190)
                          {
                            uint64_t v193 = v185[10];
                            do
                            {
                              unint64_t v235 = *(unsigned int *)(v191 + 4);
                              unint64_t v236 = v235 >> 7;
                              uint64_t v237 = v186[4];
                              unint64_t v238 = (v186[5] - v237) >> 3;
                              if (v235 >> 7 < v238)
                              {
                                uint64_t v239 = *(void *)(v237 + 8 * v236);
                                if (v239)
                                {
                                  uint64_t v240 = v235 & 0x7F;
                                  unint64_t v241 = *(unsigned __int16 *)(v239 + 2 * v240);
                                  uint64_t v243 = v186[7];
                                  uint64_t v242 = v186[8];
                                  unint64_t v244 = (v242 - v243) >> 3;
                                  if (v244 > v241)
                                  {
                                    uint64_t v245 = v243 + 8 * v241;
                                    if (v245 != v242 && *(_DWORD *)(v245 + 4) == v235)
                                    {
                                      uint64_t v247 = v620[4];
                                      if (v236 < (v620[5] - v247) >> 3)
                                      {
                                        uint64_t v248 = *(void *)(v247 + 8 * v236);
                                        if (v248)
                                        {
                                          unint64_t v249 = *(unsigned __int16 *)(v248 + 2 * v240);
                                          uint64_t v250 = v620[7];
                                          uint64_t v251 = v620[8];
                                          if (v249 < (v251 - v250) >> 3)
                                          {
                                            uint64_t v252 = v250 + 8 * v249;
                                            if (v252 != v251 && *(_DWORD *)(v252 + 4) == v235)
                                            {
                                              uint64_t v254 = v613[4];
                                              if (v236 < (v613[5] - v254) >> 3)
                                              {
                                                uint64_t v255 = *(void *)(v254 + 8 * v236);
                                                if (v255)
                                                {
                                                  unint64_t v256 = *(unsigned __int16 *)(v255 + 2 * v240);
                                                  uint64_t v258 = v613[7];
                                                  uint64_t v257 = v613[8];
                                                  if (v256 < (v257 - v258) >> 3)
                                                  {
                                                    uint64_t v259 = v258 + 8 * v256;
                                                    if (v259 != v257 && *(_DWORD *)(v259 + 4) == v235)
                                                    {
                                                      unint64_t v261 = *(void *)v191;
                                                      unint64_t v262 = *(void *)v191 >> 39;
                                                      if (v262 < v238
                                                        && (uint64_t v263 = *(void *)(v237 + 8 * v262)) != 0
                                                        && (unint64_t v264 = *(unsigned __int16 *)(v263
                                                                                       + 2 * (HIDWORD(v261) & 0x7F)),
                                                            v244 > v264)
                                                        && (uint64_t v265 = v243 + 8 * v264, v265 != v242)
                                                        && *(_DWORD *)(v265 + 4) == HIDWORD(v261))
                                                      {
                                                        int v234 = (uint64_t *)(v186[10] + 16 * v264);
                                                      }
                                                      else
                                                      {
                                                        int v234 = (uint64_t *)v186[11];
                                                      }
                                                      md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)buf, v261, v193, v234);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              v193 += 112;
                              v191 += 8;
                            }
                            while (v191 != v190);
                          }
                          double v184 = v617;
                          int8x8_t v192 = v612;
                          uint64_t v187 = (uint64_t)v613;
                          uint64_t v188 = v186 + 4;
                          uint64_t v189 = v620 + 4;
                        }
                        if (v188 == v192)
                        {
                          unsigned int v610 = v189;
                          *(void *)buf = v9;
                          *(void *)&buf[8] = &v632;
                          *(void *)&long long v659 = &v639;
                          *((void *)&v659 + 1) = &v636;
                          *(void *)&long long v660 = &__p;
                          uint64_t v266 = v186[7];
                          uint64_t v267 = v186[8];
                          if (v266 != v267)
                          {
                            int v268 = (uint64_t *)v186[10];
                            do
                            {
                              unint64_t v270 = *(unsigned int *)(v266 + 4);
                              unint64_t v271 = v270 >> 7;
                              uint64_t v272 = v185[4];
                              unint64_t v273 = (v185[5] - v272) >> 3;
                              if (v270 >> 7 < v273)
                              {
                                uint64_t v274 = *(void *)(v272 + 8 * v271);
                                if (v274)
                                {
                                  uint64_t v275 = v270 & 0x7F;
                                  unint64_t v276 = *(unsigned __int16 *)(v274 + 2 * v275);
                                  uint64_t v278 = v185[7];
                                  uint64_t v277 = v185[8];
                                  unint64_t v279 = (v277 - v278) >> 3;
                                  if (v279 > v276)
                                  {
                                    uint64_t v280 = v278 + 8 * v276;
                                    if (v280 != v277 && *(_DWORD *)(v280 + 4) == v270)
                                    {
                                      uint64_t v282 = v620[4];
                                      if (v271 < (v620[5] - v282) >> 3)
                                      {
                                        uint64_t v283 = *(void *)(v282 + 8 * v271);
                                        if (v283)
                                        {
                                          unint64_t v284 = *(unsigned __int16 *)(v283 + 2 * v275);
                                          uint64_t v285 = v620[7];
                                          uint64_t v286 = v620[8];
                                          if (v284 < (v286 - v285) >> 3)
                                          {
                                            uint64_t v287 = v285 + 8 * v284;
                                            if (v287 != v286 && *(_DWORD *)(v287 + 4) == v270)
                                            {
                                              uint64_t v289 = v613[4];
                                              if (v271 < (v613[5] - v289) >> 3)
                                              {
                                                uint64_t v290 = *(void *)(v289 + 8 * v271);
                                                if (v290)
                                                {
                                                  unint64_t v291 = *(unsigned __int16 *)(v290 + 2 * v275);
                                                  uint64_t v293 = v613[7];
                                                  uint64_t v292 = v613[8];
                                                  if (v291 < (v292 - v293) >> 3)
                                                  {
                                                    uint64_t v294 = v293 + 8 * v291;
                                                    if (v294 != v292 && *(_DWORD *)(v294 + 4) == v270)
                                                    {
                                                      unint64_t v296 = *(void *)v266;
                                                      unint64_t v297 = *(void *)v266 >> 39;
                                                      if (v297 < v273
                                                        && (uint64_t v298 = *(void *)(v272 + 8 * v297)) != 0
                                                        && (unint64_t v299 = *(unsigned __int16 *)(v298
                                                                                       + 2 * (HIDWORD(v296) & 0x7F)),
                                                            v279 > v299)
                                                        && (uint64_t v300 = v278 + 8 * v299, v300 != v277)
                                                        && *(_DWORD *)(v300 + 4) == HIDWORD(v296))
                                                      {
                                                        uint64_t v269 = v185[10] + 112 * v299;
                                                      }
                                                      else
                                                      {
                                                        uint64_t v269 = v185[11];
                                                      }
                                                      md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)buf, v296, v269, v268);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              v268 += 2;
                              v266 += 8;
                            }
                            while (v266 != v267);
                          }
                          double v184 = v617;
                          int8x8_t v192 = v612;
                          uint64_t v187 = (uint64_t)v613;
                          uint64_t v189 = v610;
                        }
                        uint64_t v143 = v614;
                        if (v189 == v192)
                        {
                          *(void *)buf = v9;
                          *(void *)&buf[8] = &v632;
                          *(void *)&long long v659 = &v639;
                          *((void *)&v659 + 1) = &v636;
                          *(void *)&long long v660 = &__p;
                          uint64_t v302 = v620[7];
                          uint64_t v301 = v620[8];
                          while (v302 != v301)
                          {
                            unint64_t v304 = *(unsigned int *)(v302 + 4);
                            unint64_t v305 = v304 >> 7;
                            uint64_t v306 = v185[4];
                            unint64_t v307 = (v185[5] - v306) >> 3;
                            if (v304 >> 7 < v307)
                            {
                              uint64_t v308 = *(void *)(v306 + 8 * v305);
                              if (v308)
                              {
                                uint64_t v309 = v304 & 0x7F;
                                unint64_t v310 = *(unsigned __int16 *)(v308 + 2 * v309);
                                uint64_t v312 = v185[7];
                                uint64_t v311 = v185[8];
                                unint64_t v313 = (v311 - v312) >> 3;
                                if (v313 > v310)
                                {
                                  uint64_t v314 = v312 + 8 * v310;
                                  if (v314 != v311 && *(_DWORD *)(v314 + 4) == v304)
                                  {
                                    uint64_t v316 = v186[4];
                                    unint64_t v317 = (v186[5] - v316) >> 3;
                                    if (v305 < v317)
                                    {
                                      uint64_t v318 = *(void *)(v316 + 8 * v305);
                                      if (v318)
                                      {
                                        unint64_t v319 = *(unsigned __int16 *)(v318 + 2 * v309);
                                        uint64_t v321 = v186[7];
                                        uint64_t v320 = v186[8];
                                        unint64_t v322 = (v320 - v321) >> 3;
                                        if (v322 > v319)
                                        {
                                          uint64_t v323 = v321 + 8 * v319;
                                          if (v323 != v320 && *(_DWORD *)(v323 + 4) == v304)
                                          {
                                            uint64_t v325 = v613[4];
                                            if (v305 < (v613[5] - v325) >> 3)
                                            {
                                              uint64_t v326 = *(void *)(v325 + 8 * v305);
                                              if (v326)
                                              {
                                                unint64_t v327 = *(unsigned __int16 *)(v326 + 2 * v309);
                                                uint64_t v329 = v613[7];
                                                uint64_t v328 = v613[8];
                                                if (v327 < (v328 - v329) >> 3)
                                                {
                                                  uint64_t v330 = v329 + 8 * v327;
                                                  if (v330 != v328 && *(_DWORD *)(v330 + 4) == v304)
                                                  {
                                                    unint64_t v332 = *(void *)v302;
                                                    uint64_t v333 = HIDWORD(*(void *)v302);
                                                    unint64_t v334 = *(void *)v302 >> 39;
                                                    if (v334 < v307
                                                      && (uint64_t v335 = *(void *)(v306 + 8 * v334)) != 0
                                                      && (unint64_t v336 = *(unsigned __int16 *)(v335 + 2 * (HIDWORD(v332) & 0x7F)),
                                                          v313 > v336)
                                                      && (uint64_t v337 = v312 + 8 * v336, v337 != v311)
                                                      && *(_DWORD *)(v337 + 4) == v333)
                                                    {
                                                      uint64_t v338 = v185[10] + 112 * v336;
                                                    }
                                                    else
                                                    {
                                                      uint64_t v338 = v185[11];
                                                    }
                                                    if (v334 < v317
                                                      && (uint64_t v339 = *(void *)(v316 + 8 * v334)) != 0
                                                      && (unint64_t v340 = *(unsigned __int16 *)(v339 + 2 * (HIDWORD(v332) & 0x7F)),
                                                          v322 > v340)
                                                      && (uint64_t v341 = v321 + 8 * v340, v341 != v320)
                                                      && *(_DWORD *)(v341 + 4) == v333)
                                                    {
                                                      uint64_t v303 = (uint64_t *)(v186[10] + 16 * v340);
                                                    }
                                                    else
                                                    {
                                                      uint64_t v303 = (uint64_t *)v186[11];
                                                    }
                                                    md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)buf, v332, v338, v303);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            v302 += 8;
                          }
                          double v184 = v617;
                          int8x8_t v192 = v612;
                          uint64_t v187 = (uint64_t)v613;
                        }
                        if ((void *)v611 == v192)
                        {
                          *(void *)buf = v9;
                          *(void *)&buf[8] = &v632;
                          *(void *)&long long v659 = &v639;
                          *((void *)&v659 + 1) = &v636;
                          *(void *)&long long v660 = &__p;
                          uint64_t v343 = *(void *)(v187 + 56);
                          uint64_t v342 = *(void *)(v187 + 64);
                          while (v343 != v342)
                          {
                            unint64_t v345 = *(unsigned int *)(v343 + 4);
                            unint64_t v346 = v345 >> 7;
                            uint64_t v347 = v185[4];
                            unint64_t v348 = (v185[5] - v347) >> 3;
                            if (v345 >> 7 < v348)
                            {
                              uint64_t v349 = *(void *)(v347 + 8 * v346);
                              if (v349)
                              {
                                uint64_t v350 = v345 & 0x7F;
                                unint64_t v351 = *(unsigned __int16 *)(v349 + 2 * v350);
                                uint64_t v353 = v185[7];
                                uint64_t v352 = v185[8];
                                unint64_t v354 = (v352 - v353) >> 3;
                                if (v354 > v351)
                                {
                                  uint64_t v355 = v353 + 8 * v351;
                                  if (v355 != v352 && *(_DWORD *)(v355 + 4) == v345)
                                  {
                                    uint64_t v357 = v186[4];
                                    unint64_t v358 = (v186[5] - v357) >> 3;
                                    if (v346 < v358)
                                    {
                                      uint64_t v359 = *(void *)(v357 + 8 * v346);
                                      if (v359)
                                      {
                                        unint64_t v360 = *(unsigned __int16 *)(v359 + 2 * v350);
                                        uint64_t v362 = v186[7];
                                        uint64_t v361 = v186[8];
                                        unint64_t v363 = (v361 - v362) >> 3;
                                        if (v363 > v360)
                                        {
                                          uint64_t v364 = v362 + 8 * v360;
                                          if (v364 != v361 && *(_DWORD *)(v364 + 4) == v345)
                                          {
                                            uint64_t v366 = v620[4];
                                            if (v346 < (v620[5] - v366) >> 3)
                                            {
                                              uint64_t v367 = *(void *)(v366 + 8 * v346);
                                              if (v367)
                                              {
                                                unint64_t v368 = *(unsigned __int16 *)(v367 + 2 * v350);
                                                uint64_t v370 = v620[7];
                                                uint64_t v369 = v620[8];
                                                if (v368 < (v369 - v370) >> 3)
                                                {
                                                  uint64_t v371 = v370 + 8 * v368;
                                                  if (v371 != v369 && *(_DWORD *)(v371 + 4) == v345)
                                                  {
                                                    unint64_t v373 = *(void *)v343;
                                                    uint64_t v374 = HIDWORD(*(void *)v343);
                                                    unint64_t v375 = *(void *)v343 >> 39;
                                                    if (v375 < v348
                                                      && (uint64_t v376 = *(void *)(v347 + 8 * v375)) != 0
                                                      && (unint64_t v377 = *(unsigned __int16 *)(v376 + 2 * (HIDWORD(v373) & 0x7F)),
                                                          v354 > v377)
                                                      && (uint64_t v378 = v353 + 8 * v377, v378 != v352)
                                                      && *(_DWORD *)(v378 + 4) == v374)
                                                    {
                                                      uint64_t v379 = v185[10] + 112 * v377;
                                                    }
                                                    else
                                                    {
                                                      uint64_t v379 = v185[11];
                                                    }
                                                    if (v375 < v358
                                                      && (uint64_t v380 = *(void *)(v357 + 8 * v375)) != 0
                                                      && (unint64_t v381 = *(unsigned __int16 *)(v380 + 2 * (HIDWORD(v373) & 0x7F)),
                                                          v363 > v381)
                                                      && (uint64_t v382 = v362 + 8 * v381, v382 != v361)
                                                      && *(_DWORD *)(v382 + 4) == v374)
                                                    {
                                                      double v344 = (uint64_t *)(v186[10] + 16 * v381);
                                                    }
                                                    else
                                                    {
                                                      double v344 = (uint64_t *)v186[11];
                                                    }
                                                    md::SceneQueryLogic::categorizeEntitiesByFlexZone<md::components::DidResolvePendingMaterial>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)buf, v373, v379, v344);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            v343 += 8;
                          }
                          double v184 = v617;
                        }
                        uint64_t v166 = v636;
                        uint64_t v383 = v637;
                        if (v636 != v637)
                        {
                          do
                          {
                            uint64_t v384 = *v166;
                            unint64_t v385 = (void *)gdc::Registry::storage<md::components::FlexClientStateChanged>(v184);
                            gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v385, v384);
                            ++v166;
                          }
                          while (v166 != v383);
                          uint64_t v166 = v637;
                          if (v637 == v636)
                          {
                            uint64_t v143 = v614;
                          }
                          else
                          {
                            unint64_t v386 = 0;
                            uint64_t v166 = v636;
                            uint64_t v143 = v614;
                            do
                            {
                              float v387 = -1.0;
                              if (v386 < (v634 - (unsigned char *)__p) >> 2) {
                                float v387 = *((float *)__p + v386);
                              }
                              uint64_t v388 = v166[v386];
                              *(float *)buf = v387;
                              v389 = (void *)gdc::Registry::storage<md::components::FlexSelectionInfo>(v184);
                              gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v389, v388, buf);
                              ++v386;
                              uint64_t v166 = v636;
                            }
                            while (v386 < v637 - v636);
                          }
                        }
                        break;
                      }
                      while (2)
                      {
                        long long v659 = 0u;
                        long long v660 = 0u;
                        *(_OWORD *)buf = 0u;
                        unint64_t v195 = v182[2];
                        if (v195)
                        {
                          [v195 bounds];
                          double v196 = *(double *)buf;
                          double v197 = *(double *)&buf[8];
                          double v198 = *((double *)&v660 + 1);
                          double v199 = *(double *)&v660;
                          double v200 = *(double *)&v659;
                        }
                        else
                        {
                          double v198 = 0.0;
                          double v200 = 0.0;
                          double v199 = 0.0;
                          double v197 = 0.0;
                          double v196 = 0.0;
                        }
                        double v201 = *(double *)(v183 + 16);
                        double v202 = v632[19] - v196 / v201;
                        if (v202 >= 0.0)
                        {
                          double v204 = v632[16] - (*((double *)&v659 + 1) + v196) / v201;
                          double v203 = 0.0;
                          if (v204 > 0.0) {
                            double v203 = v204 * v204;
                          }
                        }
                        else
                        {
                          double v203 = v202 * v202;
                        }
                        double v205 = v199 + v197;
                        double v206 = *(double *)(v183 + 24);
                        double v207 = v205 / v206 + v632[20] + -1.0;
                        if (v207 >= 0.0)
                        {
                          double v208 = v197 / v206 + v632[17] + -1.0;
                          if (v208 > 0.0) {
                            double v203 = v203 + v208 * v208;
                          }
                        }
                        else
                        {
                          double v203 = v203 + v207 * v207;
                        }
                        double v209 = v632[21] - v200 * 0.0000000249532021;
                        if (v209 >= 0.0)
                        {
                          double v210 = v632[18] - (v198 + v200) * 0.0000000249532021;
                          if (v210 > 0.0) {
                            double v203 = v203 + v210 * v210;
                          }
                        }
                        else
                        {
                          double v203 = v203 + v209 * v209;
                        }
                        unsigned int v211 = (v203 * 1.60600699e15);
                        if (*((_DWORD *)v163 + 8) > v211 || *((_DWORD *)v163 + 9) < v211)
                        {
                          long double v212 = &v640->__vftable;
                          if ((unint64_t)v640 < v641)
                          {
                            void *v212 = v182[2];
                            unint64_t v194 = (std::__shared_weak_count *)(v212 + 1);
                          }
                          else
                          {
                            int64_t v213 = (char *)v640 - (unsigned char *)v639;
                            uint64_t v214 = ((char *)v640 - (unsigned char *)v639) >> 3;
                            if ((unint64_t)(v214 + 1) >> 61) {
                              abort();
                            }
                            unint64_t v215 = (uint64_t)(v641 - (void)v639) >> 2;
                            if (v215 <= v214 + 1) {
                              unint64_t v215 = v214 + 1;
                            }
                            if (v641 - (unint64_t)v639 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v216 = v215;
                            }
                            if (v216)
                            {
                              if (v216 >> 61) {
                                goto LABEL_913;
                              }
                              __double2 v217 = (char *)operator new(8 * v216);
                            }
                            else
                            {
                              __double2 v217 = 0;
                            }
                            unint64_t v218 = &v217[8 * v214];
                            unsigned int v219 = &v217[8 * v216];
                            *(void *)unint64_t v218 = v182[2];
                            unint64_t v194 = (std::__shared_weak_count *)(v218 + 8);
                            unsigned int v220 = (std::__shared_weak_count *)v639;
                            double v221 = v640;
                            int64_t v222 = (char *)v640 - (unsigned char *)v639;
                            if (v640 == v639)
                            {
                              uint64_t v639 = &v217[8 * v214];
                              unint64_t v640 = (std::__shared_weak_count *)(v218 + 8);
                              unint64_t v641 = (unint64_t)v219;
                              unint64_t v163 = v623;
                              uint64_t v9 = v626;
                            }
                            else
                            {
                              unint64_t v223 = v222 - 8;
                              if ((unint64_t)(v222 - 8) <= 0x77)
                              {
                                BOOL v224 = v219;
                                uint64_t v9 = v626;
                                goto LABEL_448;
                              }
                              BOOL v224 = v219;
                              uint64_t v9 = v626;
                              if ((char *)v640 - 8 * (v223 >> 3) - 8 < v218
                                && &v217[v213 - (v223 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v640)
                              {
                                goto LABEL_925;
                              }
                              uint64_t v225 = (v223 >> 3) + 1;
                              uint64_t v226 = &v217[8 * v214 - 16];
                              p_unint64_t shared_weak_owners = &v640[-2].__shared_weak_owners_;
                              uint64_t v228 = v225 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                long long v230 = *(_OWORD *)p_shared_weak_owners;
                                long long v229 = *((_OWORD *)p_shared_weak_owners + 1);
                                *(_OWORD *)p_unint64_t shared_weak_owners = 0uLL;
                                *((_OWORD *)p_shared_weak_owners + 1) = 0uLL;
                                p_shared_weak_owners -= 4;
                                *((_OWORD *)v226 - 1) = v230;
                                *(_OWORD *)uint64_t v226 = v229;
                                v226 -= 32;
                                v228 -= 4;
                              }
                              while (v228);
                              v218 -= 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
                              double v221 = (std::__shared_weak_count *)((char *)v221 - 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL));
                              if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_925:
                                do
                                {
LABEL_448:
                                  uint64_t v231 = v221[-1].__shared_weak_owners_;
                                  double v221 = (std::__shared_weak_count *)((char *)v221 - 8);
                                  v221->__vftable = 0;
                                  *((void *)v218 - 1) = v231;
                                  v218 -= 8;
                                }
                                while (v221 != v220);
                              }
                              double v221 = (std::__shared_weak_count *)v639;
                              uint64_t v232 = v640;
                              uint64_t v639 = v218;
                              unint64_t v640 = v194;
                              unint64_t v641 = (unint64_t)v224;
                              if (v232 == v221)
                              {
                                unint64_t v163 = v623;
                              }
                              else
                              {
                                unint64_t v163 = v623;
                                do
                                {
                                  long long v233 = (void *)v232[-1].__shared_weak_owners_;
                                  uint64_t v232 = (std::__shared_weak_count *)((char *)v232 - 8);
                                }
                                while (v232 != v221);
                              }
                            }
                            uint64_t v183 = MEMORY[0x1E4F63F08];
                            if (v221) {
                              operator delete(v221);
                            }
                          }
                          unint64_t v640 = v194;
                        }
                        uint64_t v182 = (uint64_t **)*v182;
                        if (!v182) {
                          goto LABEL_398;
                        }
                        continue;
                      }
                    }
                  }
                  else
                  {
                    if (v179 >= *(void *)&v173) {
                      v179 %= *(void *)&v173;
                    }
                    if (v179 != v175) {
                      break;
                    }
                  }
                  long double v177 = (void *)*v177;
                }
                while (v177);
              }
            }
          }
LABEL_369:
          ++v167;
        }
        while (v167 != v143);
        if (__p)
        {
          v634 = __p;
          operator delete(__p);
          uint64_t v166 = v636;
        }
        if (v166)
        {
          uint64_t v637 = v166;
          operator delete(v166);
        }
      }
      unint64_t v390 = (std::__shared_weak_count *)v639;
      if (v639)
      {
        uint64_t v391 = v640;
        uint64_t v392 = v639;
        if (v640 != v639)
        {
          do
          {
            unint64_t v393 = (void *)v391[-1].__shared_weak_owners_;
            uint64_t v391 = (std::__shared_weak_count *)((char *)v391 - 8);
          }
          while (v391 != v390);
          uint64_t v392 = v639;
        }
        unint64_t v640 = v390;
        operator delete(v392);
      }
    }
    if (!*(void *)(v9 + 472)) {
      goto LABEL_905;
    }
    if (*(_DWORD *)(v9 + 124))
    {
      unsigned int v394 = 0;
      double v395 = (uint64_t **)(v9 + 488);
      unint64_t v627 = (float *)(v9 + 504);
      BOOL v396 = v140;
      while (1)
      {
        uint64_t v397 = *(void *)(v9 + 472);
        if (!v397) {
          goto LABEL_689;
        }
        int v398 = *(uint64_t **)(v9 + 456);
        uint64_t v399 = (uint64_t *)v398[1];
        double v400 = v398;
        if (v399)
        {
          do
          {
            id v401 = v399;
            uint64_t v399 = (uint64_t *)*v399;
          }
          while (v399);
        }
        else
        {
          do
          {
            id v401 = (uint64_t *)v400[2];
            BOOL v50 = *v401 == (void)v400;
            double v400 = v401;
          }
          while (!v50);
        }
        int64x2_t v402 = (int8x8_t *)v398[4];
        *(void *)(v9 + 456) = v401;
        *(void *)(v9 + 472) = v397 - 1;
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 464), v398);
        operator delete(v398);
        unsigned int v403 = v402[5].u16[0];
        uint64_t v404 = *(uint64_t **)(v9 + 488);
        long double v405 = v395;
        uint64_t v406 = v395;
        if (v404)
        {
          uint64_t v407 = *(uint64_t ***)(v9 + 488);
          do
          {
            unsigned int v408 = *((unsigned __int16 *)v407 + 16);
            if (v403 >= v408)
            {
              if (v408 >= v403)
              {
                *(_WORD *)buf = v402[5].i16[0];
                double v409 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v627, v403, buf);
                ++*((_DWORD *)v409 + 5);
                goto LABEL_636;
              }
              ++v407;
            }
            uint64_t v407 = (uint64_t **)*v407;
          }
          while (v407);
          while (1)
          {
            while (1)
            {
              uint64_t v406 = (uint64_t **)v404;
              unsigned int v410 = *((unsigned __int16 *)v404 + 16);
              if (v403 >= v410) {
                break;
              }
              uint64_t v404 = *v406;
              long double v405 = v406;
              if (!*v406) {
                goto LABEL_655;
              }
            }
            if (v410 >= v403) {
              break;
            }
            uint64_t v404 = v406[1];
            if (!v404)
            {
              long double v405 = v406 + 1;
              goto LABEL_655;
            }
          }
          __double2 v411 = v406;
        }
        else
        {
LABEL_655:
          __double2 v411 = operator new(0x30uLL);
          v411[16] = v403;
          *((void *)v411 + 5) = 0;
          *(void *)__double2 v411 = 0;
          *((void *)v411 + 1) = 0;
          *((void *)v411 + 2) = v406;
          id *v405 = (uint64_t *)v411;
          uint64_t v412 = **(void **)(v9 + 480);
          unsigned int v413 = (uint64_t *)v411;
          if (v412)
          {
            *(void *)(v9 + 480) = v412;
            unsigned int v413 = *v405;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 488), v413);
          ++*(void *)(v9 + 496);
          LOWORD(v403) = v402[5].i16[0];
        }
        *((void *)v411 + 5) = v402;
        *(_WORD *)buf = v403;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v627, v403, buf)+ 5) = 0;
        uint64_t v414 = gdc::Registry::storage<md::components::MeshInstance>(v402);
        uint64_t v415 = gdc::Registry::storage<md::components::ClientState>(v402);
        uint64_t v416 = gdc::Registry::storage<md::components::SupportsFlexing>(v402);
        unint64_t v417 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v414 + 88) - *(void *)(v414 + 80)) >> 4);
        uint64_t v418 = *(void *)(v416 + 80);
        if ((uint64_t)(*(void *)(v415 + 88) - *(void *)(v415 + 80)) >> 4 < v417) {
          unint64_t v417 = (uint64_t)(*(void *)(v415 + 88) - *(void *)(v415 + 80)) >> 4;
        }
        if (*(void *)(v416 + 88) - v418 < v417) {
          unint64_t v417 = *(void *)(v416 + 88) - v418;
        }
        if (v417) {
          break;
        }
LABEL_636:
        if (v394 >= *(_DWORD *)(v9 + 124)) {
          goto LABEL_689;
        }
      }
      v394 += v417;
      if (v396 < v630)
      {
        *v396++ = v402;
        goto LABEL_636;
      }
      unsigned int v419 = v394;
      BOOL v420 = v396;
      int64_t v421 = (char *)v396 - (char *)v140;
      uint64_t v422 = v396 - v140;
      unint64_t v423 = v422 + 1;
      if ((unint64_t)(v422 + 1) >> 61) {
        abort();
      }
      if (((char *)v630 - (char *)v140) >> 2 > v423) {
        unint64_t v423 = ((char *)v630 - (char *)v140) >> 2;
      }
      if ((unint64_t)((char *)v630 - (char *)v140) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v424 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v424 = v423;
      }
      if (v424)
      {
        if (v424 >> 61) {
          goto LABEL_913;
        }
        unint64_t v425 = (char *)operator new(8 * v424);
      }
      else
      {
        unint64_t v425 = 0;
      }
      uint64_t v426 = (int8x8_t **)&v425[8 * v422];
      *uint64_t v426 = v402;
      uint64_t v427 = v426 + 1;
      if (v420 == v140)
      {
        unsigned int v394 = v419;
      }
      else
      {
        unint64_t v428 = (char *)(v420 - 1) - (char *)v140;
        if (v428 >= 0x58)
        {
          if ((unint64_t)((char *)v420 - &v425[v421]) >= 0x20)
          {
            uint64_t v430 = (v428 >> 3) + 1;
            uint64_t v429 = &v420[-(v430 & 0x3FFFFFFFFFFFFFFCLL)];
            int64x2_t v431 = &v425[8 * v422 - 16];
            int v432 = v420 - 2;
            uint64_t v433 = v430 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v434 = *(_OWORD *)v432;
              *((_OWORD *)v431 - 1) = *((_OWORD *)v432 - 1);
              *(_OWORD *)int64x2_t v431 = v434;
              v431 -= 32;
              v432 -= 4;
              v433 -= 4;
            }
            while (v433);
            v426 -= v430 & 0x3FFFFFFFFFFFFFFCLL;
            unsigned int v394 = v419;
            if (v430 == (v430 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_685;
            }
          }
          else
          {
            uint64_t v429 = v420;
            unsigned int v394 = v419;
          }
        }
        else
        {
          uint64_t v429 = v420;
          unsigned int v394 = v419;
        }
        do
        {
          int64x2_t v435 = *--v429;
          *--uint64_t v426 = v435;
        }
        while (v429 != v140);
      }
LABEL_685:
      v630 = (int8x8_t **)&v425[8 * v424];
      double v395 = (uint64_t **)(v9 + 488);
      if (v140) {
        operator delete(v140);
      }
      id v140 = v426;
      BOOL v396 = v427;
      goto LABEL_636;
    }
    BOOL v396 = v140;
LABEL_689:
    if (*(void *)(v9 + 248) == *(void *)(v9 + 256))
    {
LABEL_905:
      if (v140) {
        operator delete(v140);
      }
      goto LABEL_907;
    }
    uint64_t v436 = *(void *)(v9 + 280);
    if (v436)
    {
      while (1)
      {
        uint64_t v437 = v436;
        if (!*(unsigned char *)(v436 + 28)) {
          break;
        }
        uint64_t v436 = *(void *)(v436 + 8);
        if (!v436)
        {
          uint64_t v438 = (uint64_t **)(v437 + 8);
          goto LABEL_695;
        }
      }
      uint8x8_t v439 = (unsigned char *)v436;
    }
    else
    {
      uint64_t v438 = (uint64_t **)(v9 + 280);
      uint64_t v437 = v9 + 280;
LABEL_695:
      uint8x8_t v439 = operator new(0x28uLL);
      v439[28] = 0;
      *(void *)uint8x8_t v439 = 0;
      *((void *)v439 + 1) = 0;
      *((void *)v439 + 2) = v437;
      *uint64_t v438 = (uint64_t *)v439;
      uint64_t v440 = **(void **)(v9 + 272);
      long long v441 = (uint64_t *)v439;
      if (v440)
      {
        *(void *)(v9 + 272) = v440;
        long long v441 = *v438;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 280), v441);
      ++*(void *)(v9 + 288);
    }
    uint64_t v639 = 0;
    unint64_t v640 = 0;
    unint64_t v641 = 0;
    v636 = 0;
    uint64_t v637 = 0;
    uint64_t v638 = 0;
    std::string __p = 0;
    v634 = 0;
    uint64_t v635 = 0;
    if (v140 == v396)
    {
LABEL_900:
      uint64_t v606 = (std::__shared_weak_count *)v639;
      if (v639)
      {
        v607 = v640;
        unsigned int v608 = v639;
        if (v640 != v639)
        {
          do
          {
            v609 = (void *)v607[-1].__shared_weak_owners_;
            v607 = (std::__shared_weak_count *)((char *)v607 - 8);
          }
          while (v607 != v606);
          unsigned int v608 = v639;
        }
        unint64_t v640 = v606;
        operator delete(v608);
      }
      goto LABEL_905;
    }
    v631 = v396;
    long long v442 = 0;
    uint64_t v443 = v140;
    uint64_t v628 = v9;
    while (1)
    {
      uint64_t v444 = *v443;
      ++*(_DWORD *)(v9 + 544);
      double v445 = (std::__shared_weak_count *)v639;
      long long v446 = v640;
      if (v640 != v639)
      {
        double v447 = v444;
        do
        {
          uint64_t v448 = (void *)v446[-1].__shared_weak_owners_;
          long long v446 = (std::__shared_weak_count *)((char *)v446 - 8);
        }
        while (v446 != v445);
        long long v442 = v636;
        uint64_t v444 = v447;
      }
      unint64_t v640 = v445;
      v634 = __p;
      uint64_t v637 = v442;
      unint64_t v632 = 0;
      int8x8_t v449 = v444[1];
      if (v449)
      {
        uint8x8_t v450 = (uint8x8_t)vcnt_s8(v449);
        v450.i16[0] = vaddlv_u8(v450);
        if (v450.u32[0] > 1uLL)
        {
          uint64_t v451 = 0x64A448A5CD5D38DBLL;
          if (*(void *)&v449 <= 0x64A448A5CD5D38DBuLL) {
            uint64_t v451 = 0x64A448A5CD5D38DBuLL % *(void *)&v449;
          }
        }
        else
        {
          uint64_t v451 = (*(void *)&v449 - 1) & 0x64A448A5CD5D38DBLL;
        }
        long long v452 = *(void **)(*(void *)v444 + 8 * v451);
        if (v452)
        {
          uint64_t v453 = (void *)*v452;
          if (v453)
          {
            if (v450.u32[0] < 2uLL)
            {
              uint64_t v454 = *(void *)&v449 - 1;
              while (1)
              {
                uint64_t v456 = v453[1];
                if (v456 == 0x64A448A5CD5D38DBLL)
                {
                  if (v453[2] == 0x64A448A5CD5D38DBLL) {
                    goto LABEL_727;
                  }
                }
                else if ((v456 & v454) != v451)
                {
                  goto LABEL_701;
                }
                uint64_t v453 = (void *)*v453;
                if (!v453) {
                  goto LABEL_701;
                }
              }
            }
            while (1)
            {
              unint64_t v455 = v453[1];
              if (v455 == 0x64A448A5CD5D38DBLL) {
                break;
              }
              if (v455 >= *(void *)&v449) {
                v455 %= *(void *)&v449;
              }
              if (v455 != v451) {
                goto LABEL_701;
              }
LABEL_716:
              uint64_t v453 = (void *)*v453;
              if (!v453) {
                goto LABEL_701;
              }
            }
            if (v453[2] != 0x64A448A5CD5D38DBLL) {
              goto LABEL_716;
            }
LABEL_727:
            uint64_t v457 = v453[5];
            if (*(void *)(v457 + 8) == 0x64A448A5CD5D38DBLL)
            {
              unint64_t v632 = *(double **)(v457 + 32);
              if (v632) {
                break;
              }
            }
          }
        }
      }
LABEL_701:
      if (++v443 == v631)
      {
        if (__p)
        {
          v634 = __p;
          operator delete(__p);
          long long v442 = v636;
        }
        if (v442)
        {
          uint64_t v637 = v442;
          operator delete(v442);
        }
        goto LABEL_900;
      }
    }
    uint64_t v621 = v444;
    long long v458 = *(uint64_t ***)(v9 + 184);
    uint64_t v459 = MEMORY[0x1E4F63F08];
    uint64_t v624 = v439;
    if (!v458)
    {
LABEL_730:
      double v460 = v621;
      double v461 = (void *)gdc::Registry::storage<md::components::MeshInstance>(v621);
      double v462 = (void *)gdc::Registry::storage<md::components::ClientState>(v621);
      uint64_t v463 = gdc::Registry::storage<md::components::SupportsFlexing>(v621);
      double v464 = (void *)v463;
      double v465 = v462 + 4;
      uint64_t v466 = v463 + 32;
      uint64_t v468 = v461[7];
      uint64_t v467 = v461[8];
      if (v462[8] - v462[7] >= (unint64_t)(v467 - v468)) {
        double v469 = v461 + 4;
      }
      else {
        double v469 = v462 + 4;
      }
      if (*(void *)(v463 + 64) - *(void *)(v463 + 56) < v469[4] - v469[3]) {
        double v469 = (void *)(v463 + 32);
      }
      if (v461 + 4 == v469)
      {
        unint64_t v615 = v469;
        uint64_t v618 = v463 + 32;
        *(void *)buf = v9;
        *(void *)&buf[8] = &v632;
        *(void *)&long long v659 = &v639;
        *((void *)&v659 + 1) = &v636;
        *(void *)&long long v660 = &__p;
        if (v468 != v467)
        {
          uint64_t v470 = v461[10];
          do
          {
            unint64_t v512 = *(unsigned int *)(v468 + 4);
            unint64_t v513 = v512 >> 7;
            uint64_t v514 = v462[4];
            unint64_t v515 = (v462[5] - v514) >> 3;
            if (v512 >> 7 < v515)
            {
              uint64_t v516 = *(void *)(v514 + 8 * v513);
              if (v516)
              {
                unint64_t v517 = *(unsigned __int16 *)(v516 + 2 * (v512 & 0x7F));
                uint64_t v519 = v462[7];
                uint64_t v518 = v462[8];
                unint64_t v520 = (v518 - v519) >> 3;
                if (v520 > v517)
                {
                  uint64_t v521 = v519 + 8 * v517;
                  if (v521 != v518 && *(_DWORD *)(v521 + 4) == v512)
                  {
                    uint64_t v523 = v464[4];
                    if (v513 < (v464[5] - v523) >> 3)
                    {
                      uint64_t v524 = *(void *)(v523 + 8 * v513);
                      if (v524)
                      {
                        unint64_t v525 = *(unsigned __int16 *)(v524 + 2 * (v512 & 0x7F));
                        uint64_t v527 = v464[7];
                        uint64_t v526 = v464[8];
                        if (v525 < (v526 - v527) >> 3)
                        {
                          uint64_t v528 = v527 + 8 * v525;
                          if (v528 != v526 && *(_DWORD *)(v528 + 4) == v512)
                          {
                            unint64_t v530 = *(void *)v468;
                            unint64_t v531 = *(void *)v468 >> 39;
                            if (v531 < v515
                              && (uint64_t v532 = *(void *)(v514 + 8 * v531)) != 0
                              && (unint64_t v533 = *(unsigned __int16 *)(v532 + 2 * (HIDWORD(v530) & 0x7F)), v520 > v533)
                              && ((uint64_t v534 = v519 + 8 * v533, v534 != v518)
                                ? (BOOL v535 = *(_DWORD *)(v534 + 4) == HIDWORD(v530))
                                : (BOOL v535 = 0),
                                  v535))
                            {
                              uint64_t v511 = (uint64_t *)(v462[10] + 16 * v533);
                            }
                            else
                            {
                              uint64_t v511 = (uint64_t *)v462[11];
                            }
                            md::SceneQueryLogic::categorizeEntitiesByFlexZone<>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)buf, v530, v470, v511);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v470 += 112;
            v468 += 8;
          }
          while (v468 != v467);
        }
        uint64_t v466 = v618;
        double v460 = v621;
        double v465 = v462 + 4;
        double v469 = v615;
      }
      if (v465 == v469)
      {
        uint64_t v616 = v469;
        uint64_t v619 = v466;
        *(void *)buf = v9;
        *(void *)&buf[8] = &v632;
        *(void *)&long long v659 = &v639;
        *((void *)&v659 + 1) = &v636;
        *(void *)&long long v660 = &__p;
        uint64_t v536 = v462[7];
        uint64_t v537 = v462[8];
        if (v536 != v537)
        {
          unint64_t v538 = (uint64_t *)v462[10];
          do
          {
            unint64_t v540 = *(unsigned int *)(v536 + 4);
            unint64_t v541 = v540 >> 7;
            uint64_t v542 = v461[4];
            unint64_t v543 = (v461[5] - v542) >> 3;
            if (v540 >> 7 < v543)
            {
              uint64_t v544 = *(void *)(v542 + 8 * v541);
              if (v544)
              {
                unint64_t v545 = *(unsigned __int16 *)(v544 + 2 * (v540 & 0x7F));
                uint64_t v547 = v461[7];
                uint64_t v546 = v461[8];
                unint64_t v548 = (v546 - v547) >> 3;
                if (v548 > v545)
                {
                  uint64_t v549 = v547 + 8 * v545;
                  if (v549 != v546 && *(_DWORD *)(v549 + 4) == v540)
                  {
                    uint64_t v551 = v464[4];
                    if (v541 < (v464[5] - v551) >> 3)
                    {
                      uint64_t v552 = *(void *)(v551 + 8 * v541);
                      if (v552)
                      {
                        unint64_t v553 = *(unsigned __int16 *)(v552 + 2 * (v540 & 0x7F));
                        uint64_t v555 = v464[7];
                        uint64_t v554 = v464[8];
                        if (v553 < (v554 - v555) >> 3)
                        {
                          uint64_t v556 = v555 + 8 * v553;
                          if (v556 != v554 && *(_DWORD *)(v556 + 4) == v540)
                          {
                            unint64_t v558 = *(void *)v536;
                            unint64_t v559 = *(void *)v536 >> 39;
                            if (v559 < v543
                              && (uint64_t v560 = *(void *)(v542 + 8 * v559)) != 0
                              && (unint64_t v561 = *(unsigned __int16 *)(v560 + 2 * (HIDWORD(v558) & 0x7F)), v548 > v561)
                              && ((uint64_t v562 = v547 + 8 * v561, v562 != v546)
                                ? (BOOL v563 = *(_DWORD *)(v562 + 4) == HIDWORD(v558))
                                : (BOOL v563 = 0),
                                  v563))
                            {
                              uint64_t v539 = v461[10] + 112 * v561;
                            }
                            else
                            {
                              uint64_t v539 = v461[11];
                            }
                            md::SceneQueryLogic::categorizeEntitiesByFlexZone<>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)buf, v558, v539, v538);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v538 += 2;
            v536 += 8;
          }
          while (v536 != v537);
        }
        uint64_t v466 = v619;
        double v460 = v621;
        double v469 = v616;
      }
      if ((void *)v466 == v469)
      {
        *(void *)buf = v9;
        *(void *)&buf[8] = &v632;
        *(void *)&long long v659 = &v639;
        *((void *)&v659 + 1) = &v636;
        *(void *)&long long v660 = &__p;
        uint64_t v564 = v464[7];
        uint64_t v565 = v464[8];
        while (1)
        {
          if (v564 == v565)
          {
            double v460 = v621;
            goto LABEL_888;
          }
          unint64_t v567 = *(unsigned int *)(v564 + 4);
          unint64_t v568 = v567 >> 7;
          uint64_t v569 = v461[4];
          unint64_t v570 = (v461[5] - v569) >> 3;
          if (v567 >> 7 < v570)
          {
            uint64_t v571 = *(void *)(v569 + 8 * v568);
            if (v571)
            {
              unint64_t v572 = *(unsigned __int16 *)(v571 + 2 * (v567 & 0x7F));
              uint64_t v574 = v461[7];
              uint64_t v573 = v461[8];
              unint64_t v575 = (v573 - v574) >> 3;
              if (v575 > v572)
              {
                uint64_t v576 = v574 + 8 * v572;
                if (v576 != v573 && *(_DWORD *)(v576 + 4) == v567)
                {
                  uint64_t v578 = v462[4];
                  unint64_t v579 = (v462[5] - v578) >> 3;
                  if (v568 < v579)
                  {
                    uint64_t v580 = *(void *)(v578 + 8 * v568);
                    if (v580)
                    {
                      unint64_t v581 = *(unsigned __int16 *)(v580 + 2 * (v567 & 0x7F));
                      uint64_t v583 = v462[7];
                      uint64_t v582 = v462[8];
                      unint64_t v584 = (v582 - v583) >> 3;
                      if (v584 > v581)
                      {
                        uint64_t v585 = v583 + 8 * v581;
                        if (v585 != v582 && *(_DWORD *)(v585 + 4) == v567) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_851:
          v564 += 8;
        }
        unint64_t v587 = *(void *)v564;
        uint64_t v588 = HIDWORD(*(void *)v564);
        unint64_t v589 = *(void *)v564 >> 39;
        if (v589 < v570
          && (uint64_t v590 = *(void *)(v569 + 8 * v589)) != 0
          && (unint64_t v591 = *(unsigned __int16 *)(v590 + 2 * (HIDWORD(v587) & 0x7F)), v575 > v591)
          && ((uint64_t v592 = v574 + 8 * v591, v592 != v573) ? (v593 = *(_DWORD *)(v592 + 4) == v588) : (v593 = 0), v593))
        {
          uint64_t v594 = v461[10] + 112 * v591;
          if (v589 >= v579) {
            goto LABEL_849;
          }
        }
        else
        {
          uint64_t v594 = v461[11];
          if (v589 >= v579) {
            goto LABEL_849;
          }
        }
        uint64_t v595 = *(void *)(v578 + 8 * v589);
        if (v595)
        {
          unint64_t v596 = *(unsigned __int16 *)(v595 + 2 * (HIDWORD(v587) & 0x7F));
          if (v584 > v596)
          {
            uint64_t v597 = v583 + 8 * v596;
            if (v597 != v582 && *(_DWORD *)(v597 + 4) == v588)
            {
              uint64_t v566 = (uint64_t *)(v462[10] + 16 * v596);
              goto LABEL_850;
            }
          }
        }
LABEL_849:
        uint64_t v566 = (uint64_t *)v462[11];
LABEL_850:
        md::SceneQueryLogic::categorizeEntitiesByFlexZone<>(std::vector<gdc::Registry *> const&)::{lambda(gdc::Entity,md::components::MeshInstance &,md::components::ClientState &)#1}::operator()((uint64_t)buf, v587, v594, v566);
        goto LABEL_851;
      }
LABEL_888:
      long long v442 = v636;
      v599 = v637;
      if (v636 != v637)
      {
        do
        {
          uint64_t v600 = *v442;
          v601 = (void *)gdc::Registry::storage<md::components::FlexClientStateChanged>(v460);
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v601, v600);
          ++v442;
        }
        while (v442 != v599);
        long long v442 = v637;
        if (v637 != v636)
        {
          unint64_t v602 = 0;
          long long v442 = v636;
          do
          {
            float v603 = -1.0;
            if (v602 < (v634 - (unsigned char *)__p) >> 2) {
              float v603 = *((float *)__p + v602);
            }
            uint64_t v604 = v442[v602];
            *(float *)buf = v603;
            uint64_t v605 = (void *)gdc::Registry::storage<md::components::FlexSelectionInfo>(v460);
            gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v605, v604, buf);
            ++v602;
            long long v442 = v636;
          }
          while (v602 < v637 - v636);
        }
      }
      goto LABEL_701;
    }
    while (1)
    {
      long long v659 = 0u;
      long long v660 = 0u;
      *(_OWORD *)buf = 0u;
      double v472 = v458[2];
      if (v472)
      {
        [v472 bounds];
        double v473 = *(double *)buf;
        double v474 = *(double *)&buf[8];
        double v475 = *((double *)&v660 + 1);
        double v476 = *(double *)&v660;
        double v477 = *(double *)&v659;
      }
      else
      {
        double v475 = 0.0;
        double v477 = 0.0;
        double v476 = 0.0;
        double v474 = 0.0;
        double v473 = 0.0;
      }
      double v478 = *(double *)(v459 + 16);
      double v479 = v632[19] - v473 / v478;
      if (v479 >= 0.0)
      {
        double v481 = v632[16] - (*((double *)&v659 + 1) + v473) / v478;
        double v480 = 0.0;
        if (v481 > 0.0) {
          double v480 = v481 * v481;
        }
      }
      else
      {
        double v480 = v479 * v479;
      }
      double v482 = v476 + v474;
      double v483 = *(double *)(v459 + 24);
      double v484 = v482 / v483 + v632[20] + -1.0;
      if (v484 >= 0.0)
      {
        double v485 = v474 / v483 + v632[17] + -1.0;
        if (v485 > 0.0) {
          double v480 = v480 + v485 * v485;
        }
      }
      else
      {
        double v480 = v480 + v484 * v484;
      }
      double v486 = v632[21] - v477 * 0.0000000249532021;
      if (v486 >= 0.0)
      {
        double v487 = v632[18] - (v475 + v477) * 0.0000000249532021;
        if (v487 > 0.0) {
          double v480 = v480 + v487 * v487;
        }
      }
      else
      {
        double v480 = v480 + v486 * v486;
      }
      unsigned int v488 = (v480 * 1.60600699e15);
      if (*((_DWORD *)v439 + 8) <= v488 && *((_DWORD *)v439 + 9) >= v488) {
        goto LABEL_740;
      }
      int v489 = &v640->__vftable;
      if ((unint64_t)v640 >= v641) {
        break;
      }
      *int v489 = v458[2];
      double v471 = (std::__shared_weak_count *)(v489 + 1);
LABEL_739:
      unint64_t v640 = v471;
LABEL_740:
      long long v458 = (uint64_t **)*v458;
      if (!v458) {
        goto LABEL_730;
      }
    }
    int64_t v490 = (char *)v640 - (unsigned char *)v639;
    uint64_t v491 = ((char *)v640 - (unsigned char *)v639) >> 3;
    if ((unint64_t)(v491 + 1) >> 61) {
      abort();
    }
    unint64_t v492 = (uint64_t)(v641 - (void)v639) >> 2;
    if (v492 <= v491 + 1) {
      unint64_t v492 = v491 + 1;
    }
    if (v641 - (unint64_t)v639 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v493 = v492;
    }
    if (v493)
    {
      if (v493 >> 61) {
        goto LABEL_913;
      }
      size_t v494 = (char *)operator new(8 * v493);
    }
    else
    {
      size_t v494 = 0;
    }
    unint64_t v495 = &v494[8 * v491];
    size_t v496 = &v494[8 * v493];
    *(void *)unint64_t v495 = v458[2];
    double v471 = (std::__shared_weak_count *)(v495 + 8);
    uint64_t v497 = (std::__shared_weak_count *)v639;
    unint64_t v498 = v640;
    int64_t v499 = (char *)v640 - (unsigned char *)v639;
    if (v640 == v639)
    {
      uint64_t v639 = &v494[8 * v491];
      unint64_t v640 = (std::__shared_weak_count *)(v495 + 8);
      unint64_t v641 = (unint64_t)v496;
      uint8x8_t v439 = v624;
      uint64_t v9 = v628;
      goto LABEL_784;
    }
    unint64_t v500 = v499 - 8;
    if ((unint64_t)(v499 - 8) > 0x77)
    {
      uint64_t v501 = v496;
      uint64_t v9 = v628;
      if ((char *)v640 - 8 * (v500 >> 3) - 8 >= v495 || &v494[v490 - (v500 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v640)
      {
        uint64_t v502 = (v500 >> 3) + 1;
        size_t v503 = &v494[8 * v491 - 16];
        uint64_t v504 = &v640[-2].__shared_weak_owners_;
        uint64_t v505 = v502 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v507 = *(_OWORD *)v504;
          long long v506 = *((_OWORD *)v504 + 1);
          *(_OWORD *)uint64_t v504 = 0uLL;
          *((_OWORD *)v504 + 1) = 0uLL;
          v504 -= 4;
          *((_OWORD *)v503 - 1) = v507;
          *(_OWORD *)size_t v503 = v506;
          v503 -= 32;
          v505 -= 4;
        }
        while (v505);
        v495 -= 8 * (v502 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v498 = (std::__shared_weak_count *)((char *)v498 - 8 * (v502 & 0x3FFFFFFFFFFFFFFCLL));
        if (v502 == (v502 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_779;
        }
      }
    }
    else
    {
      uint64_t v501 = v496;
      uint64_t v9 = v628;
    }
    do
    {
      uint64_t v508 = v498[-1].__shared_weak_owners_;
      unint64_t v498 = (std::__shared_weak_count *)((char *)v498 - 8);
      v498->__vftable = 0;
      *((void *)v495 - 1) = v508;
      v495 -= 8;
    }
    while (v498 != v497);
LABEL_779:
    unint64_t v498 = (std::__shared_weak_count *)v639;
    uint64_t v509 = v640;
    uint64_t v639 = v495;
    unint64_t v640 = v471;
    unint64_t v641 = (unint64_t)v501;
    if (v509 == v498)
    {
      uint8x8_t v439 = v624;
    }
    else
    {
      uint8x8_t v439 = v624;
      do
      {
        unint64_t v510 = (void *)v509[-1].__shared_weak_owners_;
        uint64_t v509 = (std::__shared_weak_count *)((char *)v509 - 8);
      }
      while (v509 != v498);
    }
LABEL_784:
    uint64_t v459 = MEMORY[0x1E4F63F08];
    if (v498) {
      operator delete(v498);
    }
    goto LABEL_739;
  }
  if (v649) {
    (*(void (**)(void))(*v649 + 40))();
  }
  if (*(void *)(v9 + 304)) {
    goto LABEL_324;
  }
LABEL_907:
  if (!v653)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_922;
  }
  ((void (*)(uint64_t **))(*v653)[6])(v653);
  float v62 = v653;
  if (v653 == &v650)
  {
    ((void (*)(uint64_t **))v650[4])(&v650);
    return;
  }
LABEL_909:
  if (v62) {
    ((void (*)(uint64_t **))(*v62)[5])(v62);
  }
}

void sub_1A1B2DA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100](&a28);
  if (v50) {
    operator delete(v50);
  }
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a47);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0,std::allocator<md::SceneQueryLogic::resolveFlexQueries(md::StyleLogicContext const&,md::NavigationContext const&,BOOL,BOOL)::$_0>,void ()(md::StyleManagerEvent)>::operator()(uint64_t result, unsigned __int8 *a2)
{
  if ((*a2 | 4) == 4) {
    **(unsigned char **)(result + 8) = 1;
  }
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v283 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  id v3 = *(int8x8_t **)(a2 + 8);
  os_signpost_id_t v4 = (void *)gdc::Registry::storage<md::BoundData>(v3);
  id v5 = (void *)gdc::Registry::storage<md::ls::TileType>(v3);
  id v6 = (void *)gdc::Registry::storage<md::ls::FlyoverClipPlaneData>(v3);
  uint64_t v7 = (void *)gdc::Registry::storage<md::ls::ModelTransformData>(v3);
  uint64_t v8 = gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(v3);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = (void *)(v8 + 32);
  if (v4[8] - v4[7] < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v10 = v4 + 4;
  }
  if (v5[8] - v5[7] < v10[4] - v10[3]) {
    uint64_t v10 = v5 + 4;
  }
  if (v6[8] - v6[7] < v10[4] - v10[3]) {
    uint64_t v10 = v6 + 4;
  }
  if (v7[8] - v7[7] < v10[4] - v10[3]) {
    uint64_t v10 = v7 + 4;
  }
  uint64_t v243 = v10;
  unint64_t v244 = (void *)v8;
  uint64_t v245 = v4;
  unsigned int v246 = v5;
  uint64_t v247 = v6;
  uint64_t v248 = v7;
  BOOL v12 = (void *)v10[3];
  BOOL v11 = (void *)v10[4];
  unint64_t v249 = v12;
  unint64_t v236 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v243))
  {
    id v13 = v12 + 1;
    do
    {
      BOOL v12 = v13;
      unint64_t v249 = v13;
      if (v13 == v236) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v243);
      id v13 = v12 + 1;
    }
    while (!isValid);
  }
  uint64_t v232 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v236 != v12)
  {
    long long v230 = v9;
    uint64_t v231 = v6;
    while (1)
    {
      *uint64_t v232 = *v12;
      unint64_t v21 = *v12;
      uint64_t v22 = HIDWORD(*v12);
      unint64_t v23 = *v12 >> 39;
      uint64_t v24 = v9[4];
      if (v23 < (v9[5] - v24) >> 3
        && (uint64_t v25 = *(void *)(v24 + 8 * v23)) != 0
        && (unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F)),
            uint64_t v28 = v9[7],
            uint64_t v27 = v9[8],
            v26 < (v27 - v28) >> 3)
        && ((uint64_t v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == v22) : (v30 = 0), v30))
      {
        int8x8_t v31 = (double *)(v9[10] + 8 * v26);
      }
      else
      {
        int8x8_t v31 = (double *)v9[11];
      }
      uint64_t v32 = v4[4];
      if (v23 < (v4[5] - v32) >> 3
        && (uint64_t v33 = *(void *)(v32 + 8 * v23)) != 0
        && (unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * (HIDWORD(v21) & 0x7F)),
            uint64_t v36 = v4[7],
            uint64_t v35 = v4[8],
            v34 < (v35 - v36) >> 3)
        && ((uint64_t v37 = v36 + 8 * v34, v37 != v35) ? (v38 = *(_DWORD *)(v37 + 4) == v22) : (v38 = 0), v38))
      {
        uint64_t v39 = v4[11];
        uint64_t v40 = v4[10] + 24 * v34;
      }
      else
      {
        uint64_t v39 = v4[11];
        uint64_t v40 = v39;
      }
      if (v40 == v39) {
        int v41 = 0;
      }
      else {
        int v41 = (float32x2_t *)v40;
      }
      uint64_t v42 = v5[4];
      if (v23 < (v5[5] - v42) >> 3
        && (uint64_t v43 = *(void *)(v42 + 8 * v23)) != 0
        && (unint64_t v44 = *(unsigned __int16 *)(v43 + 2 * (HIDWORD(v21) & 0x7F)),
            uint64_t v46 = v5[7],
            uint64_t v45 = v5[8],
            v44 < (v45 - v46) >> 3)
        && ((uint64_t v47 = v46 + 8 * v44, v47 != v45) ? (v48 = *(_DWORD *)(v47 + 4) == v22) : (v48 = 0), v48))
      {
        unsigned int v49 = (unsigned __int8 *)(v5[10] + v44);
      }
      else
      {
        unsigned int v49 = (unsigned __int8 *)v5[11];
      }
      uint64_t v240 = v49;
      uint64_t v50 = v6[4];
      if (v23 < (v6[5] - v50) >> 3
        && (uint64_t v51 = *(void *)(v50 + 8 * v23)) != 0
        && (unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v21) & 0x7F)),
            uint64_t v54 = v6[7],
            uint64_t v53 = v6[8],
            v52 < (v53 - v54) >> 3)
        && ((v55 = v54 + 8 * v52, v55 != v53) ? (BOOL v56 = *(_DWORD *)(v55 + 4) == v22) : (BOOL v56 = 0), v56))
      {
        uint64_t v57 = v6[11];
        uint64_t v58 = v6[10] + 240 * v52;
      }
      else
      {
        uint64_t v57 = v6[11];
        uint64_t v58 = v57;
      }
      if (v58 == v57) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = v58;
      }
      uint64_t v60 = v7[4];
      long long v233 = v41;
      if (v23 < (v7[5] - v60) >> 3
        && (uint64_t v61 = *(void *)(v60 + 8 * v23)) != 0
        && (unint64_t v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v21) & 0x7F)),
            uint64_t v64 = v7[7],
            uint64_t v63 = v7[8],
            v62 < (v63 - v64) >> 3)
        && ((v65 = v64 + 8 * v62, v65 != v63) ? (BOOL v66 = *(_DWORD *)(v65 + 4) == v22) : (BOOL v66 = 0), v66))
      {
        uint64_t v67 = v7[11];
        uint64_t v68 = v7[10] + 48 * v62;
      }
      else
      {
        uint64_t v67 = v7[11];
        uint64_t v68 = v67;
      }
      if (v68 == v67) {
        uint64_t v69 = 0;
      }
      else {
        uint64_t v69 = v68;
      }
      uint64_t v70 = **(void **)(a1 + 8);
      int v71 = *(void **)v70;
      float v72 = *(void **)(v70 + 8);
      if (v71 != v72)
      {
        while (*v71 != 0x41D4E9297E100630)
        {
          v71 += 5;
          if (v71 == v72) {
            goto LABEL_75;
          }
        }
      }
      if (v71 == v72)
      {
LABEL_75:
        uint64_t v73 = 0;
      }
      else
      {
        uint64_t v73 = (void *)v71[3];
        unsigned int v74 = (std::__shared_weak_count *)v71[4];
        if (v74)
        {
          atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
      }
      uint64_t v75 = **(void **)(a1 + 8);
      BOOL v76 = *(void **)v75;
      float v77 = *(void **)(v75 + 8);
      if (v76 != v77)
      {
        while (*v76 != 0xE72A6B9E738C2197)
        {
          v76 += 5;
          if (v76 == v77) {
            goto LABEL_84;
          }
        }
      }
      if (v76 == v77)
      {
LABEL_84:
        uint64_t v237 = 0;
      }
      else
      {
        unsigned int v78 = (std::__shared_weak_count *)v76[4];
        uint64_t v237 = v76[3];
        if (v78)
        {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
      }
      float64_t v79 = *v31;
      v267.f64[0] = v79;
      uint64_t v80 = v73[554];
      if (LODWORD(v79) < (unint64_t)((v73[555] - v80) >> 3))
      {
        uint64_t v81 = *(void *)(v80 + 8 * LODWORD(v79));
        if (v81)
        {
          if (HIDWORD(v79) == HIDWORD(v81) && v73[557] + 24 * v81 != v73[558]) {
            operator new();
          }
        }
      }
      unint64_t v82 = MEMORY[8];
      uint64_t v83 = MEMORY[8] ? MEMORY[0x48] : 0;
      int v84 = *v240;
      if (v84 != 255) {
        break;
      }
      if (*(unsigned char *)(v59 + 104))
      {
        long long v241 = *(_OWORD *)v59;
        double v85 = *(double *)(v59 + 24);
        uint64_t v238 = *(void *)(v59 + 16);
        double v87 = *(double *)(v59 + 32);
        double v86 = *(double *)(v59 + 40);
        double v89 = *(double *)(v59 + 48);
        double v88 = *(double *)(v59 + 56);
        double v91 = *(double *)(v59 + 64);
        double v90 = *(double *)(v59 + 72);
        double v234 = *(double *)(v59 + 80);
        double v92 = *(double *)(v59 + 96);
        double v229 = *(double *)(v59 + 88);
        float v93 = *(float *)(v69 + 8);
        float v94 = *(float *)(v69 + 20);
        float v95 = *(float *)(v69 + 32);
        float v96 = *(float *)(v69 + 44);
        float64x2_t v254 = vcvtq_f64_f32(*(float32x2_t *)v69);
        double v255 = v93;
        uint64_t v256 = 0;
        float64x2_t v257 = vcvtq_f64_f32(*(float32x2_t *)(v69 + 12));
        double v258 = v94;
        uint64_t v259 = 0;
        float64x2_t v260 = vcvtq_f64_f32(*(float32x2_t *)(v69 + 24));
        double v261 = v95;
        uint64_t v262 = 0;
        float64x2_t v263 = vcvtq_f64_f32(*(float32x2_t *)(v69 + 36));
        double v264 = v96;
        uint64_t v265 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v266, (double *)(v59 + 112), v254.f64);
        gm::Matrix<double,4,4>::inverted<int,void>((double *)&v277, v266);
        double v97 = (v87 + v87) * v87;
        double v98 = (v86 + v86) * v86;
        double v99 = (v85 + v85) * v87;
        double v100 = (v86 + v86) * v89;
        double v101 = v99 - v100;
        double v102 = v86 * (v85 + v85);
        double v103 = v89 * (v87 + v87);
        double v104 = v100 + v99;
        double v105 = 1.0 - (v85 + v85) * v85;
        double v106 = (v87 + v87) * v86;
        v250[0] = 1.0 - (v97 + v98);
        v250[1] = v104;
        double v107 = v89 * (v85 + v85);
        v250[4] = v101;
        v250[5] = v105 - v98;
        v250[8] = v103 + v102;
        v250[9] = v106 - v107;
        v250[2] = v102 - v103;
        v250[6] = v107 + v106;
        v250[10] = v105 - v97;
        v250[3] = 0.0;
        v250[7] = 0.0;
        v250[11] = 0.0;
        long long v251 = v241;
        uint64_t v252 = v238;
        uint64_t v253 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v267.f64, (double *)&v277, v250);
        double v108 = v229 - v91;
        double v109 = v92 - v90;
        *(double *)v16.i64 = (v234 - v88) * 1.05;
        double v110 = (v229 - v91) * 1.05;
        double v111 = (v92 - v90) * 1.05;
        if (v234 - v88 < 0.0) {
          *(double *)v16.i64 = 0.0;
        }
        double v112 = v88 + (v234 - v88 - *(double *)v16.i64) * 0.5;
        if (v108 < 0.0) {
          double v110 = 0.0;
        }
        double v113 = v91 + (v108 - v110) * 0.5;
        if (v109 < 0.0) {
          double v111 = 0.0;
        }
        double v114 = v90 + (v109 - v111) * 0.5;
        double v115 = v113 + v110;
        double v116 = v114 + v111;
        float64_t v117 = v267.f64[0] * (v112 + *(double *)v16.i64);
        float64_t v242 = v269.f64[0] * v115 + v117;
        double v118 = v271 * v116;
        float64_t v119 = v267.f64[1] * (v112 + *(double *)v16.i64);
        float64_t v239 = v269.f64[1] * v115 + v119;
        double v120 = v272 * v116;
        double v121 = *(double *)v268.i64 * (v112 + *(double *)v16.i64);
        double v122 = v270 * v115;
        double v123 = v273 * v116;
        float64_t v124 = v269.f64[0] * v115 + v267.f64[0] * v112;
        float64_t v125 = v269.f64[1] * v115 + v267.f64[1] * v112;
        double v126 = v270 * v115 + *(double *)v268.i64 * v112;
        float64_t v127 = v269.f64[0] * v113 + v117;
        float64_t v128 = v269.f64[1] * v113 + v119;
        double v129 = v270 * v113;
        float64_t v130 = v269.f64[0] * v113 + v267.f64[0] * v112;
        float64_t v131 = v269.f64[1] * v113 + v267.f64[1] * v112;
        double v132 = v270 * v113 + *(double *)v268.i64 * v112;
        double v133 = v271 * v114 + v274;
        double v134 = v272 * v114 + v275;
        double v135 = v273 * v114 + v276;
        double v17 = v124 + v133;
        double v18 = v125 + v134;
        double v15 = v131 + v134;
        float v136 = v130 + v133;
        float v137 = v131 + v134;
        *(float *)&double v15 = v132 + v135;
        float v138 = v124 + v133;
        float v139 = v125 + v134;
        *(float *)&double v18 = v126 + v135;
        float v220 = v137;
        float v140 = 1.0
             / sqrtf((float)((float)((float)(v138 - v136) * (float)(v138 - v136))+ (float)((float)(v139 - v137) * (float)(v139 - v137)))+ (float)((float)(*(float *)&v18 - *(float *)&v15) * (float)(*(float *)&v18 - *(float *)&v15)));
        double v141 = v122 + v121;
        double v142 = v129 + v121;
        float64_t v143 = v242 + v118 + v274;
        float64_t v224 = v130 + v118 + v274;
        float64_t v144 = v239 + v120 + v275;
        float64_t v223 = v131 + v120 + v275;
        float64_t v145 = v124 + v118 + v274;
        double v146 = v126 + v123 + v276;
        float64_t v226 = v127 + v118 + v274;
        float64_t v147 = v128 + v120 + v275;
        double v222 = v132 + v123 + v276;
        *(double *)v19.i64 = v242 + v133;
        *(double *)v20.i64 = v239 + v134;
        float64_t v148 = v127 + v133;
        float64_t v149 = v128 + v134;
        *(float *)&double v134 = v145;
        *(float *)&double v133 = v125 + v120 + v275;
        *(float *)&float64_t v125 = v146;
        *(float *)&double v132 = v136;
        *(float *)&double v146 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v134 - v136) * (float)(*(float *)&v134 - v136))+ (float)((float)(*(float *)&v133 - v137) * (float)(*(float *)&v133 - v137)))+ (float)((float)(*(float *)&v125 - *(float *)&v15) * (float)(*(float *)&v125 - *(float *)&v15)));
        float v150 = v140 * (float)(v138 - v136);
        *(float *)&float64_t v127 = v140 * (float)(v139 - v137);
        *(float *)&double v114 = v140 * (float)(*(float *)&v18 - *(float *)&v15);
        float v151 = *(float *)&v146 * (float)(*(float *)&v134 - v136);
        float v152 = *(float *)&v146 * (float)(*(float *)&v133 - v137);
        *(float *)&double v120 = *(float *)&v146 * (float)(*(float *)&v125 - *(float *)&v15);
        *(float *)&float64_t v242 = -(float)((float)(v152 * *(float *)&v114) - (float)(*(float *)&v120 * *(float *)&v127));
        *(float *)&float64_t v239 = -(float)((float)(*(float *)&v120 * v150) - (float)(v151 * *(float *)&v114));
        float v227 = -(float)((float)(v151 * *(float *)&v127) - (float)(v152 * v150));
        *(float *)v19.i32 = *(double *)v19.i64;
        *(float *)v20.i32 = *(double *)v20.i64;
        float v153 = v141 + v135;
        float v235 = v138;
        float v154 = sqrtf((float)((float)((float)(*(float *)v19.i32 - v138) * (float)(*(float *)v19.i32 - v138))+ (float)((float)(*(float *)v20.i32 - v139) * (float)(*(float *)v20.i32 - v139)))+ (float)((float)(v153 - *(float *)&v18) * (float)(v153 - *(float *)&v18)));
        double v155 = v142 + v123 + v276;
        double v156 = v142 + v135;
        *(float *)&float64_t v127 = v143;
        float v157 = v144;
        float v158 = v141 + v123 + v276;
        *(float *)&double v123 = (float)(1.0 / v154) * (float)(*(float *)v19.i32 - v138);
        *(float *)&double v141 = (float)(1.0 / v154) * (float)(*(float *)v20.i32 - v139);
        float v159 = (float)(1.0 / v154) * (float)(v153 - *(float *)&v18);
        *(float *)&double v135 = *(float *)&v127 - v138;
        *(float *)&double v146 = 1.0
                        / sqrtf((float)((float)(*(float *)&v135 * *(float *)&v135)+ (float)((float)(v157 - v139) * (float)(v157 - v139)))+ (float)((float)(v158 - *(float *)&v18) * (float)(v158 - *(float *)&v18)));
        float v160 = *(float *)&v146 * (float)(*(float *)&v127 - v138);
        *(float *)&double v114 = *(float *)&v146 * (float)(v157 - v139);
        float v161 = *(float *)&v146 * (float)(v158 - *(float *)&v18);
        float v228 = -(float)((float)(*(float *)&v114 * v159) - (float)(v161 * *(float *)&v141));
        *(float *)&double v135 = -(float)((float)(v161 * *(float *)&v123)
                                 - (float)((float)(*(float *)&v146 * *(float *)&v135) * v159));
        float v162 = -(float)((float)(v160 * *(float *)&v141) - (float)(*(float *)&v114 * *(float *)&v123));
        *(float *)&float64_t v148 = v148;
        *(float *)&double v141 = v149;
        *(float *)&double v146 = v156;
        float v221 = v153;
        *(float *)&double v156 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v148 - *(float *)v19.i32)* (float)(*(float *)&v148 - *(float *)v19.i32))+ (float)((float)(*(float *)&v141 - *(float *)v20.i32)* (float)(*(float *)&v141 - *(float *)v20.i32)))+ (float)((float)(*(float *)&v146 - v153) * (float)(*(float *)&v146 - v153)));
        *(float *)&double v114 = *(float *)&v156 * (float)(*(float *)&v148 - *(float *)v19.i32);
        float v163 = *(float *)&v156 * (float)(*(float *)&v141 - *(float *)v20.i32);
        *(float *)&float64_t v149 = *(float *)&v156 * (float)(*(float *)&v146 - v153);
        v16.i32[1] = HIDWORD(v226);
        *(float *)v16.i32 = v226;
        *(float *)&double v156 = v147;
        *(float *)&double v155 = v155;
        *(float *)v16.i32 = *(float *)v16.i32 - *(float *)v19.i32;
        *(float *)&double v156 = *(float *)&v156 - *(float *)v20.i32;
        *(float *)&double v155 = *(float *)&v155 - v153;
        *(float *)&float64_t v147 = 1.0
                        / sqrtf((float)((float)(*(float *)v16.i32 * *(float *)v16.i32)+ (float)(*(float *)&v156 * *(float *)&v156))+ (float)(*(float *)&v155 * *(float *)&v155));
        *(float *)v16.i32 = *(float *)&v147 * *(float *)v16.i32;
        *(float *)&double v155 = *(float *)&v147 * *(float *)&v155;
        float v225 = -(float)((float)(*(float *)&v155 * *(float *)&v114) - (float)(*(float *)v16.i32 * *(float *)&v149));
        *(float *)&float64_t v226 = -(float)((float)((float)(*(float *)&v147 * *(float *)&v156) * *(float *)&v149)
                                 - (float)(*(float *)&v155 * v163));
        *(float *)&float64_t v149 = -(float)((float)(*(float *)v16.i32 * v163)
                                 - (float)((float)(*(float *)&v147 * *(float *)&v156) * *(float *)&v114));
        LODWORD(v123) = LODWORD(v132);
        float v164 = *(float *)&v15;
        *(float *)&double v155 = *(float *)&v15 - *(float *)&v146;
        *(float *)v16.i32 = 1.0
                          / sqrtf((float)((float)((float)(*(float *)&v132 - *(float *)&v148)* (float)(*(float *)&v132 - *(float *)&v148))+ (float)((float)(v220 - *(float *)&v141) * (float)(v220 - *(float *)&v141)))+ (float)(*(float *)&v155 * *(float *)&v155));
        *(float *)&double v15 = *(float *)v16.i32 * (float)(*(float *)&v132 - *(float *)&v148);
        float v165 = *(float *)v16.i32 * (float)(v220 - *(float *)&v141);
        *(float *)v16.i32 = *(float *)v16.i32 * *(float *)&v155;
        float v166 = v224;
        *(float *)&float64_t v143 = v223;
        *(float *)&float64_t v145 = v222;
        *(float *)&double v132 = 1.0
                        / sqrtf((float)((float)((float)(v166 - *(float *)&v148) * (float)(v166 - *(float *)&v148))+ (float)((float)(*(float *)&v143 - *(float *)&v141)* (float)(*(float *)&v143 - *(float *)&v141)))+ (float)((float)(*(float *)&v145 - *(float *)&v146)* (float)(*(float *)&v145 - *(float *)&v146)));
        *(float *)&double v155 = *(float *)&v132 * (float)(v166 - *(float *)&v148);
        *(float *)&float64_t v144 = *(float *)&v132 * (float)(*(float *)&v143 - *(float *)&v141);
        *(float *)&double v132 = *(float *)&v132 * (float)(*(float *)&v145 - *(float *)&v146);
        *(float *)&float64_t v147 = -(float)((float)(*(float *)&v144 * *(float *)v16.i32) - (float)(*(float *)&v132 * v165));
        *(float *)&double v132 = -(float)((float)(*(float *)&v132 * *(float *)&v15)
                                 - (float)(*(float *)&v155 * *(float *)v16.i32));
        *(float *)&double v156 = -(float)((float)(*(float *)&v155 * v165) - (float)(*(float *)&v144 * *(float *)&v15));
        *(float *)&double v155 = *(float *)&v125 - *(float *)&v145;
        *(float *)&float64_t v125 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v134 - v166) * (float)(*(float *)&v134 - v166))+ (float)((float)(*(float *)&v133 - *(float *)&v143)* (float)(*(float *)&v133 - *(float *)&v143)))+ (float)(*(float *)&v155 * *(float *)&v155));
        float v167 = *(float *)&v125 * (float)(*(float *)&v134 - v166);
        *(float *)&double v15 = *(float *)&v125 * (float)(*(float *)&v133 - *(float *)&v143);
        *(float *)&double v155 = *(float *)&v125 * *(float *)&v155;
        *(float *)&double v133 = v157 - *(float *)&v143;
        *(float *)&float64_t v144 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v127 - v166) * (float)(*(float *)&v127 - v166))+ (float)(*(float *)&v133 * *(float *)&v133))+ (float)((float)(v158 - *(float *)&v145) * (float)(v158 - *(float *)&v145)));
        float v168 = *(float *)&v144 * (float)(*(float *)&v127 - v166);
        *(float *)&float64_t v127 = *(float *)&v144 * *(float *)&v133;
        *(float *)&double v133 = *(float *)&v144 * (float)(v158 - *(float *)&v145);
        *(float *)&float64_t v125 = -(float)((float)(*(float *)&v127 * *(float *)&v155) - (float)(*(float *)&v133 * *(float *)&v15));
        *(float *)&double v133 = -(float)((float)(*(float *)&v133 * v167) - (float)(v168 * *(float *)&v155));
        *(float *)&double v134 = -(float)((float)(v168 * *(float *)&v15) - (float)(*(float *)&v127 * v167));
        *(float *)&double v155 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)&v148 - *(float *)&v123)* (float)(*(float *)&v148 - *(float *)&v123))+ (float)((float)(*(float *)&v141 - v220) * (float)(*(float *)&v141 - v220)))+ (float)((float)(*(float *)&v146 - v164) * (float)(*(float *)&v146 - v164)));
        float v169 = *(float *)&v155 * (float)(*(float *)&v148 - *(float *)&v123);
        *(float *)&double v15 = *(float *)&v155 * (float)(*(float *)&v141 - v220);
        *(float *)&double v155 = *(float *)&v155 * (float)(*(float *)&v146 - v164);
        *(float *)&float64_t v127 = 1.0
                        / sqrtf((float)((float)((float)(*(float *)v19.i32 - *(float *)&v123)* (float)(*(float *)v19.i32 - *(float *)&v123))+ (float)((float)(*(float *)v20.i32 - v220) * (float)(*(float *)v20.i32 - v220)))+ (float)((float)(v221 - v164) * (float)(v221 - v164)));
        *(float *)&float64_t v144 = *(float *)&v127 * (float)(*(float *)v19.i32 - *(float *)&v123);
        float v170 = *(float *)&v127 * (float)(*(float *)v20.i32 - v220);
        *(float *)&float64_t v127 = *(float *)&v127 * (float)(v221 - v164);
        float v171 = -(float)((float)(*(float *)&v155 * v170) - (float)(*(float *)&v15 * *(float *)&v127));
        *(float *)&double v155 = -(float)((float)(v169 * *(float *)&v127) - (float)(*(float *)&v155 * *(float *)&v144));
        float v172 = -(float)((float)(*(float *)&v15 * *(float *)&v144) - (float)(v169 * v170));
        *(float *)&double v15 = 1.0
                       / sqrtf((float)((float)(*(float *)&v242 * *(float *)&v242)+ (float)(*(float *)&v239 * *(float *)&v239))+ (float)(v227 * v227));
        *(float *)&long long v277 = *(float *)&v15 * *(float *)&v242;
        *((float *)&v277 + 1) = *(float *)&v15 * *(float *)&v239;
        *((float *)&v277 + 2) = *(float *)&v15 * v227;
        *((float *)&v277 + 3) = -(float)((float)((float)((float)(*(float *)&v15 * *(float *)&v242) * *(float *)&v123)
                                               + (float)((float)(*(float *)&v15 * *(float *)&v239) * v220))
                                       + (float)((float)(*(float *)&v15 * v227) * v164));
        *(float *)&double v15 = 1.0
                       / sqrtf((float)((float)(v228 * v228) + (float)(*(float *)&v135 * *(float *)&v135))+ (float)(v162 * v162));
        *(float *)&long long v278 = *(float *)&v15 * v228;
        *((float *)&v278 + 1) = *(float *)&v15 * *(float *)&v135;
        *((float *)&v278 + 2) = *(float *)&v15 * v162;
        *((float *)&v278 + 3) = -(float)((float)((float)((float)(*(float *)&v15 * v228) * v235)
                                               + (float)((float)(*(float *)&v15 * *(float *)&v135) * v139))
                                       + (float)((float)(*(float *)&v15 * v162) * *(float *)&v18));
        *(float *)&double v15 = 1.0
                       / sqrtf((float)((float)(*(float *)&v226 * *(float *)&v226) + (float)(v225 * v225))+ (float)(*(float *)&v149 * *(float *)&v149));
        *(float *)&double v17 = *(float *)&v15 * *(float *)&v226;
        *(float *)&double v18 = *(float *)&v15 * v225;
        *(float *)&double v15 = *(float *)&v15 * *(float *)&v149;
        *(float *)v19.i32 = -(float)((float)((float)(*(float *)&v17 * *(float *)v19.i32)
                                           + (float)(*(float *)&v18 * *(float *)v20.i32))
                                   + (float)(*(float *)&v15 * v221));
        *(void *)&long long v279 = __PAIR64__(LODWORD(v18), LODWORD(v17));
        *((void *)&v279 + 1) = __PAIR64__(v19.u32[0], LODWORD(v15));
        *(float *)&double v15 = 1.0
                       / sqrtf((float)((float)(*(float *)&v147 * *(float *)&v147)+ (float)(*(float *)&v132 * *(float *)&v132))+ (float)(*(float *)&v156 * *(float *)&v156));
        *(float *)&long long v280 = *(float *)&v15 * *(float *)&v147;
        *((float *)&v280 + 1) = *(float *)&v15 * *(float *)&v132;
        *((float *)&v280 + 2) = *(float *)&v15 * *(float *)&v156;
        *((float *)&v280 + 3) = -(float)((float)((float)((float)(*(float *)&v15 * *(float *)&v147) * *(float *)&v148)
                                               + (float)((float)(*(float *)&v15 * *(float *)&v132) * *(float *)&v141))
                                       + (float)((float)(*(float *)&v15 * *(float *)&v156) * *(float *)&v146));
        *(float *)&double v114 = 1.0
                        / sqrtf((float)((float)(*(float *)&v125 * *(float *)&v125)+ (float)(*(float *)&v133 * *(float *)&v133))+ (float)(*(float *)&v134 * *(float *)&v134));
        LODWORD(v18) = 1.0;
        *(float *)&double v15 = *(float *)&v114 * *(float *)&v125;
        *(float *)v16.i32 = *(float *)&v114 * *(float *)&v133;
        *(float *)&double v114 = *(float *)&v114 * *(float *)&v134;
        *(float *)&double v17 = -(float)((float)((float)(*(float *)&v15 * v166) + (float)(*(float *)v16.i32 * *(float *)&v143))
                                + (float)(*(float *)&v114 * *(float *)&v145));
        *(void *)&long long v281 = __PAIR64__(v16.u32[0], LODWORD(v15));
        DWORD2(v281) = LODWORD(v114);
        *((float *)&v281 + 3) = *(float *)&v17;
        *(float *)&double v114 = 1.0
                        / sqrtf((float)((float)(v171 * v171) + (float)(*(float *)&v155 * *(float *)&v155))+ (float)(v172 * v172));
        *(float *)&double v15 = *(float *)&v114 * v171;
        *(float *)v16.i32 = *(float *)&v114 * *(float *)&v155;
        *(float *)&long long v282 = *(float *)&v114 * v171;
        *((float *)&v282 + 1) = *(float *)&v114 * *(float *)&v155;
        *((float *)&v282 + 2) = *(float *)&v114 * v172;
        *((float *)&v282 + 3) = -(float)((float)((float)((float)(*(float *)&v114 * v171) * *(float *)&v123)
                                               + (float)((float)(*(float *)&v114 * *(float *)&v155) * v220))
                                       + (float)((float)(*(float *)&v114 * v172) * v164));
      }
      else
      {
        int8x16_t v175 = (int8x16_t)vcvtq_f64_f32(v233[1]);
        float64x2_t v267 = vcvtq_f64_f32(*v233);
        int8x16_t v268 = v175;
        float64x2_t v269 = vcvtq_f64_f32(v233[2]);
        altitude::util::computeLocalClipPlanes((uint64_t)&v267, (uint64_t)&v277, 1.05, v175, v15, v16, v17, v18, v19, v20);
      }
      uint64_t v9 = v230;
      long long v176 = v278;
      *(_OWORD *)uint64_t v83 = v277;
      *(_OWORD *)(v83 + 16) = v176;
      long long v177 = v280;
      *(_OWORD *)(v83 + 32) = v279;
      *(_OWORD *)(v83 + 48) = v177;
      long long v178 = v282;
      *(_OWORD *)(v83 + 64) = v281;
      *(_OWORD *)(v83 + 80) = v178;
LABEL_117:
      if (v83 && v82)
      {
        unint64_t v182 = MEMORY[0x40];
        if (MEMORY[0x40] <= v82) {
          unint64_t v182 = v82;
        }
        MEMORY[0x38] = 0;
        MEMORY[0x40] = v182;
      }
      BOOL v12 = (void *)v243[4];
      uint64_t v183 = v249 + 1;
      unint64_t v249 = v183;
      if (v183 == v12)
      {
        id v6 = v231;
      }
      else
      {
        uint64_t v184 = v244[4];
        id v6 = v231;
        do
        {
          unint64_t v185 = *((unsigned int *)v183 + 1);
          unint64_t v186 = v185 >> 7;
          if (v185 >> 7 < (v244[5] - v184) >> 3)
          {
            uint64_t v187 = *(void *)(v184 + 8 * v186);
            if (v187)
            {
              uint64_t v188 = v185 & 0x7F;
              unint64_t v189 = *(unsigned __int16 *)(v187 + 2 * v188);
              uint64_t v191 = v244[7];
              uint64_t v190 = v244[8];
              if (v189 < (v190 - v191) >> 3)
              {
                uint64_t v192 = v191 + 8 * v189;
                if (v192 != v190 && *(_DWORD *)(v192 + 4) == v185)
                {
                  uint64_t v194 = v245[4];
                  if (v186 < (v245[5] - v194) >> 3)
                  {
                    uint64_t v195 = *(void *)(v194 + 8 * v186);
                    if (v195)
                    {
                      unint64_t v196 = *(unsigned __int16 *)(v195 + 2 * v188);
                      uint64_t v198 = v245[7];
                      uint64_t v197 = v245[8];
                      if (v196 < (v197 - v198) >> 3)
                      {
                        uint64_t v199 = v198 + 8 * v196;
                        if (v199 != v197 && *(_DWORD *)(v199 + 4) == v185)
                        {
                          uint64_t v201 = v246[4];
                          if (v186 < (v246[5] - v201) >> 3)
                          {
                            uint64_t v202 = *(void *)(v201 + 8 * v186);
                            if (v202)
                            {
                              unint64_t v203 = *(unsigned __int16 *)(v202 + 2 * v188);
                              uint64_t v205 = v246[7];
                              uint64_t v204 = v246[8];
                              if (v203 < (v204 - v205) >> 3)
                              {
                                uint64_t v206 = v205 + 8 * v203;
                                if (v206 != v204 && *(_DWORD *)(v206 + 4) == v185)
                                {
                                  uint64_t v208 = v247[4];
                                  if (v186 < (v247[5] - v208) >> 3)
                                  {
                                    uint64_t v209 = *(void *)(v208 + 8 * v186);
                                    if (v209)
                                    {
                                      unint64_t v210 = *(unsigned __int16 *)(v209 + 2 * v188);
                                      uint64_t v212 = v247[7];
                                      uint64_t v211 = v247[8];
                                      if (v210 < (v211 - v212) >> 3)
                                      {
                                        uint64_t v213 = v212 + 8 * v210;
                                        if (v213 != v211 && *(_DWORD *)(v213 + 4) == v185)
                                        {
                                          uint64_t v214 = v248[4];
                                          if (v186 < (v248[5] - v214) >> 3)
                                          {
                                            uint64_t v215 = *(void *)(v214 + 8 * v186);
                                            if (v215)
                                            {
                                              unint64_t v216 = *(unsigned __int16 *)(v215 + 2 * v188);
                                              uint64_t v217 = v248[7];
                                              uint64_t v218 = v248[8];
                                              if (v216 < (v218 - v217) >> 3)
                                              {
                                                uint64_t v219 = v217 + 8 * v216;
                                                if (*(_DWORD *)(v219 + 4) == v185 && v219 != v218)
                                                {
                                                  BOOL v12 = v183;
                                                  goto LABEL_161;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v183;
        }
        while (v183 != v12);
        uint64_t v183 = v12;
LABEL_161:
        unint64_t v249 = v183;
      }
      if (v236 == v12) {
        goto LABEL_162;
      }
    }
    float v173 = *(float *)(v237 + 80);
    if (v84 == 2)
    {
      long long v174 = xmmword_1A28FCE90;
      uint64_t v9 = v230;
    }
    else
    {
      uint64_t v9 = v230;
      if (v84 != 5)
      {
        char v179 = 0;
        uint64_t v180 = 0;
LABEL_115:
        uint64_t v181 = (_OWORD *)(v83 + 16 * v180);
        *uint64_t v181 = xmmword_1A28FCDA0;
        v181[1] = xmmword_1A28FCDA0;
        v181[2] = xmmword_1A28FCDA0;
        v181[3] = xmmword_1A28FCDA0;
        v181[4] = xmmword_1A28FCDA0;
        if ((v179 & 1) == 0) {
          *(_OWORD *)(v83 + 80) = xmmword_1A28FCDA0;
        }
        goto LABEL_117;
      }
      long long v174 = xmmword_1A28FDE40;
    }
    *(_DWORD *)(v83 + 8) = DWORD2(v174);
    *(void *)uint64_t v83 = v174;
    *(float *)(v83 + 12) = -v173;
    char v179 = 1;
    uint64_t v180 = 1;
    goto LABEL_115;
  }
LABEL_162:
  *uint64_t v232 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A1B2F2EC(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x5E4DB6CB13CB5848;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5E4DB6CB13CB5848;
    if (*(void *)&v1 <= 0x5E4DB6CB13CB5848uLL) {
      uint64_t v3 = 0x5E4DB6CB13CB5848uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5E4DB6CB13CB5848;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (id v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5E4DB6CB13CB5848)
      {
        if (v5[2] == 0x5E4DB6CB13CB5848) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      id v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5E4DB6CB13CB5848) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    id v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5E4DB6CB13CB5848) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B2F570(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ModelTransformData>(int8x8_t *a1)
{
  unint64_t v10 = 0xBED6A4C8B7C54422;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBED6A4C8B7C54422;
    if (*(void *)&v1 <= 0xBED6A4C8B7C54422) {
      unint64_t v3 = 0xBED6A4C8B7C54422 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBED6A4C8B7C54422;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (id v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBED6A4C8B7C54422)
      {
        if (v5[2] == 0xBED6A4C8B7C54422) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      id v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBED6A4C8B7C54422) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    id v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBED6A4C8B7C54422) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B2F7E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverClipPlaneData>(int8x8_t *a1)
{
  uint64_t v10 = 0x78FA727E419141C0;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x78FA727E419141C0;
    if (*(void *)&v1 <= 0x78FA727E419141C0uLL) {
      uint64_t v3 = 0x78FA727E419141C0uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x78FA727E419141C0;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (id v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x78FA727E419141C0)
      {
        if (v5[2] == 0x78FA727E419141C0) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      id v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x78FA727E419141C0) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    id v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x78FA727E419141C0) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B2FA50(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::setActive(md::TransitRenderLayer *this, int a2, int a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 32) = a2;
  if (a2)
  {
    uint64_t v6 = *((void *)this + 47);
    unint64_t v7 = *(void **)(v6 + 112);
    if (v7)
    {
      [v7 stop];
      uint64_t v8 = *((void *)this + 47);
      uint64_t v9 = *(void **)(v8 + 112);
      *(void *)(v8 + 112) = 0;

      uint64_t v6 = *((void *)this + 47);
    }
    *((unsigned char *)this + 32) = 1;
    *(unsigned char *)(v6 + 76) = a3;
    return;
  }
  (*(void (**)(md::TransitRenderLayer *))(*(void *)this + 48))(this);
  char v66 = a3;
  if (*((unsigned char *)this + 32)) {
    BOOL v10 = a3 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10 || *(void *)(*((void *)this + 47) + 112))
  {
    *((unsigned char *)this + 32) = 0;
    (*(void (**)(md::TransitRenderLayer *))(*(void *)this + 48))(this);
    return;
  }
  BOOL v11 = (uint64_t *)*((void *)this + 34);
  BOOL v12 = (uint64_t *)*((void *)this + 35);
  if (v11 != v12)
  {
    id v13 = (void *)((char *)this + 104);
    uint64_t v65 = (char *)this + 104;
    while (1)
    {
      uint64_t v14 = *v11;
      uint64_t v15 = *(void *)(*v11 + 384);
      unint64_t v16 = *(void *)(v15 + 120);
      unint64_t v17 = *((void *)this + 12);
      if (v17)
      {
        uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          unint64_t v3 = *(void *)(v15 + 120);
          if (v16 >= v17) {
            unint64_t v3 = v16 % v17;
          }
        }
        else
        {
          unint64_t v3 = (v17 - 1) & v16;
        }
        int8x16_t v19 = *(void ***)(*((void *)this + 11) + 8 * v3);
        if (v19)
        {
          int8x16_t v20 = *v19;
          if (*v19)
          {
            if (v18.u32[0] >= 2uLL)
            {
              while (1)
              {
                unint64_t v21 = v20[1];
                if (v21 == v16)
                {
                  if (*((unsigned __int8 *)v20 + 16) == *(unsigned __int8 *)(v15 + 16)
                    && *((unsigned __int16 *)v20 + 12) == *(unsigned __int16 *)(v15 + 24)
                    && v20[12] == *(void *)(v15 + 96))
                  {
                    uint64_t v22 = (const void *)v20[4];
                    size_t v23 = v20[5] - (void)v22;
                    uint64_t v24 = *(const void **)(v15 + 32);
                    if (v23 == *(void *)(v15 + 40) - (void)v24 && !memcmp(v22, v24, v23)) {
                      goto LABEL_106;
                    }
                  }
                }
                else
                {
                  if (v21 >= v17) {
                    v21 %= v17;
                  }
                  if (v21 != v3) {
                    goto LABEL_44;
                  }
                }
                int8x16_t v20 = (void *)*v20;
                if (!v20) {
                  goto LABEL_44;
                }
              }
            }
            do
            {
              uint64_t v25 = v20[1];
              if (v25 == v16)
              {
                if (*((unsigned __int8 *)v20 + 16) == *(unsigned __int8 *)(v15 + 16)
                  && *((unsigned __int16 *)v20 + 12) == *(unsigned __int16 *)(v15 + 24)
                  && v20[12] == *(void *)(v15 + 96))
                {
                  unint64_t v26 = (const void *)v20[4];
                  size_t v27 = v20[5] - (void)v26;
                  uint64_t v28 = *(const void **)(v15 + 32);
                  if (v27 == *(void *)(v15 + 40) - (void)v28 && !memcmp(v26, v28, v27))
                  {
                    id v13 = (void *)((char *)this + 104);
                    goto LABEL_106;
                  }
                }
              }
              else if ((v25 & (v17 - 1)) != v3)
              {
                break;
              }
              int8x16_t v20 = (void *)*v20;
            }
            while (v20);
            id v13 = (void *)((char *)this + 104);
          }
        }
      }
LABEL_44:
      int8x16_t v20 = operator new(0x88uLL);
      void *v20 = 0;
      v20[1] = v16;
      *((unsigned char *)v20 + 16) = *(unsigned char *)(v15 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v20 + 3), v15 + 24);
      *((unsigned char *)v20 + 112) = 0;
      if (*(unsigned char *)(v15 + 112))
      {
        *((_DWORD *)v20 + 29) = *(_DWORD *)(v15 + 116);
        *((unsigned char *)v20 + 112) = 1;
      }
      v20[15] = *(void *)(v15 + 120);
      v20[16] = 0;
      float v29 = (float)(unint64_t)(*((void *)this + 14) + 1);
      float v30 = *((float *)this + 30);
      if (!v17 || (float)(v30 * (float)v17) < v29) {
        break;
      }
LABEL_96:
      uint64_t v53 = *((void *)this + 11);
      uint64_t v54 = *(void **)(v53 + 8 * v3);
      if (v54)
      {
        void *v20 = *v54;
      }
      else
      {
        void *v20 = *v13;
        *id v13 = v20;
        *(void *)(v53 + 8 * v3) = v13;
        if (!*v20) {
          goto LABEL_105;
        }
        unint64_t v55 = *(void *)(*v20 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v55 >= v17) {
            v55 %= v17;
          }
        }
        else
        {
          v55 &= v17 - 1;
        }
        uint64_t v54 = (void *)(*((void *)this + 11) + 8 * v55);
      }
      *uint64_t v54 = v20;
LABEL_105:
      ++*((void *)this + 14);
LABEL_106:
      v20[16] = v14;
      if (++v11 == v12)
      {
        uint64_t v57 = *(void **)(*((void *)this + 47) + 112);
        goto LABEL_118;
      }
    }
    BOOL v31 = (v17 & (v17 - 1)) != 0;
    if (v17 < 3) {
      BOOL v31 = 1;
    }
    unint64_t v32 = v31 | (2 * v17);
    unint64_t v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v17 = *((void *)this + 12);
    if (prime <= v17)
    {
      if (prime >= v17) {
        goto LABEL_83;
      }
      unint64_t v46 = vcvtps_u32_f32((float)*((unint64_t *)this + 14) / *((float *)this + 30));
      if (v17 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        unint64_t v46 = std::__next_prime(v46);
      }
      else
      {
        uint64_t v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2) {
          unint64_t v46 = v48;
        }
      }
      if (prime <= v46) {
        size_t prime = v46;
      }
      if (prime >= v17)
      {
        unint64_t v17 = *((void *)this + 12);
LABEL_83:
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v16 >= v17) {
            unint64_t v3 = v16 % v17;
          }
          else {
            unint64_t v3 = v16;
          }
        }
        else
        {
          unint64_t v3 = (v17 - 1) & v16;
        }
        goto LABEL_96;
      }
      if (!prime)
      {
        BOOL v56 = (void *)*((void *)this + 11);
        *((void *)this + 11) = 0;
        if (v56) {
          operator delete(v56);
        }
        unint64_t v17 = 0;
        *((void *)this + 12) = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v35 = operator new(8 * prime);
    uint64_t v36 = (void *)*((void *)this + 11);
    *((void *)this + 11) = v35;
    if (v36) {
      operator delete(v36);
    }
    uint64_t v37 = 0;
    *((void *)this + 12) = prime;
    do
      *(void *)(*((void *)this + 11) + 8 * v37++) = 0;
    while (prime != v37);
    BOOL v38 = (void *)*v13;
    if (!*v13)
    {
LABEL_82:
      unint64_t v17 = prime;
      goto LABEL_83;
    }
    size_t v39 = v38[1];
    size_t v40 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v41 = v39 & v40;
      *(void *)(*((void *)this + 11) + 8 * v41) = v13;
      for (uint64_t i = (void *)*v38; *v38; uint64_t i = (void *)*v38)
      {
        size_t v43 = i[1] & v40;
        if (v43 == v41)
        {
          BOOL v38 = i;
        }
        else
        {
          uint64_t v44 = *((void *)this + 11);
          if (*(void *)(v44 + 8 * v43))
          {
            *BOOL v38 = *i;
            uint64_t v45 = 8 * v43;
            void *i = **(void **)(*((void *)this + 11) + v45);
            **(void **)(*((void *)this + 11) + v45) = i;
          }
          else
          {
            *(void *)(v44 + 8 * v43) = v38;
            BOOL v38 = i;
            size_t v41 = v43;
          }
        }
      }
      goto LABEL_82;
    }
    if (v39 >= prime) {
      v39 %= prime;
    }
    *(void *)(*((void *)this + 11) + 8 * v39) = v13;
    unsigned int v49 = (void *)*v38;
    if (!*v38) {
      goto LABEL_82;
    }
    while (1)
    {
      size_t v51 = v49[1];
      if (v51 >= prime) {
        v51 %= prime;
      }
      if (v51 != v39)
      {
        uint64_t v52 = *((void *)this + 11);
        if (!*(void *)(v52 + 8 * v51))
        {
          *(void *)(v52 + 8 * v51) = v38;
          goto LABEL_87;
        }
        *BOOL v38 = *v49;
        uint64_t v50 = 8 * v51;
        *unsigned int v49 = **(void **)(*((void *)this + 11) + v50);
        **(void **)(*((void *)this + 11) + v50) = v49;
        unsigned int v49 = v38;
      }
      size_t v51 = v39;
LABEL_87:
      BOOL v38 = v49;
      unsigned int v49 = (void *)*v49;
      size_t v39 = v51;
      if (!v49) {
        goto LABEL_82;
      }
    }
  }
  uint64_t v57 = 0;
LABEL_118:
  v68[0] = &unk_1EF574238;
  v68[1] = this;
  v68[2] = &v66;
  uint64_t v69 = v68;
  objc_msgSend(v57, "stop", v65);
  uint64_t v58 = [[VKTimedAnimation alloc] initWithDuration:0.5];
  uint64_t v59 = *((void *)this + 47);
  uint64_t v60 = *(void **)(v59 + 112);
  *(void *)(v59 + 112) = v58;

  LODWORD(v61) = 30.0;
  [*(id *)(*((void *)this + 47) + 112) setFrequency:v61];
  [*(id *)(*((void *)this + 47) + 112) setTimingFunction:VKAnimationCurveEaseIn];
  unint64_t v62 = *(void **)(*((void *)this + 47) + 112);
  v67[0] = MEMORY[0x1E4F143A8];
  v67[1] = 3221225472;
  v67[2] = ___ZN2md18TransitRenderLayer19beginFadeOutTransitENSt3__18functionIFvvEEE_block_invoke;
  v67[3] = &__block_descriptor_40_e8_v12__0f8l;
  v67[4] = this;
  [v62 setStepHandler:v67];
  uint64_t v63 = *(void **)(*((void *)this + 47) + 112);
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 3321888768;
  v70[2] = ___ZN2md18TransitRenderLayer19beginFadeOutTransitENSt3__18functionIFvvEEE_block_invoke_2;
  v70[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvvEEE_e8_v12__0B8l;
  v70[4] = this;
  uint64_t v64 = (uint64_t)v69;
  if (v69)
  {
    if (v69 == v68)
    {
      float v72 = v71;
      (*(void (**)(void *, void *))(v68[0] + 24))(v68, v71);
      goto LABEL_123;
    }
    uint64_t v64 = (*(uint64_t (**)(void))(*v69 + 16))();
  }
  float v72 = (void *)v64;
LABEL_123:
  [v63 setCompletionHandler:v70];
  md::AnimationRunner::runAnimation(*((md::MapEngine ***)this + 50), *(VKAnimation **)(*((void *)this + 47) + 112));
  if (v72 == v71)
  {
    (*(void (**)(void *))(v71[0] + 32))(v71);
  }
  else if (v72)
  {
    (*(void (**)(void))(*v72 + 40))();
  }
  if (v69 == v68)
  {
    (*(void (**)(void *))(v68[0] + 32))(v68);
  }
  else if (v69)
  {
    (*(void (**)(void))(*v69 + 40))();
  }
}

void sub_1A1B30344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v28 = *(void *)(v26 + 64);
  if (v28 == v25)
  {
    (*(void (**)(uint64_t))(a25 + 32))(v25);
  }
  else if (v28)
  {
    (*(void (**)(uint64_t))(*(void *)v28 + 40))(v28);
  }
  if (a19 == &a16)
  {
    (*(void (**)(uint64_t *))(a16 + 32))(&a16);
    _Unwind_Resume(a1);
  }
  if (!a19) {
    _Unwind_Resume(a1);
  }
  (*(void (**)(void))(*a19 + 40))();
  _Unwind_Resume(a1);
}

void sub_1A1B30438(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 112)) {
    *(unsigned char *)(v1 + 112) = 0;
  }
  unint64_t v3 = *(void **)(v1 + 32);
  if (v3 != *(void **)(v1 + 48)) {
    free(v3);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    uint8x8_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        uint64_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        uint8x8_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::TransitTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  id v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  unint64_t v7 = *(void **)(a1 + 208);
  uint64_t v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  void *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *uint64_t v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::TransitTileDataRenderable>::disposeElements(uint64_t a1)
{
  float v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  uint8x8_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      os_signpost_id_t v4 = &v29;
      id v5 = &v29;
      if (v29)
      {
        uint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            id v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            os_signpost_id_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            os_signpost_id_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        void *v4 = v8;
        if (*v28)
        {
          uint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint8x8_t v2 = *(void **)(a1 + 40);
      }
      uint8x8_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  long long v10 = *(void **)a1;
  BOOL v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        unint64_t v17 = (void (***)(void))(v16 + 424 * v15);
        uint8x8_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        int8x16_t v19 = &v29;
        do
        {
          int8x16_t v20 = v18;
          unint64_t v21 = v19;
          unint64_t v22 = v18[4];
          size_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            size_t v23 = (uint64_t **)v20;
            int8x16_t v19 = (uint64_t **)v20;
          }
          uint8x8_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          int8x16_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    uint64_t v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        uint64_t v25 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        uint64_t v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        long long v10 = v25;
      }
      while (!v12);
    }
    long long v10 = v25;
  }
  while (v25 != v11);
  long long v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      uint64_t v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          size_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          size_t v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          long long v10 = v27;
        }
        while (!v12);
      }
      long long v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A1B30834(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::renderablesWillLeaveView(uint64_t a1, uint64_t **a2)
{
  uint8x8_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    os_signpost_id_t v4 = (uint64_t **)(a1 + 448);
    do
    {
      uint64_t v5 = *v2;
      std::__tree<std::shared_ptr<md::TransitTileData>,md::TransitTileSetCompare,std::allocator<std::shared_ptr<md::TransitTileData>>>::__emplace_unique_key_args<std::shared_ptr<md::TransitTileData>,std::shared_ptr<md::TransitTileData> const&>(v4, *(void *)(*v2 + 384), *(void *)(*v2 + 384), *(void *)(*v2 + 392));
      uint64_t v6 = *(void **)(v5 + 408);
      if (v6)
      {
        [v6 stop];
        unint64_t v7 = *(void **)(v5 + 408);
        if (v7)
        {
          *(void *)(v5 + 408) = 0;
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t md::CompositeLabeler::layoutForDisplay(uint64_t this, const md::LayoutContext *a2)
{
  uint8x8_t v2 = *(uint64_t **)(this + 8);
  for (uint64_t i = *(uint64_t **)(this + 16);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(void *)v5 + 56))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return this;
}

void md::MapNavLabeler::layoutForDisplay(md::MapNavLabeler *this, const md::LayoutContext *a2)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 74);
  for (uint64_t i = *((void *)this + 73); v4 != i; v4 -= 16)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((void *)this + 74) = i;
  if (((*(uint64_t (**)(md::MapNavLabeler *))(*(void *)this + 352))(this) & 1) != 0
    || *((void *)this + 13) && *(void *)(*((void *)this + 86) + 24)
    || (unint64_t)*(unsigned __int8 *)(*(void *)(*((void *)this + 3) + 336) + 163) << 16 == 393216
    || (*(unsigned int (**)(md::MapNavLabeler *))(*(void *)this + 376))(this))
  {
    v170[0] = &unk_1EF56FCC0;
    float v171 = v170;
    v168[0] = &unk_1EF56FD08;
    float v169 = v168;
    float v173 = v172;
    v172[0] = &unk_1EF56FD08;
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    unint64_t v7 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsNavLayout", "", buf, 2u);
    }

    if (v169 == v168)
    {
      (*(void (**)(void *))(v168[0] + 32))(v168);
    }
    else if (v169)
    {
      (*(void (**)(void))(*v169 + 40))();
    }
    if (v171 == v170)
    {
      (*(void (**)(void *))(v170[0] + 32))(v170);
    }
    else if (v171)
    {
      (*(void (**)(void))(*v171 + 40))();
    }
    md::LabelNavLayoutContext::grabStateFromContext((md::MapNavLabeler *)((char *)this + 360), *((md::LabelManager **)this + 3), (const md::LabelLayoutContext *)(*((void *)this + 3) + 440), a2);
    uint64_t v8 = *((void *)this + 3);
    *(void *)buf = &unk_1EF5303F0;
    uint64_t v162 = v8;
    float v163 = this;
    float v164 = (float64x2_t *)(v8 + 440);
    float v165 = (char *)this + 360;
    if (*((void *)this + 13) && *(void *)(*((void *)this + 86) + 24))
    {
      unint64_t v9 = (float32x2_t **)*((void *)this + 77);
      long long v10 = (float32x2_t **)*((void *)this + 78);
      if (v9 != v10)
      {
        while (1)
        {
          BOOL v11 = *v9;
          if ((*v9)[40].i8[7])
          {
            unsigned int v12 = v11[40].u8[5];
            if (v11[40].i8[5]) {
              unsigned int v12 = v11[40].i8[6] != 0;
            }
            v11[33].i8[0] = v12 ^ 1;
            v11[33].i8[1] = v11[33].f32[1] != (float)v12;
            md::NavLabel::layoutForDisplayWithNavContext(v11, (float64x2_t **)buf);
            goto LABEL_29;
          }
          if (v11[33].i8[0])
          {
            if (v11[33].f32[1] > 0.0) {
              goto LABEL_37;
            }
          }
          else
          {
            v11[33].i8[0] = 1;
            float v13 = v11[33].f32[1];
            v11[33].i8[1] = v13 != 0.0;
            if (v13 > 0.0) {
LABEL_37:
            }
              md::NavLabel::layoutForDisplayWithNavContext(v11, (float64x2_t **)buf);
          }
LABEL_29:
          v9 += 2;
          if (v9 == v10)
          {
            uint64_t v14 = (float32x2_t **)*((void *)this + 77);
            unint64_t v9 = (float32x2_t **)*((void *)this + 78);
            goto LABEL_40;
          }
        }
      }
      uint64_t v14 = (float32x2_t **)*((void *)this + 77);
LABEL_40:
      if ((char *)v9 - (char *)v14 >= 1)
      {
        unint64_t v15 = *((void *)this + 74);
        uint64_t v16 = ((char *)v9 - (char *)v14) >> 4;
        uint64_t v17 = *((void *)this + 73);
        uint64_t v18 = (uint64_t)(v15 - v17) >> 4;
        uint64_t v19 = v17 + ((v15 - v17) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v20 = *((void *)this + 75);
        if (v16 > (uint64_t)(v20 - v15) >> 4)
        {
          unint64_t v21 = v18 + v16;
          if ((unint64_t)(v18 + v16) >> 60) {
            abort();
          }
          uint64_t v22 = v20 - v17;
          if (v22 >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            uint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v23 = v21;
          }
          if (v23) {
            uint64_t v24 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 76) + 16))(*((void *)this + 76), 16 * v23, 8);
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v30 = (void *)(v24 + 16 * v18);
          uint64_t v31 = 16 * v16;
          unint64_t v32 = &v30[2 * v16];
          unint64_t v33 = (uint64_t *)(v14 + 1);
          unint64_t v34 = v30;
          do
          {
            if (v34)
            {
              void *v34 = *(v33 - 1);
              uint64_t v35 = *v33;
              v34[1] = *v33;
              if (v35) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
              }
            }
            v34 += 2;
            v33 += 2;
            v31 -= 16;
          }
          while (v31);
          uint64_t v36 = (void *)*((void *)this + 73);
          if (v36 != (void *)v19)
          {
            uint64_t v37 = (void *)v19;
            do
            {
              long long v38 = *((_OWORD *)v37 - 1);
              v37 -= 2;
              *((_OWORD *)v30 - 1) = v38;
              v30 -= 2;
              *uint64_t v37 = 0;
              v37[1] = 0;
            }
            while (v37 != v36);
          }
          uint64_t v39 = v24 + 16 * v23;
          uint64_t v40 = *((void *)this + 74);
          if (v40 != v19)
          {
            do
            {
              *v32++ = *(_OWORD *)v19;
              *(void *)uint64_t v19 = 0;
              *(void *)(v19 + 8) = 0;
              v19 += 16;
            }
            while (v19 != v40);
            uint64_t v19 = *((void *)this + 74);
          }
          uint64_t v41 = *((void *)this + 73);
          *((void *)this + 73) = v30;
          *((void *)this + 74) = v32;
          uint64_t v42 = *((void *)this + 75);
          for (*((void *)this + 75) = v39; v19 != v41; v19 -= 16)
          {
            size_t v43 = *(std::__shared_weak_count **)(v19 - 8);
            if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (v41) {
            (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 76) + 40))(*((void *)this + 76), v41, v42 - v41);
          }
          goto LABEL_99;
        }
        uint64_t v25 = (uint64_t)(v15 - v19) >> 4;
        if (v25 >= v16)
        {
          uint64_t v26 = &v14[2 * v16];
          uint64_t v28 = (char *)*((void *)this + 74);
LABEL_80:
          uint64_t v44 = (char *)(v19 + 16 * v16);
          uint64_t v45 = &v28[-16 * v16];
          unint64_t v46 = v28;
          if ((unint64_t)v45 < v15)
          {
            unint64_t v46 = v28;
            do
            {
              if (v46)
              {
                *(_OWORD *)unint64_t v46 = *(_OWORD *)v45;
                *(void *)uint64_t v45 = 0;
                *((void *)v45 + 1) = 0;
              }
              v45 += 16;
              v46 += 16;
            }
            while ((unint64_t)v45 < v15);
          }
          *((void *)this + 74) = v46;
          if (v28 != v44)
          {
            uint8x8_t v47 = (std::__shared_weak_count **)(v28 - 8);
            uint64_t v48 = 16 * ((v28 - v44) >> 4);
            uint64_t v49 = v17 + 16 * v18 - 16;
            do
            {
              uint64_t v50 = (void *)(v49 + v48);
              long long v51 = *(_OWORD *)(v49 + v48);
              *uint64_t v50 = 0;
              v50[1] = 0;
              uint64_t v52 = *v47;
              *(_OWORD *)(v47 - 1) = v51;
              if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
              v47 -= 2;
              v48 -= 16;
            }
            while (v48);
          }
          for (; v14 != v26; v19 += 16)
          {
            uint64_t v54 = *v14;
            uint64_t v53 = v14[1];
            if (v53) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)&v53[1], 1uLL, memory_order_relaxed);
            }
            unint64_t v55 = *(std::__shared_weak_count **)(v19 + 8);
            *(void *)uint64_t v19 = v54;
            *(void *)(v19 + 8) = v53;
            if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            v14 += 2;
          }
          goto LABEL_99;
        }
        uint64_t v26 = &v14[2 * v25];
        if (v26 == v9)
        {
          uint64_t v28 = (char *)*((void *)this + 74);
        }
        else
        {
          size_t v27 = &v14[2 * v25];
          uint64_t v28 = (char *)*((void *)this + 74);
          do
          {
            if (v28)
            {
              *(void *)uint64_t v28 = *v27;
              float v29 = v27[1];
              *((void *)v28 + 1) = v29;
              if (v29) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)&v29[1], 1uLL, memory_order_relaxed);
              }
            }
            v27 += 2;
            v28 += 16;
          }
          while (v27 != v9);
        }
        *((void *)this + 74) = v28;
        if ((uint64_t)(v15 - v19) >= 1) {
          goto LABEL_80;
        }
      }
    }
LABEL_99:
    if (((*(uint64_t (**)(md::MapNavLabeler *))(*(void *)this + 352))(this) & 1) == 0
      && (unint64_t)*(unsigned __int8 *)(*(void *)(*((void *)this + 3) + 336) + 163) << 16 != 393216
      && !(*(unsigned int (**)(md::MapNavLabeler *))(*(void *)this + 376))(this))
    {
      goto LABEL_217;
    }
    float v157 = 0;
    float v158 = 0;
    unint64_t v159 = 0;
    {
      operator new();
    }
    uint64_t v160 = mdm::Allocator::instance(void)::alloc;
    uint64_t v56 = *((void *)this + 98) - *((void *)this + 97);
    unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (v56 >> 3);
    unint64_t v58 = v57 + 1;
    if (v57 == -1)
    {
      uint64_t v59 = 0;
    }
    else
    {
      if (v58 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, v56 + 24, 4);
      float v157 = (char *)v59;
      float v158 = (char *)v59;
      unint64_t v159 = v59 + 24 * v58;
    }
    std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::AvoidanceRectWithPriority const*>,std::__wrap_iter<md::AvoidanceRectWithPriority const*>>((uint64_t *)&v157, v59, *((long long **)this + 97), *((long long **)this + 98), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 98) - *((void *)this + 97)) >> 3));
    uint64_t v60 = (__n128 **)*((void *)this + 77);
    for (uint64_t j = (__n128 **)*((void *)this + 78); v60 != j; v60 += 2)
    {
      unint64_t v62 = *v60;
      uint64_t v63 = (std::__shared_weak_count *)v60[1];
      float v166 = *v60;
      float v167 = v63;
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      __n128 v64 = v62[21];
      uint64_t v65 = v158;
      if ((unint64_t)v158 >= v159)
      {
        unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((v158 - v157) >> 3);
        unint64_t v68 = v67 + 1;
        if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v159 - (void)v157) >> 3) > v68) {
          unint64_t v68 = 0x5555555555555556 * ((uint64_t)(v159 - (void)v157) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - (void)v157) >> 3) >= 0x555555555555555) {
          uint64_t v69 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          uint64_t v69 = v68;
        }
        if (v69)
        {
          __n128 v155 = v64;
          uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v160 + 16))(v160, 24 * v69, 4);
          int v71 = (__n128 *)(v70 + 24 * v67);
          uint64_t v72 = v70 + 24 * v69;
          __n128 v64 = v155;
          if (v70)
          {
            __n128 *v71 = v155;
            unint64_t v73 = v70 + 24 * v67;
            *(_DWORD *)(v73 + 16) = 1065353216;
            *(unsigned char *)(v73 + 20) = 0;
          }
        }
        else
        {
          uint64_t v72 = 0;
          int v71 = (__n128 *)(8 * ((v158 - v157) >> 3));
        }
        uint64_t v75 = (uint64_t)v157;
        uint64_t v74 = (uint64_t)v158;
        uint64_t v76 = (uint64_t)v71;
        if (v158 != v157)
        {
          do
          {
            __n128 v64 = *(__n128 *)(v74 - 24);
            *(void *)(v76 - 8) = *(void *)(v74 - 8);
            *(__n128 *)(v76 - 24) = v64;
            v76 -= 24;
            v74 -= 24;
          }
          while (v74 != v75);
          uint64_t v74 = (uint64_t)v157;
        }
        char v66 = &v71[1].n128_i8[8];
        float v157 = (char *)v76;
        float v158 = &v71[1].n128_i8[8];
        unint64_t v77 = v159;
        unint64_t v159 = v72;
        if (v74) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v160 + 40))(v160, v74, v77 - v74);
        }
      }
      else
      {
        if (v158)
        {
          *(__n128 *)float v158 = v64;
          *((_DWORD *)v65 + 4) = 1065353216;
          *((unsigned char *)v65 + 20) = 0;
        }
        char v66 = (char *)v65 + 24;
      }
      float v158 = v66;
      if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v63->__on_zero_shared)(v63, v64);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    unsigned int v78 = v164;
    float64_t v79 = (double *)v165;
    float v80 = *((float *)v165 + 30);
    float v81 = *(float *)(v162 + 176);
    if (!md::LabelLayoutContext::isDistanceClipped((uint64_t)v164, (uint64_t)(v165 + 96)))
    {
      v82.f32[0] = v81 * v80;
      if ((float)(v81 * v80) != 0.0)
      {
        float64x2_t v83 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v78[60], v78[54], v79[12]), v78[56], v79[13]), v78[58], v79[14]), 1.0 / (v78[61].f64[1] + v78[55].f64[1] * v79[12] + v78[57].f64[1] * v79[13] + v78[59].f64[1] * v79[14]));
        v82.f32[0] = v82.f32[0] * 0.5;
        float32x4_t v84 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v83), v83);
        float32x4_t v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 0);
        *(void *)&long long v86 = vsubq_f32(v84, v85).u64[0];
        float32x4_t v82 = vaddq_f32(v84, v85);
        *((void *)&v86 + 1) = v82.i64[1];
        double v87 = v158;
        if ((unint64_t)v158 >= v159)
        {
          unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v158 - v157) >> 3);
          unint64_t v90 = v89 + 1;
          if (v89 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((uint64_t)(v159 - (void)v157) >> 3) > v90) {
            unint64_t v90 = 0x5555555555555556 * ((uint64_t)(v159 - (void)v157) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - (void)v157) >> 3) >= 0x555555555555555) {
            uint64_t v91 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            uint64_t v91 = v90;
          }
          if (v91)
          {
            long long v156 = v86;
            uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v160 + 16))(v160, 24 * v91, 4);
            float v93 = (_OWORD *)(v92 + 24 * v89);
            uint64_t v94 = v92 + 24 * v91;
            v82.i64[0] = v156;
            if (v92)
            {
              *float v93 = v156;
              unint64_t v95 = v92 + 24 * v89;
              *(_DWORD *)(v95 + 16) = 1065353216;
              *(unsigned char *)(v95 + 20) = 0;
            }
          }
          else
          {
            uint64_t v94 = 0;
            float v93 = (_OWORD *)(8 * ((v158 - v157) >> 3));
          }
          double v88 = (char *)v93 + 24;
          uint64_t v97 = (uint64_t)v157;
          uint64_t v96 = (uint64_t)v158;
          if (v158 != v157)
          {
            do
            {
              float32x4_t v82 = *(float32x4_t *)(v96 - 24);
              *((void *)v93 - 1) = *(void *)(v96 - 8);
              *(float32x4_t *)((char *)v93 - 24) = v82;
              float v93 = (_OWORD *)((char *)v93 - 24);
              v96 -= 24;
            }
            while (v96 != v97);
            uint64_t v96 = (uint64_t)v157;
          }
          float v157 = (char *)v93;
          float v158 = v88;
          unint64_t v98 = v159;
          unint64_t v159 = v94;
          if (v96) {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v160 + 40))(v160, v96, v98 - v96);
          }
        }
        else
        {
          if (v158)
          {
            *(_OWORD *)float v158 = v86;
            *((_DWORD *)v87 + 4) = 1065353216;
            *((unsigned char *)v87 + 20) = 0;
          }
          double v88 = (char *)v87 + 24;
        }
        float v158 = v88;
      }
    }
    objc_msgSend(*((id *)this + 7), "layoutWithNavContext:avoidanceRects:", buf, &v157, *(double *)v82.i64);
    uint64_t v99 = [*((id *)this + 7) visibleSigns];
    double v101 = *(uint64_t **)v99;
    double v100 = *(uint64_t **)(v99 + 8);
    uint64_t v102 = (uint64_t)v100 - *(void *)v99;
    if (v102 >= 1)
    {
      unint64_t v103 = *((void *)this + 74);
      uint64_t v104 = v102 >> 4;
      uint64_t v105 = *((void *)this + 73);
      uint64_t v106 = (uint64_t)(v103 - v105) >> 4;
      double v107 = (void *)(v105 + ((v103 - v105) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v108 = *((void *)this + 75);
      if (v104 <= (uint64_t)(v108 - v103) >> 4)
      {
        uint64_t v113 = (uint64_t)(v103 - (void)v107) >> 4;
        if (v113 >= v104)
        {
          double v114 = &v101[2 * v104];
          double v116 = (char *)*((void *)this + 74);
        }
        else
        {
          double v114 = &v101[2 * v113];
          if (v114 == v100)
          {
            double v116 = (char *)*((void *)this + 74);
          }
          else
          {
            double v115 = &v101[2 * v113];
            double v116 = (char *)*((void *)this + 74);
            do
            {
              if (v116)
              {
                *(void *)double v116 = *v115;
                uint64_t v117 = v115[1];
                *((void *)v116 + 1) = v117;
                if (v117) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v117 + 8), 1uLL, memory_order_relaxed);
                }
              }
              v115 += 2;
              v116 += 16;
            }
            while (v115 != v100);
          }
          *((void *)this + 74) = v116;
          if ((uint64_t)(v103 - (void)v107) < 1) {
            goto LABEL_215;
          }
        }
        double v132 = (char *)&v107[2 * v104];
        double v133 = &v116[-16 * v104];
        double v134 = v116;
        if ((unint64_t)v133 < v103)
        {
          double v134 = v116;
          do
          {
            if (v134)
            {
              *(_OWORD *)double v134 = *(_OWORD *)v133;
              *(void *)double v133 = 0;
              *((void *)v133 + 1) = 0;
            }
            v133 += 16;
            v134 += 16;
          }
          while ((unint64_t)v133 < v103);
        }
        *((void *)this + 74) = v134;
        if (v116 != v132)
        {
          double v135 = (std::__shared_weak_count **)(v116 - 8);
          uint64_t v136 = 16 * ((v116 - v132) >> 4);
          uint64_t v137 = v105 + 16 * v106 - 16;
          do
          {
            float v138 = (void *)(v137 + v136);
            long long v139 = *(_OWORD *)(v137 + v136);
            *float v138 = 0;
            v138[1] = 0;
            float v140 = *v135;
            *(_OWORD *)(v135 - 1) = v139;
            if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
            v135 -= 2;
            v136 -= 16;
          }
          while (v136);
        }
        for (; v101 != v114; v107 += 2)
        {
          uint64_t v142 = *v101;
          uint64_t v141 = v101[1];
          if (v141) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v141 + 8), 1uLL, memory_order_relaxed);
          }
          float64_t v143 = (std::__shared_weak_count *)v107[1];
          *double v107 = v142;
          v107[1] = v141;
          if (v143 && !atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
          v101 += 2;
        }
      }
      else
      {
        unint64_t v109 = v106 + v104;
        if ((unint64_t)(v106 + v104) >> 60) {
          abort();
        }
        uint64_t v110 = v108 - v105;
        if (v110 >> 3 > v109) {
          unint64_t v109 = v110 >> 3;
        }
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0) {
          uint64_t v111 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v111 = v109;
        }
        if (v111) {
          uint64_t v112 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 76) + 16))(*((void *)this + 76), 16 * v111, 8);
        }
        else {
          uint64_t v112 = 0;
        }
        double v118 = (void *)(v112 + 16 * v106);
        uint64_t v119 = 16 * v104;
        double v120 = &v118[2 * v104];
        double v121 = v101 + 1;
        double v122 = v118;
        do
        {
          if (v122)
          {
            void *v122 = *(v121 - 1);
            uint64_t v123 = *v121;
            v122[1] = *v121;
            if (v123) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v123 + 8), 1uLL, memory_order_relaxed);
            }
          }
          v122 += 2;
          v121 += 2;
          v119 -= 16;
        }
        while (v119);
        float64_t v124 = (void *)*((void *)this + 73);
        if (v124 != v107)
        {
          float64_t v125 = v107;
          do
          {
            long long v126 = *((_OWORD *)v125 - 1);
            v125 -= 2;
            *((_OWORD *)v118 - 1) = v126;
            v118 -= 2;
            *float64_t v125 = 0;
            v125[1] = 0;
          }
          while (v125 != v124);
        }
        uint64_t v127 = v112 + 16 * v111;
        float64_t v128 = (void *)*((void *)this + 74);
        if (v128 != v107)
        {
          do
          {
            *v120++ = *(_OWORD *)v107;
            *double v107 = 0;
            v107[1] = 0;
            v107 += 2;
          }
          while (v107 != v128);
          double v107 = (void *)*((void *)this + 74);
        }
        double v129 = (void *)*((void *)this + 73);
        *((void *)this + 73) = v118;
        *((void *)this + 74) = v120;
        uint64_t v130 = *((void *)this + 75);
        for (*((void *)this + 75) = v127; v107 != v129; v107 -= 2)
        {
          float64_t v131 = (std::__shared_weak_count *)*(v107 - 1);
          if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        if (v129) {
          (*(void (**)(void, void *, uint64_t))(**((void **)this + 76) + 40))(*((void *)this + 76), v129, v130 - (void)v129);
        }
      }
    }
LABEL_215:
    if (v157)
    {
      float v158 = v157;
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v160 + 40))(v160, v157, v159 - (void)v157);
    }
LABEL_217:
    float64_t v144 = (uint64_t *)*((void *)this + 73);
    for (uint64_t k = (uint64_t *)*((void *)this + 74); v144 != k; v144 += 2)
    {
      uint64_t v146 = *v144;
      uint64_t v147 = *(void *)(*v144 + 288);
      if (!*(unsigned char *)(*(void *)(v147 + 640) + 140))
      {
        md::LabelImageLoader::enqueueIconForRendering(*(void *)(v162 + 264), (void *)(v147 + 640));
        uint64_t v146 = *v144;
      }
      float v148 = *((float *)this + 171);
      float v149 = *(float *)(v146 + 268);
      if (*(unsigned char *)(v146 + 264))
      {
        if (v149 <= 0.0) {
          continue;
        }
        float v150 = v149 + (float)(v148 * -2.5);
        *(float *)(v146 + 268) = v150;
        float v151 = 0.0;
        if (v150 > 0.0) {
          continue;
        }
      }
      else
      {
        if (v149 >= *(float *)(v146 + 272)) {
          continue;
        }
        uint64_t v152 = *(void *)(*(void *)(v146 + 288) + 640);
        if (!v152) {
          continue;
        }
        unsigned __int8 v153 = atomic_load((unsigned __int8 *)(v152 + 143));
        if ((v153 & 1) == 0) {
          continue;
        }
        float v154 = *(float *)(v146 + 268) + (float)(v148 * 2.5);
        *(float *)(v146 + 268) = v154;
        float v151 = *(float *)(v146 + 272);
        if (v154 < v151) {
          continue;
        }
      }
      *(float *)(v146 + 268) = v151;
      *(unsigned char *)(v146 + 265) = 0;
    }
    if (!(*(unsigned int (**)(md::MapNavLabeler *))(*(void *)this + 352))(this)
      || ([*((id *)this + 7) needsLayout] & 1) == 0)
    {
      if (!*((void *)this + 13) || !*(void *)(*((void *)this + 86) + 24) || !*((unsigned char *)this + 680)) {
        goto LABEL_239;
      }
      *((unsigned char *)this + 680) = 0;
    }
    *((unsigned char *)this + 824) = 1;
LABEL_239:
    if (v173)
    {
      (*(void (**)(void *))(*v173 + 48))(v173);
      if (v173 == v172)
      {
        (*(void (**)(void *))(v172[0] + 32))(v172);
      }
      else if (v173)
      {
        (*(void (**)(void))(*v173 + 40))();
      }
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
  }
}

void sub_1A1B31D30(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 144));
  _Unwind_Resume(a1);
}

BOOL md::MapNavLabeler::isNavApplicationStateActive(md::MapNavLabeler *this)
{
  return (unint64_t)*(unsigned __int8 *)(*(void *)(*((void *)this + 3) + 336) + 163) << 16 == 0x20000;
}

void ___ZN3ggl11Performance8Counters8instanceEv_block_invoke()
{
}

uint64_t ggl::Performance::Counters::setDisplayMode(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (*(_DWORD *)(v3 + 72 * a2 + 60))
  {
    uint64_t v4 = result;
    uint64_t v5 = v3 + 72 * a2;
    int v8 = *(_DWORD *)(v5 + 64);
    unint64_t v7 = (_DWORD *)(v5 + 64);
    int v6 = v8;
    if (*((void *)v7 - 3)) {
      int v9 = a3;
    }
    else {
      int v9 = 0;
    }
    if (v6 != v9)
    {
      uint64_t v10 = v3 + 72 * a2;
      float v13 = *(void **)(v10 + 48);
      unsigned int v12 = (void *)(v10 + 48);
      BOOL v11 = v13;
      if (v13)
      {
        if (*v11) {
          MEMORY[0x1A6239250](*v11, 0x1000C8000313F17);
        }
        uint64_t result = MEMORY[0x1A6239270](v11, 0x20C40960023A9);
        *unsigned int v12 = 0;
      }
      if (v9 == 2) {
        operator new();
      }
      _DWORD *v7 = v9;
    }
    *(unsigned char *)(v4 + 52) = 1;
  }
  return result;
}

unint64_t *ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    operator new();
  }
  uint64_t v6 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v6;
  a1[5] = 0;
  a1[6] = 0;
  {
    operator new();
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  if (v7 != a2)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_6:
    a1[11] = v7;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(void, unint64_t *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1 + 8);
LABEL_8:
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8)
  {
LABEL_11:
    a1[15] = v8;
    goto LABEL_13;
  }
  if (v8 != a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(void, unint64_t *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  unint64_t v9 = *a1;
  if (a1[2] - *a1 > 0x31F) {
    goto LABEL_26;
  }
  unint64_t v10 = a1[1];
  uint64_t v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 800, 8);
  uint64_t v12 = v10 - v9;
  unint64_t v13 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = *a1;
  unint64_t v14 = a1[1];
  unint64_t v16 = v14 - *a1;
  if (v14 == *a1)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  unint64_t v17 = v16 - 8;
  if (v16 - 8 >= 0x58)
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
    if (v14 - (v12 & 0xFFFFFFFFFFFFFFF8) - v11 >= 0x20)
    {
      uint64_t v19 = v12 >> 3;
      uint64_t v20 = (v17 >> 3) + 1;
      unint64_t v21 = (_OWORD *)(v11 + 8 * v19 - 16);
      uint64_t v22 = (long long *)(v14 - 16);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      unint64_t v18 = v13 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    unint64_t v18 = v11 + ((v10 - v9) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v25 = *(void *)(v14 - 8);
    v14 -= 8;
    *(void *)(v18 - 8) = v25;
    v18 -= 8;
  }
  while (v14 != v15);
LABEL_23:
  unint64_t v14 = *a1;
LABEL_24:
  *a1 = v18;
  a1[1] = v13;
  unint64_t v26 = a1[2];
  a1[2] = v11 + 800;
  if (v14) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[3] + 40))(a1[3], v14, v26 - v14);
  }
LABEL_26:
  unint64_t v27 = a1[4];
  if (a1[6] - v27 > 0x31F) {
    return a1;
  }
  unint64_t v28 = a1[5];
  uint64_t v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[7] + 16))(a1[7], 800, 8);
  uint64_t v30 = v28 - v27;
  unint64_t v31 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = a1[4];
  unint64_t v32 = a1[5];
  unint64_t v34 = v32 - v33;
  if (v32 == v33)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  unint64_t v35 = v34 - 8;
  if (v34 - 8 >= 0x58)
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    if (v32 - (v30 & 0xFFFFFFFFFFFFFFF8) - v29 >= 0x20)
    {
      uint64_t v37 = v30 >> 3;
      uint64_t v38 = (v35 >> 3) + 1;
      uint64_t v39 = (_OWORD *)(v29 + 8 * v37 - 16);
      uint64_t v40 = (long long *)(v32 - 16);
      uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        _OWORD *v39 = v42;
        v39 -= 2;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      unint64_t v36 = v31 - 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v32 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_36;
      }
    }
  }
  else
  {
    unint64_t v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    uint64_t v43 = *(void *)(v32 - 8);
    v32 -= 8;
    *(void *)(v36 - 8) = v43;
    v36 -= 8;
  }
  while (v32 != v33);
LABEL_36:
  unint64_t v32 = a1[4];
LABEL_37:
  a1[4] = v36;
  a1[5] = v31;
  unint64_t v44 = a1[6];
  a1[6] = v29 + 800;
  if (v32) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[7] + 40))(a1[7], v32, v44 - v32);
  }
  return a1;
}

void sub_1A1B32830(_Unwind_Exception *a1)
{
  std::function<ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::~function(v3);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v2);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_11PolygonFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AC98;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575CF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575CA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576998;
  a2[1] = v2;
  return result;
}

void md::LabelAnimator::createFadeAnimation(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, float *a6)
{
  *a6 = a3;
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v9 = (_DWORD *)(a1 + 24);
  if (v11 - v10 == -144)
  {
    while (v11 != v10)
    {
      unint64_t v13 = *(void **)(v11 - 144);
      v11 -= 144;
      uint64_t v12 = v13;
      if (v13 != *(void **)(v11 + 16)) {
        free(v12);
      }
    }
    *(void *)(a1 + 32) = v10;
  }
  else
  {
    std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(a1 + 24));
    uint64_t v10 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(a2 + 563) = 57 * ((v10 - *v9) >> 4) - 1;
  if (*(unsigned char *)(a5 + 4)) {
    operator new();
  }
  if (*(unsigned char *)(a5 + 20)) {
    operator new();
  }
}

void *std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 2 > v3) {
    unint64_t v3 = v5 >> 2;
  }
  BOOL v18 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  uint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v18) {
    uint64_t v6 = v3;
  }
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 8 * v6, 8);
    uint64_t v10 = (void *)(v9 + 8 * v2);
    uint64_t v6 = v9 + v8;
    if (v9) {
      *uint64_t v10 = *a2;
    }
  }
  else
  {
    uint64_t v10 = (void *)(8 * v2);
  }
  uint64_t v11 = v10 + 1;
  uint64_t v12 = *(char **)a1;
  unint64_t v13 = *(char **)(a1 + 8);
  if (v13 == *(char **)a1)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v11;
    uint64_t v28 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    goto LABEL_30;
  }
  unint64_t v14 = (unint64_t)&v13[-*(void *)a1 - 8];
  if (v14 <= 0x57
    || ((unint64_t v15 = (v12 - v13 + 7) & 0xFFFFFFFFFFFFFFF8,
         unint64_t v16 = (unint64_t)&v13[v15],
         unint64_t v17 = (char *)v10 + v15,
         v16 < (unint64_t)v10)
      ? (BOOL v18 = v17 >= v13)
      : (BOOL v18 = 1),
        !v18))
  {
    uint64_t v20 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      uint64_t v26 = *((void *)v20 - 1);
      v20 -= 8;
      *(void *)uint64_t v20 = 0;
      *--uint64_t v10 = v26;
    }
    while (v20 != v12);
    goto LABEL_23;
  }
  uint64_t v19 = (v14 >> 3) + 1;
  uint64_t v20 = &v13[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
  unint64_t v21 = v10 - 2;
  uint64_t v22 = v13 - 32;
  uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v25 = *(_OWORD *)v22;
    long long v24 = *((_OWORD *)v22 + 1);
    *(_OWORD *)uint64_t v22 = 0uLL;
    *((_OWORD *)v22 + 1) = 0uLL;
    v22 -= 32;
    *(v21 - 1) = v25;
    _OWORD *v21 = v24;
    v21 -= 2;
    v23 -= 4;
  }
  while (v23);
  v10 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_22;
  }
LABEL_23:
  unint64_t v13 = *(char **)a1;
  unint64_t v27 = *(char **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  uint64_t v28 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  while (v27 != v13)
  {
    uint64_t v30 = (uint64_t *)*((void *)v27 - 1);
    v27 -= 8;
    uint64_t v29 = v30;
    *(void *)unint64_t v27 = 0;
    if (v30)
    {
      uint64_t v31 = *v29;
      if (*v29)
      {
        v29[1] = v31;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29[3] + 40))(v29[3], v31, v29[2] - v31);
      }
      MEMORY[0x1A6239270](v29, 0x1020C4034EA8E73);
    }
  }
LABEL_30:
  if (v13) {
    (*(void (**)(void, char *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13, v28 - (void)v13);
  }
  return v11;
}

uint64_t std::vector<md::LabelAnimationItem,geo::StdAllocator<md::LabelAnimationItem,mdm::Allocator>>::__emplace_back_slow_path<float,float,md::LabelEasing const&,BOOL &>(uint64_t *a1, _DWORD *a2, float *a3, unsigned __int8 *a4, char *a5)
{
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  BOOL v9 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
  uint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
  if (!v9) {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v15 = 32 * v10;
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 32 * v10, 8);
    uint64_t v17 = v16 + 32 * v5;
    uint64_t v10 = v16 + v15;
    if (v16)
    {
      float v18 = fmaxf(*a3, 0.000001);
      unint64_t v19 = *a4;
      char v20 = *a5;
      *(_DWORD *)uint64_t v17 = *a2;
      *(float *)(v17 + 4) = v18;
      *(void *)(v17 + 8) = 0;
      *(unsigned char *)(v17 + 16) = v20;
      unint64_t v21 = EaseConstantOne;
      if (v19 <= 0x13) {
        unint64_t v21 = (float (*)(float))easingFunctions[v19];
      }
      *(void *)(v16 + 32 * v5 + 24) = v21;
    }
  }
  else
  {
    uint64_t v17 = 32 * v5;
  }
  uint64_t v22 = v17 + 32;
  uint64_t v24 = *a1;
  uint64_t v23 = a1[1];
  if (v23 != *a1)
  {
    do
    {
      long long v25 = *(_OWORD *)(v23 - 16);
      *(_OWORD *)(v17 - 32) = *(_OWORD *)(v23 - 32);
      *(_OWORD *)(v17 - 16) = v25;
      v17 -= 32;
      v23 -= 32;
    }
    while (v23 != v24);
    uint64_t v23 = *a1;
  }
  *a1 = v17;
  a1[1] = v22;
  uint64_t v26 = a1[2];
  a1[2] = v10;
  if (v23) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v23, v26 - v23);
  }
  return v22;
}

void std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = 0x1C71C71C71C71C7;
    unint64_t v5 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 4);
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0x1C71C71C71C71C7) {
      abort();
    }
    if (2 * v5 > v6) {
      unint64_t v6 = 2 * v5;
    }
    if (v5 < 0xE38E38E38E38E3) {
      uint64_t v4 = v6;
    }
    if (v4)
    {
      uint64_t v7 = 144 * v4;
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 144 * v4, 8);
      uint64_t v9 = v8 + 144 * v5;
      uint64_t v10 = v8 + v7;
      if (v8)
      {
        *(_OWORD *)(v9 + 112) = 0u;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(void *)uint64_t v9 = v9 + 32;
        *(void *)(v9 + 8) = v9 + 32;
        *(void *)(v9 + 16) = v9 + 32;
        *(void *)(v9 + 24) = 1;
        unint64_t v11 = v8 + 144 * v5;
        *(_DWORD *)(v11 + 68) = 1065353216;
        *(_DWORD *)(v11 + 84) = 1065353216;
        *(void *)(v11 + 96) = 0;
        *(void *)(v11 + 104) = 0;
        *(void *)(v11 + 88) = 0;
        *(_WORD *)(v11 + 112) = 0;
        *(void *)(v11 + 120) = 0;
        *(void *)(v11 + 128) = 0;
        *(_DWORD *)(v11 + 136) = 0;
      }
    }
    else
    {
      uint64_t v9 = 144 * v5;
      uint64_t v10 = 0;
    }
    uint64_t v12 = v9 + 144;
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    if (v14 == *a1)
    {
      *a1 = v9;
      a1[1] = v12;
      a1[2] = v10;
    }
    else
    {
      do
      {
        uint64_t v20 = v9;
        uint64_t v21 = v14;
        uint64_t v22 = v9 - 112;
        *(void *)(v9 - 144) = v9 - 112;
        v9 -= 144;
        uint64_t v24 = *(void *)(v14 - 144);
        v14 -= 144;
        uint64_t v23 = v24;
        *(void *)(v9 + 8) = v22;
        *(void *)(v9 + 16) = v22;
        uint64_t v25 = *(void *)(v14 + 16);
        *(void *)(v9 + 24) = *(void *)(v14 + 24);
        if (v24 == v25)
        {
          *(void *)(v20 - 136) = v22 + *(void *)(v21 - 136) - v23;
          uint64_t v26 = *(void *)(v21 - 136);
          if (v23 != v26)
          {
            uint64_t v27 = 0;
            do
            {
              uint64_t v28 = v20 + v27;
              long long v29 = *(_OWORD *)(v23 + v27);
              *(void *)(v28 - 96) = *(void *)(v23 + v27 + 16);
              *(_OWORD *)(v28 - 112) = v29;
              v27 += 24;
            }
            while (v23 + v27 != v26);
          }
        }
        else
        {
          uint64_t v15 = *(void *)(v21 - 136);
          *(void *)(v20 - 144) = v23;
          *(void *)(v20 - 136) = v15;
          *(_OWORD *)uint64_t v14 = 0uLL;
          *(_OWORD *)(v14 + 16) = 0uLL;
        }
        long long v16 = *(_OWORD *)(v21 - 88);
        *(_OWORD *)(v20 - 72) = *(_OWORD *)(v21 - 72);
        *(_OWORD *)(v20 - 88) = v16;
        long long v17 = *(_OWORD *)(v21 - 56);
        long long v18 = *(_OWORD *)(v21 - 40);
        long long v19 = *(_OWORD *)(v21 - 24);
        *(_DWORD *)(v20 - 8) = *(_DWORD *)(v21 - 8);
        *(_OWORD *)(v20 - 24) = v19;
        *(_OWORD *)(v20 - 40) = v18;
        *(_OWORD *)(v20 - 56) = v17;
      }
      while (v14 != v13);
      uint64_t v14 = *a1;
      uint64_t v30 = a1[1];
      *a1 = v9;
      a1[1] = v12;
      a1[2] = v10;
      while (v30 != v14)
      {
        unint64_t v32 = *(void **)(v30 - 144);
        v30 -= 144;
        uint64_t v31 = v32;
        if (v32 != *(void **)(v30 + 16)) {
          free(v31);
        }
      }
    }
    if (v14)
    {
      unint64_t v33 = *(void (**)(void))(*(void *)a1[3] + 40);
      v33();
    }
  }
  else
  {
    if (v2)
    {
      *(_OWORD *)(v2 + 80) = 0u;
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(_OWORD *)(v2 + 128) = 0u;
      *(_OWORD *)(v2 + 48) = 0u;
      *(_OWORD *)(v2 + 64) = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(void *)uint64_t v2 = v2 + 32;
      *(void *)(v2 + 8) = v2 + 32;
      *(void *)(v2 + 16) = v2 + 32;
      *(void *)(v2 + 24) = 1;
      *(_DWORD *)(v2 + 68) = 1065353216;
      *(_DWORD *)(v2 + 84) = 1065353216;
      *(void *)(v2 + 96) = 0;
      *(void *)(v2 + 104) = 0;
      *(void *)(v2 + 88) = 0;
      *(_WORD *)(v2 + 112) = 0;
      *(void *)(v2 + 120) = 0;
      *(void *)(v2 + 128) = 0;
      *(_DWORD *)(v2 + 136) = 0;
    }
    a1[1] = v2 + 144;
  }
}

uint64_t std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57A6A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5210C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF521038;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579C38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579BA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578DE0;
  a2[1] = v2;
  return result;
}

void std::__format::__vformat_to[abi:nn180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unsigned __int8 *)*a1;
  uint64_t v2 = (unsigned __int8 *)a1[1];
  if ((unsigned __int8 *)*a1 != v2)
  {
    do
    {
      uint64_t v6 = *a2;
      while (1)
      {
        int v7 = (char)*v3;
        if (v7 != 125) {
          break;
        }
        if (++v3 == v2 || (int v7 = *v3, v7 != 125))
        {
          ((void (*)(const char *))std::__throw_format_error[abi:nn180100])("The format string contains an invalid escape sequence");
LABEL_27:
          ((void (*)(const char *))std::__throw_format_error[abi:nn180100])("The replacement field misses a terminating '}'");
LABEL_28:
          ((void (*)(const char *))std::__throw_format_error[abi:nn180100])("The argument index should end with a ':' or a '}'");
LABEL_29:
          ((void (*)(const char *))std::__throw_format_error[abi:nn180100])("The format string terminates at a '{'");
        }
LABEL_11:
        uint64_t v8 = *(void *)v6;
        uint64_t v9 = *(void *)(v6 + 16);
        *(void *)(v6 + 16) = v9 + 1;
        *(unsigned char *)(v8 + v9) = v7;
        if (*(void *)(v6 + 16) == *(void *)(v6 + 8))
        {
          (*(void (**)(void))(v6 + 24))(*(void *)v6);
          *(void *)(v6 + 16) = 0;
        }
        if (++v3 == v2) {
          return;
        }
      }
      if (v7 != 123) {
        goto LABEL_11;
      }
      if (++v3 == v2) {
        goto LABEL_29;
      }
      int v7 = *v3;
      if (v7 == 123) {
        goto LABEL_11;
      }
      *a2 = v6;
      uint64_t v10 = (unsigned __int8 *)std::__format::__parse_arg_id[abi:nn180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)v3, v2, (uint64_t)a1);
      if (v2 == v10) {
        goto LABEL_28;
      }
      int v12 = (char)*v10;
      BOOL v22 = v12 == 58;
      if (v12 == 125) {
        goto LABEL_17;
      }
      if (v12 != 58) {
        goto LABEL_28;
      }
      ++v10;
LABEL_17:
      *a1 = (uint64_t)v10;
      v21[0] = a1;
      v21[1] = a2;
      void v21[2] = (uint64_t *)&v22;
      unint64_t v13 = a2[1];
      if (v13 <= v11)
      {
        LOBYTE(v24) = 0;
      }
      else if (v13 > 0xC)
      {
        long long v18 = (long long *)(a2[2] + 32 * v11);
        long long v19 = v18[1];
        long long v23 = *v18;
        long long v24 = v19;
      }
      else
      {
        uint64_t v14 = (uint64_t *)(a2[2] + 16 * v11);
        uint64_t v16 = *v14;
        uint64_t v15 = v14[1];
        uint64_t v17 = ((unint64_t)a2[3] >> (5 * v11)) & 0x1F;
        *(void *)&long long v23 = v16;
        *((void *)&v23 + 1) = v15;
        LOBYTE(v24) = v17;
      }
      std::__visit_format_arg[abi:nn180100]<char const* std::__format::__handle_replacement_field[abi:nn180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v21, (unsigned __int8 *)&v23);
      uint64_t v20 = (unsigned char *)*a1;
      if ((unsigned __int8 *)*a1 == v2 || *v20 != 125) {
        goto LABEL_27;
      }
      uint64_t v3 = v20 + 1;
    }
    while (v20 + 1 != v2);
  }
}

uint64_t std::__format::__parse_arg_id[abi:nn180100]<char const*,std::basic_format_parse_context<char>>(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = *(char *)result;
  if (v3 == 125 || (unsigned __int8 v4 = v3 - 58, v3 == 58))
  {
    int v7 = *(_DWORD *)(a3 + 16);
    if (!v7)
    {
LABEL_26:
      *(_DWORD *)(a3 + 16) = 2;
      goto LABEL_27;
    }
    if (v7 != 1)
    {
LABEL_27:
      ++*(void *)(a3 + 24);
      return result;
    }
    uint64_t result = ((uint64_t (*)(const char *))std::__throw_format_error[abi:nn180100])("Using automatic argument numbering in manual argument numbering mode");
  }
  else
  {
    unsigned int v5 = v3 - 48;
    if (!v5)
    {
      int v6 = *(_DWORD *)(a3 + 16);
      if (v6)
      {
        if (v6 == 2) {
          goto LABEL_25;
        }
      }
      else
      {
        *(_DWORD *)(a3 + 16) = 1;
      }
      return ++result;
    }
  }
  if (v4 <= 0xF5u)
  {
    ((void (*)(const char *))std::__throw_format_error[abi:nn180100])("The argument index starts with an invalid character");
    goto LABEL_36;
  }
  uint64_t v8 = (unsigned __int8 *)(result + 9);
  if ((uint64_t)&a2[-result] <= 9) {
    uint64_t v8 = a2;
  }
  uint64_t v9 = (unsigned __int8 *)(result + 1);
  if ((unsigned __int8 *)(result + 1) != v8)
  {
    result += (uint64_t)&v8[~result];
    while (1)
    {
      int v10 = *v9;
      if ((v10 - 58) < 0xFFFFFFF6) {
        break;
      }
      unsigned int v5 = v10 + 10 * v5 - 48;
      if (++v9 == v8)
      {
        uint64_t v9 = v8;
        goto LABEL_18;
      }
    }
LABEL_28:
    uint64_t result = (uint64_t)v9;
    int v12 = *(_DWORD *)(a3 + 16);
    if (!v12) {
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_18:
  if (v9 == a2)
  {
    uint64_t result = (uint64_t)a2;
    int v12 = *(_DWORD *)(a3 + 16);
    if (!v12) {
      goto LABEL_29;
    }
    goto LABEL_24;
  }
  uint64_t v11 = *v9;
  if ((v11 - 48) > 9) {
    goto LABEL_28;
  }
  if ((v11 + 10 * (unint64_t)v5 - 48) >> 31
    || (result += 2, (unsigned __int8 *)result != a2) && *(unsigned __int8 *)result - 48 <= 9)
  {
LABEL_36:
    uint64_t v13 = ((uint64_t (*)(const char *))std::__throw_format_error[abi:nn180100])("The numeric value of the format specifier is too large");
    return std::__visit_format_arg[abi:nn180100]<char const* std::__format::__handle_replacement_field[abi:nn180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v13);
  }
  int v12 = *(_DWORD *)(a3 + 16);
  if (!v12)
  {
LABEL_29:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
LABEL_24:
  if (v12 == 2)
  {
LABEL_25:
    uint64_t result = ((uint64_t (*)(const char *))std::__throw_format_error[abi:nn180100])("Using manual argument numbering in automatic argument numbering mode");
    goto LABEL_26;
  }
  return result;
}

void std::__visit_format_arg[abi:nn180100]<char const* std::__format::__handle_replacement_field[abi:nn180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, unsigned __int8 *a2)
{
  v558[128] = *MEMORY[0x1E4F143B8];
  switch(a2[16])
  {
    case 1u:
      int v3 = (void *)*a2;
      v553[0].__locale_ = 0;
      LODWORD(v553[1].__locale_) = -1;
      BYTE4(v553[1].__locale_) = 32;
      *(_WORD *)((char *)&v553[1].__locale_ + 5) = 0;
      HIBYTE(v553[1].__locale_) = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_229;
      }
      unsigned __int8 v4 = *a1;
      uint64_t v5 = ((uint64_t (*)(std::locale *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(v553, *a1, 311);
      uint64_t v6 = v5;
      if (BYTE1(v553[0].__locale_) - 2 < 6)
      {
        uint64_t *v4 = v5;
        int v7 = (std::locale *)a1[1];
        uint64_t v8 = (char *)v553;
        goto LABEL_53;
      }
      if (BYTE1(v553[0].__locale_) > 1u) {
        goto LABEL_1140;
      }
      std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)v553, "a BOOL");
      if (((uint64_t)v553[0].__locale_ & 7) == 0) {
        LOBYTE(v553[0].__locale_) = (uint64_t)v553[0].__locale_ & 0xF8 | 1;
      }
      uint64_t *v4 = v6;
LABEL_229:
      int v7 = (std::locale *)a1[1];
      uint64_t v155 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)v553, v7);
      unint64_t v157 = v156;
      if ((v155 & 0x40) == 0)
      {
        BOOL v158 = v3 == 0;
        if (v3) {
          size_t v60 = 4;
        }
        else {
          size_t v60 = 5;
        }
        locale = v7->__locale_;
        if (v158) {
          uint64_t v59 = "false";
        }
        else {
          uint64_t v59 = "true";
        }
        double v61 = v7->__locale_;
        uint64_t v31 = v155;
        unint64_t v62 = v157;
        uint64_t v73 = v60;
        goto LABEL_82;
      }
      if (!LOBYTE(v7[5].__locale_))
      {
        MEMORY[0x1A6239040](&v556);
        if (LOBYTE(v7[5].__locale_))
        {
          std::locale::operator=(v7 + 4, (const std::locale *)&v556);
        }
        else
        {
          std::locale::locale(v7 + 4, (const std::locale *)&v556);
          LOBYTE(v7[5].__locale_) = 1;
        }
        std::locale::~locale((std::locale *)&v556);
      }
      std::locale::locale((std::locale *)&v556, v7 + 4);
      long long v277 = std::locale::use_facet((const std::locale *)&v556, MEMORY[0x1E4FBA2A0]);
      std::locale::~locale((std::locale *)&v556);
      long long v278 = v277->__vftable;
      if (v3) {
        ((void (*)(int8x16_t *__return_ptr, const std::locale::facet *))v278[2].~facet)(&v556, v277);
      }
      else {
        ((void (*)(int8x16_t *__return_ptr, const std::locale::facet *))v278[2].~facet_0)(&v556, v277);
      }
      if (SHIBYTE(__src) >= 0) {
        long long v279 = &v556;
      }
      else {
        long long v279 = (int8x16_t *)v556.i64[0];
      }
      if (SHIBYTE(__src) >= 0) {
        size_t v280 = HIBYTE(__src);
      }
      else {
        size_t v280 = v556.u64[1];
      }
      long long v281 = (std::locale::__imp *)std::__formatter::__write_string_no_precision[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((unsigned __int8 *)v279, v280, v7->__locale_, v155, v157);
      if (SHIBYTE(__src) < 0) {
        operator delete((void *)v556.i64[0]);
      }
      v7->__locale_ = v281;
      return;
    case 2u:
      int v3 = (void *)*a2;
      v556.i64[0] = 0;
      v556.i32[2] = -1;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2])
      {
        int v7 = (std::locale *)a1[1];
        goto LABEL_146;
      }
      unint64_t v46 = *a1;
      uint64_t v47 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 311);
      int v48 = v556.u8[1];
      if (v556.u8[1] - 2 < 6) {
        goto LABEL_50;
      }
      if (v556.u8[1] <= 0x13u && ((1 << v556.i8[1]) & 0x80401) != 0)
      {
        std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)&v556, "a character");
        if ((v556.i8[0] & 7) == 0) {
          v556.i8[0] = v556.i8[0] & 0xF8 | 1;
        }
LABEL_50:
        uint64_t *v46 = v47;
        int v7 = (std::locale *)a1[1];
        if (v48 != 10 && v48)
        {
          uint64_t v8 = (char *)&v556;
LABEL_53:
          unint64_t v49 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v8, v7);
          unint64_t v51 = v50;
          uint64_t v52 = v3;
          uint64_t v53 = (uint64_t)v7;
          goto LABEL_134;
        }
LABEL_146:
        unint64_t v67 = v7->__locale_;
        uint64_t v44 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
        unint64_t v45 = v108;
        goto LABEL_147;
      }
      goto LABEL_1141;
    case 3u:
      int v54 = *(_DWORD *)a2;
      v556.i64[0] = 0;
      v556.i32[2] = -1;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_61;
      }
      unint64_t v55 = *a1;
      uint64_t v56 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 311);
      if (v556.u8[1] - 2 < 6 || v556.u8[1] == 0) {
        goto LABEL_60;
      }
      if (v556.u8[1] != 10) {
        goto LABEL_1136;
      }
      std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)&v556, "an integer");
      if ((v556.i8[0] & 7) == 0) {
        v556.i8[0] = v556.i8[0] & 0xF8 | 1;
      }
LABEL_60:
      uint64_t *v55 = v56;
LABEL_61:
      int v7 = (std::locale *)a1[1];
      uint64_t v31 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
      unint64_t v32 = v58;
      if ((v31 & 0xFF00) != 0xA00)
      {
        if (v54 >= 0) {
          unint64_t v102 = v54;
        }
        else {
          unint64_t v102 = -v54;
        }
        uint64_t v25 = (std::locale::__imp *)std::__formatter::__format_integer[abi:nn180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((void *)v102, (uint64_t)v7, v31, v58, v54 < 0);
        goto LABEL_139;
      }
      if (v54 != (char)v54) {
        goto LABEL_1133;
      }
      locale = v7->__locale_;
      LOBYTE(v553[0].__locale_) = v54;
LABEL_64:
      uint64_t v59 = (char *)v553;
      size_t v60 = 1;
      double v61 = locale;
      unint64_t v62 = v32;
      goto LABEL_81;
    case 4u:
      uint64_t v26 = *(void *)a2;
      v556.i64[0] = 0;
      v556.i32[2] = -1;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_26;
      }
      uint64_t v27 = *a1;
      uint64_t v28 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 311);
      if (v556.u8[1] - 2 < 6 || v556.u8[1] == 0) {
        goto LABEL_25;
      }
      if (v556.u8[1] != 10) {
        goto LABEL_1136;
      }
      std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)&v556, "an integer");
      if ((v556.i8[0] & 7) == 0) {
        v556.i8[0] = v556.i8[0] & 0xF8 | 1;
      }
LABEL_25:
      uint64_t *v27 = v28;
LABEL_26:
      int v7 = (std::locale *)a1[1];
      uint64_t v31 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
      unint64_t v32 = v30;
      if ((v31 & 0xFF00) != 0xA00)
      {
        if (v26 >= 0) {
          unint64_t v101 = v26;
        }
        else {
          unint64_t v101 = -v26;
        }
        uint64_t v25 = (std::locale::__imp *)std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v101, (uint64_t)v7, v31, v30, v26 < 0);
        goto LABEL_139;
      }
      if (v26 != (char)v26) {
        goto LABEL_1133;
      }
      locale = v7->__locale_;
      LOBYTE(v553[0].__locale_) = v26;
      goto LABEL_64;
    case 5u:
      unint64_t v68 = *(void *)a2;
      uint64_t v69 = *((void *)a2 + 1);
      v556.i64[0] = 0;
      v556.i32[2] = -1;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_78;
      }
      uint64_t v70 = *a1;
      uint64_t v71 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 311);
      if (v556.u8[1] - 2 < 6 || !v556.i8[1]) {
        goto LABEL_77;
      }
      if (v556.u8[1] != 10) {
        goto LABEL_1136;
      }
      std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)&v556, "an integer");
      if ((v556.i8[0] & 7) == 0) {
        v556.i8[0] = v556.i8[0] & 0xF8 | 1;
      }
LABEL_77:
      *uint64_t v70 = v71;
LABEL_78:
      int v7 = (std::locale *)a1[1];
      uint64_t v31 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
      unint64_t v62 = v72;
      if ((v31 & 0xFF00) != 0xA00)
      {
        uint64_t v25 = (std::locale::__imp *)std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((v68 ^ (v69 >> 63)) - (v69 >> 63), (__PAIR128__(v69 ^ (unint64_t)(v69 >> 63), v68 ^ (v69 >> 63))- __PAIR128__(v69 >> 63, v69 >> 63)) >> 64, (uint64_t)v7, v31, v72, v69 < 0);
        goto LABEL_139;
      }
      if (__PAIR128__(-1, -257) < __PAIR128__((unint64_t)(v68 >= 0x80) + v69 - 1, v68 - 128))
      {
        locale = v7->__locale_;
        LOBYTE(v553[0].__locale_) = v68;
        uint64_t v59 = (char *)v553;
        size_t v60 = 1;
        double v61 = locale;
LABEL_81:
        uint64_t v73 = 1;
LABEL_82:
        std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v59, v60, v61, v31, v62, v73);
        v7->__locale_ = locale;
        return;
      }
      goto LABEL_1133;
    case 6u:
      int v3 = (void *)*(unsigned int *)a2;
      v556.i64[0] = 0;
      v556.i32[2] = -1;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_72;
      }
      uint64_t v63 = *a1;
      uint64_t v64 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 311);
      if (v556.u8[1] - 2 < 6 || v556.u8[1] == 0) {
        goto LABEL_71;
      }
      if (v556.u8[1] != 10) {
        goto LABEL_1136;
      }
      std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)&v556, "an integer");
      if ((v556.i8[0] & 7) == 0) {
        v556.i8[0] = v556.i8[0] & 0xF8 | 1;
      }
LABEL_71:
      *uint64_t v63 = v64;
LABEL_72:
      int v7 = (std::locale *)a1[1];
      uint64_t v44 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
      unint64_t v45 = v66;
      if ((v44 & 0xFF00) != 0xA00)
      {
        uint64_t v52 = v3;
        uint64_t v53 = (uint64_t)v7;
        unint64_t v49 = v44;
        unint64_t v51 = v45;
LABEL_134:
        uint64_t v25 = (std::locale::__imp *)std::__formatter::__format_integer[abi:nn180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v52, v53, v49, v51, 0);
        goto LABEL_139;
      }
      if (v3 >= 0x80) {
        goto LABEL_1133;
      }
      unint64_t v67 = v7->__locale_;
LABEL_147:
      LOBYTE(v553[0].__locale_) = (_BYTE)v3;
      goto LABEL_148;
    case 7u:
      unint64_t v39 = *(void *)a2;
      v556.i64[0] = 0;
      v556.i32[2] = -1;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_90;
      }
      uint64_t v74 = *a1;
      uint64_t v75 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 311);
      if (v556.u8[1] - 2 < 6 || v556.u8[1] == 0) {
        goto LABEL_89;
      }
      if (v556.u8[1] != 10) {
        goto LABEL_1136;
      }
      std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)&v556, "an integer");
      if ((v556.i8[0] & 7) == 0) {
        v556.i8[0] = v556.i8[0] & 0xF8 | 1;
      }
LABEL_89:
      *uint64_t v74 = v75;
LABEL_90:
      int v7 = (std::locale *)a1[1];
      uint64_t v44 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
      unint64_t v45 = v77;
      if ((v44 & 0xFF00) != 0xA00)
      {
        uint64_t v25 = (std::locale::__imp *)std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v39, (uint64_t)v7, v44, v77, 0);
        goto LABEL_139;
      }
      if (v39 < 0x80) {
        goto LABEL_92;
      }
      goto LABEL_1133;
    case 8u:
      unint64_t v39 = *(void *)a2;
      unint64_t v40 = *((void *)a2 + 1);
      v556.i64[0] = 0;
      v556.i32[2] = -1;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_41;
      }
      uint64_t v41 = *a1;
      uint64_t v42 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 311);
      if (v556.u8[1] - 2 < 6 || !v556.i8[1]) {
        goto LABEL_40;
      }
      if (v556.u8[1] == 10)
      {
        std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)&v556, "an integer");
        if ((v556.i8[0] & 7) == 0) {
          v556.i8[0] = v556.i8[0] & 0xF8 | 1;
        }
LABEL_40:
        uint64_t *v41 = v42;
LABEL_41:
        int v7 = (std::locale *)a1[1];
        uint64_t v44 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
        unint64_t v45 = v43;
        if ((v44 & 0xFF00) != 0xA00)
        {
          uint64_t v25 = (std::locale::__imp *)std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v39, v40, (uint64_t)v7, v44, v43, 0);
LABEL_139:
          v7->__locale_ = v25;
          return;
        }
        if (__PAIR128__(v40, v39) < 0x80)
        {
LABEL_92:
          unint64_t v67 = v7->__locale_;
          LOBYTE(v553[0].__locale_) = v39;
LABEL_148:
          std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((char *)v553, 1uLL, v67, v44, v45, 1);
LABEL_149:
          v7->__locale_ = v67;
          return;
        }
LABEL_1133:
        ((void (*)(const char *))std::__throw_format_error[abi:nn180100])("Integral value outside the range of the char type");
LABEL_1134:
        ((void (*)(const char *))std::__throw_format_error[abi:nn180100])("The argument index value is too large for the number of arguments supplied");
LABEL_1135:
        abort();
      }
LABEL_1136:
      std::__format_spec::__throw_invalid_type_format_error[abi:nn180100]("an integer");
LABEL_1137:
      ((void (*)(const char *))std::__throw_format_error[abi:nn180100])("The type option contains an invalid value for a string formatting argument");
LABEL_1138:
      std::__format_spec::__throw_invalid_type_format_error[abi:nn180100]("a pointer");
      goto LABEL_1139;
    case 9u:
      float v34 = *(float *)a2;
      v545.__locale_ = 0;
      int v546 = -1;
      char v547 = 32;
      __int16 v548 = 0;
      char v549 = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_153;
      }
      unint64_t v35 = *a1;
      uint64_t v36 = ((uint64_t (*)(std::locale *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v545, *a1, 319);
      if (BYTE1(v545.__locale_) - 13 < 6)
      {
        if (v546 != -1 || SWORD1(v545.__locale_) <= -1) {
          int v38 = v546;
        }
        else {
          int v38 = 6;
        }
        int v546 = v38;
        goto LABEL_152;
      }
      if (BYTE1(v545.__locale_) > 0xCu || ((1 << SBYTE1(v545.__locale_)) & 0x1801) == 0) {
        goto LABEL_1139;
      }
LABEL_152:
      uint64_t *v35 = v36;
LABEL_153:
      unint64_t v109 = a1[1];
      uint64_t v112 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v545, v109);
      unint64_t v113 = v110;
      float v114 = v34;
      if (v34 < 0.0) {
        float v34 = -v34;
      }
      if (v110 == -1) {
        uint64_t v115 = 149;
      }
      else {
        uint64_t v115 = v110;
      }
      v556.i64[0] = v115;
      if ((int)v115 < 150)
      {
        uint64_t v116 = (int)v115 + 45;
        v556.i64[1] = v116;
        if ((v115 + 45) >= 0x101)
        {
          uint64_t v117 = (char *)operator new((int)v115 + 45);
          uint64_t v115 = v113;
          goto LABEL_163;
        }
      }
      else
      {
        v556.i32[0] = 149;
        v556.i32[1] = v115 - 149;
        uint64_t v116 = 194;
        v556.i64[1] = 194;
        uint64_t v115 = 149;
      }
      uint64_t v117 = (char *)v558;
LABEL_163:
      char v118 = v112;
      uint64_t v119 = BYTE1(v112);
      __src = v117;
      uint64_t v542 = v112;
      if ((LODWORD(v114) & 0x80000000) != 0)
      {
        char v122 = 45;
        goto LABEL_205;
      }
      int v120 = (v112 >> 3) & 3;
      if (v120 == 2)
      {
        char v122 = 43;
        goto LABEL_205;
      }
      double v121 = (int8x16_t *)v117;
      if (v120 == 3)
      {
        char v122 = 32;
LABEL_205:
        *uint64_t v117 = v122;
        double v121 = (int8x16_t *)(v117 + 1);
      }
      unsigned __int8 v541 = BYTE4(v113);
      switch(v119)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          goto LABEL_1142;
        case 11:
          if ((v113 & 0x80000000) != 0) {
            uint64_t v159 = std::to_chars();
          }
          else {
            uint64_t v159 = MEMORY[0x1A6239190](v121, &v117[v116], 4, v115, v34);
          }
          uint64_t v147 = (char *)v159;
          float v149 = &v121->i8[1];
          if (v121->i8[1] != 46) {
            goto LABEL_420;
          }
          float v221 = memchr((void *)(v159 - 5), 112, 3uLL);
          if (v221) {
            unint64_t v150 = (unint64_t)v221;
          }
          else {
            unint64_t v150 = (unint64_t)(v147 - 2);
          }
          goto LABEL_588;
        case 12:
          if ((v113 & 0x80000000) != 0) {
            uint64_t v160 = std::to_chars();
          }
          else {
            uint64_t v160 = MEMORY[0x1A6239190](v121, &v117[v116], 4, v115, v34);
          }
          uint64_t v147 = (char *)v160;
          float v149 = &v121->i8[1];
          if (v121->i8[1] != 46)
          {
            float64_t v223 = &v121->i8[1];
            float v149 = (char *)v160;
            goto LABEL_429;
          }
          double v222 = (char *)memchr((void *)(v160 - 5), 112, 3uLL);
          if (v222) {
            float64_t v223 = v222;
          }
          else {
            float64_t v223 = v147 - 2;
          }
          unint64_t v150 = (unint64_t)v121;
          if (v223 != (char *)v121)
          {
LABEL_429:
            unint64_t v224 = v223 - (char *)v121;
            float v225 = (char *)v121;
            if ((unint64_t)(v223 - (char *)v121) < 8) {
              goto LABEL_534;
            }
            if (v224 >= 0x10)
            {
              unint64_t v226 = v224 & 0xFFFFFFFFFFFFFFF0;
              v286.i64[0] = 0x6000000060;
              v286.i64[1] = 0x6000000060;
              v287.i64[0] = 0x600000006;
              v287.i64[1] = 0x600000006;
              v288.i64[0] = 0x4141414141414141;
              v288.i64[1] = 0x4141414141414141;
              unint64_t v289 = v224 & 0xFFFFFFFFFFFFFFF0;
              uint64_t v290 = v121;
              do
              {
                int16x8_t v291 = vmovl_high_s8(*v290);
                int16x8_t v292 = vmovl_s8(*(int8x8_t *)v290->i8);
                v563.val[0] = (int8x16_t)vaddw_s16(v286, *(int16x4_t *)v292.i8);
                v563.val[1] = (int8x16_t)vaddw_high_s16(v286, v292);
                v563.val[2] = (int8x16_t)vaddw_s16(v286, *(int16x4_t *)v291.i8);
                v563.val[3] = (int8x16_t)vaddw_high_s16(v286, v291);
                *uint64_t v290 = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v287, (uint32x4_t)v563.val[0]), (int16x8_t)vcgtq_u32(v287, (uint32x4_t)v563.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v287, (uint32x4_t)v563.val[2]), (int16x8_t)vcgtq_u32(v287, (uint32x4_t)v563.val[3]))), vaddq_s8(vqtbl4q_s8(v563, (int8x16_t)xmmword_1A28FE720), v288), *v290);
                ++v290;
                v289 -= 16;
              }
              while (v289);
              if (v224 == v226) {
                goto LABEL_537;
              }
              if ((v224 & 8) == 0)
              {
                float v225 = &v121->i8[v226];
                goto LABEL_534;
              }
            }
            else
            {
              unint64_t v226 = 0;
            }
            float v225 = &v121->i8[v224 & 0xFFFFFFFFFFFFFFF8];
            float v227 = (int8x8_t *)&v121->i8[v226];
            unint64_t v228 = v226 - (v224 & 0xFFFFFFFFFFFFFFF8);
            v229.i64[0] = 0x6000000060;
            v229.i64[1] = 0x6000000060;
            v230.i64[0] = 0x600000006;
            v230.i64[1] = 0x600000006;
            do
            {
              int16x8_t v231 = vmovl_s8(*v227);
              v560.val[0] = (int8x16_t)vaddw_s16(v229, *(int16x4_t *)v231.i8);
              v560.val[1] = (int8x16_t)vaddw_high_s16(v229, v231);
              int8x8_t *v227 = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v230, (uint32x4_t)v560.val[0]), (int16x8_t)vcgtq_u32(v230, (uint32x4_t)v560.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v560, (int8x16_t)xmmword_1A28FF670), (int8x8_t)0x4141414141414141), *v227);
              ++v227;
              v228 += 8;
            }
            while (v228);
            if (v224 == (v224 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_537:
              unint64_t v150 = (unint64_t)v223;
              goto LABEL_538;
            }
            do
            {
LABEL_534:
              int v293 = *v225;
              if ((v293 - 97) < 6) {
                LOBYTE(v293) = v293 - 32;
              }
              *v225++ = v293;
            }
            while (v225 != v223);
            goto LABEL_537;
          }
LABEL_538:
          *(unsigned char *)unint64_t v150 = 80;
LABEL_588:
          if ((v118 & 0x20) != 0)
          {
            if (v149 == v147)
            {
              char *v147 = 46;
              if ((char *)v150 != v147)
              {
                if ((char *)(v150 + 1) == v147)
                {
                  char v315 = *(unsigned char *)v150;
                  *(unsigned char *)unint64_t v150 = 46;
                  char *v147 = v315;
                }
                else
                {
                  memmove((void *)(v150 + 1), (const void *)v150, (size_t)&v147[-v150]);
                  *(unsigned char *)unint64_t v150 = 46;
                }
              }
              uint64_t v314 = (char *)(v150 + 1);
              ++v147;
            }
            else
            {
              uint64_t v314 = (char *)v150;
              unint64_t v150 = (unint64_t)v149;
            }
            if ((v119 - 17) <= 1)
            {
              if (v113 <= 1) {
                int v316 = 1;
              }
              else {
                int v316 = v113;
              }
              if ((v113 & 0x80000000) != 0) {
                int v316 = 6;
              }
              int v317 = v121 - v150;
              if (v314 != v147) {
                int v317 = -1;
              }
              int v318 = v317 + v316;
              unint64_t v319 = &v314[~v150];
              if ((uint64_t)v319 < v318) {
                v556.i32[1] += v318 - v319;
              }
            }
          }
          else
          {
            uint64_t v314 = (char *)v150;
            unint64_t v150 = (unint64_t)v149;
          }
          uint64_t v544 = v314;
          if ((v118 & 0x40) == 0)
          {
            char v320 = v118;
            unint64_t v321 = v113;
            unint64_t v322 = v109;
            uint64_t v323 = (char *)__src;
            double v324 = v147;
            size_t v325 = v147 - (unsigned char *)__src;
            size_t v326 = v556.i32[1];
            if ((uint64_t)(v325 + v556.i32[1]) >= v542 >> 32)
            {
              unint64_t v327 = (void *)*v322;
              if (!v556.i32[1] || v314 == v324)
              {
                size_t v342 = v327[1];
                uint64_t v341 = v327[2];
                if (v341 + v325 >= v342)
                {
                  ((void (*)(void))v327[3])(*v327);
                  uint64_t v341 = 0;
                  v327[2] = 0;
                  size_t v342 = v327[1];
                }
                size_t v343 = v325 - v342;
                if (v325 >= v342)
                {
                  if (v342) {
                    memmove((void *)(*v327 + v341), v323, v342);
                  }
                  v327[2] = v342;
                  ((void (*)(void, size_t, void))v327[3])(*v327, v342, v327[4]);
                  v327[2] = 0;
                  if (v343)
                  {
                    uint64_t v372 = &v323[v342];
                    unint64_t v109 = v322;
                    do
                    {
                      if (v327[1] >= v343) {
                        size_t v373 = v343;
                      }
                      else {
                        size_t v373 = v327[1];
                      }
                      if (v373) {
                        memmove((void *)*v327, v372, v373);
                      }
                      v327[2] = v373;
                      v372 += v373;
                      v343 -= v373;
                      ((void (*)(void, size_t, void))v327[3])(*v327, v373, v327[4]);
                      v327[2] = 0;
                    }
                    while (v343);
                    size_t v344 = 0;
                  }
                  else
                  {
                    size_t v344 = 0;
                    unint64_t v109 = v322;
                  }
                }
                else
                {
                  if (v324 != v323)
                  {
                    memmove((void *)(*v327 + v341), v323, v325);
                    uint64_t v341 = v327[2];
                  }
                  unint64_t v109 = v322;
                  size_t v344 = v341 + v325;
                  v327[2] = v344;
                }
                size_t v386 = v327[1];
                if (v344 + v326 >= v386)
                {
                  ((void (*)(void))v327[3])(*v327);
                  size_t v344 = 0;
                  v327[2] = 0;
                  size_t v386 = v327[1];
                }
                size_t v387 = v326 - v386;
                if (v326 >= v386)
                {
                  uint64_t v388 = (char *)*v327;
                  if (v386)
                  {
                    memset(&v388[v344], 48, v386);
                    uint64_t v388 = (char *)*v327;
                  }
                  v327[2] = v386;
                  while (1)
                  {
                    ((void (*)(char *, size_t, void))v327[3])(v388, v386, v327[4]);
                    v327[2] = 0;
                    if (!v387) {
                      break;
                    }
                    uint64_t v388 = (char *)*v327;
                    if (v327[1] >= v387) {
                      size_t v386 = v387;
                    }
                    else {
                      size_t v386 = v327[1];
                    }
                    if (v386)
                    {
                      memset(v388, 48, v386);
                      uint64_t v388 = (char *)*v327;
                    }
                    v327[2] = v386;
                    v387 -= v386;
                  }
                }
                else
                {
                  if (v326)
                  {
                    memset((void *)(*v327 + v344), 48, v326);
                    size_t v344 = v327[2];
                  }
                  v327[2] = v344 + v326;
                }
              }
              else
              {
                size_t v334 = v314 - (unsigned char *)__src;
                size_t v336 = v327[1];
                uint64_t v335 = v327[2];
                if (v335 + v314 - (unsigned char *)__src >= v336)
                {
                  ((void (*)(void))v327[3])(*v327);
                  uint64_t v335 = 0;
                  v327[2] = 0;
                  size_t v336 = v327[1];
                }
                size_t v337 = v334 - v336;
                if (v334 >= v336)
                {
                  if (v336) {
                    memmove((void *)(*v327 + v335), v323, v336);
                  }
                  v327[2] = v336;
                  ((void (*)(void, size_t, void))v327[3])(*v327, v336, v327[4]);
                  v327[2] = 0;
                  if (v337)
                  {
                    uint64_t v370 = &v323[v336];
                    unint64_t v109 = v322;
                    do
                    {
                      if (v327[1] >= v337) {
                        size_t v371 = v337;
                      }
                      else {
                        size_t v371 = v327[1];
                      }
                      if (v371) {
                        memmove((void *)*v327, v370, v371);
                      }
                      v327[2] = v371;
                      v370 += v371;
                      v337 -= v371;
                      ((void (*)(void, size_t, void))v327[3])(*v327, v371, v327[4]);
                      v327[2] = 0;
                    }
                    while (v337);
                    size_t v338 = 0;
                  }
                  else
                  {
                    size_t v338 = 0;
                    unint64_t v109 = v322;
                  }
                }
                else
                {
                  if (v544 != v323)
                  {
                    memmove((void *)(*v327 + v335), v323, v334);
                    uint64_t v335 = v327[2];
                  }
                  unint64_t v109 = v322;
                  size_t v338 = v335 + v334;
                  v327[2] = v338;
                }
                size_t v377 = v327[1];
                if (v338 + v326 >= v377)
                {
                  ((void (*)(void))v327[3])(*v327);
                  size_t v338 = 0;
                  v327[2] = 0;
                  size_t v377 = v327[1];
                }
                size_t v378 = v326 - v377;
                if (v326 >= v377)
                {
                  uint64_t v380 = (char *)*v327;
                  if (v377)
                  {
                    memset(&v380[v338], 48, v377);
                    uint64_t v380 = (char *)*v327;
                  }
                  v327[2] = v377;
                  while (1)
                  {
                    ((void (*)(char *, size_t, void))v327[3])(v380, v377, v327[4]);
                    v327[2] = 0;
                    if (!v378) {
                      break;
                    }
                    uint64_t v380 = (char *)*v327;
                    if (v327[1] >= v378) {
                      size_t v377 = v378;
                    }
                    else {
                      size_t v377 = v327[1];
                    }
                    if (v377)
                    {
                      memset(v380, 48, v377);
                      uint64_t v380 = (char *)*v327;
                    }
                    v327[2] = v377;
                    v378 -= v377;
                  }
                  size_t v379 = 0;
                }
                else
                {
                  memset((void *)(*v327 + v338), 48, v326);
                  size_t v379 = v327[2] + v326;
                  v327[2] = v379;
                }
                size_t v381 = v324 - v544;
                size_t v382 = v327[1];
                if (v379 + v324 - v544 >= v382)
                {
                  ((void (*)(void))v327[3])(*v327);
                  size_t v379 = 0;
                  v327[2] = 0;
                  size_t v382 = v327[1];
                }
                size_t v383 = v381 - v382;
                if (v381 >= v382)
                {
                  if (v382) {
                    memmove((void *)(*v327 + v379), v544, v382);
                  }
                  v327[2] = v382;
                  ((void (*)(void, size_t, void))v327[3])(*v327, v382, v327[4]);
                  v327[2] = 0;
                  if (v383)
                  {
                    uint64_t v384 = &v544[v382];
                    do
                    {
                      if (v327[1] >= v383) {
                        size_t v385 = v383;
                      }
                      else {
                        size_t v385 = v327[1];
                      }
                      if (v385) {
                        memmove((void *)*v327, v384, v385);
                      }
                      v327[2] = v385;
                      v384 += v385;
                      v383 -= v385;
                      ((void (*)(void, size_t, void))v327[3])(*v327, v385, v327[4]);
                      v327[2] = 0;
                    }
                    while (v383);
                  }
                }
                else
                {
                  memmove((void *)(*v327 + v379), v544, v381);
                  v327[2] += v381;
                }
              }
            }
            else
            {
              unint64_t v327 = (void *)*v322;
              if ((v320 & 7) == 4)
              {
                if (__src != v121)
                {
                  char v328 = *(unsigned char *)__src;
                  double v121 = (int8x16_t *)((char *)__src + 1);
                  uint64_t v329 = (unsigned char *)*v327;
                  uint64_t v330 = v327[2];
                  v327[2] = v330 + 1;
                  v329[v330] = v328;
                  if (v327[2] == v327[1])
                  {
                    ((void (*)(void))v327[3])(*v327);
                    v327[2] = 0;
                  }
                }
                uint64_t v331 = v542;
                unsigned __int8 v332 = v542 & 0xF8 | 3;
                unsigned __int8 v333 = 48;
                uint64_t v323 = (char *)v121;
              }
              else
              {
                unsigned __int8 v333 = v541;
                uint64_t v331 = v542;
                unsigned __int8 v332 = v542;
              }
              unint64_t v339 = v331 & 0xFFFFFFFFFFFFFF00 | v332;
              unint64_t v340 = v321 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v333 << 32);
              if (v326) {
                std::__formatter::__write_using_trailing_zeros[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v323, v324, v327, v339, v340, v325, v314, v326);
              }
              else {
                std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v323, v324 - v323, v327, v339, v340, v325);
              }
              unint64_t v109 = v322;
            }
            goto LABEL_899;
          }
          unint64_t v327 = (void *)*v109;
          if (!*((unsigned char *)v109 + 40))
          {
            MEMORY[0x1A6239040](v553);
            if (*((unsigned char *)v109 + 40))
            {
              std::locale::operator=((std::locale *)v109 + 4, v553);
            }
            else
            {
              std::locale::locale((std::locale *)v109 + 4, v553);
              *((unsigned char *)v109 + 40) = 1;
            }
            std::locale::~locale(v553);
          }
          std::locale::locale(&v550, (const std::locale *)v109 + 4);
          unint64_t v538 = std::locale::use_facet(&v550, MEMORY[0x1E4FBA2A0]);
          ((void (*)(std::locale *__return_ptr))v538->__vftable[1].__on_zero_shared)(v553);
          if ((unint64_t)v314 >= v150) {
            unint64_t v345 = (char *)v150;
          }
          else {
            unint64_t v345 = v314;
          }
          unint64_t v533 = v345;
          int64_t v539 = v345 - (char *)v121;
          unint64_t v536 = v150;
          uint64_t v537 = v147;
          if (SHIBYTE(v554) < 0)
          {
            unint64_t v346 = v553[1].__locale_;
            if (!v553[1].__locale_) {
              goto LABEL_779;
            }
            uint64_t v349 = (unsigned __int8 *)v553[0].__locale_;
            int64_t locale_low = *(char *)v553[0].__locale_;
            if (v539 <= locale_low)
            {
              *(unsigned char *)v553[0].__locale_ = 0;
              v553[1].__locale_ = 0;
              uint64_t v147 = v537;
              goto LABEL_779;
            }
            char v531 = v118;
            unint64_t v532 = v113;
            char v350 = *(unsigned char *)v553[0].__locale_;
            uint64_t v347 = v553[0].__locale_;
          }
          else
          {
            if (!HIBYTE(v554)) {
              goto LABEL_779;
            }
            if (v539 <= SLOBYTE(v553[0].__locale_))
            {
              LOBYTE(v553[0].__locale_) = 0;
              HIBYTE(v554) = 0;
              goto LABEL_779;
            }
            char v531 = v118;
            unint64_t v532 = v113;
            uint64_t v347 = v553[0].__locale_;
            unint64_t v346 = v553[1].__locale_;
            int64_t locale_low = SLOBYTE(v553[0].__locale_);
            uint64_t v349 = (unsigned __int8 *)v553;
            char v350 = (char)v553[0].__locale_;
          }
          long long v551 = 0uLL;
          unint64_t v552 = 0;
          unint64_t v351 = (char *)v346 + (void)v347;
          uint64_t v352 = (char *)v553 + HIBYTE(v554);
          if (SHIBYTE(v554) < 0) {
            uint64_t v352 = v351;
          }
          uint64_t v353 = v539 - locale_low;
          if (v539 <= locale_low)
          {
            unsigned int v368 = 0;
            char v367 = v350 + v353;
            uint64_t v147 = v537;
            unint64_t v113 = v532;
            char v118 = v531;
            goto LABEL_709;
          }
          uint64_t v534 = v109;
          unint64_t v354 = v352 - 1;
          do
          {
            if ((SHIBYTE(v552) & 0x80000000) == 0)
            {
              if (HIBYTE(v552) != 22)
              {
                size_t v356 = HIBYTE(v552);
                HIBYTE(v552) = (HIBYTE(v552) + 1) & 0x7F;
                uint64_t v361 = &v551;
                goto LABEL_675;
              }
              uint64_t v355 = &v551;
              size_t v356 = 22;
LABEL_660:
              if (v356 + 1 > 2 * v356) {
                unint64_t v358 = v356 + 1;
              }
              else {
                unint64_t v358 = 2 * v356;
              }
              uint64_t v359 = (v358 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v358 | 7) != 0x17) {
                uint64_t v359 = v358 | 7;
              }
              if (v358 >= 0x17) {
                size_t v357 = v359 + 1;
              }
              else {
                size_t v357 = 23;
              }
LABEL_668:
              unint64_t v360 = (long long *)operator new(v357);
              uint64_t v361 = v360;
              if (!v356 || (memmove(v360, v355, v356), v356 != 22)) {
                operator delete(v355);
              }
              *(void *)&long long v551 = v361;
              unint64_t v552 = v357 | 0x8000000000000000;
              goto LABEL_674;
            }
            size_t v356 = (v552 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (*((void *)&v551 + 1) == v356)
            {
              if ((v552 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                goto LABEL_1135;
              }
              uint64_t v355 = (long long *)v551;
              size_t v357 = 0x7FFFFFFFFFFFFFF7;
              if (v356 >= 0x3FFFFFFFFFFFFFF3) {
                goto LABEL_668;
              }
              goto LABEL_660;
            }
            size_t v356 = *((void *)&v551 + 1);
            uint64_t v361 = (long long *)v551;
LABEL_674:
            *((void *)&v551 + 1) = v356 + 1;
LABEL_675:
            uint64_t v362 = (char *)v361 + v356;
            *uint64_t v362 = v350;
            v362[1] = 0;
            if (v349 == (unsigned __int8 *)v354)
            {
              char v350 = *v354;
              uint64_t v349 = (unsigned __int8 *)v354;
            }
            else
            {
              unint64_t v363 = (char *)(v349 + 1);
              uint64_t v364 = (char *)(v349 + 1);
              do
              {
                int v365 = *v364++;
                char v350 = v365;
                if (v365) {
                  BOOL v366 = 1;
                }
                else {
                  BOOL v366 = v363 == v354;
                }
                unint64_t v363 = v364;
              }
              while (!v366);
              uint64_t v349 = (unsigned __int8 *)(v364 - 1);
            }
            v353 -= v350;
          }
          while (v353 > 0);
          char v367 = v350 + v353;
          if (SHIBYTE(v552) < 0)
          {
            size_t v369 = (v552 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            unint64_t v109 = v534;
            uint64_t v147 = v537;
            unint64_t v113 = v532;
            char v118 = v531;
            if (*((void *)&v551 + 1) != v369)
            {
              size_t v369 = *((void *)&v551 + 1);
              uint64_t v374 = (long long *)v551;
              goto LABEL_775;
            }
            if ((v552 & 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFF8)
            {
              std::string __p = (long long *)v551;
              size_t v375 = 0x7FFFFFFFFFFFFFF7;
              if (v369 < 0x3FFFFFFFFFFFFFF3) {
                goto LABEL_715;
              }
              goto LABEL_770;
            }
            goto LABEL_1135;
          }
          unsigned int v368 = HIBYTE(v552);
          unint64_t v109 = v534;
          uint64_t v147 = v537;
          unint64_t v113 = v532;
          char v118 = v531;
          if (HIBYTE(v552) != 22)
          {
LABEL_709:
            size_t v369 = v368;
            HIBYTE(v552) = (v368 + 1) & 0x7F;
            uint64_t v374 = &v551;
            goto LABEL_776;
          }
          std::string __p = &v551;
          size_t v369 = 22;
LABEL_715:
          if (v369 + 1 > 2 * v369) {
            unint64_t v376 = v369 + 1;
          }
          else {
            unint64_t v376 = 2 * v369;
          }
          if (v376 >= 0x17)
          {
            uint64_t v389 = (v376 & 0x7FFFFFFFFFFFFFF8) + 8;
            uint64_t v390 = v376 | 7;
            if (v390 == 23) {
              uint64_t v390 = v389;
            }
            size_t v375 = v390 + 1;
          }
          else
          {
            size_t v375 = 23;
          }
LABEL_770:
          size_t v391 = v375;
          uint64_t v392 = (long long *)operator new(v375);
          uint64_t v374 = v392;
          if (!v369 || (memmove(v392, __p, v369), v369 != 22)) {
            operator delete(__p);
          }
          *(void *)&long long v551 = v374;
          unint64_t v552 = v391 | 0x8000000000000000;
LABEL_775:
          *((void *)&v551 + 1) = v369 + 1;
LABEL_776:
          unint64_t v393 = (char *)v374 + v369;
          *unint64_t v393 = v367;
          v393[1] = 0;
          if (SHIBYTE(v554) < 0) {
            operator delete(v553[0].__locale_);
          }
          *(_OWORD *)&v553[0].__locale_ = v551;
          uint64_t v554 = (void *)v552;
          unint64_t v150 = v536;
LABEL_779:
          unint64_t v394 = HIDWORD(v113);
          double v395 = (std::locale::__imp *)HIBYTE(v554);
          if (SHIBYTE(v554) < 0) {
            double v395 = v553[1].__locale_;
          }
          BOOL v396 = (char *)v395 + v147 - (unsigned char *)__src + v556.i32[1] - (v395 != 0);
          int v397 = v118 & 7;
          BOOL v398 = __OFSUB__(v542 >> 32, v396);
          uint64_t v399 = (v542 >> 32) - (void)v396;
          if ((v399 < 0) ^ v398 | (v399 == 0))
          {
            size_t v404 = 0;
            size_t v403 = 0;
            unint64_t v400 = HIDWORD(v113);
            size_t v402 = v539;
          }
          else
          {
            if (v397 == 4) {
              LOBYTE(v400) = 48;
            }
            else {
              unint64_t v400 = HIDWORD(v113);
            }
            if (v397 == 4) {
              uint64_t v401 = 3;
            }
            else {
              uint64_t v401 = v118 & 7;
            }
            size_t v402 = v539;
            size_t v403 = 0;
            size_t v404 = v399;
            switch(v401)
            {
              case 1:
                break;
              case 2:
                size_t v403 = (unint64_t)v399 >> 1;
                size_t v404 = v399 - ((unint64_t)v399 >> 1);
                break;
              default:
                size_t v404 = 0;
                size_t v403 = v399;
                break;
            }
          }
          size_t v543 = v404;
          if (v397 == 4 && v121 != __src)
          {
            char v405 = *(unsigned char *)__src;
            uint64_t v406 = (unsigned char *)*v327;
            uint64_t v407 = v327[2];
            v327[2] = v407 + 1;
            v406[v407] = v405;
            if (v327[2] == v327[1])
            {
              ((void (*)(void))v327[3])(*v327);
              v327[2] = 0;
            }
          }
          int v408 = v394 & 0xFFFFFF00 | v400;
          std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v327, v403, v408);
          if (v397 != 4 && v121 != __src)
          {
            char v409 = *(unsigned char *)__src;
            unsigned int v410 = (unsigned char *)*v327;
            uint64_t v411 = v327[2];
            v327[2] = v411 + 1;
            v410[v411] = v409;
            if (v327[2] == v327[1])
            {
              ((void (*)(void))v327[3])(*v327);
              v327[2] = 0;
            }
          }
          int v540 = v408;
          if (SHIBYTE(v554) < 0)
          {
            uint64_t v412 = v553[1].__locale_;
            if (v553[1].__locale_)
            {
              BOOL v535 = v109;
              uint64_t v414 = v553[0].__locale_;
              unsigned int v413 = (char *)v553[0].__locale_ + 1;
              goto LABEL_804;
            }
          }
          else
          {
            uint64_t v412 = (std::locale::__imp *)HIBYTE(v554);
            if (HIBYTE(v554))
            {
              BOOL v535 = v109;
              unsigned int v413 = (char *)&v553[0].__locale_ + 1;
              uint64_t v414 = v553;
LABEL_804:
              uint64_t v415 = (char *)v412 + (void)v414;
              char v416 = ((uint64_t (*)(const std::locale::facet *))v538->__vftable[1].~facet_0)(v538);
              uint64_t v417 = v327[2];
              while (1)
              {
                unsigned int v419 = v415 - 1;
                size_t v418 = *(v415 - 1);
                size_t v420 = v327[1];
                if (v417 + v418 >= v420)
                {
                  ((void (*)(void))v327[3])(*v327);
                  uint64_t v417 = 0;
                  v327[2] = 0;
                  size_t v420 = v327[1];
                }
                size_t v421 = v418 - v420;
                if (v418 >= v420)
                {
                  if (v420) {
                    memmove((void *)(*v327 + v417), v121, v420);
                  }
                  v327[2] = v420;
                  ((void (*)(void, size_t, void))v327[3])(*v327, v420, v327[4]);
                  v327[2] = 0;
                  if (v421)
                  {
                    unint64_t v423 = &v121->i8[v420];
                    do
                    {
                      if (v327[1] >= v421) {
                        size_t v424 = v421;
                      }
                      else {
                        size_t v424 = v327[1];
                      }
                      if (v424) {
                        memmove((void *)*v327, v423, v424);
                      }
                      v327[2] = v424;
                      v423 += v424;
                      v421 -= v424;
                      ((void (*)(void, size_t, void))v327[3])(*v327, v424, v327[4]);
                      v327[2] = 0;
                    }
                    while (v421);
                  }
                  size_t v422 = 0;
                }
                else
                {
                  if (v418)
                  {
                    memmove((void *)(*v327 + v417), v121, v418);
                    uint64_t v417 = v327[2];
                  }
                  size_t v422 = v417 + v418;
                  v327[2] = v422;
                }
                if (v415 == v413) {
                  break;
                }
                double v121 = (int8x16_t *)((char *)v121 + *v419);
                unint64_t v425 = (unsigned char *)*v327;
                v327[2] = v422 + 1;
                v425[v422] = v416;
                uint64_t v417 = v327[2];
                --v415;
                if (v417 == v327[1])
                {
                  ((void (*)(void))v327[3])(*v327);
                  uint64_t v417 = 0;
                  v327[2] = 0;
                  uint64_t v415 = v419;
                }
              }
              unint64_t v109 = v535;
              unint64_t v150 = v536;
              uint64_t v147 = v537;
LABEL_843:
              uint64_t v429 = v544;
              goto LABEL_844;
            }
          }
          size_t v427 = v327[1];
          uint64_t v426 = v327[2];
          if (v426 + v402 >= v427)
          {
            ((void (*)(void))v327[3])(*v327);
            uint64_t v426 = 0;
            v327[2] = 0;
            size_t v427 = v327[1];
          }
          size_t v428 = v402 - v427;
          if (v402 >= v427)
          {
            if (v427) {
              memmove((void *)(*v327 + v426), v121, v427);
            }
            v327[2] = v427;
            ((void (*)(void, size_t, void))v327[3])(*v327, v427, v327[4]);
            v327[2] = 0;
            if (v428)
            {
              uint64_t v430 = &v121->i8[v427];
              do
              {
                if (v327[1] >= v428) {
                  size_t v431 = v428;
                }
                else {
                  size_t v431 = v327[1];
                }
                if (v431) {
                  memmove((void *)*v327, v430, v431);
                }
                v327[2] = v431;
                v430 += v431;
                v428 -= v431;
                ((void (*)(void, size_t, void))v327[3])(*v327, v431, v327[4]);
                v327[2] = 0;
              }
              while (v428);
            }
            size_t v422 = 0;
            goto LABEL_843;
          }
          if (v533 != (char *)v121)
          {
            memmove((void *)(*v327 + v426), v121, v402);
            uint64_t v426 = v327[2];
          }
          uint64_t v429 = v544;
          size_t v422 = v426 + v402;
          v327[2] = v422;
LABEL_844:
          if ((char *)v150 != v147)
          {
            char v432 = ((uint64_t (*)(const std::locale::facet *))v538->__vftable[1].~facet)(v538);
            uint64_t v433 = (unsigned char *)*v327;
            uint64_t v434 = v327[2];
            v327[2] = v434 + 1;
            v433[v434] = v432;
            size_t v436 = v327[1];
            uint64_t v435 = v327[2];
            uint64_t v437 = v147;
            if (v435 == v436)
            {
              ((void (*)(void))v327[3])(*v327);
              uint64_t v435 = 0;
              v327[2] = 0;
              size_t v436 = v327[1];
            }
            uint64_t v438 = (char *)(v150 + 1);
            size_t v439 = (size_t)&v429[-v150 - 1];
            if (v439 + v435 >= v436)
            {
              ((void (*)(void))v327[3])(*v327);
              uint64_t v435 = 0;
              v327[2] = 0;
              size_t v436 = v327[1];
            }
            size_t v440 = v439 - v436;
            if (v439 >= v436)
            {
              if (v436) {
                memmove((void *)(*v327 + v435), (const void *)(v150 + 1), v436);
              }
              v327[2] = v436;
              ((void (*)(void, size_t, void))v327[3])(*v327, v436, v327[4]);
              v327[2] = 0;
              uint64_t v147 = v437;
              if (v440)
              {
                long long v442 = &v438[v436];
                do
                {
                  if (v327[1] >= v440) {
                    size_t v443 = v440;
                  }
                  else {
                    size_t v443 = v327[1];
                  }
                  if (v443) {
                    memmove((void *)*v327, v442, v443);
                  }
                  v327[2] = v443;
                  v442 += v443;
                  v440 -= v443;
                  ((void (*)(void, size_t, void))v327[3])(*v327, v443, v327[4]);
                  v327[2] = 0;
                }
                while (v440);
              }
              size_t v441 = 0;
            }
            else
            {
              if (v544 != v438)
              {
                memmove((void *)(*v327 + v435), (const void *)(v150 + 1), v439);
                uint64_t v435 = v327[2];
              }
              size_t v441 = v435 + v439;
              v327[2] = v441;
              uint64_t v147 = v437;
            }
            size_t v444 = v556.i32[1];
            size_t v445 = v327[1];
            if (v441 + v556.i32[1] >= v445)
            {
              ((void (*)(void))v327[3])(*v327);
              size_t v441 = 0;
              v327[2] = 0;
              size_t v445 = v327[1];
            }
            size_t v446 = v444 - v445;
            if (v444 >= v445)
            {
              double v447 = (char *)*v327;
              if (v445)
              {
                memset(&v447[v441], 48, v445);
                double v447 = (char *)*v327;
              }
              v327[2] = v445;
              ((void (*)(char *, size_t, void))v327[3])(v447, v445, v327[4]);
              while (1)
              {
                v327[2] = 0;
                if (!v446) {
                  break;
                }
                uint64_t v448 = (void *)*v327;
                if (v327[1] >= v446) {
                  size_t v449 = v446;
                }
                else {
                  size_t v449 = v327[1];
                }
                if (v449)
                {
                  memset(v448, 48, v449);
                  uint64_t v448 = (void *)*v327;
                }
                v327[2] = v449;
                v446 -= v449;
                ((void (*)(void *, size_t, void))v327[3])(v448, v449, v327[4]);
              }
              size_t v422 = 0;
              uint64_t v429 = v544;
            }
            else
            {
              if (v444)
              {
                memset((void *)(*v327 + v441), 48, v444);
                size_t v441 = v327[2];
              }
              uint64_t v429 = v544;
              size_t v422 = v441 + v444;
              v327[2] = v422;
            }
          }
          if (v429 != v147)
          {
            size_t v450 = v147 - v429;
            size_t v451 = v327[1];
            if (v422 + v450 >= v451)
            {
              ((void (*)(void))v327[3])(*v327);
              size_t v422 = 0;
              v327[2] = 0;
              size_t v451 = v327[1];
            }
            size_t v452 = v450 - v451;
            if (v450 >= v451)
            {
              if (v451) {
                memmove((void *)(*v327 + v422), v544, v451);
              }
              v327[2] = v451;
              ((void (*)(void, size_t, void))v327[3])(*v327, v451, v327[4]);
              v327[2] = 0;
              if (v452)
              {
                uint64_t v453 = &v544[v451];
                do
                {
                  if (v327[1] >= v452) {
                    size_t v454 = v452;
                  }
                  else {
                    size_t v454 = v327[1];
                  }
                  if (v454) {
                    memmove((void *)*v327, v453, v454);
                  }
                  v327[2] = v454;
                  v453 += v454;
                  v452 -= v454;
                  ((void (*)(void, size_t, void))v327[3])(*v327, v454, v327[4]);
                  v327[2] = 0;
                }
                while (v452);
              }
            }
            else
            {
              memmove((void *)(*v327 + v422), v544, v450);
              v327[2] += v450;
            }
          }
          std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v327, v543, v540);
          if (SHIBYTE(v554) < 0) {
            operator delete(v553[0].__locale_);
          }
          std::locale::~locale(&v550);
LABEL_899:
          if (v556.i64[1] >= 0x101uLL) {
            operator delete(__src);
          }
          *unint64_t v109 = (uint64_t)v327;
          return;
        case 13:
          uint64_t v168 = MEMORY[0x1A6239190](v121, &v117[v116], 1, v115, v34);
          uint64_t v147 = (char *)v168;
          float v149 = &v121->i8[1];
          if (v121->i8[1] == 46)
          {
            uint64_t v169 = v168 - (void)v121 - 2;
            if (v169 < 4)
            {
LABEL_279:
              unint64_t v150 = v168;
              goto LABEL_588;
            }
            if ((unint64_t)v169 >= 6) {
              uint64_t v169 = 6;
            }
            uint64_t v170 = -v169;
            while (*(unsigned char *)(v168 + v170) != 101)
            {
              if (++v170 == -3) {
                goto LABEL_279;
              }
            }
            unint64_t v150 = v168 + v170;
          }
          else
          {
LABEL_420:
            unint64_t v150 = (unint64_t)v149;
            float v149 = v147;
          }
          goto LABEL_588;
        case 14:
          uint64_t v171 = MEMORY[0x1A6239190](v121, &v117[v116], 1, v115, v34);
          uint64_t v147 = (char *)v171;
          unint64_t v150 = (unint64_t)v121->u64 + 1;
          if (v121->i8[1] == 46)
          {
            uint64_t v172 = v171 - (void)v121 - 2;
            if (v172 < 4)
            {
LABEL_287:
              float v149 = &v121->i8[1];
              unint64_t v150 = v171;
              goto LABEL_572;
            }
            if ((unint64_t)v172 >= 6) {
              uint64_t v172 = 6;
            }
            uint64_t v173 = -v172;
            while (*(unsigned char *)(v171 + v173) != 101)
            {
              if (++v173 == -3) {
                goto LABEL_287;
              }
            }
            float v149 = &v121->i8[1];
            unint64_t v150 = v171 + v173;
          }
          else
          {
            float v149 = (char *)v171;
          }
          goto LABEL_572;
        case 15:
        case 16:
          uint64_t v146 = MEMORY[0x1A6239190](v121, &v117[v116], 2, v115, v34);
          uint64_t v147 = (char *)v146;
          if (v115) {
            int v148 = v115 + 1;
          }
          else {
            int v148 = 0;
          }
          float v149 = (char *)(v146 - v148);
          unint64_t v150 = v146;
          goto LABEL_588;
        case 17:
          v556.i32[1] = 0;
          uint64_t v161 = MEMORY[0x1A6239190](v121, &v117[v116], 3, v115, v34);
          uint64_t v147 = &v121->i8[1];
          if (&v121->i8[1] == (__int8 *)v161) {
            goto LABEL_393;
          }
          unint64_t v150 = v161;
          size_t v162 = v161 - (void)v147;
          if (v161 - (uint64_t)v147 < 4) {
            goto LABEL_268;
          }
          uint64_t v163 = 6;
          if (v162 < 6) {
            uint64_t v163 = v161 - (void)v147;
          }
          uint64_t v164 = -v163;
          while (*(unsigned char *)(v161 + v164) != 101)
          {
            if (++v164 == -3) {
              goto LABEL_268;
            }
          }
LABEL_517:
          if (*v147 == 46) {
            float v149 = v147;
          }
          else {
            float v149 = (char *)v150;
          }
          uint64_t v147 = (char *)v150;
          v150 += v164;
          goto LABEL_588;
        case 18:
          v556.i32[1] = 0;
          uint64_t v147 = (char *)MEMORY[0x1A6239190](v121, &v117[v116], 3, v115, v34);
          uint64_t v174 = &v121->i8[1];
          if (&v121->i8[1] == v147) {
            goto LABEL_393;
          }
          size_t v175 = v147 - v174;
          if (v147 - v174 < 4) {
            goto LABEL_295;
          }
          uint64_t v176 = 6;
          if (v175 < 6) {
            uint64_t v176 = v147 - v174;
          }
          uint64_t v177 = -v176;
          while (v147[v177] != 101)
          {
            if (++v177 == -3)
            {
LABEL_295:
              long long v178 = (char *)memchr(v174, 46, v175);
              if (v178) {
                float v149 = v178;
              }
              else {
                float v149 = v147;
              }
              unint64_t v150 = (unint64_t)v147;
              goto LABEL_588;
            }
          }
          unint64_t v150 = (unint64_t)&v147[v177];
          if (*v174 == 46) {
            float v149 = &v121->i8[1];
          }
          else {
            float v149 = v147;
          }
LABEL_572:
          *(unsigned char *)unint64_t v150 = 69;
          goto LABEL_588;
        default:
          if ((v113 & 0x80000000) != 0)
          {
            uint64_t v232 = std::to_chars((std::__1 *)v121, &v117[v116], v111, v34);
            uint64_t v147 = (char *)v232;
            unint64_t v233 = v232 - (void)v121;
            unint64_t v150 = v232;
            if (v232 - (uint64_t)v121 >= 4)
            {
              if (v233 >= 6) {
                unint64_t v233 = 6;
              }
              uint64_t v234 = -(uint64_t)v233;
              do
              {
                if (*(unsigned char *)(v232 + v234) == 101)
                {
                  unint64_t v150 = v232 + v234;
                  goto LABEL_582;
                }
                ++v234;
              }
              while (v234 != -3);
              unint64_t v150 = v232;
            }
LABEL_582:
            uint64_t v312 = (char *)memchr(&v121->i8[1], 46, v150 - ((void)v121->i64 + 1));
            if (v312) {
              unint64_t v313 = v312;
            }
            else {
              unint64_t v313 = (char *)v150;
            }
            if (v313 == (char *)v150) {
              float v149 = v147;
            }
            else {
              float v149 = v313;
            }
            goto LABEL_588;
          }
          v556.i32[1] = 0;
          uint64_t v165 = MEMORY[0x1A6239190](v121, &v117[v116], 3, v115, v34);
          uint64_t v147 = &v121->i8[1];
          if (&v121->i8[1] == (__int8 *)v165)
          {
LABEL_393:
            unint64_t v150 = (unint64_t)v147;
            float v149 = v147;
            goto LABEL_588;
          }
          unint64_t v150 = v165;
          size_t v162 = v165 - (void)v147;
          if (v165 - (uint64_t)v147 < 4) {
            goto LABEL_268;
          }
          uint64_t v166 = 6;
          if (v162 < 6) {
            uint64_t v166 = v165 - (void)v147;
          }
          uint64_t v164 = -v166;
          do
          {
            if (*(unsigned char *)(v165 + v164) == 101) {
              goto LABEL_517;
            }
            ++v164;
          }
          while (v164 != -3);
LABEL_268:
          float v167 = (char *)memchr(v147, 46, v162);
          if (v167) {
            float v149 = v167;
          }
          else {
            float v149 = (char *)v150;
          }
          uint64_t v147 = (char *)v150;
          goto LABEL_588;
      }
    case 0xAu:
      double v78 = *(double *)a2;
      *(void *)&long long v551 = 0;
      DWORD2(v551) = -1;
      BYTE12(v551) = 32;
      *(_WORD *)((char *)&v551 + 13) = 0;
      HIBYTE(v551) = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_171;
      }
      float64_t v79 = *a1;
      uint64_t v80 = ((uint64_t (*)(long long *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v551, *a1, 319);
      if (BYTE1(v551) - 13 < 6)
      {
        if (DWORD2(v551) != -1 || SWORD1(v551) <= -1) {
          int v82 = DWORD2(v551);
        }
        else {
          int v82 = 6;
        }
        DWORD2(v551) = v82;
        goto LABEL_170;
      }
      if (BYTE1(v551) <= 0xCu && ((1 << SBYTE1(v551)) & 0x1801) != 0)
      {
LABEL_170:
        uint64_t *v79 = v80;
LABEL_171:
        uint64_t v123 = a1[1];
        uint64_t v126 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v551, v123);
        unint64_t v127 = v124;
        double v128 = v78;
        if (v78 < 0.0) {
          double v78 = -v78;
        }
        if (v124 == -1) {
          uint64_t v129 = 1074;
        }
        else {
          uint64_t v129 = v124;
        }
        v556.i64[0] = v129;
        if ((int)v129 < 1075)
        {
          size_t v130 = (int)v129 + 316;
          v556.i64[1] = v130;
          if ((v129 + 316) < 0x401)
          {
            float64_t v131 = (char *)v558;
            uint64_t v129 = v124;
LABEL_181:
            char v132 = v126;
            unsigned __int8 v133 = BYTE4(v127);
            __src = v131;
            if ((*(void *)&v128 & 0x8000000000000000) != 0)
            {
              char v136 = 45;
            }
            else
            {
              int v134 = (v126 >> 3) & 3;
              if (v134 == 2)
              {
                char v136 = 43;
              }
              else
              {
                double v135 = v131;
                if (v134 != 3)
                {
LABEL_213:
                  switch(BYTE1(v126))
                  {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                      goto LABEL_1142;
                    case 0xB:
                      v553[0].__locale_ = (std::locale::__imp *)v135;
                      if ((v127 & 0x80000000) != 0) {
                        unint64_t v185 = (std::locale::__imp *)std::to_chars();
                      }
                      else {
                        unint64_t v185 = (std::locale::__imp *)MEMORY[0x1A6239130](v135, &v131[v130], 4, v129, v78);
                      }
                      *(void *)uint64_t v555 = v185;
                      int v265 = v135[1];
                      double v264 = (std::locale::__imp *)(v135 + 1);
                      if (v265 == 46)
                      {
                        uint64_t v266 = (std::locale::__imp *)((char *)v185 - 2);
                        float64x2_t v267 = (std::locale::__imp *)memchr((char *)v185 - 6, 112, 4uLL);
                        unint64_t v185 = v264;
                        if (v267) {
                          double v264 = v267;
                        }
                        else {
                          double v264 = v266;
                        }
                      }
                      v553[1].__locale_ = v185;
                      uint64_t v554 = v264;
                      goto LABEL_910;
                    case 0xC:
                      v553[0].__locale_ = (std::locale::__imp *)v135;
                      if ((v127 & 0x80000000) != 0) {
                        char v179 = (std::locale::__imp *)std::to_chars();
                      }
                      else {
                        char v179 = (std::locale::__imp *)MEMORY[0x1A6239130](v135, &v131[v130], 4, v129, v78);
                      }
                      *(void *)uint64_t v555 = v179;
                      float v235 = v135 + 1;
                      if (v135[1] == 46)
                      {
                        unint64_t v236 = (char *)v179 - 2;
                        uint64_t v237 = (char *)memchr((char *)v179 - 6, 112, 4uLL);
                        if (v237) {
                          uint64_t v238 = v237;
                        }
                        else {
                          uint64_t v238 = v236;
                        }
                        v553[1].__locale_ = (std::locale::__imp *)(v135 + 1);
                        uint64_t v554 = v238;
                        float v235 = v238;
                        if (v238 == v135)
                        {
LABEL_548:
                          *double v135 = 80;
LABEL_910:
                          if ((v126 & 0x20) != 0)
                          {
                            unint64_t v456 = (unint64_t)v553[1].__locale_;
                            if (v553[1].__locale_ == *(std::locale::__imp **)v555)
                            {
                              *(void *)uint64_t v555 = (char *)v553[1].__locale_ + 1;
                              *(unsigned char *)v553[1].__locale_ = 46;
                              uint64_t v457 = v554;
                              if (v554 != (void *)v456)
                              {
                                if ((char *)v554 + 1 == (void *)v456)
                                {
                                  char v458 = *(unsigned char *)v554;
                                  *(unsigned char *)uint64_t v554 = 46;
                                  *(unsigned char *)unint64_t v456 = v458;
                                }
                                else
                                {
                                  memmove((char *)v554 + 1, v554, v456 - (void)v554);
                                  *uint64_t v457 = 46;
                                }
                              }
                              unint64_t v456 = (unint64_t)v554;
                              v553[1].__locale_ = (std::locale::__imp *)v554;
                              uint64_t v554 = (char *)v554 + 1;
                            }
                            if (BYTE1(v126) - 17 <= 1)
                            {
                              if (v127 <= 1) {
                                int v459 = 1;
                              }
                              else {
                                int v459 = v127;
                              }
                              if ((v127 & 0x80000000) != 0) {
                                int v459 = 6;
                              }
                              if (v554 == *(void **)v555) {
                                int v460 = LODWORD(v553[0].__locale_) - v456;
                              }
                              else {
                                int v460 = -1;
                              }
                              int v461 = v460 + v459;
                              double v462 = (char *)v554 + ~v456;
                              if ((uint64_t)v462 < v461) {
                                v556.i32[1] += v461 - v462;
                              }
                            }
                          }
                          if ((v126 & 0x40) == 0)
                          {
                            uint64_t v463 = *(std::locale::__imp **)v555;
                            double v464 = (std::locale::__imp *)__src;
                            size_t v465 = *(void *)v555 - (void)__src;
                            size_t v466 = v556.i32[1];
                            if (*(void *)v555 - (void)__src + v556.i32[1] >= v126 >> 32)
                            {
                              if (v556.i32[1])
                              {
                                uint64_t v467 = (std::locale::__imp *)v554;
                                if (v554 != *(void **)v555)
                                {
                                  uint64_t v468 = (void *)*v123;
                                  unint64_t v469 = (unsigned char *)v554 - (unsigned char *)__src;
                                  size_t v471 = *(void *)(*v123 + 8);
                                  uint64_t v470 = *(void *)(*v123 + 16);
                                  if (v470 + (unsigned char *)v554 - (unsigned char *)__src >= v471)
                                  {
                                    ((void (*)(void))v468[3])(*v468);
                                    uint64_t v470 = 0;
                                    v468[2] = 0;
                                    size_t v471 = v468[1];
                                  }
                                  size_t v472 = v469 - v471;
                                  if (v469 >= v471)
                                  {
                                    if (v471) {
                                      memmove((void *)(*v468 + v470), v464, v471);
                                    }
                                    v468[2] = v471;
                                    ((void (*)(void, size_t, void))v468[3])(*v468, v471, v468[4]);
                                    v468[2] = 0;
                                    if (v472)
                                    {
                                      double v483 = (char *)v464 + v471;
                                      do
                                      {
                                        if (v468[1] >= v472) {
                                          size_t v484 = v472;
                                        }
                                        else {
                                          size_t v484 = v468[1];
                                        }
                                        if (v484) {
                                          memmove((void *)*v468, v483, v484);
                                        }
                                        v468[2] = v484;
                                        v483 += v484;
                                        v472 -= v484;
                                        ((void (*)(void, size_t, void))v468[3])(*v468, v484, v468[4]);
                                        v468[2] = 0;
                                      }
                                      while (v472);
                                    }
                                    uint64_t v473 = 0;
                                  }
                                  else
                                  {
                                    if (v467 != v464)
                                    {
                                      memmove((void *)(*v468 + v470), v464, v467 - v464);
                                      uint64_t v470 = v468[2];
                                    }
                                    uint64_t v473 = v470 + v469;
                                    v468[2] = v473;
                                  }
                                  size_t v485 = v468[1];
                                  if (v473 + v466 >= v485)
                                  {
                                    ((void (*)(void))v468[3])(*v468);
                                    uint64_t v473 = 0;
                                    v468[2] = 0;
                                    size_t v485 = v468[1];
                                  }
                                  size_t v486 = v466 - v485;
                                  if (v466 >= v485)
                                  {
                                    unsigned int v488 = (char *)*v468;
                                    if (v485)
                                    {
                                      memset(&v488[v473], 48, v485);
                                      unsigned int v488 = (char *)*v468;
                                    }
                                    v468[2] = v485;
                                    while (1)
                                    {
                                      ((void (*)(char *, size_t, void))v468[3])(v488, v485, v468[4]);
                                      v468[2] = 0;
                                      if (!v486) {
                                        break;
                                      }
                                      unsigned int v488 = (char *)*v468;
                                      if (v468[1] >= v486) {
                                        size_t v485 = v486;
                                      }
                                      else {
                                        size_t v485 = v468[1];
                                      }
                                      if (v485)
                                      {
                                        memset(v488, 48, v485);
                                        unsigned int v488 = (char *)*v468;
                                      }
                                      v468[2] = v485;
                                      v486 -= v485;
                                    }
                                    size_t v487 = 0;
                                  }
                                  else
                                  {
                                    memset((void *)(*v468 + v473), 48, v466);
                                    size_t v487 = v468[2] + v466;
                                    v468[2] = v487;
                                  }
                                  size_t v489 = v463 - v467;
                                  size_t v490 = v468[1];
                                  if (v487 + v463 - v467 >= v490)
                                  {
                                    ((void (*)(void))v468[3])(*v468);
                                    size_t v487 = 0;
                                    v468[2] = 0;
                                    size_t v490 = v468[1];
                                  }
                                  size_t v491 = v489 - v490;
                                  if (v489 >= v490)
                                  {
                                    if (v490) {
                                      memmove((void *)(*v468 + v487), v467, v490);
                                    }
                                    v468[2] = v490;
                                    ((void (*)(void, size_t, void))v468[3])(*v468, v490, v468[4]);
                                    v468[2] = 0;
                                    if (v491)
                                    {
                                      unint64_t v492 = (char *)v467 + v490;
                                      do
                                      {
                                        if (v468[1] >= v491) {
                                          size_t v493 = v491;
                                        }
                                        else {
                                          size_t v493 = v468[1];
                                        }
                                        if (v493) {
                                          memmove((void *)*v468, v492, v493);
                                        }
                                        v468[2] = v493;
                                        v492 += v493;
                                        v491 -= v493;
                                        ((void (*)(void, size_t, void))v468[3])(*v468, v493, v468[4]);
                                        v468[2] = 0;
                                      }
                                      while (v491);
                                    }
                                    goto LABEL_1063;
                                  }
LABEL_1122:
                                  memmove((void *)(*v468 + v487), v467, v489);
                                  v468[2] += v489;
LABEL_1063:
                                  if (v556.i64[1] >= 0x401uLL) {
                                    operator delete(__src);
                                  }
                                  *uint64_t v123 = (uint64_t)v468;
                                  return;
                                }
                              }
                              uint64_t v468 = (void *)*v123;
                              size_t v475 = *(void *)(*v123 + 8);
                              uint64_t v474 = *(void *)(*v123 + 16);
                              if (v474 + v465 >= v475)
                              {
                                ((void (*)(void))v468[3])(*v468);
                                uint64_t v474 = 0;
                                v468[2] = 0;
                                size_t v475 = v468[1];
                              }
                              size_t v476 = v465 - v475;
                              if (v465 >= v475)
                              {
                                if (v475) {
                                  memmove((void *)(*v468 + v474), v464, v475);
                                }
                                v468[2] = v475;
                                ((void (*)(void, size_t, void))v468[3])(*v468, v475, v468[4]);
                                v468[2] = 0;
                                if (v476)
                                {
                                  double v478 = (char *)v464 + v475;
                                  do
                                  {
                                    if (v468[1] >= v476) {
                                      size_t v479 = v476;
                                    }
                                    else {
                                      size_t v479 = v468[1];
                                    }
                                    if (v479) {
                                      memmove((void *)*v468, v478, v479);
                                    }
                                    v468[2] = v479;
                                    v478 += v479;
                                    v476 -= v479;
                                    ((void (*)(void, size_t, void))v468[3])(*v468, v479, v468[4]);
                                    v468[2] = 0;
                                  }
                                  while (v476);
                                }
                                size_t v477 = 0;
                              }
                              else
                              {
                                if (v463 != v464)
                                {
                                  memmove((void *)(*v468 + v474), v464, v465);
                                  uint64_t v474 = v468[2];
                                }
                                size_t v477 = v474 + v465;
                                v468[2] = v477;
                              }
                              size_t v480 = v468[1];
                              if (v477 + v466 >= v480)
                              {
                                ((void (*)(void))v468[3])(*v468);
                                size_t v477 = 0;
                                v468[2] = 0;
                                size_t v480 = v468[1];
                              }
                              size_t v481 = v466 - v480;
                              if (v466 >= v480)
                              {
                                double v482 = (char *)*v468;
                                if (v480)
                                {
                                  memset(&v482[v477], 48, v480);
                                  double v482 = (char *)*v468;
                                }
                                v468[2] = v480;
                                while (1)
                                {
                                  ((void (*)(char *, size_t, void))v468[3])(v482, v480, v468[4]);
                                  v468[2] = 0;
                                  if (!v481) {
                                    break;
                                  }
                                  double v482 = (char *)*v468;
                                  if (v468[1] >= v481) {
                                    size_t v480 = v481;
                                  }
                                  else {
                                    size_t v480 = v468[1];
                                  }
                                  if (v480)
                                  {
                                    memset(v482, 48, v480);
                                    double v482 = (char *)*v468;
                                  }
                                  v468[2] = v480;
                                  v481 -= v480;
                                }
                                goto LABEL_1063;
                              }
                              goto LABEL_1080;
                            }
                            goto LABEL_1034;
                          }
                          goto LABEL_1039;
                        }
                      }
                      else
                      {
                        v553[1].__locale_ = v179;
                        uint64_t v554 = v135 + 1;
                      }
                      unint64_t v239 = v235 - v135;
                      if ((unint64_t)(v235 - v135) < 8)
                      {
                        uint64_t v240 = v135;
                        goto LABEL_544;
                      }
                      if (v239 >= 0x10)
                      {
                        unint64_t v241 = v239 & 0xFFFFFFFFFFFFFFF0;
                        v294.i64[0] = 0x6000000060;
                        v294.i64[1] = 0x6000000060;
                        v295.i64[0] = 0x600000006;
                        v295.i64[1] = 0x600000006;
                        v296.i64[0] = 0x4141414141414141;
                        v296.i64[1] = 0x4141414141414141;
                        unint64_t v297 = v239 & 0xFFFFFFFFFFFFFFF0;
                        uint64_t v298 = (int8x16_t *)v135;
                        do
                        {
                          int16x8_t v299 = vmovl_high_s8(*v298);
                          int16x8_t v300 = vmovl_s8(*(int8x8_t *)v298->i8);
                          v564.val[0] = (int8x16_t)vaddw_s16(v294, *(int16x4_t *)v300.i8);
                          v564.val[1] = (int8x16_t)vaddw_high_s16(v294, v300);
                          v564.val[2] = (int8x16_t)vaddw_s16(v294, *(int16x4_t *)v299.i8);
                          v564.val[3] = (int8x16_t)vaddw_high_s16(v294, v299);
                          int8x16_t *v298 = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v295, (uint32x4_t)v564.val[0]), (int16x8_t)vcgtq_u32(v295, (uint32x4_t)v564.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v295, (uint32x4_t)v564.val[2]), (int16x8_t)vcgtq_u32(v295, (uint32x4_t)v564.val[3]))), vaddq_s8(vqtbl4q_s8(v564, (int8x16_t)xmmword_1A28FE720), v296), *v298);
                          ++v298;
                          v297 -= 16;
                        }
                        while (v297);
                        if (v239 == v241) {
                          goto LABEL_547;
                        }
                        if ((v239 & 8) == 0)
                        {
                          uint64_t v240 = &v135[v241];
                          goto LABEL_544;
                        }
                      }
                      else
                      {
                        unint64_t v241 = 0;
                      }
                      uint64_t v240 = &v135[v239 & 0xFFFFFFFFFFFFFFF8];
                      float64_t v242 = (int8x8_t *)&v135[v241];
                      unint64_t v243 = v241 - (v239 & 0xFFFFFFFFFFFFFFF8);
                      v244.i64[0] = 0x6000000060;
                      v244.i64[1] = 0x6000000060;
                      v245.i64[0] = 0x600000006;
                      v245.i64[1] = 0x600000006;
                      do
                      {
                        int16x8_t v246 = vmovl_s8(*v242);
                        v561.val[0] = (int8x16_t)vaddw_s16(v244, *(int16x4_t *)v246.i8);
                        v561.val[1] = (int8x16_t)vaddw_high_s16(v244, v246);
                        *float64_t v242 = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v245, (uint32x4_t)v561.val[0]), (int16x8_t)vcgtq_u32(v245, (uint32x4_t)v561.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v561, (int8x16_t)xmmword_1A28FF670), (int8x8_t)0x4141414141414141), *v242);
                        ++v242;
                        v243 += 8;
                      }
                      while (v243);
                      if (v239 == (v239 & 0xFFFFFFFFFFFFFFF8))
                      {
LABEL_547:
                        double v135 = v235;
                        goto LABEL_548;
                      }
                      do
                      {
LABEL_544:
                        int v301 = *v240;
                        if ((v301 - 97) < 6) {
                          LOBYTE(v301) = v301 - 32;
                        }
                        *v240++ = v301;
                      }
                      while (v240 != v235);
                      goto LABEL_547;
                    case 0xD:
                      v553[0].__locale_ = (std::locale::__imp *)v135;
                      unint64_t v186 = (char *)MEMORY[0x1A6239130](v135, &v131[v130], 1, v129, v78);
                      *(void *)uint64_t v555 = v186;
                      if (v135[1] == 46)
                      {
                        v553[1].__locale_ = (std::locale::__imp *)(v135 + 1);
                        uint64_t v187 = v186 - v135 - 2;
                        uint64_t v188 = v186;
                        if (v187 >= 4)
                        {
                          uint64_t v189 = 6;
                          if ((unint64_t)v187 < 6) {
                            uint64_t v189 = v186 - v135 - 2;
                          }
                          uint64_t v190 = -v189;
                          while (v186[v190] != 101)
                          {
                            if (++v190 == -3)
                            {
                              uint64_t v554 = v186;
                              goto LABEL_910;
                            }
                          }
                          uint64_t v188 = &v186[v190];
                        }
                        uint64_t v554 = v188;
                      }
                      else
                      {
                        v553[1].__locale_ = (std::locale::__imp *)v186;
                        uint64_t v554 = v135 + 1;
                      }
                      goto LABEL_910;
                    case 0xE:
                      v553[0].__locale_ = (std::locale::__imp *)v135;
                      uint64_t v191 = (std::locale::__imp *)MEMORY[0x1A6239130](v135, &v131[v130], 1, v129, v78);
                      *(void *)uint64_t v555 = v191;
                      uint64_t v192 = (std::locale::__imp *)(v135 + 1);
                      if (v135[1] == 46)
                      {
                        v553[1].__locale_ = (std::locale::__imp *)(v135 + 1);
                        uint64_t v193 = v191 - (std::locale::__imp *)v135 - 2;
                        uint64_t v192 = v191;
                        if (v193 < 4) {
                          goto LABEL_576;
                        }
                        uint64_t v194 = 6;
                        if ((unint64_t)v193 < 6) {
                          uint64_t v194 = v191 - (std::locale::__imp *)v135 - 2;
                        }
                        uint64_t v195 = -v194;
                        while (*((unsigned char *)v191 + v195) != 101)
                        {
                          if (++v195 == -3)
                          {
                            uint64_t v192 = v191;
                            goto LABEL_576;
                          }
                        }
                        uint64_t v192 = (std::locale::__imp *)((char *)v191 + v195);
                      }
                      else
                      {
                        v553[1].__locale_ = v191;
                      }
LABEL_576:
                      uint64_t v554 = v192;
                      *(unsigned char *)uint64_t v192 = 69;
                      goto LABEL_910;
                    case 0xF:
                    case 0x10:
                      v553[0].__locale_ = (std::locale::__imp *)v135;
                      float v151 = (std::locale::__imp *)MEMORY[0x1A6239130](v135, &v131[v130], 2, v129, v78);
                      *(void *)uint64_t v555 = v151;
                      if (v129) {
                        int v152 = v129 + 1;
                      }
                      else {
                        int v152 = 0;
                      }
                      v553[1].__locale_ = (std::locale::__imp *)((char *)v151 - v152);
                      goto LABEL_407;
                    case 0x11:
                      v556.i32[1] = 0;
                      v553[0].__locale_ = (std::locale::__imp *)v135;
                      uint64_t v181 = (std::locale::__imp *)MEMORY[0x1A6239130](v135, &v131[v130], 3, v129, v78);
                      *(void *)uint64_t v555 = v181;
                      float v151 = (std::locale::__imp *)(v135 + 1);
                      if (v135 + 1 == (char *)v181) {
                        goto LABEL_406;
                      }
                      size_t v182 = v181 - v151;
                      if (v181 - v151 < 4) {
                        goto LABEL_345;
                      }
                      uint64_t v196 = 6;
                      if (v182 < 6) {
                        uint64_t v196 = v181 - v151;
                      }
                      uint64_t v184 = -v196;
                      while (*((unsigned char *)v181 + v184) != 101)
                      {
                        if (++v184 == -3) {
                          goto LABEL_345;
                        }
                      }
LABEL_521:
                      long long v282 = (char *)v181 + v184;
                      if (*(unsigned char *)v151 == 46) {
                        uint64_t v283 = v151;
                      }
                      else {
                        uint64_t v283 = v181;
                      }
                      v553[1].__locale_ = v283;
                      uint64_t v554 = v282;
                      goto LABEL_910;
                    case 0x12:
                      v556.i32[1] = 0;
                      v553[0].__locale_ = (std::locale::__imp *)v135;
                      uint64_t v181 = (std::locale::__imp *)MEMORY[0x1A6239130](v135, &v131[v130], 3, v129, v78);
                      *(void *)uint64_t v555 = v181;
                      float v151 = (std::locale::__imp *)(v135 + 1);
                      if (v135 + 1 == (char *)v181)
                      {
                        v553[1].__locale_ = v181;
                        uint64_t v554 = v181;
                      }
                      else
                      {
                        size_t v182 = v181 - v151;
                        if (v181 - v151 < 4) {
                          goto LABEL_345;
                        }
                        uint64_t v197 = 6;
                        if (v182 < 6) {
                          uint64_t v197 = v181 - v151;
                        }
                        uint64_t v198 = -v197;
                        while (*((unsigned char *)v181 + v198) != 101)
                        {
                          if (++v198 == -3) {
                            goto LABEL_345;
                          }
                        }
                        if (*(unsigned char *)v151 == 46) {
                          unint64_t v310 = (std::locale::__imp *)(v135 + 1);
                        }
                        else {
                          unint64_t v310 = v181;
                        }
                        v553[1].__locale_ = v310;
                        uint64_t v554 = (char *)v181 + v198;
                        *((unsigned char *)v181 + v198) = 69;
                      }
                      goto LABEL_910;
                    default:
                      if ((v127 & 0x80000000) != 0)
                      {
                        v553[0].__locale_ = (std::locale::__imp *)v135;
                        uint64_t v259 = std::to_chars((std::__1 *)v135, &v131[v130], v125, v78);
                        float64x2_t v260 = (std::locale::__imp *)v259;
                        *(void *)uint64_t v555 = v259;
                        unint64_t v261 = v259 - (void)v135;
                        uint64_t v262 = (std::locale::__imp *)v259;
                        if (v259 - (uint64_t)v135 < 4) {
                          goto LABEL_904;
                        }
                        if (v261 >= 6) {
                          unint64_t v261 = 6;
                        }
                        uint64_t v263 = -(uint64_t)v261;
                        while (*(unsigned char *)(v259 + v263) != 101)
                        {
                          if (++v263 == -3)
                          {
                            uint64_t v262 = (std::locale::__imp *)v259;
                            goto LABEL_904;
                          }
                        }
                        uint64_t v262 = (std::locale::__imp *)(v259 + v263);
LABEL_904:
                        uint64_t v554 = v262;
                        unint64_t v455 = (std::locale::__imp *)memchr(v135 + 1, 46, v262 - (std::locale::__imp *)(v135 + 1));
                        if (v455) {
                          double v200 = v455;
                        }
                        else {
                          double v200 = v262;
                        }
                        if (v200 == v262) {
                          double v200 = v260;
                        }
                        goto LABEL_909;
                      }
                      v556.i32[1] = 0;
                      v553[0].__locale_ = (std::locale::__imp *)v135;
                      uint64_t v181 = (std::locale::__imp *)MEMORY[0x1A6239130](v135, &v131[v130], 3, v129, v78);
                      *(void *)uint64_t v555 = v181;
                      float v151 = (std::locale::__imp *)(v135 + 1);
                      if (v135 + 1 == (char *)v181)
                      {
LABEL_406:
                        v553[1].__locale_ = v151;
LABEL_407:
                        uint64_t v554 = v151;
                      }
                      else
                      {
                        size_t v182 = v181 - v151;
                        if (v181 - v151 < 4) {
                          goto LABEL_345;
                        }
                        uint64_t v183 = 6;
                        if (v182 < 6) {
                          uint64_t v183 = v181 - v151;
                        }
                        uint64_t v184 = -v183;
                        do
                        {
                          if (*((unsigned char *)v181 + v184) == 101) {
                            goto LABEL_521;
                          }
                          ++v184;
                        }
                        while (v184 != -3);
LABEL_345:
                        uint64_t v554 = v181;
                        uint64_t v199 = (std::locale::__imp *)memchr(v151, 46, v182);
                        if (v199) {
                          double v200 = v199;
                        }
                        else {
                          double v200 = v181;
                        }
LABEL_909:
                        v553[1].__locale_ = v200;
                      }
                      goto LABEL_910;
                  }
                }
                char v136 = 32;
              }
            }
            *float64_t v131 = v136;
            double v135 = v131 + 1;
            goto LABEL_213;
          }
        }
        else
        {
          v556.i32[0] = 1074;
          v556.i32[1] = v129 - 1074;
          size_t v130 = 1390;
          v556.i64[1] = 1390;
          uint64_t v129 = 1074;
        }
        float64_t v131 = (char *)operator new(v130);
        goto LABEL_181;
      }
      goto LABEL_1139;
    case 0xBu:
      double v83 = *(double *)a2;
      *(void *)&long long v551 = 0;
      DWORD2(v551) = -1;
      BYTE12(v551) = 32;
      *(_WORD *)((char *)&v551 + 13) = 0;
      HIBYTE(v551) = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_189;
      }
      float32x4_t v84 = *a1;
      uint64_t v85 = ((uint64_t (*)(long long *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v551, *a1, 319);
      if (BYTE1(v551) - 13 >= 6)
      {
        if (BYTE1(v551) > 0xCu || ((1 << SBYTE1(v551)) & 0x1801) == 0)
        {
LABEL_1139:
          std::__format_spec::__throw_invalid_type_format_error[abi:nn180100]("a floating-point");
LABEL_1140:
          std::__format_spec::__throw_invalid_type_format_error[abi:nn180100]("a BOOL");
LABEL_1141:
          std::__format_spec::__throw_invalid_type_format_error[abi:nn180100]("a character");
LABEL_1142:
          __break(1u);
          return;
        }
      }
      else
      {
        if (DWORD2(v551) != -1 || SWORD1(v551) <= -1) {
          int v87 = DWORD2(v551);
        }
        else {
          int v87 = 6;
        }
        DWORD2(v551) = v87;
      }
      *float32x4_t v84 = v85;
LABEL_189:
      uint64_t v123 = a1[1];
      uint64_t v126 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v551, v123);
      unint64_t v127 = v137;
      double v139 = v83;
      if (v83 < 0.0) {
        double v83 = -v83;
      }
      if (v137 == -1) {
        uint64_t v140 = 1074;
      }
      else {
        uint64_t v140 = v137;
      }
      v556.i64[0] = v140;
      if ((int)v140 < 1075)
      {
        size_t v141 = (int)v140 + 316;
        v556.i64[1] = v141;
        if ((v140 + 316) < 0x401)
        {
          uint64_t v142 = (char *)v558;
          uint64_t v140 = v137;
LABEL_199:
          char v132 = v126;
          unsigned __int8 v133 = BYTE4(v127);
          __src = v142;
          if ((*(void *)&v139 & 0x8000000000000000) != 0)
          {
            char v145 = 45;
          }
          else
          {
            int v143 = (v126 >> 3) & 3;
            if (v143 == 2)
            {
              char v145 = 43;
            }
            else
            {
              float64_t v144 = v142;
              if (v143 != 3)
              {
LABEL_220:
                switch(BYTE1(v126))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                    goto LABEL_1142;
                  case 0xB:
                    v553[0].__locale_ = (std::locale::__imp *)v144;
                    if ((v127 & 0x80000000) != 0) {
                      uint64_t v205 = (std::locale::__imp *)std::to_chars();
                    }
                    else {
                      uint64_t v205 = (std::locale::__imp *)MEMORY[0x1A6239160](v144, &v142[v141], 4, v140, v83);
                    }
                    *(void *)uint64_t v555 = v205;
                    int v274 = v144[1];
                    double v273 = (std::locale::__imp *)(v144 + 1);
                    if (v274 == 46)
                    {
                      double v275 = (std::locale::__imp *)((char *)v205 - 2);
                      double v276 = (std::locale::__imp *)memchr((char *)v205 - 6, 112, 4uLL);
                      uint64_t v205 = v273;
                      if (v276) {
                        double v273 = v276;
                      }
                      else {
                        double v273 = v275;
                      }
                    }
                    v553[1].__locale_ = v205;
                    uint64_t v554 = v273;
                    goto LABEL_1014;
                  case 0xC:
                    v553[0].__locale_ = (std::locale::__imp *)v144;
                    if ((v127 & 0x80000000) != 0) {
                      uint64_t v180 = (std::locale::__imp *)std::to_chars();
                    }
                    else {
                      uint64_t v180 = (std::locale::__imp *)MEMORY[0x1A6239160](v144, &v142[v141], 4, v140, v83);
                    }
                    *(void *)uint64_t v555 = v180;
                    uint64_t v247 = v144 + 1;
                    if (v144[1] == 46)
                    {
                      uint64_t v248 = (char *)v180 - 2;
                      unint64_t v249 = (char *)memchr((char *)v180 - 6, 112, 4uLL);
                      if (v249) {
                        uint64_t v250 = v249;
                      }
                      else {
                        uint64_t v250 = v248;
                      }
                      v553[1].__locale_ = (std::locale::__imp *)(v144 + 1);
                      uint64_t v554 = v250;
                      uint64_t v247 = v250;
                      if (v250 == v144)
                      {
LABEL_558:
                        *float64_t v144 = 80;
LABEL_1014:
                        if ((v126 & 0x20) != 0)
                        {
                          unint64_t v495 = (unint64_t)v553[1].__locale_;
                          if (v553[1].__locale_ == *(std::locale::__imp **)v555)
                          {
                            *(void *)uint64_t v555 = (char *)v553[1].__locale_ + 1;
                            *(unsigned char *)v553[1].__locale_ = 46;
                            size_t v496 = v554;
                            if (v554 != (void *)v495)
                            {
                              if ((char *)v554 + 1 == (void *)v495)
                              {
                                char v497 = *(unsigned char *)v554;
                                *(unsigned char *)uint64_t v554 = 46;
                                *(unsigned char *)unint64_t v495 = v497;
                              }
                              else
                              {
                                memmove((char *)v554 + 1, v554, v495 - (void)v554);
                                *size_t v496 = 46;
                              }
                            }
                            unint64_t v495 = (unint64_t)v554;
                            v553[1].__locale_ = (std::locale::__imp *)v554;
                            uint64_t v554 = (char *)v554 + 1;
                          }
                          if (BYTE1(v126) - 17 <= 1)
                          {
                            if (v127 <= 1) {
                              int v498 = 1;
                            }
                            else {
                              int v498 = v127;
                            }
                            if ((v127 & 0x80000000) != 0) {
                              int v498 = 6;
                            }
                            if (v554 == *(void **)v555) {
                              int v499 = LODWORD(v553[0].__locale_) - v495;
                            }
                            else {
                              int v499 = -1;
                            }
                            int v500 = v499 + v498;
                            uint64_t v501 = (char *)v554 + ~v495;
                            if ((uint64_t)v501 < v500) {
                              v556.i32[1] += v500 - v501;
                            }
                          }
                        }
                        if ((v126 & 0x40) == 0)
                        {
                          uint64_t v463 = *(std::locale::__imp **)v555;
                          double v464 = (std::locale::__imp *)__src;
                          size_t v465 = *(void *)v555 - (void)__src;
                          size_t v466 = v556.i32[1];
                          if (*(void *)v555 - (void)__src + v556.i32[1] >= v126 >> 32)
                          {
                            if (v556.i32[1])
                            {
                              uint64_t v467 = (std::locale::__imp *)v554;
                              if (v554 != *(void **)v555)
                              {
                                uint64_t v468 = (void *)*v123;
                                unint64_t v506 = (unsigned char *)v554 - (unsigned char *)__src;
                                size_t v508 = *(void *)(*v123 + 8);
                                uint64_t v507 = *(void *)(*v123 + 16);
                                if (v507 + (unsigned char *)v554 - (unsigned char *)__src >= v508)
                                {
                                  ((void (*)(void))v468[3])(*v468);
                                  uint64_t v507 = 0;
                                  v468[2] = 0;
                                  size_t v508 = v468[1];
                                }
                                size_t v509 = v506 - v508;
                                if (v506 >= v508)
                                {
                                  if (v508) {
                                    memmove((void *)(*v468 + v507), v464, v508);
                                  }
                                  v468[2] = v508;
                                  ((void (*)(void, size_t, void))v468[3])(*v468, v508, v468[4]);
                                  v468[2] = 0;
                                  if (v509)
                                  {
                                    uint64_t v521 = (char *)v464 + v508;
                                    do
                                    {
                                      if (v468[1] >= v509) {
                                        size_t v522 = v509;
                                      }
                                      else {
                                        size_t v522 = v468[1];
                                      }
                                      if (v522) {
                                        memmove((void *)*v468, v521, v522);
                                      }
                                      v468[2] = v522;
                                      v521 += v522;
                                      v509 -= v522;
                                      ((void (*)(void, size_t, void))v468[3])(*v468, v522, v468[4]);
                                      v468[2] = 0;
                                    }
                                    while (v509);
                                  }
                                  uint64_t v510 = 0;
                                }
                                else
                                {
                                  if (v467 != v464)
                                  {
                                    memmove((void *)(*v468 + v507), v464, v467 - v464);
                                    uint64_t v507 = v468[2];
                                  }
                                  uint64_t v510 = v507 + v506;
                                  v468[2] = v510;
                                }
                                size_t v523 = v468[1];
                                if (v510 + v466 >= v523)
                                {
                                  ((void (*)(void))v468[3])(*v468);
                                  uint64_t v510 = 0;
                                  v468[2] = 0;
                                  size_t v523 = v468[1];
                                }
                                size_t v524 = v466 - v523;
                                if (v466 >= v523)
                                {
                                  unint64_t v525 = (char *)*v468;
                                  if (v523)
                                  {
                                    memset(&v525[v510], 48, v523);
                                    unint64_t v525 = (char *)*v468;
                                  }
                                  v468[2] = v523;
                                  while (1)
                                  {
                                    ((void (*)(char *, size_t, void))v468[3])(v525, v523, v468[4]);
                                    v468[2] = 0;
                                    if (!v524) {
                                      break;
                                    }
                                    unint64_t v525 = (char *)*v468;
                                    if (v468[1] >= v524) {
                                      size_t v523 = v524;
                                    }
                                    else {
                                      size_t v523 = v468[1];
                                    }
                                    if (v523)
                                    {
                                      memset(v525, 48, v523);
                                      unint64_t v525 = (char *)*v468;
                                    }
                                    v468[2] = v523;
                                    v524 -= v523;
                                  }
                                  size_t v487 = 0;
                                }
                                else
                                {
                                  memset((void *)(*v468 + v510), 48, v466);
                                  size_t v487 = v468[2] + v466;
                                  v468[2] = v487;
                                }
                                size_t v489 = v463 - v467;
                                size_t v526 = v468[1];
                                if (v487 + v463 - v467 >= v526)
                                {
                                  ((void (*)(void))v468[3])(*v468);
                                  size_t v487 = 0;
                                  v468[2] = 0;
                                  size_t v526 = v468[1];
                                }
                                size_t v527 = v489 - v526;
                                if (v489 >= v526)
                                {
                                  if (v526) {
                                    memmove((void *)(*v468 + v487), v467, v526);
                                  }
                                  v468[2] = v526;
                                  ((void (*)(void, size_t, void))v468[3])(*v468, v526, v468[4]);
                                  v468[2] = 0;
                                  if (v527)
                                  {
                                    uint64_t v528 = (char *)v467 + v526;
                                    do
                                    {
                                      if (v468[1] >= v527) {
                                        size_t v529 = v527;
                                      }
                                      else {
                                        size_t v529 = v468[1];
                                      }
                                      if (v529) {
                                        memmove((void *)*v468, v528, v529);
                                      }
                                      v468[2] = v529;
                                      v528 += v529;
                                      v527 -= v529;
                                      ((void (*)(void, size_t, void))v468[3])(*v468, v529, v468[4]);
                                      v468[2] = 0;
                                    }
                                    while (v527);
                                  }
                                  goto LABEL_1063;
                                }
                                goto LABEL_1122;
                              }
                            }
                            uint64_t v468 = (void *)*v123;
                            size_t v514 = *(void *)(*v123 + 8);
                            uint64_t v513 = *(void *)(*v123 + 16);
                            if (v513 + v465 >= v514)
                            {
                              ((void (*)(void))v468[3])(*v468);
                              uint64_t v513 = 0;
                              v468[2] = 0;
                              size_t v514 = v468[1];
                            }
                            size_t v515 = v465 - v514;
                            if (v465 >= v514)
                            {
                              if (v514) {
                                memmove((void *)(*v468 + v513), v464, v514);
                              }
                              v468[2] = v514;
                              ((void (*)(void, size_t, void))v468[3])(*v468, v514, v468[4]);
                              v468[2] = 0;
                              if (v515)
                              {
                                uint64_t v516 = (char *)v464 + v514;
                                do
                                {
                                  if (v468[1] >= v515) {
                                    size_t v517 = v515;
                                  }
                                  else {
                                    size_t v517 = v468[1];
                                  }
                                  if (v517) {
                                    memmove((void *)*v468, v516, v517);
                                  }
                                  v468[2] = v517;
                                  v516 += v517;
                                  v515 -= v517;
                                  ((void (*)(void, size_t, void))v468[3])(*v468, v517, v468[4]);
                                  v468[2] = 0;
                                }
                                while (v515);
                              }
                              size_t v477 = 0;
                            }
                            else
                            {
                              if (v463 != v464)
                              {
                                memmove((void *)(*v468 + v513), v464, v465);
                                uint64_t v513 = v468[2];
                              }
                              size_t v477 = v513 + v465;
                              v468[2] = v477;
                            }
                            size_t v518 = v468[1];
                            if (v477 + v466 >= v518)
                            {
                              ((void (*)(void))v468[3])(*v468);
                              size_t v477 = 0;
                              v468[2] = 0;
                              size_t v518 = v468[1];
                            }
                            size_t v519 = v466 - v518;
                            if (v466 >= v518)
                            {
                              unint64_t v520 = (char *)*v468;
                              if (v518)
                              {
                                memset(&v520[v477], 48, v518);
                                unint64_t v520 = (char *)*v468;
                              }
                              v468[2] = v518;
                              while (1)
                              {
                                ((void (*)(char *, size_t, void))v468[3])(v520, v518, v468[4]);
                                v468[2] = 0;
                                if (!v519) {
                                  break;
                                }
                                unint64_t v520 = (char *)*v468;
                                if (v468[1] >= v519) {
                                  size_t v518 = v519;
                                }
                                else {
                                  size_t v518 = v468[1];
                                }
                                if (v518)
                                {
                                  memset(v520, 48, v518);
                                  unint64_t v520 = (char *)*v468;
                                }
                                v468[2] = v518;
                                v519 -= v518;
                              }
                              goto LABEL_1063;
                            }
LABEL_1080:
                            if (v466)
                            {
                              memset((void *)(*v468 + v477), 48, v466);
                              size_t v477 = v468[2];
                            }
                            v468[2] = v477 + v466;
                            goto LABEL_1063;
                          }
LABEL_1034:
                          uint64_t v468 = (void *)*v123;
                          if ((v132 & 7) == 4)
                          {
                            if (v464 != v553[0].__locale_)
                            {
                              char v502 = *(unsigned char *)v464;
                              double v464 = (std::locale::__imp *)((char *)v464 + 1);
                              size_t v503 = (unsigned char *)*v468;
                              uint64_t v504 = v468[2];
                              v468[2] = v504 + 1;
                              v503[v504] = v502;
                              if (v468[2] == v468[1])
                              {
                                ((void (*)(void))v468[3])(*v468);
                                v468[2] = 0;
                              }
                            }
                            unsigned __int8 v505 = v126 & 0xF8 | 3;
                            unsigned __int8 v133 = 48;
                            uint64_t v463 = *(std::locale::__imp **)v555;
                          }
                          else
                          {
                            unsigned __int8 v505 = v126;
                          }
                          unint64_t v511 = v126 & 0xFFFFFFFFFFFFFF00 | v505;
                          unint64_t v512 = v127 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v133 << 32);
                          if (v466) {
                            std::__formatter::__write_using_trailing_zeros[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v464, v463, v468, v511, v512, v465, v554, v466);
                          }
                          else {
                            std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((char *)v464, v463 - v464, v468, v511, v512, v465);
                          }
                          goto LABEL_1063;
                        }
LABEL_1039:
                        uint64_t v468 = (void *)*v123;
                        if (!*((unsigned char *)v123 + 40))
                        {
                          MEMORY[0x1A6239040](&v545);
                          if (*((unsigned char *)v123 + 40))
                          {
                            std::locale::operator=((std::locale *)v123 + 4, &v545);
                          }
                          else
                          {
                            std::locale::locale((std::locale *)v123 + 4, &v545);
                            *((unsigned char *)v123 + 40) = 1;
                          }
                          std::locale::~locale(&v545);
                        }
                        std::locale::locale(&v545, (const std::locale *)v123 + 4);
                        std::__formatter::__format_locale_specific_form[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v468, (uint64_t)&v556, (char **)v553, &v545, v126, v127);
                        std::locale::~locale(&v545);
                        goto LABEL_1063;
                      }
                    }
                    else
                    {
                      v553[1].__locale_ = v180;
                      uint64_t v554 = v144 + 1;
                    }
                    unint64_t v251 = v247 - v144;
                    if ((unint64_t)(v247 - v144) < 8)
                    {
                      uint64_t v252 = v144;
                      goto LABEL_554;
                    }
                    if (v251 >= 0x10)
                    {
                      unint64_t v253 = v251 & 0xFFFFFFFFFFFFFFF0;
                      v302.i64[0] = 0x6000000060;
                      v302.i64[1] = 0x6000000060;
                      v303.i64[0] = 0x600000006;
                      v303.i64[1] = 0x600000006;
                      v304.i64[0] = 0x4141414141414141;
                      v304.i64[1] = 0x4141414141414141;
                      unint64_t v305 = v251 & 0xFFFFFFFFFFFFFFF0;
                      uint64_t v306 = (int8x16_t *)v144;
                      do
                      {
                        int16x8_t v307 = vmovl_high_s8(*v306);
                        int16x8_t v308 = vmovl_s8(*(int8x8_t *)v306->i8);
                        v565.val[0] = (int8x16_t)vaddw_s16(v302, *(int16x4_t *)v308.i8);
                        v565.val[1] = (int8x16_t)vaddw_high_s16(v302, v308);
                        v565.val[2] = (int8x16_t)vaddw_s16(v302, *(int16x4_t *)v307.i8);
                        v565.val[3] = (int8x16_t)vaddw_high_s16(v302, v307);
                        int8x16_t *v306 = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v303, (uint32x4_t)v565.val[0]), (int16x8_t)vcgtq_u32(v303, (uint32x4_t)v565.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v303, (uint32x4_t)v565.val[2]), (int16x8_t)vcgtq_u32(v303, (uint32x4_t)v565.val[3]))), vaddq_s8(vqtbl4q_s8(v565, (int8x16_t)xmmword_1A28FE720), v304), *v306);
                        ++v306;
                        v305 -= 16;
                      }
                      while (v305);
                      if (v251 == v253) {
                        goto LABEL_557;
                      }
                      if ((v251 & 8) == 0)
                      {
                        uint64_t v252 = &v144[v253];
                        goto LABEL_554;
                      }
                    }
                    else
                    {
                      unint64_t v253 = 0;
                    }
                    uint64_t v252 = &v144[v251 & 0xFFFFFFFFFFFFFFF8];
                    float64x2_t v254 = (int8x8_t *)&v144[v253];
                    unint64_t v255 = v253 - (v251 & 0xFFFFFFFFFFFFFFF8);
                    v256.i64[0] = 0x6000000060;
                    v256.i64[1] = 0x6000000060;
                    v257.i64[0] = 0x600000006;
                    v257.i64[1] = 0x600000006;
                    do
                    {
                      int16x8_t v258 = vmovl_s8(*v254);
                      v562.val[0] = (int8x16_t)vaddw_s16(v256, *(int16x4_t *)v258.i8);
                      v562.val[1] = (int8x16_t)vaddw_high_s16(v256, v258);
                      int8x8_t *v254 = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v257, (uint32x4_t)v562.val[0]), (int16x8_t)vcgtq_u32(v257, (uint32x4_t)v562.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v562, (int8x16_t)xmmword_1A28FF670), (int8x8_t)0x4141414141414141), *v254);
                      ++v254;
                      v255 += 8;
                    }
                    while (v255);
                    if (v251 == (v251 & 0xFFFFFFFFFFFFFFF8))
                    {
LABEL_557:
                      float64_t v144 = v247;
                      goto LABEL_558;
                    }
                    do
                    {
LABEL_554:
                      int v309 = *v252;
                      if ((v309 - 97) < 6) {
                        LOBYTE(v309) = v309 - 32;
                      }
                      *v252++ = v309;
                    }
                    while (v252 != v247);
                    goto LABEL_557;
                  case 0xD:
                    v553[0].__locale_ = (std::locale::__imp *)v144;
                    uint64_t v206 = (char *)MEMORY[0x1A6239160](v144, &v142[v141], 1, v140, v83);
                    *(void *)uint64_t v555 = v206;
                    if (v144[1] == 46)
                    {
                      v553[1].__locale_ = (std::locale::__imp *)(v144 + 1);
                      uint64_t v207 = v206 - v144 - 2;
                      uint64_t v208 = v206;
                      if (v207 >= 4)
                      {
                        uint64_t v209 = 6;
                        if ((unint64_t)v207 < 6) {
                          uint64_t v209 = v206 - v144 - 2;
                        }
                        uint64_t v210 = -v209;
                        while (v206[v210] != 101)
                        {
                          if (++v210 == -3)
                          {
                            uint64_t v554 = v206;
                            goto LABEL_1014;
                          }
                        }
                        uint64_t v208 = &v206[v210];
                      }
                      uint64_t v554 = v208;
                    }
                    else
                    {
                      v553[1].__locale_ = (std::locale::__imp *)v206;
                      uint64_t v554 = v144 + 1;
                    }
                    goto LABEL_1014;
                  case 0xE:
                    v553[0].__locale_ = (std::locale::__imp *)v144;
                    uint64_t v211 = (std::locale::__imp *)MEMORY[0x1A6239160](v144, &v142[v141], 1, v140, v83);
                    *(void *)uint64_t v555 = v211;
                    uint64_t v212 = (std::locale::__imp *)(v144 + 1);
                    if (v144[1] == 46)
                    {
                      v553[1].__locale_ = (std::locale::__imp *)(v144 + 1);
                      uint64_t v213 = v211 - (std::locale::__imp *)v144 - 2;
                      uint64_t v212 = v211;
                      if (v213 < 4) {
                        goto LABEL_580;
                      }
                      uint64_t v214 = 6;
                      if ((unint64_t)v213 < 6) {
                        uint64_t v214 = v211 - (std::locale::__imp *)v144 - 2;
                      }
                      uint64_t v215 = -v214;
                      while (*((unsigned char *)v211 + v215) != 101)
                      {
                        if (++v215 == -3)
                        {
                          uint64_t v212 = v211;
                          goto LABEL_580;
                        }
                      }
                      uint64_t v212 = (std::locale::__imp *)((char *)v211 + v215);
                    }
                    else
                    {
                      v553[1].__locale_ = v211;
                    }
LABEL_580:
                    uint64_t v554 = v212;
                    *(unsigned char *)uint64_t v212 = 69;
                    goto LABEL_1014;
                  case 0xF:
                  case 0x10:
                    v553[0].__locale_ = (std::locale::__imp *)v144;
                    unsigned __int8 v153 = (std::locale::__imp *)MEMORY[0x1A6239160](v144, &v142[v141], 2, v140, v83);
                    *(void *)uint64_t v555 = v153;
                    if (v140) {
                      int v154 = v140 + 1;
                    }
                    else {
                      int v154 = 0;
                    }
                    v553[1].__locale_ = (std::locale::__imp *)((char *)v153 - v154);
                    goto LABEL_409;
                  case 0x11:
                    v556.i32[1] = 0;
                    v553[0].__locale_ = (std::locale::__imp *)v144;
                    uint64_t v201 = (std::locale::__imp *)MEMORY[0x1A6239160](v144, &v142[v141], 3, v140, v83);
                    *(void *)uint64_t v555 = v201;
                    unsigned __int8 v153 = (std::locale::__imp *)(v144 + 1);
                    if (v144 + 1 == (char *)v201) {
                      goto LABEL_408;
                    }
                    size_t v202 = v201 - v153;
                    if (v201 - v153 < 4) {
                      goto LABEL_390;
                    }
                    uint64_t v216 = 6;
                    if (v202 < 6) {
                      uint64_t v216 = v201 - v153;
                    }
                    uint64_t v204 = -v216;
                    while (*((unsigned char *)v201 + v204) != 101)
                    {
                      if (++v204 == -3) {
                        goto LABEL_390;
                      }
                    }
LABEL_525:
                    unint64_t v284 = (char *)v201 + v204;
                    if (*(unsigned char *)v153 == 46) {
                      uint64_t v285 = v153;
                    }
                    else {
                      uint64_t v285 = v201;
                    }
                    v553[1].__locale_ = v285;
                    uint64_t v554 = v284;
                    goto LABEL_1014;
                  case 0x12:
                    v556.i32[1] = 0;
                    v553[0].__locale_ = (std::locale::__imp *)v144;
                    uint64_t v201 = (std::locale::__imp *)MEMORY[0x1A6239160](v144, &v142[v141], 3, v140, v83);
                    *(void *)uint64_t v555 = v201;
                    unsigned __int8 v153 = (std::locale::__imp *)(v144 + 1);
                    if (v144 + 1 == (char *)v201)
                    {
                      v553[1].__locale_ = v201;
                      uint64_t v554 = v201;
                    }
                    else
                    {
                      size_t v202 = v201 - v153;
                      if (v201 - v153 < 4) {
                        goto LABEL_390;
                      }
                      uint64_t v217 = 6;
                      if (v202 < 6) {
                        uint64_t v217 = v201 - v153;
                      }
                      uint64_t v218 = -v217;
                      while (*((unsigned char *)v201 + v218) != 101)
                      {
                        if (++v218 == -3) {
                          goto LABEL_390;
                        }
                      }
                      if (*(unsigned char *)v153 == 46) {
                        uint64_t v311 = (std::locale::__imp *)(v144 + 1);
                      }
                      else {
                        uint64_t v311 = v201;
                      }
                      v553[1].__locale_ = v311;
                      uint64_t v554 = (char *)v201 + v218;
                      *((unsigned char *)v201 + v218) = 69;
                    }
                    goto LABEL_1014;
                  default:
                    if ((v127 & 0x80000000) != 0)
                    {
                      v553[0].__locale_ = (std::locale::__imp *)v144;
                      uint64_t v268 = std::to_chars((std::__1 *)v144, &v142[v141], v138, v83);
                      float64x2_t v269 = (std::locale::__imp *)v268;
                      *(void *)uint64_t v555 = v268;
                      unint64_t v270 = v268 - (void)v144;
                      double v271 = (std::locale::__imp *)v268;
                      if (v268 - (uint64_t)v144 < 4) {
                        goto LABEL_1008;
                      }
                      if (v270 >= 6) {
                        unint64_t v270 = 6;
                      }
                      uint64_t v272 = -(uint64_t)v270;
                      while (*(unsigned char *)(v268 + v272) != 101)
                      {
                        if (++v272 == -3)
                        {
                          double v271 = (std::locale::__imp *)v268;
                          goto LABEL_1008;
                        }
                      }
                      double v271 = (std::locale::__imp *)(v268 + v272);
LABEL_1008:
                      uint64_t v554 = v271;
                      size_t v494 = (std::locale::__imp *)memchr(v144 + 1, 46, v271 - (std::locale::__imp *)(v144 + 1));
                      if (v494) {
                        float v220 = v494;
                      }
                      else {
                        float v220 = v271;
                      }
                      if (v220 == v271) {
                        float v220 = v269;
                      }
                      goto LABEL_1013;
                    }
                    v556.i32[1] = 0;
                    v553[0].__locale_ = (std::locale::__imp *)v144;
                    uint64_t v201 = (std::locale::__imp *)MEMORY[0x1A6239160](v144, &v142[v141], 3, v140, v83);
                    *(void *)uint64_t v555 = v201;
                    unsigned __int8 v153 = (std::locale::__imp *)(v144 + 1);
                    if (v144 + 1 == (char *)v201)
                    {
LABEL_408:
                      v553[1].__locale_ = v153;
LABEL_409:
                      uint64_t v554 = v153;
                    }
                    else
                    {
                      size_t v202 = v201 - v153;
                      if (v201 - v153 < 4) {
                        goto LABEL_390;
                      }
                      uint64_t v203 = 6;
                      if (v202 < 6) {
                        uint64_t v203 = v201 - v153;
                      }
                      uint64_t v204 = -v203;
                      do
                      {
                        if (*((unsigned char *)v201 + v204) == 101) {
                          goto LABEL_525;
                        }
                        ++v204;
                      }
                      while (v204 != -3);
LABEL_390:
                      uint64_t v554 = v201;
                      uint64_t v219 = (std::locale::__imp *)memchr(v153, 46, v202);
                      if (v219) {
                        float v220 = v219;
                      }
                      else {
                        float v220 = v201;
                      }
LABEL_1013:
                      v553[1].__locale_ = v220;
                    }
                    goto LABEL_1014;
                }
              }
              char v145 = 32;
            }
          }
          *uint64_t v142 = v145;
          float64_t v144 = v142 + 1;
          goto LABEL_220;
        }
      }
      else
      {
        v556.i32[0] = 1074;
        v556.i32[1] = v140 - 1074;
        size_t v141 = 1390;
        v556.i64[1] = 1390;
        uint64_t v140 = 1074;
      }
      uint64_t v142 = (char *)operator new(v141);
      goto LABEL_199;
    case 0xCu:
      double v88 = *(char **)a2;
      v556.i32[0] = 1;
      *(uint64_t *)((char *)v556.i64 + 4) = 0xFFFFFFFF00000000;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_115;
      }
      unint64_t v89 = *a1;
      uint64_t v90 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 296);
      if (v556.u8[1] >= 2u && v556.u8[1] != 19) {
        goto LABEL_1137;
      }
      uint64_t *v89 = v90;
LABEL_115:
      int v7 = (std::locale *)a1[1];
      uint64_t v91 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
      if (SHIDWORD(v91) > 0 || (v92 & 0x80000000) == 0)
      {
        uint64_t v94 = v91;
        unint64_t v95 = v92;
        size_t v96 = strlen(v88);
        v7->__locale_ = (std::locale::__imp *)std::__formatter::__write_string[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((unsigned __int8 *)v88, v96, v7->__locale_, v94, v95);
        return;
      }
      unint64_t v67 = v7->__locale_;
      char v103 = *v88;
      if (*v88)
      {
        uint64_t v104 = *((void *)v67 + 2);
        uint64_t v105 = (unsigned __int8 *)(v88 + 1);
        do
        {
          uint64_t v107 = *(void *)v67;
          *((void *)v67 + 2) = v104 + 1;
          *(unsigned char *)(v107 + v104) = v103;
          uint64_t v104 = *((void *)v67 + 2);
          if (v104 == *((void *)v67 + 1))
          {
            (*((void (**)(void))v67 + 3))(*(void *)v67);
            uint64_t v104 = 0;
            *((void *)v67 + 2) = 0;
          }
          int v106 = *v105++;
          char v103 = v106;
        }
        while (v106);
      }
      goto LABEL_149;
    case 0xDu:
      long long v18 = *(unsigned __int8 **)a2;
      size_t v19 = *((void *)a2 + 1);
      v556.i32[0] = 1;
      *(uint64_t *)((char *)v556.i64 + 4) = 0xFFFFFFFF00000000;
      v556.i8[12] = 32;
      *(__int16 *)((char *)&v556.i16[6] + 1) = 0;
      v556.i8[15] = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_18;
      }
      uint64_t v20 = *a1;
      uint64_t v21 = ((uint64_t (*)(int8x16_t *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(&v556, *a1, 296);
      if (v556.u8[1] >= 2u && v556.u8[1] != 19) {
        goto LABEL_1137;
      }
      uint64_t *v20 = v21;
LABEL_18:
      int v7 = (std::locale *)a1[1];
      BOOL v22 = v7->__locale_;
      uint64_t v23 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v556.i8, v7);
      uint64_t v25 = (std::locale::__imp *)std::__formatter::__write_string[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v18, v19, v22, v23, v24);
      goto LABEL_139;
    case 0xEu:
      unint64_t v9 = *(void *)a2;
      v553[0].__locale_ = 0;
      LODWORD(v553[1].__locale_) = -1;
      BYTE4(v553[1].__locale_) = 32;
      *(_WORD *)((char *)&v553[1].__locale_ + 5) = 0;
      HIBYTE(v553[1].__locale_) = 0;
      if (!*(unsigned char *)a1[2]) {
        goto LABEL_12;
      }
      int v10 = *a1;
      uint64_t v11 = ((uint64_t (*)(std::locale *, uint64_t *, uint64_t))std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>)(v553, *a1, 292);
      if (BYTE1(v553[0].__locale_) - 8 >= 2 && BYTE1(v553[0].__locale_) != 0) {
        goto LABEL_1138;
      }
      *int v10 = v11;
LABEL_12:
      int v7 = (std::locale *)a1[1];
      uint64_t v13 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)v553, v7);
      unint64_t v15 = v13 & 0xFFFFFFFFFFFF00DFLL;
      if ((v13 & 0xFF00) == 0x900)
      {
        unint64_t v16 = v15 | 0x720;
        uint64_t v17 = "0X";
      }
      else
      {
        unint64_t v16 = v15 | 0x620;
        uint64_t v17 = "0x";
      }
      uint64_t v25 = (std::locale::__imp *)std::__formatter::__format_integer[abi:nn180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v9, (uint64_t)v7, v16, v14, &v556, (uint64_t)&__src + 3, v17, 0x10u);
      goto LABEL_139;
    case 0xFu:
      uint64_t v97 = *a1;
      uint64_t v98 = *(void *)a2;
      uint64_t v99 = (void (*)(uint64_t *, uint64_t *, uint64_t))*((void *)a2 + 1);
      double v100 = a1[1];
      v99(v97, v100, v98);
      return;
    default:
      goto LABEL_1134;
  }
}

uint64_t std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, void *a2)
{
  *(void *)&v25[23] = *MEMORY[0x1E4F143B8];
  char v5 = *a1;
  uint64_t v6 = a1[1];
  __int16 v7 = *((_WORD *)a1 + 1);
  uint64_t v8 = *((unsigned int *)a1 + 1);
  if ((v7 & 0x4000) != 0)
  {
    uint64_t v9 = (int)v8;
    unint64_t v10 = a2[1];
    if (v10 <= (int)v8)
    {
      LOBYTE(v12) = 0;
    }
    else if (v10 > 0xC)
    {
      uint64_t v13 = a2[2] + 32 * (int)v8;
      uint64_t v2 = *(void *)v13;
      uint64_t v9 = *(void *)(v13 + 8);
      LOBYTE(v12) = *(unsigned char *)(v13 + 16);
      *(void *)uint64_t v21 = *(void *)(v13 + 17);
      *(void *)&v21[7] = *(void *)(v13 + 24);
    }
    else
    {
      uint64_t v11 = a2[2];
      uint64_t v12 = (a2[3] >> (5 * v8)) & 0x1FLL;
      uint64_t v2 = *(void *)(v11 + 16 * (int)v8);
      uint64_t v9 = *(void *)(v11 + 16 * (int)v8 + 8);
    }
    uint64_t v22 = v2;
    uint64_t v23 = v9;
    char v24 = v12;
    *(void *)uint64_t v25 = *(void *)v21;
    *(void *)&v25[7] = *(void *)&v21[7];
    uint64_t v8 = ((uint64_t (*)(uint64_t *))std::__visit_format_arg[abi:nn180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)(&v22);
    __int16 v7 = *((_WORD *)a1 + 1);
  }
  int v14 = *((_DWORD *)a1 + 2);
  if (v7 < 0)
  {
    uint64_t v15 = v14;
    unint64_t v16 = a2[1];
    if (v16 <= v14)
    {
      LOBYTE(v18) = 0;
    }
    else if (v16 > 0xC)
    {
      uint64_t v19 = a2[2] + 32 * v14;
      uint64_t v2 = *(void *)v19;
      uint64_t v15 = *(void *)(v19 + 8);
      LOBYTE(v18) = *(unsigned char *)(v19 + 16);
      *(void *)uint64_t v21 = *(void *)(v19 + 17);
      *(void *)&v21[7] = *(void *)(v19 + 24);
    }
    else
    {
      uint64_t v17 = a2[2];
      uint64_t v18 = (a2[3] >> (5 * v14)) & 0x1FLL;
      uint64_t v2 = *(void *)(v17 + 16 * v14);
      uint64_t v15 = *(void *)(v17 + 16 * v14 + 8);
    }
    uint64_t v22 = v2;
    uint64_t v23 = v15;
    char v24 = v18;
    *(void *)uint64_t v25 = *(void *)v21;
    *(void *)&v25[7] = *(void *)&v21[7];
    ((void (*)(uint64_t *))std::__visit_format_arg[abi:nn180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)(&v22);
  }
  return (v6 << 8) | (v8 << 32) | v5 & 0x7F;
}

void *std::__formatter::__write_string_no_precision[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned __int8 *__src, size_t __len, void *a3, uint64_t a4, unint64_t a5)
{
  __int16 v7 = (char *)__src;
  unint64_t v8 = HIDWORD(a4);
  if (a4 > 0)
  {
    if (__len)
    {
      if (((char)*__src & 0x80000000) == 0)
      {
        uint64_t v11 = 0;
        __src += v8 - 1;
        while (1)
        {
          if (__len - 1 == v11)
          {
            unint64_t v16 = (char *)__len;
            goto LABEL_30;
          }
          if (v8 - 1 == v11) {
            break;
          }
          int v12 = v7[++v11];
          if (v12 < 0)
          {
            unint64_t v8 = v8 - v11 + 1;
            __src = (unsigned __int8 *)&v7[v11 - 1];
            goto LABEL_26;
          }
        }
        if ((v7[v8] & 0x80000000) == 0)
        {
          unint64_t v16 = (char *)HIDWORD(a4);
          goto LABEL_30;
        }
        unint64_t v8 = 1;
      }
LABEL_26:
      unint64_t v16 = (char *)(__src
                   - (unsigned __int8 *)v7
                   + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:nn180100]<char const*>(__src, (unsigned __int8 *)&v7[__len], v8, 1));
    }
    else
    {
      unint64_t v16 = 0;
    }
LABEL_30:
    std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v7, __len, a3, a4, a5, (uint64_t)v16);
    return a3;
  }
  size_t v14 = a3[1];
  uint64_t v13 = a3[2];
  if (v13 + __len >= v14)
  {
    ((void (*)(void))a3[3])(*a3);
    uint64_t v13 = 0;
    a3[2] = 0;
    size_t v14 = a3[1];
  }
  size_t v15 = __len - v14;
  if (__len >= v14)
  {
    if (v14) {
      memmove((void *)(*a3 + v13), v7, v14);
    }
    a3[2] = v14;
    ((void (*)(void, size_t, void))a3[3])(*a3, v14, a3[4]);
    a3[2] = 0;
    if (v15)
    {
      uint64_t v17 = &v7[v14];
      do
      {
        if (a3[1] >= v15) {
          size_t v18 = v15;
        }
        else {
          size_t v18 = a3[1];
        }
        if (v18) {
          memmove((void *)*a3, v17, v18);
        }
        a3[2] = v18;
        v17 += v18;
        v15 -= v18;
        ((void (*)(void, size_t, void))a3[3])(*a3, v18, a3[4]);
        a3[2] = 0;
      }
      while (v15);
    }
  }
  else
  {
    if (__len)
    {
      memmove((void *)(*a3 + v13), v7, __len);
      uint64_t v13 = a3[2];
    }
    a3[2] = v13 + __len;
  }
  return a3;
}

void *std::__formatter::__write_string[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned __int8 *__src, size_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v8 = (char *)__src;
  if ((a5 & 0x80000000) == 0)
  {
    int v9 = 0;
    unint64_t v10 = __src;
    if (a2 && a5)
    {
      unint64_t v11 = a5;
      if (((char)*__src & 0x80000000) == 0)
      {
        uint64_t v12 = 0;
        __src += a5 - 1;
        unint64_t v10 = (unsigned __int8 *)&v8[a5];
        while (1)
        {
          if (a2 - 1 == v12)
          {
            int v9 = a2;
            unint64_t v10 = (unsigned __int8 *)&v8[a2];
            goto LABEL_17;
          }
          if (a5 - 1 == v12) {
            break;
          }
          int v13 = v8[++v12];
          if (v13 < 0)
          {
            unint64_t v11 = a5 - v12 + 1;
            __src = (unsigned __int8 *)&v8[v12 - 1];
            goto LABEL_13;
          }
        }
        if (((char)*v10 & 0x80000000) == 0)
        {
          int v9 = a5;
          goto LABEL_17;
        }
        unint64_t v11 = 1;
      }
LABEL_13:
      int v15 = __src - v8;
      int v16 = std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:nn180100]<char const*>(__src, (unsigned __int8 *)&v8[a2], v11, 0);
      unint64_t v10 = v17;
      int v9 = v15 + v16;
    }
LABEL_17:
    return std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v8, v10 - (unsigned __int8 *)v8, a3, a4, a5, v9);
  }
  return std::__formatter::__write_string_no_precision[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, a2, a3, a4, a5);
}

void *std::__formatter::__format_integer[abi:nn180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(void *result, uint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  switch(BYTE1(a3))
  {
    case 1:
      __break(1u);
      return result;
    case 2:
      unint64_t v5 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      uint64_t v6 = &v12;
      unsigned int v8 = 2;
      __int16 v7 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v5 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      uint64_t v6 = &v12;
      unsigned int v8 = 2;
      __int16 v7 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v5 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      uint64_t v6 = (uint64_t *)v11;
      if (result) {
        __int16 v7 = "0";
      }
      else {
        __int16 v7 = 0;
      }
      unsigned int v8 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v5 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      uint64_t v6 = (uint64_t *)v10;
      unsigned int v8 = 16;
      __int16 v7 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v5 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      uint64_t v6 = (uint64_t *)v10;
      unsigned int v8 = 16;
      __int16 v7 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:nn180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(result, a2, v5, a4, a5, v9, (uint64_t)v6, v7, v8);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:nn180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(result, a2, a3, a4, a5, v9, (uint64_t)v10, 0, 0xAu);
      break;
  }
  return result;
}

void std::__function::__func<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v1 + 3027) != v2)
  {
    *(unsigned char *)(v1 + 3027) = v2;
    md::LabelManager::updateStyleManagerClientStyleAttributes((md::LabelManager *)v1);
    md::LabelStyleCache::stylesheetDidChange(*(std::mutex **)(v1 + 336));
    md::LabelManager::clearScene(v1, 0);
  }
}

void md::LabelManager::updateStyleManagerClientStyleAttributes(md::LabelManager *this)
{
  uint64_t v1 = *((void *)this + 436);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 520);
    unsigned __int8 v4 = *(std::__shared_weak_count **)(v1 + 528);
    if (v4
      && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v3) {
        return;
      }
    }
    else if (!v3)
    {
      return;
    }
    uint64_t v5 = *((void *)this + 436);
    uint64_t v6 = *(void *)(v5 + 520);
    __int16 v7 = *(std::__shared_weak_count **)(v5 + 528);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(v6, 0x10004u, *((unsigned __int8 *)this + 3027) ^ 1);
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A1B37EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL md::LabelStyleCache::setContentScale(md::LabelStyleCache *this, float a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  std::mutex::lock((std::mutex *)this);
  float v4 = *((float *)this + 38);
  if (v4 != a2)
  {
    *((float *)this + 38) = a2;
    int v9 = (void (**)(void **))&unk_1EF570F50;
    float v10 = a2;
    unint64_t v11 = (void **)&v9;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*((uint64_t **)this + 33), (uint64_t)&v9);
    if (v11 == (void **)&v9)
    {
      v9[4]((void **)&v9);
    }
    else if (v11)
    {
      (*((void (**)(void))*v11 + 5))();
    }
    uint64_t v6 = (void (**)(void **))&unk_1EF570F50;
    float v7 = a2;
    unsigned int v8 = (void **)&v6;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*((uint64_t **)this + 47), (uint64_t)&v6);
    if (v8 == (void **)&v6)
    {
      v6[4]((void **)&v6);
    }
    else if (v8)
    {
      (*((void (**)(void))*v8 + 5))();
    }
    md::LabelStyle::setContentScale(*((md::LabelStyle **)this + 54), *((float *)this + 38));
  }
  std::mutex::unlock((std::mutex *)this);
  return v4 != a2;
}

void sub_1A1B3807C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void md::LabelStyle::setContentScale(md::LabelStyle *this, float a2)
{
  if (*((float *)this + 22) != a2)
  {
    uint64_t v3 = (void *)((char *)this + 408);
    *((float *)this + 22) = a2;
    if (!*(void *)this)
    {
      *((_WORD *)this + 70) = 1;
      *(_WORD *)((char *)this + 241) = 1;
      *((_DWORD *)this + 45) = -1;
      *((unsigned char *)this + 250) = 2;
      *((_DWORD *)this + 49) = 1065353216;
      *((_DWORD *)this + 54) = 2139095039;
      *(void *)((char *)this + 228) = 0x4334000000000000;
      *((float *)this + 59) = a2 * 20.0;
      *((unsigned char *)this + 261) = 4;
    }
    *((unsigned char *)this + 136) = -1;
    *((unsigned char *)this + 125) = 0;
    float v4 = (std::__shared_weak_count *)*((void *)this + 52);
    void *v3 = 0;
    *((void *)this + 52) = 0;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 54);
    v3[2] = 0;
    void v3[3] = 0;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t md::LabelManager::startStylesheetAnimation(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v18[0] = &unk_1EF56EDD8;
  uint64_t v19 = v18;
  v16[0] = &unk_1EF56EE20;
  uint64_t v17 = v16;
  uint64_t v21 = v20;
  v20[0] = &unk_1EF56EE20;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  float v4 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetAnimation", "", buf, 2u);
  }

  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  *(_WORD *)(a1 + 3373) = 0;
  (*(void (**)(void))(**(void **)(a1 + 240) + 136))(*(void *)(a1 + 240));
  *(_WORD *)(a1 + 3375) = 257;
  int v5 = *(_DWORD *)(a1 + 3312);
  if ((v5 + 1) > 1) {
    int v6 = v5 + 1;
  }
  else {
    int v6 = 1;
  }
  *(_DWORD *)(a1 + 3312) = v6;
  if (md::LabelStyleCache::setVariantStyleType(*(void *)(a1 + 336), a2))
  {
    float v7 = *(uint64_t **)(a1 + 168);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 != v9)
    {
      do
      {
        (*(void (**)(void))(**(void **)v8 + 8))();
        v8 += 8;
      }
      while (v8 != v9);
    }
  }
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 3058));
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 136);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 56);
      if (v12)
      {
        *(void *)buf = a1;
        char v14 = 9;
        (*(void (**)(uint64_t, uint8_t *, char *))(*(void *)v12 + 48))(v12, buf, &v14);
      }
    }
  }
  if (!v21)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v21 + 48))(v21);
  uint64_t result = (uint64_t)v21;
  if (v21 == v20) {
    return (*(uint64_t (**)(void *))(v20[0] + 32))(v20);
  }
  if (v21) {
    return (*(uint64_t (**)(void *))(*v21 + 40))(v21);
  }
  return result;
}

void sub_1A1B385A8(_Unwind_Exception *exception_object)
{
}

void sub_1A1B385B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 48);
  if (v3 == v1 - 72)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 72) + 32))(v1 - 72);
    _Unwind_Resume(exception_object);
  }
  if (!v3) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

void sub_1A1B38630(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 72));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetAnimation", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelManager::stylesheetDidTransition(void)::$_0,std::allocator<md::LabelManager::stylesheetDidTransition(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 3375))
  {
    *(unsigned char *)(v1 + 3375) = 0;
    if (*(unsigned char *)(v1 + 3376)) {
      md::LabelManager::startStylesheetLabelAnimations((md::LabelManager *)v1);
    }
    (*(void (**)(void))(**(void **)(v1 + 240) + 152))(*(void *)(v1 + 240));
  }
  uint64_t v2 = *(void *)(v1 + 3488);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 520);
    float v4 = *(std::__shared_weak_count **)(v2 + 528);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v3);
    int v6 = md::LabelStyleCache::setVariantStyleType(*(void *)(v1 + 336), v5);
    if (v6)
    {
      float v7 = *(uint64_t **)(v1 + 168);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      if (*v7 != v9)
      {
        do
        {
          (*(void (**)(void))(**(void **)v8 + 8))();
          v8 += 8;
        }
        while (v8 != v9);
      }
    }
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v6) {
        goto LABEL_19;
      }
    }
    else if (!v6)
    {
      goto LABEL_19;
    }
    *(unsigned char *)(v1 + 3373) = 1;
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if (v10)
    {
      uint64_t v11 = *(void *)(v1 + 136);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 56);
        if (v12)
        {
          uint64_t v17 = v1;
          char v16 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v12 + 48))(v12, &v17, &v16);
        }
      }
    }
  }
LABEL_19:
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if (v13)
  {
    uint64_t v14 = *(void *)(v1 + 136);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 56);
      if (v15)
      {
        uint64_t v17 = v1;
        char v16 = 9;
        (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v15 + 48))(v15, &v17, &v16);
      }
    }
  }
}

void sub_1A1B388EC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'md::MapStandardLabeler::displayStyleDidChange(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 384);
  if (*(void *)(v1 + 408))
  {
    uint64_t v2 = *(void **)(v1 + 392);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        this = (*(uint64_t (**)(void))(**(void **)(v1 + 400) + 40))(*(void *)(v1 + 400));
        uint64_t v2 = v3;
      }
      while (v3);
    }
    *(void *)(v1 + 392) = 0;
    uint64_t v4 = *(void *)(v1 + 376);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)(v1 + 368) + 8 * i) = 0;
    }
    *(void *)(v1 + 408) = 0;
  }
  return this;
}

uint64_t std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0,std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  v25[0] = &unk_1EF57E328;
  uint64_t v26 = v25;
  v23[0] = &unk_1EF57E2E0;
  char v24 = v23;
  uint64_t v28 = v27;
  v27[0] = &unk_1EF57E2E0;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetDidChange", "", buf, 2u);
  }

  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
  }
  else if (v24)
  {
    (*(void (**)(void))(*v24 + 40))();
  }
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
    uint64_t v3 = *(void *)(v1 + 3488);
    if (!v3) {
      goto LABEL_33;
    }
  }
  else
  {
    if (v26) {
      (*(void (**)(void))(*v26 + 40))();
    }
    uint64_t v3 = *(void *)(v1 + 3488);
    if (!v3) {
      goto LABEL_33;
    }
  }
  uint64_t v4 = *(void *)(v3 + 520);
  unint64_t v5 = *(std::__shared_weak_count **)(v3 + 528);
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4) {
      goto LABEL_33;
    }
  }
  else if (!v4)
  {
    goto LABEL_33;
  }
  uint64_t v6 = *(void *)(v1 + 3488);
  uint64_t v7 = *(void *)(v6 + 520);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 528);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v7);
  int v10 = md::LabelStyleCache::setVariantStyleType(*(void *)(v1 + 336), v9);
  if (v10)
  {
    uint64_t v11 = *(uint64_t **)(v1 + 168);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    if (*v11 != v13)
    {
      do
      {
        (*(void (**)(void))(**(void **)v12 + 8))();
        v12 += 8;
      }
      while (v12 != v13);
    }
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v10) {
      goto LABEL_33;
    }
  }
  else if (!v10)
  {
    goto LABEL_33;
  }
  *(unsigned char *)(v1 + 3373) = 1;
  unsigned __int8 v14 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if (v14)
  {
    uint64_t v15 = *(void *)(v1 + 136);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 56);
      if (v16)
      {
        *(void *)buf = v1;
        char v21 = 9;
        (*(void (**)(uint64_t, uint8_t *, char *))(*(void *)v16 + 48))(v16, buf, &v21);
      }
    }
  }
LABEL_33:
  md::LabelStyleCache::stylesheetDidChange(*(std::mutex **)(v1 + 336));
  unsigned __int8 v17 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if (v17)
  {
    uint64_t v18 = *(void *)(v1 + 136);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 56);
      if (v19)
      {
        *(void *)buf = v1;
        char v21 = 9;
        (*(void (**)(uint64_t, uint8_t *, char *))(*(void *)v19 + 48))(v19, buf, &v21);
      }
    }
  }
  if (!v28)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x1A1B38EE8);
  }
  (*(void (**)(void *))(*v28 + 48))(v28);
  uint64_t result = (uint64_t)v28;
  if (v28 == v27) {
    return (*(uint64_t (**)(void *))(v27[0] + 32))(v27);
  }
  if (v28) {
    return (*(uint64_t (**)(void))(*v28 + 40))();
  }
  return result;
}

void md::LabelStyleCache::stylesheetDidChange(std::mutex *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)&this[7].__m_.__opaque[16];
  *(void *)&this[7].__m_.__opaque[8] = 0;
  *(void *)&this[7].__m_.__opaque[16] = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::mutex::lock(this);
  v5[0] = &unk_1EF571070;
  uint64_t v6 = v5;
  md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)this[4].__m_.__opaque, (uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  v3[0] = &unk_1EF571070;
  uint64_t v4 = v3;
  md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)&this[5].__m_.__opaque[48], (uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  std::mutex::unlock(this);
}

void sub_1A1B39168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(std::shared_ptr<md::LabelStyle> const&)>::~function(va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyleCache::setVariantStyleType(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::mutex::lock((std::mutex *)a1);
  if (*(unsigned __int8 *)(a1 + 161) == a2
    && __PAIR64__(*(unsigned __int8 *)(a1 + 163), *(unsigned __int8 *)(a1 + 162)) == __PAIR64__(BYTE2(a2), BYTE1(a2))
    && *(unsigned __int8 *)(a1 + 164) == BYTE3(a2)
    && __PAIR64__(*(unsigned __int8 *)(a1 + 166), *(unsigned __int8 *)(a1 + 165)) == __PAIR64__(BYTE5(a2), BYTE4(a2))
    && __PAIR64__(*(unsigned __int8 *)(a1 + 168), *(unsigned __int8 *)(a1 + 167)) == __PAIR64__(HIBYTE(a2), BYTE6(a2)))
  {
    uint64_t v4 = 0;
  }
  else
  {
    *(void *)(a1 + 161) = a2;
    v8[0] = &unk_1EF571028;
    v8[1] = a2;
    unint64_t v9 = v8;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(a1 + 264), (uint64_t)v8);
    if (v9 == v8)
    {
      (*(void (**)(void *))(v8[0] + 32))(v8);
    }
    else if (v9)
    {
      (*(void (**)(void))(*v9 + 40))();
    }
    v6[0] = &unk_1EF571028;
    v6[1] = a2;
    uint64_t v7 = v6;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(a1 + 376), (uint64_t)v6);
    if (v7 == v6)
    {
      (*(void (**)(void *))(v6[0] + 32))(v6);
    }
    else if (v7)
    {
      (*(void (**)(void))(*v7 + 40))();
    }
    uint64_t v4 = 1;
  }
  std::mutex::unlock((std::mutex *)a1);
  return v4;
}

void sub_1A1B393B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(std::shared_ptr<md::LabelStyle> const&)>::~function(va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(uint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    while (1)
    {
      if (!*((unsigned char *)v3 + 56))
      {
        uint64_t v4 = (std::__shared_weak_count *)v3[5];
        if (v4)
        {
          if (v4->__shared_owners_ != -1) {
            break;
          }
        }
      }
LABEL_3:
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        return;
      }
    }
    uint64_t v7 = 0;
    unint64_t v5 = std::__shared_weak_count::lock(v4);
    uint64_t v8 = v5;
    if (v5)
    {
      uint64_t v7 = v3[4];
      if (!v7)
      {
LABEL_13:
        if (v5)
        {
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        goto LABEL_3;
      }
    }
    else if (!v7)
    {
      goto LABEL_13;
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v7);
    unint64_t v5 = v8;
    goto LABEL_13;
  }
}

void sub_1A1B394EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetDidChange", "", v1, 2u);
  }
}

uint64_t md::CompositeLabeler::stylesheetAnimationDidStart(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 8);
  for (uint64_t i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 136))(v3))
    uint64_t v3 = *v1++;
  return this;
}

uint64_t md::MapNavLabeler::stylesheetAnimationDidStart(id *this)
{
  return [this[7] styleManagerDidStartAnimating];
}

uint64_t md::CompositeLabeler::stylesheetAnimationDidFinish(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 8);
  for (uint64_t i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v3))
    uint64_t v3 = *v1++;
  return this;
}

void *md::StandardLabeler::stylesheetAnimationDidFinish(void *this)
{
  uint64_t v1 = (uint64_t *)this[9];
  uint64_t v2 = (uint64_t *)this[10];
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = *(void *)(*v1 + 296);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 680))(v4))
    {
      if (*(unsigned char *)(v3 + 1082))
      {
        *(unsigned char *)(v3 + 1082) = 0;
        atomic_store(0, (unsigned __int8 *)(v3 + 1243));
      }
      if (*(unsigned char *)(v3 + 1081))
      {
        *(unsigned char *)(v3 + 1081) = 0;
        atomic_store(0, (unsigned __int8 *)(v3 + 1244));
        *(_DWORD *)(v3 + 1120) = 0;
        *(float *)(v3 + 1124) = (*(float (**)(double))(v3 + 1144))(0.0);
        md::Label::updateStateMachineForDisplay(v3, 8, *(unsigned char *)(v3 + 1073), 0);
      }
      uint64_t v5 = *(void *)(v3 + 296);
      *(void *)(v3 + 296) = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      uint64_t v6 = *(void *)(v3 + 280);
      *(void *)(v3 + 280) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    this = *(void **)(v3 + 272);
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 552))(this);
    }
    v1 += 2;
  }
  return this;
}

uint64_t md::MultipleShieldLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  uint64_t v6 = *(void *)(a2 + 432);
  if (!*(unsigned char *)(a1 + 662)
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 632) + 168))(*(void *)(a1 + 632), (int)*(float *)(*(void *)(a1 + 32) + 16))&& (*(unsigned int (**)(void, void, double))(**(void **)(a1 + 632) + 176))(*(void *)(a1 + 632), (int)*(float *)(*(void *)(a1 + 32) + 16), 1.0))
  {
    *(unsigned char *)(a1 + 696) = 1;
  }
  int8x16_t v17 = (int8x16_t)xmmword_1A28FC750;
  uint64_t v7 = md::MultipleShieldLabelPart::placeShieldsOnPath(a1, 0, v6, a2, 0, a3, &v17);
  md::CollisionObject::resetWithRects((void **)(a1 + 72), 1u);
  uint64_t v8 = *(void *)(a1 + 232);
  uint64_t v9 = *(unsigned int *)(a1 + 248);
  *(_DWORD *)(a1 + 248) = v9 + 1;
  int8x16_t v10 = v17;
  *(int8x16_t *)(v8 + 16 * v9) = v17;
  int8x16_t v11 = *(int8x16_t *)(a1 + 72);
  v12.i64[0] = v10.i64[0];
  v12.i64[1] = *(void *)(a1 + 80);
  v13.i64[0] = *(void *)(a1 + 72);
  v13.i64[1] = v10.i64[1];
  int8x16_t v14 = (int8x16_t)vcgtq_f32(v13, v12);
  int8x16_t v15 = vbslq_s8(v14, v10, v11);
  *(int8x16_t *)(a1 + 72) = v15;
  *(_DWORD *)(a1 + 280) = a3->i32[0];
  *(_DWORD *)(a1 + 284) = a3->i32[1];
  *(_DWORD *)(a1 + 104) = a3->i32[0];
  v15.i32[0] = a3->i32[1];
  *(_DWORD *)(a1 + 108) = v15.i32[0];
  md::CollisionObject::setupShapeData(a1 + 72, *(double *)v15.i64, *(double *)v11.i64, *(double *)v14.i64);
  return v7;
}

uint64_t md::CurvedTextLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7 = md::TextLabelPart::layoutForStaging(a1, a2, (uint64_t)a3, a4);
  if (v7 == 37)
  {
    uint64_t v11 = *(void *)(a2 + 432);
    int v12 = *(unsigned __int8 *)(a1 + 1139);
    BOOL v13 = *(unsigned char *)(a1 + 1139) != 0;
    *(unsigned char *)(a1 + 1139) = 0;
    if (*(unsigned char *)(a1 + 1144))
    {
      int v14 = 0;
    }
    else
    {
      int v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 1072) + 168))(*(void *)(a1 + 1072), (int)*(float *)(*(void *)(a1 + 32) + 16));
      if (v12) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v14;
      }
    }
    int v15 = *(_DWORD *)(v11 + 1176);
    if (*(_DWORD *)(a1 + 1000) != v15)
    {
      *(_DWORD *)(a1 + 1000) = v15;
      BOOL v13 = 1;
      *(unsigned char *)(a1 + 1466) = 1;
    }
    if (!*(unsigned char *)(a1 + 1457))
    {
      int v16 = *(_DWORD *)(*(void *)(a1 + 16) + 96);
      if (*(_DWORD *)(a1 + 1408) != v16)
      {
        *(unsigned char *)(a1 + 1466) = 1;
        *(_DWORD *)(a1 + 1408) = v16;
      }
    }
    if (v13)
    {
      uint64_t v17 = *(void *)(a1 + 32);
      float v18 = *(float *)(v17 + 16);
      float v19 = *(float *)(v17 + 20);
      *(unsigned char *)(a1 + 1137) = (int)v18;
      *(float *)(a1 + 960) = v18;
      *(float *)(a1 + 980) = v19 * *(float *)(a1 + 628);
      *(void *)(a1 + 1008) = a1 + 72;
      *(_DWORD *)(a1 + 984) = *(_DWORD *)(a1 + 168);
      uint64_t v20 = *(void *)(a1 + 16);
      *(void *)(a1 + 1016) = *(void *)(v20 + 592);
      *(void *)(a1 + 1024) = *(void *)(v20 + 600);
      *(void *)(a1 + 1032) = *(void *)(v20 + 608);
      *(_DWORD *)(a1 + 1064) = *(_DWORD *)(v20 + 760);
      *(void *)(a1 + 1056) = *(void *)(v20 + 656);
      *(_DWORD *)(a1 + 996) = *(_DWORD *)(a2 + 176);
      float v21 = *(double *)(v20 + 536);
      *(float32x2_t *)(a1 + 1040) = vcvt_f32_f64(*(float64x2_t *)(v20 + 520));
      *(float *)(a1 + 1048) = v21;
      float64x2_t v22 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v11 + 960), *(float64x2_t *)(v11 + 864), *(double *)(v20 + 616)), *(float64x2_t *)(v11 + 896), *(double *)(v20 + 624)), *(float64x2_t *)(v11 + 928), *(double *)(v20 + 632)), 1.0/ (*(double *)(v11 + 984)+ *(double *)(v11 + 888) * *(double *)(v20 + 616)+ *(double *)(v11 + 920) * *(double *)(v20 + 624)+ *(double *)(v11 + 952) * *(double *)(v20 + 632)));
      *(float32x2_t *)&v22.f64[0] = vcvt_f32_f64(v22);
      if (v14)
      {
        __n128 v29 = (__n128)v22;
        int v23 = (*(uint64_t (**)(void, double))(**(void **)(a1 + 1072) + 176))(*(void *)(a1 + 1072), 1.0);
        *(void *)&v22.f64[0] = v29.n128_u64[0];
        if (v23)
        {
          *(unsigned char *)(a1 + 1463) = 1;
          int v24 = *(unsigned __int8 *)(a1 + 1142);
          int v25 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 1072) + 80))(*(void *)(a1 + 1072), v29);
          *(void *)&v22.f64[0] = v29.n128_u64[0];
          if (v24 != v25)
          {
            char v26 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 1072) + 80))(*(void *)(a1 + 1072), v29);
            *(void *)&v22.f64[0] = v29.n128_u64[0];
            *(unsigned char *)(a1 + 1142) = v26;
            if (*(unsigned char *)(a1 + 1136))
            {
              if (*(unsigned char *)(a1 + 1136) == 2) {
                char v27 = 1;
              }
              else {
                char v27 = 2;
              }
              *(unsigned char *)(a1 + 1136) = v27;
            }
          }
        }
      }
      uint64_t v7 = md::CurvedTextLabelPart::placeGlyphsOnRoadPath(a1, 0, (unsigned __int8 *)(a1 + 1458), a1 + 960, v11, a2, *(float *)v22.f64, *((float *)v22.f64 + 1));
      *(unsigned char *)(a1 + 1140) = v7;
      *(void *)(a1 + 688) = -1431633920
                            * ((*(_DWORD *)(*(void *)(*(void *)(a1 + 576) + 16) + 64)
                                            - *(_DWORD *)(*(void *)(*(void *)(a1 + 576) + 16) + 56)) >> 3);
    }
    else
    {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 1140);
    }
    *(_DWORD *)(a1 + 280) = *a3;
    *(_DWORD *)(a1 + 284) = a3[1];
    *(_DWORD *)(a1 + 104) = *a3;
    LODWORD(v8) = a3[1];
    *(_DWORD *)(a1 + 108) = LODWORD(v8);
    md::CollisionObject::setupShapeData(a1 + 72, v8, v9, v10);
  }
  return v7;
}

BOOL md::PolylineLabelPlacement::needsUpdateForZ(md::PolylineLabelPlacement *this, int a2)
{
  return *((unsigned __int8 *)this + 212) != a2 || *((_DWORD *)this + 24) != *(_DWORD *)(*((void *)this + 6) + 252);
}

BOOL md::CaptionedIconLabelPart::tryAlternatePlacements(uint64_t a1, char a2, const md::LabelLayoutContext *a3, char a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  int v59 = (int)a3;
  __int16 v69 = 256;
  uint64_t v70 = 0;
  int v12 = *(void **)(*(void *)(a1 + 576) + 8 * *(unsigned __int8 *)(a1 + 925));
  uint64_t v13 = v12[3];
  unint64_t v62 = &unk_1EF54FC68;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  {
    operator new();
  }
  uint64_t v66 = mdm::Allocator::instance(void)::alloc;
  __int16 v68 = 0;
  uint64_t v58 = a5;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v65 - (uint64_t)v63) >> 4)) <= 1)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 416, 8);
    uint64_t v63 = (float *)(v14 + (char *)v64 - (char *)v63);
    uint64_t v64 = v63;
    uint64_t v65 = v14 + 416;
  }
  int v15 = *(unsigned __int8 **)(a1 + 800);
  int v16 = *(unsigned __int8 **)(a1 + 808);
  if (v15 != v16)
  {
    size_t v60 = (float *)(v13 + 72);
    do
    {
      while (1)
      {
        if ((a2 & 1) != 0 || (a4 & 1) == 0 && v15[2]) {
          goto LABEL_7;
        }
        int v17 = *v15;
        BOOL v19 = v17 == 3 || v17 == 100;
        if ((v17 - 2) >= 2)
        {
          if (v17 == 5) {
            uint64_t v21 = md::CaptionedIconLabelPart::evaluateFeatureNormalTextPosition(*(md::CaptionedIconLabelPart **)(a1 + 16), *(md::Label **)(a5 + 432), a3);
          }
          else {
            uint64_t v21 = v15[3];
          }
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)(a5 + 432) + 472) + v15[4];
          if (*(unsigned char *)(a1 + 856)) {
            uint64_t v21 = (v20 + 16) >> 5;
          }
          else {
            uint64_t v21 = ((v20 + 32) >> 5) & 6;
          }
        }
        int v22 = v15[1];
        if (v22 != 16 || (v21 != 6 ? (int v22 = 1) : (int v22 = 8), v21 != 2))
        {
          int v23 = (char *)&diagonalDownLabelAnchors;
          switch(v22)
          {
            case 1:
            case 16:
              goto LABEL_39;
            case 4:
              break;
            case 8:
              goto LABEL_31;
            default:
              goto LABEL_36;
          }
        }
        int v22 = 4;
        int v23 = (char *)&diagonalUpLabelAnchors;
LABEL_31:
        int v24 = &v23[2 * v21];
        int v25 = *v24;
        int v26 = v24[1];
        if (v25 && v26 != 0) {
          break;
        }
LABEL_36:
        int v28 = 2;
        if ((v59 & 1) == 0)
        {
          a2 = 0;
          v15 += 5;
          if (v15 != v16) {
            continue;
          }
        }
        goto LABEL_84;
      }
      if (*(unsigned char *)(a1 + 925) || !*(unsigned char *)(a1 + 927))
      {
        __n128 v29 = (unsigned __int8 *)&diagonalUpLabelAnchors;
        if (v22 != 4) {
          __n128 v29 = (unsigned __int8 *)&horizontalLabelAnchors;
        }
        if (v22 == 8) {
          __n128 v29 = (unsigned __int8 *)&diagonalDownLabelAnchors;
        }
        int v30 = v29[2 * v21];
        if (v30 == 1 || v30 == 2) {
          goto LABEL_54;
        }
        if (!*(unsigned char *)(a1 + 927)) {
          goto LABEL_53;
        }
      }
LABEL_39:
      if (*(unsigned char *)(a1 + 928))
      {
        if (*(unsigned char *)(a1 + 930)) {
          LOBYTE(v30) = 2;
        }
        else {
          LOBYTE(v30) = 1;
        }
      }
      else
      {
LABEL_53:
        LOBYTE(v30) = 0;
      }
LABEL_54:
      float v31 = md::CaptionedIconLabelPart::textOriginOffsetForPosition(a1, 0, v21, v19, v22, (float *)(a1 + 872), v60, (uint64_t)v12);
      float v33 = v32;
      unint64_t v61 = 1065353216;
      if ((v22 & 0xC) != 0)
      {
        if (v22 == 4)
        {
          float v34 = 0.81915;
          float v35 = 0.57358;
        }
        else if (v22 == 8)
        {
          float v34 = 0.81915;
          float v35 = -0.57358;
        }
        else
        {
          float v34 = 1.0;
          float v35 = 0.0;
        }
        unint64_t v61 = __PAIR64__(LODWORD(v35), LODWORD(v34));
      }
      else
      {
        float v34 = 1.0;
        float v35 = 0.0;
      }
      uint64_t v36 = *(void *)(a5 + 432);
      if (*(unsigned char *)(v36 + 18))
      {
        float v37 = *(float *)(v36 + 464);
        float v38 = *(float *)(v36 + 468);
        *(float *)&unint64_t v61 = -(float)((float)(v35 * v38) - (float)(v37 * v34));
        *((float *)&v61 + 1) = (float)(v38 * v34) + (float)(v35 * v37);
        float v39 = v38 * v33;
        float v33 = (float)(v37 * v33) + (float)(v38 * v31);
        float v31 = -(float)(v39 - (float)(v37 * v31));
      }
      unint64_t v40 = v63;
      for (uint64_t i = v64; i != v40; i -= 52)
      {
        free(*((void **)i - 6));
        free(*((void **)i - 5));
        free(*((void **)i - 3));
      }
      uint64_t v64 = v40;
      __int16 v68 = 0;
      (*(void (**)(void *, void **, uint64_t, void, void, unint64_t *, float, float))(*v12 + 584))(v12, &v62, v21, *(unsigned __int8 *)(a1 + 930), v30, &v61, *(float *)(a1 + 280) + v31, *(float *)(a1 + 284) + v33);
      a5 = v58;
      if (!*(unsigned char *)(a1 + 960)) {
        goto LABEL_81;
      }
      if (HIBYTE(v68))
      {
        float v42 = *(float *)&v67;
      }
      else
      {
        HIBYTE(v68) = 1;
        long long v67 = xmmword_1A28FC750;
        unint64_t v43 = v63;
        if (v63 == v64)
        {
          float v42 = 3.4028e38;
        }
        else
        {
          float v44 = 3.4028e38;
          float v45 = -3.4028e38;
          float v46 = -3.4028e38;
          float v42 = 3.4028e38;
          do
          {
            float v42 = fminf(v43[12], v42);
            *(float *)&long long v67 = v42;
            float v46 = fmaxf(v46, v43[14]);
            float v44 = fminf(v43[13], v44);
            *(void *)((char *)&v67 + 4) = __PAIR64__(LODWORD(v46), LODWORD(v44));
            float v45 = fmaxf(v45, v43[15]);
            *((float *)&v67 + 3) = v45;
            v43 += 52;
          }
          while (v43 != v64);
        }
      }
      uint64_t v47 = *(float **)(v58 + 432);
      if (v42 >= v47[284]
        && *((float *)&v67 + 2) <= v47[286]
        && *((float *)&v67 + 1) >= v47[285]
        && *((float *)&v67 + 3) <= v47[287])
      {
LABEL_81:
        int v48 = md::LabelCollider::collideCandidate(a6, a7, (uint64_t)&v62, (uint64_t)&v69);
        int v49 = HIBYTE(v69) ? 0 : v48;
        if (v49 == 1)
        {
          int v50 = *(_DWORD *)v15;
          *(unsigned char *)(a8 + 4) = v15[4];
          *(_DWORD *)a8 = v50;
          int v28 = 1;
          goto LABEL_84;
        }
      }
      if (v59) {
        break;
      }
LABEL_7:
      a2 = 0;
      v15 += 5;
    }
    while (v15 != v16);
  }
  int v28 = 2;
LABEL_84:
  unint64_t v62 = &unk_1EF54FC68;
  unint64_t v51 = v63;
  if (v63)
  {
    uint64_t v52 = v64;
    uint64_t v53 = v63;
    if (v64 != v63)
    {
      do
      {
        free(*((void **)v52 - 6));
        free(*((void **)v52 - 5));
        free(*((void **)v52 - 3));
        v52 -= 52;
      }
      while (v52 != v51);
      uint64_t v53 = v63;
    }
    uint64_t v64 = v51;
    (*(void (**)(uint64_t, float *, uint64_t))(*(void *)v66 + 40))(v66, v53, v65 - (void)v53);
  }
  return v28 != 2;
}

void sub_1A1B3A440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a25)
  {
    uint64_t v29 = a26;
    uint64_t v30 = a25;
    if (a26 != a25)
    {
      do
      {
        free(*(void **)(v29 - 48));
        free(*(void **)(v29 - 40));
        free(*(void **)(v29 - 24));
        v29 -= 208;
      }
      while (v29 != a25);
      uint64_t v30 = a25;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a28 + 40))(a28, v30, a27 - v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1B3A4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  md::MultiCollisionObjectPlacementCandidate::~MultiCollisionObjectPlacementCandidate((md::MultiCollisionObjectPlacementCandidate *)va);
  _Unwind_Resume(a1);
}

uint64_t md::HorizontalTextLabelPart::populateCollisionObjects(float32x2_t *a1, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15 - v14 == -208)
  {
    for (; v15 != v14; v15 -= 208)
    {
      free(*(void **)(v15 - 48));
      free(*(void **)(v15 - 40));
      free(*(void **)(v15 - 24));
    }
    *(void *)(a2 + 16) = v14;
  }
  else
  {
    std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append((uint64_t *)(a2 + 8), 1uLL);
    uint64_t v14 = *(void *)(a2 + 16);
  }
  int v16 = (int8x16_t *)(v14 - 208);
  float v17 = *(float *)a8;
  *(_DWORD *)(v14 - 192) = *(_DWORD *)a8;
  *(_DWORD *)(v14 - 188) = *(_DWORD *)(a8 + 4);
  *(unsigned char *)(v14 - 12) = fabsf(v17 + -1.0) > 0.000001;
  float32x2_t v18 = a1[29];
  if (v18) {
    uint64_t v19 = a1[31].u32[0];
  }
  else {
    uint64_t v19 = 0;
  }
  int v20 = (const float *)&a1[1];
  float32x2_t v21 = vld1_dup_f32(v20);
  *(float32x2_t *)(v14 - 112) = vadd_f32(a1[21], v21);
  double v22 = md::CollisionObject::resetWithRects((void **)(v14 - 208), v19);
  if (v19)
  {
    uint64_t v25 = *(void *)(v14 - 48);
    unsigned int v26 = *(_DWORD *)(v14 - 32);
    uint64_t v27 = *(void *)&v18 + 8;
    if (a7 == 1)
    {
      LODWORD(v22) = -0.5;
      do
      {
        float v38 = *(float *)(v27 - 8);
        v24.i32[0] = *(_DWORD *)(v27 - 4);
        float v39 = *(float *)v27;
        unsigned int v40 = *(_DWORD *)(v27 + 4);
        v27 += 16;
        float v41 = v39 - v38;
        *(float *)&unsigned int v42 = a1[124].f32[1] * -0.5;
        *(float *)&unsigned int v43 = *(float *)&v42 + v41;
        float v44 = (unsigned int *)(v25 + 16 * v26);
        unsigned int *v44 = v42;
        v44[1] = v24.i32[0];
        v44[2] = v43;
        v44[3] = v40;
        v45.i64[1] = *(void *)(v14 - 200);
        v45.i64[0] = __PAIR64__(v24.u32[0], v42);
        v46.i64[0] = v16->i64[0];
        v46.i64[1] = __PAIR64__(v40, v43);
        int8x16_t v47 = (int8x16_t)vcgtq_f32(v46, v45);
        v45.i64[1] = v46.i64[1];
        unsigned int v37 = v26 + 1;
        int8x16_t v23 = vbslq_s8(v47, (int8x16_t)v45, *v16);
        *int v16 = v23;
        ++v26;
        --v19;
      }
      while (v19);
    }
    else if (a7 == 2)
    {
      LODWORD(v22) = 0.5;
      do
      {
        float v28 = *(float *)(v27 - 8);
        unsigned int v29 = *(_DWORD *)(v27 - 4);
        float v30 = *(float *)v27;
        unsigned int v31 = *(_DWORD *)(v27 + 4);
        v27 += 16;
        *(float *)&unsigned int v32 = a1[124].f32[1] * 0.5;
        *(float *)&unsigned int v33 = *(float *)&v32 + (float)(v28 - v30);
        float v34 = (unsigned int *)(v25 + 16 * v26);
        unsigned int *v34 = v33;
        v34[1] = v29;
        v34[2] = v32;
        v34[3] = v31;
        v35.i64[1] = *(void *)(v14 - 200);
        v35.i64[0] = __PAIR64__(v29, v33);
        v24.i64[0] = v16->i64[0];
        v24.i64[1] = __PAIR64__(v31, v32);
        int8x16_t v36 = (int8x16_t)vcgtq_f32(v24, v35);
        v35.i64[1] = v24.i64[1];
        unsigned int v37 = v26 + 1;
        int8x16_t v23 = vbslq_s8(v36, (int8x16_t)v35, *v16);
        *int v16 = v23;
        ++v26;
        --v19;
      }
      while (v19);
    }
    else
    {
      LODWORD(v22) = -0.5;
      v23.i32[0] = 0.5;
      do
      {
        float v48 = *(float *)(v27 - 8);
        unsigned int v49 = *(_DWORD *)(v27 - 4);
        float v50 = *(float *)v27;
        unsigned int v51 = *(_DWORD *)(v27 + 4);
        v27 += 16;
        float v52 = v50 - v48;
        *(float *)&unsigned int v53 = v52 * -0.5;
        *(float *)&unsigned int v54 = v52 * 0.5;
        unint64_t v55 = (unsigned int *)(v25 + 16 * v26);
        unsigned int *v55 = v53;
        v55[1] = v49;
        v55[2] = v54;
        v55[3] = v51;
        v56.i64[1] = *(void *)(v14 - 200);
        v56.i64[0] = __PAIR64__(v49, v53);
        v57.i64[0] = v16->i64[0];
        v57.i64[1] = __PAIR64__(v51, v54);
        int8x16_t v58 = (int8x16_t)vcgtq_f32(v57, v56);
        v56.i64[1] = v57.i64[1];
        unsigned int v37 = v26 + 1;
        float32x4_t v24 = (float32x4_t)vbslq_s8(v58, (int8x16_t)v56, *v16);
        *int v16 = (int8x16_t)v24;
        ++v26;
        --v19;
      }
      while (v19);
    }
    *(_DWORD *)(v14 - 32) = v37;
  }
  *(float *)(v14 - 176) = a3;
  *(float *)(v14 - 172) = a4;
  return md::CollisionObject::setupShapeData(v14 - 208, v22, *(double *)v23.i64, *(double *)v24.i64);
}

void md::HorizontalTextLabelPart::placeLines(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  int v172 = *(unsigned __int8 *)(*(void *)(*(void *)a1 + 16) + 122);
  uint64_t v195 = 0;
  uint64_t v196 = 0;
  unint64_t v197 = 0;
  {
    operator new();
  }
  uint64_t v198 = mdm::Allocator::instance(void)::alloc;
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v6 + 125));
  long long v178 = a2;
  if ((v7 & 1) == 0 || *(void *)(v6 + 56) == *(void *)(v6 + 64))
  {
    a2[7].i32[1] = 0;
    a2[8].i8[4] = 0;
  }
  else
  {
    unint64_t v8 = a2[2].u32[1];
    uint64_t v9 = *(void *)(*(void *)v5 + 16);
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = *(void *)(v9 + 64);
    uint64_t v12 = v9 + 56;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3);
    unint64_t v14 = v13 - 1;
    int v190 = *(unsigned __int8 *)(v12 + 66);
    if (v8 && v13 > v8 && v13 - v8 > 2)
    {
      if (*(unsigned char *)(v12 + 66)) {
        unint64_t v15 = v13 - v8;
      }
      else {
        unint64_t v15 = 0;
      }
      if (*(unsigned char *)(v12 + 66)) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v13 - v8;
      }
      v14 -= v16;
      a2[7].i32[1] = (unsigned __int16)v15 | ((unsigned __int16)(v8 + v15) << 16);
      BOOL v17 = *(unsigned char *)(*(void *)v5 + 144) != 0;
    }
    else
    {
      unint64_t v15 = 0;
      BOOL v17 = 0;
      a2[7].i32[1] = v13 << 16;
    }
    a2[8].i8[4] = v17;
    {
      operator new();
    }
    uint64_t v193 = mdm::Allocator::instance(void)::alloc;
    if (v15 <= v14)
    {
      uint64_t v188 = v5;
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      unint64_t v34 = v15;
      do
      {
        if ((*(unsigned char *)(*(void *)v12 + 24 * v34 + 20) & 0x10) != 0)
        {
          unint64_t v35 = v34 - v15;
          char v200 = 0;
          uint64_t v199 = 0;
          if (v32 >= v33)
          {
            uint64_t v36 = (uint64_t)(v32 - v31) >> 5;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 59) {
              abort();
            }
            unint64_t v38 = v33 - v31;
            if ((uint64_t)(v33 - v31) >> 4 > v37) {
              unint64_t v37 = (uint64_t)(v33 - v31) >> 4;
            }
            if (v38 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v37;
            }
            if (v33)
            {
              uint64_t v39 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v193 + 16))(v193, 32 * v33, 8);
              uint64_t v40 = v39 + 32 * v36;
              unint64_t v33 = v39 + 32 * v33;
              if (v39)
              {
                *(void *)uint64_t v40 = v15;
                *(void *)(v40 + 8) = v35;
                *(void *)(v40 + 16) = 0;
                *(unsigned char *)(v40 + 24) = 0;
              }
            }
            else
            {
              uint64_t v40 = 32 * v36;
            }
            uint64_t v41 = v40;
            if (v32 != v31)
            {
              uint64_t v42 = v40;
              do
              {
                uint64_t v41 = v42 - 32;
                long long v43 = *(_OWORD *)(v32 - 16);
                *(_OWORD *)(v42 - 32) = *(_OWORD *)(v32 - 32);
                *(_OWORD *)(v42 - 16) = v43;
                v32 -= 32;
                v42 -= 32;
              }
              while (v32 != v31);
            }
            unint64_t v32 = v40 + 32;
            if (v31) {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v193 + 40))(v193, v31, v38);
            }
            uint64_t v31 = v41;
          }
          else
          {
            if (v32)
            {
              *(void *)unint64_t v32 = v15;
              *(void *)(v32 + 8) = v35;
              *(void *)(v32 + 16) = v199;
              *(unsigned char *)(v32 + 24) = v200;
            }
            v32 += 32;
          }
          unint64_t v15 = v34;
        }
        ++v34;
      }
      while (v34 <= v14);
      unint64_t v44 = v34 - v15;
      if (v34 <= v15)
      {
        a2 = v178;
      }
      else
      {
        char v200 = 0;
        uint64_t v199 = 0;
        a2 = v178;
        if (v32 >= v33)
        {
          uint64_t v160 = (uint64_t)(v32 - v31) >> 5;
          unint64_t v161 = v160 + 1;
          if ((unint64_t)(v160 + 1) >> 59) {
            abort();
          }
          if ((uint64_t)(v33 - v31) >> 4 > v161) {
            unint64_t v161 = (uint64_t)(v33 - v31) >> 4;
          }
          if (v33 - v31 >= 0x7FFFFFFFFFFFFFE0) {
            uint64_t v162 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v162 = v161;
          }
          if (v162)
          {
            uint64_t v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v193 + 16))(v193, 32 * v162, 8);
            uint64_t v164 = v163 + 32 * v160;
            uint64_t v162 = v163 + 32 * v162;
            if (v163)
            {
              *(void *)uint64_t v164 = v15;
              *(void *)(v164 + 8) = v44;
              *(void *)(v164 + 16) = 0;
              *(unsigned char *)(v164 + 24) = 0;
            }
          }
          else
          {
            uint64_t v164 = 32 * v160;
          }
          unint64_t v45 = v164 + 32;
          if (v32 != v31)
          {
            do
            {
              long long v165 = *(_OWORD *)(v32 - 16);
              *(_OWORD *)(v164 - 32) = *(_OWORD *)(v32 - 32);
              *(_OWORD *)(v164 - 16) = v165;
              v164 -= 32;
              v32 -= 32;
            }
            while (v32 != v31);
            unint64_t v32 = v31;
          }
          if (v32) {
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v193 + 40))(v193, v32, v33 - v32);
          }
          unint64_t v33 = v162;
          uint64_t v31 = v164;
        }
        else
        {
          if (v32)
          {
            *(void *)unint64_t v32 = v15;
            *(void *)(v32 + 8) = v44;
            *(void *)(v32 + 16) = v199;
            *(unsigned char *)(v32 + 24) = v200;
          }
          unint64_t v45 = v32 + 32;
        }
        unint64_t v32 = v45;
      }
      unint64_t v166 = a2[2].u32[0];
      if (v166)
      {
        if (v31 != v32)
        {
          float v167 = (unint64_t *)v31;
          do
          {
            md::HorizontalTextLabelPart::breakLine(v190 != 0, v166, (void *)v12, v167, &v195);
            v167 += 4;
          }
          while (v167 != (unint64_t *)v32);
          unint64_t v32 = v31;
          a2 = v178;
        }
        goto LABEL_191;
      }
LABEL_190:
      uint64_t v196 = (void *)v32;
      unint64_t v32 = v195;
      unint64_t v168 = v197;
      uint64_t v195 = v31;
      unint64_t v197 = v33;
      unint64_t v33 = v168;
LABEL_191:
      uint64_t v5 = v188;
      if (v32) {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v193 + 40))(v193, v32, v33 - v32);
      }
      goto LABEL_15;
    }
    if (!a2[2].i32[0])
    {
      uint64_t v188 = v5;
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      goto LABEL_190;
    }
  }
LABEL_15:
  uint64_t v19 = v195;
  float32x2_t v18 = v196;
  unint64_t v20 = ((uint64_t)v196 - v195) >> 5;
  float32x2_t v21 = *(void **)v5;
  __int16 v22 = a2[8].u8[4];
  uint64_t v176 = *(void **)v5;
  unint64_t v169 = (unint64_t)v196 - v195;
  if (a2[8].i8[4])
  {
    uint64_t v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v21[13] - v21[12]) >> 3);
    unint64_t v24 = v197;
    if ((unint64_t)v196 >= v197)
    {
      if ((v20 + 1) >> 59) {
        abort();
      }
      unint64_t v27 = (uint64_t)(v197 - v195) >> 4;
      uint64_t v179 = v20 + 1;
      if (v27 <= v20 + 1) {
        unint64_t v27 = v20 + 1;
      }
      if (v197 - v195 >= 0x7FFFFFFFFFFFFFE0) {
        uint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v28 = v27;
      }
      if (v28)
      {
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v198 + 16))(v198, 32 * v28, 8);
        uint64_t v26 = v29 + 32 * v20;
        uint64_t v30 = v29 + 32 * v28;
        if (v29)
        {
          *(void *)uint64_t v26 = 0;
          *(void *)(v26 + 8) = v23;
          *(void *)(v26 + 16) = 0;
          *(unsigned char *)(v26 + 24) = 1;
        }
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v26 = 32 * v20;
      }
      float32x2_t v21 = v176;
      if (v18 == (void *)v19)
      {
        uint64_t v25 = v26;
        uint64_t v48 = (uint64_t)v18;
      }
      else
      {
        float32x4_t v46 = v18;
        uint64_t v25 = v26;
        do
        {
          long long v47 = *((_OWORD *)v46 - 1);
          *(_OWORD *)(v25 - 32) = *((_OWORD *)v46 - 2);
          *(_OWORD *)(v25 - 16) = v47;
          v46 -= 4;
          v25 -= 32;
        }
        while (v46 != (void *)v19);
        uint64_t v48 = v19;
      }
      uint64_t v195 = v25;
      unint64_t v197 = v30;
      if (v48)
      {
        unint64_t v49 = v24 - v48;
        uint64_t v50 = v25;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v198 + 40))(v198, v48, v49);
        uint64_t v25 = v50;
      }
    }
    else
    {
      if (v196)
      {
        *uint64_t v196 = 0;
        v18[1] = v23;
        v18[2] = 0;
        *((unsigned char *)v18 + 24) = 1;
      }
      uint64_t v179 = v20 + 1;
      uint64_t v25 = v19;
      uint64_t v26 = (uint64_t)v18;
    }
    uint64_t v171 = (float *)(v26 + 32);
    uint64_t v196 = (void *)(v26 + 32);
    __int16 v22 = -29789 * ((v21[13] - v21[12]) >> 3);
  }
  else
  {
    uint64_t v171 = (float *)v196;
    uint64_t v25 = v195;
    uint64_t v179 = ((uint64_t)v196 - v195) >> 5;
  }
  unsigned int v51 = v21 + 4;
  a2[8].i16[0] = v22;
  unint64_t v52 = v20 - 1;
  if (v18 != (void *)v19)
  {
    uint64_t v53 = 0;
    if (v20 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = ((uint64_t)v18 - v19) >> 5;
    }
    uint64_t v180 = v54;
    unint64_t v55 = v25 + 32 * v52;
    uint64_t v174 = (float *)(v55 + 20);
    size_t v175 = (float *)(v55 + 16);
    float32x2_t v56 = 0;
    float v181 = 0.0;
    float v182 = 0.0;
    float v57 = 0.0;
    float v58 = 0.0;
    float v59 = 0.0;
    float v60 = 0.0;
    float v61 = 0.0;
    uint64_t v62 = v179;
    uint64_t v183 = v51;
    unint64_t v184 = v52;
    uint64_t v177 = v25;
    while (1)
    {
      uint64_t v64 = (void *)(v25 + 32 * v53);
      uint64_t v65 = v64 + 1;
      if (v64[1]) {
        break;
      }
      float32x2_t v63 = (float32x2_t)0x7F7FFFFFFF7FFFFFLL;
LABEL_79:
      float v182 = fmaxf(v182, vsub_f32(v63, (float32x2_t)vdup_lane_s32((int32x2_t)v63, 1)).f32[0]);
      if (++v53 == v180) {
        goto LABEL_117;
      }
    }
    unint64_t v66 = 0;
    int8x16_t v67 = (int8x16_t)xmmword_1A28FC750;
    unint64_t v185 = v64 + 1;
    unint64_t v186 = (void *)(v25 + 32 * v53);
    do
    {
      unint64_t v68 = v66 + *v64;
      __int16 v69 = (float32x4_t **)(*v51 + 88 * v68);
      uint64_t v70 = *v69;
      if (*v69 && v70[3].i8[13])
      {
        int8x16_t v192 = v67;
        float v194 = v60;
        uint64_t v71 = *v51 + 88 * v68;
        float v72 = *(float *)(v71 + 80);
        float v73 = v70[3].f32[0];
        Capsize_t Height = CGFontGetCapHeight((CGFontRef)v70[1].i64[0]);
        uint64_t v75 = *v69;
        UnitsPerEuint64_t m = CGFontGetUnitsPerEm((CGFontRef)(*v69)[1].i64[0]);
        uint64_t v77 = v53;
        float v189 = v61;
        float v191 = v57;
        float v78 = v59;
        float32x2_t v79 = v56;
        float v80 = v75[3].f32[0];
        float v81 = (*v69)[2].f32[1];
        float v82 = (*v69)[2].f32[3];
        int Ascent = CGFontGetAscent((CGFontRef)(*v69)[1].i64[0]);
        float32x4_t v84 = *v69;
        int v85 = CGFontGetUnitsPerEm((CGFontRef)(*v69)[1].i64[0]);
        float v187 = v58;
        float v86 = v84[3].f32[0];
        int Descent = CGFontGetDescent((CGFontRef)(*v69)[1].i64[0]);
        double v88 = *v69;
        int v89 = CGFontGetUnitsPerEm((CGFontRef)(*v69)[1].i64[0]);
        v90.f32[0] = (float)(v80 * (float)CapHeight) / (float)UnitsPerEm;
        v90.i32[1] = fmaxf(v82 - v90.f32[0], 0.0);
        float32x2_t v56 = vmaxnm_f32(v79, vmul_n_f32(v90, v72 / v73));
        float v59 = fmaxf(v78, fmaxf(-v81, 0.0) * (float)(v72 / v73));
        float v91 = (float)((float)(v72 / v73) * (float)((float)Ascent * v86)) / (float)v85;
        v92.i64[0] = *(void *)(v71 + 32);
        v92.i64[1] = v92.i64[0];
        int8x16_t v93 = (int8x16_t)vmlaq_n_f32(v92, (*v69)[2], v72 / v73);
        float v57 = v191;
        uint64_t v53 = v77;
        BOOL v94 = v191 < *(float *)&v93.i32[3] && v77 == 0;
        float v60 = fmaxf(v194, v91);
        float v61 = fmaxf(v189, (float)((float)(v72 / v73) * (float)((float)Descent * v88[3].f32[0])) / (float)v89);
        v95.i64[0] = v93.i64[0];
        v95.i64[1] = v192.i64[1];
        v96.i64[0] = v192.i64[0];
        v96.i64[1] = v93.i64[1];
        int8x16_t v67 = vbslq_s8((int8x16_t)vcgtq_f32(v96, v95), v93, v192);
        if (v94) {
          float v57 = *(float *)&v93.i32[3];
        }
        unint64_t v52 = v184;
        if (v77 == v184)
        {
          float v58 = fminf(*(float *)&v93.i32[1], v187);
          unsigned int v51 = v183;
        }
        else
        {
          unsigned int v51 = v183;
          float v58 = v187;
        }
        uint64_t v65 = v185;
        uint64_t v64 = v186;
      }
      ++v66;
    }
    while (v66 < *v65);
    int8x16_t v97 = vextq_s8(v67, v67, 8uLL);
    a2 = v178;
    if (v53 != v52 || !v178[8].i8[4] || *(float *)v67.i32 > *(float *)&v67.i32[2])
    {
      float32x2_t v63 = (float32x2_t)__PAIR64__(v67.u32[1], v97.u32[1]);
      uint64_t v25 = v177;
      if (*(float *)v67.i32 <= *(float *)&v67.i32[2])
      {
        uint64_t v106 = v177 + 32 * v53;
        *(_DWORD *)(v106 + 16) = v67.i32[0];
        *(_DWORD *)(v106 + 20) = v67.i32[2];
        float v181 = fmaxf(v181, *(float *)&v67.i32[2] - *(float *)v67.i32);
      }
      uint64_t v62 = v179;
      goto LABEL_79;
    }
    uint64_t v98 = (float *)v176[12];
    uint64_t v99 = (uint64_t *)v176[13];
    if (v98 == (float *)v99)
    {
      uint64_t v62 = v179;
      uint64_t v25 = v177;
      uint64_t v107 = v175;
    }
    else
    {
      float v100 = -3.4028e38;
      float v101 = 3.4028e38;
      uint64_t v62 = v179;
      do
      {
        uint64_t v103 = *(void *)v98;
        if (*(void *)v98 && *(unsigned char *)(v103 + 61))
        {
          float v104 = v98[9];
          float v105 = v98[20] / *(float *)(v103 + 48);
          if (!v53) {
            float v57 = fmaxf(v57, v104 + (float)(*(float *)(v103 + 44) * v105));
          }
          float v102 = v98[8];
          float v101 = fminf(v102 + (float)(*(float *)(v103 + 32) * v105), v101);
          float v100 = fmaxf(v100, v102 + (float)(*(float *)(v103 + 40) * v105));
          float v58 = fminf(v104 + (float)(*(float *)(v103 + 36) * v105), v58);
        }
        v98 += 22;
      }
      while (v98 != (float *)v99);
      uint64_t v107 = v175;
      if (v101 <= v100)
      {
        float v108 = *(float *)&v67.i32[2] - *(float *)v67.i32;
        float v109 = v100 - v101;
        uint64_t v25 = v177;
        if (v172)
        {
          *size_t v175 = *(float *)v67.i32 - v109;
          v175[1] = *(float *)&v67.i32[2];
          *(v171 - 4) = v101;
          *(v171 - 3) = v100 + v108;
        }
        else
        {
          *size_t v175 = *(float *)v67.i32;
          v175[1] = v109 + *(float *)&v67.i32[2];
          *(v171 - 4) = v101 - v108;
          *(v171 - 3) = v100;
        }
        goto LABEL_115;
      }
      uint64_t v25 = v177;
    }
    *uint64_t v107 = *(float *)v67.i32;
    v107[1] = *(float *)&v67.i32[2];
LABEL_115:
    float v181 = fmaxf(v181, *v174 - *v107);
    v67.i32[0] = v97.i32[1];
    float32x2_t v63 = *(float32x2_t *)v67.i8;
    goto LABEL_79;
  }
  float32x2_t v56 = 0;
  float v58 = 0.0;
  float v61 = 0.0;
  float v60 = 0.0;
  float v59 = 0.0;
  float v57 = 0.0;
  float v181 = 0.0;
  float v182 = 0.0;
  uint64_t v62 = v179;
LABEL_117:
  float v110 = *(float *)(a3 + 176);
  float v111 = a2->f32[0];
  a2[6].f32[1] = fmaxf(v60 - fmaxf(v57, 0.0), 0.0);
  a2[7].f32[0] = fmaxf(fminf(v58, 0.0) + v61, 0.0);
  md::CollisionObject::resetWithRects((void **)a4, v169 >> 5);
  uint64_t v112 = v195;
  if (!v62)
  {
    float v119 = 0.0;
    float v120 = 0.0;
    float v122 = v181;
    goto LABEL_158;
  }
  char v113 = 0;
  unint64_t v114 = 0;
  float v115 = fmaxf(v110 + v182, v111);
  int v116 = a2[8].u8[2];
  uint64_t v117 = *(void *)(a4 + 160);
  unsigned int v118 = *(_DWORD *)(a4 + 176);
  float v119 = 0.0;
  float v120 = 0.0;
  int8x16_t v121 = (int8x16_t)xmmword_1A28FC750;
  float v122 = v181;
  do
  {
    uint64_t v125 = v112 + 32 * v114;
    float v126 = *(float *)(v125 + 16);
    float v127 = *(float *)(v125 + 20);
    if (v126 == v127) {
      goto LABEL_120;
    }
    float v128 = v127 - v126;
    v129.f32[0] = (float)(v127 + v126) * -0.5;
    if (v52 >= v114) {
      unint64_t v130 = v52 - v114;
    }
    else {
      unint64_t v130 = 0;
    }
    if (v116 == 2)
    {
      float v131 = v181 - v128;
    }
    else
    {
      if (v116 != 1) {
        goto LABEL_130;
      }
      float v131 = v128 - v181;
    }
    v129.f32[0] = v129.f32[0] + (float)(v131 * 0.5);
LABEL_130:
    uint64_t v132 = v112 + 32 * v114;
    int v133 = *(unsigned __int8 *)(v132 + 24);
    uint64_t v134 = *(void *)(v132 + 8);
    if (v134)
    {
      float v135 = (float)(v115 * (float)v130)
           - (float)(v58 + (float)((float)((float)(v57 + (float)(v115 * (float)v52)) - v58) * 0.5));
      if (v133) {
        char v136 = v176 + 12;
      }
      else {
        char v136 = v51;
      }
      uint64_t v137 = *(void *)v125;
      uint64_t v138 = *v136;
      double v139 = *(float32x4_t **)(v138 + 88 * v137);
      if (v139 && v139[3].i8[13])
      {
        uint64_t v140 = v138 + 88 * v137;
        *(_OWORD *)(v140 + 52) = xmmword_1A28FCEA0;
        *(void *)(v140 + 68) = 1065353216;
        float v141 = *(float *)(v140 + 80);
        *(float32x2_t *)v142.f32 = vadd_f32(*(float32x2_t *)(v140 + 32), (float32x2_t)__PAIR64__(LODWORD(v135), v129.u32[0]));
        *(void *)(v140 + 40) = v142.i64[0];
        v142.i64[1] = v142.i64[0];
        float32x4_t v143 = vmlaq_n_f32(v142, v139[2], v141 / v139[3].f32[0]);
        v144.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FC750, v143)).u32[0];
        v144.i32[1] = vmovn_s32(vcgtq_f32(v143, (float32x4_t)xmmword_1A28FC750)).i32[1];
        int8x16_t v145 = vbslq_s8((int8x16_t)vmovl_s16(v144), (int8x16_t)v143, (int8x16_t)xmmword_1A28FC750);
        if (!v114) {
          float v120 = v143.f32[3];
        }
        if (v134 == 1) {
          goto LABEL_150;
        }
LABEL_141:
        uint64_t v146 = v134 - 1;
        v129.f32[1] = v135;
        uint64_t v147 = (float *)(v138 + 88 * v137 + 168);
        do
        {
          int v148 = (float32x4_t *)*((void *)v147 - 10);
          if (v148)
          {
            if (v148[3].i8[13])
            {
              *(_OWORD *)(v147 - 7) = xmmword_1A28FCEA0;
              *(void *)(v147 - 3) = 1065353216;
              float v149 = *v147;
              *(float32x2_t *)v150.f32 = vadd_f32(*(float32x2_t *)(v147 - 12), v129);
              *((void *)v147 - 5) = v150.i64[0];
              v150.i64[1] = v150.i64[0];
              int8x16_t v151 = (int8x16_t)vmlaq_n_f32(v150, v148[2], v149 / v148[3].f32[0]);
              v152.i64[0] = v151.i64[0];
              v152.i64[1] = v145.i64[1];
              v153.i64[0] = v145.i64[0];
              v153.i64[1] = v151.i64[1];
              int8x16_t v145 = vbslq_s8((int8x16_t)vcgtq_f32(v153, v152), v151, v145);
              if (!v114 && v146 == 1) {
                float v119 = *(float *)&v151.i32[3];
              }
            }
          }
          v147 += 22;
          --v146;
        }
        while (v146);
        goto LABEL_150;
      }
      int8x16_t v145 = (int8x16_t)xmmword_1A28FC750;
      if (v134 != 1) {
        goto LABEL_141;
      }
    }
    else
    {
      int8x16_t v145 = (int8x16_t)xmmword_1A28FC750;
    }
LABEL_150:
    if (((v133 != 0) & v113) != 0)
    {
      v123.i64[0] = v145.i64[0];
      v123.i64[1] = v121.i64[1];
      v124.i64[0] = v121.i64[0];
      v124.i64[1] = v145.i64[1];
      int8x16_t v121 = vbslq_s8((int8x16_t)vcgtq_f32(v124, v123), v145, v121);
      char v113 = 1;
    }
    else
    {
      if (v113)
      {
        *(_DWORD *)(a4 + 176) = v118 + 1;
        *(int8x16_t *)(v117 + 16 * v118) = v121;
        v154.i64[0] = v121.i64[0];
        v154.i64[1] = *(void *)(a4 + 8);
        v155.i64[0] = *(void *)a4;
        v155.i64[1] = v121.i64[1];
        *(int8x16_t *)a4 = vbslq_s8((int8x16_t)vcgtq_f32(v155, v154), v121, *(int8x16_t *)a4);
        char v113 = 1;
        ++v118;
      }
      else
      {
        char v113 = 1;
      }
      int8x16_t v121 = v145;
    }
LABEL_120:
    ++v114;
  }
  while (v114 != v62);
  if (v113)
  {
    uint64_t v156 = *(void *)(a4 + 160);
    *(_DWORD *)(a4 + 176) = v118 + 1;
    *(int8x16_t *)(v156 + 16 * v118) = v121;
    v157.i64[0] = v121.i64[0];
    v157.i64[1] = *(void *)(a4 + 8);
    v158.i64[0] = *(void *)a4;
    v158.i64[1] = v121.i64[1];
    *(int8x16_t *)a4 = vbslq_s8((int8x16_t)vcgtq_f32(v158, v157), v121, *(int8x16_t *)a4);
  }
LABEL_158:
  a2[5] = v56;
  a2[6].f32[0] = v59;
  a2[4].f32[1] = v122;
  if (v120 != 0.0) {
    float v120 = *(float *)(a4 + 12) - v120;
  }
  a2[3].f32[0] = v120;
  if (v119 != 0.0) {
    float v119 = *(float *)(a4 + 12) - v119;
  }
  a2[3].f32[1] = v119;
  a2[4].f32[0] = -v58;
  if (v112)
  {
    uint64_t v159 = *(void (**)(void))(*(void *)v198 + 40);
    v159();
  }
}

void sub_1A1B3B698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (v36)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a35 + 40))(a35, v36, v35 - v36);
    uint64_t v39 = *(void *)(v37 - 200);
    if (!v39) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v39 = *(void *)(v37 - 200);
    if (!v39) {
      goto LABEL_3;
    }
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v37 - 176) + 40))(*(void *)(v37 - 176), v39, *(void *)(v37 - 184) - v39);
  _Unwind_Resume(exception_object);
}

double md::CollisionObject::resetWithRects(void **this, unsigned int a2)
{
  if (*((_DWORD *)this + 48) < a2)
  {
    free(this[23]);
    this[23] = malloc_type_calloc(a2, 0x18uLL, 0x1000040504FFAC1uLL);
    *((_DWORD *)this + 48) = a2;
  }
  uint64_t v4 = this[21];
  if (v4)
  {
    free(v4);
    this[21] = 0;
    *((_DWORD *)this + 45) = 0;
    if (!a2) {
      goto LABEL_9;
    }
  }
  else if (*((_DWORD *)this + 45) >= a2)
  {
    goto LABEL_9;
  }
  free(this[20]);
  uint64_t v5 = malloc_type_malloc(16 * a2, 0x1000040451B5BE8uLL);
  this[20] = v5;
  if (v5) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = 0;
  }
  *((_DWORD *)this + 45) = v6;
LABEL_9:
  *((_DWORD *)this + 44) = 0;
  double result = 1.40444743e306;
  *(_OWORD *)this = xmmword_1A28FC750;
  return result;
}

uint64_t md::HorizontalTextLabelPart::breakLine(int a1, unint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v163 = 0;
  unint64_t v164 = 0;
  unint64_t v165 = 0;
  uint64_t v9 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  uint64_t v156 = a3;
  {
    a3 = v156;
    if (v144) {
      operator new();
    }
  }
  uint64_t v10 = mdm::Allocator::instance(void)::alloc;
  uint64_t v166 = mdm::Allocator::instance(void)::alloc;
  unint64_t v11 = *a4;
  unint64_t v12 = a4[1] + *a4;
  char v162 = 0;
  uint64_t v161 = 0;
  float v149 = a5;
  unint64_t v150 = a2;
  int v151 = a1;
  if (v11 < v12)
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v153 = 0;
    while (2)
    {
      uint64_t v15 = 0;
      uint64_t v16 = (char *)(*a3 + 24 * v11 + 20);
      while (1)
      {
        char v17 = *v16;
        v16 += 24;
        if ((v17 & 0x28) == 8) {
          break;
        }
        ++v15;
        if (!(v11 - v12 + v15))
        {
          unint64_t v164 = v14;
          unint64_t v165 = v13;
          unint64_t v26 = v153;
          uint64_t v163 = v153;
          unint64_t v27 = v12 - v11;
          if (v12 == v11)
          {
            uint64_t v28 = (uint64_t *)v14;
            BOOL v29 = v153 == v14;
            if (a1) {
              goto LABEL_37;
            }
LABEL_70:
            a2 = v150;
            uint64_t v9 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
            if (v29)
            {
              char v37 = 1;
              unint64_t v146 = v26;
              uint64_t v28 = (uint64_t *)v26;
              goto LABEL_93;
            }
            uint64_t v36 = v26;
            a5 = v149;
            goto LABEL_72;
          }
          if (v14 >= v13)
          {
            uint64_t v39 = (uint64_t)(v14 - v153) >> 5;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 59) {
              abort();
            }
            unint64_t v41 = v13 - v153;
            if ((uint64_t)(v13 - v153) >> 4 > v40) {
              unint64_t v40 = (uint64_t)(v13 - v153) >> 4;
            }
            if (v41 >= 0x7FFFFFFFFFFFFFE0) {
              uint64_t v42 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v42 = v40;
            }
            if (v42)
            {
              uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 32 * v42, 8);
              uint64_t v44 = v43 + 32 * v39;
              uint64_t v45 = v43 + 32 * v42;
              if (v43)
              {
                *(void *)uint64_t v44 = v11;
                *(void *)(v44 + 8) = v27;
                *(void *)(v44 + 16) = v161;
                *(unsigned char *)(v44 + 24) = v162;
              }
              a3 = v156;
            }
            else
            {
              uint64_t v45 = 0;
              uint64_t v44 = 32 * v39;
            }
            uint64_t v38 = v44 + 32;
            if (v14 == v153)
            {
              uint64_t v46 = v44;
            }
            else
            {
              do
              {
                uint64_t v46 = v44 - 32;
                long long v47 = *(_OWORD *)(v14 - 16);
                *(_OWORD *)(v44 - 32) = *(_OWORD *)(v14 - 32);
                *(_OWORD *)(v44 - 16) = v47;
                v14 -= 32;
                v44 -= 32;
              }
              while (v14 != v153);
            }
            uint64_t v163 = v46;
            unint64_t v165 = v45;
            if (v153)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 40))(v10, v153, v41);
              a3 = v156;
            }
            unint64_t v26 = v46;
          }
          else
          {
            if (v14)
            {
              *(void *)unint64_t v14 = v11;
              *(void *)(v14 + 8) = v27;
              *(void *)(v14 + 16) = v161;
              *(unsigned char *)(v14 + 24) = v162;
            }
            uint64_t v38 = v14 + 32;
          }
          unint64_t v164 = v38;
          uint64_t v28 = (uint64_t *)v38;
          BOOL v29 = v26 == v38;
          if ((a1 & 1) == 0) {
            goto LABEL_70;
          }
LABEL_37:
          a2 = v150;
          uint64_t v9 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
          if (v29 || (uint64_t v30 = (long long *)(v28 - 4), (unint64_t)(v28 - 4) <= v26))
          {
            uint64_t v36 = v26;
            a5 = v149;
            if ((uint64_t *)v26 == v28) {
              goto LABEL_98;
            }
          }
          else
          {
            unint64_t v31 = v26 + 32;
            a5 = v149;
            do
            {
              long long v32 = *(_OWORD *)(v31 - 16);
              *(_OWORD *)float v167 = *(_OWORD *)(v31 - 32);
              *(_OWORD *)&v167[16] = v32;
              long long v33 = *v30;
              *(_OWORD *)(v31 - 23) = *(long long *)((char *)v30 + 9);
              *(_OWORD *)(v31 - 32) = v33;
              long long v34 = *(_OWORD *)v167;
              *(long long *)((char *)v30 + 9) = *(_OWORD *)&v167[9];
              long long *v30 = v34;
              v30 -= 2;
              BOOL v35 = v31 >= (unint64_t)v30;
              v31 += 32;
            }
            while (!v35);
            unint64_t v26 = v163;
            uint64_t v28 = (uint64_t *)v164;
            if (v163 == v164) {
              goto LABEL_98;
            }
            uint64_t v36 = v163;
          }
LABEL_72:
          uint64_t v48 = *a3 + 20;
          uint64_t v49 = *a3 - 4;
          uint64_t v50 = (uint64_t *)v26;
          do
          {
            uint64_t v51 = v50[1];
            if (v51)
            {
              uint64_t v52 = *v50;
              uint64_t v53 = (char *)(v48 + 24 * *v50);
              uint64_t v54 = v51 - 1;
              uint64_t v55 = *v50;
              uint64_t v56 = v50[1];
              while (1)
              {
                char v57 = *v53;
                v53 += 24;
                if ((v57 & 8) == 0) {
                  break;
                }
                ++v55;
                --v54;
                --v56;
                *uint64_t v50 = v55;
                v50[1] = v56;
                if (!v56) {
                  goto LABEL_73;
                }
              }
              float v58 = (char *)(v49 + 24 * (v52 + v51));
              do
              {
                char v59 = *v58;
                v58 -= 24;
                if ((v59 & 8) == 0) {
                  break;
                }
                v50[1] = v54--;
              }
              while (v54 != -1);
            }
LABEL_73:
            v50 += 4;
          }
          while (v50 != v28);
          if ((a1 & 1) == 0)
          {
            uint64_t v60 = 0;
            unint64_t v61 = ((uint64_t)v28 - v36) >> 5;
            uint64_t v62 = *a3;
            if (v61 <= 1) {
              unint64_t v61 = 1;
            }
            float32x2_t v63 = (void *)(v26 + 8);
            do
            {
              if (v60)
              {
                uint64_t v64 = *(v63 - 1);
                if ((*(unsigned char *)(v62 + 24 * v64 + 20) & 2) == 0)
                {
                  *(v63 - 4) = *v63 + v64 - *(v63 - 5);
                  *float32x2_t v63 = 0;
                }
              }
              ++v60;
              v63 += 4;
            }
            while (v61 != v60);
            unint64_t v146 = v36;
            char v37 = 0;
LABEL_93:
            float32x4_t v154 = (uint64_t *)v26;
            {
              a3 = v156;
              if (v145) {
                operator new();
              }
            }
            uint64_t v65 = 0;
            unint64_t v147 = v165;
            uint64_t v148 = *((void *)v9 + 91);
            unint64_t v164 = 0;
            unint64_t v165 = 0;
            if ((v37 & 1) == 0)
            {
              unint64_t v92 = 0;
              unint64_t v93 = 0;
              uint64_t v65 = 0;
              BOOL v94 = v154;
              float32x4_t v152 = v28;
              do
              {
                uint64_t v95 = v94[1];
                if (v95)
                {
                  float32x4_t v155 = v94;
                  unint64_t v96 = *v94;
                  unint64_t v97 = *v94 + v95;
                  unint64_t v98 = *v94 + 1;
                  if (v98 < v97)
                  {
                    unint64_t v99 = *v94;
                    do
                    {
                      uint64_t v101 = *a3 + 24 * v96;
                      unint64_t v96 = v98;
                      uint64_t v102 = *a3 + 24 * v98;
                      int v103 = *(unsigned __int8 *)(v101 + 20);
                      int v104 = *(unsigned __int8 *)(v102 + 20);
                      if ((v103 & 0x20) == 0 || (v104 & 0x20) == 0)
                      {
                        BOOL v105 = (~v104 & 6) == 0;
                        if ((v103 & 2) == 0 || (v103 & v105) != 0)
                        {
                          unint64_t v106 = v96 - v99;
                          v167[8] = 0;
                          *(void *)float v167 = 0;
                          if (v93 >= v92)
                          {
                            uint64_t v107 = (uint64_t)(v93 - v65) >> 5;
                            unint64_t v108 = v107 + 1;
                            if ((unint64_t)(v107 + 1) >> 59)
                            {
                              unint64_t v164 = v93;
                              unint64_t v165 = v92;
                              abort();
                            }
                            if ((uint64_t)(v92 - v65) >> 4 > v108) {
                              unint64_t v108 = (uint64_t)(v92 - v65) >> 4;
                            }
                            if (v92 - v65 >= 0x7FFFFFFFFFFFFFE0) {
                              uint64_t v109 = 0x7FFFFFFFFFFFFFFLL;
                            }
                            else {
                              uint64_t v109 = v108;
                            }
                            if (v109)
                            {
                              uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v166 + 16))(v166, 32 * v109, 8);
                              uint64_t v111 = v110 + 32 * v107;
                              uint64_t v109 = v110 + 32 * v109;
                              if (v110)
                              {
                                *(void *)uint64_t v111 = v99;
                                *(void *)(v111 + 8) = v106;
                                *(void *)(v111 + 16) = 0;
                                *(unsigned char *)(v111 + 24) = 0;
                              }
                              a3 = v156;
                            }
                            else
                            {
                              uint64_t v111 = 32 * v107;
                            }
                            uint64_t v112 = v111;
                            if (v93 != v65)
                            {
                              do
                              {
                                long long v113 = *(_OWORD *)(v93 - 16);
                                *(_OWORD *)(v112 - 32) = *(_OWORD *)(v93 - 32);
                                *(_OWORD *)(v112 - 16) = v113;
                                v112 -= 32;
                                v93 -= 32;
                              }
                              while (v93 != v65);
                              unint64_t v93 = v65;
                            }
                            uint64_t v100 = v111 + 32;
                            if (v93)
                            {
                              (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v166
                                                                                                  + 40))(v166, v93, v92 - v93);
                              a3 = v156;
                            }
                            uint64_t v65 = v112;
                            unint64_t v92 = v109;
                          }
                          else
                          {
                            if (v93)
                            {
                              *(void *)unint64_t v93 = v99;
                              *(void *)(v93 + 8) = v106;
                              *(void *)(v93 + 16) = *(void *)v167;
                              *(unsigned char *)(v93 + 24) = v167[8];
                            }
                            uint64_t v100 = v93 + 32;
                          }
                          unint64_t v93 = v100;
                          unint64_t v99 = v96;
                        }
                      }
                      unint64_t v98 = v96 + 1;
                    }
                    while (v96 + 1 != v97);
                    unint64_t v96 = v99;
                    unint64_t v98 = v97;
                    uint64_t v28 = v152;
                  }
                  unint64_t v164 = v93;
                  unint64_t v165 = v92;
                  unint64_t v114 = v98 - v96;
                  if (v98 > v96)
                  {
                    v167[8] = 0;
                    *(void *)float v167 = 0;
                    if (v93 >= v92)
                    {
                      uint64_t v115 = (uint64_t)(v93 - v65) >> 5;
                      unint64_t v116 = v115 + 1;
                      if ((unint64_t)(v115 + 1) >> 59) {
                        abort();
                      }
                      unint64_t v117 = v92 - v65;
                      if ((uint64_t)(v92 - v65) >> 4 > v116) {
                        unint64_t v116 = (uint64_t)(v92 - v65) >> 4;
                      }
                      if (v117 >= 0x7FFFFFFFFFFFFFE0) {
                        uint64_t v118 = 0x7FFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v118 = v116;
                      }
                      if (v118)
                      {
                        uint64_t v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v166 + 16))(v166, 32 * v118, 8);
                        uint64_t v120 = v119 + 32 * v115;
                        unint64_t v92 = v119 + 32 * v118;
                        if (v119)
                        {
                          *(void *)uint64_t v120 = v96;
                          *(void *)(v120 + 8) = v114;
                          *(void *)(v120 + 16) = 0;
                          *(unsigned char *)(v120 + 24) = 0;
                        }
                        a3 = v156;
                      }
                      else
                      {
                        unint64_t v92 = 0;
                        uint64_t v120 = 32 * v115;
                      }
                      uint64_t v121 = v120;
                      if (v93 != v65)
                      {
                        uint64_t v122 = v120;
                        do
                        {
                          uint64_t v121 = v122 - 32;
                          long long v123 = *(_OWORD *)(v93 - 16);
                          *(_OWORD *)(v122 - 32) = *(_OWORD *)(v93 - 32);
                          *(_OWORD *)(v122 - 16) = v123;
                          v93 -= 32;
                          v122 -= 32;
                        }
                        while (v93 != v65);
                      }
                      unint64_t v93 = v120 + 32;
                      unint64_t v164 = v120 + 32;
                      unint64_t v165 = v92;
                      if (v65)
                      {
                        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v166 + 40))(v166, v65, v117);
                        a3 = v156;
                      }
                      uint64_t v65 = v121;
                    }
                    else
                    {
                      if (v93)
                      {
                        *(void *)unint64_t v93 = v96;
                        *(void *)(v93 + 8) = v114;
                        *(void *)(v93 + 16) = *(void *)v167;
                        *(unsigned char *)(v93 + 24) = v167[8];
                      }
                      v93 += 32;
                    }
                    unint64_t v164 = v93;
                  }
                  BOOL v94 = v155;
                }
                v94 += 4;
              }
              while (v94 != v28);
            }
            uint64_t v163 = v65;
            if (v154) {
              (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v148 + 40))(v148, v154, v147 - v146);
            }
            unint64_t v26 = v65;
            a5 = v149;
            a2 = v150;
            a1 = v151;
            uint64_t v9 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          }
          goto LABEL_98;
        }
      }
      if (v14 < v13)
      {
        if (v14)
        {
          *(void *)unint64_t v14 = v11;
          *(void *)(v14 + 8) = v15;
          *(void *)(v14 + 16) = v161;
          *(unsigned char *)(v14 + 24) = v162;
        }
        v14 += 32;
LABEL_29:
        v11 += v15 + 1;
        if (v11 != v12) {
          continue;
        }
        unint64_t v164 = v14;
        unint64_t v165 = v13;
        uint64_t v28 = (uint64_t *)v14;
        unint64_t v26 = v153;
        uint64_t v163 = v153;
        BOOL v29 = v153 == v14;
        if ((a1 & 1) == 0) {
          goto LABEL_70;
        }
        goto LABEL_37;
      }
      break;
    }
    uint64_t v18 = (uint64_t)(v14 - v153) >> 5;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 59)
    {
      unint64_t v165 = v13;
      abort();
    }
    if ((uint64_t)(v13 - v153) >> 4 > v19) {
      unint64_t v19 = (uint64_t)(v13 - v153) >> 4;
    }
    if (v13 - v153 >= 0x7FFFFFFFFFFFFFE0) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    if (v20)
    {
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 32 * v20, 8);
      uint64_t v22 = v21 + 32 * v18;
      uint64_t v20 = v21 + 32 * v20;
      if (v21)
      {
        *(void *)uint64_t v22 = v11;
        *(void *)(v22 + 8) = v15;
        *(void *)(v22 + 16) = v161;
        *(unsigned char *)(v22 + 24) = v162;
      }
      a3 = v156;
    }
    else
    {
      uint64_t v22 = 32 * v18;
    }
    uint64_t v23 = v22;
    if (v14 == v153)
    {
      uint64_t v24 = v14;
      unint64_t v14 = v22 + 32;
      if (!v24) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v24 = v153;
      do
      {
        long long v25 = *(_OWORD *)(v14 - 16);
        *(_OWORD *)(v23 - 32) = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(v23 - 16) = v25;
        v23 -= 32;
        v14 -= 32;
      }
      while (v14 != v153);
      unint64_t v14 = v22 + 32;
      if (!v153) {
        goto LABEL_28;
      }
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 40))(v10, v24, v13 - v24);
    a3 = v156;
LABEL_28:
    unint64_t v13 = v20;
    uint64_t v153 = v23;
    goto LABEL_29;
  }
  uint64_t v163 = 0;
  if ((a1 & 1) == 0)
  {
    unint64_t v146 = 0;
    unint64_t v26 = 0;
    uint64_t v28 = 0;
    char v37 = 1;
    goto LABEL_93;
  }
  unint64_t v26 = 0;
LABEL_98:
  memset(v167, 0, 24);
  {
    operator new();
  }
  *(void *)&v167[24] = *((void *)v9 + 91);
  uint64_t result = (uint64_t)md::HorizontalTextLabelPart::mergeWordsToLines(&v163, (uint64_t *)v167, a1, a2);
  int8x16_t v67 = *(char **)&v167[8];
  unint64_t v68 = *(char **)v167;
  uint64_t v69 = *(void *)&v167[8] - *(void *)v167;
  if (*(void *)&v167[8] - *(void *)v167 >= 0x21uLL)
  {
    uint64_t v157 = 0;
    uint64_t v158 = 0;
    uint64_t v159 = 0;
    {
      if (result) {
        operator new();
      }
    }
    uint64_t v160 = *((void *)v9 + 91);
    unint64_t v70 = a2 - 1;
    if (v70 >= 3)
    {
      uint64_t v71 = 0;
      uint64_t v72 = *(void *)&v167[16];
      unint64_t v73 = 3;
      do
      {
        while (1)
        {
          unint64_t v75 = (v70 + v73) >> 1;
          uint64_t v158 = v71;
          uint64_t result = (uint64_t)md::HorizontalTextLabelPart::mergeWordsToLines(&v163, &v157, a1, v75);
          uint64_t v76 = v157;
          uint64_t v77 = (char *)v158;
          if (v158 - v157 > (unint64_t)(v67 - v68)) {
            break;
          }
          uint64_t v157 = (uint64_t)v68;
          uint64_t v158 = (uint64_t)v67;
          unint64_t v70 = v75 - 1;
          uint64_t v74 = v159;
          uint64_t v159 = v72;
          uint64_t v71 = (uint64_t)v68;
          uint64_t v72 = v74;
          unint64_t v68 = (char *)v76;
          int8x16_t v67 = v77;
          if (v73 > v75 - 1) {
            goto LABEL_106;
          }
        }
        unint64_t v73 = v75 + 1;
        uint64_t v71 = v157;
      }
      while (v75 + 1 <= v70);
LABEL_106:
      *(void *)&v167[16] = v72;
      if (v71) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v160 + 40))(v160, v71, v159 - v71);
      }
    }
    uint64_t v69 = v67 - v68;
  }
  if (v69 >= 1)
  {
    uint64_t v78 = v69 >> 5;
    unint64_t v79 = a5[1];
    uint64_t v80 = v79 - *a5;
    float v81 = (_OWORD *)(*a5 + (v80 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v82 = a5[2];
    if (v78 > (uint64_t)(v82 - v79) >> 5)
    {
      uint64_t v83 = v80 >> 5;
      unint64_t v84 = (v80 >> 5) + v78;
      if (v84 >> 59) {
        abort();
      }
      uint64_t v85 = v82 - *a5;
      if (v85 >> 4 > v84) {
        unint64_t v84 = v85 >> 4;
      }
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFE0) {
        uint64_t v86 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v86 = v84;
      }
      if (v86) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a5[3] + 16))(a5[3], 32 * v86, 8);
      }
      else {
        uint64_t result = 0;
      }
      float32x4_t v124 = (_OWORD *)(result + 32 * v83);
      uint64_t v125 = 32 * v78;
      float v126 = &v124[2 * v78];
      float v127 = v124;
      float v128 = v68;
      do
      {
        if (v127)
        {
          long long v129 = *((_OWORD *)v128 + 1);
          *float v127 = *(_OWORD *)v128;
          v127[1] = v129;
        }
        v127 += 2;
        v128 += 32;
        v125 -= 32;
      }
      while (v125);
      unint64_t v130 = (_OWORD *)*a5;
      if ((_OWORD *)*a5 == v81)
      {
        uint64_t v132 = result + 32 * v83;
      }
      else
      {
        float v131 = v81;
        do
        {
          uint64_t v132 = (uint64_t)(v124 - 2);
          long long v133 = *(v131 - 1);
          *(v124 - 2) = *(v131 - 2);
          *(v124 - 1) = v133;
          v131 -= 2;
          v124 -= 2;
        }
        while (v131 != v130);
      }
      for (uint64_t i = (_OWORD *)a5[1]; v81 != i; v126 += 2)
      {
        long long v135 = *v81;
        long long v136 = v81[1];
        v81 += 2;
        *float v126 = v135;
        v126[1] = v136;
      }
      uint64_t v137 = (_OWORD *)*a5;
      *a5 = v132;
      a5[1] = (uint64_t)v126;
      uint64_t v138 = a5[2];
      a5[2] = result + 32 * v86;
      if (v137) {
        uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a5[3] + 40))(a5[3], v137, v138 - (void)v137);
      }
      goto LABEL_208;
    }
    uint64_t v87 = (uint64_t)(v79 - (void)v81) >> 5;
    if (v87 >= v78)
    {
      double v88 = &v68[32 * v78];
      float32x2_t v90 = (char *)a5[1];
LABEL_199:
      double v139 = (char *)&v81[2 * v78];
      uint64_t v140 = &v90[-32 * v78];
      float v141 = v90;
      if ((unint64_t)v140 < v79)
      {
        float v141 = v90;
        do
        {
          if (v141)
          {
            long long v142 = *((_OWORD *)v140 + 1);
            *(_OWORD *)float v141 = *(_OWORD *)v140;
            *((_OWORD *)v141 + 1) = v142;
          }
          v140 += 32;
          v141 += 32;
        }
        while ((unint64_t)v140 < v79);
      }
      a5[1] = (uint64_t)v141;
      if (v90 != v139) {
        uint64_t result = (uint64_t)memmove(&v90[-32 * ((v90 - v139) >> 5)], v81, v90 - v139 - 7);
      }
      if (v88 != v68) {
        uint64_t result = (uint64_t)memmove(v81, v68, v88 - v68 - 7);
      }
      goto LABEL_208;
    }
    double v88 = &v68[32 * v87];
    if (v88 == v67)
    {
      float32x2_t v90 = (char *)a5[1];
    }
    else
    {
      int v89 = &v68[32 * v87];
      float32x2_t v90 = (char *)a5[1];
      do
      {
        if (v90)
        {
          long long v91 = *((_OWORD *)v89 + 1);
          *(_OWORD *)float32x2_t v90 = *(_OWORD *)v89;
          *((_OWORD *)v90 + 1) = v91;
        }
        v89 += 32;
        v90 += 32;
      }
      while (v89 != v67);
    }
    a5[1] = (uint64_t)v90;
    if ((uint64_t)(v79 - (void)v81) >= 1) {
      goto LABEL_199;
    }
  }
LABEL_208:
  if (v68) {
    uint64_t result = (*(uint64_t (**)(void, char *, void))(**(void **)&v167[24] + 40))(*(void *)&v167[24], v68, *(void *)&v167[16] - (void)v68);
  }
  if (v26)
  {
    unint64_t v164 = v26;
    float32x4_t v143 = *(uint64_t (**)(void))(*(void *)v166 + 40);
    return v143();
  }
  return result;
}

void sub_1A1B3C6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (!a16) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a28 + 40))(a28, a16, v28 - a16);
  _Unwind_Resume(exception_object);
}

uint64_t *md::HorizontalTextLabelPart::mergeWordsToLines(uint64_t *result, uint64_t *a2, int a3, unint64_t a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  uint64_t v6 = v5 - *result;
  if (v5 != *result)
  {
    uint64_t v10 = result;
    int64_t v11 = 0;
    unint64_t v12 = v6 >> 5;
    do
    {
      unint64_t v14 = (uint64_t *)(v4 + 32 * v11);
      if (a3)
      {
        uint64_t v15 = *v14;
        uint64_t v16 = v14[1] + *v14;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        unint64_t v17 = v11;
        while (1)
        {
          uint64_t v18 = *v14;
          v14 += 4;
          if (v16 - v18 > a4) {
            break;
          }
          if (v12 == ++v17)
          {
            unint64_t v17 = v12;
            break;
          }
        }
      }
      else
      {
        uint64_t v20 = *v14;
        unint64_t v19 = v14 + 1;
        uint64_t v15 = v20;
        if (v12 <= v11 + 1) {
          unint64_t v21 = v11 + 1;
        }
        else {
          unint64_t v21 = v12;
        }
        unint64_t v17 = v11;
        while (*v19 + *(v19 - 1) - v15 <= a4)
        {
          v19 += 4;
          if (++v17 >= v12)
          {
            unint64_t v17 = v21;
            break;
          }
        }
      }
      if (v11 <= (uint64_t)(v17 - 1)) {
        unint64_t v22 = v17 - 1;
      }
      else {
        unint64_t v22 = v11;
      }
      uint64_t v23 = *(void *)(v4 + 32 * v22);
      if (a3)
      {
        uint64_t v24 = v15 - v23 + *(void *)(v4 + 32 * v11 + 8);
        uint64_t v15 = *(void *)(v4 + 32 * v22);
      }
      else
      {
        uint64_t v24 = v23 - v15 + *(void *)(v4 + 32 * v22 + 8);
      }
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      if (v25 >= v26)
      {
        uint64_t v27 = (uint64_t)(v25 - *a2) >> 5;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 59) {
          abort();
        }
        uint64_t v29 = v26 - *a2;
        if (v29 >> 4 > v28) {
          unint64_t v28 = v29 >> 4;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
        }
        if (v28)
        {
          uint64_t v30 = 4 * v28;
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 32 * v28, 8);
          uint64_t v31 = (uint64_t)&result[4 * v27];
          unint64_t v28 = (unint64_t)&result[v30];
          if (result)
          {
            *(void *)uint64_t v31 = v15;
            *(void *)(v31 + 8) = v24;
            *(void *)(v31 + 16) = 0;
            *(unsigned char *)(v31 + 24) = 0;
          }
        }
        else
        {
          uint64_t v31 = 32 * v27;
        }
        uint64_t v33 = *a2;
        uint64_t v32 = a2[1];
        uint64_t v34 = v31;
        if (v32 != *a2)
        {
          do
          {
            long long v35 = *(_OWORD *)(v32 - 16);
            *(_OWORD *)(v34 - 32) = *(_OWORD *)(v32 - 32);
            *(_OWORD *)(v34 - 16) = v35;
            v34 -= 32;
            v32 -= 32;
          }
          while (v32 != v33);
          uint64_t v32 = *a2;
        }
        uint64_t v13 = v31 + 32;
        *a2 = v34;
        a2[1] = v31 + 32;
        uint64_t v36 = a2[2];
        a2[2] = v28;
        if (v32) {
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v32, v36 - v32);
        }
      }
      else
      {
        if (v25)
        {
          *(void *)unint64_t v25 = v15;
          *(void *)(v25 + 8) = v24;
          *(void *)(v25 + 16) = 0;
          *(unsigned char *)(v25 + 24) = 0;
        }
        uint64_t v13 = v25 + 32;
      }
      a2[1] = v13;
      int64_t v11 = v22 + 1;
      uint64_t v4 = *v10;
      unint64_t v12 = (v10[1] - *v10) >> 5;
    }
    while (v22 + 1 < v12);
  }
  return result;
}

void std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = 0;
      do
      {
        if (v4 + v11)
        {
          uint64_t v12 = v4 + v11;
          *(_OWORD *)uint64_t v12 = xmmword_1A28FC750;
          *(void *)(v12 + 16) = 1065353216;
          *(_DWORD *)(v12 + 24) = 1065353216;
          *(void *)(v12 + 36) = 0;
          *(void *)(v12 + 28) = 0;
          *(_DWORD *)(v12 + 44) = 0;
          *(_OWORD *)(v12 + 48) = xmmword_1A28FC750;
          *(_OWORD *)(v12 + 64) = xmmword_1A28FC750;
          *(_OWORD *)(v12 + 80) = xmmword_1A28FC750;
          *(_OWORD *)(v12 + 96) = xmmword_1A28FCDA0;
          *(unsigned char *)(v12 + 152) = 0;
          *(void *)(v12 + 112) = 0;
          *(void *)(v12 + 120) = 0;
          *(unsigned char *)(v12 + 128) = 0;
          *(_OWORD *)(v12 + 160) = 0uLL;
          *(_OWORD *)(v12 + 176) = 0uLL;
          *(_OWORD *)(v12 + 185) = 0uLL;
        }
        v11 += 208;
      }
      while (208 * a2 != v11);
      a1[1] = v4 + 208 * a2;
    }
    else
    {
      a1[1] = v4;
    }
  }
  else
  {
    uint64_t v6 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x13B13B13B13B13BLL) {
      abort();
    }
    unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x9D89D89D89D89DLL) {
      uint64_t v9 = 0x13B13B13B13B13BLL;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 208 * v9, 8);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v13 = 0;
    uint64_t v14 = v10 + 208 * v6;
    unint64_t v15 = v14 + 208 * a2;
    long long v16 = xmmword_1A28FC750;
    long long v17 = xmmword_1A28FCDA0;
    do
    {
      if (v14 + v13)
      {
        uint64_t v18 = v14 + v13;
        *(_OWORD *)uint64_t v18 = xmmword_1A28FC750;
        *(void *)(v18 + 16) = 1065353216;
        *(_DWORD *)(v18 + 24) = 1065353216;
        *(void *)(v18 + 36) = 0;
        *(void *)(v18 + 28) = 0;
        *(_DWORD *)(v18 + 44) = 0;
        *(_OWORD *)(v18 + 48) = xmmword_1A28FC750;
        *(_OWORD *)(v18 + 64) = xmmword_1A28FC750;
        *(_OWORD *)(v18 + 80) = xmmword_1A28FC750;
        *(_OWORD *)(v18 + 96) = xmmword_1A28FCDA0;
        *(unsigned char *)(v18 + 152) = 0;
        *(void *)(v18 + 112) = 0;
        *(void *)(v18 + 120) = 0;
        *(unsigned char *)(v18 + 128) = 0;
        *(_OWORD *)(v18 + 160) = 0uLL;
        *(_OWORD *)(v18 + 176) = 0uLL;
        *(_OWORD *)(v18 + 185) = 0uLL;
      }
      v13 += 208;
    }
    while (208 * a2 != v13);
    uint64_t v19 = v10 + 208 * v9;
    uint64_t v21 = *a1;
    uint64_t v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v19;
      if (!v20) {
        return;
      }
      goto LABEL_28;
    }
    uint64_t v22 = 0;
    do
    {
      *(_OWORD *)(v14 + v22 - 208) = v16;
      uint64_t v23 = v14 + v22 - 208;
      *(void *)(v23 + 16) = 1065353216;
      *(_DWORD *)(v23 + 24) = 1065353216;
      *(void *)(v23 + 36) = 0;
      *(void *)(v23 + 28) = 0;
      *(_DWORD *)(v23 + 44) = 0;
      *(_OWORD *)(v23 + 48) = v16;
      *(_OWORD *)(v23 + 64) = v16;
      *(_OWORD *)(v23 + 80) = v16;
      *(_OWORD *)(v23 + 96) = v17;
      *(unsigned char *)(v23 + 152) = 0;
      *(void *)(v23 + 112) = 0;
      *(void *)(v23 + 120) = 0;
      *(unsigned char *)(v23 + 128) = 0;
      *(_OWORD *)(v23 + 160) = 0u;
      *(_OWORD *)(v23 + 176) = 0u;
      *(_OWORD *)(v23 + 185) = 0u;
      v22 -= 208;
      md::CollisionObject::operator=(v23, v20 + v22);
      long long v17 = xmmword_1A28FCDA0;
      long long v16 = xmmword_1A28FC750;
    }
    while (v20 + v22 != v21);
    uint64_t v24 = v14 + v22;
    uint64_t v25 = *a1;
    uint64_t v26 = a1[1];
    *a1 = v24;
    a1[1] = v15;
    for (a1[2] = v19; v26 != v25; v26 -= 208)
    {
      free(*(void **)(v26 - 48));
      free(*(void **)(v26 - 40));
      free(*(void **)(v26 - 24));
    }
    if (v25)
    {
LABEL_28:
      uint64_t v27 = *(void (**)(void))(*(void *)a1[3] + 40);
      v27();
    }
  }
}

void std::__function::__alloc_func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::destroy[abi:nn180100](uint64_t a1)
{
  unint64_t v8 = (void **)(a1 + 128);
  std::vector<md::Mesh>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    uint64_t v4 = *(void **)(a1 + 104);
    if (v3 != v2)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v3 - 136));
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 104);
    }
    *(void *)(a1 + 112) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void std::vector<md::Mesh>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (char *)v1[1];
  uint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      unint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 9);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 9);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 80;
  }
  while (v4 != v2);
  uint64_t v5 = **a1;
LABEL_14:
  v1[1] = v2;
  operator delete(v5);
}

void gss::StyleSheet<gss::PropertyID>::didFinishDecodingGlobalProperties(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 2824);
  std::mutex::lock((std::mutex *)(a1 + 2824));
  atomic_store(a2, (unsigned __int8 *)(a1 + 2785));
  atomic_store(1u, (unsigned __int8 *)(a1 + 2784));
  std::promise<void>::set_value((std::promise<void> *)(a1 + 2792));
  uint64_t v5 = *(void *)(a1 + 2952);
  if (!v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void **)v5;
  unint64_t v7 = *(void **)(v5 + 8);
  if (*(void **)v5 != v7)
  {
    do
    {
      unsigned __int8 v16 = a2;
      uint64_t v8 = v6[3];
      if (!v8)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 48))(v8, &v16);
      v6 += 4;
    }
    while (v6 != v7);
    uint64_t v5 = *(void *)(a1 + 2952);
    *(void *)(a1 + 2952) = 0;
    if (!v5) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void **)v5;
    if (!*(void *)v5) {
      goto LABEL_18;
    }
    goto LABEL_9;
  }
  *(void *)(a1 + 2952) = 0;
  uint64_t v9 = *(void **)v5;
  if (*(void *)v5)
  {
LABEL_9:
    uint64_t v10 = *(void **)(v5 + 8);
    uint64_t v11 = v9;
    if (v10 != v9)
    {
      uint64_t v12 = v10 - 4;
      uint64_t v13 = v10 - 4;
      do
      {
        unint64_t v15 = (void *)v13[3];
        if (v13 == v15)
        {
          (*(void (**)(void *))(*v13 + 32))(v13);
        }
        else if (v15)
        {
          (*(void (**)(void *, void *))(*v15 + 40))(v15, v11);
        }
        v12 -= 4;
        BOOL v14 = v13 == v9;
        v13 -= 4;
      }
      while (!v14);
      uint64_t v11 = *(void **)v5;
    }
    *(void *)(v5 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(v5 + 24) + 40))(*(void *)(v5 + 24), v11, *(void *)(v5 + 16) - (void)v11);
  }
LABEL_18:
  MEMORY[0x1A6239270](v5, 0x20C40DC1BFBCFLL);
LABEL_19:
  std::mutex::unlock(v4);
}

void sub_1A1B3D1E4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3gss10StyleSheetINS_10PropertyIDEE43addFinishedDecodingGlobalPropertiesCallbackENSt3__18functionIFvbEEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 2785));
  char v4 = v1 & 1;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()();
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(void *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  uint64_t v6 = a1[5];
  unint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v8 = v2;
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v4 + 48))(v4, &v6, &v8);
    uint64_t v5 = v7;
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A1B3D32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    if (!atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      unint64_t v7 = *(os_unfair_lock_s **)(a1 + 8);
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
        }
        v10[0] = &unk_1EF57E298;
        v10[1] = v7;
        unsigned char v10[2] = v8;
        uint64_t v11 = v10;
        os_unfair_lock_lock(v7 + 2);
        if (*(void *)&v7->_os_unfair_lock_opaque)
        {
          uint64_t v9 = *(void *)&v7->_os_unfair_lock_opaque;
          if (!v11)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          (*(void (**)(void *, uint64_t *))(*v11 + 48))(v11, &v9);
        }
        os_unfair_lock_unlock(v7 + 2);
        if (v11 == v10)
        {
          (*(void (**)(void *))(v10[0] + 32))(v10);
        }
        else if (v11)
        {
          (*(void (**)(void *))(*v11 + 40))(v11);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A1B3D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  unsigned __int8 v16 = v15;
  os_unfair_lock_unlock(v16);
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*a13 + 40))();
  }
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v4 = **(NSObject ***)(*(void *)a2 + 1224);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZZZN2md10StyleLogic22setupDecodingCallbacksERKNSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEEENK3__1clES7_bENKUlPS0_E_clESB__block_invoke;
  void v5[3] = &__block_descriptor_48_ea8_32c63_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_10StyleLogicEEEEE_e5_v8__0l;
  v5[4] = v3;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v4, v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::destroy(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5 || (uint64_t v6 = std::__shared_weak_count::lock(v5)) == 0)
  {
LABEL_17:
    if (!v3) {
      return;
    }
    goto LABEL_18;
  }
  unint64_t v7 = v6;
  uint64_t v8 = *(md::LabelManager **)(a1 + 8);
  if (v8)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = 0;
    uint64_t v9 = operator new(0x20uLL);
    *uint64_t v9 = &unk_1EF56F258;
    v9[1] = v8;
    v9[2] = v4;
    v9[3] = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = v9;
    md::LabelManager::queueCommand(v8, 21, 0, v12);
    if (v13 == v12)
    {
      (*(void (**)(void *))(v12[0] + 32))(v12);
      if (!v3) {
        goto LABEL_16;
      }
    }
    else
    {
      if (v13) {
        (*(void (**)(void *, uint64_t, uint64_t))(*v13 + 40))(v13, v10, v11);
      }
      if (!v3) {
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_16:
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v3) {
    return;
  }
LABEL_18:
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1A1B3DB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::function<void ()(void)>::~function(&a12);
  md::components::Material::~Material((md::components::Material *)&a9);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  char v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void gss::StyleSheet<gss::PropertyID>::didFinishDecodingEverything(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  atomic_store(a2, (unsigned __int8 *)(a1 + 2787));
  LOBYTE(__dst) = a2;
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_43;
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v5 + 48))(v5, &__dst);
  std::mutex::lock((std::mutex *)(a1 + 2888));
  atomic_store(1u, (unsigned __int8 *)(a1 + 2786));
  std::promise<void>::set_value((std::promise<void> *)(a1 + 2800));
  uint64_t v8 = *(void *)(a1 + 2960);
  if (!v8) {
    goto LABEL_20;
  }
  uint64_t v9 = *(void **)v8;
  uint64_t v10 = *(void **)(v8 + 8);
  if (*(void **)v8 == v10)
  {
    *(void *)(a1 + 2960) = 0;
    uint64_t v12 = *(void **)v8;
    if (!*(void *)v8) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v13 = *(void **)(v8 + 8);
    uint64_t v14 = v12;
    if (v13 != v12)
    {
      unint64_t v15 = v13 - 4;
      unsigned __int8 v16 = v13 - 4;
      do
      {
        uint64_t v18 = (void *)v16[3];
        if (v16 == v18)
        {
          (*(void (**)(void *))(*v16 + 32))(v16);
        }
        else if (v18)
        {
          (*(void (**)(void *, void *))(*v18 + 40))(v18, v14);
        }
        v15 -= 4;
        BOOL v17 = v16 == v12;
        v16 -= 4;
      }
      while (!v17);
      uint64_t v14 = *(void **)v8;
    }
    *(void *)(v8 + 8) = v12;
    (*(void (**)(void, void *, void))(**(void **)(v8 + 24) + 40))(*(void *)(v8 + 24), v14, *(void *)(v8 + 16) - (void)v14);
LABEL_19:
    MEMORY[0x1A6239270](v8, 0x20C40DC1BFBCFLL);
LABEL_20:
    int v19 = *(_DWORD *)(a4 + 104);
    if ((v19 & 0x10) != 0)
    {
      unint64_t v22 = *(void *)(a4 + 96);
      unint64_t v23 = *(void *)(a4 + 56);
      if (v22 < v23)
      {
        *(void *)(a4 + 96) = v23;
        unint64_t v22 = v23;
      }
      uint64_t v24 = (const void **)(a4 + 48);
    }
    else
    {
      if ((v19 & 8) == 0)
      {
        size_t v20 = 0;
        HIBYTE(v31) = 0;
        p_dst = &__dst;
        goto LABEL_35;
      }
      uint64_t v24 = (const void **)(a4 + 24);
      unint64_t v22 = *(void *)(a4 + 40);
    }
    uint64_t v25 = *v24;
    size_t v20 = v22 - (void)*v24;
    if (v20 < 0x7FFFFFFFFFFFFFF8)
    {
      if (v20 >= 0x17)
      {
        uint64_t v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17) {
          uint64_t v26 = v20 | 7;
        }
        uint64_t v27 = v26 + 1;
        p_dst = (long long *)operator new(v26 + 1);
        *((void *)&__dst + 1) = v20;
        unint64_t v31 = v27 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v31) = v22 - *(unsigned char *)v24;
        p_dst = &__dst;
        if (!v20) {
          goto LABEL_35;
        }
      }
      memmove(p_dst, v25, v20);
LABEL_35:
      *((unsigned char *)p_dst + v20) = 0;
      unint64_t v28 = (void **)(a1 + 2976);
      if (*(char *)(a1 + 2999) < 0) {
        operator delete(*v28);
      }
      *(_OWORD *)unint64_t v28 = __dst;
      *(void *)(a1 + 2992) = v31;
      std::mutex::unlock((std::mutex *)(a1 + 2888));
      uint64_t v29 = *(std::__shared_weak_count **)(a1 + 24);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      if (v29)
      {
        if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      return;
    }
LABEL_43:
    abort();
  }
  while (1)
  {
    LOBYTE(__dst) = a2;
    uint64_t v11 = v9[3];
    if (!v11) {
      break;
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v11 + 48))(v11, &__dst);
    v9 += 4;
    if (v9 == v10)
    {
      uint64_t v8 = *(void *)(a1 + 2960);
      *(void *)(a1 + 2960) = 0;
      if (v8)
      {
        uint64_t v12 = *(void **)v8;
        if (!*(void *)v8) {
          goto LABEL_19;
        }
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A1B3DF74(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(void *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  uint64_t v6 = a1[5];
  unint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v8 = v2;
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v4 + 48))(v4, &v6, &v8);
    uint64_t v5 = v7;
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A1B3E05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    if (!atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      unint64_t v7 = *(os_unfair_lock_s **)(a1 + 8);
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
        }
        v10[0] = &unk_1EF57E250;
        v10[1] = v7;
        unsigned char v10[2] = v8;
        uint64_t v11 = v10;
        os_unfair_lock_lock(v7 + 2);
        if (*(void *)&v7->_os_unfair_lock_opaque)
        {
          uint64_t v9 = *(void *)&v7->_os_unfair_lock_opaque;
          if (!v11)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          (*(void (**)(void *, uint64_t *))(*v11 + 48))(v11, &v9);
        }
        os_unfair_lock_unlock(v7 + 2);
        if (v11 == v10)
        {
          (*(void (**)(void *))(v10[0] + 32))(v10);
        }
        else if (v11)
        {
          (*(void (**)(void *))(*v11 + 40))(v11);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A1B3E2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  unsigned __int8 v16 = v15;
  os_unfair_lock_unlock(v16);
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*a13 + 40))();
  }
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v4 = **(NSObject ***)(*(void *)a2 + 1224);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZZZN2md10StyleLogic22setupDecodingCallbacksERKNSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEEENK3__0clES7_bENKUlPS0_E_clESB__block_invoke;
  void v5[3] = &__block_descriptor_48_ea8_32c63_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_10StyleLogicEEEEE_e5_v8__0l;
  v5[4] = v3;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v4, v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::destroy(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, unsigned char *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    uint64_t v3 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      uint64_t v5 = [*(id *)(a1 + 56) UTF8String];
      int v6 = 136315394;
      unint64_t v7 = v4;
      __int16 v8 = 2080;
      uint64_t v9 = v5;
      _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_ERROR, "Failed to decode stylesheet %s %s", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1A1B3E560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(void *)(a1 + 64) = a1 + 40;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 64) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 64) = result;
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
  }
  return result;
}

void md::StyleLogic::setupDecodingCallbacks(uint64_t a1, std::__shared_weak_count *a2, uint64_t **a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    atomic_fetch_add_explicit(&a2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v6 = *a3;
    atomic_fetch_add_explicit(&a2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    int v6 = *a3;
  }
  v29[0] = &unk_1EF56D560;
  v29[1] = a1;
  v29[2] = a2;
  uint64_t v30 = v29;
  uint64_t v8 = *v6;
  unint64_t v7 = (std::__shared_weak_count *)v6[1];
  if (!v7 || (uint64_t v9 = std::__shared_weak_count::lock(v7), (v26 = v9) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
  }
  uint64_t v10 = v9;
  uint64_t v11 = v6[2];
  uint64_t v12 = (uint64_t)v30;
  if (!v30) {
    goto LABEL_9;
  }
  if (v30 != v29)
  {
    uint64_t v12 = (*(uint64_t (**)(void *))(*v30 + 16))(v30);
LABEL_9:
    uint64_t v32 = (void *)v12;
    goto LABEL_11;
  }
  uint64_t v32 = v31;
  (*(void (**)(void *, void *))(v29[0] + 24))(v29, v31);
LABEL_11:
  *(void *)&long long v33 = v8;
  *((void *)&v33 + 1) = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v35 = 0;
  uint64_t v13 = operator new(0x38uLL);
  uint64_t v14 = v13;
  *uint64_t v13 = &unk_1EF57CDC8;
  if (v32)
  {
    if (v32 == v31)
    {
      v13[4] = v13 + 1;
      (*(void (**)(void *))(v31[0] + 24))(v31);
    }
    else
    {
      v13[4] = v32;
      uint64_t v32 = 0;
    }
  }
  else
  {
    v13[4] = 0;
  }
  *(_OWORD *)(v14 + 5) = v33;
  long long v33 = 0uLL;
  long long v35 = v14;
  std::mutex::lock((std::mutex *)(v11 + 2888));
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v11 + 2786));
  if ((v15 & 1) == 0)
  {
    unsigned __int8 v16 = *(uint64_t **)(v11 + 2960);
    if (!v16) {
      operator new();
    }
    unint64_t v20 = v16[1];
    if (v20 >= v16[2])
    {
      uint64_t v22 = std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>::__push_back_slow_path<std::function<void ()(BOOL)> const&>(v16, (uint64_t)v34);
LABEL_44:
      v16[1] = v22;
      std::mutex::unlock((std::mutex *)(v11 + 2888));
      goto LABEL_45;
    }
    if (v20)
    {
      uint64_t v21 = (uint64_t)v35;
      if (v35)
      {
        if (v35 == v34)
        {
          *(void *)(v20 + 24) = v20;
          (*(void (**)(void *, unint64_t))(*v35 + 24))(v35, v20);
          goto LABEL_43;
        }
        uint64_t v21 = (*(uint64_t (**)(void *))(*v35 + 16))(v35);
      }
      *(void *)(v20 + 24) = v21;
    }
LABEL_43:
    uint64_t v22 = v20 + 32;
    v16[1] = v20 + 32;
    goto LABEL_44;
  }
  std::mutex::unlock((std::mutex *)(v11 + 2888));
  if (*(unsigned char *)(v11 + 81))
  {
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken[0] != -1) {
      dispatch_once(gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_256_26117);
    }
    BOOL v17 = &gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  }
  else
  {
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken != -1) {
      dispatch_once(&gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_258_26118);
    }
    BOOL v17 = &gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  }
  uint64_t v18 = (id)*v17;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN3gss10StyleSheetINS_10PropertyIDEE27addFinishedDecodingCallbackENSt3__18functionIFvbEEE_block_invoke;
  block[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvbEEE_e5_v8__0l;
  block[4] = v11;
  uint64_t v19 = (uint64_t)v35;
  if (!v35) {
    goto LABEL_29;
  }
  if (v35 != v34)
  {
    uint64_t v19 = (*(uint64_t (**)(void *))(*v35 + 16))(v35);
LABEL_29:
    uint64_t v38 = (void *)v19;
    goto LABEL_31;
  }
  uint64_t v38 = v37;
  (*(void (**)(void *, void *))(v34[0] + 24))(v34, v37);
LABEL_31:
  dispatch_async(v18, block);

  if (v38 == v37)
  {
    (*(void (**)(void *))(v37[0] + 32))(v37);
  }
  else if (v38)
  {
    (*(void (**)(void *))(*v38 + 40))(v38);
  }
LABEL_45:
  if (v35 == v34)
  {
    (*(void (**)(void *))(v34[0] + 32))(v34);
    unint64_t v23 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (!*((void *)&v33 + 1)) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  if (v35) {
    (*(void (**)(void *))(*v35 + 40))(v35);
  }
  unint64_t v23 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (*((void *)&v33 + 1))
  {
LABEL_51:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_53:
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
    uint64_t v24 = v26;
    if (!v26) {
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  if (v32) {
    (*(void (**)(void *))(*v32 + 40))(v32);
  }
  uint64_t v24 = v26;
  if (v26)
  {
LABEL_59:
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_61:
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
    uint64_t v25 = *a3;
    if (a2) {
LABEL_65:
    }
      atomic_fetch_add_explicit(&a2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    if (v30) {
      (*(void (**)(void *))(*v30 + 40))(v30);
    }
    uint64_t v25 = *a3;
    if (a2) {
      goto LABEL_65;
    }
  }
  v27[0] = &unk_1EF56D5A8;
  v27[1] = a1;
  v27[2] = a2;
  unint64_t v28 = v27;
  gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(v25, v27);
  if (v28 == v27)
  {
    (*(void (**)(void *))(v27[0] + 32))(v27);
    if (a2) {
LABEL_70:
    }
      std::__shared_weak_count::__release_weak(a2);
  }
  else
  {
    if (v28) {
      (*(void (**)(void *))(*v28 + 40))(v28);
    }
    if (a2) {
      goto LABEL_70;
    }
  }
}

void sub_1A1B3EE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v27 + 8) = v28;
  std::mutex::unlock(v26);
  std::function<void ()(BOOL)>::~function(&a25);
  gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}::~function(&a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~function(&a15);
  if (!v25) {
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF56D560;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 6);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (char *)*((void *)__p + 4);
  if (v4 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }
  operator delete(__p);
}

uint64_t std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>::__push_back_slow_path<std::function<void ()(BOOL)> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    abort();
  }
  uint64_t v5 = a1 + 3;
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  BOOL v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  uint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7) {
    uint64_t v8 = v3;
  }
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 16))(*v5, 32 * v8, 8);
    uint64_t v12 = v11 + 32 * v2;
    uint64_t v13 = v11 + v10;
    if (v11)
    {
      uint64_t v14 = *(void *)(a2 + 24);
      if (v14)
      {
        if (v14 == a2)
        {
          *(void *)(v12 + 24) = v12;
          (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), v12);
        }
        else
        {
          *(void *)(v12 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
        }
      }
      else
      {
        *(void *)(v12 + 24) = 0;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 32 * v2;
  }
  uint64_t v15 = v12 + 32;
  uint64_t v28 = v12 + 32;
  uint64_t v17 = *a1;
  unsigned __int8 v16 = (void *)a1[1];
  if (v16 == (void *)*a1)
  {
    uint64_t v18 = (void *)a1[1];
  }
  else
  {
    do
    {
      uint64_t v19 = v12;
      v12 -= 32;
      unint64_t v20 = v16 - 4;
      uint64_t v21 = (void *)*(v16 - 1);
      if (v21)
      {
        if (v20 == v21)
        {
          *(void *)(v19 - 8) = v12;
          (*(void (**)(void, uint64_t))(*(void *)*(v16 - 1) + 24))(*(v16 - 1), v12);
        }
        else
        {
          *(void *)(v19 - 8) = v21;
          *(v16 - 1) = 0;
        }
      }
      else
      {
        *(void *)(v19 - 8) = 0;
      }
      unsigned __int8 v16 = v20;
    }
    while (v20 != (void *)v17);
    uint64_t v18 = (void *)*a1;
    unsigned __int8 v16 = (void *)a1[1];
    uint64_t v15 = v28;
  }
  *a1 = v12;
  a1[1] = v15;
  uint64_t v22 = a1[2];
  a1[2] = v13;
  if (v16 == v18)
  {
    uint64_t v18 = v16;
    if (!v16) {
      return v15;
    }
    goto LABEL_31;
  }
  unint64_t v23 = v16 - 4;
  uint64_t v24 = v16 - 4;
  do
  {
    uint64_t v26 = (void *)v24[3];
    if (v24 == v26)
    {
      (*(void (**)(void *))(*v24 + 32))(v24);
    }
    else if (v26)
    {
      (*(void (**)(void *))(*v26 + 40))(v26);
    }
    v23 -= 4;
    BOOL v25 = v24 == v18;
    v24 -= 4;
  }
  while (!v25);
  if (v18) {
LABEL_31:
  }
    (*(void (**)(void, void *, uint64_t))(*(void *)*v5 + 40))(*v5, v18, v22 - (void)v18);
  return v15;
}

void sub_1A1B3F2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1B3F458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

void gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(uint64_t *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2[3]) {
    return;
  }
  uint64_t v4 = *a1;
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3), (v22 = v6) == 0)) {
    std::__throw_bad_weak_ptr[abi:nn180100]();
  }
  BOOL v7 = v6;
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[3];
  if (!v9) {
    goto LABEL_7;
  }
  if ((void *)v9 != a2)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_7:
    uint64_t v24 = (void *)v9;
    goto LABEL_9;
  }
  uint64_t v24 = v23;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v23);
LABEL_9:
  *(void *)&long long v25 = v4;
  *((void *)&v25 + 1) = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v27 = 0;
  uint64_t v10 = operator new(0x38uLL);
  uint64_t v11 = v10;
  *uint64_t v10 = &unk_1EF57CE10;
  if (v24)
  {
    if (v24 == v23)
    {
      v10[4] = v10 + 1;
      (*(void (**)(void *))(v23[0] + 24))(v23);
    }
    else
    {
      v10[4] = v24;
      uint64_t v24 = 0;
    }
  }
  else
  {
    v10[4] = 0;
  }
  *(_OWORD *)(v11 + 5) = v25;
  long long v25 = 0uLL;
  uint64_t v27 = v11;
  std::mutex::lock((std::mutex *)(v8 + 2824));
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(v8 + 2784));
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = *(uint64_t **)(v8 + 2952);
    if (!v13) {
      operator new();
    }
    unint64_t v17 = v13[1];
    if (v17 >= v13[2])
    {
      uint64_t v19 = std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>::__push_back_slow_path<std::function<void ()(BOOL)> const&>(v13, (uint64_t)v26);
LABEL_42:
      v13[1] = v19;
      std::mutex::unlock((std::mutex *)(v8 + 2824));
      goto LABEL_43;
    }
    if (v17)
    {
      uint64_t v18 = (uint64_t)v27;
      if (v27)
      {
        if (v27 == v26)
        {
          *(void *)(v17 + 24) = v17;
          (*(void (**)(void *, unint64_t))(*v27 + 24))(v27, v17);
          goto LABEL_41;
        }
        uint64_t v18 = (*(uint64_t (**)(void *))(*v27 + 16))(v27);
      }
      *(void *)(v17 + 24) = v18;
    }
LABEL_41:
    uint64_t v19 = v17 + 32;
    v13[1] = v17 + 32;
    goto LABEL_42;
  }
  std::mutex::unlock((std::mutex *)(v8 + 2824));
  if (*(unsigned char *)(v8 + 81))
  {
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken[0] != -1) {
      dispatch_once(gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_369);
    }
    uint64_t v14 = &gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  }
  else
  {
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken != -1) {
      dispatch_once(&gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_111);
    }
    uint64_t v14 = &gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  }
  uint64_t v15 = (id)*v14;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN3gss10StyleSheetINS_10PropertyIDEE43addFinishedDecodingGlobalPropertiesCallbackENSt3__18functionIFvbEEE_block_invoke;
  block[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvbEEE_e5_v8__0l;
  block[4] = v8;
  uint64_t v16 = (uint64_t)v27;
  if (!v27) {
    goto LABEL_27;
  }
  if (v27 != v26)
  {
    uint64_t v16 = (*(uint64_t (**)(void *))(*v27 + 16))(v27);
LABEL_27:
    uint64_t v30 = (void *)v16;
    goto LABEL_29;
  }
  uint64_t v30 = v29;
  (*(void (**)(void *, void *))(v26[0] + 24))(v26, v29);
LABEL_29:
  dispatch_async(v15, block);

  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void *))(*v30 + 40))(v30);
  }
LABEL_43:
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
    unint64_t v20 = (std::__shared_weak_count *)*((void *)&v25 + 1);
    if (!*((void *)&v25 + 1)) {
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v27) {
    (*(void (**)(void *))(*v27 + 40))(v27);
  }
  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1))
  {
LABEL_49:
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_51:
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
    uint64_t v21 = v22;
    if (!v22) {
      return;
    }
    goto LABEL_57;
  }
  if (v24) {
    (*(void (**)(void *))(*v24 + 40))(v24);
  }
  uint64_t v21 = v22;
  if (v22)
  {
LABEL_57:
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1A1B3FB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20 = v19;
  *(void *)(v18 + 8) = v20;
  std::mutex::unlock(v17);
  std::function<void ()(BOOL)>::~function(&a17);
  gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}::~function(&a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 8;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 6);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (char *)*((void *)__p + 4);
  if (v4 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }
  operator delete(__p);
}

void *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_1EF57CE10;
  unint64_t v3 = v2 + 1;
  uint64_t v4 = a1[4];
  if (!v4) {
    goto LABEL_4;
  }
  if ((void *)v4 != a1 + 1)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    goto LABEL_6;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
LABEL_6:
  uint64_t v5 = a1[6];
  v2[5] = a1[5];
  v2[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return v2;
}

void sub_1A1B3FD94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF56D5A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF56E760;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_1EF57CDC8;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = a1[4];
  if (!v4) {
    goto LABEL_4;
  }
  if ((void *)v4 != a1 + 1)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    goto LABEL_6;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
LABEL_6:
  uint64_t v5 = a1[6];
  v2[5] = a1[5];
  v2[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return v2;
}

void sub_1A1B3FF08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::EncodeModule,std::allocator<md::EncodeModule>,ecs2::ModuleDescriptor ()(void)>::operator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  __int16 v2 = gdc::FamilyInfo<ecs2::ModuleDescriptor,unsigned short>::Counter::nextId(void)::counter++;
  *(_WORD *)a1 = v2;
  *(unsigned char *)(a1 + 31) = 12;
  strcpy((char *)(a1 + 8), "EncodeModule");
  __int16 v33 = 29;
  LOWORD(v42) = -5093;
  v43[0] = &unk_1EF51A120;
  v43[1] = 0;
  v43[3] = v43;
  v44[0] = &unk_1EF526E28;
  v44[3] = v44;
  v45[0] = &unk_1EF526DE0;
  v45[3] = v45;
  *(void *)uint64_t v46 = operator new(0x20uLL);
  *(_OWORD *)&v46[8] = xmmword_1A28FCF30;
  strcpy(*(char **)v46, "md::erq::EncodeRenderQueue");
  v25[0] = &unk_1EF51A120;
  v25[1] = 0;
  uint64_t v26 = v25;
  v27[0] = &unk_1EF526E28;
  uint64_t v30 = v29;
  uint64_t v28 = v27;
  v29[0] = &unk_1EF526DE0;
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v46;
  uint64_t v32 = *(void *)&v46[16];
  uint64_t v3 = operator new(0x80uLL);
  uint64_t v4 = v3;
  uint64_t v5 = (char *)(v3 + 16);
  uint64_t v34 = v3;
  uint64_t v36 = v3 + 16;
  *(_WORD *)uint64_t v3 = -5093;
  if (v25)
  {
    v3[4] = v3 + 1;
    (*(void (**)(void *))(v25[0] + 24))(v25);
  }
  else
  {
    v3[4] = 0;
  }
  if (v28)
  {
    if (v28 == v27)
    {
      v4[8] = v4 + 5;
      (*(void (**)(void *))(v27[0] + 24))(v27);
    }
    else
    {
      v4[8] = (*(uint64_t (**)(void))(*v28 + 16))();
    }
  }
  else
  {
    v4[8] = 0;
  }
  if (v30)
  {
    if (v30 == v29)
    {
      v4[12] = v4 + 9;
      (*(void (**)(void *))(v29[0] + 24))(v29);
    }
    else
    {
      v4[12] = (*(uint64_t (**)(void))(*v30 + 16))();
    }
  }
  else
  {
    v4[12] = 0;
  }
  uint64_t v6 = (std::string *)(v4 + 13);
  if (SHIBYTE(v32) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v31[0], (std::string::size_type)v31[1]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v31;
    v4[15] = v32;
  }
  long long v35 = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v38, 0, sizeof(v38));
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  BOOL v7 = operator new(0x80uLL);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = v7 + 16;
  *(void *)(a1 + 48) = v7 + 16;
  *(_WORD *)BOOL v7 = 29;
  ecs2::ModuleBucketExecutionDescriptor::ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)(v7 + 1), (const ecs2::ModuleBucketExecutionDescriptor *)&v34);
  v7[11] = 0;
  v7[12] = 0;
  v7[10] = 0;
  std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>(v7 + 10, v39, *((uint64_t *)&v39 + 1), (uint64_t)(*((void *)&v39 + 1) - v39) >> 6);
  v7[13] = 0;
  v7[14] = 0;
  v7 += 13;
  v7[2] = 0;
  std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>(v7, *((uint64_t *)&v40 + 1), v41, (uint64_t)(v41 - *((void *)&v40 + 1)) >> 6);
  *(void *)(a1 + 40) = v8;
  ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)&v39);
  uint64_t v42 = (void **)v38 + 1;
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100](&v42);
  uint64_t v9 = (char *)__p[0];
  if (__p[0])
  {
    uint64_t v10 = __p[1];
    uint64_t v11 = __p[0];
    if (__p[1] != __p[0])
    {
      unsigned __int8 v12 = (char *)__p[1];
      do
      {
        uint64_t v14 = (void *)*((void *)v12 - 3);
        v12 -= 24;
        uint64_t v13 = v14;
        if (v14)
        {
          *(v10 - 2) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      uint64_t v11 = __p[0];
    }
    __p[1] = v9;
    operator delete(v11);
  }
  uint64_t v15 = (char *)v34;
  if (v34)
  {
    uint64_t v16 = v35;
    unint64_t v17 = v34;
    if (v35 != v34)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = (void **)&v16[v18];
        if (v16[v18 - 1] < 0) {
          operator delete(*(v19 - 3));
        }
        uint64_t v20 = (char *)*(v19 - 4);
        if (v19 - 7 == (void **)v20)
        {
          (*((void (**)(char *))*(v19 - 7) + 4))((char *)v19 - 56);
        }
        else if (v20)
        {
          (*(void (**)(void))(*(void *)v20 + 40))(*(v19 - 4));
        }
        uint64_t v21 = (uint64_t)&v16[v18 - 88];
        uint64_t v22 = *(void *)&v16[v18 - 64];
        if (v21 == v22)
        {
          (*(void (**)(char *))(*(void *)v21 + 32))(&v16[v18 - 88]);
        }
        else if (v22)
        {
          (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
        }
        unint64_t v23 = *(char **)&v16[v18 - 96];
        if (v19 - 15 == (void **)v23)
        {
          (*((void (**)(char *))*(v19 - 15) + 4))((char *)v19 - 120);
        }
        else if (v23)
        {
          (*(void (**)(void))(*(void *)v23 + 40))(*(void *)&v16[v18 - 96]);
        }
        v18 -= 128;
      }
      while (&v16[v18] != v15);
      unint64_t v17 = v34;
    }
    long long v35 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void))(*v30 + 40))();
  }
  if (v28 == v27)
  {
    (*(void (**)(void *))(v27[0] + 32))(v27);
  }
  else if (v28)
  {
    (*(void (**)(void))(*v28 + 40))();
  }
  uint64_t result = (uint64_t)v26;
  if (v26 == v25) {
    return (*(uint64_t (**)(void *))(v25[0] + 32))(v25);
  }
  if (v26) {
    return (*(uint64_t (**)(void))(*v26 + 40))();
  }
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2},std::allocator<md::erq::EncodeRenderQueue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::erq::EncodeRenderQueue>(md::erq::EncodeRenderQueue &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526DE0;
}

uint64_t std::__function::__func<md::LegacyLayoutModule,std::allocator<md::LegacyLayoutModule>,ecs2::ModuleDescriptor ()(void)>::operator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  __int16 v2 = gdc::FamilyInfo<ecs2::ModuleDescriptor,unsigned short>::Counter::nextId(void)::counter++;
  *(_WORD *)a1 = v2;
  *(unsigned char *)(a1 + 31) = 18;
  strcpy((char *)(a1 + 8), "LegacyLayoutModule");
  __int16 v60 = 2;
  LOWORD(v90) = 13110;
  long long v91 = &unk_1EF51AC60;
  uint64_t v92 = 0;
  unint64_t v93 = &v91;
  v94[0] = &unk_1EF5284A8;
  uint64_t v95 = v94;
  v96[0] = &unk_1EF528460;
  unint64_t v97 = v96;
  *(void *)unint64_t v98 = operator new(0x20uLL);
  *(_OWORD *)&v98[8] = xmmword_1A28FD1A0;
  strcpy(*(char **)v98, "md::ita::LegacyLayoutStartTask");
  __int16 v42 = 13110;
  uint64_t v44 = v43;
  v43[0] = &unk_1EF51AC60;
  v43[1] = 0;
  uint64_t v46 = v45;
  v45[0] = &unk_1EF5284A8;
  uint64_t v48 = v47;
  long long v49 = *(_OWORD *)v98;
  v47[0] = &unk_1EF528460;
  uint64_t v50 = *(void *)&v98[16];
  LOWORD(v90) = 21272;
  long long v91 = &unk_1EF51B200;
  uint64_t v92 = 0;
  unint64_t v93 = &v91;
  v94[0] = &unk_1EF528FE8;
  uint64_t v95 = v94;
  v96[0] = &unk_1EF528FA0;
  unint64_t v97 = v96;
  *(void *)unint64_t v98 = operator new(0x28uLL);
  *(_OWORD *)&v98[8] = xmmword_1A28FD520;
  strcpy(*(char **)v98, "md::ita::ReserveStencilRangeTask");
  __int16 v51 = 21272;
  uint64_t v53 = v52;
  v52[0] = &unk_1EF51B200;
  v52[1] = 0;
  uint64_t v55 = v54;
  v54[0] = &unk_1EF528FE8;
  char v57 = v56;
  v56[0] = &unk_1EF528FA0;
  long long v58 = *(_OWORD *)v98;
  uint64_t v59 = *(void *)&v98[16];
  unint64_t v61 = 0;
  uint64_t v62 = 0;
  float32x2_t v63 = 0;
  uint64_t v3 = (char *)operator new(0x100uLL);
  unint64_t v61 = v3;
  uint64_t v62 = v3;
  float32x2_t v63 = v3 + 256;
  ecs2::ExecutionTaskDescriptor::ExecutionTaskDescriptor((uint64_t)v3, (uint64_t)&v42);
  ecs2::ExecutionTaskDescriptor::ExecutionTaskDescriptor((uint64_t)(v3 + 128), (uint64_t)&v51);
  uint64_t v62 = v3 + 256;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  __int16 v70 = 11;
  LOWORD(v90) = -28404;
  long long v91 = &unk_1EF51A3A8;
  uint64_t v92 = 0;
  unint64_t v93 = &v91;
  v94[0] = &unk_1EF527338;
  uint64_t v95 = v94;
  v96[0] = &unk_1EF5272F0;
  unint64_t v97 = v96;
  *(void *)unint64_t v98 = operator new(0x20uLL);
  *(_OWORD *)&v98[8] = xmmword_1A28FD1B0;
  strcpy(*(char **)v98, "md::ita::LegacyLayoutTask");
  __int16 v33 = -28404;
  long long v35 = v34;
  v34[0] = &unk_1EF51A3A8;
  v34[1] = 0;
  v36[0] = &unk_1EF527338;
  long long v39 = v38;
  long long v40 = *(_OWORD *)v98;
  char v37 = v36;
  v38[0] = &unk_1EF5272F0;
  uint64_t v41 = *(void *)&v98[16];
  unint64_t v73 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v71 = (char *)operator new(0x80uLL);
  uint64_t v72 = v71;
  uint64_t v4 = v71 + 128;
  unint64_t v73 = v71 + 128;
  ecs2::ExecutionTaskDescriptor::ExecutionTaskDescriptor((uint64_t)v71, (uint64_t)&v33);
  uint64_t v72 = v4;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  __int16 v80 = 27;
  LOWORD(v90) = -25883;
  long long v91 = &unk_1EF51A288;
  uint64_t v92 = 0;
  unint64_t v93 = &v91;
  v94[0] = &unk_1EF5270F8;
  uint64_t v95 = v94;
  v96[0] = &unk_1EF5270B0;
  unint64_t v97 = v96;
  *(void *)unint64_t v98 = operator new(0x20uLL);
  *(_OWORD *)&v98[8] = xmmword_1A28FD110;
  strcpy(*(char **)v98, "md::ita::OnLayoutEndTask");
  __int16 v24 = -25883;
  v25[0] = &unk_1EF51A288;
  v25[1] = 0;
  uint64_t v26 = v25;
  v27[0] = &unk_1EF5270F8;
  uint64_t v30 = v29;
  uint64_t v28 = v27;
  v29[0] = &unk_1EF5270B0;
  *(_OWORD *)std::string __p = *(_OWORD *)v98;
  uint64_t v32 = *(void *)&v98[16];
  uint64_t v83 = 0;
  float v81 = 0;
  uint64_t v82 = 0;
  float v81 = (char *)operator new(0x80uLL);
  uint64_t v82 = v81;
  uint64_t v5 = v81 + 128;
  uint64_t v83 = v81 + 128;
  ecs2::ExecutionTaskDescriptor::ExecutionTaskDescriptor((uint64_t)v81, (uint64_t)&v24);
  uint64_t v82 = v5;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (char *)operator new(0x180uLL);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v6 + 384;
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)v6, (uint64_t)&v60);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v6 + 128), (uint64_t)&v70);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v6 + 256), (uint64_t)&v80);
  BOOL v7 = (void ***)&v90;
  *(void *)(a1 + 40) = v6 + 384;
  do
  {
    ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)v7 - 6);
    float32x2_t v90 = v7 - 9;
    std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100]((void ***)&v90);
    uint64_t v9 = *(v7 - 12);
    if (v9)
    {
      uint64_t v10 = *(v7 - 11);
      uint64_t v11 = *(v7 - 12);
      if (v10 != v9)
      {
        unsigned __int8 v12 = *(v7 - 11);
        do
        {
          uint64_t v14 = *(v12 - 3);
          v12 -= 3;
          uint64_t v13 = v14;
          if (v14)
          {
            *(v10 - 2) = v13;
            operator delete(v13);
          }
          uint64_t v10 = v12;
        }
        while (v12 != v9);
        uint64_t v11 = *(v7 - 12);
      }
      *(v7 - 11) = v9;
      operator delete(v11);
    }
    uint64_t v15 = *(v7 - 15);
    if (v15)
    {
      uint64_t v16 = *(v7 - 14);
      uint64_t v8 = *(v7 - 15);
      if (v16 != v15)
      {
        uint64_t v17 = 0;
        do
        {
          uint64_t v18 = &v16[v17];
          if (SHIBYTE(v16[v17 - 1]) < 0) {
            operator delete(*(v18 - 3));
          }
          uint64_t v19 = (void **)*(v18 - 4);
          if (v18 - 7 == v19)
          {
            (*((void (**)(void **))*(v18 - 7) + 4))(v18 - 7);
          }
          else if (v19)
          {
            (*((void (**)(void))*v19 + 5))(*(v18 - 4));
          }
          uint64_t v20 = (uint64_t)&v16[v17 - 11];
          uint64_t v21 = v16[v17 - 8];
          if ((void *)v20 == v21)
          {
            (*(void (**)(void **))(*(void *)v20 + 32))(&v16[v17 - 11]);
          }
          else if (v21)
          {
            (*(void (**)(void *))(*(void *)v21 + 40))(v21);
          }
          uint64_t v22 = (void **)v16[v17 - 12];
          if (v18 - 15 == v22)
          {
            (*((void (**)(void **))*(v18 - 15) + 4))(v18 - 15);
          }
          else if (v22)
          {
            (*((void (**)(void *))*v22 + 5))(v16[v17 - 12]);
          }
          v17 -= 16;
        }
        while (&v16[v17] != v15);
        uint64_t v8 = *(v7 - 15);
      }
      *(v7 - 14) = v15;
      operator delete(v8);
    }
    v7 -= 16;
  }
  while (v7 != (void ***)&v60);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void))(*v30 + 40))();
  }
  if (v28 == v27)
  {
    (*(void (**)(void *))(v27[0] + 32))(v27);
  }
  else if (v28)
  {
    (*(void (**)(void))(*v28 + 40))();
  }
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
    if ((SHIBYTE(v41) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  if (v26) {
    (*(void (**)(void))(*v26 + 40))();
  }
  if (SHIBYTE(v41) < 0) {
LABEL_49:
  }
    operator delete((void *)v40);
LABEL_45:
  if (v39 == v38)
  {
    (*(void (**)(void *))(v38[0] + 32))(v38);
  }
  else if (v39)
  {
    (*(void (**)(void))(*v39 + 40))();
  }
  if (v37 == v36)
  {
    (*(void (**)(void *))(v36[0] + 32))(v36);
  }
  else if (v37)
  {
    (*(void (**)(void))(*v37 + 40))();
  }
  if (v35 == v34)
  {
    (*(void (**)(void *))(v34[0] + 32))(v34);
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_63;
  }
  if (v35) {
    (*(void (**)(void))(*v35 + 40))();
  }
  if (SHIBYTE(v59) < 0) {
LABEL_63:
  }
    operator delete((void *)v58);
LABEL_59:
  if (v57 == v56)
  {
    (*(void (**)(void *))(v56[0] + 32))(v56);
  }
  else if (v57)
  {
    (*(void (**)(void))(*v57 + 40))();
  }
  if (v55 == v54)
  {
    (*(void (**)(void *))(v54[0] + 32))(v54);
  }
  else if (v55)
  {
    (*(void (**)(void))(*v55 + 40))();
  }
  if (v53 == v52)
  {
    (*(void (**)(void *))(v52[0] + 32))(v52);
    if ((SHIBYTE(v50) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_77;
  }
  if (v53) {
    (*(void (**)(void))(*v53 + 40))();
  }
  if (SHIBYTE(v50) < 0) {
LABEL_77:
  }
    operator delete((void *)v49);
LABEL_73:
  if (v48 == v47)
  {
    (*(void (**)(void *))(v47[0] + 32))(v47);
  }
  else if (v48)
  {
    (*(void (**)(void))(*v48 + 40))();
  }
  if (v46 == v45)
  {
    (*(void (**)(void *))(v45[0] + 32))(v45);
  }
  else if (v46)
  {
    (*(void (**)(void))(*v46 + 40))();
  }
  uint64_t result = (uint64_t)v44;
  if (v44 == v43) {
    return (*(uint64_t (**)(void *))(v43[0] + 32))(v43);
  }
  if (v44) {
    return (*(uint64_t (**)(void))(*v44 + 40))();
  }
  return result;
}

void sub_1A1B41418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)&STACK[0x390]);
  *(void *)(v80 - 224) = &STACK[0x378];
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100]((void ***)(v80 - 224));
  unint64_t v82 = STACK[0x360];
  if (STACK[0x360])
  {
    unint64_t v83 = STACK[0x368];
    long long v84 = (void *)STACK[0x360];
    if (STACK[0x368] != v82)
    {
      unint64_t v85 = STACK[0x368];
      do
      {
        long long v87 = *(void **)(v85 - 24);
        v85 -= 24;
        long long v86 = v87;
        if (v87)
        {
          *(void *)(v83 - 16) = v86;
          operator delete(v86);
        }
        unint64_t v83 = v85;
      }
      while (v85 != v82);
      long long v84 = (void *)STACK[0x360];
    }
    STACK[0x368] = v82;
    operator delete(v84);
  }
  unint64_t v88 = STACK[0x348];
  if (STACK[0x348])
  {
    uint64_t v89 = STACK[0x350];
    float32x2_t v90 = (void *)STACK[0x348];
    if (STACK[0x350] != v88)
    {
      do
      {
        v89 -= 128;
        std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v89);
      }
      while (v89 != v88);
      float32x2_t v90 = (void *)STACK[0x348];
    }
    STACK[0x350] = v88;
    operator delete(v90);
  }
  ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)&STACK[0x310]);
  *(void *)(v80 - 224) = &STACK[0x2F8];
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100]((void ***)(v80 - 224));
  unint64_t v91 = STACK[0x2E0];
  if (STACK[0x2E0])
  {
    unint64_t v92 = STACK[0x2E8];
    unint64_t v93 = (void *)STACK[0x2E0];
    if (STACK[0x2E8] != v91)
    {
      unint64_t v94 = STACK[0x2E8];
      do
      {
        unint64_t v96 = *(void **)(v94 - 24);
        v94 -= 24;
        uint64_t v95 = v96;
        if (v96)
        {
          *(void *)(v92 - 16) = v95;
          operator delete(v95);
        }
        unint64_t v92 = v94;
      }
      while (v94 != v91);
      unint64_t v93 = (void *)STACK[0x2E0];
    }
    STACK[0x2E8] = v91;
    operator delete(v93);
  }
  unint64_t v97 = STACK[0x2C8];
  if (STACK[0x2C8])
  {
    uint64_t v98 = STACK[0x2D0];
    uint64_t v99 = (void *)STACK[0x2C8];
    if (STACK[0x2D0] != v97)
    {
      do
      {
        v98 -= 128;
        std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v98);
      }
      while (v98 != v97);
      uint64_t v99 = (void *)STACK[0x2C8];
    }
    STACK[0x2D0] = v97;
    operator delete(v99);
  }
  ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)&STACK[0x290]);
  *(void *)(v80 - 224) = &STACK[0x278];
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100]((void ***)(v80 - 224));
  unint64_t v100 = STACK[0x260];
  if (STACK[0x260])
  {
    unint64_t v115 = STACK[0x268];
    unint64_t v116 = (void *)STACK[0x260];
    if (STACK[0x268] != v100)
    {
      unint64_t v117 = STACK[0x268];
      do
      {
        uint64_t v119 = *(void **)(v117 - 24);
        v117 -= 24;
        uint64_t v118 = v119;
        if (v119)
        {
          *(void *)(v115 - 16) = v118;
          operator delete(v118);
        }
        unint64_t v115 = v117;
      }
      while (v117 != v100);
      unint64_t v116 = (void *)STACK[0x260];
    }
    STACK[0x268] = v100;
    operator delete(v116);
    unint64_t v101 = STACK[0x248];
    if (!STACK[0x248])
    {
LABEL_29:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v101 = STACK[0x248];
    if (!STACK[0x248]) {
      goto LABEL_29;
    }
  }
  uint64_t v120 = STACK[0x250];
  uint64_t v121 = (void *)v101;
  if (STACK[0x250] != v101)
  {
    do
    {
      v120 -= 128;
      std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v120);
    }
    while (v120 != v101);
    uint64_t v121 = (void *)STACK[0x248];
  }
  STACK[0x250] = v101;
  operator delete(v121);
  LOBYTE(v101) = 0;
  if ((a35 & 0x80000000) == 0)
  {
LABEL_31:
    if (a29 == v75)
    {
      (*(void (**)(uint64_t))(a26 + 32))(v75);
    }
    else if (a29)
    {
      (*(void (**)(void))(*(void *)a29 + 40))();
    }
    if (a25 == v76)
    {
      (*(void (**)(uint64_t))(a22 + 32))(v76);
    }
    else if (a25)
    {
      (*(void (**)(void))(*(void *)a25 + 40))();
    }
    if (a21 == v77)
    {
      (*(void (**)(uint64_t))(a18 + 32))(v77);
    }
    else if (a21)
    {
      (*(void (**)(void))(*(void *)a21 + 40))();
    }
    if (a54 < 0) {
      operator delete(a49);
    }
    if (a48 == v79)
    {
      (*(void (**)(uint64_t))(a45 + 32))(v79);
    }
    else if (a48)
    {
      (*(void (**)(void))(*(void *)a48 + 40))();
    }
    if (a44 == a9)
    {
      (*(void (**)(void))(a41 + 32))();
    }
    else if (a44)
    {
      (*(void (**)(void))(*(void *)a44 + 40))();
    }
    if (a40 == a10)
    {
      (*(void (**)(void))(a37 + 32))();
    }
    else if (a40)
    {
      (*(void (**)(void))(*(void *)a40 + 40))();
    }
    uint64_t v102 = v78;
    if (SLOBYTE(STACK[0x23F]) < 0) {
      operator delete((void *)STACK[0x228]);
    }
    unint64_t v103 = STACK[0x220];
    if (STACK[0x220] == a11)
    {
      (*(void (**)(void))(STACK[0x208] + 32))();
    }
    else if (v103)
    {
      (*(void (**)(unint64_t))(*(void *)v103 + 40))(v103);
    }
    unint64_t v104 = STACK[0x200];
    if (STACK[0x200] == a12)
    {
      (*(void (**)(void))(a75 + 32))();
    }
    else if (v104)
    {
      (*(void (**)(unint64_t))(*(void *)v104 + 40))(v104);
    }
    if (a74 == a13)
    {
      (*(void (**)(void))(a73 + 32))();
    }
    else if (a74)
    {
      (*(void (**)(void))(*(void *)a74 + 40))();
    }
    if (a72 < 0) {
      operator delete(a68);
    }
    if (a67 == a14)
    {
      (*(void (**)(void))(a64 + 32))();
    }
    else if (a67)
    {
      (*(void (**)(void))(*(void *)a67 + 40))();
    }
    if (a63 == a15)
    {
      (*(void (**)(void))(a60 + 32))();
    }
    else if (a63)
    {
      (*(void (**)(void))(*(void *)a63 + 40))();
    }
    if (a59 == a16)
    {
      (*(void (**)(void))(a56 + 32))();
    }
    else if (a59)
    {
      (*(void (**)(void))(*(void *)a59 + 40))();
    }
    char v105 = v101 ^ 1;
    if (&STACK[0x240] == v78) {
      char v105 = 1;
    }
    if ((v105 & 1) == 0)
    {
      do
      {
        ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)v102 - 6);
        a55 = (uint64_t)(v102 - 9);
        std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100]((void ***)&a55);
        unint64_t v106 = *(v102 - 12);
        if (v106)
        {
          uint64_t v107 = *(v102 - 11);
          unint64_t v108 = (void *)*(v102 - 12);
          if (v107 != v106)
          {
            uint64_t v109 = *(v102 - 11);
            do
            {
              uint64_t v111 = *(void **)(v109 - 24);
              v109 -= 24;
              uint64_t v110 = v111;
              if (v111)
              {
                *(void *)(v107 - 16) = v110;
                operator delete(v110);
              }
              uint64_t v107 = v109;
            }
            while (v109 != v106);
            unint64_t v108 = (void *)*(v102 - 12);
          }
          *(v102 - 11) = v106;
          operator delete(v108);
        }
        unint64_t v112 = *(v102 - 15);
        if (v112)
        {
          uint64_t v113 = *(v102 - 14);
          unint64_t v114 = (void *)*(v102 - 15);
          if (v113 != v112)
          {
            do
            {
              v113 -= 128;
              std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v113);
            }
            while (v113 != v112);
            unint64_t v114 = (void *)*(v102 - 15);
          }
          *(v102 - 14) = v112;
          operator delete(v114);
        }
        v102 -= 16;
      }
      while (v102 != &STACK[0x240]);
    }
    _Unwind_Resume(a1);
  }
LABEL_30:
  operator delete(a30);
  goto LABEL_31;
}

void std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned __int8 v1 = *a1;
  __int16 v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (char *)v1[1];
  uint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_16;
  }
  uint64_t v6 = v4 - 32;
  BOOL v7 = v4 - 32;
  do
  {
    uint64_t v9 = (char *)*((void *)v7 + 3);
    if (v7 == v9)
    {
      (*(void (**)(char *))(*(void *)v7 + 32))(v7);
      uint64_t v10 = (void *)*((void *)v7 - 3);
      if (v10) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v9) {
        (*(void (**)(char *))(*(void *)v9 + 40))(v9);
      }
      uint64_t v10 = (void *)*((void *)v7 - 3);
      if (v10)
      {
LABEL_9:
        *((void *)v7 - 2) = v10;
        operator delete(v10);
      }
    }
    uint64_t v11 = (void *)*((void *)v7 - 6);
    if (v11)
    {
      *((void *)v7 - 5) = v11;
      operator delete(v11);
    }
    uint64_t v8 = v7 - 48;
    v7 -= 80;
    v6 -= 80;
  }
  while (v8 != v2);
  uint64_t v5 = **a1;
LABEL_16:
  v1[1] = v2;
  operator delete(v5);
}

void **ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor(void **a1)
{
  __int16 v2 = (void **)a1[3];
  if (v2)
  {
    uint64_t v3 = (void **)a1[4];
    uint64_t v4 = a1[3];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 7;
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        uint64_t v6 = (void **)*(v3 - 4);
        if (v3 - 7 == v6)
        {
          (*((void (**)(void **))*(v3 - 7) + 4))(v3 - 7);
        }
        else if (v6)
        {
          (*((void (**)(void **))*v6 + 5))(v6);
        }
        v3 -= 8;
        v5 -= 8;
      }
      while (v3 != v2);
      uint64_t v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  BOOL v7 = (void **)*a1;
  if (*a1)
  {
    uint64_t v8 = (void **)a1[1];
    uint64_t v9 = *a1;
    if (v8 != v7)
    {
      uint64_t v10 = v8 - 7;
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        uint64_t v11 = (void **)*(v8 - 4);
        if (v8 - 7 == v11)
        {
          (*((void (**)(void **))*(v8 - 7) + 4))(v8 - 7);
        }
        else if (v11)
        {
          (*((void (**)(void **))*v11 + 5))(v11);
        }
        v8 -= 8;
        v10 -= 8;
      }
      while (v8 != v7);
      uint64_t v9 = *a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t std::__function::__func<md::MapEngineFrameModule,std::allocator<md::MapEngineFrameModule>,ecs2::ModuleDescriptor ()(void)>::operator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  __int16 v2 = gdc::FamilyInfo<ecs2::ModuleDescriptor,unsigned short>::Counter::nextId(void)::counter++;
  *(_WORD *)a1 = v2;
  strcpy((char *)(a1 + 8), "InteractiveFrameModule");
  *(unsigned char *)(a1 + 31) = 22;
  __int16 v53 = 1;
  __int16 v85 = -20212;
  long long v86 = (void (**)(void **))&unk_1EF51A000;
  uint64_t v87 = 0;
  unint64_t v88 = (void **)&v86;
  v89[0] = &unk_1EF526D08;
  unint64_t v91 = v89;
  v92[0] = &unk_1EF526CC0;
  unint64_t v93 = v92;
  v94[23] = 21;
  strcpy(v94, "PrepareFrameForRender");
  __int16 v44 = -20212;
  uint64_t v46 = v45;
  v45[0] = &unk_1EF51A000;
  v45[1] = 0;
  v47[0] = &unk_1EF526D08;
  uint64_t v50 = v49;
  uint64_t v48 = v47;
  v49[0] = &unk_1EF526CC0;
  uint64_t v52 = *(void *)&v94[16];
  long long v51 = *(_OWORD *)"PrepareFrameForRender]";
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v54 = (char *)operator new(0x80uLL);
  uint64_t v55 = v54;
  uint64_t v3 = v54 + 128;
  uint64_t v56 = v54 + 128;
  ecs2::ExecutionTaskDescriptor::ExecutionTaskDescriptor((uint64_t)v54, (uint64_t)&v44);
  uint64_t v55 = v3;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  __int16 v63 = 28;
  __int16 v85 = 12414;
  long long v86 = (void (**)(void **))&unk_1EF519FB8;
  uint64_t v87 = 0;
  unint64_t v88 = (void **)&v86;
  v89[0] = &unk_1EF526C78;
  unint64_t v91 = v89;
  v92[0] = &unk_1EF526C30;
  unint64_t v93 = v92;
  v94[23] = 21;
  strcpy(v94, "PrepareFrameForEncode");
  __int16 v35 = 12414;
  char v37 = v36;
  v36[0] = &unk_1EF519FB8;
  v36[1] = 0;
  v38[0] = &unk_1EF526C78;
  uint64_t v41 = v40;
  long long v39 = v38;
  v40[0] = &unk_1EF526C30;
  uint64_t v43 = *(void *)&v94[16];
  long long v42 = *(_OWORD *)"PrepareFrameForEncode]";
  long long v65 = 0;
  long long v64 = 0;
  long long v66 = 0;
  long long v64 = (char *)operator new(0x80uLL);
  long long v65 = v64;
  uint64_t v4 = v64 + 128;
  long long v66 = v64 + 128;
  ecs2::ExecutionTaskDescriptor::ExecutionTaskDescriptor((uint64_t)v64, (uint64_t)&v35);
  long long v65 = v4;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  __int16 v73 = 32;
  __int16 v85 = -8552;
  long long v86 = (void (**)(void **))&unk_1EF519F28;
  uint64_t v87 = 0;
  unint64_t v88 = (void **)&v86;
  v89[0] = &unk_1EF526BE8;
  unint64_t v91 = v89;
  v92[0] = &unk_1EF526BA0;
  v94[23] = 15;
  unint64_t v93 = v92;
  strcpy(v94, "CleanupEntities");
  __int16 v26 = -8552;
  v27[0] = &unk_1EF519F28;
  v27[1] = 0;
  uint64_t v28 = v27;
  v29[0] = &unk_1EF526BE8;
  uint64_t v32 = v31;
  uint64_t v30 = v29;
  v31[0] = &unk_1EF526BA0;
  uint64_t v34 = *(void *)&v94[16];
  *(_OWORD *)std::string __p = *(_OWORD *)v94;
  uint64_t v75 = 0;
  long long v74 = 0;
  uint64_t v76 = 0;
  long long v74 = (char *)operator new(0x80uLL);
  uint64_t v75 = v74;
  uint64_t v5 = v74 + 128;
  uint64_t v76 = v74 + 128;
  ecs2::ExecutionTaskDescriptor::ExecutionTaskDescriptor((uint64_t)v74, (uint64_t)&v26);
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  uint64_t v75 = v5;
  uint64_t v81 = 0;
  __int16 v85 = -20033;
  long long v86 = (void (**)(void **))&unk_1EF519F70;
  uint64_t v87 = 0;
  unint64_t v88 = (void **)&v86;
  strcpy((char *)v89, "CleanupServices");
  char v90 = 15;
  unint64_t v83 = 0;
  unint64_t v82 = 0;
  long long v84 = 0;
  unint64_t v82 = (char *)operator new(0x40uLL);
  unint64_t v83 = v82;
  uint64_t v6 = v82 + 64;
  long long v84 = v82 + 64;
  std::construct_at[abi:nn180100]<ecs2::UtlityTaskDescriptor,ecs2::UtlityTaskDescriptor const&,ecs2::UtlityTaskDescriptor*>((uint64_t)v82, (uint64_t)&v85);
  unint64_t v83 = v6;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  BOOL v7 = (char *)operator new(0x180uLL);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v7 + 384;
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)v7, (uint64_t)&v53);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v7 + 128), (uint64_t)&v63);
  ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor((uint64_t)(v7 + 256), (uint64_t)&v73);
  uint64_t v8 = &v85;
  *(void *)(a1 + 40) = v7 + 384;
  do
  {
    ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)v8 - 6);
    long long v25 = (void **)(v8 - 36);
    std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100](&v25);
    uint64_t v10 = *((void *)v8 - 12);
    if (v10)
    {
      uint64_t v11 = *((void *)v8 - 11);
      unsigned __int8 v12 = (void *)*((void *)v8 - 12);
      if (v11 != v10)
      {
        uint64_t v13 = *((void *)v8 - 11);
        do
        {
          uint64_t v15 = *(void **)(v13 - 24);
          v13 -= 24;
          uint64_t v14 = v15;
          if (v15)
          {
            *(void *)(v11 - 16) = v14;
            operator delete(v14);
          }
          uint64_t v11 = v13;
        }
        while (v13 != v10);
        unsigned __int8 v12 = (void *)*((void *)v8 - 12);
      }
      *((void *)v8 - 11) = v10;
      operator delete(v12);
    }
    uint64_t v16 = *((void *)v8 - 15);
    if (v16)
    {
      uint64_t v17 = *((void *)v8 - 14);
      uint64_t v9 = (void *)*((void *)v8 - 15);
      if (v17 != v16)
      {
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = v17 + v18;
          if (*(char *)(v17 + v18 - 1) < 0) {
            operator delete(*(void **)(v19 - 24));
          }
          uint64_t v20 = *(void *)(v19 - 32);
          if (v19 - 56 == v20)
          {
            (*(void (**)(uint64_t))(*(void *)(v19 - 56) + 32))(v19 - 56);
          }
          else if (v20)
          {
            (*(void (**)(void))(*(void *)v20 + 40))(*(void *)(v19 - 32));
          }
          uint64_t v21 = v17 + v18 - 88;
          uint64_t v22 = *(void *)(v17 + v18 - 64);
          if (v21 == v22)
          {
            (*(void (**)(uint64_t))(*(void *)v21 + 32))(v17 + v18 - 88);
          }
          else if (v22)
          {
            (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
          }
          uint64_t v23 = *(void *)(v17 + v18 - 96);
          if (v19 - 120 == v23)
          {
            (*(void (**)(uint64_t))(*(void *)(v19 - 120) + 32))(v19 - 120);
          }
          else if (v23)
          {
            (*(void (**)(void))(*(void *)v23 + 40))(*(void *)(v17 + v18 - 96));
          }
          v18 -= 128;
        }
        while (v17 + v18 != v16);
        uint64_t v9 = (void *)*((void *)v8 - 15);
      }
      *((void *)v8 - 14) = v16;
      operator delete(v9);
    }
    v8 -= 64;
  }
  while (v8 != &v53);
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  if (v88 == (void **)&v86)
  {
    v86[4]((void **)&v86);
    if ((SHIBYTE(v34) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_41;
  }
  if (v88) {
    (*((void (**)(void **))*v88 + 5))(v88);
  }
  if (SHIBYTE(v34) < 0) {
LABEL_41:
  }
    operator delete(__p[0]);
LABEL_37:
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void))(*v32 + 40))();
  }
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void))(*v30 + 40))();
  }
  if (v28 == v27)
  {
    (*(void (**)(void *))(v27[0] + 32))(v27);
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_55;
  }
  if (v28) {
    (*(void (**)(void))(*v28 + 40))();
  }
  if (SHIBYTE(v43) < 0) {
LABEL_55:
  }
    operator delete((void *)v42);
LABEL_51:
  if (v41 == v40)
  {
    (*(void (**)(void *))(v40[0] + 32))(v40);
  }
  else if (v41)
  {
    (*(void (**)(void))(*v41 + 40))();
  }
  if (v39 == v38)
  {
    (*(void (**)(void *))(v38[0] + 32))(v38);
  }
  else if (v39)
  {
    (*(void (**)(void))(*v39 + 40))();
  }
  if (v37 == v36)
  {
    (*(void (**)(void *))(v36[0] + 32))(v36);
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_69;
  }
  if (v37) {
    (*(void (**)(void))(*v37 + 40))();
  }
  if (SHIBYTE(v52) < 0) {
LABEL_69:
  }
    operator delete((void *)v51);
LABEL_65:
  if (v50 == v49)
  {
    (*(void (**)(void *))(v49[0] + 32))(v49);
  }
  else if (v50)
  {
    (*(void (**)(void))(*v50 + 40))();
  }
  if (v48 == v47)
  {
    (*(void (**)(void *))(v47[0] + 32))(v47);
  }
  else if (v48)
  {
    (*(void (**)(void))(*v48 + 40))();
  }
  uint64_t result = (uint64_t)v46;
  if (v46 == v45) {
    return (*(uint64_t (**)(void *))(v45[0] + 32))(v45);
  }
  if (v46) {
    return (*(uint64_t (**)(void))(*v46 + 40))();
  }
  return result;
}

void sub_1A1B42F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)&STACK[0x310]);
  a16 = (uint64_t)&STACK[0x2F8];
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100]((void ***)&a16);
  unint64_t v83 = STACK[0x2E0];
  if (STACK[0x2E0])
  {
    unint64_t v84 = STACK[0x2E8];
    __int16 v85 = (void *)STACK[0x2E0];
    if (STACK[0x2E8] != v83)
    {
      unint64_t v86 = STACK[0x2E8];
      do
      {
        unint64_t v88 = *(void **)(v86 - 24);
        v86 -= 24;
        uint64_t v87 = v88;
        if (v88)
        {
          *(void *)(v84 - 16) = v87;
          operator delete(v87);
        }
        unint64_t v84 = v86;
      }
      while (v86 != v83);
      __int16 v85 = (void *)STACK[0x2E0];
    }
    STACK[0x2E8] = v83;
    operator delete(v85);
  }
  unint64_t v89 = STACK[0x2C8];
  if (STACK[0x2C8])
  {
    uint64_t v90 = STACK[0x2D0];
    unint64_t v91 = (void *)STACK[0x2C8];
    if (STACK[0x2D0] != v89)
    {
      do
      {
        v90 -= 128;
        std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v90);
      }
      while (v90 != v89);
      unint64_t v91 = (void *)STACK[0x2C8];
    }
    STACK[0x2D0] = v89;
    operator delete(v91);
  }
  ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)&STACK[0x290]);
  a16 = (uint64_t)&STACK[0x278];
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100]((void ***)&a16);
  unint64_t v92 = STACK[0x260];
  if (STACK[0x260])
  {
    unint64_t v93 = STACK[0x268];
    unint64_t v94 = (void *)STACK[0x260];
    if (STACK[0x268] != v92)
    {
      unint64_t v95 = STACK[0x268];
      do
      {
        unint64_t v97 = *(void **)(v95 - 24);
        v95 -= 24;
        unint64_t v96 = v97;
        if (v97)
        {
          *(void *)(v93 - 16) = v96;
          operator delete(v96);
        }
        unint64_t v93 = v95;
      }
      while (v95 != v92);
      unint64_t v94 = (void *)STACK[0x260];
    }
    STACK[0x268] = v92;
    operator delete(v94);
  }
  unint64_t v98 = STACK[0x248];
  if (STACK[0x248])
  {
    uint64_t v99 = STACK[0x250];
    unint64_t v100 = (void *)STACK[0x248];
    if (STACK[0x250] != v98)
    {
      do
      {
        v99 -= 128;
        std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v99);
      }
      while (v99 != v98);
      unint64_t v100 = (void *)STACK[0x248];
    }
    STACK[0x250] = v98;
    operator delete(v100);
  }
  ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)&STACK[0x210]);
  a16 = (uint64_t)&a77;
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100]((void ***)&a16);
  unint64_t v101 = a75;
  if (a75)
  {
    uint64_t v104 = a76;
    char v105 = a75;
    if ((void *)a76 != a75)
    {
      uint64_t v106 = a76;
      do
      {
        unint64_t v108 = *(void **)(v106 - 24);
        v106 -= 24;
        uint64_t v107 = v108;
        if (v108)
        {
          *(void *)(v104 - 16) = v107;
          operator delete(v107);
        }
        uint64_t v104 = v106;
      }
      while ((void *)v106 != v101);
      char v105 = a75;
    }
    a76 = (uint64_t)v101;
    operator delete(v105);
    uint64_t v102 = a73;
    if (!a73)
    {
LABEL_29:
      if ((*(char *)(v81 - 161) & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v102 = a73;
    if (!a73) {
      goto LABEL_29;
    }
  }
  uint64_t v109 = a74;
  uint64_t v110 = v102;
  if ((void *)a74 != v102)
  {
    do
    {
      v109 -= 128;
      std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v109);
    }
    while ((void *)v109 != v102);
    uint64_t v110 = a73;
  }
  a74 = (uint64_t)v102;
  operator delete(v110);
  if ((*(char *)(v81 - 161) & 0x80000000) == 0)
  {
LABEL_31:
    uint64_t v103 = *(void *)(v81 - 192);
    if (v103 == v77)
    {
      (*(void (**)(uint64_t))(*(void *)(v81 - 216) + 32))(v77);
    }
    else if (v103)
    {
      (*(void (**)(uint64_t))(*(void *)v103 + 40))(v103);
    }
    if (a35 < 0) {
      operator delete(a30);
    }
    if (a29 == v79)
    {
      (*(void (**)(uint64_t))(a26 + 32))(v79);
    }
    else if (a29)
    {
      (*(void (**)(void))(*(void *)a29 + 40))();
    }
    if (a25 == v80)
    {
      (*(void (**)(uint64_t))(a22 + 32))(v80);
    }
    else if (a25)
    {
      (*(void (**)(void))(*(void *)a25 + 40))();
    }
    if (a21 == v78)
    {
      (*(void (**)(uint64_t))(a18 + 32))(v78);
    }
    else if (a21)
    {
      (*(void (**)(void))(*(void *)a21 + 40))();
    }
    if (a54 < 0) {
      operator delete(a49);
    }
    if (a48 == a10)
    {
      (*(void (**)(void))(a45 + 32))();
    }
    else if (a48)
    {
      (*(void (**)(void))(*(void *)a48 + 40))();
    }
    if (a44 == a11)
    {
      (*(void (**)(void))(a41 + 32))();
    }
    else if (a44)
    {
      (*(void (**)(void))(*(void *)a44 + 40))();
    }
    if (a40 == a12)
    {
      (*(void (**)(void))(a37 + 32))();
    }
    else if (a40)
    {
      (*(void (**)(void))(*(void *)a40 + 40))();
    }
    if (a72 < 0) {
      operator delete(a68);
    }
    if (a67 == a13)
    {
      (*(void (**)(void))(a64 + 32))();
    }
    else if (a67)
    {
      (*(void (**)(void))(*(void *)a67 + 40))();
    }
    if (a63 == a14)
    {
      (*(void (**)(void))(a60 + 32))();
    }
    else if (a63)
    {
      (*(void (**)(void))(*(void *)a63 + 40))();
    }
    if (a59 == a15)
    {
      (*(void (**)(void))(a56 + 32))();
    }
    else if (a59)
    {
      (*(void (**)(void))(*(void *)a59 + 40))();
    }
    _Unwind_Resume(a1);
  }
LABEL_30:
  operator delete(*(void **)(v81 - 184));
  goto LABEL_31;
}

uint64_t ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  ecs2::ModuleBucketExecutionDescriptor::ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)(a1 + 8), (const ecs2::ModuleBucketExecutionDescriptor *)(a2 + 8));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v4 = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  uint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      abort();
    }
    BOOL v7 = (char *)operator new(v5 - v4);
    uint64_t v8 = 0;
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 88) = v7;
    *(void *)(a1 + 96) = &v7[64 * (v6 >> 6)];
    do
    {
      std::construct_at[abi:nn180100]<ecs2::UtlityTaskDescriptor,ecs2::UtlityTaskDescriptor&,ecs2::UtlityTaskDescriptor*>((uint64_t)&v7[v8], v4 + v8);
      v8 += 64;
    }
    while (v4 + v8 != v5);
    *(void *)(a1 + 88) = &v7[v8];
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v9 = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v11 = v10 - v9;
  if (v10 != v9)
  {
    if (v11 < 0) {
      abort();
    }
    unsigned __int8 v12 = (char *)operator new(v10 - v9);
    uint64_t v13 = 0;
    *(void *)(a1 + 104) = v12;
    *(void *)(a1 + 112) = v12;
    *(void *)(a1 + 120) = &v12[64 * (v11 >> 6)];
    do
    {
      std::construct_at[abi:nn180100]<ecs2::UtlityTaskDescriptor,ecs2::UtlityTaskDescriptor&,ecs2::UtlityTaskDescriptor*>((uint64_t)&v12[v13], v9 + v13);
      v13 += 64;
    }
    while (v9 + v13 != v10);
    *(void *)(a1 + 112) = &v12[v13];
  }
  return a1;
}

void sub_1A1B43A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<ecs2::UtlityTaskDescriptor>::~vector[abi:nn180100](v12);
  a10 = (void **)(v10 + 56);
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100](&a10);
  uint64_t v14 = *(void *)(v10 + 32);
  if (v14)
  {
    uint64_t v16 = *(void *)(v10 + 40);
    uint64_t v17 = *(void **)(v10 + 32);
    if (v16 != v14)
    {
      uint64_t v18 = *(void *)(v10 + 40);
      do
      {
        uint64_t v20 = *(void **)(v18 - 24);
        v18 -= 24;
        uint64_t v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v14);
      uint64_t v17 = *(void **)(v10 + 32);
    }
    *(void *)(v10 + 40) = v14;
    operator delete(v17);
    uint64_t v15 = *v11;
    if (!*v11) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v15 = *v11;
    if (!*v11) {
      goto LABEL_3;
    }
  }
  uint64_t v21 = *(void *)(v10 + 16);
  uint64_t v22 = v15;
  if ((void *)v21 != v15)
  {
    do
    {
      v21 -= 128;
      std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v21);
    }
    while ((void *)v21 != v15);
    uint64_t v22 = *v11;
  }
  *(void *)(v10 + 16) = v15;
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<ecs2::UtlityTaskDescriptor,ecs2::UtlityTaskDescriptor&,ecs2::UtlityTaskDescriptor*>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    if (v5 == a2 + 8)
    {
      *(void *)(a1 + 32) = v4;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32), v4);
    }
    else
    {
      *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1A1B43C78(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    _Unwind_Resume(exception_object);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:nn180100]<ecs2::UtlityTaskDescriptor,ecs2::UtlityTaskDescriptor const&,ecs2::UtlityTaskDescriptor*>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    if (v5 == a2 + 8)
    {
      *(void *)(a1 + 32) = v4;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32), v4);
    }
    else
    {
      *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1A1B43DC8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    _Unwind_Resume(exception_object);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::DetermineIfLegacy>,std::allocator<ecs2::ForwardToExecute<md::DetermineIfLegacy>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A0D8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupServices>,std::allocator<ecs2::ForwardToExecute<CleanupServices>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF519F70;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>,std::allocator<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF58F910;
  a2[1] = *(void *)(result + 8);
  return result;
}

void md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        uint64_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        uint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::ElevatedPolygonRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  long long v7 = *(void **)(a1 + 208);
  uint64_t v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  void *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *uint64_t v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::ElevatedPolygonRenderable>::disposeElements(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v29;
      uint64_t v5 = &v29;
      if (v29)
      {
        uint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            uint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        char *v4 = v8;
        if (*v28)
        {
          uint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  long long v10 = *(void **)a1;
  uint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        uint64_t v17 = (void (***)(void))(v16 + 464 * v15);
        uint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        uint64_t v19 = &v29;
        do
        {
          uint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            uint64_t v19 = (uint64_t **)v20;
          }
          uint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          uint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    __int16 v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        long long v25 = v24;
        __int16 v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        long long v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        long long v10 = v25;
      }
      while (!v12);
    }
    long long v10 = v25;
  }
  while (v25 != v11);
  long long v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      __int16 v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          __int16 v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          long long v10 = v27;
        }
        while (!v12);
      }
      long long v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A1B44278(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::HikingRenderLayer::HikingRenderLayer(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1A1B44408(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v3, 0x1020C40455D1DCFLL);
  uint64_t v5 = (uint64_t *)*((void *)v2 + 64);
  *((void *)v2 + 64) = 0;
  if (v5)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((void *)v5[15]);
    uint64_t v6 = (std::__shared_weak_count *)v5[2];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = *v5;
    uint64_t *v5 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    MEMORY[0x1A6239270](v5, 0x1020C40455D1DCFLL);
  }
  md::RoadRenderLayer::~RoadRenderLayer(v2);

  _Unwind_Resume(a1);
}

void md::RoadRenderLayer::RoadRenderLayer(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6 = a3;
  if (a4 > 6)
  {
    __int16 v8 = 2;
    LOBYTE(v7) = 21;
  }
  else
  {
    unint64_t v7 = 0x16191718151011uLL >> (8 * a4);
    __int16 v8 = word_1A29CD240[a4];
  }
  [*(id *)(a2 + 104) format];
  if (v6)
  {
    [v6 standardCommandBufferSelector];
    uint64_t v9 = v18;
  }
  else
  {
    uint64_t v9 = 0;
  }
  commandBufferLocationsForType(&v19, a4, v9);
  char v16 = v7;
  v6;
  long long v10 = operator new(2uLL);
  *long long v10 = v8;
  *(void *)a1 = &unk_1EF530C60;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v11 = v19;
  int64_t v12 = v20 - (void)v19;
  if ((const void *)v20 != v19)
  {
    if (v12 < 0) {
      abort();
    }
    uint64_t v13 = (char *)operator new(v20 - (void)v19);
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v13;
    uint64_t v14 = &v13[2 * (v12 >> 1)];
    *(void *)(a1 + 24) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 16) = v14;
  }
  *(void *)&long long v15 = v10;
  *((void *)&v15 + 1) = v10 + 1;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = v16;
  *(void *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_1A28FD220;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v15;
  *(void *)(a1 + 336) = v10 + 1;
  *(_DWORD *)(a1 + 344) = 1;
  *(void *)a1 = &unk_1EF54E688;
  *(void *)(a1 + 352) = 0;
  operator new();
}

void sub_1A1B44D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, md::RoadSharedResources **a13, void *a14)
{
  std::unique_ptr<md::RoadSharedResources>::~unique_ptr[abi:nn180100](a13);
  uint64_t v17 = *v15;
  if (*v15)
  {
    v14[53] = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void **)(v14 + 46);
  uint64_t v19 = (void *)v14[49];
  if (v19)
  {
    v14[50] = v19;
    operator delete(v19);
  }
  long long v20 = *v18;
  if (*v18)
  {
    v14[47] = v20;
    operator delete(v20);
  }
  md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(v14);

  _Unwind_Resume(a1);
}

void md::RoadSharedResources::RoadSharedResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, int a7)
{
  if (a7) {
    char v10 = 15;
  }
  else {
    char v10 = 7;
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(v11 + 1448);
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 1456);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (char *)operator new(0x198uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EF587B48;
  long long v319 = *a6;
  long long v323 = a6[1];
  {
    if (v313)
    {
      {
        if (v313)
        {
          {
            {
              ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B738 = 1;
          }
          ggl::OuterShadowRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1EB321148 = &ggl::OuterShadowRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1EB321150 = 0;
          {
            ggl::OuterShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EB321180 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EB321188 = (uint64_t)ggl::OuterShadowRibbon::Style::reflection(void)::reflection;
          }
          qword_1EB321158 = (uint64_t)&ggl::OuterShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1EB321160 = xmmword_1A28FCEF0;
        }
      }
      ggl::OuterShadowRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::OuterShadowRibbon::PipelineSetup::typedReflection(void)::ref;
      ggl::OuterShadowRibbonShader::typedReflection(v313);
      qword_1EB318F50 = (uint64_t)&ggl::OuterShadowRibbonShader::typedReflection(void)::ref;
      {
        ggl::OuterShadowRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9584500 = 0;
        qword_1E9584508 = (uint64_t)"";
        dword_1E9584510 = 0;
        qword_1E9584518 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1E9584520 = 4;
      }
      qword_1EB318F58 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
      unk_1EB318F60 = 1;
      qword_1EB318F68 = 0;
      unk_1EB318F70 = 1;
      qword_1EB318F78 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1EB318F80 = 0;
      {
        ggl::OuterShadowRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        unk_1E9584470 = 0;
        qword_1E9584478 = (uint64_t)"view";
        dword_1E9584480 = 3;
        qword_1E9584488 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9584490 = xmmword_1A28FCEB0;
        qword_1E95844A0 = 1;
        unk_1E95844A8 = "transform";
        dword_1E95844B0 = 3;
        qword_1E95844B8 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
        unk_1E95844C0 = xmmword_1A28FCF70;
        qword_1E95844D0 = 2;
        unk_1E95844D8 = "style";
        dword_1E95844E0 = 3;
        qword_1E95844E8 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
        unk_1E95844F0 = 4;
      }
      qword_1EB318F88 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB318F90 = 3;
    }
  }
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  *((_DWORD *)v14 + 14) = 0;
  *((void *)v14 + 6) = 0;
  *((void *)v14 + 3) = &unk_1EF55B208;
  *((void *)v14 + 8) = &ggl::OuterShadowRibbon::PipelineState::typedReflection(void)::ref;
  *((void *)v14 + 9) = v12;
  *((void *)v14 + 10) = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v14[136] = 0;
  *(_OWORD *)(v14 + 140) = xmmword_1A28FC970;
  *(void *)(v14 + 156) = 0;
  *(void *)(v14 + 172) = 0;
  *(void *)(v14 + 164) = 0;
  v14[184] = 0;
  *(_OWORD *)(v14 + 188) = xmmword_1A28FC970;
  *(void *)(v14 + 204) = 0;
  *(void *)(v14 + 220) = 0;
  *(void *)(v14 + 212) = 0;
  v14[232] = 0;
  *(_OWORD *)(v14 + 236) = xmmword_1A28FC970;
  *(void *)(v14 + 252) = 0;
  *(void *)(v14 + 268) = 0;
  *(void *)(v14 + 260) = 0;
  *(_OWORD *)(v14 + 280) = v319;
  *(_OWORD *)(v14 + 296) = v323;
  v14[312] = 0;
  *((void *)v14 + 48) = 0;
  *((_OWORD *)v14 + 22) = 0u;
  *((_OWORD *)v14 + 23) = 0u;
  *((_OWORD *)v14 + 20) = 0u;
  *((_OWORD *)v14 + 21) = 0u;
  *((void *)v14 + 49) = 0x100000001;
  v14[400] = 0;
  v14[88] = 1;
  *(_WORD *)(v14 + 89) = v317;
  v14[91] = v318;
  *(_OWORD *)(v14 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v14 + 27) = 7;
  *((void *)v14 + 14) = 0;
  *((void *)v14 + 15) = 0;
  *((_DWORD *)v14 + 32) = 0;
  v14[132] = v10;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *((_DWORD *)v14 + 84) = 0;
  *(void *)(v14 + 329) = 0;
  int8x16_t v15 = vceqzq_s8(*(int8x16_t *)(v14 + 328));
  int16x8_t v16 = vmovl_high_s8(v15);
  int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
  v18.i64[0] = v17.u32[0];
  v18.i64[1] = v17.u32[1];
  int8x16_t v19 = v18;
  int16x8_t v20 = vmovl_s8(*(int8x8_t *)v15.i8);
  int32x4_t v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v18.i64[0] = v21.u32[0];
  v18.i64[1] = v21.u32[1];
  int8x16_t v22 = v18;
  int32x4_t v23 = vmovl_high_s16(v16);
  v18.i64[0] = v23.u32[0];
  v18.i64[1] = v23.u32[1];
  int8x16_t v24 = v18;
  int32x4_t v25 = vmovl_high_s16(v20);
  v18.i64[0] = v25.u32[0];
  v18.i64[1] = v25.u32[1];
  int8x16_t v26 = v18;
  v18.i64[0] = v17.u32[2];
  v18.i64[1] = v17.u32[3];
  int8x16_t v27 = v18;
  v18.i64[0] = v21.u32[2];
  v18.i64[1] = v21.u32[3];
  int8x16_t v28 = v18;
  v18.i64[0] = v23.u32[2];
  v18.i64[1] = v23.u32[3];
  int8x16_t v29 = v18;
  v18.i64[0] = v25.u32[2];
  v18.i64[1] = v25.u32[3];
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v18);
  int8x16_t v31 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v29);
  int8x16_t v32 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v28);
  int8x16_t v33 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v24);
  int8x16_t v34 = vceqzq_s8(*(int8x16_t *)(v14 + 344));
  int16x8_t v35 = vmovl_high_s8(v34);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v18.i64[0] = v36.u32[0];
  v18.i64[1] = v36.u32[1];
  int8x16_t v37 = v18;
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v34.i8);
  int32x4_t v39 = vmovl_s16(*(int16x4_t *)v38.i8);
  v18.i64[0] = v39.u32[0];
  v18.i64[1] = v39.u32[1];
  int8x16_t v40 = v18;
  int32x4_t v41 = vmovl_high_s16(v35);
  v18.i64[0] = v41.u32[0];
  v18.i64[1] = v41.u32[1];
  int8x16_t v42 = v18;
  int32x4_t v43 = vmovl_high_s16(v38);
  v18.i64[0] = v43.u32[0];
  v18.i64[1] = v43.u32[1];
  int8x16_t v44 = v18;
  v18.i64[0] = v36.u32[2];
  v18.i64[1] = v36.u32[3];
  int8x16_t v45 = v18;
  v18.i64[0] = v39.u32[2];
  v18.i64[1] = v39.u32[3];
  int8x16_t v46 = v18;
  v18.i64[0] = v41.u32[2];
  v18.i64[1] = v41.u32[3];
  int8x16_t v47 = v18;
  v18.i64[0] = v43.u32[2];
  v18.i64[1] = v43.u32[3];
  int8x16_t v48 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v47);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v37), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v19));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v40), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v42), v33);
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v44), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v26));
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v45), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v27));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v46), v32);
  int8x16_t v55 = vorrq_s8(v48, v31);
  int8x16_t v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v18), v30);
  int8x16_t v57 = vceqzq_s8(*(int8x16_t *)(v14 + 360));
  int16x8_t v58 = vmovl_high_s8(v57);
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
  v18.i64[0] = v59.i32[0];
  v18.i64[1] = v59.i32[1];
  int8x16_t v60 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v18);
  int8x16_t v61 = vceqzq_s8(*(int8x16_t *)(v14 + 376));
  int16x8_t v62 = vmovl_high_s8(v61);
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v62.i8);
  v18.i64[0] = v63.i32[0];
  v18.i64[1] = v63.i32[1];
  int8x16_t v64 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v18), v60), v49);
  int16x8_t v65 = vmovl_s8(*(int8x8_t *)v57.i8);
  int32x4_t v66 = vmovl_s16(*(int16x4_t *)v65.i8);
  v18.i64[0] = v66.i32[0];
  v18.i64[1] = v66.i32[1];
  int8x16_t v67 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v18);
  int16x8_t v68 = vmovl_s8(*(int8x8_t *)v61.i8);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v18.i64[0] = v69.i32[0];
  v18.i64[1] = v69.i32[1];
  int8x16_t v70 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v18), v67), v50);
  int32x4_t v71 = vmovl_high_s16(v58);
  v18.i64[0] = v71.i32[0];
  v18.i64[1] = v71.i32[1];
  int8x16_t v72 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v18);
  int32x4_t v73 = vmovl_high_s16(v62);
  v18.i64[0] = v73.i32[0];
  v18.i64[1] = v73.i32[1];
  int8x16_t v74 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v18), v72), v51);
  int32x4_t v75 = vmovl_high_s16(v65);
  v18.i64[0] = v75.i32[0];
  v18.i64[1] = v75.i32[1];
  int8x16_t v76 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v18);
  int32x4_t v77 = vmovl_high_s16(v68);
  v18.i64[0] = v77.i32[0];
  v18.i64[1] = v77.i32[1];
  int8x16_t v78 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v18), v76), v52);
  v18.i64[0] = v59.i32[2];
  v18.i64[1] = v59.i32[3];
  int8x16_t v79 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v18);
  v18.i64[0] = v63.i32[2];
  v18.i64[1] = v63.i32[3];
  int8x16_t v80 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v18), v79), v53);
  v18.i64[0] = v66.i32[2];
  v18.i64[1] = v66.i32[3];
  int8x16_t v81 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v18);
  v18.i64[0] = v69.i32[2];
  v18.i64[1] = v69.i32[3];
  int8x16_t v82 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v18), v81), v54);
  v18.i64[0] = v71.i32[2];
  v18.i64[1] = v71.i32[3];
  int8x16_t v83 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v18);
  v18.i64[0] = v73.i32[2];
  v18.i64[1] = v73.i32[3];
  int8x16_t v84 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v18), v83), v55);
  v18.i64[0] = v75.i32[2];
  v18.i64[1] = v75.i32[3];
  int8x16_t v85 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v18);
  v18.i64[0] = v77.i32[2];
  v18.i64[1] = v77.i32[3];
  *((void *)v14 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v70, v64), vorrq_s8(v78, v74)), (int64x2_t)vorrq_s8(vorrq_s8(v82, v80), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v18), v85), v56), v84))));
  *((void *)v14 + 3) = &unk_1EF55EC08;
  v14[312] = 1;
  unint64_t v86 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v14 + 24;
  *(void *)(a1 + 32) = v14;
  if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v87 = *(void *)(a2 + 80);
  uint64_t v88 = *(void *)(v87 + 1352);
  unint64_t v89 = *(std::__shared_weak_count **)(v87 + 1360);
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v90 = (char *)operator new(0x198uLL);
  *((void *)v90 + 1) = 0;
  *((void *)v90 + 2) = 0;
  *(void *)uint64_t v90 = &unk_1EF588F30;
  long long v320 = *a6;
  long long v324 = a6[1];
  {
    if (v314)
    {
      {
        if (v314)
        {
          {
            {
              ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B738 = 1;
          }
          ggl::Line::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
          unk_1EB323920 = &ggl::Line::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1EB323928 = 0;
          {
            ggl::Line::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EB323958 = ggl::Line::Style::reflection(void)::reflection;
          }
          qword_1EB323930 = (uint64_t)&ggl::Line::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1EB323938 = xmmword_1A28FCED0;
        }
      }
      ggl::Line::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Line::BasePipelineSetup::typedReflection(void)::ref;
      ggl::LineShader::typedReflection(v314);
      qword_1EB319A68 = (uint64_t)&ggl::LineShader::typedReflection(void)::ref;
      {
        ggl::Line::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9588318 = 0;
        qword_1E9588320 = (uint64_t)"";
        dword_1E9588328 = 0;
        qword_1E9588330 = (uint64_t)&ggl::Line::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1E9588338 = 4;
      }
      qword_1EB319A70 = (uint64_t)&ggl::Line::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319A78 = 1;
      qword_1EB319A80 = 0;
      unk_1EB319A88 = 0;
      qword_1EB319A90 = (uint64_t)&ggl::Line::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1EB319A98 = 0;
      {
        ggl::Line::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E95882B8 = 0;
        qword_1E95882C0 = (uint64_t)"view";
        dword_1E95882C8 = 3;
        qword_1E95882D0 = (uint64_t)&ggl::Line::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1E95882D8 = xmmword_1A28FCEB0;
        qword_1E95882E8 = 1;
        unk_1E95882F0 = "style";
        dword_1E95882F8 = 3;
        qword_1E9588300 = (uint64_t)&ggl::Line::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1E9588308 = 1;
      }
      qword_1EB319AA0 = (uint64_t)&ggl::Line::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB319AA8 = 2;
    }
  }
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v90 + 4) = 0;
  *((void *)v90 + 5) = 0;
  *((_DWORD *)v90 + 14) = 0;
  *((void *)v90 + 6) = 0;
  *((void *)v90 + 3) = &unk_1EF55B208;
  *((void *)v90 + 8) = &ggl::Line::BasePipelineState::typedReflection(void)::ref;
  *((void *)v90 + 9) = v88;
  *((void *)v90 + 10) = v89;
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v90[136] = 0;
  *(_OWORD *)(v90 + 140) = xmmword_1A28FC970;
  *(void *)(v90 + 156) = 0;
  *(void *)(v90 + 172) = 0;
  *(void *)(v90 + 164) = 0;
  v90[184] = 0;
  *(_OWORD *)(v90 + 188) = xmmword_1A28FC970;
  *(void *)(v90 + 204) = 0;
  *(void *)(v90 + 220) = 0;
  *(void *)(v90 + 212) = 0;
  v90[232] = 0;
  *(_OWORD *)(v90 + 236) = xmmword_1A28FC970;
  *(void *)(v90 + 252) = 0;
  *(void *)(v90 + 268) = 0;
  *(void *)(v90 + 260) = 0;
  *(_OWORD *)(v90 + 280) = v320;
  *(_OWORD *)(v90 + 296) = v324;
  v90[312] = 0;
  *((void *)v90 + 48) = 0;
  *((_OWORD *)v90 + 22) = 0u;
  *((_OWORD *)v90 + 23) = 0u;
  *((_OWORD *)v90 + 20) = 0u;
  *((_OWORD *)v90 + 21) = 0u;
  *((void *)v90 + 49) = 0x100000001;
  v90[400] = 0;
  v90[88] = 1;
  *(_WORD *)(v90 + 89) = v317;
  v90[91] = v318;
  *(_OWORD *)(v90 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v90 + 27) = 7;
  *((void *)v90 + 14) = 0;
  *((void *)v90 + 15) = 0;
  *((_DWORD *)v90 + 32) = 0;
  v90[132] = v10;
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  *((_DWORD *)v90 + 84) = 0;
  *(void *)(v90 + 329) = 0;
  int8x16_t v91 = vceqzq_s8(*(int8x16_t *)(v90 + 328));
  int16x8_t v92 = vmovl_high_s8(v91);
  int32x4_t v93 = vmovl_s16(*(int16x4_t *)v92.i8);
  v94.i64[0] = v93.u32[0];
  v94.i64[1] = v93.u32[1];
  int8x16_t v95 = v94;
  int16x8_t v96 = vmovl_s8(*(int8x8_t *)v91.i8);
  int32x4_t v97 = vmovl_s16(*(int16x4_t *)v96.i8);
  v94.i64[0] = v97.u32[0];
  v94.i64[1] = v97.u32[1];
  int8x16_t v98 = v94;
  int32x4_t v99 = vmovl_high_s16(v92);
  v94.i64[0] = v99.u32[0];
  v94.i64[1] = v99.u32[1];
  int8x16_t v100 = v94;
  int32x4_t v101 = vmovl_high_s16(v96);
  v94.i64[0] = v101.u32[0];
  v94.i64[1] = v101.u32[1];
  int8x16_t v102 = v94;
  v94.i64[0] = v93.u32[2];
  v94.i64[1] = v93.u32[3];
  int8x16_t v103 = v94;
  v94.i64[0] = v97.u32[2];
  v94.i64[1] = v97.u32[3];
  int8x16_t v104 = v94;
  v94.i64[0] = v99.u32[2];
  v94.i64[1] = v99.u32[3];
  int8x16_t v105 = v94;
  v94.i64[0] = v101.u32[2];
  v94.i64[1] = v101.u32[3];
  int8x16_t v106 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v94);
  int8x16_t v107 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v105);
  int8x16_t v108 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v104);
  int8x16_t v109 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v100);
  int8x16_t v110 = vceqzq_s8(*(int8x16_t *)(v90 + 344));
  int16x8_t v111 = vmovl_high_s8(v110);
  int32x4_t v112 = vmovl_s16(*(int16x4_t *)v111.i8);
  v94.i64[0] = v112.u32[0];
  v94.i64[1] = v112.u32[1];
  int8x16_t v113 = v94;
  int16x8_t v114 = vmovl_s8(*(int8x8_t *)v110.i8);
  int32x4_t v115 = vmovl_s16(*(int16x4_t *)v114.i8);
  v94.i64[0] = v115.u32[0];
  v94.i64[1] = v115.u32[1];
  int8x16_t v116 = v94;
  int32x4_t v117 = vmovl_high_s16(v111);
  v94.i64[0] = v117.u32[0];
  v94.i64[1] = v117.u32[1];
  int8x16_t v118 = v94;
  int32x4_t v119 = vmovl_high_s16(v114);
  v94.i64[0] = v119.u32[0];
  v94.i64[1] = v119.u32[1];
  int8x16_t v120 = v94;
  v94.i64[0] = v112.u32[2];
  v94.i64[1] = v112.u32[3];
  int8x16_t v121 = v94;
  v94.i64[0] = v115.u32[2];
  v94.i64[1] = v115.u32[3];
  int8x16_t v122 = v94;
  v94.i64[0] = v117.u32[2];
  v94.i64[1] = v117.u32[3];
  int8x16_t v123 = v94;
  v94.i64[0] = v119.u32[2];
  v94.i64[1] = v119.u32[3];
  int8x16_t v124 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v123);
  int8x16_t v125 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v113), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v95));
  int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v116), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v98));
  int8x16_t v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v118), v109);
  int8x16_t v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v120), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v102));
  int8x16_t v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v121), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v103));
  int8x16_t v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v122), v108);
  int8x16_t v131 = vorrq_s8(v124, v107);
  int8x16_t v132 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v94), v106);
  int8x16_t v133 = vceqzq_s8(*(int8x16_t *)(v90 + 360));
  int16x8_t v134 = vmovl_s8(*(int8x8_t *)v133.i8);
  int32x4_t v135 = vmovl_high_s16(v134);
  int16x8_t v136 = vmovl_high_s8(v133);
  int32x4_t v137 = vmovl_high_s16(v136);
  int32x4_t v138 = vmovl_s16(*(int16x4_t *)v134.i8);
  int32x4_t v139 = vmovl_s16(*(int16x4_t *)v136.i8);
  v94.i64[0] = v138.i32[0];
  v94.i64[1] = v138.i32[1];
  int8x16_t v140 = v94;
  v94.i64[0] = v139.i32[0];
  v94.i64[1] = v139.i32[1];
  int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v94);
  int8x16_t v142 = vceqzq_s8(*(int8x16_t *)(v90 + 376));
  int16x8_t v143 = vmovl_high_s8(v142);
  int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
  v94.i64[0] = v144.i32[0];
  v94.i64[1] = v144.i32[1];
  int16x8_t v145 = vmovl_s8(*(int8x8_t *)v142.i8);
  int32x4_t v146 = vmovl_s16(*(int16x4_t *)v145.i8);
  int8x16_t v147 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v94), v141), v125);
  v94.i64[0] = v146.i32[0];
  v94.i64[1] = v146.i32[1];
  int8x16_t v148 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v94), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140));
  v94.i64[0] = v137.i32[0];
  v94.i64[1] = v137.i32[1];
  int8x16_t v149 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v94);
  int32x4_t v150 = vmovl_high_s16(v143);
  int8x16_t v151 = vorrq_s8(v148, v126);
  v94.i64[0] = v150.i32[0];
  v94.i64[1] = v150.i32[1];
  int8x16_t v152 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v94), v149);
  v94.i64[0] = v135.i32[0];
  v94.i64[1] = v135.i32[1];
  int8x16_t v153 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v94);
  int32x4_t v154 = vmovl_high_s16(v145);
  v94.i64[0] = v154.i32[0];
  v94.i64[1] = v154.i32[1];
  int8x16_t v155 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v94), v153), v128);
  v94.i64[0] = v139.i32[2];
  v94.i64[1] = v139.i32[3];
  int8x16_t v156 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v94);
  v94.i64[0] = v144.i32[2];
  v94.i64[1] = v144.i32[3];
  int8x16_t v157 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v94), v156), v129);
  v94.i64[0] = v138.i32[2];
  v94.i64[1] = v138.i32[3];
  int8x16_t v158 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v94);
  v94.i64[0] = v146.i32[2];
  v94.i64[1] = v146.i32[3];
  int8x16_t v159 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v94), v158), v130);
  v94.i64[0] = v137.i32[2];
  v94.i64[1] = v137.i32[3];
  int8x16_t v160 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v94);
  v94.i64[0] = v150.i32[2];
  v94.i64[1] = v150.i32[3];
  int8x16_t v161 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v94), v160), v131);
  v94.i64[0] = v135.i32[2];
  v94.i64[1] = v135.i32[3];
  int8x16_t v162 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v94);
  v94.i64[0] = v154.i32[2];
  v94.i64[1] = v154.i32[3];
  *((void *)v90 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v151, v147), vorrq_s8(v155, vorrq_s8(v152, v127))), (int64x2_t)vorrq_s8(vorrq_s8(v159, v157), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v94), v162), v132), v161))));
  *((void *)v90 + 3) = &unk_1EF560690;
  v90[312] = 1;
  uint64_t v163 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v90 + 24;
  *(void *)(a1 + 16) = v90;
  if (v163 && !atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
    std::__shared_weak_count::__release_weak(v163);
  }
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  uint64_t v164 = *(void *)(a2 + 80);
  uint64_t v165 = *(void *)(v164 + 2984);
  uint64_t v166 = *(std::__shared_weak_count **)(v164 + 2992);
  if (v166) {
    atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v167 = (char *)operator new(0x198uLL);
  *((void *)v167 + 1) = 0;
  *((void *)v167 + 2) = 0;
  *(void *)float v167 = &unk_1EF5883D0;
  long long v321 = *a6;
  long long v325 = a6[1];
  {
    if (v315)
    {
      {
        if (v315)
        {
          {
            {
              ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B738 = 1;
          }
          ggl::TexturedSolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
          unk_1EB3219E0 = &ggl::TexturedSolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1EB3219E8 = 0;
          {
            ggl::TexturedSolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1EB321A18 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EB321A20 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
            unk_1EB321A28 = ggl::OffsetRibbon::Noise::reflection(void)::reflection;
          }
          qword_1EB3219F0 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1EB3219F8 = xmmword_1A28FC860;
        }
      }
      ggl::TexturedSolidRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TexturedSolidRibbon::PipelineSetup::typedReflection(void)::ref;
      ggl::TexturedSolidRibbonShader::typedReflection(v315);
      qword_1EB3191F8 = (uint64_t)&ggl::TexturedSolidRibbonShader::typedReflection(void)::ref;
      {
        ggl::TexturedSolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9585BD8 = 0;
        qword_1E9585BE0 = (uint64_t)"";
        dword_1E9585BE8 = 0;
        qword_1E9585BF0 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1E9585BF8 = 4;
      }
      qword_1EB319200 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319208 = 1;
      qword_1EB319210 = 0;
      unk_1EB319218 = 2;
      qword_1EB319220 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1EB319228 = 0;
      {
        ggl::TexturedSolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9585B18 = 0;
        qword_1E9585B20 = (uint64_t)"view";
        dword_1E9585B28 = 3;
        qword_1E9585B30 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
        unk_1E9585B38 = xmmword_1A28FCEB0;
        qword_1E9585B48 = 1;
        unk_1E9585B50 = "transform";
        dword_1E9585B58 = 3;
        qword_1E9585B60 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
        unk_1E9585B68 = xmmword_1A28FCF70;
        qword_1E9585B78 = 2;
        unk_1E9585B80 = "style";
        dword_1E9585B88 = 3;
        qword_1E9585B90 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
        unk_1E9585B98 = xmmword_1A28FD1E0;
        qword_1E9585BA8 = 3;
        unk_1E9585BB0 = "noise";
        dword_1E9585BB8 = 3;
        qword_1E9585BC0 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantNoiseBinding(void)::reflection;
        unk_1E9585BC8 = 1;
      }
      qword_1EB319230 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB319238 = 4;
    }
  }
  if (v166) {
    atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v167 + 4) = 0;
  *((void *)v167 + 5) = 0;
  *((_DWORD *)v167 + 14) = 0;
  *((void *)v167 + 6) = 0;
  *((void *)v167 + 3) = &unk_1EF55B208;
  *((void *)v167 + 8) = &ggl::TexturedSolidRibbon::PipelineState::typedReflection(void)::ref;
  *((void *)v167 + 9) = v165;
  *((void *)v167 + 10) = v166;
  if (v166) {
    atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v167[136] = 0;
  *(_OWORD *)(v167 + 140) = xmmword_1A28FC970;
  *(void *)(v167 + 156) = 0;
  *(void *)(v167 + 172) = 0;
  *(void *)(v167 + 164) = 0;
  v167[184] = 0;
  *(_OWORD *)(v167 + 188) = xmmword_1A28FC970;
  *(void *)(v167 + 204) = 0;
  *(void *)(v167 + 220) = 0;
  *(void *)(v167 + 212) = 0;
  v167[232] = 0;
  *(_OWORD *)(v167 + 236) = xmmword_1A28FC970;
  *(void *)(v167 + 252) = 0;
  *(void *)(v167 + 268) = 0;
  *(void *)(v167 + 260) = 0;
  *(_OWORD *)(v167 + 280) = v321;
  *(_OWORD *)(v167 + 296) = v325;
  v167[312] = 0;
  *((void *)v167 + 48) = 0;
  *((_OWORD *)v167 + 22) = 0u;
  *((_OWORD *)v167 + 23) = 0u;
  *((_OWORD *)v167 + 20) = 0u;
  *((_OWORD *)v167 + 21) = 0u;
  *((void *)v167 + 49) = 0x100000001;
  v167[400] = 0;
  v167[88] = 1;
  *(_WORD *)(v167 + 89) = v317;
  v167[91] = v318;
  *(_OWORD *)(v167 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v167 + 27) = 7;
  *((void *)v167 + 14) = 0;
  *((void *)v167 + 15) = 0;
  *((_DWORD *)v167 + 32) = 0;
  v167[132] = v10;
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
  }
  *((_DWORD *)v167 + 84) = 0;
  *(void *)(v167 + 329) = 0;
  int8x16_t v168 = vceqzq_s8(*(int8x16_t *)(v167 + 328));
  int16x8_t v169 = vmovl_high_s8(v168);
  int32x4_t v170 = vmovl_s16(*(int16x4_t *)v169.i8);
  v171.i64[0] = v170.u32[0];
  v171.i64[1] = v170.u32[1];
  int8x16_t v172 = v171;
  int16x8_t v173 = vmovl_s8(*(int8x8_t *)v168.i8);
  int32x4_t v174 = vmovl_s16(*(int16x4_t *)v173.i8);
  v171.i64[0] = v174.u32[0];
  v171.i64[1] = v174.u32[1];
  int8x16_t v175 = v171;
  int32x4_t v176 = vmovl_high_s16(v169);
  v171.i64[0] = v176.u32[0];
  v171.i64[1] = v176.u32[1];
  int8x16_t v177 = v171;
  int32x4_t v178 = vmovl_high_s16(v173);
  v171.i64[0] = v178.u32[0];
  v171.i64[1] = v178.u32[1];
  int8x16_t v179 = v171;
  v171.i64[0] = v170.u32[2];
  v171.i64[1] = v170.u32[3];
  int8x16_t v180 = v171;
  v171.i64[0] = v174.u32[2];
  v171.i64[1] = v174.u32[3];
  int8x16_t v181 = v171;
  v171.i64[0] = v176.u32[2];
  v171.i64[1] = v176.u32[3];
  int8x16_t v182 = v171;
  v171.i64[0] = v178.u32[2];
  v171.i64[1] = v178.u32[3];
  int8x16_t v183 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v171);
  int8x16_t v184 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v182);
  int8x16_t v185 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v181);
  int8x16_t v186 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v177);
  int8x16_t v187 = vceqzq_s8(*(int8x16_t *)(v167 + 344));
  int16x8_t v188 = vmovl_high_s8(v187);
  int32x4_t v189 = vmovl_s16(*(int16x4_t *)v188.i8);
  v171.i64[0] = v189.u32[0];
  v171.i64[1] = v189.u32[1];
  int8x16_t v190 = v171;
  int16x8_t v191 = vmovl_s8(*(int8x8_t *)v187.i8);
  int32x4_t v192 = vmovl_s16(*(int16x4_t *)v191.i8);
  v171.i64[0] = v192.u32[0];
  v171.i64[1] = v192.u32[1];
  int8x16_t v193 = v171;
  int32x4_t v194 = vmovl_high_s16(v188);
  v171.i64[0] = v194.u32[0];
  v171.i64[1] = v194.u32[1];
  int8x16_t v195 = v171;
  int32x4_t v196 = vmovl_high_s16(v191);
  v171.i64[0] = v196.u32[0];
  v171.i64[1] = v196.u32[1];
  int8x16_t v197 = v171;
  v171.i64[0] = v189.u32[2];
  v171.i64[1] = v189.u32[3];
  int8x16_t v198 = v171;
  v171.i64[0] = v192.u32[2];
  v171.i64[1] = v192.u32[3];
  int8x16_t v199 = v171;
  v171.i64[0] = v194.u32[2];
  v171.i64[1] = v194.u32[3];
  int8x16_t v200 = v171;
  v171.i64[0] = v196.u32[2];
  v171.i64[1] = v196.u32[3];
  int8x16_t v201 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v200);
  int8x16_t v202 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v190), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v172));
  int8x16_t v203 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v193), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v175));
  int8x16_t v204 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v195), v186);
  int8x16_t v205 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v197), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v179));
  int8x16_t v206 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v198), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v180));
  int8x16_t v207 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v199), v185);
  int8x16_t v208 = vorrq_s8(v201, v184);
  int8x16_t v209 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v171), v183);
  int8x16_t v210 = vceqzq_s8(*(int8x16_t *)(v167 + 360));
  int16x8_t v211 = vmovl_s8(*(int8x8_t *)v210.i8);
  int32x4_t v212 = vmovl_high_s16(v211);
  int16x8_t v213 = vmovl_high_s8(v210);
  int32x4_t v214 = vmovl_high_s16(v213);
  int32x4_t v215 = vmovl_s16(*(int16x4_t *)v211.i8);
  int32x4_t v216 = vmovl_s16(*(int16x4_t *)v213.i8);
  v171.i64[0] = v215.i32[0];
  v171.i64[1] = v215.i32[1];
  int8x16_t v217 = v171;
  v171.i64[0] = v216.i32[0];
  v171.i64[1] = v216.i32[1];
  int8x16_t v218 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v171);
  int8x16_t v219 = vceqzq_s8(*(int8x16_t *)(v167 + 376));
  int16x8_t v220 = vmovl_high_s8(v219);
  int32x4_t v221 = vmovl_s16(*(int16x4_t *)v220.i8);
  v171.i64[0] = v221.i32[0];
  v171.i64[1] = v221.i32[1];
  int16x8_t v222 = vmovl_s8(*(int8x8_t *)v219.i8);
  int32x4_t v223 = vmovl_s16(*(int16x4_t *)v222.i8);
  int8x16_t v224 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v171), v218), v202);
  v171.i64[0] = v223.i32[0];
  v171.i64[1] = v223.i32[1];
  int8x16_t v225 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v171), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v217));
  v171.i64[0] = v214.i32[0];
  v171.i64[1] = v214.i32[1];
  int8x16_t v226 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v171);
  int32x4_t v227 = vmovl_high_s16(v220);
  int8x16_t v228 = vorrq_s8(v225, v203);
  v171.i64[0] = v227.i32[0];
  v171.i64[1] = v227.i32[1];
  int8x16_t v229 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v171), v226);
  v171.i64[0] = v212.i32[0];
  v171.i64[1] = v212.i32[1];
  int8x16_t v230 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v171);
  int32x4_t v231 = vmovl_high_s16(v222);
  v171.i64[0] = v231.i32[0];
  v171.i64[1] = v231.i32[1];
  int8x16_t v232 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v171), v230), v205);
  v171.i64[0] = v216.i32[2];
  v171.i64[1] = v216.i32[3];
  int8x16_t v233 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v171);
  v171.i64[0] = v221.i32[2];
  v171.i64[1] = v221.i32[3];
  int8x16_t v234 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v171), v233), v206);
  v171.i64[0] = v215.i32[2];
  v171.i64[1] = v215.i32[3];
  int8x16_t v235 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v171);
  v171.i64[0] = v223.i32[2];
  v171.i64[1] = v223.i32[3];
  int8x16_t v236 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v171), v235), v207);
  v171.i64[0] = v214.i32[2];
  v171.i64[1] = v214.i32[3];
  int8x16_t v237 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v171);
  v171.i64[0] = v227.i32[2];
  v171.i64[1] = v227.i32[3];
  int8x16_t v238 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v171), v237), v208);
  v171.i64[0] = v212.i32[2];
  v171.i64[1] = v212.i32[3];
  int8x16_t v239 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v171);
  v171.i64[0] = v231.i32[2];
  v171.i64[1] = v231.i32[3];
  *((void *)v167 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v228, v224), vorrq_s8(v232, vorrq_s8(v229, v204))), (int64x2_t)vorrq_s8(vorrq_s8(v236, v234), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v171), v239), v209), v238))));
  *((void *)v167 + 3) = &unk_1EF55F5D8;
  v167[312] = 1;
  uint64_t v240 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v167 + 24;
  *(void *)(a1 + 64) = v167;
  if (v240 && !atomic_fetch_add(&v240->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
    std::__shared_weak_count::__release_weak(v240);
  }
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
  }
  uint64_t v241 = *(void *)(a2 + 80);
  uint64_t v242 = *(void *)(v241 + 2960);
  unint64_t v243 = *(std::__shared_weak_count **)(v241 + 2968);
  if (v243) {
    atomic_fetch_add_explicit(&v243->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int32x4_t v244 = (char *)operator new(0x198uLL);
  *((void *)v244 + 1) = 0;
  *((void *)v244 + 2) = 0;
  *(void *)int32x4_t v244 = &unk_1EF588A28;
  long long v322 = *a6;
  long long v326 = a6[1];
  {
    {
      {
        {
          ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
        unk_1EB32B738 = 1;
      }
      ggl::TexturedInnerShadowRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
      unk_1EB322C30 = &ggl::TexturedInnerShadowRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
      qword_1EB322C38 = 0;
      {
        ggl::TexturedInnerShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        *(void *)algn_1EB322C68 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1EB322C70 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
        unk_1EB322C78 = ggl::OffsetRibbon::Noise::reflection(void)::reflection;
        qword_1EB322C80 = (uint64_t)ggl::TexturedInnerShadowRibbon::ShadowStyle::reflection(void)::reflection;
      }
      qword_1EB322C40 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref;
      *(_OWORD *)algn_1EB322C48 = xmmword_1A28FD1E0;
    }
    ggl::TexturedInnerShadowRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TexturedInnerShadowRibbon::PipelineSetup::typedReflection(void)::ref;
    {
      ggl::TexturedInnerShadowRibbonShader::typedReflection(void)::ref = (uint64_t)"TexturedInnerShadowRibbonShader";
      {
        int v316 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
        qword_1EB32CD98 = (uint64_t)"TexturedInnerShadowRibbonShader";
        unk_1EB32CDA0 = ggl::texturedInnerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
        qword_1EB32CDA8 = 1;
        unk_1EB32CDB0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1EB32CDB8 = 4;
        unk_1EB32CDC0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1EB32CDC8 = 0;
        unk_1EB32CDD0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = v316;
        *(_DWORD *)algn_1EB32CD94 = 0;
        qword_1EB32CDD8 = 0;
        unk_1EB32CDE0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1EB32CDF0 = 0;
        unk_1EB32CDF8 = 0;
        qword_1EB32CDE8 = 0;
      }
      qword_1EB323588 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
      dword_1EB323590 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
      {
        qword_1EB32AB60 = 0;
        unk_1EB32AB68 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1EB32AB70 = 3;
        unk_1EB32AB78 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x17C729238;
        qword_1EB32AB80 = 0;
        unk_1EB32AB88 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1EB32AB50 = (uint64_t)"TexturedInnerShadowRibbonShader";
        unk_1EB32AB58 = 0;
        qword_1EB32AB90 = 3;
        unk_1EB32AB98 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1EB32ABA8 = 0;
        unk_1EB32ABB0 = 0;
        qword_1EB32ABA0 = 3;
      }
      qword_1EB323598 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB3235A0 = 2087883320;
      qword_1EB3235A8 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderConstants(void)::ref;
      unk_1EB3235B0 = 5;
      qword_1EB3235B8 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderTextures(void)::ref;
      unk_1EB3235C0 = 3;
      qword_1EB3235C8 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderSamplers(void)::ref;
      unk_1EB3235D0 = 3;
    }
    qword_1EB3196F8 = (uint64_t)&ggl::TexturedInnerShadowRibbonShader::typedReflection(void)::ref;
    {
      ggl::TexturedInnerShadowRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
      *(void *)algn_1E95872E8 = 0;
      qword_1E95872F0 = (uint64_t)"";
      dword_1E95872F8 = 0;
      qword_1E9587300 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
      unk_1E9587308 = 4;
    }
    qword_1EB319700 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
    *(void *)algn_1EB319708 = 1;
    qword_1EB319710 = 0;
    unk_1EB319718 = 3;
    qword_1EB319720 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
    unk_1EB319728 = 0;
    {
      ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
      *(void *)algn_1E95871F8 = 0;
      qword_1E9587200 = (uint64_t)"view";
      dword_1E9587208 = 3;
      qword_1E9587210 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
      unk_1E9587218 = xmmword_1A28FCEB0;
      qword_1E9587228 = 1;
      unk_1E9587230 = "transform";
      dword_1E9587238 = 3;
      qword_1E9587240 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
      unk_1E9587248 = xmmword_1A28FCF70;
      qword_1E9587258 = 2;
      unk_1E9587260 = "style";
      dword_1E9587268 = 3;
      qword_1E9587270 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
      unk_1E9587278 = xmmword_1A28FD1E0;
      qword_1E9587288 = 3;
      unk_1E9587290 = "noise";
      dword_1E9587298 = 3;
      qword_1E95872A0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantNoiseBinding(void)::reflection;
      unk_1E95872A8 = xmmword_1A28FC960;
      qword_1E95872B8 = 4;
      unk_1E95872C0 = "shadowStyle";
      dword_1E95872C8 = 3;
      qword_1E95872D0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantShadowStyleBinding(void)::reflection;
      unk_1E95872D8 = 2;
    }
    qword_1EB319730 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
    unk_1EB319738 = 5;
  }
  if (v243) {
    atomic_fetch_add_explicit(&v243->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v244 + 4) = 0;
  *((void *)v244 + 5) = 0;
  *((_DWORD *)v244 + 14) = 0;
  *((void *)v244 + 6) = 0;
  *((void *)v244 + 3) = &unk_1EF55B208;
  *((void *)v244 + 8) = &ggl::TexturedInnerShadowRibbon::PipelineState::typedReflection(void)::ref;
  *((void *)v244 + 9) = v242;
  *((void *)v244 + 10) = v243;
  if (v243) {
    atomic_fetch_add_explicit(&v243->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v244[136] = 0;
  *(_OWORD *)(v244 + 140) = xmmword_1A28FC970;
  *(void *)(v244 + 156) = 0;
  *(void *)(v244 + 172) = 0;
  *(void *)(v244 + 164) = 0;
  v244[184] = 0;
  *(_OWORD *)(v244 + 188) = xmmword_1A28FC970;
  *(void *)(v244 + 204) = 0;
  *(void *)(v244 + 220) = 0;
  *(void *)(v244 + 212) = 0;
  v244[232] = 0;
  *(_OWORD *)(v244 + 236) = xmmword_1A28FC970;
  *(void *)(v244 + 252) = 0;
  *(void *)(v244 + 268) = 0;
  *(void *)(v244 + 260) = 0;
  *(_OWORD *)(v244 + 280) = v322;
  *(_OWORD *)(v244 + 296) = v326;
  v244[312] = 0;
  *((void *)v244 + 48) = 0;
  *((_OWORD *)v244 + 22) = 0u;
  *((_OWORD *)v244 + 23) = 0u;
  *((_OWORD *)v244 + 20) = 0u;
  *((_OWORD *)v244 + 21) = 0u;
  *((void *)v244 + 49) = 0x100000001;
  v244[400] = 0;
  v244[88] = 1;
  *(_WORD *)(v244 + 89) = v317;
  v244[91] = v318;
  *(_OWORD *)(v244 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v244 + 27) = 7;
  *((void *)v244 + 14) = 0;
  *((void *)v244 + 15) = 0;
  *((_DWORD *)v244 + 32) = 0;
  v244[132] = v10;
  if (v243 && !atomic_fetch_add(&v243->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
    std::__shared_weak_count::__release_weak(v243);
  }
  *((_DWORD *)v244 + 84) = 0;
  *(void *)(v244 + 329) = 0;
  int8x16_t v245 = vceqzq_s8(*(int8x16_t *)(v244 + 328));
  int16x8_t v246 = vmovl_s8(*(int8x8_t *)v245.i8);
  int32x4_t v247 = vmovl_high_s16(v246);
  v248.i64[0] = v247.u32[2];
  v248.i64[1] = v247.u32[3];
  int8x16_t v249 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v248);
  int16x8_t v250 = vmovl_high_s8(v245);
  int32x4_t v251 = vmovl_high_s16(v250);
  v248.i64[0] = v251.u32[2];
  v248.i64[1] = v251.u32[3];
  int8x16_t v252 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v248);
  int32x4_t v253 = vmovl_s16(*(int16x4_t *)v246.i8);
  v248.i64[0] = v253.u32[2];
  v248.i64[1] = v253.u32[3];
  int8x16_t v254 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v248);
  int32x4_t v255 = vmovl_s16(*(int16x4_t *)v250.i8);
  v248.i64[0] = v255.u32[2];
  v248.i64[1] = v255.u32[3];
  int8x16_t v256 = vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v248);
  v248.i64[0] = v247.u32[0];
  v248.i64[1] = v247.u32[1];
  int8x16_t v257 = vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v248);
  v248.i64[0] = v251.u32[0];
  v248.i64[1] = v251.u32[1];
  int8x16_t v258 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v248);
  v248.i64[0] = v253.u32[0];
  v248.i64[1] = v253.u32[1];
  int8x16_t v259 = vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v248);
  v248.i64[0] = v255.u32[0];
  v248.i64[1] = v255.u32[1];
  int8x16_t v260 = vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v248);
  int8x16_t v261 = vceqzq_s8(*(int8x16_t *)(v244 + 344));
  int16x8_t v262 = vmovl_s8(*(int8x8_t *)v261.i8);
  int32x4_t v263 = vmovl_high_s16(v262);
  v248.i64[0] = v263.u32[2];
  v248.i64[1] = v263.u32[3];
  int8x16_t v264 = vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v248);
  int16x8_t v265 = vmovl_high_s8(v261);
  int32x4_t v266 = vmovl_high_s16(v265);
  v248.i64[0] = v266.u32[2];
  v248.i64[1] = v266.u32[3];
  int8x16_t v267 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v248);
  int32x4_t v268 = vmovl_s16(*(int16x4_t *)v262.i8);
  v248.i64[0] = v268.u32[2];
  v248.i64[1] = v268.u32[3];
  int8x16_t v269 = vbicq_s8((int8x16_t)xmmword_1A28FCA10, v248);
  int32x4_t v270 = vmovl_s16(*(int16x4_t *)v265.i8);
  v248.i64[0] = v270.u32[2];
  v248.i64[1] = v270.u32[3];
  int8x16_t v271 = vbicq_s8((int8x16_t)xmmword_1A28FCA20, v248);
  v248.i64[0] = v263.u32[0];
  v248.i64[1] = v263.u32[1];
  int8x16_t v272 = vbicq_s8((int8x16_t)xmmword_1A28FCA30, v248);
  v248.i64[0] = v266.u32[0];
  v248.i64[1] = v266.u32[1];
  int8x16_t v273 = vbicq_s8((int8x16_t)xmmword_1A28FCA40, v248);
  v248.i64[0] = v268.u32[0];
  v248.i64[1] = v268.u32[1];
  int8x16_t v274 = vbicq_s8((int8x16_t)xmmword_1A28FCA50, v248);
  v248.i64[0] = v270.u32[0];
  v248.i64[1] = v270.u32[1];
  int8x16_t v275 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v248), v260);
  int8x16_t v276 = vorrq_s8(v274, v259);
  int8x16_t v277 = vorrq_s8(v273, v258);
  int8x16_t v278 = vorrq_s8(v272, v257);
  int8x16_t v279 = vorrq_s8(v271, v256);
  int8x16_t v280 = vorrq_s8(v269, v254);
  int8x16_t v281 = vorrq_s8(v267, v252);
  int8x16_t v282 = vorrq_s8(v264, v249);
  int8x16_t v283 = vceqzq_s8(*(int8x16_t *)(v244 + 360));
  int16x8_t v284 = vmovl_s8(*(int8x8_t *)v283.i8);
  int32x4_t v285 = vmovl_high_s16(v284);
  int16x8_t v286 = vmovl_high_s8(v283);
  int32x4_t v287 = vmovl_high_s16(v286);
  int32x4_t v288 = vmovl_s16(*(int16x4_t *)v284.i8);
  int32x4_t v289 = vmovl_s16(*(int16x4_t *)v286.i8);
  v248.i64[0] = v289.i32[0];
  v248.i64[1] = v289.i32[1];
  int8x16_t v290 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v248);
  v248.i64[0] = v288.i32[0];
  v248.i64[1] = v288.i32[1];
  int8x16_t v291 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v248);
  v248.i64[0] = v287.i32[0];
  v248.i64[1] = v287.i32[1];
  int8x16_t v292 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v248);
  v248.i64[0] = v285.i32[0];
  v248.i64[1] = v285.i32[1];
  int8x16_t v293 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v248);
  v248.i64[0] = v285.i32[2];
  v248.i64[1] = v285.i32[3];
  int8x16_t v294 = v248;
  v248.i64[0] = v287.i32[2];
  v248.i64[1] = v287.i32[3];
  int8x16_t v295 = v248;
  v248.i64[0] = v288.i32[2];
  v248.i64[1] = v288.i32[3];
  int8x16_t v296 = v248;
  v248.i64[0] = v289.i32[2];
  v248.i64[1] = v289.i32[3];
  int8x16_t v297 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v248);
  int8x16_t v298 = vceqzq_s8(*(int8x16_t *)(v244 + 376));
  int16x8_t v299 = vmovl_high_s8(v298);
  int32x4_t v300 = vmovl_s16(*(int16x4_t *)v299.i8);
  int16x8_t v301 = vmovl_s8(*(int8x8_t *)v298.i8);
  int32x4_t v302 = vmovl_s16(*(int16x4_t *)v301.i8);
  int32x4_t v303 = vmovl_high_s16(v299);
  int32x4_t v304 = vmovl_high_s16(v301);
  v248.i64[0] = v304.i32[2];
  v248.i64[1] = v304.i32[3];
  int8x16_t v305 = vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v248);
  v248.i64[0] = v303.i32[2];
  v248.i64[1] = v303.i32[3];
  int8x16_t v306 = vbicq_s8((int8x16_t)xmmword_1A28FCB00, v248);
  v248.i64[0] = v302.i32[2];
  v248.i64[1] = v302.i32[3];
  int8x16_t v307 = vbicq_s8((int8x16_t)xmmword_1A28FCB10, v248);
  v248.i64[0] = v300.i32[2];
  v248.i64[1] = v300.i32[3];
  int8x16_t v308 = vbicq_s8((int8x16_t)xmmword_1A28FCB20, v248);
  v248.i64[0] = v304.i32[0];
  v248.i64[1] = v304.i32[1];
  int8x16_t v309 = vbicq_s8((int8x16_t)xmmword_1A28FCB30, v248);
  v248.i64[0] = v303.i32[0];
  v248.i64[1] = v303.i32[1];
  int8x16_t v310 = vbicq_s8((int8x16_t)xmmword_1A28FCB40, v248);
  v248.i64[0] = v302.i32[0];
  v248.i64[1] = v302.i32[1];
  int8x16_t v311 = vbicq_s8((int8x16_t)xmmword_1A28FCB50, v248);
  v248.i64[0] = v300.i32[0];
  v248.i64[1] = v300.i32[1];
  *((void *)v244 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v311, v291), v276), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v248), v290), v275)), vorrq_s8(vorrq_s8(vorrq_s8(v309, v293), v278), vorrq_s8(vorrq_s8(v310, v292), v277))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v307, vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v296)), v280), vorrq_s8(vorrq_s8(v308, v297), v279)), vorrq_s8(vorrq_s8(vorrq_s8(v305, vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v294)),
                                                v282),
                                              vorrq_s8(vorrq_s8(v306, vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v295)), v281)))));
  *((void *)v244 + 3) = &unk_1EF55FF38;
  v244[312] = 1;
  uint64_t v312 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v244 + 24;
  *(void *)(a1 + 48) = v244;
  if (v312 && !atomic_fetch_add(&v312->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
    std::__shared_weak_count::__release_weak(v312);
  }
  if (v243)
  {
    if (!atomic_fetch_add(&v243->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  operator new();
}

void sub_1A1B47A80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v9);
  if (!atomic_fetch_add(v7, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (!atomic_fetch_add(v6, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  char v10 = (std::__shared_weak_count *)*((void *)v1 + 20);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v1 + 18);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *((void *)v1 + 14);
  *((void *)v1 + 14) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)v1 + 13);
  *((void *)v1 + 13) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)v1 + 12);
  *((void *)v1 + 12) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)v1 + 11);
  *((void *)v1 + 11) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)v1 + 10);
  *((void *)v1 + 10) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *v5;
  uint64_t *v5 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  md::RoadSharedPipelineStates::~RoadSharedPipelineStates(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> &,ggl::Texture2D*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, void *a4)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = 0x100000001;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v6;
  *(void *)(a1 + 72) = 0x100000001;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = &unk_1EF562EE0;
  *(void *)(a1 + 40) = &unk_1EF562F00;
  *(void *)(a1 + 48) = "";
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 130) = 1;
  uint64_t v7 = a4[1];
  *(void *)(a1 + 136) = *a4;
  *(void *)(a1 + 144) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 16);
  if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
  return a1;
}

_WORD *commandBufferLocationsForType(void *a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 1:
      __int16 v4 = *(_WORD *)(*(void *)(a3 + 8) + 36);
      goto LABEL_7;
    case 2:
      uint64_t v5 = *(void *)(a3 + 8);
      int v6 = *(unsigned __int16 *)(v5 + 46);
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      int v7 = *(unsigned __int16 *)(v5 + 146);
      goto LABEL_10;
    case 3:
      uint64_t v8 = *(void *)(a3 + 8);
      int v6 = *(unsigned __int16 *)(v8 + 44);
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      int v7 = *(unsigned __int16 *)(v8 + 48);
      goto LABEL_10;
    case 4:
      __int16 v4 = *(_WORD *)(*(void *)(a3 + 8) + 52);
      goto LABEL_7;
    case 5:
      uint64_t v11 = *(void *)(a3 + 8);
      int v6 = *(unsigned __int16 *)(v11 + 50);
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      int v7 = *(unsigned __int16 *)(v11 + 54);
      goto LABEL_10;
    case 6:
      uint64_t v12 = *(void *)(a3 + 8);
      int v6 = *(unsigned __int16 *)(v12 + 102);
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      int v7 = *(unsigned __int16 *)(v12 + 148);
LABEL_10:
      uint64_t v13 = operator new(4uLL);
      *a1 = v13;
      *uint64_t v13 = v6 | (v7 << 16);
      uint64_t result = v13 + 1;
      break;
    default:
      __int16 v4 = *(_WORD *)(*(void *)(a3 + 8) + 34);
LABEL_7:
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      uint64_t v9 = operator new(2uLL);
      *a1 = v9;
      *uint64_t v9 = v4;
      uint64_t result = v9 + 1;
      break;
  }
  a1[1] = result;
  a1[2] = result;
  return result;
}

char *geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert(uint64_t a1, unsigned __int8 *a2)
{
  __int16 v4 = *(char **)a1;
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t result = v4;
  if (v4 != v5)
  {
    uint64_t result = v4;
    while (*a2 != *result || a2[1] != result[1])
    {
      result += 16;
      if (result == v5) {
        goto LABEL_10;
      }
    }
  }
  if (result == v5)
  {
LABEL_10:
    unint64_t v8 = *(void *)(a1 + 16);
    if ((unint64_t)v5 >= v8)
    {
      uint64_t v10 = (v5 - v4) >> 4;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60) {
        abort();
      }
      uint64_t v12 = v8 - (void)v4;
      if (v12 >> 3 > v11) {
        unint64_t v11 = v12 >> 3;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v14 = (char *)operator new(16 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = &v14[16 * v10];
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
      uint64_t v9 = v15 + 16;
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v5 - 1);
          v15 -= 16;
          v5 -= 16;
        }
        while (v5 != v4);
        __int16 v4 = *(char **)a1;
      }
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = &v14[16 * v13];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      uint64_t v9 = v5 + 16;
    }
    *(void *)(a1 + 8) = v9;
    return (char *)(v9 - 1);
  }
  return result;
}

uint64_t md::AssetLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  v97[0] = &unk_1EF56D098;
  v97[1] = a2;
  v95[0] = &unk_1EF56D0E0;
  v95[1] = a2;
  int16x8_t v96 = v95;
  int8x16_t v100 = v99;
  int8x16_t v98 = v97;
  v99[0] = &unk_1EF56D0E0;
  v99[1] = a2;
  _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEEclEv((uint64_t)v97);
  if (v96 == v95)
  {
    (*(void (**)(void *))(v95[0] + 32))(v95);
  }
  else if (v96)
  {
    (*(void (**)(void *))(*v96 + 40))(v96);
  }
  if (v98 == v97)
  {
    (*(void (**)(void *))(v97[0] + 32))(v97);
  }
  else if (v98)
  {
    (*(void (**)(void *))(*v98 + 40))(v98);
  }
  int16x8_t v68 = *(void **)a3;
  int v5 = *(_DWORD *)(*(void *)a3 + 264);
  int v6 = +[VKDebugSettings sharedSettings];
  char v67 = [v6 daVinciTintLODLevels];

  int8x16_t v81 = v85;
  int8x16_t v82 = (unint64_t *)v85;
  int8x16_t v83 = v85;
  uint64_t v84 = 4;
  int8x16_t v76 = v80;
  int32x4_t v77 = v80;
  int8x16_t v78 = v80;
  uint64_t v79 = 4;
  int32x4_t v71 = &v75;
  int8x16_t v72 = &v75;
  int32x4_t v73 = &v75;
  uint64_t v74 = 4;
  uint64_t v7 = *(void *)(a1 + 120);
  unint64_t v8 = *(int8x8_t ***)(v7 + 384);
  uint64_t v65 = a1;
  int32x4_t v66 = *(int8x8_t ***)(v7 + 392);
  if (v8 != v66)
  {
    float v9 = (float)(v5 * v5) * 4.0;
    while (1)
    {
      uint64_t v10 = *v8;
      int8x8_t v11 = (*v8)[1];
      if (!*(void *)&v11) {
        goto LABEL_35;
      }
      uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        uint64_t v13 = 0x64A448A5CD5D38DBLL;
        if (*(void *)&v11 <= 0x64A448A5CD5D38DBuLL) {
          uint64_t v13 = 0x64A448A5CD5D38DBuLL % *(void *)&v11;
        }
      }
      else
      {
        uint64_t v13 = (*(void *)&v11 - 1) & 0x64A448A5CD5D38DBLL;
      }
      uint64_t v14 = *(void **)(*(void *)v10 + 8 * v13);
      if (!v14) {
        goto LABEL_35;
      }
      uint64_t v15 = (void *)*v14;
      if (!v15) {
        goto LABEL_35;
      }
      if (v12.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v11 - 1;
        while (1)
        {
          uint64_t v18 = v15[1];
          if (v18 == 0x64A448A5CD5D38DBLL)
          {
            if (v15[2] == 0x64A448A5CD5D38DBLL) {
              goto LABEL_33;
            }
          }
          else if ((v18 & v16) != v13)
          {
            goto LABEL_35;
          }
          uint64_t v15 = (void *)*v15;
          if (!v15) {
            goto LABEL_35;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v15[1];
        if (v17 == 0x64A448A5CD5D38DBLL) {
          break;
        }
        if (v17 >= *(void *)&v11) {
          v17 %= *(void *)&v11;
        }
        if (v17 != v13) {
          goto LABEL_35;
        }
LABEL_22:
        uint64_t v15 = (void *)*v15;
        if (!v15) {
          goto LABEL_35;
        }
      }
      if (v15[2] != 0x64A448A5CD5D38DBLL) {
        goto LABEL_22;
      }
LABEL_33:
      uint64_t v19 = v15[5];
      if (*(void *)(v19 + 8) == 0x64A448A5CD5D38DBLL)
      {
        uint64_t v20 = *(void *)(v19 + 32);
        goto LABEL_36;
      }
LABEL_35:
      uint64_t v20 = 0;
LABEL_36:
      int32x4_t v21 = (void *)gdc::Registry::storage<md::components::ReferencedAssetInstance>(*v8);
      unint64_t v86 = v68;
      uint64_t v87 = (uint64_t)&v76;
      std::string __p = &v71;
      unint64_t v89 = &v81;
      uint64_t v90 = v20;
      float v91 = v9;
      int16x8_t v92 = v10;
      char v93 = v67;
      gdc::RegistryView<md::components::ReferencedAssetInstance>::traverse<md::components::ReferencedAssetInstance,md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_0,md::components::ReferencedAssetInstance>(v21, (int8x8_t **)&v86);
      int8x16_t v22 = v77;
      int32x4_t v69 = v8;
      if (v77 != v76) {
        break;
      }
LABEL_80:
      int8x16_t v57 = (unint64_t *)v81;
      int16x8_t v58 = v82;
      if (v81 != v82)
      {
        do
        {
          unint64_t v59 = *v57++;
          gdc::Registry::destroy((uint64_t)v10, v59);
        }
        while (v57 != v58);
        int8x16_t v57 = (unint64_t *)v81;
        int8x16_t v22 = v76;
      }
      int8x16_t v82 = v57;
      int32x4_t v77 = v22;
      int8x16_t v72 = (uint64_t *)v71;
      unint64_t v8 = v69 + 1;
      if (v69 + 1 == v66) {
        goto LABEL_83;
      }
    }
    unint64_t v23 = 0;
    int8x16_t v22 = v76;
    int8x16_t v70 = v10;
    while (1)
    {
      uint64_t v24 = *(void *)&v22[8 * v23];
      char v25 = *((unsigned char *)v71 + v23);
      int8x16_t v26 = (void *)gdc::Registry::storage<md::components::SubtileZone>(v10);
      uint64_t v94 = v24;
      int8x16_t v27 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v26 + 4, (uint64_t)&v94);
      if (v28) {
        break;
      }
      int8x16_t v29 = (unsigned char *)(v26[10] + (((uint64_t)v27 - v26[7]) >> 3));
      *int8x16_t v29 = v25;
      uint64_t v30 = v26[31];
      if (v29 != (unsigned char *)v26[11])
      {
        int8x16_t v31 = (void *)v26[16];
        if (v31)
        {
          while (1)
          {
            unint64_t v86 = &v94;
            uint64_t v87 = 1;
            v101[0] = v30;
            uint64_t v32 = v31[6];
            if (!v32) {
              goto LABEL_106;
            }
            (*(void (**)(uint64_t, void *, void **))(*(void *)v32 + 48))(v32, v101, &v86);
            int8x16_t v31 = (void *)*v31;
            if (!v31) {
              goto LABEL_38;
            }
          }
        }
        goto LABEL_38;
      }
LABEL_76:
      int8x16_t v55 = (void *)v26[22];
      if (v55)
      {
        while (1)
        {
          unint64_t v86 = &v94;
          uint64_t v87 = 1;
          v101[0] = v30;
          uint64_t v56 = v55[6];
          if (!v56) {
            break;
          }
          (*(void (**)(uint64_t, void *, void **))(*(void *)v56 + 48))(v56, v101, &v86);
          int8x16_t v55 = (void *)*v55;
          if (!v55) {
            goto LABEL_38;
          }
        }
LABEL_106:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
LABEL_38:
      ++v23;
      int8x16_t v22 = v76;
      if (v23 >= (v77 - (unsigned char *)v76) >> 3) {
        goto LABEL_80;
      }
    }
    int8x16_t v34 = (unsigned char *)v26[11];
    unint64_t v33 = v26[12];
    if ((unint64_t)v34 < v33)
    {
      unsigned char *v34 = v25;
      uint64_t v35 = (uint64_t)(v34 + 1);
LABEL_75:
      v26[11] = v35;
      uint64_t v30 = v26[31];
      uint64_t v10 = v70;
      goto LABEL_76;
    }
    int32x4_t v36 = (unsigned char *)v26[10];
    unint64_t v37 = v34 - v36;
    uint64_t v38 = v34 - v36 + 1;
    if (v38 < 0) {
      abort();
    }
    unint64_t v39 = v33 - (void)v36;
    if (2 * v39 > v38) {
      uint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v40 = v38;
    }
    if (v40) {
      int32x4_t v41 = (char *)operator new(v40);
    }
    else {
      int32x4_t v41 = 0;
    }
    int8x16_t v42 = &v41[v37];
    v41[v37] = v25;
    uint64_t v35 = (uint64_t)&v41[v37 + 1];
    if (v34 == v36)
    {
LABEL_73:
      v26[10] = v42;
      v26[11] = v35;
      v26[12] = &v41[v40];
      if (v34) {
        operator delete(v34);
      }
      goto LABEL_75;
    }
    if (v37 < 8 || (unint64_t)(v36 - v41) < 0x20) {
      goto LABEL_70;
    }
    if (v37 >= 0x20)
    {
      unint64_t v43 = v37 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v44 = (long long *)(v34 - 16);
      int8x16_t v45 = &v41[v37 - 16];
      unint64_t v46 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v47 = *v44;
        *((_OWORD *)v45 - 1) = *(v44 - 1);
        *(_OWORD *)int8x16_t v45 = v47;
        v44 -= 2;
        v45 -= 32;
        v46 -= 32;
      }
      while (v46);
      if (v37 == v43) {
        goto LABEL_72;
      }
      if ((v37 & 0x18) == 0)
      {
        v42 -= v43;
        v34 -= v43;
        goto LABEL_70;
      }
    }
    else
    {
      unint64_t v43 = 0;
    }
    unint64_t v48 = v43 - (v37 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v49 = &v34[-v43];
    int8x16_t v50 = &v41[&v34[-v43] - v36 - 8];
    int8x16_t v51 = (uint64_t *)(v49 - 8);
    do
    {
      uint64_t v52 = *v51--;
      *(void *)int8x16_t v50 = v52;
      v50 -= 8;
      v48 += 8;
    }
    while (v48);
    if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_72;
    }
    v42 -= v37 & 0xFFFFFFFFFFFFFFF8;
    v34 -= v37 & 0xFFFFFFFFFFFFFFF8;
LABEL_70:
    int8x16_t v53 = v42 - 1;
    do
    {
      char v54 = *--v34;
      *v53-- = v54;
    }
    while (v34 != v36);
LABEL_72:
    int8x16_t v34 = (unsigned char *)v26[10];
    int8x16_t v42 = v41;
    goto LABEL_73;
  }
LABEL_83:
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v86, (uint64_t)v68 + 120);
  LOBYTE(v94) = v89 != 0;
  uint64_t v60 = *(void *)(v65 + 120);
  v101[0] = &unk_1EF56D050;
  v101[1] = &v86;
  v101[2] = &v94;
  int8x16_t v102 = v101;
  md::RegistryManager::each(v60, (uint64_t)v101);
  if (v102 == v101)
  {
    (*(void (**)(void *))(v101[0] + 32))(v101);
    int8x16_t v61 = __p;
    if (!__p) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v102) {
    (*(void (**)(void))(*v102 + 40))();
  }
  int8x16_t v61 = __p;
  if (__p)
  {
    do
    {
LABEL_87:
      int16x8_t v62 = (void *)*v61;
      operator delete(v61);
      int8x16_t v61 = v62;
    }
    while (v62);
  }
LABEL_88:
  int32x4_t v63 = v86;
  unint64_t v86 = 0;
  if (v63) {
    operator delete(v63);
  }
  if (v71 != v73) {
    free(v71);
  }
  if (v76 != v78) {
    free(v76);
  }
  if (v81 != v83) {
    free(v81);
  }
  if (!v100) {
    goto LABEL_106;
  }
  (*(void (**)(void *))(*v100 + 48))(v100);
  uint64_t result = (uint64_t)v100;
  if (v100 == v99) {
    return (*(uint64_t (**)(void *))(v99[0] + 32))(v99);
  }
  if (v100) {
    return (*(uint64_t (**)(void))(*v100 + 40))();
  }
  return result;
}

void sub_1A1B48AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::function<void ()(gdc::Registry *)>::~function((void *)(v36 - 144));
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a36);
  if (a15 != a17) {
    free(a15);
  }
  if (a20 != a22) {
    free(a20);
  }
  if (a28 != a30) {
    free(a28);
  }
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v36 - 176));
  _Unwind_Resume(a1);
}

void gdc::RegistryView<md::components::ReferencedAssetInstance>::traverse<md::components::ReferencedAssetInstance,md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_0,md::components::ReferencedAssetInstance>(void *a1, int8x8_t **a2)
{
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)a1[7];
  int8x16_t v200 = (void *)a1[8];
  if (v2 != v200)
  {
    uint64_t v3 = (unsigned __int16 *)a1[10];
    int8x16_t v209 = a2;
    while (1)
    {
      int8x16_t v210 = v3;
      uint64_t v206 = *v2;
      float v6 = *((float *)a2 + 10);
      gdc::Registry::storage<md::components::NonTiled>(a2[6]);
      gdc::Registry::storage<md::components::SubtileZone>(v209[6]);
      a2 = v209;
      int v5 = v210;
      int8x8_t v16 = (*v209)[6];
      if (!*(void *)&v16) {
        goto LABEL_6;
      }
      unint64_t v17 = *((void *)v210 + 2);
      uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        unint64_t v19 = *((void *)v210 + 2);
        if (v17 >= *(void *)&v16) {
          unint64_t v19 = v17 % *(void *)&v16;
        }
      }
      else
      {
        unint64_t v19 = (*(void *)&v16 - 1) & v17;
      }
      int8x8_t v20 = (*v209)[5];
      int32x4_t v21 = *(void **)(*(void *)&v20 + 8 * v19);
      if (!v21) {
        goto LABEL_6;
      }
      int8x16_t v22 = (void *)*v21;
      if (!*v21) {
        goto LABEL_6;
      }
      uint64_t v23 = *(void *)&v16 - 1;
      if (v18.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v24 = v22[1];
          if (v17 == v24)
          {
            if (v22[2] == v17) {
              goto LABEL_28;
            }
          }
          else if ((v24 & v23) != v19)
          {
            goto LABEL_6;
          }
          int8x16_t v22 = (void *)*v22;
          if (!v22) {
            goto LABEL_6;
          }
        }
      }
      while (1)
      {
        unint64_t v25 = v22[1];
        if (v17 == v25) {
          break;
        }
        if (v25 >= *(void *)&v16) {
          v25 %= *(void *)&v16;
        }
        if (v25 != v19) {
          goto LABEL_6;
        }
LABEL_22:
        int8x16_t v22 = (void *)*v22;
        if (!v22) {
          goto LABEL_6;
        }
      }
      if (v22[2] != v17) {
        goto LABEL_22;
      }
LABEL_28:
      if (v18.u32[0] > 1uLL)
      {
        unint64_t v26 = *((void *)v210 + 2);
        if (v17 >= *(void *)&v16) {
          unint64_t v26 = v17 % *(void *)&v16;
        }
      }
      else
      {
        unint64_t v26 = v23 & v17;
      }
      int8x16_t v27 = *(void **)(*(void *)&v20 + 8 * v26);
      if (!v27 || (char v28 = (void *)*v27) == 0) {
LABEL_316:
      }
        abort();
      if (v18.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v29 = v28[1];
          if (v17 == v29)
          {
            if (v28[2] == v17) {
              goto LABEL_40;
            }
          }
          else if ((v29 & v23) != v26)
          {
            goto LABEL_316;
          }
          char v28 = (void *)*v28;
          if (!v28) {
            goto LABEL_316;
          }
        }
      }
      while (2)
      {
        unint64_t v31 = v28[1];
        if (v17 != v31)
        {
          if (v31 >= *(void *)&v16) {
            v31 %= *(void *)&v16;
          }
          if (v31 != v26) {
            goto LABEL_316;
          }
LABEL_44:
          char v28 = (void *)*v28;
          if (!v28) {
            goto LABEL_316;
          }
          continue;
        }
        break;
      }
      if (v28[2] != v17) {
        goto LABEL_44;
      }
LABEL_40:
      uint64_t v30 = v28[3];
      unsigned int v204 = *(unsigned __int8 *)(v30 + 304);
      if (v204 <= 0x13
        && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v30 + 432) - *(void *)(v30 + 424)) >> 3) <= *v210)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        char v67 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A1780000, v67, OS_LOG_TYPE_ERROR, "Material map index is out of range.", buf, 2u);
        }

        a2 = v209;
        goto LABEL_5;
      }
      unsigned __int8 v32 = *(unsigned char *)(v30 + 368) - 1;
      if (v209[4])
      {
        float v33 = *(float *)(v30 + 292);
        float v34 = *(float *)(v30 + 280);
        if (v33 >= v34
          && (float v35 = *(float *)(v30 + 296), v36 = *(float *)(v30 + 284), v35 >= v36)
          && *(float *)(v30 + 300) >= *(float *)(v30 + 288))
        {
          float v37 = fmaxf(v33 - v34, 0.0);
          float v38 = fmaxf(v35 - v36, 0.0);
        }
        else
        {
          float v37 = *(float *)(v30 + 448);
          float v38 = *(float *)(v30 + 452);
        }
        unsigned int v39 = (int)((float)(sqrtf((float)((float)((float)(*((float *)v210 + 9) * *((float *)v210 + 9))+ (float)(*((float *)v210 + 10) * *((float *)v210 + 10)))+ (float)(*((float *)v210 + 11) * *((float *)v210 + 11)))* (float)((float)((float)(*((float *)v210 + 6) * *((float *)v210 + 6))+ (float)(*((float *)v210 + 7) * *((float *)v210 + 7)))+ (float)(*((float *)v210 + 8) * *((float *)v210 + 8))))* (float)(v37 * v38))* v6+ 1.0);
        size_t v40 = *(void **)(v30 + 352);
        int32x4_t v41 = (void *)(v30 + 360);
        int8x16_t v42 = v40;
        if (v40 != (void *)(v30 + 360))
        {
          unint64_t v43 = 0;
          int8x16_t v44 = *(void **)(v30 + 352);
          do
          {
            int8x16_t v45 = (void *)v44[1];
            if (v45)
            {
              do
              {
                unint64_t v46 = v45;
                int8x16_t v45 = (void *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                unint64_t v46 = (void *)v44[2];
                _ZF = *v46 == (void)v44;
                int8x16_t v44 = v46;
              }
              while (!_ZF);
            }
            ++v43;
            int8x16_t v44 = v46;
          }
          while (v46 != v41);
          int8x16_t v42 = *(void **)(v30 + 352);
          do
          {
            unint64_t v48 = v43 >> 1;
            int8x16_t v49 = v42;
            if (v43 != 1)
            {
              uint64_t v51 = v43 >> 1;
              uint64_t v52 = v42;
              do
              {
                int8x16_t v53 = (void *)v52[1];
                if (v53)
                {
                  do
                  {
                    int8x16_t v49 = v53;
                    int8x16_t v53 = (void *)*v53;
                  }
                  while (v53);
                }
                else
                {
                  do
                  {
                    int8x16_t v49 = (void *)v52[2];
                    _ZF = *v49 == (void)v52;
                    uint64_t v52 = v49;
                  }
                  while (!_ZF);
                }
                uint64_t v52 = v49;
                BOOL v56 = v51-- <= 1;
              }
              while (!v56);
            }
            if (*((unsigned __int16 *)v49 + 14) <= v39)
            {
              int8x16_t v50 = (void *)v49[1];
              if (v50)
              {
                do
                {
                  int8x16_t v42 = v50;
                  int8x16_t v50 = (void *)*v50;
                }
                while (v50);
              }
              else
              {
                do
                {
                  int8x16_t v42 = (void *)v49[2];
                  _ZF = *v42 == (void)v49;
                  int8x16_t v49 = v42;
                }
                while (!_ZF);
              }
              unint64_t v48 = v43 + ~v48;
            }
            unint64_t v43 = v48;
          }
          while (v48);
        }
        if (v42 != v41)
        {
          unsigned int v54 = *((unsigned __int16 *)v42 + 13);
          unsigned int v55 = *((unsigned __int16 *)v42 + 14);
          BOOL v56 = v54 <= v39 && v55 > v39;
          if (v56)
          {
            if (v40 != v41)
            {
              unint64_t v57 = 0;
              int16x8_t v58 = *(void **)(v30 + 352);
              do
              {
                unint64_t v59 = (void *)v58[1];
                if (v59)
                {
                  do
                  {
                    uint64_t v60 = v59;
                    unint64_t v59 = (void *)*v59;
                  }
                  while (v59);
                }
                else
                {
                  do
                  {
                    uint64_t v60 = (void *)v58[2];
                    _ZF = *v60 == (void)v58;
                    int16x8_t v58 = v60;
                  }
                  while (!_ZF);
                }
                ++v57;
                int16x8_t v58 = v60;
              }
              while (v60 != v41);
              do
              {
                unint64_t v61 = v57 >> 1;
                int16x8_t v62 = v40;
                if (v57 != 1)
                {
                  uint64_t v64 = v57 >> 1;
                  uint64_t v65 = v40;
                  do
                  {
                    int32x4_t v66 = (void *)v65[1];
                    if (v66)
                    {
                      do
                      {
                        int16x8_t v62 = v66;
                        int32x4_t v66 = (void *)*v66;
                      }
                      while (v66);
                    }
                    else
                    {
                      do
                      {
                        int16x8_t v62 = (void *)v65[2];
                        _ZF = *v62 == (void)v65;
                        uint64_t v65 = v62;
                      }
                      while (!_ZF);
                    }
                    uint64_t v65 = v62;
                    BOOL v56 = v64-- <= 1;
                  }
                  while (!v56);
                }
                if (*((unsigned __int16 *)v62 + 14) <= v39)
                {
                  int32x4_t v63 = (void *)v62[1];
                  if (v63)
                  {
                    do
                    {
                      size_t v40 = v63;
                      int32x4_t v63 = (void *)*v63;
                    }
                    while (v63);
                  }
                  else
                  {
                    do
                    {
                      size_t v40 = (void *)v62[2];
                      _ZF = *v40 == (void)v62;
                      int16x8_t v62 = v40;
                    }
                    while (!_ZF);
                  }
                  unint64_t v61 = v57 + ~v61;
                }
                unint64_t v57 = v61;
              }
              while (v61);
            }
            if (v40 == v41
              || (*((unsigned __int16 *)v40 + 13) <= v39 ? (BOOL v68 = *((unsigned __int16 *)v40 + 14) > v39) : (BOOL v68 = 0),
                  !v68))
            {
              size_t v40 = (void *)(v30 + 360);
            }
            unsigned __int8 v32 = *((unsigned char *)v40 + 30);
          }
        }
      }
      int16x8_t v220 = 0;
      uint64_t v221 = 0;
      int8x16_t v219 = &v220;
      int8x16_t v197 = v2;
      uint64_t v198 = 16 * v32;
      int8x16_t v207 = v28;
      unint64_t v208 = v32;
      if (v204 >= 0x14)
      {
        uint64_t v70 = v30 + 232;
        uint64_t v69 = *(void *)(v30 + 232);
        if (v32 >= (unint64_t)((*(void *)(v70 + 8) - v69) >> 4)) {
          abort();
        }
        int32x4_t v71 = *(void ***)(v69 + 16 * v32);
        int8x16_t v72 = (unsigned __int16 **)*v71;
        std::string __p = (unsigned __int16 **)v71[1];
        if (*v71 != __p)
        {
          uint64_t v73 = 0;
          do
          {
            uint64_t v74 = *v72;
            uint64_t v75 = v72[1];
            while (v74 != v75)
            {
              int8x16_t v76 = v220;
              unsigned int v77 = *v74;
              int8x16_t v78 = &v220;
LABEL_141:
              uint64_t v79 = v78;
              if (v76)
              {
                do
                {
                  int8x16_t v78 = (uint64_t **)v76;
                  unsigned int v80 = *((unsigned __int16 *)v76 + 13);
                  if (v77 < v80)
                  {
                    int8x16_t v76 = *v78;
                    goto LABEL_141;
                  }
                  if (v80 >= v77) {
                    goto LABEL_137;
                  }
                  int8x16_t v76 = v78[1];
                }
                while (v76);
                uint64_t v79 = v78 + 1;
              }
              int8x16_t v81 = (uint64_t *)operator new(0x20uLL);
              *((_WORD *)v81 + 13) = v77;
              *int8x16_t v81 = 0;
              v81[1] = 0;
              v81[2] = (uint64_t)v78;
              uint64_t *v79 = v81;
              if (*v219)
              {
                int8x16_t v219 = (uint64_t **)*v219;
                int8x16_t v81 = *v79;
              }
              int8x16_t v82 = v220;
              _ZF = v81 == v220;
              *((unsigned char *)v81 + 24) = v81 == v220;
              if (!_ZF)
              {
                do
                {
                  uint64_t v83 = v81[2];
                  if (*(unsigned char *)(v83 + 24)) {
                    break;
                  }
                  uint64_t v84 = *(uint64_t **)(v83 + 16);
                  uint64_t v85 = *v84;
                  if (*v84 == v83)
                  {
                    uint64_t v88 = v84[1];
                    if (!v88 || (int v89 = *(unsigned __int8 *)(v88 + 24), v86 = (unsigned char *)(v88 + 24), v89))
                    {
                      if (*(uint64_t **)v83 == v81)
                      {
                        uint64_t v90 = v81[2];
                      }
                      else
                      {
                        uint64_t v90 = *(void *)(v83 + 8);
                        uint64_t v91 = *(void *)v90;
                        *(void *)(v83 + 8) = *(void *)v90;
                        if (v91)
                        {
                          *(void *)(v91 + 16) = v83;
                          uint64_t v84 = *(uint64_t **)(v83 + 16);
                        }
                        *(void *)(v90 + 16) = v84;
                        *(void *)(*(void *)(v83 + 16) + 8 * (**(void **)(v83 + 16) != v83)) = v90;
                        *(void *)uint64_t v90 = v83;
                        *(void *)(v83 + 16) = v90;
                        uint64_t v84 = *(uint64_t **)(v90 + 16);
                        uint64_t v83 = *v84;
                      }
                      *(unsigned char *)(v90 + 24) = 1;
                      *((unsigned char *)v84 + 24) = 0;
                      uint64_t v94 = *(void *)(v83 + 8);
                      *uint64_t v84 = v94;
                      if (v94) {
                        *(void *)(v94 + 16) = v84;
                      }
                      *(void *)(v83 + 16) = v84[2];
                      *(void *)(v84[2] + 8 * (*(void *)v84[2] != (void)v84)) = v83;
                      *(void *)(v83 + 8) = v84;
                      goto LABEL_135;
                    }
                  }
                  else if (!v85 || (int v87 = *(unsigned __int8 *)(v85 + 24), v86 = (unsigned char *)(v85 + 24), v87))
                  {
                    if (*(uint64_t **)v83 == v81)
                    {
                      uint64_t v92 = v81[1];
                      *(void *)uint64_t v83 = v92;
                      if (v92)
                      {
                        *(void *)(v92 + 16) = v83;
                        uint64_t v84 = *(uint64_t **)(v83 + 16);
                      }
                      v81[2] = (uint64_t)v84;
                      *(void *)(*(void *)(v83 + 16) + 8 * (**(void **)(v83 + 16) != v83)) = v81;
                      v81[1] = v83;
                      *(void *)(v83 + 16) = v81;
                      uint64_t v84 = (uint64_t *)v81[2];
                    }
                    else
                    {
                      int8x16_t v81 = (uint64_t *)v81[2];
                    }
                    *((unsigned char *)v81 + 24) = 1;
                    *((unsigned char *)v84 + 24) = 0;
                    uint64_t v83 = v84[1];
                    char v93 = *(uint64_t **)v83;
                    v84[1] = *(void *)v83;
                    if (v93) {
                      v93[2] = (uint64_t)v84;
                    }
                    *(void *)(v83 + 16) = v84[2];
                    *(void *)(v84[2] + 8 * (*(void *)v84[2] != (void)v84)) = v83;
                    *(void *)uint64_t v83 = v84;
LABEL_135:
                    v84[2] = v83;
                    break;
                  }
                  *(unsigned char *)(v83 + 24) = 1;
                  int8x16_t v81 = v84;
                  *((unsigned char *)v84 + 24) = v84 == v82;
                  unsigned char *v86 = 1;
                }
                while (v84 != v82);
              }
              uint64_t v221 = ++v73;
LABEL_137:
              ++v74;
            }
            v72 += 4;
          }
          while (v72 != __p);
        }
        goto LABEL_207;
      }
      unint64_t v95 = *(void *)(v30 + 392);
      if (!v95) {
        goto LABEL_319;
      }
      uint8x8_t v96 = (uint8x8_t)vcnt_s8((int8x8_t)v95);
      v96.i16[0] = vaddlv_u8(v96);
      if (v96.u32[0] > 1uLL)
      {
        unint64_t v97 = v32;
        if (v95 <= v32) {
          unint64_t v97 = v32 % v95;
        }
      }
      else
      {
        unint64_t v97 = (v95 - 1) & v32;
      }
      int8x16_t v98 = *(uint64_t ****)(*(void *)(v30 + 384) + 8 * v97);
      if (!v98 || (int32x4_t v99 = *v98) == 0) {
LABEL_319:
      }
        abort();
      if (v96.u32[0] < 2uLL)
      {
        unint64_t v100 = v95 - 1;
        while (1)
        {
          int8x16_t v102 = v99[1];
          if (v102 == (uint64_t *)v32)
          {
            if (*((unsigned __int8 *)v99 + 16) == v32) {
              goto LABEL_194;
            }
          }
          else if (((unint64_t)v102 & v100) != v97)
          {
            goto LABEL_319;
          }
          int32x4_t v99 = (uint64_t **)*v99;
          if (!v99) {
            goto LABEL_319;
          }
        }
      }
      while (2)
      {
        unint64_t v101 = (unint64_t)v99[1];
        if (v101 != v32)
        {
          if (v101 >= v95) {
            v101 %= v95;
          }
          if (v101 != v97) {
            goto LABEL_319;
          }
LABEL_184:
          int32x4_t v99 = (uint64_t **)*v99;
          if (!v99) {
            goto LABEL_319;
          }
          continue;
        }
        break;
      }
      if (*((unsigned __int8 *)v99 + 16) != v32) {
        goto LABEL_184;
      }
LABEL_194:
      uint64_t v103 = (unsigned __int16 *)v99[3];
      int8x16_t v104 = (unsigned __int16 *)v99[4];
      while (v103 != v104)
      {
        unsigned int v105 = *v103;
        int8x16_t v106 = v220;
        int8x16_t v107 = &v220;
LABEL_200:
        int8x16_t v108 = v107;
        if (v106)
        {
          do
          {
            int8x16_t v107 = (uint64_t **)v106;
            unsigned int v109 = *((unsigned __int16 *)v106 + 13);
            if (v105 < v109)
            {
              int8x16_t v106 = *v107;
              goto LABEL_200;
            }
            if (v109 >= v105) {
              goto LABEL_196;
            }
            int8x16_t v106 = v107[1];
          }
          while (v106);
          int8x16_t v108 = v107 + 1;
        }
        int8x16_t v110 = operator new(0x20uLL);
        v110[13] = v105;
        *(void *)int8x16_t v110 = 0;
        *((void *)v110 + 1) = 0;
        *((void *)v110 + 2) = v107;
        *int8x16_t v108 = (uint64_t *)v110;
        if (*v219)
        {
          int8x16_t v219 = (uint64_t **)*v219;
          int8x16_t v110 = *v108;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v220, (uint64_t *)v110);
        ++v221;
LABEL_196:
        ++v103;
      }
LABEL_207:
      int16x8_t v111 = v219;
      if (v219 != &v220)
      {
        uint64_t v199 = v207[3];
        int32x4_t v112 = v210;
        int8x16_t v201 = (float *)(v210 + 12);
        int8x16_t v113 = v209;
        while (1)
        {
          unint64_t v211 = *((unsigned __int16 *)v111 + 13);
          uint64_t v205 = *(void *)(v199 + 184);
          int16x8_t v114 = (int8x8_t *)v207[3];
          int8x16_t v202 = v111;
          if (v114[38].u16[0] > 0x13u)
          {
            int8x16_t v118 = v114 + 29;
            int8x8_t v117 = v114[29];
            if (v208 >= (uint64_t)(*(void *)&v118[1] - *(void *)&v117) >> 4) {
              abort();
            }
            int32x4_t v115 = (int8x8_t *)(*(void *)(*(void *)&v117 + v198) + 72);
            int8x8_t v116 = *(int8x8_t *)(*(void *)(*(void *)&v117 + v198) + 80);
            if (!*(void *)&v116)
            {
LABEL_234:
              if (!*((unsigned char *)v112 + 91)
                || md::OBBIntersectsXYAABB(v201, (float *)(v205 + 80 * *((unsigned __int16 *)v111 + 13) + 36), (float *)&xmmword_1A28FCDA0))
              {
                int8x16_t v126 = (gdc::Registry *)v209[6];
                LOBYTE(v224) = 1;
                *(_OWORD *)int32x4_t v223 = 0uLL;
                v223[15] = 1;
                __int16 v127 = *v112;
                *(int8x16_t *)buf = vextq_s8(*(int8x16_t *)(v112 + 4), *(int8x16_t *)(v112 + 4), 8uLL);
                LOWORD(v215) = v127;
                long long v216 = *(_OWORD *)v201;
                long long v217 = *(_OWORD *)(v210 + 20);
                long long v218 = *(_OWORD *)(v210 + 28);
                gdc::Registry::create(v126);
              }
              goto LABEL_290;
            }
          }
          else
          {
            int32x4_t v115 = v114 + 58;
            int8x8_t v116 = v114[59];
            if (!*(void *)&v116) {
              goto LABEL_234;
            }
          }
          uint8x8_t v119 = (uint8x8_t)vcnt_s8(v116);
          v119.i16[0] = vaddlv_u8(v119);
          if (v119.u32[0] > 1uLL)
          {
            unint64_t v120 = *((unsigned __int16 *)v111 + 13);
            if (*(void *)&v116 <= v211) {
              unint64_t v120 = v211 % *(void *)&v116;
            }
          }
          else
          {
            unint64_t v120 = (v116.i32[0] - 1) & v211;
          }
          int8x16_t v121 = *(uint64_t ****)(*(void *)v115 + 8 * v120);
          if (!v121) {
            goto LABEL_234;
          }
          int8x16_t v122 = *v121;
          if (!*v121) {
            goto LABEL_234;
          }
          uint64_t v123 = *(void *)&v116 - 1;
          if (v119.u32[0] < 2uLL)
          {
            while (1)
            {
              int8x16_t v124 = v122[1];
              if (v124 == (uint64_t *)v211)
              {
                if (*((unsigned __int16 *)v122 + 8) == v211) {
                  goto LABEL_237;
                }
              }
              else if (((unint64_t)v124 & v123) != v120)
              {
                goto LABEL_234;
              }
              int8x16_t v122 = (uint64_t **)*v122;
              if (!v122) {
                goto LABEL_234;
              }
            }
          }
          while (1)
          {
            unint64_t v125 = (unint64_t)v122[1];
            if (v125 == v211) {
              break;
            }
            if (v125 >= *(void *)&v116) {
              v125 %= *(void *)&v116;
            }
            if (v125 != v120) {
              goto LABEL_234;
            }
LABEL_229:
            int8x16_t v122 = (uint64_t **)*v122;
            if (!v122) {
              goto LABEL_234;
            }
          }
          if (*((unsigned __int16 *)v122 + 8) != v211) {
            goto LABEL_229;
          }
LABEL_237:
          if (v119.u32[0] > 1uLL)
          {
            unint64_t v128 = *((unsigned __int16 *)v111 + 13);
            if (*(void *)&v116 <= v211) {
              unint64_t v128 = v211 % *(void *)&v116;
            }
          }
          else
          {
            unint64_t v128 = (v116.i32[0] - 1) & v211;
          }
          int8x16_t v129 = *(uint64_t ****)(*(void *)v115 + 8 * v128);
          if (!v129) {
            goto LABEL_318;
          }
          int8x16_t v130 = *v129;
          if (!v130) {
            goto LABEL_318;
          }
          if (v119.u32[0] < 2uLL)
          {
            while (1)
            {
              int8x16_t v131 = v130[1];
              if (v131 == (uint64_t *)v211)
              {
                if (*((unsigned __int16 *)v130 + 8) == v211) {
                  goto LABEL_249;
                }
              }
              else if (((unint64_t)v131 & v123) != v128)
              {
                goto LABEL_318;
              }
              int8x16_t v130 = (uint64_t **)*v130;
              if (!v130) {
                goto LABEL_318;
              }
            }
          }
          while (2)
          {
            unint64_t v133 = (unint64_t)v130[1];
            if (v133 != v211)
            {
              if (v133 >= *(void *)&v116) {
                v133 %= *(void *)&v116;
              }
              if (v133 != v128) {
                goto LABEL_318;
              }
LABEL_254:
              int8x16_t v130 = (uint64_t **)*v130;
              if (!v130) {
                goto LABEL_318;
              }
              continue;
            }
            break;
          }
          if (*((unsigned __int16 *)v130 + 8) != v211) {
            goto LABEL_254;
          }
LABEL_249:
          uint64_t v132 = (char *)v130[4] - (char *)v130[3];
          if (!v132)
          {
            __pa = 0;
            int32x4_t v112 = v210;
            goto LABEL_261;
          }
          if ((0xF0F0F0F0F0F0F0F1 * (v132 >> 2)) >> 61) {
LABEL_318:
          }
            abort();
          __pa = operator new(0x8787878787878788 * (v132 >> 2));
          int8x8_t v116 = v115[1];
          int32x4_t v112 = v210;
          if (!*(void *)&v116) {
            goto LABEL_317;
          }
LABEL_261:
          uint8x8_t v134 = (uint8x8_t)vcnt_s8(v116);
          v134.i16[0] = vaddlv_u8(v134);
          if (v134.u32[0] > 1uLL)
          {
            unint64_t v135 = v211;
            if (*(void *)&v116 <= v211) {
              unint64_t v135 = v211 % *(void *)&v116;
            }
          }
          else
          {
            unint64_t v135 = (v116.i32[0] - 1) & v211;
          }
          int16x8_t v136 = *(uint64_t ****)(*(void *)v115 + 8 * v135);
          if (!v136 || (int32x4_t v137 = *v136) == 0) {
LABEL_317:
          }
            abort();
          if (v134.u32[0] < 2uLL)
          {
            uint64_t v138 = *(void *)&v116 - 1;
            while (1)
            {
              int8x16_t v140 = v137[1];
              if (v140 == (uint64_t *)v211)
              {
                if (*((unsigned __int16 *)v137 + 8) == v211) {
                  goto LABEL_280;
                }
              }
              else if (((unint64_t)v140 & v138) != v135)
              {
                goto LABEL_317;
              }
              int32x4_t v137 = (uint64_t **)*v137;
              if (!v137) {
                goto LABEL_317;
              }
            }
          }
          while (2)
          {
            unint64_t v139 = (unint64_t)v137[1];
            if (v139 != v211)
            {
              if (v139 >= *(void *)&v116) {
                v139 %= *(void *)&v116;
              }
              if (v139 != v135) {
                goto LABEL_317;
              }
LABEL_270:
              int32x4_t v137 = (uint64_t **)*v137;
              if (!v137) {
                goto LABEL_317;
              }
              continue;
            }
            break;
          }
          if (*((unsigned __int16 *)v137 + 8) != v211) {
            goto LABEL_270;
          }
LABEL_280:
          int8x16_t v141 = v137[3];
          int8x16_t v203 = v137[4];
          if (v141 == v203)
          {
            int16x8_t v173 = __pa;
          }
          else
          {
            do
            {
              v142.i64[0] = *v141;
              v15.i32[0] = *((_DWORD *)v141 + 2);
              v14.i32[0] = *((_DWORD *)v141 + 3);
              v11.i32[0] = *((_DWORD *)v141 + 4);
              v12.i32[0] = *((_DWORD *)v141 + 5);
              v9.i32[0] = *((_DWORD *)v141 + 6);
              v7.i32[0] = *((_DWORD *)v141 + 7);
              _S0 = *((float *)v141 + 13);
              float v144 = *((float *)v141 + 14);
              float v145 = *((float *)v141 + 15);
              v8.i32[0] = *((_DWORD *)v112 + 14);
              *(int32x2_t *)v146.f32 = vrev64_s32(*(int32x2_t *)v141);
              v146.i32[2] = v12.i32[0];
              v10.i32[0] = *((_DWORD *)v112 + 17);
              v146.i32[3] = v12.i32[0];
              _S26 = HIDWORD(*v141);
              float32x2_t v148 = *(float32x2_t *)(v112 + 12);
              v142.i32[2] = v11.i32[0];
              v142.i32[3] = v11.i32[0];
              _Q19 = *((float32x4_t *)v112 + 2);
              v13.i64[0] = *((void *)v112 + 6);
              __asm { FMLA            S18, S26, V19.S[1] }
              float v154 = vmlas_n_f32(_S18, *(float *)v15.i32, *(float *)v13.i32);
              v15.i32[1] = v9.i32[0];
              float32x4_t v155 = (float32x4_t)vzip1q_s32((int32x4_t)v15, (int32x4_t)v15);
              v15.i64[0] = *(void *)(v112 + 30);
              v14.i32[1] = v7.i32[0];
              int32x4_t v156 = vuzp2q_s32((int32x4_t)v13, vzip1q_s32((int32x4_t)v13, (int32x4_t)v13));
              float32x4_t v157 = (float32x4_t)v156;
              v157.i32[1] = v8.i32[0];
              v157.i32[3] = v156.i32[0];
              int32x4_t v158 = vuzp2q_s32((int32x4_t)v15, vzip1q_s32((int32x4_t)v15, (int32x4_t)v15));
              float32x4_t v159 = (float32x4_t)v158;
              v159.i32[1] = v10.i32[0];
              v159.i32[3] = v158.i32[0];
              v12.i32[1] = *((_DWORD *)v141 + 8);
              v11.i32[1] = *((_DWORD *)v141 + 9);
              v9.i32[1] = *((_DWORD *)v141 + 10);
              v7.i32[1] = *((_DWORD *)v141 + 11);
              float32x4_t v160 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q19, (int32x4_t)_Q19), (int8x16_t)_Q19, 0xCuLL);
              v160.i32[3] = v160.i32[0];
              v161.i32[0] = vdup_lane_s32((int32x2_t)v148, 1).u32[0];
              v161.i32[1] = _Q19.i32[3];
              v161.i64[1] = __PAIR64__(v161.u32[0], v148.u32[0]);
              *(float32x2_t *)&v223[36] = vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(v148, *((float *)v141 + 12)), (float32x2_t)vext_s8(*(int8x8_t *)_Q19.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL), 4uLL), _S0), *(float32x2_t *)v13.i8, v144), *(float32x2_t *)v15.i8, v145);
              float32x4_t v162 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v161, v142), v146, v160), v155, v157), (float32x4_t)vzip1q_s32(v14, v14), v159);
              float32x4_t v163 = _Q19;
              *(float32x2_t *)&v163.i32[1] = v148;
              *(float32x4_t *)&v223[4] = v162;
              float32x4_t v164 = vmulq_f32(v163, (float32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1), v12, 4uLL));
              float32x4_t v165 = v164;
              v165.i32[0] = v164.i32[3];
              v165.i32[3] = v164.i32[0];
              float32x4_t v166 = vmlaq_f32(v165, (float32x4_t)vzip1q_s32(v11, vdupq_lane_s32(*(int32x2_t *)v11.i8, 1)), _Q19);
              float32x4_t v167 = (float32x4_t)vextq_s8(vextq_s8(v8, v8, 4uLL), v13, 0xCuLL);
              v167.i32[3] = v167.i32[0];
              float32x4_t v168 = vmlaq_f32(v166, (float32x4_t)vzip1q_s32(v9, vdupq_lane_s32(*(int32x2_t *)v9.i8, 1)), v167);
              float32x4_t v169 = (float32x4_t)vextq_s8(vextq_s8(v10, v10, 4uLL), v15, 0xCuLL);
              v169.i32[3] = v169.i32[0];
              *(float32x4_t *)&v223[20] = vmlaq_f32(v168, (float32x4_t)vzip1q_s32(v7, vdupq_lane_s32(*(int32x2_t *)v7.i8, 1)), v169);
              __asm { FMLA            S3, S0, V19.S[3] }
              *(_DWORD *)int32x4_t v223 = vmlas_n_f32(v154, *(float *)v14.i32, *(float *)v15.i32);
              *(float *)&v223[44] = (float)(_S3 + (float)(*(float *)v8.i32 * v144)) + (float)(*(float *)v10.i32 * v145);
              if (!*((unsigned char *)v112 + 91)
                || md::OBBIntersectsXYAABB((float *)v223, (float *)(v205 + 80 * v211 + 36), (float *)&xmmword_1A28FCDA0))
              {
                int8x16_t v171 = (gdc::Registry *)v209[6];
                LOBYTE(v222) = 1;
                uint64_t v224 = 0;
                uint64_t v225 = 0x100000000000000;
                __int16 v172 = *v112;
                *(int8x16_t *)buf = vextq_s8(*(int8x16_t *)(v112 + 4), *(int8x16_t *)(v112 + 4), 8uLL);
                LOWORD(v215) = v172;
                long long v216 = *(_OWORD *)v223;
                long long v217 = *(_OWORD *)&v223[16];
                long long v218 = *(_OWORD *)&v223[32];
                gdc::Registry::create(v171);
              }
              int8x16_t v141 = (uint64_t *)((char *)v141 + 68);
            }
            while (v141 != v203);
            int16x8_t v173 = __pa;
          }
          if (v173) {
            operator delete(v173);
          }
LABEL_290:
          int32x4_t v174 = v202;
          int8x16_t v175 = v202[1];
          if (v175)
          {
            do
            {
              int32x4_t v176 = (uint64_t **)v175;
              int8x16_t v175 = (uint64_t *)*v175;
            }
            while (v175);
          }
          else
          {
            do
            {
              int32x4_t v176 = (uint64_t **)v174[2];
              _ZF = *v176 == (uint64_t *)v174;
              int32x4_t v174 = v176;
            }
            while (!_ZF);
          }
          int16x8_t v111 = v176;
          if (v176 == &v220) {
            goto LABEL_297;
          }
        }
      }
      int8x16_t v113 = v209;
LABEL_297:
      int8x16_t v177 = v113[3];
      int32x4_t v178 = (void *)*v177;
      __int16 v4 = (char *)v177[1];
      uint64_t v179 = (uint64_t)&v4[-*(void *)v177] >> 3;
      unint64_t v180 = (unint64_t)v177[3];
      if (v180 < v179 + 1) {
        break;
      }
LABEL_4:
      *(void *)__int16 v4 = v206;
      *(void *)&v177[1] += 8;
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v220);
      a2 = v209;
      uint64_t v2 = v197;
LABEL_5:
      int v5 = v210;
LABEL_6:
      uint64_t v3 = v5 + 48;
      if (++v2 == v200) {
        return;
      }
    }
    int8x16_t v181 = (void *)v177[2];
    unint64_t v182 = (1 << -(char)__clz(v180 + 1));
    if (v180 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v182 = 1;
    }
    if (v182 <= v179 + 1) {
      unint64_t v183 = v179 + 1;
    }
    else {
      unint64_t v183 = v182;
    }
    int8x16_t v184 = (char *)malloc_type_malloc(8 * v183, 0x100004000313F17uLL);
    int8x16_t v185 = v184;
    int8x16_t v186 = (uint64_t *)*v177;
    int8x16_t v187 = (char *)v177[1];
    if ((char *)*v177 != v187)
    {
      unint64_t v188 = v187 - (char *)v186 - 8;
      if (v188 < 0x18)
      {
        int32x4_t v189 = v184;
      }
      else
      {
        int32x4_t v189 = v184;
        if ((unint64_t)(v184 - (char *)v186) >= 0x20)
        {
          uint64_t v190 = (v188 >> 3) + 1;
          uint64_t v191 = 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL);
          int32x4_t v189 = &v184[v191];
          int32x4_t v192 = (long long *)(v186 + 2);
          int8x16_t v193 = v184 + 16;
          uint64_t v194 = v190 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v195 = *v192;
            *(v193 - 1) = *(v192 - 1);
            *int8x16_t v193 = v195;
            v192 += 2;
            v193 += 2;
            v194 -= 4;
          }
          while (v194);
          if (v190 == (v190 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_313;
          }
          int8x16_t v186 = (uint64_t *)((char *)v186 + v191);
        }
      }
      do
      {
        uint64_t v196 = *v186++;
        *(void *)int32x4_t v189 = v196;
        v189 += 8;
      }
      while (v186 != (uint64_t *)v187);
    }
LABEL_313:
    if (v178 != v181) {
      free(*(void **)v177);
    }
    __int16 v4 = &v185[8 * v179];
    *int8x16_t v177 = (int8x8_t)v185;
    v177[1] = (int8x8_t)v4;
    v177[3] = (int8x8_t)v183;
    goto LABEL_4;
  }
}

void sub_1A1B4C138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a69);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__1NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AssetLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "AssetLogic", "", v5, 2u);
  }
}

uint64_t md::GeometryLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 160;
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::purge((void *)(a4 + 160));
  *(void *)(a4 + 224) = v6;
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::purge((void *)(a4 + 240));
  *(void *)(a4 + 304) = a4 + 240;
  if (!*(void *)(a4 + 128))
  {
    int8x16_t v8 = operator new(0xA8uLL);
    v8[1] = 0;
    v8[2] = 0;
    *int8x16_t v8 = &unk_1EF583430;
    ggl::PolygonBase::MeshMesh::MeshMesh((ggl::PolygonBase::MeshMesh *)(v8 + 3), "/SharedPolygonUnitMesh");
    uint64_t v9 = *(void *)v8[11];
    unint64_t v10 = 6 * *(void *)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = *(void *)(v9 + 80) - v11;
    unint64_t v13 = v10 - v12;
    if (v10 != v12)
    {
      if (v10 <= v12)
      {
        if (v10 < v12) {
          *(void *)(v9 + 80) = v11 + v10;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v9 + 72, v13);
      }
      int32x4_t v71 = *(std::__shared_weak_count **)(v9 + 32);
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      *(void *)(v9 + 120) = 0;
      *(_DWORD *)(v9 + 112) = 0;
      uint64_t v72 = *(void *)(v9 + 80) - *(void *)(v9 + 72);
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = v72;
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 64) = v72;
      uint64_t v9 = *(void *)v8[11];
      unint64_t v10 = 6 * *(void *)(v9 + 8);
    }
    uint64_t v73 = *(_OWORD **)(v9 + 72);
    _OWORD *v73 = xmmword_1A28FD230;
    v73[1] = xmmword_1A28FD240;
    v73[2] = xmmword_1A28FD250;
    v73[3] = xmmword_1A28FD230;
    v73[4] = xmmword_1A28FD250;
    v73[5] = xmmword_1A28FD260;
    if (*(void *)(v9 + 64) > v10) {
      unint64_t v10 = *(void *)(v9 + 64);
    }
    *(void *)(v9 + 56) = 0;
    *(void *)(v9 + 64) = v10;
    uint64_t v74 = *(std::__shared_weak_count **)(a4 + 136);
    *(void *)(a4 + 128) = v8 + 3;
    *(void *)(a4 + 136) = v8;
    if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v74->__on_zero_shared)(v74, v13);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (!*(void *)(a4 + 144))
  {
    int32x4_t v14 = (char *)operator new(0xA8uLL);
    *((void *)v14 + 1) = 0;
    int8x16_t v15 = v14;
    *((void *)v14 + 2) = 0;
    *(void *)int32x4_t v14 = &unk_1EF583430;
    int8x8_t v16 = v14 + 24;
    ggl::PolygonBase::MeshMesh::MeshMesh((ggl::PolygonBase::MeshMesh *)(v14 + 24), "/SharedPolygonUnitMeshSubdiv");
    uint64_t v17 = **((void **)v14 + 11);
    unint64_t v18 = *(void *)(v17 + 8) << 8;
    uint64_t v19 = *(void *)(v17 + 72);
    unint64_t v20 = *(void *)(v17 + 80) - v19;
    if (v18 != v20)
    {
      if (v18 <= v20)
      {
        if (v18 < v20) {
          *(void *)(v17 + 80) = v19 + v18;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v17 + 72, v18 - v20);
      }
      uint64_t v75 = *(std::__shared_weak_count **)(v17 + 32);
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0;
      if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
      *(void *)(v17 + 120) = 0;
      *(_DWORD *)(v17 + 112) = 0;
      uint64_t v76 = *(void *)(v17 + 80) - *(void *)(v17 + 72);
      *(void *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = v76;
      *(void *)(v17 + 56) = 0;
      *(void *)(v17 + 64) = v76;
      uint64_t v17 = **((void **)v14 + 11);
      unint64_t v18 = *(void *)(v17 + 8) << 8;
    }
    long long v193 = 0uLL;
    *(void *)&long long v77 = 0;
    *((void *)&v77 + 1) = v17;
    if (v18) {
      int8x16_t v78 = *(std::__shared_weak_count_vtbl **)(v17 + 72);
    }
    else {
      int8x16_t v78 = 0;
    }
    uint64_t v79 = 0;
    unint64_t v80 = 0;
    long long v193 = v77;
    *(void *)&long long v194 = 0;
    *((void *)&v194 + 1) = v18;
    uint64_t v196 = v78;
    __int16 v195 = 1;
    do
    {
      uint64_t v81 = (uint64_t)v78 + v79;
      *(_DWORD *)uint64_t v81 = 0;
      float v82 = (double)v80 * 0.0666666667;
      *(float *)(v81 + 4) = v82;
      *(_DWORD *)(v81 + 16) = 1032358025;
      *(void *)(v81 + 8) = 0x3F8000003F000000;
      *(float *)(v81 + 20) = v82;
      *(_DWORD *)(v81 + 32) = 1040746633;
      *(void *)(v81 + 24) = 0x3F8000003F000000;
      *(float *)(v81 + 36) = v82;
      *(_DWORD *)(v81 + 48) = 1045220557;
      *(void *)(v81 + 40) = 0x3F8000003F000000;
      *(float *)(v81 + 52) = v82;
      *(_DWORD *)(v81 + 64) = 1049135241;
      *(void *)(v81 + 56) = 0x3F8000003F000000;
      *(float *)(v81 + 68) = v82;
      *(_DWORD *)(v81 + 80) = 1051372203;
      *(void *)(v81 + 72) = 0x3F8000003F000000;
      *(float *)(v81 + 84) = v82;
      *(_DWORD *)(v81 + 96) = 1053609165;
      *(void *)(v81 + 88) = 0x3F8000003F000000;
      *(float *)(v81 + 100) = v82;
      *(_DWORD *)(v81 + 112) = 1055846127;
      *(void *)(v81 + 104) = 0x3F8000003F000000;
      *(float *)(v81 + 116) = v82;
      *(_DWORD *)(v81 + 128) = 1057523849;
      *(void *)(v81 + 120) = 0x3F8000003F000000;
      *(float *)(v81 + 132) = v82;
      *(_DWORD *)(v81 + 144) = 1058642330;
      *(void *)(v81 + 136) = 0x3F8000003F000000;
      *(float *)(v81 + 148) = v82;
      *(_DWORD *)(v81 + 160) = 1059760811;
      *(void *)(v81 + 152) = 0x3F8000003F000000;
      *(float *)(v81 + 164) = v82;
      *(_DWORD *)(v81 + 176) = 1060879292;
      *(void *)(v81 + 168) = 0x3F8000003F000000;
      *(float *)(v81 + 180) = v82;
      *(_DWORD *)(v81 + 192) = 1061997773;
      *(void *)(v81 + 184) = 0x3F8000003F000000;
      *(float *)(v81 + 196) = v82;
      *(_DWORD *)(v81 + 208) = 1063116254;
      *(void *)(v81 + 200) = 0x3F8000003F000000;
      *(float *)(v81 + 212) = v82;
      *(_DWORD *)(v81 + 224) = 1064234735;
      *(void *)(v81 + 216) = 0x3F8000003F000000;
      *(float *)(v81 + 228) = v82;
      *(_DWORD *)(v81 + 240) = 1065353216;
      *(void *)(v81 + 232) = 0x3F8000003F000000;
      *(float *)(v81 + 244) = v82;
      ++v80;
      v79 += 256;
      *(void *)(v81 + 248) = 0x3F8000003F000000;
    }
    while (v79 != 4096);
    uint64_t v83 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
    uint64_t v84 = ggl::BufferData::BufferData((uint64_t)&v83[1], 2, 1, 0, 6, 1350);
    uint64_t v85 = 0;
    LODWORD(v83[10].__vftable) = 0;
    v83[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
    v83[1].__shared_owners_ = 2;
    v83[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
    v83[9].__shared_weak_owners_ = (uint64_t)"/GridIndexData";
    unint64_t v86 = (_WORD *)&v83[4].__vftable[2].~__shared_weak_count_0 + 1;
    do
    {
      __int16 v87 = 16 * v85 + 16;
      *(v86 - 45) = v87;
      __int16 v88 = (16 * v85) | 1;
      *(v86 - 44) = v88;
      __int16 v89 = 16 * v85 + 17;
      *(v86 - 43) = v89;
      *(v86 - 42) = v87;
      *(v86 - 41) = 16 * v85;
      *(v86 - 40) = v88;
      __int16 v90 = 16 * v85 + 18;
      __int16 v91 = (16 * v85) | 2;
      *(v86 - 39) = v89;
      *(v86 - 38) = v91;
      *(v86 - 37) = v90;
      *(v86 - 36) = v89;
      *(v86 - 35) = v88;
      *(v86 - 34) = v91;
      __int16 v92 = 16 * v85 + 19;
      __int16 v93 = (16 * v85) | 3;
      *(v86 - 33) = v90;
      *(v86 - 32) = v93;
      *(v86 - 31) = v92;
      *(v86 - 30) = v90;
      *(v86 - 29) = v91;
      *(v86 - 28) = v93;
      __int16 v94 = 16 * v85 + 20;
      __int16 v95 = (16 * v85) | 4;
      *(v86 - 27) = v92;
      *(v86 - 26) = v95;
      *(v86 - 25) = v94;
      *(v86 - 24) = v92;
      *(v86 - 23) = v93;
      *(v86 - 22) = v95;
      __int16 v96 = 16 * v85 + 21;
      __int16 v97 = (16 * v85) | 5;
      *(v86 - 21) = v94;
      *(v86 - 20) = v97;
      *(v86 - 19) = v96;
      *(v86 - 18) = v94;
      *(v86 - 17) = v95;
      *(v86 - 16) = v97;
      __int16 v98 = 16 * v85 + 22;
      __int16 v99 = (16 * v85) | 6;
      *(v86 - 15) = v96;
      *(v86 - 14) = v99;
      *(v86 - 13) = v98;
      *(v86 - 12) = v96;
      *(v86 - 11) = v97;
      *(v86 - 10) = v99;
      __int16 v100 = 16 * v85 + 23;
      __int16 v101 = (16 * v85) | 7;
      *(v86 - 9) = v98;
      *(v86 - 8) = v101;
      *(v86 - 7) = v100;
      *(v86 - 6) = v98;
      *(v86 - 5) = v99;
      *(v86 - 4) = v101;
      __int16 v102 = 16 * v85 + 24;
      __int16 v103 = (16 * v85) | 8;
      *(v86 - 3) = v100;
      *(v86 - 2) = v103;
      *(v86 - 1) = v102;
      _WORD *v86 = v100;
      v86[1] = v101;
      void v86[2] = v103;
      __int16 v104 = 16 * v85 + 25;
      __int16 v105 = (16 * v85) | 9;
      v86[3] = v102;
      v86[4] = v105;
      v86[5] = v104;
      v86[6] = v102;
      v86[7] = v103;
      v86[8] = v105;
      __int16 v106 = 16 * v85 + 26;
      __int16 v107 = (16 * v85) | 0xA;
      v86[9] = v104;
      v86[10] = v107;
      v86[11] = v106;
      v86[12] = v104;
      v86[13] = v105;
      v86[14] = v107;
      __int16 v108 = 16 * v85 + 27;
      __int16 v109 = (16 * v85) | 0xB;
      v86[15] = v106;
      v86[16] = v109;
      v86[17] = v108;
      v86[18] = v106;
      v86[19] = v107;
      v86[20] = v109;
      __int16 v110 = 16 * v85 + 28;
      __int16 v111 = (16 * v85) | 0xC;
      v86[21] = v108;
      v86[22] = v111;
      v86[23] = v110;
      v86[24] = v108;
      v86[25] = v109;
      v86[26] = v111;
      __int16 v112 = 16 * v85 + 29;
      v86[27] = v110;
      v86[28] = (16 * v85) | 0xD;
      v86[29] = v112;
      v86[30] = v110;
      v86[31] = v111;
      v86[32] = (16 * v85) | 0xD;
      __int16 v113 = (16 * v85) | 0xE;
      v86[33] = v112;
      v86[34] = v113;
      v86[35] = 16 * v85 + 30;
      v86[36] = v112;
      v86[37] = (16 * v85) | 0xD;
      v86[38] = v113;
      __int16 v114 = (16 * v85) | 0xF;
      v86[39] = 16 * v85 + 30;
      v86[40] = v114;
      v86[41] = 16 * v85 + 31;
      v86[42] = 16 * v85++ + 30;
      v86[43] = v113;
      v86[44] = v114;
      v86 += 90;
    }
    while (v85 != 15);
    atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
    int32x4_t v115 = (std::__shared_weak_count *)*((void *)v14 + 16);
    *((void *)v14 + 15) = v84;
    *((void *)v14 + 16) = v83;
    if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
    if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
    unint64_t shared_weak_owners = v83[3].__shared_weak_owners_;
    if (shared_weak_owners <= 0xA8C) {
      unint64_t shared_weak_owners = 2700;
    }
    v83[3].__shared_owners_ = 0;
    v83[3].__shared_weak_owners_ = shared_weak_owners;
    if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
    if (v196 && *((void *)&v194 + 1) != (void)v194)
    {
      uint64_t v117 = *((void *)&v193 + 1);
      if ((void)v193 && *(unsigned char *)(*((void *)&v193 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v193 + 64))();
      }
      if ((_BYTE)v195 && !HIBYTE(v195))
      {
        unint64_t v119 = *(void *)(*((void *)&v193 + 1) + 56);
        unint64_t v118 = *(void *)(*((void *)&v193 + 1) + 64);
        if (v118 == v119) {
          unint64_t v119 = *(void *)(*((void *)&v193 + 1) + 80) - *(void *)(*((void *)&v193 + 1) + 72);
        }
        if ((unint64_t)v194 < v119) {
          unint64_t v119 = v194;
        }
        if (v118 <= *((void *)&v194 + 1)) {
          unint64_t v118 = *((void *)&v194 + 1);
        }
        if (v118 == v119) {
          unint64_t v118 = v119 + *(void *)(*((void *)&v193 + 1) + 80) - *(void *)(*((void *)&v193 + 1) + 72);
        }
        *(void *)(*((void *)&v193 + 1) + 56) = v119;
        *(void *)(v117 + 64) = v118;
      }
    }
    unint64_t v120 = *(std::__shared_weak_count **)(a4 + 152);
    *(void *)(a4 + 144) = v16;
    *(void *)(a4 + 152) = v15;
    if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (!*(void *)a4)
  {
    int32x4_t v21 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)&v21[1], 2, 1, 0, 6, 6);
    LODWORD(v21[10].__vftable) = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
    v21[1].__shared_owners_ = 2;
    v21[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
    v21[9].__shared_weak_owners_ = (uint64_t)"circle index data";
    long long v193 = 0uLL;
    *(void *)&long long v22 = 0;
    *((void *)&v22 + 1) = v21 + 1;
    uint64_t v23 = v21[4].__vftable;
    long long v193 = v22;
    long long v194 = xmmword_1A28FCD20;
    uint64_t v196 = v23;
    __int16 v195 = 1;
    v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x200010000;
    LODWORD(v23->~__shared_weak_count_0) = 196610;
    uint64_t v24 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
    v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584380;
    ggl::BufferData::BufferData((uint64_t)&v24[1], 8, 0, 0, 6, 4);
    v24[9].__shared_weak_owners_ = (uint64_t)"circle vertex data";
    v24[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2Reflection;
    v24[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55BF88;
    v24[9].__shared_owners_ = (uint64_t)&unk_1EF55BFA8;
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = v24 + 1;
    long long v190 = v25;
    unint64_t v191 = 4 * v24[1].__shared_owners_;
    int32x4_t v192 = v24[4].__vftable;
    *(_OWORD *)&v192->~__shared_weak_count = xmmword_1A28FCE90;
    *(_OWORD *)&v192->__on_zero_shared = xmmword_1A28FD270;
    unint64_t v26 = operator new(0xA8uLL);
    v26[1] = 0;
    v26[2] = 0;
    *unint64_t v26 = &unk_1EF5830E8;
    uint64_t v198 = v24 + 1;
    uint64_t v199 = v24;
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    v197[0] = (uint64_t)&v21[1];
    v197[1] = (uint64_t)v21;
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::CommonMesh::Pos2Mesh::Pos2Mesh((uint64_t)(v26 + 3), (uint64_t)"CircleUnitQuad", (uint64_t *)&v198, v197);
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    int8x16_t v27 = v199;
    if (v199 && !atomic_fetch_add(&v199->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v192 && v191)
    {
      if ((void)v190 && *(unsigned char *)(*((void *)&v190 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v190 + 64))();
      }
      uint64_t v29 = *(void *)(*((void *)&v190 + 1) + 56);
      unint64_t v28 = *(void *)(*((void *)&v190 + 1) + 64);
      if (v28 == v29) {
        uint64_t v29 = *(void *)(*((void *)&v190 + 1) + 80) - *(void *)(*((void *)&v190 + 1) + 72);
      }
      if (v29) {
        uint64_t v29 = 0;
      }
      if (v28 <= v191) {
        unint64_t v28 = v191;
      }
      if (v28 == v29) {
        unint64_t v28 = v29 + *(void *)(*((void *)&v190 + 1) + 80) - *(void *)(*((void *)&v190 + 1) + 72);
      }
      *(void *)(*((void *)&v190 + 1) + 56) = v29;
      *(void *)(*((void *)&v190 + 1) + 64) = v28;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v196 && *((void *)&v194 + 1) != (void)v194)
    {
      uint64_t v30 = *((void *)&v193 + 1);
      if ((void)v193 && *(unsigned char *)(*((void *)&v193 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v193 + 64))();
      }
      if ((_BYTE)v195 && !HIBYTE(v195))
      {
        unint64_t v32 = *(void *)(*((void *)&v193 + 1) + 56);
        unint64_t v31 = *(void *)(*((void *)&v193 + 1) + 64);
        if (v31 == v32) {
          unint64_t v32 = *(void *)(*((void *)&v193 + 1) + 80) - *(void *)(*((void *)&v193 + 1) + 72);
        }
        if ((unint64_t)v194 < v32) {
          unint64_t v32 = v194;
        }
        if (v31 <= *((void *)&v194 + 1)) {
          unint64_t v31 = *((void *)&v194 + 1);
        }
        if (v31 == v32) {
          unint64_t v31 = v32 + *(void *)(*((void *)&v193 + 1) + 80) - *(void *)(*((void *)&v193 + 1) + 72);
        }
        *(void *)(*((void *)&v193 + 1) + 56) = v32;
        *(void *)(v30 + 64) = v31;
      }
    }
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    float v33 = *(std::__shared_weak_count **)(a4 + 8);
    *(void *)a4 = v26 + 3;
    *(void *)(a4 + 8) = v26;
    if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (!*(void *)(a4 + 16))
  {
    float v34 = operator new(0xA8uLL);
    v34[1] = 0;
    v34[2] = 0;
    void *v34 = &unk_1EF583078;
    ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v34 + 3), "/SharedUnitMesh");
    uint64_t v35 = *(void *)v34[11];
    unint64_t v36 = 6 * *(void *)(v35 + 8);
    uint64_t v37 = *(void *)(v35 + 72);
    unint64_t v38 = *(void *)(v35 + 80) - v37;
    unint64_t v39 = v36 - v38;
    if (v36 != v38)
    {
      if (v36 <= v38)
      {
        if (v36 < v38) {
          *(void *)(v35 + 80) = v37 + v36;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v35 + 72, v39);
      }
      int8x16_t v121 = *(std::__shared_weak_count **)(v35 + 32);
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0;
      if (v121 && !atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
      *(void *)(v35 + 120) = 0;
      *(_DWORD *)(v35 + 112) = 0;
      uint64_t v122 = *(void *)(v35 + 80) - *(void *)(v35 + 72);
      *(void *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = v122;
      *(void *)(v35 + 56) = 0;
      *(void *)(v35 + 64) = v122;
      uint64_t v35 = *(void *)v34[11];
      unint64_t v36 = 6 * *(void *)(v35 + 8);
    }
    if (v36) {
      uint64_t v123 = *(void *)(v35 + 72);
    }
    else {
      uint64_t v123 = 0;
    }
    *(void *)uint64_t v123 = 0;
    *(void *)(v123 + 8) = 0;
    __asm { FMOV            V1.4S, #1.0 }
    *(_OWORD *)(v123 + 16) = xmmword_1A28FD280;
    *(_OWORD *)(v123 + 32) = _Q1;
    *(void *)(v123 + 48) = 0;
    *(void *)(v123 + 56) = 0;
    *(_OWORD *)(v123 + 64) = _Q1;
    *(_OWORD *)(v123 + 80) = xmmword_1A28FD290;
    if (v123 && v36)
    {
      if (*(void *)(v35 + 64) > v36) {
        unint64_t v36 = *(void *)(v35 + 64);
      }
      *(void *)(v35 + 56) = 0;
      *(void *)(v35 + 64) = v36;
    }
    int8x16_t v129 = *(std::__shared_weak_count **)(a4 + 24);
    *(void *)(a4 + 16) = v34 + 3;
    *(void *)(a4 + 24) = v34;
    if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v129->__on_zero_shared)(v129, v39);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (!*(void *)(a4 + 32))
  {
    long long v40 = v193;
    long long v193 = 0uLL;
    int32x4_t v41 = *(std::__shared_weak_count **)(a4 + 40);
    *(_OWORD *)(a4 + 32) = v40;
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    int8x16_t v42 = (std::__shared_weak_count *)*((void *)&v193 + 1);
    if (*((void *)&v193 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (!*(void *)(a4 + 48))
  {
    long long v43 = v193;
    long long v193 = 0uLL;
    int8x16_t v44 = *(std::__shared_weak_count **)(a4 + 56);
    *(_OWORD *)(a4 + 48) = v43;
    if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    int8x16_t v45 = (std::__shared_weak_count *)*((void *)&v193 + 1);
    if (*((void *)&v193 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (!*(void *)(a4 + 96))
  {
    unint64_t v46 = operator new(0xA8uLL);
    v46[1] = 0;
    v46[2] = 0;
    void *v46 = &unk_1EF583120;
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh((ggl::CommonMesh::Pos4Mesh *)(v46 + 3), "/SharedUnitMesh");
    uint64_t v47 = *(void *)v46[11];
    unint64_t v48 = 6 * *(void *)(v47 + 8);
    uint64_t v49 = *(void *)(v47 + 72);
    unint64_t v50 = *(void *)(v47 + 80) - v49;
    unint64_t v51 = v48 - v50;
    if (v48 != v50)
    {
      if (v48 <= v50)
      {
        if (v48 < v50) {
          *(void *)(v47 + 80) = v49 + v48;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v47 + 72, v51);
      }
      int8x16_t v130 = *(std::__shared_weak_count **)(v47 + 32);
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0;
      if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
      *(void *)(v47 + 120) = 0;
      *(_DWORD *)(v47 + 112) = 0;
      uint64_t v131 = *(void *)(v47 + 80) - *(void *)(v47 + 72);
      *(void *)(v47 + 40) = 0;
      *(void *)(v47 + 48) = v131;
      *(void *)(v47 + 56) = 0;
      *(void *)(v47 + 64) = v131;
      uint64_t v47 = *(void *)v46[11];
      unint64_t v48 = 6 * *(void *)(v47 + 8);
    }
    uint64_t v132 = *(_OWORD **)(v47 + 72);
    _OWORD *v132 = xmmword_1A28FCDD0;
    v132[1] = xmmword_1A28FC6C0;
    v132[2] = xmmword_1A28FD270;
    v132[3] = xmmword_1A28FCDD0;
    v132[4] = xmmword_1A28FD270;
    v132[5] = xmmword_1A28FD290;
    if (*(void *)(v47 + 64) > v48) {
      unint64_t v48 = *(void *)(v47 + 64);
    }
    *(void *)(v47 + 56) = 0;
    *(void *)(v47 + 64) = v48;
    unint64_t v133 = *(std::__shared_weak_count **)(a4 + 104);
    *(void *)(a4 + 96) = v46 + 3;
    *(void *)(a4 + 104) = v46;
    if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v133->__on_zero_shared)(v133, v51);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (!*(void *)(a4 + 112))
  {
    uint64_t v52 = (char *)operator new(0xA8uLL);
    *((void *)v52 + 1) = 0;
    int8x16_t v53 = v52;
    *((void *)v52 + 2) = 0;
    *(void *)uint64_t v52 = &unk_1EF583120;
    unsigned int v54 = v52 + 24;
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh((ggl::CommonMesh::Pos4Mesh *)(v52 + 24), "/SharedUnitMeshSubdiv");
    uint64_t v55 = **((void **)v52 + 11);
    unint64_t v56 = *(void *)(v55 + 8) << 8;
    uint64_t v57 = *(void *)(v55 + 72);
    unint64_t v58 = *(void *)(v55 + 80) - v57;
    if (v56 != v58)
    {
      if (v56 <= v58)
      {
        if (v56 < v58) {
          *(void *)(v55 + 80) = v57 + v56;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v55 + 72, v56 - v58);
      }
      uint8x8_t v134 = *(std::__shared_weak_count **)(v55 + 32);
      *(void *)(v55 + 24) = 0;
      *(void *)(v55 + 32) = 0;
      if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
      *(void *)(v55 + 120) = 0;
      *(_DWORD *)(v55 + 112) = 0;
      uint64_t v135 = *(void *)(v55 + 80) - *(void *)(v55 + 72);
      *(void *)(v55 + 40) = 0;
      *(void *)(v55 + 48) = v135;
      *(void *)(v55 + 56) = 0;
      *(void *)(v55 + 64) = v135;
      uint64_t v55 = **((void **)v52 + 11);
      unint64_t v56 = *(void *)(v55 + 8) << 8;
    }
    long long v193 = 0uLL;
    *(void *)&long long v136 = 0;
    *((void *)&v136 + 1) = v55;
    if (v56) {
      int32x4_t v137 = *(std::__shared_weak_count_vtbl **)(v55 + 72);
    }
    else {
      int32x4_t v137 = 0;
    }
    uint64_t v138 = 0;
    unint64_t v139 = 0;
    long long v193 = v136;
    *(void *)&long long v194 = 0;
    *((void *)&v194 + 1) = v56;
    uint64_t v196 = v137;
    __int16 v195 = 1;
    do
    {
      uint64_t v140 = (uint64_t)v137 + v138;
      *(_DWORD *)uint64_t v140 = 0;
      float v141 = (double)v139 * 0.0666666667;
      *(float *)(v140 + 4) = v141;
      *(_DWORD *)(v140 + 16) = 1032358025;
      *(void *)(v140 + 8) = 0x3F80000000000000;
      *(float *)(v140 + 20) = v141;
      *(_DWORD *)(v140 + 32) = 1040746633;
      *(void *)(v140 + 24) = 0x3F80000000000000;
      *(float *)(v140 + 36) = v141;
      *(_DWORD *)(v140 + 48) = 1045220557;
      *(void *)(v140 + 40) = 0x3F80000000000000;
      *(float *)(v140 + 52) = v141;
      *(_DWORD *)(v140 + 64) = 1049135241;
      *(void *)(v140 + 56) = 0x3F80000000000000;
      *(float *)(v140 + 68) = v141;
      *(_DWORD *)(v140 + 80) = 1051372203;
      *(void *)(v140 + 72) = 0x3F80000000000000;
      *(float *)(v140 + 84) = v141;
      *(_DWORD *)(v140 + 96) = 1053609165;
      *(void *)(v140 + 88) = 0x3F80000000000000;
      *(float *)(v140 + 100) = v141;
      *(_DWORD *)(v140 + 112) = 1055846127;
      *(void *)(v140 + 104) = 0x3F80000000000000;
      *(float *)(v140 + 116) = v141;
      *(_DWORD *)(v140 + 128) = 1057523849;
      *(void *)(v140 + 120) = 0x3F80000000000000;
      *(float *)(v140 + 132) = v141;
      *(_DWORD *)(v140 + 144) = 1058642330;
      *(void *)(v140 + 136) = 0x3F80000000000000;
      *(float *)(v140 + 148) = v141;
      *(_DWORD *)(v140 + 160) = 1059760811;
      *(void *)(v140 + 152) = 0x3F80000000000000;
      *(float *)(v140 + 164) = v141;
      *(_DWORD *)(v140 + 176) = 1060879292;
      *(void *)(v140 + 168) = 0x3F80000000000000;
      *(float *)(v140 + 180) = v141;
      *(_DWORD *)(v140 + 192) = 1061997773;
      *(void *)(v140 + 184) = 0x3F80000000000000;
      *(float *)(v140 + 196) = v141;
      *(_DWORD *)(v140 + 208) = 1063116254;
      *(void *)(v140 + 200) = 0x3F80000000000000;
      *(float *)(v140 + 212) = v141;
      *(_DWORD *)(v140 + 224) = 1064234735;
      *(void *)(v140 + 216) = 0x3F80000000000000;
      *(float *)(v140 + 228) = v141;
      *(_DWORD *)(v140 + 240) = 1065353216;
      *(void *)(v140 + 232) = 0x3F80000000000000;
      *(float *)(v140 + 244) = v141;
      ++v139;
      v138 += 256;
      *(void *)(v140 + 248) = 0x3F80000000000000;
    }
    while (v138 != 4096);
    float32x4_t v142 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
    uint64_t v143 = ggl::BufferData::BufferData((uint64_t)&v142[1], 2, 1, 0, 6, 1350);
    uint64_t v144 = 0;
    LODWORD(v142[10].__vftable) = 0;
    v142[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
    v142[1].__shared_owners_ = 2;
    v142[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
    v142[9].__shared_weak_owners_ = (uint64_t)"/GridIndexData";
    float v145 = (_WORD *)&v142[4].__vftable[2].~__shared_weak_count_0 + 1;
    do
    {
      __int16 v146 = 16 * v144 + 16;
      *(v145 - 45) = v146;
      __int16 v147 = 16 * v144 + 17;
      *(v145 - 44) = v147;
      __int16 v148 = (16 * v144) | 1;
      *(v145 - 43) = v148;
      *(v145 - 42) = v146;
      *(v145 - 41) = v148;
      *(v145 - 40) = 16 * v144;
      __int16 v149 = 16 * v144 + 18;
      __int16 v150 = (16 * v144) | 2;
      *(v145 - 39) = v147;
      *(v145 - 38) = v149;
      *(v145 - 37) = v150;
      *(v145 - 36) = v147;
      *(v145 - 35) = v150;
      *(v145 - 34) = v148;
      __int16 v151 = 16 * v144 + 19;
      __int16 v152 = (16 * v144) | 3;
      *(v145 - 33) = v149;
      *(v145 - 32) = v151;
      *(v145 - 31) = v152;
      *(v145 - 30) = v149;
      *(v145 - 29) = v152;
      *(v145 - 28) = v150;
      __int16 v153 = 16 * v144 + 20;
      __int16 v154 = (16 * v144) | 4;
      *(v145 - 27) = v151;
      *(v145 - 26) = v153;
      *(v145 - 25) = v154;
      *(v145 - 24) = v151;
      *(v145 - 23) = v154;
      *(v145 - 22) = v152;
      __int16 v155 = 16 * v144 + 21;
      __int16 v156 = (16 * v144) | 5;
      *(v145 - 21) = v153;
      *(v145 - 20) = v155;
      *(v145 - 19) = v156;
      *(v145 - 18) = v153;
      *(v145 - 17) = v156;
      *(v145 - 16) = v154;
      __int16 v157 = 16 * v144 + 22;
      __int16 v158 = (16 * v144) | 6;
      *(v145 - 15) = v155;
      *(v145 - 14) = v157;
      *(v145 - 13) = v158;
      *(v145 - 12) = v155;
      *(v145 - 11) = v158;
      *(v145 - 10) = v156;
      __int16 v159 = 16 * v144 + 23;
      __int16 v160 = (16 * v144) | 7;
      *(v145 - 9) = v157;
      *(v145 - 8) = v159;
      *(v145 - 7) = v160;
      *(v145 - 6) = v157;
      *(v145 - 5) = v160;
      *(v145 - 4) = v158;
      __int16 v161 = 16 * v144 + 24;
      __int16 v162 = (16 * v144) | 8;
      *(v145 - 3) = v159;
      *(v145 - 2) = v161;
      *(v145 - 1) = v162;
      *float v145 = v159;
      v145[1] = v162;
      v145[2] = v160;
      __int16 v163 = 16 * v144 + 25;
      __int16 v164 = (16 * v144) | 9;
      v145[3] = v161;
      v145[4] = v163;
      v145[5] = v164;
      v145[6] = v161;
      v145[7] = v164;
      v145[8] = v162;
      __int16 v165 = 16 * v144 + 26;
      __int16 v166 = (16 * v144) | 0xA;
      v145[9] = v163;
      v145[10] = v165;
      v145[11] = v166;
      v145[12] = v163;
      v145[13] = v166;
      v145[14] = v164;
      __int16 v167 = 16 * v144 + 27;
      __int16 v168 = (16 * v144) | 0xB;
      v145[15] = v165;
      v145[16] = v167;
      v145[17] = v168;
      v145[18] = v165;
      v145[19] = v168;
      v145[20] = v166;
      __int16 v169 = 16 * v144 + 28;
      __int16 v170 = (16 * v144) | 0xC;
      v145[21] = v167;
      v145[22] = v169;
      v145[23] = v170;
      v145[24] = v167;
      v145[25] = v170;
      v145[26] = v168;
      __int16 v171 = 16 * v144 + 29;
      v145[27] = v169;
      v145[28] = v171;
      v145[29] = (16 * v144) | 0xD;
      v145[30] = v169;
      v145[31] = (16 * v144) | 0xD;
      v145[32] = v170;
      __int16 v172 = (16 * v144) | 0xE;
      v145[33] = v171;
      v145[34] = 16 * v144 + 30;
      v145[35] = v172;
      v145[36] = v171;
      v145[37] = v172;
      v145[38] = (16 * v144) | 0xD;
      __int16 v173 = (16 * v144) | 0xF;
      v145[39] = 16 * v144 + 30;
      v145[40] = 16 * v144 + 31;
      v145[41] = v173;
      v145[42] = 16 * v144++ + 30;
      v145[43] = v173;
      v145[44] = v172;
      v145 += 90;
    }
    while (v144 != 15);
    atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
    int32x4_t v174 = (std::__shared_weak_count *)*((void *)v52 + 16);
    *((void *)v52 + 15) = v143;
    *((void *)v52 + 16) = v142;
    if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
    if (!atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
    unint64_t v175 = v142[3].__shared_weak_owners_;
    if (v175 <= 0xA8C) {
      unint64_t v175 = 2700;
    }
    v142[3].__shared_owners_ = 0;
    v142[3].__shared_weak_owners_ = v175;
    if (!atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
    if (v196)
    {
      long long v176 = v194;
      if (*((void *)&v194 + 1) != (void)v194)
      {
        int8x16_t v177 = (void *)*((void *)&v193 + 1);
        int v178 = v195;
        int v179 = HIBYTE(v195);
        if ((void)v193 && *(unsigned char *)(*((void *)&v193 + 1) + 17) != 2) {
          (*(void (**)(void))(*(void *)v193 + 64))();
        }
        if (v178 && !v179)
        {
          unint64_t v181 = v177[7];
          unint64_t v180 = v177[8];
          if (v180 == v181) {
            unint64_t v181 = v177[10] - v177[9];
          }
          if ((unint64_t)v176 < v181) {
            unint64_t v181 = v176;
          }
          if (v180 <= *((void *)&v176 + 1)) {
            unint64_t v180 = *((void *)&v176 + 1);
          }
          if (v180 == v181) {
            unint64_t v180 = v181 + v177[10] - v177[9];
          }
          v177[7] = v181;
          v177[8] = v180;
        }
      }
    }
    unint64_t v182 = *(std::__shared_weak_count **)(a4 + 120);
    *(void *)(a4 + 112) = v54;
    *(void *)(a4 + 120) = v53;
    if (v182 && !atomic_fetch_add(&v182->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  if (!*(void *)(a4 + 64))
  {
    unint64_t v59 = operator new(0xA8uLL);
    v59[1] = 0;
    v59[2] = 0;
    void *v59 = &unk_1EF583078;
    ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v59 + 3), "/SharedFullScreenQuad");
    uint64_t v60 = *(void *)v59[11];
    unint64_t v61 = 6 * *(void *)(v60 + 8);
    uint64_t v62 = *(void *)(v60 + 72);
    unint64_t v63 = *(void *)(v60 + 80) - v62;
    unint64_t v64 = v61 - v63;
    if (v61 != v63)
    {
      if (v61 <= v63)
      {
        if (v61 < v63) {
          *(void *)(v60 + 80) = v62 + v61;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v60 + 72, v64);
      }
      unint64_t v183 = *(std::__shared_weak_count **)(v60 + 32);
      *(void *)(v60 + 24) = 0;
      *(void *)(v60 + 32) = 0;
      if (v183 && !atomic_fetch_add(&v183->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
      *(void *)(v60 + 120) = 0;
      *(_DWORD *)(v60 + 112) = 0;
      uint64_t v184 = *(void *)(v60 + 80) - *(void *)(v60 + 72);
      *(void *)(v60 + 40) = 0;
      *(void *)(v60 + 48) = v184;
      *(void *)(v60 + 56) = 0;
      *(void *)(v60 + 64) = v184;
      uint64_t v60 = *(void *)v59[11];
      unint64_t v61 = 6 * *(void *)(v60 + 8);
    }
    int8x16_t v185 = *(_OWORD **)(v60 + 72);
    *int8x16_t v185 = xmmword_1A28FD2B0;
    v185[1] = xmmword_1A28FC890;
    v185[2] = xmmword_1A28FD2C0;
    v185[3] = xmmword_1A28FD2C0;
    v185[4] = xmmword_1A28FC890;
    v185[5] = xmmword_1A28FD2D0;
    if (*(void *)(v60 + 64) > v61) {
      unint64_t v61 = *(void *)(v60 + 64);
    }
    *(void *)(v60 + 56) = 0;
    *(void *)(v60 + 64) = v61;
    int8x16_t v186 = *(std::__shared_weak_count **)(a4 + 72);
    *(void *)(a4 + 64) = v59 + 3;
    *(void *)(a4 + 72) = v59;
    if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v186->__on_zero_shared)(v186, v64);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  if (!*(void *)(a4 + 80))
  {
    uint64_t v65 = operator new(0xA8uLL);
    v65[1] = 0;
    v65[2] = 0;
    void *v65 = &unk_1EF583078;
    ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v65 + 3), "/SharedSinglePointMesh");
    uint64_t v66 = *(void *)v65[11];
    unint64_t v67 = *(void *)(v66 + 8);
    uint64_t v68 = *(void *)(v66 + 72);
    unint64_t v69 = *(void *)(v66 + 80) - v68;
    unint64_t v70 = v67 - v69;
    if (v67 != v69)
    {
      if (v67 <= v69)
      {
        if (v67 < v69) {
          *(void *)(v66 + 80) = v68 + v67;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v66 + 72, v70);
      }
      int8x16_t v187 = *(std::__shared_weak_count **)(v66 + 32);
      *(void *)(v66 + 24) = 0;
      *(void *)(v66 + 32) = 0;
      if (v187 && !atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
      *(void *)(v66 + 120) = 0;
      *(_DWORD *)(v66 + 112) = 0;
      uint64_t v188 = *(void *)(v66 + 80) - *(void *)(v66 + 72);
      *(void *)(v66 + 40) = 0;
      *(void *)(v66 + 48) = v188;
      *(void *)(v66 + 56) = 0;
      *(void *)(v66 + 64) = v188;
      uint64_t v66 = *(void *)v65[11];
      unint64_t v67 = *(void *)(v66 + 8);
    }
    *(_OWORD *)*(void *)(v66 + 72) = xmmword_1A28FD2B0;
    if (*(void *)(v66 + 64) > v67) {
      unint64_t v67 = *(void *)(v66 + 64);
    }
    *(void *)(v66 + 56) = 0;
    *(void *)(v66 + 64) = v67;
    int32x4_t v189 = *(std::__shared_weak_count **)(a4 + 88);
    *(void *)(a4 + 80) = v65 + 3;
    *(void *)(a4 + 88) = v65;
    if (v189 && !atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v189->__on_zero_shared)(v189, v70);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  uint64_t result = md::LayoutContext::frameState(a2);
  *(unsigned char *)(a4 + 320) = *(unsigned char *)(result + 128);
  return result;
}

void sub_1A1B4E210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  if (!atomic_fetch_add(v6, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  if (!atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::purge(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = (uint64_t *)a1[8];
  if ((uint64_t *)v1 != v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = a1[6];
    int32x4_t v7 = a1 + 3;
    int8x16_t v8 = a1 + 5;
    while (v5 != v6)
    {
      uint64_t v9 = *(void *)(v1 + 56);
      uint64_t v10 = std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(v7, (int *)(v1 + 16));
      if (v10)
      {
        int8x8_t v11 = (int8x8_t)a1[4];
        unint64_t v12 = v10[1];
        uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          if (v12 >= *(void *)&v11) {
            v12 %= *(void *)&v11;
          }
        }
        else
        {
          v12 &= *(void *)&v11 - 1;
        }
        uint64_t v14 = *(uint64_t **)(*v7 + 8 * v12);
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14 != v10);
        if (v15 == v8) {
          goto LABEL_24;
        }
        unint64_t v16 = v15[1];
        if (v13.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&v11) {
            v16 %= *(void *)&v11;
          }
        }
        else
        {
          v16 &= *(void *)&v11 - 1;
        }
        if (v16 != v12)
        {
LABEL_24:
          if (!*v10) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(*v10 + 8);
          if (v13.u32[0] > 1uLL)
          {
            if (v17 >= *(void *)&v11) {
              v17 %= *(void *)&v11;
            }
          }
          else
          {
            v17 &= *(void *)&v11 - 1;
          }
          if (v17 != v12) {
LABEL_25:
          }
            *(void *)(*v7 + 8 * v12) = 0;
        }
        uint64_t v18 = *v10;
        if (*v10)
        {
          unint64_t v19 = *(void *)(v18 + 8);
          if (v13.u32[0] > 1uLL)
          {
            if (v19 >= *(void *)&v11) {
              v19 %= *(void *)&v11;
            }
          }
          else
          {
            v19 &= *(void *)&v11 - 1;
          }
          if (v19 != v12)
          {
            *(void *)(*v7 + 8 * v19) = v15;
            uint64_t v18 = *v10;
          }
        }
        *uint64_t v15 = v18;
        --a1[6];
        operator delete(v10);
        uint64_t v2 = (uint64_t *)a1[8];
      }
      v4 += v9;
      uint64_t v1 = *(void *)(v1 + 8);
      ++v5;
      if ((uint64_t *)v1 == v2) {
        goto LABEL_34;
      }
    }
    uint64_t v2 = (uint64_t *)v1;
LABEL_34:
    unint64_t v20 = (uint64_t *)a1[1];
    if (v20 != v2)
    {
      uint64_t v21 = *v2;
      uint64_t v22 = *v20;
      *(void *)(v22 + 8) = *(void *)(*v2 + 8);
      **(void **)(v21 + 8) = v22;
      do
      {
        uint64_t v23 = (uint64_t *)v20[1];
        --a1[2];
        uint64_t v24 = (std::__shared_weak_count *)v20[6];
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        operator delete(v20);
        unint64_t v20 = v23;
      }
      while (v23 != v2);
    }
    unint64_t v25 = a1[9];
    BOOL v26 = v25 >= v4;
    unint64_t v27 = v25 - v4;
    if (!v26) {
      unint64_t v27 = 0;
    }
    a1[9] = v27;
  }
}

void geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::insert(uint64_t *a1, int *a2)
{
  uint64_t v5 = a1 + 3;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(a1 + 3, a2);
  if (!v6)
  {
    unint64_t v16 = operator new(0x40uLL);
    unint64_t v17 = v16;
    v16[1] = *(_OWORD *)a2;
    *((_DWORD *)v16 + 8) = a2[4];
    uint64_t v18 = *((void *)a2 + 4);
    *((void *)v16 + 5) = *((void *)a2 + 3);
    *((void *)v16 + 6) = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v16 + 7) = *((void *)a2 + 5);
    ++a1[2];
    unint64_t v19 = (uint64_t *)a1[8];
    uint64_t v20 = a1[9] + *((void *)a2 + 5);
    uint64_t v21 = *a1;
    *(void *)(v21 + 8) = v16;
    *a1 = (uint64_t)v16;
    *(void *)unint64_t v16 = v21;
    *((void *)v16 + 1) = a1;
    a1[9] = v20;
    if (v19 == a1) {
      a1[8] = (uint64_t)v16;
    }
    uint64_t v22 = *((unsigned __int8 *)a2 + 8);
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
    unint64_t v25 = (v23
         + ((v22 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v22 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v22 - 0x61C8864680B583EBLL);
    unint64_t v26 = (v24 + (v25 << 6) + (v25 >> 2) - 0x61C8864680B583EBLL) ^ v25;
    uint64_t v27 = a2[3];
    uint64_t v28 = a2[4];
    unint64_t v29 = (v27 + (v26 << 6) + (v26 >> 2) - 0x61C8864680B583EBLL) ^ v26;
    unint64_t v30 = (v28 + (v29 << 6) + (v29 >> 2) - 0x61C8864680B583EBLL) ^ v29;
    unint64_t v31 = a1[4];
    if (v31)
    {
      uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        uint64_t v2 = (v28 + (v29 << 6) + (v29 >> 2) - 0x61C8864680B583EBLL) ^ v29;
        if (v30 >= v31) {
          uint64_t v2 = v30 % v31;
        }
      }
      else
      {
        uint64_t v2 = v30 & (v31 - 1);
      }
      unint64_t v39 = *(uint64_t ***)(*v5 + 8 * v2);
      if (v39)
      {
        long long v40 = *v39;
        if (v40)
        {
          if (v32.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v42 = v40[1];
              if (v42 == v30)
              {
                if (*((_DWORD *)v40 + 4) == v23
                  && __PAIR64__(*((unsigned __int8 *)v40 + 24), *((_DWORD *)v40 + 5)) == __PAIR64__(v22, v24)
                  && *(uint64_t *)((char *)v40 + 28) == __PAIR64__(v28, v27))
                {
                  return;
                }
              }
              else if ((v42 & (v31 - 1)) != v2)
              {
                goto LABEL_45;
              }
              long long v40 = (uint64_t *)*v40;
              if (!v40) {
                goto LABEL_45;
              }
            }
          }
          do
          {
            unint64_t v41 = v40[1];
            if (v41 == v30)
            {
              if (*((_DWORD *)v40 + 4) == v23
                && __PAIR64__(*((unsigned __int8 *)v40 + 24), *((_DWORD *)v40 + 5)) == __PAIR64__(v22, v24)
                && *(uint64_t *)((char *)v40 + 28) == __PAIR64__(v28, v27))
              {
                return;
              }
            }
            else
            {
              if (v41 >= v31) {
                v41 %= v31;
              }
              if (v41 != v2) {
                break;
              }
            }
            long long v40 = (uint64_t *)*v40;
          }
          while (v40);
        }
      }
    }
LABEL_45:
    long long v43 = operator new(0x30uLL);
    *long long v43 = 0;
    v43[1] = v30;
    *((_OWORD *)v43 + 1) = *(_OWORD *)a2;
    *((_DWORD *)v43 + 8) = a2[4];
    v43[5] = v17;
    float v44 = (float)(unint64_t)(a1[6] + 1);
    float v45 = *((float *)a1 + 14);
    if (!v31 || (float)(v45 * (float)v31) < v44)
    {
      BOOL v46 = 1;
      if (v31 >= 3) {
        BOOL v46 = (v31 & (v31 - 1)) != 0;
      }
      unint64_t v47 = v46 | (2 * v31);
      unint64_t v48 = vcvtps_u32_f32(v44 / v45);
      if (v47 <= v48) {
        size_t prime = v48;
      }
      else {
        size_t prime = v47;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v31 = a1[4];
      }
      if (prime > v31) {
        goto LABEL_57;
      }
      if (prime < v31)
      {
        unint64_t v50 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
        if (v31 < 3 || (uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
        {
          unint64_t v50 = std::__next_prime(v50);
        }
        else
        {
          uint64_t v52 = 1 << -(char)__clz(v50 - 1);
          if (v50 >= 2) {
            unint64_t v50 = v52;
          }
        }
        if (prime <= v50) {
          size_t prime = v50;
        }
        if (prime < v31) {
LABEL_57:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v5, prime);
      }
      unint64_t v31 = a1[4];
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v30 >= v31) {
          uint64_t v2 = v30 % v31;
        }
        else {
          uint64_t v2 = v30;
        }
      }
      else
      {
        uint64_t v2 = (v31 - 1) & v30;
      }
    }
    uint64_t v53 = *v5;
    unsigned int v54 = *(void **)(*v5 + 8 * v2);
    if (v54)
    {
      *long long v43 = *v54;
    }
    else
    {
      *long long v43 = a1[5];
      a1[5] = (uint64_t)v43;
      *(void *)(v53 + 8 * v2) = a1 + 5;
      if (!*v43)
      {
LABEL_82:
        ++a1[6];
        return;
      }
      unint64_t v55 = *(void *)(*v43 + 8);
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v55 >= v31) {
          v55 %= v31;
        }
      }
      else
      {
        v55 &= v31 - 1;
      }
      unsigned int v54 = (void *)(*v5 + 8 * v55);
    }
    *unsigned int v54 = v43;
    goto LABEL_82;
  }
  int32x4_t v7 = v6;
  int8x16_t v8 = (uint64_t *)v6[5];
  uint64_t v9 = operator new(0x40uLL);
  uint64_t v10 = v9;
  v9[1] = *(_OWORD *)a2;
  *((_DWORD *)v9 + 8) = a2[4];
  uint64_t v11 = *((void *)a2 + 4);
  *((void *)v9 + 5) = *((void *)a2 + 3);
  *((void *)v9 + 6) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 7) = *((void *)a2 + 5);
  uint64_t v12 = *a1;
  *(void *)(v12 + 8) = v9;
  *a1 = (uint64_t)v9;
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = a1;
  uint64_t v13 = a1[2];
  a1[2] = v13 + 1;
  uint64_t v14 = (uint64_t *)a1[8];
  if (v14 == v8)
  {
    uint64_t v15 = (_OWORD *)v8[1];
LABEL_15:
    a1[8] = (uint64_t)v15;
    goto LABEL_16;
  }
  uint64_t v15 = v9;
  if (v14 == a1) {
    goto LABEL_15;
  }
LABEL_16:
  unint64_t v33 = a1[9];
  uint64_t v35 = (std::__shared_weak_count *)v8[6];
  unint64_t v34 = v8[7];
  BOOL v36 = v33 >= v34;
  unint64_t v37 = v33 - v34;
  if (!v36) {
    unint64_t v37 = 0;
  }
  a1[9] = v37 + *((void *)a2 + 5);
  uint64_t v38 = *v8;
  *(void *)(v38 + 8) = v8[1];
  *(void *)v8[1] = v38;
  a1[2] = v13;
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(v8);
  v7[5] = (uint64_t)v10;
}

void sub_1A1B4EA64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::GeometryContext::transformConstantData(double *a1, uint64_t *a2, unsigned __int8 *a3, int a4, double a5, double a6)
{
  if ((a4 - 1) <= 2 && *a3 == 255)
  {
    unsigned __int8 v10 = a3[1];
    HIDWORD(v118) = vcvtmd_s64_f64(a5 * 100.0);
    DWORD2(v118) = v10;
    *(void *)&long long v118 = *(void *)(a3 + 4);
    unsigned int v119 = vcvtpd_s64_f64(a6 * 100.0);
    uint64_t v11 = a2 + 20;
    uint64_t v12 = std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(a2 + 23, (int *)&v118);
    if (!v12
      || (uint64_t v13 = v12,
          uint64_t v14 = (uint64_t *)geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::_elementAccessed(v11, (uint64_t *)v12[5]), v13[5] = (uint64_t)v14, v11 == v14))
    {
      uint64_t v15 = operator new(0xE8uLL);
      v15[1] = 0;
      v15[2] = 0;
      *uint64_t v15 = &unk_1EF586E28;
      ggl::BufferData::BufferData((uint64_t)(v15 + 3), qword_1E95523C8, 2, 1, 6, 1);
      v15[28] = ggl::Tile::Transform::reflection(void)::reflection;
      v15[3] = &unk_1EF55E298;
      *(void *)a1 = v15 + 3;
      *((void *)a1 + 1) = v15;
      int v16 = 1 << a3[1];
      double v17 = 1.0 / (double)v16;
      double v18 = v17 * (double)(v16 + ~*((_DWORD *)a3 + 1));
      double v19 = v17 * (double)*((int *)a3 + 2) + v17;
      *(double *)&long long v120 = v17 * (double)*((int *)a3 + 2);
      *((double *)&v120 + 1) = v18;
      double v121 = v19;
      double v122 = v18 + v17;
      gdc::GlobeTileUtils::createSplinePatchFromMercatorRect((uint64_t)v137, (double *)&v120, a5, a6);
      long long v132 = 0uLL;
      unint64_t v20 = v15[4];
      *(void *)&long long v21 = 0;
      *((void *)&v21 + 1) = v15 + 3;
      uint64_t v22 = v15[12];
      long long v132 = v21;
      long long v136 = (float *)v22;
      __int16 v135 = 1;
      DWORD2(v21) = *(_DWORD *)&v137[8];
      *(void *)(v22 + 32) = *(void *)v137;
      *(_DWORD *)(v22 + 40) = DWORD2(v21);
      *(_DWORD *)(v22 + 44) = 1065353216;
      uint64_t v23 = *(void *)&v137[12];
      *(_DWORD *)(v22 + 56) = v138;
      *(void *)(v22 + 48) = v23;
      *(_DWORD *)(v22 + 60) = 1065353216;
      double v24 = v139;
      int v25 = HIDWORD(v140);
      *(_DWORD *)(v22 + 72) = v140;
      *(double *)(v22 + 64) = v24;
      *(_DWORD *)(v22 + 76) = 1065353216;
      uint64_t v26 = *(void *)((char *)&v140 + 4);
      *(_DWORD *)(v22 + 88) = v25;
      *(void *)(v22 + 80) = v26;
      *(_DWORD *)(v22 + 92) = 1065353216;
      *(void *)&long long v21 = v141;
      *(_DWORD *)(v22 + 104) = v142;
      *(void *)(v22 + 96) = v21;
      *(_DWORD *)(v22 + 108) = 1065353216;
      uint64_t v27 = v143;
      *(_DWORD *)(v22 + 120) = v144;
      *(void *)(v22 + 112) = v27;
      uint64_t v28 = v145;
      int v29 = v148;
      *(_DWORD *)(v22 + 136) = v146;
      *(void *)(v22 + 128) = v28;
      *(void *)&long long v21 = v149;
      *(_DWORD *)(v22 + 168) = v150;
      *(_DWORD *)(v22 + 124) = 1065353216;
      *(_DWORD *)(v22 + 140) = 1065353216;
      *(_DWORD *)(v22 + 152) = v29;
      *(void *)(v22 + 160) = v21;
      *(_DWORD *)(v22 + 184) = v152;
      int v30 = v156;
      *(_DWORD *)(v22 + 200) = v154;
      unint64_t v133 = 0;
      unint64_t v134 = v20;
      *(void *)(v22 + 144) = v147;
      *(_DWORD *)(v22 + 156) = 1065353216;
      *(_DWORD *)(v22 + 172) = 1065353216;
      *(void *)(v22 + 176) = v151;
      *(_DWORD *)(v22 + 188) = 1065353216;
      *(void *)(v22 + 192) = v153;
      *(_DWORD *)(v22 + 204) = 1065353216;
      uint64_t v31 = v155;
      *(_DWORD *)(v22 + 216) = v30;
      *(void *)(v22 + 208) = v31;
      *(void *)&long long v21 = v157;
      *(_DWORD *)(v22 + 232) = v158;
      *(_DWORD *)(v22 + 220) = 1065353216;
      *(void *)(v22 + 224) = v21;
      *(_DWORD *)(v22 + 236) = 1065353216;
      uint64_t v32 = v159;
      *(_DWORD *)(v22 + 248) = v160;
      *(void *)(v22 + 240) = v32;
      *(_DWORD *)(v22 + 252) = 1065353216;
      uint64_t v33 = v161;
      *(_DWORD *)(v22 + 264) = v162;
      *(void *)(v22 + 256) = v33;
      *(_DWORD *)(v22 + 268) = 1065353216;
      uint64_t v34 = v163;
      *(_DWORD *)(v22 + 280) = v164;
      *(void *)(v22 + 272) = v34;
      *(_DWORD *)(v22 + 284) = 1065353216;
      LODWORD(v22) = 1 << a3[1];
      double v35 = 1.0 / (double)(int)v22;
      *(double *)&long long v21 = v35 * (double)((int)v22 + ~*((_DWORD *)a3 + 1));
      double v36 = gdc::GlobeTileUtils::computeGlobeCoeffsFromMercatorRect(*(double *)&v21, *(double *)&v21 + v35);
      unint64_t v37 = v136;
      *long long v136 = *(float *)&v36;
      *((_DWORD *)v37 + 1) = v38;
      *((_DWORD *)v37 + 2) = v39;
      *((_DWORD *)v37 + 3) = v40;
      unint64_t v41 = +[VKDebugSettings sharedSettings];
      int v42 = [v41 daVinciGlobeScalingCorrection];
      int v43 = 0;
      unsigned __int32 v44 = 1.0;
      int v45 = 0;
      if (v42)
      {
        int v46 = 1 << a3[1];
        double v47 = 1.0 / (double)v46;
        double v48 = v47 * (double)(v46 + ~*((_DWORD *)a3 + 1));
        unsigned __int32 v44 = gdc::GlobeTileUtils::computeMercatorScaleCoeffs(v48, v48 + v47).n128_u32[0];
      }
      *((_DWORD *)v37 + 4) = v44;
      *((_DWORD *)v37 + 5) = v43;
      *((_DWORD *)v37 + 6) = v45;

      unsigned __int8 v49 = a3[1];
      double v50 = 1.0 / (double)(1 << v49);
      uint64_t v51 = *((int *)a3 + 2);
      int v52 = (1 << v49) + ~*((_DWORD *)a3 + 1);
      double __b = v50 * (double)v51;
      double v166 = v50 * (double)v52;
      double v167 = v50 + (double)v51 * v50;
      double v168 = v50 + (double)v52 * v50;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v120, &__b, a5, a6);
      __powidf2();
      float v54 = v53 * 0.0000000249532021;
      double v55 = v128;
      double v56 = v129;
      double v58 = v130;
      double v57 = v131;
      double v59 = v131 - v128;
      float v60 = (float)(1.0 / v54) / (v131 - v128);
      v37[85] = v60;
      __asm { FMOV            V1.2S, #1.0 }
      *((void *)v37 + 43) = _D1;
      v37[84] = 0.0;
      double v67 = v126;
      double v66 = v127;
      double v68 = v56 - v126;
      double v69 = v58 - v127;
      double v70 = v54;
      float v71 = (v58 - v127) * v70;
      float v72 = (v56 - v126) * v70;
      *(float *)&double v70 = v59 * v70;
      v37[76] = v72;
      v37[77] = v71;
      v37[78] = *(float *)&v70;
      if (v56 < v67 || v58 < v66 || v57 < v55)
      {
        memset_pattern16(&__b, &unk_1A28FFCE0, 0x18uLL);
        double v76 = __b;
        double v77 = v166;
        double v78 = v167;
      }
      else
      {
        double v73 = -(*(double *)&v120 * v124 - v121 * v122) - (*(double *)&v120 * v124 - v121 * v122);
        double v74 = -(v121 * v123 - *((double *)&v120 + 1) * v124) - (v121 * v123 - *((double *)&v120 + 1) * v124);
        double v75 = -(*((double *)&v120 + 1) * v122 - *(double *)&v120 * v123)
            - (*((double *)&v120 + 1) * v122
             - *(double *)&v120 * v123);
        double v76 = -(v67 + *(double *)&v120 + v74 * v125 + v73 * v124 - v75 * v123) / v68;
        double v77 = -(v75 * v122 - (-(*((double *)&v120 + 1) + v66 - v74 * v124) - v73 * v125)) / v69;
        double v78 = -(v55 + v121 + v74 * v123 + v75 * v125 - v73 * v122) / v59;
      }
      float v101 = v78;
      float v102 = v77;
      float v103 = v76;
      v37[72] = v103;
      v37[73] = v102;
      v37[74] = v101;
      v37[75] = 1.0;
      float v104 = v69;
      float v105 = v68;
      float v106 = v59;
      v37[80] = v105;
      v37[81] = v104;
      v37[82] = v106;
      unint64_t v108 = v133;
      unint64_t v107 = v134;
      if (v134 != v133)
      {
        __int16 v109 = (void *)*((void *)&v132 + 1);
        int v110 = v135;
        int v111 = HIBYTE(v135);
        if ((void)v132 && *(unsigned char *)(*((void *)&v132 + 1) + 17) != 2) {
          (*(void (**)(void))(*(void *)v132 + 64))();
        }
        if (v110 && !v111)
        {
          unint64_t v113 = v109[7];
          unint64_t v112 = v109[8];
          if (v112 == v113) {
            unint64_t v113 = v109[10] - v109[9];
          }
          if (v108 < v113) {
            unint64_t v113 = v108;
          }
          if (v112 <= v107) {
            unint64_t v112 = v107;
          }
          if (v112 == v113) {
            unint64_t v112 = v113 + v109[10] - v109[9];
          }
          v109[7] = v113;
          v109[8] = v112;
        }
      }
      long long v120 = v118;
      LODWORD(v121) = v119;
      double v114 = *a1;
      double v115 = a1[1];
      double v122 = *a1;
      double v123 = v115;
      if (v115 == 0.0)
      {
        *(_OWORD *)int32x4_t v137 = v118;
        *(_DWORD *)&v137[16] = v119;
        double v139 = v114;
        *(void *)&long long v140 = 0;
      }
      else
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v115 + 8), 1uLL, memory_order_relaxed);
        *(_OWORD *)int32x4_t v137 = v120;
        *(_DWORD *)&v137[16] = LODWORD(v121);
        double v139 = v114;
        *(double *)&long long v140 = v115;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v115 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)&v140 + 1) = 0;
      geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::insert(v11, (int *)v137);
LABEL_38:
      int8x8_t v116 = (std::__shared_weak_count *)v140;
      if ((void)v140 && !atomic_fetch_add((atomic_ullong *volatile)(v140 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
      uint64_t v117 = *(std::__shared_weak_count **)&v123;
      if (v123 != 0.0 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v123 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
      return;
    }
  }
  else
  {
    *(void *)&long long v132 = *(void *)(a3 + 4);
    unsigned __int8 v79 = a3[1];
    LODWORD(v133) = 0;
    *((void *)&v132 + 1) = v79;
    unint64_t v80 = a2 + 30;
    uint64_t v81 = std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(a2 + 33, (int *)&v132);
    if (!v81
      || (float v82 = v81,
          uint64_t v14 = (uint64_t *)geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::_elementAccessed(v80, (uint64_t *)v81[5]), v82[5] = (uint64_t)v14, v80 == v14))
    {
      double v84 = COERCE_DOUBLE(operator new(0xE8uLL));
      *(void *)(*(void *)&v84 + 16) = 0;
      *(void *)(*(void *)&v84 + 8) = 0;
      uint64_t v85 = (atomic_ullong *)(*(void *)&v84 + 8);
      **(void **)&double v84 = &unk_1EF586E28;
      ggl::BufferData::BufferData(*(void *)&v84 + 24, qword_1E95523C8, 2, 1, 6, 1);
      *(void *)(*(void *)&v84 + 224) = ggl::Tile::Transform::reflection(void)::reflection;
      *(void *)(*(void *)&v84 + 24) = &unk_1EF55E298;
      *(void *)a1 = *(void *)&v84 + 24;
      a1[1] = v84;
      unint64_t v86 = *(void *)(*(void *)&v84 + 32);
      uint64_t v87 = *(void *)(*(void *)&v84 + 96);
      *(_OWORD *)(v87 + 32) = xmmword_1A28FCDD0;
      *(_OWORD *)(v87 + 48) = xmmword_1A28FD2E0;
      *(_OWORD *)(v87 + 64) = xmmword_1A28FD2F0;
      *(_OWORD *)(v87 + 80) = xmmword_1A28FD290;
      *(_OWORD *)(v87 + 96) = xmmword_1A28FD300;
      *(_OWORD *)(v87 + 112) = xmmword_1A28FD310;
      *(_OWORD *)(v87 + 128) = xmmword_1A28FD320;
      *(_OWORD *)(v87 + 144) = xmmword_1A28FD330;
      *(_OWORD *)(v87 + 160) = xmmword_1A28FD340;
      *(_OWORD *)(v87 + 176) = xmmword_1A28FD350;
      *(_OWORD *)(v87 + 192) = xmmword_1A28FD360;
      *(_OWORD *)(v87 + 208) = xmmword_1A28FD370;
      *(_OWORD *)(v87 + 224) = xmmword_1A28FC6C0;
      *(_OWORD *)(v87 + 240) = xmmword_1A28FD380;
      *(_OWORD *)(v87 + 256) = xmmword_1A28FD390;
      *(_OWORD *)(v87 + 272) = xmmword_1A28FD270;
      *(_OWORD *)uint64_t v87 = xmmword_1A28FD2A0;
      *(void *)(v87 + 16) = 1065353216;
      *(_DWORD *)(v87 + 24) = 0;
      *(_DWORD *)(v87 + 348) = 1065353216;
      __asm { FMOV            V0.4S, #1.0 }
      *(void *)(v87 + 340) = _Q0;
      *(_OWORD *)(v87 + 288) = xmmword_1A28FD3A0;
      int v89 = 1 << a3[1];
      *(float *)&_Q0 = ((double)(v89 + ~*((_DWORD *)a3 + 1)) + 0.5) / (double)v89;
      long double v90 = exp(*(float *)&_Q0 * 6.28318531 + -3.14159265);
      long double v91 = atan(v90) * 114.591559 + -90.0;
      long double v92 = cos(v91 * 0.034906585) * -559.82 + 111132.92;
      long double v93 = v92 + cos(v91 * 0.0698131701) * 1.175;
      long double v94 = v93 + cos(v91 * 0.104719755) * -0.0023;
      long double v95 = v91 * 0.00872664626;
      long double v96 = tan(v91 * 0.00872664626 + 0.78103484);
      double v97 = log(v96);
      long double v98 = tan(v95 + 0.789761487);
      *(float *)&long double v94 = fabs((log(v98) - v97) * 0.159154943) / (v94 * (float)(1.0 / (float)v89));
      __powidf2();
      *(float *)&double v99 = v99 * 0.0000000249532021;
      *(float *)(v87 + 320) = 1.0 / *(float *)&v94;
      *(float *)(v87 + 324) = 1.0 / *(float *)&v94;
      *(float *)(v87 + 328) = 1.0 / *(float *)&v99;
      unint64_t v100 = *(void *)(*(void *)&v84 + 88);
      if (v100 <= v86) {
        unint64_t v100 = v86;
      }
      *(void *)(*(void *)&v84 + 80) = 0;
      *(void *)(*(void *)&v84 + 88) = v100;
      long long v120 = v132;
      LODWORD(v121) = v133;
      *(void *)&double v122 = *(void *)&v84 + 24;
      double v123 = v84;
      atomic_fetch_add_explicit(v85, 1uLL, memory_order_relaxed);
      *(_OWORD *)int32x4_t v137 = v132;
      *(_DWORD *)&v137[16] = v133;
      *(void *)&double v139 = *(void *)&v84 + 24;
      *(double *)&long long v140 = v84;
      atomic_fetch_add_explicit(v85, 1uLL, memory_order_relaxed);
      *((void *)&v140 + 1) = 0;
      geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::insert(v80, (int *)v137);
      goto LABEL_38;
    }
  }
  *(void *)a1 = v14[5];
  uint64_t v83 = v14[6];
  *((void *)a1 + 1) = v83;
  if (v83) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1A1B4F524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a33);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33);
  _Unwind_Resume(a1);
}

double gdc::GlobeTileUtils::computeGlobeCoeffsFromMercatorRect(double a1, double a2)
{
  long double v4 = exp(a1 * 6.28318531 + -3.14159265);
  long double v5 = atan(v4);
  double v6 = v5 + v5;
  double v138 = v5 + v5 + -1.57079633;
  long double v7 = exp(a2 * 6.28318531 + -3.14159265);
  long double v8 = atan(v7);
  double v9 = v8 + v8;
  __asm { FMOV            V1.2D, #1.0 }
  float64x2_t v137 = _Q1;
  if (_ZF)
  {
    uint64_t v14 = &v147;
    float64x2_t v141 = 0u;
    float64x2_t v142 = 0u;
    float64x2_t v139 = 0u;
    float64x2_t v140 = 0u;
    long long v143 = xmmword_1A28FCCD0;
    double v32 = 0.0;
    double v30 = 0.857142857;
    uint64_t v31 = 6;
  }
  else
  {
    uint64_t v14 = &v142.f64[1];
    *(double *)&uint64_t v136 = v9 - v6;
    double v15 = a2 - a1;
    long long v143 = xmmword_1A28FCCD0;
    double v135 = v9 + -1.57079633;
    long double v16 = exp((a1 + v15 * 0.142857149) * 6.28318531 + -3.14159265);
    long double v17 = atan(v16);
    v18.f64[0] = v138;
    v18.f64[1] = fmax(v138, v17 * 2.0 + -1.57079633);
    float64x2_t v132 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v138, 0);
    float64x2_t v133 = vdivq_f64(v137, (float64x2_t)vdupq_lane_s64(v136, 0));
    float64x2_t v134 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v135, 0);
    float64x2_t v139 = vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(vsubq_f64(vminnmq_f64(v134, v18), v132), v133)));
    long double v19 = exp((a1 + v15 * 0.285714298) * 6.28318531 + -3.14159265);
    long double v130 = atan(v19);
    long double v20 = exp((a1 + v15 * 0.428571433) * 6.28318531 + -3.14159265);
    long double v21 = atan(v20);
    v22.f64[0] = v130;
    v22.f64[1] = v21;
    __asm { FMOV            V1.2D, #2.0 }
    float64x2_t v129 = _Q1;
    float64x2_t v131 = (float64x2_t)vdupq_n_s64(0xBFF921FB54442D18);
    float64x2_t v140 = vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(vsubq_f64(vminnmq_f64(v134, vmaxnmq_f64(v132, vmlaq_f64(v131, _Q1, v22))), v132), v133)));
    long double v24 = exp((a1 + v15 * 0.571428597) * 6.28318531 + -3.14159265);
    long double v128 = atan(v24);
    long double v25 = exp((a1 + v15 * 0.714285731) * 6.28318531 + -3.14159265);
    long double v26 = atan(v25);
    v27.f64[0] = v128;
    v27.f64[1] = v26;
    float64x2_t v141 = vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(vsubq_f64(vminnmq_f64(v134, vmaxnmq_f64(v132, vmlaq_f64(v131, v129, v27))), v132), v133)));
    double v146 = 0.857142857;
    long double v28 = exp((a1 + v15 * 0.857142866) * 6.28318531 + -3.14159265);
    float v29 = (fmin(v135, fmax(v138, atan(v28) * 2.0 + -1.57079633)) - v138) / *(double *)&v136;
    v142.f64[0] = v29;
    double v30 = 1.0;
    uint64_t v31 = 7;
    double v32 = *(double *)&v143;
  }
  long long v144 = xmmword_1A28FCCE0;
  long long v145 = xmmword_1A28FCCF0;
  *((double *)&v143 + v31) = v30;
  *uint64_t v14 = 1.0;
  uint64_t v33 = (double *)malloc_type_calloc(0x10uLL, 8uLL, 0x100004000313F17uLL);
  uint64_t v34 = (double *)malloc_type_malloc(0x50uLL, 0x100004000313F17uLL);
  double v35 = (double *)malloc_type_malloc(0x20uLL, 0x100004000313F17uLL);
  double v36 = (double *)malloc_type_calloc(4uLL, 8uLL, 0x100004000313F17uLL);
  unint64_t v37 = (double *)malloc_type_calloc(4uLL, 8uLL, 0x100004000313F17uLL);
  int v38 = (float64x2_t *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  int v39 = v38;
  uint64_t v40 = 0;
  double v41 = *(double *)&v143 - v32;
  double v42 = *((double *)&v143 + 1) - v32;
  v38[4].f64[0] = *(double *)&v143 - v32;
  v38[4].f64[1] = v42;
  v38[8].f64[0] = v41 * v41;
  v38[8].f64[1] = v42 * v42;
  v38[12].f64[0] = v41 * (v41 * v41);
  v38[12].f64[1] = v42 * (v42 * v42);
  double v43 = *(double *)&v144 - v32;
  double v44 = *((double *)&v144 + 1) - v32;
  v38[5].f64[0] = *(double *)&v144 - v32;
  v38[5].f64[1] = v44;
  v38[9].f64[0] = v43 * v43;
  v38[9].f64[1] = v44 * v44;
  v38[13].f64[0] = v43 * (v43 * v43);
  v38[13].f64[1] = v44 * (v44 * v44);
  double v45 = *(double *)&v145 - v32;
  double v46 = *((double *)&v145 + 1) - v32;
  v38[6].f64[0] = *(double *)&v145 - v32;
  v38[6].f64[1] = v46;
  v38[10].f64[0] = v45 * v45;
  v38[10].f64[1] = v46 * v46;
  *int v38 = v137;
  v38[1] = v137;
  v38[14].f64[0] = v45 * (v45 * v45);
  v38[14].f64[1] = v46 * (v46 * v46);
  double v47 = v147;
  double v48 = v146 - v32;
  _OWORD v38[2] = v137;
  void v38[3] = v137;
  double v49 = v47 - v32;
  v38[7].f64[0] = v48;
  v38[7].f64[1] = v49;
  v38[11].f64[0] = v48 * v48;
  v38[11].f64[1] = v49 * v49;
  v38[15].f64[0] = v48 * (v48 * v48);
  v38[15].f64[1] = v49 * (v49 * v49);
  double v50 = v37;
  do
  {
    double v59 = *v50;
    float v60 = &v38[v40];
    if (v50 >= v38[v40 + 4].f64 || v60 >= (float64x2_t *)(v50 + 1))
    {
      double v58 = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)*(unint64_t *)&v59, *v60, *v60), v60[2], v60[2]), v60[3], v60[3]), v60[1], v60[1]));
    }
    else
    {
      double v51 = v59 + v60->f64[0] * v60->f64[0];
      *double v50 = v51;
      double v52 = v51 + v60->f64[1] * v60->f64[1];
      *double v50 = v52;
      double v53 = v52 + v60[1].f64[0] * v60[1].f64[0];
      *double v50 = v53;
      double v54 = v53 + v60[1].f64[1] * v60[1].f64[1];
      *double v50 = v54;
      double v55 = v54 + v60[2].f64[0] * v60[2].f64[0];
      *double v50 = v55;
      double v56 = v55 + v60[2].f64[1] * v60[2].f64[1];
      *double v50 = v56;
      double v57 = v56 + v60[3].f64[0] * v60[3].f64[0];
      *double v50 = v57;
      double v58 = v57 + v60[3].f64[1] * v60[3].f64[1];
      *double v50 = v58;
    }
    *v50++ = sqrt(v58);
    v40 += 4;
  }
  while (v40 != 16);
  uint64_t v62 = 0;
  unint64_t v63 = v33 + 2;
  unint64_t v64 = v38 + 2;
  do
  {
    *(v63 - 2) = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64[-2], *v38), v38[2], *v64), v38[1], v64[-1]), v38[3], v64[1]))/ (v37[v62]* *v37);
    *(v63 - 1) = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64[-2], v38[4]), v38[6], *v64), v38[5], v64[-1]), v38[7], v64[1]))/ (v37[v62]* v37[1]);
    *unint64_t v63 = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64[-2], v38[8]), v38[10], *v64), v38[9], v64[-1]), v38[11], v64[1]))/ (v37[v62]* v37[2]);
    float64x2_t v65 = v64[-1];
    float64x2_t v66 = vmulq_f64(v64[-2], v38[12]);
    float64x2_t v67 = *v64;
    float64x2_t v68 = v64[1];
    v64 += 4;
    v63[1] = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v66, v38[14], v67), v38[13], v65), v38[15], v68))
           / (v37[v62++]
            * v37[3]);
    v63 += 4;
  }
  while (v62 != 4);
  unint64_t v69 = 0;
  double v70 = v38;
  do
  {
    unint64_t v80 = &v36[v69 / 8 + 1];
    double v81 = v36[v69 / 8];
    BOOL v83 = &v36[v69 / 8] < (double *)&v143 && v80 > (double *)&v139;
    BOOL v84 = v70 >= (float64x2_t *)v80 || &v36[v69 / 8] >= v70[4].f64;
    if (!v84 || v83)
    {
      double v71 = v81 + v139.f64[0] * v70->f64[0];
      v36[v69 / 8] = v71;
      f64 = v38[v69 / 2].f64;
      double v73 = v71 + v139.f64[1] * f64[1];
      v36[v69 / 8] = v73;
      double v74 = v73 + v140.f64[0] * v70[1].f64[0];
      v36[v69 / 8] = v74;
      double v75 = v74 + v140.f64[1] * f64[3];
      v36[v69 / 8] = v75;
      double v76 = v75 + v141.f64[0] * v70[2].f64[0];
      v36[v69 / 8] = v76;
      double v77 = v76 + v141.f64[1] * f64[5];
      v36[v69 / 8] = v77;
      double v78 = v77 + v142.f64[0] * v70[3].f64[0];
      v36[v69 / 8] = v78;
      double v79 = v78 + v142.f64[1] * f64[7];
    }
    else
    {
      double v79 = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)*(unint64_t *)&v81, *v70, v139), v70[2], v141), v70[3], v142), v70[1], v140));
    }
    v36[v69 / 8] = v79;
    v36[v69 / 8] = v79 / v37[v69 / 8];
    v69 += 8;
    v70 += 4;
  }
  while (v69 != 32);
  unint64_t v85 = 0;
  uint64_t v86 = 2;
  uint64_t v87 = v34;
  __int16 v88 = v33;
  do
  {
    double v89 = *v88;
    *uint64_t v87 = *v88;
    long double v90 = &v87[-v85];
    if (v85)
    {
      double v89 = v89 - *v90 * *v90;
      *uint64_t v87 = v89;
      if (v85 != 1)
      {
        double v89 = v89 - v90[1] * v90[1];
        *uint64_t v87 = v89;
        if (v85 != 2)
        {
          double v89 = v89 - v90[2] * v90[2];
          *uint64_t v87 = v89;
        }
      }
    }
    double v92 = *v88;
    long double v91 = v88 + 1;
    *uint64_t v87 = sqrt(fmax(v89, v92 * 0.000000001));
    if (v85 <= 2)
    {
      long double v93 = &v87[v85 + 1];
      if (v85)
      {
        uint64_t v94 = v86;
        do
        {
          double v95 = *v91;
          *long double v93 = *v91;
          long double v96 = &v93[-v85];
          double v97 = v95 - *v90 * *v96;
          *long double v93 = v97;
          if (v85 != 1)
          {
            double v97 = v97 - v90[1] * v96[1];
            *long double v93 = v97;
          }
          *long double v93 = v97 / *v87;
          v93 += v94;
          ++v91;
          ++v94;
        }
        while (v94 != 5);
      }
      else
      {
        uint64_t v98 = v86;
        do
        {
          double v99 = *v91++;
          *long double v93 = v99;
          *long double v93 = v99 / *v87;
          v93 += v98++;
        }
        while (v98 != 5);
      }
    }
    v87 += v85 + 2;
    __int16 v88 = &v91[v85 + 1];
    ++v86;
    ++v85;
  }
  while (v85 != 4);
  unint64_t v100 = (double *)malloc_type_malloc(0x20uLL, 0x100004000313F17uLL);
  double v101 = *v36;
  *unint64_t v100 = *v36;
  double v102 = v101 / *v34;
  *unint64_t v100 = v102;
  double v103 = v36[1];
  v100[1] = v103;
  double v104 = v103 - v102 * v34[1];
  v100[1] = v104;
  double v105 = v104 / v34[2];
  v100[1] = v105;
  double v106 = v36[2];
  v100[2] = v106;
  double v107 = v106 - v102 * v34[3];
  v100[2] = v107;
  double v108 = v107 - v105 * v34[4];
  v100[2] = v108;
  double v109 = v108 / v34[5];
  v100[2] = v109;
  double v110 = v36[3];
  v100[3] = v110;
  double v111 = v110 - v102 * v34[6];
  v100[3] = v111;
  double v112 = v111 - v105 * v34[7];
  v100[3] = v112;
  double v113 = v112 - v109 * v34[8];
  v100[3] = v113;
  double v114 = v113 / v34[9];
  v100[3] = v114;
  v35[3] = v114;
  double v115 = v114 / v34[9];
  v35[3] = v115;
  double v116 = v100[2];
  v35[2] = v116;
  double v117 = v116 - v115 * v34[8];
  v35[2] = v117;
  double v118 = v117 / v34[5];
  v35[2] = v118;
  double v119 = v100[1];
  v35[1] = v119;
  double v120 = v119 - v118 * v34[4];
  v35[1] = v120;
  double v121 = v120 - v115 * v34[7];
  v35[1] = v121;
  double v122 = v121 / v34[2];
  v35[1] = v122;
  double v123 = *v100;
  double *v35 = *v100;
  double v124 = v123 - v122 * v34[1];
  double *v35 = v124;
  double v125 = v124 - v118 * v34[3];
  double *v35 = v125;
  double v126 = v125 - v35[3] * v34[6];
  double *v35 = v126;
  double *v35 = v126 / *v34;
  free(v100);
  free(v33);
  free(v34);
  free(v35);
  free(v36);
  free(v37);
  free(v39);
  return 0.0;
}

uint64_t *std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *((unsigned __int8 *)a2 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  unint64_t v7 = (v5 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  unint64_t v10 = (v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  unint64_t v11 = (v9 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v13 = (v9 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
    if (v11 >= *(void *)&v2) {
      uint64_t v13 = v11 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v13 = v11 & (*(void *)&v2 - 1);
  }
  uint64_t v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  uint64_t result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      uint64_t v16 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v18 = result[1];
        if (v18 == v11)
        {
          if (*((_DWORD *)result + 4) == v4
            && __PAIR64__(*((unsigned __int8 *)result + 24), *((_DWORD *)result + 5)) == __PAIR64__(v3, v5)
            && *(uint64_t *)((char *)result + 28) == __PAIR64__(v9, v8))
          {
            return result;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v17 = result[1];
      if (v17 == v11)
      {
        if (*((_DWORD *)result + 4) == v4
          && __PAIR64__(*((unsigned __int8 *)result + 24), *((_DWORD *)result + 5)) == __PAIR64__(v3, v5)
          && *(uint64_t *)((char *)result + 28) == __PAIR64__(v9, v8))
        {
          return result;
        }
      }
      else
      {
        if (v17 >= *(void *)&v2) {
          v17 %= *(void *)&v2;
        }
        if (v17 != v13) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

_DWORD *geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::_elementAccessed(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = v4;
  long long v6 = *((_OWORD *)a2 + 1);
  v4[8] = *((_DWORD *)a2 + 8);
  *((_OWORD *)v4 + 1) = v6;
  uint64_t v7 = a2[6];
  *((void *)v4 + 5) = a2[5];
  *((void *)v4 + 6) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v4 + 7) = a2[7];
  uint64_t v8 = *a1;
  *(void *)(v8 + 8) = v4;
  *a1 = (uint64_t)v4;
  *(void *)uint64_t v4 = v8;
  *((void *)v4 + 1) = a1;
  uint64_t v9 = a1[2];
  unint64_t v10 = (uint64_t *)a1[8];
  if (v10 == a2)
  {
    unint64_t v11 = (_DWORD *)a2[1];
LABEL_7:
    a1[8] = (uint64_t)v11;
    goto LABEL_8;
  }
  unint64_t v11 = v4;
  if (v10 == a1) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v12 = *a2;
  *(void *)(v12 + 8) = a2[1];
  *(void *)a2[1] = v12;
  a1[2] = v9;
  uint64_t v13 = (std::__shared_weak_count *)a2[6];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(a2);
  return v5;
}

ggl::PolygonBase::MeshMesh *ggl::PolygonBase::MeshMesh::MeshMesh(ggl::PolygonBase::MeshMesh *this, const char *a2)
{
  {
    {
      ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r;
    *(void *)algn_1EB32B470 = 1;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(void *)this = &unk_1EF5606B0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1EF5606D0;
  *((void *)this + 3) = 0;
  *((void *)this + 7) = &ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r;
  *((void *)this + 8) = 0;
  uint64_t v4 = (char *)this + 64;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  {
    operator new();
  }
  uint64_t v5 = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 15) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = v5;
  {
    operator new();
  }
  *((void *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 17) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *(void *)this = &unk_1EF561E20;
  *((void *)this + 2) = &unk_1EF561E40;
  uint64_t v6 = *((void *)this + 8);
  unint64_t v7 = *(void *)(*((void *)this + 7) + 8);
  uint64_t v8 = *((void *)this + 9);
  unint64_t v9 = (v8 - v6) >> 4;
  unint64_t v10 = v7 - v9;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      for (uint64_t i = v6 + 16 * v7; v8 != i; v8 -= 16)
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v8 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v10);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *((void *)this + 9) = i;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v10);
  }
  *(void *)this = &unk_1EF55A7B0;
  *((void *)this + 2) = &unk_1EF55A7D0;
  if (a2) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = "/VertexData";
  }
  {
    operator new();
  }
  uint64_t v14 = ggl::Allocator::instance(void)::alloc;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(void *)uint64_t v15 = &unk_1EF5845E8;
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = v14;
  *(void *)(v15 + 32) = &unk_1EF55A1F0;
  *(void *)(v15 + 40) = 16;
  *(_DWORD *)(v15 + 48) = 6;
  long long v16 = 0uLL;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(void *)(v15 + 120) = 0;
  {
    long long v16 = 0uLL;
    if (v20) {
      operator new();
    }
  }
  *(void *)(v15 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v15 + 136) = 0;
  *(_OWORD *)(v15 + 200) = v16;
  *(_OWORD *)(v15 + 184) = v16;
  *(_OWORD *)(v15 + 168) = v16;
  *(void *)(v15 + 216) = 0;
  *(void *)(v15 + 224) = -1;
  *(_OWORD *)(v15 + 152) = xmmword_1A28FCCA0;
  *(_DWORD *)(v15 + 144) = 0;
  *(void *)(v15 + 240) = v13;
  *(void *)(v15 + 248) = &ggl::PolygonBase::defaultVboReflection;
  *(void *)(v15 + 32) = &unk_1EF55C188;
  *(void *)(v15 + 232) = &unk_1EF55C1A8;
  unint64_t v17 = *(void **)v4;
  uint64_t v18 = *(std::__shared_weak_count **)(*(void *)v4 + 8);
  *unint64_t v17 = v15 + 32;
  v17[1] = v15;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return this;
}

void anonymous namespace'::_createSubdividedUnitMesh(_anonymous_namespace_ *this, char a2)
{
  uint64_t v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EF583078;
  *(void *)this = ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v4 + 3), "/SharedUnitMeshSubdiv");
  *((void *)this + 1) = v4;
  uint64_t v5 = *(void *)v4[11];
  unint64_t v6 = *(void *)(v5 + 8) << 8;
  uint64_t v7 = *(void *)(v5 + 72);
  unint64_t v8 = *(void *)(v5 + 80) - v7;
  if (v6 != v8)
  {
    if (v6 <= v8)
    {
      if (v6 < v8) {
        *(void *)(v5 + 80) = v7 + v6;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v5 + 72, v6 - v8);
    }
    unint64_t v9 = *(std::__shared_weak_count **)(v5 + 32);
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    *(void *)(v5 + 120) = 0;
    *(_DWORD *)(v5 + 112) = 0;
    uint64_t v10 = *(void *)(v5 + 80) - *(void *)(v5 + 72);
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 48) = v10;
    *(void *)(v5 + 56) = 0;
    *(void *)(v5 + 64) = v10;
    uint64_t v5 = *(void *)v4[11];
    unint64_t v6 = *(void *)(v5 + 8) << 8;
  }
  *(void *)&long long v11 = 0;
  *((void *)&v11 + 1) = v5;
  if (v6) {
    uint64_t v12 = *(void *)(v5 + 72);
  }
  else {
    uint64_t v12 = 0;
  }
  long long v55 = v11;
  unint64_t v56 = v6;
  uint64_t v57 = v12;
  unint64_t v13 = 0;
  uint64_t v14 = v12 + 128;
  if (a2)
  {
    do
    {
      double v15 = (double)v13 * 0.0666666667;
      *(_DWORD *)(v14 - 128) = 0;
      float v16 = v15;
      *(float *)(v14 - 124) = v16;
      *(float *)&double v15 = 1.0 - v15;
      *(_DWORD *)(v14 - 120) = 0;
      *(_DWORD *)(v14 - 116) = LODWORD(v15);
      *(_DWORD *)(v14 - 112) = 1032358025;
      *(float *)(v14 - 108) = v16;
      *(_DWORD *)(v14 - 104) = 1032358025;
      *(_DWORD *)(v14 - 100) = LODWORD(v15);
      *(_DWORD *)(v14 - 96) = 1040746633;
      *(float *)(v14 - 92) = v16;
      *(_DWORD *)(v14 - 88) = 1040746633;
      *(_DWORD *)(v14 - 84) = LODWORD(v15);
      *(_DWORD *)(v14 - 80) = 1045220557;
      *(float *)(v14 - 76) = v16;
      *(_DWORD *)(v14 - 72) = 1045220557;
      *(_DWORD *)(v14 - 68) = LODWORD(v15);
      *(_DWORD *)(v14 - 64) = 1049135241;
      *(float *)(v14 - 60) = v16;
      *(_DWORD *)(v14 - 56) = 1049135241;
      *(_DWORD *)(v14 - 52) = LODWORD(v15);
      *(_DWORD *)(v14 - 48) = 1051372203;
      *(float *)(v14 - 44) = v16;
      *(_DWORD *)(v14 - 40) = 1051372203;
      *(_DWORD *)(v14 - 36) = LODWORD(v15);
      *(_DWORD *)(v14 - 32) = 1053609165;
      *(float *)(v14 - 28) = v16;
      *(_DWORD *)(v14 - 24) = 1053609165;
      *(_DWORD *)(v14 - 20) = LODWORD(v15);
      *(_DWORD *)(v14 - 16) = 1055846127;
      *(float *)(v14 - 12) = v16;
      *(_DWORD *)(v14 - 8) = 1055846127;
      *(_DWORD *)(v14 - 4) = LODWORD(v15);
      *(_DWORD *)uint64_t v14 = 1057523849;
      *(float *)(v14 + 4) = v16;
      *(_DWORD *)(v14 + 8) = 1057523849;
      *(_DWORD *)(v14 + 12) = LODWORD(v15);
      *(_DWORD *)(v14 + 16) = 1058642330;
      *(float *)(v14 + 20) = v16;
      *(_DWORD *)(v14 + 24) = 1058642330;
      *(_DWORD *)(v14 + 28) = LODWORD(v15);
      *(_DWORD *)(v14 + 32) = 1059760811;
      *(float *)(v14 + 36) = v16;
      *(_DWORD *)(v14 + 40) = 1059760811;
      *(_DWORD *)(v14 + 44) = LODWORD(v15);
      *(_DWORD *)(v14 + 48) = 1060879292;
      *(float *)(v14 + 52) = v16;
      *(_DWORD *)(v14 + 56) = 1060879292;
      *(_DWORD *)(v14 + 60) = LODWORD(v15);
      *(_DWORD *)(v14 + 64) = 1061997773;
      *(float *)(v14 + 68) = v16;
      *(_DWORD *)(v14 + 72) = 1061997773;
      *(_DWORD *)(v14 + 76) = LODWORD(v15);
      *(_DWORD *)(v14 + 80) = 1063116254;
      *(float *)(v14 + 84) = v16;
      *(_DWORD *)(v14 + 88) = 1063116254;
      *(_DWORD *)(v14 + 92) = LODWORD(v15);
      *(_DWORD *)(v14 + 96) = 1064234735;
      *(float *)(v14 + 100) = v16;
      *(_DWORD *)(v14 + 104) = 1064234735;
      *(_DWORD *)(v14 + 108) = LODWORD(v15);
      *(_DWORD *)(v14 + 112) = 1065353216;
      *(float *)(v14 + 116) = v16;
      ++v13;
      *(_DWORD *)(v14 + 120) = 1065353216;
      *(_DWORD *)(v14 + 124) = LODWORD(v15);
      v14 += 256;
    }
    while (v13 != 16);
  }
  else
  {
    do
    {
      *(_DWORD *)(v14 - 128) = 0;
      float v17 = (double)v13 * 0.0666666667;
      *(float *)(v14 - 124) = v17;
      *(_DWORD *)(v14 - 120) = 0;
      *(float *)(v14 - 116) = v17;
      *(_DWORD *)(v14 - 112) = 1032358025;
      *(float *)(v14 - 108) = v17;
      *(_DWORD *)(v14 - 104) = 1032358025;
      *(float *)(v14 - 100) = v17;
      *(_DWORD *)(v14 - 96) = 1040746633;
      *(float *)(v14 - 92) = v17;
      *(_DWORD *)(v14 - 88) = 1040746633;
      *(float *)(v14 - 84) = v17;
      *(_DWORD *)(v14 - 80) = 1045220557;
      *(float *)(v14 - 76) = v17;
      *(_DWORD *)(v14 - 72) = 1045220557;
      *(float *)(v14 - 68) = v17;
      *(_DWORD *)(v14 - 64) = 1049135241;
      *(float *)(v14 - 60) = v17;
      *(_DWORD *)(v14 - 56) = 1049135241;
      *(float *)(v14 - 52) = v17;
      *(_DWORD *)(v14 - 48) = 1051372203;
      *(float *)(v14 - 44) = v17;
      *(_DWORD *)(v14 - 40) = 1051372203;
      *(float *)(v14 - 36) = v17;
      *(_DWORD *)(v14 - 32) = 1053609165;
      *(float *)(v14 - 28) = v17;
      *(_DWORD *)(v14 - 24) = 1053609165;
      *(float *)(v14 - 20) = v17;
      *(_DWORD *)(v14 - 16) = 1055846127;
      *(float *)(v14 - 12) = v17;
      *(_DWORD *)(v14 - 8) = 1055846127;
      *(float *)(v14 - 4) = v17;
      *(_DWORD *)uint64_t v14 = 1057523849;
      *(float *)(v14 + 4) = v17;
      *(_DWORD *)(v14 + 8) = 1057523849;
      *(float *)(v14 + 12) = v17;
      *(_DWORD *)(v14 + 16) = 1058642330;
      *(float *)(v14 + 20) = v17;
      *(_DWORD *)(v14 + 24) = 1058642330;
      *(float *)(v14 + 28) = v17;
      *(_DWORD *)(v14 + 32) = 1059760811;
      *(float *)(v14 + 36) = v17;
      *(_DWORD *)(v14 + 40) = 1059760811;
      *(float *)(v14 + 44) = v17;
      *(_DWORD *)(v14 + 48) = 1060879292;
      *(float *)(v14 + 52) = v17;
      *(_DWORD *)(v14 + 56) = 1060879292;
      *(float *)(v14 + 60) = v17;
      *(_DWORD *)(v14 + 64) = 1061997773;
      *(float *)(v14 + 68) = v17;
      *(_DWORD *)(v14 + 72) = 1061997773;
      *(float *)(v14 + 76) = v17;
      *(_DWORD *)(v14 + 80) = 1063116254;
      *(float *)(v14 + 84) = v17;
      *(_DWORD *)(v14 + 88) = 1063116254;
      *(float *)(v14 + 92) = v17;
      *(_DWORD *)(v14 + 96) = 1064234735;
      *(float *)(v14 + 100) = v17;
      *(_DWORD *)(v14 + 104) = 1064234735;
      *(float *)(v14 + 108) = v17;
      *(_DWORD *)(v14 + 112) = 1065353216;
      *(float *)(v14 + 116) = v17;
      ++v13;
      *(_DWORD *)(v14 + 120) = 1065353216;
      *(float *)(v14 + 124) = v17;
      v14 += 256;
    }
    while (v13 != 16);
  }
  uint64_t v18 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
  uint64_t v19 = ggl::BufferData::BufferData((uint64_t)&v18[1], 2, 1, 0, 6, 1350);
  uint64_t v20 = 0;
  LODWORD(v18[10].__vftable) = 0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
  v18[1].__shared_owners_ = 2;
  v18[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
  v18[9].__shared_weak_owners_ = (uint64_t)"/GridIndexData";
  long double v21 = (_WORD *)&v18[4].__vftable[2].~__shared_weak_count_0 + 1;
  do
  {
    __int16 v22 = 16 * v20 + 16;
    *(v21 - 45) = v22;
    __int16 v23 = (16 * v20) | 1;
    *(v21 - 44) = v23;
    __int16 v24 = 16 * v20 + 17;
    *(v21 - 43) = v24;
    *(v21 - 42) = v22;
    *(v21 - 41) = 16 * v20;
    *(v21 - 40) = v23;
    __int16 v25 = 16 * v20 + 18;
    __int16 v26 = (16 * v20) | 2;
    *(v21 - 39) = v24;
    *(v21 - 38) = v26;
    *(v21 - 37) = v25;
    *(v21 - 36) = v24;
    *(v21 - 35) = v23;
    *(v21 - 34) = v26;
    __int16 v27 = 16 * v20 + 19;
    __int16 v28 = (16 * v20) | 3;
    *(v21 - 33) = v25;
    *(v21 - 32) = v28;
    *(v21 - 31) = v27;
    *(v21 - 30) = v25;
    *(v21 - 29) = v26;
    *(v21 - 28) = v28;
    __int16 v29 = 16 * v20 + 20;
    __int16 v30 = (16 * v20) | 4;
    *(v21 - 27) = v27;
    *(v21 - 26) = v30;
    *(v21 - 25) = v29;
    *(v21 - 24) = v27;
    *(v21 - 23) = v28;
    *(v21 - 22) = v30;
    __int16 v31 = 16 * v20 + 21;
    __int16 v32 = (16 * v20) | 5;
    *(v21 - 21) = v29;
    *(v21 - 20) = v32;
    *(v21 - 19) = v31;
    *(v21 - 18) = v29;
    *(v21 - 17) = v30;
    *(v21 - 16) = v32;
    __int16 v33 = 16 * v20 + 22;
    __int16 v34 = (16 * v20) | 6;
    *(v21 - 15) = v31;
    *(v21 - 14) = v34;
    *(v21 - 13) = v33;
    *(v21 - 12) = v31;
    *(v21 - 11) = v32;
    *(v21 - 10) = v34;
    __int16 v35 = 16 * v20 + 23;
    __int16 v36 = (16 * v20) | 7;
    *(v21 - 9) = v33;
    *(v21 - 8) = v36;
    *(v21 - 7) = v35;
    *(v21 - 6) = v33;
    *(v21 - 5) = v34;
    *(v21 - 4) = v36;
    __int16 v37 = 16 * v20 + 24;
    __int16 v38 = (16 * v20) | 8;
    *(v21 - 3) = v35;
    *(v21 - 2) = v38;
    *(v21 - 1) = v37;
    _WORD *v21 = v35;
    v21[1] = v36;
    void v21[2] = v38;
    __int16 v39 = 16 * v20 + 25;
    __int16 v40 = (16 * v20) | 9;
    v21[3] = v37;
    v21[4] = v40;
    v21[5] = v39;
    v21[6] = v37;
    v21[7] = v38;
    v21[8] = v40;
    __int16 v41 = 16 * v20 + 26;
    __int16 v42 = (16 * v20) | 0xA;
    v21[9] = v39;
    v21[10] = v42;
    v21[11] = v41;
    v21[12] = v39;
    v21[13] = v40;
    v21[14] = v42;
    __int16 v43 = 16 * v20 + 27;
    __int16 v44 = (16 * v20) | 0xB;
    unsigned char v21[15] = v41;
    v21[16] = v44;
    v21[17] = v43;
    v21[18] = v41;
    v21[19] = v42;
    v21[20] = v44;
    __int16 v45 = 16 * v20 + 28;
    __int16 v46 = (16 * v20) | 0xC;
    v21[21] = v43;
    v21[22] = v46;
    v21[23] = v45;
    v21[24] = v43;
    v21[25] = v44;
    v21[26] = v46;
    __int16 v47 = 16 * v20 + 29;
    v21[27] = v45;
    v21[28] = (16 * v20) | 0xD;
    v21[29] = v47;
    v21[30] = v45;
    v21[31] = v46;
    v21[32] = (16 * v20) | 0xD;
    __int16 v48 = (16 * v20) | 0xE;
    v21[33] = v47;
    v21[34] = v48;
    v21[35] = 16 * v20 + 30;
    v21[36] = v47;
    v21[37] = (16 * v20) | 0xD;
    v21[38] = v48;
    __int16 v49 = (16 * v20) | 0xF;
    v21[39] = 16 * v20 + 30;
    v21[40] = v49;
    v21[41] = 16 * v20 + 31;
    v21[42] = 16 * v20++ + 30;
    v21[43] = v48;
    v21[44] = v49;
    v21 += 90;
  }
  while (v20 != 15);
  uint64_t v50 = *(void *)this;
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  double v51 = *(std::__shared_weak_count **)(v50 + 104);
  *(void *)(v50 + 96) = v19;
  *(void *)(v50 + 104) = v18;
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  unint64_t shared_weak_owners = v18[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xA8C) {
    unint64_t shared_weak_owners = 2700;
  }
  v18[3].__shared_owners_ = 0;
  v18[3].__shared_weak_owners_ = shared_weak_owners;
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v57 && v56)
  {
    if ((void)v55 && *(unsigned char *)(*((void *)&v55 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v55 + 64))();
    }
    uint64_t v54 = *(void *)(*((void *)&v55 + 1) + 56);
    unint64_t v53 = *(void *)(*((void *)&v55 + 1) + 64);
    if (v53 == v54) {
      uint64_t v54 = *(void *)(*((void *)&v55 + 1) + 80) - *(void *)(*((void *)&v55 + 1) + 72);
    }
    if (v54) {
      uint64_t v54 = 0;
    }
    if (v53 <= v56) {
      unint64_t v53 = v56;
    }
    if (v53 == v54) {
      unint64_t v53 = v54 + *(void *)(*((void *)&v55 + 1) + 80) - *(void *)(*((void *)&v55 + 1) + 72);
    }
    *(void *)(*((void *)&v55 + 1) + 56) = v54;
    *(void *)(*((void *)&v55 + 1) + 64) = v53;
  }
}

void sub_1A1B510A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v9);
  _Unwind_Resume(a1);
}

void md::EntityDebugHighlightLogic::runBeforeLayout(float32x2_t *a1, uint64_t a2, void *a3, md::DebugDrawContext *this)
{
  unint64_t v8 = this;
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  md::DebugDrawContext::clearDebugDrawContext(this);
  long long v11 = +[VKDebugSettings sharedSettings];
  uint64_t v12 = a1;
  a1[35].i8[1] = [v11 daVinciEntityDebugHighlighting];

  if (!a1[35].i8[1])
  {
    if (a1[34].i8[0]) {
      a1[34].i8[0] = 0;
    }
    if (a1[18].i8[0]) {
      a1[18].i8[0] = 0;
    }
    return;
  }
  if (a1[18].i8[0])
  {
    uint64_t v149 = v8;
    uint64_t v151 = (uint64_t *)a3[2];
    uint64_t v152 = *a3;
    float64x2_t v13 = vcvtq_f64_f32(a1[17]);
    uint64_t v14 = *(void *)(*a3 + 5584);
    if (!v14) {
      uint64_t v14 = *a3;
    }
    uint64_t v15 = *(void *)(*(void *)(a2 + 88) + 16);
    float64x2_t v16 = vsubq_f64(v13, vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(*(float64x2_t *)(v15 + 368), vcvtq_f64_f32(*(float32x2_t *)(v15 + 488))))));
    float64x2_t v17 = vdivq_f64(vaddq_f64(v16, v16), *(float64x2_t *)(v15 + 368));
    gdc::ViewDataAccess::worldRayFromScreenNormalizedPoint((uint64_t)v165, v15, (double *)(v14 + 8), v17.f64[0] + -1.0, 1.0 - v17.f64[1]);
    float32x2_t v18 = a1[15];
    uint64_t v19 = *(int8x8_t ***)(*(void *)&v18 + 384);
    uint64_t v20 = *(int8x8_t ***)(*(void *)&v18 + 392);
    if (v19 != v20)
    {
      long double v21 = 0;
      unint64_t v22 = 0;
      __int16 v23 = 0;
      __int16 v24 = 0;
      *(void *)&long long v163 = 0x3E5ACB157F7410BCLL;
      *(void *)&long long v162 = 0x3FEFE488A57B0C1FLL;
      *(void *)&long long v161 = 0x40E4EB29F7EAC4C2;
      *(void *)&long long v160 = 0x40E4D93586D13538;
      *(void *)&long long v158 = 0x415854A640000000;
      __asm { FMOV            V0.2S, #1.0 }
      uint64_t v153 = _D0;
      while (1)
      {
        uint64_t v4 = *v19;
        uint64_t v30 = gdc::Registry::storage<md::components::SupportsDebugHighlight>(*v19);
        if (*(void *)(v30 + 88) != *(void *)(v30 + 80))
        {
          unint64_t v31 = (unint64_t)v4[1];
          if ((v31 & (v31 - 1)) != 0)
          {
            unint64_t v33 = 0x64A448A5CD5D38DBLL;
            if (v31 <= 0x64A448A5CD5D38DBLL) {
              unint64_t v33 = 0x64A448A5CD5D38DBLL % v31;
            }
            __int16 v32 = *(void **)(*(void *)v4 + 8 * v33);
            do
            {
              do
                __int16 v32 = (void *)*v32;
              while (v32[1] != 0x64A448A5CD5D38DBLL);
            }
            while (v32[2] != 0x64A448A5CD5D38DBLL);
          }
          else
          {
            __int16 v32 = *(void **)(*(void *)v4 + 8 * ((v31 - 1) & 0x64A448A5CD5D38DBLL));
            do
            {
              do
                __int16 v32 = (void *)*v32;
              while (v32[1] != 0x64A448A5CD5D38DBLL);
            }
            while (v32[2] != 0x64A448A5CD5D38DBLL);
          }
          uint64_t v34 = *(void *)(v32[5] + 32);
          char v35 = *(unsigned char *)(v34 + 1);
          double v36 = (double)(1 << v35);
          double v156 = (double)((1 << v35) + ~*(_DWORD *)(v34 + 4));
          __powidf2();
          *(double *)&long long v164 = v37 * 0.0000000249532021;
          long double v38 = *(double *)v165;
          long double v39 = *(double *)&v165[1];
          double v40 = v166;
          double v41 = sqrt(v38 * v38 + v39 * v39);
          double v42 = atan2(v166, v41 * 0.996647189);
          double v43 = atan2(v39, v38);
          __double2 v44 = __sincos_stret(v42);
          double v45 = atan2(v40 + v44.__sinval * v44.__sinval * 42841.3115 * v44.__sinval, v41 - v44.__cosval * v44.__cosval * 42697.6727 * v44.__cosval);
          __double2 v46 = __sincos_stret(v45);
          long double v47 = tan(v45 * 0.5 + 0.785398163);
          long double v48 = log(v47);
          uint64_t v49 = *(int *)(v34 + 8);
          float v50 = (v43 * 0.159154943 + 0.5 - 1.0 / v36 * (double)v49) * v36;
          float v157 = v50;
          double v154 = 0.5 - 1.0 / v36 * v156;
          *(float *)&long double v48 = (v154 + v48 * 0.159154943) * v36;
          LODWORD(v156) = LODWORD(v48);
          *(float *)&long double v48 = v41 / v46.__cosval - 6378137.0 / sqrt(1.0 - v46.__sinval * v46.__sinval * 0.00669437999);
          *(float *)&long double v48 = *(double *)&v164 * *(float *)&v48;
          float v155 = *(float *)&v48;
          long double v51 = v38 + v167 * 100.0;
          long double v52 = v39 + v168 * 100.0;
          long double v53 = v40 + v169 * 100.0;
          double v54 = sqrt(v51 * v51 + v52 * v52);
          double v55 = atan2(v53, v54 * 0.996647189);
          double v5 = atan2(v52, v51);
          __double2 v56 = __sincos_stret(v55);
          double v6 = atan2(v53 + v56.__sinval * v56.__sinval * 42841.3115 * v56.__sinval, v54 - v56.__cosval * v56.__cosval * 42697.6727 * v56.__cosval);
          __double2 v57 = __sincos_stret(v6);
          double v7 = v54 / v57.__cosval - 6378137.0 / sqrt(1.0 - v57.__sinval * v57.__sinval * 0.00669437999);
          long double v58 = tan(v6 * 0.5 + 0.785398163);
          long double v59 = log(v58);
          float v60 = (0.5 - 1.0 / v36 * (double)v49 + v5 * 0.159154943) * v36;
          *(float *)&long double v59 = (v154 + v59 * 0.159154943) * v36;
          float v61 = v7;
          float v62 = *(double *)&v164 * v61;
          float v63 = v60 - v157;
          *(float *)&long double v59 = *(float *)&v59 - *(float *)&v156;
          float v64 = v62 - v155;
          float v65 = 1.0 / sqrtf((float)((float)(v63 * v63) + (float)(*(float *)&v59 * *(float *)&v59)) + (float)(v64 * v64));
          *(float *)int32x4_t v174 = v157;
          *(_DWORD *)&v174[4] = LODWORD(v156);
          *(float *)&v174[8] = v155;
          *(float *)&v174[12] = v65 * v63;
          *(float *)&v174[16] = v65 * *(float *)&v59;
          *(float *)&v174[20] = v65 * v64;
          double v66 = *(double *)(v34 + 440) * 0.0000000249532021;
          *(float *)&long double v59 = *(double *)(v34 + 432) * 0.0000000249532021;
          *(void *)__int16 v173 = 0;
          *(_DWORD *)&v173[8] = LODWORD(v59);
          *(void *)&v173[12] = v153;
          *(float *)&long double v59 = v66;
          *(_DWORD *)&v173[20] = LODWORD(v59);
          LODWORD(v187[0]) = 0;
          LODWORD(v185) = 0;
          if (gm::Ray<float,3>::segmentIntersectsBox((float *)v174, (float *)v173, (float *)v187, (float *)&v185))
          {
            double v5 = *(float *)v187;
            float64x2_t v170 = *(float64x2_t *)v174;
            v171.f64[0] = *(float64_t *)&v174[16];
            if (v22 < (unint64_t)v21)
            {
              *(double *)unint64_t v22 = v5;
              float64_t v29 = v171.f64[0];
              *(float64x2_t *)(v22 + 8) = v170;
              *(float64_t *)(v22 + 24) = v29;
              *(void *)(v22 + 32) = v4;
              v22 += 40;
            }
            else
            {
              unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (void)v24) >> 3) + 1;
              if (v67 > 0x666666666666666) {
                goto LABEL_178;
              }
              if (0x999999999999999ALL * ((v21 - v24) >> 3) > v67) {
                unint64_t v67 = 0x999999999999999ALL * ((v21 - v24) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((v21 - v24) >> 3) >= 0x333333333333333) {
                unint64_t v68 = 0x666666666666666;
              }
              else {
                unint64_t v68 = v67;
              }
              if (v68)
              {
                if (v68 > 0x666666666666666) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                unint64_t v69 = (char *)operator new(40 * v68);
              }
              else
              {
                unint64_t v69 = 0;
              }
              double v70 = &v69[8 * ((uint64_t)(v22 - (void)v24) >> 3)];
              *(double *)double v70 = v5;
              *(_OWORD *)(v70 + 8) = *(_OWORD *)v174;
              *((void *)v70 + 3) = *(void *)&v174[16];
              *((void *)v70 + 4) = v4;
              if ((char *)v22 == v24)
              {
                __int16 v23 = &v69[8 * ((uint64_t)(v22 - (void)v24) >> 3)];
              }
              else
              {
                double v71 = &v69[8 * ((uint64_t)(v22 - (void)v24) >> 3)];
                do
                {
                  __int16 v23 = v71 - 40;
                  long long v72 = *(_OWORD *)(v22 - 40);
                  long long v73 = *(_OWORD *)(v22 - 24);
                  *((void *)v71 - 1) = *(void *)(v22 - 8);
                  *(_OWORD *)(v71 - 24) = v73;
                  *(_OWORD *)(v71 - 40) = v72;
                  v22 -= 40;
                  v71 -= 40;
                }
                while ((char *)v22 != v24);
              }
              long double v21 = &v69[40 * v68];
              unint64_t v22 = (unint64_t)(v70 + 40);
              if (v24) {
                operator delete(v24);
              }
              __int16 v24 = v23;
            }
          }
        }
        if (++v19 == v20) {
          goto LABEL_53;
        }
      }
    }
    unint64_t v22 = 0;
    __int16 v23 = 0;
LABEL_53:
    unint64_t v79 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (void)v23) >> 3));
    if ((char *)v22 == v23) {
      uint64_t v80 = 0;
    }
    else {
      uint64_t v80 = v79;
    }
    std::__introsort<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,false>((uint64_t)v23, v22, v80, 1);
    if ((char *)v22 == v23) {
      goto LABEL_145;
    }
    double v81 = 0.0;
    float v82 = v23;
    while (1)
    {
      long long v83 = *(_OWORD *)(v82 + 8);
      BOOL v84 = (int8x8_t *)*((void *)v82 + 4);
      uint64_t v186 = *((void *)v82 + 3);
      long long v185 = v83;
      int8x8_t v85 = v84[1];
      if (!*(void *)&v85) {
        goto LABEL_82;
      }
      uint8x8_t v86 = (uint8x8_t)vcnt_s8(v85);
      v86.i16[0] = vaddlv_u8(v86);
      if (v86.u32[0] > 1uLL)
      {
        uint64_t v87 = 0x64A448A5CD5D38DBLL;
        if (*(void *)&v85 <= 0x64A448A5CD5D38DBuLL) {
          uint64_t v87 = 0x64A448A5CD5D38DBuLL % *(void *)&v85;
        }
      }
      else
      {
        uint64_t v87 = (*(void *)&v85 - 1) & 0x64A448A5CD5D38DBLL;
      }
      __int16 v88 = *(void **)(*(void *)v84 + 8 * v87);
      if (!v88) {
        goto LABEL_82;
      }
      double v89 = (void *)*v88;
      if (!v89) {
        goto LABEL_82;
      }
      if (v86.u32[0] < 2uLL)
      {
        uint64_t v90 = *(void *)&v85 - 1;
        while (1)
        {
          uint64_t v91 = v89[1];
          if (v91 == 0x64A448A5CD5D38DBLL)
          {
            if (v89[2] == 0x64A448A5CD5D38DBLL) {
              goto LABEL_80;
            }
          }
          else if ((v91 & v90) != v87)
          {
            goto LABEL_82;
          }
          double v89 = (void *)*v89;
          if (!v89) {
            goto LABEL_82;
          }
        }
      }
      while (1)
      {
        unint64_t v92 = v89[1];
        if (v92 == 0x64A448A5CD5D38DBLL) {
          break;
        }
        if (v92 >= *(void *)&v85) {
          v92 %= *(void *)&v85;
        }
        if (v92 != v87) {
          goto LABEL_82;
        }
LABEL_74:
        double v89 = (void *)*v89;
        if (!v89) {
          goto LABEL_82;
        }
      }
      if (v89[2] != 0x64A448A5CD5D38DBLL) {
        goto LABEL_74;
      }
LABEL_80:
      uint64_t v93 = v89[5];
      if (*(void *)(v93 + 8) == 0x64A448A5CD5D38DBLL)
      {
        uint64_t v94 = *(void *)(v93 + 32);
        goto LABEL_83;
      }
LABEL_82:
      uint64_t v94 = 0;
LABEL_83:
      md::GeometryContext::transformConstantData((double *)&v183, v151, (unsigned __int8 *)v94, *(unsigned __int8 *)(v152 + 3776), *(double *)(v94 + 432), *(double *)(v94 + 440));
      double v95 = (void *)gdc::Registry::storage<md::components::MeshInstance>(v84);
      uint64_t v96 = gdc::Registry::storage<md::components::SupportsDebugHighlight>(v84);
      double v97 = (void *)v96;
      uint64_t v159 = v94;
      *(void *)&long long v160 = v84;
      *(void *)&long long v161 = v82;
      uint64_t v99 = v95[7];
      uint64_t v98 = v95[8];
      *(void *)&long long v163 = v96 + 32;
      if (*(void *)(v96 + 64) - *(void *)(v96 + 56) >= (unint64_t)(v98 - v99)) {
        unint64_t v100 = v95 + 4;
      }
      else {
        unint64_t v100 = (void *)(v96 + 32);
      }
      *(void *)&long long v162 = v100;
      if (v95 + 4 == v100 && v99 != v98)
      {
        LODWORD(v164) = 0;
        uint64_t v104 = v95[10] + 36;
        while (1)
        {
          unint64_t v108 = *(unsigned int *)(v99 + 4);
          uint64_t v109 = v97[4];
          if (v108 >> 7 >= (v97[5] - v109) >> 3) {
            goto LABEL_103;
          }
          uint64_t v110 = *(void *)(v109 + 8 * (v108 >> 7));
          if (!v110) {
            goto LABEL_103;
          }
          unint64_t v111 = *(unsigned __int16 *)(v110 + 2 * (v108 & 0x7F));
          uint64_t v113 = v97[7];
          uint64_t v112 = v97[8];
          if (v111 >= (v112 - v113) >> 3) {
            goto LABEL_103;
          }
          uint64_t v114 = v113 + 8 * v111;
          if (v114 == v112 || *(_DWORD *)(v114 + 4) != v108) {
            goto LABEL_103;
          }
          double v107 = *(int8x8_t **)v99;
          *(_DWORD *)__int16 v173 = 0;
          LODWORD(v170.f64[0]) = 0;
          md::GeometryLogic::adjustedMeshBounds((uint64_t)v174, v104, v183);
          if (gm::Ray<float,3>::segmentIntersectsBox((float *)&v185, (float *)v174, (float *)v173, (float *)&v170))
          {
            if (!v164)
            {
              double v6 = *(double *)&v174[8];
              double v5 = *(double *)v174;
              double v81 = *(float *)v173;
              LODWORD(v164) = 1;
              goto LABEL_117;
            }
            if (v81 > *(float *)v173)
            {
              double v6 = *(double *)&v174[8];
              double v5 = *(double *)v174;
              LODWORD(v164) = 1;
              double v81 = *(float *)v173;
LABEL_117:
              double v7 = *(double *)&v174[16];
              goto LABEL_102;
            }
            LODWORD(v164) = 1;
          }
          double v107 = v4;
LABEL_102:
          uint64_t v4 = v107;
LABEL_103:
          v99 += 8;
          v104 += 112;
          if (v99 == v98) {
            goto LABEL_92;
          }
        }
      }
      LODWORD(v164) = 0;
LABEL_92:
      if ((void)v163 == (void)v162) {
        break;
      }
      int v102 = v164;
LABEL_94:
      if (v102)
      {
        double v136 = *(double *)(v159 + 80);
        double v137 = *(double *)(v159 + 88);
        double v138 = *(double *)(v159 + 96);
        double v139 = *(double *)(v159 + 104);
        double v140 = *(double *)(v159 + 112);
        double v141 = *(double *)(v159 + 120);
        long long v176 = 0u;
        *(void *)&long long v178 = 0;
        *(_OWORD *)&v174[8] = 0u;
        long long v175 = 0u;
        long long v177 = 0u;
        *(void *)&long long v179 = 0;
        uint64_t v182 = 0x3FF0000000000000;
        *(double *)int32x4_t v174 = v139 - v136;
        *(double *)&long long v176 = v140 - v137;
        *((double *)&v178 + 1) = v141 - v138;
        *((double *)&v179 + 1) = v136;
        double v180 = v137;
        double v181 = v138;
        float64x2_t v170 = vcvtq_f64_f32(*(float32x2_t *)&v5);
        float64x2_t v171 = vcvtq_f64_f32(*(float32x2_t *)&v6);
        float64x2_t v172 = vcvtq_f64_f32(*(float32x2_t *)&v7);
        *(int64x2_t *)__int16 v173 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        *(_OWORD *)&v173[16] = xmmword_1A28FC720;
        *(int64x2_t *)&v173[32] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v187[0] = &unk_1EF57D5A8;
        v187[1] = v173;
        v187[2] = v174;
        uint64_t v188 = v187;
        double v142 = gm::Box<double,3>::forEachCorner((uint64_t)&v170, (uint64_t)v187);
        if (v188 == v187)
        {
          (*(void (**)(void *, double))(v187[0] + 32))(v187, v142);
          uint64_t v12 = a1;
          float32x2_t v133 = (float32x2_t)v160;
        }
        else
        {
          uint64_t v12 = a1;
          float32x2_t v133 = (float32x2_t)v160;
          if (v188) {
            (*(void (**)(double))(*v188 + 40))(v142);
          }
        }
        *(void *)&long long v145 = *(void *)(v159 + 72);
        long long v163 = *(_OWORD *)&v173[8];
        long long v164 = *(_OWORD *)&v173[24];
        double v5 = *(double *)&v173[40];
        long long v158 = *(_OWORD *)(v159 + 24);
        long long v160 = *(_OWORD *)(v159 + 40);
        long long v161 = *(_OWORD *)(v159 + 56);
        *((void *)&v145 + 1) = *(void *)v173;
        long long v162 = v145;
        double v146 = v184;
        if (v184 && !atomic_fetch_add(&v184->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
        int v134 = 1;
        if (!v23)
        {
LABEL_147:
          int v135 = v12[34].u8[0];
          if (v135 == v134)
          {
            unint64_t v8 = v149;
            if (v12[34].i8[0])
            {
              LOBYTE(v135) = 0;
              v12[19] = v133;
              v12[20] = (float32x2_t)v4;
              *(_OWORD *)v12[25].f32 = v161;
              *(_OWORD *)v12[21].f32 = v158;
              *(_OWORD *)v12[23].f32 = v160;
              *(_OWORD *)v12[27].f32 = v162;
              *(_OWORD *)v12[29].f32 = v163;
              *(_OWORD *)v12[31].f32 = v164;
              *(double *)&v12[33] = v5;
              if (!v12[18].i8[0]) {
                goto LABEL_155;
              }
              goto LABEL_154;
            }
          }
          else
          {
            unint64_t v8 = v149;
            if (!v12[34].i8[0])
            {
              v12[19] = v133;
              v12[20] = (float32x2_t)v4;
              *(_OWORD *)v12[21].f32 = v158;
              *(_OWORD *)v12[23].f32 = v160;
              *(_OWORD *)v12[25].f32 = v161;
              *(_OWORD *)v12[27].f32 = v162;
              *(_OWORD *)v12[29].f32 = v163;
              *(_OWORD *)v12[31].f32 = v164;
              *(double *)&v12[33] = v5;
              v12[34].i8[0] = 1;
              if (!v12[18].i8[0]) {
                goto LABEL_155;
              }
              goto LABEL_154;
            }
            v12[34].i8[0] = 0;
          }
          LOBYTE(v135) = 1;
          if (!v12[18].i8[0])
          {
LABEL_155:
            if ((v135 & 1) == 0 && !v12[35].i8[0])
            {
LABEL_174:
              *(_OWORD *)int32x4_t v174 = *(_OWORD *)v12[21].f32;
              long long v175 = *(_OWORD *)v12[24].f32;
              *((float32x2_t *)&v176 + 1) = v12[27];
              long long v147 = *(_OWORD *)v12[30].f32;
              long long v177 = *(_OWORD *)v12[28].f32;
              float32x2_t v148 = v12[26];
              *(float32x2_t *)&v174[16] = v12[23];
              *(float32x2_t *)&long long v176 = v148;
              long long v178 = v147;
              long long v179 = *(_OWORD *)v12[32].f32;
              LODWORD(v180) = 2;
              *(_DWORD *)__int16 v173 = -16776961;
              v173[4] = 0;
              v173[8] = 0;
              v173[12] = 0;
              md::DebugDrawContext::addWorldDebugShape(v8, (uint64_t)v174, (int *)v173);
              if (LODWORD(v180) != -1) {
                ((void (*)(unsigned char *, unsigned char *))off_1EF58F5A0[LODWORD(v180)])(v173, v174);
              }
              return;
            }
            return;
          }
LABEL_154:
          v12[18].i8[0] = 0;
          goto LABEL_155;
        }
LABEL_146:
        operator delete(v23);
        goto LABEL_147;
      }
      double v103 = v184;
      if (v184 && !atomic_fetch_add(&v184->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
      float v82 = (char *)(v161 + 40);
      if ((void)v161 + 40 == v22)
      {
LABEL_145:
        float32x2_t v133 = 0;
        int v134 = 0;
        uint64_t v12 = a1;
        if (!v23) {
          goto LABEL_147;
        }
        goto LABEL_146;
      }
    }
    uint64_t v106 = v97[7];
    uint64_t v105 = v97[8];
    int v102 = v164;
    if (v106 == v105) {
      goto LABEL_94;
    }
    while (1)
    {
      unint64_t v117 = *(unsigned int *)(v106 + 4);
      uint64_t v118 = v95[4];
      unint64_t v119 = (v95[5] - v118) >> 3;
      if (v117 >> 7 >= v119) {
        goto LABEL_121;
      }
      uint64_t v120 = *(void *)(v118 + 8 * (v117 >> 7));
      if (!v120) {
        goto LABEL_121;
      }
      unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * (v117 & 0x7F));
      uint64_t v123 = v95[7];
      uint64_t v122 = v95[8];
      unint64_t v124 = (v122 - v123) >> 3;
      if (v124 <= v121) {
        goto LABEL_121;
      }
      uint64_t v125 = v123 + 8 * v121;
      if (v125 == v122 || *(_DWORD *)(v125 + 4) != v117) {
        goto LABEL_121;
      }
      double v116 = *(int8x8_t **)v106;
      unint64_t v127 = *(void *)v106 >> 39;
      if (v127 < v119
        && (uint64_t v128 = *(void *)(v118 + 8 * v127)) != 0
        && (unint64_t v129 = *(unsigned __int16 *)(v128 + 2 * (((unint64_t)v116 >> 32) & 0x7F)), v124 > v129)
        && ((uint64_t v130 = v123 + 8 * v129, v130 != v122) ? (v131 = *(_DWORD *)(v130 + 4) == HIDWORD(v116)) : (v131 = 0), v131))
      {
        uint64_t v132 = v95[10] + 112 * v129;
      }
      else
      {
        uint64_t v132 = v95[11];
      }
      *(_DWORD *)__int16 v173 = 0;
      LODWORD(v170.f64[0]) = 0;
      md::GeometryLogic::adjustedMeshBounds((uint64_t)v174, v132 + 36, v183);
      if (gm::Ray<float,3>::segmentIntersectsBox((float *)&v185, (float *)v174, (float *)v173, (float *)&v170))
      {
        if (!v102)
        {
          double v6 = *(double *)&v174[8];
          double v5 = *(double *)v174;
          double v81 = *(float *)v173;
          int v102 = 1;
          goto LABEL_143;
        }
        if (v81 > *(float *)v173)
        {
          double v6 = *(double *)&v174[8];
          double v5 = *(double *)v174;
          int v102 = 1;
          double v81 = *(float *)v173;
LABEL_143:
          double v7 = *(double *)&v174[16];
          goto LABEL_120;
        }
        int v102 = 1;
      }
      double v116 = v4;
LABEL_120:
      uint64_t v4 = v116;
LABEL_121:
      v106 += 8;
      if (v106 == v105) {
        goto LABEL_94;
      }
    }
  }
  if (!a1[34].i8[0]) {
    return;
  }
  double v74 = (void *)a1[15];
  double v75 = (unsigned __int16 *)v74[57];
  double v76 = (unsigned __int16 *)v74[58];
  if (v75 == v76)
  {
LABEL_161:
    a1[35].i8[0] = 1;
    long long v144 = (void *)v74[48];
    long long v143 = (void *)v74[49];
    if (v144 == v143) {
      return;
    }
    while (*(void *)&a1[19] != *v144)
    {
      if (++v144 == v143) {
        return;
      }
    }
    a1[35].i8[0] = 0;
    goto LABEL_174;
  }
  char v77 = 0;
  int v78 = *(unsigned __int16 *)(*(void *)&a1[19] + 40);
  do
  {
    while (1)
    {
      if (v77)
      {
        std::__throw_bad_optional_access[abi:nn180100]();
LABEL_178:
        abort();
      }
      if (v78 == *v75) {
        break;
      }
      char v77 = 0;
      if (++v75 == v76) {
        goto LABEL_161;
      }
    }
    char v77 = 1;
    a1[35].i8[0] = 1;
    a1[34].i8[0] = 0;
    ++v75;
  }
  while (v75 != v76);
}

void sub_1A1B51FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a66 != -1)
  {
    ((void (*)(char *, char *))off_1EF58F5A0[a66])(&a47, &a53);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>,std::function<void ()(gdc::Entity)>>(uint64_t *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v10 = v9;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v9);
    }
    else
    {
      uint64_t v10 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v4 = *a1;
  double v5 = *(uint64_t **)(*a1 + 56);
  for (uint64_t i = *(uint64_t **)(v4 + 64); v5 != i; ++v5)
  {
    uint64_t v8 = *v5;
    if (!v10)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(void *, uint64_t *))(*v10 + 48))(v10, &v8);
  }
  uint64_t result = (uint64_t)v10;
  if (v10 == v9) {
    return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
  }
  if (v10) {
    return (*(uint64_t (**)(void *))(*v10 + 40))(v10);
  }
  return result;
}

void sub_1A1B521F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(gdc::Entity)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>,std::function<void ()(gdc::Entity)>>(uint64_t *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v10 = v9;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v9);
    }
    else
    {
      uint64_t v10 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v4 = *a1;
  double v5 = *(uint64_t **)(*a1 + 56);
  for (uint64_t i = *(uint64_t **)(v4 + 64); v5 != i; ++v5)
  {
    uint64_t v8 = *v5;
    if (!v10)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(void *, uint64_t *))(*v10 + 48))(v10, &v8);
  }
  uint64_t result = (uint64_t)v10;
  if (v10 == v9) {
    return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
  }
  if (v10) {
    return (*(uint64_t (**)(void *))(*v10 + 40))(v10);
  }
  return result;
}

void sub_1A1B52378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(gdc::Entity)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_2,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_2>,void ()(gdc::Entity)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (void *)gdc::Registry::storage<md::overlayComponents::OverlayableFallback>(**(int8x8_t ***)(a1 + 8));
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        float64x2_t v17 = (char *)operator new(v16);
      }
      else {
        float64x2_t v17 = 0;
      }
      float32x2_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      uint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        uint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      double v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          __int16 v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          double v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      __int16 v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t gdc::Registry::storage<md::overlayComponents::OverlayableFallback>(int8x8_t *a1)
{
  unint64_t v10 = 0x974739D36332BF1ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x974739D36332BF1ELL;
    if (*(void *)&v1 <= 0x974739D36332BF1ELL) {
      unint64_t v3 = 0x974739D36332BF1ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x974739D36332BF1ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x974739D36332BF1ELL)
      {
        if (v5[2] == 0x974739D36332BF1ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x974739D36332BF1ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x974739D36332BF1ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1B52784(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>,std::function<void ()(gdc::Entity)>>(uint64_t *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      unint64_t v10 = v9;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v9);
    }
    else
    {
      unint64_t v10 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t v4 = *a1;
  char v5 = *(uint64_t **)(*a1 + 56);
  for (uint64_t i = *(uint64_t **)(v4 + 64); v5 != i; ++v5)
  {
    uint64_t v8 = *v5;
    if (!v10)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(void *, uint64_t *))(*v10 + 48))(v10, &v8);
  }
  uint64_t result = (uint64_t)v10;
  if (v10 == v9) {
    return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
  }
  if (v10) {
    return (*(uint64_t (**)(void *))(*v10 + 40))(v10);
  }
  return result;
}

void sub_1A1B52928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(gdc::Entity)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_2,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_2>,void ()(gdc::Entity)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570338;
  a2[1] = v2;
  return result;
}

uint64_t *gss::QueryableLocker<gss::ScenePropertyID>::QueryableLocker(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    a2 = *a1;
  }
  a1[2] = 0;
  a1[3] = 0;
  *((unsigned char *)a1 + 32) = 0;
  if (a2) {
    char v4 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 48))(a2, a1 + 2);
  }
  else {
    char v4 = 0;
  }
  *((unsigned char *)a1 + 32) = v4;
  return a1;
}

void sub_1A1B529F4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  char v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gss::Queryable<gss::ScenePropertyID>::lock(uint64_t a1, uint64_t a2)
{
  long long v51 = 0uLL;
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3) {
    goto LABEL_74;
  }
  *((void *)&v51 + 1) = std::__shared_weak_count::lock(v3);
  if (!*((void *)&v51 + 1)) {
    goto LABEL_74;
  }
  *(void *)&long long v51 = *(void *)(a1 + 8);
  if (!(void)v51) {
    goto LABEL_74;
  }
  char v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 32));
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  }
  if (((*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 32))(a1, &v51) & 1) == 0
    && *(void *)(a1 + 24))
  {
    goto LABEL_66;
  }
  unint64_t v7 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
  if (v7) {
    geo::read_write_lock::logFailure(v7, (uint64_t)"unlock", v8);
  }
  float v50 = (pthread_rwlock_t *)(a1 + 32);
  unint64_t v9 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 32));
  if (v9) {
    geo::read_write_lock::logFailure(v9, (uint64_t)"write lock", v10);
  }
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 32))(a1, &v51))
  {
    uint64_t v11 = *(void *)(v51 + 520);
    uint64_t v12 = *(std::__shared_weak_count **)(v51 + 528);
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_DWORD *)(a1 + 232) = *(_DWORD *)(v11 + 248);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 232) = *(_DWORD *)(v11 + 248);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    uint64_t v13 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v13) {
      std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v13);
    }
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v48, a1);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v46, a1);
  uint64_t v14 = v51;
  uint64_t v15 = *(void *)(v51 + 520);
  size_t v16 = *(std::__shared_weak_count **)(v51 + 528);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15)
  {
    uint64_t v17 = *(void *)(v14 + 520);
    float32x2_t v18 = *(std::__shared_weak_count **)(v14 + 528);
    if (!v18)
    {
      unsigned __int8 v21 = atomic_load((unsigned __int8 *)(v17 + 254));
      int v20 = v21 & 1;
      if (!v16) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v19 = atomic_load((unsigned __int8 *)(v17 + 254));
    int v20 = v19 & 1;
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!v16) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }
  }
  else
  {
    int v20 = 0;
  }
  if (!v16) {
    goto LABEL_31;
  }
LABEL_28:
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_31:
  unint64_t v22 = v48;
  if (v48)
  {
    if (!*(void *)(a1 + 24))
    {
      uint64_t v23 = *(void *)(v51 + 16);
      __int16 v24 = *(std::__shared_weak_count **)(v51 + 24);
      __double2 v44 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v25 = atomic_load((unsigned __int8 *)(v22 + 122));
      if ((v25 & 1) == 0) {
        gss::CartoStyle<gss::ScenePropertyID>::populateStyles(v22, v23);
      }
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      unint64_t v26 = v46;
      if (!v46) {
LABEL_54:
      }
        operator new();
LABEL_47:
      uint64_t v28 = *(void *)(v51 + 16);
      float64_t v29 = *(std::__shared_weak_count **)(v51 + 24);
      double v45 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v30 = atomic_load((unsigned __int8 *)(v26 + 122));
      if ((v30 & 1) == 0) {
        gss::CartoStyle<gss::ScenePropertyID>::populateStyles(v26, v28);
      }
      if (v45)
      {
        if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      goto LABEL_54;
    }
  }
  else
  {
    unint64_t v26 = v46;
    if (v46) {
      int v27 = v20;
    }
    else {
      int v27 = 0;
    }
    if (v27 == 1 && !*(void *)(a1 + 24)) {
      goto LABEL_47;
    }
  }
  unint64_t v31 = v47;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  __int16 v32 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  unint64_t v33 = (geo::read_write_lock *)pthread_rwlock_unlock(v50);
  if (v33) {
    geo::read_write_lock::logFailure(v33, (uint64_t)"unlock", v34);
  }
  char v35 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 32));
  if (v35) {
    geo::read_write_lock::logFailure(v35, (uint64_t)"read lock", v36);
  }
  if (!*(void *)(a1 + 24))
  {
    double v41 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
    if (v41) {
      geo::read_write_lock::logFailure(v41, (uint64_t)"unlock", v42);
    }
LABEL_74:
    uint64_t v39 = 0;
    double v40 = (std::__shared_weak_count *)*((void *)&v51 + 1);
    if (!*((void *)&v51 + 1)) {
      return v39;
    }
    goto LABEL_75;
  }
LABEL_66:
  if (a2)
  {
    long long v37 = v51;
    long long v51 = 0uLL;
    long double v38 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v37;
    if (v38)
    {
      if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  uint64_t v39 = 1;
  double v40 = (std::__shared_weak_count *)*((void *)&v51 + 1);
  if (*((void *)&v51 + 1))
  {
LABEL_75:
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v39;
}

void sub_1A1B533B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v12 = va_arg(va4, pthread_rwlock_t *);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va4);
  _Unwind_Resume(a1);
}

BOOL gss::Queryable<gss::ScenePropertyID>::needsUpdate(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 232);
  uint64_t v3 = *(void *)(*(void *)a2 + 520);
  char v4 = *(std::__shared_weak_count **)(*(void *)a2 + 528);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v3)
  {
    int v7 = 0;
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(*(void *)a2 + 520);
  uint64_t v6 = *(std::__shared_weak_count **)(*(void *)a2 + 528);
  if (!v6)
  {
    int v7 = *(_DWORD *)(v5 + 248);
    if (!v4) {
      return v2 != v7;
    }
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  int v7 = *(_DWORD *)(v5 + 248);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    if (!v4) {
      return v2 != v7;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v4) {
    return v2 != v7;
  }
LABEL_10:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v2 != v7;
}

void gss::StylesheetQuery<gss::ScenePropertyID>::getAttributeMapForStyle(uint64_t a1, uint64_t *a2, int a3)
{
  if (*((unsigned char *)a2 + 14)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *a2 == 0;
  }
  if (!v6)
  {
    uint64_t v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 40))(v7, *a2, *((unsigned __int16 *)a2 + 6));
  }
  *(uint64_t *)((char *)a2 + 7) = 0;
  *a2 = 0;
  *((unsigned char *)a2 + 15) = 1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    unsigned __int8 v21 = v9;
    if (v9)
    {
      unint64_t v10 = v9;
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v20 = v11;
      if (!v11) {
        goto LABEL_22;
      }
      uint64_t v12 = a1 + 272;
      if (a3)
      {
        gss::StylesheetManager<gss::ScenePropertyID>::targetStyleAttributes(&v18, v11, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), v12);
        int v14 = *((unsigned __int8 *)a2 + 14);
        if (&v18 != a2)
        {
          if (*((unsigned char *)a2 + 14) || !*a2) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else
      {
        gss::StylesheetManager<gss::ScenePropertyID>::sourceStyleAttributes(&v18, v11, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), v12);
        int v14 = *((unsigned __int8 *)a2 + 14);
        if (&v18 != a2)
        {
          if (*((unsigned char *)a2 + 14) || !*a2) {
            goto LABEL_18;
          }
LABEL_17:
          uint64_t v15 = gss::Allocator::instance(v13);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v15 + 40))(v15, *a2, *((unsigned __int16 *)a2 + 6));
          *a2 = 0;
LABEL_18:
          uint64_t v16 = v19;
          *a2 = v18;
          *((_DWORD *)a2 + 2) = v16;
          *((_WORD *)a2 + 6) = WORD2(v16);
          *((_WORD *)a2 + 7) = HIWORD(v19);
LABEL_22:
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
      }
      if (!v14 && *a2)
      {
        uint64_t v17 = gss::Allocator::instance(v13);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v17 + 40))(v17, *a2, *((unsigned __int16 *)a2 + 6));
      }
      goto LABEL_22;
    }
  }
}

void sub_1A1B53740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void gss::StylesheetQuery<gss::ScenePropertyID>::resolve(uint64_t a1)
{
  uint64_t v40 = 0;
  double v41 = 0;
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2 || (v41 = std::__shared_weak_count::lock(v2)) == 0 || (v3 = *(void *)(a1 + 8), (uint64_t v40 = v3) == 0))
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
LABEL_32:
    uint64_t v23 = *(std::__shared_weak_count **)(a1 + 296);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_34;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  char v4 = *(std::__shared_weak_count **)(v3 + 24);
  uint64_t v38 = v5;
  uint64_t v39 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5) {
    goto LABEL_32;
  }
  gss::StylesheetManager<gss::ScenePropertyID>::sourceStyleAttributes(&v36, v3, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), a1 + 272);
  gss::StyleSheet<gss::ScenePropertyID>::styleMatchingAttributes(&v34, v5, (uint64_t)&v36);
  uint64_t v6 = v34;
  uint64_t v7 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 296);
  *(void *)(a1 + 288) = v6;
  *(void *)(a1 + 296) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v7 = v35;
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (!BYTE6(v37) && v36)
  {
    uint64_t v9 = gss::Allocator::instance((gss::Allocator *)v8);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 40))(v9, v36, WORD2(v37));
  }
  if (!v38) {
    goto LABEL_34;
  }
  uint64_t v10 = *(void *)(v40 + 520);
  uint64_t v11 = *(std::__shared_weak_count **)(v40 + 528);
  uint64_t v36 = v10;
  long long v37 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (pthread_rwlock_t *)(v10 + 16);
  uint64_t v13 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v10 + 16));
  if (v13) {
    geo::read_write_lock::logFailure(v13, (uint64_t)"read lock", v14);
  }
  unint64_t v15 = *(unsigned __int16 *)(v10 + 242);
  if (v15 != *(unsigned __int16 *)(v10 + 226)) {
    goto LABEL_43;
  }
  if (!*(_WORD *)(v10 + 242))
  {
    BOOL v27 = 0;
    goto LABEL_48;
  }
  uint64_t v16 = *(_DWORD **)(v10 + 232);
  uint64_t v17 = *(_DWORD **)(v10 + 216);
  if (*v16 != *v17
    || (uint64_t v18 = (unsigned __int16 *)((char *)v17 + *(unsigned __int16 *)(v10 + 224)),
        uint64_t v19 = (unsigned __int16 *)((char *)v16 + *(unsigned __int16 *)(v10 + 240)),
        *v19 != *v18))
  {
LABEL_43:
    BOOL v27 = 1;
    goto LABEL_48;
  }
  unint64_t v20 = 0;
  uint64_t v21 = 1;
  while (1)
  {
    if (v15 == v21)
    {
      unint64_t v22 = *(unsigned __int16 *)(v10 + 242);
      goto LABEL_47;
    }
    unint64_t v22 = v21;
    ++v20;
    if (v16[v21] != v17[v21]) {
      break;
    }
    ++v21;
    if (v19[v22] != v18[v22]) {
      goto LABEL_47;
    }
  }
  unint64_t v22 = v20;
LABEL_47:
  BOOL v27 = v22 < v15;
LABEL_48:
  uint64_t v28 = (geo::read_write_lock *)pthread_rwlock_unlock(v12);
  if (v28) {
    geo::read_write_lock::logFailure(v28, (uint64_t)"unlock", v29);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v27)
  {
    gss::StylesheetManager<gss::ScenePropertyID>::targetStyleAttributes(&v36, v40, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), a1 + 272);
    gss::StyleSheet<gss::ScenePropertyID>::styleMatchingAttributes(&v34, v38, (uint64_t)&v36);
    uint64_t v30 = v34;
    unint64_t v31 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v32 = *(std::__shared_weak_count **)(a1 + 312);
    *(void *)(a1 + 304) = v30;
    *(void *)(a1 + 312) = v31;
    if (v32)
    {
      std::__shared_weak_count::__release_weak(v32);
      unint64_t v31 = v35;
    }
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    if (!BYTE6(v37) && v36)
    {
      uint64_t v33 = gss::Allocator::instance((gss::Allocator *)v32);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v33 + 40))(v33, v36, WORD2(v37));
    }
    goto LABEL_36;
  }
LABEL_34:
  __int16 v24 = *(std::__shared_weak_count **)(a1 + 312);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_36:
  unsigned __int8 v25 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  unint64_t v26 = v41;
  if (v41)
  {
    if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1A1B53B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *gss::StylesheetQuery<gss::ScenePropertyID>::targetCartoStyle@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = *(std::__shared_weak_count **)(a1 + 312);
  if (result)
  {
    uint64_t result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result) {
      *a2 = *(void *)(a1 + 304);
    }
  }
  return result;
}

std::__shared_weak_count *gss::StylesheetQuery<gss::ScenePropertyID>::sourceCartoStyle@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = *(std::__shared_weak_count **)(a1 + 296);
  if (result)
  {
    uint64_t result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result) {
      *a2 = *(void *)(a1 + 288);
    }
  }
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a2, a3);
  if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a4, *a3))
  {
    unint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2))
    {
      unint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1))
      {
        unint64_t v12 = *a1;
        *a1 = *a2;
        *a2 = v12;
      }
    }
  }
  BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a5, *a4);
  if (result)
  {
    unint64_t v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a4, *a3);
    if (result)
    {
      unint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2);
      if (result)
      {
        unint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
        if (result)
        {
          unint64_t v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a2, a3);
  if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a4, *a3))
  {
    unint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2))
    {
      unint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1))
      {
        unint64_t v12 = *a1;
        *a1 = *a2;
        *a2 = v12;
      }
    }
  }
  BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a5, *a4);
  if (result)
  {
    unint64_t v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a4, *a3);
    if (result)
    {
      unint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2);
      if (result)
      {
        unint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
        if (result)
        {
          unint64_t v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  BOOL v6 = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
  BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2);
  if (v6)
  {
    unint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, v8);
      if (result)
      {
        unint64_t v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    unint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
    if (result)
    {
      unint64_t v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

{
  BOOL v6;
  BOOL result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  BOOL v6 = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
  BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2);
  if (v6)
  {
    unint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, v8);
      if (result)
      {
        unint64_t v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    unint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
    if (result)
    {
      unint64_t v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(unint64_t *a1, int8x16_t *a2, uint64_t a3, char a4)
{
BOOL md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(unint64_t a1, unint64_t a2)
{
  BOOL v4 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)a1 + 56))(a1);
  double v5 = *(double *)(md::LabelPoint::mercatorPoint(v4) + 8);
  BOOL v6 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  if (v5 == *(double *)(md::LabelPoint::mercatorPoint(v6) + 8)) {
    return a1 < a2;
  }
  unint64_t v8 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)a1 + 56))(a1);
  double v9 = *(double *)(md::LabelPoint::mercatorPoint(v8) + 8);
  uint64_t v10 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  return v9 < *(double *)(md::LabelPoint::mercatorPoint(v10) + 8);
}

{
  uint64_t v4;
  uint64_t v5;
  double v6;
  long double v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  uint64_t v15;
  uint64_t v16;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  __double2 v23;
  double v24;
  __double2 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  long double v30;
  long double v31;
  double v32;
  long double v33;
  double v34;
  __double2 v35;
  double v36;
  __double2 v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  long double v41;
  long double v42;
  double v43;
  long double v44;
  double v45;
  __double2 v46;
  double v47;
  __double2 v48;

  BOOL v4 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 56))(a1);
  double v5 = v4;
  if (*(unsigned char *)(v4 + 44))
  {
    BOOL v6 = *(double *)(v4 + 8);
  }
  else
  {
    uint64_t v7 = *(double *)(v4 + 24) * 6.28318531;
    unint64_t v8 = exp(*(double *)(v4 + 32) * 6.28318531 + -3.14159265);
    double v9 = atan(v8) * 2.0 + -1.57079633;
    uint64_t v10 = fmod(v7, 6.28318531);
    unint64_t v11 = fmod(v10 + 6.28318531, 6.28318531) + -3.14159265;
    unint64_t v12 = __sincos_stret(v9);
    uint64_t v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
    unint64_t v14 = __sincos_stret(v11);
    BOOL v6 = v13 * v12.__cosval * v14.__sinval;
    *(double *)double v5 = v13 * v12.__cosval * v14.__cosval;
    *(double *)(v5 + 8) = v6;
    *(double *)(v5 + 16) = v12.__sinval * 0.99330562 * v13;
    *(unsigned char *)(v5 + 44) = 1;
  }
  uint64_t v15 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  unint64_t v16 = v15;
  if (*(unsigned char *)(v15 + 44))
  {
    if (v6 == *(double *)(v15 + 8)) {
      return a1 < a2;
    }
  }
  else
  {
    long double v18 = *(double *)(v15 + 24) * 6.28318531;
    long double v19 = exp(*(double *)(v15 + 32) * 6.28318531 + -3.14159265);
    long double v20 = atan(v19) * 2.0 + -1.57079633;
    double v21 = fmod(v18, 6.28318531);
    double v22 = fmod(v21 + 6.28318531, 6.28318531) + -3.14159265;
    double v23 = __sincos_stret(v20);
    __double2 v24 = 6378137.0 / sqrt(v23.__sinval * v23.__sinval * -0.00669437999 + 1.0);
    long double v25 = __sincos_stret(v22);
    long double v26 = v24 * v23.__cosval * v25.__sinval;
    *(double *)unint64_t v16 = v24 * v23.__cosval * v25.__cosval;
    *(double *)(v16 + 8) = v26;
    *(double *)(v16 + 16) = v23.__sinval * 0.99330562 * v24;
    *(unsigned char *)(v16 + 44) = 1;
    if (v6 == v26) {
      return a1 < a2;
    }
  }
  long double v27 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 56))(a1);
  unint64_t v28 = v27;
  if (*(unsigned char *)(v27 + 44))
  {
    uint64_t v29 = *(double *)(v27 + 8);
  }
  else
  {
    uint64_t v30 = *(double *)(v27 + 24) * 6.28318531;
    unint64_t v31 = exp(*(double *)(v27 + 32) * 6.28318531 + -3.14159265);
    long double v32 = atan(v31) * 2.0 + -1.57079633;
    long double v33 = fmod(v30, 6.28318531);
    long double v34 = fmod(v33 + 6.28318531, 6.28318531) + -3.14159265;
    double v35 = __sincos_stret(v32);
    double v36 = 6378137.0 / sqrt(v35.__sinval * v35.__sinval * -0.00669437999 + 1.0);
    double v37 = __sincos_stret(v34);
    uint64_t v29 = v36 * v35.__cosval * v37.__sinval;
    *(double *)unint64_t v28 = v36 * v35.__cosval * v37.__cosval;
    *(double *)(v28 + 8) = v29;
    *(double *)(v28 + 16) = v35.__sinval * 0.99330562 * v36;
    *(unsigned char *)(v28 + 44) = 1;
  }
  __double2 v38 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  long double v39 = v38;
  if (*(unsigned char *)(v38 + 44))
  {
    long double v40 = *(double *)(v38 + 8);
  }
  else
  {
    double v41 = *(double *)(v38 + 24) * 6.28318531;
    uint64_t v42 = exp(*(double *)(v38 + 32) * 6.28318531 + -3.14159265);
    uint64_t v43 = atan(v42) * 2.0 + -1.57079633;
    __double2 v44 = fmod(v41, 6.28318531);
    double v45 = fmod(v44 + 6.28318531, 6.28318531) + -3.14159265;
    double v46 = __sincos_stret(v43);
    long double v47 = 6378137.0 / sqrt(v46.__sinval * v46.__sinval * -0.00669437999 + 1.0);
    unint64_t v48 = __sincos_stret(v45);
    long double v40 = v47 * v46.__cosval * v48.__sinval;
    *(double *)long double v39 = v47 * v46.__cosval * v48.__cosval;
    *(double *)(v39 + 8) = v40;
    *(double *)(v39 + 16) = v46.__sinval * 0.99330562 * v47;
    *(unsigned char *)(v39 + 44) = 1;
  }
  return v29 < v40;
}

void sub_1A1B564A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(double)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1A1B56828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::function<void ()(double)>::~function(&a18);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue(void *a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (a1[3])
  {
    GEOConfigRemoveBlockListener();
    BOOL v6 = (void *)a1[3];
    a1[3] = 0;
  }
  uint64_t v7 = a3[3];
  if (!v7) {
    goto LABEL_6;
  }
  if ((void *)v7 != a3)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_6:
    uint64_t v15 = (uint64_t *)v7;
    goto LABEL_8;
  }
  uint64_t v15 = &v13;
  (*(void (**)(void *, uint64_t *))(*a3 + 24))(a3, &v13);
LABEL_8:
  std::__function::__value_func<void ()(double)>::swap[abi:nn180100](&v13, a1 + 6);
  if (v15 == &v13)
  {
    (*(void (**)(uint64_t *))(v13 + 32))(&v13);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  unint64_t v8 = (std::__shared_weak_count *)a1[5];
  uint64_t v13 = a1[4];
  unint64_t v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = _GEOConfigAddBlockListenerForKey();
  uint64_t v10 = (void *)a1[3];
  a1[3] = v9;

  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  unint64_t v11 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A1B56B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(double)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    BOOL v4 = (void *)result[3];
    id v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::__function::__func<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E4E8;
  a2[1] = v2;
  return result;
}

void VKLockScreenLog(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9 = a1;
  uint64_t v10 = +[VKDebugSettings sharedSettings];
  if ([v10 enableLoggingInLockScreen]
    && ([v10 isInstalledInLockScreen] & 1) != 0)
  {
    unint64_t v11 = (void *)[[NSString alloc] initWithFormat:v9 arguments:&a9];
    NSLog((NSString *)@"VK LOCK SCREEN: %@", v11);
  }
}

void sub_1A1B56EC8(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A1B56F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B571CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1A1B5772C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B5783C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B578EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B579D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B57BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B57C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B57D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B57E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1B57EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B580A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B581C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B5824C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B58380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B58564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B58650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B58A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1B58B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(unsigned int *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (gdc::Registry *)*((void *)a1 + 17);
    *((void *)a1 + 17) = 0;
    if (v2)
    {
      gdc::Registry::~Registry(v2);
      MEMORY[0x1A6239270]();
    }
    uint64_t v3 = a1[32];
    if (v3 != -1) {
      ((void (*)(char *, unsigned int *))off_1EF58FA78[v3])(&v4, a1 + 8);
    }
    operator delete(a1);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 16);
  if (v2 != *(void **)(a2 + 32)) {
    free(v2);
  }
}

void md::ElevatedStrokeLayerDataSource::createLayerData(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  memset(v324, 0, sizeof(v324));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v324);
  uint64_t v321 = 0;
  uint64_t v322 = 0;
  long double v323 = 0;
  uint64_t v7 = (unsigned __int16 *)*a3;
  unint64_t v8 = (unsigned __int16 *)a3[1];
  long double v308 = a1;
  if ((unsigned __int16 *)*a3 != v8)
  {
    while (*((unsigned __int16 *)a1 + 292) != *v7)
    {
      v7 += 24;
      if (v7 == v8) {
        goto LABEL_39;
      }
    }
  }
  if (v7 != v8)
  {
    id v9 = (void *)*((void *)v7 + 3);
    if (v9)
    {
      uint64_t k = -1;
      while (1)
      {
        uint64_t v11 = v9[14];
        uint64_t v10 = v9[15];
        *(void *)&long long v327 = v11;
        *((void *)&v327 + 1) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v12 = *((_WORD *)v308 + 292);
        uint64_t v13 = v322;
        if (v322 < (_WORD *)v323)
        {
          *uint64_t v322 = v12;
          v13[1] = v11;
          void v13[2] = v10;
          if (v10) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v14 = v13 + 3;
          a1 = v308;
          goto LABEL_34;
        }
        uint64_t v15 = v321;
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v322 - (unsigned char *)v321) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v323 - (unsigned char *)v321) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * ((v323 - (unsigned char *)v321) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v323 - (unsigned char *)v321) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_564;
        }
        long double v19 = (char *)operator new(24 * v18);
        long double v20 = &v19[8 * (((char *)v322 - (unsigned char *)v321) >> 3)];
        *(_WORD *)long double v20 = v12;
        *((void *)v20 + 1) = v11;
        *((void *)v20 + 2) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v14 = v20 + 24;
        if (v13 != v15) {
          break;
        }
        uint64_t v321 = &v19[24 * v16];
        long double v323 = &v19[24 * v18];
        a1 = v308;
        if (v13) {
          goto LABEL_33;
        }
LABEL_34:
        uint64_t v322 = v14;
        __double2 v24 = (std::__shared_weak_count *)*((void *)&v327 + 1);
        if (*((void *)&v327 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v327 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        id v9 = (void *)*v9;
        if (!v9) {
          goto LABEL_39;
        }
      }
      double v21 = v13;
      do
      {
        __int16 v22 = *((_WORD *)v21 - 12);
        v21 -= 3;
        *((_WORD *)v20 - 12) = v22;
        v20 -= 24;
        *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 1);
        v21[1] = 0;
        void v21[2] = 0;
      }
      while (v21 != v15);
      uint64_t v321 = v20;
      uint64_t v322 = v14;
      long double v323 = &v19[24 * v18];
      do
      {
        double v23 = (std::__shared_weak_count *)*(v13 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v13 -= 3;
      }
      while (v13 != v15);
      uint64_t v13 = v15;
      a1 = v308;
      if (!v15) {
        goto LABEL_34;
      }
LABEL_33:
      operator delete(v13);
      goto LABEL_34;
    }
  }
LABEL_39:
  (*((void (**)(void **__return_ptr, id *))*a1 + 20))(v319, a1);
  if (!a1[3])
  {
    long long v289 = 0uLL;
    goto LABEL_547;
  }
  uint64_t v25 = (uint64_t)a1[99];
  LOBYTE(v327) = 1;
  unsigned int v330 = 1;
  uint64_t RegistryForKey = md::RegistryManager::getRegistryForKey(v25, (uint64_t)&v327);
  if (v330 != -1) {
    ((void (*)(long long *, long long *))*(&off_1EF591280 + v330))(&v342, &v327);
  }
  __p[0] = 0;
  __p[1] = 0;
  double v326 = 0;
  long long v342 = 0u;
  long long v343 = 0u;
  float v344 = 1.0;
  long double v26 = v321;
  int32x4_t v303 = v322;
  if (v321 != v322)
  {
    BOOL v307 = a1 + 97;
    do
    {
      uint64_t v28 = v26[1];
      long double v27 = (std::__shared_weak_count *)v26[2];
      uint64_t v306 = (atomic_ullong *)v27;
      uint64_t v305 = v26;
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v304 = v27;
      }
      else
      {
        unint64_t v304 = 0;
      }
      uint64_t v310 = v28;
      uint64_t v29 = geo::codec::VectorTile::polygonsCount(*(geo::codec::VectorTile **)(v28 + 144));
      uint64_t v30 = v306;
      unint64_t v31 = (std::__shared_weak_count *)v306;
      if (!v29) {
        goto LABEL_476;
      }
      uint64_t v311 = 0;
      uint64_t v309 = v29;
      while (2)
      {
        uint64_t v32 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(v310 + 144)) + (v311 << 7);
        if (((*((uint64_t (**)(id *, uint64_t, uint64_t))*a1 + 19))(a1, v310, v32) & 1) != 0
          || !*(_DWORD *)(v32 + 100))
        {
          goto LABEL_51;
        }
        md::createFeatureAttributeSet((gss::Allocator *)&v338, (uint64_t *)(v32 + 24));
        long double v33 = (char *)(v339 - v338);
        unint64_t v34 = (v339 - v338) >> 3;
        if (v339 != v338)
        {
          double v35 = v338;
          do
          {
            unint64_t v36 = ((v34 << 6) - 0x61C8864680B583EBLL + (v34 >> 2) + *(unsigned int *)v35) ^ v34;
            unint64_t v34 = (*((unsigned __int16 *)v35 + 2) - 0x61C8864680B583EBLL + (v36 << 6) + (v36 >> 2)) ^ v36;
            v35 += 8;
          }
          while (v35 != v339);
        }
        long double v316 = (void *)v32;
        if (*((void *)&v342 + 1))
        {
          uint8x8_t v37 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v342 + 8));
          v37.i16[0] = vaddlv_u8(v37);
          if (v37.u32[0] > 1uLL)
          {
            unint64_t v38 = v34;
            if (v34 >= *((void *)&v342 + 1)) {
              unint64_t v38 = v34 % *((void *)&v342 + 1);
            }
          }
          else
          {
            unint64_t v38 = (*((void *)&v342 + 1) - 1) & v34;
          }
          long double v39 = *(void **)(v342 + 8 * v38);
          if (v39)
          {
            long double v40 = (void *)*v39;
            if (v40)
            {
              if (v37.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v46 = v40[1];
                  if (v46 == v34)
                  {
                    uint64_t v48 = v40[2];
                    uint64_t v47 = v40[3];
                    if ((char *)(v47 - v48) == v33)
                    {
                      if (v48 == v47) {
                        goto LABEL_93;
                      }
                      unint64_t v49 = v338;
                      while (*(_DWORD *)v48 == *(_DWORD *)v49
                           && *(unsigned __int16 *)(v48 + 4) == *((unsigned __int16 *)v49 + 2))
                      {
                        v48 += 8;
                        v49 += 8;
                        if (v48 == v47) {
                          goto LABEL_93;
                        }
                      }
                    }
                  }
                  else if ((v46 & (*((void *)&v342 + 1) - 1)) != v38)
                  {
                    goto LABEL_94;
                  }
                  long double v40 = (void *)*v40;
                  if (!v40) {
                    goto LABEL_94;
                  }
                }
              }
              do
              {
                unint64_t v41 = v40[1];
                if (v41 == v34)
                {
                  uint64_t v43 = v40[2];
                  uint64_t v42 = v40[3];
                  if ((char *)(v42 - v43) == v33)
                  {
                    if (v43 == v42)
                    {
LABEL_93:
                      unint64_t v51 = v40[6];
                      goto LABEL_250;
                    }
                    __double2 v44 = v338;
                    while (*(_DWORD *)v43 == *(_DWORD *)v44
                         && *(unsigned __int16 *)(v43 + 4) == *((unsigned __int16 *)v44 + 2))
                    {
                      v43 += 8;
                      v44 += 8;
                      if (v43 == v42) {
                        goto LABEL_93;
                      }
                    }
                  }
                }
                else
                {
                  if (v41 >= *((void *)&v342 + 1)) {
                    v41 %= *((void *)&v342 + 1);
                  }
                  if (v41 != v38) {
                    break;
                  }
                }
                long double v40 = (void *)*v40;
              }
              while (v40);
            }
          }
        }
LABEL_94:
        long double v52 = (char *)__p[1];
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 5);
        if (__p[1] < v326)
        {
          md::ElevatedStrokeGroup::ElevatedStrokeGroup((uint64_t)__p[1], (uint64_t)&v338, v307);
          unint64_t v53 = v52 + 160;
          goto LABEL_149;
        }
        if (v51 + 1 > 0x199999999999999) {
          abort();
        }
        unint64_t v54 = 0x999999999999999ALL * ((int64_t)((uint64_t)v326 - (unint64_t)__p[0]) >> 5);
        if (v54 <= v51 + 1) {
          unint64_t v54 = v51 + 1;
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((int64_t)((uint64_t)v326 - (unint64_t)__p[0]) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
          unint64_t v55 = 0x199999999999999;
        }
        else {
          unint64_t v55 = v54;
        }
        __double2 v329 = &v326;
        if (v55)
        {
          if (v55 > 0x199999999999999) {
            goto LABEL_564;
          }
          long double v56 = (char *)operator new(160 * v55);
        }
        else
        {
          long double v56 = 0;
        }
        *(void *)&long long v327 = v56;
        *((void *)&v327 + 1) = &v56[160 * v51];
        *(void *)&long long v328 = *((void *)&v327 + 1);
        *((void *)&v328 + 1) = &v56[160 * v55];
        double v57 = (gss::Allocator *)md::ElevatedStrokeGroup::ElevatedStrokeGroup(*((uint64_t *)&v327 + 1), (uint64_t)&v338, v307);
        uint64_t k = *((void *)&v327 + 1);
        unint64_t v53 = (void *)(v328 + 160);
        *(void *)&long long v328 = v328 + 160;
        double v59 = (char *)__p[0];
        double v58 = (char *)__p[1];
        if (__p[1] == __p[0])
        {
          __p[0] = *((void **)&v327 + 1);
          __p[1] = v53;
          double v326 = (void *)*((void *)&v328 + 1);
          if (v58) {
            goto LABEL_148;
          }
        }
        else
        {
          __double2 v60 = (void *)*((void *)&v327 + 1);
          do
          {
            *(v60 - 20) = 0;
            v60 -= 20;
            *(void *)(k - 152) = 0;
            *(void *)(k - 144) = 0;
            double v57 = (gss::Allocator *)gss::Allocator::instance(v57);
            *(void *)(k - 136) = v57;
            if ((char *)k != v58)
            {
              uint64_t v62 = *((void *)v58 - 20);
              long double v63 = (void *)*((void *)v58 - 19);
              unint64_t v64 = ((uint64_t)v63 - v62) >> 3;
              uint64_t v65 = *(void *)(k - 144);
              uint64_t v66 = *(gss::Allocator **)(k - 160);
              if (v64 <= (v65 - (uint64_t)v66) >> 3)
              {
                long double v69 = (void *)(k - 152);
                double v57 = *(gss::Allocator **)(k - 152);
                unint64_t v71 = (v57 - v66) >> 3;
                if (v71 >= v64)
                {
                  for (uint64_t i = *(void *)(k - 160); (void *)v62 != v63; v62 += 8)
                  {
                    *(_DWORD *)uint64_t i = *(_DWORD *)v62;
                    *(_WORD *)(i + 4) = *(_WORD *)(v62 + 4);
                    i += 8;
                  }
                  int64_t v74 = i - (void)v66;
                  double v57 = v66;
                }
                else
                {
                  double v72 = (void *)(v62 + 8 * v71);
                  if (v57 != v66)
                  {
                    do
                    {
                      *(_DWORD *)uint64_t v66 = *(_DWORD *)v62;
                      *((_WORD *)v66 + 2) = *(_WORD *)(v62 + 4);
                      v62 += 8;
                      uint64_t v66 = (gss::Allocator *)((char *)v66 + 8);
                    }
                    while ((void *)v62 != v72);
                  }
                  double v73 = (char *)v57;
                  while (v72 != v63)
                  {
                    if (v73) {
                      *(void *)double v73 = *v72;
                    }
                    ++v72;
                    v73 += 8;
                  }
                  int64_t v74 = v73 - (char *)v57;
                }
              }
              else
              {
                if (v66)
                {
                  *(void *)(k - 152) = v66;
                  (*(void (**)(gss::Allocator *))(*(void *)v57 + 40))(v57);
                  uint64_t v65 = 0;
                  *__double2 v60 = 0;
                  v60[1] = 0;
                  v60[2] = 0;
                }
                if ((((unint64_t)v63 - v62) & 0x8000000000000000) != 0) {
                  goto LABEL_568;
                }
                uint64_t v67 = v65 >> 2;
                if (v65 >> 2 <= v64) {
                  uint64_t v67 = ((uint64_t)v63 - v62) >> 3;
                }
                unint64_t v68 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v67;
                if (v68 >> 61) {
LABEL_568:
                }
                  abort();
                double v57 = (gss::Allocator *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(k - 136) + 16))(*(void *)(k - 136), 8 * v68, 4);
                *(void *)(k - 152) = v57;
                long double v69 = (void *)(k - 152);
                *(void *)(k - 160) = v57;
                *(void *)(k - 144) = (char *)v57 + 8 * v68;
                long double v70 = (char *)v57;
                if ((void *)v62 != v63)
                {
                  long double v70 = (char *)v57;
                  do
                  {
                    if (v70) {
                      *(void *)long double v70 = *(void *)v62;
                    }
                    v62 += 8;
                    v70 += 8;
                  }
                  while ((void *)v62 != v63);
                }
                int64_t v74 = v70 - (char *)v57;
              }
              *long double v69 = (char *)v57 + v74;
            }
            *(_OWORD *)(k - 128) = *((_OWORD *)v58 - 8);
            *((void *)v58 - 16) = 0;
            *((void *)v58 - 15) = 0;
            uint64_t v76 = *((void *)v58 - 14);
            *((void *)v58 - 14) = 0;
            *(void *)(k - 112) = v76;
            uint64_t v77 = *((void *)v58 - 13);
            *((void *)v58 - 13) = 0;
            *(void *)(k - 104) = v77;
            *(void *)(k - 96) = 0;
            *(void *)(k - 88) = 0;
            *(void *)(k - 80) = 0;
            *(_OWORD *)(k - 96) = *((_OWORD *)v58 - 6);
            *(void *)(k - 80) = *((void *)v58 - 10);
            *((void *)v58 - 12) = 0;
            *((void *)v58 - 11) = 0;
            *((void *)v58 - 10) = 0;
            *(_OWORD *)(k - 72) = *(_OWORD *)(v58 - 72);
            *((void *)v58 - 9) = 0;
            *((void *)v58 - 8) = 0;
            *(_OWORD *)(k - 56) = *(_OWORD *)(v58 - 56);
            *((void *)v58 - 7) = 0;
            *((void *)v58 - 6) = 0;
            uint64_t v78 = *((void *)v58 - 5);
            *((void *)v58 - 5) = 0;
            *(void *)(k - 40) = v78;
            *(void *)(k - 32) = *((void *)v58 - 4);
            *((void *)v58 - 4) = 0;
            uint64_t v79 = *((void *)v58 - 3);
            *(void *)(k - 24) = v79;
            uint64_t v80 = k - 24;
            uint64_t v81 = *((void *)v58 - 2);
            *(void *)(v80 + 8) = v81;
            *(_DWORD *)(v80 + 16) = *((_DWORD *)v58 - 2);
            if (v81)
            {
              unint64_t v61 = *(void *)(v79 + 8);
              unint64_t v82 = *(void *)(k - 32);
              if ((v82 & (v82 - 1)) != 0)
              {
                if (v61 >= v82) {
                  v61 %= v82;
                }
              }
              else
              {
                v61 &= v82 - 1;
              }
              *(void *)(v78 + 8 * v61) = v80;
              *((void *)v58 - 3) = 0;
              *((void *)v58 - 2) = 0;
            }
            v58 -= 160;
            uint64_t k = (uint64_t)v60;
          }
          while (v58 != v59);
          double v58 = (char *)__p[0];
          long double v83 = (char *)__p[1];
          __p[0] = v60;
          __p[1] = v53;
          double v326 = (void *)*((void *)&v328 + 1);
          while (v83 != v58)
            md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v83 - 160));
          if (v58) {
LABEL_148:
          }
            operator delete(v58);
        }
LABEL_149:
        __p[1] = v53;
        long double v84 = (char *)(v339 - v338);
        unint64_t v85 = (v339 - v338) >> 3;
        if (v339 != v338)
        {
          double v86 = v338;
          do
          {
            unint64_t v87 = ((v85 << 6) - 0x61C8864680B583EBLL + (v85 >> 2) + *(unsigned int *)v86) ^ v85;
            unint64_t v85 = (*((unsigned __int16 *)v86 + 2) - 0x61C8864680B583EBLL + (v87 << 6) + (v87 >> 2)) ^ v87;
            v86 += 8;
          }
          while (v86 != v339);
        }
        unint64_t v88 = *((void *)&v342 + 1);
        if (*((void *)&v342 + 1))
        {
          uint8x8_t v89 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v342 + 8));
          v89.i16[0] = vaddlv_u8(v89);
          if (v89.u32[0] > 1uLL)
          {
            uint64_t k = v85;
            if (v85 >= *((void *)&v342 + 1)) {
              uint64_t k = v85 % *((void *)&v342 + 1);
            }
          }
          else
          {
            uint64_t k = (*((void *)&v342 + 1) - 1) & v85;
          }
          long double v90 = *(void **)(v342 + 8 * k);
          if (v90)
          {
            long double v91 = (void *)*v90;
            if (v91)
            {
              if (v89.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v97 = v91[1];
                  if (v97 == v85)
                  {
                    uint64_t v99 = v91[2];
                    uint64_t v98 = v91[3];
                    if ((char *)(v98 - v99) == v84)
                    {
                      if (v99 == v98) {
                        goto LABEL_188;
                      }
                      double v100 = v338;
                      while (*(_DWORD *)v99 == *(_DWORD *)v100
                           && *(unsigned __int16 *)(v99 + 4) == *((unsigned __int16 *)v100 + 2))
                      {
                        v99 += 8;
                        v100 += 8;
                        if (v99 == v98) {
                          goto LABEL_188;
                        }
                      }
                    }
                  }
                  else if ((v97 & (*((void *)&v342 + 1) - 1)) != k)
                  {
                    goto LABEL_189;
                  }
                  long double v91 = (void *)*v91;
                  if (!v91) {
                    goto LABEL_189;
                  }
                }
              }
              do
              {
                unint64_t v92 = v91[1];
                if (v92 == v85)
                {
                  uint64_t v94 = v91[2];
                  uint64_t v93 = v91[3];
                  if ((char *)(v93 - v94) == v84)
                  {
                    if (v94 == v93)
                    {
LABEL_188:
                      uint64_t v32 = (uint64_t)v316;
                      goto LABEL_250;
                    }
                    long double v95 = v338;
                    while (*(_DWORD *)v94 == *(_DWORD *)v95
                         && *(unsigned __int16 *)(v94 + 4) == *((unsigned __int16 *)v95 + 2))
                    {
                      v94 += 8;
                      v95 += 8;
                      if (v94 == v93) {
                        goto LABEL_188;
                      }
                    }
                  }
                }
                else
                {
                  if (v92 >= *((void *)&v342 + 1)) {
                    v92 %= *((void *)&v342 + 1);
                  }
                  if (v92 != k) {
                    break;
                  }
                }
                long double v91 = (void *)*v91;
              }
              while (v91);
            }
          }
        }
LABEL_189:
        long double v102 = (uint64_t *)operator new(0x38uLL);
        *(void *)&long long v327 = v102;
        *((void *)&v327 + 1) = &v343;
        LOBYTE(v328) = 0;
        *long double v102 = 0;
        v102[1] = v85;
        v102[3] = 0;
        v102[4] = 0;
        v102[2] = 0;
        v102[5] = gss::Allocator::instance((gss::Allocator *)v102);
        std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v102 + 2, (uint64_t)v338, v339, (v339 - v338) >> 3);
        v102[6] = v51;
        LOBYTE(v328) = 1;
        float v103 = (float)(unint64_t)(*((void *)&v343 + 1) + 1);
        if (!v88 || (float)(v344 * (float)v88) < v103)
        {
          BOOL v104 = (v88 & (v88 - 1)) != 0;
          if (v88 < 3) {
            BOOL v104 = 1;
          }
          unint64_t v105 = v104 | (2 * v88);
          unint64_t v106 = vcvtps_u32_f32(v103 / v344);
          if (v105 <= v106) {
            size_t prime = v106;
          }
          else {
            size_t prime = v105;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
          }
          unint64_t v88 = *((void *)&v342 + 1);
          if (prime <= *((void *)&v342 + 1))
          {
            if (prime < *((void *)&v342 + 1))
            {
              unint64_t v118 = vcvtps_u32_f32((float)*((unint64_t *)&v343 + 1) / v344);
              if (*((void *)&v342 + 1) < 3uLL
                || (uint8x8_t v119 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v342 + 8)),
                    v119.i16[0] = vaddlv_u8(v119),
                    v119.u32[0] > 1uLL))
              {
                unint64_t v118 = std::__next_prime(v118);
              }
              else
              {
                uint64_t v120 = 1 << -(char)__clz(v118 - 1);
                if (v118 >= 2) {
                  unint64_t v118 = v120;
                }
              }
              if (prime <= v118) {
                size_t prime = v118;
              }
              if (prime >= v88)
              {
                unint64_t v88 = *((void *)&v342 + 1);
              }
              else
              {
                if (prime) {
                  goto LABEL_201;
                }
                __double2 v257 = (void *)v342;
                *(void *)&long long v342 = 0;
                if (v257) {
                  operator delete(v257);
                }
                unint64_t v88 = 0;
                *((void *)&v342 + 1) = 0;
              }
            }
LABEL_228:
            if ((v88 & (v88 - 1)) != 0)
            {
              if (v85 >= v88) {
                uint64_t k = v85 % v88;
              }
              else {
                uint64_t k = v85;
              }
            }
            else
            {
              uint64_t k = (v88 - 1) & v85;
            }
            goto LABEL_241;
          }
LABEL_201:
          if (prime >> 61) {
            goto LABEL_564;
          }
          double v108 = operator new(8 * prime);
          double v109 = (void *)v342;
          *(void *)&long long v342 = v108;
          if (v109) {
            operator delete(v109);
          }
          uint64_t v110 = 0;
          *((void *)&v342 + 1) = prime;
          do
            *(void *)(v342 + 8 * v110++) = 0;
          while (prime != v110);
          __double2 v111 = (void **)v343;
          if (!(void)v343) {
            goto LABEL_227;
          }
          size_t v112 = *(void *)(v343 + 8);
          size_t v113 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v114 = v112 & v113;
            *(void *)(v342 + 8 * v114) = &v343;
            for (uint64_t j = *v111; *v111; uint64_t j = *v111)
            {
              size_t v116 = j[1] & v113;
              if (v116 == v114)
              {
                __double2 v111 = (void **)j;
              }
              else if (*(void *)(v342 + 8 * v116))
              {
                *__double2 v111 = (void *)*j;
                uint64_t v117 = 8 * v116;
                void *j = **(void **)(v342 + v117);
                **(void **)(v342 + v117) = j;
              }
              else
              {
                *(void *)(v342 + 8 * v116) = v111;
                __double2 v111 = (void **)j;
                size_t v114 = v116;
              }
            }
            goto LABEL_227;
          }
          if (v112 >= prime) {
            v112 %= prime;
          }
          *(void *)(v342 + 8 * v112) = &v343;
          long double v121 = *v111;
          if (!*v111)
          {
LABEL_227:
            unint64_t v88 = prime;
            goto LABEL_228;
          }
          while (2)
          {
            size_t v123 = v121[1];
            if (v123 >= prime) {
              v123 %= prime;
            }
            if (v123 != v112)
            {
              if (!*(void *)(v342 + 8 * v123))
              {
                *(void *)(v342 + 8 * v123) = v111;
LABEL_232:
                __double2 v111 = (void **)v121;
                long double v121 = (void *)*v121;
                size_t v112 = v123;
                if (!v121) {
                  goto LABEL_227;
                }
                continue;
              }
              *__double2 v111 = (void *)*v121;
              uint64_t v122 = 8 * v123;
              void *v121 = **(void **)(v342 + v122);
              **(void **)(v342 + v122) = v121;
              long double v121 = v111;
            }
            break;
          }
          size_t v123 = v112;
          goto LABEL_232;
        }
LABEL_241:
        double v124 = *(void **)(v342 + 8 * k);
        if (v124)
        {
          *(void *)long long v327 = *v124;
          *double v124 = v327;
          uint64_t v32 = (uint64_t)v316;
        }
        else
        {
          *(void *)long long v327 = v343;
          *(void *)&long long v343 = v327;
          *(void *)(v342 + 8 * k) = &v343;
          uint64_t v32 = (uint64_t)v316;
          if (*(void *)v327)
          {
            unint64_t v125 = *(void *)(*(void *)v327 + 8);
            if ((v88 & (v88 - 1)) != 0)
            {
              if (v125 >= v88) {
                v125 %= v88;
              }
            }
            else
            {
              v125 &= v88 - 1;
            }
            *(void *)(v342 + 8 * v125) = v327;
          }
        }
        ++*((void *)&v343 + 1);
LABEL_250:
        __double2 v126 = (char *)__p[0];
        long double v127 = (char *)__p[0] + 160 * v51;
        unint64_t v129 = v127[8];
        v127 += 8;
        unint64_t v128 = v129;
        uint64_t v130 = (char *)v127[1];
        long double v315 = v127 + 1;
        uint64_t v131 = *(unsigned int *)(v32 + 100);
        uint64_t v132 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v130[-v129] >> 3);
        uint64_t v312 = v131;
        double v313 = (void **)v127;
        unint64_t v133 = v132 + v131;
        __double2 v314 = v127 + 2;
        if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v127[2] - v129) >> 3) < (unint64_t)(v132 + v131))
        {
          if (v133 > 0x2E8BA2E8BA2E8BALL) {
            abort();
          }
          uint64_t v134 = (char *)operator new(88 * v133);
          long double v135 = &v134[88 * v132];
          long double v136 = &v134[88 * v133];
          if (v130 == (char *)v128)
          {
            ggl::OuterShadowRibbonShader *v313 = v135;
            unint64_t *v315 = (unint64_t)v135;
            unint64_t *v314 = (unint64_t)v136;
          }
          else
          {
            long double v137 = &v134[88 * v132];
            do
            {
              long long v138 = *(_OWORD *)(v130 - 88);
              v130 -= 88;
              *(_OWORD *)(v137 - 88) = v138;
              v137 -= 88;
              *((void *)v137 + 2) = *((void *)v130 + 2);
              *(void *)uint64_t v130 = 0;
              *((void *)v130 + 1) = 0;
              *((void *)v130 + 2) = 0;
              *(_OWORD *)(v137 + 24) = *(_OWORD *)(v130 + 24);
              *((void *)v137 + 5) = *((void *)v130 + 5);
              *((void *)v130 + 3) = 0;
              *((void *)v130 + 4) = 0;
              *((void *)v130 + 5) = 0;
              long long v139 = *((_OWORD *)v130 + 3);
              long long v140 = *((_OWORD *)v130 + 4);
              *((void *)v137 + 10) = *((void *)v130 + 10);
              *((_OWORD *)v137 + 3) = v139;
              *((_OWORD *)v137 + 4) = v140;
            }
            while (v130 != (char *)v128);
            uint64_t v130 = (char *)*v313;
            unint64_t v128 = *v315;
            ggl::OuterShadowRibbonShader *v313 = v137;
            unint64_t *v315 = (unint64_t)v135;
            unint64_t *v314 = (unint64_t)v136;
            while ((char *)v128 != v130)
            {
              __double2 v141 = *(void **)(v128 - 64);
              if (v141)
              {
                *(void *)(v128 - 56) = v141;
                operator delete(v141);
              }
              long double v142 = *(void **)(v128 - 88);
              if (v142)
              {
                *(void *)(v128 - 80) = v142;
                operator delete(v142);
              }
              v128 -= 88;
            }
          }
          if (v130) {
            operator delete(v130);
          }
        }
        unint64_t v143 = *v315;
        double v144 = (char *)*v313;
        uint64_t v145 = &v126[160 * v51];
        uint64_t v146 = v145 + 120;
        unint64_t v147 = v316[5];
        unint64_t v148 = *((void *)v145 + 16);
        if (v148)
        {
          uint8x8_t v149 = (uint8x8_t)vcnt_s8((int8x8_t)v148);
          v149.i16[0] = vaddlv_u8(v149);
          if (v149.u32[0] > 1uLL)
          {
            unint64_t v128 = v316[5];
            if (v147 >= v148) {
              unint64_t v128 = v147 % v148;
            }
          }
          else
          {
            unint64_t v128 = (v148 - 1) & v147;
          }
          double v150 = *(void ***)(*(void *)v146 + 8 * v128);
          if (v150)
          {
            double v151 = *v150;
            if (*v150)
            {
              if (v149.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v153 = v151[1];
                  if (v153 == v147)
                  {
                    if (v151[2] == v147) {
                      goto LABEL_353;
                    }
                  }
                  else if ((v153 & (v148 - 1)) != v128)
                  {
                    goto LABEL_286;
                  }
                  double v151 = (void *)*v151;
                  if (!v151) {
                    goto LABEL_286;
                  }
                }
              }
              do
              {
                unint64_t v152 = v151[1];
                if (v152 == v147)
                {
                  if (v151[2] == v147) {
                    goto LABEL_353;
                  }
                }
                else
                {
                  if (v152 >= v148) {
                    v152 %= v148;
                  }
                  if (v152 != v128) {
                    break;
                  }
                }
                double v151 = (void *)*v151;
              }
              while (v151);
            }
          }
        }
LABEL_286:
        double v151 = operator new(0x20uLL);
        void *v151 = 0;
        v151[1] = v147;
        v151[2] = v316[5];
        float v154 = (float)(unint64_t)(*((void *)v146 + 3) + 1);
        float v155 = *((float *)v146 + 8);
        if (!v148 || (float)(v155 * (float)v148) < v154)
        {
          BOOL v156 = (v148 & (v148 - 1)) != 0;
          if (v148 < 3) {
            BOOL v156 = 1;
          }
          unint64_t v157 = v156 | (2 * v148);
          unint64_t v158 = vcvtps_u32_f32(v154 / v155);
          if (v157 <= v158) {
            size_t v159 = v158;
          }
          else {
            size_t v159 = v157;
          }
          if (v159 == 1)
          {
            size_t v159 = 2;
          }
          else if ((v159 & (v159 - 1)) != 0)
          {
            size_t v159 = std::__next_prime(v159);
            unint64_t v148 = *((void *)v146 + 1);
          }
          if (v159 <= v148)
          {
            if (v159 >= v148) {
              goto LABEL_338;
            }
            unint64_t v171 = vcvtps_u32_f32((float)*((unint64_t *)v146 + 3) / *((float *)v146 + 8));
            if (v148 < 3
              || (uint8x8_t v172 = (uint8x8_t)vcnt_s8((int8x8_t)v148), v172.i16[0] = vaddlv_u8(v172), v172.u32[0] > 1uLL))
            {
              unint64_t v171 = std::__next_prime(v171);
            }
            else
            {
              uint64_t v173 = 1 << -(char)__clz(v171 - 1);
              if (v171 >= 2) {
                unint64_t v171 = v173;
              }
            }
            if (v159 <= v171) {
              size_t v159 = v171;
            }
            if (v159 >= v148) {
              goto LABEL_338;
            }
            if (!v159)
            {
              BOOL v177 = *(void **)v146;
              *(void *)uint64_t v146 = 0;
              if (v177) {
                operator delete(v177);
              }
              *((void *)v146 + 1) = 0;
              goto LABEL_338;
            }
          }
          if (v159 >> 61) {
            goto LABEL_564;
          }
          long long v160 = operator new(8 * v159);
          long long v161 = *(void **)v146;
          *(void *)uint64_t v146 = v160;
          if (v161) {
            operator delete(v161);
          }
          uint64_t v162 = 0;
          *((void *)v146 + 1) = v159;
          do
            *(void *)(*(void *)v146 + 8 * v162++) = 0;
          while (v159 != v162);
          long double v164 = v146 + 16;
          unint64_t v163 = (void *)*((void *)v146 + 2);
          if (!v163) {
            goto LABEL_338;
          }
          size_t v165 = v163[1];
          size_t v166 = v159 - 1;
          if ((v159 & (v159 - 1)) == 0)
          {
            size_t v167 = v165 & v166;
            *(void *)(*(void *)v146 + 8 * v167) = v164;
            while (1)
            {
              double v168 = (void *)*v163;
              if (!*v163) {
                break;
              }
              size_t v169 = v168[1] & v166;
              if (v169 == v167)
              {
                unint64_t v163 = (void *)*v163;
              }
              else if (*(void *)(*(void *)v146 + 8 * v169))
              {
                *unint64_t v163 = *v168;
                uint64_t v170 = 8 * v169;
                *double v168 = **(void **)(*(void *)v146 + v170);
                **(void **)(*(void *)v146 + v170) = v168;
              }
              else
              {
                *(void *)(*(void *)v146 + 8 * v169) = v163;
                unint64_t v163 = v168;
                size_t v167 = v169;
              }
            }
LABEL_338:
            unint64_t v148 = *((void *)v146 + 1);
            if ((v148 & (v148 - 1)) != 0)
            {
              if (v147 >= v148) {
                unint64_t v128 = v147 % v148;
              }
              else {
                unint64_t v128 = v147;
              }
            }
            else
            {
              unint64_t v128 = (v148 - 1) & v147;
            }
            goto LABEL_343;
          }
          if (v165 >= v159) {
            v165 %= v159;
          }
          *(void *)(*(void *)v146 + 8 * v165) = v164;
          unint64_t v174 = (void *)*v163;
          if (!*v163) {
            goto LABEL_338;
          }
          while (1)
          {
            size_t v176 = v174[1];
            if (v176 >= v159) {
              v176 %= v159;
            }
            if (v176 != v165)
            {
              if (!*(void *)(*(void *)v146 + 8 * v176))
              {
                *(void *)(*(void *)v146 + 8 * v176) = v163;
                goto LABEL_324;
              }
              *unint64_t v163 = *v174;
              uint64_t v175 = 8 * v176;
              *unint64_t v174 = **(void **)(*(void *)v146 + v175);
              **(void **)(*(void *)v146 + v175) = v174;
              unint64_t v174 = v163;
            }
            size_t v176 = v165;
LABEL_324:
            unint64_t v163 = v174;
            unint64_t v174 = (void *)*v174;
            size_t v165 = v176;
            if (!v174) {
              goto LABEL_338;
            }
          }
        }
LABEL_343:
        long double v178 = *(void **)v146;
        long double v179 = *(void **)(*(void *)v146 + 8 * v128);
        if (v179)
        {
          void *v151 = *v179;
        }
        else
        {
          void *v151 = *((void *)v146 + 2);
          *((void *)v146 + 2) = v151;
          v178[v128] = v146 + 16;
          if (!*v151) {
            goto LABEL_352;
          }
          unint64_t v180 = *(void *)(*v151 + 8);
          if ((v148 & (v148 - 1)) != 0)
          {
            if (v180 >= v148) {
              v180 %= v148;
            }
          }
          else
          {
            v180 &= v148 - 1;
          }
          long double v179 = (void *)(*(void *)v146 + 8 * v180);
        }
        void *v179 = v151;
LABEL_352:
        ++*((void *)v146 + 3);
LABEL_353:
        unsigned int v181 = -1171354717 * ((uint64_t)(v143 - (void)v144) >> 3);
        uint64_t v182 = v312;
        v151[3] = v181 | ((unint64_t)(v312 + v181) << 32);
        uint64_t k = (uint64_t)v316;
        if (!v312) {
          goto LABEL_464;
        }
        unint64_t v183 = 0;
        while (2)
        {
          unint64_t v335 = 0;
          __double2 v184 = geo::codec::multiSectionFeaturePoints((void *)k, v183, &v335);
          if (geo::codec::multiSectionFeaturePrecision(k) > 0x10) {
            goto LABEL_356;
          }
          unint64_t v185 = v335;
          if (v335 < 3) {
            goto LABEL_356;
          }
          *(void *)&long long v327 = 0;
          if (v335 >> 61) {
            abort();
          }
          long double v186 = operator new(8 * v335);
          uint64_t v187 = 0;
          unsigned int v188 = 0;
          double v189 = (char *)&v186[v185];
          *(void *)&long long v318 = vdupq_n_s64((unint64_t)v186).u64[0];
          do
          {
            if (v186 < (void *)v189)
            {
              void *v186 = v184[v187];
              uint64_t v190 = v186 + 1;
              goto LABEL_362;
            }
            BOOL v192 = (void *)v318;
            uint64_t v193 = (uint64_t)((uint64_t)v186 - v318) >> 3;
            unint64_t v194 = v193 + 1;
            if ((unint64_t)(v193 + 1) >> 61) {
              abort();
            }
            if ((uint64_t)&v189[-v318] >> 2 > v194) {
              unint64_t v194 = (uint64_t)&v189[-v318] >> 2;
            }
            if ((unint64_t)&v189[-v318] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v195 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v195 = v194;
            }
            if (v195)
            {
              if (v195 >> 61) {
                goto LABEL_564;
              }
              long double v196 = (char *)operator new(8 * v195);
            }
            else
            {
              long double v196 = 0;
            }
            long double v197 = &v196[8 * v193];
            double v189 = &v196[8 * v195];
            *(void *)long double v197 = v184[v187];
            uint64_t v190 = v197 + 8;
            if (v186 == (void *)v318)
            {
              *(void *)&long long v318 = &v196[8 * v193];
              BOOL v192 = v186;
LABEL_381:
              operator delete(v192);
              goto LABEL_362;
            }
            unint64_t v198 = (unint64_t)v186 - v318 - 8;
            if (v198 <= 0x167
              || (char *)v186 + (unint64_t)v196 - v318 - (v198 & 0xFFFFFFFFFFFFFFF8) - 8 > (char *)v186 + (unint64_t)v196 - v318 - 8
              || (void *)((char *)v186 - (v198 & 0xFFFFFFFFFFFFFFF8) - 8) > v186 - 1
              || (void)v318 - (void)v196 < 0x20uLL)
            {
              double v199 = v186;
              do
              {
LABEL_377:
                uint64_t v200 = *--v199;
                *((void *)v197 - 1) = v200;
                v197 -= 8;
              }
              while (v199 != (void *)v318);
              goto LABEL_378;
            }
            uint64_t v201 = (v198 >> 3) + 1;
            double v199 = &v186[-(v201 & 0x3FFFFFFFFFFFFFFCLL)];
            long double v202 = &v196[8 * v193 - 16];
            long double v203 = (long long *)(v186 - 2);
            uint64_t v204 = v201 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v205 = *v203;
              *((_OWORD *)v202 - 1) = *(v203 - 1);
              *(_OWORD *)long double v202 = v205;
              v202 -= 32;
              v203 -= 2;
              v204 -= 4;
            }
            while (v204);
            v197 -= 8 * (v201 & 0x3FFFFFFFFFFFFFFCLL);
            if (v201 != (v201 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_377;
            }
LABEL_378:
            *(void *)&long long v318 = v197;
            if (v192) {
              goto LABEL_381;
            }
LABEL_362:
            *(void *)&long long v191 = v318;
            *((void *)&v191 + 1) = v190;
            long long v318 = v191;
            long double v186 = v190;
            uint64_t v187 = ++v188;
          }
          while (v335 > v188);
          uint64_t v333 = 0;
          CharacteristicPointsForSection = geo::codec::polygonFeatureGetCharacteristicPointsForSection(v316, v183, (uint64_t *)&v333);
          unint64_t v207 = v335;
          if (v335)
          {
            if ((v335 & 0x8000000000000000) != 0) {
              abort();
            }
            uint64_t v208 = CharacteristicPointsForSection;
            long double v209 = operator new(8 * ((v335 - 1) >> 6) + 8);
            long double v210 = v209;
            if (v207 >= 0x41) {
              unint64_t v211 = (v207 - 1) >> 6;
            }
            else {
              unint64_t v211 = 0;
            }
            v209[v211] = 0;
            if (v207 >= 0x40) {
              bzero(v209, 8 * (v207 >> 6));
            }
            if ((v207 & 0x3F) != 0) {
              v210[v207 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v207 & 0x3F));
            }
            unint64_t v212 = v207;
            if (!v208)
            {
LABEL_413:
              if (v212 >> 60) {
                abort();
              }
              double v223 = (char *)operator new(16 * v212);
              unint64_t v212 = (unint64_t)&v223[16 * v212];
              int64x2_t v224 = vdupq_n_s64((unint64_t)v223);
              goto LABEL_443;
            }
            unint64_t v213 = 0;
            unint64_t v214 = 0;
            unint64_t v212 = 0;
            __double2 v215 = v333;
            if (v207 <= 1) {
              uint64_t v216 = 1;
            }
            else {
              uint64_t v216 = v207;
            }
            while (2)
            {
              if (v214 >= (unint64_t)v215)
              {
LABEL_402:
                long double v217 = &v210[v213 >> 6];
                uint64_t v218 = 1 << v213;
                unint64_t v219 = v214;
              }
              else
              {
                long double v221 = &v208[100 * v214 + 12];
                unint64_t v219 = v214;
                while (1)
                {
                  int v222 = *(_DWORD *)v221;
                  v221 += 100;
                  if (v213 == v222) {
                    break;
                  }
                  if (v215 == (char *)++v219) {
                    goto LABEL_402;
                  }
                }
                long double v217 = &v210[v213 >> 6];
                uint64_t v218 = 1 << v213;
                if (v208[100 * v219 + 28])
                {
                  uint64_t v220 = 0;
                  *v217 |= v218;
LABEL_404:
                  v212 += v220;
                  ++v213;
                  unint64_t v214 = v219;
                  if (v213 == v216)
                  {
                    if (v212) {
                      goto LABEL_413;
                    }
                    int64x2_t v224 = 0uLL;
LABEL_443:
                    int64x2_t v317 = v224;
                    unint64_t v245 = 0;
                    while (1)
                    {
                      unint64_t v248 = v245 + 1;
                      if (((*(void *)((char *)v210 + ((v245 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v245) & 1) == 0)
                      {
                        unint64_t v249 = v248 % v207;
                        uint64_t v250 = (char *)v317.i64[1];
                        if (v317.i64[1] < v212)
                        {
                          *(void *)v317.i64[1] = v245;
                          *(void *)(v317.i64[1] + 8) = v249;
                          uint64_t v246 = v317.i64[1] + 16;
                        }
                        else
                        {
                          uint64_t v251 = (v317.i64[1] - v317.i64[0]) >> 4;
                          unint64_t v252 = v251 + 1;
                          if ((unint64_t)(v251 + 1) >> 60) {
                            abort();
                          }
                          if ((uint64_t)(v212 - v317.i64[0]) >> 3 > v252) {
                            unint64_t v252 = (uint64_t)(v212 - v317.i64[0]) >> 3;
                          }
                          if (v212 - v317.i64[0] >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v253 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v253 = v252;
                          }
                          if (v253)
                          {
                            if (v253 >> 60) {
                              goto LABEL_564;
                            }
                            double v254 = (char *)operator new(16 * v253);
                          }
                          else
                          {
                            double v254 = 0;
                          }
                          double v255 = &v254[16 * v251];
                          *(void *)double v255 = v245;
                          *((void *)v255 + 1) = v249;
                          double v256 = v255;
                          if (v317.i64[1] != v317.i64[0])
                          {
                            do
                            {
                              *((_OWORD *)v256 - 1) = *((_OWORD *)v250 - 1);
                              v256 -= 16;
                              v250 -= 16;
                            }
                            while (v250 != (char *)v317.i64[0]);
                            uint64_t v250 = (char *)v317.i64[0];
                          }
                          unint64_t v212 = (unint64_t)&v254[16 * v253];
                          uint64_t v246 = (uint64_t)(v255 + 16);
                          v317.i64[0] = (uint64_t)v256;
                          if (v250) {
                            operator delete(v250);
                          }
                        }
                        v247.i64[0] = v317.i64[0];
                        v247.i64[1] = v246;
                        int64x2_t v317 = v247;
                        unint64_t v207 = v335;
                      }
                      unint64_t v245 = v248;
                      if (v248 >= v207) {
                        goto LABEL_416;
                      }
                    }
                  }
                  continue;
                }
              }
              break;
            }
            *v217 &= ~v218;
            uint64_t v220 = 1;
            goto LABEL_404;
          }
          long double v210 = 0;
          unint64_t v212 = 0;
          int64x2_t v317 = 0u;
LABEL_416:
          __double2 v225 = v315;
          unint64_t v226 = *v315;
          if (*v315 < *v314)
          {
            *(_OWORD *)unint64_t v226 = v318;
            *(void *)(v226 + 16) = v189;
            *(int64x2_t *)(v226 + 24) = v317;
            *(void *)(v226 + 40) = v212;
            long long v227 = v328;
            *(_OWORD *)(v226 + 48) = v327;
            *(_OWORD *)(v226 + 64) = v227;
            *(void *)(v226 + 80) = v329;
            long double v228 = (char *)(v226 + 88);
            uint64_t k = (uint64_t)v316;
            goto LABEL_433;
          }
          uint64_t v229 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v226 - (void)*v313) >> 3);
          unint64_t v230 = v229 + 1;
          if ((unint64_t)(v229 + 1) > 0x2E8BA2E8BA2E8BALL) {
            abort();
          }
          if (0x5D1745D1745D1746 * ((uint64_t)(*v314 - (void)*v313) >> 3) > v230) {
            unint64_t v230 = 0x5D1745D1745D1746 * ((uint64_t)(*v314 - (void)*v313) >> 3);
          }
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v314 - (void)*v313) >> 3)) >= 0x1745D1745D1745DLL) {
            unint64_t v231 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v231 = v230;
          }
          if (v231)
          {
            if (v231 <= 0x2E8BA2E8BA2E8BALL)
            {
              uint64_t v232 = (char *)operator new(88 * v231);
              goto LABEL_428;
            }
LABEL_564:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v232 = 0;
LABEL_428:
          BOOL v233 = &v232[88 * v229];
          long double v234 = &v232[88 * v231];
          *(_OWORD *)BOOL v233 = v318;
          *((void *)v233 + 2) = v189;
          *(int64x2_t *)(v233 + 24) = v317;
          *((void *)v233 + 5) = v212;
          long long v235 = v328;
          *((_OWORD *)v233 + 3) = v327;
          *((_OWORD *)v233 + 4) = v235;
          *((void *)v233 + 10) = v329;
          long double v228 = v233 + 88;
          __double2 v225 = v315;
          long double v236 = (char *)*v315;
          double v237 = (char *)*v313;
          if ((void *)*v315 == *v313)
          {
            ggl::OuterShadowRibbonShader *v313 = v233;
            unint64_t *v315 = (unint64_t)v228;
            unint64_t *v314 = (unint64_t)v234;
            uint64_t k = (uint64_t)v316;
            if (v236) {
              goto LABEL_432;
            }
          }
          else
          {
            do
            {
              double v238 = v233;
              *((void *)v233 - 10) = 0;
              *((void *)v233 - 9) = 0;
              long long v239 = *(_OWORD *)(v236 - 88);
              v236 -= 88;
              *(_OWORD *)(v233 - 88) = v239;
              v233 -= 88;
              *((void *)v238 - 9) = *((void *)v236 + 2);
              *(void *)long double v236 = 0;
              *((void *)v236 + 1) = 0;
              *((void *)v236 + 2) = 0;
              *((void *)v233 + 4) = 0;
              *((void *)v233 + 5) = 0;
              *(_OWORD *)(v233 + 24) = *(_OWORD *)(v236 + 24);
              *((void *)v233 + 5) = *((void *)v236 + 5);
              *((void *)v236 + 3) = 0;
              *((void *)v236 + 4) = 0;
              *((void *)v236 + 5) = 0;
              long long v240 = *((_OWORD *)v236 + 3);
              long long v241 = *((_OWORD *)v236 + 4);
              *((void *)v233 + 10) = *((void *)v236 + 10);
              *((_OWORD *)v233 + 3) = v240;
              *((_OWORD *)v233 + 4) = v241;
            }
            while (v236 != v237);
            long double v236 = (char *)*v313;
            long double v242 = (char *)*v315;
            ggl::OuterShadowRibbonShader *v313 = v233;
            unint64_t *v315 = (unint64_t)v228;
            unint64_t *v314 = (unint64_t)v234;
            for (uint64_t k = (uint64_t)v316; v242 != v236; v242 -= 88)
            {
              long double v243 = (void *)*((void *)v242 - 8);
              if (v243)
              {
                *((void *)v242 - 7) = v243;
                operator delete(v243);
              }
              double v244 = (void *)*((void *)v242 - 11);
              if (v244)
              {
                *((void *)v242 - 10) = v244;
                operator delete(v244);
              }
            }
            __double2 v225 = v315;
            if (v236) {
LABEL_432:
            }
              operator delete(v236);
          }
LABEL_433:
          *__double2 v225 = v228;
          if (v210) {
            operator delete(v210);
          }
          uint64_t v182 = v312;
LABEL_356:
          if (++v183 != v182) {
            continue;
          }
          break;
        }
LABEL_464:
        if (v338)
        {
          double v339 = v338;
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v341 + 40))(v341, v338, v340 - (void)v338);
        }
        a1 = v308;
LABEL_51:
        if (++v311 != v309) {
          continue;
        }
        break;
      }
      unint64_t v31 = v304;
      uint64_t v30 = v306;
LABEL_476:
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        uint64_t v30 = v306;
        if (v306) {
          goto LABEL_479;
        }
      }
      else if (v30)
      {
LABEL_479:
        if (!atomic_fetch_add(v30 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          long double v258 = (std::__shared_weak_count *)v30;
          (*(void (**)(void))(*v30 + 16))();
          std::__shared_weak_count::__release_weak(v258);
        }
      }
      long double v26 = v305 + 3;
    }
    while (v305 + 3 != (void *)v303);
  }
  id v259 = a1[95];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)[v259 gglDevice] + 24))(&v337);

  long double v260 = (char *)operator new(0xE8uLL);
  *((void *)v260 + 1) = 0;
  *((void *)v260 + 2) = 0;
  *(void *)long double v260 = &unk_1EF586DB8;
  double v261 = (char *)ggl::BufferData::BufferData((uint64_t)(v260 + 24), qword_1E9552208, 2, 1, 6, 1);
  *((void *)v260 + 28) = ggl::Tile::View::reflection(void)::reflection;
  *((void *)v260 + 3) = &unk_1EF55E258;
  double v338 = v261;
  double v339 = v260;
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v335);
  double v262 = (uint64_t **)__p[1];
  if (__p[0] != __p[1])
  {
    uint64_t v263 = (uint64_t **)((char *)__p[0] + 64);
    while (1)
    {
      uint64_t v333 = v338;
      uint64_t v334 = (std::__shared_weak_count *)v339;
      if (v339) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v339 + 1, 1uLL, memory_order_relaxed);
      }
      unint64_t v331 = v335;
      double v332 = v336;
      if (v336) {
        atomic_fetch_add_explicit(&v336->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v345[0] = 1057360530;
      md::PolygonOverlayMeshBuilder::buildPolygonMeshesFromMeshInfos((uint64_t *)&v327, v263, &v337, (uint64_t *)&v333, (uint64_t *)&v331, (uint64_t *)v263 - 4, v345);
      long double v265 = (uint64_t *)v327;
      *(void *)&long long v327 = 0;
      uint64_t v266 = (uint64_t)*(v263 - 2);
      *(v263 - 2) = v265;
      if (v266) {
        break;
      }
LABEL_498:
      double v269 = (uint64_t *)*((void *)&v327 + 1);
      *((void *)&v327 + 1) = 0;
      uint64_t v270 = (uint64_t)*(v263 - 1);
      *(v263 - 1) = v269;
      if (v270)
      {
        (*(void (**)(uint64_t))(*(void *)v270 + 8))(v270);
        uint64_t v271 = *((void *)&v327 + 1);
        *((void *)&v327 + 1) = 0;
        if (v271) {
          (*(void (**)(uint64_t))(*(void *)v271 + 8))(v271);
        }
      }
      uint64_t v272 = v327;
      *(void *)&long long v327 = 0;
      if (v272)
      {
        long double v273 = *(std::__shared_weak_count **)(v272 + 72);
        if (v273 && !atomic_fetch_add(&v273->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
          long double v274 = *(std::__shared_weak_count **)(v272 + 8);
          if (v274) {
            goto LABEL_505;
          }
        }
        else
        {
          long double v274 = *(std::__shared_weak_count **)(v272 + 8);
          if (v274)
          {
LABEL_505:
            if (!atomic_fetch_add(&v274->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
              std::__shared_weak_count::__release_weak(v274);
            }
          }
        }
        MEMORY[0x1A6239270](v272, 0x1020C408635837CLL);
      }
      int8x16_t v275 = v332;
      if (v332 && !atomic_fetch_add(&v332->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
        unint64_t v276 = v334;
        if (v334)
        {
LABEL_512:
          if (!atomic_fetch_add(&v276->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
            std::__shared_weak_count::__release_weak(v276);
          }
        }
      }
      else
      {
        unint64_t v276 = v334;
        if (v334) {
          goto LABEL_512;
        }
      }
      uint64_t v264 = v263 + 12;
      v263 += 20;
      if (v264 == v262) {
        goto LABEL_516;
      }
    }
    long double v267 = *(std::__shared_weak_count **)(v266 + 72);
    if (v267 && !atomic_fetch_add(&v267->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
      double v268 = *(std::__shared_weak_count **)(v266 + 8);
      if (v268)
      {
LABEL_494:
        if (!atomic_fetch_add(&v268->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
          std::__shared_weak_count::__release_weak(v268);
        }
      }
    }
    else
    {
      double v268 = *(std::__shared_weak_count **)(v266 + 8);
      if (v268) {
        goto LABEL_494;
      }
    }
    MEMORY[0x1A6239270](v266, 0x1020C408635837CLL);
    goto LABEL_498;
  }
LABEL_516:
  int8x16_t v277 = v336;
  if (v336 && !atomic_fetch_add(&v336->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
    std::__shared_weak_count::__release_weak(v277);
  }
  unint64_t v278 = (std::__shared_weak_count *)v339;
  if (v339 && !atomic_fetch_add((atomic_ullong *volatile)v339 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
    std::__shared_weak_count::__release_weak(v278);
  }
  if (v337)
  {
    uint64_t v279 = (*(uint64_t (**)(uint64_t))(*(void *)v337 + 24))(v337);
    uint64_t v280 = v337;
    uint64_t v337 = 0;
    *(void *)&long long v327 = v280;
    (*(void (**)(uint64_t, long long *))(*(void *)v279 + 48))(v279, &v327);
    uint64_t v281 = v327;
    *(void *)&long long v327 = 0;
    if (v281) {
      (*(void (**)(uint64_t))(*(void *)v281 + 8))(v281);
    }
    uint64_t v282 = v337;
    uint64_t v337 = 0;
    if (v282) {
      (*(void (**)(uint64_t))(*(void *)v282 + 8))(v282);
    }
  }
  int8x16_t v283 = (void **)v343;
  if ((void)v343)
  {
    do
    {
      int32x4_t v287 = (void **)*v283;
      int32x4_t v288 = v283[2];
      if (v288)
      {
        v283[3] = v288;
        (*(void (**)(void *, void *, int64_t))(*(void *)v283[5] + 40))(v283[5], v288, (unsigned char *)v283[4] - (unsigned char *)v288);
      }
      operator delete(v283);
      int8x16_t v283 = v287;
    }
    while (v287);
  }
  BOOL v284 = (void *)v342;
  *(void *)&long long v342 = 0;
  if (v284) {
    operator delete(v284);
  }
  if (v322 == v321)
  {
    double v286 = 0;
    long long v327 = 0uLL;
  }
  else
  {
    uint64_t v285 = *((void *)v321 + 1);
    double v286 = *(std::__shared_weak_count **)(v285 + 152);
    *(void *)&long long v327 = *(void *)(v285 + 144);
    *((void *)&v327 + 1) = v286;
    if (v286) {
      atomic_fetch_add_explicit(&v286->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  unint64_t v290 = (char *)operator new(0x348uLL);
  *((void *)v290 + 1) = 0;
  *((void *)v290 + 2) = 0;
  *(void *)unint64_t v290 = &unk_1EF5814E8;
  md::MapTileData::MapTileData((uint64_t)(v290 + 24), a2, (uint64_t)v324, (uint64_t *)&v327, 1);
  *((void *)v290 + 3) = &unk_1EF541408;
  *((void *)v290 + 82) = &unk_1EF541448;
  *((void *)v290 + 93) = RegistryForKey;
  *((void *)v290 + 94) = 0;
  *((void *)v290 + 96) = 0;
  *((void *)v290 + 95) = 0;
  *(_OWORD *)(v290 + 776) = *(_OWORD *)__p;
  *((void *)v290 + 99) = v326;
  __p[0] = 0;
  __p[1] = 0;
  double v326 = 0;
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)(v290 + 800), (uint64_t)v319);
  if (v286 && !atomic_fetch_add(&v286->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
    std::__shared_weak_count::__release_weak(v286);
  }
  *(void *)&long long v289 = v290 + 24;
  uint64_t v291 = (char *)__p[0];
  if (__p[0])
  {
    long double v292 = (char *)__p[1];
    long double v293 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v292 - 160));
      while (v292 != v291);
      long double v293 = __p[0];
    }
    __p[1] = v291;
    operator delete(v293);
    *(void *)&long long v289 = v290 + 24;
  }
  *((void *)&v289 + 1) = v290;
LABEL_547:
  *a4 = v289;
  long double v294 = v320;
  if (v320)
  {
    do
    {
      double v295 = (void *)*v294;
      operator delete(v294);
      long double v294 = v295;
    }
    while (v295);
  }
  double v296 = v319[0];
  v319[0] = 0;
  if (v296) {
    operator delete(v296);
  }
  double v297 = v321;
  if (v321)
  {
    __double2 v298 = v322;
    if (v322 != v321)
    {
      do
      {
        long double v299 = (std::__shared_weak_count *)*((void *)v298 - 1);
        if (v299 && !atomic_fetch_add(&v299->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
          std::__shared_weak_count::__release_weak(v299);
        }
        v298 -= 12;
      }
      while (v298 != v297);
      double v297 = v321;
    }
    operator delete(v297);
  }
  if (v324[0]) {
    operator delete(v324[0]);
  }
}