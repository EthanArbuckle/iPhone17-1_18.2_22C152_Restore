void sub_1A27D47B0(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v1, 800);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void md::ShieldIconLabelPart::populateDebugNode(md::ShieldIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  md::IconLabelPart::populateDebugNode(this, a2);
  BYTE7(v19[1]) = 19;
  strcpy((char *)v19, "ShieldIconLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v19);
  uint64_t v5 = **((void **)this + 80);
  BYTE7(v19[1]) = 11;
  strcpy((char *)v19, "Shield Text");
  v6 = (const char *)(*(uint64_t (**)(void))(v5 + 32))();
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v14 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v14) = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_8:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  long long __p = 0uLL;
  unint64_t v17 = 0;
  int v18 = 4;
  int v12 = SHIBYTE(v14);
  if (SHIBYTE(v14) < 0)
  {
    std::string::__assign_no_alias<true>(&__p, (void *)__dst, *((size_t *)&__dst + 1));
  }
  else
  {
    long long __p = __dst;
    unint64_t v17 = v14;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v19, (uint64_t)v15);
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_14:
      if ((SBYTE7(v19[1]) & 0x80000000) == 0) {
        return;
      }
LABEL_18:
      operator delete(*(void **)&v19[0]);
      return;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete((void *)__dst);
  if (SBYTE7(v19[1]) < 0) {
    goto LABEL_18;
  }
}

uint64_t md::ShieldIconLabelPart::debugString@<X0>(md::ShieldIconLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"Shield(", 7);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 80) + 32))(*((void *)this + 80));
  if (v4) {
    uint64_t v5 = (const char *)v4;
  }
  else {
    uint64_t v5 = "";
  }
  size_t v6 = strlen(v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n ", 2);
  md::IconLabelPart::debugString(this, &__p);
  if (v22 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v22 >= 0) {
    uint64_t v8 = HIBYTE(v22);
  }
  else {
    uint64_t v8 = v21;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, v8);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  (*(void (**)(void **__return_ptr))(**((void **)this + 96) + 48))(&__p);
  uint64_t v9 = HIBYTE(v22);
  if (v22 < 0) {
    uint64_t v9 = v21;
  }
  if (v9)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n ", 2);
    if (v22 >= 0) {
      uint64_t v10 = &__p;
    }
    else {
      uint64_t v10 = __p;
    }
    if (v22 >= 0) {
      uint64_t v11 = HIBYTE(v22);
    }
    else {
      uint64_t v11 = v21;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v10, v11);
  }
  if ((v31 & 0x10) != 0)
  {
    unint64_t v13 = v30;
    if (v30 < v27)
    {
      unint64_t v30 = v27;
      unint64_t v13 = v27;
    }
    unint64_t v14 = (const void **)&v26;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      size_t v12 = 0;
      a2[23] = 0;
      goto LABEL_37;
    }
    unint64_t v14 = (const void **)v25;
    unint64_t v13 = v25[2];
  }
  v15 = *v14;
  size_t v12 = v13 - (void)*v14;
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v12 >= 0x17)
  {
    uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v16 = v12 | 7;
    }
    uint64_t v17 = v16 + 1;
    int v18 = operator new(v16 + 1);
    *((void *)a2 + 1) = v12;
    *((void *)a2 + 2) = v17 | 0x8000000000000000;
    *(void *)a2 = v18;
    a2 = v18;
    goto LABEL_36;
  }
  a2[23] = v12;
  if (v12) {
LABEL_36:
  }
    memmove(a2, v15, v12);
LABEL_37:
  a2[v12] = 0;
  if (SHIBYTE(v22) < 0) {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v23 + 40))(v23, __p, v22 & 0x7FFFFFFFFFFFFFFFLL);
  }
  v24[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v24[1] = MEMORY[0x1E4FBA470] + 16;
  if (v29 < 0) {
    operator delete(v28);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v32);
}

void sub_1A27D4D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

void md::ShieldIconLabelPart::~ShieldIconLabelPart(md::ShieldIconLabelPart *this)
{
  *(void *)this = &unk_1EF53C2E0;
  v2 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::IconLabelPart::~IconLabelPart(this);
  {
    operator new();
  }
  v3 = *(void (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 40);
  v3();
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF53C2E0;
  v2 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::IconLabelPart::~IconLabelPart(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5846C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5846C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::TransitNode::BaseMesh::~BaseMesh(ggl::TransitNode::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::TransitNode::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::TransitNode::BaseMesh *)((char *)this - 16));
}

void ggl::TransitNode::BaseMesh::~BaseMesh(ggl::TransitNode::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::PointIconLabelPart::debugString@<X0>(md::PointIconLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"PointIcon", 9);
  if (*((_DWORD *)this + 201))
  {
    if (*((_DWORD *)this + 206))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)", multiPOI(", 11);
      uint64_t v4 = (void *)std::ostream::operator<<();
      uint64_t v5 = ")";
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v5 = ", multiPOI-fallback";
      uint64_t v4 = v20;
      uint64_t v6 = 19;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n  ", 3);
  md::IconLabelPart::debugString(this, __p);
  if ((v19 & 0x80u) == 0) {
    size_t v7 = __p;
  }
  else {
    size_t v7 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v19;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v7, v8);
  if ((char)v19 < 0)
  {
    operator delete(__p[0]);
    char v9 = v27;
    if ((v27 & 0x10) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    unint64_t v11 = v26;
    if (v26 < v23)
    {
      unint64_t v26 = v23;
      unint64_t v11 = v23;
    }
    size_t v12 = (const void **)&v22;
    goto LABEL_21;
  }
  char v9 = v27;
  if ((v27 & 0x10) != 0) {
    goto LABEL_17;
  }
LABEL_14:
  if ((v9 & 8) == 0)
  {
    size_t v10 = 0;
    a2[23] = 0;
    goto LABEL_29;
  }
  size_t v12 = (const void **)v21;
  unint64_t v11 = v21[2];
LABEL_21:
  unint64_t v13 = *v12;
  size_t v10 = v11 - (void)*v12;
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v16 = operator new(v14 + 1);
    *((void *)a2 + 1) = v10;
    *((void *)a2 + 2) = v15 | 0x8000000000000000;
    *(void *)a2 = v16;
    a2 = v16;
    goto LABEL_28;
  }
  a2[23] = v10;
  if (v10) {
LABEL_28:
  }
    memmove(a2, v13, v10);
LABEL_29:
  a2[v10] = 0;
  v20[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v20[1] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete(v24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v28);
}

void sub_1A27D5368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ggl::SolidLine::BasePipelineState::~BasePipelineState(ggl::SolidLine::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::SolidLine::BasePipelineSetup::textureIsEnabled(ggl::SolidLine::BasePipelineSetup *this)
{
  return 0;
}

BOOL ggl::SolidLine::BasePipelineSetup::constantDataIsEnabled(ggl::SolidLine::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::SolidLine::BasePipelineSetup::~BasePipelineSetup(ggl::SolidLine::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ___ZN2md24VenueFloorMeshGeneration19_writeFootprintDataEPN3ggl6DeviceERKNSt3__16vectorINS_14PolygonSectionENS4_9allocatorIS6_EEEERNS5_INS1_11PolygonBase18CompressedMeshMeshENS7_ISD_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  v393[19] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  uint64_t v352 = v3[1];
  if (*v3 == v352) {
    return;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  v349 = 0;
  uint64_t v7 = 0;
  v350 = *(void **)(a1 + 32);
  v358 = 0;
  std::string::size_type v347 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  std::string::size_type v348 = *MEMORY[0x1E4FBA418];
  *(void *)&long long v8 = 0x8000800080008000;
  *((void *)&v8 + 1) = 0x8000800080008000;
  long long v359 = v8;
  while (2)
  {
    unint64_t v9 = *(void *)(v4 + 88);
    size_t v10 = v358;
    unint64_t v11 = (v358 - (char *)v6) >> 2;
    unint64_t v12 = v9 - v11;
    if (v9 <= v11)
    {
      if (v9 < v11) {
        size_t v10 = &v6->i8[4 * v9];
      }
      goto LABEL_20;
    }
    if (v12 <= (v349 - v358) >> 2)
    {
      size_t v10 = &v358[4 * v12];
LABEL_20:
      v358 = v10;
      uint64_t v18 = a1;
      goto LABEL_31;
    }
    if (v9 >> 62) {
      abort();
    }
    unint64_t v13 = (v349 - (char *)v6) >> 1;
    if (v13 <= v9) {
      unint64_t v13 = *(void *)(v4 + 88);
    }
    if ((unint64_t)(v349 - (char *)v6) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14 >> 62) {
      goto LABEL_461;
    }
    uint64_t v15 = operator new(4 * v14);
    uint64_t v16 = &v15[4 * v11];
    if (v358 == (char *)v6)
    {
      v20 = &v15[4 * v11];
      uint64_t v18 = a1;
    }
    else
    {
      unint64_t v17 = v358 - 4 - (char *)v6;
      uint64_t v18 = a1;
      if (v17 >= 0x2C)
      {
        if ((unint64_t)((char *)v6 - v15) >= 0x20)
        {
          uint64_t v21 = (v17 >> 2) + 1;
          unsigned __int8 v19 = (int16x8_t *)&v358[-4 * (v21 & 0x7FFFFFFFFFFFFFF8)];
          uint64_t v22 = &v15[v358 - (char *)v6 - 16];
          unint64_t v23 = v358 - 16;
          uint64_t v24 = v21 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            *uint64_t v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 8;
          }
          while (v24);
          v20 = &v16[-4 * (v21 & 0x7FFFFFFFFFFFFFF8)];
          if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_28;
          }
        }
        else
        {
          unsigned __int8 v19 = (int16x8_t *)v358;
          v20 = v16;
        }
      }
      else
      {
        unsigned __int8 v19 = (int16x8_t *)v358;
        v20 = v16;
      }
      do
      {
        __int32 v26 = v19[-1].i32[3];
        unsigned __int8 v19 = (int16x8_t *)((char *)v19 - 4);
        *((_DWORD *)v20 - 1) = v26;
        v20 -= 4;
      }
      while (v19 != v6);
    }
LABEL_28:
    v349 = &v15[4 * v14];
    v358 = &v16[4 * v12];
    if (v6) {
      operator delete(v6);
    }
    uint64_t v6 = (int16x8_t *)v20;
LABEL_31:
    uint64_t v27 = **(void **)(**(void **)(v18 + 32) + 144 * v7 + 64);
    unint64_t v28 = *(void *)(v27 + 8) * v9;
    if (v28)
    {
      if (v5 && *(unsigned char *)(v27 + 17) != 2) {
        unint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(*(void *)v5 + 56))(v5, v27, 0, v28, 1, 1);
      }
      else {
        unint64_t v29 = *(void *)(v27 + 72);
      }
    }
    else
    {
      unint64_t v29 = 0;
    }
    *(void *)&long long v30 = a2;
    *((void *)&v30 + 1) = v27;
    long long v361 = v30;
    unint64_t v362 = v28;
    unint64_t v363 = v29;
    if (v9)
    {
      uint64_t v31 = *(void *)(v4 + 8);
      if (v9 <= 0x17) {
        goto LABEL_48;
      }
      unint64_t v32 = 0;
      unint64_t v33 = v9 - 1;
      uint64_t v34 = 2 * (v9 - 1);
      if (&v6->i16[v34 + 1] < &v6->i16[1]) {
        goto LABEL_49;
      }
      if (&v6->i8[v34 * 2] < (__int8 *)v6) {
        goto LABEL_49;
      }
      uint64_t v35 = 8 * v33;
      if (v29 + 8 * v33 < v29
        || v29 + 2 + v35 < v29 + 2
        || v29 + 4 + v35 < v29 + 4
        || v29 + 6 + v35 < v29 + 6
        || v33 >> 61)
      {
        goto LABEL_49;
      }
      if (v29 < (unint64_t)v6 + 4 * v9 && (unint64_t)v6 < v29 + 8 * v9)
      {
LABEL_48:
        unint64_t v32 = 0;
LABEL_49:
        unint64_t v36 = v9 - v32;
        uint64_t v37 = 8 * v32;
        v38 = (float *)(v31 + 8 * v32 + 4);
        v39 = &v6->i8[4 * v32 + 2];
        v40 = (_DWORD *)(v29 + v37 + 4);
        do
        {
          int v41 = (int)(float)(*(v38 - 1) * 65535.0);
          float v42 = *v38;
          v38 += 2;
          int v43 = (int)(float)(v42 * 65535.0);
          *((_WORD *)v40 - 2) = v41;
          *((_WORD *)v40 - 1) = v43;
          _DWORD *v40 = 0x7FFF;
          v40 += 2;
          *((_WORD *)v39 - 1) = v41;
          *(_WORD *)v39 = v43;
          v39 += 4;
          --v36;
        }
        while (v36);
        goto LABEL_51;
      }
      unint64_t v32 = v9 & 0xFFFFFFFFFFFFFFF8;
      v265 = *(const float **)(v4 + 8);
      v266 = (__int16 *)v29;
      v267 = (__int16 *)v6;
      unint64_t v268 = v9 & 0xFFFFFFFFFFFFFFF8;
      long long v269 = v359;
      long long v270 = 0u;
      do
      {
        v271 = v265;
        float32x4x2_t v394 = vld2q_f32(v271);
        v271 += 8;
        float32x4x2_t v395 = vld2q_f32(v271);
        float32x4_t v272 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
        int16x8_t v273 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v394.val[0], v272)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v395.val[0], v272)));
        int8x16_t v2 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v394.val[1], v272)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v395.val[1], v272)));
        vst4q_s16(v266, *(int16x8x4_t *)(&v2 - 1));
        v266 += 32;
        vst2q_s16(v267, *(int16x8x2_t *)(&v2 - 1));
        v267 += 16;
        v265 += 16;
        v268 -= 8;
      }
      while (v268);
      if (v9 != v32) {
        goto LABEL_49;
      }
    }
LABEL_51:
    unint64_t v357 = v358 - (char *)v6;
    uint64_t v360 = (v358 - (char *)v6) >> 2;
    uint64_t v44 = *(void *)(*v350 + 144 * v7 + 96);
    long long v376 = 0uLL;
    uint64_t v45 = *(void *)(v44 + 8) * (3 * v360 - 6);
    if (v45)
    {
      if (v5 && *(unsigned char *)(v44 + 17) != 2) {
        v46 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 56))(v5, v44, 0, v45, 1, 1);
      }
      else {
        v46 = *(void **)(v44 + 72);
      }
    }
    else
    {
      v46 = 0;
    }
    *(void *)&long long v47 = a2;
    *((void *)&v47 + 1) = v44;
    long long v376 = v47;
    unint64_t v377 = 0;
    uint64_t v378 = v45;
    v380 = v46;
    __int16 v379 = 257;
    v365 = 0;
    uint64_t v366 = 0;
    v364 = &v365;
    long long v367 = xmmword_1A28FF960;
    v368 = 0;
    unint64_t v369 = 0;
    unsigned __int16 v370 = 0;
    int v372 = 4;
    uint64_t v371 = 0;
    v374 = 0;
    v375 = 0;
    v373 = 0;
    uint64_t v355 = v4;
    uint64_t v48 = (v358 - (char *)v6) >> 2;
    if (v357 < 0xC) {
      goto LABEL_307;
    }
    if (v357 > 0x3F)
    {
      v54.i64[0] = -1;
      v54.i64[1] = -1;
      unint64_t v49 = v360 & 0xFFFFFFFFFFFFFFF0;
      uint16x8_t v55 = 0uLL;
      i16 = v6[2].i16;
      unint64_t v57 = v360 & 0xFFFFFFFFFFFFFFF0;
      uint16x8_t v58 = 0uLL;
      uint16x8_t v59 = 0uLL;
      uint16x8_t v60 = 0uLL;
      v61.i64[0] = -1;
      v61.i64[1] = -1;
      v62.i64[0] = -1;
      v62.i64[1] = -1;
      v63.i64[0] = -1;
      v63.i64[1] = -1;
      do
      {
        v64 = i16 - 16;
        *(int16x8x2_t *)(&v2 - 1) = vld2q_s16(v64);
        int16x8x2_t v396 = vld2q_s16(i16);
        uint16x8_t v62 = vminq_u16(v65, v62);
        uint16x8_t v63 = vminq_u16((uint16x8_t)v396.val[0], v63);
        uint16x8_t v54 = vminq_u16((uint16x8_t)v2, v54);
        uint16x8_t v61 = vminq_u16((uint16x8_t)v396.val[1], v61);
        uint16x8_t v59 = vmaxq_u16(v65, v59);
        uint16x8_t v60 = vmaxq_u16((uint16x8_t)v396.val[0], v60);
        uint16x8_t v55 = vmaxq_u16((uint16x8_t)v2, v55);
        uint16x8_t v58 = vmaxq_u16((uint16x8_t)v396.val[1], v58);
        i16 += 32;
        v57 -= 16;
      }
      while (v57);
      unsigned __int16 v53 = vminvq_u16(vminq_u16(v62, v63));
      unsigned __int16 v52 = vminvq_u16(vminq_u16(v54, v61));
      unsigned __int16 v51 = vmaxvq_u16(vmaxq_u16(v59, v60));
      uint16x8_t v66 = vmaxq_u16(v55, v58);
      v66.i16[0] = vmaxvq_u16(v66);
      uint64_t v50 = v66.u32[0];
      if (v49 == v360) {
        goto LABEL_74;
      }
    }
    else
    {
      unint64_t v49 = 0;
      LOWORD(v50) = 0;
      unsigned __int16 v51 = 0;
      unsigned __int16 v52 = -1;
      unsigned __int16 v53 = -1;
    }
    unint64_t v67 = v360 - v49;
    v68 = &v6->i8[4 * v49 + 2];
    do
    {
      unsigned int v69 = *((unsigned __int16 *)v68 - 1);
      unsigned int v71 = *(unsigned __int16 *)v68;
      v68 += 4;
      unsigned int v70 = v71;
      if (v69 < v53) {
        unsigned __int16 v53 = v69;
      }
      if (v70 < v52) {
        unsigned __int16 v52 = v70;
      }
      if (v69 > v51) {
        unsigned __int16 v51 = v69;
      }
      if (v70 <= (unsigned __int16)v50) {
        uint64_t v50 = (unsigned __int16)v50;
      }
      else {
        uint64_t v50 = v70;
      }
      --v67;
    }
    while (v67);
LABEL_74:
    unint64_t v72 = v53 | ((unint64_t)v52 << 16);
    unint64_t v369 = ((unint64_t)v51 << 32) | (v50 << 48) | v72;
    *(double *)&int16x4_t v74 = (double)(int)((unsigned __int16)v50 - WORD1(v72));
    unsigned __int16 v370 = (int)fmax((double)(v51 - v53), *(double *)&v74);
    v73 = &v6->i8[4 * v360];
    v74.i16[0] = *((_WORD *)v73 - 2);
    v74.i16[2] = *((_WORD *)v73 - 1);
    if (v357 <= 0x3F)
    {
      unint64_t v75 = 0;
      double v76 = 0.0;
      goto LABEL_80;
    }
    v2.i16[6] = *((_WORD *)v73 - 2);
    v2.i16[7] = *((_WORD *)v73 - 1);
    int8x16_t v77 = (int8x16_t)vdupq_lane_s16(v74, 0);
    float64x2_t v78 = 0uLL;
    float64x2_t v79 = 0uLL;
    unint64_t v75 = v360 & 0xFFFFFFFFFFFFFFF0;
    v80 = v6 + 2;
    unint64_t v81 = v360 & 0xFFFFFFFFFFFFFFF0;
    float64x2_t v82 = 0uLL;
    float64x2_t v83 = 0uLL;
    float64x2_t v84 = 0uLL;
    float64x2_t v85 = 0uLL;
    float64x2_t v86 = 0uLL;
    float64x2_t v87 = 0uLL;
    do
    {
      v88 = v80[-2].i16;
      int16x8x2_t v397 = vld2q_s16(v88);
      int16x8_t v90 = *v80;
      int16x8_t v89 = v80[1];
      v80 += 4;
      uint16x8_t v91 = (uint16x8_t)vextq_s8(v77, (int8x16_t)v397.val[0], 0xEuLL);
      int8x16_t v92 = (int8x16_t)vuzp1q_s16(v90, v89);
      uint16x8_t v93 = (uint16x8_t)vextq_s8(v2, (int8x16_t)v397.val[1], 0xEuLL);
      int8x16_t v94 = (int8x16_t)vuzp2q_s16(v90, v89);
      uint16x8_t v95 = (uint16x8_t)vextq_s8((int8x16_t)v397.val[0], v92, 0xEuLL);
      uint16x8_t v96 = (uint16x8_t)vextq_s8((int8x16_t)v397.val[1], v94, 0xEuLL);
      int32x4_t v97 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v397.val[1].i8);
      int32x4_t v98 = vmulq_s32((int32x4_t)vaddl_high_u16(v93, (uint16x8_t)v397.val[1]), (int32x4_t)vsubl_high_u16(v91, (uint16x8_t)v397.val[0]));
      int32x4_t v99 = vmulq_s32(v97, (int32x4_t)vsubl_u16(*(uint16x4_t *)v91.i8, *(uint16x4_t *)v397.val[0].i8));
      v397.val[1] = (int16x8_t)vmulq_s32((int32x4_t)vaddl_high_u16(v96, (uint16x8_t)v94), (int32x4_t)vsubl_high_u16(v95, (uint16x8_t)v92));
      v397.val[0] = (int16x8_t)vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v96.i8, *(uint16x4_t *)v94.i8), (int32x4_t)vsubl_u16(*(uint16x4_t *)v95.i8, *(uint16x4_t *)v92.i8));
      v100.i64[0] = v99.i32[0];
      v100.i64[1] = v99.i32[1];
      float64x2_t v101 = vcvtq_f64_s64(v100);
      v100.i64[0] = v99.i32[2];
      v100.i64[1] = v99.i32[3];
      float64x2_t v102 = vcvtq_f64_s64(v100);
      v100.i64[0] = v98.i32[0];
      v100.i64[1] = v98.i32[1];
      float64x2_t v103 = vcvtq_f64_s64(v100);
      v100.i64[0] = v98.i32[2];
      v100.i64[1] = v98.i32[3];
      float64x2_t v104 = vcvtq_f64_s64(v100);
      v100.i64[0] = v397.val[0].i32[0];
      v100.i64[1] = v397.val[0].i32[1];
      float64x2_t v105 = vcvtq_f64_s64(v100);
      v100.i64[0] = v397.val[0].i32[2];
      v100.i64[1] = v397.val[0].i32[3];
      v397.val[0] = (int16x8_t)vcvtq_f64_s64(v100);
      v100.i64[0] = v397.val[1].i32[0];
      v100.i64[1] = v397.val[1].i32[1];
      float64x2_t v106 = vcvtq_f64_s64(v100);
      v100.i64[0] = v397.val[1].i32[2];
      v100.i64[1] = v397.val[1].i32[3];
      float64x2_t v83 = vaddq_f64(v83, v104);
      float64x2_t v82 = vaddq_f64(v82, v103);
      float64x2_t v79 = vaddq_f64(v79, v102);
      float64x2_t v78 = vaddq_f64(v78, v101);
      float64x2_t v87 = vaddq_f64(v87, vcvtq_f64_s64(v100));
      float64x2_t v86 = vaddq_f64(v86, v106);
      float64x2_t v85 = vaddq_f64(v85, (float64x2_t)v397.val[0]);
      float64x2_t v84 = vaddq_f64(v84, v105);
      int8x16_t v2 = v94;
      int8x16_t v77 = v92;
      v81 -= 16;
    }
    while (v81);
    double v76 = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v84, v78), vaddq_f64(v86, v82)), vaddq_f64(vaddq_f64(v85, v79), vaddq_f64(v87, v83))));
    if (v75 != v360)
    {
      v74.i32[0] = v89.u16[6];
      v74.i32[1] = v89.u16[7];
LABEL_80:
      unint64_t v107 = v360 - v75;
      v108 = &v6->i8[4 * v75];
      do
      {
        int32x2_t v109 = (int32x2_t)vand_s8((int8x8_t)v74, (int8x8_t)0xFFFF0000FFFFLL);
        v74.i32[0] = *(unsigned __int16 *)v108;
        int32x2_t v110 = vsub_s32(v109, (int32x2_t)v74);
        v74.i32[1] = *((unsigned __int16 *)v108 + 1);
        double v76 = v76 + (double)vmul_lane_s32(v110, vadd_s32(v109, (int32x2_t)v74), 1).i32[0];
        v108 += 4;
        --v107;
      }
      while (v107);
    }
    __int16 v111 = 0;
    uint64_t v112 = 0;
    v113 = 0;
    do
    {
      v114 = v368;
      if (!v368)
      {
        v115 = (char *)malloc_type_malloc(*((size_t *)&v367 + 1), 0x160B39uLL);
        v116 = v115;
        v117 = v365;
        v118 = &v365;
LABEL_87:
        v119 = v118;
        if (v117)
        {
          do
          {
            v118 = (uint64_t **)v117;
            unint64_t v120 = v117[4];
            if ((unint64_t)v115 < v120)
            {
              v117 = *v118;
              goto LABEL_87;
            }
            if (v120 >= (unint64_t)v115) {
              goto LABEL_95;
            }
            v117 = v118[1];
          }
          while (v117);
          v119 = v118 + 1;
        }
        v121 = (uint64_t *)operator new(0x28uLL);
        v121[4] = (uint64_t)v116;
        uint64_t *v121 = 0;
        v121[1] = 0;
        v121[2] = (uint64_t)v118;
        *v119 = v121;
        if (*v364)
        {
          v364 = (uint64_t **)*v364;
          v121 = *v119;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v365, v121);
        ++v366;
LABEL_95:
        v114 = v368;
        uint64_t v122 = 48 * v367 - 48;
        if ((v122 & 0x8000000000000000) == 0)
        {
          v123 = &v116[v122];
          v124 = &v116[v122];
          do
          {
            *(void *)v124 = v114;
            v124 -= 48;
            v114 = v123;
            v123 = v124;
          }
          while (v124 >= v116);
          v114 = v124 + 48;
        }
      }
      v125 = &v6->i8[4 * v112];
      v368 = (unsigned __int16 *)*v114;
      *(_WORD *)v114 = v111;
      int v126 = *(_DWORD *)v125;
      *(_OWORD *)(v114 + 1) = 0u;
      v127 = v114 + 1;
      *(_DWORD *)((char *)v114 + 2) = v126;
      *(_OWORD *)(v114 + 3) = 0u;
      *(void *)((char *)v114 + 37) = 0;
      if (v113)
      {
        v128 = v113 + 2;
        uint64_t v129 = v113[2];
        v114[1] = v113;
        v114[2] = v129;
        *(void *)(v113[2] + 8) = v114;
      }
      else
      {
        v114[1] = v114;
        v128 = v114 + 2;
      }
      void *v128 = v114;
      *((unsigned char *)v114 + 44) = 0;
      int v130 = v370;
      if (v370)
      {
        int v131 = *(unsigned __int16 *)v125;
        int v132 = 0xFFFF * (*((unsigned __int16 *)v125 + 1) - WORD1(v369)) / v370;
        int v133 = ((0xFFFF * (v131 - (unsigned __int16)v369) / v370) | ((0xFFFF * (v131 - (unsigned __int16)v369) / v370) << 8)) & 0xFF00FF;
        int v134 = (v133 | (16 * v133)) & 0x3030303 | (4 * ((v133 | (16 * v133)) & 0xF0F0F0F)) & 0x33333333;
        int v135 = (v132 | (v132 << 8)) & 0xF000F | (16 * ((v132 | (v132 << 8)) & 0xFF00FF)) & 0xF0F0F0F;
        *((_DWORD *)v114 + 10) = ((4 * ((v135 | (4 * v135)) & 0x33333333)) | (2 * ((v135 | (4 * v135)) & 0x33333333))) & 0xAAAAAAAA | (v134 | (2 * v134)) & 0x55555555;
      }
      __int16 v111 = ++v371;
      ++v112;
      v113 = v114;
    }
    while (v112 != v360);
    uint64_t v136 = v114[2];
    if (*(_DWORD *)((char *)v114 + 2) == *(_DWORD *)(v136 + 2))
    {
      v137 = (void *)*v127;
      v138 = (void *)*v127;
      uint64_t v48 = (v358 - (char *)v6) >> 2;
      if (v136)
      {
        *(void *)(v136 + 8) = v137;
        v138 = (void *)*v127;
      }
      if (v138) {
        v138[2] = v136;
      }
      if (v366)
      {
        *((unsigned char *)v114 + 44) = -1;
        void *v114 = v368;
        v368 = (unsigned __int16 *)v114;
      }
    }
    else
    {
      v137 = v114;
      uint64_t v48 = (v358 - (char *)v6) >> 2;
    }
    if (v76 < 0.0)
    {
      v139 = v137;
      do
      {
        uint64_t v141 = v139[1];
        v140 = (void *)v139[2];
        v139[1] = v140;
        v139[2] = v141;
        v139 = v140;
      }
      while (v140 != v137);
    }
    if (!v137) {
      goto LABEL_307;
    }
    v142 = (unsigned __int16 *)v137[2];
    if (!v130) {
      goto LABEL_145;
    }
    v143 = (unsigned __int16 *)v137[2];
    if (!v142)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Called linkListInHashSpace with a NULL head.", 44);
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E4FBA240] + *(void *)(*MEMORY[0x1E4FBA240] - 24)));
      v274 = std::locale::use_facet((const std::locale *)&v385, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v274->__vftable[2].~facet_0)(v274, 10);
      std::locale::~locale((std::locale *)&v385);
      std::ostream::put();
      std::ostream::flush();
LABEL_306:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Called earclipPolygon with a NULL head. Probably wrong to do so.", 64);
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E4FBA240] + *(void *)(*MEMORY[0x1E4FBA240] - 24)));
      v275 = std::locale::use_facet((const std::locale *)&v385, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v275->__vftable[2].~facet_0)(v275, 10);
      std::locale::~locale((std::locale *)&v385);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_307;
    }
    do
    {
      v144 = (unsigned __int16 *)*((void *)v143 + 2);
      *((void *)v143 + 3) = *((void *)v143 + 1);
      *((void *)v143 + 4) = v144;
      v143 = v144;
    }
    while (v144 != v142);
    *(void *)(*((void *)v142 + 3) + 32) = 0;
    *((void *)v142 + 3) = 0;
    v145 = v142;
    uint64_t v146 = 1;
    while (2)
    {
      unint64_t v147 = 0;
      v148 = 0;
      v149 = v145;
      v150 = v145;
      while (2)
      {
        uint64_t v151 = 0;
        ++v147;
        while (1)
        {
          ++v151;
          v150 = (unsigned __int16 *)*((void *)v150 + 4);
          if (!v150) {
            break;
          }
          if (v146 == v151)
          {
            uint64_t v151 = v146;
            break;
          }
        }
        uint64_t v152 = v146;
        while (1)
        {
          BOOL v157 = !v152 || v150 == 0;
          BOOL v158 = !v157;
          if (!v151) {
            break;
          }
          if (!v158 || *((_DWORD *)v149 + 10) <= *((_DWORD *)v150 + 10))
          {
            v153 = (unsigned __int16 *)*((void *)v149 + 4);
            --v151;
            v154 = v150;
            v155 = v149;
            v156 = v149;
            if (!v148) {
              goto LABEL_130;
            }
LABEL_129:
            *((void *)v148 + 4) = v155;
            v156 = v145;
            goto LABEL_130;
          }
LABEL_143:
          v154 = (unsigned __int16 *)*((void *)v150 + 4);
          --v152;
          v153 = v149;
          v155 = v150;
          v156 = v150;
          if (v148) {
            goto LABEL_129;
          }
LABEL_130:
          *((void *)v155 + 3) = v148;
          v145 = v156;
          v149 = v153;
          v150 = v154;
          v148 = v155;
        }
        if (v158)
        {
          uint64_t v151 = 0;
          goto LABEL_143;
        }
        v149 = v150;
        if (v150) {
          continue;
        }
        break;
      }
      *((void *)v148 + 4) = 0;
      v146 *= 2;
      if (v147 > 1) {
        continue;
      }
      break;
    }
LABEL_145:
    if (!v142) {
      goto LABEL_306;
    }
    v159 = (unsigned __int16 *)*((void *)v142 + 1);
    v160 = (unsigned __int16 *)*((void *)v142 + 2);
    unint64_t v161 = 3 * v360 - 6;
    if (v159 == v160) {
      goto LABEL_336;
    }
    uint64_t v354 = v7;
LABEL_148:
    unsigned __int16 v162 = v142[2];
    v163 = v142;
    unsigned __int16 v164 = v142[1];
    while (1)
    {
      v165 = v159;
      v166 = v160;
      unsigned int v167 = v159[2];
      unsigned int v168 = v160[1];
      unsigned int v169 = v165[1];
      unsigned int v170 = v160[2];
      if ((int)((v168 - v164) * (v162 - v167) + (v162 - v170) * (v164 - v169)) <= 0)
      {
        if (v370)
        {
          if (v167 >= v162) {
            unsigned int v171 = v162;
          }
          else {
            unsigned int v171 = v167;
          }
          if (v167 <= v162) {
            unsigned int v172 = v162;
          }
          else {
            unsigned int v172 = v167;
          }
          if (v169 >= v164) {
            unsigned int v173 = v164;
          }
          else {
            unsigned int v173 = v165[1];
          }
          if (v169 <= v164) {
            unsigned int v174 = v164;
          }
          else {
            unsigned int v174 = v165[1];
          }
          if (v173 >= v168) {
            unsigned int v173 = v168;
          }
          if (v171 >= v170) {
            unsigned int v171 = v170;
          }
          if (v174 <= v168) {
            unsigned int v175 = v168;
          }
          else {
            unsigned int v175 = v174;
          }
          if (v172 <= v170) {
            unsigned int v176 = v170;
          }
          else {
            unsigned int v176 = v172;
          }
          v177 = (unsigned __int16 *)*((void *)v163 + 4);
          double v178 = (double)v169;
          if (v177)
          {
            int v179 = (((int)(0xFFFF * (v175 - (unsigned __int16)v369)) / v370) | (((int)(0xFFFF
                                                                                     * (v175 - (unsigned __int16)v369))
                                                                               / v370) << 8)) & 0xFF00FF;
            int v180 = (v179 | (16 * v179)) & 0x3030303 | (4 * ((v179 | (16 * v179)) & 0xF0F0F0F)) & 0x33333333;
            int v181 = (((int)(0xFFFF * (v176 - WORD1(v369))) / v370) | (((int)(0xFFFF * (v176 - WORD1(v369))) / v370) << 8)) & 0xFF00FF;
            int v182 = (v181 | (16 * v181)) & 0x3030303 | (4 * ((v181 | (16 * v181)) & 0xF0F0F0F)) & 0x33333333;
            unsigned int v183 = ((4 * v182) | (2 * v182)) & 0xAAAAAAAA | (v180 | (2 * v180)) & 0x55555555;
            double v184 = (double)v168;
            double v185 = v178 - (double)v168;
            while (*((_DWORD *)v177 + 10) <= v183)
            {
              if (v177 != v165 && v177 != v166)
              {
                int v186 = *v177;
                if (*v165 != v186 && *v163 != v186 && *v166 != v186)
                {
                  unsigned int v187 = v177[2];
                  unsigned int v188 = v177[1];
                  if ((((*(unsigned __int16 *)(*((void *)v177 + 2) + 2) - v188)
                       * (v187 - *(unsigned __int16 *)(*((void *)v177 + 1) + 4))
                       + (v187 - *(unsigned __int16 *)(*((void *)v177 + 2) + 4))
                       * (v188 - *(unsigned __int16 *)(*((void *)v177 + 1) + 2))) & 0x80000000) == 0)
                  {
                    double v189 = (double)v188;
                    double v190 = (double)v187;
                    if ((v178 - (double)v188) * ((double)v162 - (double)v167)
                       + ((double)v187 - (double)v167) * ((double)v164 - v178) >= 0.0
                      && ((double)v164 - v189) * ((double)v170 - (double)v162)
                       + (v190 - (double)v162) * ((double)v168 - (double)v164) >= 0.0
                      && (v184 - v189) * ((double)v167 - (double)v170) + (v190 - (double)v170) * v185 >= 0.0)
                    {
                      goto LABEL_150;
                    }
                  }
                }
              }
              v177 = (unsigned __int16 *)*((void *)v177 + 4);
              if (!v177) {
                break;
              }
            }
          }
          else
          {
            double v184 = (double)v168;
            double v185 = v178 - (double)v168;
          }
          v195 = (unsigned __int16 *)*((void *)v163 + 3);
          if (v195)
          {
            int v196 = (((int)(0xFFFF * (v173 - (unsigned __int16)v369)) / v370) | (((int)(0xFFFF
                                                                                     * (v173 - (unsigned __int16)v369))
                                                                               / v370) << 8)) & 0xFF00FF;
            int v197 = (v196 | (16 * v196)) & 0x3030303 | (4 * ((v196 | (16 * v196)) & 0xF0F0F0F)) & 0x33333333;
            int v198 = (((int)(0xFFFF * (v171 - WORD1(v369))) / v370) | (((int)(0xFFFF * (v171 - WORD1(v369))) / v370) << 8)) & 0xFF00FF;
            int v199 = (v198 | (16 * v198)) & 0x3030303 | (4 * ((v198 | (16 * v198)) & 0xF0F0F0F)) & 0x33333333;
            unsigned int v200 = ((4 * v199) | (2 * v199)) & 0xAAAAAAAA | (v197 | (2 * v197)) & 0x55555555;
            double v201 = (double)v167;
            double v202 = (double)v164;
            double v203 = (double)v162;
            double v204 = v203 - (double)v167;
            while (*((_DWORD *)v195 + 10) >= v200)
            {
              if (v195 != v165 && v195 != v166)
              {
                int v205 = *v195;
                if (*v165 != v205 && *v163 != v205 && *v166 != v205)
                {
                  unsigned int v206 = v195[2];
                  unsigned int v207 = v195[1];
                  if ((((*(unsigned __int16 *)(*((void *)v195 + 2) + 2) - v207)
                       * (v206 - *(unsigned __int16 *)(*((void *)v195 + 1) + 4))
                       + (v206 - *(unsigned __int16 *)(*((void *)v195 + 2) + 4))
                       * (v207 - *(unsigned __int16 *)(*((void *)v195 + 1) + 2))) & 0x80000000) == 0)
                  {
                    double v208 = (double)v207;
                    double v209 = (double)v206;
                    if ((v178 - (double)v207) * v204 + ((double)v206 - v201) * (v202 - v178) >= 0.0
                      && (v202 - v208) * ((double)v170 - v203) + (v209 - v203) * (v184 - v202) >= 0.0
                      && (v184 - v208) * (v201 - (double)v170) + (v209 - (double)v170) * v185 >= 0.0)
                    {
                      goto LABEL_150;
                    }
                  }
                }
              }
              v195 = (unsigned __int16 *)*((void *)v195 + 3);
              if (!v195) {
                break;
              }
            }
          }
LABEL_216:
          v211 = v374;
          v210 = v375;
          if (v374 < v375)
          {
            *(_WORD *)v374 = *v165;
            v212 = v211 + 2;
            goto LABEL_238;
          }
          v213 = (char *)v373;
          uint64_t v214 = v374 - (unsigned char *)v373;
          if (v374 - (unsigned char *)v373 < -2) {
            goto LABEL_460;
          }
          uint64_t v215 = v214 >> 1;
          if (v375 - (unsigned char *)v373 <= (unint64_t)((v214 >> 1) + 1)) {
            uint64_t v216 = v215 + 1;
          }
          else {
            uint64_t v216 = v375 - (unsigned char *)v373;
          }
          if ((unint64_t)(v375 - (unsigned char *)v373) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v217 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v217 = v216;
          }
          if (v217)
          {
            if ((v217 & 0x8000000000000000) == 0)
            {
              v218 = (char *)operator new(2 * v217);
              goto LABEL_229;
            }
LABEL_461:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v218 = 0;
LABEL_229:
          v219 = &v218[2 * v215];
          *(_WORD *)v219 = *v165;
          v212 = v219 + 2;
          if (v211 != v213)
          {
            unint64_t v220 = v211 - 2 - v213;
            if (v220 < 0x1E) {
              goto LABEL_466;
            }
            if (v211 - v218 - (v214 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
              goto LABEL_466;
            }
            uint64_t v221 = (v220 >> 1) + 1;
            v222 = &v218[2 * v215 - 16];
            v223 = v211 - 16;
            unint64_t v224 = v221 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v225 = *(_OWORD *)v223;
              *((_OWORD *)v222 - 1) = *((_OWORD *)v223 - 1);
              *(_OWORD *)v222 = v225;
              v222 -= 32;
              v223 -= 32;
              v224 -= 16;
            }
            while (v224);
            v219 -= 2 * (v221 & 0xFFFFFFFFFFFFFFF0);
            v211 -= 2 * (v221 & 0xFFFFFFFFFFFFFFF0);
            if (v221 != (v221 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_466:
              do
              {
                __int16 v226 = *((_WORD *)v211 - 1);
                v211 -= 2;
                *((_WORD *)v219 - 1) = v226;
                v219 -= 2;
              }
              while (v211 != v213);
            }
          }
          v210 = &v218[2 * v217];
          v373 = v219;
          v374 = v212;
          v375 = v210;
          if (v213)
          {
            operator delete(v213);
            v210 = v375;
          }
LABEL_238:
          v374 = v212;
          if (v212 < v210)
          {
            *(_WORD *)v212 = *v163;
            v227 = (unsigned __int16 *)(v212 + 2);
            goto LABEL_262;
          }
          v228 = (char *)v373;
          uint64_t v229 = v212 - (unsigned char *)v373;
          if (v212 - (unsigned char *)v373 < -2) {
            goto LABEL_460;
          }
          uint64_t v230 = v229 >> 1;
          unint64_t v231 = v210 - (unsigned char *)v373;
          if (v231 <= (v229 >> 1) + 1) {
            unint64_t v232 = v230 + 1;
          }
          else {
            unint64_t v232 = v231;
          }
          if (v231 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v233 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v233 = v232;
          }
          if (v233)
          {
            if (v233 < 0) {
              goto LABEL_461;
            }
            v234 = operator new(2 * v233);
          }
          else
          {
            v234 = 0;
          }
          v235 = (unsigned __int16 *)&v234[2 * v230];
          unsigned __int16 *v235 = *v163;
          v227 = v235 + 1;
          if (v212 != v228)
          {
            unint64_t v236 = v212 - 2 - v228;
            if (v236 < 0x1E)
            {
              v237 = v212;
              goto LABEL_259;
            }
            if (v212 - v234 - (v229 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            {
              v237 = v212;
              goto LABEL_259;
            }
            uint64_t v238 = (v236 >> 1) + 1;
            v237 = &v212[-2 * (v238 & 0xFFFFFFFFFFFFFFF0)];
            v239 = &v234[2 * v230 - 16];
            v240 = (long long *)(v212 - 16);
            unint64_t v241 = v238 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v242 = *v240;
              *(v239 - 1) = *(v240 - 1);
              _OWORD *v239 = v242;
              v239 -= 2;
              v240 -= 2;
              v241 -= 16;
            }
            while (v241);
            v235 -= v238 & 0xFFFFFFFFFFFFFFF0;
            if (v238 != (v238 & 0xFFFFFFFFFFFFFFF0))
            {
              do
              {
LABEL_259:
                unsigned __int16 v243 = *((_WORD *)v237 - 1);
                v237 -= 2;
                *--v235 = v243;
              }
              while (v237 != v228);
            }
          }
          v210 = &v234[2 * v233];
          v373 = v235;
          v374 = (char *)v227;
          v375 = v210;
          if (v228)
          {
            operator delete(v228);
            v210 = v375;
          }
LABEL_262:
          v374 = (char *)v227;
          if (v227 < (unsigned __int16 *)v210)
          {
            unsigned __int16 *v227 = *v166;
            v244 = (char *)(v227 + 1);
            uint64_t v5 = a2;
            goto LABEL_284;
          }
          v245 = (unsigned __int16 *)v373;
          uint64_t v246 = (char *)v227 - (unsigned char *)v373;
          if ((char *)v227 - (unsigned char *)v373 <= -3) {
LABEL_460:
          }
            abort();
          uint64_t v247 = v246 >> 1;
          unint64_t v248 = v210 - (unsigned char *)v373;
          if (v248 <= (v246 >> 1) + 1) {
            unint64_t v249 = v247 + 1;
          }
          else {
            unint64_t v249 = v248;
          }
          if (v248 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v250 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v250 = v249;
          }
          if (v250)
          {
            if (v250 < 0) {
              goto LABEL_461;
            }
            v251 = operator new(2 * v250);
          }
          else
          {
            v251 = 0;
          }
          v252 = (unsigned __int16 *)&v251[2 * v247];
          unsigned __int16 *v252 = *v166;
          v244 = (char *)(v252 + 1);
          if (v227 == v245)
          {
            uint64_t v5 = a2;
          }
          else
          {
            unint64_t v253 = (char *)(v227 - 1) - (char *)v245;
            if (v253 < 0x1E || (char *)v227 - v251 - (v246 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            {
              v254 = v227;
              uint64_t v5 = a2;
              goto LABEL_279;
            }
            uint64_t v260 = (v253 >> 1) + 1;
            v254 = &v227[-(v260 & 0xFFFFFFFFFFFFFFF0)];
            v261 = &v251[2 * v247 - 16];
            v262 = v227 - 8;
            unint64_t v263 = v260 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v264 = *(_OWORD *)v262;
              *(v261 - 1) = *((_OWORD *)v262 - 1);
              _OWORD *v261 = v264;
              v261 -= 2;
              v262 -= 16;
              v263 -= 16;
            }
            while (v263);
            v252 -= v260 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v5 = a2;
            if (v260 != (v260 & 0xFFFFFFFFFFFFFFF0))
            {
              do
              {
LABEL_279:
                unsigned __int16 v255 = *--v254;
                *--v252 = v255;
              }
              while (v254 != v245);
            }
          }
          v373 = v252;
          v374 = v244;
          v375 = &v251[2 * v250];
          if (v245) {
            operator delete(v245);
          }
LABEL_284:
          v374 = v244;
          uint64_t v257 = *((void *)v163 + 1);
          uint64_t v256 = *((void *)v163 + 2);
          if (v256)
          {
            *(void *)(v256 + 8) = v257;
            uint64_t v257 = *((void *)v163 + 1);
          }
          uint64_t v7 = v354;
          if (v257) {
            *(void *)(v257 + 16) = v256;
          }
          uint64_t v258 = *((void *)v163 + 3);
          if (v258) {
            *(void *)(v258 + 32) = *((void *)v163 + 4);
          }
          uint64_t v259 = *((void *)v163 + 4);
          if (v259) {
            *(void *)(v259 + 24) = v258;
          }
          if (v366)
          {
            *((unsigned char *)v163 + 44) = -1;
            *(void *)v163 = v368;
            v368 = v163;
          }
          v142 = (unsigned __int16 *)*((void *)v166 + 2);
          if (!v142
            || (v159 = (unsigned __int16 *)*((void *)v142 + 1),
                v160 = (unsigned __int16 *)*((void *)v142 + 2),
                v159 == v160))
          {
LABEL_379:
            if (v165)
            {
              uint64_t v312 = *((void *)v165 + 2);
              if (v312) {
                *(void *)(v312 + 8) = *((void *)v165 + 1);
              }
              uint64_t v313 = *((void *)v165 + 1);
              if (v313) {
                *(void *)(v313 + 16) = v312;
              }
              uint64_t v314 = *((void *)v165 + 3);
              if (v314) {
                *(void *)(v314 + 32) = *((void *)v165 + 4);
              }
              uint64_t v315 = *((void *)v165 + 4);
              if (v315) {
                *(void *)(v315 + 24) = v314;
              }
              if (v366)
              {
                *((unsigned char *)v165 + 44) = -1;
                *(void *)v165 = v368;
                v368 = v165;
              }
            }
            uint64_t v316 = *((void *)v166 + 2);
            if (v316) {
              *(void *)(v316 + 8) = *((void *)v166 + 1);
            }
            uint64_t v317 = *((void *)v166 + 1);
            uint64_t v48 = (v358 - (char *)v6) >> 2;
            if (v317) {
              *(void *)(v317 + 16) = v316;
            }
            uint64_t v318 = *((void *)v166 + 3);
            unint64_t v161 = 3 * v360 - 6;
            if (v318) {
              *(void *)(v318 + 32) = *((void *)v166 + 4);
            }
            uint64_t v319 = *((void *)v166 + 4);
            if (v319) {
              *(void *)(v319 + 24) = v318;
            }
            if (v366)
            {
              *((unsigned char *)v166 + 44) = -1;
              *(void *)v166 = v368;
              v368 = v166;
            }
            goto LABEL_336;
          }
          goto LABEL_148;
        }
        v191 = (unsigned __int16 *)*((void *)v160 + 2);
        if (v191 == v165) {
          goto LABEL_216;
        }
        while (1)
        {
          int v192 = *v191;
          if (*v165 != v192 && *v163 != v192 && *v166 != v192)
          {
            unint64_t v193 = (unint64_t)*(unsigned int *)(v191 + 1) >> 16;
            int v194 = (unsigned __int16)*(_DWORD *)(v191 + 1);
            uint64_t v5 = a2;
            uint64_t v7 = v354;
            if ((((*(unsigned __int16 *)(*((void *)v191 + 2) + 2) - v194)
                 * (HIWORD(*(_DWORD *)(v191 + 1)) - *(unsigned __int16 *)(*((void *)v191 + 1) + 4))
                 + (v193 - *(unsigned __int16 *)(*((void *)v191 + 2) + 4))
                 * (v194 - *(unsigned __int16 *)(*((void *)v191 + 1) + 2))) & 0x80000000) == 0
              && (((int)(v193 - v167) * (uint64_t)(int)(v164 - v169) + (int)(v167 - v162) * (uint64_t)(int)(v194 - v169)) & 0x8000000000000000) == 0
              && (((int)(v193 - v162) * (uint64_t)(int)(v168 - v164) + (int)(v162 - v170) * (uint64_t)(v194 - v164)) & 0x8000000000000000) == 0
              && (((int)(v193 - v170) * (uint64_t)(int)(v169 - v168) + (int)(v170 - v167) * (uint64_t)(int)(v194 - v168)) & 0x8000000000000000) == 0)
            {
              break;
            }
          }
          v191 = (unsigned __int16 *)*((void *)v191 + 2);
          if (v191 == v165) {
            goto LABEL_216;
          }
        }
      }
LABEL_150:
      if (v166 == v142) {
        break;
      }
      v159 = (unsigned __int16 *)*((void *)v166 + 1);
      v160 = (unsigned __int16 *)*((void *)v166 + 2);
      unsigned __int16 v164 = v168;
      unsigned __int16 v162 = v170;
      v163 = v166;
      if (v159 == v160) {
        goto LABEL_379;
      }
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Wrapped around the polygon without finishing... :-(", 51);
    std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E4FBA240] + *(void *)(*MEMORY[0x1E4FBA240] - 24)));
    v320 = std::locale::use_facet((const std::locale *)&v385, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v320->__vftable[2].~facet_0)(v320, 10);
    std::locale::~locale((std::locale *)&v385);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v321 = 0;
    v322 = v142;
    do
    {
      ++v321;
      v322 = (unsigned __int16 *)*((void *)v322 + 2);
    }
    while (v322 != v142 && v322 != 0);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA250], (uint64_t)"List has ", 9);
    std::to_string(&v385, v321);
    if ((v385.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v324 = &v385;
    }
    else {
      v324 = (std::string *)v385.__r_.__value_.__r.__words[0];
    }
    if ((v385.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v385.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v385.__r_.__value_.__l.__size_;
    }
    v326 = (void *)MEMORY[0x1E4FBA250];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA250], (uint64_t)v324, size);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v326, (uint64_t)" nodes:", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v326 + *(void *)(*v326 - 24)));
    v327 = std::locale::use_facet(__dst, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v327->__vftable[2].~facet_0)(v327, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v326, (uint64_t)"\t", 1);
    if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v385.__r_.__value_.__l.__data_);
    }
    v328 = v142;
    do
    {
      std::to_string(&v385, *v328);
      if ((v385.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v329 = &v385;
      }
      else {
        v329 = (std::string *)v385.__r_.__value_.__r.__words[0];
      }
      if ((v385.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v330 = HIBYTE(v385.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v330 = v385.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v326, (uint64_t)v329, v330);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v326, (uint64_t)" ", 1);
      if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v385.__r_.__value_.__l.__data_);
      }
      v328 = (unsigned __int16 *)*((void *)v328 + 2);
    }
    while (v328 != v142 && v328);
    std::ios_base::getloc((const std::ios_base *)((char *)v326 + *(void *)(*v326 - 24)));
    uint64_t v48 = (v358 - (char *)v6) >> 2;
    v331 = std::locale::use_facet((const std::locale *)&v385, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v331->__vftable[2].~facet_0)(v331, 10);
    std::locale::~locale((std::locale *)&v385);
    std::ostream::put();
    std::ostream::flush();
    v332 = (unsigned __int16 *)*((void *)v142 + 1);
    if (v332)
    {
      uint64_t v333 = v366;
      if (v366)
      {
        v334 = v368;
        do
        {
          v335 = v142;
          v142 = (unsigned __int16 *)*((void *)v142 + 2);
          if (v142) {
            *((void *)v142 + 1) = *((void *)v335 + 1);
          }
          uint64_t v336 = *((void *)v335 + 1);
          if (v336) {
            *(void *)(v336 + 16) = v142;
          }
          uint64_t v337 = *((void *)v335 + 3);
          if (v337) {
            *(void *)(v337 + 32) = *((void *)v335 + 4);
          }
          uint64_t v338 = *((void *)v335 + 4);
          if (v338) {
            *(void *)(v338 + 24) = v337;
          }
          *((unsigned char *)v335 + 44) = -1;
          *(void *)v335 = v334;
          v334 = v335;
        }
        while (v142 != v332);
        v368 = v335;
      }
      else
      {
        do
        {
          v339 = (unsigned __int16 *)*((void *)v142 + 2);
          if (v339) {
            *((void *)v339 + 1) = *((void *)v142 + 1);
          }
          uint64_t v340 = *((void *)v142 + 1);
          if (v340) {
            *(void *)(v340 + 16) = v339;
          }
          uint64_t v341 = *((void *)v142 + 3);
          if (v341) {
            *(void *)(v341 + 32) = *((void *)v142 + 4);
          }
          uint64_t v342 = *((void *)v142 + 4);
          if (v342) {
            *(void *)(v342 + 24) = v341;
          }
          v142 = v339;
        }
        while (v339 != v332);
      }
      uint64_t v343 = *((void *)v332 + 2);
      if (v343) {
        *(void *)(v343 + 8) = *((void *)v332 + 1);
      }
      uint64_t v344 = *((void *)v332 + 1);
      if (v344) {
        *(void *)(v344 + 16) = v343;
      }
      uint64_t v345 = *((void *)v332 + 3);
      if (v345) {
        *(void *)(v345 + 32) = *((void *)v332 + 4);
      }
      uint64_t v346 = *((void *)v332 + 4);
      if (v346) {
        *(void *)(v346 + 24) = v345;
      }
      if (v333)
      {
        *((unsigned char *)v332 + 44) = -1;
        *(void *)v332 = v368;
        v368 = v332;
      }
    }
LABEL_307:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    v276 = (id)GEOGetVectorKitVKDefaultLog_log;
    unint64_t v161 = 3 * v360 - 6;
    if (!os_log_type_enabled(v276, OS_LOG_TYPE_ERROR)) {
      goto LABEL_335;
    }
    if (v358 == (char *)v6)
    {
      HIBYTE(v382) = 0;
      LOBYTE(__dst[0].__locale_) = 0;
      locale = (std::locale::__imp *)__dst;
      goto LABEL_333;
    }
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v385);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v385, (uint64_t)"(", 1);
    v277 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v277, (uint64_t)", ", 2);
    v278 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)")", 1);
    if (v357 >= 5)
    {
      uint64_t v279 = v360 - 1;
      v280 = &v6->i8[6];
      do
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v385, (uint64_t)", (", 3);
        v281 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v281, (uint64_t)", ", 2);
        v282 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v282, (uint64_t)")", 1);
        v280 += 4;
        --v279;
      }
      while (v279);
    }
    if ((v392 & 0x10) != 0)
    {
      unint64_t v286 = v391;
      v287 = (const void **)&v387;
      unint64_t v161 = 3 * v360 - 6;
      if (v391 < v388)
      {
        unint64_t v391 = v388;
        unint64_t v286 = v388;
        v287 = (const void **)&v387;
      }
    }
    else
    {
      unint64_t v161 = 3 * v360 - 6;
      if ((v392 & 8) == 0)
      {
        size_t v283 = 0;
        HIBYTE(v382) = 0;
        v284 = (std::locale::__imp *)__dst;
        goto LABEL_329;
      }
      unint64_t v286 = v386[2];
      v287 = (const void **)v386;
    }
    v288 = *v287;
    size_t v283 = v286 - (void)*v287;
    if (v283 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v283 >= 0x17)
    {
      uint64_t v289 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v283 | 7) != 0x17) {
        uint64_t v289 = v283 | 7;
      }
      uint64_t v290 = v289 + 1;
      v284 = (std::locale::__imp *)operator new(v289 + 1);
      int64_t v382 = v290 | 0x8000000000000000;
      __dst[0].__locale_ = v284;
      __dst[1].__locale_ = (std::locale::__imp *)v283;
      unint64_t v161 = 3 * v360 - 6;
LABEL_328:
      memmove(v284, v288, v283);
      goto LABEL_329;
    }
    HIBYTE(v382) = v286 - *(unsigned char *)v287;
    v284 = (std::locale::__imp *)__dst;
    if (v283) {
      goto LABEL_328;
    }
LABEL_329:
    *((unsigned char *)v284 + v283) = 0;
    v385.__r_.__value_.__r.__words[0] = v348;
    *(std::string::size_type *)((char *)v385.__r_.__value_.__r.__words + *(void *)(v348 - 24)) = v347;
    v385.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
    uint64_t v48 = (v358 - (char *)v6) >> 2;
    if (v390 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A62391A0](v393);
    locale = (std::locale::__imp *)__dst;
    if (v382 < 0) {
      locale = __dst[0].__locale_;
    }
LABEL_333:
    *(_DWORD *)buf = 136315138;
    v384 = locale;
    _os_log_impl(&dword_1A1780000, v276, OS_LOG_TYPE_ERROR, "Triangulator failed to fully triangulate polygon: %s", buf, 0xCu);
    if (SHIBYTE(v382) < 0) {
      operator delete(__dst[0].__locale_);
    }
LABEL_335:

LABEL_336:
    v291 = (char *)v373;
    if (v161 == (v374 - (unsigned char *)v373) >> 1)
    {
      if (v374 != v373)
      {
        unint64_t v292 = 0;
        v293 = (char *)v380;
        unint64_t v294 = v161 <= 1 ? 1 : v161;
        if (v294 < 0x10) {
          goto LABEL_346;
        }
        if ((unint64_t)((unsigned char *)v380 - (unsigned char *)v373) <= 0x1F) {
          goto LABEL_346;
        }
        unint64_t v292 = v294 & 0xFFFFFFFFFFFFFFF0;
        v295 = (char *)v380 + 16;
        v296 = (long long *)((char *)v373 + 16);
        unint64_t v297 = v294 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v298 = *v296;
          *(v295 - 1) = *(v296 - 1);
          _OWORD *v295 = v298;
          v295 += 2;
          v296 += 2;
          v297 -= 16;
        }
        while (v297);
        if (v294 != v292)
        {
LABEL_346:
          unint64_t v299 = v294 - v292;
          uint64_t v300 = 2 * v292;
          v301 = &v293[v300];
          v302 = &v291[v300];
          do
          {
            __int16 v303 = *(_WORD *)v302;
            v302 += 2;
            *(_WORD *)v301 = v303;
            v301 += 2;
            --v299;
          }
          while (v299);
        }
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      v304 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v385.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v385.__r_.__value_.__r.__words + 4) = v161;
        WORD2(v385.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v385.__r_.__value_.__r.__words[1] + 6) = (v374 - (unsigned char *)v373) >> 1;
        _os_log_impl(&dword_1A1780000, v304, OS_LOG_TYPE_ERROR, "Mismatching number of indices, indexCount: %zu, triangulatedIndexCount: %zu", (uint8_t *)&v385, 0x16u);
      }

      if (v161) {
        bzero(v380, 6 * v48 - 12);
      }
    }
    if (v373)
    {
      v374 = (char *)v373;
      operator delete(v373);
    }
    geo::Pool<geo::Triangulator<unsigned short,unsigned short>::Node>::disposeElements((uint64_t)&v364);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v365);
    if (v380)
    {
      unint64_t v306 = v377;
      unint64_t v305 = v378;
      if (v378 != v377)
      {
        v307 = (void *)*((void *)&v376 + 1);
        int v308 = v379;
        int v309 = HIBYTE(v379);
        if ((void)v376 && *(unsigned char *)(*((void *)&v376 + 1) + 17) != 2) {
          (*(void (**)(void))(*(void *)v376 + 64))();
        }
        if (v308 && !v309)
        {
          unint64_t v310 = v307[7];
          unint64_t v311 = v307[8];
          if (v311 == v310) {
            unint64_t v310 = v307[10] - v307[9];
          }
          if (v306 < v310) {
            unint64_t v310 = v306;
          }
          if (v311 <= v305) {
            unint64_t v311 = v305;
          }
          if (v311 == v310) {
            unint64_t v311 = v310 + v307[10] - v307[9];
          }
          v307[7] = v310;
          v307[8] = v311;
        }
      }
    }
    if (v363 && v362 && (void)v361 && *(unsigned char *)(*((void *)&v361 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v361 + 64))();
    }
    ++v7;
    uint64_t v4 = v355 + 144;
    if (v355 + 144 != v352) {
      continue;
    }
    break;
  }
  if (v6) {
    operator delete(v6);
  }
}

void sub_1A27D7810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0x208]);
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  md::Triangulator<unsigned short>::~Triangulator((uint64_t)&a54);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a67);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a47);
  if (v67)
  {
    operator delete(v67);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void geo::Pool<geo::Triangulator<unsigned short,unsigned short>::Node>::disposeElements(uint64_t a1)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v36 = &v37;
  int8x16_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v37;
      uint64_t v5 = &v37;
      if (v37)
      {
        uint64_t v6 = v37;
        while (1)
        {
          while (1)
          {
            uint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        long long v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *long long v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *uint64_t v4 = v8;
        if (*v36)
        {
          unint64_t v36 = (uint64_t **)*v36;
          long long v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v37, v8);
        uint64_t v3 = ++v38;
        int8x16_t v2 = *(void **)(a1 + 40);
      }
      int8x16_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  size_t v10 = *(void **)a1;
  unint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (!v12 && v9)
  {
    uint64_t v15 = v37;
    if (v37)
    {
      uint64_t v16 = *(void **)a1;
      do
      {
        uint64_t v17 = 0;
        uint64_t v18 = v16[4];
        do
        {
          unint64_t v19 = v18 + 48 * v17;
          v20 = &v37;
          uint64_t v21 = v15;
          do
          {
            uint64_t v22 = v21;
            unint64_t v23 = v20;
            unint64_t v24 = v21[4];
            if (v24 >= v19) {
              v20 = (uint64_t **)v21;
            }
            else {
              ++v21;
            }
            uint64_t v21 = (uint64_t *)*v21;
          }
          while (v21);
          if (v20 == &v37) {
            goto LABEL_34;
          }
          if (v24 < v19) {
            uint64_t v22 = (uint64_t *)v23;
          }
          if (v19 < v22[4]) {
LABEL_34:
          }
            *(unsigned char *)(v19 + 44) = -1;
          ++v17;
        }
        while (v17 != v9);
        long long v25 = (void *)v16[1];
        if (v25)
        {
          do
          {
            __int32 v26 = v25;
            long long v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            __int32 v26 = (void *)v16[2];
            BOOL v12 = *v26 == (void)v16;
            uint64_t v16 = v26;
          }
          while (!v12);
        }
        uint64_t v16 = v26;
      }
      while (v26 != v11);
      goto LABEL_20;
    }
    uint64_t v27 = *(void **)a1;
    while (1)
    {
      uint64_t v28 = v27[4];
      if (v9 < 2) {
        break;
      }
      long long v30 = (unsigned char *)(v28 + 92);
      unint64_t v31 = v9 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v30 - 48) = -1;
        *long long v30 = -1;
        v30 += 96;
        v31 -= 2;
      }
      while (v31);
      unint64_t v29 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_59;
      }
LABEL_61:
      uint64_t v34 = (void *)v27[1];
      if (v34)
      {
        do
        {
          uint64_t v35 = v34;
          uint64_t v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          uint64_t v35 = (void *)v27[2];
          BOOL v12 = *v35 == (void)v27;
          uint64_t v27 = v35;
        }
        while (!v12);
      }
      uint64_t v27 = v35;
      if (v35 == v11) {
        goto LABEL_20;
      }
    }
    unint64_t v29 = 0;
LABEL_59:
    unint64_t v32 = v9 - v29;
    unint64_t v33 = (unsigned char *)(v28 + 48 * v29 + 44);
    do
    {
      *unint64_t v33 = -1;
      v33 += 48;
      --v32;
    }
    while (v32);
    goto LABEL_61;
  }
LABEL_20:
  if (v10 != v11)
  {
    do
    {
      free((void *)v10[4]);
      unint64_t v13 = (void *)v10[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)v10[2];
          BOOL v12 = *v14 == (void)v10;
          size_t v10 = v14;
        }
        while (!v12);
      }
      size_t v10 = v14;
    }
    while (v14 != v11);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v37);
}

void sub_1A27D7BCC(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Triangulator<unsigned short>::~Triangulator(uint64_t a1)
{
  int8x16_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  geo::Pool<geo::Triangulator<unsigned short,unsigned short>::Node>::disposeElements(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  return a1;
}

void sub_1A27D7C24(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<ggl::PolygonBase::CompressedMeshMesh,char const(&)[21],std::shared_ptr<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>,std::shared_ptr<ggl::IndexDataTyped<unsigned short>>,ggl::PolygonBase::CompressedMeshMesh*>(uint64_t a1, long long *a2, long long *a3)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v8 = *a3;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  long long v9 = v4;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh(a1, (uint64_t)"Venue footprint mesh", (uint64_t *)&v9, (uint64_t *)&v8);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (!*((void *)&v9 + 1)) {
      return a1;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (!*((void *)&v9 + 1)) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_1A27D8318(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v3;
  _Unwind_Resume(a1);
}

void artworkAndKeyForEtaLabel(char **a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6, void *a7)
{
  id v11 = a2;
  __asm { FMOV            V0.2D, #1.0 }
  long long v213 = _Q0;
  long long v214 = _Q0;
  uint64_t v212 = 0x1010000000001;
  uint64_t v215 = 0;
  uint64_t v217 = 0;
  uint64_t v216 = 0;
  uint64_t v218 = 0x3FC99999A0000000;
  uint64_t v219 = 0;
  uint64_t v221 = 0;
  uint64_t v220 = 0;
  uint64_t v223 = 0;
  uint64_t v222 = 0x3FF0000000000000;
  v206[0] = 0;
  *(_OWORD *)&v206[8] = _Q0;
  *(_OWORD *)&v206[24] = xmmword_1A28FE8E0;
  *(void *)&v206[40] = 0;
  *(void *)unsigned int v207 = 0;
  *(_OWORD *)&v207[8] = *MEMORY[0x1E4F1DB30];
  long long v208 = 0uLL;
  *(void *)&v207[24] = 0x4034000000000000;
  long long v209 = xmmword_1A28FE8F0;
  long long v210 = 0uLL;
  *(_OWORD *)&v211[8] = *(_OWORD *)&v207[8];
  *(void *)v211 = 0x401A000000000000;
  *(void *)&v211[24] = 0;
  __asm { FMOV            V1.2D, #6.0 }
  long long v194 = _Q0;
  long long v195 = _Q1;
  long long v196 = xmmword_1A28FF260;
  uint64_t v197 = 0x4031000000000000;
  long long v198 = 0uLL;
  uint64_t v199 = 0;
  {
    operator new();
  }
  uint64_t v200 = mdm::Allocator::instance(void)::alloc;
  long long v201 = 0uLL;
  uint64_t v202 = 0;
  {
    operator new();
  }
  long long v204 = 0uLL;
  uint64_t v203 = mdm::Allocator::instance(void)::alloc;
  __int16 v205 = 1;
  uint64_t v17 = [v11 routeEtaType];
  v206[0] = a6;
  uint64_t v18 = *(void *)(a3 + 8);
  double v19 = *(float *)(v18 + 176);
  *(double *)&v206[8] = *(float *)(*(void *)(v18 + 336) + 172);
  *(double *)&v206[16] = v19;
  *(void *)&long long v194 = *(void *)&v206[8];
  *((double *)&v194 + 1) = v19;
  if (v17 == 1) {
    char v20 = 1;
  }
  else {
    char v20 = 3;
  }
  LOBYTE(v205) = v20;
  if ((GetRoadSignMetadataForStyleQuery(*(void *)a4, *(std::__shared_weak_count **)(a4 + 8), (uint64_t *)(a4 + 32), (uint64_t)&v212, (uint64_t)v206, (uint64_t)&v194) & 1) == 0)
  {
    *a1 = 0;
    a1[1] = 0;
    if ((SHIBYTE(v202) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v21 = *(void *)(a4 + 16);
  id v188 = v11;
  if (!v21)
  {
    long long v189 = 0u;
    long long v193 = 0u;
    goto LABEL_117;
  }
  int v22 = *(_DWORD *)(*(void *)(a3 + 8) + 176);
  unint64_t v23 = *(std::__shared_weak_count **)(a4 + 24);
  __len[0] = *(void *)(a4 + 16);
  __len[1] = (size_t)v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v228, v21, (uint64_t)v23);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((_BYTE)v229) {
      goto LABEL_13;
    }
  }
  else if ((_BYTE)v229)
  {
LABEL_13:
    unint64_t v24 = (char *)operator new(0x148uLL);
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)unint64_t v24 = &unk_1EF57FB50;
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *((void *)v24 + 7) = 0;
    {
      operator new();
    }
    uint64_t v25 = mdm::Allocator::instance(void)::alloc;
    *((void *)v24 + 18) = 0;
    *((void *)v24 + 9) = 0;
    *((void *)v24 + 10) = 0;
    *((void *)v24 + 8) = v25;
    *((_WORD *)v24 + 44) = 0;
    *((void *)v24 + 12) = v24 + 128;
    *((void *)v24 + 13) = v24 + 128;
    *((void *)v24 + 14) = v24 + 128;
    *((void *)v24 + 15) = 2;
    v24[136] = 0;
    *(_DWORD *)(v24 + 137) = 16843008;
    v24[141] = 0;
    *((void *)v24 + 19) = 0;
    *((void *)v24 + 20) = 0;
    {
      operator new();
    }
    *((void *)v24 + 21) = mdm::Allocator::instance(void)::alloc;
    *((void *)v24 + 22) = 0;
    *(void *)(v24 + 181) = 0;
    v24[192] = 4;
    *(void *)(v24 + 196) = 0;
    v24[204] = 0;
    *(void *)(v24 + 212) = 0xFFFF3F800000;
    *((_WORD *)v24 + 110) = 0;
    *((_DWORD *)v24 + 56) = 1065353216;
    *((void *)v24 + 40) = 0;
    *((_OWORD *)v24 + 15) = 0u;
    *((_OWORD *)v24 + 16) = 0u;
    *((_OWORD *)v24 + 17) = 0u;
    *((void *)v24 + 36) = 0;
    *(void *)&long long v252 = v24 + 24;
    *((void *)&v252 + 1) = v24;
    v24[136] = 6;
    *((_DWORD *)v24 + 20) = v22;
    uint64_t v26 = *(void *)(*(void *)&v228[0] + 24);
    unsigned int v27 = *(unsigned __int8 *)(v26 + 12);
    if (v27 == 2)
    {
      LOBYTE(__len[0]) = 1;
      LOBYTE(v226) = 1;
      uint64_t v28 = (unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v26, 0x16Cu, 0, __len);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v26, 0x16Cu, 1u, &v226);
      unsigned int v29 = *v28;
    }
    else
    {
      unsigned int v29 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(void *)(*(void *)&v228[0] + 24), 0x16Cu, v27, 0);
    }
    uint64_t v30 = *(void *)(*(void *)&v228[0] + 24);
    unsigned int v31 = *(unsigned __int8 *)(v30 + 12);
    if (v31 == 2)
    {
      LOBYTE(__len[0]) = 1;
      LOBYTE(v226) = 1;
      unint64_t v32 = (unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v30, 0x174u, 0, __len);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v30, 0x174u, 1u, &v226);
      uint64_t v33 = *v32;
    }
    else
    {
      uint64_t v33 = *(unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(void *)(*(void *)&v228[0] + 24), 0x174u, v31, 0);
    }
    *(void *)(v24 + 196) = v29 | (unint64_t)(v33 << 32);
    __len[1] = 0;
    __len[0] = 0;
    *(void *)&long long v240 = 0;
    {
      operator new();
    }
    *((void *)&v240 + 1) = mdm::Allocator::instance(void)::alloc;
    *(void *)&long long v241 = 0;
    *(void *)((char *)&v241 + 5) = 0;
    if (v24[167] < 0)
    {
      if ((SBYTE7(v240) & 0x80u) == 0) {
        uint64_t v34 = __len;
      }
      else {
        uint64_t v34 = (size_t *)__len[0];
      }
      if ((SBYTE7(v240) & 0x80u) == 0) {
        size_t v35 = BYTE7(v240);
      }
      else {
        size_t v35 = __len[1];
      }
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)v24 + 18, v34, v35);
    }
    else if ((BYTE7(v240) & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)v24 + 18, (void *)__len[0], __len[1]);
    }
    else
    {
      *((_OWORD *)v24 + 9) = *(_OWORD *)__len;
      *((void *)v24 + 20) = v240;
    }
    *((void *)v24 + 22) = 0;
    *((_DWORD *)v24 + 46) = 0;
    v24[188] = 0;
    uint64_t v36 = *(void *)(*(void *)&v228[0] + 24);
    unsigned int v37 = *(unsigned __int8 *)(v36 + 12);
    if (v37 == 2)
    {
      LOBYTE(v226) = 1;
      __sz.__r_.__value_.__s.__data_[0] = 1;
      uint64_t v38 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v36, 0xBDu, 0, &v226);
      v39 = (grl *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v36, 0xBDu, 1u, &__sz);
      int v40 = *v38;
    }
    else
    {
      v39 = (grl *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(void *)(*(void *)&v228[0] + 24), 0xBDu, v37, 0);
      int v40 = *(_DWORD *)v39;
    }
    unsigned __int8 v41 = v40 - 1;
    if (v41 > 8u) {
      int v42 = 0;
    }
    else {
      int v42 = dword_1A29003B0[v41];
    }
    int v43 = (grl *)grl::SizeGroupMin(v39);
    int v44 = (int)v43;
    int v45 = grl::SizeGroupMax(v43);
    int v46 = v42 + 4;
    if (v42 + 4 >= v45) {
      int v46 = v45;
    }
    if (v46 <= v44) {
      LOBYTE(v46) = v44;
    }
    v24[192] = v46;
    *(_OWORD *)(v24 + 24) = *(_OWORD *)a5;
    LOBYTE(v249) = 1;
    gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&__sz, 0x71u, 1, *(void *)(*(void *)&v228[0] + 24), (BOOL *)&v249);
    LOBYTE(v226) = (_BYTE)v249;
    p_p = &__p;
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__sz.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string __p = __sz;
    }
    if (!(_BYTE)v226) {
      goto LABEL_83;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_83;
    }
    {
      operator new();
    }
    uint64_t v225 = mdm::Allocator::instance(void)::alloc;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ < 0x17)
      {
LABEL_62:
        *((unsigned char *)&__sz.__r_.__value_.__s + 23) = v49;
        p_sz = &__sz;
        if (!v49) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }
    else
    {
      std::string::size_type v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) < 0x17uLL) {
        goto LABEL_62;
      }
    }
    uint64_t v51 = (v49 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v51 = v49 | 7;
    }
    uint64_t v52 = v51 + 1;
    p_sz = (std::string *)(*(uint64_t (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 16))();
    __sz.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
    __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)p_sz;
    __sz.__r_.__value_.__l.__size_ = v49;
LABEL_69:
    memmove(p_sz, p_p, v49);
LABEL_70:
    p_sz->__r_.__value_.__s.__data_[v49] = 0;
    unsigned __int16 v53 = (void **)(v24 + 40);
    char v54 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
    if ((v24[63] & 0x80000000) == 0)
    {
      if ((*((unsigned char *)&__sz.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        *(_OWORD *)unsigned __int16 v53 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
        *((void *)v24 + 7) = *((void *)&__sz.__r_.__value_.__l + 2);
        goto LABEL_83;
      }
      std::string::size_type v55 = __sz.__r_.__value_.__r.__words[0];
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)v53, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      goto LABEL_82;
    }
    std::string::size_type v55 = __sz.__r_.__value_.__r.__words[0];
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v56 = &__sz;
    }
    else {
      v56 = (std::string *)__sz.__r_.__value_.__r.__words[0];
    }
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v57 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v57 = __sz.__r_.__value_.__l.__size_;
    }
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v53, v56, v57);
    if (v54 < 0) {
LABEL_82:
    }
      (*(void (**)(uint64_t, std::string::size_type, std::string::size_type))(*(void *)v225 + 40))(v225, v55, __sz.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL);
LABEL_83:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint16x8_t v58 = *(void **)(a4 + 16);
    uint64_t v59 = v58[33];
    uint64_t v60 = v58[30];
    uint64_t v61 = v58[31];
    uint64_t v62 = v61 - v60;
    if (v61 == v60)
    {
      a5 = 0;
      uint64_t v66 = 0;
      uint16x8_t v65 = 0;
    }
    else
    {
      if (v62 < 0) {
        abort();
      }
      uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v59 + 16))(v59, v61 - v60, 4);
      a5 = v63;
      uint64_t v64 = 0;
      do
      {
        if (v63 + v64) {
          *(void *)(v63 + v64) = *(void *)(v60 + v64);
        }
        v64 += 8;
      }
      while (v60 + v64 != v61);
      uint16x8_t v65 = (_OWORD *)(v63 + v64);
      uint64_t v66 = v63 + 8 * (v62 >> 3);
    }
    uint64_t v67 = *(void *)(*(void *)&v228[0] + 24);
    unsigned int v68 = *(unsigned __int8 *)(v67 + 12);
    if (v68 == 2)
    {
      LOBYTE(v226) = 1;
      __sz.__r_.__value_.__s.__data_[0] = 1;
      unsigned int v69 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v67, 0xBAu, 0, &v226);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v67, 0xBAu, 1u, &__sz);
      int v70 = *v69;
    }
    else
    {
      int v70 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(void *)(*(void *)&v228[0] + 24), 0xBAu, v68, 0);
    }
    if (v70) {
      _ZF = a5 == (void)v65;
    }
    else {
      _ZF = 1;
    }
    if (_ZF)
    {
LABEL_103:
      if ((_OWORD *)a5 != v65)
      {
LABEL_106:
        unint64_t v75 = (_OWORD *)a5;
        while (*(_DWORD *)v75 != 4)
        {
          unint64_t v75 = (_OWORD *)((char *)v75 + 8);
          if (v75 == v65) {
            goto LABEL_109;
          }
        }
        int v76 = *((unsigned __int16 *)v75 + 2);
        goto LABEL_111;
      }
    }
    else
    {
      unint64_t v72 = (_OWORD *)a5;
      while (*(_DWORD *)v72 != v70)
      {
        unint64_t v72 = (_OWORD *)((char *)v72 + 8);
        if (v72 == v65) {
          goto LABEL_103;
        }
      }
      __int16 v73 = *((_WORD *)v72 + 2);
      uint64_t v74 = v252;
      *(_DWORD *)(v252 + 60) = v70;
      *(_WORD *)(v74 + 64) = v73;
      *(unsigned char *)(v74 + 114) = 1;
      if ((_OWORD *)a5 != v65) {
        goto LABEL_106;
      }
    }
LABEL_109:
    int v76 = 0xFFFF;
LABEL_111:
    long long v77 = v252;
    *(_DWORD *)(v252 + 192) = v76;
    long long v189 = v77;
    long long v193 = v77;
    if (a5) {
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v59 + 40))(v59, a5, v66 - a5);
    }
    if (SBYTE7(v240) < 0) {
      (*(void (**)(void, size_t, uint64_t))(**((void **)&v240 + 1) + 40))(*((void *)&v240 + 1), __len[0], v240 & 0x7FFFFFFFFFFFFFFFLL);
    }
    id v11 = v188;
    goto LABEL_116;
  }
  long long v189 = 0u;
  long long v193 = 0u;
LABEL_116:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v228);
LABEL_117:
  id v78 = [v11 etaText];
  __int16 v226 = &unk_1EF559778;
  __p.__r_.__value_.__r.__words[0] = 0;
  unint64_t v251 = 0;
  v80 = (VKLabelNavArtworkCache *)v78;
  if ((void)v189) {
    unint64_t v81 = (NSString *)md::LabelImageKey::hash((md::LabelImageKey *)v189);
  }
  else {
    unint64_t v81 = 0;
  }
  unint64_t RoadSignKey = VKLabelNavArtworkCache::getRoadSignKey(v80, v81, (double *)v206, (const RoadSignMetrics *)&v194, (const md::RoadSignTextMetrics *)&v212, v79);

  unint64_t v251 = RoadSignKey;
  float64x2_t v83 = a7;
  uint64_t v84 = geo::LRUPolicy<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>>::get(*a7 + 48, *(void *)(*a7 + 8), *(void *)(*a7 + 16), RoadSignKey);
  if (*a7 + 48 != v84)
  {
    id v85 = *(id *)(v84 + 32);
    float64x2_t v86 = (void *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;

    float64x2_t v87 = (std::__shared_weak_count *)*((void *)&v189 + 1);
    goto LABEL_167;
  }
  unint64_t v249 = 0;
  uint64_t v250 = 0;
  if ((void)v189)
  {
    unint64_t v88 = md::LabelImageKey::hash((md::LabelImageKey *)v189);
    unint64_t v89 = v88;
    int16x8_t v90 = (void *)a7[1];
    uint16x8_t v91 = v90 + 6;
    int8x8_t v92 = (int8x8_t)v90[2];
    if (v92)
    {
      uint8x8_t v93 = (uint8x8_t)vcnt_s8(v92);
      v93.i16[0] = vaddlv_u8(v93);
      if (v93.u32[0] > 1uLL)
      {
        unint64_t v94 = v88;
        if (v88 >= *(void *)&v92) {
          unint64_t v94 = v88 % *(void *)&v92;
        }
      }
      else
      {
        unint64_t v94 = (*(void *)&v92 - 1) & v88;
      }
      uint16x8_t v95 = *(void **)(v90[1] + 8 * v94);
      if (v95)
      {
        uint16x8_t v96 = (void *)*v95;
        if (v96)
        {
          if (v93.u32[0] < 2uLL)
          {
            uint64_t v97 = *(void *)&v92 - 1;
            while (1)
            {
              uint64_t v99 = v96[1];
              if (v99 == v88)
              {
                if (v96[2] == v88) {
                  goto LABEL_144;
                }
              }
              else if ((v99 & v97) != v94)
              {
                goto LABEL_147;
              }
              uint16x8_t v96 = (void *)*v96;
              if (!v96) {
                goto LABEL_147;
              }
            }
          }
          do
          {
            unint64_t v98 = v96[1];
            if (v98 == v88)
            {
              if (v96[2] == v88)
              {
LABEL_144:
                uint16x8_t v91 = (uint64_t *)v90[7];
                int64x2_t v100 = (uint64_t *)v96[3];
                if (v91 != v100)
                {
                  float64x2_t v101 = (uint64_t *)v100[1];
                  if (v101 != v91)
                  {
                    uint64_t v102 = *v100;
                    *(void *)(v102 + 8) = v101;
                    *(void *)v100[1] = v102;
                    uint64_t v103 = *v91;
                    *(void *)(v103 + 8) = v100;
                    *int64x2_t v100 = v103;
                    *uint16x8_t v91 = (uint64_t)v100;
                    v100[1] = (uint64_t)v91;
                    uint16x8_t v91 = (uint64_t *)v90[7];
                    int16x8_t v90 = (void *)a7[1];
                  }
                }
                break;
              }
            }
            else
            {
              if (v98 >= *(void *)&v92) {
                v98 %= *(void *)&v92;
              }
              if (v98 != v94) {
                break;
              }
            }
            uint16x8_t v96 = (void *)*v96;
          }
          while (v96);
        }
      }
    }
LABEL_147:
    if (v90 + 6 != v91)
    {
      uint64_t v105 = v91[3];
      float64x2_t v104 = (std::__shared_weak_count *)v91[4];
      if (v104) {
        atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v249 = (char *)v105;
      uint64_t v250 = v104;
      float64x2_t v83 = a7;
      goto LABEL_151;
    }
    md::LabelImageLoader::loadIconImage((grl::Allocator *)&__sz, a7[4], (uint64_t *)&v193);
    std::string::size_type v115 = __sz.__r_.__value_.__r.__words[0];
    if (__sz.__r_.__value_.__r.__words[0])
    {
      v116 = (char *)operator new(0xC8uLL);
      *((void *)v116 + 1) = 0;
      *((void *)v116 + 2) = 0;
      *(void *)v116 = &unk_1EF5816A8;
      *((void *)v116 + 3) = &unk_1EF554088;
      *((void *)v116 + 4) = &unk_1EF559EB8;
      *((void *)v116 + 5) = 0;
      *(_OWORD *)(v116 + 56) = v189;
      if (*((void *)&v189 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v189 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(v116 + 72) = xmmword_1A28FC750;
      *(_OWORD *)(v116 + 88) = xmmword_1A28FC750;
      *((void *)v116 + 13) = 0;
      *((void *)v116 + 14) = 0;
      *((void *)v116 + 15) = v115 + 136;
      *((void *)v116 + 16) = v115 + 24;
      *((void *)v116 + 17) = 0;
      *((void *)v116 + 18) = 0;
      *((void *)v116 + 19) = 0;
      *((void *)v116 + 20) = 1065353216;
      v116[168] = 0;
      *((void *)v116 + 3) = &unk_1EF5343E8;
      std::string::size_type v117 = __sz.__r_.__value_.__l.__size_;
      *((void *)v116 + 22) = v115;
      *((void *)v116 + 23) = v117;
      if (v117) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v117 + 8), 1uLL, memory_order_relaxed);
      }
      v116[192] = 0;
      *((void *)v116 + 3) = &unk_1EF542670;
      atomic_store(1u, (unsigned __int8 *)v116 + 168);
      unint64_t v249 = v116 + 24;
      uint64_t v250 = (std::__shared_weak_count *)v116;
      uint64_t v118 = a7[1];
      *(void *)&long long v252 = v116 + 24;
      *((void *)&v252 + 1) = v116;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v116 + 1, 1uLL, memory_order_relaxed);
      uint64_t v119 = v118 + 48;
      double v190 = (void *)(v118 + 8);
      *(void *)&v228[0] = v116 + 24;
      *((void *)&v228[0] + 1) = v116;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v116 + 1, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v118 = a7[1];
      long long v252 = 0uLL;
      uint64_t v119 = v118 + 48;
      double v190 = (void *)(v118 + 8);
      v228[0] = 0uLL;
    }
    int8x8_t v120 = *(int8x8_t *)(v118 + 16);
    if (v120)
    {
      uint8x8_t v121 = (uint8x8_t)vcnt_s8(v120);
      v121.i16[0] = vaddlv_u8(v121);
      if (v121.u32[0] > 1uLL)
      {
        unint64_t v122 = v89;
        if (v89 >= *(void *)&v120) {
          unint64_t v122 = v89 % *(void *)&v120;
        }
      }
      else
      {
        unint64_t v122 = (*(void *)&v120 - 1) & v89;
      }
      v123 = *(void ***)(*(void *)(v118 + 8) + 8 * v122);
      if (v123)
      {
        v124 = *v123;
        if (*v123)
        {
          if (v121.u32[0] < 2uLL)
          {
            uint64_t v125 = *(void *)&v120 - 1;
            while (1)
            {
              uint64_t v127 = v124[1];
              if (v127 == v89)
              {
                if (v124[2] == v89) {
                  goto LABEL_202;
                }
              }
              else if ((v127 & v125) != v122)
              {
                goto LABEL_207;
              }
              v124 = (void *)*v124;
              if (!v124) {
                goto LABEL_207;
              }
            }
          }
          do
          {
            unint64_t v126 = v124[1];
            if (v126 == v89)
            {
              if (v124[2] == v89)
              {
LABEL_202:
                v128 = (uint64_t *)v124[3];
                uint64_t v129 = *v128;
                *(void *)(v129 + 8) = v128[1];
                *(void *)v128[1] = v129;
                --*(void *)(v118 + 64);
                int v130 = (std::__shared_weak_count *)v128[4];
                if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
                operator delete(v128);
                std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__len, v190, v124);
                if (__len[0]) {
                  operator delete((void *)__len[0]);
                }
                break;
              }
            }
            else
            {
              if (v126 >= *(void *)&v120) {
                v126 %= *(void *)&v120;
              }
              if (v126 != v122) {
                break;
              }
            }
            v124 = (void *)*v124;
          }
          while (v124);
        }
      }
    }
LABEL_207:
    int v131 = (char *)operator new(0x28uLL);
    int v132 = v131;
    long long v133 = v228[0];
    *((void *)v131 + 2) = v89;
    *(_OWORD *)(v131 + 24) = v133;
    if (*((void *)&v133 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v133 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)int v131 = v119;
    int v134 = *(void **)(v118 + 56);
    *((void *)v131 + 1) = v134;
    *int v134 = v131;
    uint64_t v135 = *(void *)(v118 + 64) + 1;
    *(void *)(v118 + 56) = v131;
    *(void *)(v118 + 64) = v135;
    unint64_t v136 = *(void *)(v118 + 16);
    if (v136)
    {
      uint8x8_t v137 = (uint8x8_t)vcnt_s8((int8x8_t)v136);
      v137.i16[0] = vaddlv_u8(v137);
      if (v137.u32[0] > 1uLL)
      {
        a5 = v89;
        if (v89 >= v136) {
          a5 = v89 % v136;
        }
      }
      else
      {
        a5 = (v136 - 1) & v89;
      }
      v138 = *(void **)(*(void *)(v118 + 8) + 8 * a5);
      if (v138)
      {
        v139 = (void *)*v138;
        if (v139)
        {
          if (v137.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v141 = v139[1];
              if (v141 == v89)
              {
                if (v139[2] == v89) {
                  goto LABEL_297;
                }
              }
              else if ((v141 & (v136 - 1)) != a5)
              {
                goto LABEL_230;
              }
              v139 = (void *)*v139;
              if (!v139) {
                goto LABEL_230;
              }
            }
          }
          do
          {
            unint64_t v140 = v139[1];
            if (v140 == v89)
            {
              if (v139[2] == v89) {
                goto LABEL_297;
              }
            }
            else
            {
              if (v140 >= v136) {
                v140 %= v136;
              }
              if (v140 != a5) {
                break;
              }
            }
            v139 = (void *)*v139;
          }
          while (v139);
        }
      }
    }
LABEL_230:
    v142 = operator new(0x20uLL);
    void *v142 = 0;
    v142[1] = v89;
    v142[2] = v89;
    v142[3] = v132;
    float v143 = (float)(unint64_t)(*(void *)(v118 + 32) + 1);
    float v144 = *(float *)(v118 + 40);
    if (v136 && (float)(v144 * (float)v136) >= v143)
    {
LABEL_287:
      uint64_t v169 = *(void *)(v118 + 8);
      unsigned int v170 = *(void **)(v169 + 8 * a5);
      if (v170)
      {
        void *v142 = *v170;
      }
      else
      {
        void *v142 = *(void *)(v118 + 24);
        *(void *)(v118 + 24) = v142;
        *(void *)(v169 + 8 * a5) = v118 + 24;
        if (!*v142) {
          goto LABEL_296;
        }
        unint64_t v171 = *(void *)(*v142 + 8);
        if ((v136 & (v136 - 1)) != 0)
        {
          if (v171 >= v136) {
            v171 %= v136;
          }
        }
        else
        {
          v171 &= v136 - 1;
        }
        unsigned int v170 = (void *)(*(void *)(v118 + 8) + 8 * v171);
      }
      *unsigned int v170 = v142;
LABEL_296:
      ++*(void *)(v118 + 32);
LABEL_297:
      if (*((void *)&v133 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v133 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v133 + 1) + 16))(*((void *)&v133 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v133 + 1));
      }
      for (unint64_t i = *(void *)(v118 + 64); i > *(void *)v118; unint64_t i = *(void *)(v118 + 64))
      {
        unsigned int v173 = *(uint64_t **)(v118 + 48);
        unint64_t v174 = v173[2];
        unsigned int v175 = (std::__shared_weak_count *)v173[4];
        if (v175)
        {
          atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
          unsigned int v173 = *(uint64_t **)(v118 + 48);
          unsigned int v176 = (std::__shared_weak_count *)v173[4];
          unint64_t i = *(void *)(v118 + 64);
        }
        else
        {
          unsigned int v176 = 0;
        }
        uint64_t v177 = *v173;
        *(void *)(v177 + 8) = v173[1];
        *(void *)v173[1] = v177;
        *(void *)(v118 + 64) = i - 1;
        if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
        operator delete(v173);
        int8x8_t v178 = *(int8x8_t *)(v118 + 16);
        if (v178)
        {
          uint8x8_t v179 = (uint8x8_t)vcnt_s8(v178);
          v179.i16[0] = vaddlv_u8(v179);
          if (v179.u32[0] > 1uLL)
          {
            unint64_t v180 = v174;
            if (v174 >= *(void *)&v178) {
              unint64_t v180 = v174 % *(void *)&v178;
            }
          }
          else
          {
            unint64_t v180 = (*(void *)&v178 - 1) & v174;
          }
          int v181 = *(void ***)(*(void *)(v118 + 8) + 8 * v180);
          if (v181)
          {
            int v182 = *v181;
            if (*v181)
            {
              if (v179.u32[0] < 2uLL)
              {
                uint64_t v183 = *(void *)&v178 - 1;
                while (1)
                {
                  uint64_t v185 = v182[1];
                  if (v185 == v174)
                  {
                    if (v182[2] == v174) {
                      goto LABEL_330;
                    }
                  }
                  else if ((v185 & v183) != v180)
                  {
                    goto LABEL_332;
                  }
                  int v182 = (void *)*v182;
                  if (!v182) {
                    goto LABEL_332;
                  }
                }
              }
              do
              {
                unint64_t v184 = v182[1];
                if (v184 == v174)
                {
                  if (v182[2] == v174)
                  {
LABEL_330:
                    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__len, v190, v182);
                    if (__len[0]) {
                      operator delete((void *)__len[0]);
                    }
                    break;
                  }
                }
                else
                {
                  if (v184 >= *(void *)&v178) {
                    v184 %= *(void *)&v178;
                  }
                  if (v184 != v180) {
                    break;
                  }
                }
                int v182 = (void *)*v182;
              }
              while (v182);
            }
          }
        }
LABEL_332:
        if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      int v186 = (std::__shared_weak_count *)*((void *)&v252 + 1);
      if (*((void *)&v252 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v252 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
      unsigned int v187 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
      float64x2_t v83 = a7;
      if (__sz.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__sz.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
      goto LABEL_151;
    }
    BOOL v145 = 1;
    if (v136 >= 3) {
      BOOL v145 = (v136 & (v136 - 1)) != 0;
    }
    unint64_t v146 = v145 | (2 * v136);
    unint64_t v147 = vcvtps_u32_f32(v143 / v144);
    if (v146 <= v147) {
      size_t prime = v147;
    }
    else {
      size_t prime = v146;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v136 = *(void *)(v118 + 16);
    }
    if (prime <= v136)
    {
      if (prime >= v136) {
        goto LABEL_282;
      }
      unint64_t v161 = vcvtps_u32_f32((float)*(unint64_t *)(v118 + 32) / *(float *)(v118 + 40));
      if (v136 < 3 || (uint8x8_t v162 = (uint8x8_t)vcnt_s8((int8x8_t)v136), v162.i16[0] = vaddlv_u8(v162), v162.u32[0] > 1uLL))
      {
        unint64_t v161 = std::__next_prime(v161);
      }
      else
      {
        uint64_t v163 = 1 << -(char)__clz(v161 - 1);
        if (v161 >= 2) {
          unint64_t v161 = v163;
        }
      }
      if (prime <= v161) {
        size_t prime = v161;
      }
      if (prime >= v136) {
        goto LABEL_282;
      }
      if (!prime)
      {
        unsigned int v168 = *(void **)(v118 + 8);
        *(void *)(v118 + 8) = 0;
        if (v168) {
          operator delete(v168);
        }
        *(void *)(v118 + 16) = 0;
        goto LABEL_282;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v149 = operator new(8 * prime);
    v150 = *(void **)(v118 + 8);
    *(void *)(v118 + 8) = v149;
    if (v150) {
      operator delete(v150);
    }
    uint64_t v151 = 0;
    *(void *)(v118 + 16) = prime;
    do
      *(void *)(*(void *)(v118 + 8) + 8 * v151++) = 0;
    while (prime != v151);
    uint64_t v153 = v118 + 24;
    uint64_t v152 = *(void **)(v118 + 24);
    if (!v152)
    {
LABEL_282:
      unint64_t v136 = *(void *)(v118 + 16);
      if ((v136 & (v136 - 1)) != 0)
      {
        if (v89 >= v136) {
          a5 = v89 % v136;
        }
        else {
          a5 = v89;
        }
      }
      else
      {
        a5 = (v136 - 1) & v89;
      }
      goto LABEL_287;
    }
    size_t v154 = v152[1];
    size_t v155 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v156 = v154 & v155;
      *(void *)(*(void *)(v118 + 8) + 8 * v156) = v153;
      while (1)
      {
        BOOL v157 = (void *)*v152;
        if (!*v152) {
          break;
        }
        size_t v158 = v157[1] & v155;
        if (v158 == v156)
        {
          uint64_t v152 = (void *)*v152;
        }
        else
        {
          uint64_t v159 = *(void *)(v118 + 8);
          if (*(void *)(v159 + 8 * v158))
          {
            *uint64_t v152 = *v157;
            uint64_t v160 = 8 * v158;
            *BOOL v157 = **(void **)(*(void *)(v118 + 8) + v160);
            **(void **)(*(void *)(v118 + 8) + v160) = v157;
          }
          else
          {
            *(void *)(v159 + 8 * v158) = v152;
            uint64_t v152 = v157;
            size_t v156 = v158;
          }
        }
      }
      goto LABEL_282;
    }
    if (v154 >= prime) {
      v154 %= prime;
    }
    *(void *)(*(void *)(v118 + 8) + 8 * v154) = v153;
    unsigned __int16 v164 = (void *)*v152;
    if (!*v152) {
      goto LABEL_282;
    }
    while (1)
    {
      size_t v166 = v164[1];
      if (v166 >= prime) {
        v166 %= prime;
      }
      if (v166 != v154)
      {
        uint64_t v167 = *(void *)(v118 + 8);
        if (!*(void *)(v167 + 8 * v166))
        {
          *(void *)(v167 + 8 * v166) = v152;
          goto LABEL_268;
        }
        *uint64_t v152 = *v164;
        uint64_t v165 = 8 * v166;
        *unsigned __int16 v164 = **(void **)(*(void *)(v118 + 8) + v165);
        **(void **)(*(void *)(v118 + 8) + v165) = v164;
        unsigned __int16 v164 = v152;
      }
      size_t v166 = v154;
LABEL_268:
      uint64_t v152 = v164;
      unsigned __int16 v164 = (void *)*v164;
      size_t v154 = v166;
      if (!v164) {
        goto LABEL_282;
      }
    }
  }
LABEL_151:
  uint64_t v106 = v83[2];
  long long v245 = v209;
  long long v246 = v210;
  long long v247 = *(_OWORD *)v211;
  long long v248 = *(_OWORD *)&v211[16];
  long long v241 = *(_OWORD *)&v206[32];
  long long v242 = *(_OWORD *)v207;
  long long v243 = *(_OWORD *)&v207[16];
  long long v244 = v208;
  *(_OWORD *)__len = *(_OWORD *)v206;
  long long v240 = *(_OWORD *)&v206[16];
  v228[0] = v194;
  v228[1] = v195;
  long long v229 = v196;
  uint64_t v230 = v197;
  uint64_t v233 = v200;
  if (SHIBYTE(v199) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v231, (void *)v198, *((unint64_t *)&v198 + 1));
  }
  else
  {
    long long v231 = v198;
    uint64_t v232 = v199;
  }
  uint64_t v236 = v203;
  if (SHIBYTE(v202) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v234, (void *)v201, *((unint64_t *)&v201 + 1));
  }
  else
  {
    long long v234 = v201;
    uint64_t v235 = v202;
  }
  long long v237 = v204;
  __int16 v238 = v205;
  uint64_t v107 = v83[6];
  *(void *)&long long v252 = v83[5];
  *((void *)&v252 + 1) = v107;
  if (v107) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 16), 1uLL, memory_order_relaxed);
  }
  v108 = md::RoadSignArtworkGenerator::generateRoadSignArtwork(v106, v80, (uint64_t)__len, v228, (uint64_t)&v212, (uint64_t *)&v249, (uint64_t *)&v252);
  if (*((void *)&v252 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v252 + 1));
  }
  if (SHIBYTE(v235) < 0)
  {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v236 + 40))(v236, v234, v235 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v232) & 0x80000000) == 0) {
      goto LABEL_163;
    }
  }
  else if ((SHIBYTE(v232) & 0x80000000) == 0)
  {
    goto LABEL_163;
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v233 + 40))(v233, v231, v232 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_163:
  objc_storeStrong((id *)&__p.__r_.__value_.__l.__data_, v108);
  uint64_t v109 = *a7;
  __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF559778;
  __sz.__r_.__value_.__l.__size_ = 0;
  int32x2_t v110 = __p.__r_.__value_.__l.__data_;
  __int16 v111 = (void *)__sz.__r_.__value_.__l.__size_;
  __sz.__r_.__value_.__l.__size_ = (std::string::size_type)v110;

  geo::Cache<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>,geo::LRUPolicy>::insert(v109, &v251, (void *)__sz.__r_.__value_.__l.__size_);
  __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF559778;

  uint64_t v112 = v250;
  if (v250 && !atomic_fetch_add(&v250->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
  }
  float64x2_t v87 = (std::__shared_weak_count *)*((void *)&v193 + 1);
LABEL_167:
  v113 = __p.__r_.__value_.__l.__data_;
  unint64_t v114 = v251;
  *a1 = v113;
  a1[1] = (char *)v114;
  __int16 v226 = &unk_1EF559778;

  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  id v11 = v188;
  if (SHIBYTE(v202) < 0) {
LABEL_18:
  }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v203 + 40))(v203, v201, v202 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_19:
  if (SHIBYTE(v199) < 0) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v200 + 40))(v200, v198, v199 & 0x7FFFFFFFFFFFFFFFLL);
  }
}

void sub_1A27D9EE4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)STACK[0x298] + 40))(STACK[0x298], v9, STACK[0x290] & 0x7FFFFFFFFFFFFFFFLL);
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)STACK[0x368] + 40))(STACK[0x368], STACK[0x350], STACK[0x360] & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 - 128);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&STACK[0x2C0]);
  md::RoadSignTextMetrics::~RoadSignTextMetrics((md::RoadSignTextMetrics *)va);

  _Unwind_Resume(a1);
}

void sub_1A27DA44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A27DAE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a23);

  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)&a28);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<md::NavRouteEta *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavRouteEta>,std::allocator<md::NavRouteEta>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::NavRouteEta *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavRouteEta>,std::allocator<md::NavRouteEta>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void sub_1A27DB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKLabelNavRouteEta;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A27DB22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27DB2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27DB3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27DBA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (a8) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a11 + 40))(a11, a8, a10 - a8);
  }

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v13 - 96);

  _Unwind_Resume(a1);
}

void md::NavContext::styleQueryForFeatureAttributes(md::NavContext *this, GEOFeatureStyleAttributes *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)a2 + 1);
  if (v5)
  {
    [v5 featureStyleAttributesPtr];
    long long v8 = v10;
  }
  else
  {
    long long v8 = 0uLL;
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  long long v11 = v8;
  md::LabelManager::styleQueryForFeatureAttributes((uint64_t)this, *(void *)(v7 + 336), (uint64_t *)&v11);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1A27DBBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27DCB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  gss::FeatureAttributeSet::~FeatureAttributeSet(v10);

  _Unwind_Resume(a1);
}

uint64_t md::TrafficIncidentIconLabelPart::debugString@<X0>(md::TrafficIncidentIconLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v17);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"TrafficIncident", 15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n  ", 3);
  md::IconLabelPart::debugString(this, __p);
  if ((v16 & 0x80u) == 0) {
    long long v4 = __p;
  }
  else {
    long long v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v4, v5);
  if ((char)v16 < 0)
  {
    operator delete(__p[0]);
    char v6 = v24;
    if ((v24 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    unint64_t v8 = v23;
    if (v23 < v20)
    {
      unint64_t v23 = v20;
      unint64_t v8 = v20;
    }
    uint64_t v9 = (const void **)&v19;
    goto LABEL_16;
  }
  char v6 = v24;
  if ((v24 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_9:
  if ((v6 & 8) == 0)
  {
    size_t v7 = 0;
    a2[23] = 0;
    goto LABEL_24;
  }
  uint64_t v9 = (const void **)v18;
  unint64_t v8 = v18[2];
LABEL_16:
  long long v10 = *v9;
  size_t v7 = v8 - (void)*v9;
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v13 = operator new(v11 + 1);
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v12 | 0x8000000000000000;
    *(void *)a2 = v13;
    a2 = v13;
    goto LABEL_23;
  }
  a2[23] = v7;
  if (v7) {
LABEL_23:
  }
    memmove(a2, v10, v7);
LABEL_24:
  a2[v7] = 0;
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete(v21);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v25);
}

void sub_1A27DCDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::TrafficIncidentIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = (unsigned __int8 *)(a1 + 768);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(unsigned int *)(v6 + 48);
  LOBYTE(v6) = atomic_load((unsigned __int8 *)(v6 + 1240));
  uint64_t v9 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v7 + 552))(v7, v8, 0, v6 & 1, 0);
  return md::LabelIconStyleMonitor::needsCrossfade(v5, v9, a4);
}

float md::TrafficIncidentIconLabelPart::updateWithStyle(md::TrafficIncidentIconLabelPart *this, md::LabelManager *a2)
{
  md::ImageLabelPart::updateWithStyle(this, a2);
  uint64_t v3 = *((void *)this + 2);
  atomic_load((unsigned __int8 *)(v3 + 1240));
  long long v4 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v3 + 8) + 552))();
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 296);
  if (!v6)
  {
    uint64_t v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v4, 0);
    uint64_t v6 = *v7;
    *(void *)(v5 + 296) = *v7;
  }
  float result = *(float *)(v6 + 24);
  *((float *)this + 143) = result;
  return result;
}

void md::TrafficIncidentIconLabelPart::~TrafficIncidentIconLabelPart(md::TrafficIncidentIconLabelPart *this)
{
  *(void *)this = &unk_1EF54A6B0;
  if (*((char *)this + 791) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 99) + 40))(*((void *)this + 99), *((void *)this + 96), *((void *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  }
  md::IconLabelPart::~IconLabelPart(this);
  int8x16_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    int8x16_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v4) {
      operator new();
    }
  }
  uint64_t v3 = *(void (**)(void))(**((void **)v2 + 91) + 40);
  v3();
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF54A6B0;
  if (*((char *)this + 791) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 99) + 40))(*((void *)this + 99), *((void *)this + 96), *((void *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  }
  md::IconLabelPart::~IconLabelPart(this);
}

uint64_t ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  int8x16_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  int8x16_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  int8x16_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *std::function<void ()(ggl::PolygonShadowedStroke::ShadowPathPipelineSetup *)>::~function(void *a1)
{
  int8x16_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::~function(void *a1)
{
  int8x16_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::GlowAlpha::MeshPipelineSetup *)>::~function(void *a1)
{
  int8x16_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::~function(void *a1)
{
  int8x16_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Glow::MeshPipelineSetup *)>::~function(void *a1)
{
  int8x16_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Glow::MeshPipelineSetup * ()(void)>::~function(void *a1)
{
  int8x16_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void **std::vector<std::pair<std::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup>,std::unique_ptr<ggl::RenderItem>>>::~vector[abi:nn180100](void **a1)
{
  int8x16_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        *((void *)v3 - 1) = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        uint64_t v6 = *((void *)v3 - 2);
        *((void *)v3 - 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::operator()()
{
}

void *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EF576B00;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::~__func()
{
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::RenderItem * ()(void)>::operator()()
{
}

void *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::RenderItem * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EF576AB8;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::RenderItem * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::Glow::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Glow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Glow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::GlowAlpha::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::GlowAlpha::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::GlowAlpha::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Glow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EF57BF28;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Glow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Glow::MeshPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::Glow::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Glow::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glow::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Glow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF576A70;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Glow::MeshPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9GlowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EF57C828;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9GlowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A27DE868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong *a9, atomic_ullong *a10)
{
  if (!atomic_fetch_add(a9, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (!atomic_fetch_add(a10, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  MEMORY[0x1A6239270](v10, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF576A28;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonShadowedStroke23ShadowPathPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EF57B9D0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonShadowedStroke23ShadowPathPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF5769E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::~__func()
{
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF576998;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonShadowedStroke::ShadowPathPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolygonShadowedStroke::ShadowPathPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolygonShadowedStroke::ShadowPathPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::CoastLineRenderResources::~CoastLineRenderResources(md::CoastLineRenderResources *this)
{
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 33);
    int v4 = (void *)*((void *)this + 32);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        uint64_t v6 = *(void *)(v3 - 16);
        *(void *)(v3 - 16) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      int v4 = (void *)*((void *)this + 32);
    }
    *((void *)this + 33) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v8) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v8) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  uint64_t v9 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v12) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v12) {
      goto LABEL_27;
    }
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_27:
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    unint64_t v14 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v14) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v14 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v14) {
      goto LABEL_33;
    }
  }
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_33:
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v17)
  {
    uint64_t v18 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v17);
    MEMORY[0x1A6239270](v18, 0x10A0C40D234DDC7);
  }
  uint64_t v19 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v19)
  {
    uint64_t v20 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v19);
    MEMORY[0x1A6239270](v20, 0x10A0C40D234DDC7);
  }
  uint64_t v21 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v30)
  {
    uint64_t v31 = ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>::~FragmentedPool(v30);
    MEMORY[0x1A6239270](v31, 0x10A0C40D234DDC7);
  }
  uint64_t v32 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v32)
  {
    uint64_t v33 = ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::~FragmentedPool(v32);
    MEMORY[0x1A6239270](v33, 0x10A0C40D234DDC7);
  }
  uint64_t v34 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v34)
  {
    uint64_t v35 = ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>::~FragmentedPool(v34);
    MEMORY[0x1A6239270](v35, 0x10A0C40D234DDC7);
  }
  uint64_t v36 = *(void *)this;
  *(void *)this = 0;
  if (v36)
  {
    uint64_t v37 = ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>::~FragmentedPool(v36);
    MEMORY[0x1A6239270](v37, 0x10A0C40D234DDC7);
  }
}

uint64_t md::MultipleIconLabelPart::debugCompositeClassName@<X0>(md::MultipleIconLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"MultipleIcons, ", 15);
  md::StackLabelPart::debugCompositeClassName(this, __p);
  if ((v18 & 0x80u) == 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v5 = v18;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v4, v5);
  if ((char)v18 < 0)
  {
    operator delete(__p[0]);
    if (!*((_DWORD *)this + 183)) {
      goto LABEL_15;
    }
  }
  else if (!*((_DWORD *)this + 183))
  {
    goto LABEL_15;
  }
  if (*((_DWORD *)this + 188))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", multiPOI(", 11);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = ")";
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v7 = ", multiPOI-fallback";
    uint64_t v6 = v19;
    uint64_t v8 = 19;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
LABEL_15:
  if ((v26 & 0x10) != 0)
  {
    unint64_t v10 = v25;
    if (v25 < v22)
    {
      unint64_t v25 = v22;
      unint64_t v10 = v22;
    }
    uint64_t v11 = (const void **)&v21;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      size_t v9 = 0;
      a2[23] = 0;
      goto LABEL_30;
    }
    uint64_t v11 = (const void **)v20;
    unint64_t v10 = v20[2];
  }
  uint64_t v12 = *v11;
  size_t v9 = v10 - (void)*v11;
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v15 = operator new(v13 + 1);
    *((void *)a2 + 1) = v9;
    *((void *)a2 + 2) = v14 | 0x8000000000000000;
    *(void *)a2 = v15;
    a2 = v15;
    goto LABEL_29;
  }
  a2[23] = v9;
  if (v9) {
LABEL_29:
  }
    memmove(a2, v12, v9);
LABEL_30:
  a2[v9] = 0;
  v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete(v23);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v27);
}

void sub_1A27DFC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::MultipleIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (!a3) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 747)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t v9 = *(unsigned int *)(v7 + 48);
  LOBYTE(v7) = atomic_load((unsigned __int8 *)(v7 + 1240));
  unint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v8 + 552))(v8, v9, 0, v7 & 1, 0);
  if (md::LabelIconStyleMonitor::needsCrossfade((unsigned __int8 *)(a1 + 696), *v10, a4)) {
    return 1;
  }
  uint64_t v12 = *(void *)(a1 + 576);
  uint64_t v13 = *(void *)(a1 + 584);
  if (v12 == v13) {
    return 0;
  }
  uint64_t v14 = v12 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned char *))(**(void **)(v14 - 8) + 760))(*(void *)(v14 - 8), a2, 1, a4);
    if (result) {
      break;
    }
    BOOL v15 = v14 == v13;
    v14 += 8;
  }
  while (!v15);
  return result;
}

uint64_t md::MultipleIconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, __n128 a5, __n128 a6, double a7)
{
  if (!*(unsigned char *)(a1 + 756)) {
    goto LABEL_105;
  }
  uint64_t v59 = a2;
  uint64_t v64 = 0;
  {
    operator new();
  }
  uint64_t v65 = mdm::Allocator::instance(void)::alloc;
  uint64_t v66 = 0;
  uint64_t v63 = &v64;
  {
    operator new();
  }
  unint64_t v10 = *(uint64_t **)(a1 + 576);
  uint64_t v61 = *(uint64_t **)(a1 + 584);
  if (v10 == v61)
  {
    *(unsigned char *)(a1 + 756) = 0;
    std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v63, (uint64_t)v64);
    goto LABEL_104;
  }
  size_t v57 = a3;
  uint16x8_t v58 = a4;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v62 = 0;
  uint64_t v60 = mdm::Allocator::instance(void)::alloc;
  do
  {
    uint64_t v13 = *v10;
    unsigned __int8 v14 = atomic_load((unsigned __int8 *)(*(void *)(*v10 + 640) + 142));
    if ((v14 & 1) == 0)
    {
      if (v11) {
        goto LABEL_100;
      }
      std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v63, (uint64_t)v64);
      return 15;
    }
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)(*(void *)(v13 + 640) + 143));
    if ((v15 & 1) == 0)
    {
      if ((unint64_t)v12 < v62) {
        goto LABEL_11;
      }
      uint64_t v19 = (v12 - v11) >> 3;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61) {
        abort();
      }
      unint64_t v21 = v62 - (void)v11;
      if ((uint64_t)(v62 - (void)v11) >> 2 > v20) {
        unint64_t v20 = (uint64_t)(v62 - (void)v11) >> 2;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v22 = v20;
      }
      if (v22)
      {
        uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v60 + 16))(v60, 8 * v22, 8);
        char v24 = (char *)(v23 + 8 * v19);
        unint64_t v62 = v23 + 8 * v22;
        if (v23) {
          *(void *)char v24 = v13;
        }
      }
      else
      {
        unint64_t v62 = 0;
        char v24 = (char *)(8 * v19);
      }
      uint64_t v33 = v24;
      if (v12 == v11) {
        goto LABEL_51;
      }
      unint64_t v34 = v12 - v11 - 8;
      if (v34 < 0x138
        || &v24[-(v34 & 0xFFFFFFFFFFFFFFF8) - 8] > v24 - 8
        || &v12[-(v34 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8
        || (unint64_t)(v12 - v24) < 0x20)
      {
        uint64_t v35 = v12;
        uint64_t v33 = v24;
      }
      else
      {
        uint64_t v37 = (v34 >> 3) + 1;
        uint64_t v35 = &v12[-8 * (v37 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v38 = v24 - 16;
        v39 = v12 - 16;
        uint64_t v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v41 = *(_OWORD *)v39;
          *((_OWORD *)v38 - 1) = *((_OWORD *)v39 - 1);
          *(_OWORD *)uint64_t v38 = v41;
          v38 -= 32;
          v39 -= 32;
          v40 -= 4;
        }
        while (v40);
        uint64_t v33 = &v24[-8 * (v37 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_51;
        }
      }
      do
      {
        uint64_t v36 = *((void *)v35 - 1);
        v35 -= 8;
        *((void *)v33 - 1) = v36;
        v33 -= 8;
      }
      while (v35 != v11);
LABEL_51:
      uint64_t v12 = v24 + 8;
      if (v11) {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v60 + 40))(v60, v11, v21);
      }
      uint64_t v11 = v33;
      goto LABEL_7;
    }
    uint64_t v16 = *(void *)(v13 + 640);
    unsigned __int8 v17 = atomic_load((unsigned __int8 *)(v16 + 143));
    if (v17) {
      id v18 = *(id *)(v16 + 16);
    }
    else {
      id v18 = 0;
    }
    unint64_t v25 = v64;
    int v26 = &v64;
    uint64_t v27 = &v64;
    if (v64)
    {
      int v26 = &v64;
      while (1)
      {
        while (1)
        {
          uint64_t v27 = (uint64_t **)v25;
          if ((objc_msgSend(v18, "compareTo:", v25[4], v57, v58) & 0x80000000) == 0) {
            break;
          }
          unint64_t v25 = *v27;
          int v26 = v27;
          if (!*v27) {
            goto LABEL_44;
          }
        }
        if (([v27[4] compareTo:v18] & 0x80000000) == 0) {
          break;
        }
        int v26 = v27 + 1;
        unint64_t v25 = v27[1];
        if (!v25) {
          goto LABEL_44;
        }
      }
      if (*v26)
      {

        if ((unint64_t)v12 < v62)
        {
LABEL_11:
          if (v12) {
            *(void *)uint64_t v12 = v13;
          }
          v12 += 8;
          goto LABEL_7;
        }
        uint64_t v28 = (v12 - v11) >> 3;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          abort();
        }
        unint64_t v21 = v62 - (void)v11;
        if ((uint64_t)(v62 - (void)v11) >> 2 > v29) {
          unint64_t v29 = (uint64_t)(v62 - (void)v11) >> 2;
        }
        if (v21 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v60 + 16))(v60, 8 * v30, 8);
          char v24 = (char *)(v31 + 8 * v28);
          unint64_t v62 = v31 + 8 * v30;
          if (v31) {
            *(void *)char v24 = v13;
          }
        }
        else
        {
          unint64_t v62 = 0;
          char v24 = (char *)(8 * v28);
        }
        uint64_t v33 = v24;
        if (v12 == v11) {
          goto LABEL_51;
        }
        unint64_t v42 = v12 - v11 - 8;
        if (v42 < 0x138
          || &v24[-(v42 & 0xFFFFFFFFFFFFFFF8) - 8] > v24 - 8
          || &v12[-(v42 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8
          || (unint64_t)(v12 - v24) < 0x20)
        {
          int v43 = v12;
          uint64_t v33 = v24;
        }
        else
        {
          uint64_t v45 = (v42 >> 3) + 1;
          int v43 = &v12[-8 * (v45 & 0x3FFFFFFFFFFFFFFCLL)];
          int v46 = v24 - 16;
          long long v47 = v12 - 16;
          uint64_t v48 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v49 = *(_OWORD *)v47;
            *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
            *(_OWORD *)int v46 = v49;
            v46 -= 32;
            v47 -= 32;
            v48 -= 4;
          }
          while (v48);
          uint64_t v33 = &v24[-8 * (v45 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_51;
          }
        }
        do
        {
          uint64_t v44 = *((void *)v43 - 1);
          v43 -= 8;
          *((void *)v33 - 1) = v44;
          v33 -= 8;
        }
        while (v43 != v11);
        goto LABEL_51;
      }
    }
LABEL_44:
    uint64_t v32 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v65 + 16))(v65, 40, 8);
    v32[4] = (uint64_t)v18;
    *uint64_t v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v27;
    *int v26 = v32;
    if (*v63)
    {
      uint64_t v63 = (uint64_t **)*v63;
      uint64_t v32 = *v26;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v64, v32);
    ++v66;
LABEL_7:
    ++v10;
  }
  while (v10 != v61);
  *(unsigned char *)(a1 + 756) = 0;
  if (v11 != v12)
  {
    uint64_t v51 = v11;
    while (1)
    {
      uint64_t v52 = *(void *)v51;
      unsigned __int16 v53 = *(void **)(a1 + 584);
      char v54 = *(void **)(a1 + 576);
      if (v54 != v53)
      {
        while (*v54 != v52)
        {
          if (++v54 == v53)
          {
            char v54 = *(void **)(a1 + 584);
            break;
          }
        }
      }
      std::string::size_type v55 = v54 + 1;
      if (v54 == v53 || v55 == v53)
      {
        if (v54 != v53) {
          goto LABEL_97;
        }
      }
      else
      {
        do
        {
          if (*v55 != v52) {
            *v54++ = *v55;
          }
          ++v55;
        }
        while (v55 != v53);
        if (v54 != *(void **)(a1 + 584))
        {
LABEL_97:
          *(void *)(a1 + 584) = v54;
          if (!v52) {
            goto LABEL_81;
          }
LABEL_80:
          (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
          goto LABEL_81;
        }
      }
      if (v52) {
        goto LABEL_80;
      }
LABEL_81:
      v51 += 8;
      if (v51 == v12)
      {
        if (v11) {
          goto LABEL_100;
        }
LABEL_103:
        std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v63, (uint64_t)v64);
        a3 = v57;
        a4 = v58;
LABEL_104:
        a2 = v59;
LABEL_105:
        if (*(void *)(a1 + 576) == *(void *)(a1 + 584)) {
          return 16;
        }
        else {
          return md::StackLabelPart::layoutForStaging(a1, a2, a3, a4, a5, a6, a7);
        }
      }
    }
  }
  uint64_t v11 = v12;
  if (!v12) {
    goto LABEL_103;
  }
LABEL_100:
  (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v60 + 40))(v60, v11, v62 - (void)v11);
  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v63, (uint64_t)v64);
  a3 = v57;
  a4 = v58;
  a2 = v59;
  if (v14) {
    goto LABEL_105;
  }
  return 15;
}

void sub_1A27E04B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  if (v16) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, v16, a14 - v16);
  }
  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void md::MultipleIconLabelPart::~MultipleIconLabelPart(md::MultipleIconLabelPart *this)
{
  *(void *)this = &unk_1EF53FAC8;
  if (*((char *)this + 719) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 90) + 40))(*((void *)this + 90), *((void *)this + 87), *((void *)this + 89) & 0x7FFFFFFFFFFFFFFFLL);
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
  uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v4) {
      operator new();
    }
  }
  uint64_t v3 = *(void (**)(void))(**((void **)v2 + 91) + 40);
  v3();
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF53FAC8;
  if (*((char *)this + 719) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 90) + 40))(*((void *)this + 90), *((void *)this + 87), *((void *)this + 89) & 0x7FFFFFFFFFFFFFFFLL);
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

uint64_t md::CompositeLabelPart::partIntersectsDisplayFrustum(uint64_t a1, uint64_t a2)
{
  if (!md::CollisionObject::intersectsWorldFrustum((float32x2_t *)(*(void *)(a1 + 24) + 312), a2))
  {
    LODWORD(result) = 0;
    uint64_t v5 = (unsigned char *)(a1 + 630);
LABEL_11:
    if (*v5) {
      return result;
    }
    else {
      return 0;
    }
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 488))(a1, a2);
  uint64_t v5 = (unsigned char *)(a1 + 630);
  if (*(unsigned char *)(a1 + 630)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = result == 0;
  }
  if (v6) {
    goto LABEL_11;
  }
  uint64_t v7 = *(void **)(a1 + 576);
  uint64_t v8 = *(void **)(a1 + 584);
  if (v7 == v8)
  {
LABEL_9:
    LODWORD(result) = 1;
    goto LABEL_11;
  }
  while (((*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 488))(*v7, a2) & 1) == 0)
  {
    if (++v7 == v8) {
      goto LABEL_9;
    }
  }
  return 1;
}

uint64_t md::CompositeLabelPart::partIntersectsStagingFrustum(uint64_t a1, uint64_t a2)
{
  if (!md::CollisionObject::intersectsWorldFrustum((float32x2_t *)(*(void *)(a1 + 24) + 72), a2))
  {
    LODWORD(result) = 0;
    uint64_t v5 = (unsigned char *)(a1 + 630);
LABEL_11:
    if (*v5) {
      return result;
    }
    else {
      return 0;
    }
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 480))(a1, a2);
  uint64_t v5 = (unsigned char *)(a1 + 630);
  if (*(unsigned char *)(a1 + 630)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = result == 0;
  }
  if (v6) {
    goto LABEL_11;
  }
  uint64_t v7 = *(void **)(a1 + 576);
  uint64_t v8 = *(void **)(a1 + 584);
  if (v7 == v8)
  {
LABEL_9:
    LODWORD(result) = 1;
    goto LABEL_11;
  }
  while (((*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 480))(*v7, a2) & 1) == 0)
  {
    if (++v7 == v8) {
      goto LABEL_9;
    }
  }
  return 1;
}

uint64_t md::CompositeLabelPart::partCollidesWithDisplayObject(md::CompositeLabelPart *this, const md::CollisionObject *a2)
{
  uint64_t v3 = (float *)*((void *)this + 3);
  if (v3[100] <= *((float *)a2 + 20)
    || v3[98] >= *((float *)a2 + 22)
    || v3[101] <= *((float *)a2 + 21)
    || v3[99] >= *((float *)a2 + 23))
  {
    LODWORD(result) = 0;
    BOOL v6 = (char *)this + 630;
    goto LABEL_12;
  }
  LODWORD(result) = (*(uint64_t (**)(md::CompositeLabelPart *, const md::CollisionObject *))(*(void *)this + 472))(this, a2);
  BOOL v6 = (char *)this + 630;
  if (*((unsigned char *)this + 630) || !result) {
    goto LABEL_12;
  }
  uint64_t v7 = (void *)*((void *)this + 72);
  uint64_t v8 = (void *)*((void *)this + 73);
  if (v7 == v8)
  {
    LODWORD(result) = 1;
LABEL_12:
    if (*v6) {
      return result;
    }
    else {
      return 0;
    }
  }
  while (((*(uint64_t (**)(void, const md::CollisionObject *))(*(void *)*v7 + 472))(*v7, a2) & 1) == 0)
  {
    ++v7;
    LODWORD(result) = 1;
    if (v7 == v8) {
      goto LABEL_12;
    }
  }
  return 1;
}

uint64_t md::CompositeLabelPart::partCollidesWithObject(md::CompositeLabelPart *this, const md::CollisionObject *a2)
{
  int v4 = (float *)(*(uint64_t (**)(md::CompositeLabelPart *))(*(void *)this + 248))(this);
  if (v4[2] <= *((float *)a2 + 20)
    || *v4 >= *((float *)a2 + 22)
    || v4[3] <= *((float *)a2 + 21)
    || v4[1] >= *((float *)a2 + 23))
  {
    LODWORD(result) = 0;
    BOOL v6 = (char *)this + 630;
    goto LABEL_12;
  }
  LODWORD(result) = (*(uint64_t (**)(md::CompositeLabelPart *, const md::CollisionObject *))(*(void *)this + 464))(this, a2);
  BOOL v6 = (char *)this + 630;
  if (*((unsigned char *)this + 630) || !result) {
    goto LABEL_12;
  }
  uint64_t v7 = (void *)*((void *)this + 72);
  uint64_t v8 = (void *)*((void *)this + 73);
  if (v7 == v8)
  {
    LODWORD(result) = 1;
LABEL_12:
    if (*v6) {
      return result;
    }
    else {
      return 0;
    }
  }
  while (((*(uint64_t (**)(void, const md::CollisionObject *))(*(void *)*v7 + 464))(*v7, a2) & 1) == 0)
  {
    ++v7;
    LODWORD(result) = 1;
    if (v7 == v8) {
      goto LABEL_12;
    }
  }
  return 1;
}

uint64_t md::CompositeLabelPart::setRenderOrder(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 824))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return this;
}

uint64_t md::CompositeLabelPart::setRenderPass(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 576);
  for (unint64_t i = *(uint64_t **)(result + 584);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 816))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::populateDebugNode(uint64_t this, gdc::DebugTreeNode *a2)
{
  uint64_t v2 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, gdc::DebugTreeNode *))(*(void *)v5 + 800))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return this;
}

uint64_t md::CompositeLabelPart::debugString@<X0>(uint64_t **this@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v24);
  ((void (*)(void **__return_ptr, uint64_t **))(*this)[112])(&__p, this);
  if ((v23 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v7 = v23;
  }
  else {
    uint64_t v7 = v22;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, v7);
  if ((char)v23 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = this[72];
  for (unint64_t i = this[73]; v8 != i; ++v8)
  {
    uint64_t v10 = *v8;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n ", 2);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 792))(&__p, v10, a2);
    if ((v23 & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = __p;
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v12 = v23;
    }
    else {
      uint64_t v12 = v22;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v11, v12);
    if ((char)v23 < 0) {
      operator delete(__p);
    }
  }
  if ((v31 & 0x10) != 0)
  {
    unint64_t v14 = v30;
    if (v30 < v27)
    {
      unint64_t v30 = v27;
      unint64_t v14 = v27;
    }
    unsigned __int8 v15 = (const void **)&v26;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      size_t v13 = 0;
      a3[23] = 0;
      goto LABEL_35;
    }
    unsigned __int8 v15 = (const void **)v25;
    unint64_t v14 = v25[2];
  }
  uint64_t v16 = *v15;
  size_t v13 = v14 - (void)*v15;
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v19 = operator new(v17 + 1);
    *((void *)a3 + 1) = v13;
    *((void *)a3 + 2) = v18 | 0x8000000000000000;
    *(void *)a3 = v19;
    a3 = v19;
    goto LABEL_34;
  }
  a3[23] = v13;
  if (v13) {
LABEL_34:
  }
    memmove(a3, v16, v13);
LABEL_35:
  a3[v13] = 0;
  v24[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v24[1] = MEMORY[0x1E4FBA470] + 16;
  if (v29 < 0) {
    operator delete(v28);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v32);
}

void sub_1A27E0FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::CompositeLabelPart::debugDrawWorldForWorld(md::CompositeLabelPart *this, md::LabelManager *a2, float32x2_t *a3)
{
  if (*((unsigned char *)this + 630))
  {
    uint64_t v5 = (md::CompositeLabelPart *)((char *)this + 312);
    BOOL v6 = (float64x2_t *)((char *)a2 + 440);
    md::CollisionObject::worldDrawDebugHighlightWithContext(v5, v6, a3);
  }
  else
  {
    uint64_t v7 = (uint64_t *)*((void *)this + 72);
    uint64_t v8 = (uint64_t *)*((void *)this + 73);
    while (v7 != v8)
    {
      uint64_t v9 = *v7++;
      (*(void (**)(uint64_t, md::LabelManager *, float32x2_t *))(*(void *)v9 + 784))(v9, a2, a3);
    }
  }
}

void md::CompositeLabelPart::debugDrawWorldForStaging(md::CompositeLabelPart *this, md::LabelManager *a2, float32x2_t *a3)
{
  if (*((unsigned char *)this + 630))
  {
    uint64_t v5 = (md::CompositeLabelPart *)((char *)this + 72);
    BOOL v6 = (float64x2_t *)*((void *)a2 + 54);
    md::CollisionObject::worldDrawDebugHighlightWithContext(v5, v6, a3);
  }
  else
  {
    uint64_t v7 = (uint64_t *)*((void *)this + 72);
    uint64_t v8 = (uint64_t *)*((void *)this + 73);
    while (v7 != v8)
    {
      uint64_t v9 = *v7++;
      (*(void (**)(uint64_t, md::LabelManager *, float32x2_t *))(*(void *)v9 + 776))(v9, a2, a3);
    }
  }
}

void md::CompositeLabelPart::debugDraw(uint64_t **this, md::DebugConsole *a2)
{
  md::LabelPart::debugDraw((md::LabelPart *)this, a2);
  if (!*((unsigned char *)this + 630))
  {
    int v4 = this[72];
    uint64_t v5 = this[73];
    while (v4 != v5)
    {
      uint64_t v6 = *v4++;
      (*(void (**)(uint64_t, md::DebugConsole *))(*(void *)v6 + 768))(v6, a2);
    }
  }
}

uint64_t md::CompositeLabelPart::isTextVisible(md::CompositeLabelPart *this)
{
  uint64_t v1 = *((void *)this + 72);
  uint64_t v2 = *((void *)this + 73);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 744))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::CompositeLabelPart::populateImageInfos(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 576);
  for (unint64_t i = *(uint64_t **)(result + 584);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 728))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::hasSelectableParts(md::CompositeLabelPart *this)
{
  uint64_t v1 = (void *)*((void *)this + 72);
  uint64_t v2 = (void *)*((void *)this + 73);
  if (v1 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *v1;
    if (((*(uint64_t (**)(void))(*(void *)*v1 + 648))(*v1) & 1) != 0
      || (*(unsigned int (**)(uint64_t))(*(void *)v3 + 640))(v3))
    {
      break;
    }
    if (++v1 == v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t md::CompositeLabelPart::hitPartAtPixel(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  uint64_t v6 = *(void **)(a1 + 576);
  uint64_t v7 = *(void **)(a1 + 584);
  if (v6 == v7) {
    return 0;
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, float, float, float))(*(void *)*v6 + 632))(*v6, a2, a3, a4, a5, a6);
    if (result) {
      break;
    }
    if (++v6 == v7) {
      return 0;
    }
  }
  return result;
}

uint64_t md::CompositeLabelPart::animate(uint64_t this, float a2)
{
  uint64_t v2 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, float))(*(void *)v5 + 616))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return this;
}

uint64_t md::CompositeLabelPart::populateHoverBounds(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 576);
  for (unint64_t i = *(uint64_t **)(result + 584);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 520))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::intersectsDisplayFrustum(float32x2_t *a1, uint64_t a2)
{
  if (a1[78].i8[6])
  {
    if (a1[70].i8[5])
    {
      uint64_t v3 = a1 + 39;
      return md::CollisionObject::intersectsWorldFrustum(v3, a2);
    }
    return 0;
  }
  float32x2_t v5 = a1[72];
  float32x2_t v6 = a1[73];
  if (*(void *)&v5 == *(void *)&v6) {
    return 0;
  }
  uint64_t v7 = *(void *)&v5 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 - 8) + 864))(*(void *)(v7 - 8), a2);
    if (result) {
      break;
    }
    BOOL v8 = v7 == *(void *)&v6;
    v7 += 8;
  }
  while (!v8);
  return result;
}

uint64_t md::CompositeLabelPart::intersectsStagingFrustum(float32x2_t *a1, uint64_t a2)
{
  if (a1[78].i8[6])
  {
    if (a1[70].i8[5] && a1[70].i8[6])
    {
      uint64_t v3 = a1 + 39;
      return md::CollisionObject::intersectsWorldFrustum(v3, a2);
    }
    return 0;
  }
  float32x2_t v5 = a1[72];
  float32x2_t v6 = a1[73];
  if (*(void *)&v5 == *(void *)&v6) {
    return 0;
  }
  uint64_t v7 = *(void *)&v5 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 - 8) + 856))(*(void *)(v7 - 8), a2);
    if (result) {
      break;
    }
    BOOL v8 = v7 == *(void *)&v6;
    v7 += 8;
  }
  while (!v8);
  return result;
}

uint64_t md::CompositeLabelPart::collidesWithDisplayObject(md::CompositeLabelPart *this, const md::CollisionObject *a2)
{
  if (*((unsigned char *)this + 630))
  {
    return md::LabelPart::collidesWithDisplayObject(this, a2);
  }
  else
  {
    uint64_t v4 = *((void *)this + 72);
    uint64_t v5 = *((void *)this + 73);
    if (v4 == v5)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = v4 + 8;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, const md::CollisionObject *))(**(void **)(v6 - 8) + 848))(*(void *)(v6 - 8), a2);
        if (result) {
          break;
        }
        BOOL v7 = v6 == v5;
        v6 += 8;
      }
      while (!v7);
    }
  }
  return result;
}

uint64_t md::CompositeLabelPart::collidesWithObject(md::CompositeLabelPart *this, const md::CollisionObject *a2)
{
  if (*((unsigned char *)this + 630))
  {
    return md::LabelPart::collidesWithObject(this, a2);
  }
  else
  {
    uint64_t v4 = *((void *)this + 72);
    uint64_t v5 = *((void *)this + 73);
    if (v4 == v5)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = v4 + 8;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, const md::CollisionObject *))(**(void **)(v6 - 8) + 840))(*(void *)(v6 - 8), a2);
        if (result) {
          break;
        }
        BOOL v7 = v6 == v5;
        v6 += 8;
      }
      while (!v7);
    }
  }
  return result;
}

uint64_t md::CompositeLabelPart::collidesWithItem(md::CompositeLabelPart *this, const md::LabelCollidableItem *a2, uint64_t a3)
{
  if (*((unsigned char *)this + 630))
  {
    uint64_t v4 = *(uint64_t (**)(const md::LabelCollidableItem *, char *))(*(void *)a2 + 16);
    return v4(a2, (char *)this + 72);
  }
  else
  {
    uint64_t v6 = (void *)*((void *)this + 72);
    BOOL v7 = (void *)*((void *)this + 73);
    if (v6 == v7)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        uint64_t v9 = *v6;
        uint64_t v10 = (float32x2_t *)(*(uint64_t (**)(void))(*(void *)*v6 + 248))(*v6);
        float32x2_t v11 = vmul_f32(vsub_f32(v10[1], *v10), (float32x2_t)0x3F0000003F000000);
        float32x2_t v12 = vadd_f32(v11, *v10);
        v13[0] = v11;
        v13[1] = v12;
        v13[2] = 1065353216;
        if (gm::OBRect<float>::intersectsUsingInset((float *)a2 + 2, (float *)v13)
          && ((*(uint64_t (**)(uint64_t, const md::LabelCollidableItem *, uint64_t))(*(void *)v9 + 456))(v9, a2, a3) & 1) != 0)
        {
          break;
        }
        if (++v6 == v7) {
          return 0;
        }
      }
      return 1;
    }
  }
}

uint64_t md::CompositeLabelPart::setCollisionResult(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 448))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return this;
}

uint64_t md::CompositeLabelPart::collisionWillStart(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 440))(v3))
    uint64_t v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabelPart::setPartRotation(uint64_t result, float *a2)
{
  float v2 = *a2;
  *(float *)(result + 288) = *a2;
  float v3 = a2[1];
  *(float *)(result + 292) = v3;
  float v4 = *(float *)(result + 296);
  float v5 = *(float *)(result + 300);
  float v6 = v4 * v3;
  float v7 = -(float)((float)(v5 * v3) - (float)(v4 * v2));
  *(float *)(result + 88) = v7;
  *(float *)(result + 92) = v6 + (float)(v5 * v2);
  *(unsigned char *)(result + 268) = fabsf(v7 + -1.0) > 0.000001;
  float v8 = *a2;
  *(float *)(result + 528) = *a2;
  float v9 = a2[1];
  *(float *)(result + 532) = v9;
  float v10 = *(float *)(result + 536);
  float v11 = *(float *)(result + 540);
  float v12 = v10 * v9;
  float v13 = -(float)((float)(v11 * v9) - (float)(v10 * v8));
  *(float *)(result + 328) = v13;
  *(float *)(result + 332) = v12 + (float)(v11 * v8);
  *(unsigned char *)(result + 508) = fabsf(v13 + -1.0) > 0.000001;
  unint64_t v14 = *(uint64_t **)(result + 576);
  for (unint64_t i = *(uint64_t **)(result + 584);
        v14 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, float *))(*(void *)v17 + 376))(v17, a2))
  {
    uint64_t v17 = *v14++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::setRadialPosition(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(uint64_t **)(result + 576);
  for (unint64_t i = *(uint64_t **)(result + 584);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 368))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::checkResourcesReady(md::CompositeLabelPart *this, md::LabelManager *a2)
{
  float v2 = (void *)*((void *)this + 72);
  float v3 = (void *)*((void *)this + 73);
  if (v2 == v3) {
    return 37;
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void, md::LabelManager *))(*(void *)*v2 + 344))(*v2, a2);
    if (result != 37) {
      break;
    }
    if (++v2 == v3) {
      return 37;
    }
  }
  return result;
}

float md::CompositeLabelPart::pixelBoundsForDisplay(md::CompositeLabelPart *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 72);
  float v2 = (uint64_t *)*((void *)this + 73);
  if (v1 == v2) {
    return 3.4028e38;
  }
  float v3 = 3.4028e38;
  float v4 = -3.4028e38;
  float v5 = -3.4028e38;
  float v6 = 3.4028e38;
  do
  {
    uint64_t v7 = *v1++;
    float v6 = fminf((*(float (**)(uint64_t))(*(void *)v7 + 256))(v7), v6);
    float v5 = fmaxf(v5, v8);
    float v3 = fminf(v9, v3);
    float v4 = fmaxf(v4, v10);
  }
  while (v1 != v2);
  return v6;
}

uint64_t md::CompositeLabelPart::isVisuallySimilar(md::CompositeLabelPart *this, const md::LabelPart *a2)
{
  uint64_t v2 = *((void *)this + 73);
  uint64_t v3 = *((void *)this + 72);
  if (v2 - v3 == *((void *)a2 + 73) - *((void *)a2 + 72))
  {
    if (v2 == v3) {
      return 1;
    }
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 8 * v6);
      uint64_t v8 = *(void *)(*((void *)a2 + 72) + 8 * v6);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 224))(v7);
      if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)v8 + 224))(v8)) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 224))(v7);
      if (!result) {
        return result;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 232))(v7, v8) & 1) == 0) {
        break;
      }
      ++v6;
      uint64_t v3 = *((void *)this + 72);
      if (v6 >= (*((void *)this + 73) - v3) >> 3) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t md::CompositeLabelPart::clearLabelAnimationIDs(uint64_t this)
{
  *(unsigned char *)(this + 564) = -1;
  uint64_t v1 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 192))(v3))
    uint64_t v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabelPart::markActive(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v3))
    uint64_t v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabelPart::pushToRenderModel(uint64_t this, md::LabelRenderModel *a2, float a3)
{
  if (*(unsigned char *)(this + 608)) {
    a3 = *(float *)(this + 612);
  }
  float v5 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584);
        v5 != i;
        this = (*(uint64_t (**)(uint64_t, md::LabelRenderModel *, float))(*(void *)v7 + 128))(v7, a2, a3))
  {
    uint64_t v7 = *v5++;
  }
  return this;
}

uint64_t md::CompositeLabelPart::layoutForDisplay(void *a1, uint64_t a2, md::LabelAnimator *a3, _DWORD *a4, _DWORD *a5, __n128 a6, int8x16_t a7, float32x4_t a8)
{
  float v12 = (void *)a1[72];
  float v13 = (void *)a1[73];
  __n128 v14 = (__n128)xmmword_1A28FC750;
  if (v12 == v13)
  {
LABEL_7:
    uint64_t v22 = (void *)a1[59];
    __n128 v24 = v14;
    if (v22)
    {
      free(v22);
      __n128 v14 = v24;
      a1[59] = 0;
    }
    unsigned __int8 v23 = (void *)a1[60];
    if (v23)
    {
      free(v23);
      __n128 v14 = v24;
      a1[60] = 0;
    }
    *(__n128 *)(a1 + 39) = v14;
    *((_DWORD *)a1 + 136) = *a5;
    *((_DWORD *)a1 + 137) = a5[1];
    *((_DWORD *)a1 + 130) = *a4;
    *((_DWORD *)a1 + 131) = a4[1];
    *((_DWORD *)a1 + 86) = *a4;
    a6.n128_u32[0] = a4[1];
    *((_DWORD *)a1 + 87) = a6.n128_u32[0];
    md::CollisionObject::setupShapeData((uint64_t)(a1 + 39), a6.n128_f64[0], *(double *)a7.i64, *(double *)a8.i64);
    if (*((unsigned char *)a1 + 565)) {
      a1[53] = (*(uint64_t (**)(void *))(*a1 + 144))(a1);
    }
    md::CompositeLabelPart::updateAnimationForDisplay((md::CompositeLabelPart *)a1, a3);
    return 37;
  }
  else
  {
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, md::LabelAnimator *, _DWORD *, _DWORD *, __n128, int8x16_t, float32x4_t, __n128))(*(void *)*v12 + 120))(*v12, a2, a3, a4, a5, a6, a7, a8, v14);
      if (result != 37) {
        break;
      }
      if (++v12 == v13)
      {
        uint64_t v17 = (uint64_t *)a1[72];
        uint64_t v18 = (uint64_t *)a1[73];
        __n128 v14 = (__n128)xmmword_1A28FC750;
        if (v17 != v18)
        {
          __n128 v14 = (__n128)xmmword_1A28FC750;
          do
          {
            uint64_t v19 = *v17++;
            unint64_t v20 = (int8x16_t *)(*(void *)(v19 + 24) + 312);
            a6 = *(__n128 *)v20;
            v21.i64[0] = v20->i64[0];
            v21.i64[1] = v14.n128_i64[1];
            a8.i64[0] = v14.n128_u64[0];
            a8.i64[1] = *(void *)(*(void *)(v19 + 24) + 320);
            a7 = (int8x16_t)vcgtq_f32(a8, v21);
            __n128 v14 = (__n128)vbslq_s8(a7, *v20, (int8x16_t)v14);
          }
          while (v17 != v18);
        }
        goto LABEL_7;
      }
    }
  }
  return result;
}

float md::CompositeLabelPart::updateAnimationForDisplay(md::CompositeLabelPart *this, md::LabelAnimator *a2)
{
  if (*((unsigned char *)this + 608)) {
    *((unsigned char *)this + 608) = 0;
  }
  if (*((unsigned char *)this + 616)) {
    *((unsigned char *)this + 616) = 0;
  }
  if (a2)
  {
    uint64_t v2 = (float32x2_t *)*((void *)a2 + 3);
    uint64_t v3 = (float32x2_t *)*((void *)a2 + 4);
    if (0x8E38E38E38E38E39 * (((char *)v3 - (char *)v2) >> 4) <= *((unsigned __int8 *)this + 563))
    {
      if (v2 == v3 || !*((unsigned char *)a2 + 89)) {
        return result;
      }
    }
    else
    {
      v2 += 18 * *((unsigned __int8 *)this + 563);
    }
    if (v2)
    {
      float32x2_t v4 = v2[9];
      if (v4)
      {
        float result = fmaxf(fminf(v2[10].f32[0]+ (float)(*(float *)(**(void **)&v4 + 32 * *(unsigned int *)(*(void *)&v4 + 32) + 8)* (float)(v2[10].f32[1] - v2[10].f32[0])), 1.0), 0.0);
        *((unsigned char *)this + 608) = 1;
        *((float *)this + 153) = result;
      }
      float32x2_t v6 = v2[11];
      if (v6)
      {
        float result = *(float *)(**(void **)&v6 + 32 * *(unsigned int *)(*(void *)&v6 + 32) + 8);
        *(float32x2_t *)((char *)this + 620) = vmla_n_f32(v2[12], vsub_f32(v2[13], v2[12]), result);
        *((unsigned char *)this + 616) = 1;
      }
    }
  }
  return result;
}

uint64_t md::CompositeLabelPart::updateForDisplay(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 112))(v3))
    uint64_t v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v8 = *(void **)(a1 + 576);
  int v9 = *(void **)(a1 + 584);
  __n128 v10 = (__n128)xmmword_1A28FC750;
  if (v8 == v9)
  {
    uint64_t v15 = 37;
LABEL_11:
    int8x16_t v18 = (int8x16_t)v10;
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)*v8 + 80))(*v8, a2, a3, a4, a5, a6, a7, v10);
    if (v14 != 37) {
      break;
    }
    if (++v8 == v9)
    {
      uint64_t v15 = 37;
      goto LABEL_7;
    }
  }
  uint64_t v15 = v14;
LABEL_7:
  __n128 v10 = (__n128)xmmword_1A28FC750;
  uint64_t v16 = *(void ***)(a1 + 576);
  uint64_t v17 = *(void ***)(a1 + 584);
  if (v16 == v17) {
    goto LABEL_11;
  }
  __n128 v10 = (__n128)xmmword_1A28FC750;
  int8x16_t v18 = (int8x16_t)xmmword_1A28FC750;
  do
  {
    int8x16_t v27 = v18;
    int8x16_t v29 = (int8x16_t)v10;
    uint64_t v19 = *v16++;
    unint64_t v20 = (int8x16_t *)(*(uint64_t (**)(void *))(*v19 + 248))(v19);
    v21.i64[0] = v20->i64[0];
    v21.i64[1] = v27.i64[1];
    v22.i64[0] = v27.i64[0];
    v22.i64[1] = v20->i64[1];
    int8x16_t v18 = vbslq_s8((int8x16_t)vcgtq_f32(v22, v21), *v20, v27);
    uint64_t v23 = v19[3];
    v21.i64[0] = *(void *)(v23 + 72);
    v21.i64[1] = v29.i64[1];
    v22.i64[0] = v29.i64[0];
    v22.i64[1] = *(void *)(v23 + 80);
    __n128 v10 = (__n128)vbslq_s8((int8x16_t)vcgtq_f32(v22, v21), *(int8x16_t *)(v23 + 72), v29);
  }
  while (v16 != v17);
LABEL_12:
  __n128 v24 = *(void **)(a1 + 232);
  int8x16_t v28 = v18;
  __n128 v30 = v10;
  if (v24)
  {
    free(v24);
    int8x16_t v18 = v28;
    __n128 v10 = v30;
    *(void *)(a1 + 232) = 0;
  }
  unint64_t v25 = *(void **)(a1 + 240);
  if (v25)
  {
    free(v25);
    int8x16_t v18 = v28;
    __n128 v10 = v30;
    *(void *)(a1 + 240) = 0;
  }
  *(__n128 *)(a1 + 72) = v10;
  *(int8x16_t *)(a1 + 152) = v18;
  if (*(unsigned char *)(a1 + 565)) {
    *(void *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  }
  return v15;
}

void md::CompositeLabelPart::updateWithStyle(md::CompositeLabelPart *this, md::LabelManager *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 72);
  float32x2_t v4 = (uint64_t *)*((void *)this + 73);
  if (v3 == v4)
  {
    float v6 = *(float *)(**((void **)this + 4) + 172);
  }
  else
  {
    float v6 = -3.4028e38;
    do
    {
      uint64_t v7 = *v3++;
      (*(void (**)(uint64_t, md::LabelManager *))(*(void *)v7 + 72))(v7, a2);
      float v6 = fmaxf(v6, (*(float (**)(uint64_t))(*(void *)v7 + 240))(v7));
    }
    while (v3 != v4);
  }
  *((float *)this + 42) = v6;
}

uint64_t md::CompositeLabelPart::setInWorldSpace(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(this + 565) = a2;
  *(unsigned char *)(this + 566) = a3;
  uint64_t v3 = *(uint64_t **)(this + 576);
  for (unint64_t i = *(uint64_t **)(this + 584);
        v3 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }
  return this;
}

void *md::CompositeLabelPart::setPreviousModelChainTransform(void *result, uint64_t a2)
{
  result[8] = a2;
  uint64_t v2 = (uint64_t *)result[72];
  for (unint64_t i = (uint64_t *)result[73];
        v2 != i;
        float result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 56))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

void *md::CompositeLabelPart::setPreviousStagingModelChainTransform(void *result, uint64_t a2)
{
  result[7] = a2;
  uint64_t v2 = (uint64_t *)result[72];
  for (unint64_t i = (uint64_t *)result[73];
        v2 != i;
        float result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

void *md::CompositeLabelPart::setPreviousModelChainMatrix(void *result, uint64_t a2)
{
  result[6] = a2;
  uint64_t v2 = (uint64_t *)result[72];
  for (unint64_t i = (uint64_t *)result[73];
        v2 != i;
        float result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

void *md::CompositeLabelPart::setPreviousStagingModelChainMatrix(void *result, uint64_t a2)
{
  result[5] = a2;
  uint64_t v2 = (uint64_t *)result[72];
  for (unint64_t i = (uint64_t *)result[73];
        v2 != i;
        float result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

void md::buildTrafficMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int8x8_t *a7, void *a8, uint64_t *a9, char a10, unsigned int a11)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  id v83 = a8;
  uint64_t v90 = geo::codec::VectorTile::lines(*(geo::codec::VectorTile **)(a1 + 144));
  unint64_t v13 = geo::codec::VectorTile::linesCount(*(geo::codec::VectorTile **)(a1 + 144));
  if (v13)
  {
    uint64_t v14 = (void *)geo::codec::VectorTile::lineVertices(*(geo::codec::VectorTile **)(a1 + 144));
    uint64_t v88 = *(void *)(a1 + 144);
    uint64_t v89 = v14[4];
    int32x2_t v114 = (int32x2_t)0x3F80000000000000;
    uint64_t v15 = +[VKDebugSettings sharedSettings];
    unint64_t v94 = v13;
    uint64_t v85 = a1;
    float64x2_t v79 = a5;
    int v16 = [v15 showTrafficOffset];
    uint64_t v17 = &v114;
    if (!v16) {
      uint64_t v17 = 0;
    }
    id v78 = v17;

    if (a6)
    {
      unint64_t v84 = 0;
      unint64_t v18 = 0;
      while (1)
      {
        uint64_t v19 = (long long *)(a4 + 40 * v18);
        long long v20 = v19[1];
        long long v112 = *v19;
        *(_OWORD *)v113 = v20;
        *(void *)&v113[16] = *((void *)v19 + 4);
        *(void *)&double v21 = v112;
        if (v94 <= v112)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          v39 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A1780000, v39, OS_LOG_TYPE_ERROR, "Skeleton traffic tile tried to access line outside of feature index range, likely need new chain mapping for traffic server", buf, 2u);
          }

          goto LABEL_7;
        }
        uint64_t v22 = v90 + 168 * v112;
        *(void *)&double v23 = DWORD1(v112);
        __n128 v24 = (uint64_t *)(v89 + 16 * (DWORD1(v112) + *(_DWORD *)(v22 + 96)));
        uint64_t v25 = *v24;
        uint64_t v96 = v24[1];
        uint64_t v26 = v14[1];
        uint64_t v27 = v14[3];
        if (v27) {
          uint64_t v28 = v27 + 4 * v25;
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = *(void *)(v88 + 2952);
        if (*(void *)(v88 + 2960) == v29) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v29 + 16 * v25;
        }
        uint64_t v86 = v30;
        uint64_t v87 = v28;
        md::createFeatureAttributeSet((gss::Allocator *)v110, (uint64_t *)(v22 + 24));
        uint64_t v31 = *a9;
        *(void *)&buf[7] = 0;
        *(void *)buf = 0;
        buf[15] = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v108, v31, (gss::FeatureAttributeSet *)v110, (gss::QueryOverrides *)buf);
        if (v108)
        {
          float v32 = *((float *)&v112 + 3);
          if (fabsf(*((float *)&v112 + 3)) >= 0.000001)
          {
            int32x2_t v114 = *(int32x2_t *)&v113[12];
            unint64_t v91 = *(void *)v113;
            if (v84 == *(void *)v113)
            {
              char v81 = 0;
            }
            else
            {
              uint64_t v40 = +[VKDebugSettings sharedSettings];
              char v81 = [v40 showTrafficOffset];

              unint64_t v84 = v91;
            }
            long long v172 = 0u;
            long long v171 = 0u;
            long long v169 = 0u;
            long long v170 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            *(_OWORD *)std::string __p = 0u;
            long long v166 = 0u;
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)buf);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)v133);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v134);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v135);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v136);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v137);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v138);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v139);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v140);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v141);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v142);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v143);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v144);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v145);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v146);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v147);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v148);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v149);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v150);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v151);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v152);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v153);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v154);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v155);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v156);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v157);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v158);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v159);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v160);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v161);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v162);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v163);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v164);
            unsigned int v41 = md::TrafficDynamicTileResource::flowForRoadId(a7, v91, __p);
            uint64_t v42 = v41;
            unint64_t v43 = 126 - 2 * __clz(v41);
            if (v41) {
              uint64_t v44 = v43;
            }
            else {
              uint64_t v44 = 0;
            }
            std::__introsort<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>((uint64_t)__p, (uint64_t *)&__p[v41], v44, 1);
            int v45 = *(_DWORD *)&v113[20];
            if (a10) {
              int v45 = 3;
            }
            if (v45 != 4)
            {
              if (!v41) {
                goto LABEL_59;
              }
              unsigned int v41 = 0;
              float v50 = 0.0;
              uint64_t v51 = __p;
              do
              {
                uint64_t v52 = (float *)*v51;
                if (*((float *)*v51 + 2) <= v50)
                {
                  unsigned int v54 = v41;
                }
                else
                {
                  unsigned __int16 v53 = (float *)&buf[24 * v41];
                  *(void *)unsigned __int16 v53 = v91;
                  v53[2] = v50;
                  v53[3] = v52[2];
                  *((_DWORD *)v53 + 4) = v45;
                  unsigned int v54 = v41 + 1;
                  unsigned int v41 = v54;
                  if (v54 > 0x20) {
                    goto LABEL_60;
                  }
                }
                unsigned int v41 = v54 + 1;
                long long v55 = *(_OWORD *)v52;
                v56 = (float *)&buf[24 * v54];
                v56[4] = v52[4];
                *(_OWORD *)v56 = v55;
                if (v54 + 1 > 0x20) {
                  goto LABEL_60;
                }
                float v50 = v52[3];
                ++v51;
                --v42;
              }
              while (v42);
              if (v54 == -1)
              {
LABEL_59:
                *(void *)buf = v91;
                *(void *)&buf[8] = 0x3F80000000000000;
                unsigned int v41 = 1;
                *(_DWORD *)&buf[16] = v45;
              }
              else
              {
                float v57 = *(float *)&buf[24 * v54 + 12];
                if (v57 < 1.0)
                {
                  uint16x8_t v58 = (float *)&buf[24 * v41];
                  *(void *)uint16x8_t v58 = v91;
                  v58[2] = v57;
                  v58[3] = 1.0;
                  *((_DWORD *)v58 + 4) = v45;
                  unsigned int v41 = v54 + 2;
                }
              }
LABEL_60:
              uint64_t v92 = v26 + 8 * v25;
              float v59 = (float)(unint64_t)(v96 - 1);
              uint64_t v60 = v41;
              if (v32 > 0.0) {
                int v61 = 1;
              }
              else {
                int v61 = -1;
              }
              unsigned int v80 = v61;
              unint64_t v62 = buf;
              while (2)
              {
                if (LODWORD(v23) > *(_DWORD *)(v22 + 100))
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  uint64_t v63 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v64 = *(int32x2_t **)(a3 + 8);
                    __int32 v65 = v64[1].i32[0];
                    v102[0] = -1;
                    v102[1] = v65;
                    int32x2_t v103 = vrev64_s32(*v64);
                    md::debugString<geo::QuadTile>(v104, v102);
                    uint64_t v66 = v104;
                    if (v105 < 0) {
                      uint64_t v66 = (void **)v104[0];
                    }
                    *(_DWORD *)std::string::size_type v115 = 136315650;
                    v116 = v66;
                    __int16 v117 = 2048;
                    double v118 = v21;
                    __int16 v119 = 2048;
                    double v120 = v23;
                    _os_log_impl(&dword_1A1780000, v63, OS_LOG_TYPE_ERROR, "Skeleton traffic tile %s references invalid section %lu on feature %lu", v115, 0x20u);
                    if (v105 < 0) {
                      operator delete(v104[0]);
                    }
                  }
                  goto LABEL_64;
                }
                unsigned int v67 = *((_DWORD *)v62 + 4);
                if (a11 == 4 || (v68 = v67 == a11, unsigned int v67 = a11, v68))
                {
                  if (v67 <= 3 && *(_DWORD *)(a2 + 4 * v67) != 5)
                  {
                    uint64_t v101 = 0;
                    uint64_t v130 = 0;
                    uint64_t v129 = 0;
                    geo::codec::VectorTile::key(*(geo::codec::VectorTile **)(v85 + 144));
                    uint64_t v129 = GEOTileKeyMake();
                    uint64_t v130 = v69;
                    if (md::TrafficUtilities::buildStartOffset((float *)&v101 + 1, (float *)&v101, (std::__shared_weak_count **)v22, (uint64_t)&v112, v25, v96, (uint64_t)v62, v92, (uint64_t)&v129))
                    {
                      if (v32 <= 0.0) {
                        int32x2_t v114 = vrev64_s32(v114);
                      }
                      float v71 = *((float *)&v101 + 1);
                      if (*((float *)&v101 + 1) < 0.0
                        || *((float *)&v101 + 1) > v59
                        || (v70.n128_u32[0] = v101, *(float *)&v101 < 0.0)
                        || *(float *)&v101 > v59)
                      {
                        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                        }
                        uint64_t v63 = (id)GEOGetVectorKitVKDefaultLog_log;
                        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                        {
                          unint64_t v72 = *(int32x2_t **)(a3 + 8);
                          __int32 v73 = v72[1].i32[0];
                          v99[0] = -1;
                          v99[1] = v73;
                          int32x2_t v100 = vrev64_s32(*v72);
                          md::debugString<geo::QuadTile>(v104, v99);
                          uint64_t v74 = v104;
                          if (v105 < 0) {
                            uint64_t v74 = (void **)v104[0];
                          }
                          *(_DWORD *)std::string::size_type v115 = 136316674;
                          v116 = v74;
                          __int16 v117 = 2048;
                          double v118 = v71;
                          __int16 v119 = 2048;
                          double v120 = *(float *)&v101;
                          __int16 v121 = 2048;
                          uint64_t v122 = v25;
                          __int16 v123 = 2048;
                          uint64_t v124 = v96;
                          __int16 v125 = 2048;
                          double v126 = *((float *)&v112 + 2);
                          __int16 v127 = 2048;
                          double v128 = v32;
                          _os_log_impl(&dword_1A1780000, v63, OS_LOG_TYPE_ERROR, "Skeleton traffic tile %s implicates bad section (start: %f, end: %f, valid: %lu,%lu, skeleton record: %f,%f)", v115, 0x48u);
                          if (v105 < 0) {
                            operator delete(v104[0]);
                          }
                        }
LABEL_64:
                      }
                      else
                      {
                        BOOL v75 = *(unsigned __int8 *)(v90 + 168 * LODWORD(v21) + 153) - 1 < 2;
                        if (v79)
                        {
                          if (v79[1] <= v18) {
                            abort();
                          }
                          BOOL v75 = (*(void *)(*v79 + 8 * (v18 >> 6)) & (1 << v18)) != 0;
                        }
                        LOBYTE(v77) = v81;
                        BYTE4(v76) = v75;
                        LODWORD(v76) = v96;
                        (*((void (**)(id, uint64_t, double, double, void, void, uint64_t **, void, float, __n128, uint64_t, uint64_t, uint64_t, uint64_t, int32x2_t *, int))v83
                         + 2))(v83, v22, COERCE_DOUBLE(*(void *)&v21), COERCE_DOUBLE(*(void *)&v23), *(unsigned int *)&v113[8], v80, &v108, v67, *((float *)&v101 + 1), v70, v92, v87, v86, v76, v78, v77);
                      }
                    }
                  }
                }
                v62 += 24;
                if (!--v60) {
                  goto LABEL_25;
                }
                continue;
              }
            }
            if (v41)
            {
              int v46 = buf;
              long long v47 = __p;
              do
              {
                uint64_t v48 = (uint64_t)*v47++;
                int v49 = *(_DWORD *)(v48 + 16);
                *(_OWORD *)int v46 = *(_OWORD *)v48;
                *((_DWORD *)v46 + 4) = v49;
                v46 += 24;
                --v42;
              }
              while (v42);
              goto LABEL_60;
            }
          }
          else
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            uint64_t v33 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              unint64_t v34 = *(int32x2_t **)(a3 + 8);
              __int32 v35 = v34[1].i32[0];
              v106[0] = -1;
              v106[1] = v35;
              int32x2_t v107 = vrev64_s32(*v34);
              md::debugString<geo::QuadTile>(__p, v106);
              uint64_t v36 = __p;
              if (SBYTE7(v166) < 0) {
                uint64_t v36 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = v36;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = *((float *)&v112 + 2);
              __int16 v132 = 2048;
              v133[0] = v32;
              _os_log_impl(&dword_1A1780000, v33, OS_LOG_TYPE_ERROR, "Skeleton traffic tile %s makes degenerate road geometry reference (start: %f, length: %f)", buf, 0x20u);
              if (SBYTE7(v166) < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }
LABEL_25:
        uint64_t v37 = v109;
        if (v109)
        {
          if (!atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        uint64_t v38 = v110[0];
        if (v110[0]) {
          goto LABEL_28;
        }
LABEL_7:
        if (++v18 == a6) {
          goto LABEL_98;
        }
      }
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      uint64_t v38 = v110[0];
      if (!v110[0]) {
        goto LABEL_7;
      }
LABEL_28:
      v110[1] = v38;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v111 + 40))(v111, v38, v110[2] - v38);
      goto LABEL_7;
    }
  }
LABEL_98:
}

void sub_1A27E33C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x2A0]);
  unint64_t v62 = STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = v62;
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)STACK[0x2C8] + 40))(STACK[0x2C8], v62, STACK[0x2C0] - v62);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  int v9 = (uint64_t *)result;
LABEL_2:
  __n128 v10 = a2 - 1;
  float v11 = v9;
  while (1)
  {
    int v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    unint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v81 = *v11;
          if (*(float *)(*v10 + 8) < *(float *)(*v11 + 8))
          {
            *float v11 = *v10;
            *__n128 v10 = v81;
          }
          return result;
        case 3uLL:
          uint64_t v82 = *v11;
          uint64_t v83 = v11[1];
          float v84 = *(float *)(v83 + 8);
          float v85 = *(float *)(*v11 + 8);
          uint64_t v86 = *v10;
          float v87 = *(float *)(*v10 + 8);
          if (v84 >= v85)
          {
            if (v87 < v84)
            {
              v11[1] = v86;
              *__n128 v10 = v83;
              uint64_t v136 = *v11;
              uint64_t v135 = v11[1];
              if (*(float *)(v135 + 8) < *(float *)(*v11 + 8))
              {
                *float v11 = v135;
                v11[1] = v136;
              }
            }
          }
          else
          {
            if (v87 >= v84)
            {
              *float v11 = v83;
              v11[1] = v82;
              if (*(float *)(*v10 + 8) >= v85) {
                return result;
              }
              v11[1] = *v10;
            }
            else
            {
              *float v11 = v86;
            }
            *__n128 v10 = v82;
          }
          return result;
        case 4uLL:
          uint64_t v88 = v11 + 1;
          uint64_t v89 = (uint64_t *)v11[1];
          uint64_t v90 = v11 + 2;
          uint64_t v91 = v11[2];
          uint64_t v92 = (uint64_t *)*v11;
          float v93 = *((float *)v89 + 2);
          float v94 = *(float *)(*v11 + 8);
          float v95 = *(float *)(v91 + 8);
          if (v93 >= v94)
          {
            if (v95 >= v93) {
              goto LABEL_167;
            }
            uint64_t *v88 = v91;
            *uint64_t v90 = (uint64_t)v89;
            uint64_t v96 = v11;
            uint64_t v97 = (uint64_t **)(v11 + 1);
            float result = (uint64_t)v89;
            if (v95 >= v94) {
              goto LABEL_168;
            }
          }
          else
          {
            uint64_t v96 = v11;
            uint64_t v97 = (uint64_t **)(v11 + 2);
            float result = *v11;
            if (v95 >= v93)
            {
              *float v11 = (uint64_t)v89;
              v11[1] = (uint64_t)v92;
              uint64_t v96 = v11 + 1;
              uint64_t v97 = (uint64_t **)(v11 + 2);
              float result = (uint64_t)v92;
              if (v95 >= v94)
              {
LABEL_167:
                uint64_t v89 = (uint64_t *)v91;
LABEL_168:
                if (*(float *)(*v10 + 8) < *((float *)v89 + 2))
                {
                  *uint64_t v90 = *v10;
                  *__n128 v10 = (uint64_t)v89;
                  uint64_t v140 = *v90;
                  uint64_t v141 = *v88;
                  float v142 = *(float *)(v140 + 8);
                  if (v142 < *(float *)(v141 + 8))
                  {
                    v11[1] = v140;
                    v11[2] = v141;
                    uint64_t v143 = *v11;
                    if (v142 < *(float *)(*v11 + 8))
                    {
                      *float v11 = v140;
                      v11[1] = v143;
                    }
                  }
                }
                return result;
              }
            }
          }
          *uint64_t v96 = v91;
          *uint64_t v97 = v92;
          uint64_t v89 = (uint64_t *)result;
          goto LABEL_168;
        case 5uLL:
          return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,0>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v109 = (v13 - 2) >> 1;
        int64_t v110 = v109;
        do
        {
          if (v109 >= v110)
          {
            uint64_t v112 = (2 * v110) | 1;
            v113 = &v11[v112];
            if (2 * v110 + 2 < (uint64_t)v13 && *(float *)(*v113 + 8) < *(float *)(v113[1] + 8))
            {
              ++v113;
              uint64_t v112 = 2 * v110 + 2;
            }
            int32x2_t v114 = &v11[v110];
            uint64_t v115 = *v113;
            uint64_t v116 = *v114;
            float v117 = *(float *)(*v114 + 8);
            if (*(float *)(*v113 + 8) >= v117)
            {
              do
              {
                double v118 = v113;
                uint64_t *v114 = v115;
                if (v109 < v112) {
                  break;
                }
                uint64_t v119 = 2 * v112;
                uint64_t v112 = (2 * v112) | 1;
                v113 = &v11[v112];
                uint64_t v120 = v119 + 2;
                if (v120 < (uint64_t)v13)
                {
                  float result = *v113;
                  if (*(float *)(*v113 + 8) < *(float *)(v113[1] + 8))
                  {
                    ++v113;
                    uint64_t v112 = v120;
                  }
                }
                uint64_t v115 = *v113;
                int32x2_t v114 = v118;
              }
              while (*(float *)(*v113 + 8) >= v117);
              *double v118 = v116;
            }
          }
          BOOL v111 = v110-- <= 0;
        }
        while (!v111);
        uint64_t v121 = (unint64_t)v12 >> 3;
        do
        {
          uint64_t v122 = 0;
          uint64_t v123 = *v11;
          uint64_t v124 = v11;
          do
          {
            __int16 v125 = v124;
            v124 += v122 + 1;
            uint64_t v126 = 2 * v122;
            uint64_t v122 = (2 * v122) | 1;
            uint64_t v127 = v126 + 2;
            if (v127 < v121 && *(float *)(*v124 + 8) < *(float *)(v124[1] + 8))
            {
              ++v124;
              uint64_t v122 = v127;
            }
            uint64_t *v125 = *v124;
          }
          while (v122 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
          if (v124 == --a2)
          {
            uint64_t *v124 = v123;
          }
          else
          {
            uint64_t *v124 = *a2;
            *a2 = v123;
            uint64_t v128 = (char *)v124 - (char *)v11 + 8;
            if (v128 >= 9)
            {
              unint64_t v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
              uint64_t v130 = &v11[v129];
              uint64_t v131 = *v130;
              uint64_t v132 = *v124;
              float v133 = *(float *)(*v124 + 8);
              if (*(float *)(*v130 + 8) < v133)
              {
                do
                {
                  uint64_t v134 = v130;
                  uint64_t *v124 = v131;
                  if (!v129) {
                    break;
                  }
                  unint64_t v129 = (v129 - 1) >> 1;
                  uint64_t v130 = &v11[v129];
                  uint64_t v131 = *v130;
                  uint64_t v124 = v134;
                }
                while (*(float *)(*v130 + 8) < v133);
                *uint64_t v134 = v132;
              }
            }
          }
          BOOL v111 = v121-- <= 2;
        }
        while (!v111);
      }
      return result;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = &v11[v13 >> 1];
    uint64_t v16 = *v10;
    float v17 = *(float *)(*v10 + 8);
    if ((unint64_t)v12 >= 0x401)
    {
      uint64_t v18 = *v15;
      uint64_t v19 = *v11;
      float v20 = *(float *)(*v15 + 8);
      float v21 = *(float *)(*v11 + 8);
      if (v20 >= v21)
      {
        if (v17 < v20)
        {
          uint64_t *v15 = v16;
          *__n128 v10 = v18;
          uint64_t v26 = *v11;
          if (*(float *)(*v15 + 8) < *(float *)(*v11 + 8))
          {
            *float v11 = *v15;
            uint64_t *v15 = v26;
          }
        }
      }
      else
      {
        if (v17 < v20)
        {
          *float v11 = v16;
          goto LABEL_22;
        }
        *float v11 = v18;
        uint64_t *v15 = v19;
        if (*(float *)(*v10 + 8) < v21)
        {
          uint64_t *v15 = *v10;
LABEL_22:
          *__n128 v10 = v19;
        }
      }
      uint64_t v28 = &v11[v14];
      uint64_t v31 = *(v28 - 1);
      uint64_t v29 = v28 - 1;
      uint64_t v30 = v31;
      uint64_t v32 = v11[1];
      float v33 = *(float *)(v31 + 8);
      float v34 = *(float *)(v32 + 8);
      uint64_t v35 = *(a2 - 2);
      float v36 = *(float *)(v35 + 8);
      if (v33 >= v34)
      {
        if (v36 < v33)
        {
          *uint64_t v29 = v35;
          *(a2 - 2) = v30;
          uint64_t v37 = v11[1];
          if (*(float *)(*v29 + 8) < *(float *)(v37 + 8))
          {
            v11[1] = *v29;
            *uint64_t v29 = v37;
          }
        }
      }
      else
      {
        if (v36 < v33)
        {
          v11[1] = v35;
          goto LABEL_34;
        }
        v11[1] = v30;
        *uint64_t v29 = v32;
        uint64_t v38 = *(a2 - 2);
        if (*(float *)(v38 + 8) < v34)
        {
          *uint64_t v29 = v38;
LABEL_34:
          *(a2 - 2) = v32;
        }
      }
      v39 = &v11[v14];
      uint64_t v42 = v39[1];
      uint64_t v40 = v39 + 1;
      uint64_t v41 = v42;
      uint64_t v43 = v11[2];
      float v44 = *(float *)(v42 + 8);
      float v45 = *(float *)(v43 + 8);
      uint64_t v46 = *(a2 - 3);
      float v47 = *(float *)(v46 + 8);
      if (v44 >= v45)
      {
        if (v47 < v44)
        {
          uint64_t *v40 = v46;
          *(a2 - 3) = v41;
          uint64_t v48 = v11[2];
          if (*(float *)(*v40 + 8) < *(float *)(v48 + 8))
          {
            v11[2] = *v40;
            uint64_t *v40 = v48;
          }
        }
      }
      else
      {
        if (v47 < v44)
        {
          v11[2] = v46;
          goto LABEL_43;
        }
        v11[2] = v41;
        uint64_t *v40 = v43;
        uint64_t v49 = *(a2 - 3);
        if (*(float *)(v49 + 8) < v45)
        {
          uint64_t *v40 = v49;
LABEL_43:
          *(a2 - 3) = v43;
        }
      }
      uint64_t v50 = *v15;
      uint64_t v51 = *v29;
      float v52 = *(float *)(*v15 + 8);
      float v53 = *(float *)(*v29 + 8);
      uint64_t v54 = *v40;
      float v55 = *(float *)(*v40 + 8);
      if (v52 >= v53)
      {
        if (v55 >= v52) {
          goto LABEL_52;
        }
        uint64_t *v15 = v54;
        uint64_t *v40 = v50;
        uint64_t v40 = &v11[v13 >> 1];
        uint64_t v50 = v51;
        if (v55 >= v53)
        {
          uint64_t v50 = v54;
          goto LABEL_52;
        }
      }
      else if (v55 >= v52)
      {
        *uint64_t v29 = v50;
        uint64_t *v15 = v51;
        uint64_t v29 = &v11[v13 >> 1];
        uint64_t v50 = v54;
        if (v55 >= v53)
        {
          uint64_t v50 = v51;
LABEL_52:
          uint64_t v56 = *v11;
          *float v11 = v50;
          uint64_t *v15 = v56;
          goto LABEL_53;
        }
      }
      *uint64_t v29 = v54;
      uint64_t *v40 = v51;
      goto LABEL_52;
    }
    uint64_t v22 = *v11;
    uint64_t v23 = *v15;
    float v24 = *(float *)(*v11 + 8);
    float v25 = *(float *)(*v15 + 8);
    if (v24 >= v25)
    {
      if (v17 < v24)
      {
        *float v11 = v16;
        *__n128 v10 = v22;
        uint64_t v27 = *v15;
        if (*(float *)(*v11 + 8) < *(float *)(*v15 + 8))
        {
          uint64_t *v15 = *v11;
          *float v11 = v27;
        }
      }
      goto LABEL_53;
    }
    if (v17 < v24)
    {
      uint64_t *v15 = v16;
LABEL_31:
      *__n128 v10 = v23;
      goto LABEL_53;
    }
    uint64_t *v15 = v22;
    *float v11 = v23;
    if (*(float *)(*v10 + 8) < v25)
    {
      *float v11 = *v10;
      goto LABEL_31;
    }
LABEL_53:
    --a3;
    uint64_t v57 = *v11;
    if (a4)
    {
      float v58 = *(float *)(v57 + 8);
LABEL_56:
      float v59 = v11;
      do
      {
        uint64_t v60 = v59;
        uint64_t v62 = v59[1];
        ++v59;
        uint64_t v61 = v62;
      }
      while (*(float *)(v62 + 8) < v58);
      uint64_t v63 = a2;
      if (v60 == v11)
      {
        uint64_t v63 = a2;
        do
        {
          if (v59 >= v63) {
            break;
          }
          uint64_t v65 = *--v63;
        }
        while (*(float *)(v65 + 8) >= v58);
      }
      else
      {
        do
          uint64_t v64 = *--v63;
        while (*(float *)(v64 + 8) >= v58);
      }
      if (v59 < v63)
      {
        uint64_t v66 = *v63;
        unsigned int v67 = v59;
        BOOL v68 = v63;
        do
        {
          *unsigned int v67 = v66;
          uint64_t *v68 = v61;
          do
          {
            uint64_t v60 = v67;
            uint64_t v69 = v67[1];
            ++v67;
            uint64_t v61 = v69;
          }
          while (*(float *)(v69 + 8) < v58);
          do
          {
            uint64_t v70 = *--v68;
            uint64_t v66 = v70;
          }
          while (*(float *)(v70 + 8) >= v58);
        }
        while (v67 < v68);
      }
      if (v60 != v11) {
        *float v11 = *v60;
      }
      *uint64_t v60 = v57;
      if (v59 < v63) {
        goto LABEL_75;
      }
      BOOL v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(v11, v60);
      float v11 = v60 + 1;
      float result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_75:
        float result = std::__introsort<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>(v9, v60, a3, a4 & 1);
        a4 = 0;
        float v11 = v60 + 1;
      }
    }
    else
    {
      float v58 = *(float *)(v57 + 8);
      if (*(float *)(*(v11 - 1) + 8) < v58) {
        goto LABEL_56;
      }
      if (v58 < *(float *)(*v10 + 8))
      {
        do
        {
          uint64_t v72 = v11[1];
          ++v11;
        }
        while (v58 >= *(float *)(v72 + 8));
      }
      else
      {
        __int32 v73 = v11 + 1;
        do
        {
          float v11 = v73;
          if (v73 >= a2) {
            break;
          }
          ++v73;
        }
        while (v58 >= *(float *)(*v11 + 8));
      }
      uint64_t v74 = a2;
      if (v11 < a2)
      {
        uint64_t v74 = a2;
        do
          uint64_t v75 = *--v74;
        while (v58 < *(float *)(v75 + 8));
      }
      if (v11 < v74)
      {
        uint64_t v76 = *v11;
        uint64_t v77 = *v74;
        do
        {
          *float v11 = v77;
          *uint64_t v74 = v76;
          do
          {
            uint64_t v78 = v11[1];
            ++v11;
            uint64_t v76 = v78;
          }
          while (v58 >= *(float *)(v78 + 8));
          do
          {
            uint64_t v79 = *--v74;
            uint64_t v77 = v79;
          }
          while (v58 < *(float *)(v79 + 8));
        }
        while (v11 < v74);
      }
      unsigned int v80 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        *int v9 = *v80;
      }
      a4 = 0;
      uint64_t *v80 = v57;
    }
  }
  unint64_t v98 = v11 + 1;
  BOOL v100 = v11 == a2 || v98 == a2;
  if (a4)
  {
    if (!v100)
    {
      uint64_t v101 = 8;
      uint64_t v102 = v11;
      do
      {
        uint64_t v105 = *v102;
        uint64_t v104 = v102[1];
        uint64_t v102 = v98;
        float v106 = *(float *)(v104 + 8);
        if (v106 < *(float *)(v105 + 8))
        {
          uint64_t v107 = v101;
          do
          {
            *(uint64_t *)((char *)v11 + v107) = v105;
            uint64_t v108 = v107 - 8;
            if (v107 == 8)
            {
              int32x2_t v103 = v11;
              goto LABEL_118;
            }
            uint64_t v105 = *(uint64_t *)((char *)v11 + v107 - 16);
            v107 -= 8;
          }
          while (v106 < *(float *)(v105 + 8));
          int32x2_t v103 = (uint64_t *)((char *)v11 + v108);
LABEL_118:
          *int32x2_t v103 = v104;
        }
        unint64_t v98 = v102 + 1;
        v101 += 8;
      }
      while (v102 + 1 != a2);
    }
  }
  else if (!v100)
  {
    do
    {
      uint64_t v138 = *v9;
      uint64_t v137 = v9[1];
      int v9 = v98;
      float v139 = *(float *)(v137 + 8);
      if (v139 < *(float *)(v138 + 8))
      {
        do
        {
          *unint64_t v98 = v138;
          uint64_t v138 = *(v98 - 2);
          --v98;
        }
        while (v139 < *(float *)(v138 + 8));
        *unint64_t v98 = v137;
      }
      unint64_t v98 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 1);
      uint64_t v4 = *a1;
      if (*(float *)(v3 + 8) < *(float *)(*a1 + 8))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      uint64_t v14 = *a1;
      uint64_t v15 = a1[1];
      float v16 = *(float *)(v15 + 8);
      float v17 = *(float *)(*a1 + 8);
      uint64_t v18 = *(a2 - 1);
      float v19 = *(float *)(v18 + 8);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (*(float *)(v40 + 8) < *(float *)(*a1 + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          uint64_t v47 = *(a2 - 1);
          if (*(float *)(v47 + 8) >= v17) {
            return 1;
          }
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      float v20 = a1 + 1;
      uint64_t v21 = a1[1];
      uint64_t v22 = a1 + 2;
      uint64_t v23 = a1[2];
      uint64_t v24 = *a1;
      float v25 = *(float *)(v21 + 8);
      float v26 = *(float *)(*a1 + 8);
      float v27 = *(float *)(v23 + 8);
      if (v25 >= v26)
      {
        if (v27 >= v25) {
          goto LABEL_35;
        }
        uint64_t *v20 = v23;
        *uint64_t v22 = v21;
        uint64_t v28 = a1;
        uint64_t v29 = a1 + 1;
        uint64_t v30 = v21;
        if (v27 >= v26) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v28 = a1;
        uint64_t v29 = a1 + 2;
        uint64_t v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          uint64_t v28 = a1 + 1;
          uint64_t v29 = a1 + 2;
          uint64_t v30 = v24;
          if (v27 >= v26)
          {
LABEL_35:
            uint64_t v21 = v23;
LABEL_36:
            uint64_t v42 = *(a2 - 1);
            if (*(float *)(v42 + 8) < *(float *)(v21 + 8))
            {
              *uint64_t v22 = v42;
              *(a2 - 1) = v21;
              uint64_t v43 = *v22;
              uint64_t v44 = *v20;
              float v45 = *(float *)(v43 + 8);
              if (v45 < *(float *)(v44 + 8))
              {
                a1[1] = v43;
                a1[2] = v44;
                uint64_t v46 = *a1;
                if (v45 < *(float *)(*a1 + 8))
                {
                  *a1 = v43;
                  a1[1] = v46;
                }
              }
            }
            return 1;
          }
        }
      }
      uint64_t *v28 = v23;
      *uint64_t v29 = v24;
      uint64_t v21 = v30;
      goto LABEL_36;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      float v6 = a1 + 2;
      uint64_t v5 = a1[2];
      uint64_t v7 = a1[1];
      uint64_t v8 = *a1;
      float v9 = *(float *)(v7 + 8);
      float v10 = *(float *)(*a1 + 8);
      float v11 = *(float *)(v5 + 8);
      if (v9 < v10)
      {
        uint64_t v12 = a1;
        unint64_t v13 = a1 + 2;
        if (v11 >= v9)
        {
          *a1 = v7;
          a1[1] = v8;
          uint64_t v12 = a1 + 1;
          unint64_t v13 = a1 + 2;
          if (v11 >= v10) {
            goto LABEL_19;
          }
        }
LABEL_18:
        *uint64_t v12 = v5;
        *unint64_t v13 = v8;
        goto LABEL_19;
      }
      if (v11 < v9)
      {
        a1[1] = v5;
        uint64_t *v6 = v7;
        uint64_t v12 = a1;
        unint64_t v13 = a1 + 1;
        if (v11 < v10) {
          goto LABEL_18;
        }
      }
LABEL_19:
      uint64_t v31 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v32 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v35 = *v31;
        uint64_t v36 = *v6;
        float v37 = *(float *)(*v31 + 8);
        if (v37 < *(float *)(v36 + 8))
        {
          uint64_t v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            uint64_t v39 = v38 - 8;
            if (v38 == 8)
            {
              float v34 = a1;
              goto LABEL_22;
            }
            uint64_t v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(float *)(v36 + 8));
          float v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *float v34 = v35;
          if (++v32 == 8) {
            break;
          }
        }
        float v6 = v31++;
        if (v31 == a2) {
          return 1;
        }
      }
      return v31 + 1 == a2;
  }
}

uint64_t md::trafficStyleAttributes(uint64_t *a1, geo::codec::VectorTile *this)
{
  uint64_t v3 = (gss::Allocator *)geo::codec::VectorTile::attributes(this);
  uint64_t v4 = *(void *)v3;
  if (*(void *)v3)
  {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 33);
    if (*(unsigned char *)(v4 + 33))
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(int **)v4;
      uint64_t v8 = v7;
      while (1)
      {
        int v9 = *v8;
        v8 += 2;
        if (v9 == 27) {
          break;
        }
        if (v5 == ++v6) {
          goto LABEL_6;
        }
      }
      uint64_t v12 = LOWORD(v7[2 * v6 + 1]);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      a1[3] = gss::Allocator::instance(v3);
      md::TrafficStyleAttributes((gss::Allocator *)&v37, 0);
      uint64_t v13 = v40;
      uint64_t v14 = v37;
      uint64_t v15 = v38;
      uint64_t v16 = (char *)v38 - (char *)v37;
      if (v38 == v37)
      {
        uint64_t v18 = 0;
        unint64_t v21 = 0;
        float v20 = 0;
        if (v37)
        {
LABEL_19:
          uint64_t v38 = v14;
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v40 + 40))(v40, v14, v39 - (void)v14);
        }
      }
      else
      {
        if (v16 < 0) {
          abort();
        }
        uint64_t v17 = (*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v40 + 16))(v40, (char *)v38 - (char *)v37, 4);
        uint64_t v18 = v17;
        uint64_t v19 = 0;
        do
        {
          if (v17 + v19 * 8) {
            *(void *)(v17 + v19 * 8) = v14[v19];
          }
          ++v19;
        }
        while (&v14[v19] != v15);
        float v20 = (uint64_t *)(v17 + v19 * 8);
        unint64_t v21 = v17 + 8 * (v16 >> 3);
        uint64_t v14 = v37;
        if (v37) {
          goto LABEL_19;
        }
      }
      if ((unint64_t)v20 < v21)
      {
        if (v20) {
          uint64_t *v20 = (v12 << 32) | 0x1B;
        }
        uint64_t v22 = v20 + 1;
        goto LABEL_49;
      }
      uint64_t v23 = ((uint64_t)v20 - v18) >> 3;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61) {
        abort();
      }
      unint64_t v25 = v21 - v18;
      if ((uint64_t)(v21 - v18) >> 2 > v24) {
        unint64_t v24 = (uint64_t)(v21 - v18) >> 2;
      }
      if (v25 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v26 = v24;
      }
      if (v26)
      {
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 8 * v26, 4);
        uint64_t v28 = (uint64_t *)(v27 + 8 * v23);
        if (v27) {
          uint64_t *v28 = (v12 << 32) | 0x1B;
        }
      }
      else
      {
        uint64_t v28 = (uint64_t *)(8 * v23);
      }
      uint64_t v22 = v28 + 1;
      if (v20 != (uint64_t *)v18)
      {
        unint64_t v29 = (unint64_t)v20 - v18 - 8;
        if (v29 < 0x38)
        {
          uint64_t v31 = v20;
        }
        else if ((unint64_t)((char *)v20 - (char *)v28) < 0x20)
        {
          uint64_t v31 = v20;
        }
        else
        {
          uint64_t v30 = (v29 >> 3) + 1;
          uint64_t v31 = &v20[-(v30 & 0x3FFFFFFFFFFFFFFCLL)];
          int v32 = v28 - 2;
          float v33 = v20 - 2;
          uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v35 = *(_OWORD *)v33;
            *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
            *(_OWORD *)int v32 = v35;
            v32 -= 4;
            v33 -= 4;
            v34 -= 4;
          }
          while (v34);
          v28 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v36 = *--v31;
          *--uint64_t v28 = v36;
        }
        while (v31 != (uint64_t *)v18);
      }
LABEL_46:
      if (v18) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 40))(v13, v18, v25);
      }
      uint64_t v18 = (uint64_t)v28;
LABEL_49:
      std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1, v18, v22, ((uint64_t)v22 - v18) >> 3);
      uint64_t result = (uint64_t)gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)a1);
      if (v18)
      {
        float v11 = *(uint64_t (**)(void))(*(void *)v13 + 40);
        return v11();
      }
      return result;
    }
  }
LABEL_6:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = gss::Allocator::instance(v3);
  uint64_t result = md::TrafficStyleAttributes((gss::Allocator *)&v37, 0);
  if (&v37 != (void **)a1) {
    uint64_t result = std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1, (uint64_t)v37, v38, v38 - v37);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    float v11 = *(uint64_t (**)(void))(*(void *)v40 + 40);
    return v11();
  }
  return result;
}

void sub_1A27E454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v14) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 40))(v13, v14, v15 - v14);
  }
  gss::FeatureAttributeSet::~FeatureAttributeSet(v12);
  _Unwind_Resume(a1);
}

void md::TransitDisplayConnectionRibbon::~TransitDisplayConnectionRibbon(md::TransitDisplayConnectionRibbon *this)
{
  *(void *)this = &unk_1EF553D70;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
  JUMPOUT(0x1A6239270);
}

{
  float *v2;
  int v3;

  *(void *)this = &unk_1EF553D70;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
}

uint64_t *std::unique_ptr<md::Ribbons::RibbonSection<md::TransitDisplayConnectionRibbonDescriptor>>::reset[abi:nn180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 56);
    if (v2)
    {
      int v3 = *(void **)(v1 + 64);
      uint64_t v4 = *(void *)(v1 + 56);
      if (v3 != v2)
      {
        do
        {
          uint64_t v6 = (void (***)(void, uint64_t))*--v3;
          uint64_t v5 = v6;
          *int v3 = 0;
          if (v6)
          {
            (**v5)(v5, v4);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v5, 104);
          }
        }
        while (v3 != v2);
        uint64_t v4 = *(void *)(v1 + 56);
      }
      *(void *)(v1 + 64) = v2;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 80) + 40))(*(void *)(v1 + 80), v4, *(void *)(v1 + 72) - v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553AF0;
  uint64_t v2 = *(uint64_t **)(a1 + 376);
  if (v2)
  {
    int v3 = *(uint64_t **)(a1 + 384);
    uint64_t v4 = *(void **)(a1 + 376);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::Ribbons::RibbonSection<md::TransitDisplayConnectionRibbonDescriptor>>::reset[abi:nn180100](--v3);
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 376);
    }
    *(void *)(a1 + 384) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 352);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      uint64_t v7 = v5 + 2;
      uint64_t v8 = v5 + 2;
      int v9 = (void (***)(void))(v5 + 2);
      do
      {
        float v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        uint64_t v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    uint64_t v5 = (void *)*v5;
  }
  while (v5);
  float v11 = *(void ***)(a1 + 352);
  *(void *)(a1 + 360) = v11;
  uint64_t v12 = *v11;
  *float v11 = 0;
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      free(v12);
      uint64_t v12 = v13;
    }
    while (v13);
    float v11 = *(void ***)(a1 + 352);
  }
  free(v11);
  uint64_t v14 = *(void **)(a1 + 328);
  if (v14)
  {
    *(void *)(a1 + 336) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 296);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 304);
    uint64_t v17 = *(void *)(a1 + 296);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 304);
      do
      {
        float v20 = *(void **)(v18 - 24);
        v18 -= 24;
        uint64_t v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 296);
    }
    *(void *)(a1 + 304) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320), v17, *(void *)(a1 + 312) - v17);
  }
  unint64_t v21 = *(void **)(a1 + 272);
  if (v21)
  {
    *(void *)(a1 + 280) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 144) = &off_1EF55A458;
  *(void *)(a1 + 160) = 3131955885;
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::TextDataEntry::~TextDataEntry(md::TextDataEntry *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v4, *((void *)this + 5) - v4);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t std::__split_buffer<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::destroy(i - 56);
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::TextDataStringInfo,geo::StdAllocator<md::TextDataStringInfo,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TextDataStringInfo,geo::StdAllocator<md::TextDataStringInfo,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TextDataString,geo::StdAllocator<md::TextDataString,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FDF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TextDataString,geo::StdAllocator<md::TextDataString,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FDF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::CaptionedIconLabelPart::debugCompositeClassName@<X0>(md::CaptionedIconLabelPart *this@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v100);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"CaptionedIcon", 13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  textDisplayClass: ", 21);
  switch(*((unsigned char *)this + 946))
  {
    case 0:
      uint64_t v3 = 7;
      *((unsigned char *)&v110.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v110, "Default");
      break;
    case 1:
      uint64_t v3 = 8;
      *((unsigned char *)&v110.__r_.__value_.__s + 23) = 8;
      std::string::size_type v4 = 0x6C616E6F6974704FLL;
      goto LABEL_6;
    case 2:
      uint64_t v3 = 8;
      *((unsigned char *)&v110.__r_.__value_.__s + 23) = 8;
      std::string::size_type v4 = 0x6465726975716552;
LABEL_6:
      v110.__r_.__value_.__r.__words[0] = v4;
      v110.__r_.__value_.__s.__data_[8] = 0;
      break;
    case 3:
      uint64_t v3 = 5;
      *((unsigned char *)&v110.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v110, "Never");
      break;
    default:
      uint64_t v3 = 0;
      *((unsigned char *)&v110.__r_.__value_.__s + 23) = 0;
      v110.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)&v110, v3);
  if (*((unsigned char *)this + 732)) {
    uint64_t v5 = " (optional text is hidden)";
  }
  else {
    uint64_t v5 = "";
  }
  if (*((unsigned char *)this + 732)) {
    uint64_t v6 = 26;
  }
  else {
    uint64_t v6 = 0;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)v5, v6);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = v100[0];
  *(_DWORD *)((char *)&v100[1] + *(void *)(v100[0] - 24)) = *(_DWORD *)((unsigned char *)&v100[1]
                                                                          + *(void *)(v100[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v100[2] + *(void *)(v7 - 24)) = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  text collision alpha: ", 25);
  std::ostream::operator<<();
  if (*((unsigned char *)this + 954)) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)" (persisted opt text collided)", 30);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  layout style:", 16);
  gss::to_string((char *)&v110, *((unsigned __int8 *)this + 922));
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v110;
  }
  else {
    uint64_t v8 = (std::string *)v110.__r_.__value_.__r.__words[0];
  }
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v110.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)v8, size);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v110.__r_.__value_.__l.__data_);
    if (!*((unsigned char *)this + 925)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (*((unsigned char *)this + 925))
  {
LABEL_28:
    *(void *)((char *)&v100[2] + *(void *)(v100[0] - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  icon margins[L:", 18);
    float v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)" R:", 3);
    float v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)" T:", 3);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" B:", 3);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" DiagV:", 7);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" DiagH:", 7);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  }
LABEL_29:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  padding:", 11);
  *(void *)((char *)&v100[2] + *(void *)(v100[0] - 24)) = 1;
  std::ostream::operator<<();
  uint64_t v16 = (void *)MEMORY[0x1E4FBA418];
  if (!*((unsigned char *)this + 926)) {
    goto LABEL_233;
  }
  if (*((unsigned char *)this + 927))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  annotation:", 14);
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v110);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v110, (uint64_t)"Layout1:", 8);
    switch(*((unsigned char *)this + 933))
    {
      case 0:
        uint64_t v17 = 7;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 7;
        LODWORD(v109.__r_.__value_.__l.__data_) = 1634100548;
        int v18 = 1953264993;
        goto LABEL_36;
      case 1:
        uint64_t v17 = 8;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 8;
        std::string::size_type v19 = 0x64656C6261736944;
        goto LABEL_40;
      case 2:
        uint64_t v17 = 4;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v109, "Text");
        break;
      case 3:
        uint64_t v17 = 7;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 7;
        LODWORD(v109.__r_.__value_.__l.__data_) = 1885434439;
        int v18 = 1667852400;
LABEL_36:
        *(_DWORD *)((char *)v109.__r_.__value_.__r.__words + 3) = v18;
        v109.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 4:
        uint64_t v17 = 16;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v109, "LabeledImageList");
        break;
      case 5:
        uint64_t v17 = 8;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 8;
        std::string::size_type v19 = 0x73697370696C6C45;
LABEL_40:
        v109.__r_.__value_.__r.__words[0] = v19;
        v109.__r_.__value_.__s.__data_[8] = 0;
        break;
      case 6:
        uint64_t v17 = 15;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&v109, "VenueButtonText");
        break;
      default:
        uint64_t v17 = 0;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
        v109.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v110, (uint64_t)&v109, v17);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v110, (uint64_t)" ImgSrc=", 8);
    switch(*((unsigned char *)this + 935))
    {
      case 0:
        uint64_t v20 = 7;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 7;
        LODWORD(v109.__r_.__value_.__l.__data_) = 1634100548;
        int v21 = 1953264993;
        goto LABEL_48;
      case 1:
        uint64_t v20 = 4;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v109, "None");
        break;
      case 2:
        uint64_t v20 = 7;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 7;
        LODWORD(v109.__r_.__value_.__l.__data_) = 1952539974;
        int v21 = 1701999988;
LABEL_48:
        *(_DWORD *)((char *)v109.__r_.__value_.__r.__words + 3) = v21;
        v109.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 3:
        uint64_t v20 = 9;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&v109, "LabelIcon");
        break;
      case 4:
        uint64_t v20 = 18;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 18;
        strcpy((char *)&v109, "SecondaryLabelIcon");
        break;
      case 5:
        uint64_t v20 = 15;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&v109, "LabelIconSource");
        break;
      case 6:
        uint64_t v20 = 12;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 12;
        strcpy((char *)&v109, "PrimaryChild");
        break;
      case 7:
        uint64_t v20 = 17;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 17;
        strcpy((char *)&v109, "TertiaryLabelIcon");
        break;
      default:
        uint64_t v20 = 0;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
        v109.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v110, (uint64_t)&v109, v20);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v110, (uint64_t)" Layout2:", 9);
    switch(*((unsigned char *)this + 938))
    {
      case 0:
        uint64_t v22 = 7;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 7;
        LODWORD(v109.__r_.__value_.__l.__data_) = 1634100548;
        int v23 = 1953264993;
        goto LABEL_62;
      case 1:
        uint64_t v22 = 8;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 8;
        std::string::size_type v24 = 0x64656C6261736944;
        goto LABEL_66;
      case 2:
        uint64_t v22 = 4;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v109, "Text");
        break;
      case 3:
        uint64_t v22 = 7;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 7;
        LODWORD(v109.__r_.__value_.__l.__data_) = 1885434439;
        int v23 = 1667852400;
LABEL_62:
        *(_DWORD *)((char *)v109.__r_.__value_.__r.__words + 3) = v23;
        v109.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 4:
        uint64_t v22 = 16;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v109, "LabeledImageList");
        break;
      case 5:
        uint64_t v22 = 8;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 8;
        std::string::size_type v24 = 0x73697370696C6C45;
LABEL_66:
        v109.__r_.__value_.__r.__words[0] = v24;
        v109.__r_.__value_.__s.__data_[8] = 0;
        break;
      case 6:
        uint64_t v22 = 15;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&v109, "VenueButtonText");
        break;
      default:
        uint64_t v22 = 0;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
        v109.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v110, (uint64_t)&v109, v22);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v110, (uint64_t)" ImgSrc=", 8);
    switch(*((unsigned char *)this + 940))
    {
      case 0:
        uint64_t v25 = 7;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 7;
        LODWORD(v109.__r_.__value_.__l.__data_) = 1634100548;
        int v26 = 1953264993;
        goto LABEL_74;
      case 1:
        uint64_t v25 = 4;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v109, "None");
        break;
      case 2:
        uint64_t v25 = 7;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 7;
        LODWORD(v109.__r_.__value_.__l.__data_) = 1952539974;
        int v26 = 1701999988;
LABEL_74:
        *(_DWORD *)((char *)v109.__r_.__value_.__r.__words + 3) = v26;
        v109.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 3:
        uint64_t v25 = 9;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&v109, "LabelIcon");
        break;
      case 4:
        uint64_t v25 = 18;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 18;
        strcpy((char *)&v109, "SecondaryLabelIcon");
        break;
      case 5:
        uint64_t v25 = 15;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&v109, "LabelIconSource");
        break;
      case 6:
        uint64_t v25 = 12;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 12;
        strcpy((char *)&v109, "PrimaryChild");
        break;
      case 7:
        uint64_t v25 = 17;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 17;
        strcpy((char *)&v109, "TertiaryLabelIcon");
        break;
      default:
        uint64_t v25 = 0;
        *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
        v109.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v110, (uint64_t)&v109, v25);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v109.__r_.__value_.__l.__data_);
      char v27 = v117;
      if ((v117 & 0x10) == 0) {
        goto LABEL_83;
      }
    }
    else
    {
      char v27 = v117;
      if ((v117 & 0x10) == 0)
      {
LABEL_83:
        if ((v27 & 8) == 0)
        {
          size_t v28 = 0;
          HIBYTE(v99) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_98;
        }
        uint64_t v31 = (const void **)v111;
        unint64_t v30 = v111[2];
LABEL_90:
        int v32 = *v31;
        size_t v28 = v30 - (void)*v31;
        if (v28 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        if (v28 >= 0x17)
        {
          uint64_t v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17) {
            uint64_t v33 = v28 | 7;
          }
          uint64_t v34 = v33 + 1;
          p_dst = (void **)operator new(v33 + 1);
          size_t v98 = v28;
          int64_t v99 = v34 | 0x8000000000000000;
          long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v99) = v30 - *(unsigned char *)v31;
          p_dst = (void **)&__dst;
          if (!v28) {
            goto LABEL_98;
          }
        }
        memmove(p_dst, v32, v28);
LABEL_98:
        *((unsigned char *)p_dst + v28) = 0;
        v110.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
        *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words
                                  + *(void *)(v110.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        v110.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
        if (v115 < 0) {
          operator delete(v114);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A62391A0](&v118);
        if (v99 >= 0) {
          long long v35 = (void **)&__dst;
        }
        else {
          long long v35 = __dst;
        }
        if (v99 >= 0) {
          uint64_t v36 = HIBYTE(v99);
        }
        else {
          uint64_t v36 = v98;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)v35, v36);
        if (SHIBYTE(v99) < 0) {
          operator delete(__dst);
        }
        goto LABEL_108;
      }
    }
    unint64_t v30 = v116;
    if (v116 < v113)
    {
      unint64_t v116 = v113;
      unint64_t v30 = v113;
    }
    uint64_t v31 = (const void **)&v112;
    goto LABEL_90;
  }
LABEL_108:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  [style] placement:(", 22);
  LabelPlacementToShortString(&v110, (unsigned char *)this + 842);
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v37 = &v110;
  }
  else {
    float v37 = (std::string *)v110.__r_.__value_.__r.__words[0];
  }
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v38 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v38 = v110.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)v37, v38);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)")", 1);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)" alternates:[", 13);
  gss::to_string(&v110, *((unsigned __int16 *)this + 425));
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v39 = &v110;
  }
  else {
    uint64_t v39 = (std::string *)v110.__r_.__value_.__r.__words[0];
  }
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = v110.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)v39, v40);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"]", 1);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v110.__r_.__value_.__l.__data_);
    if (!*((unsigned char *)this + 958)) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  if (*((unsigned char *)this + 958)) {
LABEL_126:
  }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"(data placement disabled)", 25);
LABEL_127:
  __int16 v41 = *((unsigned __int8 *)this + 847);
  char v42 = *((unsigned char *)this + 848);
  v95[0] = *((unsigned char *)this + 832);
  v95[1] = v42;
  v95[2] = 0;
  __int16 v96 = v41;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  [placement] resolved:", 24);
  LabelPlacementToShortString(&v110, v95);
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v43 = &v110;
  }
  else {
    uint64_t v43 = (std::string *)v110.__r_.__value_.__r.__words[0];
  }
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = v110.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)v43, v44);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)" default:", 9);
  LabelPlacementToShortString(&v109, (unsigned char *)this + 837);
  uint64_t v16 = (void *)MEMORY[0x1E4FBA418];
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v45 = &v109;
  }
  else {
    float v45 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v46 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v46 = v109.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)v45, v46);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)" snapToDef(can:", 15);
  uint64_t v47 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)" should:", 8);
  uint64_t v48 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)")\n", 2);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v109.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_141;
    }
  }
  else if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_141;
  }
  operator delete(v110.__r_.__value_.__l.__data_);
LABEL_141:
  LOWORD(__dst) = 256;
  size_t v98 = 0;
  if (!(*(unsigned int (**)(md::CaptionedIconLabelPart *, uint64_t, void ***))(*(void *)this + 536))(this, 1, &__dst))goto LABEL_233; {
  memset(&v110, 0, sizeof(v110));
  }
  {
    operator new();
  }
  v111[0] = mdm::Allocator::instance(void)::alloc;
  uint64_t v49 = (unsigned char *)*((void *)this + 100);
  uint64_t v50 = (unsigned char *)*((void *)this + 101);
  if (v49 != v50)
  {
    char v51 = 1;
    float v94 = (unsigned char *)*((void *)this + 101);
    do
    {
      if (v51) {
        goto LABEL_181;
      }
      std::string::size_type v52 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v53 = 22;
      }
      else {
        size_t v53 = (v110.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v52 = v110.__r_.__value_.__l.__size_;
      }
      if (v53 != v52)
      {
        uint64_t v63 = &v110;
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v63 = (std::string *)v110.__r_.__value_.__r.__words[0];
        }
        v63->__r_.__value_.__s.__data_[v52] = 32;
        std::string::size_type v64 = v52 + 1;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          v110.__r_.__value_.__l.__size_ = v64;
        }
        else {
          *((unsigned char *)&v110.__r_.__value_.__s + 23) = v64 & 0x7F;
        }
        uint64_t v65 = (char *)v63 + v64;
        goto LABEL_180;
      }
      if (v53 == 0x7FFFFFFFFFFFFFF6) {
        abort();
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v54 = &v110;
      }
      else {
        uint64_t v54 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      if (v53 + 1 > 2 * v53) {
        unint64_t v55 = v53 + 1;
      }
      else {
        unint64_t v55 = 2 * v53;
      }
      uint64_t v56 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v55 | 7) != 0x17) {
        uint64_t v56 = v55 | 7;
      }
      BOOL v57 = v55 >= 0x17;
      uint64_t v58 = 23;
      if (v57) {
        uint64_t v58 = v56 + 1;
      }
      if (v53 < 0x3FFFFFFFFFFFFFF3) {
        uint64_t v59 = v58;
      }
      else {
        uint64_t v59 = 0x7FFFFFFFFFFFFFF7;
      }
      uint64_t v60 = (unsigned char *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v111[0] + 16))(v111[0], v59, 1);
      std::string::size_type v61 = (std::string::size_type)v60;
      if (v53)
      {
        memmove(v60, v54, v53);
        *(unsigned char *)(v61 + v53) = 32;
        std::string::size_type v62 = v53 + 1;
        if (v62 == 23) {
          goto LABEL_179;
        }
      }
      else
      {
        *uint64_t v60 = 32;
        std::string::size_type v62 = 1;
      }
      (*(void (**)(void, std::string *, std::string::size_type))(*(void *)v111[0] + 40))(v111[0], v54, v62);
LABEL_179:
      v110.__r_.__value_.__l.__size_ = v62;
      v110.__r_.__value_.__r.__words[2] = v59 | 0x8000000000000000;
      v110.__r_.__value_.__r.__words[0] = v61;
      uint64_t v65 = (unsigned char *)(v61 + v62);
LABEL_180:
      *uint64_t v65 = 0;
LABEL_181:
      LabelPlacementToShortString(&v109, v49);
      char v66 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v67 = &v109;
      }
      else {
        unsigned int v67 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v68 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v68 = v109.__r_.__value_.__l.__size_;
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v69 = 22;
      }
      else {
        std::string::size_type v69 = (v110.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v70 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v70 = v110.__r_.__value_.__l.__size_;
      }
      if (v69 - v70 < v68)
      {
        unint64_t v71 = v70 + v68;
        if (0x7FFFFFFFFFFFFFF6 - v69 < v70 + v68 - v69) {
          abort();
        }
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v72 = &v110;
        }
        else {
          uint64_t v72 = (std::string *)v110.__r_.__value_.__r.__words[0];
        }
        uint64_t v73 = 0x7FFFFFFFFFFFFFF7;
        if (v69 < 0x3FFFFFFFFFFFFFF3)
        {
          unint64_t v74 = 2 * v69;
          if (v71 > 2 * v69) {
            unint64_t v74 = v70 + v68;
          }
          uint64_t v75 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v74 | 7) != 0x17) {
            uint64_t v75 = v74 | 7;
          }
          if (v74 >= 0x17) {
            uint64_t v73 = v75 + 1;
          }
          else {
            uint64_t v73 = 23;
          }
        }
        uint64_t v76 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v111[0] + 16))(v111[0], v73, 1);
        std::string::size_type v77 = (std::string::size_type)v76;
        if (v70) {
          memmove(v76, v72, v70);
        }
        memmove((void *)(v77 + v70), v67, v68);
        if (v69 != 22) {
          (*(void (**)(void, std::string *))(*(void *)v111[0] + 40))(v111[0], v72);
        }
        v110.__r_.__value_.__l.__size_ = v70 + v68;
        v110.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
        v110.__r_.__value_.__r.__words[0] = v77;
        uint64_t v78 = (unsigned char *)(v77 + v71);
        uint64_t v50 = v94;
        goto LABEL_219;
      }
      if (v68)
      {
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v79 = &v110;
        }
        else {
          uint64_t v79 = (std::string *)v110.__r_.__value_.__r.__words[0];
        }
        memmove((char *)v79 + v70, v67, v68);
        size_t v80 = v70 + v68;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          v110.__r_.__value_.__l.__size_ = v70 + v68;
        }
        else {
          *((unsigned char *)&v110.__r_.__value_.__s + 23) = v80 & 0x7F;
        }
        uint64_t v78 = (char *)v79 + v80;
LABEL_219:
        *uint64_t v78 = 0;
        char v66 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
      }
      if (v66 < 0) {
        operator delete(v109.__r_.__value_.__l.__data_);
      }
      char v51 = 0;
      v49 += 5;
    }
    while (v49 != v50);
  }
  std::string::size_type v81 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v81 = v110.__r_.__value_.__l.__size_;
  }
  if (v81)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"    alternates:<", 16);
    uint64_t v16 = (void *)MEMORY[0x1E4FBA418];
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v82 = &v110;
    }
    else {
      uint64_t v82 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v83 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v83 = v110.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)v82, v83);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)">\n", 2);
    if ((*((unsigned char *)&v110.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_232;
    }
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBA418];
    if ((*((unsigned char *)&v110.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_232:
    }
      (*(void (**)(void, std::string::size_type, std::string::size_type))(*(void *)v111[0] + 40))(v111[0], v110.__r_.__value_.__r.__words[0], v110.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL);
  }
LABEL_233:
  if ((v107 & 0x10) != 0)
  {
    unint64_t v86 = v106;
    if (v106 < v103)
    {
      unint64_t v106 = v103;
      unint64_t v86 = v103;
    }
    float v87 = (const void **)&v102;
  }
  else
  {
    if ((v107 & 8) == 0)
    {
      size_t v84 = 0;
      float v85 = a2;
      *((unsigned char *)a2 + 23) = 0;
      goto LABEL_249;
    }
    float v87 = (const void **)v101;
    unint64_t v86 = v101[2];
  }
  uint64_t v88 = *v87;
  size_t v84 = v86 - (void)*v87;
  if (v84 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v84 >= 0x17)
  {
    uint64_t v89 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17) {
      uint64_t v89 = v84 | 7;
    }
    uint64_t v90 = v89 + 1;
    float v85 = operator new(v89 + 1);
    a2[1] = v84;
    a2[2] = v90 | 0x8000000000000000;
    *a2 = v85;
  }
  else
  {
    float v85 = a2;
    *((unsigned char *)a2 + 23) = v84;
    if (!v84) {
      goto LABEL_248;
    }
  }
  uint64_t v91 = v85;
  memmove(v85, v88, v84);
  float v85 = v91;
LABEL_248:
  uint64_t v16 = (void *)MEMORY[0x1E4FBA418];
LABEL_249:
  *((unsigned char *)v85 + v84) = 0;
  v100[0] = *v16;
  *(void *)((char *)v100 + *(void *)(v100[0] - 24)) = v16[3];
  v100[1] = MEMORY[0x1E4FBA470] + 16;
  if (v105 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v108);
}

void sub_1A27E62B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

char *gss::to_string(char *result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 0:
      result[23] = 4;
      int v3 = 1701736270;
      goto LABEL_5;
    case 1:
      result[23] = 4;
      int v3 = 1852793673;
      goto LABEL_5;
    case 2:
      result[23] = 4;
      int v3 = 1954047316;
LABEL_5:
      *(_DWORD *)uint64_t result = v3;
      result[4] = 0;
      return result;
    case 3:
      result[23] = 12;
      strcpy(result, "IconWithText");
      return result;
    case 4:
      std::string::size_type v4 = "LabeledImageAnnotation";
      goto LABEL_13;
    case 6:
      uint64_t result = (char *)operator new(0x20uLL);
      *(void *)uint64_t v2 = result;
      *(_OWORD *)(v2 + 8) = xmmword_1A28FD1A0;
      strcpy(result, "TextWithLabeledImageAnnotation");
      return result;
    case 7:
      uint64_t result = (char *)operator new(0x28uLL);
      *(void *)uint64_t v2 = result;
      *(_OWORD *)(v2 + 8) = xmmword_1A28FD710;
      strcpy(result, "IconWithTextAndLabeledImageAnnotation");
      return result;
    case 8:
      result[23] = 14;
      strcpy(result, "TextAnnotation");
      return result;
    case 10:
      std::string::size_type v4 = "TextWithTextAnnotation";
LABEL_13:
      *(_OWORD *)uint64_t result = *(_OWORD *)v4;
      *(void *)(result + 14) = *(void *)(v4 + 14);
      *((_WORD *)result + 11) = 5632;
      return result;
    case 11:
      uint64_t result = (char *)operator new(0x20uLL);
      *(void *)uint64_t v2 = result;
      long long v5 = xmmword_1A28FD1B0;
      uint64_t v6 = "IconWithTextAndAnnotation";
      goto LABEL_17;
    case 16:
      result[23] = 17;
      strcpy(result, "GraphicAnnotation");
      return result;
    case 18:
      uint64_t result = (char *)operator new(0x20uLL);
      *(void *)uint64_t v2 = result;
      long long v5 = xmmword_1A28FD1B0;
      uint64_t v6 = "TextWithGraphicAnnotation";
LABEL_17:
      *(_OWORD *)(v2 + 8) = v5;
      *(_OWORD *)uint64_t result = *(_OWORD *)v6;
      *(_OWORD *)(result + 9) = *(_OWORD *)(v6 + 9);
      result[25] = 0;
      break;
    case 19:
      uint64_t result = (char *)operator new(0x28uLL);
      *(void *)uint64_t v2 = result;
      *(_OWORD *)(v2 + 8) = xmmword_1A28FD520;
      strcpy(result, "IconWithTextAndGraphicAnnotation");
      break;
    default:
      result[23] = 0;
      *uint64_t result = 0;
      break;
  }
  return result;
}

void gss::to_string(std::string *this, int a2)
{
  if (a2)
  {
    if (a2 == 0x8000)
    {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 7;
      strcpy((char *)this, "default");
    }
    else
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
      this->__r_.__value_.__r.__words[2] = 0;
      unsigned int v3 = a2 & 0x1FF;
      if ((a2 & 0x1FF) != 0)
      {
        char v4 = 0;
        do
        {
          if (v3)
          {
            std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
            if ((size & 0x80u) != 0) {
              std::string::size_type size = this->__r_.__value_.__l.__size_;
            }
            if (size) {
              std::string::append(this, ",", 1uLL);
            }
            switch(v4)
            {
              case 0:
                char v11 = 1;
                __int16 v7 = 82;
                goto LABEL_23;
              case 1:
                char v11 = 2;
                __int16 v9 = 21076;
                goto LABEL_25;
              case 2:
                char v11 = 1;
                __int16 v7 = 84;
                goto LABEL_23;
              case 3:
                char v11 = 2;
                __int16 v9 = 19540;
                goto LABEL_25;
              case 4:
                char v11 = 1;
                __int16 v7 = 76;
                goto LABEL_23;
              case 5:
                char v11 = 2;
                __int16 v9 = 19522;
                goto LABEL_25;
              case 6:
                char v11 = 1;
                __int16 v7 = 66;
LABEL_23:
                *(_WORD *)__s = v7;
                std::string::size_type v8 = 1;
                break;
              case 7:
                char v11 = 2;
                __int16 v9 = 21058;
LABEL_25:
                *(_WORD *)__s = v9;
                std::string::size_type v8 = 2;
                __s[2] = 0;
                break;
              case 8:
                char v11 = 1;
                strcpy(__s, "C");
                std::string::size_type v8 = 1;
                break;
              case 9:
                char v11 = 4;
                strcpy(__s, "None");
                std::string::size_type v8 = 4;
                break;
              case 10:
                char v11 = 3;
                strcpy(__s, "Ext");
                std::string::size_type v8 = 3;
                break;
              default:
                std::string::size_type v8 = 0;
                char v11 = 0;
                __s[0] = 0;
                break;
            }
            std::string::append(this, __s, v8);
            if (v11 < 0) {
              operator delete(*(void **)__s);
            }
          }
          ++v4;
          BOOL v5 = v3 > 1;
          v3 >>= 1;
        }
        while (v5);
      }
    }
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 4;
    strcpy((char *)this, "none");
  }
}

void md::CaptionedIconLabelPart::populateDebugNode(md::CaptionedIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  uint64_t v4 = 0x746C7561666544;
  strcpy((char *)v111, "CaptionedIconLabelPart");
  BYTE7(v111[1]) = 22;
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v111);
  uint64_t v6 = (uint64_t)ChildNode;
  int v7 = *((unsigned __int8 *)this + 946);
  BYTE7(v111[1]) = 17;
  strcpy((char *)v111, "Text Display Mode");
  char v8 = 7;
  uint64_t v9 = 0x746C7561666544;
  switch(v7)
  {
    case 0:
      break;
    case 1:
      char v8 = 8;
      uint64_t v9 = 0x6C616E6F6974704FLL;
      break;
    case 2:
      char v8 = 8;
      uint64_t v9 = 0x6465726975716552;
      break;
    case 3:
      char v8 = 5;
      uint64_t v9 = 0x726576654ELL;
      break;
    default:
      uint64_t v9 = 0;
      char v8 = 0;
      break;
  }
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  int v110 = 4;
  uint64_t v107 = v9;
  HIBYTE(v109) = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v111, (uint64_t)v106);
  float v10 = (char *)operator new(0x20uLL);
  *(void *)&v111[0] = v10;
  *(long long *)((char *)v111 + 8) = xmmword_1A28FD1B0;
  strcpy(v10, "Feature Text Display Mode");
  char v11 = 7;
  switch(*((unsigned char *)this + 945))
  {
    case 0:
      break;
    case 1:
      char v11 = 8;
      uint64_t v4 = 0x6C616E6F6974704FLL;
      break;
    case 2:
      char v11 = 8;
      uint64_t v4 = 0x6465726975716552;
      break;
    case 3:
      char v11 = 5;
      uint64_t v4 = 0x726576654ELL;
      break;
    default:
      uint64_t v4 = 0;
      char v11 = 0;
      break;
  }
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  int v105 = 4;
  uint64_t v102 = v4;
  HIBYTE(v104) = v11;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v111, (uint64_t)v101);
  operator delete(v10);
  BYTE7(v111[1]) = 14;
  strcpy((char *)v111, "Hide Text Part");
  uint64_t v12 = *((unsigned __int8 *)this + 732);
  int v100 = 0;
  memset(&v99[4], 0, 24);
  v99[0] = v12;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v111, (uint64_t)v99);
  float v13 = *((float *)this + 237);
  BYTE7(v111[1]) = 20;
  strcpy((char *)v111, "Text Collision Alpha");
  uint64_t v97 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  int v98 = 2;
  double v94 = v13;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v111, (uint64_t)v93);
  int v14 = *((unsigned __int8 *)this + 922);
  BYTE7(v111[1]) = 12;
  strcpy((char *)v111, "Layout Style");
  gss::to_string((char *)&__p, v14);
  memset(&v91, 0, sizeof(v91));
  int v92 = 4;
  int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__assign_no_alias<true>(&v91, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v91 = __p;
  }
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v111, (uint64_t)v90);
  if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  operator delete(v91.__r_.__value_.__l.__data_);
  if (v15 < 0) {
LABEL_16:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_17:
  float v16 = *((float *)this + 42);
  BYTE7(v111[1]) = 7;
  strcpy((char *)v111, "Padding");
  uint64_t v87 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  int v88 = 2;
  double v84 = v16;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v111, (uint64_t)v83);
  if (*((unsigned char *)this + 925))
  {
    BYTE7(v111[1]) = 8;
    strcpy((char *)v111, "IconPart");
    uint64_t v17 = gdc::DebugTreeNode::createChildNode(v6, v111);
    float v18 = *((float *)this + 171);
    BYTE7(v111[1]) = 11;
    strcpy((char *)v111, "Margin Left");
    uint64_t v81 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    int v82 = 2;
    double v78 = v18;
    gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)v111, (uint64_t)v77);
    float v19 = *((float *)this + 172);
    BYTE7(v111[1]) = 12;
    strcpy((char *)v111, "Margin Right");
    uint64_t v75 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    int v76 = 2;
    double v72 = v19;
    gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)v111, (uint64_t)v71);
    float v20 = *((float *)this + 173);
    BYTE7(v111[1]) = 10;
    strcpy((char *)v111, "Margin Top");
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v67 = 0;
    int v70 = 2;
    double v66 = v20;
    gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)v111, (uint64_t)v65);
    float v21 = *((float *)this + 174);
    BYTE7(v111[1]) = 13;
    strcpy((char *)v111, "Margin Bottom");
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v61 = 0;
    int v64 = 2;
    double v60 = v21;
    gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)v111, (uint64_t)v59);
    uint64_t v22 = (char *)operator new(0x20uLL);
    *(void *)&v111[0] = v22;
    *(long long *)((char *)v111 + 8) = xmmword_1A28FD110;
    strcpy(v22, "Margin Diagonal Vertical");
    double v23 = *((float *)this + 175);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    int v58 = 2;
    double v54 = v23;
    gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)v111, (uint64_t)v53);
    operator delete(v22);
    std::string::size_type v24 = (char *)operator new(0x20uLL);
    *(void *)&v111[0] = v24;
    *(long long *)((char *)v111 + 8) = xmmword_1A28FCF30;
    strcpy(v24, "Margin Diagonal Horizontal");
    double v25 = *((float *)this + 176);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v49 = 0;
    int v52 = 2;
    double v48 = v25;
    gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)v111, (uint64_t)v47);
    operator delete(v24);
  }
  if (!*((unsigned char *)this + 926)) {
    goto LABEL_52;
  }
  BYTE7(v111[1]) = 8;
  strcpy((char *)v111, "TextPart");
  int v26 = gdc::DebugTreeNode::createChildNode(v6, v111);
  BYTE7(v111[1]) = 15;
  strcpy((char *)v111, "Label Placement");
  LabelPlacementToShortString(&__p, (unsigned char *)this + 842);
  memset(&v45, 0, sizeof(v45));
  int v46 = 4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__assign_no_alias<true>(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = __p;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v26, (uint64_t)v111, (uint64_t)v44);
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_27:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_28:
  int v27 = *((unsigned __int16 *)this + 425);
  BYTE7(v111[1]) = 18;
  strcpy((char *)v111, "Alternate Position");
  gss::to_string(&__p, v27);
  memset(&v42, 0, sizeof(v42));
  int v43 = 4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__assign_no_alias<true>(&v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v42 = __p;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v26, (uint64_t)v111, (uint64_t)v41);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_35:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_36:
  __int16 v28 = *((unsigned __int8 *)this + 847);
  char v29 = *((unsigned char *)this + 848);
  v39[0] = *((unsigned char *)this + 832);
  v39[1] = v29;
  v39[2] = 0;
  __int16 v40 = v28;
  BYTE7(v111[1]) = 18;
  strcpy((char *)v111, "Resolved Placement");
  LabelPlacementToShortString(&__p, v39);
  memset(&v37, 0, sizeof(v37));
  int v38 = 4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__assign_no_alias<true>(&v37, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v37 = __p;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v26, (uint64_t)v111, (uint64_t)v36);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_43:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  BYTE7(v111[1]) = 17;
  strcpy((char *)v111, "Default Placement");
  LabelPlacementToShortString(&__p, (unsigned char *)this + 837);
  memset(&v34, 0, sizeof(v34));
  int v35 = 4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__assign_no_alias<true>(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = __p;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v26, (uint64_t)v111, (uint64_t)&v33);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_51:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
  unint64_t v30 = (uint64_t *)*((void *)this + 72);
  uint64_t v31 = (uint64_t *)*((void *)this + 73);
  while (v30 != v31)
  {
    uint64_t v32 = *v30++;
    (*(void (**)(uint64_t, gdc::DebugTreeNode *))(*(void *)v32 + 800))(v32, a2);
  }
}

void md::CaptionedIconLabelPart::debugDraw(md::CaptionedIconLabelPart *this, md::DebugConsole *a2)
{
  md::LabelPart::debugDraw(this, a2);
  if (*((unsigned char *)this + 925)) {
    (*(void (**)(void, md::DebugConsole *))(***((void ***)this + 72) + 768))(**((void **)this + 72), a2);
  }
  if (*((unsigned char *)this + 926) && *((unsigned char *)this + 946) != 3)
  {
    uint64_t v4 = *(void (**)(void))(**(void **)(*((void *)this + 72) + 8 * *((unsigned __int8 *)this + 925)) + 768);
    v4();
  }
}

BOOL md::CaptionedIconLabelPart::isTextRequired(md::CaptionedIconLabelPart *this)
{
  return *((unsigned char *)this + 946) == 2;
}

uint64_t md::CaptionedIconLabelPart::isTextVisible(md::CaptionedIconLabelPart *this)
{
  if (*((unsigned char *)this + 926)) {
    return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 72) + 8 * *((unsigned __int8 *)this + 925)) + 744))();
  }
  else {
    return 0;
  }
}

uint64_t md::CaptionedIconLabelPart::populateIconImageInfos(uint64_t result)
{
  if (*(unsigned char *)(result + 925)) {
    return (*(uint64_t (**)(void))(***(void ***)(result + 576) + 728))();
  }
  return result;
}

void md::MultiCollisionObjectPlacementCandidate::~MultiCollisionObjectPlacementCandidate(md::MultiCollisionObjectPlacementCandidate *this)
{
  *(void *)this = &unk_1EF54FC68;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = *((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        free(*(void **)(v3 - 48));
        free(*(void **)(v3 - 40));
        free(*(void **)(v3 - 24));
        v3 -= 208;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v4, *((void *)this + 3) - v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF54FC68;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = *((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        free(*(void **)(v3 - 48));
        free(*(void **)(v3 - 40));
        free(*(void **)(v3 - 24));
        v3 -= 208;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v4, *((void *)this + 3) - v4);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t md::MultiCollisionObjectPlacementCandidate::collidesWithObject(md::MultiCollisionObjectPlacementCandidate *this, const md::CollisionObject *a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v2 != v3)
  {
    uint64_t v5 = *((void *)a2 + 20);
    do
    {
      if (!v5 && !*((void *)a2 + 21) || (*(unsigned char *)(v2 + 200) & *((unsigned char *)a2 + 200)) != 0) {
        goto LABEL_5;
      }
      uint64_t v8 = *(void *)(v2 + 168);
      if (*((void *)a2 + 21))
      {
        if (!v8)
        {
          uint64_t v6 = a2;
          int v7 = (const md::CollisionObject *)v2;
          goto LABEL_4;
        }
        unint64_t v9 = *(unsigned int *)(v2 + 176);
        if (v9)
        {
          uint64_t v10 = 0;
          BOOL v11 = 1;
          while (1)
          {
            uint64_t v12 = (float32x2_t *)(*(void *)(v2 + 184) + 24 * v10);
            float v13 = v12[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
            if (v13 > 0.0)
            {
              uint64_t v14 = *((unsigned int *)a2 + 44);
              if (v14) {
                break;
              }
            }
LABEL_13:
            BOOL v11 = ++v10 < v9;
            if (v10 == v9) {
              goto LABEL_5;
            }
          }
          int v15 = (float32x2_t *)*((void *)a2 + 23);
          while (1)
          {
            float v16 = v15[*(unsigned __int8 *)(v2 + 199) + 1].f32[0];
            if (v16 > 0.0)
            {
              float32x2_t v17 = vsub_f32(*v15, *v12);
              if (vaddv_f32(vmul_f32(v17, v17)) < (float)((float)(v16 + v13) * (float)(v16 + v13))) {
                break;
              }
            }
            v15 += 3;
            if (!--v14) {
              goto LABEL_13;
            }
          }
          if (v11) {
            return 1;
          }
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v6 = (const md::CollisionObject *)v2;
          int v7 = a2;
LABEL_4:
          if (md::CollisionObject::circlesCollideWithRects((uint64_t)v6, (uint64_t)v7)) {
            return 1;
          }
          goto LABEL_5;
        }
        if (*((unsigned char *)a2 + 196) || *(unsigned char *)(v2 + 196))
        {
          if (md::CollisionObject::rectsCollideWithRectsOBB(a2, (const md::CollisionObject *)v2)) {
            return 1;
          }
        }
        else
        {
          unint64_t v18 = *(unsigned int *)(v2 + 176);
          if (v18 && *((_DWORD *)a2 + 44))
          {
            uint64_t v19 = 0;
            uint64_t v20 = 2 * *(unsigned __int8 *)(v2 + 199);
            BOOL v21 = 1;
LABEL_32:
            uint64_t v22 = (float *)(*(void *)(v2 + 184) + 24 * v19);
            double v23 = &v22[2 * *((unsigned __int8 *)a2 + 199)];
            float v25 = v23[2];
            std::string::size_type v24 = v23 + 2;
            float v26 = v25;
            int v27 = (float *)*((void *)a2 + 23);
            uint64_t v28 = *((unsigned int *)a2 + 44);
            while (vabds_f32(*v27, *v22) >= (float)(v26 + v27[v20 + 2])
                 || vabds_f32(v27[1], v22[1]) >= (float)(v24[1] + v27[v20 + 3]))
            {
              v27 += 6;
              if (!--v28)
              {
                BOOL v21 = ++v19 < v18;
                if (v19 == v18) {
                  goto LABEL_5;
                }
                goto LABEL_32;
              }
            }
            if (v21) {
              return 1;
            }
          }
        }
      }
LABEL_5:
      v2 += 208;
    }
    while (v2 != v3);
  }
  return 0;
}

uint64_t md::CaptionedIconLabelPart::populateHoverBounds(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(result + 925)) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(result + 576) + 520))(**(void **)(result + 576), a2);
  }
  if (*(unsigned char *)(v2 + 926) && !*(unsigned char *)(v2 + 732))
  {
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 576) + 8 * *(unsigned __int8 *)(v2 + 925)) + 520);
    return v3();
  }
  return result;
}

uint64_t md::CaptionedIconLabelPart::setPersistedOptionalTextCollided(uint64_t this, char a2)
{
  *(unsigned char *)(this + 954) = a2;
  return this;
}

uint64_t md::CaptionedIconLabelPart::reserveSpaceLabelPart(md::CaptionedIconLabelPart *this, BOOL *a2)
{
  if (!*((unsigned char *)this + 925)) {
    return 0;
  }
  *a2 = *((unsigned char *)this + 926) ^ 1;
  return **((void **)this + 72);
}

BOOL md::CaptionedIconLabelPart::optionalTextHidden(md::CaptionedIconLabelPart *this)
{
  return !*((unsigned char *)this + 926) || *((unsigned char *)this + 953) != 0;
}

float md::CaptionedIconLabelPart::setOptionalTextHidden(md::CaptionedIconLabelPart *this, int a2)
{
  *((unsigned char *)this + 680) = a2;
  *((unsigned char *)this + 953) = a2;
  float result = (float)(a2 ^ 1u);
  *((float *)this + 237) = result;
  return result;
}

uint64_t md::CaptionedIconLabelPart::isVisuallySimilar(md::CaptionedIconLabelPart *this, const md::LabelPart *a2)
{
  uint64_t v2 = *((void *)this + 73);
  uint64_t v3 = *((void *)this + 72);
  if (v2 - v3 == *((void *)a2 + 73) - *((void *)a2 + 72))
  {
    if (v2 == v3)
    {
LABEL_8:
      if (!*((unsigned char *)this + 926)
        || *((unsigned __int8 *)this + 847) == *((unsigned __int8 *)a2 + 847)
        && *((unsigned __int8 *)this + 848) == *((unsigned __int8 *)a2 + 848))
      {
        return 1;
      }
    }
    else
    {
      unint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = *(void *)(v3 + 8 * v6);
        uint64_t v8 = *(void *)(*((void *)a2 + 72) + 8 * v6);
        int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 224))(v7);
        if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)v8 + 224))(v8)) {
          break;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 224))(v7);
        if (!result) {
          return result;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 232))(v7, v8) & 1) == 0) {
          break;
        }
        ++v6;
        uint64_t v3 = *((void *)this + 72);
        if (v6 >= (*((void *)this + 73) - v3) >> 3) {
          goto LABEL_8;
        }
      }
    }
  }
  return 0;
}

uint64_t md::CaptionedIconLabelPart::partType(md::CaptionedIconLabelPart *this)
{
  return 3;
}

uint64_t md::CaptionedIconLabelPart::modelMatrix(md::CaptionedIconLabelPart *this)
{
  return *((void *)this + 111);
}

void md::CaptionedIconLabelPart::generateModelMatrix(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, double *a5, double a6, double a7)
{
  uint64_t v14 = *(void *)(a1 + 16) + 152;
  int v15 = *(unsigned __int8 *)(a1 + 847);
  generateRotationMatrixMeshPositioningMode((double *)&v57, v14, a4, a5, v15, 1, *(unsigned __int8 *)(a1 + 858));
  double v16 = a7 * a6;
  double v17 = v16 * *(double *)(a4 + 320);
  long long v45 = v57;
  long long v48 = v59;
  long long v51 = v61;
  uint64_t v46 = v58;
  uint64_t v49 = v60;
  uint64_t v52 = v62;
  uint64_t v47 = 0;
  uint64_t v50 = 0;
  uint64_t v53 = 0;
  long long v54 = *(_OWORD *)a5;
  uint64_t v55 = *((void *)a5 + 2);
  uint64_t v56 = 0x3FF0000000000000;
  long long v38 = 0u;
  uint64_t v40 = 0;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  uint64_t v44 = 0x3FF0000000000000;
  double v35 = v17;
  *(double *)&long long v38 = v17;
  double v41 = v17;
  gm::operator*<double,4,4,4>((double *)&v27, (double *)&v45, &v35);
  long long v18 = v28;
  *a2 = v27;
  a2[1] = v18;
  long long v19 = v30;
  a2[2] = v29;
  a2[3] = v19;
  long long v20 = v32;
  a2[4] = v31;
  a2[5] = v20;
  long long v21 = v34;
  a2[6] = v33;
  a2[7] = v21;
  if (a3)
  {
    generateRotationMatrixMeshPositioningMode((double *)&v57, v14, a4, a5, v15, 1, *(unsigned __int8 *)(a1 + 859));
    double v22 = v16 * *(double *)(a4 + 320);
    long long v45 = v57;
    long long v48 = v59;
    long long v51 = v61;
    uint64_t v46 = v58;
    uint64_t v49 = v60;
    uint64_t v52 = v62;
    uint64_t v47 = 0;
    uint64_t v50 = 0;
    uint64_t v53 = 0;
    long long v54 = *(_OWORD *)a5;
    uint64_t v55 = *((void *)a5 + 2);
    uint64_t v56 = 0x3FF0000000000000;
    long long v38 = 0u;
    uint64_t v40 = 0;
    long long v43 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v37 = 0u;
    long long v36 = 0u;
    uint64_t v44 = 0x3FF0000000000000;
    double v35 = v22;
    *(double *)&long long v38 = v22;
    double v41 = v22;
    gm::operator*<double,4,4,4>((double *)&v27, (double *)&v45, &v35);
    long long v23 = v28;
    *a3 = v27;
    a3[1] = v23;
    long long v24 = v30;
    a3[2] = v29;
    a3[3] = v24;
    long long v25 = v32;
    a3[4] = v31;
    a3[5] = v25;
    long long v26 = v34;
    a3[6] = v33;
    a3[7] = v26;
  }
}

md::LabelPoint *md::LabelPoint::geocentricPoint(md::LabelPoint *this)
{
  if (!*((unsigned char *)this + 44))
  {
    long double v2 = *((double *)this + 3) * 6.28318531;
    long double v3 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
    double v4 = atan(v3) * 2.0 + -1.57079633;
    long double v5 = fmod(v2, 6.28318531);
    double v6 = fmod(v5 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v7 = __sincos_stret(v4);
    double v8 = 6378137.0 / sqrt(v7.__sinval * v7.__sinval * -0.00669437999 + 1.0);
    __double2 v9 = __sincos_stret(v6);
    *(double *)this = v8 * v7.__cosval * v9.__cosval;
    *((double *)this + 1) = v8 * v7.__cosval * v9.__sinval;
    *((double *)this + 2) = v7.__sinval * 0.99330562 * v8;
    *((unsigned char *)this + 44) = 1;
  }
  return this;
}

uint64_t md::CaptionedIconLabelPart::setInWorldSpace(uint64_t this, BOOL a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v4 = *(unsigned __int8 *)(this + 858);
  int v5 = *(unsigned char *)(this + 858) != 0;
  *(unsigned char *)(this + 565) = v5;
  *(unsigned char *)(this + 566) = a3;
  double v6 = *(uint64_t **)(this + 576);
  __double2 v7 = *(uint64_t **)(this + 584);
  if (v6 != v7)
  {
    do
    {
      uint64_t v9 = *v6++;
      this = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)v9 + 64))(v9, v4 != 0, a3);
    }
    while (v6 != v7);
    int v5 = *(unsigned __int8 *)(v3 + 565);
  }
  if (v5)
  {
    if (*(unsigned char *)(v3 + 566)) {
      operator new();
    }
  }
  return this;
}

void ggl::PolygonAnimatableFill::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::PolygonAnimatableFill::CompressedMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  long double v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  long double v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::textureIsEnabled(ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<ggl::Circle::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Circle::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Circle::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Circle::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Circle::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5871E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5871E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::CircleOverlayRenderable::setSharedResources(void *a1, uint64_t *a2)
{
  a1[7] = a2;
  int v4 = (void *)a1[13];
  uint64_t v6 = *a2;
  int v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6 && **(void **)(v6 + 40) == v4[1])
  {
    uint64_t v8 = v4[2];
    if (v8) {
      BOOL v9 = v8 == v6;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      ggl::PipelineSetup::resetData((uint64_t)v4);
    }
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __double2 v7 = (std::__shared_weak_count *)v4[3];
    v4[2] = v6;
    v4[3] = v5;
    if (!v7) {
      goto LABEL_16;
    }
  }
  else
  {
    __double2 v7 = (std::__shared_weak_count *)v4[3];
    v4[2] = 0;
    v4[3] = 0;
    if (!v7) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
LABEL_16:
  if (!v5) {
    goto LABEL_20;
  }
LABEL_17:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_20:
  uint64_t v10 = (void *)a1[14];
  uint64_t v12 = *a2;
  BOOL v11 = (std::__shared_weak_count *)a2[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12 && **(void **)(v12 + 40) == v10[1])
  {
    uint64_t v14 = v10[2];
    if (v14 && v14 != v12) {
      ggl::PipelineSetup::resetData((uint64_t)v10);
    }
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v13 = (std::__shared_weak_count *)v10[3];
    v10[2] = v12;
    v10[3] = v11;
    if (!v13) {
      goto LABEL_33;
    }
  }
  else
  {
    float v13 = (std::__shared_weak_count *)v10[3];
    v10[2] = 0;
    v10[3] = 0;
    if (!v13) {
      goto LABEL_33;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v11) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
LABEL_33:
  if (!v11) {
    goto LABEL_37;
  }
LABEL_34:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_37:
  int v15 = (void *)a1[15];
  uint64_t v17 = *a2;
  double v16 = (std::__shared_weak_count *)a2[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v17 && **(void **)(v17 + 40) == v15[1])
  {
    uint64_t v19 = v15[2];
    if (v19 && v19 != v17) {
      ggl::PipelineSetup::resetData((uint64_t)v15);
    }
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v18 = (std::__shared_weak_count *)v15[3];
    v15[2] = v17;
    v15[3] = v16;
    if (!v18) {
      goto LABEL_50;
    }
  }
  else
  {
    long long v18 = (std::__shared_weak_count *)v15[3];
    v15[2] = 0;
    v15[3] = 0;
    if (!v18) {
      goto LABEL_50;
    }
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v16) {
      goto LABEL_54;
    }
    goto LABEL_51;
  }
LABEL_50:
  if (!v16) {
    goto LABEL_54;
  }
LABEL_51:
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_54:
  long long v20 = (void *)a1[16];
  uint64_t v22 = *a2;
  long long v21 = (std::__shared_weak_count *)a2[1];
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22 && **(void **)(v22 + 40) == v20[1])
  {
    uint64_t v24 = v20[2];
    if (v24 && v24 != v22) {
      ggl::PipelineSetup::resetData((uint64_t)v20);
    }
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v23 = (std::__shared_weak_count *)v20[3];
    v20[2] = v22;
    void v20[3] = v21;
    if (!v23)
    {
LABEL_67:
      if (!v21) {
        return;
      }
      goto LABEL_68;
    }
  }
  else
  {
    long long v23 = (std::__shared_weak_count *)v20[3];
    v20[2] = 0;
    void v20[3] = 0;
    if (!v23) {
      goto LABEL_67;
    }
  }
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_67;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (!v21) {
    return;
  }
LABEL_68:
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
}

void md::CircleOverlayRenderable::updateWithContext(uint64_t a1, void *a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  int8x8_t v9 = (int8x8_t)a2[1];
  if (!*(void *)&v9) {
    goto LABEL_24;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x1AF456233693CD46;
    if (*(void *)&v9 <= 0x1AF456233693CD46uLL) {
      uint64_t v11 = 0x1AF456233693CD46uLL % *(void *)&v9;
    }
  }
  else
  {
    uint64_t v11 = (*(void *)&v9 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v12 = *(void **)(*a2 + 8 * v11);
  if (!v12) {
    goto LABEL_24;
  }
  float v13 = (void *)*v12;
  if (!v13) {
    goto LABEL_24;
  }
  if (v10.u32[0] < 2uLL)
  {
    uint64_t v14 = *(void *)&v9 - 1;
    while (1)
    {
      uint64_t v16 = v13[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_24;
      }
      float v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v13[1];
    if (v15 == 0x1AF456233693CD46) {
      break;
    }
    if (v15 >= *(void *)&v9) {
      v15 %= *(void *)&v9;
    }
    if (v15 != v11) {
      goto LABEL_24;
    }
LABEL_11:
    float v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_24;
    }
  }
  if (v13[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v17 = v13[5];
  if (*(void *)(v17 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v18 = *(void *)(v17 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v18 = 0;
LABEL_25:
  double v20 = *(double *)a1;
  double v19 = *(double *)(a1 + 8);
  double v22 = *(double *)(a1 + 16);
  double v21 = *(double *)(a1 + 24);
  BOOL v23 = a3 != 0;
  double v24 = (double)a3;
  if (!a3) {
    double v24 = -0.0;
  }
  double v25 = v20 + v24;
  if (a5)
  {
    uint64_t v26 = *(void *)(a1 + 16 * v23 + 144);
    uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 32);
  }
  else
  {
    uint64_t v26 = *(void *)(a1 + 16 * v23 + 136);
    uint64_t v28 = *(void *)(a1 + 56);
    if (*(double *)(v18 + 40) <= 0.0 || a4 == 0) {
      uint64_t v27 = *(void *)(v28 + 16);
    }
    else {
      uint64_t v27 = *(void *)(v28 + 24);
    }
  }
  *(void *)(v26 + 24) = v27;
  uint64_t v89 = 0;
  uint64_t v91 = 0;
  uint64_t v93 = 0;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  double v30 = v22 - v20;
  double v85 = v22 - v20;
  double v88 = v21 - v19;
  double v92 = v22 - v20;
  double v94 = v25;
  double v95 = v19;
  long long v96 = xmmword_1A28FCCC0;
  gm::operator*<double,4,4,4>(v97.f64, (double *)(v18 + 808), &v85);
  float32x2_t v31 = vcvt_f32_f64(v97);
  float32x2_t v32 = vcvt_f32_f64(v98);
  float32x2_t v33 = vcvt_f32_f64(v99);
  float32x2_t v34 = vcvt_f32_f64(v100);
  float32x2_t v35 = vcvt_f32_f64(v101);
  float32x2_t v36 = vcvt_f32_f64(v102);
  float32x2_t v37 = vcvt_f32_f64(v103);
  float32x2_t v38 = vcvt_f32_f64(v104);
  float64_t v39 = *(double *)(a1 + 16 * v23 + 72);
  float64x2_t v97 = 0uLL;
  float64_t v40 = *(double *)(*(void *)&v39 + 8);
  v41.f64[0] = 0.0;
  v41.f64[1] = v39;
  long long v42 = *(float32x2_t **)(*(void *)&v39 + 72);
  float64x2_t v97 = v41;
  v98.f64[0] = 0.0;
  v98.f64[1] = v40;
  *(void *)&v99.f64[1] = v42;
  LOWORD(v99.f64[0]) = 1;
  *long long v42 = v31;
  v42[1] = v32;
  v42[2] = v33;
  v42[3] = v34;
  v42[4] = v35;
  v42[5] = v36;
  v42[6] = v37;
  v42[7] = v38;
  double v43 = *(double *)(v18 + 3768);
  double v44 = *(double *)(v18 + 1368);
  double v45 = *(double *)(v18 + 1384);
  uint64_t v46 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v46 + 44));
  double v84 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(v46 + 20);
  std::string::size_type v83 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(v46 + 28);
  os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 44));
  uint64_t v47 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v47 + 44));
  long long v48 = *(void (__cdecl **)(std::__shared_count *__hidden))(v47 + 4);
  uint64_t v49 = *(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))(v47 + 12);
  os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 44));
  uint64_t v50 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v50 + 44));
  float v51 = *(float *)v50;
  os_unfair_lock_unlock((os_unfair_lock_t)(v50 + 44));
  if (v51 <= 0.0)
  {
    float v52 = fmaxf(*(float *)(v18 + 3080) + *(float *)(v18 + 3072), 1.0);
    float v51 = 21.0;
    if (v52 <= 18.0)
    {
      double v53 = v52;
      float v54 = VKVectorOverlayAutomaticLineWidthForZoomLevel(double)::kLineWidthForZoomLevel[vcvtmd_u64_f64(v53)];
      float v51 = v54
          + (v53 - floor(v53))
          * (float)(VKVectorOverlayAutomaticLineWidthForZoomLevel(double)::kLineWidthForZoomLevel[vcvtpd_u64_f64(v53)]
                  - v54);
    }
  }
  uint64_t v55 = *(os_unfair_lock_s **)(a1 + 32);
  os_unfair_lock_lock(v55 + 11);
  uint32_t os_unfair_lock_opaque = v55[9]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v55 + 11);
  long long v57 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t v58 = v57 + 11;
  os_unfair_lock_lock(v57 + 11);
  uint32_t v59 = v57[10]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v58);
  uint64_t v60 = (std::__shared_weak_count *)operator new(0xE8uLL);
  uint64_t v61 = a5;
  double v62 = v43 * v45 / (v44 * v30);
  float v63 = v43 / (v44 * v30);
  float v64 = v62;
  v60->__shared_owners_ = 0;
  p_unint64_t shared_owners = &v60->__shared_owners_;
  v60->__shared_weak_owners_ = 0;
  v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587218;
  uint64_t v66 = ggl::BufferData::BufferData((uint64_t)&v60[1], qword_1E954CF00, 2, 1, 6, 1);
  v60[9].__shared_owners_ = (uint64_t)ggl::Circle::Style::reflection(void)::reflection;
  v60[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E4D8;
  unint64_t shared_owners = v60[1].__shared_owners_;
  uint64_t v68 = v60[4].__vftable;
  v68->~__shared_weak_count = v84;
  v68->~__shared_weak_count_0 = v83;
  unint64_t shared_weak_owners = v60[3].__shared_weak_owners_;
  if (shared_weak_owners <= shared_owners) {
    unint64_t shared_weak_owners = shared_owners;
  }
  v60[3].__shared_owners_ = 0;
  v68->__on_zero_shared = v48;
  v68->__get_deleter = v49;
  if (shared_weak_owners <= shared_owners) {
    unint64_t shared_weak_owners = shared_owners;
  }
  *(float *)&v68->__on_zero_shared_weak = v63;
  *((float *)&v68->__on_zero_shared_weak + 1) = v64 * (float)(0.5 * v51);
  if (shared_weak_owners <= shared_owners) {
    unint64_t shared_weak_owners = shared_owners;
  }
  v60[3].__shared_weak_owners_ = shared_weak_owners;
  LODWORD(v68[1].~__shared_weak_count) = os_unfair_lock_opaque;
  HIDWORD(v68[1].~__shared_weak_count) = v59;
  if (shared_weak_owners > shared_owners) {
    unint64_t shared_owners = shared_weak_owners;
  }
  v60[3].__shared_weak_owners_ = shared_owners;
  uint64_t v70 = *(void *)(a1 + 16 * v23 + 8 * v61 + 104);
  unint64_t v71 = *(uint64_t **)(v70 + 64);
  *unint64_t v71 = v66;
  v71[1] = 0;
  double v72 = *(uint64_t **)(v70 + 160);
  atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
  uint64_t v73 = (std::__shared_weak_count *)v72[1];
  *double v72 = v66;
  v72[1] = (uint64_t)v60;
  if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  if (a6)
  {
    uint64_t v74 = *(void *)(v70 + 64);
    *(void *)(v74 + 32) = a6;
    *(void *)(v74 + 40) = 0;
    uint64_t v75 = *(void *)(v70 + 160);
    int v76 = *(std::__shared_weak_count **)(v75 + 40);
    *(void *)(v75 + 32) = 0;
    *(void *)(v75 + 40) = 0;
    if (v76)
    {
      if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
  }
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (*(void *)&v99.f64[1])
  {
    float64x2_t v77 = v98;
    if (*(void *)&v98.f64[1] != *(void *)&v98.f64[0])
    {
      float64_t v78 = v97.f64[1];
      int v79 = LOBYTE(v99.f64[0]);
      int v80 = BYTE1(v99.f64[0]);
      if (*(void *)&v97.f64[0] && *(unsigned char *)(*(void *)&v97.f64[1] + 17) != 2) {
        (*(void (**)(void))(**(void **)&v97.f64[0] + 64))();
      }
      if (v79 && !v80)
      {
        unint64_t v82 = *(void *)(*(void *)&v78 + 56);
        unint64_t v81 = *(void *)(*(void *)&v78 + 64);
        if (v81 == v82) {
          unint64_t v82 = *(void *)(*(void *)&v78 + 80) - *(void *)(*(void *)&v78 + 72);
        }
        if (*(void *)&v77.f64[0] < v82) {
          unint64_t v82 = *(void *)&v77.f64[0];
        }
        if (v81 <= *(void *)&v77.f64[1]) {
          unint64_t v81 = *(void *)&v77.f64[1];
        }
        if (v81 == v82) {
          unint64_t v81 = v82 + *(void *)(*(void *)&v78 + 80) - *(void *)(*(void *)&v78 + 72);
        }
        *(void *)(*(void *)&v78 + 56) = v82;
        *(void *)(*(void *)&v78 + 64) = v81;
      }
    }
  }
}

void sub_1A27E9048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void ggl::ConstantDataTyped<ggl::Circle::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Circle::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unint64_t md::CircleOverlayRenderable::collectRenderItems(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = 136;
  if (a3) {
    uint64_t v4 = 144;
  }
  uint64_t v9 = *(void *)(a1 + 16 * (a2 != 0) + v4);
  if (a4) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a4 + 48))(a4, &v9);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return karo::media::C3mmArea::getEntry(v6, v7, v8);
}

unint64_t karo::media::C3mmArea::getEntry(unsigned __int16 *a1, _DWORD *a2, uint64_t a3)
{
  __double2 v7 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  uint64_t v11 = (uint64_t)a1;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 20) = 0;
  unsigned int v12 = *a1;
  uint64_t v183 = (uint64_t)a1;
  if (v12 > 1)
  {
    if (v12 != 2)
    {
      LODWORD(v3) = 0;
      unint64_t v62 = 0;
      goto LABEL_249;
    }
    unsigned int v46 = *a2;
    uint64_t v47 = (unsigned int *)*((void *)a1 + 15);
    long long v48 = (unsigned int *)*((void *)a1 + 16);
    if (v47 == v48)
    {
      unint64_t v113 = (unint64_t *)a2;
      unint64_t v51 = 0;
      unsigned int v114 = 0;
      uint64_t v115 = 0;
      unsigned int v116 = 0;
      if (!v46) {
        goto LABEL_183;
      }
    }
    else
    {
      uint64_t v49 = (unsigned int *)*((void *)a1 + 15);
      while (1)
      {
        unsigned int v50 = v49[2];
        if (v50 >= v46) {
          break;
        }
        v49 += 3;
        if (v49 == v48)
        {
          unsigned int v50 = 0;
          unint64_t v51 = 0;
          goto LABEL_178;
        }
      }
      unint64_t v51 = *(void *)v49;
      do
      {
LABEL_178:
        if (v46 <= v47[2])
        {
          unsigned int v116 = *v47;
          unint64_t v113 = (unint64_t *)a2;
          uint64_t v115 = (a2[1] >> (v46 - *v47));
          unsigned int v114 = a2[2] >> (v46 - *v47);
          if (v46 <= v50) {
            goto LABEL_183;
          }
          goto LABEL_176;
        }
        v47 += 3;
      }
      while (v47 != v48);
      unint64_t v113 = (unint64_t *)a2;
      unsigned int v114 = 0;
      uint64_t v115 = 0;
      unsigned int v116 = -1;
      if (v46 <= v50)
      {
LABEL_183:
        pthread_mutex_lock(*(pthread_mutex_t **)(v183 + 168));
        uint64_t v119 = *(void *)(v183 + 152);
        if (!v119) {
          goto LABEL_197;
        }
        uint64_t v120 = v183 + 152;
        while (1)
        {
          unsigned int v121 = *(_DWORD *)(v119 + 32);
          if (v121 >= v116)
          {
            if (v116 < v121) {
              goto LABEL_189;
            }
            unsigned int v122 = *(_DWORD *)(v119 + 36);
            if (v122 >= v115) {
              break;
            }
          }
          v119 += 8;
LABEL_186:
          uint64_t v119 = *(void *)v119;
          if (!v119)
          {
            if (v120 != v183 + 152)
            {
              unsigned int v123 = *(_DWORD *)(v120 + 32);
              if (v116 >= v123)
              {
                if (v123 < v116
                  || (unsigned int v151 = *(_DWORD *)(v120 + 36), v115 >= v151)
                  && (v151 < v115 || *(_DWORD *)(v120 + 40) <= v114))
                {
                  __int16 v125 = *(void **)(v120 + 48);
                  uint64_t v124 = *(std::__shared_weak_count **)(v120 + 56);
                  v191 = v125;
                  int v192 = v124;
                  if (v124) {
                    atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  pthread_mutex_unlock(*(pthread_mutex_t **)(v183 + 168));
                  if (v125)
                  {
                    if (v125[4] != v125[5])
                    {
                      int v181 = v125;
                      uint64_t v173 = a3;
                      unsigned int v175 = v7;
                      unint64_t v126 = *v113;
                      unint64_t v127 = v113[1];
                      *(void *)unsigned int v187 = 0;
                      std::string __p = 0;
                      long long v189 = 0;
                      double v190 = 0;
                      unint64_t v128 = HIDWORD(v51);
                      if (v126 > HIDWORD(v51))
                      {
                        unint64_t v129 = 0;
                        unint64_t v130 = 0;
                        unint64_t v184 = HIDWORD(v51);
                        while (1)
                        {
                          int v133 = (v126 >> 31) & 2 | v127 & 1 | (v127 >> 30) & 4;
                          if (v130 > 3) {
                            break;
                          }
                          uint64_t v131 = &v187[4 * v130++];
                          *(void *)unsigned int v187 = v130;
                          *((_DWORD *)v131 + 2) = v133;
LABEL_211:
                          unsigned int v132 = v126 - 1;
                          unint64_t v127 = (v127 >> 1) & 0x7FFFFFFF7FFFFFFFLL;
                          unint64_t v126 = (v126 - 1) | (v126 >> 33 << 32);
                          if (v132 <= v128) {
                            goto LABEL_250;
                          }
                        }
                        if (v130 == 4)
                        {
                          *(void *)&long long v185 = &__p;
                          std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v185, *(int *)&v187[8]);
                          std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v185, *(int *)&v187[12]);
                          std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v185, *(int *)&v187[16]);
                          std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v185, *(int *)&v187[20]);
                          unint64_t v129 = v189;
                        }
                        if (v129 < v190)
                        {
                          *(_DWORD *)unint64_t v129 = v133;
                          uint64_t v134 = v129 + 4;
LABEL_238:
                          unint64_t v130 = *(void *)v187 + 1;
                          long long v189 = v134;
                          ++*(void *)v187;
                          unint64_t v129 = v134;
                          LODWORD(v128) = v184;
                          goto LABEL_211;
                        }
                        uint64_t v135 = (char *)__p;
                        int64_t v136 = v129 - (unsigned char *)__p;
                        uint64_t v137 = (v129 - (unsigned char *)__p) >> 2;
                        unint64_t v138 = v137 + 1;
                        if ((unint64_t)(v137 + 1) >> 62) {
                          abort();
                        }
                        uint64_t v139 = v190 - (unsigned char *)__p;
                        if ((v190 - (unsigned char *)__p) >> 1 > v138) {
                          unint64_t v138 = v139 >> 1;
                        }
                        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v140 = v138;
                        }
                        if (v140)
                        {
                          if (v140 >> 62) {
LABEL_278:
                          }
                            std::__throw_bad_array_new_length[abi:nn180100]();
                          uint64_t v141 = operator new(4 * v140);
                        }
                        else
                        {
                          uint64_t v141 = 0;
                        }
                        float v142 = &v141[4 * v137];
                        *(_DWORD *)float v142 = v133;
                        uint64_t v134 = v142 + 4;
                        if (v129 != v135)
                        {
                          unint64_t v143 = v129 - v135 - 4;
                          if (v143 < 0x2C)
                          {
                            uint64_t v144 = v129;
                            goto LABEL_235;
                          }
                          if ((unint64_t)(v129 - v141 - v136) < 0x20)
                          {
                            uint64_t v144 = v129;
                            goto LABEL_235;
                          }
                          uint64_t v145 = (v143 >> 2) + 1;
                          uint64_t v144 = &v129[-4 * (v145 & 0x7FFFFFFFFFFFFFF8)];
                          uint64_t v146 = &v141[4 * v137 - 16];
                          uint64_t v147 = v129 - 16;
                          uint64_t v148 = v145 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            long long v149 = *(_OWORD *)v147;
                            *(v146 - 1) = *((_OWORD *)v147 - 1);
                            *uint64_t v146 = v149;
                            v146 -= 2;
                            v147 -= 32;
                            v148 -= 8;
                          }
                          while (v148);
                          v142 -= 4 * (v145 & 0x7FFFFFFFFFFFFFF8);
                          if (v145 != (v145 & 0x7FFFFFFFFFFFFFF8))
                          {
                            do
                            {
LABEL_235:
                              int v150 = *((_DWORD *)v144 - 1);
                              v144 -= 4;
                              *((_DWORD *)v142 - 1) = v150;
                              v142 -= 4;
                            }
                            while (v144 != v135);
                          }
                        }
                        std::string __p = v142;
                        long long v189 = v134;
                        double v190 = &v141[4 * v140];
                        if (v135) {
                          operator delete(v135);
                        }
                        goto LABEL_238;
                      }
LABEL_250:
                      uint64_t v155 = *v181;
                      uint64_t v154 = v181[1];
                      *(void *)&long long v185 = MEMORY[0x1E4F143A8];
                      *((void *)&v185 + 1) = 3221225472;
                      v186[0] = ___ZNK4karo5media8C3mmArea10getEntryV2ERKNS0_7C3mmKeyERNS0_9C3mmEntryE_block_invoke;
                      v186[1] = &__block_descriptor_48_e36_B16__0r__C3mmRoot__C3mmKey_IIII_Ii_8l;
                      v186[2] = v126;
                      v186[3] = v127;
                      uint64_t v156 = &v185;
                      if (v155 == v154)
                      {
                        uint64_t v157 = v173;
                        __double2 v7 = v175;
                      }
                      else
                      {
                        uint64_t v157 = v173;
                        __double2 v7 = v175;
                        do
                        {
                          if (((uint64_t (*)(long long *, uint64_t))v186[0])(v156, v155)) {
                            goto LABEL_256;
                          }
                          v155 += 24;
                        }
                        while (v155 != v154);
                        uint64_t v155 = v154;
                      }
LABEL_256:

                      if (v155 != v181[1])
                      {
                        uint64_t v158 = v181[4];
                        unsigned int v159 = *(_DWORD *)(v155 + 16);
                        if (*(void *)v187)
                        {
                          uint64_t v160 = 0;
                          unsigned int v161 = 0;
                          while (1)
                          {
                            uint64_t v162 = 4 * (*(void *)v187 + ~v160);
                            uint64_t v163 = (char *)__p + v162;
                            uint64_t v164 = (int *)&v187[v162 + 8];
                            if (*(void *)v187 > 4uLL) {
                              uint64_t v164 = (int *)v163;
                            }
                            int v165 = *v164;
                            unsigned int v166 = *(unsigned __int16 *)(v158 + 16 * v159);
                            if (((v166 >> (2 * v165)) & 1) == 0) {
                              break;
                            }
                            char v167 = 0;
                            unsigned int v168 = 0;
                            if ((v165 + 1) > 1) {
                              int v169 = v165 + 1;
                            }
                            else {
                              int v169 = 1;
                            }
                            do
                            {
                              if ((v166 >> v167))
                              {
                                if (v168) {
                                  unsigned int v159 = *(_DWORD *)(v158 + 16 * v168 + 12);
                                }
                                else {
                                  ++v159;
                                }
                                unsigned int v168 = v159;
                              }
                              v167 += 2;
                              --v169;
                            }
                            while (v169);
                            uint64_t v160 = ++v161;
                            if (*(void *)v187 <= (unint64_t)v161) {
                              goto LABEL_272;
                            }
                          }
                        }
                        else
                        {
LABEL_272:
                          long long v170 = (unsigned __int16 *)(v158 + 16 * v159);
                          *(void *)uint64_t v157 = *(void *)(v170 + 2);
                          LODWORD(v170) = *v170;
                          *(_WORD *)(v157 + 20) = (_WORD)v170;
                          *(_DWORD *)(v157 + 12) = v170 == 0;
                          *(_DWORD *)(v157 + 16) = 0;
                        }
                      }
                      if (__p)
                      {
                        long long v189 = (char *)__p;
                        operator delete(__p);
                      }
                    }
                    unsigned int v117 = 0;
                    uint64_t v118 = 0;
                    if (!v124)
                    {
LABEL_201:
                      unint64_t v62 = v118 & 0xFFFFFFFF00000000;
                      LODWORD(v3) = v117;
                      goto LABEL_249;
                    }
LABEL_199:
                    if (!atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                    goto LABEL_201;
                  }
LABEL_198:
                  uint64_t v118 = v115 << 32;
                  unsigned int v117 = v116;
                  if (!v124) {
                    goto LABEL_201;
                  }
                  goto LABEL_199;
                }
              }
            }
LABEL_197:
            v191 = 0;
            int v192 = 0;
            pthread_mutex_unlock(*(pthread_mutex_t **)(v183 + 168));
            uint64_t v124 = 0;
            goto LABEL_198;
          }
        }
        if (v115 >= v122)
        {
          if (*(_DWORD *)(v119 + 40) < v114) {
            v119 += 8;
          }
          else {
            uint64_t v120 = v119;
          }
          goto LABEL_186;
        }
LABEL_189:
        uint64_t v120 = v119;
        goto LABEL_186;
      }
    }
LABEL_176:
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    goto LABEL_201;
  }
  uint64_t v172 = a3;
  unint64_t v174 = v7;
  unint64_t v13 = *(void *)a2;
  if (*((_DWORD *)a1 + 24) <= *(void *)a2)
  {
    uint64_t v16 = 0;
    unint64_t v15 = 0;
    float v52 = 0;
    uint64_t v14 = a2;
    unint64_t v53 = *((void *)a2 + 1);
    LODWORD(v3) = -1;
    while (1)
    {
      if (v15 < v52)
      {
        *(void *)unint64_t v15 = v13;
        *((void *)v15 + 1) = v53;
        v15 += 16;
      }
      else
      {
        uint64_t v55 = (v15 - v16) >> 4;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 60) {
          abort();
        }
        if ((v52 - v16) >> 3 > v56) {
          unint64_t v56 = (v52 - v16) >> 3;
        }
        if ((unint64_t)(v52 - v16) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57)
        {
          if (v57 >> 60) {
            goto LABEL_278;
          }
          uint64_t v58 = (char *)operator new(16 * v57);
        }
        else
        {
          uint64_t v58 = 0;
        }
        uint32_t v59 = &v58[16 * v55];
        *(void *)uint32_t v59 = v13;
        *((void *)v59 + 1) = v53;
        if (v15 == v16)
        {
          uint64_t v61 = &v58[16 * v55];
        }
        else
        {
          uint64_t v60 = &v58[16 * v55];
          do
          {
            uint64_t v61 = v60 - 16;
            *((_OWORD *)v60 - 1) = *((_OWORD *)v15 - 1);
            v15 -= 16;
            v60 -= 16;
          }
          while (v15 != v16);
        }
        float v52 = &v58[16 * v57];
        unint64_t v15 = v59 + 16;
        if (v16) {
          operator delete(v16);
        }
        uint64_t v16 = v61;
        uint64_t v11 = v183;
      }
      unsigned int v54 = v13 - 1;
      unint64_t v53 = (v53 >> 1) & 0x7FFFFFFF7FFFFFFFLL;
      unint64_t v13 = (v13 - 1) | (v13 >> 33 << 32);
      if (*(_DWORD *)(v11 + 96) > v54) {
        goto LABEL_4;
      }
    }
  }
  uint64_t v14 = a2;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
LABEL_4:
  char v17 = 0;
  *(_OWORD *)unsigned int v187 = 0uLL;
  *(_DWORD *)&v187[16] = 1;
  *(_WORD *)&v187[20] = 0;
  uint64_t v18 = (uint64_t *)(v11 + 24);
  double v19 = v14;
  while (1)
  {
    if (v16 == v15)
    {
      LODWORD(v3) = 0;
      goto LABEL_246;
    }
    unsigned int v20 = *((_DWORD *)v15 - 4);
    uint64_t v21 = *v18;
    if (*v18) {
      break;
    }
LABEL_5:
    v15 -= 16;
  }
  unsigned int v23 = *((_DWORD *)v15 - 3);
  unsigned int v22 = *((_DWORD *)v15 - 2);
  uint64_t v24 = v11 + 24;
  unsigned int v25 = *((_DWORD *)v15 - 1);
  do
  {
    unsigned int v26 = *(_DWORD *)(v21 + 28);
    if (v26 < v20)
    {
LABEL_9:
      v21 += 8;
      goto LABEL_10;
    }
    if (v26 > v20) {
      goto LABEL_13;
    }
    unsigned int v27 = *(_DWORD *)(v21 + 32);
    if (v27 < v23) {
      goto LABEL_9;
    }
    if (v27 > v23) {
      goto LABEL_13;
    }
    unsigned int v28 = *(_DWORD *)(v21 + 36);
    if (v28 < v22) {
      goto LABEL_9;
    }
    if (v28 > v22)
    {
LABEL_13:
      uint64_t v24 = v21;
    }
    else if (*(_DWORD *)(v21 + 40) < v25)
    {
      v21 += 8;
    }
    else
    {
      uint64_t v24 = v21;
    }
LABEL_10:
    uint64_t v21 = *(void *)v21;
  }
  while (v21);
  if ((uint64_t *)v24 == v18) {
    goto LABEL_5;
  }
  long long v29 = (long long *)(v24 + 28);
  unsigned int v30 = *(_DWORD *)(v24 + 28);
  if (v20 < v30) {
    goto LABEL_5;
  }
  if (v20 <= v30)
  {
    unsigned int v38 = *(_DWORD *)(v24 + 32);
    if (v23 < v38) {
      goto LABEL_5;
    }
    if (v23 <= v38)
    {
      unsigned int v39 = *(_DWORD *)(v24 + 36);
      if (v22 < v39 || v22 <= v39 && v25 < *(_DWORD *)(v24 + 40)) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v31 = *(void *)(v24 + 44);
  v186[0] = v31;
  long long v32 = *v29;
  long long v185 = *v29;
  int v182 = HIDWORD(v31);
  uint64_t v33 = *(void *)(v11 + 48);
  unint64_t v34 = (*(void *)(v11 + 56) - v33) >> 2;
  int v35 = -1;
  while (1)
  {
    unint64_t v36 = (v35 + 1);
    if (v34 - 1 <= v36) {
      break;
    }
    unsigned int v37 = *(_DWORD *)(v33 + 4 * (v35 + 2));
    ++v35;
    if (v37 > v31) {
      goto LABEL_36;
    }
  }
  if (v34 <= v36) {
    LODWORD(v36) = 0;
  }
LABEL_36:
  if (karo::media::C3mmArea::getEntryAt(v11, v186, v36, (uint64_t)v187, SHIDWORD(v31), *(double *)&v32, v8, v9, v10))
  {
    if (*v19 == *((_DWORD *)v15 - 4))
    {
      uint64_t v44 = v183;
      if (v19[1] == *((_DWORD *)v15 - 3) && v19[2] == *((_DWORD *)v15 - 2) && *((_DWORD *)v15 - 1) == v19[3])
      {
        double v40 = *(double *)v187;
        *(_OWORD *)uint64_t v172 = *(_OWORD *)v187;
        *(void *)(v172 + 14) = *(void *)&v187[14];
        int v45 = 1;
        LODWORD(v3) = 0;
      }
      else
      {
        char v17 = 1;
        int v45 = 5;
      }
    }
    else
    {
      char v17 = 1;
      int v45 = 5;
      uint64_t v44 = v183;
    }
  }
  else
  {
    int v45 = 1;
    uint64_t v44 = v183;
    LODWORD(v3) = v36;
  }
  if (v45 == 5)
  {
    LODWORD(v3) = 0;
    if ((v17 & 1) != 0 && v16 != v15)
    {
      long long v171 = v19;
      while (1)
      {
        if (!*(_DWORD *)&v187[8])
        {
LABEL_202:
          LODWORD(v3) = 0;
          goto LABEL_246;
        }
        int v63 = *(unsigned __int16 *)&v187[20];
        int v65 = *((_DWORD *)v15 - 2);
        int v64 = *((_DWORD *)v15 - 1);
        int v67 = *((_DWORD *)v15 - 4);
        int v66 = *((_DWORD *)v15 - 3);
        int v68 = *((_DWORD *)v15 - 8);
        int v180 = *((_DWORD *)v15 - 7);
        unsigned int v176 = *((_DWORD *)v15 - 5);
        unsigned int v177 = *((_DWORD *)v15 - 6);
        LODWORD(v185) = *(_DWORD *)&v187[8];
        if (v67 + 1 == v68) {
          break;
        }
        if (v187[20])
        {
          uint64_t v78 = *(void *)(v44 + 48);
          unint64_t v79 = (*(void *)(v44 + 56) - v78) >> 2;
          int v80 = -1;
          while (1)
          {
            unint64_t v3 = (v80 + 1);
            if (v79 - 1 <= v3) {
              break;
            }
            unsigned int v81 = *(_DWORD *)(v78 + 4 * (v80 + 2));
            ++v80;
            if (v81 > *(_DWORD *)&v187[8]) {
              goto LABEL_111;
            }
          }
          if (v79 <= v3) {
            LODWORD(v3) = 0;
          }
LABEL_111:
          if (!karo::media::C3mmArea::getEntryAt(v44, &v185, v3, (uint64_t)v187, v182, v40, v41, v42, v43)) {
            goto LABEL_246;
          }
        }
        else
        {
          LODWORD(v3) = 0;
        }
        LODWORD(v82) = v3;
        if ((v63 & 4) != 0)
        {
          uint64_t v83 = *(void *)(v183 + 48);
          unint64_t v84 = (*(void *)(v183 + 56) - v83) >> 2;
          int v85 = -1;
          while (1)
          {
            unint64_t v82 = (v85 + 1);
            if (v84 - 1 <= v82) {
              break;
            }
            unsigned int v86 = *(_DWORD *)(v83 + 4 * (v85 + 2));
            ++v85;
            if (v86 > v185) {
              goto LABEL_119;
            }
          }
          if (v84 <= v82) {
            LODWORD(v82) = 0;
          }
LABEL_119:
          LODWORD(v3) = v82;
          if (!karo::media::C3mmArea::getEntryAt(v183, &v185, v82, (uint64_t)v187, v182, v40, v41, v42, v43))goto LABEL_246; {
        }
          }
        if ((v63 & 0x10) != 0)
        {
          uint64_t v87 = *(void *)(v183 + 48);
          unint64_t v88 = (*(void *)(v183 + 56) - v87) >> 2;
          int v89 = -1;
          while (1)
          {
            unint64_t v3 = (v89 + 1);
            if (v88 - 1 <= v3) {
              break;
            }
            unsigned int v90 = *(_DWORD *)(v87 + 4 * (v89 + 2));
            ++v89;
            if (v90 > v185) {
              goto LABEL_127;
            }
          }
          if (v88 <= v3) {
            LODWORD(v3) = 0;
          }
LABEL_127:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v183, &v185, v3, (uint64_t)v187, v182, v40, v41, v42, v43))goto LABEL_246; {
        }
          }
        if ((v63 & 0x40) != 0)
        {
          uint64_t v91 = *(void *)(v183 + 48);
          unint64_t v92 = (*(void *)(v183 + 56) - v91) >> 2;
          int v93 = -1;
          while (1)
          {
            unint64_t v3 = (v93 + 1);
            if (v92 - 1 <= v3) {
              break;
            }
            unsigned int v94 = *(_DWORD *)(v91 + 4 * (v93 + 2));
            ++v93;
            if (v94 > v185) {
              goto LABEL_135;
            }
          }
          if (v92 <= v3) {
            LODWORD(v3) = 0;
          }
LABEL_135:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v183, &v185, v3, (uint64_t)v187, v182, v40, v41, v42, v43))goto LABEL_246; {
        }
          }
        if ((v63 & 0x100) != 0)
        {
          uint64_t v95 = *(void *)(v183 + 48);
          unint64_t v96 = (*(void *)(v183 + 56) - v95) >> 2;
          int v97 = -1;
          while (1)
          {
            unint64_t v3 = (v97 + 1);
            if (v96 - 1 <= v3) {
              break;
            }
            unsigned int v98 = *(_DWORD *)(v95 + 4 * (v97 + 2));
            ++v97;
            if (v98 > v185) {
              goto LABEL_143;
            }
          }
          if (v96 <= v3) {
            LODWORD(v3) = 0;
          }
LABEL_143:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v183, &v185, v3, (uint64_t)v187, v182, v40, v41, v42, v43))goto LABEL_246; {
        }
          }
        if ((v63 & 0x400) != 0)
        {
          uint64_t v99 = *(void *)(v183 + 48);
          unint64_t v100 = (*(void *)(v183 + 56) - v99) >> 2;
          int v101 = -1;
          while (1)
          {
            unint64_t v3 = (v101 + 1);
            if (v100 - 1 <= v3) {
              break;
            }
            unsigned int v102 = *(_DWORD *)(v99 + 4 * (v101 + 2));
            ++v101;
            if (v102 > v185) {
              goto LABEL_151;
            }
          }
          if (v100 <= v3) {
            LODWORD(v3) = 0;
          }
LABEL_151:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v183, &v185, v3, (uint64_t)v187, v182, v40, v41, v42, v43))goto LABEL_246; {
        }
          }
        if ((v63 & 0x1000) != 0)
        {
          uint64_t v103 = *(void *)(v183 + 48);
          unint64_t v104 = (*(void *)(v183 + 56) - v103) >> 2;
          int v105 = -1;
          while (1)
          {
            unint64_t v3 = (v105 + 1);
            if (v104 - 1 <= v3) {
              break;
            }
            unsigned int v106 = *(_DWORD *)(v103 + 4 * (v105 + 2));
            ++v105;
            if (v106 > v185) {
              goto LABEL_159;
            }
          }
          if (v104 <= v3) {
            LODWORD(v3) = 0;
          }
LABEL_159:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v183, &v185, v3, (uint64_t)v187, v182, v40, v41, v42, v43))goto LABEL_246; {
        }
          }
        LODWORD(v3) = v82;
        if ((v63 & 0x4000) == 0) {
          goto LABEL_243;
        }
        uint64_t v107 = *(void *)(v183 + 48);
        unint64_t v108 = (*(void *)(v183 + 56) - v107) >> 2;
        int v109 = -1;
        while (1)
        {
          unint64_t v3 = (v109 + 1);
          if (v108 - 1 <= v3) {
            break;
          }
          unsigned int v110 = *(_DWORD *)(v107 + 4 * (v109 + 2));
          ++v109;
          if (v110 > v185) {
            goto LABEL_167;
          }
        }
        if (v108 <= v3) {
          LODWORD(v3) = 0;
        }
LABEL_167:
        if ((karo::media::C3mmArea::getEntryAt(v183, &v185, v3, (uint64_t)v187, v182, v40, v41, v42, v43) & 1) == 0) {
          goto LABEL_246;
        }
LABEL_168:
        uint64_t v44 = v183;
        if (*v19 == v68)
        {
LABEL_169:
          if (v19[1] == v180)
          {
            unsigned int v111 = v19[2];
            if (v111 >= v177 && v177 >= v111)
            {
              unsigned int v112 = v19[3];
              if (v112 >= v176 && v176 >= v112)
              {
                LODWORD(v3) = 0;
                *(_OWORD *)uint64_t v172 = *(_OWORD *)v187;
                *(void *)(v172 + 14) = *(void *)&v187[14];
                goto LABEL_246;
              }
            }
          }
        }
LABEL_80:
        v15 -= 16;
        if (v16 == v15) {
          goto LABEL_202;
        }
      }
      unsigned int v69 = 0;
      LODWORD(v3) = 0;
      int v179 = 2 * v66;
      int v178 = 2 * v65;
      int v70 = 2 * v64;
      do
      {
        int v71 = (1 << (2 * v69)) & v63;
        if (v71)
        {
          unsigned int v72 = v69 & 1 | v178;
          unsigned int v73 = v70 | (v69 >> 2);
          uint64_t v74 = *(void *)(v44 + 48);
          unint64_t v75 = (*(void *)(v44 + 56) - v74) >> 2;
          int v76 = -1;
          while (1)
          {
            unint64_t v3 = (v76 + 1);
            if (v75 - 1 <= v3) {
              break;
            }
            unsigned int v77 = *(_DWORD *)(v74 + 4 * (v76 + 2));
            ++v76;
            if (v77 > v185) {
              goto LABEL_95;
            }
          }
          if (v75 <= v3) {
            LODWORD(v3) = 0;
          }
LABEL_95:
          if (!karo::media::C3mmArea::getEntryAt(v44, &v185, v3, (uint64_t)v187, v182, v40, v41, v42, v43)) {
            goto LABEL_246;
          }
          if (((v69 >> 1) & 1 | v179) == v180)
          {
            uint64_t v44 = v183;
            if (v72 >= v177 && v177 >= v72 && v73 >= v176 && v176 >= v73)
            {
              double v19 = v171;
              if (*v171 != v68) {
                goto LABEL_80;
              }
              goto LABEL_169;
            }
          }
          else
          {
            uint64_t v44 = v183;
          }
        }
        ++v69;
      }
      while (v69 != 8);
      double v19 = v171;
      if (v71) {
        goto LABEL_168;
      }
LABEL_243:
      if (v3 < (unint64_t)((uint64_t)(*(void *)(v183 + 56) - *(void *)(v183 + 48)) >> 2))
      {
        uint64_t v152 = *(void *)(v183 + 72) + 32 * v3;
        if (*(void *)(v152 + 8) != *(void *)(v152 + 16)) {
          LODWORD(v3) = 0;
        }
      }
    }
  }
LABEL_246:
  if (v16) {
    operator delete(v16);
  }
  unint64_t v62 = 0;
  __double2 v7 = v174;
LABEL_249:
  std::mutex::unlock(v7);
  return v62 | v3;
}

void sub_1A27EA284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v30 - 104);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

BOOL ___ZNK4karo5media8C3mmArea10getEntryV2ERKNS0_7C3mmKeyERNS0_9C3mmEntryE_block_invoke(_DWORD *a1, _DWORD *a2)
{
  return *a2 == a1[8] && a2[1] == a1[9] && a2[2] == a1[10] && a1[11] == a2[3];
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100](uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  __double2 v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    float v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + 1;
    if (v12 >> 62) {
      abort();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v15 = operator new(4 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    char v17 = &v15[4 * v14];
    *uint64_t v16 = a2;
    double v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v18 = v6 - v9 - 4;
      if (v18 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      __double2 v7 = &v6[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      unsigned int v20 = &v15[4 * v11 - 16];
      uint64_t v21 = v6 - 16;
      uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v16 -= v19 & 0x7FFFFFFFFFFFFFF8;
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--uint64_t v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v6 = a2;
    double v8 = v6 + 4;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

uint64_t karo::media::C3mmArea::getEntryAt(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, int a5, double a6, double a7, float a8, double a9)
{
  uint64_t v9 = a3;
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = (float *)(v10 + 32 * a3);
  float v13 = *v11;
  unint64_t v12 = (uint64_t *)(v11 + 2);
  float v14 = v13;
  if (v13 <= 0.0) {
    return 0;
  }
  float v15 = *(float *)(v10 + 32 * a3 + 4);
  if (v15 <= 0.0) {
    return 0;
  }
  uint64_t v18 = (*a2 - *(_DWORD *)(*(void *)(a1 + 48) + 4 * a3));
  if (*(_WORD *)a1)
  {
    if (a5 > 1) {
      goto LABEL_43;
    }
    uint64_t v19 = *v12;
    uint64_t v20 = *(void *)(v10 + 32 * a3 + 16);
    if (v19 == v20 || !v19 || (v18 & 0x80000000) != 0) {
      goto LABEL_29;
    }
  }
  else
  {
    if (a5 != 1)
    {
      if (!a5)
      {
        uint64_t v22 = *v12;
        uint64_t v23 = *(void *)(v10 + 32 * a3 + 16);
        if (*v12 == v23 || !v22 || (v18 & 0x80000000) != 0 || (uint64_t v24 = v23 - v22, (int)v18 >= (int)v24))
        {
          uint64_t result = 0;
          LODWORD(v18) = v18 + 8;
          goto LABEL_44;
        }
        unint64_t v25 = v24 - v18;
        if (v24 != v18)
        {
          uint64_t v26 = v22 + v18;
          unsigned int v27 = *(unsigned __int8 *)(v22 + v18);
          *(_DWORD *)(a4 + 12) = v27 & 3;
          if ((v27 & 3) == 3)
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            unsigned int v28 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int v45 = 0;
              _os_log_impl(&dword_1A1780000, v28, OS_LOG_TYPE_ERROR, "Unknown tile state!", v45, 2u);
            }

            uint64_t result = 0;
            goto LABEL_44;
          }
          *(_DWORD *)(a4 + 16) = (v27 >> 2) & 1;
          __int16 v42 = (v27 & 3) != 0 ? 0 : 85;
          *(_WORD *)(a4 + 20) = v42;
          if (v25 < 2)
          {
            float v35 = 0.0;
            unint64_t v43 = 3;
          }
          else
          {
            LOBYTE(a8) = *(unsigned char *)(v26 + 1);
            float v35 = (float)LODWORD(a8);
            unint64_t v43 = 4;
          }
          if (v43 <= v25)
          {
            uint64_t result = 0;
            if (v25 < 2) {
              goto LABEL_44;
            }
            LODWORD(v37) = v43 + 4;
            if (v43 + 4 > v25) {
              goto LABEL_44;
            }
            uint64_t v44 = (_DWORD *)(v26 + v43);
            LOWORD(a9) = *((_WORD *)v44 - 1);
            *(float *)&a9 = (float)vmovl_s16(*(int16x4_t *)&a9).i32[0];
            int v40 = *v44;
            goto LABEL_45;
          }
        }
      }
LABEL_43:
      uint64_t result = 0;
      goto LABEL_44;
    }
    uint64_t v19 = *v12;
    uint64_t v20 = *(void *)(v10 + 32 * a3 + 16);
    if (v19 == v20 || !v19 || (v18 & 0x80000000) != 0) {
      goto LABEL_29;
    }
  }
  uint64_t v29 = v20 - v19;
  if ((int)v18 < (int)v20 - (int)v19)
  {
    uint64_t v30 = (unsigned __int16 *)(v19 + v18);
    unint64_t v31 = v29 - v18;
    if (v31 < 2)
    {
      int v32 = 0;
      uint64_t v33 = 0;
    }
    else
    {
      int v32 = *v30;
      uint64_t v33 = 2;
    }
    unint64_t v34 = v33 | 1;
    float v35 = 0.0;
    if ((v33 | 1uLL) <= v31)
    {
      LOBYTE(v35) = *((unsigned char *)v30 + v33);
      float v35 = (float)LODWORD(v35);
      v33 |= 1uLL;
    }
    uint64_t v36 = v33 + 2;
    if (v33 + 2 <= v31)
    {
      unint64_t v37 = v33 + 6;
      BOOL v38 = v31 < 2 || v34 > v31;
      if (!v38 && v37 <= v31)
      {
        LOWORD(a9) = *(unsigned __int16 *)((char *)v30 + v36 - 2);
        *(float *)&a9 = (float)vmovl_s16(*(int16x4_t *)&a9).i32[0];
        int v40 = *(_DWORD *)((char *)v30 + v37 - 4);
        *(_WORD *)(a4 + 20) = v32;
        *(_DWORD *)(a4 + 12) = v32 == 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_45:
        float v41 = v14 * *(float *)&a9;
        *(float *)a4 = v41;
        *(float *)(a4 + 4) = v41 + (float)(v35 * v15);
        *(_DWORD *)(a4 + 8) = v40;
        LODWORD(v18) = v18 + v37;
        uint64_t result = 1;
        goto LABEL_44;
      }
    }
    goto LABEL_43;
  }
LABEL_29:
  uint64_t result = 0;
  LODWORD(v18) = v18 + 9;
LABEL_44:
  *a2 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v9) + v18;
  return result;
}

uint64_t karo::media::C3mmArea::insertFile(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 168));
  uint64_t v18 = *a2;
  unsigned int v19 = *((_DWORD *)a2 + 2);
  uint64_t v7 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)(a1 + 152);
  double v8 = *(uint64_t **)(a1 + 152);
  if (!v8)
  {
    uint64_t v10 = (uint64_t *)(a1 + 152);
    goto LABEL_15;
  }
  do
  {
    while (1)
    {
      uint64_t v10 = v8;
      unsigned int v11 = *((_DWORD *)v8 + 8);
      if (v18 >= v11)
      {
        if (v11 < v18) {
          goto LABEL_12;
        }
        unsigned int v12 = *((_DWORD *)v10 + 9);
        if (HIDWORD(v18) >= v12)
        {
          if (v12 < HIDWORD(v18)) {
            goto LABEL_12;
          }
          unsigned int v13 = *((_DWORD *)v10 + 10);
          if (v19 >= v13) {
            break;
          }
        }
      }
      double v8 = (uint64_t *)*v10;
      uint64_t v9 = v10;
      if (!*v10) {
        goto LABEL_15;
      }
    }
    if (v13 >= v19) {
      goto LABEL_18;
    }
LABEL_12:
    double v8 = (uint64_t *)v10[1];
  }
  while (v8);
  uint64_t v9 = v10 + 1;
LABEL_15:
  float v14 = operator new(0x40uLL);
  v14[4] = v18;
  *((_DWORD *)v14 + 10) = v19;
  v14[6] = v7;
  v14[7] = v6;
  *float v14 = 0;
  v14[1] = 0;
  v14[2] = v10;
  *uint64_t v9 = v14;
  uint64_t v15 = **(void **)(a1 + 144);
  if (v15)
  {
    *(void *)(a1 + 144) = v15;
    float v14 = (void *)*v9;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v14);
  ++*(void *)(a1 + 160);
  uint64_t v6 = 0;
LABEL_18:
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v16 = *(pthread_mutex_t **)(a1 + 168);
  return pthread_mutex_unlock(v16);
}

void sub_1A27EA910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::MaskingOverlayRenderableConfig::~MaskingOverlayRenderableConfig((md::MaskingOverlayRenderableConfig *)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 168));
  _Unwind_Resume(a1);
}

BOOL karo::media::anonymous namespace'::readMetaLevels(uint64_t *a1, int a2, uint64_t a3)
{
  if (!a2) {
    return *(void *)(a3 + 128) != *(void *)(a3 + 120);
  }
  int v5 = 0;
  int v56 = 0;
  int v6 = 0;
  unint64_t v53 = (unint64_t *)(a3 + 120);
  v7.i64[1] = 0xFFFFFF03FFFFFF02;
  v8.i64[1] = 0;
  while (1)
  {
    unint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    unint64_t v11 = v10 + 1;
    if (v10 + 1 <= v9)
    {
      a1[2] = v11;
      int v56 = *(unsigned __int8 *)(*a1 + v10++);
    }
    unint64_t v12 = v10 + 4;
    if (v10 + 4 <= v9)
    {
      a1[2] = v12;
      int v3 = *(_DWORD *)(*a1 + v10);
      v10 += 4;
    }
    unint64_t v13 = v10 + 1;
    if (v10 + 1 <= v9)
    {
      a1[2] = v13;
      int v6 = *(unsigned __int8 *)(*a1 + v10++);
    }
    uint64_t v14 = v10 + 4;
    if (v10 + 4 > v9) {
      return 0;
    }
    a1[2] = v14;
    BOOL v15 = v11 > v9 || v12 > v9;
    if (v15 || v13 > v9) {
      return 0;
    }
    uint64_t v17 = *a1;
    uint64_t v18 = (char *)(*a1 + v14);
    uint64_t v19 = (v3 - 10);
    if (v6 == 1)
    {
      size_t v20 = *(unsigned int *)(v17 + v10);
      if (v20)
      {
        uint64_t v21 = (char *)operator new(*(unsigned int *)(v17 + v10));
        uint64_t v22 = &v21[v20];
        bzero(v21, v20);
        uint64_t v23 = v21;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v22 = 0;
      }
      if (!lzma_decompress_bytes()) {
        goto LABEL_34;
      }
      if (v22 - v23 != v20)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        unsigned int v27 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A1780000, v27, OS_LOG_TYPE_ERROR, "Mismatching data size. Unable to decode c3mm", buf, 2u);
        }

        goto LABEL_34;
      }
      uint64_t v18 = v23;
    }
    else
    {
      uint64_t v23 = 0;
      size_t v20 = (v3 - 10);
    }
    if (v56 == 4)
    {
      if (!v20) {
        goto LABEL_34;
      }
      unint64_t v24 = *v18;
      uint64_t v25 = *(void *)(a3 + 120);
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 128) - v25) >> 2);
      if (v24 <= v26)
      {
        if (v24 < v26) {
          *(void *)(a3 + 128) = v25 + 12 * *v18;
        }
      }
      else
      {
        std::vector<karo::media::C3mmLevel>::__append((uint64_t)v53, v24 - v26);
      }
      if (v24)
      {
        unint64_t v29 = *v53;
        size_t v30 = v20 >> 1;
        uint64_t v31 = 2;
        if (v20 > 2) {
          uint64_t v31 = v20;
        }
        unint64_t v32 = (unint64_t)(v31 - 1) >> 1;
        if (v30 < v32) {
          unint64_t v32 = v20 >> 1;
        }
        if (v32 >= v24 - 1) {
          unint64_t v32 = v24 - 1;
        }
        if (v32 > 0xF
          && ((uint64_t v33 = v18 + 1, v29 >= (unint64_t)&v18[2 * v32 + 3]) || (unint64_t)v33 >= v29 + 12 * v32 + 12))
        {
          unint64_t v36 = v32 + 1;
          uint64_t v37 = v36 & 7;
          if ((v36 & 7) == 0) {
            uint64_t v37 = 8;
          }
          unint64_t v34 = v36 - v37;
          BOOL v38 = (float *)*v53;
          unint64_t v39 = v34;
          long long v40 = 0u;
          do
          {
            int8x16_t v7 = (int8x16_t)vld2_s8(v33);
            v33 += 16;
            int8x16_t v41 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1A28FD0A0);
            int8x16_t v42 = vqtbl1q_s8(v8, (int8x16_t)xmmword_1A28FD0A0);
            unint64_t v43 = v38 + 24;
            vst3q_f32(v38, *(float32x4x3_t *)(&v40 - 1));
            uint64_t v44 = v38 + 12;
            v58.val[0] = (float32x4_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1A28FD090);
            v58.val[2] = (float32x4_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1A28FD090);
            v58.val[1] = 0u;
            vst3q_f32(v44, v58);
            BOOL v38 = v43;
            v39 -= 8;
          }
          while (v39);
          uint64_t v35 = (2 * v34) | 1;
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v35 = 1;
        }
        int v45 = (_DWORD *)(v29 + 12 * v34 + 8);
        unint64_t v46 = v24 - v34;
        size_t v47 = v30 - v34;
        while (v47)
        {
          uint64_t v48 = v35 + 2;
          if (v35 + 2 > v20) {
            break;
          }
          uint64_t v49 = (unsigned __int8 *)&v18[v35];
          unsigned int v50 = *v49;
          LODWORD(v49) = v49[1];
          *((void *)v45 - 1) = v50;
          *int v45 = v49;
          v45 += 3;
          --v47;
          uint64_t v35 = v48;
          if (!--v46) {
            goto LABEL_61;
          }
        }
LABEL_34:
        char v28 = 0;
        if (!v23) {
          goto LABEL_36;
        }
LABEL_35:
        operator delete(v23);
        goto LABEL_36;
      }
    }
LABEL_61:
    unint64_t v51 = a1[1];
    if (a1[2] + v19 < v51) {
      unint64_t v51 = a1[2] + v19;
    }
    a1[2] = v51;
    char v28 = 1;
    if (v23) {
      goto LABEL_35;
    }
LABEL_36:
    if ((v28 & 1) == 0) {
      return 0;
    }
    if (++v5 == a2) {
      return *(void *)(a3 + 128) != *(void *)(a3 + 120);
    }
  }
}

void sub_1A27EAD04(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL karo::media::anonymous namespace'::readRootIndex(void *a1, uint64_t a2, char ***a3)
{
  unint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > v7)
  {
    int v10 = 0;
  }
  else
  {
    a1[2] = v9;
    int v10 = *(unsigned __int8 *)(*a1 + v8++);
  }
  unint64_t v11 = v8 + 4;
  if (v8 + 4 > v7)
  {
    unint64_t v12 = v8 + 4;
  }
  else
  {
    a1[2] = v11;
    int v3 = *(_DWORD *)(*a1 + v8);
    unint64_t v12 = v8 + 8;
    v8 += 4;
    if (v12 <= v7)
    {
      a1[2] = v12;
      int v4 = *(_DWORD *)(*a1 + v12 - 4);
      unint64_t v8 = v12;
    }
  }
  unint64_t v13 = v8 + 1;
  if (v8 + 1 > v7)
  {
    int v14 = 0;
  }
  else
  {
    a1[2] = v13;
    int v14 = *(unsigned __int8 *)(*a1 + v8++);
  }
  unint64_t v15 = v8 + 2;
  if (v15 > v7) {
    return 0;
  }
  BOOL result = 0;
  a1[2] = v15;
  if (v9 <= v7 && v11 <= v7 && v12 <= v7 && v13 <= v7)
  {
    unint64_t v17 = *(unsigned __int16 *)(*a1 + v15 - 2);
    *(_DWORD *)(a2 + 4) = v10;
    *(_DWORD *)(a2 + 8) = v14;
    uint64_t v18 = *a3;
    uint64_t v19 = **a3;
    size_t v20 = (*a3)[1];
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3);
    unint64_t v22 = v17 - v21;
    if (v17 <= v21)
    {
      if (v17 >= v21)
      {
LABEL_38:
        if (!v17) {
          return 1;
        }
        unint64_t v34 = a1[1];
        uint64_t v35 = a1[2];
        if (v35 + 4 > v34) {
          return 0;
        }
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        do
        {
          a1[2] = v35 + 4;
          unsigned int v38 = *(_DWORD *)(*a1 + v35);
          unint64_t v39 = &(**a3)[v36];
          *(_DWORD *)unint64_t v39 = v10;
          *((_DWORD *)v39 + 1) = v3 + (v38 >> 20);
          *((_DWORD *)v39 + 2) = ((v38 >> 8) & 0xFFF) + v4;
          *((_DWORD *)v39 + 3) = v38;
          *((void *)v39 + 2) = 0x100000000;
          ++v37;
          if (24 * v17 - 24 == v36) {
            break;
          }
          unint64_t v40 = v35 + 8;
          v36 += 24;
          v35 += 4;
        }
        while (v40 <= v34);
        return v37 >= v17;
      }
      uint64_t v33 = &v19[24 * v17];
    }
    else
    {
      uint64_t v23 = v18[2];
      if (0xAAAAAAAAAAAAAAABLL * ((v23 - v20) >> 3) < v22)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v19) >> 3);
        uint64_t v25 = 2 * v24;
        if (2 * v24 <= v17) {
          uint64_t v25 = v17;
        }
        if (v24 >= 0x555555555555555) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unsigned int v27 = (char *)operator new(24 * v26);
        char v28 = &v27[24 * v21];
        unint64_t v29 = &v27[24 * v17];
        size_t v30 = v28;
        do
        {
          *(void *)size_t v30 = 0;
          *((void *)v30 + 1) = 0;
          *((void *)v30 + 2) = 0x200000000;
          v30 += 24;
        }
        while (v30 != v29);
        uint64_t v31 = *v18;
        if (v20 != *v18)
        {
          do
          {
            long long v32 = *(_OWORD *)(v20 - 24);
            *((void *)v28 - 1) = *((void *)v20 - 1);
            *(_OWORD *)(v28 - 24) = v32;
            v28 -= 24;
            v20 -= 24;
          }
          while (v20 != v31);
          size_t v20 = *v18;
        }
        *uint64_t v18 = v28;
        v18[1] = v29;
        v18[2] = &v27[24 * v26];
        if (v20) {
          operator delete(v20);
        }
        goto LABEL_38;
      }
      uint64_t v33 = &v20[24 * v22];
      do
      {
        *(void *)size_t v20 = 0;
        *((void *)v20 + 1) = 0;
        *((void *)v20 + 2) = 0x200000000;
        v20 += 24;
      }
      while (v20 != v33);
    }
    v18[1] = v33;
    goto LABEL_38;
  }
  return result;
}

uint64_t karo::media::anonymous namespace'::readChildInfo(void *a1, uint64_t a2, int ***a3)
{
  unint64_t v3 = a1[2] + 4;
  if (v3 > a1[1]) {
    return 0;
  }
  a1[2] = v3;
  unint64_t v8 = *(unsigned int *)(*a1 + v3 - 4);
  unint64_t v9 = *a3;
  uint64_t v10 = (uint64_t)(*a3)[4];
  unint64_t v11 = (char *)(*a3)[5];
  unint64_t v12 = (uint64_t)&v11[-v10] >> 4;
  unint64_t v13 = v8 - v12;
  if (v8 <= v12)
  {
    if (v8 < v12) {
      v9[5] = (int *)(v10 + 16 * v8);
    }
    if (v8)
    {
LABEL_21:
      unint64_t v23 = a1[1];
      uint64_t v24 = a1[2];
      uint64_t v25 = (_WORD *)v10;
      while (v24 + 2 <= v23)
      {
        a1[2] = v24 + 2;
        *uint64_t v25 = *(_WORD *)(*a1 + v24);
        v25 += 8;
        v24 += 2;
        if (!--v8) {
          goto LABEL_24;
        }
      }
      return 0;
    }
  }
  else
  {
    int v14 = v9[6];
    if (v13 <= ((char *)v14 - v11) >> 4)
    {
      bzero((*a3)[5], 16 * v13);
      v9[5] = (int *)&v11[16 * v13];
    }
    else
    {
      uint64_t v15 = (uint64_t)v14 - v10;
      uint64_t v16 = v15 >> 3;
      if (v15 >> 3 <= v8) {
        uint64_t v16 = v8;
      }
      BOOL v17 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      if (!v17) {
        unint64_t v18 = v16;
      }
      if (v18 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v19 = 16 * v18;
      size_t v20 = (char *)operator new(16 * v18);
      unint64_t v21 = &v20[16 * v12];
      size_t v30 = (int *)&v20[v19];
      bzero(v21, 16 * v13);
      unint64_t v22 = (int *)&v21[16 * v13];
      if (v11 != (char *)v10)
      {
        do
        {
          *((_OWORD *)v21 - 1) = *((_OWORD *)v11 - 1);
          v21 -= 16;
          v11 -= 16;
        }
        while (v11 != (char *)v10);
        unint64_t v11 = (char *)v9[4];
      }
      v9[4] = (int *)v21;
      v9[5] = v22;
      v9[6] = v30;
      if (v11) {
        operator delete(v11);
      }
    }
    unint64_t v9 = *a3;
    uint64_t v10 = (uint64_t)(*a3)[4];
    if (v8) {
      goto LABEL_21;
    }
  }
LABEL_24:
  unint64_t v26 = *v9;
  unsigned int v27 = v9[1];
  if (*v9 != v27)
  {
    uint64_t v28 = 0;
    do
    {
      v26[4] = v28;
      int v29 = *v26;
      v26 += 6;
    }
    while (v26 != v27);
  }
  return 1;
}

uint64_t karo::media::anonymous namespace'::readBounds(void *a1, uint64_t a2, float a3, float a4, float a5, double a6)
{
  unint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 + 4;
  if (v7 + 4 > v6)
  {
    unint64_t v9 = v7 + 4;
  }
  else
  {
    a3 = *(float *)(*a1 + v7);
    a1[2] = v8;
    unint64_t v9 = v7 + 8;
    v7 += 4;
  }
  unint64_t v10 = v9;
  if (v9 <= v6)
  {
    a4 = *(float *)(*a1 + v7);
    a1[2] = v9;
    unint64_t v10 = v9 + 4;
  }
  if (v10 > v6) {
    return 0;
  }
  a1[2] = v10;
  if (v8 > v6 || v9 > v6) {
    return 0;
  }
  uint64_t v13 = *(unsigned int *)(*a1 + v10 - 4);
  *(float *)(a2 + 24) = a3;
  *(float *)(a2 + 28) = a4;
  if (!v13) {
    return 1;
  }
  int v14 = (float *)(*(void *)(a2 + 32) + 8);
  while (v10 + 1 <= v6)
  {
    a1[2] = v10 + 1;
    BOOL v15 = v10 + 3 <= v6;
    if (v10 + 3 > v6) {
      return v15;
    }
    unint64_t v16 = *a1 + v10;
    LOBYTE(a5) = *(unsigned char *)v16;
    a1[2] = v10 + 3;
    LOWORD(a6) = *(_WORD *)(v16 + 1);
    *(void *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
    *(float *)&a6 = a3 * (float)SLODWORD(a6);
    a5 = *(float *)&a6 + (float)(a4 * (float)LODWORD(a5));
    *(v14 - 1) = *(float *)&a6;
    *int v14 = a5;
    v14 += 4;
    v10 += 3;
    if (!--v13) {
      return 1;
    }
  }
  unint64_t v17 = a1[2] + 2;
  if (v17 > v6) {
    return 0;
  }
  BOOL v15 = 0;
  a1[2] = v17;
  return v15;
}

uint64_t karo::media::anonymous namespace'::loadObjectTree(uint64_t *a1, uint64_t a2)
{
  long long v202 = 0u;
  long long v203 = 0u;
  *(_OWORD *)std::string __p = 0u;
  unint64_t v11 = a1[1];
  uint64_t v10 = a1[2];
  if (v11 - v10 < 3)
  {
LABEL_2:
    uint64_t v12 = 1;
    goto LABEL_230;
  }
  long long v193 = (char **)(a2 + 184);
  while (1)
  {
    if (v10 + 1 > v11)
    {
      unint64_t v184 = v10 + 2;
      if (v184 <= v11)
      {
        uint64_t v12 = 0;
        a1[2] = v184;
        goto LABEL_230;
      }
      goto LABEL_229;
    }
    a1[2] = v10 + 1;
    unint64_t v14 = v10 + 3;
    if (v11 < v10 + 3) {
      goto LABEL_229;
    }
    uint64_t v15 = *a1;
    int v16 = *(unsigned __int8 *)(*a1 + v10);
    a1[2] = v14;
    if (v11 - (v10 + 3) < (unint64_t)*(unsigned __int16 *)(v15 + v14 - 2) - 3)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      long long v185 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A1780000, v185, OS_LOG_TYPE_ERROR, "ObjectTree entry is outside specified data section", buf, 2u);
      }

      goto LABEL_229;
    }
    if (v16 == 1) {
      break;
    }
    if (!v16)
    {
      unint64_t v17 = v10 + 11;
      if (v17 <= v11)
      {
        uint64_t v6 = *(void *)(v15 + v14);
        a1[2] = v17;
        unint64_t v14 = v17;
      }
      unint64_t v18 = v14 + 8;
      if (v14 + 8 > v11)
      {
        unint64_t v19 = v14 + 8;
      }
      else
      {
        uint64_t v7 = *(void *)(v15 + v14);
        a1[2] = v18;
        unint64_t v19 = v14 + 16;
        v14 += 8;
        if (v19 <= v11)
        {
          unint64_t v8 = *(std::__shared_weak_count_vtbl **)(v15 + v18);
          a1[2] = v19;
          unint64_t v14 = v19;
        }
      }
      unint64_t v24 = v14 + 4;
      if (v14 + 4 <= v11)
      {
        int v9 = *(_DWORD *)(v15 + v14);
        a1[2] = v24;
        v14 += 4;
      }
      if (v14 + 2 <= v11)
      {
        uint64_t v12 = 0;
        a1[2] = v14 + 2;
        if (v17 > v11 || v18 > v11 || v19 > v11 || v24 > v11) {
          goto LABEL_230;
        }
        int v25 = *(unsigned __int16 *)(v15 + v14);
        unint64_t v26 = (std::__shared_weak_count *)operator new(0x58uLL);
        unsigned int v27 = v26;
        v26->__shared_owners_ = 0;
        v26->__shared_weak_owners_ = 0;
        v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A8C8;
        uint64_t v28 = &v26[1].__vftable;
        v26[2].__shared_owners_ = 0;
        v26[2].__shared_weak_owners_ = 0;
        v26[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF567FE0;
        v26[3].__vftable = 0;
        v26[3].__shared_owners_ = 0;
        uint64_t v199 = &v26[1].__vftable;
        uint64_t v200 = v26;
        v26[1].__shared_owners_ = v6;
        v26[1].__shared_weak_owners_ = v7;
        v26[2].__vftable = v8;
        LODWORD(v26[2].__shared_owners_) = v9;
        if (*((void *)&v203 + 1))
        {
          unint64_t v29 = *((void *)__p[1] + (*((void *)&v203 + 1) + (void)v203 - 1) / 0xAAuLL)
              + 24 * ((*((void *)&v203 + 1) + (void)v203 - 1) % 0xAAuLL);
          --*(_DWORD *)(v29 + 16);
          size_t v30 = (char **)(*(void *)v29 + 40);
          *(void *)buf = v28;
          *(void *)&buf[8] = v27;
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](v30, (uint64_t)buf);
          uint64_t v31 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
            uint64_t v32 = *((void *)&v203 + 1);
            if (*((void *)&v203 + 1)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v32 = *((void *)&v203 + 1);
            if (*((void *)&v203 + 1))
            {
LABEL_34:
              uint64_t v33 = v203;
              unint64_t v34 = __p[1];
              do
              {
                unint64_t v35 = v32 + v33 - 1;
                uint64_t v36 = v34[v35 / 0xAA];
                unint64_t v37 = v35 % 0xAA;
                if (*(_DWORD *)(v36 + 24 * v37 + 16)) {
                  break;
                }
                unsigned int v38 = *(std::__shared_weak_count **)(v36 + 24 * v37 + 8);
                if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
                unint64_t v34 = __p[1];
                uint64_t v39 = v202;
                uint64_t v40 = 170 * ((uint64_t)(v202 - (unint64_t)__p[1]) >> 3) - 1;
                if ((void *)v202 == __p[1]) {
                  uint64_t v40 = 0;
                }
                uint64_t v41 = *((void *)&v203 + 1);
                uint64_t v33 = v203;
                uint64_t v32 = --*((void *)&v203 + 1);
                if ((unint64_t)(v40 - (v41 + v203) + 1) >= 0x154)
                {
                  operator delete(*(void **)(v202 - 8));
                  *(void *)&long long v202 = v39 - 8;
                }
              }
              while (v32);
              unsigned int v27 = v200;
              if (!v200) {
                goto LABEL_4;
              }
            }
          }
LABEL_219:
          if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          goto LABEL_4;
        }
        *(void *)buf = v26 + 1;
        *(void *)&buf[8] = v26;
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](v193, (uint64_t)buf);
        int v191 = v25;
        int v71 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v72 = (char *)v202;
        __src = (char *)__p[1];
        uint64_t v73 = v202 - (unint64_t)__p[1];
        uint64_t v74 = (uint64_t)(v202 - (unint64_t)__p[1]) >> 3;
        __int16 v196 = v191;
        *(void *)buf = v28;
        *(void *)&buf[8] = v27;
        long long v194 = 0;
        long long v195 = 0;
        int v198 = v191;
        if ((void *)v202 == __p[1]) {
          uint64_t v75 = 0;
        }
        else {
          uint64_t v75 = 170 * v74 - 1;
        }
        uint64_t v190 = *((void *)&v203 + 1);
        unint64_t v188 = *((void *)&v203 + 1) + v203;
        if (v75 != *((void *)&v203 + 1) + (void)v203)
        {
          int v87 = v191;
          unint64_t v88 = __p[1];
          uint64_t v89 = *((void *)&v203 + 1);
          unint64_t v90 = *((void *)&v203 + 1) + v203;
LABEL_216:
          unint64_t v182 = v88[v90 / 0xAA] + 24 * (v90 % 0xAA);
          *(_OWORD *)unint64_t v182 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          *(_DWORD *)(v182 + 16) = v87;
          *((void *)&v203 + 1) = v89 + 1;
          uint64_t v183 = v195;
          if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
          goto LABEL_219;
        }
        uint64_t v76 = v203 - 170;
        if ((unint64_t)v203 >= 0xAA)
        {
          *(void *)&long long v203 = v203 - 170;
          unsigned int v77 = (char *)__p[1] + 8;
          uint64_t v78 = *(void *)__p[1];
          __p[1] = (char *)__p[1] + 8;
          if (*((void *)&v202 + 1) != (void)v202)
          {
LABEL_185:
            *(void *)unsigned int v72 = v78;
            *(void *)&long long v202 = v202 + 8;
            uint64_t v89 = v190;
            unint64_t v90 = v190 + v76;
            int v87 = v191;
LABEL_215:
            unint64_t v88 = __p[1];
            goto LABEL_216;
          }
          unint64_t v79 = __p[0];
          if (v77 > __p[0])
          {
            uint64_t v80 = (v77 - (char *)__p[0]) >> 3;
            if (v80 >= -1) {
              uint64_t v81 = v80 + 1;
            }
            else {
              uint64_t v81 = v80 + 2;
            }
            uint64_t v82 = v81 >> 1;
            uint64_t v83 = &v77[-8 * (v81 >> 1)];
            uint64_t v84 = v202 - (void)v77;
            if ((char *)v202 == v77) {
              unsigned int v77 = (char *)v202;
            }
            else {
              memmove(&v77[-8 * (v81 >> 1)], __src + 8, v202 - (void)v77);
            }
            unsigned int v72 = &v83[v84];
            __p[1] = &v77[-8 * v82];
            *(void *)&long long v202 = &v83[v84];
            goto LABEL_185;
          }
          if ((void *)v202 == __p[0]) {
            unint64_t v99 = 1;
          }
          else {
            unint64_t v99 = (uint64_t)(v202 - (unint64_t)__p[0]) >> 2;
          }
          if (!(v99 >> 61))
          {
            unint64_t v100 = operator new(8 * v99);
            unint64_t v101 = v99 >> 2;
            unsigned int v102 = &v100[8 * (v99 >> 2)];
            int64_t v104 = v72 - v77;
            BOOL v103 = v72 == v77;
            unsigned int v72 = v102;
            if (v103) {
              goto LABEL_183;
            }
            unsigned int v72 = &v102[v104 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v105 = v104 - 8;
            if (v105 >= 0x38)
            {
              uint64_t v147 = 8 * v101;
              unint64_t v148 = &v100[8 * v101] - v77;
              unsigned int v106 = &v100[8 * (v99 >> 2)];
              if (v148 >= 0x20)
              {
                uint64_t v149 = (v105 >> 3) + 1;
                uint64_t v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
                unsigned int v106 = &v102[v150];
                unsigned int v151 = (long long *)(__src + 24);
                uint64_t v152 = &v100[v147 + 16];
                uint64_t v153 = v149 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v154 = *v151;
                  *(v152 - 1) = *(v151 - 1);
                  *uint64_t v152 = v154;
                  v151 += 2;
                  v152 += 2;
                  v153 -= 4;
                }
                while (v153);
                if (v149 == (v149 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_183:
                  __p[0] = v100;
                  __p[1] = &v100[8 * (v99 >> 2)];
                  *(void *)&long long v202 = v72;
                  *((void *)&v202 + 1) = &v100[8 * v99];
                  if (v79) {
                    operator delete(v79);
                  }
                  goto LABEL_185;
                }
                v77 += v150;
              }
            }
            else
            {
              unsigned int v106 = &v100[8 * (v99 >> 2)];
            }
            do
            {
              uint64_t v155 = *(void *)v77;
              v77 += 8;
              *(void *)unsigned int v106 = v155;
              v106 += 8;
            }
            while (v106 != v72);
            goto LABEL_183;
          }
LABEL_232:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v91 = (char *)__p[0];
        int64_t v92 = *((void *)&v202 + 1) - (unint64_t)__p[0];
        if (v74 < (unint64_t)((uint64_t)(*((void *)&v202 + 1) - (unint64_t)__p[0]) >> 3))
        {
          if (*((void *)&v202 + 1) != (void)v202)
          {
            *(void *)unsigned int v72 = operator new(0xFF0uLL);
            *(void *)&long long v202 = v202 + 8;
LABEL_214:
            int v87 = v191;
            uint64_t v89 = v190;
            unint64_t v90 = v188;
            goto LABEL_215;
          }
          uint64_t v107 = operator new(0xFF0uLL);
          unint64_t v108 = __src;
          if (v91 != __src)
          {
LABEL_190:
            *((void *)v108 - 1) = v107;
            uint64_t v157 = (char *)__p[1];
            uint64_t v158 = (char *)v202;
            __p[1] = (char *)__p[1] - 8;
            uint64_t v159 = *(void *)__p[1];
            __p[1] = v157;
            if ((void)v202 != *((void *)&v202 + 1))
            {
LABEL_213:
              *(void *)uint64_t v158 = v159;
              *(void *)&long long v202 = v202 + 8;
              goto LABEL_214;
            }
            uint64_t v160 = __p[0];
            if (v157 > __p[0])
            {
              uint64_t v161 = (v157 - (char *)__p[0]) >> 3;
              if (v161 >= -1) {
                uint64_t v162 = v161 + 1;
              }
              else {
                uint64_t v162 = v161 + 2;
              }
              uint64_t v163 = v162 >> 1;
              uint64_t v164 = &v157[-8 * (v162 >> 1)];
              uint64_t v165 = v202 - (void)v157;
              if ((void)v202 != (void)v157)
              {
                memmove(&v157[-8 * (v162 >> 1)], v157, v202 - (void)v157);
                uint64_t v157 = (char *)__p[1];
              }
              uint64_t v158 = &v164[v165];
              __p[1] = &v157[-8 * v163];
              *(void *)&long long v202 = v158;
              goto LABEL_213;
            }
            if ((void *)v202 == __p[0]) {
              unint64_t v166 = 1;
            }
            else {
              unint64_t v166 = (uint64_t)(v202 - (unint64_t)__p[0]) >> 2;
            }
            if (v166 >> 61) {
              goto LABEL_232;
            }
            char v167 = operator new(8 * v166);
            unint64_t v168 = v166 >> 2;
            int v169 = &v167[8 * (v166 >> 2)];
            int64_t v170 = v158 - v157;
            BOOL v103 = v158 == v157;
            uint64_t v158 = v169;
            if (!v103)
            {
              uint64_t v158 = &v169[v170 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v171 = v170 - 8;
              if (v171 < 0x38)
              {
                uint64_t v172 = &v167[8 * (v166 >> 2)];
                goto LABEL_210;
              }
              uint64_t v173 = 8 * v168;
              unint64_t v174 = &v167[8 * v168] - v157;
              uint64_t v172 = &v167[8 * (v166 >> 2)];
              if (v174 < 0x20)
              {
                do
                {
LABEL_210:
                  uint64_t v181 = *(void *)v157;
                  v157 += 8;
                  *(void *)uint64_t v172 = v181;
                  v172 += 8;
                }
                while (v172 != v158);
                goto LABEL_211;
              }
              uint64_t v175 = (v171 >> 3) + 1;
              uint64_t v176 = 8 * (v175 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v172 = &v169[v176];
              unsigned int v177 = (long long *)(v157 + 16);
              int v178 = &v167[v173 + 16];
              uint64_t v179 = v175 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v180 = *v177;
                *(v178 - 1) = *(v177 - 1);
                *int v178 = v180;
                v177 += 2;
                v178 += 2;
                v179 -= 4;
              }
              while (v179);
              if (v175 != (v175 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v157 += v176;
                goto LABEL_210;
              }
            }
LABEL_211:
            __p[0] = v167;
            __p[1] = &v167[8 * (v166 >> 2)];
            *(void *)&long long v202 = v158;
            *((void *)&v202 + 1) = &v167[8 * v166];
            if (v160) {
              operator delete(v160);
            }
            goto LABEL_213;
          }
          if (v72 == __src) {
            unint64_t v109 = 1;
          }
          else {
            unint64_t v109 = v92 >> 2;
          }
          if (v109 >> 61) {
            goto LABEL_232;
          }
          unsigned int v110 = (char *)operator new(8 * v109);
          unint64_t v111 = (v109 + 3) >> 2;
          unint64_t v108 = &v110[8 * v111];
          unsigned int v112 = v108;
          if (v72 != __src)
          {
            unsigned int v112 = &v108[(v72 - v91) & 0xFFFFFFFFFFFFFFF8];
            unint64_t v113 = v72 - v91 - 8;
            unsigned int v114 = &v110[8 * v111];
            uint64_t v115 = __src;
            if (v113 > 0x37)
            {
              uint64_t v116 = 8 * v111;
              unsigned int v114 = &v110[8 * v111];
              uint64_t v115 = __src;
              if ((unint64_t)(v114 - v91) >= 0x20)
              {
                uint64_t v117 = (v113 >> 3) + 1;
                uint64_t v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
                unsigned int v114 = &v108[v118];
                uint64_t v119 = (long long *)(__src + 16);
                uint64_t v120 = &v110[v116 + 16];
                uint64_t v121 = v117 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v122 = *v119;
                  *((_OWORD *)v120 - 1) = *(v119 - 1);
                  *(_OWORD *)uint64_t v120 = v122;
                  v119 += 2;
                  v120 += 32;
                  v121 -= 4;
                }
                while (v121);
                if (v117 == (v117 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  __p[0] = v110;
                  __p[1] = v108;
                  *(void *)&long long v202 = &v108[(v72 - v91) & 0xFFFFFFFFFFFFFFF8];
                  *((void *)&v202 + 1) = &v110[8 * v109];
LABEL_189:
                  operator delete(__src);
                  unint64_t v108 = (char *)__p[1];
                  goto LABEL_190;
                }
                uint64_t v115 = &__src[v118];
              }
            }
            do
            {
              uint64_t v156 = *(void *)v115;
              v115 += 8;
              *(void *)unsigned int v114 = v156;
              v114 += 8;
            }
            while (v114 != v112);
          }
          __p[0] = v110;
          __p[1] = v108;
          *(void *)&long long v202 = v112;
          *((void *)&v202 + 1) = &v110[8 * v109];
          if (!__src) {
            goto LABEL_190;
          }
          goto LABEL_189;
        }
        if (*((void **)&v202 + 1) == __p[0]) {
          unint64_t v93 = 1;
        }
        else {
          unint64_t v93 = v92 >> 2;
        }
        if (v93 >> 61) {
          goto LABEL_232;
        }
        unsigned int v94 = (char *)operator new(8 * v93);
        unsigned int v187 = v91;
        uint64_t v95 = operator new(0xFF0uLL);
        unint64_t v96 = &v94[8 * v74];
        int v97 = &v94[8 * v93];
        if (v74 == v93)
        {
          if (v73 < 1)
          {
            if (v72 == __src) {
              unint64_t v123 = 1;
            }
            else {
              unint64_t v123 = v73 >> 2;
            }
            if (v123 >> 61) {
              goto LABEL_232;
            }
            uint64_t v124 = v95;
            unint64_t v96 = (char *)operator new(8 * v123);
            int v97 = &v96[8 * v123];
            operator delete(v94);
            unsigned int v94 = v96;
            uint64_t v95 = v124;
          }
          else
          {
            unint64_t v98 = v74 + 2;
            if (v74 >= -1) {
              unint64_t v98 = v74 + 1;
            }
            v96 -= 8 * (v98 >> 1);
          }
        }
        *(void *)unint64_t v96 = v95;
        __int16 v125 = v96 + 8;
        if (v72 == __src)
        {
          unint64_t v126 = v187;
LABEL_172:
          __p[0] = v94;
          __p[1] = v96;
          *(void *)&long long v202 = v125;
          *((void *)&v202 + 1) = v97;
          int v87 = v191;
          uint64_t v89 = v190;
          unint64_t v90 = v188;
          if (v126) {
            operator delete(v126);
          }
          goto LABEL_215;
        }
        while (v96 != v94)
        {
          unint64_t v127 = v96;
LABEL_148:
          uint64_t v128 = *((void *)v72 - 1);
          v72 -= 8;
          *((void *)v127 - 1) = v128;
          unint64_t v96 = v127 - 8;
          if (v72 == __p[1])
          {
            unint64_t v126 = (char *)__p[0];
            goto LABEL_172;
          }
        }
        if (v125 < v97)
        {
          uint64_t v129 = (v97 - v125) >> 3;
          if (v129 >= -1) {
            unint64_t v130 = v129 + 1;
          }
          else {
            unint64_t v130 = v129 + 2;
          }
          uint64_t v131 = &v125[8 * (v130 >> 1)];
          unint64_t v127 = &v96[8 * (v130 >> 1)];
          if (v125 == v96)
          {
            unsigned int v94 = v125;
          }
          else
          {
            memmove(&v96[8 * (v130 >> 1)], v96, v125 - v96);
            unsigned int v94 = v96;
          }
          __int16 v125 = v131;
          goto LABEL_148;
        }
        if (v97 == v96) {
          unint64_t v132 = 1;
        }
        else {
          unint64_t v132 = (v97 - v96) >> 2;
        }
        if (v132 >> 61) {
          goto LABEL_232;
        }
        int v133 = (char *)operator new(8 * v132);
        unsigned int v94 = v133;
        unint64_t v134 = (v132 + 3) >> 2;
        unint64_t v127 = &v133[8 * v134];
        int64_t v135 = v125 - v96;
        BOOL v103 = v125 == v96;
        __int16 v125 = v127;
        if (!v103)
        {
          __int16 v125 = &v127[v135 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v136 = v135 - 8;
          uint64_t v137 = &v133[8 * v134];
          unint64_t v138 = v96;
          if (v136 >= 0x38)
          {
            uint64_t v139 = 8 * v134;
            uint64_t v137 = &v133[8 * v134];
            unint64_t v138 = v96;
            if ((unint64_t)(v137 - v96) >= 0x20)
            {
              uint64_t v140 = (v136 >> 3) + 1;
              uint64_t v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v137 = &v127[v141];
              float v142 = (long long *)(v96 + 16);
              unint64_t v143 = &v133[v139 + 16];
              uint64_t v144 = v140 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v145 = *v142;
                *((_OWORD *)v143 - 1) = *(v142 - 1);
                *(_OWORD *)unint64_t v143 = v145;
                v142 += 2;
                v143 += 32;
                v144 -= 4;
              }
              while (v144);
              if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_169;
              }
              unint64_t v138 = &v96[v141];
            }
          }
          do
          {
            uint64_t v146 = *(void *)v138;
            v138 += 8;
            *(void *)uint64_t v137 = v146;
            v137 += 8;
          }
          while (v137 != v125);
        }
LABEL_169:
        int v97 = &v133[8 * v132];
        operator delete(v96);
        goto LABEL_148;
      }
LABEL_229:
      uint64_t v12 = 0;
      goto LABEL_230;
    }
LABEL_4:
    unint64_t v11 = a1[1];
    uint64_t v10 = a1[2];
    if (v11 - v10 < 3) {
      goto LABEL_2;
    }
  }
  unint64_t v20 = v10 + 7;
  if (v20 <= v11)
  {
    a1[2] = v20;
    int v192 = *(_DWORD *)(v15 + v20 - 4);
    unint64_t v14 = v20;
  }
  unint64_t v21 = v14 + 8;
  if (v14 + 8 > v11)
  {
    unint64_t v22 = v14 + 8;
LABEL_19:
    unint64_t v23 = v22;
    if (v22 <= v11)
    {
LABEL_46:
      atomic_ullong v3 = *(void *)(v15 + v14);
      a1[2] = v23;
      unint64_t v14 = v23;
    }
  }
  else
  {
    atomic_ullong v5 = *(void *)(v15 + v14);
    a1[2] = v21;
    unint64_t v22 = v14 + 16;
    v14 += 8;
    if (v22 > v11) {
      goto LABEL_19;
    }
    atomic_ullong v4 = *(void *)(v15 + v21);
    a1[2] = v22;
    unint64_t v23 = v22 + 8;
    unint64_t v14 = v22;
    if (v22 + 8 <= v11) {
      goto LABEL_46;
    }
  }
  unint64_t v42 = v14 + 4;
  if (v14 + 4 <= v11)
  {
    int v2 = *(_DWORD *)(v15 + v14);
    a1[2] = v42;
    v14 += 4;
  }
  if (v14 + 1 > v11) {
    goto LABEL_229;
  }
  uint64_t v12 = 0;
  a1[2] = v14 + 1;
  if (v20 <= v11 && v21 <= v11 && v22 <= v11 && v23 <= v11 && v42 <= v11)
  {
    uint64_t v43 = *(unsigned __int8 *)(v15 + v14);
    if (*(unsigned char *)(v15 + v14))
    {
      size_t v44 = 4 * v43;
      int v45 = (char *)operator new(4 * v43);
      bzero(v45, v44);
      unint64_t v46 = &v45[v44];
      BOOL v47 = v44 == 0;
      if (v44)
      {
        uint64_t v48 = 0;
        unint64_t v49 = v14 + 5;
        while (v49 + v48 <= v11)
        {
          int v50 = *(_DWORD *)(v15 + v14 + 1 + v48);
          a1[2] = v49 + v48;
          *(_DWORD *)&v45[v48] = v50;
          v48 += 4;
          if (v44 == v48) {
            goto LABEL_64;
          }
        }
        operator delete(v45);
        goto LABEL_229;
      }
    }
    else
    {
      unint64_t v46 = 0;
      int v45 = 0;
      BOOL v47 = 1;
    }
LABEL_64:
    unint64_t v51 = (atomic_ullong *)operator new(0x58uLL);
    float v52 = v51;
    v51[1] = 0;
    v51[2] = 0;
    *unint64_t v51 = (atomic_ullong)&unk_1EF58A900;
    unint64_t v53 = (char *)(v51 + 3);
    v51[3] = (atomic_ullong)&unk_1EF568008;
    v51[9] = 0;
    v51[10] = 0;
    v51[8] = 0;
    *(void *)buf = v51 + 3;
    *(void *)&buf[8] = v51;
    *((_DWORD *)v51 + 15) = v192;
    v51[4] = v5;
    v51[5] = v4;
    v51[6] = v3;
    size_t v54 = v46 - v45;
    uint64_t v55 = (v46 - v45) >> 2;
    *((_DWORD *)v51 + 14) = v2;
    if (v47)
    {
      int v56 = 0;
      unint64_t v57 = v51 + 9;
    }
    else
    {
      if ((v54 & 0x8000000000000000) != 0) {
        abort();
      }
      int v56 = (char *)operator new(v54);
      v52[9] = (atomic_ullong)v56;
      unint64_t v57 = v52 + 9;
      v52[8] = (atomic_ullong)v56;
      v52[10] = (atomic_ullong)&v56[4 * v55];
      memcpy(v56, v45, v54);
    }
    *unint64_t v57 = &v56[4 * v55];
    if (*((void *)&v203 + 1))
    {
      unint64_t v58 = *((void *)__p[1] + (*((void *)&v203 + 1) + (void)v203 - 1) / 0xAAuLL)
          + 24 * ((*((void *)&v203 + 1) + (void)v203 - 1) % 0xAAuLL);
      --*(_DWORD *)(v58 + 16);
      uint32_t v59 = (char **)(*(void *)v58 + 40);
      long long v194 = v53;
      long long v195 = (std::__shared_weak_count *)v52;
      atomic_fetch_add_explicit(v52 + 1, 1uLL, memory_order_relaxed);
      std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](v59, (uint64_t)&v194);
      uint64_t v60 = v195;
      if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
      uint64_t v61 = *((void *)&v203 + 1);
      if (*((void *)&v203 + 1))
      {
        uint64_t v62 = v203;
        int v63 = __p[1];
        do
        {
          unint64_t v64 = v61 + v62 - 1;
          uint64_t v65 = v63[v64 / 0xAA];
          unint64_t v66 = v64 % 0xAA;
          if (*(_DWORD *)(v65 + 24 * v66 + 16)) {
            break;
          }
          int v67 = *(std::__shared_weak_count **)(v65 + 24 * v66 + 8);
          if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
          int v63 = __p[1];
          uint64_t v68 = v202;
          uint64_t v69 = 170 * ((uint64_t)(v202 - (unint64_t)__p[1]) >> 3) - 1;
          if ((void *)v202 == __p[1]) {
            uint64_t v69 = 0;
          }
          uint64_t v70 = *((void *)&v203 + 1);
          uint64_t v62 = v203;
          uint64_t v61 = --*((void *)&v203 + 1);
          if ((unint64_t)(v69 - (v70 + v203) + 1) >= 0x154)
          {
            operator delete(*(void **)(v202 - 8));
            *(void *)&long long v202 = v68 - 8;
          }
        }
        while (v61);
      }
    }
    else
    {
      long long v194 = v53;
      long long v195 = (std::__shared_weak_count *)v52;
      atomic_fetch_add_explicit(v52 + 1, 1uLL, memory_order_relaxed);
      std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](v193, (uint64_t)&v194);
      int v85 = v195;
      if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    unsigned int v86 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
    if (v45) {
      operator delete(v45);
    }
    goto LABEL_4;
  }
LABEL_230:
  std::deque<std::pair<std::shared_ptr<karo::media::C3mmObjectTree::Group>,int>>::~deque[abi:nn180100]((uint64_t)__p);
  return v12;
}

void sub_1A27EC3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  operator delete(v26);
  operator delete(v25);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a23);
  std::deque<std::pair<std::shared_ptr<karo::media::C3mmObjectTree::Group>,int>>::~deque[abi:nn180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t karo::media::anonymous namespace'::readRootBounds(uint64_t *a1, uint64_t *a2, float a3, float a4, double a5, double a6, float a7)
{
  unint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  unint64_t v9 = v8 + 4;
  if (v8 + 4 > v7)
  {
    unint64_t v10 = v8 + 4;
  }
  else
  {
    a3 = *(float *)(*a1 + v8);
    a1[2] = v9;
    unint64_t v10 = v8 + 8;
    v8 += 4;
    if (v10 <= v7)
    {
      a4 = *(float *)(*a1 + v9);
      a1[2] = v10;
      unint64_t v8 = v10;
    }
  }
  if (v8 + 1 > v7) {
    return 0;
  }
  a1[2] = v8 + 1;
  if (v9 > v7 || v10 > v7) {
    return 0;
  }
  char v13 = *(unsigned char *)(*a1 + v8);
  BOOL v14 = 1;
  uint64_t v15 = *a2;
  uint64_t v16 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
  __asm { FMOV            V2.2S, #1.0 }
  a2[3] = _D2;
  if (v16)
  {
    float v22 = (float)(1 << v13);
    float v23 = (float)(a4 - a3) / v22;
    uint64_t v24 = a2[4];
    int v25 = (unsigned int *)(v15 + 16);
    while (v8 + 3 <= v7)
    {
      a1[2] = v8 + 3;
      BOOL v14 = v8 + 5 <= v7;
      if (v8 + 5 > v7) {
        return v14;
      }
      uint64_t v26 = *a1;
      a1[2] = v8 + 5;
      unsigned int v27 = *v25;
      v25 += 6;
      uint64_t v28 = v26 + v8;
      LOWORD(v22) = *(_WORD *)(v28 + 1);
      float v22 = a3 + (float)(v23 * (float)LODWORD(v22));
      uint64_t v29 = v24 + 16 * v27;
      LOWORD(a7) = *(_WORD *)(v28 + 3);
      a7 = a4 - (float)(v23 * (float)LODWORD(a7));
      *(float *)(v29 + 4) = v22;
      *(float *)(v29 + 8) = a7;
      v8 += 4;
      if (!--v16) {
        return 1;
      }
    }
    unint64_t v30 = a1[2] + 2;
    if (v30 > v7) {
      return 0;
    }
    BOOL v14 = 0;
    a1[2] = v30;
  }
  return v14;
}

BOOL karo::media::anonymous namespace'::readChildBounds(void *a1, uint64_t a2, void *a3)
{
  unint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v5 = v3 + 1;
  BOOL v6 = v4 >= v3 + 1;
  uint64_t v7 = v4 - (v3 + 1);
  if (!v6) {
    return 0;
  }
  a1[2] = v5;
  char v9 = *(unsigned char *)(*a1 + v3);
  v17[0] = *a1 + v5;
  v17[1] = v7;
  v17[2] = 0;
  BOOL result = 1;
  uint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    double v12 = 1.0;
    float v13 = 1.0 / (double)(1 << v9);
    uint64_t v14 = a3[4];
    uint64_t v15 = *a3 + 24;
    do
    {
      BOOL v16 = !result || v15 == v10;
      v15 += 24;
    }
    while (!v16);
  }
  return result;
}

uint64_t karo::media::anonymous namespace'::readHighPrecisionBounds(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 + 4 > v2) {
    return 0;
  }
  a1[2] = v3 + 4;
  unint64_t v5 = *(unsigned int *)(*a1 + v3);
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a2 + 24) = _D0;
  if (!v5) {
    return 1;
  }
  unint64_t v11 = 0;
  BOOL v12 = 0;
  float v13 = (_DWORD *)(*(void *)(a2 + 32) + 8);
  do
  {
    if (v3 + 8 > v2) {
      break;
    }
    uint64_t v14 = *a1 + v3;
    int v15 = *(_DWORD *)(v14 + 4);
    a1[2] = v3 + 8;
    if (v3 + 12 > v2) {
      break;
    }
    int v16 = *(_DWORD *)(v14 + 8);
    a1[2] = v3 + 12;
    ++v11;
    *(v13 - 1) = v15;
    *float v13 = v16;
    BOOL v12 = v11 >= v5;
    v3 += 8;
    v13 += 4;
  }
  while (v5 != v11);
  return v12;
}

uint64_t *std::__tree<karo::media::C3mmRoot>::__emplace_unique_key_args<karo::media::C3mmRoot,karo::media::C3mmRoot const&>(uint64_t *result, unsigned int *a2, uint64_t a3)
{
  unint64_t v4 = result;
  BOOL v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (!v5)
  {
    unint64_t v11 = result + 1;
    goto LABEL_15;
  }
  unsigned int v7 = *a2;
  unsigned int v8 = a2[1];
  unsigned int v9 = a2[2];
  unsigned int v10 = a2[3];
  do
  {
    while (1)
    {
      unint64_t v11 = (uint64_t *)v5;
      unsigned int v12 = *(_DWORD *)(v5 + 28);
      if (v7 >= v12)
      {
        if (v7 > v12) {
          goto LABEL_12;
        }
        unsigned int v13 = *((_DWORD *)v11 + 8);
        if (v8 >= v13)
        {
          if (v8 > v13) {
            goto LABEL_12;
          }
          unsigned int v14 = *((_DWORD *)v11 + 9);
          if (v9 >= v14)
          {
            if (v9 > v14) {
              goto LABEL_12;
            }
            unsigned int v15 = *((_DWORD *)v11 + 10);
            if (v10 >= v15) {
              break;
            }
          }
        }
      }
      uint64_t v5 = *v11;
      BOOL v6 = (uint64_t **)v11;
      if (!*v11) {
        goto LABEL_15;
      }
    }
    if (v15 >= v10) {
      return result;
    }
LABEL_12:
    uint64_t v5 = v11[1];
  }
  while (v5);
  BOOL v6 = (uint64_t **)(v11 + 1);
LABEL_15:
  int v16 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v16 + 28) = *(_OWORD *)a3;
  *(void *)(v16 + 44) = *(void *)(a3 + 16);
  *(void *)int v16 = 0;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = v11;
  std::__shared_weak_count *v6 = (uint64_t *)v16;
  uint64_t v17 = *(void *)*v4;
  if (v17)
  {
    *unint64_t v4 = v17;
    unint64_t v18 = *v6;
  }
  else
  {
    unint64_t v18 = (uint64_t *)v16;
  }
  BOOL result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v18);
  ++v4[2];
  return result;
}

BOOL karo::media::anonymous namespace'::propagateBounds(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t *a5, float a6, float a7)
{
  unsigned int v10 = (float *)(a2 + 16 * a4);
  float v12 = v10[1];
  float v11 = v10[2];
  float v13 = v11 - v12;
  uint64_t v14 = a4 + 1;
  float v15 = (float)(v11 - v12) * a6;
  uint64_t v16 = (a3 + 1);
  if (v16 < a1)
  {
    char v18 = 0;
    BOOL v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    while (1)
    {
      if ((*(unsigned __int16 *)v10 >> v18))
      {
        uint64_t v22 = v14;
        if (v21) {
          uint64_t v22 = *(unsigned int *)(a2 + 16 * v21 + 12);
        }
        unint64_t v23 = a5[1];
        uint64_t v24 = a5[2];
        unint64_t v25 = v24 + 1;
        if (v24 + 1 > v23) {
          goto LABEL_78;
        }
        a5[2] = v25;
        if (v24 + 2 > v23) {
          return v19;
        }
        uint64_t v26 = *a5;
        LOBYTE(v13) = *(unsigned char *)(*a5 + v24);
        a5[2] = v24 + 2;
        LOBYTE(a7) = *(unsigned char *)(v26 + v25);
        uint64_t v27 = a2 + 16 * v22;
        *(float *)(v27 + 4) = v12 + (float)(v15 * (float)LODWORD(v13));
        *(float *)(v27 + 8) = v11 - (float)(v15 * (float)LODWORD(a7));
          return v19;
      }
      else
      {
        uint64_t v22 = v21;
      }
      BOOL v19 = v20 > 6;
      v18 += 2;
      ++v20;
      uint64_t v21 = v22;
      if (v20 == 8) {
        return v19;
      }
    }
  }
  uint64_t v28 = a5[2];
  __int16 v29 = *(_WORD *)v10;
  if (*(_WORD *)v10)
  {
    unint64_t v23 = a5[1];
    uint64_t v30 = v28 + 1;
    if (v28 + 1 > v23) {
      goto LABEL_77;
    }
    a5[2] = v30;
    uint64_t v31 = v28 + 2;
    if (v28 + 2 > v23) {
      return 0;
    }
    uint64_t v32 = *a5;
    LOBYTE(v13) = *(unsigned char *)(*a5 + v28);
    a5[2] = v31;
    LOBYTE(a7) = *(unsigned char *)(v32 + v30);
    float v13 = v12 + (float)(v15 * (float)LODWORD(v13));
    a7 = v11 - (float)(v15 * (float)LODWORD(a7));
    uint64_t v33 = a2 + 16 * v14;
    *(float *)(v33 + 4) = v13;
    *(float *)(v33 + 8) = a7;
    if ((v29 & 4) == 0)
    {
      uint64_t v28 = v31;
      unsigned int v34 = a4 + 1;
      if ((v29 & 0x10) == 0) {
        goto LABEL_37;
      }
      goto LABEL_30;
    }
    if (a4 == -1) {
      unsigned int v34 = 0;
    }
    else {
      unsigned int v34 = *(_DWORD *)(a2 + 16 * v14 + 12);
    }
    uint64_t v28 = v31;
LABEL_27:
    uint64_t v35 = v28 + 1;
    if (v28 + 1 > v23) {
      goto LABEL_77;
    }
    a5[2] = v35;
    uint64_t v36 = v28 + 2;
    if (v28 + 2 > v23) {
      return 0;
    }
    uint64_t v37 = *a5;
    LOBYTE(v13) = *(unsigned char *)(*a5 + v28);
    a5[2] = v36;
    float v13 = v12 + (float)(v15 * (float)LODWORD(v13));
    LOBYTE(a7) = *(unsigned char *)(v37 + v35);
    a7 = v11 - (float)(v15 * (float)LODWORD(a7));
    uint64_t v38 = a2 + 16 * v34;
    *(float *)(v38 + 4) = v13;
    *(float *)(v38 + 8) = a7;
    uint64_t v28 = v36;
    if ((v29 & 0x10) == 0) {
      goto LABEL_37;
    }
LABEL_30:
    if (v34)
    {
      unsigned int v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
LABEL_34:
      uint64_t v39 = v28 + 1;
      if (v28 + 1 > v23) {
        goto LABEL_77;
      }
      a5[2] = v39;
      uint64_t v40 = v28 + 2;
      if (v28 + 2 > v23) {
        return 0;
      }
      uint64_t v41 = *a5;
      LOBYTE(v13) = *(unsigned char *)(*a5 + v28);
      a5[2] = v40;
      float v13 = v12 + (float)(v15 * (float)LODWORD(v13));
      LOBYTE(a7) = *(unsigned char *)(v41 + v39);
      a7 = v11 - (float)(v15 * (float)LODWORD(a7));
      uint64_t v42 = a2 + 16 * v34;
      *(float *)(v42 + 4) = v13;
      *(float *)(v42 + 8) = a7;
      uint64_t v28 = v40;
LABEL_37:
      if ((v29 & 0x40) == 0) {
        goto LABEL_45;
      }
      if (v34)
      {
        unsigned int v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
LABEL_42:
        uint64_t v43 = v28 + 1;
        if (v28 + 1 > v23) {
          goto LABEL_77;
        }
        a5[2] = v43;
        uint64_t v44 = v28 + 2;
        if (v28 + 2 > v23) {
          return 0;
        }
        uint64_t v45 = *a5;
        LOBYTE(v13) = *(unsigned char *)(*a5 + v28);
        a5[2] = v44;
        float v13 = v12 + (float)(v15 * (float)LODWORD(v13));
        LOBYTE(a7) = *(unsigned char *)(v45 + v43);
        a7 = v11 - (float)(v15 * (float)LODWORD(a7));
        uint64_t v46 = a2 + 16 * v34;
        *(float *)(v46 + 4) = v13;
        *(float *)(v46 + 8) = a7;
        uint64_t v28 = v44;
LABEL_45:
        if ((v29 & 0x100) == 0) {
          goto LABEL_55;
        }
        if (v34)
        {
          unsigned int v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
LABEL_52:
          uint64_t v47 = v28 + 1;
          if (v28 + 1 > v23) {
            goto LABEL_77;
          }
          a5[2] = v47;
          uint64_t v48 = v28 + 2;
          if (v28 + 2 > v23) {
            return 0;
          }
          uint64_t v49 = *a5;
          LOBYTE(v13) = *(unsigned char *)(*a5 + v28);
          a5[2] = v48;
          float v13 = v12 + (float)(v15 * (float)LODWORD(v13));
          LOBYTE(a7) = *(unsigned char *)(v49 + v47);
          a7 = v11 - (float)(v15 * (float)LODWORD(a7));
          uint64_t v50 = a2 + 16 * v34;
          *(float *)(v50 + 4) = v13;
          *(float *)(v50 + 8) = a7;
          uint64_t v28 = v48;
LABEL_55:
          if ((v29 & 0x400) == 0) {
            goto LABEL_65;
          }
          if (v34)
          {
            unsigned int v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
LABEL_62:
            uint64_t v51 = v28 + 1;
            if (v28 + 1 > v23) {
              goto LABEL_77;
            }
            a5[2] = v51;
            uint64_t v52 = v28 + 2;
            if (v28 + 2 > v23) {
              return 0;
            }
            uint64_t v53 = *a5;
            LOBYTE(v13) = *(unsigned char *)(*a5 + v28);
            a5[2] = v52;
            float v13 = v12 + (float)(v15 * (float)LODWORD(v13));
            LOBYTE(a7) = *(unsigned char *)(v53 + v51);
            a7 = v11 - (float)(v15 * (float)LODWORD(a7));
            uint64_t v54 = a2 + 16 * v34;
            *(float *)(v54 + 4) = v13;
            *(float *)(v54 + 8) = a7;
            uint64_t v28 = v52;
LABEL_65:
            if ((v29 & 0x1000) == 0)
            {
LABEL_73:
              if ((v29 & 0x4000) == 0) {
                return 1;
              }
              if (v34) {
                LODWORD(v14) = *(_DWORD *)(a2 + 16 * v34 + 12);
              }
              goto LABEL_76;
            }
            if (v34)
            {
              unsigned int v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
              goto LABEL_70;
            }
LABEL_69:
            unsigned int v34 = a4 + 1;
LABEL_70:
            uint64_t v55 = v28 + 1;
            if (v28 + 1 > v23) {
              goto LABEL_77;
            }
            a5[2] = v55;
            uint64_t v56 = v28 + 2;
            if (v28 + 2 <= v23)
            {
              uint64_t v57 = *a5;
              LOBYTE(v13) = *(unsigned char *)(*a5 + v28);
              a5[2] = v56;
              float v13 = v12 + (float)(v15 * (float)LODWORD(v13));
              LOBYTE(a7) = *(unsigned char *)(v57 + v55);
              a7 = v11 - (float)(v15 * (float)LODWORD(a7));
              uint64_t v58 = a2 + 16 * v34;
              *(float *)(v58 + 4) = v13;
              *(float *)(v58 + 8) = a7;
              uint64_t v28 = v56;
              goto LABEL_73;
            }
            return 0;
          }
LABEL_61:
          unsigned int v34 = a4 + 1;
          goto LABEL_62;
        }
LABEL_51:
        unsigned int v34 = a4 + 1;
        goto LABEL_52;
      }
LABEL_41:
      unsigned int v34 = a4 + 1;
      goto LABEL_42;
    }
LABEL_33:
    unsigned int v34 = a4 + 1;
    goto LABEL_34;
  }
  if ((v29 & 4) != 0)
  {
    unint64_t v23 = a5[1];
    unsigned int v34 = a4 + 1;
    goto LABEL_27;
  }
  if ((v29 & 0x10) != 0)
  {
    unint64_t v23 = a5[1];
    goto LABEL_33;
  }
  if ((v29 & 0x40) != 0)
  {
    unint64_t v23 = a5[1];
    goto LABEL_41;
  }
  if ((*(_WORD *)v10 & 0x100) != 0)
  {
    unint64_t v23 = a5[1];
    goto LABEL_51;
  }
  if ((*(_WORD *)v10 & 0x400) != 0)
  {
    unint64_t v23 = a5[1];
    goto LABEL_61;
  }
  if ((*(_WORD *)v10 & 0x1000) != 0)
  {
    unint64_t v23 = a5[1];
    goto LABEL_69;
  }
  if ((*(_WORD *)v10 & 0x4000) == 0) {
    return 1;
  }
  unint64_t v23 = a5[1];
LABEL_76:
  uint64_t v59 = v28 + 1;
  if (v28 + 1 <= v23)
  {
    a5[2] = v59;
    if (v28 + 2 > v23) {
      return 0;
    }
    uint64_t v61 = *a5;
    LOBYTE(v13) = *(unsigned char *)(*a5 + v28);
    a5[2] = v28 + 2;
    LOBYTE(a7) = *(unsigned char *)(v61 + v59);
    uint64_t v62 = a2 + 16 * v14;
    *(float *)(v62 + 4) = v12 + (float)(v15 * (float)LODWORD(v13));
    *(float *)(v62 + 8) = v11 - (float)(v15 * (float)LODWORD(a7));
    return 1;
  }
LABEL_77:
  BOOL v19 = 0;
  unint64_t v25 = a5[2] + 1;
LABEL_78:
  if (v25 <= v23) {
    a5[2] = v25;
  }
  return v19;
}

void std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60) {
      abort();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 3;
    if (v8 >> 3 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    BOOL v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v10) {
      unint64_t v11 = v9;
    }
    if (v11 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v12 = 16 * v11;
    float v13 = (char *)operator new(16 * v11);
    uint64_t v14 = &v13[16 * v7];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    BOOL v6 = v14 + 16;
    float v15 = &v13[v12];
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v16 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v14;
      a1[1] = v6;
      a1[2] = v15;
    }
    else
    {
      do
      {
        long long v18 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
        *(void *)uint64_t v17 = 0;
        *((void *)v17 + 1) = 0;
      }
      while (v17 != v16);
      uint64_t v17 = *a1;
      BOOL v19 = a1[1];
      *a1 = v14;
      a1[1] = v6;
      for (a1[2] = v15; v19 != v17; v19 -= 16)
      {
        unsigned int v20 = (std::__shared_weak_count *)*((void *)v19 - 1);
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    BOOL v6 = v5 + 16;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  a1[1] = v6;
}

uint64_t std::deque<std::pair<std::shared_ptr<karo::media::C3mmObjectTree::Group>,int>>::~deque[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    BOOL v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 += 24;
        if (v7 - (void)*v6 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
    goto LABEL_18;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 170;
LABEL_18:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t karo::media::C3mmObjectTree::Model::getType(karo::media::C3mmObjectTree::Model *this)
{
  return 1;
}

void karo::media::C3mmObjectTree::Model::~Model(karo::media::C3mmObjectTree::Model *this)
{
  *(void *)this = &unk_1EF568008;
  unint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF568008;
  unint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Model>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t karo::media::C3mmObjectTree::Group::getType(karo::media::C3mmObjectTree::Group *this)
{
  return 0;
}

void karo::media::C3mmObjectTree::Group::~Group(karo::media::C3mmObjectTree::Group *this)
{
  *(void *)this = &unk_1EF567FE0;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1EF567FE0;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

uint64_t std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Group>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Group>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A8C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Group>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A8C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t karo::media::anonymous namespace'::buildSubTree(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  for (uint64_t i = (a3 + 1); ; uint64_t i = (i + 1))
  {
    unsigned int v7 = a4 + 1;
    unint64_t v8 = (__int16 *)(a2 + 16 * a4);
    __int16 v9 = *v8;
    if (a1 == i) {
      break;
    }
    uint64_t v10 = a2 + 16 * v7;
    uint64_t v11 = (a4 + 1);
    if (v9)
    {
      *(_DWORD *)(v10 + 12) = 0;
      __int16 v9 = *v8;
    }
    if ((v9 & 4) != 0)
    {
      *(_DWORD *)(v10 + 12) = v11;
      *(_DWORD *)(a2 + 16 * v11 + 12) = 0;
      __int16 v9 = *v8;
      if ((*v8 & 0x10) != 0)
      {
LABEL_7:
        *(_DWORD *)(a2 + 16 * v11 + 12) = v12;
        *(_DWORD *)(a2 + 16 * v12 + 12) = 0;
        __int16 v9 = *v8;
        if ((*v8 & 0x40) != 0) {
          goto LABEL_8;
        }
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v12 = v11;
      LODWORD(v11) = v7;
      if ((v9 & 0x10) != 0) {
        goto LABEL_7;
      }
    }
    uint64_t v13 = v12;
    LODWORD(v12) = v11;
    if ((v9 & 0x40) != 0)
    {
LABEL_8:
      *(_DWORD *)(a2 + 16 * v12 + 12) = v13;
      *(_DWORD *)(a2 + 16 * v13 + 12) = 0;
      __int16 v9 = *v8;
      if ((*v8 & 0x100) != 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v14 = v13;
    LODWORD(v13) = v12;
    if ((v9 & 0x100) != 0)
    {
LABEL_9:
      *(_DWORD *)(a2 + 16 * v13 + 12) = v14;
      *(_DWORD *)(a2 + 16 * v14 + 12) = 0;
      __int16 v9 = *v8;
      if ((*v8 & 0x400) != 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v15 = v14;
    LODWORD(v14) = v13;
    if ((v9 & 0x400) != 0)
    {
LABEL_10:
      *(_DWORD *)(a2 + 16 * v14 + 12) = v15;
      *(_DWORD *)(a2 + 16 * v15 + 12) = 0;
      __int16 v9 = *v8;
      if ((*v8 & 0x1000) != 0) {
        goto LABEL_11;
      }
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v16 = v15;
    LODWORD(v15) = v14;
    if ((v9 & 0x1000) != 0)
    {
LABEL_11:
      *(_DWORD *)(a2 + 16 * v15 + 12) = v16;
      *(_DWORD *)(a2 + 16 * v16 + 12) = 0;
      if ((*v8 & 0x4000) == 0) {
        return a4;
      }
      goto LABEL_19;
    }
LABEL_18:
    a4 = v16;
    LODWORD(v16) = v15;
    if ((v9 & 0x4000) == 0) {
      return a4;
    }
LABEL_19:
    *(_DWORD *)(a2 + 16 * v16 + 12) = a4;
    *(_DWORD *)(a2 + 16 * a4 + 12) = 0;
  }
  uint64_t v17 = (a4 + 1);
  if (v9)
  {
    *(_DWORD *)(a2 + 16 * v7 + 12) = 0;
    uint64_t v17 = (a4 + 2);
  }
  if ((v9 & 4) != 0)
  {
    *(_DWORD *)(a2 + 16 * v7 + 12) = v17;
    *(_DWORD *)(a2 + 16 * v17 + 12) = 0;
    uint64_t v18 = (v17 + 1);
    if ((v9 & 0x10) == 0) {
      goto LABEL_31;
    }
LABEL_24:
    *(_DWORD *)(a2 + 16 * v17 + 12) = v18;
    *(_DWORD *)(a2 + 16 * v18 + 12) = 0;
    uint64_t v19 = (v18 + 1);
    if ((v9 & 0x40) != 0) {
      goto LABEL_25;
    }
LABEL_32:
    uint64_t v20 = v19;
    LODWORD(v19) = v18;
    if ((v9 & 0x100) == 0) {
      goto LABEL_33;
    }
LABEL_26:
    *(_DWORD *)(a2 + 16 * v19 + 12) = v20;
    *(_DWORD *)(a2 + 16 * v20 + 12) = 0;
    uint64_t v21 = (v20 + 1);
    if ((v9 & 0x400) != 0) {
      goto LABEL_27;
    }
LABEL_34:
    uint64_t v22 = v21;
    LODWORD(v21) = v20;
    if ((v9 & 0x1000) == 0) {
      goto LABEL_35;
    }
LABEL_28:
    *(_DWORD *)(a2 + 16 * v21 + 12) = v22;
    *(_DWORD *)(a2 + 16 * v22 + 12) = 0;
    a4 = (v22 + 1);
    if ((v9 & 0x4000) != 0)
    {
LABEL_36:
      *(_DWORD *)(a2 + 16 * v22 + 12) = a4;
      *(_DWORD *)(a2 + 16 * a4 + 12) = 0;
      return (a4 + 1);
    }
  }
  else
  {
    uint64_t v18 = v17;
    LODWORD(v17) = a4 + 1;
    if ((v9 & 0x10) != 0) {
      goto LABEL_24;
    }
LABEL_31:
    uint64_t v19 = v18;
    LODWORD(v18) = v17;
    if ((v9 & 0x40) == 0) {
      goto LABEL_32;
    }
LABEL_25:
    *(_DWORD *)(a2 + 16 * v18 + 12) = v19;
    *(_DWORD *)(a2 + 16 * v19 + 12) = 0;
    uint64_t v20 = (v19 + 1);
    if ((v9 & 0x100) != 0) {
      goto LABEL_26;
    }
LABEL_33:
    uint64_t v21 = v20;
    LODWORD(v20) = v19;
    if ((v9 & 0x400) == 0) {
      goto LABEL_34;
    }
LABEL_27:
    *(_DWORD *)(a2 + 16 * v20 + 12) = v21;
    *(_DWORD *)(a2 + 16 * v21 + 12) = 0;
    uint64_t v22 = (v21 + 1);
    if ((v9 & 0x1000) != 0) {
      goto LABEL_28;
    }
LABEL_35:
    a4 = v22;
    LODWORD(v22) = v21;
    if ((v9 & 0x4000) != 0) {
      goto LABEL_36;
    }
  }
  return a4;
}

void std::__shared_ptr_emplace<karo::media::C3mmFile>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<karo::media::C3mmFile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A9A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::media::C3mmFile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A9A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL karo::media::anonymous namespace'::loadDataSection(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 72);
  unint64_t v4 = (*(void *)(a2 + 80) - v3) >> 5;
  unint64_t v5 = a3;
  if (v4 > a3)
  {
    unint64_t v8 = (void *)(v3 + 32 * a3);
    uint64_t v10 = (char **)(v8 + 1);
    __int16 v9 = (char *)v8[1];
    size_t v11 = a1[1] - a1[2];
    uint64_t v13 = v8 + 2;
    uint64_t v12 = (char *)v8[2];
    size_t v14 = v11 - (v12 - v9);
    if (v11 <= v12 - v9)
    {
      if (v11 < v12 - v9) {
        *uint64_t v13 = &v9[v11];
      }
      goto LABEL_39;
    }
    uint64_t v17 = v8[3];
    uint64_t v16 = (char **)(v8 + 3);
    uint64_t v15 = v17;
    if (v17 - (uint64_t)v12 >= v14)
    {
      bzero(v10[1], v14);
      *uint64_t v13 = &v9[v11];
LABEL_39:
      memcpy(*(void **)(*(void *)(a2 + 72) + 32 * v5 + 8), (const void *)(*a1 + a1[2]), v11);
      a1[2] = a1[1];
      return v4 > v5;
    }
    uint64_t v44 = v16;
    unint64_t v45 = v12 - v9;
    if ((v11 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v18 = v15 - (void)v9;
    uint64_t v19 = 2 * v18;
    if (2 * v18 <= v11) {
      uint64_t v19 = a1[1] - a1[2];
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v20 = v19;
    }
    uint64_t v21 = (char *)operator new(v20);
    uint64_t v41 = &v21[v20];
    uint64_t v22 = v21;
    uint64_t v42 = &v21[v11];
    uint64_t v43 = &v21[v45];
    bzero(&v21[v45], v14);
    if (v12 == v9)
    {
      uint64_t v26 = v43;
      unint64_t v23 = v44;
      uint64_t v28 = v41;
      uint64_t v27 = v42;
      goto LABEL_37;
    }
    unint64_t v23 = v44;
    if (v45 < 8)
    {
      uint64_t v24 = v43;
      goto LABEL_34;
    }
    uint64_t v24 = v43;
    if ((unint64_t)(v9 - v22) >= 0x20)
    {
      if (v45 >= 0x20)
      {
        unint64_t v29 = v45 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v30 = v12 - 16;
        uint64_t v31 = &v22[v12 - 16 - v9];
        unint64_t v32 = v45 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v33 = *(_OWORD *)v30;
          *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
          *(_OWORD *)uint64_t v31 = v33;
          v31 -= 32;
          v30 -= 32;
          v32 -= 32;
        }
        while (v32);
        if (v45 == v29) {
          goto LABEL_36;
        }
        if ((v45 & 0x18) == 0)
        {
          uint64_t v24 = &v43[-v29];
          v12 -= v29;
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      unint64_t v34 = v29 - (v45 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v35 = &v12[-v29 - 8];
      uint64_t v36 = (char *)(v35 - v9);
      do
      {
        uint64_t v37 = *(void *)v35;
        v35 -= 8;
        *(void *)&v36[(void)v22] = v37;
        v36 -= 8;
        v34 += 8;
      }
      while (v34);
      if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_36;
      }
      uint64_t v24 = &v43[-(v45 & 0xFFFFFFFFFFFFFFF8)];
      v12 -= v45 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_34:
    uint64_t v38 = v24 - 1;
    do
    {
      char v39 = *--v12;
      *v38-- = v39;
    }
    while (v12 != v9);
LABEL_36:
    uint64_t v12 = v9;
    uint64_t v26 = v22;
    uint64_t v28 = v41;
    uint64_t v27 = v42;
LABEL_37:
    *uint64_t v10 = v26;
    v10[1] = v27;
    *unint64_t v23 = v28;
    if (v12) {
      operator delete(v12);
    }
    goto LABEL_39;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  unint64_t v25 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A1780000, v25, OS_LOG_TYPE_ERROR, "C3MM file index is missing when loading data section", buf, 2u);
  }

  return v4 > v5;
}

void sub_1A27EDD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27EDEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27EDFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27EE26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A27EE288(_Unwind_Exception *a1)
{
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v5);

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::VenueBuildingFeatureMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::VenueBuildingFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::VenueBuildingFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::Loader::~Loader(ggl::Loader *this)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v4 = *(void *)this;
    *(void *)this = 0;
    uint64_t v7 = v4;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v7);
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *(void *)this;
    *(void *)this = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

uint64_t ggl::MetalRenderer::device(ggl::MetalRenderer *this)
{
  return *((void *)this + 17);
}

void std::__shared_ptr_emplace<ggl::RenderTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RenderTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__split_buffer<std::function<void ()(void)>,geo::StdAllocator<std::function<void ()(void)>,ggl::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      *(void *)(a1 + 16) = i - 32;
      uint64_t v4 = *(void *)(i - 8);
      if (v4 != i - 32) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)(i - 32) + 32))(i - 32);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::function<void ()(ggl::WillSubmitFrameInfo const*)>,geo::StdAllocator<std::function<void ()(ggl::WillSubmitFrameInfo const*)>,ggl::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      *(void *)(a1 + 16) = i - 32;
      uint64_t v4 = *(void *)(i - 8);
      if (v4 != i - 32) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)(i - 32) + 32))(i - 32);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

void *std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1>,void ()(NSError *)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF57AB78;
  result[1] = v3;
  return result;
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1>,void ()(NSError *)>::~__func()
{
}

uint64_t std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF57AB30;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(result + 32) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::~__func(void *a1)
{
  *a1 = &unk_1EF57AB30;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::~__func(void *a1)
{
  *a1 = &unk_1EF57AB30;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

float ggl::MetalRenderer::averageFramesPerSecond(ggl::MetalRenderer *this)
{
  return *((double *)this + 19);
}

void ggl::MetalRenderer::readPixels(Texture *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v7 = *((unsigned int *)a1 + 20);
  uint64_t v6 = *((unsigned int *)a1 + 21);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  uint64_t v51 = &unk_1EF559018;
  uint64_t v52 = DeviceRGB;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  int v9 = *((_DWORD *)a1 + 17);
  if ((v9 - 14) >= 2)
  {
    if (v9 != 5) {
      goto LABEL_22;
    }
    std::allocate_shared[abi:nn180100]<ggl::BitmapData,std::allocator<ggl::BitmapData>,unsigned int &,unsigned int &,int,int,unsigned int,CGColorSpace *,unsigned int,void>((std::__shared_weak_count **)&v50, v7, v6, 32, 32, 4 * v7, DeviceRGB, 16641);
    __n128 v45 = v50;
    *a2 = v50;
    uint64_t v46 = **(void ***)(v5 + 32);
    uint64_t v47 = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v45.n128_u64[0] + 16))(v45.n128_u64[0], v45);
    memset(v48, 0, 24);
    v48[3] = v7;
    v48[4] = v6;
    v48[5] = 1;
    [v46 getBytes:v47 bytesPerRow:(4 * v7) fromRegion:v48 mipmapLevel:0];
  }
  else
  {
    std::allocate_shared[abi:nn180100]<ggl::BitmapData,std::allocator<ggl::BitmapData>,unsigned int &,unsigned int &,int,int,unsigned int,CGColorSpace *,unsigned int,void>((std::__shared_weak_count **)&v50, v7, v6, 8, 32, 4 * v7, DeviceRGB, 16385);
    unint64_t v10 = v50.n128_u64[0];
    *a2 = v50;
    size_t v11 = **(void ***)(v5 + 32);
    unint64_t v12 = v10;
    uint64_t v13 = (*(uint64_t (**)(unint64_t))(*(void *)v10 + 16))(v10);
    memset(v49, 0, 24);
    v49[3] = v7;
    v49[4] = v6;
    v49[5] = 1;
    [v11 getBytes:v13 bytesPerRow:(4 * v7) fromRegion:v49 mipmapLevel:0];
    uint64_t v14 = (*(uint64_t (**)(unint64_t))(*(void *)v12 + 16))(v12);
    if ((v6 & 1) + (v6 >> 1) && v7)
    {
      int v15 = 0;
      int v16 = 0;
      unsigned int v17 = v7 - 2;
      uint64_t v18 = v14 + 4 * (v7 - 2) + 4;
      int v19 = v7 * (v6 - 1);
      int v20 = v19 + 1;
      unsigned int v21 = v7 - 1;
      int v22 = (v7 - 1) & 0xFFFFFFFC;
      int v23 = 1;
      unsigned int v24 = v19 + 1;
      int v25 = v7;
      do
      {
        unsigned int v26 = v25 * (v6 + ~v16);
        uint64_t v27 = 4 * (v25 * v16);
        int v28 = *(_DWORD *)(v14 + v27);
        uint64_t v29 = 4 * v26;
        *(_DWORD *)(v14 + v27) = *(_DWORD *)(v14 + v29) & 0xFF00FF00 | __ROR4__(*(_DWORD *)(v14 + v29) & 0xFF00FF, 16);
        *(_DWORD *)(v14 + v29) = v28 & 0xFF00FF00 | __ROR4__(v28 & 0xFF00FF, 16);
        int v25 = v7;
        if (v7 != 1)
        {
          if (v21 < 4) {
            goto LABEL_12;
          }
          int v30 = v7 * v16;
          int v31 = 1;
          if (-2 - (int)v7 * v16 < v17 || (int)v7 * (v16 - ((int)v6 - 1)) - 2 < v17) {
            goto LABEL_13;
          }
          uint64_t v32 = 4 * (v30 + 1);
          uint64_t v33 = 4 * (v20 - v30);
          if (v14 + v32 < (unint64_t)(v18 + v33) && v14 + v33 < (unint64_t)(v18 + v32))
          {
LABEL_12:
            int v31 = 1;
            do
            {
LABEL_13:
              uint64_t v34 = 4 * (v15 + v31);
              int v35 = *(_DWORD *)(v14 + v34);
              uint64_t v36 = 4 * (v19 + v31);
              *(_DWORD *)(v14 + v34) = *(_DWORD *)(v14 + v36) & 0xFF00FF00 | __ROR4__(*(_DWORD *)(v14 + v36) & 0xFF00FF, 16);
              *(_DWORD *)(v14 + v36) = v35 & 0xFF00FF00 | __ROR4__(v35 & 0xFF00FF, 16);
              ++v31;
            }
            while (v7 != v31);
            int v25 = v7;
            goto LABEL_5;
          }
          unsigned int v37 = v21 & 0xFFFFFFFC;
          unsigned int v38 = v24;
          unsigned int v39 = v23;
          do
          {
            uint64_t v40 = 4 * v39;
            long long v41 = *(_OWORD *)(v14 + v40);
            uint64_t v42 = 4 * v38;
            long long v43 = *(_OWORD *)(v14 + v42);
            v44.i16[0] = v43;
            v44.i16[1] = BYTE2(v43);
            v44.i16[2] = BYTE4(*(void *)(v14 + v42));
            v44.i16[3] = BYTE6(*(void *)(v14 + v42));
            v44.i16[4] = *(void *)(v14 + v42 + 8);
            v44.i16[5] = BYTE2(*(void *)(v14 + v42 + 8));
            v44.i16[6] = BYTE12(v43);
            v44.i16[7] = BYTE14(v43);
            *(int8x16_t *)(v14 + v40) = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32(v44, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v44, 0x10uLL)), (int8x16_t)(v43 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
            *(int8x16_t *)(v14 + v42) = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)(v41 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)(v41 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), 0x10uLL)), (int8x16_t)(v41 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
            v39 += 4;
            v38 += 4;
            v37 -= 4;
          }
          while (v37);
          int v31 = v22 | 1;
          int v25 = v7;
          if (v21 != v22) {
            goto LABEL_13;
          }
        }
LABEL_5:
        ++v16;
        v23 += v7;
        v24 -= v7;
        v19 -= v7;
        v15 += v7;
      }
      while (v16 != (v6 & 1) + (v6 >> 1));
    }
  }
  DeviceRGB = v52;
LABEL_22:
  uint64_t v51 = &unk_1EF559018;
  if (DeviceRGB) {
    CFRelease(DeviceRGB);
  }
}

void sub_1A27EED68(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  *(void *)(v3 - 88) = v1;
  uint64_t v5 = *(const void **)(v3 - 80);
  if (v5) {
    CFRelease(v5);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:nn180100]<ggl::BitmapData,std::allocator<ggl::BitmapData>,unsigned int &,unsigned int &,int,int,unsigned int,CGColorSpace *,unsigned int,void>(std::__shared_weak_count **a1, unsigned int a2, unsigned int a3, int a4, int a5, unsigned int a6, CGColorSpace *a7, int a8)
{
  int v16 = (std::__shared_weak_count *)operator new(0x70uLL);
  v16->__shared_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583008;
  unsigned int v17 = v16 + 1;
  v16[1].__shared_owners_ = 0;
  v16[1].__shared_weak_owners_ = 0;
  v16[2].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B3E0;
  v16[2].__shared_owners_ = a3;
  v16[2].__shared_weak_owners_ = a4;
  v16[3].__vftable = (std::__shared_weak_count_vtbl *)a5;
  v16[3].__shared_owners_ = a6;
  v16[3].__shared_weak_owners_ = (uint64_t)CGColorSpaceRetain(a7);
  LODWORD(v16[4].__vftable) = a8;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55A1C0;
  v16[4].__shared_owners_ = 0;
  if (a6 * (unint64_t)a3) {
    operator new[]();
  }
  *a1 = v17;
  a1[1] = v16;
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v16[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v16[1].__shared_owners_ = (uint64_t)v17;
    v16[1].__shared_weak_owners_ = (uint64_t)v16;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v16[1].__shared_owners_ = (uint64_t)v17;
    v16[1].__shared_weak_owners_ = (uint64_t)v16;
  }
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

uint64_t std::__shared_ptr_emplace<ggl::BitmapData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::MetalRenderer::~MetalRenderer(ggl::MetalRenderer *this)
{
  *(void *)this = &unk_1EF55B118;
  uint64_t v2 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = *((void *)this + 54);
    *((void *)this + 54) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  uint64_t v4 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    MEMORY[0x1A6239270](v4, 0x1060C4055DDAB7ALL);
  }
  ggl::Renderer::~Renderer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF55B118;
  uint64_t v2 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = *((void *)this + 54);
    *((void *)this + 54) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  uint64_t v4 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    MEMORY[0x1A6239270](v4, 0x1060C4055DDAB7ALL);
  }
  ggl::Renderer::~Renderer(this);
}

void ggl::BitmapDataBase::newImage(ggl::BitmapDataBase *this)
{
}

uint64_t ggl::DataProviderReleaseInfoCallback(uint64_t this, void *a2)
{
  if (this)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(this + 8);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, void *))v2->__on_zero_shared)(v2, a2);
      std::__shared_weak_count::__release_weak(v2);
    }
    JUMPOUT(0x1A6239270);
  }
  return this;
}

uint64_t ggl::DataProviderGetBytesAtPositionCallback(ggl *this, char *a2, int64_t a3, unint64_t a4)
{
  if (4 * *((void *)this + 3) * *((void *)this + 2) - a3 >= a4) {
    uint64_t v4 = a4;
  }
  else {
    uint64_t v4 = 4 * *((void *)this + 3) * *((void *)this + 2) - a3;
  }
  if (v4)
  {
    unint64_t v5 = a3;
    size_t v8 = v4;
    do
    {
      if ((v5 & 0x8000000000000000) != 0
        || (uint64_t v10 = *((void *)this + 3), v11 = 4 * *((void *)this + 2), v8 + v5 > v11 * v10))
      {
        size_t v9 = 0;
      }
      else
      {
        uint64_t v12 = v10 + ~(v5 / v11);
        if (v11 - v5 % v11 >= v8) {
          size_t v9 = v8;
        }
        else {
          size_t v9 = v11 - v5 % v11;
        }
        unint64_t v13 = v5 % v11 + v12 * v11;
        if ((v13 & 0x8000000000000000) == 0
          && v13 + v9 <= *(void *)(*(void *)this + 56) * *(void *)(*(void *)this + 32))
        {
          uint64_t v14 = (*(uint64_t (**)(void))(**(void **)this + 16))(*(void *)this);
          memcpy(a2, (const void *)(v14 + v13), v9);
        }
      }
      v5 += v9;
      a2 += v9;
      v8 -= v9;
    }
    while (v8);
  }
  return v4;
}

uint64_t ggl::BitmapData::data(ggl::BitmapData *this)
{
  return *((void *)this + 10);
}

void ggl::BitmapData::~BitmapData(ggl::BitmapData *this)
{
  *(void *)this = &unk_1EF55A1C0;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C4077774924);
  }
  *(void *)this = &unk_1EF55B3E0;
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 8));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF55A1C0;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C4077774924);
  }
  *(void *)this = &unk_1EF55B3E0;
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 8));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ggl::IOSurfaceBitmapData::newImage(ggl::IOSurfaceBitmapData *this)
{
}

uint64_t ggl::DataProviderGetBytesCallback(ggl *this, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)this + 16))();
}

void *ggl::IOSurfaceBitmapData::data(IOSurfaceRef *this)
{
  if (!*((unsigned char *)this + 96))
  {
    IOSurfaceLock(this[10], 1u, 0);
    *((unsigned char *)this + 96) = 1;
  }
  uint64_t v2 = this[10];
  return IOSurfaceGetBaseAddress(v2);
}

void ggl::IOSurfaceBitmapData::~IOSurfaceBitmapData(IOSurfaceRef *this)
{
  *this = (IOSurfaceRef)&unk_1EF55F3D0;
  IOSurfaceUnlock(this[10], 1u, 0);
  IOSurfaceRef v2 = this[10];
  if (v2)
  {
    CFRelease(v2);
    this[10] = 0;
  }
  *this = (IOSurfaceRef)&unk_1EF55B3E0;
  CGColorSpaceRelease(this[8]);
  uint64_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  IOSurfaceRef v2;
  std::__shared_weak_count *v3;

  *this = (IOSurfaceRef)&unk_1EF55F3D0;
  IOSurfaceUnlock(this[10], 1u, 0);
  IOSurfaceRef v2 = this[10];
  if (v2)
  {
    CFRelease(v2);
    this[10] = 0;
  }
  *this = (IOSurfaceRef)&unk_1EF55B3E0;
  CGColorSpaceRelease(this[8]);
  uint64_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  IOSurfaceRef v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        size_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *, void *))(*v8 + 40))(v8, v4);
        }
        uint64_t v7 = v6 - 4;
        v6 -= 8;
        v5 -= 8;
      }
      while (v7 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = (uint64_t)v2;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - (void)v4);
  }
  return a1;
}

double ggl::MetalSurface::extents(id *this)
{
  [this[2] contentsScale];
  double v3 = v2;
  [this[2] bounds];
  return v4 * v3;
}

void ggl::MetalSurface::~MetalSurface(id *this)
{
  JUMPOUT(0x1A6239270);
}

{
}

uint64_t ggl::MPSBlur::setupTextures(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

void ggl::MPSBlur::encode(uint64_t a1, id *a2, void *a3)
{
  id v5 = a3;
  if (*(unsigned char *)(a1 + 49))
  {
    id v6 = objc_alloc((Class)getMPSImageTentClass());
    a2 = (id *)a2[13];
    uint64_t v7 = [v6 initWithDevice:a2 kernelWidth:*(unsigned __int8 *)(a1 + 48) kernelHeight:*(unsigned __int8 *)(a1 + 48)];
    size_t v9 = (id *)(a1 + 64);
    id v8 = *(id *)(a1 + 64);
LABEL_3:
    *size_t v9 = (id)v7;

    [*v9 setEdgeMode:1];
    [*v9 setOptions:2];
    goto LABEL_5;
  }
  size_t v9 = (id *)(a1 + 56);
  if (!*(void *)(a1 + 56))
  {
    id v21 = objc_alloc((Class)getMPSImageGaussianBlurClass());
    a2 = (id *)a2[13];
    LOBYTE(v22) = *(unsigned char *)(a1 + 48);
    *(float *)&double v23 = (float)v22;
    uint64_t v7 = [v21 initWithDevice:a2 sigma:v23];
    id v8 = *v9;
    goto LABEL_3;
  }
LABEL_5:
  uint64_t v10 = *(void *)(a1 + 72);
  if (*(unsigned char *)(v10 + 120) == 1)
  {
    unint64_t v11 = (id *)(*(void *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 64));
  }
  else
  {
    if (*(unsigned char *)(v10 + 120)) {
      goto LABEL_10;
    }
    unint64_t v11 = *(id **)(v10 + 32);
  }
  a2 = (id *)*v11;
LABEL_10:
  uint64_t v12 = [a2 pixelFormat];
  uint64_t v13 = v12;
  if (v12 == 81) {
    uint64_t v14 = 80;
  }
  else {
    uint64_t v14 = v12;
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = ___ZN3ggl7MPSBlur6encodeEPNS_11MetalDeviceEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke;
  void v25[3] = &__block_descriptor_40_e73____MTLTexture__32__0__MPSKernel_8___MTLCommandBuffer__16___MTLTexture__24l;
  v25[4] = v14;
  int v15 = (void *)MEMORY[0x1A6239EB0](v25);
  if (v14 == v13)
  {
    for (unint64_t i = 0; i < [a2 arrayLength]; ++i)
    {
      if ([a2 textureType] == 2) {
        unsigned int v17 = a2;
      }
      else {
        unsigned int v17 = (id *)objc_msgSend(a2, "newTextureViewWithPixelFormat:textureType:levels:slices:", v14, 2, 0, 1, i, 1);
      }
      unsigned int v24 = v17;
      if (*(unsigned char *)(a1 + 49)) {
        uint64_t v18 = 64;
      }
      else {
        uint64_t v18 = 56;
      }
      [*(id *)(a1 + v18) encodeToCommandBuffer:v5 inPlaceTexture:&v24 fallbackCopyAllocator:v15];
    }
  }
  else
  {
    for (unint64_t j = 0; j < [a2 arrayLength]; ++j)
    {
      unsigned int v24 = (id *)objc_msgSend(a2, "newTextureViewWithPixelFormat:textureType:levels:slices:", v14, 2, 0, 1, j, 1);
      if (*(unsigned char *)(a1 + 49)) {
        uint64_t v20 = 64;
      }
      else {
        uint64_t v20 = 56;
      }
      [*(id *)(a1 + v20) encodeToCommandBuffer:v5 inPlaceTexture:&v24 fallbackCopyAllocator:v15];
    }
  }
}

void sub_1A27EFDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ggl7MPSBlur6encodeEPNS_11MetalDeviceEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_msgSend(MEMORY[0x1E4F35330], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", *(void *)(a1 + 32), objc_msgSend(v7, "width"), objc_msgSend(v7, "height"), 0);
  size_t v9 = [v6 device];
  uint64_t v10 = [v9 newTextureWithDescriptor:v8];

  return v10;
}

void sub_1A27EFEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class initMPSImageTent(void)
{
  if (LoadMetalPerformanceShaders(void)::loadPredicate != -1) {
    dispatch_once(&LoadMetalPerformanceShaders(void)::loadPredicate, &__block_literal_global_53110);
  }
  Class result = objc_getClass("MPSImageTent");
  classMPSImageTent = (uint64_t)result;
  getMPSImageTentClass = (uint64_t (*)(void))MPSImageTentFunction;
  return result;
}

id MPSImageTentFunction(void)
{
  return (id)classMPSImageTent;
}

void ___ZL27LoadMetalPerformanceShadersv_block_invoke()
{
  LoadMetalPerformanceShaders(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders", 2);
  if (!LoadMetalPerformanceShaders(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders");
  }
}

Class initMPSImageGaussianBlur(void)
{
  if (LoadMetalPerformanceShaders(void)::loadPredicate != -1) {
    dispatch_once(&LoadMetalPerformanceShaders(void)::loadPredicate, &__block_literal_global_53110);
  }
  Class result = objc_getClass("MPSImageGaussianBlur");
  classMPSImageGaussianBlur = (uint64_t)result;
  getMPSImageGaussianBlurClass = (uint64_t (*)(void))MPSImageGaussianBlurFunction;
  return result;
}

id MPSImageGaussianBlurFunction(void)
{
  return (id)classMPSImageGaussianBlur;
}

void ggl::MPSBlur::~MPSBlur(id *this)
{
  *this = &unk_1EF561688;
  this[1] = (id)3131955885;
  id v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    (*(void (**)(id, id, int64_t))(*(void *)this[5] + 40))(this[5], v2, (unsigned char *)this[4] - (unsigned char *)v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  id v2;

  *this = &unk_1EF561688;
  this[1] = (id)3131955885;
  id v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    (*(void (**)(id, id, int64_t))(*(void *)this[5] + 40))(this[5], v2, (unsigned char *)this[4] - (unsigned char *)v2);
  }
}

void ggl::MetalSwapchainDrawableRef::presentAtTime(ggl::MetalSwapchainDrawableRef *this, double a2)
{
  uint64_t v2 = *((void *)this + 1);
  int v3 = 3;
  atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 132), (unsigned int *)&v3, 5u);
  if (v3 == 3)
  {
    std::mutex::lock((std::mutex *)v2);
    id v5 = **(void ***)(v2 + 112);
    if (a2 == 0.0) {
      [v5 present];
    }
    else {
      [v5 presentAtTime:a2];
    }
    ggl::MetalResourceManager::updateTextureWithResource(*(ggl::MetalResourceManager **)(*(void *)(v2 + 64) + 80), *(const Texture **)(v2 + 96), 0);
    std::mutex::unlock((std::mutex *)v2);
    atomic_exchange((atomic_uint *volatile)(v2 + 132), 6u);
  }
}

void sub_1A27F0210(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ggl::MetalSurfaceDrawable *,std::shared_ptr<ggl::MetalSurfaceDrawable>::__shared_ptr_default_delete<ggl::MetalSurfaceDrawable,ggl::MetalSurfaceDrawable>,std::allocator<ggl::MetalSurfaceDrawable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void ___ZL28GEOGetGeoGLMetalSwapchainLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit.GeoGL", "MetalSwapchain");
  uint64_t v1 = (void *)GEOGetGeoGLMetalSwapchainLog(void)::log;
  GEOGetGeoGLMetalSwapchainLog(void)::log = (uint64_t)v0;
}

void sub_1A27F0358(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::Allocator::instance(ggl::Allocator *this)
{
  uint64_t v1 = &qword_1EB32C000;
  {
    uint64_t v1 = &qword_1EB32C000;
    if (v3) {
      operator new();
    }
  }
  return v1[287];
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::TextureRect::TextureMesh::~TextureMesh(ggl::TextureRect::TextureMesh *this)
{
  ggl::Mesh::~Mesh((ggl::TextureRect::TextureMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::TextureRect::TextureMesh *)((char *)this - 16));
}

void ggl::TextureRect::TextureMesh::~TextureMesh(ggl::TextureRect::TextureMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::TextureRect::TextureVBO>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::TextureRect::TextureVBO>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::TextureRect::TextureRectPipelineState::~TextureRectPipelineState(ggl::TextureRect::TextureRectPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::TextureRect::TextureRectPipelineSetup::textureIsEnabled(ggl::TextureRect::TextureRectPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::TextureRect::TextureRectPipelineSetup::constantDataIsEnabled(ggl::TextureRect::TextureRectPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::TextureRect::TextureRectPipelineSetup::~TextureRectPipelineSetup(ggl::TextureRect::TextureRectPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::NullLoader::device(ggl::NullLoader *this)
{
  return *((void *)this + 1);
}

void ggl::NullLoader::~NullLoader(ggl::NullLoader *this)
{
}

uint64_t ggl::MetalResourceAccessor::commit(uint64_t result, uint64_t a2)
{
  if (!*(void *)(a2 + 24)) {
    return ggl::MetalResourceManager::newRasterizationRateMap(*(void *)(*(void *)(result + 8) + 80), a2);
  }
  return result;
}

uint64_t ggl::MetalResourceAccessor::commit(uint64_t this, const ggl::PipelineState *a2)
{
  if (!*((void *)a2 + 3)) {
    return ggl::MetalResourceManager::newPipelineState(*(ggl::MetalResourceManager **)(*(void *)(this + 8) + 80), a2);
  }
  return this;
}

uint64_t *ggl::MetalResourceAccessor::commit(uint64_t *this, const ggl::ShaderLibrary *a2)
{
  if (!*((void *)a2 + 3)) {
    return ggl::MetalResourceManager::newLibrary(*(ggl::MetalResourceManager **)(this[1] + 80), a2);
  }
  return this;
}

uint64_t *ggl::MetalResourceAccessor::load(uint64_t *this, ggl::BufferLoadItem *a2)
{
  if (*((void *)a2 + 3) != *((void *)a2 + 2))
  {
    uint64_t v3 = (const ggl::Buffer *)*((void *)a2 + 1);
    double v4 = (uint64_t *)*((void *)v3 + 3);
    if (v4
      || (this = ggl::MetalResourceManager::newBuffer(*(ggl::MetalResourceManager **)(this[1] + 80), v3),
          (double v4 = this) != 0))
    {
      this = (uint64_t *)v4[4];
      if (this)
      {
        memcpy((void *)([this contents] + *((void *)a2 + 2)), *(const void **)a2, *((void *)a2 + 3) - *((void *)a2 + 2));
        this = (uint64_t *)*((void *)a2 + 7);
        if (this)
        {
          id v5 = *(uint64_t (**)(void))(*this + 48);
          return (uint64_t *)v5();
        }
      }
    }
  }
  return this;
}

uint64_t ggl::CullingGrid::intersectedCellsForRibbon(unint64_t a1, float *a2, int a3)
{
  unint64_t v4 = a1 - (a3 ^ 1u);
  if (v4)
  {
    char v5 = 0;
    uint64_t v6 = 0;
    uint64_t result = 0;
    char v8 = 1;
    do
    {
      char v9 = v5;
      uint64_t v10 = v6 ^ 1;
      if (v8)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a2;
        do
        {
          uint64_t v13 = &a2[2 * (++v11 % a1)];
          float v14 = *v12;
          float v15 = *v13 - *v12;
          if (v15 != 0.0)
          {
            float v16 = *v13 * 4.0;
            unsigned int v17 = vcvtps_s32_f32(fminf(v16, v14 * 4.0));
            unsigned int v18 = vcvtms_s32_f32(fmaxf(v14 * 4.0, v16));
            if (v18 >= 3) {
              unsigned int v18 = 3;
            }
            if (v18 >= v17)
            {
              float v19 = v12[v10];
              float v20 = v13[v10] - v19;
              unsigned int v21 = vcvtms_s32_f32((float)((float)((float)((float)(v14 + (float)((float)v17 * -0.25)) * v20) / v15) - v19) * -4.0);
              if (v21 <= 3)
              {
                uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v17 & 1 | (2 * (v21 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v21 & 2 | (v17 >> 1) & 1]))) | result;
                if (v17) {
                  uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(2 * (v21 & 1)) | (v17 - 1) & 1] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v21 & 2 | ((v17 - 1) >> 1) & 1]))) | result;
                }
              }
              if (v18 > v17)
              {
                unsigned int v22 = v17 + 1;
                unsigned int v23 = vcvtms_s32_f32((float)((float)((float)((float)(v14 + (float)((float)(v17 + 1) * -0.25)) * v20)/ v15)- v19)* -4.0);
                if (v23 <= 3) {
                  uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v22 & 1 | (2 * (v23 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v23 & 2 | (v22 >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v17 & 1 | (2 * (v23 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v23 & 2 | (v17 >> 1) & 1]))) | result;
                }
                if (v18 > v22)
                {
                  unsigned int v24 = v17 + 2;
                  unsigned int v25 = vcvtms_s32_f32((float)((float)((float)((float)(v14 + (float)((float)(v17 + 2) * -0.25)) * v20)/ v15)- v19)* -4.0);
                  if (v25 <= 3) {
                    uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v17 & 1 | (2 * (v25 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v25 & 2 | (v24 >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v22 & 1 | (2 * (v25 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v25 & 2 | (v22 >> 1) & 1]))) | result;
                  }
                  if (v18 > v24)
                  {
                    unsigned int v26 = vcvtms_s32_f32((float)((float)((float)((float)(v14 + (float)((float)(v17 + 3) * -0.25))* v20)/ v15)- v19)* -4.0);
                    if (v26 <= 3) {
                      uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v17 + 3) & 1 | (2 * (v26 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v26 & 2 | ((v17 + 3) >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v17 & 1 | (2 * (v26 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v26 & 2 | (v24 >> 1) & 1]))) | result;
                    }
                  }
                }
              }
            }
          }
          v12 += 2;
        }
        while (v4 != v11);
      }
      else
      {
        uint64_t v27 = 0;
        int v28 = &a2[v10];
        uint64_t v29 = &a2[v6];
        do
        {
          int v30 = &a2[2 * (++v27 % a1)];
          float v31 = v30[v6];
          float v32 = *v29;
          float v33 = v31 - *v29;
          if (v33 != 0.0)
          {
            float v34 = v31 * 4.0;
            unsigned int v35 = vcvtps_s32_f32(fminf(v34, v32 * 4.0));
            unsigned int v36 = vcvtms_s32_f32(fmaxf(v32 * 4.0, v34));
            if (v36 >= 3) {
              unsigned int v36 = 3;
            }
            if (v36 >= v35)
            {
              float v37 = *v28;
              float v38 = v30[v10] - *v28;
              unsigned int v39 = vcvtms_s32_f32((float)((float)((float)((float)(v32 + (float)((float)v35 * -0.25)) * v38) / v33)
                                         - *v28) * -4.0);
              if (v39 <= 3)
              {
                int v40 = v39 >> 1;
                int v41 = v39 & 1;
                uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v41 & 0xFFFFFFFD | (2 * (v35 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v40 | v35 & 2]))) | result;
                if (v35) {
                  uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v41 & 0xFFFFFFFD | (2 * ((v35 - 1) & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v40 | (v35 - 1) & 2]))) | result;
                }
              }
              if (v36 > v35)
              {
                unsigned __int8 v42 = v35 + 1;
                unsigned int v43 = vcvtms_s32_f32((float)((float)((float)((float)(v32 + (float)((float)(v35 + 1) * -0.25)) * v38)/ v33)- v37)* -4.0);
                if (v43 <= 3) {
                  uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v43 & 1 | (2 * (v42 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v43 >> 1) | v42 & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v43 & 1 | (2 * (v35 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v43 >> 1) | v35 & 2]))) | result;
                }
                if (v36 > v42)
                {
                  unsigned __int8 v44 = v35 + 2;
                  unsigned int v45 = vcvtms_s32_f32((float)((float)((float)((float)(v32 + (float)((float)(v35 + 2) * -0.25)) * v38)/ v33)- v37)* -4.0);
                  if (v45 <= 3) {
                    uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v45 & 1 | (2 * (v35 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v45 >> 1) | v44 & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v45 & 1 | (2 * (v42 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v45 >> 1) | v42 & 2]))) | result;
                  }
                  if (v36 > v44)
                  {
                    unsigned int v46 = vcvtms_s32_f32((float)((float)((float)((float)(v32 + (float)((float)(v35 + 3) * -0.25))* v38)/ v33)- v37)* -4.0);
                    if (v46 <= 3) {
                      uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v46 & 1 | (2 * (((_BYTE)v35 + 3) & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v46 >> 1) | ((_BYTE)v35 + 3) & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v46 & 1 | (2 * (v35 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v46 >> 1) | ~v35 & 2]))) | result;
                    }
                  }
                }
              }
            }
          }
          v28 += 2;
          v29 += 2;
        }
        while (v4 != v27);
      }
      char v8 = 0;
      char v5 = 1;
      uint64_t v6 = 1;
    }
    while ((v9 & 1) == 0);
  }
  else
  {
    uint64_t result = 0;
  }
  if (a1)
  {
    __asm { FMOV            V0.2S, #4.0 }
    uint64_t v52 = (float32x2_t *)a2;
    unint64_t v53 = a1;
    do
    {
      float32x2_t v54 = *v52++;
      int32x2_t v55 = vmin_s32(vmax_s32(vcvt_s32_f32(vrndm_f32(vmul_f32(v54, _D0))), 0), (int32x2_t)0x300000003);
      uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v55.i8[0] & 1 | (2 * (v55.i8[4] & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v55.i8[4] & 2 | ((unsigned __int32)v55.i32[0] >> 1)]))) | result;
      --v53;
    }
    while (v53);
    if (a3)
    {
      uint64_t v56 = a2 + 1;
      unint64_t v57 = 0x7FFFFFFF7FFFFFFFLL;
      unint64_t v58 = 0x8000000080000000;
      unint64_t v59 = a1;
      do
      {
        LODWORD(v60) = vcvts_n_s32_f32(*(v56 - 1), 2uLL);
        LODWORD(v61) = vcvts_n_s32_f32(*v56, 2uLL);
        if ((int)v60 >= (int)v57) {
          uint64_t v62 = v57;
        }
        else {
          uint64_t v62 = v60;
        }
        if ((int)v58 <= (int)v60) {
          uint64_t v60 = v60;
        }
        else {
          uint64_t v60 = v58;
        }
        unint64_t v63 = HIDWORD(v57);
        if ((int)v61 >= (int)v63) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = v61;
        }
        unint64_t v57 = v62 | (v64 << 32);
        unint64_t v65 = HIDWORD(v58);
        if ((int)v65 <= (int)v61) {
          uint64_t v61 = v61;
        }
        else {
          uint64_t v61 = v65;
        }
        unint64_t v58 = v60 | (v61 << 32);
        v56 += 2;
        --v59;
      }
      while (v59);
      if ((int)v62 <= 3)
      {
        BOOL v66 = (int)v60 >= 1 && (int)v64 <= 3;
        if (v66 && (int)v61 >= 1)
        {
          uint64_t v68 = v62 & ~((int)v62 >> 31);
          uint64_t v69 = (int)v60 >= 4 ? 4 : v60;
          uint64_t v70 = (int)v61 >= 4 ? 4 : v61;
          unint64_t v71 = v68 | ((unint64_t)(v64 & ~((int)v64 >> 31)) << 32);
          uint64_t v72 = v69 | (v70 << 32);
          if ((int)v71 < (int)v69)
          {
            unint64_t v73 = HIDWORD(v71);
            if (SHIDWORD(v71) < SHIDWORD(v72))
            {
              do
              {
                float v74 = (float)((float)(int)v71 * 0.25) + 0.125;
                int v75 = v73;
                do
                {
                  int v76 = 1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v71 & 1 | (2 * (v75 & 1u))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v75 & 2 | (v71 >> 1) & 1]));
                  if ((v76 & result) == 0)
                  {
                    uint64_t v77 = 0;
                    char v78 = 0;
                    int v79 = 0;
                    uint64_t v80 = a2 + 1;
                    do
                    {
                      if (a1 - 1 == v77) {
                        uint64_t v81 = 0;
                      }
                      else {
                        uint64_t v81 = v77 + 1;
                      }
                      uint64_t v82 = &a2[2 * v81];
                      float v83 = *(v80 - 1);
                      float v84 = fmaxf(v83, *v82);
                      if (v74 >= fminf(*v82, v83) && v74 < v84)
                      {
                        if ((float)((float)((float)((float)((float)((float)v75 * 0.25) + 0.125) - *v80)
                                           * (float)(*v82 - v74))
                                   + (float)((float)(v82[1] - (float)((float)((float)v75 * 0.25) + 0.125))
                                           * (float)(v83 - v74))) > 0.0)
                          ++v79;
                        else {
                          --v79;
                        }
                        char v78 = 1;
                      }
                      ++v77;
                      v80 += 2;
                    }
                    while (a1 != v77);
                    if ((v78 & (v79 != 0)) == 0) {
                      int v76 = 0;
                    }
                    uint64_t result = v76 | result;
                  }
                  ++v75;
                }
                while (v75 != HIDWORD(v72));
                LODWORD(v71) = v71 + 1;
              }
              while (v71 != v72);
            }
          }
        }
      }
    }
  }
  return result;
}

void ggl::ShaderLibrary::~ShaderLibrary(ggl::ShaderLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  *(void *)this = &unk_1EF55B278;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *((void *)this + 22);
    if (!v3) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 22);
    if (!v3) {
      goto LABEL_12;
    }
  }
  unint64_t v4 = *((void *)this + 23);
  char v5 = v3;
  if (v4 != v3)
  {
    do
    {
      uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v6->__on_zero_shared)(v6, v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      v4 -= 16;
    }
    while (v4 != v3);
    char v5 = *((void *)this + 22);
  }
  *((void *)this + 23) = v3;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 25) + 40))(*((void *)this + 25), v5, *((void *)this + 24) - v5);
LABEL_12:
  id v7 = *((void *)this + 18);
  if (v7)
  {
    *((void *)this + 19) = v7;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 21) + 40))(*((void *)this + 21), v7, *((void *)this + 20) - v7);
  }
  char v8 = *((void *)this + 14);
  if (v8)
  {
    *((void *)this + 15) = v8;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 17) + 40))(*((void *)this + 17), v8, *((void *)this + 16) - v8);
  }
  char v9 = *((void *)this + 10);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 11);
    uint64_t v11 = *((void *)this + 10);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v12->__on_zero_shared)(v12, v11);
          std::__shared_weak_count::__release_weak(v12);
        }
        v10 -= 24;
      }
      while (v10 != v9);
      uint64_t v11 = *((void *)this + 10);
    }
    *((void *)this + 11) = v9;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 13) + 40))(*((void *)this + 13), v11, *((void *)this + 12) - v11);
  }
  uint64_t v13 = *((void *)this + 6);
  if (v13)
  {
    float v14 = *((void *)this + 7);
    float v15 = *((void *)this + 6);
    if (v14 != v13)
    {
      do
      {
        float v16 = *(void *)(v14 - 8);
        *(void *)(v14 - 8) = 0;
        if (v16) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 8))(v16, v15);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      float v15 = *((void *)this + 6);
    }
    *((void *)this + 7) = v13;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 9) + 40))(*((void *)this + 9), v15, *((void *)this + 8) - v15);
  }
  *(void *)this = &unk_1EF55D4B8;
  unsigned int v17 = *((void *)this + 1);
  if (v17)
  {
    (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unsigned int v18 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

uint64_t std::__shared_ptr_pointer<ggl::Shader *,std::shared_ptr<ggl::Shader>::__shared_ptr_default_delete<ggl::Shader,ggl::Shader>,std::allocator<ggl::Shader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Shader *,std::shared_ptr<ggl::Shader>::__shared_ptr_default_delete<ggl::Shader,ggl::Shader>,std::allocator<ggl::Shader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::NullDevice::unvendLoader(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ggl::NullDevice::isDeviceValid(ggl::NullDevice *this)
{
  return 0;
}

void ggl::NullDevice::vendLoader(ggl::NullDevice *this)
{
}

void ggl::NullDevice::createRenderer()
{
}

void ggl::NullDevice::~NullDevice(ggl::NullDevice *this)
{
  *(void *)this = off_1EF560C50;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = off_1EF560C50;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ggl::Device::isDeviceValid(ggl::Device *this)
{
  return 0;
}

void ggl::PipelineSetup::~PipelineSetup(ggl::PipelineSetup *this)
{
  *(void *)this = &unk_1EF55B1D8;
  uint64_t v2 = *((void *)this + 24);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 25);
    uint64_t v4 = *((void *)this + 24);
    if (v3 != v2)
    {
      do
      {
        char v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 24);
    }
    *((void *)this + 25) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 27) + 40))(*((void *)this + 27), v4, *((void *)this + 26) - v4);
  }
  uint64_t v6 = *((void *)this + 20);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 21);
    uint64_t v8 = *((void *)this + 20);
    if (v7 != v6)
    {
      do
      {
        char v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v9->__on_zero_shared)(v9, v8);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = *((void *)this + 20);
    }
    *((void *)this + 21) = v6;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v8, *((void *)this + 22) - v8);
  }
  uint64_t v10 = *((void *)this + 16);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 17);
    uint64_t v12 = *((void *)this + 16);
    if (v11 != v10)
    {
      do
      {
        uint64_t v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v13->__on_zero_shared)(v13, v12);
          std::__shared_weak_count::__release_weak(v13);
        }
        v11 -= 16;
      }
      while (v11 != v10);
      uint64_t v12 = *((void *)this + 16);
    }
    *((void *)this + 17) = v10;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 19) + 40))(*((void *)this + 19), v12, *((void *)this + 18) - v12);
  }
  uint64_t v14 = *((void *)this + 12);
  if (v14)
  {
    *((void *)this + 13) = v14;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 40))(*((void *)this + 15), v14, *((void *)this + 14) - v14);
  }
  uint64_t v15 = *((void *)this + 8);
  if (v15)
  {
    *((void *)this + 9) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v15, *((void *)this + 10) - v15);
  }
  uint64_t v16 = *((void *)this + 4);
  if (v16)
  {
    *((void *)this + 5) = v16;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v16, *((void *)this + 6) - v16);
  }
  unsigned int v17 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void ggl::PipelineSetup::setConstantData(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v8 = a1[2];
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(v8 + 48) + 72) + 8);
  uint64_t v10 = *(void *)(v9 + 40);
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v9 + 32);
  uint64_t v12 = (unsigned __int8 *)(v11 + 1);
  uint64_t v13 = v10;
  while (1)
  {
    int v14 = *v12;
    v12 += 2;
    if (v14 == a2) {
      break;
    }
    if (!--v13) {
      goto LABEL_18;
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = (unsigned __int8 *)(v11 + 1);
  while (1)
  {
    int v17 = *v16;
    v16 += 2;
    if (v17 == a2) {
      break;
    }
    if (v10 == ++v15)
    {
      uint64_t v18 = -1;
      goto LABEL_13;
    }
  }
  uint64_t v18 = *(unsigned __int8 *)(v11 + 2 * v15);
LABEL_13:
  float v19 = (void *)(a1[8] + 16 * v18);
  *float v19 = a3;
  v19[1] = 0;
  float v20 = (void *)(a1[20] + 16 * v18);
  unsigned int v21 = (std::__shared_weak_count *)v20[1];
  void *v20 = 0;
  v20[1] = 0;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  unsigned int v22 = (void *)(a1[24] + 16 * v18);
  unsigned int v23 = (std::__shared_weak_count *)v22[1];
  *unsigned int v22 = 0;
  v22[1] = 0;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((a4 & 2) == 0) {
      return;
    }
  }
  else
  {
LABEL_18:
    if ((a4 & 2) == 0) {
      return;
    }
  }
  uint64_t v24 = a1[2];
  if (v24)
  {
    uint64_t v25 = *(void *)(*(void *)(*(void *)(v24 + 48) + 72) + 24);
    uint64_t v26 = *(void *)(v25 + 40);
    if (v26)
    {
      uint64_t v27 = *(void *)(v25 + 32);
      int v28 = (unsigned __int8 *)(v27 + 1);
      uint64_t v29 = v26;
      while (1)
      {
        int v30 = *v28;
        v28 += 2;
        if (v30 == a2) {
          break;
        }
        if (!--v29) {
          return;
        }
      }
      uint64_t v31 = 0;
      float v32 = (unsigned __int8 *)(v27 + 1);
      while (1)
      {
        int v33 = *v32;
        v32 += 2;
        if (v33 == a2) {
          break;
        }
        if (v26 == ++v31)
        {
          uint64_t v34 = -1;
          goto LABEL_30;
        }
      }
      uint64_t v34 = *(unsigned __int8 *)(v27 + 2 * v31);
LABEL_30:
      unsigned int v35 = (void *)(a1[8] + 16 * v34);
      *unsigned int v35 = a3;
      v35[1] = 0;
      unsigned int v36 = (void *)(a1[20] + 16 * v34);
      float v37 = (std::__shared_weak_count *)v36[1];
      *unsigned int v36 = 0;
      v36[1] = 0;
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      float v38 = (void *)(a1[24] + 16 * v34);
      unsigned int v39 = (std::__shared_weak_count *)v38[1];
      void *v38 = 0;
      v38[1] = 0;
      if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::ColoredText::My>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::ColoredText::My>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::ColoredText::My>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ColoredText::My>,geo::StdAllocator<ggl::VertexDataTyped<ggl::ColoredText::My>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ColoredText::My>,geo::StdAllocator<ggl::VertexDataTyped<ggl::ColoredText::My>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ColoredText::My>,geo::StdAllocator<ggl::VertexDataTyped<ggl::ColoredText::My>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ColoredText::My>,geo::StdAllocator<ggl::VertexDataTyped<ggl::ColoredText::My>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::ColoredText::MyMesh::~MyMesh(ggl::ColoredText::MyMesh *this)
{
  ggl::Mesh::~Mesh((ggl::ColoredText::MyMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::ColoredText::MyMesh *)((char *)this - 16));
}

void ggl::ColoredText::MyMesh::~MyMesh(ggl::ColoredText::MyMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::ColoredText::My>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::ColoredText::My>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ColoredText::MyPipelineState::~MyPipelineState(ggl::ColoredText::MyPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::ColoredText::MyPipelineSetup::textureIsEnabled(ggl::ColoredText::MyPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::ColoredText::MyPipelineSetup::constantDataIsEnabled(ggl::ColoredText::MyPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::ColoredText::MyPipelineSetup::~MyPipelineSetup(ggl::ColoredText::MyPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

BOOL ggl::DebugConsole::flush(ggl::DebugConsole *this, ggl::CommandBuffer *a2, const RenderTargetFormat *a3)
{
  uint64_t v6 = *((void *)this + 7);
  uint64_t v7 = *(void **)(v6 + 88);
  uint64_t v8 = (void *)(v6 + 72);
  if (v7) {
    uint64_t v8 = v7;
  }
  uint64_t v11 = v8;
  uint64_t v9 = *v8;
  uint64_t v10 = v11[1];
  BOOL v12 = v10 != v9;
  if (v10 != v9)
  {
    ggl::DebugConsole::setRenderTargetFormat(this, a3);
    ggl::CommandBuffer::pushRenderItem((uint64_t)a2, *((void *)this + 7));
  }
  uint64_t v13 = *((void *)this + 8);
  int v14 = *(void **)(v13 + 88);
  uint64_t v15 = (void *)(v13 + 72);
  if (v14) {
    uint64_t v15 = v14;
  }
  if (v15[1] != *v15)
  {
    ggl::DebugConsole::setRenderTargetFormat(this, a3);
    ggl::CommandBuffer::pushRenderItem((uint64_t)a2, *((void *)this + 8));
    return 1;
  }
  return v12;
}

void ggl::DebugConsole::setRenderTargetFormat(ggl::DebugConsole *this, const RenderTargetFormat *a2)
{
  uint64_t v3 = (long long *)((char *)this + 120);
  unint64_t colorFormatsCount = a2->colorFormatsCount;
  if (colorFormatsCount != *((void *)this + 17)
    || a2->samples != *((_DWORD *)this + 36)
    || a2->depthStencilFormat != *((_DWORD *)this + 37))
  {
    goto LABEL_10;
  }
  if (!colorFormatsCount) {
    return;
  }
  if (a2->colorFormats[0] != *(_DWORD *)v3)
  {
LABEL_10:
    long long v8 = *(_OWORD *)&a2->colorFormatsCount;
    *uint64_t v3 = *(_OWORD *)a2->colorFormats;
    *(_OWORD *)((char *)this + 136) = v8;
    uint64_t v9 = *(void **)(*((void *)this + 7) + 32);
    uint64_t v10 = *(void *)(*((void *)this + 14) + 80);
    uint64_t v12 = *(void *)(v10 + 128);
    uint64_t v11 = *(std::__shared_weak_count **)(v10 + 136);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (char *)operator new(0x198uLL);
    *((void *)v13 + 1) = 0;
    int v14 = (atomic_ullong *)(v13 + 8);
    *((void *)v13 + 2) = 0;
    *(void *)uint64_t v13 = &unk_1EF583318;
    uint64_t v15 = v13 + 24;
    long long v31 = *v3;
    long long v33 = v3[1];
    {
      if (v27)
      {
        {
          if (v27)
          {
            {
              {
                ggl::MeshTyped<ggl::ColoredText::My>::attributesReflection(void)::r = (uint64_t)&ggl::ColoredText::myReflection;
              }
              ggl::MeshTyped<ggl::ColoredText::My>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::ColoredText::My>::attributesReflection(void)::r;
              unk_1E958C7D8 = 1;
            }
            ggl::ColoredText::MyPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::ColoredText::My>::typedReflection(void)::r;
            unk_1E958C720 = &ggl::ColoredText::pipelineDataMyPipelineDeviceStructs(void)::ref;
            qword_1E958C728 = 0;
            {
              ggl::ColoredText::pipelineDataMyPipelineConstantStructs(void)::ref = (uint64_t)ggl::ColoredText::View::reflection(void)::reflection;
            }
            qword_1E958C730 = (uint64_t)&ggl::ColoredText::pipelineDataMyPipelineConstantStructs(void)::ref;
            unk_1E958C738 = vdupq_n_s64(1uLL);
          }
        }
        ggl::ColoredText::MyPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ColoredText::MyPipelineSetup::typedReflection(void)::ref;
        ggl::ColoredTextShader::typedReflection(v27);
        qword_1E9594D88 = (uint64_t)&ggl::ColoredTextShader::typedReflection(void)::ref;
        {
          ggl::ColoredText::pipelineStateMyPipelineAttributeStructBinding(void)::attr = 0;
          *(void *)algn_1E9594DE8 = 0;
          qword_1E9594DF0 = (uint64_t)"";
          dword_1E9594DF8 = 0;
          qword_1E9594E00 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineAttributeBinding_0(void)::attr;
          unk_1E9594E08 = 4;
        }
        qword_1E9594D90 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineAttributeStructBinding(void)::attr;
        *(void *)algn_1E9594D98 = 1;
        qword_1E9594DA0 = 0;
        unk_1E9594DA8 = 1;
        qword_1E9594DB0 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineDeviceStructBinding(void)::ref;
        unk_1E9594DB8 = 0;
        {
          ggl::ColoredText::pipelineStateMyPipelineConstantStructBinding(void)::ref = 0;
          *(void *)algn_1E9594E28 = 0;
          qword_1E9594E30 = (uint64_t)"view";
          dword_1E9594E38 = 3;
          qword_1E9594E40 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineConstantViewBinding(void)::reflection;
          unk_1E9594E48 = 1;
        }
        qword_1E9594DC0 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineConstantStructBinding(void)::ref;
        *(void *)algn_1E9594DC8 = 1;
      }
    }
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)v13 + 4) = 0;
    *((void *)v13 + 5) = 0;
    *((_DWORD *)v13 + 14) = 0;
    *((void *)v13 + 6) = 0;
    *((void *)v13 + 3) = &unk_1EF55B208;
    *((void *)v13 + 8) = &ggl::ColoredText::MyPipelineState::typedReflection(void)::ref;
    *((void *)v13 + 9) = v12;
    *((void *)v13 + 10) = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v13[136] = 0;
    *(_OWORD *)(v13 + 140) = xmmword_1A28FC970;
    *(void *)(v13 + 156) = 0;
    *(void *)(v13 + 172) = 0;
    *(void *)(v13 + 164) = 0;
    v13[184] = 0;
    *(_OWORD *)(v13 + 188) = xmmword_1A28FC970;
    *(void *)(v13 + 204) = 0;
    *(void *)(v13 + 220) = 0;
    *(void *)(v13 + 212) = 0;
    v13[232] = 0;
    *(_OWORD *)(v13 + 236) = xmmword_1A28FC970;
    *(void *)(v13 + 252) = 0;
    *(void *)(v13 + 268) = 0;
    *(void *)(v13 + 260) = 0;
    *(_OWORD *)(v13 + 280) = v31;
    *(_OWORD *)(v13 + 296) = v33;
    v13[312] = 0;
    *((void *)v13 + 48) = 0;
    *((_OWORD *)v13 + 22) = 0u;
    *((_OWORD *)v13 + 23) = 0u;
    *((_OWORD *)v13 + 20) = 0u;
    *((_OWORD *)v13 + 21) = 0u;
    *((void *)v13 + 49) = 0x100000001;
    v13[400] = 0;
    v13[88] = 1;
    *(_WORD *)(v13 + 89) = v29;
    v13[91] = v30;
    *(_OWORD *)(v13 + 92) = xmmword_1A28FCEC0;
    *((_DWORD *)v13 + 27) = 7;
    *((void *)v13 + 14) = 0;
    *((void *)v13 + 15) = 0;
    *((_DWORD *)v13 + 32) = 0;
    v13[132] = 15;
    if (v11)
    {
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      void *v15 = &unk_1EF55A588;
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      void *v15 = &unk_1EF55A588;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
    if (**((void **)v13 + 8) == v9[1])
    {
      int v17 = (void *)v9[2];
      if (v17 && v17 != v15) {
        ggl::PipelineSetup::resetData((uint64_t)v9);
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
      uint64_t v16 = (std::__shared_weak_count *)v9[3];
      v9[2] = v15;
      v9[3] = v13;
      if (!v16)
      {
LABEL_32:
        if (!atomic_fetch_add(v14, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(char *))(*(void *)v13 + 16))(v13);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
        }
        uint64_t v18 = *(void **)(*((void *)this + 8) + 32);
        uint64_t v19 = *(void *)(*((void *)this + 14) + 80);
        uint64_t v21 = *(void *)(v19 + 176);
        float v20 = *(std::__shared_weak_count **)(v19 + 184);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v22 = (char *)operator new(0x198uLL);
        *((void *)v22 + 1) = 0;
        unsigned int v23 = (atomic_ullong *)(v22 + 8);
        *((void *)v22 + 2) = 0;
        *(void *)unsigned int v22 = &unk_1EF583628;
        uint64_t v24 = v22 + 24;
        long long v32 = *v3;
        long long v34 = v3[1];
        {
          if (v28)
          {
            {
              if (v28)
              {
                {
                  {
                    ggl::MeshTyped<ggl::TextureRect::TextureVBO>::attributesReflection(void)::r = (uint64_t)&ggl::TextureRect::textureVBOReflection;
                  }
                  ggl::MeshTyped<ggl::TextureRect::TextureVBO>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TextureRect::TextureVBO>::attributesReflection(void)::r;
                  unk_1E958C800 = 1;
                }
                ggl::TextureRect::TextureRectPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TextureRect::TextureVBO>::typedReflection(void)::r;
                *(void *)algn_1E958C768 = &ggl::TextureRect::pipelineDataTextureRectPipelineDeviceStructs(void)::ref;
                qword_1E958C770 = 0;
                {
                  ggl::TextureRect::pipelineDataTextureRectPipelineConstantStructs(void)::ref = (uint64_t)ggl::TextureRect::View::reflection(void)::reflection;
                }
                qword_1E958C778 = (uint64_t)&ggl::TextureRect::pipelineDataTextureRectPipelineConstantStructs(void)::ref;
                unk_1E958C780 = vdupq_n_s64(1uLL);
              }
            }
            ggl::TextureRect::TextureRectPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TextureRect::TextureRectPipelineSetup::typedReflection(void)::ref;
            ggl::TextureRectShader::typedReflection(v28);
            qword_1E9594CA0 = (uint64_t)&ggl::TextureRectShader::typedReflection(void)::ref;
            {
              ggl::TextureRect::pipelineStateTextureRectPipelineAttributeStructBinding(void)::attr = 0;
              unk_1E9594D00 = 0;
              qword_1E9594D08 = (uint64_t)"";
              dword_1E9594D10 = 0;
              qword_1E9594D18 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineAttributeBinding_0(void)::attr;
              unk_1E9594D20 = 2;
            }
            qword_1E9594CA8 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineAttributeStructBinding(void)::attr;
            unk_1E9594CB0 = 1;
            qword_1E9594CB8 = 0;
            unk_1E9594CC0 = 1;
            qword_1E9594CC8 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineDeviceStructBinding(void)::ref;
            unk_1E9594CD0 = 0;
            {
              ggl::TextureRect::pipelineStateTextureRectPipelineConstantStructBinding(void)::ref = 0;
              unk_1E9594D40 = 0;
              qword_1E9594D48 = (uint64_t)"view";
              dword_1E9594D50 = 3;
              qword_1E9594D58 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineConstantViewBinding(void)::reflection;
              unk_1E9594D60 = 1;
            }
            qword_1E9594CD8 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineConstantStructBinding(void)::ref;
            unk_1E9594CE0 = 1;
          }
        }
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)v22 + 4) = 0;
        *((void *)v22 + 5) = 0;
        *((_DWORD *)v22 + 14) = 0;
        *((void *)v22 + 6) = 0;
        *((void *)v22 + 3) = &unk_1EF55B208;
        *((void *)v22 + 8) = &ggl::TextureRect::TextureRectPipelineState::typedReflection(void)::ref;
        *((void *)v22 + 9) = v21;
        *((void *)v22 + 10) = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v22[136] = 0;
        *(_OWORD *)(v22 + 140) = xmmword_1A28FC970;
        *(void *)(v22 + 156) = 0;
        *(void *)(v22 + 172) = 0;
        *(void *)(v22 + 164) = 0;
        v22[184] = 0;
        *(_OWORD *)(v22 + 188) = xmmword_1A28FC970;
        *(void *)(v22 + 204) = 0;
        *(void *)(v22 + 220) = 0;
        *(void *)(v22 + 212) = 0;
        v22[232] = 0;
        *(_OWORD *)(v22 + 236) = xmmword_1A28FC970;
        *(void *)(v22 + 252) = 0;
        *(void *)(v22 + 268) = 0;
        *(void *)(v22 + 260) = 0;
        *(_OWORD *)(v22 + 280) = v32;
        *(_OWORD *)(v22 + 296) = v34;
        v22[312] = 0;
        *((void *)v22 + 48) = 0;
        *((_OWORD *)v22 + 22) = 0u;
        *((_OWORD *)v22 + 23) = 0u;
        *((_OWORD *)v22 + 20) = 0u;
        *((_OWORD *)v22 + 21) = 0u;
        *((void *)v22 + 49) = 0x100000001;
        v22[400] = 0;
        v22[88] = 1;
        *(_WORD *)(v22 + 89) = v29;
        v22[91] = v30;
        *(_OWORD *)(v22 + 92) = xmmword_1A28FCEC0;
        *((_DWORD *)v22 + 27) = 7;
        *((void *)v22 + 14) = 0;
        *((void *)v22 + 15) = 0;
        *((_DWORD *)v22 + 32) = 0;
        v22[132] = 15;
        if (v20)
        {
          if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
          void *v24 = &unk_1EF55AA00;
          if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        else
        {
          void *v24 = &unk_1EF55AA00;
        }
        atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
        if (**((void **)v22 + 8) == v18[1])
        {
          uint64_t v26 = (void *)v18[2];
          if (v26 && v26 != v24) {
            ggl::PipelineSetup::resetData((uint64_t)v18);
          }
          atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
          uint64_t v25 = (std::__shared_weak_count *)v18[3];
          v18[2] = v24;
          void v18[3] = v22;
          if (!v25) {
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v25 = (std::__shared_weak_count *)v18[3];
          v18[2] = 0;
          void v18[3] = 0;
          if (!v25)
          {
LABEL_56:
            if (!atomic_fetch_add(v23, 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(char *))(*(void *)v22 + 16))(v22);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
            }
            if (!atomic_fetch_add(v23, 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(char *))(*(void *)v22 + 16))(v22);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
            }
            if (!atomic_fetch_add(v14, 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(char *))(*(void *)v13 + 16))(v13);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
            }
            return;
          }
        }
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v16 = (std::__shared_weak_count *)v9[3];
      v9[2] = 0;
      v9[3] = 0;
      if (!v16) {
        goto LABEL_32;
      }
    }
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_32;
  }
  unint64_t v5 = 0;
  while (colorFormatsCount - 1 != v5)
  {
    int v6 = a2->colorFormats[v5 + 1];
    int v7 = *((_DWORD *)this + v5++ + 31);
    if (v6 != v7)
    {
      if (v5 >= colorFormatsCount) {
        return;
      }
      goto LABEL_10;
    }
  }
}

uint64_t std::__shared_ptr_emplace<ggl::TextureRect::TextureRectPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TextureRect::TextureRectPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TextureRect::TextureRectPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::ColoredText::MyPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ColoredText::MyPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ColoredText::MyPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::DebugConsole::~DebugConsole(ggl::DebugConsole *this)
{
  ggl::DebugConsole::~DebugConsole(this);
  JUMPOUT(0x1A6239270);
}

{
  void **v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(void *)this = &unk_1EF55AB60;
  uint64_t v2 = *(void ***)(*((void *)this + 7) + 32);
  uint64_t v3 = *v2[12];
  if (!v3
    || ((*(void (**)(void))(*(void *)v3 + 8))(*v2[12]),
        uint64_t v4 = (void *)*((void *)this + 7),
        (uint64_t v2 = (void **)v4[4]) != 0))
  {
    ((void (*)(void **))(*v2)[1])(v2);
    uint64_t v4 = (void *)*((void *)this + 7);
  }
  unint64_t v5 = v4[3];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v4 = (void *)*((void *)this + 7);
  }
  int v6 = v4[8];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (void *)*((void *)this + 8);
  long long v8 = v7[4];
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    int v7 = (void *)*((void *)this + 8);
  }
  uint64_t v9 = v7[3];
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    int v7 = (void *)*((void *)this + 8);
  }
  uint64_t v10 = v7[8];
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 11);
  if (v11) {
    MEMORY[0x1A6239250](v11, 0x1000C8000313F17);
  }
  uint64_t v12 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v12)
  {
    if (v12[5])
    {
      int v14 = v12[2];
      uint64_t v13 = v12[3];
      if (v13 != v14)
      {
        uint64_t v15 = v12[1];
        uint64_t v16 = *((unsigned __int8 *)v12 + 32);
        int v17 = *((unsigned __int8 *)v12 + 33);
        if (*v12 && *(unsigned char *)(v15 + 17) != 2) {
          (*(void (**)(void))(*(void *)*v12 + 64))(*v12);
        }
        if (v16 && !v17)
        {
          uint64_t v19 = *(void *)(v15 + 56);
          uint64_t v18 = *(void *)(v15 + 64);
          if (v18 == v19) {
            uint64_t v19 = *(void *)(v15 + 80) - *(void *)(v15 + 72);
          }
          if (v14 < v19) {
            uint64_t v19 = v14;
          }
          if (v18 <= v13) {
            uint64_t v18 = v13;
          }
          if (v18 == v19) {
            uint64_t v18 = v19 + *(void *)(v15 + 80) - *(void *)(v15 + 72);
          }
          *(void *)(v15 + 56) = v19;
          *(void *)(v15 + 64) = v18;
        }
      }
    }
    MEMORY[0x1A6239270](v12, 0x1070C40C7B7B3AELL);
  }
  float v20 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
}

void ggl::DebugConsole::DebugConsole(ggl::DebugConsole *this, const ggl::CommonLibrary *a2)
{
  *(void *)this = &unk_1EF55AB60;
  *(_OWORD *)((char *)this + 8) = xmmword_1A28FF970;
  *(_OWORD *)((char *)this + 24) = xmmword_1A28FF980;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 108000;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 26) = 1056964608;
  *((unsigned char *)this + 108) = 0;
  *((void *)this + 14) = a2;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  operator new();
}

void ggl::DebugConsole::begin(ggl::DebugConsole *this)
{
  uint64_t v1 = **(void **)(*(void *)(*((void *)this + 7) + 64) + 64);
  unint64_t v2 = *(void *)(v1 + 8) * *((void *)this + 6);
  uint64_t v3 = *(void *)(v1 + 72);
  unint64_t v4 = *(void *)(v1 + 80) - v3;
  if (v2 != v4)
  {
    if (v2 <= v4)
    {
      if (v2 < v4) {
        *(void *)(v1 + 80) = v3 + v2;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v1 + 72, v2 - v4);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(v1 + 32);
    *(void *)(v1 + 24) = 0;
    *(void *)(v1 + 32) = 0;
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *(void *)(v1 + 120) = 0;
    *(_DWORD *)(v1 + 112) = 0;
    uint64_t v6 = *(void *)(v1 + 80) - *(void *)(v1 + 72);
    *(void *)(v1 + 40) = 0;
    *(void *)(v1 + 48) = v6;
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = v6;
  }
  operator new();
}

void ggl::ConstantDataTyped<ggl::TextureRect::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TextureRect::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureRect::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureRect::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureRect::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::ColoredText::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::ColoredText::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ColoredText::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ColoredText::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5859D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ColoredText::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5859D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ggl::DebugConsole::end(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void **)(this + 72);
  *(void *)(this + 72) = 0;
  if (v2)
  {
    if (v2[5])
    {
      unint64_t v4 = v2[2];
      unint64_t v3 = v2[3];
      if (v3 != v4)
      {
        uint64_t v5 = v2[1];
        int v6 = *((unsigned __int8 *)v2 + 32);
        int v7 = *((unsigned __int8 *)v2 + 33);
        if (*v2 && *(unsigned char *)(v5 + 17) != 2) {
          (*(void (**)(void))(*(void *)*v2 + 64))(*v2);
        }
        if (v6) {
          BOOL v8 = v7 == 0;
        }
        else {
          BOOL v8 = 0;
        }
        if (v8)
        {
          unint64_t v10 = *(void *)(v5 + 56);
          unint64_t v9 = *(void *)(v5 + 64);
          if (v9 == v10) {
            unint64_t v10 = *(void *)(v5 + 80) - *(void *)(v5 + 72);
          }
          if (v4 < v10) {
            unint64_t v10 = v4;
          }
          if (v9 <= v3) {
            unint64_t v9 = v3;
          }
          if (v9 == v10) {
            unint64_t v9 = v10 + *(void *)(v5 + 80) - *(void *)(v5 + 72);
          }
          *(void *)(v5 + 56) = v10;
          *(void *)(v5 + 64) = v9;
        }
      }
    }
    this = MEMORY[0x1A6239270](v2, 0x1070C40C7B7B3AELL);
  }
  uint64_t v11 = *(void **)(v1 + 56);
  uint64_t v12 = *(void *)(v1 + 80);
  v11[9] = 0;
  v11[10] = v12;
  v11[11] = 0;
  v11[12] = 1;
  return this;
}

uint64_t ggl::DebugConsole::setProjection(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 64);
  unint64_t v3 = **(void ***)(*(void *)(*(void *)(result + 56) + 32) + 64);
  unint64_t v5 = v3[8];
  unint64_t v4 = (_DWORD *)v3[9];
  *unint64_t v4 = *a2;
  v4[1] = a2[1];
  v4[2] = a2[2];
  v4[3] = a2[3];
  v4[4] = a2[4];
  v4[5] = a2[5];
  v4[6] = a2[6];
  v4[7] = a2[7];
  v4[8] = a2[8];
  v4[9] = a2[9];
  v4[10] = a2[10];
  v4[11] = a2[11];
  v4[12] = a2[12];
  v4[13] = a2[13];
  v4[14] = a2[14];
  v4[15] = a2[15];
  unint64_t v6 = v3[1];
  if (v5 > v6) {
    unint64_t v6 = v5;
  }
  v3[7] = 0;
  v3[8] = v6;
  int v7 = **(void ***)(*(void *)(v2 + 32) + 64);
  unint64_t v8 = v7[1];
  unint64_t v10 = v7[8];
  unint64_t v9 = (_DWORD *)v7[9];
  *unint64_t v9 = *a2;
  v9[1] = a2[1];
  v9[2] = a2[2];
  v9[3] = a2[3];
  v9[4] = a2[4];
  v9[5] = a2[5];
  v9[6] = a2[6];
  v9[7] = a2[7];
  v9[8] = a2[8];
  v9[9] = a2[9];
  v9[10] = a2[10];
  v9[11] = a2[11];
  v9[12] = a2[12];
  v9[13] = a2[13];
  v9[14] = a2[14];
  v9[15] = a2[15];
  if (v10 > v8) {
    unint64_t v8 = v10;
  }
  v7[7] = 0;
  v7[8] = v8;
  return result;
}

uint64_t ggl::DebugConsole::drawString(uint64_t this, int8x16_t *a2, unint64_t a3, double a4, int32x2_t a5)
{
  if (!a2) {
    return this;
  }
  float v6 = *(float *)(this + 8);
  float v5 = *(float *)(this + 12);
  if (!a3)
  {
    float v11 = *(float *)(this + 28);
    float v8 = 0.0;
    goto LABEL_29;
  }
  uint64_t v7 = 0;
  float v8 = 0.0;
  do
  {
    unsigned int v9 = a2->u8[v7];
    if (v9 > 0x21 || v9 == 32)
    {
      float v8 = *(float *)(this + 24) + v8;
      goto LABEL_5;
    }
    if (v9 == 9)
    {
      float v8 = v8 + (float)(*(float *)(this + 24) * 4.0);
      goto LABEL_5;
    }
    if (v9 == 10) {
      break;
    }
LABEL_5:
    ++v7;
  }
  while (a3 != v7);
  a5.i32[0] = *(_DWORD *)(this + 28);
  if (a3 >= 8)
  {
    if (a3 >= 0x20)
    {
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      float32x4_t v12 = 0uLL;
      float32x4_t v13 = (float32x4_t)*(unsigned int *)(this + 28);
      int8x16_t v14 = (int8x16_t)vdupq_lane_s32(a5, 0);
      uint64_t v15 = a2 + 1;
      v16.i64[0] = 0xA0A0A0A0A0A0A0ALL;
      v16.i64[1] = 0xA0A0A0A0A0A0A0ALL;
      v17.i64[0] = 0x8000000080000000;
      v17.i64[1] = 0x8000000080000000;
      unint64_t v18 = a3 & 0xFFFFFFFFFFFFFFE0;
      float32x4_t v19 = 0uLL;
      float32x4_t v20 = 0uLL;
      float32x4_t v21 = 0uLL;
      float32x4_t v22 = 0uLL;
      float32x4_t v23 = 0uLL;
      float32x4_t v24 = 0uLL;
      do
      {
        int8x16_t v25 = vceqq_s8(v15[-1], v16);
        int16x8_t v26 = vmovl_high_s8(v25);
        int16x8_t v27 = vmovl_s8(*(int8x8_t *)v25.i8);
        int8x16_t v28 = vceqq_s8(*v15, v16);
        int16x8_t v29 = vmovl_high_s8(v28);
        int16x8_t v30 = vmovl_s8(*(int8x8_t *)v28.i8);
        float32x4_t v20 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v26), v14, v17), v20);
        float32x4_t v19 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v26.i8), v14, v17), v19);
        float32x4_t v12 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v27), v14, v17), v12);
        float32x4_t v13 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v27.i8), v14, v17), v13);
        float32x4_t v24 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v29), v14, v17), v24);
        float32x4_t v23 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8), v14, v17), v23);
        float32x4_t v22 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v30), v14, v17), v22);
        float32x4_t v21 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v30.i8), v14, v17), v21);
        v15 += 2;
        v18 -= 32;
      }
      while (v18);
      float32x4_t v31 = vaddq_f32(vaddq_f32(vaddq_f32(v21, v13), vaddq_f32(v23, v19)), vaddq_f32(vaddq_f32(v22, v12), vaddq_f32(v24, v20)));
      float v11 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31));
      if (v10 == a3) {
        goto LABEL_29;
      }
      if ((a3 & 0x18) == 0) {
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v10 = 0;
      float v11 = *(float *)(this + 28);
    }
    unint64_t v32 = v10;
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v33 = 0uLL;
    float32x4_t v34 = (float32x4_t)LODWORD(v11);
    int8x16_t v35 = (int8x16_t)vdupq_lane_s32(a5, 0);
    unint64_t v36 = v32 - (a3 & 0xFFFFFFFFFFFFFFF8);
    float v37 = &a2->i8[v32];
    v38.i64[0] = 0x8000000080000000;
    v38.i64[1] = 0x8000000080000000;
    do
    {
      int8x8_t v39 = *(int8x8_t *)v37;
      v37 += 8;
      int16x8_t v40 = vmovl_s8(vceq_s8(v39, (int8x8_t)0xA0A0A0A0A0A0A0ALL));
      float32x4_t v33 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v40), v35, v38), v33);
      float32x4_t v34 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v40.i8), v35, v38), v34);
      v36 += 8;
    }
    while (v36);
    float32x4_t v41 = vaddq_f32(v34, v33);
    float v11 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v41, v41));
    if (v10 != a3) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v10 = 0;
    float v11 = *(float *)(this + 28);
LABEL_24:
    unint64_t v42 = a3 - v10;
    unsigned int v43 = &a2->i8[v10];
    do
    {
      int v44 = *(unsigned __int8 *)v43++;
      if (v44 == 10) {
        float v45 = *(float *)(this + 28);
      }
      else {
        float v45 = -0.0;
      }
      float v11 = v45 + v11;
      --v42;
    }
    while (v42);
  }
LABEL_29:
  float v46 = v6 - v8;
  int v47 = *(_DWORD *)(this + 40);
  int v48 = *(_DWORD *)(this + 44);
  float v49 = v6 + (float)(v8 * -0.5);
  if (v47 == 1) {
    float v6 = v49;
  }
  if (v47 == 2) {
    float v6 = v46;
  }
  float v50 = v5 - v11;
  float v51 = v5 + (float)(v11 * -0.5);
  if (v48 == 1) {
    float v5 = v51;
  }
  if (v48 == 2) {
    float v5 = v50;
  }
  unint64_t v52 = (108000 - *(void *)(this + 80)) / 6uLL;
  if (v52 >= a3) {
    unint64_t v52 = a3;
  }
  if (v52)
  {
    uint64_t v53 = 0;
    unint64_t v54 = 1 - v52;
    int32x2_t v55 = &a2->i8[1];
    do
    {
      unsigned int v82 = a2->u8[v53];
      if (v82 >= 0x22)
      {
        float v56 = (float)(int)(v82 - 33);
        float v58 = *(float *)(this + 16);
        float v57 = *(float *)(this + 20);
        float v59 = v56 * 0.0097656;
        float v60 = (float)(v56 * 0.0097656) + 0.0097656;
        if (*(unsigned char *)(this + 108)) {
          float v61 = v56 * 0.0097656;
        }
        else {
          float v61 = (float)(v56 * 0.0097656) + 0.0097656;
        }
        if (!*(unsigned char *)(this + 108)) {
          float v60 = v59;
        }
        uint64_t v62 = *(void *)(this + 72);
        uint64_t v63 = *(void *)(this + 80);
        *(void *)(this + 80) = v63 + 1;
        uint64_t v64 = *(void *)(v62 + 40) + 24 * v63;
        *(float *)uint64_t v64 = v6;
        *(float *)(v64 + 4) = v5;
        *(_DWORD *)(v64 + 8) = 0;
        *(float *)(v64 + 12) = v60;
        *(unsigned char *)(v64 + 16) = *(unsigned char *)(this + 96);
        *(unsigned char *)(v64 + 17) = *(unsigned char *)(this + 97);
        *(unsigned char *)(v64 + 18) = *(unsigned char *)(this + 98);
        *(unsigned char *)(v64 + 19) = *(unsigned char *)(this + 99);
        *(unsigned char *)(v64 + 20) = *(unsigned char *)(this + 100);
        *(unsigned char *)(v64 + 21) = *(unsigned char *)(this + 101);
        *(unsigned char *)(v64 + 22) = *(unsigned char *)(this + 102);
        *(unsigned char *)(v64 + 23) = *(unsigned char *)(this + 103);
        float v65 = v57 + v5;
        uint64_t v66 = *(void *)(this + 72);
        uint64_t v67 = *(void *)(this + 80);
        *(void *)(this + 80) = v67 + 1;
        uint64_t v68 = *(void *)(v66 + 40) + 24 * v67;
        *(float *)uint64_t v68 = v6;
        *(float *)(v68 + 4) = v65;
        *(_DWORD *)(v68 + 8) = 0;
        *(float *)(v68 + 12) = v61;
        *(unsigned char *)(v68 + 16) = *(unsigned char *)(this + 96);
        *(unsigned char *)(v68 + 17) = *(unsigned char *)(this + 97);
        *(unsigned char *)(v68 + 18) = *(unsigned char *)(this + 98);
        *(unsigned char *)(v68 + 19) = *(unsigned char *)(this + 99);
        *(unsigned char *)(v68 + 20) = *(unsigned char *)(this + 100);
        *(unsigned char *)(v68 + 21) = *(unsigned char *)(this + 101);
        *(unsigned char *)(v68 + 22) = *(unsigned char *)(this + 102);
        *(unsigned char *)(v68 + 23) = *(unsigned char *)(this + 103);
        float v69 = v58 + v6;
        uint64_t v70 = *(void *)(this + 72);
        uint64_t v71 = *(void *)(this + 80);
        *(void *)(this + 80) = v71 + 1;
        uint64_t v72 = *(void *)(v70 + 40) + 24 * v71;
        *(float *)uint64_t v72 = v69;
        *(float *)(v72 + 4) = v5;
        *(_DWORD *)(v72 + 8) = 1065353216;
        *(float *)(v72 + 12) = v60;
        *(unsigned char *)(v72 + 16) = *(unsigned char *)(this + 96);
        *(unsigned char *)(v72 + 17) = *(unsigned char *)(this + 97);
        *(unsigned char *)(v72 + 18) = *(unsigned char *)(this + 98);
        *(unsigned char *)(v72 + 19) = *(unsigned char *)(this + 99);
        *(unsigned char *)(v72 + 20) = *(unsigned char *)(this + 100);
        *(unsigned char *)(v72 + 21) = *(unsigned char *)(this + 101);
        *(unsigned char *)(v72 + 22) = *(unsigned char *)(this + 102);
        *(unsigned char *)(v72 + 23) = *(unsigned char *)(this + 103);
        uint64_t v73 = *(void *)(this + 72);
        uint64_t v74 = *(void *)(this + 80);
        *(void *)(this + 80) = v74 + 1;
        uint64_t v75 = *(void *)(v73 + 40) + 24 * v74;
        *(float *)uint64_t v75 = v69;
        *(float *)(v75 + 4) = v5;
        *(_DWORD *)(v75 + 8) = 1065353216;
        *(float *)(v75 + 12) = v60;
        *(unsigned char *)(v75 + 16) = *(unsigned char *)(this + 96);
        *(unsigned char *)(v75 + 17) = *(unsigned char *)(this + 97);
        *(unsigned char *)(v75 + 18) = *(unsigned char *)(this + 98);
        *(unsigned char *)(v75 + 19) = *(unsigned char *)(this + 99);
        *(unsigned char *)(v75 + 20) = *(unsigned char *)(this + 100);
        *(unsigned char *)(v75 + 21) = *(unsigned char *)(this + 101);
        *(unsigned char *)(v75 + 22) = *(unsigned char *)(this + 102);
        *(unsigned char *)(v75 + 23) = *(unsigned char *)(this + 103);
        uint64_t v76 = *(void *)(this + 72);
        uint64_t v77 = *(void *)(this + 80);
        *(void *)(this + 80) = v77 + 1;
        uint64_t v78 = *(void *)(v76 + 40) + 24 * v77;
        *(float *)uint64_t v78 = v6;
        *(float *)(v78 + 4) = v65;
        *(_DWORD *)(v78 + 8) = 0;
        *(float *)(v78 + 12) = v61;
        *(unsigned char *)(v78 + 16) = *(unsigned char *)(this + 96);
        *(unsigned char *)(v78 + 17) = *(unsigned char *)(this + 97);
        *(unsigned char *)(v78 + 18) = *(unsigned char *)(this + 98);
        *(unsigned char *)(v78 + 19) = *(unsigned char *)(this + 99);
        *(unsigned char *)(v78 + 20) = *(unsigned char *)(this + 100);
        *(unsigned char *)(v78 + 21) = *(unsigned char *)(this + 101);
        *(unsigned char *)(v78 + 22) = *(unsigned char *)(this + 102);
        *(unsigned char *)(v78 + 23) = *(unsigned char *)(this + 103);
        uint64_t v79 = *(void *)(this + 72);
        uint64_t v80 = *(void *)(this + 80);
        *(void *)(this + 80) = v80 + 1;
        uint64_t v81 = *(void *)(v79 + 40) + 24 * v80;
        *(float *)uint64_t v81 = v69;
        *(float *)(v81 + 4) = v65;
        *(_DWORD *)(v81 + 8) = 1065353216;
        *(float *)(v81 + 12) = v61;
        *(unsigned char *)(v81 + 16) = *(unsigned char *)(this + 96);
        *(unsigned char *)(v81 + 17) = *(unsigned char *)(this + 97);
        *(unsigned char *)(v81 + 18) = *(unsigned char *)(this + 98);
        *(unsigned char *)(v81 + 19) = *(unsigned char *)(this + 99);
        *(unsigned char *)(v81 + 20) = *(unsigned char *)(this + 100);
        *(unsigned char *)(v81 + 21) = *(unsigned char *)(this + 101);
        *(unsigned char *)(v81 + 22) = *(unsigned char *)(this + 102);
        *(unsigned char *)(v81 + 23) = *(unsigned char *)(this + 103);
      }
      else if (v82 != 32)
      {
        if (v82 == 10)
        {
          float v83 = 0.0;
          if (v52 + ~v53)
          {
            float v84 = v55;
            unint64_t v85 = v54;
            do
            {
              unsigned int v88 = *(unsigned __int8 *)v84++;
              unsigned int v87 = v88;
              if (v88 > 0x21 || v87 == 32)
              {
                float v83 = *(float *)(this + 24) + v83;
              }
              else if (v87 == 9)
              {
                float v83 = v83 + (float)(*(float *)(this + 24) * 4.0);
              }
              else if (v87 == 10)
              {
                break;
              }
            }
            while (!__CFADD__(v85++, 1));
          }
          float v5 = *(float *)(this + 28) + v5;
          int v89 = *(_DWORD *)(this + 40);
          switch(v89)
          {
            case 2:
              float v6 = *(float *)(this + 8) - v83;
              break;
            case 1:
              float v6 = *(float *)(this + 8) + (float)(v83 * -0.5);
              break;
            case 0:
              float v6 = *(float *)(this + 8);
              break;
          }
        }
        else if (v82 == 9)
        {
          float v6 = v6 + (float)(*(float *)(this + 24) * 4.0);
        }
        goto LABEL_48;
      }
      float v6 = *(float *)(this + 24) + v6;
LABEL_48:
      ++v53;
      ++v54;
      ++v55;
    }
    while (v53 != v52);
  }
  *(float *)(this + 8) = v6;
  *(float *)(this + 12) = v5;
  return this;
}

float ggl::DebugConsole::drawBar(ggl::DebugConsole *this, float result)
{
  uint64_t v2 = *((void *)this + 10);
  if ((unint64_t)(v2 + 6) <= *((void *)this + 6))
  {
    float v3 = *((float *)this + 5);
    float v4 = 0.92773;
    if (*((unsigned char *)this + 108)) {
      float v5 = 0.92773;
    }
    else {
      float v5 = 0.9375;
    }
    if (*((unsigned char *)this + 108)) {
      float v4 = 0.9375;
    }
    uint64_t v6 = *((void *)this + 9);
    *((void *)this + 10) = v2 + 1;
    uint64_t v7 = *(void *)(v6 + 40) + 24 * v2;
    *(_DWORD *)uint64_t v7 = *((_DWORD *)this + 2);
    *(_DWORD *)(v7 + 4) = *((_DWORD *)this + 3);
    *(_DWORD *)(v7 + 8) = 0;
    *(float *)(v7 + 12) = v4;
    *(unsigned char *)(v7 + 16) = *((unsigned char *)this + 96);
    *(unsigned char *)(v7 + 17) = *((unsigned char *)this + 97);
    *(unsigned char *)(v7 + 18) = *((unsigned char *)this + 98);
    *(unsigned char *)(v7 + 19) = *((unsigned char *)this + 99);
    *(unsigned char *)(v7 + 20) = *((unsigned char *)this + 100);
    *(unsigned char *)(v7 + 21) = *((unsigned char *)this + 101);
    *(unsigned char *)(v7 + 22) = *((unsigned char *)this + 102);
    *(unsigned char *)(v7 + 23) = *((unsigned char *)this + 103);
    int v8 = *((_DWORD *)this + 2);
    float v9 = *((float *)this + 3) + v3;
    uint64_t v10 = *((void *)this + 9);
    uint64_t v11 = *((void *)this + 10);
    *((void *)this + 10) = v11 + 1;
    uint64_t v12 = *(void *)(v10 + 40) + 24 * v11;
    *(_DWORD *)uint64_t v12 = v8;
    *(float *)(v12 + 4) = v9;
    *(_DWORD *)(v12 + 8) = 0;
    *(float *)(v12 + 12) = v5;
    *(unsigned char *)(v12 + 16) = *((unsigned char *)this + 96);
    *(unsigned char *)(v12 + 17) = *((unsigned char *)this + 97);
    *(unsigned char *)(v12 + 18) = *((unsigned char *)this + 98);
    *(unsigned char *)(v12 + 19) = *((unsigned char *)this + 99);
    *(unsigned char *)(v12 + 20) = *((unsigned char *)this + 100);
    *(unsigned char *)(v12 + 21) = *((unsigned char *)this + 101);
    *(unsigned char *)(v12 + 22) = *((unsigned char *)this + 102);
    *(unsigned char *)(v12 + 23) = *((unsigned char *)this + 103);
    int v13 = *((_DWORD *)this + 3);
    float v14 = *((float *)this + 2) + result;
    uint64_t v15 = *((void *)this + 9);
    uint64_t v16 = *((void *)this + 10);
    *((void *)this + 10) = v16 + 1;
    uint64_t v17 = *(void *)(v15 + 40) + 24 * v16;
    *(float *)uint64_t v17 = v14;
    *(_DWORD *)(v17 + 4) = v13;
    *(_DWORD *)(v17 + 8) = 1065353216;
    *(float *)(v17 + 12) = v4;
    *(unsigned char *)(v17 + 16) = *((unsigned char *)this + 96);
    *(unsigned char *)(v17 + 17) = *((unsigned char *)this + 97);
    *(unsigned char *)(v17 + 18) = *((unsigned char *)this + 98);
    *(unsigned char *)(v17 + 19) = *((unsigned char *)this + 99);
    *(unsigned char *)(v17 + 20) = *((unsigned char *)this + 100);
    *(unsigned char *)(v17 + 21) = *((unsigned char *)this + 101);
    *(unsigned char *)(v17 + 22) = *((unsigned char *)this + 102);
    *(unsigned char *)(v17 + 23) = *((unsigned char *)this + 103);
    int v18 = *((_DWORD *)this + 3);
    float v19 = *((float *)this + 2) + result;
    uint64_t v20 = *((void *)this + 9);
    uint64_t v21 = *((void *)this + 10);
    *((void *)this + 10) = v21 + 1;
    uint64_t v22 = *(void *)(v20 + 40) + 24 * v21;
    *(float *)uint64_t v22 = v19;
    *(_DWORD *)(v22 + 4) = v18;
    *(_DWORD *)(v22 + 8) = 1065353216;
    *(float *)(v22 + 12) = v4;
    *(unsigned char *)(v22 + 16) = *((unsigned char *)this + 96);
    *(unsigned char *)(v22 + 17) = *((unsigned char *)this + 97);
    *(unsigned char *)(v22 + 18) = *((unsigned char *)this + 98);
    *(unsigned char *)(v22 + 19) = *((unsigned char *)this + 99);
    *(unsigned char *)(v22 + 20) = *((unsigned char *)this + 100);
    *(unsigned char *)(v22 + 21) = *((unsigned char *)this + 101);
    *(unsigned char *)(v22 + 22) = *((unsigned char *)this + 102);
    *(unsigned char *)(v22 + 23) = *((unsigned char *)this + 103);
    int v23 = *((_DWORD *)this + 2);
    float v24 = *((float *)this + 3) + v3;
    uint64_t v25 = *((void *)this + 9);
    uint64_t v26 = *((void *)this + 10);
    *((void *)this + 10) = v26 + 1;
    uint64_t v27 = *(void *)(v25 + 40) + 24 * v26;
    *(_DWORD *)uint64_t v27 = v23;
    *(float *)(v27 + 4) = v24;
    *(_DWORD *)(v27 + 8) = 0;
    *(float *)(v27 + 12) = v5;
    *(unsigned char *)(v27 + 16) = *((unsigned char *)this + 96);
    *(unsigned char *)(v27 + 17) = *((unsigned char *)this + 97);
    *(unsigned char *)(v27 + 18) = *((unsigned char *)this + 98);
    *(unsigned char *)(v27 + 19) = *((unsigned char *)this + 99);
    *(unsigned char *)(v27 + 20) = *((unsigned char *)this + 100);
    *(unsigned char *)(v27 + 21) = *((unsigned char *)this + 101);
    *(unsigned char *)(v27 + 22) = *((unsigned char *)this + 102);
    *(unsigned char *)(v27 + 23) = *((unsigned char *)this + 103);
    float v28 = *((float *)this + 2) + result;
    float v29 = *((float *)this + 3) + v3;
    uint64_t v30 = *((void *)this + 9);
    uint64_t v31 = *((void *)this + 10);
    *((void *)this + 10) = v31 + 1;
    uint64_t v32 = *(void *)(v30 + 40) + 24 * v31;
    *(float *)uint64_t v32 = v28;
    *(float *)(v32 + 4) = v29;
    *(_DWORD *)(v32 + 8) = 1065353216;
    *(float *)(v32 + 12) = v5;
    *(unsigned char *)(v32 + 16) = *((unsigned char *)this + 96);
    *(unsigned char *)(v32 + 17) = *((unsigned char *)this + 97);
    *(unsigned char *)(v32 + 18) = *((unsigned char *)this + 98);
    *(unsigned char *)(v32 + 19) = *((unsigned char *)this + 99);
    *(unsigned char *)(v32 + 20) = *((unsigned char *)this + 100);
    *(unsigned char *)(v32 + 21) = *((unsigned char *)this + 101);
    *(unsigned char *)(v32 + 22) = *((unsigned char *)this + 102);
    *(unsigned char *)(v32 + 23) = *((unsigned char *)this + 103);
    uint64_t result = *((float *)this + 2) + result;
    *((float *)this + 2) = result;
  }
  return result;
}

float32x2_t *ggl::DebugConsole::drawSymbol(float32x2_t *result, char a2)
{
  float32x2_t v2 = result[10];
  if ((unint64_t)(*(void *)&v2 + 6) <= *(void *)&result[6])
  {
    float v3 = (float)((a2 - 127) - 33);
    float v4 = v3 * 0.0097656;
    float v5 = (float)(v3 * 0.0097656) + 0.0097656;
    if (result[13].i8[4]) {
      float v6 = v3 * 0.0097656;
    }
    else {
      float v6 = (float)(v3 * 0.0097656) + 0.0097656;
    }
    if (result[13].i8[4]) {
      float v4 = v5;
    }
    float32x2_t v7 = result[9];
    result[10] = (float32x2_t)(*(void *)&v2 + 1);
    uint64_t v8 = *(void *)(*(void *)&v7 + 40) + 24 * *(void *)&v2;
    float32x2_t v9 = result[4];
    float32x2_t v10 = vmla_f32(result[1], (float32x2_t)0xBF000000BF000000, v9);
    *(float32x2_t *)uint64_t v8 = v10;
    *(_DWORD *)(v8 + 8) = 0;
    *(float *)(v8 + 12) = v4;
    *(unsigned char *)(v8 + 16) = result[12].i8[0];
    *(unsigned char *)(v8 + 17) = result[12].i8[1];
    *(unsigned char *)(v8 + 18) = result[12].i8[2];
    *(unsigned char *)(v8 + 19) = result[12].i8[3];
    *(unsigned char *)(v8 + 20) = result[12].i8[4];
    *(unsigned char *)(v8 + 21) = result[12].i8[5];
    *(unsigned char *)(v8 + 22) = result[12].i8[6];
    *(unsigned char *)(v8 + 23) = result[12].i8[7];
    float32x2_t v11 = result[9];
    float32x2_t v12 = result[10];
    result[10] = (float32x2_t)(*(void *)&v12 + 1);
    uint64_t v13 = *(void *)(*(void *)&v11 + 40) + 24 * *(void *)&v12;
    float32x2_t v14 = vadd_f32(v10, v9);
    unint64_t v15 = __PAIR64__(v10.u32[1], v14.u32[0]);
    v10.i32[1] = v14.i32[1];
    *(float32x2_t *)uint64_t v13 = v10;
    *(_DWORD *)(v13 + 8) = 0;
    *(float *)(v13 + 12) = v6;
    *(unsigned char *)(v13 + 16) = result[12].i8[0];
    *(unsigned char *)(v13 + 17) = result[12].i8[1];
    *(unsigned char *)(v13 + 18) = result[12].i8[2];
    *(unsigned char *)(v13 + 19) = result[12].i8[3];
    *(unsigned char *)(v13 + 20) = result[12].i8[4];
    *(unsigned char *)(v13 + 21) = result[12].i8[5];
    *(unsigned char *)(v13 + 22) = result[12].i8[6];
    *(unsigned char *)(v13 + 23) = result[12].i8[7];
    float32x2_t v16 = result[9];
    float32x2_t v17 = result[10];
    result[10] = (float32x2_t)(*(void *)&v17 + 1);
    uint64_t v18 = *(void *)(*(void *)&v16 + 40) + 24 * *(void *)&v17;
    *(void *)uint64_t v18 = v15;
    *(_DWORD *)(v18 + 8) = 1065353216;
    *(float *)(v18 + 12) = v4;
    *(unsigned char *)(v18 + 16) = result[12].i8[0];
    *(unsigned char *)(v18 + 17) = result[12].i8[1];
    *(unsigned char *)(v18 + 18) = result[12].i8[2];
    *(unsigned char *)(v18 + 19) = result[12].i8[3];
    *(unsigned char *)(v18 + 20) = result[12].i8[4];
    *(unsigned char *)(v18 + 21) = result[12].i8[5];
    *(unsigned char *)(v18 + 22) = result[12].i8[6];
    *(unsigned char *)(v18 + 23) = result[12].i8[7];
    float32x2_t v19 = result[9];
    float32x2_t v20 = result[10];
    result[10] = (float32x2_t)(*(void *)&v20 + 1);
    uint64_t v21 = *(void *)(*(void *)&v19 + 40) + 24 * *(void *)&v20;
    *(void *)uint64_t v21 = v15;
    *(_DWORD *)(v21 + 8) = 1065353216;
    *(float *)(v21 + 12) = v4;
    *(unsigned char *)(v21 + 16) = result[12].i8[0];
    *(unsigned char *)(v21 + 17) = result[12].i8[1];
    *(unsigned char *)(v21 + 18) = result[12].i8[2];
    *(unsigned char *)(v21 + 19) = result[12].i8[3];
    *(unsigned char *)(v21 + 20) = result[12].i8[4];
    *(unsigned char *)(v21 + 21) = result[12].i8[5];
    *(unsigned char *)(v21 + 22) = result[12].i8[6];
    *(unsigned char *)(v21 + 23) = result[12].i8[7];
    float32x2_t v22 = result[9];
    float32x2_t v23 = result[10];
    result[10] = (float32x2_t)(*(void *)&v23 + 1);
    uint64_t v24 = *(void *)(*(void *)&v22 + 40) + 24 * *(void *)&v23;
    *(float32x2_t *)uint64_t v24 = v10;
    *(_DWORD *)(v24 + 8) = 0;
    *(float *)(v24 + 12) = v6;
    *(unsigned char *)(v24 + 16) = result[12].i8[0];
    *(unsigned char *)(v24 + 17) = result[12].i8[1];
    *(unsigned char *)(v24 + 18) = result[12].i8[2];
    *(unsigned char *)(v24 + 19) = result[12].i8[3];
    *(unsigned char *)(v24 + 20) = result[12].i8[4];
    *(unsigned char *)(v24 + 21) = result[12].i8[5];
    *(unsigned char *)(v24 + 22) = result[12].i8[6];
    *(unsigned char *)(v24 + 23) = result[12].i8[7];
    float32x2_t v25 = result[9];
    float32x2_t v26 = result[10];
    result[10] = (float32x2_t)(*(void *)&v26 + 1);
    uint64_t v27 = *(void *)(*(void *)&v25 + 40) + 24 * *(void *)&v26;
    *(float32x2_t *)uint64_t v27 = v14;
    *(_DWORD *)(v27 + 8) = 1065353216;
    *(float *)(v27 + 12) = v6;
    *(unsigned char *)(v27 + 16) = result[12].i8[0];
    *(unsigned char *)(v27 + 17) = result[12].i8[1];
    *(unsigned char *)(v27 + 18) = result[12].i8[2];
    *(unsigned char *)(v27 + 19) = result[12].i8[3];
    *(unsigned char *)(v27 + 20) = result[12].i8[4];
    *(unsigned char *)(v27 + 21) = result[12].i8[5];
    *(unsigned char *)(v27 + 22) = result[12].i8[6];
    *(unsigned char *)(v27 + 23) = result[12].i8[7];
  }
  return result;
}

float ggl::DebugConsole::drawLine(uint64_t a1, float *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if ((unint64_t)(v2 + 6) <= *(void *)(a1 + 48))
  {
    float v3 = *(float *)(a1 + 8);
    float v4 = *(float *)(a1 + 12);
    float v5 = a2[1] - v4;
    float v6 = v3 - *a2;
    float v7 = *(float *)(a1 + 104) / sqrtf((float)(v6 * v6) + (float)(v5 * v5));
    float v8 = v7 * v5;
    float v9 = v7 * v6;
    uint64_t v10 = *(void *)(a1 + 72);
    *(void *)(a1 + 80) = v2 + 1;
    uint64_t v11 = *(void *)(v10 + 40) + 24 * v2;
    *(float *)uint64_t v11 = v3 - v8;
    *(float *)(v11 + 4) = v4 - (float)(v7 * v6);
    *(void *)(v11 + 8) = 0x3F6D800000000000;
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(v11 + 17) = *(unsigned char *)(a1 + 97);
    *(unsigned char *)(v11 + 18) = *(unsigned char *)(a1 + 98);
    *(unsigned char *)(v11 + 19) = *(unsigned char *)(a1 + 99);
    *(unsigned char *)(v11 + 20) = *(unsigned char *)(a1 + 100);
    *(unsigned char *)(v11 + 21) = *(unsigned char *)(a1 + 101);
    *(unsigned char *)(v11 + 22) = *(unsigned char *)(a1 + 102);
    *(unsigned char *)(v11 + 23) = *(unsigned char *)(a1 + 103);
    float v12 = *a2 + v8;
    float v13 = a2[1] + (float)(v7 * v6);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v15 + 1;
    uint64_t v16 = *(void *)(v14 + 40) + 24 * v15;
    *(float *)uint64_t v16 = v12;
    *(float *)(v16 + 4) = v13;
    *(void *)(v16 + 8) = 0x3F7000003F800000;
    *(unsigned char *)(v16 + 16) = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(v16 + 17) = *(unsigned char *)(a1 + 97);
    *(unsigned char *)(v16 + 18) = *(unsigned char *)(a1 + 98);
    *(unsigned char *)(v16 + 19) = *(unsigned char *)(a1 + 99);
    *(unsigned char *)(v16 + 20) = *(unsigned char *)(a1 + 100);
    *(unsigned char *)(v16 + 21) = *(unsigned char *)(a1 + 101);
    *(unsigned char *)(v16 + 22) = *(unsigned char *)(a1 + 102);
    *(unsigned char *)(v16 + 23) = *(unsigned char *)(a1 + 103);
    float v17 = *(float *)(a1 + 8) + v8;
    float v18 = *(float *)(a1 + 12) + v9;
    uint64_t v19 = *(void *)(a1 + 72);
    uint64_t v20 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v20 + 1;
    uint64_t v21 = *(void *)(v19 + 40) + 24 * v20;
    *(float *)uint64_t v21 = v17;
    *(float *)(v21 + 4) = v18;
    *(void *)(v21 + 8) = 0x3F70000000000000;
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(v21 + 17) = *(unsigned char *)(a1 + 97);
    *(unsigned char *)(v21 + 18) = *(unsigned char *)(a1 + 98);
    *(unsigned char *)(v21 + 19) = *(unsigned char *)(a1 + 99);
    *(unsigned char *)(v21 + 20) = *(unsigned char *)(a1 + 100);
    *(unsigned char *)(v21 + 21) = *(unsigned char *)(a1 + 101);
    *(unsigned char *)(v21 + 22) = *(unsigned char *)(a1 + 102);
    *(unsigned char *)(v21 + 23) = *(unsigned char *)(a1 + 103);
    float v22 = *(float *)(a1 + 8) - v8;
    float v23 = *(float *)(a1 + 12) - v9;
    uint64_t v24 = *(void *)(a1 + 72);
    uint64_t v25 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v25 + 1;
    uint64_t v26 = *(void *)(v24 + 40) + 24 * v25;
    *(float *)uint64_t v26 = v22;
    *(float *)(v26 + 4) = v23;
    *(void *)(v26 + 8) = 0x3F6D800000000000;
    *(unsigned char *)(v26 + 16) = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(v26 + 17) = *(unsigned char *)(a1 + 97);
    *(unsigned char *)(v26 + 18) = *(unsigned char *)(a1 + 98);
    *(unsigned char *)(v26 + 19) = *(unsigned char *)(a1 + 99);
    *(unsigned char *)(v26 + 20) = *(unsigned char *)(a1 + 100);
    *(unsigned char *)(v26 + 21) = *(unsigned char *)(a1 + 101);
    *(unsigned char *)(v26 + 22) = *(unsigned char *)(a1 + 102);
    *(unsigned char *)(v26 + 23) = *(unsigned char *)(a1 + 103);
    float v27 = *a2 - v8;
    float v28 = a2[1] - v9;
    uint64_t v29 = *(void *)(a1 + 72);
    uint64_t v30 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v30 + 1;
    uint64_t v31 = *(void *)(v29 + 40) + 24 * v30;
    *(float *)uint64_t v31 = v27;
    *(float *)(v31 + 4) = v28;
    *(void *)(v31 + 8) = 0x3F6D80003F800000;
    *(unsigned char *)(v31 + 16) = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(v31 + 17) = *(unsigned char *)(a1 + 97);
    *(unsigned char *)(v31 + 18) = *(unsigned char *)(a1 + 98);
    *(unsigned char *)(v31 + 19) = *(unsigned char *)(a1 + 99);
    *(unsigned char *)(v31 + 20) = *(unsigned char *)(a1 + 100);
    *(unsigned char *)(v31 + 21) = *(unsigned char *)(a1 + 101);
    *(unsigned char *)(v31 + 22) = *(unsigned char *)(a1 + 102);
    *(unsigned char *)(v31 + 23) = *(unsigned char *)(a1 + 103);
    float v32 = *a2 + v8;
    float v33 = a2[1] + v9;
    uint64_t v34 = *(void *)(a1 + 72);
    uint64_t v35 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v35 + 1;
    uint64_t v36 = *(void *)(v34 + 40) + 24 * v35;
    *(float *)uint64_t v36 = v32;
    *(float *)(v36 + 4) = v33;
    *(void *)(v36 + 8) = 0x3F7000003F800000;
    *(unsigned char *)(v36 + 16) = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(v36 + 17) = *(unsigned char *)(a1 + 97);
    *(unsigned char *)(v36 + 18) = *(unsigned char *)(a1 + 98);
    *(unsigned char *)(v36 + 19) = *(unsigned char *)(a1 + 99);
    *(unsigned char *)(v36 + 20) = *(unsigned char *)(a1 + 100);
    *(unsigned char *)(v36 + 21) = *(unsigned char *)(a1 + 101);
    *(unsigned char *)(v36 + 22) = *(unsigned char *)(a1 + 102);
    *(unsigned char *)(v36 + 23) = *(unsigned char *)(a1 + 103);
    *(float *)(a1 + 8) = *a2;
    float result = a2[1];
    *(float *)(a1 + 12) = result;
  }
  return result;
}

float ggl::DebugConsole::drawRectangle(uint64_t a1, float *a2)
{
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v4 = v9;
  *(float *)(a1 + 8) = *a2;
  *(float *)(a1 + 12) = a2[1];
  int v5 = *((_DWORD *)a2 + 1);
  int v7 = v4;
  int v8 = v5;
  ggl::DebugConsole::drawLine(a1, (float *)&v7);
  ggl::DebugConsole::drawLine(a1, (float *)&v9);
  int v7 = *(_DWORD *)a2;
  int v8 = HIDWORD(v4);
  ggl::DebugConsole::drawLine(a1, (float *)&v7);
  return ggl::DebugConsole::drawLine(a1, a2);
}

float32_t ggl::DebugConsole::drawRectangleWithFill(float32x2_t *a1, float32x2_t *a2, float32_t result)
{
  float32x2_t v3 = a1[10];
  if ((unint64_t)(*(void *)&v3 + 6) <= *(void *)&a1[6])
  {
    float v4 = 0.99609;
    if (a1[13].i8[4]) {
      float v5 = 0.98633;
    }
    else {
      float v5 = 0.99609;
    }
    if (!a1[13].i8[4]) {
      float v4 = 0.98633;
    }
    float32x2_t v6 = a1[9];
    a1[10] = (float32x2_t)(*(void *)&v3 + 1);
    uint64_t v7 = *(void *)(*(void *)&v6 + 40) + 24 * *(void *)&v3;
    float32x2_t v8 = a1[1];
    float32x2_t v9 = vsub_f32(*a2, v8);
    *(_DWORD *)uint64_t v7 = v8.i32[0];
    *(_DWORD *)(v7 + 4) = a1[1].i32[1];
    *(_DWORD *)(v7 + 8) = 0;
    *(float *)(v7 + 12) = v4;
    *(unsigned char *)(v7 + 16) = a1[12].i8[0];
    *(unsigned char *)(v7 + 17) = a1[12].i8[1];
    *(unsigned char *)(v7 + 18) = a1[12].i8[2];
    *(unsigned char *)(v7 + 19) = a1[12].i8[3];
    *(unsigned char *)(v7 + 20) = a1[12].i8[4];
    *(unsigned char *)(v7 + 21) = a1[12].i8[5];
    *(unsigned char *)(v7 + 22) = a1[12].i8[6];
    *(unsigned char *)(v7 + 23) = a1[12].i8[7];
    __int32 v10 = a1[1].i32[0];
    float v11 = a1[1].f32[1] + v9.f32[1];
    float32x2_t v12 = a1[9];
    float32x2_t v13 = a1[10];
    a1[10] = (float32x2_t)(*(void *)&v13 + 1);
    uint64_t v14 = *(void *)(*(void *)&v12 + 40) + 24 * *(void *)&v13;
    *(_DWORD *)uint64_t v14 = v10;
    *(float *)(v14 + 4) = v11;
    *(_DWORD *)(v14 + 8) = 0;
    *(float *)(v14 + 12) = v5;
    *(unsigned char *)(v14 + 16) = a1[12].i8[0];
    *(unsigned char *)(v14 + 17) = a1[12].i8[1];
    *(unsigned char *)(v14 + 18) = a1[12].i8[2];
    *(unsigned char *)(v14 + 19) = a1[12].i8[3];
    *(unsigned char *)(v14 + 20) = a1[12].i8[4];
    *(unsigned char *)(v14 + 21) = a1[12].i8[5];
    *(unsigned char *)(v14 + 22) = a1[12].i8[6];
    *(unsigned char *)(v14 + 23) = a1[12].i8[7];
    __int32 v15 = a1[1].i32[1];
    float v16 = a1[1].f32[0] + v9.f32[0];
    float32x2_t v17 = a1[9];
    float32x2_t v18 = a1[10];
    a1[10] = (float32x2_t)(*(void *)&v18 + 1);
    uint64_t v19 = *(void *)(*(void *)&v17 + 40) + 24 * *(void *)&v18;
    *(float *)uint64_t v19 = v16;
    *(_DWORD *)(v19 + 4) = v15;
    *(_DWORD *)(v19 + 8) = 1065353216;
    *(float *)(v19 + 12) = v4;
    *(unsigned char *)(v19 + 16) = a1[12].i8[0];
    *(unsigned char *)(v19 + 17) = a1[12].i8[1];
    *(unsigned char *)(v19 + 18) = a1[12].i8[2];
    *(unsigned char *)(v19 + 19) = a1[12].i8[3];
    *(unsigned char *)(v19 + 20) = a1[12].i8[4];
    *(unsigned char *)(v19 + 21) = a1[12].i8[5];
    *(unsigned char *)(v19 + 22) = a1[12].i8[6];
    *(unsigned char *)(v19 + 23) = a1[12].i8[7];
    __int32 v20 = a1[1].i32[1];
    float v21 = a1[1].f32[0] + v9.f32[0];
    float32x2_t v22 = a1[9];
    float32x2_t v23 = a1[10];
    a1[10] = (float32x2_t)(*(void *)&v23 + 1);
    uint64_t v24 = *(void *)(*(void *)&v22 + 40) + 24 * *(void *)&v23;
    *(float *)uint64_t v24 = v21;
    *(_DWORD *)(v24 + 4) = v20;
    *(_DWORD *)(v24 + 8) = 1065353216;
    *(float *)(v24 + 12) = v4;
    *(unsigned char *)(v24 + 16) = a1[12].i8[0];
    *(unsigned char *)(v24 + 17) = a1[12].i8[1];
    *(unsigned char *)(v24 + 18) = a1[12].i8[2];
    *(unsigned char *)(v24 + 19) = a1[12].i8[3];
    *(unsigned char *)(v24 + 20) = a1[12].i8[4];
    *(unsigned char *)(v24 + 21) = a1[12].i8[5];
    *(unsigned char *)(v24 + 22) = a1[12].i8[6];
    *(unsigned char *)(v24 + 23) = a1[12].i8[7];
    __int32 v25 = a1[1].i32[0];
    v8.f32[0] = a1[1].f32[1] + v9.f32[1];
    float32x2_t v26 = a1[9];
    float32x2_t v27 = a1[10];
    a1[10] = (float32x2_t)(*(void *)&v27 + 1);
    uint64_t v28 = *(void *)(*(void *)&v26 + 40) + 24 * *(void *)&v27;
    *(_DWORD *)uint64_t v28 = v25;
    *(float *)(v28 + 4) = v8.f32[0];
    *(_DWORD *)(v28 + 8) = 0;
    *(float *)(v28 + 12) = v5;
    *(unsigned char *)(v28 + 16) = a1[12].i8[0];
    *(unsigned char *)(v28 + 17) = a1[12].i8[1];
    *(unsigned char *)(v28 + 18) = a1[12].i8[2];
    *(unsigned char *)(v28 + 19) = a1[12].i8[3];
    *(unsigned char *)(v28 + 20) = a1[12].i8[4];
    *(unsigned char *)(v28 + 21) = a1[12].i8[5];
    *(unsigned char *)(v28 + 22) = a1[12].i8[6];
    *(unsigned char *)(v28 + 23) = a1[12].i8[7];
    float32x2_t v29 = vadd_f32(a1[1], v9);
    float32x2_t v30 = a1[9];
    float32x2_t v31 = a1[10];
    a1[10] = (float32x2_t)(*(void *)&v31 + 1);
    uint64_t v32 = *(void *)(*(void *)&v30 + 40) + 24 * *(void *)&v31;
    *(float32x2_t *)uint64_t v32 = v29;
    *(_DWORD *)(v32 + 8) = 1065353216;
    *(float *)(v32 + 12) = v5;
    *(unsigned char *)(v32 + 16) = a1[12].i8[0];
    *(unsigned char *)(v32 + 17) = a1[12].i8[1];
    *(unsigned char *)(v32 + 18) = a1[12].i8[2];
    *(unsigned char *)(v32 + 19) = a1[12].i8[3];
    *(unsigned char *)(v32 + 20) = a1[12].i8[4];
    *(unsigned char *)(v32 + 21) = a1[12].i8[5];
    *(unsigned char *)(v32 + 22) = a1[12].i8[6];
    *(unsigned char *)(v32 + 23) = a1[12].i8[7];
    a1[1].i32[0] = a2->i32[0];
    float result = a2->f32[1];
    a1[1].f32[1] = result;
  }
  return result;
}

void ggl::DebugConsole::drawCircle(ggl::DebugConsole *this, float a2)
{
  float32x2_t v3 = *(float32x2_t *)((char *)this + 8);
  float v4 = (float32x2_t *)*((void *)this + 11);
  *((float32x2_t *)this + 1) = vmla_n_f32(v3, *v4, a2);
  float32x2_t v6 = vmla_n_f32(v3, v4[1], a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 16), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 24), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 32), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 40), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 48), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 56), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 64), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 72), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 80), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 88), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 96), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 104), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 112), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 120), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 128), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 136), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 144), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 152), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 160), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 168), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 176), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 184), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 192), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 200), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 208), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 216), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 224), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 232), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 240), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, *(float32x2_t *)(*((void *)this + 11) + 248), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  float32x2_t v6 = vmla_n_f32(v3, **((float32x2_t **)this + 11), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  *((float32x2_t *)this + 1) = v3;
}

uint64_t ggl::DebugConsole::drawCircleWithFill(uint64_t this, double a2)
{
  if ((unint64_t)(*(void *)(this + 80) + 96) <= *(void *)(this + 48))
  {
    float32x2_t v2 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
    float32x2_t v3 = vmla_n_f32(*(float32x2_t *)(this + 8), **(float32x2_t **)(this + 88), *(float *)&a2);
    uint64_t v4 = 8;
    float32x2_t v5 = v3;
    do
    {
      float32x2_t v6 = v5;
      uint64_t v7 = *(void *)(this + 80);
      float32x2_t v8 = *(float32x2_t *)(*(void *)(this + 88) + v4);
      float32x2_t v9 = *(float32x2_t *)(this + 8);
      uint64_t v10 = *(void *)(*(void *)(this + 72) + 40) + 24 * v7;
      *(_DWORD *)uint64_t v10 = v9.i32[0];
      float32x2_t v5 = vmla_f32(v9, v2, v8);
      *(void *)(this + 80) = v7 + 1;
      *(_DWORD *)(v10 + 4) = *(_DWORD *)(this + 12);
      *(void *)(v10 + 8) = 0x3F7C800000000000;
      *(unsigned char *)(v10 + 16) = *(unsigned char *)(this + 96);
      *(unsigned char *)(v10 + 17) = *(unsigned char *)(this + 97);
      *(unsigned char *)(v10 + 18) = *(unsigned char *)(this + 98);
      *(unsigned char *)(v10 + 19) = *(unsigned char *)(this + 99);
      *(unsigned char *)(v10 + 20) = *(unsigned char *)(this + 100);
      *(unsigned char *)(v10 + 21) = *(unsigned char *)(this + 101);
      *(unsigned char *)(v10 + 22) = *(unsigned char *)(this + 102);
      *(unsigned char *)(v10 + 23) = *(unsigned char *)(this + 103);
      uint64_t v11 = *(void *)(this + 72);
      uint64_t v12 = *(void *)(this + 80);
      *(void *)(this + 80) = v12 + 1;
      uint64_t v13 = *(void *)(v11 + 40) + 24 * v12;
      *(float32x2_t *)uint64_t v13 = v6;
      *(void *)(v13 + 8) = 0x3F7C80003F800000;
      *(unsigned char *)(v13 + 16) = *(unsigned char *)(this + 96);
      *(unsigned char *)(v13 + 17) = *(unsigned char *)(this + 97);
      *(unsigned char *)(v13 + 18) = *(unsigned char *)(this + 98);
      *(unsigned char *)(v13 + 19) = *(unsigned char *)(this + 99);
      *(unsigned char *)(v13 + 20) = *(unsigned char *)(this + 100);
      *(unsigned char *)(v13 + 21) = *(unsigned char *)(this + 101);
      *(unsigned char *)(v13 + 22) = *(unsigned char *)(this + 102);
      *(unsigned char *)(v13 + 23) = *(unsigned char *)(this + 103);
      uint64_t v14 = *(void *)(this + 72);
      uint64_t v15 = *(void *)(this + 80);
      *(void *)(this + 80) = v15 + 1;
      uint64_t v16 = *(void *)(v14 + 40) + 24 * v15;
      *(float32x2_t *)uint64_t v16 = v5;
      *(void *)(v16 + 8) = 0x3F7F00003F800000;
      *(unsigned char *)(v16 + 16) = *(unsigned char *)(this + 96);
      *(unsigned char *)(v16 + 17) = *(unsigned char *)(this + 97);
      *(unsigned char *)(v16 + 18) = *(unsigned char *)(this + 98);
      *(unsigned char *)(v16 + 19) = *(unsigned char *)(this + 99);
      *(unsigned char *)(v16 + 20) = *(unsigned char *)(this + 100);
      *(unsigned char *)(v16 + 21) = *(unsigned char *)(this + 101);
      *(unsigned char *)(v16 + 22) = *(unsigned char *)(this + 102);
      *(unsigned char *)(v16 + 23) = *(unsigned char *)(this + 103);
      v4 += 8;
    }
    while (v4 != 256);
    uint64_t v17 = *(void *)(this + 72);
    uint64_t v18 = *(void *)(this + 80);
    *(void *)(this + 80) = v18 + 1;
    uint64_t v19 = *(void *)(v17 + 40) + 24 * v18;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(this + 8);
    *(_DWORD *)(v19 + 4) = *(_DWORD *)(this + 12);
    *(void *)(v19 + 8) = 0x3F7C800000000000;
    *(unsigned char *)(v19 + 16) = *(unsigned char *)(this + 96);
    *(unsigned char *)(v19 + 17) = *(unsigned char *)(this + 97);
    *(unsigned char *)(v19 + 18) = *(unsigned char *)(this + 98);
    *(unsigned char *)(v19 + 19) = *(unsigned char *)(this + 99);
    *(unsigned char *)(v19 + 20) = *(unsigned char *)(this + 100);
    *(unsigned char *)(v19 + 21) = *(unsigned char *)(this + 101);
    *(unsigned char *)(v19 + 22) = *(unsigned char *)(this + 102);
    *(unsigned char *)(v19 + 23) = *(unsigned char *)(this + 103);
    uint64_t v20 = *(void *)(this + 72);
    uint64_t v21 = *(void *)(this + 80);
    *(void *)(this + 80) = v21 + 1;
    uint64_t v22 = *(void *)(v20 + 40) + 24 * v21;
    *(float32x2_t *)uint64_t v22 = v5;
    *(void *)(v22 + 8) = 0x3F7C80003F800000;
    *(unsigned char *)(v22 + 16) = *(unsigned char *)(this + 96);
    *(unsigned char *)(v22 + 17) = *(unsigned char *)(this + 97);
    *(unsigned char *)(v22 + 18) = *(unsigned char *)(this + 98);
    *(unsigned char *)(v22 + 19) = *(unsigned char *)(this + 99);
    *(unsigned char *)(v22 + 20) = *(unsigned char *)(this + 100);
    *(unsigned char *)(v22 + 21) = *(unsigned char *)(this + 101);
    *(unsigned char *)(v22 + 22) = *(unsigned char *)(this + 102);
    *(unsigned char *)(v22 + 23) = *(unsigned char *)(this + 103);
    uint64_t v23 = *(void *)(this + 72);
    uint64_t v24 = *(void *)(this + 80);
    *(void *)(this + 80) = v24 + 1;
    uint64_t v25 = *(void *)(v23 + 40) + 24 * v24;
    *(float32x2_t *)uint64_t v25 = v3;
    *(void *)(v25 + 8) = 0x3F7F00003F800000;
    *(unsigned char *)(v25 + 16) = *(unsigned char *)(this + 96);
    *(unsigned char *)(v25 + 17) = *(unsigned char *)(this + 97);
    *(unsigned char *)(v25 + 18) = *(unsigned char *)(this + 98);
    *(unsigned char *)(v25 + 19) = *(unsigned char *)(this + 99);
    *(unsigned char *)(v25 + 20) = *(unsigned char *)(this + 100);
    *(unsigned char *)(v25 + 21) = *(unsigned char *)(this + 101);
    *(unsigned char *)(v25 + 22) = *(unsigned char *)(this + 102);
    *(unsigned char *)(v25 + 23) = *(unsigned char *)(this + 103);
  }
  return this;
}

void ggl::MetalDeviceContext::optimizeForGPUAccess(ggl::MetalDeviceContext *this, const Texture *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (!v3) {
    return;
  }
  uint64_t v4 = *((void *)a2 + 3);
  float32x2_t v5 = ggl::MetalDeviceContextFrame::blitCommandEncoder(v3, 0, 1);
  id v7 = v5;
  if (*(unsigned char *)(v4 + 120) == 1)
  {
    float32x2_t v6 = (id *)(*(void *)(v4 + 32) + 8 * *(unsigned int *)(v4 + 64));
    goto LABEL_7;
  }
  if (!*(unsigned char *)(v4 + 120))
  {
    float32x2_t v6 = *(id **)(v4 + 32);
LABEL_7:
    id v2 = *v6;
    float32x2_t v5 = v7;
  }
  [v5 optimizeContentsForGPUAccess:v2];
}

void sub_1A27F7848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ggl::MetalDeviceContext::optimizeForCPUAccess(ggl::MetalDeviceContext *this, const Texture *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (!v3) {
    return;
  }
  uint64_t v4 = *((void *)a2 + 3);
  float32x2_t v5 = ggl::MetalDeviceContextFrame::blitCommandEncoder(v3, 0, 1);
  id v7 = v5;
  if (*(unsigned char *)(v4 + 120) == 1)
  {
    float32x2_t v6 = (id *)(*(void *)(v4 + 32) + 8 * *(unsigned int *)(v4 + 64));
    goto LABEL_7;
  }
  if (!*(unsigned char *)(v4 + 120))
  {
    float32x2_t v6 = *(id **)(v4 + 32);
LABEL_7:
    id v2 = *v6;
    float32x2_t v5 = v7;
  }
  [v5 optimizeContentsForCPUAccess:v2];
}

void sub_1A27F7908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

ggl::MetalDeviceContextPass *ggl::MetalDeviceContext::endPass(ggl::MetalDeviceContext *this)
{
  float result = (ggl::MetalDeviceContextPass *)*((void *)this + 6);
  if (result)
  {
    *((void *)this + 6) = 0;
    ggl::MetalDeviceContextPass::~MetalDeviceContextPass(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void ggl::ProcessClearItemContext::~ProcessClearItemContext(ggl::ProcessClearItemContext *this)
{
  uint64_t v1 = (char *)this + 48;
  id v2 = (char *)*((void *)this + 9);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

void ggl::ProcessQueryItemContext::~ProcessQueryItemContext(ggl::ProcessQueryItemContext *this)
{
  id v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 11);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void *std::__function::__func<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF57C990;
  result[1] = v3;
  return result;
}

void std::__function::__func<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0>,void ()(ggl::RenderItem *)>::~__func()
{
}

__n128 std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57CA20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &unk_1EF57CA20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1>,void ()(void)>::~__func()
{
}

void std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
  }
  id v2 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = **(void **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 8);
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "EncodeRenderItems", "category=%s", (uint8_t *)&v6, 0xCu);
  }
}

__n128 std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57C9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &unk_1EF57C9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0>,void ()(void)>::~__func()
{
}

__n128 __Block_byref_object_copy__53326(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__53327(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<std::vector<std::function<void ()(NSError *)>,geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<std::vector<std::function<void ()(NSError *)>,geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::atomic<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B1F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<std::atomic<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B1F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZL32GEOGetGeoGLMetalDeviceContextLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit.GeoGL", "MetalDeviceContext");
  uint64_t v1 = (void *)GEOGetGeoGLMetalDeviceContextLog(void)::log;
  GEOGetGeoGLMetalDeviceContextLog(void)::log = (uint64_t)v0;
}

void ggl::MetalDeviceContext::~MetalDeviceContext(ggl::MetalDeviceContext *this)
{
  ggl::MetalDeviceContext::~MetalDeviceContext(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  ggl::ClearCache *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  ggl::MetalDeviceContextPass *v14;
  id *v15;
  void *v16;
  ggl::MetalBindingManager *v17;

  *(void *)this = &unk_1EF55F288;
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 8), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 8), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 8), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 8));
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 8));
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 8));
  id v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  os_signpost_id_t v4 = (ggl::ClearCache *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v4)
  {
    ggl::ClearCache::~ClearCache(v4);
    MEMORY[0x1A6239270]();
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    int v6 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v6) {
      goto LABEL_14;
    }
  }
  else
  {
    int v6 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v6) {
      goto LABEL_14;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  uint64_t v7 = *((void *)this + 14);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 15);
    float32x2_t v9 = (void *)*((void *)this + 14);
    if (v8 != v7)
    {
      uint64_t v10 = *((void *)this + 15);
      do
      {
        uint64_t v12 = *(void **)(v10 - 24);
        v10 -= 24;
        uint64_t v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 16) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      float32x2_t v9 = (void *)*((void *)this + 14);
    }
    *((void *)this + 15) = v7;
    operator delete(v9);
  }
  uint64_t v13 = (void *)*((void *)this + 11);
  if (v13)
  {
    *((void *)this + 12) = v13;
    operator delete(v13);
  }

  uint64_t v14 = (ggl::MetalDeviceContextPass *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v14)
  {
    ggl::MetalDeviceContextPass::~MetalDeviceContextPass(v14);
    MEMORY[0x1A6239270]();
  }
  uint64_t v15 = (id *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v15)
  {
    ggl::MetalDeviceContextFrame::~MetalDeviceContextFrame(v15);
    MEMORY[0x1A6239270]();
  }
  uint64_t v16 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v16) {
    std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](v16);
  }

  uint64_t v17 = (ggl::MetalBindingManager *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v17)
  {
    ggl::MetalBindingManager::~MetalBindingManager(v17);
    MEMORY[0x1A6239270]();
  }
}

void ggl::ClearCache::~ClearCache(ggl::ClearCache *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 14);
    uint64_t v4 = *((void *)this + 13);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = 0;
        if (v5) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 8))(v5, v4);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 13);
    }
    *((void *)this + 14) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 40))(*((void *)this + 16), v4, *((void *)this + 15) - v4);
  }
  uint64_t v6 = *((void *)this + 9);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = *((void *)this + 9);
    if (v7 != v6)
    {
      do
      {
        float32x2_t v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v9->__on_zero_shared)(v9, v8);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 64;
      }
      while (v7 != v6);
      uint64_t v8 = *((void *)this + 9);
    }
    *((void *)this + 10) = v6;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 12) + 40))(*((void *)this + 12), v8, *((void *)this + 11) - v8);
  }
  uint64_t v10 = (void *)*((void *)this + 4);
  if (v10)
  {
    uint64_t v11 = (void *)*((void *)this + 5);
    uint64_t v12 = *((void *)this + 4);
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *--v11;
        uint64_t v13 = v14;
        *uint64_t v11 = 0;
        if (v14) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 8))(v13, v12);
        }
      }
      while (v11 != v10);
      uint64_t v12 = *((void *)this + 4);
    }
    *((void *)this + 5) = v10;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v12, *((void *)this + 6) - v12);
  }
  uint64_t v15 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v16 = *((void *)this + 1);
    uint64_t v17 = *(void *)this;
    if (v16 != v15)
    {
      do
      {
        uint64_t v18 = *(std::__shared_weak_count **)(v16 - 8);
        if (v18)
        {
          if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v18->__on_zero_shared)(v18, v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v16 -= 16;
      }
      while (v16 != v15);
      uint64_t v17 = *(void *)this;
    }
    *((void *)this + 1) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v17, *((void *)this + 2) - v17);
  }
}

void std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

void ggl::MetalBindingManager::~MetalBindingManager(ggl::MetalBindingManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 29);
  if (v4)
  {
    *((void *)this + 30) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + 24) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 20);
  if (v7)
  {
    *((void *)this + 21) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
}

uint64_t ggl::CullingGridWithHeight::intersectedCellsForView(uint64_t a1, float *a2)
{
  unint64_t v3 = 0;
  uint64_t result = 0;
  float v98 = a2[1];
  float v99 = *a2;
  float v5 = a2[4];
  float v6 = a2[5];
  float v7 = a2[7];
  float v106 = a2[9];
  float v107 = a2[8];
  float v8 = a2[12];
  float v9 = a2[13];
  float v96 = a2[3];
  float v97 = a2[2];
  float v104 = a2[10];
  float v105 = a2[6];
  float v102 = v5;
  float v103 = a2[11];
  uint64_t v10 = (float *)(a1 + 4);
  float v11 = 0.25;
  float v12 = a2[14];
  float v13 = a2[15];
  float v100 = v7;
  float v101 = v6;
  do
  {
    char v14 = 0;
    uint64_t v15 = 0;
    float v16 = (float)v3 * v11;
    float v109 = v98 * v16;
    float v110 = v99 * v16;
    float v108 = v97 * v16;
    float v17 = v96 * v16;
    float v18 = (float)((int)v3 + 1) * v11;
    float v19 = v99 * v18;
    float v20 = v98 * v18;
    float v21 = v97 * v18;
    float v22 = v96 * v18;
    uint64_t v23 = v10;
    do
    {
      float v24 = *(v23 - 1);
      float v25 = (float)v15 * v11;
      float v26 = v5 * v25;
      float v27 = (float)(v5 * v25) + v110;
      float v28 = v8 + (float)(v107 * v24);
      float v29 = v7 * v25;
      float v30 = (float)(v7 * v25) + v17;
      float v31 = v13 + (float)(v103 * v24);
      float v32 = v31 + v30;
      if ((float)(v28 + v27) <= (float)(v31 + v30))
      {
        if ((float)(v28 + v27) >= (float)-v32) {
          int v33 = 0;
        }
        else {
          int v33 = 2;
        }
      }
      else
      {
        int v33 = 1;
      }
      float v34 = v6 * v25;
      float v35 = (float)(v6 * v25) + v109;
      float v36 = v9 + (float)(v106 * v24);
      if ((float)(v36 + v35) <= v32)
      {
        if ((float)(v36 + v35) < (float)-v32) {
          v33 |= 8u;
        }
      }
      else
      {
        v33 |= 4u;
      }
      float v37 = v105 * v25;
      float v38 = v37 + v108;
      float v39 = v12 + (float)(v104 * v24);
      float v40 = v39 + (float)(v37 + v108);
      if (v40 <= v32)
      {
        if (v40 < (float)-v32) {
          v33 |= 0x20u;
        }
      }
      else
      {
        v33 |= 0x10u;
      }
      float v41 = v26 + v19;
      float v42 = v28 + (float)(v26 + v19);
      float v43 = v29 + v22;
      float v44 = v31 + (float)(v29 + v22);
      if (v42 <= v44)
      {
        if (v42 >= (float)-v44) {
          int v45 = 0;
        }
        else {
          int v45 = 2;
        }
      }
      else
      {
        int v45 = 1;
      }
      float v46 = v34 + v20;
      float v47 = v36 + (float)(v34 + v20);
      if (v47 <= v44)
      {
        if (v47 < (float)-v44) {
          v45 |= 8u;
        }
      }
      else
      {
        v45 |= 4u;
      }
      float v48 = *v23;
      float v49 = v37 + v21;
      float v50 = v39 + (float)(v37 + v21);
      if (v50 <= v44)
      {
        if (v50 < (float)-v44) {
          v45 |= 0x20u;
        }
      }
      else
      {
        v45 |= 0x10u;
      }
      uint64_t v51 = v15 + 1;
      float v52 = (float)(v15 + 1) * 0.25;
      float v53 = v5 * v52;
      float v54 = (float)(v5 * v52) + v19;
      float v55 = v7 * v52;
      float v56 = (float)(v7 * v52) + v22;
      float v57 = v31 + v56;
      if ((float)(v28 + v54) <= (float)(v31 + v56))
      {
        if ((float)(v28 + v54) >= (float)-v57) {
          int v58 = 0;
        }
        else {
          int v58 = 2;
        }
      }
      else
      {
        int v58 = 1;
      }
      float v59 = v6 * v52;
      float v60 = (float)(v6 * v52) + v20;
      if ((float)(v36 + v60) <= v57)
      {
        if ((float)(v36 + v60) < (float)-v57) {
          v58 |= 8u;
        }
      }
      else
      {
        v58 |= 4u;
      }
      float v61 = v105 * v52;
      float v62 = (float)(v105 * v52) + v21;
      if ((float)(v39 + v62) <= v57)
      {
        if ((float)(v39 + v62) < (float)-v57) {
          v58 |= 0x20u;
        }
      }
      else
      {
        v58 |= 0x10u;
      }
      float v6 = v101;
      float v63 = v53 + v110;
      float v64 = v28 + v63;
      float v65 = v55 + v17;
      float v66 = v31 + v65;
      if (v64 <= (float)(v31 + v65))
      {
        if (v64 >= (float)-v66) {
          int v67 = 0;
        }
        else {
          int v67 = 2;
        }
      }
      else
      {
        int v67 = 1;
      }
      float v68 = v59 + v109;
      float v69 = v36 + (float)(v59 + v109);
      if (v69 <= v66)
      {
        if (v69 < (float)-v66) {
          v67 |= 8u;
        }
      }
      else
      {
        v67 |= 4u;
      }
      float v70 = v61 + v108;
      float v71 = v39 + (float)(v61 + v108);
      if (v71 <= v66)
      {
        if (v71 < (float)-v66) {
          v67 |= 0x20u;
        }
      }
      else
      {
        v67 |= 0x10u;
      }
      float v72 = v107 * v48;
      float v73 = (float)((float)(v107 * v48) + v8) + v27;
      float v74 = v103 * v48;
      float v75 = (float)((float)(v103 * v48) + v13) + v30;
      if (v73 <= v75)
      {
        if (v73 >= (float)-v75) {
          int v76 = 0;
        }
        else {
          int v76 = 2;
        }
      }
      else
      {
        int v76 = 1;
      }
      float v77 = v106 * v48;
      float v78 = (float)((float)(v106 * v48) + v9) + v35;
      if (v78 <= v75)
      {
        if (v78 < (float)-v75) {
          v76 |= 8u;
        }
      }
      else
      {
        v76 |= 4u;
      }
      float v79 = v104 * v48;
      float v80 = (float)(v79 + v12) + v38;
      if (v80 <= v75)
      {
        if (v80 < (float)-v75) {
          v76 |= 0x20u;
        }
      }
      else
      {
        v76 |= 0x10u;
      }
      float v81 = (float)(v72 + v41) + v8;
      float v82 = (float)(v74 + v43) + v13;
      if (v81 <= v82)
      {
        if (v81 >= (float)-v82) {
          int v83 = 0;
        }
        else {
          int v83 = 2;
        }
      }
      else
      {
        int v83 = 1;
      }
      float v84 = (float)(v77 + v46) + v9;
      if (v84 <= v82)
      {
        if (v84 < (float)-v82) {
          v83 |= 8u;
        }
      }
      else
      {
        v83 |= 4u;
      }
      float v5 = v102;
      float v85 = (float)(v79 + v49) + v12;
      if (v85 <= v82)
      {
        if (v85 < (float)-v82) {
          v83 |= 0x20u;
        }
      }
      else
      {
        v83 |= 0x10u;
      }
      float v7 = v100;
      float v86 = (float)(v72 + v54) + v8;
      float v87 = (float)(v74 + v56) + v13;
      if (v86 <= v87)
      {
        if (v86 >= (float)-v87) {
          int v88 = 0;
        }
        else {
          int v88 = 2;
        }
      }
      else
      {
        int v88 = 1;
      }
      float v89 = (float)(v77 + v60) + v9;
      if (v89 <= v87)
      {
        if (v89 < (float)-v87) {
          v88 |= 8u;
        }
      }
      else
      {
        v88 |= 4u;
      }
      float v90 = (float)(v79 + v62) + v12;
      if (v90 <= v87)
      {
        if (v90 < (float)-v87) {
          v88 |= 0x20u;
        }
      }
      else
      {
        v88 |= 0x10u;
      }
      float v11 = 0.25;
      float v91 = (float)(v72 + v63) + v8;
      float v92 = (float)(v74 + v65) + v13;
      if (v91 <= v92)
      {
        if (v91 >= (float)-v92) {
          int v93 = 0;
        }
        else {
          int v93 = 2;
        }
      }
      else
      {
        int v93 = 1;
      }
      float v94 = (float)(v77 + v68) + v9;
      if (v94 <= v92)
      {
        if (v94 < (float)-v92) {
          v93 |= 8u;
        }
      }
      else
      {
        v93 |= 4u;
      }
      float v95 = (float)(v79 + v70) + v12;
      if (v95 <= v92)
      {
        if (v95 < (float)-v92) {
          v93 |= 0x20u;
        }
      }
      else
      {
        v93 |= 0x10u;
      }
      if ((v45 & v33 & v58 & v67 & v76 & v83 & v88 & v93) == 0) {
        uint64_t result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 2 | v3 & 1] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v15 & 2 | (v3 >> 1) & 1]))) | result;
      }
      v14 += 2;
      v23 += 8;
      ++v15;
    }
    while (v51 != 4);
    ++v3;
    v10 += 2;
  }
  while (v3 != 4);
  return result;
}

uint64_t ggl::Data::operator=(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    {
      operator new();
    }
    (*(void (**)(uint64_t, void, void))(*(void *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, *(void *)(a1 + 8), 0);
    *(void *)(a1 + 8) = 0;
  }
  if (*(void *)(a2 + 8))
  {
    {
      operator new();
    }
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc
                                                                     + 16))(ggl::Allocator::instance(void)::alloc, *(void *)(a2 + 16), 8);
    *(void *)(a1 + 8) = v4;
    float v5 = *(const void **)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    memcpy(v4, v5, *(void *)(a2 + 16));
  }
  return a1;
}

ggl::Data *ggl::Data::Data(ggl::Data *this, uint64_t a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF560428;
  if (a2)
  {
    uint64_t v4 = &qword_1EB32C000;
    {
      uint64_t v4 = &qword_1EB32C000;
      if (v6) {
        operator new();
      }
    }
    *((void *)this + 1) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[287] + 16))(v4[287], a2, 8);
    *((void *)this + 2) = a2;
  }
  return this;
}

uint64_t std::__function::__func<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0,std::allocator<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57AA58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0,std::allocator<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57AA58;
  result[1] = v3;
  return result;
}

void std::__function::__func<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0,std::allocator<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t std::__function::__func<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57AAE8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57AAE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56B920;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
}

void ggl::Clear::ClearPipelineState::~ClearPipelineState(ggl::Clear::ClearPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Clear::ClearPipelineSetup::textureIsEnabled(ggl::Clear::ClearPipelineSetup *this)
{
  return 0;
}

void ggl::Clear::ClearPipelineSetup::~ClearPipelineSetup(ggl::Clear::ClearPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::CommonLibrary::~CommonLibrary(ggl::CommonLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A6239270);
}

void ggl::CommonLibraryMTLData::~CommonLibraryMTLData(ggl::CommonLibraryMTLData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A6239270);
}

void ggl::MetalResourceManager::~MetalResourceManager(dispatch_queue_t *this)
{
  ggl::MetalResourceManager::~MetalResourceManager(this);
  JUMPOUT(0x1A6239270);
}

{
  dispatch_queue_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;
  uint64_t vars8;

  *this = (dispatch_queue_t)&unk_1EF55F638;
  dispatch_barrier_sync(this[34], &__block_literal_global_53497);
  uint64_t v2 = this[34];
  this[34] = 0;

  uint64_t v3 = (uint64_t *)this[35];
  if (v3 != (uint64_t *)this[36])
  {
    while (1)
    {
      ggl::MetalResourceManager::deleteResource((uint64_t)this, *v3);
      uint64_t v4 = (uint64_t *)this[36];
      float v5 = (char *)v4 - (char *)(v3 + 1);
      if (v4 == v3 + 1) {
        break;
      }
      memmove(v3, v3 + 1, (char *)v4 - (char *)(v3 + 1));
      this[36] = (dispatch_queue_t)((char *)v3 + v5);
    }
    uint64_t v3 = (uint64_t *)this[35];
    this[36] = (dispatch_queue_t)(v4 - 1);
  }
  if (v3)
  {
    this[36] = (dispatch_queue_t)v3;
    (*((void (**)(dispatch_queue_t, uint64_t *, int64_t))this[38]->isa + 5))(this[38], v3, (char *)this[37] - (char *)v3);
  }

  ggl::ResourceManager::~ResourceManager((ggl::ResourceManager *)this);
}

void sub_1A27F9C74(_Unwind_Exception *a1)
{
  gss::FeatureAttributeSet::~FeatureAttributeSet(v2);

  ggl::ResourceManager::~ResourceManager((ggl::ResourceManager *)v1);
  _Unwind_Resume(a1);
}

void ggl::RenderResourceFences::~RenderResourceFences(ggl::RenderResourceFences *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::MetalResourceManager::newRasterizationRateMap(uint64_t a1, uint64_t a2)
{
  id v3 = objc_alloc_init(MEMORY[0x1E4F352D0]);
  uint64_t v4 = *(void *)(a2 + 36);
  *(void *)&long long v5 = v4;
  *((void *)&v5 + 1) = HIDWORD(v4);
  long long v103 = v5;
  uint64_t v104 = 0;
  id v101 = v3;
  [v3 setScreenSize:&v103];
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) != v6)
  {
    unint64_t v7 = 0;
    uint64_t v100 = a2;
    do
    {
      float v8 = (uint64_t *)(v6 + (v7 << 6));
      uint64_t v9 = v8[4];
      uint64_t v10 = v8[5];
      uint64_t v11 = *v8;
      uint64_t v12 = v8[1];
      id v13 = objc_alloc(MEMORY[0x1E4F352C8]);
      unint64_t v14 = (v10 - v9) >> 2;
      unint64_t v15 = (v12 - v11) >> 2;
      v102[0] = v14;
      v102[1] = v15;
      v102[2] = 1;
      float v16 = (void *)[v13 initWithSampleCount:v102];
      if (v12 != v11)
      {
        uint64_t v17 = 0;
        if (v15 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v15;
        }
        do
        {
          int v19 = *(_DWORD *)(*v8 + 4 * v17);
          *(_DWORD *)([v16 verticalSampleStorage] + 4 * v17++) = v19;
        }
        while (v18 != v17);
      }
      a2 = v100;
      if (v10 != v9)
      {
        uint64_t v20 = 0;
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        do
        {
          int v21 = *(_DWORD *)(v8[4] + 4 * v20);
          *(_DWORD *)([v16 horizontalSampleStorage] + 4 * v20++) = v21;
        }
        while (v14 != v20);
      }
      [v101 setLayer:v16 atIndex:v7];

      ++v7;
      uint64_t v6 = *(void *)(v100 + 48);
    }
    while (v7 < (*(void *)(v100 + 56) - v6) >> 6);
  }
  float v22 = (void *)[*(id *)(*(void *)(a1 + 256) + 104) newRasterizationRateMapWithDescriptor:v101];
  {
    operator new();
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
  *(void *)uint64_t v23 = 0;
  *(_WORD *)(v23 + 8) = 2305;
  *(void *)(v23 + 24) = 0;
  *(void *)(v23 + 32) = 0;
  *(void *)(v23 + 16) = 0;
  unint64_t v24 = [v22 layerCount];
  {
    operator new();
  }
  unint64_t v25 = v24 >> 61;
  uint64_t v97 = ggl::Allocator::instance(void)::alloc;
  if (!v24)
  {
    uint64_t v26 = 0;
    unint64_t v28 = 0;
    float v30 = 0;
LABEL_120:
    uint64_t v33 = a1;
    goto LABEL_39;
  }
  if (v25) {
    abort();
  }
  uint64_t v26 = 8 * v24;
  uint64_t v27 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc
                                                                      + 16))(ggl::Allocator::instance(void)::alloc, 8 * v24, 4);
  unint64_t v28 = v27;
  uint64_t v29 = 0;
  float v30 = (uint64_t *)(v27 + 8 * v24);
  do
  {
    if (v27 + v29) {
      *(void *)(v27 + v29) = 0;
    }
    v29 += 8;
  }
  while (v26 != v29);
  if (v24 <= 1) {
    unint64_t v31 = 1;
  }
  else {
    unint64_t v31 = v24;
  }
  if (!v22)
  {
    if (v31 >= 8)
    {
      unint64_t v34 = v31 & 0xFFFFFFFFFFFFFFF8;
      float v35 = (_OWORD *)(v27 + 32);
      unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(v35 - 2) = 0uLL;
        *(v35 - 1) = 0uLL;
        *float v35 = 0uLL;
        v35[1] = 0uLL;
        v35 += 4;
        v36 -= 8;
      }
      while (v36);
      goto LABEL_122;
    }
    unint64_t v34 = 0;
    do
    {
      *(void *)(v27 + 8 * v34++) = 0;
LABEL_122:
      ;
    }
    while (v31 != v34);
    goto LABEL_120;
  }
  for (uint64_t i = 0; i != v31; ++i)
  {
    objc_msgSend(v22, "physicalSizeForLayer:", i, v97);
    *(int32x2_t *)(v28 + 8 * i) = vmovn_s64((int64x2_t)0);
  }
  uint64_t v33 = a1;
  unint64_t v25 = v24 >> 61;
LABEL_39:
  float v37 = *(void **)(a2 + 80);
  uint64_t v38 = *(void *)(a2 + 96);
  if (v24 <= (v38 - (uint64_t)v37) >> 3)
  {
    float v42 = (void *)(a2 + 88);
    uint64_t v41 = *(void *)(a2 + 88);
    uint64_t v45 = v41 - (void)v37;
    unint64_t v46 = (v41 - (uint64_t)v37) >> 3;
    if (v46 < v24)
    {
      float v47 = (uint64_t *)(v28 + 8 * v46);
      if ((void *)v41 == v37) {
        goto LABEL_59;
      }
      unint64_t v48 = v45 - 8;
      if ((unint64_t)(v45 - 8) >= 0x78)
      {
        unint64_t v66 = v45 & 0xFFFFFFFFFFFFFFF8;
        int v67 = (char *)v37 + v66 - 4;
        unint64_t v68 = v28 + v66 - 4;
        BOOL v70 = (unint64_t)v37 + 4 < v28 + v66 && v28 + 4 < (unint64_t)v37 + v66;
        float v49 = (uint64_t *)v28;
        BOOL v71 = (unint64_t)v67 <= v28 || (unint64_t)v37 >= v68;
        if (v71 && !v70)
        {
          uint64_t v72 = (v48 >> 3) + 1;
          uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFF8);
          float v74 = (long long *)(v28 + 32);
          float v75 = v37 + 4;
          uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            long long v78 = *(v74 - 2);
            long long v77 = *(v74 - 1);
            long long v80 = *v74;
            long long v79 = v74[1];
            v74 += 4;
            *(v75 - 2) = v78;
            *(v75 - 1) = v77;
            *float v75 = v80;
            v75[1] = v79;
            v75 += 4;
            v76 -= 8;
          }
          while (v76);
          if (v72 == (v72 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_59:
            uint64_t v51 = (void *)v41;
            while (v47 != v30)
            {
              if (v51) {
                *uint64_t v51 = *v47;
              }
              ++v47;
              ++v51;
            }
            float v52 = (char *)v51 - v41;
            goto LABEL_72;
          }
          float v49 = (uint64_t *)(v28 + v73);
          float v37 = (void *)((char *)v37 + v73);
        }
      }
      else
      {
        float v49 = (uint64_t *)v28;
      }
      do
      {
        uint64_t v50 = *v49++;
        *v37++ = v50;
      }
      while (v49 != v47);
      goto LABEL_59;
    }
    if ((uint64_t *)v28 == v30)
    {
      float v54 = *(char **)(a2 + 80);
    }
    else
    {
      unint64_t v53 = (unint64_t)v30 - v28 - 8;
      float v54 = *(char **)(a2 + 80);
      float v55 = (uint64_t *)v28;
      if (v53 >= 0x78)
      {
        unint64_t v81 = v53 & 0xFFFFFFFFFFFFFFF8 | 4;
        float v82 = (char *)v37 + v81;
        unint64_t v83 = v28 + v81;
        unint64_t v84 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
        BOOL v85 = (unint64_t)v37 + 4 >= v28 + v84 || v28 + 4 >= (unint64_t)v37 + v84;
        BOOL v86 = !v85;
        BOOL v87 = (unint64_t)v82 <= v28 || (unint64_t)v37 >= v83;
        float v54 = *(char **)(a2 + 80);
        float v55 = (uint64_t *)v28;
        if (v87)
        {
          float v54 = *(char **)(a2 + 80);
          float v55 = (uint64_t *)v28;
          if (!v86)
          {
            uint64_t v88 = (v53 >> 3) + 1;
            uint64_t v89 = v88 & 0x3FFFFFFFFFFFFFF8;
            float v54 = (char *)&v37[v89];
            float v90 = (long long *)(v28 + 32);
            float v91 = v37 + 4;
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFF8;
            do
            {
              long long v94 = *(v90 - 2);
              long long v93 = *(v90 - 1);
              long long v96 = *v90;
              long long v95 = v90[1];
              v90 += 4;
              *(v91 - 2) = v94;
              *(v91 - 1) = v93;
              *float v91 = v96;
              v91[1] = v95;
              v91 += 4;
              v92 -= 8;
            }
            while (v92);
            if (v88 == (v88 & 0x3FFFFFFFFFFFFFF8)) {
              goto LABEL_71;
            }
            float v55 = (uint64_t *)(v28 + v89 * 8);
          }
        }
      }
      do
      {
        uint64_t v56 = *v55++;
        *(void *)float v54 = v56;
        v54 += 8;
      }
      while (v55 != v30);
    }
LABEL_71:
    float v52 = (char *)(v54 - (char *)v37);
    uint64_t v41 = (uint64_t)v37;
    goto LABEL_72;
  }
  if (v37)
  {
    *(void *)(a2 + 88) = v37;
    (*(void (**)(void))(**(void **)(a2 + 104) + 40))(*(void *)(a2 + 104));
    uint64_t v38 = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
  }
  if (v25) {
    goto LABEL_119;
  }
  uint64_t v39 = v38 >> 2;
  if (v38 >> 2 <= v24) {
    uint64_t v39 = v24;
  }
  unint64_t v40 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v39;
  if (v40 >> 61) {
LABEL_119:
  }
    abort();
  uint64_t v41 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a2 + 104) + 16))(*(void *)(a2 + 104), 8 * v40, 4);
  *(void *)(a2 + 80) = v41;
  float v42 = (void *)(a2 + 88);
  *(void *)(a2 + 96) = v41 + 8 * v40;
  float v43 = (void *)v41;
  if ((uint64_t *)v28 != v30)
  {
    float v44 = (uint64_t *)v28;
    float v43 = (void *)v41;
    do
    {
      if (v43) {
        *float v43 = *v44;
      }
      ++v44;
      ++v43;
    }
    while (v44 != v30);
  }
  float v52 = (char *)v43 - v41;
LABEL_72:
  *float v42 = &v52[v41];
  uint64_t v57 = objc_msgSend(v22, "parameterBufferSizeAndAlign", v97);
  int v58 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v58->__shared_owners_ = 0;
  v58->__shared_weak_owners_ = 0;
  v58->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583040;
  ggl::BufferData::BufferData((uint64_t)&v58[1], v57, 2, 1);
  ggl::BufferData::prepareBufferForDevice(v59, *(ggl::Device **)(v33 + 256), 1);
  objc_msgSend(v22, "copyParameterDataToBuffer:offset:", ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v33, (const ggl::Buffer *)v58[2].__vftable)[4], 0);
  atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  float v60 = *(std::__shared_weak_count **)(a2 + 120);
  *(void *)(a2 + 112) = v58 + 1;
  *(void *)(a2 + 120) = v58;
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  objc_storeStrong((id *)(v23 + 32), v22);
  float v61 = *(std::__shared_weak_count **)(v33 + 16);
  if (!v61 || (uint64_t v62 = *(void *)(v33 + 8), (v63 = std::__shared_weak_count::lock(v61)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    goto LABEL_119;
  }
  float v64 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v62;
  *(void *)(a2 + 16) = v63;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  *(void *)(a2 + 24) = v23;
  ++*(_DWORD *)(a2 + 32);
  ggl::ResourceManager::_addResourceStat(v33, "RasterizationRateMap", 0x62578FE100000014uLL, 0);
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  if (v28) {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v98 + 40))(v98, v28, v26);
  }

  return v23;
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57CAB0;
}

void *std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF57CAB0;
  return result;
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1>,void ()(void)>::~__func()
{
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0>,void ()(void)>::operator()()
{
  if (GEOGetGeoGLPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_5_53372);
  }
  os_log_t v0 = (id)GEOGetGeoGLPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DestroyResources", "", v1, 2u);
  }
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57CA68;
}

void *std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF57CA68;
  return result;
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0>,void ()(void)>::~__func()
{
}

void ggl::ResourceManager::onRenderDataReleased(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 88);
  std::mutex::lock((std::mutex *)(a1 + 88));
  long long v5 = *(void **)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  if ((unint64_t)v5 < v6)
  {
    if (v5) {
      *long long v5 = a2;
    }
    unint64_t v7 = v5 + 1;
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    abort();
  }
  uint64_t v11 = v6 - v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    uint64_t v12 = 8 * v10;
    uint64_t v13 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), 8 * v10, 8);
    unint64_t v14 = (void *)(v13 + 8 * v9);
    unint64_t v10 = v13 + v12;
    if (v13) {
      *unint64_t v14 = a2;
    }
  }
  else
  {
    unint64_t v14 = (void *)(8 * v9);
  }
  unint64_t v7 = v14 + 1;
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15 != v16)
  {
    unint64_t v17 = v15 - v16 - 8;
    if (v17 < 0x38)
    {
      uint64_t v19 = *(void *)(a1 + 32);
    }
    else if ((unint64_t)(v15 - (void)v14) < 0x20)
    {
      uint64_t v19 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = v15 - 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v20 = v14 - 2;
      int v21 = (long long *)(v15 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      v14 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
    }
    do
    {
      uint64_t v24 = *(void *)(v19 - 8);
      v19 -= 8;
      *--unint64_t v14 = v24;
    }
    while (v19 != v16);
LABEL_24:
    uint64_t v15 = *(void *)(a1 + 24);
  }
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v7;
  uint64_t v25 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  if (v15) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v15, v25 - v15);
  }
LABEL_27:
  *(void *)(a1 + 32) = v7;
  std::mutex::unlock(v4);
}

void ggl::ResourceManager::~ResourceManager(ggl::ResourceManager *this)
{
  ggl::ResourceManager::~ResourceManager(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  *(void *)this = &unk_1EF55BE20;
  std::mutex::~mutex((std::mutex *)this + 3);
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 88));
  long long v5 = *((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 10) + 40))(*((void *)this + 10), v5, *((void *)this + 9) - v5);
  }
  unint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v6, *((void *)this + 5) - v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'ggl::Clear::ClearMesh::~ClearMesh(ggl::Clear::ClearMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Clear::ClearMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Clear::ClearMesh *)((char *)this - 16));
}

void ggl::Clear::ClearMesh::~ClearMesh(ggl::Clear::ClearMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::Clear::ClearData>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::Clear::ClearData>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::DisplayLink::invalidate(id *this)
{
  return [this[9] invalidate];
}

void ggl::DisplayLink::~DisplayLink(id *this)
{
  ggl::DisplayLink::~DisplayLink(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  ggl::DisplayLink *v4;

  uint64_t v2 = (std::__shared_weak_count *)this[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *this = &unk_1EF5616B8;
  id v3 = (std::__shared_weak_count *)this[6];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (ggl::DisplayLink *)this[4];
  if (v4 == (ggl::DisplayLink *)(this + 1))
  {
    (*((void (**)(char *))this[1] + 4))((char *)this + 8);
  }
  else if (v4)
  {
    (*(void (**)(ggl::DisplayLink *))(*(void *)v4 + 40))(v4);
  }
}

uint64_t ggl::SnapshotRunLoop::onTimerFired(uint64_t this, double a2)
{
  *(unsigned char *)(this + 64) = 1;
  if (*(unsigned char *)(this + 65))
  {
    double v4 = a2;
    uint64_t v2 = *(void *)(this + 32);
    if (v2)
    {
      return (*(uint64_t (**)(uint64_t, double *))(*(void *)v2 + 48))(v2, &v4);
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return ggl::SnapshotRunLoop::invalidate(v3);
    }
  }
  return this;
}

uint64_t ggl::SnapshotRunLoop::invalidate(uint64_t this)
{
  *(unsigned char *)(this + 65) = 0;
  return this;
}

uint64_t ggl::SnapshotRunLoop::paused(ggl::SnapshotRunLoop *this)
{
  return *((unsigned __int8 *)this + 64);
}

void ggl::SnapshotRunLoop::setPaused(ggl::SnapshotRunLoop *this, char a2)
{
  *((unsigned char *)this + 64) = a2;
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *((void *)this + 5);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v5 = *((unsigned __int8 *)this + 66);
    *((unsigned char *)this + 66) = 1;
    if (v5) {
      int64_t v6 = 10000000;
    }
    else {
      int64_t v6 = 0;
    }
    dispatch_time_t v7 = dispatch_time(0, v6);
    uint64_t v8 = *((void *)this + 7);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3321888768;
    v9[2] = ___ZN3ggl15SnapshotRunLoop9setPausedEb_block_invoke;
    v9[3] = &__block_descriptor_48_ea8_32c57_ZTSNSt3__18weak_ptrIN3ggl7RunLoop18_RunLoopCallbackerEEE_e5_v8__0l;
    v9[4] = v4;
    unint64_t v10 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_after(v7, v8, v9);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ___ZN3ggl15SnapshotRunLoop9setPausedEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(void **)(a1 + 32);
      if (v5)
      {
        CFTimeInterval v6 = CACurrentMediaTime();
        (*(void (**)(double))(*(void *)*v5 + 40))(v6);
        (*(void (**)(void, uint64_t))(*(void *)*v5 + 24))(*v5, v7);
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1A27FB5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __destroy_helper_block_ea8_32c57_ZTSNSt3__18weak_ptrIN3ggl7RunLoop18_RunLoopCallbackerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c57_ZTSNSt3__18weak_ptrIN3ggl7RunLoop18_RunLoopCallbackerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ggl::SnapshotRunLoop::~SnapshotRunLoop(ggl::SnapshotRunLoop *this)
{
  *(void *)this = off_1EF55BE48;
  *((_WORD *)this + 32) = 1;

  *(void *)this = &unk_1EF5616B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (ggl::SnapshotRunLoop *)*((void *)this + 4);
  if (v3 == (ggl::SnapshotRunLoop *)((char *)this + 8))
  {
    (*(void (**)(char *))(*((void *)this + 1) + 32))((char *)this + 8);
  }
  else if (v3)
  {
    (*(void (**)(ggl::SnapshotRunLoop *))(*(void *)v3 + 40))(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  ggl::SnapshotRunLoop *v3;

  *(void *)this = off_1EF55BE48;
  *((_WORD *)this + 32) = 1;

  *(void *)this = &unk_1EF5616B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (ggl::SnapshotRunLoop *)*((void *)this + 4);
  if (v3 == (ggl::SnapshotRunLoop *)((char *)this + 8))
  {
    (*(void (**)(char *))(*((void *)this + 1) + 32))((char *)this + 8);
  }
  else if (v3)
  {
    (*(void (**)(ggl::SnapshotRunLoop *))(*(void *)v3 + 40))(v3);
  }
}

void std::__shared_ptr_emplace<ggl::RunLoop::_RunLoopCallbacker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5899E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RunLoop::_RunLoopCallbacker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5899E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::MTLShaderLibraryData::~MTLShaderLibraryData(ggl::MTLShaderLibraryData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(void *)this = &unk_1EF55F618;
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 8);
    uint64_t v4 = *((void *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 7);
    }
    *((void *)this + 8) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 10) + 40))(*((void *)this + 10), v4, *((void *)this + 9) - v4);
  }
  *(void *)this = &unk_1EF55EC78;
  int v5 = *((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v5, *((void *)this + 5) - v5);
  }
  CFTimeInterval v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
}

void ggl::ShaderLibraryData::~ShaderLibraryData(ggl::ShaderLibraryData *this)
{
  *(void *)this = &unk_1EF55EC78;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v2, *((void *)this + 5) - v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EF55EC78;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v2, *((void *)this + 5) - v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void ggl::ShadedColor::P3NPipelineState::~P3NPipelineState(ggl::ShadedColor::P3NPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::ShadedColor::P3NPipelineSetup::textureIsEnabled(ggl::ShadedColor::P3NPipelineSetup *this)
{
  return 0;
}

BOOL ggl::ShadedColor::P3NPipelineSetup::constantDataIsEnabled(ggl::ShadedColor::P3NPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::ShadedColor::P3NPipelineSetup::~P3NPipelineSetup(ggl::ShadedColor::P3NPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::DeviceData::~DeviceData(std::mutex *this)
{
  this->__m_.__sig = (uint64_t)&unk_1EF55A1F0;
  std::mutex::~mutex(this + 2);
  uint64_t v2 = *(void *)this[1].__m_.__opaque;
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&this[1].__m_.__opaque[24] + 40))(*(void *)&this[1].__m_.__opaque[24], v2, *(void *)&this[1].__m_.__opaque[16] - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  this->__m_.__sig = (uint64_t)&unk_1EF55A1F0;
  std::mutex::~mutex(this + 2);
  uint64_t v2 = *(void *)this[1].__m_.__opaque;
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&this[1].__m_.__opaque[24] + 40))(*(void *)&this[1].__m_.__opaque[24], v2, *(void *)&this[1].__m_.__opaque[16] - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::MetalSwapchain::~MetalSwapchain(ggl::MetalSwapchain *this)
{
  ggl::MetalSwapchain::~MetalSwapchain(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;

  *(void *)this = &unk_1EF55B710;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        int v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  CFTimeInterval v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v7) {
      return;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v7) {
      return;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZL28GEOGetGeoGLMetalSwapchainLogv_block_invoke_53750()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit.GeoGL", "MetalSwapchain");
  uint64_t v1 = (void *)GEOGetGeoGLMetalSwapchainLog(void)::log;
  GEOGetGeoGLMetalSwapchainLog(void)::log = (uint64_t)v0;
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawableRef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5889F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawableRef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5889F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawable>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 112);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    int v5 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5886E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5886E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ggl::MetalSwapchain::imageCount(ggl::MetalSwapchain *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t ggl::MetalSwapchain::extents(ggl::MetalSwapchain *this)
{
  return *((void *)this + 9);
}

uint64_t ggl::MetalSwapchain::format(ggl::MetalSwapchain *this, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return *((unsigned int *)this + 16);
  }
}

uint64_t std::__function::__func<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::operator()(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

__n128 std::__function::__func<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56B8D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF56B8D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
}

void ggl::Texture2DArray::onImplicitLoadComplete(ggl::Texture2DArray *this, const ggl::Texture2DLoadItem *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 6);
  *((unsigned char *)this + 129) = 0;
  uint64_t v3 = (void *)(*((void *)this + 12) + 16 * v2);
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  *uint64_t v3 = 0;
  v3[1] = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__shared_ptr_emplace<ggl::RenderFence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5834D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RenderFence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5834D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::DebugRenderUtil::P3NMesh::~P3NMesh(ggl::DebugRenderUtil::P3NMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DebugRenderUtil::P3NMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::DebugRenderUtil::P3NMesh *)((char *)this - 16));
}

void ggl::DebugRenderUtil::P3NMesh::~P3NMesh(ggl::DebugRenderUtil::P3NMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void *ggl::CommandBuffer::clearTextureLoadItems(void *this)
{
  uint64_t v1 = this;
  uint64_t v3 = (void *)this[25];
  uint64_t v2 = (void *)this[26];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 4;
    int v5 = v2 - 4;
    do
    {
      this = (void *)v5[3];
      if (v5 == this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*v5 + 32))(v5);
        if (!*((unsigned char *)v5 - 28)) {
          goto LABEL_9;
        }
      }
      else
      {
        if (this) {
          this = (void *)(*(uint64_t (**)(void *))(*this + 40))(this);
        }
        if (!*((unsigned char *)v5 - 28)) {
          goto LABEL_9;
        }
      }
      *((unsigned char *)v5 - 28) = 0;
LABEL_9:
      if (*((unsigned char *)v5 - 32)) {
        *((unsigned char *)v5 - 32) = 0;
      }
      CFTimeInterval v6 = v5 - 6;
      v5 -= 10;
      v4 -= 10;
    }
    while (v6 != v3);
  }
  v1[26] = v3;
  return this;
}

void *ggl::CommandBuffer::clearBufferLoadItems(void *this)
{
  uint64_t v1 = this;
  uint64_t v3 = (void *)this[29];
  uint64_t v2 = (void *)this[30];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 4;
    int v5 = v2 - 4;
    do
    {
      this = (void *)v5[3];
      if (v5 == this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*v5 + 32))(v5);
      }
      else if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 40))(this);
      }
      CFTimeInterval v6 = v5 - 4;
      v5 -= 8;
      v4 -= 8;
    }
    while (v6 != v3);
  }
  v1[30] = v3;
  return this;
}

unint64_t ggl::CommandBuffer::sortRenderItems(ggl::CommandBuffer *this, ggl::CommandBuffer *a2)
{
  unint64_t v2 = 126 - 2 * __clz((a2 - this) >> 3);
  if (a2 == this) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  return std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>((unint64_t)this, (uint64_t *)a2, v3, 1);
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  unint64_t v7 = *(void *)(*a2 + 48);
  unint64_t v8 = *(void *)(*result + 48);
  uint64_t v9 = *a3;
  unint64_t v10 = *(void *)(*a3 + 48);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      uint64_t v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      uint64_t v11 = *result;
      if (*(void *)(*a2 + 48) < *(void *)(*result + 48))
      {
        *__n128 result = *a2;
        *a2 = v11;
        uint64_t v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *__n128 result = v9;
LABEL_9:
      *a3 = v6;
      uint64_t v5 = v6;
      goto LABEL_11;
    }
    *__n128 result = v5;
    *a2 = v6;
    uint64_t v5 = *a3;
    if (*(void *)(*a3 + 48) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(void *)(*a4 + 48) < *(void *)(v5 + 48))
  {
    *a3 = *a4;
    *a4 = v5;
    uint64_t v12 = *a2;
    if (*(void *)(*a3 + 48) < *(void *)(*a2 + 48))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *result;
      if (*(void *)(*a2 + 48) < *(void *)(*result + 48))
      {
        *__n128 result = *a2;
        *a2 = v13;
      }
    }
  }
  uint64_t v14 = *a4;
  if (*(void *)(*a5 + 48) < *(void *)(*a4 + 48))
  {
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *a3;
    if (*(void *)(*a4 + 48) < *(void *)(*a3 + 48))
    {
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      if (*(void *)(*a3 + 48) < *(void *)(*a2 + 48))
      {
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *result;
        if (*(void *)(*a2 + 48) < *(void *)(*result + 48))
        {
          *__n128 result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 1);
      uint64_t v4 = *a1;
      if (*(void *)(v3 + 48) < *(void *)(*a1 + 48))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      uint64_t v14 = *a1;
      uint64_t v15 = a1[1];
      unint64_t v16 = *(void *)(v15 + 48);
      unint64_t v17 = *(void *)(*a1 + 48);
      uint64_t v18 = *(a2 - 1);
      unint64_t v19 = *(void *)(v18 + 48);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (*(void *)(v40 + 48) < *(void *)(*a1 + 48))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          uint64_t v47 = *(a2 - 1);
          if (*(void *)(v47 + 48) >= v17) {
            return 1;
          }
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      uint64_t v20 = a1 + 1;
      uint64_t v21 = a1[1];
      uint64_t v22 = a1 + 2;
      uint64_t v23 = a1[2];
      uint64_t v24 = *a1;
      unint64_t v25 = *(void *)(v21 + 48);
      unint64_t v26 = *(void *)(*a1 + 48);
      unint64_t v27 = *(void *)(v23 + 48);
      if (v25 < v26)
      {
        unint64_t v28 = a1;
        uint64_t v29 = a1 + 2;
        uint64_t v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          unint64_t v28 = a1 + 1;
          uint64_t v29 = a1 + 2;
          uint64_t v30 = v24;
          if (v27 >= v26) {
            goto LABEL_35;
          }
        }
LABEL_34:
        uint64_t *v28 = v23;
        *uint64_t v29 = v24;
        uint64_t v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        uint64_t *v20 = v23;
        *uint64_t v22 = v21;
        unint64_t v28 = a1;
        uint64_t v29 = a1 + 1;
        uint64_t v30 = v21;
        if (v27 >= v26) {
          goto LABEL_36;
        }
        goto LABEL_34;
      }
LABEL_35:
      uint64_t v21 = v23;
LABEL_36:
      uint64_t v42 = *(a2 - 1);
      if (*(void *)(v42 + 48) < *(void *)(v21 + 48))
      {
        *uint64_t v22 = v42;
        *(a2 - 1) = v21;
        uint64_t v43 = *v22;
        uint64_t v44 = *v20;
        unint64_t v45 = *(void *)(v43 + 48);
        if (v45 < *(void *)(v44 + 48))
        {
          a1[1] = v43;
          a1[2] = v44;
          uint64_t v46 = *a1;
          if (v45 < *(void *)(*a1 + 48))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v6 = a1 + 2;
      uint64_t v5 = a1[2];
      uint64_t v7 = a1[1];
      uint64_t v8 = *a1;
      unint64_t v9 = *(void *)(v7 + 48);
      unint64_t v10 = *(void *)(*a1 + 48);
      unint64_t v11 = *(void *)(v5 + 48);
      if (v9 >= v10)
      {
        if (v11 >= v9) {
          goto LABEL_19;
        }
        a1[1] = v5;
        uint64_t *v6 = v7;
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 1;
      }
      else
      {
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 2;
        if (v11 < v9) {
          goto LABEL_18;
        }
        *a1 = v7;
        a1[1] = v8;
        uint64_t v12 = a1 + 1;
        uint64_t v13 = a1 + 2;
      }
      if (v11 >= v10) {
        goto LABEL_19;
      }
LABEL_18:
      *uint64_t v12 = v5;
      *uint64_t v13 = v8;
LABEL_19:
      unint64_t v31 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v32 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v35 = *v31;
        uint64_t v36 = *v6;
        unint64_t v37 = *(void *)(*v31 + 48);
        if (v37 < *(void *)(v36 + 48))
        {
          uint64_t v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            uint64_t v39 = v38 - 8;
            if (v38 == 8)
            {
              unint64_t v34 = a1;
              goto LABEL_22;
            }
            uint64_t v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(void *)(v36 + 48));
          unint64_t v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *unint64_t v34 = v35;
          if (++v32 == 8) {
            break;
          }
        }
        uint64_t v6 = v31++;
        if (v31 == a2) {
          return 1;
        }
      }
      return v31 + 1 == a2;
  }
}

void ggl::CommandBuffer::stableSortRenderItems(__n128 *this, char *a2)
{
  unint64_t v4 = (a2 - (char *)this) >> 3;
  if (a2 - (char *)this < 1025)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(this, a2, v4, 0, 0);
  }
  else
  {
    uint64_t v5 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v6 = (a2 - (char *)this) >> 3;
    while (1)
    {
      uint64_t v7 = (uint64_t *)operator new(8 * v6, v5);
      if (v7) {
        break;
      }
      BOOL v8 = v6 > 1;
      v6 >>= 1;
      if (!v8) {
        goto LABEL_5;
      }
    }
    unint64_t v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(this, a2, v4, v7, v6);
    operator delete(v9);
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(__n128 *a1, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      unint64_t v7 = *((void *)a2 - 1);
      unint64_t v8 = a1->n128_u64[0];
      if (*(void *)(v7 + 48) < *(void *)(a1->n128_u64[0] + 48))
      {
        a1->n128_u64[0] = v7;
        *((void *)a2 - 1) = v8;
      }
      return;
    }
    if ((uint64_t)a3 > 128)
    {
      unint64_t v20 = a3 >> 1;
      uint64_t v21 = &a1->n128_i8[8 * (a3 >> 1)];
      unint64_t v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>((uint64_t)a1, v21, v22, a4);
        uint64_t v23 = &a4[v20];
        std::__stable_sort_move<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>((uint64_t)&a1->n128_i64[a3 >> 1], a2, a3 - (a3 >> 1), v23);
        uint64_t v24 = -1;
        unint64_t v25 = v23;
        unint64_t v26 = a4;
        unint64_t v27 = a1;
        unint64_t v28 = &a4[a3];
        do
        {
          ++v24;
          if (v25 == v28)
          {
            if (v26 == v23) {
              return;
            }
            unint64_t v43 = (char *)&a4[v20] - (char *)v26 - 8;
            if (v43 >= 0x38)
            {
              if ((unint64_t)((char *)&a1->n128_u64[v24] - (char *)v26) >= 0x20)
              {
                unint64_t v45 = 0;
                uint64_t v46 = (v43 >> 3) + 1;
                uint64_t v47 = v46 & 0x3FFFFFFFFFFFFFFCLL;
                uint64_t v44 = &v26[v47];
                uint64_t v48 = v46 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  float v49 = &v27[v45 / 2];
                  __n128 v50 = *(__n128 *)&v26[v45 + 2];
                  *float v49 = *(__n128 *)&v26[v45];
                  v49[1] = v50;
                  v45 += 4;
                  v48 -= 4;
                }
                while (v48);
                if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
                  return;
                }
                unint64_t v27 = (__n128 *)((char *)v27 + v47 * 8);
              }
              else
              {
                uint64_t v44 = v26;
              }
            }
            else
            {
              uint64_t v44 = v26;
            }
            do
            {
              unint64_t v51 = *v44++;
              v27->n128_u64[0] = v51;
              unint64_t v27 = (__n128 *)((char *)v27 + 8);
            }
            while (v44 != v23);
            return;
          }
          uint64_t v29 = v25;
          uint64_t v30 = *v25;
          uint64_t v31 = *v26;
          unint64_t v32 = *(void *)(v30 + 48);
          unint64_t v33 = *(void *)(*v26 + 48);
          if (v32 < v33) {
            uint64_t v31 = v30;
          }
          v26 += v32 >= v33;
          unint64_t v25 = &v29[v32 < v33];
          v27->n128_u64[0] = v31;
          unint64_t v27 = (__n128 *)((char *)v27 + 8);
        }
        while (v26 != v23);
        if (v25 == v28) {
          return;
        }
        uint64_t v34 = -8;
        if (v32 >= v33) {
          uint64_t v34 = 0;
        }
        unint64_t v35 = (char *)&a4[a3] - (char *)v29 + v34 - 8;
        if (v35 <= 0x77 || (unint64_t)((char *)&a1->n128_u64[v24] - (char *)&v29[v32 < v33] + 8) < 0x20) {
          goto LABEL_35;
        }
        unint64_t v36 = 0;
        uint64_t v37 = (v35 >> 3) + 1;
        uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v39 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v40 = &v27[v36 / 2];
          __n128 v41 = *(__n128 *)&v25[v36 + 2];
          __n128 *v40 = *(__n128 *)&v25[v36];
          v40[1] = v41;
          v36 += 4;
          v39 -= 4;
        }
        while (v39);
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
          unint64_t v27 = (__n128 *)((char *)v27 + v38);
          unint64_t v25 = (uint64_t *)((char *)v25 + v38);
          do
          {
LABEL_35:
            unint64_t v42 = *v25++;
            v27->n128_u64[0] = v42;
            unint64_t v27 = (__n128 *)((char *)v27 + 8);
          }
          while (v25 != v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(&a1->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(a1, &a1->n128_i8[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)a4, a5);
      }
    }
    else if (a1 != (__n128 *)a2)
    {
      unint64_t v10 = &a1->n128_u64[1];
      if (&a1->n128_i8[8] != a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a1;
        do
        {
          unint64_t v14 = v12->n128_u64[0];
          uint64_t v12 = (__n128 *)v10;
          unint64_t v15 = *v10;
          unint64_t v16 = *(void *)(v15 + 48);
          if (v16 < *(void *)(v14 + 48))
          {
            uint64_t v17 = v11;
            do
            {
              *(unint64_t *)((char *)&a1->n128_u64[1] + v17) = v14;
              if (!v17)
              {
                uint64_t v13 = a1;
                goto LABEL_10;
              }
              unint64_t v14 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v17);
              v17 -= 8;
            }
            while (v16 < *(void *)(v14 + 48));
            uint64_t v13 = (__n128 *)&a1->n128_i8[v17 + 8];
LABEL_10:
            v13->n128_u64[0] = v15;
          }
          unint64_t v10 = &v12->n128_u64[1];
          v11 += 8;
        }
        while (&v12->n128_i8[8] != a2);
      }
    }
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(uint64_t result, char *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    unint64_t v6 = (char *)result;
    if (a3 == 1)
    {
LABEL_8:
      *unint64_t v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *((void *)a2 - 1);
      unint64_t v9 = *(void *)(v8 + 48);
      unint64_t v10 = *(void *)(*(void *)result + 48);
      if (v9 >= v10) {
        uint64_t v8 = *(void *)result;
      }
      *a4 = v8;
      unint64_t v4 = a4 + 1;
      if (v9 >= v10) {
        unint64_t v6 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v20 = a3 >> 1;
      uint64_t v21 = 8 * (a3 >> 1);
      uint64_t v22 = result + v21;
      std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(result, result + v21, a3 >> 1, a4, a3 >> 1);
      __n128 result = std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(&v6[v21], a2, a3 - v20, &v4[(unint64_t)v21 / 8], a3 - v20);
      uint64_t v23 = -1;
      uint64_t v24 = v4;
      unint64_t v25 = v6;
      unint64_t v26 = &v6[v21];
      do
      {
        ++v23;
        if (v26 == a2)
        {
          if (v25 == (char *)v22) {
            return result;
          }
          unint64_t v41 = &v6[8 * v20] - v25 - 8;
          if (v41 >= 0x38)
          {
            if ((unint64_t)((char *)&v4[v23] - v25) >= 0x20)
            {
              uint64_t v43 = 0;
              uint64_t v44 = (v41 >> 3) + 1;
              uint64_t v45 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              unint64_t v42 = &v24[v45];
              uint64_t v46 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v47 = &v24[v43];
                long long v48 = *(_OWORD *)&v25[v43 * 8 + 16];
                *uint64_t v47 = *(_OWORD *)&v25[v43 * 8];
                v47[1] = v48;
                v43 += 4;
                v46 -= 4;
              }
              while (v46);
              if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
              v25 += v45 * 8;
            }
            else
            {
              unint64_t v42 = v24;
            }
          }
          else
          {
            unint64_t v42 = v24;
          }
          do
          {
            uint64_t v49 = *(void *)v25;
            v25 += 8;
            *v42++ = v49;
          }
          while (v25 != (char *)v22);
          return result;
        }
        unint64_t v27 = v26;
        uint64_t v28 = *(void *)v26;
        uint64_t v29 = *(void *)v25;
        unint64_t v30 = *(void *)(v28 + 48);
        unint64_t v31 = *(void *)(*(void *)v25 + 48);
        if (v30 < v31) {
          uint64_t v29 = v28;
        }
        unint64_t v26 = &v27[8 * (v30 < v31)];
        v25 += 8 * (v30 >= v31);
        *v24++ = v29;
      }
      while (v25 != (char *)v22);
      if (v26 == a2) {
        return result;
      }
      uint64_t v32 = -8;
      if (v30 >= v31) {
        uint64_t v32 = 0;
      }
      unint64_t v33 = a2 - v27 + v32 - 8;
      if (v33 < 0x68 || (unint64_t)((char *)&v4[v23] - &v27[8 * (v30 < v31)] + 8) < 0x20) {
        goto LABEL_37;
      }
      uint64_t v34 = 0;
      uint64_t v35 = (v33 >> 3) + 1;
      uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v37 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v38 = &v24[v34];
        long long v39 = *(_OWORD *)&v26[v34 * 8 + 16];
        uint64_t *v38 = *(_OWORD *)&v26[v34 * 8];
        v38[1] = v39;
        v34 += 4;
        v37 -= 4;
      }
      while (v37);
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v26 += v36;
        uint64_t v24 = (uint64_t *)((char *)v24 + v36);
        do
        {
LABEL_37:
          uint64_t v40 = *(void *)v26;
          v26 += 8;
          *v24++ = v40;
        }
        while (v26 != a2);
      }
    }
    else if ((char *)result != a2)
    {
      uint64_t v11 = result + 8;
      *a4 = *(void *)result;
      if ((char *)(result + 8) != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a4;
        unint64_t v14 = a4;
        do
        {
          uint64_t v16 = *v14++;
          uint64_t v15 = v16;
          if (*(void *)(*(void *)v11 + 48) >= *(void *)(v16 + 48))
          {
            *unint64_t v14 = *(void *)v11;
          }
          else
          {
            v13[1] = v15;
            uint64_t v17 = a4;
            if (v13 != a4)
            {
              uint64_t v18 = v12;
              while (1)
              {
                uint64_t v17 = (uint64_t *)((char *)a4 + v18);
                uint64_t v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(void *)(*(void *)v11 + 48) >= *(void *)(v19 + 48)) {
                  break;
                }
                *uint64_t v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  uint64_t v17 = a4;
                  break;
                }
              }
            }
            *uint64_t v17 = *(void *)v11;
          }
          v11 += 8;
          v12 += 8;
          uint64_t v13 = v14;
        }
        while ((char *)v11 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(__n128 *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4) {
      return result;
    }
    while (1)
    {
      unint64_t v13 = a1->n128_u64[0];
      if (*(void *)(*(void *)a2 + 48) < *(void *)(a1->n128_u64[0] + 48)) {
        break;
      }
      a1 = (__n128 *)((char *)a1 + 8);
      if (!--a4) {
        return result;
      }
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        a1->n128_u64[0] = *(void *)a2;
        *(void *)a2 = v13;
        return result;
      }
      if (a4 >= 0) {
        uint64_t v30 = a4;
      }
      else {
        uint64_t v30 = a4 + 1;
      }
      uint64_t v23 = v30 >> 1;
      uint64_t v17 = &a1->n128_i8[8 * (v30 >> 1)];
      uint64_t v16 = a2;
      if (a2 != a3)
      {
        unint64_t v31 = (a3 - a2) >> 3;
        uint64_t v16 = a2;
        do
        {
          unint64_t v32 = v31 >> 1;
          unint64_t v33 = &v16[8 * (v31 >> 1)];
          uint64_t v35 = *(void *)v33;
          uint64_t v34 = v33 + 8;
          v31 += ~(v31 >> 1);
          if (*(void *)(v35 + 48) < *(void *)(*(void *)v17 + 48)) {
            uint64_t v16 = v34;
          }
          else {
            unint64_t v31 = v32;
          }
        }
        while (v31);
      }
      uint64_t v15 = (v16 - a2) >> 3;
      if (v17 != a2)
      {
LABEL_20:
        uint64_t v24 = v16 - a2;
        if (v16 == a2)
        {
          a2 = v17;
        }
        else
        {
          unint64_t v25 = v17 + 8;
          if (v17 + 8 == a2)
          {
            uint64_t v98 = *(void *)v17;
            uint64_t v100 = v23;
            uint64_t v36 = a2;
            size_t v37 = v16 - a2;
            uint64_t v38 = a6;
            long long v39 = a3;
            memmove(v17, v36, v37);
            uint64_t v23 = v100;
            a3 = v39;
            a6 = v38;
            a2 = &v17[v24];
            *(void *)&v17[v24] = v98;
          }
          else
          {
            unint64_t v26 = a2 + 8;
            if (a2 + 8 == v16)
            {
              uint64_t v40 = *((void *)v16 - 1);
              a2 = v17 + 8;
              if (v16 - 8 != v17)
              {
                float v99 = a6;
                uint64_t v101 = v23;
                unint64_t v41 = a3;
                memmove(v17 + 8, v17, v16 - 8 - v17);
                a6 = v99;
                uint64_t v23 = v101;
                a3 = v41;
              }
              *(void *)uint64_t v17 = v40;
            }
            else
            {
              uint64_t v27 = (a2 - v17) >> 3;
              if (v27 == v24 >> 3)
              {
                do
                {
                  uint64_t v28 = *((void *)v25 - 1);
                  *((void *)v25 - 1) = *((void *)v26 - 1);
                  *((void *)v26 - 1) = v28;
                  if (v25 == a2) {
                    break;
                  }
                  v25 += 8;
                  BOOL v29 = v26 == v16;
                  v26 += 8;
                }
                while (!v29);
              }
              else
              {
                uint64_t v42 = v24 >> 3;
                uint64_t v43 = (a2 - v17) >> 3;
                do
                {
                  uint64_t v44 = v43;
                  uint64_t v43 = v42;
                  uint64_t v42 = v44 % v42;
                }
                while (v42);
                if (v43)
                {
                  uint64_t v45 = &v17[8 * v43];
                  do
                  {
                    uint64_t v47 = *((void *)v45 - 1);
                    v45 -= 8;
                    uint64_t v46 = v47;
                    long long v48 = &v45[8 * v27];
                    uint64_t v49 = v45;
                    do
                    {
                      __n128 v50 = v48;
                      *(void *)uint64_t v49 = *(void *)v48;
                      uint64_t v51 = (v16 - v48) >> 3;
                      BOOL v52 = __OFSUB__(v27, v51);
                      uint64_t v54 = v27 - v51;
                      char v53 = (v54 < 0) ^ v52;
                      long long v48 = &v17[8 * v54];
                      if (v53) {
                        long long v48 = &v50[8 * v27];
                      }
                      uint64_t v49 = v50;
                    }
                    while (v48 != v45);
                    *(void *)__n128 v50 = v46;
                  }
                  while (v45 != v17);
                }
                a2 = &v17[8 * (v24 >> 3)];
              }
            }
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v14 = v8;
      }
      else {
        uint64_t v14 = v8 + 1;
      }
      uint64_t v15 = v14 >> 1;
      uint64_t v16 = &a2[8 * (v14 >> 1)];
      uint64_t v17 = a2;
      if (a2 != (char *)a1)
      {
        unint64_t v18 = (a2 - (char *)a1) >> 3;
        uint64_t v17 = (char *)a1;
        do
        {
          unint64_t v19 = v18 >> 1;
          unint64_t v20 = &v17[8 * (v18 >> 1)];
          uint64_t v22 = *(void *)v20;
          uint64_t v21 = v20 + 8;
          v18 += ~(v18 >> 1);
          if (*(void *)(*(void *)v16 + 48) < *(void *)(v22 + 48)) {
            unint64_t v18 = v19;
          }
          else {
            uint64_t v17 = v21;
          }
        }
        while (v18);
      }
      uint64_t v23 = (v17 - (char *)a1) >> 3;
      if (v17 != a2) {
        goto LABEL_20;
      }
    }
    a2 = v16;
LABEL_55:
    a4 -= v23;
    v8 -= v15;
    if (v23 + v15 >= a4 + v8)
    {
      float v59 = a2;
      float v60 = v16;
      uint64_t v61 = v23;
      uint64_t v62 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(a2, v60, a3, a4, v8, a6, a7);
      a2 = v17;
      uint64_t v8 = v15;
      a4 = v61;
      a3 = v59;
      a6 = v62;
      if (!v15) {
        return result;
      }
    }
    else
    {
      uint64_t v55 = v15;
      uint64_t v56 = a6;
      uint64_t v57 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(a1, v17, a2, v23, v55, a6, a7);
      a3 = v57;
      a1 = (__n128 *)a2;
      a2 = v16;
      a6 = v56;
      if (!v8) {
        return result;
      }
    }
  }
  if (a4 <= v8)
  {
    if (a1 == (__n128 *)a2) {
      return result;
    }
    unint64_t v73 = a2 - (char *)a1 - 8;
    float v74 = a6;
    float v75 = (char *)a1;
    if (v73 >= 0x18)
    {
      float v74 = a6;
      float v75 = (char *)a1;
      if ((unint64_t)(a6 - (char *)a1) > 0x1F)
      {
        uint64_t v76 = (v73 >> 3) + 1;
        uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        float v74 = &a6[v77];
        long long v78 = a1 + 1;
        long long v79 = (__n128 *)(a6 + 16);
        uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __n128 result = v78[-1];
          __n128 v81 = *v78;
          v79[-1] = result;
          *long long v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_76:
          if (v74 != a6)
          {
            while (a2 != a3)
            {
              unint64_t v83 = *(void *)a2;
              BOOL v84 = *(void *)(*(void *)a2 + 48) >= *(void *)(*(void *)a6 + 48);
              if (*(void *)(*(void *)a2 + 48) >= *(void *)(*(void *)a6 + 48)) {
                unint64_t v83 = *(void *)a6;
              }
              a2 += 8 * (*(void *)(*(void *)a2 + 48) < *(void *)(*(void *)a6 + 48));
              a6 += 8 * v84;
              a1->n128_u64[0] = v83;
              a1 = (__n128 *)((char *)a1 + 8);
              if (a6 == v74) {
                return result;
              }
            }
            memmove(a1, a6, v74 - a6);
          }
          return result;
        }
        float v75 = (char *)a1 + v77;
      }
    }
    do
    {
      uint64_t v82 = *(void *)v75;
      v75 += 8;
      *(void *)float v74 = v82;
      v74 += 8;
    }
    while (v75 != a2);
    goto LABEL_76;
  }
  if (a3 == a2) {
    return result;
  }
  float v63 = a3 - 8;
  unint64_t v64 = a3 - 8 - a2;
  if (v64 < 0x18)
  {
    float v65 = a6;
    unint64_t v66 = a2;
    goto LABEL_87;
  }
  float v65 = a6;
  unint64_t v66 = a2;
  if ((unint64_t)(a6 - a2) <= 0x1F)
  {
    do
    {
LABEL_87:
      uint64_t v85 = *(void *)v66;
      v66 += 8;
      *(void *)float v65 = v85;
      v65 += 8;
    }
    while (v66 != a3);
  }
  else
  {
    uint64_t v67 = (v64 >> 3) + 1;
    uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
    float v65 = &a6[v68];
    float v69 = (__n128 *)(a2 + 16);
    BOOL v70 = (__n128 *)(a6 + 16);
    uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = v69[-1];
      __n128 v72 = *v69;
      v70[-1] = result;
      *BOOL v70 = v72;
      v69 += 2;
      v70 += 2;
      v71 -= 4;
    }
    while (v71);
    if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
    {
      unint64_t v66 = &a2[v68];
      goto LABEL_87;
    }
  }
  if (v65 != a6)
  {
    uint64_t v86 = 0;
    while (a2 != (char *)a1)
    {
      uint64_t v87 = *((void *)a2 - 1);
      unint64_t v88 = *(void *)(v87 + 48);
      unint64_t v89 = *(void *)(*((void *)v65 - 1) + 48);
      if (v89 < v88) {
        a2 -= 8;
      }
      else {
        uint64_t v87 = *((void *)v65 - 1);
      }
      if (v89 >= v88) {
        v65 -= 8;
      }
      *((void *)a3 - 1) = v87;
      a3 -= 8;
      ++v86;
      if (v65 == a6) {
        return result;
      }
    }
    unint64_t v90 = v65 - a6 - 8;
    if (v90 >= 0x58 && (unint64_t)(v65 - v63 + 8 * v86 - 8) >= 0x20)
    {
      uint64_t v94 = 0;
      uint64_t v95 = (v90 >> 3) + 1;
      float v91 = &v65[-8 * (v95 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v96 = v95 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = *(__n128 *)&v65[v94 - 16];
        uint64_t v97 = &a3[v94];
        *((_OWORD *)v97 - 2) = *(_OWORD *)&v65[v94 - 32];
        *((__n128 *)v97 - 1) = result;
        v94 -= 32;
        v96 -= 4;
      }
      while (v96);
      if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
      {
        a3 -= 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
        goto LABEL_101;
      }
    }
    else
    {
      float v91 = v65;
LABEL_101:
      uint64_t v92 = a3 - 8;
      do
      {
        uint64_t v93 = *((void *)v91 - 1);
        v91 -= 8;
        *(void *)uint64_t v92 = v93;
        v92 -= 8;
      }
      while (v91 != a6);
    }
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::RenderTransaction *,std::shared_ptr<ggl::RenderTransaction>::__shared_ptr_default_delete<ggl::RenderTransaction,ggl::RenderTransaction>,std::allocator<ggl::RenderTransaction>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::RenderQueue::attachPass(ggl::RenderQueue *this, ggl::RenderTarget *a2, ggl::RenderQueue *a3)
{
  uint64_t v7 = *((void *)this + 17);
  uint64_t v6 = *((void *)this + 18);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 18);
  *((void *)a3 + 17) = v7;
  *((void *)a3 + 18) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  unint64_t v9 = *((void *)this + 10);
  unint64_t v10 = *((void *)this + 11);
  if (v9 >= v10)
  {
    uint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    uint64_t v13 = *((void *)this + 9);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v13) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v13) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 < 0x555555555555555) {
      uint64_t v12 = v15;
    }
    if (v12)
    {
      uint64_t v17 = 24 * v12;
      uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 12) + 16))(*((void *)this + 12), 24 * v12, 8);
      uint64_t v19 = v18 + 24 * v14;
      uint64_t v12 = v18 + v17;
      if (v18)
      {
        *(void *)uint64_t v19 = a2;
        unint64_t v20 = v18 + 24 * v14;
        *(void *)(v20 + 8) = a3;
        *(unsigned char *)(v20 + 16) = 0;
      }
    }
    else
    {
      uint64_t v19 = 24 * v14;
    }
    uint64_t v11 = v19 + 24;
    uint64_t v22 = *((void *)this + 9);
    uint64_t v21 = *((void *)this + 10);
    if (v21 != v22)
    {
      do
      {
        long long v23 = *(_OWORD *)(v21 - 24);
        *(void *)(v19 - 8) = *(void *)(v21 - 8);
        *(_OWORD *)(v19 - 24) = v23;
        v19 -= 24;
        v21 -= 24;
      }
      while (v21 != v22);
      uint64_t v21 = *((void *)this + 9);
    }
    *((void *)this + 9) = v19;
    *((void *)this + 10) = v11;
    uint64_t v24 = *((void *)this + 11);
    *((void *)this + 11) = v12;
    if (v21) {
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 12) + 40))(*((void *)this + 12), v21, v24 - v21);
    }
  }
  else
  {
    if (v9)
    {
      *(void *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = a3;
      *(unsigned char *)(v9 + 16) = 0;
    }
    uint64_t v11 = v9 + 24;
  }
  *((void *)this + 10) = v11;
}

uint64_t ggl::RenderQueue::addTextureToSynchronize(uint64_t this, Texture *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = *(void **)(this + 192);
  unint64_t v5 = *(void *)(this + 200);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      *unint64_t v4 = a2;
    }
    uint64_t v6 = v4 + 1;
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)(this + 184);
  uint64_t v8 = ((uint64_t)v4 - v7) >> 3;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61) {
    abort();
  }
  uint64_t v10 = v5 - v7;
  if (v10 >> 2 > v9) {
    unint64_t v9 = v10 >> 2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    uint64_t v11 = 8 * v9;
    this = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(this + 208) + 16))(*(void *)(this + 208), 8 * v9, 8);
    uint64_t v12 = (void *)(this + 8 * v8);
    unint64_t v9 = this + v11;
    if (this) {
      *uint64_t v12 = a2;
    }
  }
  else
  {
    uint64_t v12 = (void *)(8 * v8);
  }
  uint64_t v6 = v12 + 1;
  uint64_t v14 = *(void *)(v3 + 184);
  uint64_t v13 = *(void *)(v3 + 192);
  if (v13 != v14)
  {
    unint64_t v15 = v13 - v14 - 8;
    if (v15 < 0x38)
    {
      uint64_t v17 = *(void *)(v3 + 192);
    }
    else if ((unint64_t)(v13 - (void)v12) < 0x20)
    {
      uint64_t v17 = *(void *)(v3 + 192);
    }
    else
    {
      uint64_t v16 = (v15 >> 3) + 1;
      uint64_t v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v18 = v12 - 2;
      uint64_t v19 = (long long *)(v13 - 16);
      uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *uint64_t v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
    }
    do
    {
      uint64_t v22 = *(void *)(v17 - 8);
      v17 -= 8;
      *--uint64_t v12 = v22;
    }
    while (v17 != v14);
LABEL_24:
    uint64_t v13 = *(void *)(v3 + 184);
  }
  *(void *)(v3 + 184) = v12;
  *(void *)(v3 + 192) = v6;
  uint64_t v23 = *(void *)(v3 + 200);
  *(void *)(v3 + 200) = v9;
  if (v13) {
    this = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 208) + 40))(*(void *)(v3 + 208), v13, v23 - v13);
  }
LABEL_27:
  *(void *)(v3 + 192) = v6;
  return this;
}

uint64_t std::__function::__func<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57AAA0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF57AAA0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

void ggl::RenderDataHolder::~RenderDataHolder(ggl::RenderDataHolder *this)
{
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::RenderDataHolder::replaceRenderResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6 || ((uint64_t v7 = *(void *)(a1 + 24)) != 0 ? (v8 = v7 == 3735927469) : (v8 = 1), v8))
  {
    if (a2) {
      goto LABEL_8;
    }
  }
  else
  {
    while (1)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      if (!a2) {
        break;
      }
LABEL_8:
      unint64_t v9 = *(std::__shared_weak_count **)(a2 + 16);
      if (v9)
      {
        uint64_t v10 = *(void *)(a2 + 8);
        uint64_t v11 = std::__shared_weak_count::lock(v9);
        if (v11) {
          goto LABEL_13;
        }
      }
      std::__throw_bad_weak_ptr[abi:nn180100]();
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
LABEL_13:
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)(a1 + 24) = a3;
  ++*(_DWORD *)(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::DebugConsole>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DebugConsole>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5836D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DebugConsole>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5836D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::Performance::Counters::draw(ggl::Performance::Counters *this, ggl::DebugConsole *a2)
{
  mach_absolute_time();
  if (*((unsigned char *)this + 52))
  {
    if (*((_DWORD *)this + 10))
    {
      float v4 = *((float *)a2 + 7);
      unint64_t v5 = (_DWORD *)(*((void *)this + 2) + 64);
      float v6 = 100.0;
      uint64_t v7 = *((unsigned int *)this + 10);
      do
      {
        if (*(v5 - 1) && ((*((_DWORD *)this + 12) >> *(v5 - 2)) & 1) != 0)
        {
          if (*v5 == 2)
          {
            float v8 = v4 + 33.0;
          }
          else
          {
            float v8 = *((float *)a2 + 7);
            if (*v5 == 1) {
              float v8 = v4 + v4;
            }
          }
          float v6 = v8 + v6;
        }
        v5 += 18;
        --v7;
      }
      while (v7);
    }
    else
    {
      float v6 = 100.0;
    }
    *((_DWORD *)this + 2) = 1134493696;
    *(void *)this = 0x42C4000041600000;
    *((float *)this + 3) = v6 + 2.0;
    *((unsigned char *)this + 52) = 0;
  }
  ggl::DebugConsole::begin(a2);
}

__n128 std::__function::__func<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0,std::allocator<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57CAF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0,std::allocator<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57CAF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0,std::allocator<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

__n128 std::__function::__func<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0,std::allocator<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57CB40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0,std::allocator<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57CB40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0,std::allocator<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<ggl::Clear::ClearMesh *,std::shared_ptr<ggl::Clear::ClearMesh>::__shared_ptr_default_delete<ggl::Clear::ClearMesh,ggl::Clear::ClearMesh>,std::allocator<ggl::Clear::ClearMesh>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Clear::ClearMesh *,std::shared_ptr<ggl::Clear::ClearMesh>::__shared_ptr_default_delete<ggl::Clear::ClearMesh,ggl::Clear::ClearMesh>,std::allocator<ggl::Clear::ClearMesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

double ggl::BufferData::BufferData(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EF55A1F0;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 17) = a3;
  *(_WORD *)(a1 + 18) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a4 * a2;
  long long v4 = 0uLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  unint64_t v5 = &qword_1EB32C000;
  {
    uint64_t v9 = a1;
    long long v4 = 0uLL;
    unint64_t v5 = &qword_1EB32C000;
    int v8 = v7;
    a1 = v9;
    if (v8) {
      operator new();
    }
  }
  *(void *)(a1 + 96) = v5[287];
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 136) = v4;
  *(_OWORD *)(a1 + 152) = v4;
  *(_OWORD *)(a1 + 168) = v4;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FCCA0;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

void ggl::BufferData::resize(ggl::BufferData *this, uint64_t a2)
{
  uint64_t v5 = *((void *)this + 9);
  uint64_t v3 = (char *)this + 72;
  uint64_t v4 = v5;
  unint64_t v6 = *((void *)v3 - 8) * a2;
  unint64_t v7 = *((void *)v3 + 1) - v5;
  if (v6 != v7)
  {
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *((void *)this + 10) = v4 + v6;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)v3, v6 - v7);
    }
    int v8 = (std::__shared_weak_count *)*((void *)this + 4);
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *((void *)this + 15) = 0;
    *((_DWORD *)this + 28) = 0;
    uint64_t v9 = *((void *)this + 10) - *((void *)this + 9);
    *((void *)this + 5) = 0;
    *((void *)this + 6) = v9;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = v9;
  }
}

void std::__shared_ptr_emplace<ggl::Buffer,geo::StdAllocator<ggl::Buffer,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5892E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Buffer,geo::StdAllocator<ggl::Buffer,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5892E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::VertexData::~VertexData(ggl::VertexData *this)
{
  *((void *)this - 25) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)((char *)this - 72));
  uint64_t v2 = *((void *)this - 16);
  if (v2)
  {
    *((void *)this - 15) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this - 13) + 40))(*((void *)this - 13), v2, *((void *)this - 14) - v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this - 21);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *((void *)this - 25) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)((char *)this - 72));
  uint64_t v2 = *((void *)this - 16);
  if (v2)
  {
    *((void *)this - 15) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this - 13) + 40))(*((void *)this - 13), v2, *((void *)this - 14) - v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this - 21);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexData::~VertexData(std::mutex *this)
{
  this->__m_.__sig = (uint64_t)&unk_1EF55A1F0;
  std::mutex::~mutex(this + 2);
  uint64_t v2 = *(void *)this[1].__m_.__opaque;
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&this[1].__m_.__opaque[24] + 40))(*(void *)&this[1].__m_.__opaque[24], v2, *(void *)&this[1].__m_.__opaque[16] - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  this->__m_.__sig = (uint64_t)&unk_1EF55A1F0;
  std::mutex::~mutex(this + 2);
  uint64_t v2 = *(void *)this[1].__m_.__opaque;
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&this[1].__m_.__opaque[24] + 40))(*(void *)&this[1].__m_.__opaque[24], v2, *(void *)&this[1].__m_.__opaque[16] - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void *ggl::VertexData::VertexData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  double result = (void *)ggl::BufferData::BufferData(a1, *(void *)(*(void *)a3 + 24), 0, a6, a5, a4);
  *double result = &unk_1EF55A518;
  result[25] = &unk_1EF55A538;
  result[26] = a2;
  result[27] = a3;
  return result;
}

void non-virtual thunk to'ggl::TextureCube::~TextureCube(ggl::TextureCube *this)
{
  *((void *)this - 5) = &unk_1EF55A950;
  *(void *)this = &unk_1EF55A970;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((ggl::TextureCube *)((char *)this + 56));
  *((void *)this - 5) = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this - 4);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this - 2));
    *((void *)this - 2) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this - 3);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *((void *)this - 5) = &unk_1EF55A950;
  *(void *)this = &unk_1EF55A970;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((ggl::TextureCube *)((char *)this + 56));
  *((void *)this - 5) = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this - 4);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this - 2));
    *((void *)this - 2) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this - 3);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ggl::TextureCube::~TextureCube(ggl::TextureCube *this)
{
  *(void *)this = &unk_1EF55A950;
  *((void *)this + 5) = &unk_1EF55A970;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((ggl::TextureCube *)((char *)this + 96));
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55A950;
  *((void *)this + 5) = &unk_1EF55A970;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((ggl::TextureCube *)((char *)this + 96));
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

__n128 std::__function::__func<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56B890;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
}

void non-virtual thunk to'ggl::IndexData::~IndexData(ggl::IndexData *this)
{
  *((void *)this - 25) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)((char *)this - 72));
  uint64_t v2 = *((void *)this - 16);
  if (v2)
  {
    *((void *)this - 15) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this - 13) + 40))(*((void *)this - 13), v2, *((void *)this - 14) - v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this - 21);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *((void *)this - 25) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)((char *)this - 72));
  uint64_t v2 = *((void *)this - 16);
  if (v2)
  {
    *((void *)this - 15) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this - 13) + 40))(*((void *)this - 13), v2, *((void *)this - 14) - v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this - 21);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::IndexData::~IndexData(std::mutex *this)
{
  this->__m_.__sig = (uint64_t)&unk_1EF55A1F0;
  std::mutex::~mutex(this + 2);
  uint64_t v2 = *(void *)this[1].__m_.__opaque;
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&this[1].__m_.__opaque[24] + 40))(*(void *)&this[1].__m_.__opaque[24], v2, *(void *)&this[1].__m_.__opaque[16] - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  this->__m_.__sig = (uint64_t)&unk_1EF55A1F0;
  std::mutex::~mutex(this + 2);
  uint64_t v2 = *(void *)this[1].__m_.__opaque;
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&this[1].__m_.__opaque[24] + 40))(*(void *)&this[1].__m_.__opaque[24], v2, *(void *)&this[1].__m_.__opaque[16] - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t ggl::IndexData::IndexData(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t result = ggl::BufferData::BufferData(a1, 2, 1, a5, a4, a3);
  *(void *)uint64_t result = &unk_1EF561BA0;
  *(void *)(result + 8) = 2;
  *(void *)(result + 200) = &unk_1EF561BC0;
  *(void *)(result + 208) = a2;
  *(_DWORD *)(result + 216) = 0;
  return result;
}

uint64_t ggl::Renderer::enablePerformanceHUD(uint64_t this, char a2)
{
  *(unsigned char *)(this + 40) = a2;
  return this;
}

void ggl::Renderer::~Renderer(ggl::Renderer *this)
{
  *(void *)this = &unk_1EF561738;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4) {
    std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = (ggl::RenderQueue *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v6)
  {
    ggl::RenderQueue::~RenderQueue(v6);
    MEMORY[0x1A6239270]();
  }
  uint64_t v7 = *((void *)this + 7);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 8);
    uint64_t v9 = *((void *)this + 7);
    if (v8 != v7)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10)
        {
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 16;
      }
      while (v8 != v7);
      uint64_t v9 = *((void *)this + 7);
    }
    *((void *)this + 8) = v7;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 10) + 40))(*((void *)this + 10), v9, *((void *)this + 9) - v9);
  }
}

void ggl::Renderer::addDebugRenderer(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void **)(a1 + 64);
  unint64_t v5 = *(void *)(a1 + 72);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = ((uint64_t)v4 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      abort();
    }
    uint64_t v11 = v5 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      uint64_t v12 = 16 * v10;
      uint64_t v13 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), 16 * v10, 8);
      uint64_t v14 = (_OWORD *)(v13 + 16 * v9);
      unint64_t v10 = v13 + v12;
      if (v13)
      {
        long long v15 = *a2;
        *uint64_t v14 = *a2;
        if (*((void *)&v15 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
        }
      }
    }
    else
    {
      uint64_t v14 = (_OWORD *)(16 * v9);
    }
    uint64_t v7 = v14 + 1;
    uint64_t v16 = *(void **)(a1 + 56);
    uint64_t v17 = *(void **)(a1 + 64);
    if (v17 == v16)
    {
      *(void *)(a1 + 56) = v14;
      *(void *)(a1 + 64) = v7;
      uint64_t v20 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = v10;
    }
    else
    {
      do
      {
        long long v18 = *((_OWORD *)v17 - 1);
        v17 -= 2;
        *--uint64_t v14 = v18;
        *uint64_t v17 = 0;
        v17[1] = 0;
      }
      while (v17 != v16);
      uint64_t v17 = *(void **)(a1 + 56);
      uint64_t v19 = *(void **)(a1 + 64);
      *(void *)(a1 + 56) = v14;
      *(void *)(a1 + 64) = v7;
      uint64_t v20 = *(void *)(a1 + 72);
      for (*(void *)(a1 + 72) = v10; v19 != v17; v19 -= 2)
      {
        long long v21 = (std::__shared_weak_count *)*(v19 - 1);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    if (v17) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80), v17, v20 - (void)v17);
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = *((void *)a2 + 1);
      *uint64_t v4 = *(void *)a2;
      v4[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v7 = v4 + 2;
  }
  *(void *)(a1 + 64) = v7;
}

void ggl::Renderer::removeDebugRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v3 = *(void **)(a1 + 64);
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      v4 += 2;
      if (v4 == v3)
      {
        uint64_t v4 = *(void **)(a1 + 64);
        break;
      }
    }
  }
  if (v4 != v3)
  {
    unint64_t v5 = v4 + 2;
    if (v4 + 2 != v3)
    {
      do
      {
        uint64_t v4 = v5;
        long long v6 = *(_OWORD *)v5;
        *unint64_t v5 = 0;
        v5[1] = 0;
        uint64_t v7 = (std::__shared_weak_count *)*(v5 - 1);
        *((_OWORD *)v5 - 1) = v6;
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        unint64_t v5 = v4 + 2;
      }
      while (v4 + 2 != v3);
      uint64_t v3 = *(void **)(a1 + 64);
    }
    for (; v3 != v4; v3 -= 2)
    {
      uint64_t v8 = (std::__shared_weak_count *)*(v3 - 1);
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    *(void *)(a1 + 64) = v4;
  }
}

void sub_1A280060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v14 = mach_absolute_time() - a10;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add(*(atomic_ullong *volatile *)(ggl::Performance::Counters::instance(void)::counters + 32), v14);

  _Unwind_Resume(a1);
}

void sub_1A28007DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2800B0C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A2800E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::IOSurfaceTexture::~IOSurfaceTexture(ggl::IOSurfaceTexture *this)
{
  uint64_t v2 = (ggl::IOSurfaceTexture *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EF55D2F8;
  *(void *)this = &unk_1EF55D318;
  uint64_t v3 = (const void *)*((void *)this + 15);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 16);
  if (v4) {
    CFRelease(v4);
  }
  ggl::Texture2D::~Texture2D(v2);
  JUMPOUT(0x1A6239270);
}

{
  ggl::Texture2D *v2;
  const void *v3;
  const void *v4;
  uint64_t vars8;

  uint64_t v2 = (ggl::IOSurfaceTexture *)((char *)this - 40);
  *((void *)this - 5) = &unk_1EF55D2F8;
  *(void *)this = &unk_1EF55D318;
  uint64_t v3 = (const void *)*((void *)this + 15);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 16);
  if (v4) {
    CFRelease(v4);
  }
  ggl::Texture2D::~Texture2D(v2);
}

void sub_1A2800F8C(_Unwind_Exception *a1)
{
  ggl::Texture2D::~Texture2D(v1);
  _Unwind_Resume(a1);
}

void sub_1A2801028(_Unwind_Exception *a1)
{
  ggl::Texture2D::~Texture2D(v1);
  _Unwind_Resume(a1);
}

void ggl::IOSurfaceTexture::~IOSurfaceTexture(ggl::IOSurfaceTexture *this)
{
  *(void *)this = &unk_1EF55D2F8;
  *((void *)this + 5) = &unk_1EF55D318;
  uint64_t v2 = (const void *)*((void *)this + 20);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 21);
  if (v3) {
    CFRelease(v3);
  }
  ggl::Texture2D::~Texture2D(this);
  JUMPOUT(0x1A6239270);
}

{
  const void *v2;
  const void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF55D2F8;
  *((void *)this + 5) = &unk_1EF55D318;
  uint64_t v2 = (const void *)*((void *)this + 20);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 21);
  if (v3) {
    CFRelease(v3);
  }
  ggl::Texture2D::~Texture2D(this);
}

void sub_1A28010D8(_Unwind_Exception *a1)
{
  ggl::Texture2D::~Texture2D(v1);
  _Unwind_Resume(a1);
}

void sub_1A2801174(_Unwind_Exception *a1)
{
  ggl::Texture2D::~Texture2D(v1);
  _Unwind_Resume(a1);
}

uint64_t ggl::IOSurfaceTexture::IOSurfaceTexture(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, int a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 60) = a6;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = 1;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 84) = 0;
  *(void *)(a1 + 100) = 0x100000000;
  *(void *)a1 = &unk_1EF562EE0;
  *(void *)(a1 + 40) = &unk_1EF562F00;
  *(void *)(a1 + 48) = "";
  *(_WORD *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 130) = 1;
  uint64_t v9 = a5[1];
  *(void *)(a1 + 136) = *a5;
  *(void *)(a1 + 144) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 84) = a3;
  *(void *)a1 = &unk_1EF55D2F8;
  *(void *)(a1 + 40) = &unk_1EF55D318;
  *(void *)(a1 + 168) = 0;
  unsigned int v10 = 4 * vcvtd_n_u64_f64(ceil((double)a2 * 0.0625), 4uLL);
  *(_DWORD *)(a1 + 152) = v10;
  *(_DWORD *)(a1 + 156) = v10 * vcvtd_n_u64_f64(ceil((double)a3 * 0.0625), 4uLL);
  uint64_t v11 = 1380401729;
  switch(a4)
  {
    case 12:
    case 13:
      break;
    case 42:
      uint64_t v11 = 875704422;
      break;
    case 43:
      uint64_t v11 = 875704438;
      break;
    default:
      uint64_t v11 = 1111970369;
      break;
  }
  id v12 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v13 = [NSNumber numberWithUnsignedInt:a2];
  unint64_t v14 = [NSNumber numberWithUnsignedInt:a3];
  long long v15 = [NSNumber numberWithInt:v11];
  uint64_t v16 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 152)];
  uint64_t v17 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 156)];
  CFDictionaryRef v18 = (const __CFDictionary *)objc_msgSend(v12, "initWithObjectsAndKeys:", v13, *MEMORY[0x1E4F2F2C0], v14, *MEMORY[0x1E4F2F0E8], v15, *MEMORY[0x1E4F2F150], &unk_1EF5BB448, *MEMORY[0x1E4F2EFD8], MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F2F130], v16, *MEMORY[0x1E4F2EFE0], v17, *MEMORY[0x1E4F2EFB8], &unk_1EF5BB460, *MEMORY[0x1E4F2EFE8], 0);

  IOSurfaceRef v19 = IOSurfaceCreate(v18);
  *(void *)(a1 + 160) = v19;
  *(_DWORD *)(a1 + 56) = 4;
  return a1;
}

void sub_1A2801488(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  ggl::Texture2D::~Texture2D(v1);
  _Unwind_Resume(a1);
}

void ggl::IOSurfaceTexture::createTextureFromPixelBuffer(void *a1, CVPixelBufferRef pixelBuffer, int a3, uint64_t *a4)
{
  if (!CVPixelBufferGetIOSurface(pixelBuffer))
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v8 = operator new(0xC8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EF5856F8;
  uint64_t v9 = *a4;
  unsigned int v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v18 = v9;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int Width = CVPixelBufferGetWidth(pixelBuffer);
  int Height = CVPixelBufferGetHeight(pixelBuffer);
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  size_t v15 = BytesPerRow / CVPixelBufferGetWidth(pixelBuffer);
  if (PixelFormatType > 1111970368)
  {
    if (PixelFormatType == 1380401729)
    {
      if (v15 == 4)
      {
        if (a3) {
          int v16 = 13;
        }
        else {
          int v16 = 12;
        }
        goto LABEL_23;
      }
    }
    else if (PixelFormatType == 1111970369 && v15 == 4)
    {
      if (a3) {
        int v16 = 15;
      }
      else {
        int v16 = 14;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (PixelFormatType == 875704422)
  {
    if (v15 == 1)
    {
      int v16 = 42;
      goto LABEL_23;
    }
LABEL_22:
    int v16 = 0;
    goto LABEL_23;
  }
  if (PixelFormatType != 875704438 || v15 != 1) {
    goto LABEL_22;
  }
  int v16 = 43;
LABEL_23:
  v8[4] = 0;
  v8[5] = 0;
  *((_DWORD *)v8 + 14) = 0;
  v8[6] = 0;
  v8[10] = 0x100000001;
  *((_DWORD *)v8 + 22) = 0;
  *((_DWORD *)v8 + 23) = v16;
  *((_DWORD *)v8 + 24) = 1;
  *(void *)((char *)v8 + 100) = 0;
  *(void *)((char *)v8 + 116) = 0;
  *(void *)((char *)v8 + 108) = 0;
  *(void *)((char *)v8 + 124) = 0x100000000;
  v8[3] = &unk_1EF562EE0;
  v8[8] = &unk_1EF562F00;
  v8[9] = "";
  v8[17] = 0;
  v8[18] = 0;
  *((_WORD *)v8 + 76) = 0;
  *((unsigned char *)v8 + 154) = 1;
  v8[20] = v18;
  v8[21] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v8 + 26) = Width;
  *((_DWORD *)v8 + 27) = Height;
  v8[3] = &unk_1EF55D2F8;
  v8[8] = &unk_1EF55D318;
  v8[24] = 0;
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (IOSurface)
  {
    CFRetain(pixelBuffer);
    v8[24] = pixelBuffer;
    CFRetain(IOSurface);
    v8[23] = IOSurface;
    *((_DWORD *)v8 + 20) = 4;
  }
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1A2801848(_Unwind_Exception *a1)
{
  ggl::Texture2D::~Texture2D(v3);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void ggl::MetalDevice::~MetalDevice(ggl::MetalDevice *this)
{
  ggl::MetalDevice::~MetalDevice(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55A6F8;
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    *(void *)(v2 + 256) = 0;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 144));
  uint64_t v3 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  *(void *)this = off_1EF560C50;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t std::__shared_ptr_emplace<ggl::MetalResourceManager,geo::StdAllocator<ggl::MetalResourceManager,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 352);
}

uint64_t std::__shared_ptr_emplace<ggl::MetalResourceManager,geo::StdAllocator<ggl::MetalResourceManager,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::MetalResourceManager,geo::StdAllocator<ggl::MetalResourceManager,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::MetalResourceManager,geo::StdAllocator<ggl::MetalResourceManager,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

float ggl::NullRenderer::averageFramesPerSecond(ggl::NullRenderer *this)
{
  return 1.0;
}

void ggl::NullRenderer::readPixels(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ggl::NullRenderer::~NullRenderer(ggl::NullRenderer *this)
{
  ggl::Renderer::~Renderer(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::RenderTarget::~RenderTarget(ggl::RenderTarget *this)
{
  *((void *)this - 5) = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this - 4);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this - 2));
    *((void *)this - 2) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this - 3);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *((void *)this - 5) = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this - 4);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this - 2));
    *((void *)this - 2) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this - 3);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void textureWithData(void *a1, void *a2, void *a3, int a4)
{
  id v10 = a2;
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t v8 = operator new(0xB0uLL);
    v8[1] = 0;
    v8[2] = 0;
    *uint64_t v8 = &unk_1EF589EF0;
    uint64_t v9 = v12;
    std::allocator<ggl::Texture2D>::construct[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> const&>((uint64_t)(v8 + 3), v7, v12, a3);
    *a1 = v8 + 3;
    a1[1] = v8;
    if (!v9) {
      goto LABEL_7;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = v12;
    if (!v12) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_7:
}

void sub_1A280208C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void loadTexture(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  id v16 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  id v12 = [v16 pathForResource:v9 ofType:v10];
  uint64_t v13 = (void *)[v11 initWithContentsOfFile:v12];

  uint64_t v14 = *a5;
  size_t v15 = (std::__shared_weak_count *)a5[1];
  v17[0] = v14;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  textureWithData(a1, v13, v17, 2u, 0, 0);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_1A28021F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void textureWithData(void *a1, void *a2, void *a3, unsigned int a4, int a5, unsigned char *a6)
{
  id v14 = a2;
  uint64_t v11 = v15;
  if (v15)
  {
    id v12 = operator new(0xB0uLL);
    v12[1] = 0;
    v12[2] = 0;
    *id v12 = &unk_1EF589EF0;
    uint64_t v13 = v16;
    std::allocator<ggl::Texture2D>::construct[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> const&>((uint64_t)(v12 + 3), v11, v16, a3);
    *a1 = v12 + 3;
    a1[1] = v12;
    if (!v13) {
      goto LABEL_7;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = v16;
    if (!v16) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_7:
}

void sub_1A2802358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>()
{
  if (GEOGetGeoGLPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_5_53372);
  }
  os_log_t v0 = GEOGetGeoGLPerformanceLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoGLPerformanceLog_log, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1A1780000, v0, OS_LOG_TYPE_DEBUG, "Reading buffers without 'readable' usage may come with performance penalty.  NB This message is only logged once.", v1, 2u);
  }
}

uint64_t ggl::ResourceAccessor::accessConstantData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 + 8);
  if ((a4 & 0xFFFFFFFD) == 0
    && (*(unsigned char *)(a3 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    id v12 = &v10;
    uint64_t v11 = &v12;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 33) = 0;
  if (v8)
  {
    if (a2 && *(unsigned char *)(a3 + 17) != 2) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, a3, 0, v8, a4, 0);
    }
    else {
      uint64_t result = *(void *)(a3 + 72);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void non-virtual thunk to'ggl::Shader::~Shader(ggl::Shader *this)
{
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  {
    operator new();
  }
  uint64_t v4 = *(void (**)(void))(*(void *)ggl::Allocator::instance(void)::alloc + 40);
  v4();
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::Shader::~Shader(ggl::Shader *this)
{
  *((void *)this + 2) = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 5));
    *((void *)this + 5) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  {
    operator new();
  }
  uint64_t v4 = *(void (**)(void))(*(void *)ggl::Allocator::instance(void)::alloc + 40);
  v4();
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *((void *)this + 2) = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 5));
    *((void *)this + 5) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::ShaderFunction::~ShaderFunction(ggl::ShaderFunction *this)
{
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  {
    operator new();
  }
  uint64_t v4 = *(void (**)(void))(*(void *)ggl::Allocator::instance(void)::alloc + 40);
  v4();
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void gdc::component::DataRequestObserver::updateStatusCounts(int8x8_t *a1, unint64_t a2, size_t a3, unsigned int a4, unsigned int a5)
{
  if (a4 != a5)
  {
    unsigned int v6 = a4;
    id v9 = a1;
    char v10 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver>(a1);
    uint64_t v11 = v10[4];
    if (a2 >> 39 < (v10[5] - v11) >> 3)
    {
      uint64_t v12 = *(void *)(v11 + 8 * (a2 >> 39));
      if (v12)
      {
        unint64_t v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(a2) & 0x7F));
        uint64_t v15 = v10[7];
        uint64_t v14 = v10[8];
        if (v13 < (v14 - v15) >> 3)
        {
          uint64_t v16 = v15 + 8 * v13;
          if (v16 != v14 && *(_DWORD *)(v16 + 4) == HIDWORD(a2))
          {
            uint64_t v18 = v10[10];
            IOSurfaceRef v19 = (void *)v10[11];
            uint64_t v20 = (void *)(v18 + 104 * v13);
            if (v20 != v19 && v18 != 0)
            {
LABEL_86:
              gdc::component::DataRequestObserver::updatePendingState(v20, a3, v6, a5);
              unint64_t v88 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(v9);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v88, a2);
              return;
            }
          }
        }
      }
    }
    if (!a5) {
      return;
    }
    uint64_t v22 = (int64x2_t *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v9);
    unint64_t v95 = a2;
    uint64_t v23 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((int64x2_t *)v22[2].i64, (uint64_t)&v95);
    unint64_t v94 = a2 >> 39;
    if (v24)
    {
      unint64_t v47 = v22[5].u64[1];
      unint64_t v46 = v22[6].u64[0];
      if (v47 >= v46)
      {
        size_t v91 = a3;
        unsigned int v93 = v6;
        uint64_t v49 = v22[5].i64[0];
        uint64_t v50 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v47 - v49) >> 3);
        if ((unint64_t)(v50 + 1) > 0x276276276276276) {
          goto LABEL_90;
        }
        unint64_t v51 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v46 - v49) >> 3);
        uint64_t v52 = 2 * v51;
        if (2 * v51 <= v50 + 1) {
          uint64_t v52 = v50 + 1;
        }
        if (v51 >= 0x13B13B13B13B13BLL) {
          unint64_t v53 = 0x276276276276276;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          if (v53 > 0x276276276276276) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v54 = (char *)operator new(104 * v53);
        }
        else
        {
          uint64_t v54 = 0;
        }
        float v59 = &v54[104 * v50];
        float v60 = &v54[104 * v53];
        *((_DWORD *)v59 + 12) = 0;
        *((_OWORD *)v59 + 1) = 0u;
        *((_OWORD *)v59 + 2) = 0u;
        *(_OWORD *)float v59 = 0u;
        *((void *)v59 + 7) = 0;
        *((void *)v59 + 8) = 0;
        *((void *)v59 + 9) = 0;
        *((void *)v59 + 10) = 0;
        *((void *)v59 + 11) = 0;
        *((void *)v59 + 12) = 0;
        std::vector<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>>::__init_with_size[abi:nn180100]<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*,std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*>((void *)v59 + 10, 0, 0, 0);
        long long v48 = v59 + 104;
        uint64_t v62 = v22[5].i64[0];
        unint64_t v61 = v22[5].u64[1];
        if (v61 == v62)
        {
          int64x2_t v66 = vdupq_n_s64(v61);
        }
        else
        {
          do
          {
            long long v63 = *(_OWORD *)(v61 - 104);
            long long v64 = *(_OWORD *)(v61 - 88);
            long long v65 = *(_OWORD *)(v61 - 72);
            *((_DWORD *)v59 - 14) = *(_DWORD *)(v61 - 56);
            *(_OWORD *)(v59 - 72) = v65;
            *(_OWORD *)(v59 - 88) = v64;
            *(_OWORD *)(v59 - 104) = v63;
            *((void *)v59 - 5) = 0;
            *((void *)v59 - 4) = 0;
            *((void *)v59 - 6) = 0;
            *((_OWORD *)v59 - 3) = *(_OWORD *)(v61 - 48);
            *((void *)v59 - 4) = *(void *)(v61 - 32);
            *(void *)(v61 - 48) = 0;
            *(void *)(v61 - 40) = 0;
            *(void *)(v61 - 32) = 0;
            *((void *)v59 - 3) = 0;
            *((void *)v59 - 2) = 0;
            *((void *)v59 - 1) = 0;
            *(_OWORD *)(v59 - 24) = *(_OWORD *)(v61 - 24);
            *((void *)v59 - 1) = *(void *)(v61 - 8);
            v59 -= 104;
            *(void *)(v61 - 24) = 0;
            *(void *)(v61 - 16) = 0;
            *(void *)(v61 - 8) = 0;
            v61 -= 104;
          }
          while (v61 != v62);
          int64x2_t v66 = v22[5];
        }
        v22[5].i64[0] = (uint64_t)v59;
        v22[5].i64[1] = (uint64_t)v48;
        v22[6].i64[0] = (uint64_t)v60;
        uint64_t v68 = (char *)v66.i64[1];
        uint64_t v67 = (char *)v66.i64[0];
        while (v68 != v67)
        {
          uint64_t v69 = *((void *)v68 - 3);
          if (v69)
          {
            uint64_t v70 = *((void *)v68 - 2);
            uint64_t v71 = (void *)*((void *)v68 - 3);
            if (v70 != v69)
            {
              do
              {
                __n128 v72 = *(void **)(v70 - 24);
                if (v72)
                {
                  *(void *)(v70 - 16) = v72;
                  operator delete(v72);
                }
                v70 -= 32;
              }
              while (v70 != v69);
              uint64_t v71 = (void *)*((void *)v68 - 3);
            }
            *((void *)v68 - 2) = v69;
            operator delete(v71);
          }
          uint64_t v73 = *((void *)v68 - 6);
          if (v73)
          {
            uint64_t v74 = *((void *)v68 - 5);
            float v75 = (void *)*((void *)v68 - 6);
            if (v74 != v73)
            {
              do
              {
                uint64_t v76 = v74 - 32;
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v74 - 16));
                uint64_t v74 = v76;
              }
              while (v76 != v73);
              float v75 = (void *)*((void *)v68 - 6);
            }
            *((void *)v68 - 5) = v73;
            operator delete(v75);
          }
          v68 -= 104;
        }
        if (v67) {
          operator delete(v67);
        }
        unsigned int v6 = v93;
        a3 = v91;
      }
      else
      {
        *(_DWORD *)(v47 + 48) = 0;
        *(_OWORD *)(v47 + 16) = 0u;
        *(_OWORD *)(v47 + 32) = 0u;
        *(_OWORD *)unint64_t v47 = 0u;
        *(void *)(v47 + 56) = 0;
        *(void *)(v47 + 64) = 0;
        *(void *)(v47 + 72) = 0;
        *(void *)(v47 + 80) = 0;
        *(void *)(v47 + 88) = 0;
        *(void *)(v47 + 96) = 0;
        std::vector<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>>::__init_with_size[abi:nn180100]<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*,std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*>((void *)(v47 + 80), 0, 0, 0);
        long long v48 = (char *)(v47 + 104);
      }
      v22[5].i64[1] = (uint64_t)v48;
      uint64_t v55 = v22[15].i64[1];
      int v58 = (void *)v22[11].i64[0];
      if (v58)
      {
LABEL_73:
        do
        {
          uint64_t v97 = &v95;
          uint64_t v98 = 1;
          uint64_t v96 = v55;
          uint64_t v77 = v58[6];
          if (!v77) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v77 + 48))(v77, &v96, &v97);
          int v58 = (void *)*v58;
        }
        while (v58);
      }
    }
    else
    {
      size_t v90 = a3;
      unsigned int v92 = v6;
      unint64_t v89 = v9;
      uint64_t v25 = v22[5].i64[0];
      uint64_t v26 = ((uint64_t)v23 - v22[3].i64[1]) >> 3;
      uint64_t v27 = v25 + 104 * v26;
      *(_DWORD *)(v27 + 48) = 0;
      *(_OWORD *)(v27 + 16) = 0u;
      *(_OWORD *)(v27 + 32) = 0u;
      *(_OWORD *)uint64_t v27 = 0u;
      BOOL v29 = (void **)(v27 + 56);
      uint64_t v28 = *(void *)(v27 + 56);
      if (v28)
      {
        uint64_t v30 = v25 + 104 * v26;
        uint64_t v33 = *(void *)(v30 + 64);
        unint64_t v32 = (void *)(v30 + 64);
        uint64_t v31 = v33;
        uint64_t v34 = *(void **)(v27 + 56);
        if (v33 != v28)
        {
          do
          {
            uint64_t v35 = v31 - 32;
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v31 - 16));
            uint64_t v31 = v35;
          }
          while (v35 != v28);
          uint64_t v34 = *v29;
        }
        *unint64_t v32 = v28;
        operator delete(v34);
      }
      uint64_t v36 = v25 + 104 * v26;
      long long v39 = *(char **)(v36 + 80);
      uint64_t v38 = v36 + 80;
      size_t v37 = v39;
      *BOOL v29 = 0;
      *(void *)(v27 + 64) = 0;
      *(void *)(v27 + 72) = 0;
      if (v39)
      {
        uint64_t v40 = v25 + 104 * v26;
        uint64_t v43 = *(char **)(v40 + 88);
        unint64_t v41 = (char **)(v40 + 88);
        uint64_t v42 = v43;
        uint64_t v44 = v37;
        if (v43 != v37)
        {
          do
          {
            uint64_t v45 = (void *)*((void *)v42 - 3);
            if (v45)
            {
              *((void *)v42 - 2) = v45;
              operator delete(v45);
            }
            v42 -= 32;
          }
          while (v42 != v37);
          uint64_t v44 = *(char **)v38;
        }
        *unint64_t v41 = v37;
        operator delete(v44);
      }
      *(void *)uint64_t v38 = 0;
      *(void *)(v38 + 8) = 0;
      *(void *)(v38 + 16) = 0;
      uint64_t v55 = v22[15].i64[1];
      if (v27 == v22[5].i64[1])
      {
        id v9 = v89;
        unsigned int v6 = v92;
        a3 = v90;
        int v58 = (void *)v22[11].i64[0];
        if (v58) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v56 = (void *)v22[8].i64[0];
        id v9 = v89;
        unsigned int v6 = v92;
        a3 = v90;
        if (v56)
        {
          while (1)
          {
            uint64_t v97 = &v95;
            uint64_t v98 = 1;
            uint64_t v96 = v55;
            uint64_t v57 = v56[6];
            if (!v57) {
              break;
            }
            (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v57 + 48))(v57, &v96, &v97);
            uint64_t v56 = (void *)*v56;
            if (!v56) {
              goto LABEL_75;
            }
          }
LABEL_89:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_90:
          abort();
        }
      }
    }
LABEL_75:
    long long v78 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v9);
    uint64_t v79 = v78[4];
    if (v94 < (v78[5] - v79) >> 3
      && (uint64_t v80 = *(void *)(v79 + 8 * v94)) != 0
      && (unint64_t v81 = *(unsigned __int16 *)(v80 + 2 * (HIDWORD(a2) & 0x7F)), v83 = v78[7],
                                                                       uint64_t v82 = v78[8],
                                                                       v81 < (v82 - v83) >> 3)
      && ((uint64_t v84 = v83 + 8 * v81, v84 != v82) ? (v85 = *(_DWORD *)(v84 + 4) == HIDWORD(a2)) : (v85 = 0), v85))
    {
      uint64_t v86 = v78[11];
      uint64_t v87 = v78[10] + 104 * v81;
    }
    else
    {
      uint64_t v86 = v78[11];
      uint64_t v87 = v86;
    }
    if (v87 == v86) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = (void *)v87;
    }
    goto LABEL_86;
  }
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver>(int8x8_t *a1)
{
  unint64_t v10 = 0xB345CED1EE447345;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB345CED1EE447345;
    if (*(void *)&v1 <= 0xB345CED1EE447345) {
      unint64_t v3 = 0xB345CED1EE447345 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB345CED1EE447345;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB345CED1EE447345)
      {
        if (v5[2] == 0xB345CED1EE447345) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB345CED1EE447345) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB345CED1EE447345) {
    goto LABEL_11;
  }
  return v5[3];
}

void gdc::component::DataRequestObserver::updatePendingState(void *a1, size_t __sz, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = (char *)a1[10];
  id v9 = (char *)a1[11];
  unint64_t v10 = v8;
  if (v8 != v9)
  {
    unint64_t v10 = (char *)a1[10];
    while (__PAIR64__(*((unsigned __int16 *)v10 + 1), *(unsigned __int16 *)v10) != __PAIR64__(WORD1(__sz), (unsigned __int16)__sz)|| *((_DWORD *)v10 + 1) != HIDWORD(__sz))
    {
      v10 += 32;
      if (v10 == v9) {
        goto LABEL_7;
      }
    }
  }
  if (v10 == v9)
  {
LABEL_7:
    unint64_t v10 = (char *)a1[10];
    if (v8 != v9)
    {
      unint64_t v10 = (char *)a1[10];
      while (__PAIR64__(*((unsigned __int16 *)v10 + 1), *(unsigned __int16 *)v10) != __PAIR64__(WORD1(__sz), (unsigned __int16)__sz)|| *((_DWORD *)v10 + 1) != HIDWORD(__sz))
      {
        v10 += 32;
        if (v10 == v9) {
          goto LABEL_13;
        }
      }
    }
    if (v10 == v9)
    {
LABEL_13:
      unint64_t v11 = a1[12];
      if ((unint64_t)v9 >= v11)
      {
        uint64_t v13 = (v9 - v8) >> 5;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 59) {
          goto LABEL_60;
        }
        uint64_t v15 = v11 - (void)v8;
        if (v15 >> 4 > v14) {
          unint64_t v14 = v15 >> 4;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 59) {
            goto LABEL_61;
          }
          uint64_t v17 = (char *)operator new(32 * v16);
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[32 * v13];
        *(void *)uint64_t v18 = __sz;
        *((void *)v18 + 1) = 0;
        IOSurfaceRef v19 = &v17[32 * v16];
        *((void *)v18 + 2) = 0;
        *((void *)v18 + 3) = 0;
        uint64_t v12 = v18 + 32;
        if (v8 == v9)
        {
          a1[10] = v18;
          a1[11] = v12;
          a1[12] = v19;
        }
        else
        {
          uint64_t v20 = 0;
          do
          {
            long long v21 = &v18[v20];
            uint64_t v22 = &v9[v20];
            *((void *)v21 - 4) = *(void *)&v9[v20 - 32];
            *((void *)v21 - 2) = 0;
            *((void *)v21 - 1) = 0;
            *(_OWORD *)(v21 - 24) = *(_OWORD *)&v9[v20 - 24];
            *((void *)v21 - 1) = *(void *)&v9[v20 - 8];
            *((void *)v22 - 3) = 0;
            *((void *)v22 - 2) = 0;
            *((void *)v22 - 1) = 0;
            v20 -= 32;
          }
          while (&v9[v20] != v8);
          uint64_t v8 = (char *)a1[10];
          uint64_t v23 = (char *)a1[11];
          a1[10] = &v18[v20];
          a1[11] = v12;
          a1[12] = v19;
          while (v23 != v8)
          {
            char v24 = (void *)*((void *)v23 - 3);
            if (v24)
            {
              *((void *)v23 - 2) = v24;
              operator delete(v24);
            }
            v23 -= 32;
          }
        }
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(void *)id v9 = __sz;
        *((void *)v9 + 1) = 0;
        uint64_t v12 = v9 + 32;
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 3) = 0;
      }
      a1[11] = v12;
      unint64_t v10 = (char *)(v12 - 4);
    }
  }
  uint64_t v26 = (unsigned char *)*((void *)v10 + 2);
  unint64_t v25 = *((void *)v10 + 3);
  if ((unint64_t)v26 < v25)
  {
    *uint64_t v26 = a3;
    v26[1] = a4;
    uint64_t v27 = v26 + 2;
    goto LABEL_55;
  }
  uint64_t v28 = (unsigned char *)*((void *)v10 + 1);
  uint64_t v29 = v26 - v28;
  if (v26 - v28 <= -3) {
LABEL_60:
  }
    abort();
  uint64_t v30 = v29 >> 1;
  unint64_t v31 = v25 - (void)v28;
  if (v31 <= (v29 >> 1) + 1) {
    unint64_t v32 = v30 + 1;
  }
  else {
    unint64_t v32 = v31;
  }
  BOOL v33 = v31 >= 0x7FFFFFFFFFFFFFFELL;
  uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v33) {
    uint64_t v34 = v32;
  }
  if (v34 < 0) {
LABEL_61:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v35 = 2 * v34;
  uint64_t v36 = operator new(2 * v34);
  size_t v37 = &v36[2 * v30];
  uint64_t v38 = &v36[v35];
  *size_t v37 = a3;
  v37[1] = a4;
  uint64_t v27 = v37 + 2;
  if (v26 != v28)
  {
    unint64_t v39 = v26 - v28 - 2;
    if (v39 < 0x1E) {
      goto LABEL_64;
    }
    if ((unint64_t)(v26 - &v36[v29 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_64;
    }
    uint64_t v40 = (v39 >> 1) + 1;
    unint64_t v41 = &v36[2 * v30 - 16];
    uint64_t v42 = (long long *)(v26 - 16);
    unint64_t v43 = v40 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v44 = *v42;
      *(v41 - 1) = *(v42 - 1);
      *unint64_t v41 = v44;
      v41 -= 2;
      v42 -= 2;
      v43 -= 16;
    }
    while (v43);
    v37 -= 2 * (v40 & 0xFFFFFFFFFFFFFFF0);
    v26 -= 2 * (v40 & 0xFFFFFFFFFFFFFFF0);
    if (v40 != (v40 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_64:
      do
      {
        __int16 v45 = *((_WORD *)v26 - 1);
        v26 -= 2;
        *((_WORD *)v37 - 1) = v45;
        v37 -= 2;
      }
      while (v26 != v28);
    }
  }
  *((void *)v10 + 1) = v37;
  *((void *)v10 + 2) = v27;
  *((void *)v10 + 3) = v38;
  if (v28) {
    operator delete(v28);
  }
LABEL_55:
  *((void *)v10 + 2) = v27;
  if (a3) {
    --*((_DWORD *)a1 + a3 + 8);
  }
  if (a4) {
    ++*((_DWORD *)a1 + a4 + 8);
  }
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(int8x8_t *a1)
{
  uint64_t v10 = 0x56BA27B543634C5ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x56BA27B543634C5ALL;
    if (*(void *)&v1 <= 0x56BA27B543634C5AuLL) {
      uint64_t v3 = 0x56BA27B543634C5AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x56BA27B543634C5ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x56BA27B543634C5ALL)
      {
        if (v5[2] == 0x56BA27B543634C5ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x56BA27B543634C5ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x56BA27B543634C5ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::DidChange>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::DidChange>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::DidChange>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::DidChange>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>>,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *v5;
      a3[2] = 0;
      unint64_t v7 = (void **)(a3 + 2);
      a3[3] = 0;
      *a3 = v6;
      a3[1] = a3 + 2;
      uint64_t v8 = (uint64_t *)v5[1];
      if (v8 != v5 + 2)
      {
        do
        {
          uint64_t v9 = operator new(0x20uLL);
          unsigned int v10 = *((unsigned __int8 *)v8 + 25);
          v9[25] = v10;
          uint64_t v11 = (uint64_t *)a3[2];
          uint64_t v12 = a3 + 2;
          if ((void **)a3[1] == v7) {
            goto LABEL_19;
          }
          uint64_t v13 = (void *)a3[2];
          unint64_t v14 = a3 + 2;
          if (v11)
          {
            do
            {
              uint64_t v12 = v13;
              uint64_t v13 = (void *)v13[1];
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v14[2];
              BOOL v15 = *v12 == (void)v14;
              unint64_t v14 = v12;
            }
            while (v15);
          }
          if (v10 >= *((unsigned __int8 *)v12 + 25))
          {
LABEL_19:
            if (v11)
            {
              uint64_t v16 = v12 + 1;
            }
            else
            {
              uint64_t v12 = a3 + 2;
              uint64_t v16 = a3 + 2;
            }
          }
          else
          {
            uint64_t v12 = a3 + 2;
            uint64_t v16 = a3 + 2;
            if (v11)
            {
              do
              {
                while (1)
                {
                  uint64_t v12 = v11;
                  if (v10 >= *((unsigned __int8 *)v11 + 25)) {
                    break;
                  }
                  uint64_t v11 = (uint64_t *)*v11;
                  uint64_t v16 = v12;
                  if (!*v12) {
                    goto LABEL_22;
                  }
                }
                uint64_t v11 = (uint64_t *)v11[1];
              }
              while (v11);
              uint64_t v16 = v12 + 1;
            }
          }
LABEL_22:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 2) = v12;
          *uint64_t v16 = v9;
          uint64_t v17 = *(void *)a3[1];
          if (v17)
          {
            a3[1] = v17;
            uint64_t v9 = (unsigned char *)*v16;
          }
          uint64_t v18 = *v7;
          BOOL v15 = v9 == *v7;
          v9[24] = v15;
          if (!v15)
          {
            do
            {
              uint64_t v19 = *((void *)v9 + 2);
              if (*(unsigned char *)(v19 + 24)) {
                break;
              }
              uint64_t v20 = *(unsigned char **)(v19 + 16);
              uint64_t v21 = *(void *)v20;
              if (*(void *)v20 == v19)
              {
                uint64_t v24 = *((void *)v20 + 1);
                if (!v24 || (v25 = *(unsigned __int8 *)(v24 + 24), uint64_t v22 = (unsigned char *)(v24 + 24), v25))
                {
                  if (*(unsigned char **)v19 == v9)
                  {
                    uint64_t v26 = (uint64_t *)*((void *)v9 + 2);
                  }
                  else
                  {
                    uint64_t v26 = *(uint64_t **)(v19 + 8);
                    uint64_t v27 = *v26;
                    *(void *)(v19 + 8) = *v26;
                    if (v27)
                    {
                      *(void *)(v27 + 16) = v19;
                      uint64_t v20 = *(unsigned char **)(v19 + 16);
                    }
                    v26[2] = (uint64_t)v20;
                    *(void *)(*(void *)(v19 + 16) + 8 * (**(void **)(v19 + 16) != v19)) = v26;
                    *uint64_t v26 = v19;
                    *(void *)(v19 + 16) = v26;
                    uint64_t v20 = (unsigned char *)v26[2];
                    uint64_t v19 = *(void *)v20;
                  }
                  *((unsigned char *)v26 + 24) = 1;
                  v20[24] = 0;
                  uint64_t v30 = *(void *)(v19 + 8);
                  *(void *)uint64_t v20 = v30;
                  if (v30) {
                    *(void *)(v30 + 16) = v20;
                  }
                  *(void *)(v19 + 16) = *((void *)v20 + 2);
                  *(void *)(*((void *)v20 + 2) + 8 * (**((void **)v20 + 2) != (void)v20)) = v19;
                  *(void *)(v19 + 8) = v20;
                  goto LABEL_52;
                }
              }
              else if (!v21 || (v23 = *(unsigned __int8 *)(v21 + 24), uint64_t v22 = (unsigned char *)(v21 + 24), v23))
              {
                if (*(unsigned char **)v19 == v9)
                {
                  uint64_t v28 = *((void *)v9 + 1);
                  *(void *)uint64_t v19 = v28;
                  if (v28)
                  {
                    *(void *)(v28 + 16) = v19;
                    uint64_t v20 = *(unsigned char **)(v19 + 16);
                  }
                  *((void *)v9 + 2) = v20;
                  *(void *)(*(void *)(v19 + 16) + 8 * (**(void **)(v19 + 16) != v19)) = v9;
                  *((void *)v9 + 1) = v19;
                  *(void *)(v19 + 16) = v9;
                  uint64_t v20 = (unsigned char *)*((void *)v9 + 2);
                }
                else
                {
                  uint64_t v9 = (unsigned char *)*((void *)v9 + 2);
                }
                v9[24] = 1;
                v20[24] = 0;
                uint64_t v19 = *((void *)v20 + 1);
                uint64_t v29 = *(unsigned char **)v19;
                *((void *)v20 + 1) = *(void *)v19;
                if (v29) {
                  *((void *)v29 + 2) = v20;
                }
                *(void *)(v19 + 16) = *((void *)v20 + 2);
                *(void *)(*((void *)v20 + 2) + 8 * (**((void **)v20 + 2) != (void)v20)) = v19;
                *(void *)uint64_t v19 = v20;
LABEL_52:
                *((void *)v20 + 2) = v19;
                break;
              }
              *(unsigned char *)(v19 + 24) = 1;
              uint64_t v9 = v20;
              v20[24] = v20 == v18;
              *uint64_t v22 = 1;
            }
            while (v20 != v18);
          }
          ++a3[3];
          unint64_t v31 = (uint64_t *)v8[1];
          if (v31)
          {
            do
            {
              unint64_t v32 = v31;
              unint64_t v31 = (uint64_t *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              unint64_t v32 = (uint64_t *)v8[2];
              BOOL v15 = *v32 == (void)v8;
              uint64_t v8 = v32;
            }
            while (!v15);
          }
          uint64_t v8 = v32;
        }
        while (v32 != v5 + 2);
      }
      v5 += 4;
      a3 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::vector<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>>::__init_with_size[abi:nn180100]<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*,std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
LABEL_9:
    }
      abort();
    uint64_t v6 = result;
    uint64_t v7 = 4 * a4;
    uint64_t result = operator new(32 * a4);
    uint64_t v8 = result;
    void *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      uint64_t v11 = (unsigned char *)a2[1];
      *uint64_t v8 = *a2;
      v8[1] = 0;
      v8[2] = 0;
      v8[3] = 0;
      uint64_t v12 = (unsigned char *)a2[2];
      uint64_t v13 = v12 - v11;
      if (v12 != v11)
      {
        if (v13 < 0) {
          goto LABEL_9;
        }
        uint64_t v9 = (char *)operator new(v12 - v11);
        v8[1] = v9;
        v8[2] = v9;
        v8[3] = &v9[2 * (v13 >> 1)];
        size_t v10 = v13 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t result = memcpy(v9, v11, v10);
        v8[2] = &v9[v10];
      }
      v8 += 4;
      a2 += 4;
    }
    v6[1] = v8;
  }
  return result;
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver>::erase(a1 + 4, HIDWORD(a2));
  if (!v3) {
    return v3;
  }
  unint64_t v4 = (void *)a1[28];
  if (!v4) {
    return v3;
  }
  uint64_t v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    uint64_t v11 = v5;
    uint64_t v6 = v4[6];
    if (!v6) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v6 + 48))(v6, &v11, v12);
    unint64_t v4 = (void *)*v4;
    if (!v4) {
      return v3;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver>::erase(v8, v9);
}

uint64_t geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3) {
    return 0;
  }
  uint64_t v3 = *(void *)(*a1 + 8 * v2);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3) {
    return 0;
  }
  unint64_t v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7) {
    return 0;
  }
  uint64_t i = (uint64_t)(a1 + 6);
  uint64_t v12 = a1[6];
  uint64_t v13 = v12 + 104 * v5;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (void *)v8);
  uint64_t v14 = a1[7];
  int v15 = *(_DWORD *)(v14 - 56);
  long long v16 = *(_OWORD *)(v14 - 72);
  long long v17 = *(_OWORD *)(v14 - 88);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)(v14 - 104);
  *(_OWORD *)(v13 + 16) = v17;
  *(_OWORD *)(v13 + 32) = v16;
  *(_DWORD *)(v13 + 48) = v15;
  if (v13 != v14 - 104)
  {
    uint64_t v18 = v12 + 104 * v5;
    uint64_t v21 = *(void *)(v18 + 56);
    uint64_t v20 = v18 + 56;
    uint64_t v19 = v21;
    uint64_t v23 = *(void *)(v14 - 48);
    uint64_t v22 = *(uint64_t **)(v14 - 40);
    unint64_t v24 = ((uint64_t)v22 - v23) >> 5;
    uint64_t v25 = *(void *)(v20 + 16);
    if (v24 <= (v25 - v21) >> 5)
    {
      uint64_t v34 = *(void *)(v20 + 8);
      unint64_t v35 = (v34 - v19) >> 5;
      if (v35 >= v24)
      {
        if ((uint64_t *)v23 != v22)
        {
          unint64_t v39 = (void *)(v23 + 16);
          do
          {
            *(void *)uint64_t v19 = *(void *)v23;
            if (v23 != v19) {
              std::__tree<gdc::component::DataRequestStatus>::__assign_multi<std::__tree_const_iterator<gdc::component::DataRequestStatus,std::__tree_node<gdc::component::DataRequestStatus,void *> *,long>>((uint64_t **)(v19 + 8), *(void **)(v23 + 8), v39);
            }
            v23 += 32;
            v19 += 32;
            v39 += 4;
          }
          while ((uint64_t *)v23 != v22);
          uint64_t v34 = *(void *)(v20 + 8);
        }
        if (v34 != v19)
        {
          do
          {
            uint64_t v40 = v34 - 32;
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v34 - 16));
            uint64_t v34 = v40;
          }
          while (v40 != v19);
        }
        *(void *)(v20 + 8) = v19;
      }
      else
      {
        uint64_t v36 = (uint64_t *)(v23 + 32 * v35);
        if (v34 != v19)
        {
          __n128 v72 = (uint64_t *)(v23 + 32 * v35);
          uint64_t v37 = 0;
          uint64_t v38 = 32 * v35;
          do
          {
            *(void *)(v19 + v37) = *(void *)(v23 + v37);
            if (v23 != v19) {
              std::__tree<gdc::component::DataRequestStatus>::__assign_multi<std::__tree_const_iterator<gdc::component::DataRequestStatus,std::__tree_node<gdc::component::DataRequestStatus,void *> *,long>>((uint64_t **)(v19 + v37 + 8), *(void **)(v23 + v37 + 8), (void *)(v23 + 16 + v37));
            }
            v37 += 32;
          }
          while (v38 != v37);
          uint64_t v19 = *(void *)(v20 + 8);
          uint64_t v36 = v72;
        }
        *(void *)(v20 + 8) = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>>,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*>(v36, v22, (void *)v19);
      }
    }
    else
    {
      if (v19)
      {
        uint64_t v26 = *(void *)(v20 + 8);
        uint64_t v27 = (void *)v19;
        if (v26 != v19)
        {
          uint64_t v73 = v12;
          do
          {
            uint64_t v28 = v26 - 32;
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v26 - 16));
            uint64_t v26 = v28;
          }
          while (v28 != v19);
          uint64_t v27 = *(void **)v20;
          uint64_t v12 = v73;
        }
        *(void *)(v20 + 8) = v19;
        operator delete(v27);
        uint64_t v25 = 0;
        *(void *)uint64_t v20 = 0;
        *(void *)(v20 + 8) = 0;
        *(void *)(v20 + 16) = 0;
      }
      if ((((unint64_t)v22 - v23) & 0x8000000000000000) != 0) {
        goto LABEL_83;
      }
      uint64_t v29 = v25 >> 4;
      if (v25 >> 4 <= v24) {
        uint64_t v29 = ((uint64_t)v22 - v23) >> 5;
      }
      BOOL v30 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0;
      unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
      if (!v30) {
        unint64_t v31 = v29;
      }
      if (v31 >> 59) {
        goto LABEL_83;
      }
      uint64_t v32 = 4 * v31;
      BOOL v33 = operator new(32 * v31);
      *(void *)uint64_t v20 = v33;
      *(void *)(v20 + 8) = v33;
      *(void *)(v20 + 16) = &v33[v32];
      *(void *)(v20 + 8) = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>>,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*>((uint64_t *)v23, v22, v33);
    }
    uint64_t v41 = v12 + 104 * v5;
    long long v44 = *(char **)(v41 + 80);
    uint64_t v43 = v41 + 80;
    uint64_t v42 = v44;
    uint64_t v46 = *(void *)(v14 - 24);
    __int16 v45 = *(void **)(v14 - 16);
    unint64_t v47 = ((uint64_t)v45 - v46) >> 5;
    uint64_t v48 = *(void *)(v43 + 16);
    if (v47 <= (v48 - (uint64_t)v44) >> 5)
    {
      uint64_t v52 = *(char **)(v43 + 8);
      unint64_t v53 = (v52 - v42) >> 5;
      if (v53 >= v47)
      {
        if ((void *)v46 != v45)
        {
          do
          {
            *(void *)uint64_t v42 = *(void *)v46;
            if ((char *)v46 != v42) {
              std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>::__assign_with_size[abi:nn180100]<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*,std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*>((uint64_t)(v42 + 8), *(void *)(v46 + 8), *(char **)(v46 + 16), (uint64_t)(*(void *)(v46 + 16) - *(void *)(v46 + 8)) >> 1);
            }
            v46 += 32;
            v42 += 32;
          }
          while ((void *)v46 != v45);
          uint64_t v52 = *(char **)(v43 + 8);
        }
        for (uint64_t i = (uint64_t)(a1 + 6); v52 != v42; v52 -= 32)
        {
          uint64_t v71 = (void *)*((void *)v52 - 3);
          if (v71)
          {
            *((void *)v52 - 2) = v71;
            operator delete(v71);
          }
        }
        *(void *)(v43 + 8) = v42;
        goto LABEL_89;
      }
      uint64_t v54 = (void *)(v46 + 32 * v53);
      if (v52 != v42)
      {
        uint64_t v55 = 32 * v53;
        do
        {
          *(void *)uint64_t v42 = *(void *)v46;
          if ((char *)v46 != v42) {
            std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>::__assign_with_size[abi:nn180100]<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*,std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*>((uint64_t)(v42 + 8), *(void *)(v46 + 8), *(char **)(v46 + 16), (uint64_t)(*(void *)(v46 + 16) - *(void *)(v46 + 8)) >> 1);
          }
          v46 += 32;
          v42 += 32;
          v55 -= 32;
        }
        while (v55);
        uint64_t v42 = *(char **)(v43 + 8);
      }
      long long v65 = v42;
      if (v54 != v45)
      {
        long long v65 = v42;
        do
        {
          *(void *)long long v65 = *v54;
          *((void *)v65 + 1) = 0;
          *((void *)v65 + 2) = 0;
          *((void *)v65 + 3) = 0;
          uint64_t v69 = (unsigned char *)v54[1];
          uint64_t v68 = (unsigned char *)v54[2];
          uint64_t v70 = v68 - v69;
          if (v68 != v69)
          {
            if (v70 < 0) {
              goto LABEL_83;
            }
            int64x2_t v66 = (char *)operator new(v68 - v69);
            *((void *)v65 + 1) = v66;
            *((void *)v65 + 2) = v66;
            *((void *)v65 + 3) = &v66[2 * (v70 >> 1)];
            size_t v67 = v70 & 0xFFFFFFFFFFFFFFFELL;
            memcpy(v66, v69, v67);
            *((void *)v65 + 2) = &v66[v67];
          }
          v65 += 32;
          v54 += 4;
        }
        while (v54 != v45);
      }
      *(void *)(v43 + 8) = v65;
      goto LABEL_85;
    }
    if (v42)
    {
      uint64_t v49 = *(char **)(v43 + 8);
      uint64_t v50 = v42;
      if (v49 != v42)
      {
        do
        {
          unint64_t v51 = (void *)*((void *)v49 - 3);
          if (v51)
          {
            *((void *)v49 - 2) = v51;
            operator delete(v51);
          }
          v49 -= 32;
        }
        while (v49 != v42);
        uint64_t v50 = *(char **)v43;
      }
      *(void *)(v43 + 8) = v42;
      operator delete(v50);
      uint64_t v48 = 0;
      *(void *)uint64_t v43 = 0;
      *(void *)(v43 + 8) = 0;
      *(void *)(v43 + 16) = 0;
    }
    if ((((unint64_t)v45 - v46) & 0x8000000000000000) == 0)
    {
      uint64_t v56 = v48 >> 4;
      if (v48 >> 4 <= v47) {
        uint64_t v56 = ((uint64_t)v45 - v46) >> 5;
      }
      BOOL v30 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0;
      unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
      if (!v30) {
        unint64_t v57 = v56;
      }
      if (!(v57 >> 59))
      {
        uint64_t v58 = 4 * v57;
        float v59 = operator new(32 * v57);
        *(void *)uint64_t v43 = v59;
        *(void *)(v43 + 8) = v59;
        *(void *)(v43 + 16) = &v59[v58];
        while ((void *)v46 != v45)
        {
          *float v59 = *(void *)v46;
          v59[1] = 0;
          v59[2] = 0;
          v59[3] = 0;
          long long v63 = *(unsigned char **)(v46 + 8);
          uint64_t v62 = *(unsigned char **)(v46 + 16);
          uint64_t v64 = v62 - v63;
          if (v62 != v63)
          {
            if (v64 < 0) {
              goto LABEL_83;
            }
            float v60 = (char *)operator new(v62 - v63);
            v59[1] = v60;
            v59[2] = v60;
            v59[3] = &v60[2 * (v64 >> 1)];
            size_t v61 = v64 & 0xFFFFFFFFFFFFFFFELL;
            memcpy(v60, v63, v61);
            v59[2] = &v60[v61];
          }
          v59 += 4;
          v46 += 32;
        }
        *(void *)(v43 + 8) = v59;
LABEL_85:
        uint64_t i = (uint64_t)(a1 + 6);
        goto LABEL_89;
      }
    }
LABEL_83:
    abort();
  }
LABEL_89:
  std::vector<gdc::component::DataRequestObserver>::__base_destruct_at_end[abi:nn180100](i, a1[7] - 104);
  return 1;
}

void std::vector<gdc::component::DataRequestObserver>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 104)
  {
    uint64_t v5 = *(void *)(i - 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 16);
      uint64_t v7 = *(void **)(i - 24);
      if (v6 != v5)
      {
        do
        {
          unint64_t v8 = *(void **)(v6 - 24);
          if (v8)
          {
            *(void *)(v6 - 16) = v8;
            operator delete(v8);
          }
          v6 -= 32;
        }
        while (v6 != v5);
        uint64_t v7 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v5;
      operator delete(v7);
    }
    uint64_t v9 = *(void *)(i - 48);
    if (v9)
    {
      uint64_t v10 = *(void *)(i - 40);
      uint64_t v11 = *(void **)(i - 48);
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = v10 - 32;
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v10 - 16));
          uint64_t v10 = v12;
        }
        while (v12 != v9);
        uint64_t v11 = *(void **)(i - 48);
      }
      *(void *)(i - 40) = v9;
      operator delete(v11);
    }
  }
  *(void *)(a1 + 8) = a2;
}

_WORD *std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>::__assign_with_size[abi:nn180100]<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*,std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*>(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  uint64_t v6 = (char *)a2;
  size_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(_WORD **)a1;
  if (__sz <= (uint64_t)(v8 - (void)result) >> 1)
  {
    long long v17 = *(_WORD **)(a1 + 8);
    long long v16 = (void *)(a1 + 8);
    uint64_t v13 = v17;
    int64_t v18 = (char *)v17 - (char *)result;
    unint64_t v19 = v17 - result;
    if (v19 < __sz)
    {
      uint64_t v20 = (__int16 *)(a2 + 2 * v19);
      if (v13 == result) {
        goto LABEL_19;
      }
      unint64_t v21 = v18 - 2;
      if ((unint64_t)(v18 - 2) < 0xE)
      {
        uint64_t v22 = (__int16 *)a2;
        goto LABEL_18;
      }
      unint64_t v37 = (v18 & 0xFFFFFFFFFFFFFFFELL) - 1;
      uint64_t v38 = (char *)result + v37;
      unint64_t v39 = a2 + v37;
      BOOL v40 = (unint64_t)result + 1 >= a2 + (v18 & 0xFFFFFFFFFFFFFFFELL)
         || a2 + 1 >= (unint64_t)result + (v18 & 0xFFFFFFFFFFFFFFFELL);
      char v41 = !v40;
      uint64_t v22 = (__int16 *)a2;
      BOOL v42 = (unint64_t)v38 <= a2 || (unint64_t)result >= v39;
      if (!v42 || (v41 & 1) != 0) {
        goto LABEL_18;
      }
      uint64_t v43 = (v21 >> 1) + 1;
      if (v21 >= 0x3E)
      {
        unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFE0;
        float v59 = (long long *)(a2 + 32);
        float v60 = result + 16;
        unint64_t v61 = v43 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v63 = *(v59 - 2);
          long long v62 = *(v59 - 1);
          long long v65 = *v59;
          long long v64 = v59[1];
          v59 += 4;
          *(v60 - 2) = v63;
          *(v60 - 1) = v62;
          *float v60 = v65;
          v60[1] = v64;
          v60 += 4;
          v61 -= 32;
        }
        while (v61);
        if (v43 == v44) {
          goto LABEL_19;
        }
        if ((v43 & 0x18) == 0)
        {
          uint64_t v72 = 2 * v44;
          uint64_t v22 = (__int16 *)(a2 + v72);
          uint64_t result = (_WORD *)((char *)result + v72);
          do
          {
LABEL_18:
            __int16 v23 = *v22++;
            *result++ = v23;
          }
          while (v22 != v20);
          goto LABEL_19;
        }
      }
      else
      {
        unint64_t v44 = 0;
      }
      unint64_t v66 = 2 * (v43 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v67 = v44 - (v43 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v68 = v44;
      uint64_t v69 = (long long *)(a2 + 2 * v44);
      uint64_t v70 = &result[v68];
      do
      {
        long long v71 = *v69++;
        *v70++ = v71;
        v67 += 8;
      }
      while (v67);
      if (v43 != (v43 & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v22 = (__int16 *)(a2 + v66);
        uint64_t result = (_WORD *)((char *)result + v66);
        goto LABEL_18;
      }
LABEL_19:
      if (v20 == (__int16 *)a3)
      {
        int64_t v15 = 0;
        goto LABEL_67;
      }
      unint64_t v24 = v18 + a2;
      unint64_t v25 = (unint64_t)&a3[-v24 - 2];
      if (v25 < 0x1E)
      {
        uint64_t v27 = (char *)v13;
      }
      else
      {
        unint64_t v26 = (unint64_t)v13 - v24;
        uint64_t v27 = (char *)v13;
        if (v26 >= 0x20)
        {
          uint64_t v28 = (v25 >> 1) + 1;
          unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v20 = (__int16 *)((char *)v20 + v29 * 2);
          BOOL v30 = v13 + 8;
          unint64_t v31 = (long long *)(a2 + 2 * v19 + 16);
          unint64_t v32 = v28 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v33 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *BOOL v30 = v33;
            v30 += 2;
            v31 += 2;
            v32 -= 16;
          }
          while (v32);
          uint64_t v27 = (char *)&v13[v29];
          if (v28 == (v28 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_66;
          }
        }
      }
      do
      {
        __int16 v58 = *v20++;
        *(_WORD *)uint64_t v27 = v58;
        v27 += 2;
      }
      while (v20 != (__int16 *)a3);
LABEL_66:
      int64_t v15 = v27 - (char *)v13;
      goto LABEL_67;
    }
    if ((char *)a2 == a3)
    {
      unint64_t v35 = (char *)result;
    }
    else
    {
      unint64_t v34 = (unint64_t)&a3[-a2 - 2];
      if (v34 >= 0x3E)
      {
        unint64_t v45 = (v34 & 0xFFFFFFFFFFFFFFFELL) + 2;
        BOOL v47 = (unint64_t)result + 1 < a2 + v45 && a2 + 1 < (unint64_t)result + v45;
        if ((unint64_t)result + (v34 | 1) <= a2 || (unint64_t)result >= a2 + (v34 | 1))
        {
          if (v47)
          {
            unint64_t v35 = (char *)result;
          }
          else
          {
            uint64_t v49 = (v34 >> 1) + 1;
            unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v35 = (char *)&result[v50];
            unint64_t v51 = (long long *)(a2 + 32);
            uint64_t v52 = result + 16;
            unint64_t v53 = v49 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v55 = *(v51 - 2);
              long long v54 = *(v51 - 1);
              long long v57 = *v51;
              long long v56 = v51[1];
              v51 += 4;
              *(v52 - 2) = v55;
              *(v52 - 1) = v54;
              *uint64_t v52 = v57;
              v52[1] = v56;
              v52 += 4;
              v53 -= 32;
            }
            while (v53);
            if (v49 == (v49 & 0xFFFFFFFFFFFFFFE0)) {
              goto LABEL_33;
            }
            uint64_t v6 = (char *)(a2 + v50 * 2);
          }
        }
        else
        {
          unint64_t v35 = (char *)result;
        }
      }
      else
      {
        unint64_t v35 = (char *)result;
      }
      do
      {
        __int16 v36 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)unint64_t v35 = v36;
        v35 += 2;
      }
      while (v6 != a3);
    }
LABEL_33:
    int64_t v15 = v35 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_67;
  }
  if (result)
  {
    *(void *)(a1 + 8) = result;
    operator delete(result);
    size_t v8 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  if ((__sz & 0x8000000000000000) != 0) {
    goto LABEL_78;
  }
  if (v8 <= __sz) {
    size_t v10 = __sz;
  }
  else {
    size_t v10 = v8;
  }
  BOOL v40 = v8 >= 0x7FFFFFFFFFFFFFFELL;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v40) {
    uint64_t v11 = v10;
  }
  if (v11 < 0) {
LABEL_78:
  }
    abort();
  uint64_t v12 = v11;
  uint64_t result = operator new(2 * v11);
  uint64_t v13 = result;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = &result[v12];
  uint64_t v14 = (char *)result;
  if (v6 != a3)
  {
    uint64_t result = memcpy(result, v6, ((a3 - v6 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
    uint64_t v14 = (char *)v13 + ((a3 - v6 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2;
  }
  int64_t v15 = v14 - (char *)v13;
  long long v16 = (void *)(a1 + 8);
LABEL_67:
  *long long v16 = (char *)v13 + v15;
  return result;
}

void std::__tree<gdc::component::DataRequestStatus>::__assign_multi<std::__tree_const_iterator<gdc::component::DataRequestStatus,std::__tree_node<gdc::component::DataRequestStatus,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  if (a1[2])
  {
    uint64_t v6 = (uint64_t **)*a1;
    size_t v8 = a1 + 1;
    uint64_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    uint64_t v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      size_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *size_t v10 = 0;
          while (1)
          {
            unint64_t v34 = (void *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              size_t v10 = v34;
              unint64_t v34 = (void *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              size_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint64_t v12 = a2;
        uint64_t v13 = v9;
        do
        {
          uint64_t v9 = v10;
          unsigned int v14 = *((unsigned __int8 *)v12 + 25);
          *((unsigned char *)v13 + 25) = v14;
          int64_t v15 = *v8;
          long long v16 = a1 + 1;
          long long v17 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                long long v16 = v15;
                if (v14 >= *((unsigned __int8 *)v15 + 25)) {
                  break;
                }
                int64_t v15 = (uint64_t *)*v15;
                long long v17 = (uint64_t **)v16;
                if (!*v16) {
                  goto LABEL_20;
                }
              }
              int64_t v15 = (uint64_t *)v15[1];
            }
            while (v15);
            long long v17 = (uint64_t **)(v16 + 1);
          }
LABEL_20:
          *uint64_t v13 = 0;
          v13[1] = 0;
          v13[2] = (uint64_t)v16;
          *long long v17 = v13;
          int64_t v18 = (uint64_t *)**a1;
          if (v18)
          {
            *a1 = v18;
            uint64_t v13 = *v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            size_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              unint64_t v21 = (void *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *size_t v10 = 0;
                while (1)
                {
                  uint64_t v22 = (void *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    size_t v10 = v22;
                    uint64_t v22 = (void *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; unint64_t v21 = (void *)v10[1])
                {
                  do
                  {
                    size_t v10 = v21;
                    unint64_t v21 = (void *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            size_t v10 = 0;
          }
          unint64_t v19 = (void *)v12[1];
          if (v19)
          {
            do
            {
              unint64_t v4 = v19;
              unint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              unint64_t v4 = (void *)v12[2];
              BOOL v20 = *v4 == (void)v12;
              uint64_t v12 = v4;
            }
            while (!v20);
          }
          if (!v9) {
            break;
          }
          uint64_t v12 = v4;
          uint64_t v13 = v9;
        }
        while (v4 != a3);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
      if (v10)
      {
        for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
          size_t v10 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    unint64_t v24 = (uint64_t ***)(a1 + 1);
    do
    {
      unint64_t v25 = (uint64_t *)operator new(0x20uLL);
      unint64_t v26 = v25;
      unsigned int v27 = *((unsigned __int8 *)v4 + 25);
      *((unsigned char *)v25 + 25) = v27;
      uint64_t v28 = *v24;
      unint64_t v29 = a1 + 1;
      BOOL v30 = a1 + 1;
      if (*v24)
      {
        do
        {
          while (1)
          {
            unint64_t v29 = v28;
            if (v27 >= *((unsigned __int8 *)v28 + 25)) {
              break;
            }
            uint64_t v28 = (uint64_t **)*v28;
            BOOL v30 = v29;
            if (!*v29) {
              goto LABEL_56;
            }
          }
          uint64_t v28 = (uint64_t **)v28[1];
        }
        while (v28);
        BOOL v30 = v29 + 1;
      }
LABEL_56:
      *unint64_t v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *BOOL v30 = v25;
      unint64_t v31 = (uint64_t *)**a1;
      if (v31)
      {
        *a1 = v31;
        unint64_t v26 = *v30;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      unint64_t v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          long long v33 = v32;
          unint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          long long v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          unint64_t v4 = v33;
        }
        while (!v20);
      }
      unint64_t v4 = v33;
    }
    while (v33 != a3);
  }
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = a1[10];
  if (v2)
  {
    std::vector<gdc::component::DataRequestObserver>::__base_destruct_at_end[abi:nn180100]((uint64_t)(a1 + 10), v2);
    operator delete((void *)a1[10]);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[4];
  if (v4)
  {
    uint64_t v5 = (void *)a1[5];
    uint64_t v6 = (void *)a1[4];
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        *uint64_t v5 = 0;
        if (v8) {
          MEMORY[0x1A6239270](v7, 0x1000C40104B78CFLL);
        }
      }
      while (v5 != v4);
      uint64_t v6 = (void *)a1[4];
    }
    a1[5] = v4;
    operator delete(v6);
  }
  return a1;
}

void gdc::component::DataRequestObserver::processPendingState(gdc::Registry &)::$_1::operator()(int8x8_t **a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *a1;
  uint64_t v7 = (unsigned __int16 *)*((void *)a3 + 7);
  uint64_t v8 = (unsigned __int16 *)*((void *)a3 + 8);
  if (v7 != v8)
  {
    while (1)
    {
      while (1)
      {
        int v9 = *v7;
        if (v9 != v6[5].u16[0]) {
          break;
        }
        unint64_t v10 = *((unsigned int *)v7 + 1);
        int8x8_t v11 = v6[6];
        if (v10 >= (uint64_t)(*(void *)&v6[7] - *(void *)&v11) >> 3) {
          break;
        }
        uint64_t v12 = (unsigned __int16 *)(*(void *)&v11 + 8 * v10);
        if (*v12 != v9 || v12[1] != v7[1] || *((_DWORD *)v12 + 1) != v10) {
          break;
        }
        v7 += 16;
        if (v7 == v8) {
          goto LABEL_31;
        }
      }
      uint64_t v13 = (unsigned __int16 *)*((void *)v7 + 1);
      if (v13 != v7 + 8)
      {
        int v14 = *((_DWORD *)a3 + 2);
        do
        {
          --*(_DWORD *)&a3[4 * *((unsigned __int8 *)v13 + 25) + 12];
          int64_t v15 = (unsigned __int16 *)*((void *)v13 + 1);
          if (v15)
          {
            do
            {
              long long v16 = v15;
              int64_t v15 = *(unsigned __int16 **)v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              long long v16 = (unsigned __int16 *)*((void *)v13 + 2);
              BOOL v17 = *(void *)v16 == (void)v13;
              uint64_t v13 = v16;
            }
            while (!v17);
          }
          --v14;
          uint64_t v13 = v16;
        }
        while (v16 != v7 + 8);
        *((_DWORD *)a3 + 2) = v14;
      }
      if (v7 + 16 != v8) {
        break;
      }
      unint64_t v19 = v7;
      if (v8 != v7) {
        goto LABEL_26;
      }
LABEL_27:
      *((void *)a3 + 8) = v19;
      uint64_t v8 = v19;
      if (v7 == v19) {
        goto LABEL_31;
      }
    }
    int64_t v18 = v7;
    do
    {
      *(void *)int64_t v18 = *((void *)v18 + 4);
      unint64_t v21 = v18 + 8;
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v18 + 2));
      uint64_t v22 = v18 + 24;
      uint64_t v23 = *((void *)v18 + 6);
      *((void *)v18 + 1) = *((void *)v18 + 5);
      *((void *)v18 + 2) = v23;
      uint64_t v24 = *((void *)v18 + 7);
      *((void *)v18 + 3) = v24;
      if (v24)
      {
        *(void *)(v23 + 16) = v21;
        *((void *)v18 + 5) = v22;
        *uint64_t v22 = 0;
        *((void *)v18 + 7) = 0;
      }
      else
      {
        *((void *)v18 + 1) = v21;
      }
      unint64_t v19 = v18 + 16;
      BOOL v20 = v18 + 32;
      v18 += 16;
    }
    while (v20 != v8);
    uint64_t v8 = (unsigned __int16 *)*((void *)a3 + 8);
    if (v8 == v19) {
      goto LABEL_27;
    }
    do
    {
LABEL_26:
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v8 - 2));
      v8 -= 16;
    }
    while (v8 != v19);
    goto LABEL_27;
  }
LABEL_31:
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((_DWORD *)a3 + 12) = 0;
  unint64_t v26 = (unsigned __int16 *)*((void *)a3 + 10);
  unint64_t v25 = (unsigned __int16 *)*((void *)a3 + 11);
  if (v26 == v25) {
    goto LABEL_166;
  }
  uint64_t v259 = v5;
  v261 = a3 + 12;
  unint64_t v263 = (unsigned __int16 *)*((void *)a3 + 11);
  do
  {
    int v27 = *v26;
    if (v27 == v6[5].u16[0])
    {
      unint64_t v28 = *((unsigned int *)v26 + 1);
      int8x8_t v29 = v6[6];
      if (v28 < (uint64_t)(*(void *)&v6[7] - *(void *)&v29) >> 3)
      {
        BOOL v30 = (unsigned __int16 *)(*(void *)&v29 + 8 * v28);
        if (*v30 == v27)
        {
          int v31 = v30[1];
          if (v31 == v26[1] && *((_DWORD *)v30 + 1) == v28)
          {
            long long v33 = (unsigned __int16 *)*((void *)a3 + 7);
            unint64_t v32 = *((void *)a3 + 8);
            unint64_t v34 = v33;
            if (v33 != (unsigned __int16 *)v32)
            {
              unint64_t v34 = (unsigned __int16 *)*((void *)a3 + 7);
              while (v27 != *v34 || v31 != v34[1] || v28 != *((_DWORD *)v34 + 1))
              {
                v34 += 16;
                if (v34 == (unsigned __int16 *)v32) {
                  goto LABEL_46;
                }
              }
            }
            if (v34 == (unsigned __int16 *)v32)
            {
LABEL_46:
              unint64_t v34 = (unsigned __int16 *)*((void *)a3 + 7);
              if (v33 != (unsigned __int16 *)v32)
              {
                unint64_t v34 = (unsigned __int16 *)*((void *)a3 + 7);
                while (v27 != *v34 || v31 != v34[1] || v28 != *((_DWORD *)v34 + 1))
                {
                  v34 += 16;
                  if (v34 == (unsigned __int16 *)v32) {
                    goto LABEL_53;
                  }
                }
              }
              if (v34 == (unsigned __int16 *)v32)
              {
LABEL_53:
                v266[0] = 0;
                v266[1] = 0;
                uint64_t v265 = (uint64_t)v266;
                unint64_t v35 = *(unint64_t **)v26;
                v269[0] = 0;
                v269[1] = 0;
                v267 = v35;
                uint64_t v268 = (uint64_t)v269;
                unint64_t v34 = v33;
                if (v33 != (unsigned __int16 *)v32)
                {
                  unint64_t v34 = v33;
                  while (*v34 != (unsigned __int16)v35
                       || v34[1] != v35 >> 16
                       || *((_DWORD *)v34 + 1) != HIDWORD(v35))
                  {
                    v34 += 16;
                    if (v34 == (unsigned __int16 *)v32) {
                      goto LABEL_61;
                    }
                  }
                }
                if (v34 == (unsigned __int16 *)v32)
                {
LABEL_61:
                  unint64_t v37 = *((void *)a3 + 9);
                  if (v32 >= v37)
                  {
                    uint64_t v42 = (uint64_t)(v32 - (void)v33) >> 5;
                    unint64_t v43 = v42 + 1;
                    if ((unint64_t)(v42 + 1) >> 59) {
                      goto LABEL_404;
                    }
                    uint64_t v44 = v37 - (void)v33;
                    if (v44 >> 4 > v43) {
                      unint64_t v43 = v44 >> 4;
                    }
                    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v45 = v43;
                    }
                    if (v45)
                    {
                      if (v45 >> 59) {
                        std::__throw_bad_array_new_length[abi:nn180100]();
                      }
                      uint64_t v46 = (char *)operator new(32 * v45);
                    }
                    else
                    {
                      uint64_t v46 = 0;
                    }
                    BOOL v47 = &v46[32 * v42];
                    *((void *)v47 + 2) = 0;
                    *((void *)v47 + 3) = 0;
                    uint64_t v48 = &v46[32 * v45];
                    *(void *)BOOL v47 = v35;
                    *((void *)v47 + 1) = v47 + 16;
                    unint64_t v39 = v47 + 32;
                    if (v33 == (unsigned __int16 *)v32)
                    {
                      *((void *)a3 + 7) = v47;
                      *((void *)a3 + 8) = v39;
                      *((void *)a3 + 9) = v48;
                    }
                    else
                    {
                      uint64_t v49 = 0;
                      do
                      {
                        unint64_t v50 = &v47[v49];
                        *((void *)v50 - 4) = *(void *)(v32 + v49 - 32);
                        *((void *)v50 - 3) = *(void *)(v32 + v49 - 24);
                        unint64_t v51 = (uint64_t *)(v32 + v49 - 16);
                        uint64_t v52 = *v51;
                        *(void *)&v47[v49 - 16] = *v51;
                        uint64_t v53 = (uint64_t)&v47[v49 - 16];
                        uint64_t v54 = *(void *)(v32 + v49 - 8);
                        *((void *)v50 - 1) = v54;
                        if (v54)
                        {
                          *(void *)(v52 + 16) = v53;
                          *(void *)(v32 + v49 - 24) = v51;
                          *unint64_t v51 = 0;
                          *(void *)(v32 + v49 - 8) = 0;
                        }
                        else
                        {
                          *((void *)v50 - 3) = v53;
                        }
                        v49 -= 32;
                      }
                      while ((unsigned __int16 *)(v32 + v49) != v33);
                      long long v55 = &v47[v49];
                      long long v33 = (unsigned __int16 *)*((void *)a3 + 7);
                      long long v56 = (unsigned __int16 *)*((void *)a3 + 8);
                      *((void *)a3 + 7) = v55;
                      *((void *)a3 + 8) = v39;
                      *((void *)a3 + 9) = v48;
                      if (v56 != v33)
                      {
                        do
                        {
                          long long v57 = v56 - 16;
                          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v56 - 2));
                          long long v56 = v57;
                        }
                        while (v57 != v33);
                      }
                    }
                    if (v33) {
                      operator delete(v33);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v32 = v35;
                    *(void *)(v32 + 16) = 0;
                    *(void *)(v32 + 8) = v32 + 16;
                    *(void *)(v32 + 24) = 0;
                    uint64_t v38 = (void *)v268;
                    if ((void *)v268 != v269)
                    {
                      do
                      {
                        std::__tree<gdc::component::DataRequestStatus>::__emplace_hint_multi<gdc::component::DataRequestStatus const&>((uint64_t ***)(v32 + 8), (uint64_t **)(v32 + 16), *((unsigned char *)v38 + 25));
                        BOOL v40 = (void *)v38[1];
                        if (v40)
                        {
                          do
                          {
                            char v41 = v40;
                            BOOL v40 = (void *)*v40;
                          }
                          while (v40);
                        }
                        else
                        {
                          do
                          {
                            char v41 = (void *)v38[2];
                            BOOL v17 = *v41 == (void)v38;
                            uint64_t v38 = v41;
                          }
                          while (!v17);
                        }
                        uint64_t v38 = v41;
                      }
                      while (v41 != v269);
                    }
                    unint64_t v39 = (void *)(v32 + 32);
                  }
                  *((void *)a3 + 8) = v39;
                  unint64_t v34 = (unsigned __int16 *)(v39 - 4);
                  __int16 v36 = (void *)v269[0];
                }
                else
                {
                  __int16 v36 = 0;
                }
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v36);
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v266[0]);
                unint64_t v25 = v263;
              }
            }
            __int16 v58 = (_WORD *)*((void *)v26 + 1);
            float v59 = (_WORD *)*((void *)v26 + 2);
            if (v58 != v59)
            {
              float v60 = (uint64_t **)(v34 + 8);
              do
              {
                unsigned int v61 = (unsigned __int16)*v58;
                unsigned int v62 = *v58;
                if (*v58)
                {
                  long long v63 = *v60;
                  if (*v60)
                  {
                    long long v64 = v34 + 8;
                    long long v65 = *v60;
                    do
                    {
                      unsigned int v66 = *((unsigned __int8 *)v65 + 25);
                      BOOL v67 = v66 >= v62;
                      if (v66 >= v62) {
                        uint64_t v68 = (uint64_t **)v65;
                      }
                      else {
                        uint64_t v68 = (uint64_t **)(v65 + 1);
                      }
                      if (v67) {
                        long long v64 = (unsigned __int16 *)v65;
                      }
                      long long v65 = *v68;
                    }
                    while (*v68);
                    if (v64 != (unsigned __int16 *)v60 && *((unsigned __int8 *)v64 + 25) <= v62)
                    {
                      --*(_DWORD *)&v261[4 * *v58];
                      uint64_t v69 = (unsigned __int16 *)*((void *)v64 + 1);
                      uint64_t v70 = v64;
                      if (v69)
                      {
                        do
                        {
                          long long v71 = v69;
                          uint64_t v69 = *(unsigned __int16 **)v69;
                        }
                        while (v69);
                      }
                      else
                      {
                        do
                        {
                          long long v71 = (unsigned __int16 *)*((void *)v70 + 2);
                          BOOL v17 = *(void *)v71 == (void)v70;
                          uint64_t v70 = v71;
                        }
                        while (!v17);
                      }
                      if (*((unsigned __int16 **)v34 + 1) == v64) {
                        *((void *)v34 + 1) = v71;
                      }
                      --*((void *)v34 + 3);
                      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v63, (uint64_t *)v64);
                      operator delete(v64);
                      unint64_t v25 = v263;
                    }
                  }
                  unsigned int v72 = v61 >> 8;
                  if (v61 >> 8)
                  {
LABEL_122:
                    ++*(_DWORD *)&v261[4 * v72];
                    uint64_t v73 = (uint64_t *)operator new(0x20uLL);
                    *((unsigned char *)v73 + 25) = v72;
                    uint64_t v74 = *v60;
                    float v75 = (uint64_t **)(v34 + 8);
                    uint64_t v76 = (uint64_t **)(v34 + 8);
                    if (*v60)
                    {
                      do
                      {
                        while (1)
                        {
                          float v75 = (uint64_t **)v74;
                          if (*((unsigned __int8 *)v74 + 25) <= v72) {
                            break;
                          }
                          uint64_t v74 = (uint64_t *)*v74;
                          uint64_t v76 = v75;
                          if (!*v75) {
                            goto LABEL_131;
                          }
                        }
                        uint64_t v74 = (uint64_t *)v74[1];
                      }
                      while (v74);
                      uint64_t v76 = v75 + 1;
                    }
LABEL_131:
                    uint64_t *v73 = 0;
                    v73[1] = 0;
                    v73[2] = (uint64_t)v75;
                    *uint64_t v76 = v73;
                    uint64_t v77 = **((void **)v34 + 1);
                    if (v77)
                    {
                      *((void *)v34 + 1) = v77;
                      uint64_t v73 = *v76;
                    }
                    long long v78 = *v60;
                    BOOL v17 = v73 == *v60;
                    *((unsigned char *)v73 + 24) = v17;
                    unint64_t v25 = v263;
                    if (!v17)
                    {
                      do
                      {
                        uint64_t v79 = v73[2];
                        if (*(unsigned char *)(v79 + 24)) {
                          break;
                        }
                        uint64_t v80 = *(uint64_t **)(v79 + 16);
                        uint64_t v81 = *v80;
                        if (*v80 == v79)
                        {
                          uint64_t v84 = v80[1];
                          if (!v84 || (v85 = *(unsigned __int8 *)(v84 + 24), uint64_t v82 = (unsigned char *)(v84 + 24), v85))
                          {
                            if (*(uint64_t **)v79 == v73)
                            {
                              uint64_t v86 = v73[2];
                            }
                            else
                            {
                              uint64_t v86 = *(void *)(v79 + 8);
                              uint64_t v87 = *(void *)v86;
                              *(void *)(v79 + 8) = *(void *)v86;
                              if (v87)
                              {
                                *(void *)(v87 + 16) = v79;
                                uint64_t v80 = *(uint64_t **)(v79 + 16);
                              }
                              *(void *)(v86 + 16) = v80;
                              *(void *)(*(void *)(v79 + 16) + 8 * (**(void **)(v79 + 16) != v79)) = v86;
                              *(void *)uint64_t v86 = v79;
                              *(void *)(v79 + 16) = v86;
                              uint64_t v80 = *(uint64_t **)(v86 + 16);
                              uint64_t v79 = *v80;
                            }
                            *(unsigned char *)(v86 + 24) = 1;
                            *((unsigned char *)v80 + 24) = 0;
                            uint64_t v90 = *(void *)(v79 + 8);
                            uint64_t *v80 = v90;
                            if (v90) {
                              *(void *)(v90 + 16) = v80;
                            }
                            *(void *)(v79 + 16) = v80[2];
                            *(void *)(v80[2] + 8 * (*(void *)v80[2] != (void)v80)) = v79;
                            *(void *)(v79 + 8) = v80;
                            goto LABEL_98;
                          }
                        }
                        else if (!v81 || (v83 = *(unsigned __int8 *)(v81 + 24), uint64_t v82 = (unsigned char *)(v81 + 24), v83))
                        {
                          if (*(uint64_t **)v79 == v73)
                          {
                            uint64_t v88 = v73[1];
                            *(void *)uint64_t v79 = v88;
                            if (v88)
                            {
                              *(void *)(v88 + 16) = v79;
                              uint64_t v80 = *(uint64_t **)(v79 + 16);
                            }
                            v73[2] = (uint64_t)v80;
                            *(void *)(*(void *)(v79 + 16) + 8 * (**(void **)(v79 + 16) != v79)) = v73;
                            v73[1] = v79;
                            *(void *)(v79 + 16) = v73;
                            uint64_t v80 = (uint64_t *)v73[2];
                          }
                          else
                          {
                            uint64_t v73 = (uint64_t *)v73[2];
                          }
                          *((unsigned char *)v73 + 24) = 1;
                          *((unsigned char *)v80 + 24) = 0;
                          uint64_t v79 = v80[1];
                          unint64_t v89 = *(uint64_t **)v79;
                          v80[1] = *(void *)v79;
                          if (v89) {
                            v89[2] = (uint64_t)v80;
                          }
                          *(void *)(v79 + 16) = v80[2];
                          *(void *)(v80[2] + 8 * (*(void *)v80[2] != (void)v80)) = v79;
                          *(void *)uint64_t v79 = v80;
LABEL_98:
                          v80[2] = v79;
                          break;
                        }
                        *(unsigned char *)(v79 + 24) = 1;
                        uint64_t v73 = v80;
                        *((unsigned char *)v80 + 24) = v80 == v78;
                        *uint64_t v82 = 1;
                      }
                      while (v80 != v78);
                    }
                    ++*((void *)v34 + 3);
                    goto LABEL_100;
                  }
                }
                else
                {
                  ++*((_DWORD *)a3 + 2);
                  unsigned int v72 = v61 >> 8;
                  if (v61 >> 8) {
                    goto LABEL_122;
                  }
                }
                --*((_DWORD *)a3 + 2);
LABEL_100:
                ++v58;
              }
              while (v58 != v59);
            }
          }
        }
      }
    }
    v26 += 16;
  }
  while (v26 != v25);
  size_t v91 = (unsigned __int16 *)*((void *)a3 + 10);
  unint64_t v26 = (unsigned __int16 *)*((void *)a3 + 11);
  if (v26 == v91)
  {
    uint64_t v5 = v259;
  }
  else
  {
    uint64_t v5 = v259;
    do
    {
      unsigned int v92 = (void *)*((void *)v26 - 3);
      if (v92)
      {
        *((void *)v26 - 2) = v92;
        operator delete(v92);
      }
      v26 -= 16;
    }
    while (v26 != v91);
    unint64_t v26 = v91;
  }
LABEL_166:
  int v93 = *((_DWORD *)a3 + 4);
  int v94 = *((_DWORD *)a3 + 5);
  int v95 = v93 != 0;
  int v258 = a3[4];
  BOOL v96 = v258 != v95;
  int v97 = *((_DWORD *)a3 + 6);
  if (!v93) {
    BOOL v96 = 0;
  }
  BOOL v255 = v96;
  int v256 = *((_DWORD *)a3 + 7);
  int v98 = v256 != 0;
  int v257 = *((_DWORD *)a3 + 6);
  int v99 = v97 != 0;
  if (v97) {
    BOOL v100 = 0;
  }
  else {
    BOOL v100 = v256 != 0;
  }
  int v101 = v94 != 0;
  *((void *)a3 + 11) = v26;
  int v102 = *a3;
  if (v94) {
    BOOL v100 = 0;
  }
  if (v93) {
    BOOL v103 = 0;
  }
  else {
    BOOL v103 = v100;
  }
  int v104 = a3[1];
  int v105 = a3[2];
  int v262 = a3[3];
  *a3 = v101;
  a3[1] = v99;
  a3[2] = v98;
  int v264 = v103;
  a3[3] = v103;
  int v260 = v95;
  a3[4] = v95;
  if (v102 == v101) {
    goto LABEL_227;
  }
  float v106 = *v5;
  uint64_t v265 = 0x5C79F612F310A1D0;
  int8x8_t v107 = v106[16];
  int v253 = v104;
  int v254 = v105;
  if (!*(void *)&v107) {
    goto LABEL_197;
  }
  uint8x8_t v108 = (uint8x8_t)vcnt_s8(v107);
  v108.i16[0] = vaddlv_u8(v108);
  if (v108.u32[0] > 1uLL)
  {
    uint64_t v109 = 0x5C79F612F310A1D0;
    if (*(void *)&v107 <= 0x5C79F612F310A1D0uLL) {
      uint64_t v109 = 0x5C79F612F310A1D0uLL % *(void *)&v107;
    }
  }
  else
  {
    uint64_t v109 = (*(void *)&v107 - 1) & 0x5C79F612F310A1D0;
  }
  float v110 = *(void **)(*(void *)&v106[15] + 8 * v109);
  if (!v110 || (unint64_t v111 = (void *)*v110) == 0) {
LABEL_197:
  }
    operator new();
  if (v108.u32[0] < 2uLL)
  {
    uint64_t v112 = *(void *)&v107 - 1;
    while (1)
    {
      uint64_t v114 = v111[1];
      if (v114 == 0x5C79F612F310A1D0)
      {
        if (v111[2] == 0x5C79F612F310A1D0) {
          goto LABEL_214;
        }
      }
      else if ((v114 & v112) != v109)
      {
        goto LABEL_197;
      }
      unint64_t v111 = (void *)*v111;
      if (!v111) {
        goto LABEL_197;
      }
    }
  }
  while (2)
  {
    unint64_t v113 = v111[1];
    if (v113 != 0x5C79F612F310A1D0)
    {
      if (v113 >= *(void *)&v107) {
        v113 %= *(void *)&v107;
      }
      if (v113 != v109) {
        goto LABEL_197;
      }
      goto LABEL_187;
    }
    if (v111[2] != 0x5C79F612F310A1D0)
    {
LABEL_187:
      unint64_t v111 = (void *)*v111;
      if (!v111) {
        goto LABEL_197;
      }
      continue;
    }
    break;
  }
LABEL_214:
  unint64_t v130 = (void *)v111[3];
  if (!v94)
  {
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasInitiated>::remove(v130, a2);
    goto LABEL_226;
  }
  unint64_t v270 = a2;
  uint64_t v115 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v130 + 4, (uint64_t)&v270);
  if (v116)
  {
    uint64_t v121 = (unsigned char *)v130[11];
    unint64_t v120 = v130[12];
    if ((unint64_t)v121 >= v120)
    {
      unint64_t v123 = v5;
      uint64_t v124 = (char *)v130[10];
      uint64_t v125 = v121 - v124;
      uint64_t v126 = v121 - v124 + 1;
      if (v126 < 0) {
        goto LABEL_404;
      }
      unint64_t v127 = v120 - (void)v124;
      if (2 * v127 > v126) {
        uint64_t v126 = 2 * v127;
      }
      if (v127 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v128 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v128 = v126;
      }
      if (v128) {
        uint64_t v129 = (char *)operator new(v128);
      }
      else {
        uint64_t v129 = 0;
      }
      uint64_t v131 = &v129[v128];
      uint64_t v122 = (uint64_t)&v129[v125 + 1];
      unint64_t v132 = (char *)(v124 - v121);
      if (v124 == v121) {
        unint64_t v132 = 0;
      }
      v130[10] = &v129[v125 + (void)v132];
      v130[11] = v122;
      v130[12] = v131;
      if (v124) {
        operator delete(v124);
      }
      uint64_t v5 = v123;
    }
    else
    {
      uint64_t v122 = (uint64_t)(v121 + 1);
    }
    v130[11] = v122;
    uint64_t v117 = v130[31];
    goto LABEL_223;
  }
  uint64_t v117 = v130[31];
  if (v130[10] + (((uint64_t)v115 - v130[7]) >> 3) != v130[11])
  {
    for (uint64_t i = (void *)v130[16]; i; uint64_t i = (void *)*i)
    {
      v267 = &v270;
      uint64_t v268 = 1;
      uint64_t v265 = v117;
      uint64_t v119 = i[6];
      if (!v119) {
        goto LABEL_403;
      }
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v119 + 48))(v119, &v265, &v267);
    }
    goto LABEL_226;
  }
LABEL_223:
  for (unint64_t j = (void *)v130[22]; j; unint64_t j = (void *)*j)
  {
    v267 = &v270;
    uint64_t v268 = 1;
    uint64_t v265 = v117;
    uint64_t v134 = j[6];
    if (!v134) {
      goto LABEL_403;
    }
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v134 + 48))(v134, &v265, &v267);
  }
LABEL_226:
  int v104 = v253;
  int v105 = v254;
LABEL_227:
  if (v104 == v99) {
    goto LABEL_277;
  }
  int64_t v135 = *v5;
  uint64_t v265 = 0x7B96EC200C42ECB2;
  int8x8_t v136 = v135[16];
  if (!*(void *)&v136) {
    goto LABEL_250;
  }
  uint8x8_t v137 = (uint8x8_t)vcnt_s8(v136);
  v137.i16[0] = vaddlv_u8(v137);
  if (v137.u32[0] > 1uLL)
  {
    uint64_t v138 = 0x7B96EC200C42ECB2;
    if (*(void *)&v136 <= 0x7B96EC200C42ECB2uLL) {
      uint64_t v138 = 0x7B96EC200C42ECB2uLL % *(void *)&v136;
    }
  }
  else
  {
    uint64_t v138 = (*(void *)&v136 - 1) & 0x7B96EC200C42ECB2;
  }
  uint64_t v139 = *(void **)(*(void *)&v135[15] + 8 * v138);
  if (!v139 || (uint64_t v140 = (void *)*v139) == 0) {
LABEL_250:
  }
    operator new();
  if (v137.u32[0] < 2uLL)
  {
    uint64_t v141 = *(void *)&v136 - 1;
    while (1)
    {
      uint64_t v143 = v140[1];
      if (v143 == 0x7B96EC200C42ECB2)
      {
        if (v140[2] == 0x7B96EC200C42ECB2) {
          goto LABEL_248;
        }
      }
      else if ((v143 & v141) != v138)
      {
        goto LABEL_250;
      }
      uint64_t v140 = (void *)*v140;
      if (!v140) {
        goto LABEL_250;
      }
    }
  }
  while (2)
  {
    unint64_t v142 = v140[1];
    if (v142 != 0x7B96EC200C42ECB2)
    {
      if (v142 >= *(void *)&v136) {
        v142 %= *(void *)&v136;
      }
      if (v142 != v138) {
        goto LABEL_250;
      }
      goto LABEL_238;
    }
    if (v140[2] != 0x7B96EC200C42ECB2)
    {
LABEL_238:
      uint64_t v140 = (void *)*v140;
      if (!v140) {
        goto LABEL_250;
      }
      continue;
    }
    break;
  }
LABEL_248:
  int v144 = v105;
  long long v145 = (void *)v140[3];
  if (!v257)
  {
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::remove(v145, a2);
    goto LABEL_276;
  }
  unint64_t v270 = a2;
  uint64_t v146 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v145 + 4, (uint64_t)&v270);
  if (v147)
  {
    uint64_t v152 = (unsigned char *)v145[11];
    unint64_t v151 = v145[12];
    if ((unint64_t)v152 >= v151)
    {
      long long v154 = (char *)v145[10];
      uint64_t v155 = v152 - v154;
      uint64_t v156 = v152 - v154 + 1;
      if (v156 < 0) {
        goto LABEL_404;
      }
      unint64_t v157 = v151 - (void)v154;
      if (2 * v157 > v156) {
        uint64_t v156 = 2 * v157;
      }
      if (v157 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v158 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v158 = v156;
      }
      if (v158) {
        uint64_t v159 = (char *)operator new(v158);
      }
      else {
        uint64_t v159 = 0;
      }
      uint64_t v160 = &v159[v155];
      uint64_t v153 = (uint64_t)&v159[v155 + 1];
      uint64_t v161 = (char *)(v154 - v152);
      if (v154 == v152) {
        uint64_t v161 = 0;
      }
      v145[10] = &v161[(void)v160];
      v145[11] = v153;
      v145[12] = &v159[v158];
      if (v154) {
        operator delete(v154);
      }
    }
    else
    {
      uint64_t v153 = (uint64_t)(v152 + 1);
    }
    v145[11] = v153;
    uint64_t v148 = v145[31];
    goto LABEL_273;
  }
  uint64_t v148 = v145[31];
  if (v145[10] + (((uint64_t)v146 - v145[7]) >> 3) != v145[11])
  {
    for (k = (void *)v145[16]; k; k = (void *)*k)
    {
      v267 = &v270;
      uint64_t v268 = 1;
      uint64_t v265 = v148;
      uint64_t v150 = k[6];
      if (!v150) {
        goto LABEL_403;
      }
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v150 + 48))(v150, &v265, &v267);
    }
    goto LABEL_276;
  }
LABEL_273:
  for (m = (void *)v145[22]; m; m = (void *)*m)
  {
    v267 = &v270;
    uint64_t v268 = 1;
    uint64_t v265 = v148;
    uint64_t v163 = m[6];
    if (!v163) {
      goto LABEL_403;
    }
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v163 + 48))(v163, &v265, &v267);
  }
LABEL_276:
  int v105 = v144;
LABEL_277:
  if (v105 == v98) {
    goto LABEL_326;
  }
  uint64_t v164 = *v5;
  uint64_t v265 = 0x1BC7FE1311A603CLL;
  int8x8_t v165 = v164[16];
  if (!*(void *)&v165) {
    goto LABEL_300;
  }
  uint8x8_t v166 = (uint8x8_t)vcnt_s8(v165);
  v166.i16[0] = vaddlv_u8(v166);
  if (v166.u32[0] > 1uLL)
  {
    uint64_t v167 = 0x1BC7FE1311A603CLL;
    if (*(void *)&v165 <= 0x1BC7FE1311A603CuLL) {
      uint64_t v167 = 0x1BC7FE1311A603CuLL % *(void *)&v165;
    }
  }
  else
  {
    uint64_t v167 = (*(void *)&v165 - 1) & 0x1BC7FE1311A603CLL;
  }
  unint64_t v168 = *(void **)(*(void *)&v164[15] + 8 * v167);
  if (!v168 || (int v169 = (void *)*v168) == 0) {
LABEL_300:
  }
    operator new();
  if (v166.u32[0] < 2uLL)
  {
    uint64_t v170 = *(void *)&v165 - 1;
    while (1)
    {
      uint64_t v172 = v169[1];
      if (v172 == 0x1BC7FE1311A603CLL)
      {
        if (v169[2] == 0x1BC7FE1311A603CLL) {
          goto LABEL_298;
        }
      }
      else if ((v172 & v170) != v167)
      {
        goto LABEL_300;
      }
      int v169 = (void *)*v169;
      if (!v169) {
        goto LABEL_300;
      }
    }
  }
  while (2)
  {
    unint64_t v171 = v169[1];
    if (v171 != 0x1BC7FE1311A603CLL)
    {
      if (v171 >= *(void *)&v165) {
        v171 %= *(void *)&v165;
      }
      if (v171 != v167) {
        goto LABEL_300;
      }
      goto LABEL_288;
    }
    if (v169[2] != 0x1BC7FE1311A603CLL)
    {
LABEL_288:
      int v169 = (void *)*v169;
      if (!v169) {
        goto LABEL_300;
      }
      continue;
    }
    break;
  }
LABEL_298:
  uint64_t v173 = (void *)v169[3];
  if (!v256)
  {
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::remove(v173, a2);
    goto LABEL_326;
  }
  unint64_t v270 = a2;
  unint64_t v174 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v173 + 4, (uint64_t)&v270);
  if (v175)
  {
    long long v180 = (unsigned char *)v173[11];
    unint64_t v179 = v173[12];
    if ((unint64_t)v180 >= v179)
    {
      unint64_t v182 = (char *)v173[10];
      uint64_t v183 = v180 - v182;
      uint64_t v184 = v180 - v182 + 1;
      if (v184 < 0) {
        goto LABEL_404;
      }
      unint64_t v185 = v179 - (void)v182;
      if (2 * v185 > v184) {
        uint64_t v184 = 2 * v185;
      }
      if (v185 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v186 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v186 = v184;
      }
      if (v186) {
        unsigned int v187 = (char *)operator new(v186);
      }
      else {
        unsigned int v187 = 0;
      }
      unint64_t v188 = &v187[v183];
      uint64_t v181 = (uint64_t)&v187[v183 + 1];
      long long v189 = (char *)(v182 - v180);
      if (v182 == v180) {
        long long v189 = 0;
      }
      v173[10] = &v189[(void)v188];
      v173[11] = v181;
      v173[12] = &v187[v186];
      if (v182) {
        operator delete(v182);
      }
    }
    else
    {
      uint64_t v181 = (uint64_t)(v180 + 1);
    }
    v173[11] = v181;
    uint64_t v176 = v173[31];
    goto LABEL_323;
  }
  uint64_t v176 = v173[31];
  if (v173[10] + (((uint64_t)v174 - v173[7]) >> 3) == v173[11])
  {
LABEL_323:
    uint64_t v190 = (void *)v173[22];
    if (!v190) {
      goto LABEL_326;
    }
    while (1)
    {
      v267 = &v270;
      uint64_t v268 = 1;
      uint64_t v265 = v176;
      uint64_t v191 = v190[6];
      if (!v191) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v191 + 48))(v191, &v265, &v267);
      uint64_t v190 = (void *)*v190;
      if (!v190) {
        goto LABEL_326;
      }
    }
LABEL_403:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_404;
  }
  for (n = (void *)v173[16]; n; n = (void *)*n)
  {
    v267 = &v270;
    uint64_t v268 = 1;
    uint64_t v265 = v176;
    uint64_t v178 = n[6];
    if (!v178) {
      goto LABEL_403;
    }
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v178 + 48))(v178, &v265, &v267);
  }
LABEL_326:
  if (v262 == v264) {
    goto LABEL_354;
  }
  int v192 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::IsCompleted>(*v5);
  long long v193 = v192;
  if (!v264)
  {
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::remove(v192, a2);
    goto LABEL_354;
  }
  unint64_t v270 = a2;
  long long v194 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v192 + 4, (uint64_t)&v270);
  if (v195)
  {
    uint64_t v200 = (unsigned char *)v193[11];
    unint64_t v199 = v193[12];
    if ((unint64_t)v200 >= v199)
    {
      long long v202 = (char *)v193[10];
      uint64_t v203 = v200 - v202;
      uint64_t v204 = v200 - v202 + 1;
      if (v204 < 0) {
        goto LABEL_404;
      }
      unint64_t v205 = v199 - (void)v202;
      if (2 * v205 > v204) {
        uint64_t v204 = 2 * v205;
      }
      if (v205 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v206 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v206 = v204;
      }
      if (v206) {
        unsigned int v207 = (char *)operator new(v206);
      }
      else {
        unsigned int v207 = 0;
      }
      long long v208 = &v207[v203];
      uint64_t v201 = (uint64_t)&v207[v203 + 1];
      long long v209 = (char *)(v202 - v200);
      if (v202 == v200) {
        long long v209 = 0;
      }
      v193[10] = &v209[(void)v208];
      v193[11] = v201;
      v193[12] = &v207[v206];
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      uint64_t v201 = (uint64_t)(v200 + 1);
    }
    v193[11] = v201;
    uint64_t v196 = v193[31];
    goto LABEL_351;
  }
  uint64_t v196 = v193[31];
  if (v193[10] + (((uint64_t)v194 - v193[7]) >> 3) != v193[11])
  {
    uint64_t v197 = (void *)v193[16];
    if (v197)
    {
      while (1)
      {
        v267 = &v270;
        uint64_t v268 = 1;
        uint64_t v265 = v196;
        uint64_t v198 = v197[6];
        if (!v198) {
          goto LABEL_403;
        }
        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v198 + 48))(v198, &v265, &v267);
        uint64_t v197 = (void *)*v197;
        if (!v197) {
          goto LABEL_354;
        }
      }
    }
    goto LABEL_354;
  }
LABEL_351:
  for (iuint64_t i = (void *)v193[22]; ii; iuint64_t i = (void *)*ii)
  {
    v267 = &v270;
    uint64_t v268 = 1;
    uint64_t v265 = v196;
    uint64_t v211 = ii[6];
    if (!v211) {
      goto LABEL_403;
    }
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v211 + 48))(v211, &v265, &v267);
  }
LABEL_354:
  if (v258 == v260) {
    goto LABEL_382;
  }
  uint64_t v212 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::IsFailed>(*v5);
  long long v213 = v212;
  if (!v255)
  {
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::remove(v212, a2);
    goto LABEL_382;
  }
  unint64_t v270 = a2;
  long long v214 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v212 + 4, (uint64_t)&v270);
  if (v215)
  {
    uint64_t v220 = (unsigned char *)v213[11];
    unint64_t v219 = v213[12];
    if ((unint64_t)v220 < v219)
    {
      uint64_t v221 = (uint64_t)(v220 + 1);
LABEL_378:
      v213[11] = v221;
      uint64_t v216 = v213[31];
      goto LABEL_379;
    }
    uint64_t v222 = (char *)v213[10];
    uint64_t v223 = v220 - v222;
    uint64_t v224 = v220 - v222 + 1;
    if (v224 >= 0)
    {
      unint64_t v225 = v219 - (void)v222;
      if (2 * v225 > v224) {
        uint64_t v224 = 2 * v225;
      }
      if (v225 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v226 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v226 = v224;
      }
      if (v226) {
        v227 = (char *)operator new(v226);
      }
      else {
        v227 = 0;
      }
      v228 = &v227[v223];
      uint64_t v221 = (uint64_t)&v227[v223 + 1];
      long long v229 = (char *)(v222 - v220);
      if (v222 == v220) {
        long long v229 = 0;
      }
      v213[10] = &v229[(void)v228];
      v213[11] = v221;
      v213[12] = &v227[v226];
      if (v222) {
        operator delete(v222);
      }
      goto LABEL_378;
    }
LABEL_404:
    abort();
  }
  uint64_t v216 = v213[31];
  if (v213[10] + (((uint64_t)v214 - v213[7]) >> 3) != v213[11])
  {
    uint64_t v217 = (void *)v213[16];
    if (v217)
    {
      while (1)
      {
        v267 = &v270;
        uint64_t v268 = 1;
        uint64_t v265 = v216;
        uint64_t v218 = v217[6];
        if (!v218) {
          goto LABEL_403;
        }
        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v218 + 48))(v218, &v265, &v267);
        uint64_t v217 = (void *)*v217;
        if (!v217) {
          goto LABEL_382;
        }
      }
    }
    goto LABEL_382;
  }
LABEL_379:
  for (junint64_t j = (void *)v213[22]; jj; junint64_t j = (void *)*jj)
  {
    v267 = &v270;
    uint64_t v268 = 1;
    uint64_t v265 = v216;
    uint64_t v231 = jj[6];
    if (!v231) {
      goto LABEL_403;
    }
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v231 + 48))(v231, &v265, &v267);
  }
LABEL_382:
  if (!*((_DWORD *)a3 + 2))
  {
    uint64_t v232 = v5[1];
    long long v234 = (char *)*v232;
    uint64_t v233 = (unint64_t *)v232[1];
    uint64_t v235 = ((uint64_t)v233 - *(void *)v232) >> 3;
    unint64_t v236 = (unint64_t)v232[3];
    if (v236 < v235 + 1)
    {
      long long v237 = (char *)v232[2];
      unint64_t v238 = (1 << -(char)__clz(v236 + 1));
      if (v236 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v238 = 1;
      }
      if (v238 <= v235 + 1) {
        unint64_t v239 = v235 + 1;
      }
      else {
        unint64_t v239 = v238;
      }
      long long v240 = (char *)malloc_type_malloc(8 * v239, 0x100004000313F17uLL);
      long long v241 = v240;
      long long v242 = (uint64_t *)*v232;
      long long v243 = (char *)v232[1];
      if ((char *)*v232 != v243)
      {
        unint64_t v244 = v243 - (char *)v242 - 8;
        if (v244 < 0x18)
        {
          long long v245 = v240;
          goto LABEL_397;
        }
        long long v245 = v240;
        if ((unint64_t)(v240 - (char *)v242) < 0x20)
        {
          do
          {
LABEL_397:
            uint64_t v252 = *v242++;
            *(void *)long long v245 = v252;
            v245 += 8;
          }
          while (v242 != (uint64_t *)v243);
        }
        else
        {
          uint64_t v246 = (v244 >> 3) + 1;
          uint64_t v247 = 8 * (v246 & 0x3FFFFFFFFFFFFFFCLL);
          long long v245 = &v240[v247];
          long long v248 = (long long *)(v242 + 2);
          unint64_t v249 = v240 + 16;
          uint64_t v250 = v246 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v251 = *v248;
            *(v249 - 1) = *(v248 - 1);
            *unint64_t v249 = v251;
            v248 += 2;
            v249 += 2;
            v250 -= 4;
          }
          while (v250);
          if (v246 != (v246 & 0x3FFFFFFFFFFFFFFCLL))
          {
            long long v242 = (uint64_t *)((char *)v242 + v247);
            goto LABEL_397;
          }
        }
      }
      if (v234 != v237) {
        free(*(void **)v232);
      }
      uint64_t v233 = (unint64_t *)&v241[8 * v235];
      *uint64_t v232 = (int8x8_t)v241;
      v232[1] = (int8x8_t)v233;
      v232[3] = (int8x8_t)v239;
    }
    *uint64_t v233 = a2;
    *(void *)&v232[1] += 8;
  }
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasInitiated>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  int v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    int v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::remove();
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  int v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    int v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::remove();
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  int v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v20, v21);
    int v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasInitiated>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasInitiated>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t *std::__tree<gdc::component::DataRequestStatus>::__emplace_hint_multi<gdc::component::DataRequestStatus const&>(uint64_t ***a1, uint64_t **a2, unsigned __int8 a3)
{
  unsigned int v6 = a3;
  uint64_t v7 = (uint64_t *)operator new(0x20uLL);
  uint64_t v8 = v7;
  *((unsigned char *)v7 + 25) = a3;
  uint64_t v9 = (uint64_t **)(a1 + 1);
  if (a1 + 1 != (uint64_t ***)a2 && *((unsigned __int8 *)a2 + 25) < v6)
  {
    while (1)
    {
      unint64_t v10 = *v9;
      uint64_t v11 = v9;
      if (!*v9) {
        goto LABEL_26;
      }
      while (1)
      {
        uint64_t v9 = (uint64_t **)v10;
        if (*((unsigned __int8 *)v10 + 25) >= v6) {
          break;
        }
        unint64_t v10 = (uint64_t *)v10[1];
        if (!v10) {
          goto LABEL_19;
        }
      }
    }
  }
  uint64_t v12 = *a2;
  if (*a1 == a2)
  {
    int v14 = a2;
LABEL_20:
    if (v12) {
      uint64_t v9 = v14;
    }
    else {
      uint64_t v9 = a2;
    }
    if (v12) {
      uint64_t v11 = v14 + 1;
    }
    else {
      uint64_t v11 = a2;
    }
    goto LABEL_26;
  }
  if (v12)
  {
    uint64_t v13 = *a2;
    do
    {
      int v14 = (uint64_t **)v13;
      uint64_t v13 = (uint64_t *)v13[1];
    }
    while (v13);
  }
  else
  {
    uint64_t v15 = a2;
    do
    {
      int v14 = (uint64_t **)v15[2];
      BOOL v16 = *v14 == (uint64_t *)v15;
      uint64_t v15 = v14;
    }
    while (v16);
  }
  if (*((unsigned __int8 *)v14 + 25) <= v6) {
    goto LABEL_20;
  }
  while (1)
  {
    unint64_t v17 = *v9;
    uint64_t v11 = v9;
    if (!*v9) {
      break;
    }
    while (1)
    {
      uint64_t v9 = (uint64_t **)v17;
      if (*((unsigned __int8 *)v17 + 25) > v6) {
        break;
      }
      unint64_t v17 = (uint64_t *)v17[1];
      if (!v17)
      {
LABEL_19:
        uint64_t v11 = v9 + 1;
        goto LABEL_26;
      }
    }
  }
LABEL_26:
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = (uint64_t)v9;
  *uint64_t v11 = v7;
  unint64_t v18 = **a1;
  if (v18)
  {
    *a1 = (uint64_t **)v18;
    uint64_t v8 = *v11;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v8);
  a1[2] = (uint64_t **)((char *)a1[2] + 1);
  return result;
}

uint64_t gdc::ResourceKey::ResourceKey(uint64_t a1, char a2, __int16 a3, uint64_t a4, uint64_t a5, int a6)
{
  *(unsigned char *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_DWORD *)(a1 + 4) = a6;
  uint64_t v9 = (char *)(a1 + 40);
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = 32;
  unint64_t v10 = *(char **)a4;
  uint64_t v11 = *(char **)(a4 + 8);
  unint64_t v12 = (unint64_t)&v11[-*(void *)a4];
  if (v12 >= 0x21)
  {
    if (v12 <= 0x40) {
      size_t v13 = 64;
    }
    else {
      size_t v13 = (size_t)&v11[-*(void *)a4];
    }
    uint64_t v9 = (char *)malloc_type_malloc(v13, 0x100004077774924uLL);
    int v14 = *(char **)(a1 + 8);
    uint64_t v15 = *(char **)(a1 + 16);
    if (v14 == v15) {
      goto LABEL_21;
    }
    unint64_t v16 = v15 - v14;
    if ((unint64_t)(v15 - v14) < 8)
    {
      unint64_t v17 = v9;
      goto LABEL_20;
    }
    unint64_t v17 = v9;
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_20;
    }
    if (v16 >= 0x20)
    {
      unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v19 = (long long *)(v14 + 16);
      uint64_t v20 = v9 + 16;
      unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        _OWORD *v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v16 == v18) {
        goto LABEL_21;
      }
      if ((v16 & 0x18) == 0)
      {
        v14 += v18;
        unint64_t v17 = &v9[v18];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = &v9[v16 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v24 = v18 - (v16 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v25 = (uint64_t *)&v14[v18];
    unint64_t v26 = &v9[v18];
    do
    {
      uint64_t v27 = *v25++;
      *(void *)unint64_t v26 = v27;
      v26 += 8;
      v24 += 8;
    }
    while (v24);
    if (v16 == v23) {
      goto LABEL_21;
    }
    v14 += v23;
    do
    {
LABEL_20:
      char v28 = *v14++;
      *v17++ = v28;
    }
    while (v14 != v15);
LABEL_21:
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = v13;
  }
  if (v10 != v11)
  {
    if (v12 < 8)
    {
      BOOL v30 = v9;
      goto LABEL_38;
    }
    if ((unint64_t)(v9 - v10) < 0x20)
    {
      BOOL v30 = v9;
      goto LABEL_38;
    }
    if (v12 >= 0x20)
    {
      unint64_t v29 = v12 & 0xFFFFFFFFFFFFFFE0;
      int v31 = (long long *)(v10 + 16);
      unint64_t v32 = v9 + 16;
      unint64_t v33 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v34 = *v31;
        *(v32 - 1) = *(v31 - 1);
        *unint64_t v32 = v34;
        v31 += 2;
        v32 += 2;
        v33 -= 32;
      }
      while (v33);
      if (v12 == v29) {
        goto LABEL_39;
      }
      if ((v12 & 0x18) == 0)
      {
        v10 += v29;
        BOOL v30 = &v9[v29];
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v29 = 0;
    }
    unint64_t v35 = v12 & 0xFFFFFFFFFFFFFFF8;
    BOOL v30 = &v9[v12 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v36 = v29 - (v12 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v37 = (uint64_t *)&v10[v29];
    uint64_t v38 = &v9[v29];
    do
    {
      uint64_t v39 = *v37++;
      *(void *)uint64_t v38 = v39;
      v38 += 8;
      v36 += 8;
    }
    while (v36);
    if (v12 == v35) {
      goto LABEL_39;
    }
    v10 += v35;
    do
    {
LABEL_38:
      char v40 = *v10++;
      *v30++ = v40;
    }
    while (v10 != v11);
LABEL_39:
    uint64_t v9 = *(char **)(a1 + 16);
  }
  *(void *)(a1 + 16) = &v9[v12];
  *(void *)(a1 + 72) = *(void *)(a4 + 64);
  *(void *)(a1 + 88) = a5;
  return a1;
}

char *gdc::ResourceKey::keyData(gdc::ResourceKey *this, void *a2)
{
  uint64_t result = (char *)this + 32;
  *(void *)this = result;
  *((void *)this + 1) = result;
  *((void *)this + 2) = result;
  *((void *)this + 3) = 32;
  uint64_t v5 = (char *)a2[1];
  unsigned int v6 = (char *)a2[2];
  unint64_t v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40) {
      size_t v8 = 64;
    }
    else {
      size_t v8 = v6 - v5;
    }
    uint64_t result = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    uint64_t v9 = *(char **)this;
    unint64_t v10 = (char *)*((void *)this + 1);
    if (*(char **)this == v10) {
      goto LABEL_21;
    }
    unint64_t v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      unint64_t v12 = result;
      goto LABEL_20;
    }
    unint64_t v12 = result;
    if ((unint64_t)(result - v9) < 0x20) {
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      int v14 = (long long *)(v9 + 16);
      uint64_t v15 = result + 16;
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        _OWORD *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13) {
        goto LABEL_21;
      }
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        unint64_t v12 = &result[v13];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = &result[v11 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (uint64_t *)&v9[v13];
    unint64_t v21 = &result[v13];
    do
    {
      uint64_t v22 = *v20++;
      *(void *)unint64_t v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18) {
      goto LABEL_21;
    }
    v9 += v18;
    do
    {
LABEL_20:
      char v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(void *)this = result;
    *((void *)this + 1) = result;
    *((void *)this + 3) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      unint64_t v25 = result;
      goto LABEL_38;
    }
    if ((unint64_t)(result - v5) < 0x20)
    {
      unint64_t v25 = result;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      unint64_t v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v26 = (long long *)(v5 + 16);
      uint64_t v27 = result + 16;
      unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24) {
        goto LABEL_39;
      }
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        unint64_t v25 = &result[v24];
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    unint64_t v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = &result[v7 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v32 = (uint64_t *)&v5[v24];
    unint64_t v33 = &result[v24];
    do
    {
      uint64_t v34 = *v32++;
      *(void *)unint64_t v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30) {
      goto LABEL_39;
    }
    v5 += v30;
    do
    {
LABEL_38:
      char v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    uint64_t result = (char *)*((void *)this + 1);
  }
  *((void *)this + 1) = &result[v7];
  *((void *)this + 8) = a2[9];
  return result;
}

void gdc::ResourceKey::keysInt32Str(std::string *this, unsigned __int8 *a2)
{
  gdc::GenericKey::keysInt32Str((gdc::GenericKey *)&v17, (void *)a2 + 1);
  unint64_t v4 = std::string::append(&v17, " t:", 3uLL);
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v16, *((unsigned __int16 *)a2 + 1));
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v6 = &v16;
  }
  else {
    unsigned int v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  size_t v8 = std::string::append(&v18, (const std::string::value_type *)v6, size);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  unint64_t v10 = std::string::append(&v19, " kt:", 4uLL);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v15, *a2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v12 = &v15;
  }
  else {
    unint64_t v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v15.__r_.__value_.__l.__size_;
  }
  int v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  *this = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void gdc::ResourceKey::createDebugNode(uint64_t a1, unsigned __int8 *a2)
{
  strcpy((char *)a1, "Resource Key");
  *(_WORD *)(a1 + 23) = 12;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(unsigned char *)(a1 + 95) = 0;
  char v29 = 12;
  strcpy(v28, "Resouce Type");
  uint64_t v4 = *((unsigned __int16 *)a2 + 1);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 1;
  uint64_t v24 = 0;
  uint64_t v23 = v4;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v28, (uint64_t)v22);
  uint64_t v5 = *a2;
  char v29 = 8;
  strcpy(v28, "Key Type");
  int v21 = 0;
  memset(&v20[4], 0, 24);
  v20[0] = v5;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v28, (uint64_t)v20);
  uint64_t v6 = *((unsigned int *)a2 + 1);
  char v29 = 8;
  strcpy(v28, "Priority");
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 1;
  uint64_t v16 = 0;
  uint64_t v15 = v6;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v28, (uint64_t)v14);
  char v29 = 5;
  strcpy(v28, "Value");
  gdc::GenericKey::keysInt32Str((gdc::GenericKey *)v8, (void *)a2 + 1);
  long long __p = 0uLL;
  uint64_t v12 = 0;
  int v13 = 4;
  int v7 = SHIBYTE(v9);
  if (SHIBYTE(v9) < 0)
  {
    std::string::__assign_no_alias<true>(&__p, v8[0], (size_t)v8[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v8;
    uint64_t v12 = v9;
  }
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v28, (uint64_t)v10);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v8[0]);
    return;
  }
  operator delete((void *)__p);
  if (v7 < 0) {
    goto LABEL_8;
  }
}

uint64_t gdc::CameraView::ecefCameraView(gdc::CameraView *this, const Camera *a2)
{
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformEcefNoOffset((uint64_t)v18, (double *)a2 + 1);
  double v4 = *((double *)a2 + 46);
  double v5 = *((double *)a2 + 47);
  v16[0] = (int)v4;
  v16[1] = (int)v5;
  float v6 = *((float *)a2 + 122);
  float v7 = *((float *)a2 + 123);
  if (v5 >= v4)
  {
    double v13 = *((double *)a2 + 57);
  }
  else
  {
    double v8 = v5 * v4;
    double v9 = v5 / v4;
    if (v8 <= 0.0) {
      double v10 = 1.0;
    }
    else {
      double v10 = v9;
    }
    long double v11 = tan(*((double *)a2 + 57) * 0.5);
    long double v12 = atan(v11 * v10);
    double v13 = v12 + v12;
  }
  double v15 = v13;
  gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView((uint64_t)v17, (uint64_t)v18, v16, &v15, v6, v7, 1.0, *((double *)a2 + 58), *((double *)a2 + 59), *((double *)a2 + 60));
  return gdc::CameraView::CameraView((uint64_t)this, (uint64_t)a2, (uint64_t)v17);
}

void gdc::LayerDataManager::~LayerDataManager(gdc::LayerDataManager *this)
{
  gdc::LayerDataManager::~LayerDataManager(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  gdc::LayerDataManager *v5;
  gdc::LayerDataRequestTracker *v6;
  gdc::ResourceManager *v7;
  void *v8;
  void *v9;

  *(void *)this = &unk_1EF555160;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    operator delete(v4);
  }
  double v5 = (gdc::LayerDataManager *)*((void *)this + 12);
  if (v5 == (gdc::LayerDataManager *)((char *)this + 72))
  {
    (*(void (**)(char *))(*((void *)this + 9) + 32))((char *)this + 72);
  }
  else if (v5)
  {
    (*(void (**)(gdc::LayerDataManager *))(*(void *)v5 + 40))(v5);
  }
  float v6 = (gdc::LayerDataRequestTracker *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v6)
  {
    gdc::LayerDataRequestTracker::~LayerDataRequestTracker(v6);
    MEMORY[0x1A6239270]();
  }
  float v7 = (gdc::ResourceManager *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7)
  {
    gdc::ResourceManager::~ResourceManager(v7);
    MEMORY[0x1A6239270]();
  }
  double v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
  double v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }
}

void gdc::LayerDataRequestTracker::~LayerDataRequestTracker(gdc::LayerDataRequestTracker *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 9);
    double v4 = (void *)*((void *)this + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(unsigned char *)(v3 - 16)) {
          *(unsigned char *)(v3 - 16) = 0;
        }
        double v5 = *(void **)(v3 - 96);
        if (v5 != *(void **)(v3 - 80)) {
          free(v5);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      double v4 = (void *)*((void *)this + 8);
    }
    *((void *)this + 9) = v2;
    operator delete(v4);
  }
  float v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    do
    {
      long double v12 = (void *)*v6;
      double v13 = (void *)v6[16];
      if (v13)
      {
        v6[17] = v13;
        operator delete(v13);
      }
      if (*((unsigned char *)v6 + 112)) {
        *((unsigned char *)v6 + 112) = 0;
      }
      int v14 = (void *)v6[4];
      if (v14 != (void *)v6[6]) {
        free(v14);
      }
      operator delete(v6);
      float v6 = v12;
    }
    while (v12);
  }
  float v7 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    operator delete(v7);
  }
  if (*((void *)this + 2))
  {
    uint64_t v8 = *(void *)this;
    double v9 = (gdc::LayerDataRequestTracker *)*((void *)this + 1);
    uint64_t v10 = *(void *)v9;
    *(void *)(v10 + 8) = *(void *)(*(void *)this + 8);
    **(void **)(v8 + 8) = v10;
    *((void *)this + 2) = 0;
    if (v9 != this)
    {
      do
      {
        long double v11 = (gdc::LayerDataRequestTracker *)*((void *)v9 + 1);
        std::__destroy_at[abi:nn180100]<gdc::LayerDataRequestTracker::RequestStatus,0>((void *)v9 + 2);
        operator delete(v9);
        double v9 = v11;
      }
      while (v11 != this);
    }
  }
}

uint64_t std::__destroy_at[abi:nn180100]<gdc::LayerDataRequestTracker::RequestStatus,0>(void *a1)
{
  uint64_t v2 = a1 + 11;
  uint64_t v3 = (void *)a1[14];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    double v4 = (unsigned char *)a1[7];
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  double v4 = (unsigned char *)a1[7];
  if (v4)
  {
    do
    {
LABEL_13:
      if (v4[112]) {
        v4[112] = 0;
      }
      float v7 = *(unsigned char **)v4;
      uint64_t v8 = (void *)*((void *)v4 + 4);
      if (v8 != *((void **)v4 + 6)) {
        free(v8);
      }
      operator delete(v4);
      double v4 = v7;
    }
    while (v7);
  }
LABEL_7:
  double v5 = (void *)a1[5];
  a1[5] = 0;
  if (v5) {
    operator delete(v5);
  }
  return std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::~__hash_table((uint64_t)a1);
}

void *std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57A6A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::~__func()
{
}

uint64_t gdc::LayerDataManager::forEachLayer(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t v7 = *(void *)(v5 + 16);
      __int16 v11 = *(_WORD *)v5;
      uint64_t v9 = v7;
      uint64_t v10 = v6;
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, __int16 *, uint64_t *, uint64_t *))(*(void *)v8 + 48))(v8, &v11, &v10, &v9);
      v5 += 24;
      if (v5 == a2) {
        return result;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::LayerDataManager::requestLayerDataKeys();
  }
  return result;
}

uint64_t gdc::LayerDataManager::requestLayerDataKeys(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 64);
  uint64_t v6 = (void *)a3[3];
  if (v6)
  {
    if (v6 == a3)
    {
      unint64_t v43 = v42;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v42);
      uint64_t v7 = v43;
    }
    else
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(void *))(*v6 + 16))(v6);
      unint64_t v43 = v7;
    }
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v43 = 0;
  }
  uint64_t v8 = (char *)operator new(0x88uLL);
  uint64_t v9 = v8 + 16;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  if (v7)
  {
    if (v7 == v42)
    {
      unint64_t v45 = v44;
      (*(void (**)(void *, void *))(v42[0] + 24))(v42, v44);
    }
    else
    {
      unint64_t v45 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
    }
  }
  else
  {
    unint64_t v45 = 0;
  }
  *uint64_t v9 = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_DWORD *)v8 + 12) = 1065353216;
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::unordered_set((uint64_t)(v8 + 56), a2);
  v8[96] = 0;
  if (v45)
  {
    if (v45 == v44)
    {
      *((void *)v8 + 16) = v8 + 104;
      (*(void (**)(void *))(v44[0] + 24))(v44);
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      if (!v10) {
        goto LABEL_23;
      }
    }
    else
    {
      *((void *)v8 + 16) = (*(uint64_t (**)(void))(*v45 + 16))();
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      if (!v10) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    *((void *)v8 + 16) = 0;
    uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
    if (!v10) {
      goto LABEL_23;
    }
  }
  do
  {
    __int16 v11 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>((uint64_t)v9, v10 + 16, (uint64_t)(v10 + 16));
    long double v12 = (std::__shared_weak_count *)v11[17];
    v11[16] = 0;
    v11[17] = 0;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v10 = *(unsigned __int8 **)v10;
  }
  while (v10);
LABEL_23:
  uint64_t v38 = a1;
  if (v45 == v44)
  {
    (*(void (**)(void *))(v44[0] + 32))(v44);
  }
  else if (v45)
  {
    (*(void (**)(void))(*v45 + 40))();
  }
  *((void *)v8 + 1) = v5;
  uint64_t v13 = *v5;
  *(void *)uint64_t v8 = *v5;
  *(void *)(v13 + 8) = v8;
  *uint64_t v5 = v8;
  ++v5[2];
  char v40 = (void **)(v5 + 8);
  std::vector<gdc::LayerDataRequestKey>::reserve((uint64_t)(v5 + 8), *(void *)(a2 + 24) + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[9] - v5[8]) >> 4));
  int v14 = *(unsigned __int8 **)(a2 + 16);
  if (v14)
  {
    double v15 = (float *)(v5 + 3);
    uint64_t v39 = v5;
    do
    {
      uint64_t v17 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(v15, v14 + 16, (uint64_t)(v14 + 16));
      uint64_t v18 = v17;
      std::string v20 = (char *)v17[17];
      unint64_t v19 = v17[18];
      if ((unint64_t)v20 >= v19)
      {
        uint64_t v22 = v8;
        uint64_t v23 = (char *)v17[16];
        uint64_t v24 = (v20 - v23) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
          abort();
        }
        uint64_t v26 = v19 - (void)v23;
        if (v26 >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v41 = v25;
        if (v25)
        {
          if (v25 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v27 = (char *)operator new(8 * v25);
        }
        else
        {
          int v27 = 0;
        }
        unint64_t v28 = &v27[8 * v24];
        *(void *)unint64_t v28 = v22;
        int v21 = v28 + 8;
        if (v20 != v23)
        {
          unint64_t v29 = v20 - 8 - v23;
          if (v29 < 0x58) {
            goto LABEL_71;
          }
          if ((unint64_t)(v23 - v27) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v30 = (v29 >> 3) + 1;
          unint64_t v31 = &v27[8 * v24 - 16];
          unint64_t v32 = (long long *)(v20 - 16);
          uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v34 = *v32;
            *((_OWORD *)v31 - 1) = *(v32 - 1);
            *(_OWORD *)unint64_t v31 = v34;
            v31 -= 32;
            v32 -= 2;
            v33 -= 4;
          }
          while (v33);
          v28 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v20 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_71:
            do
            {
              uint64_t v35 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v28 - 1) = v35;
              v28 -= 8;
            }
            while (v20 != v23);
          }
          std::string v20 = (char *)v18[16];
        }
        v18[16] = v28;
        v18[17] = v21;
        v18[18] = &v27[8 * v41];
        uint64_t v8 = v22;
        if (v20) {
          operator delete(v20);
        }
        uint64_t v5 = v39;
      }
      else
      {
        *(void *)std::string v20 = v8;
        int v21 = v20 + 8;
      }
      v18[17] = v21;
      unint64_t v36 = v5[9];
      if (v36 >= v5[10])
      {
        uint64_t v16 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(v40, (uint64_t)(v14 + 16));
      }
      else
      {
        *(unsigned char *)unint64_t v36 = v14[16];
        gdc::LayerDataKey::LayerDataKey(v36 + 8, (uint64_t)(v14 + 24));
        *(unsigned char *)(v36 + 96) = 0;
        if (v14[112])
        {
          *(_DWORD *)(v36 + 100) = *((_DWORD *)v14 + 29);
          *(unsigned char *)(v36 + 96) = 1;
        }
        *(void *)(v36 + 104) = *((void *)v14 + 15);
        uint64_t v16 = (unsigned char *)(v36 + 112);
      }
      v5[9] = v16;
      int v14 = *(unsigned __int8 **)v14;
    }
    while (v14);
  }
  if (v43 == v42)
  {
    (*(void (**)(void *))(v42[0] + 32))(v42);
    uint64_t result = *(void *)(v38 + 96);
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
  }
  else
  {
    if (v43) {
      (*(void (**)(void))(*v43 + 40))();
    }
    uint64_t result = *(void *)(v38 + 96);
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
  }
  return result;
}

uint64_t gdc::LayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v5 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v6 = MEMORY[0x1E4FBA498] + 64;
  v32[0] = MEMORY[0x1E4FBA498] + 64;
  uint64_t v7 = (uint64_t *)MEMORY[0x1E4FBA418];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v24 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(uint64_t *)((char *)&v24 + *(void *)(v24 - 24)) = v8;
  uint64_t v9 = (std::ios_base *)((char *)&v24 + *(void *)(v24 - 24));
  std::ios_base::init(v9, &v25);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v24 = v5;
  v32[0] = v6;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
  uint64_t v25 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)unint64_t v29 = 0u;
  long long v30 = 0u;
  int v31 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)"LayerDataRequestKey<Type:", 25);
  __int16 v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)", Data: ", 8);
  gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    char v14 = v31;
    if ((v31 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    unint64_t v16 = *((void *)&v30 + 1);
    if (*((void *)&v30 + 1) < v28)
    {
      *((void *)&v30 + 1) = v28;
      unint64_t v16 = v28;
    }
    uint64_t v17 = (const void **)&v27;
    goto LABEL_16;
  }
  char v14 = v31;
  if ((v31 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_9:
  if ((v14 & 8) == 0)
  {
    size_t v15 = 0;
    a2[23] = 0;
    goto LABEL_24;
  }
  uint64_t v17 = (const void **)v26;
  unint64_t v16 = v26[2];
LABEL_16:
  uint64_t v18 = *v17;
  size_t v15 = v16 - (void)*v17;
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    int v21 = operator new(v19 + 1);
    *((void *)a2 + 1) = v15;
    *((void *)a2 + 2) = v20 | 0x8000000000000000;
    *(void *)a2 = v21;
    a2 = v21;
    goto LABEL_23;
  }
  a2[23] = v15;
  if (v15) {
LABEL_23:
  }
    memmove(a2, v18, v15);
LABEL_24:
  a2[v15] = 0;
  uint64_t v24 = *v7;
  *(uint64_t *)((char *)&v24 + *(void *)(v24 - 24)) = v7[3];
  uint64_t v25 = v10;
  if (SBYTE7(v30) < 0) {
    operator delete(v29[0]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](v32);
}

void gdc::LayerDataSource::createDebugNode(void *a1@<X0>, uint64_t a2@<X8>)
{
  v138[2] = *MEMORY[0x1E4F143B8];
  strcpy((char *)a2, "Layer Data Source");
  *(_WORD *)(a2 + 23) = 17;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "Requests");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, (long long *)__p);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "Count");
  uint64_t v4 = a1[8];
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  int v137 = 1;
  uint64_t v134 = 0;
  uint64_t v133 = v4;
  BOOL v100 = ChildNode;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__p, (uint64_t)v132);
  int v101 = a1;
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    int v98 = &v129;
    int v99 = &v131;
    BOOL v96 = v125;
    int v97 = &v127;
    qmemcpy(v95, "TrackingequestedLast ReqHas All ResourcePending Creation", sizeof(v95));
    qmemcpy(v94, "OptionalResourceRequiredResource", sizeof(v94));
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*v101 + 128))(__p);
      uint64_t v6 = gdc::DebugTreeNode::createChildNode((uint64_t)v100, (long long *)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      HIBYTE(__p[2]) = 16;
      *(_OWORD *)std::string __p = *(_OWORD *)&v95[5];
      LOBYTE(__p[2]) = 0;
      uint64_t v7 = *(unsigned __int8 *)(v5[16] + 209);
      v99[1] = 0;
      v99[2] = 0;
      *int v99 = 0;
      *((_DWORD *)v99 + 6) = 0;
      v130[0] = v7;
      gdc::DebugTreeNode::addProperty((uint64_t)v6, (uint64_t)__p, (uint64_t)v130);
      uint64_t v8 = *(unsigned __int8 *)(v5[16] + 208);
      HIBYTE(__p[2]) = 17;
      *(_OWORD *)std::string __p = *(_OWORD *)&v95[3];
      strcpy((char *)&__p[2], "s");
      v98[1] = 0;
      v98[2] = 0;
      *int v98 = 0;
      *((_DWORD *)v98 + 6) = 0;
      v128[0] = v8;
      gdc::DebugTreeNode::addProperty((uint64_t)v6, (uint64_t)__p, (uint64_t)v128);
      uint64_t v9 = *(void *)(v5[16] + 200);
      HIBYTE(__p[2]) = 14;
      __p[0] = (void *)v95[2];
      *(void **)((char *)__p + 6) = (void *)v95[1];
      BYTE6(__p[1]) = 0;
      v97[1] = 0;
      v97[2] = 0;
      *int v97 = 0;
      *((_DWORD *)v97 + 6) = 0;
      v126[0] = v9;
      gdc::DebugTreeNode::addProperty((uint64_t)v6, (uint64_t)__p, (uint64_t)v126);
      uint64_t v10 = *(void *)(v5[16] + 112);
      HIBYTE(__p[2]) = 11;
      strcpy((char *)__p + 7, "g Id");
      __p[0] = (void *)v95[0];
      v96[1] = 0;
      v96[2] = 0;
      *BOOL v96 = 0;
      v125[6] = 1;
      uint64_t v124 = v10;
      gdc::DebugTreeNode::addProperty((uint64_t)v6, (uint64_t)__p, (uint64_t)v123);
      HIBYTE(__p[2]) = 17;
      *(_OWORD *)std::string __p = v94[1];
      strcpy((char *)&__p[2], "s");
      *(void *)&long long v102 = v6;
      __int16 v11 = gdc::DebugTreeNode::createChildNode((uint64_t)v6, (long long *)__p);
      uint64_t v12 = v5[16];
      uint64_t v13 = *(void *)(v12 + 120);
      uint64_t v14 = *(void *)(v12 + 128);
      if (v13 != v14) {
        break;
      }
LABEL_41:
      HIBYTE(__p[2]) = 17;
      strcpy((char *)&__p[2], "s");
      *(_OWORD *)std::string __p = v94[0];
      uint64_t v27 = gdc::DebugTreeNode::createChildNode(v102, (long long *)__p);
      uint64_t v28 = v5[16];
      uint64_t v29 = *(void *)(v28 + 144);
      uint64_t v30 = *(void *)(v28 + 152);
      if (v29 != v30)
      {
        int v31 = v27;
        while (1)
        {
          unint64_t v32 = *(unsigned __int8 **)(v29 + 24);
          if (v32) {
            break;
          }
LABEL_43:
          v29 += 48;
          if (v29 == v30) {
            goto LABEL_3;
          }
        }
        while (2)
        {
          gdc::ResourceKey::createDebugNode((uint64_t)__p, v32 + 16);
          gdc::DebugTreeNode::addChildNode(v31, (long long *)__p);
          uint64_t v33 = (void **)v121;
          if (v121)
          {
            long long v34 = v122;
            uint64_t v35 = v121;
            if (v122 != v121)
            {
              do
              {
                unint64_t v36 = (void **)*(v34 - 3);
                if (v36)
                {
                  unint64_t v37 = (void **)*(v34 - 2);
                  uint64_t v38 = *(v34 - 3);
                  if (v37 != v36)
                  {
                    do
                    {
                      if (*((char *)v37 - 1) < 0) {
                        operator delete(*(v37 - 3));
                      }
                      v37 -= 3;
                    }
                    while (v37 != v36);
                    uint64_t v38 = *(v34 - 3);
                  }
                  *(v34 - 2) = v36;
                  operator delete(v38);
                }
                uint64_t v39 = (void **)*(v34 - 6);
                if (v39)
                {
                  char v40 = (void **)*(v34 - 5);
                  unint64_t v41 = *(v34 - 6);
                  if (v40 != v39)
                  {
                    do
                    {
                      if (*((char *)v40 - 9) < 0) {
                        operator delete(*(v40 - 4));
                      }
                      v40 -= 8;
                    }
                    while (v40 != v39);
                    unint64_t v41 = *(v34 - 6);
                  }
                  *(v34 - 5) = v39;
                  operator delete(v41);
                }
                uint64_t v42 = v34 - 10;
                if (*((char *)v34 - 57) < 0) {
                  operator delete(*v42);
                }
                v34 -= 10;
              }
              while (v42 != v33);
              uint64_t v35 = v121;
            }
            uint64_t v122 = v33;
            operator delete(v35);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v120);
          if (v119 < 0)
          {
            operator delete(v118);
            if (SHIBYTE(__p[2]) < 0) {
              goto LABEL_75;
            }
          }
          else if (SHIBYTE(__p[2]) < 0)
          {
LABEL_75:
            operator delete(__p[0]);
          }
          unint64_t v32 = *(unsigned __int8 **)v32;
          if (!v32) {
            goto LABEL_43;
          }
          continue;
        }
      }
LABEL_3:
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_76;
      }
    }
    size_t v15 = v11;
    while (1)
    {
      unint64_t v16 = *(unsigned __int8 **)(v13 + 24);
      if (v16) {
        break;
      }
LABEL_8:
      v13 += 48;
      if (v13 == v14) {
        goto LABEL_41;
      }
    }
    while (1)
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__p, v16 + 16);
      gdc::DebugTreeNode::addChildNode(v15, (long long *)__p);
      uint64_t v17 = (void **)v121;
      if (v121)
      {
        uint64_t v18 = v122;
        uint64_t v19 = v121;
        if (v122 != v121)
        {
          do
          {
            uint64_t v20 = (void **)*(v18 - 3);
            if (v20)
            {
              int v21 = (void **)*(v18 - 2);
              uint64_t v22 = *(v18 - 3);
              if (v21 != v20)
              {
                do
                {
                  if (*((char *)v21 - 1) < 0) {
                    operator delete(*(v21 - 3));
                  }
                  v21 -= 3;
                }
                while (v21 != v20);
                uint64_t v22 = *(v18 - 3);
              }
              *(v18 - 2) = v20;
              operator delete(v22);
            }
            uint64_t v23 = (void **)*(v18 - 6);
            if (v23)
            {
              uint64_t v24 = (void **)*(v18 - 5);
              uint64_t v25 = *(v18 - 6);
              if (v24 != v23)
              {
                do
                {
                  if (*((char *)v24 - 9) < 0) {
                    operator delete(*(v24 - 4));
                  }
                  v24 -= 8;
                }
                while (v24 != v23);
                uint64_t v25 = *(v18 - 6);
              }
              *(v18 - 5) = v23;
              operator delete(v25);
            }
            uint64_t v26 = v18 - 10;
            if (*((char *)v18 - 57) < 0) {
              operator delete(*v26);
            }
            v18 -= 10;
          }
          while (v26 != v17);
          uint64_t v19 = v121;
        }
        uint64_t v122 = v17;
        operator delete(v19);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v120);
      if (v119 < 0)
      {
        operator delete(v118);
        if (SHIBYTE(__p[2]) < 0) {
LABEL_40:
        }
          operator delete(__p[0]);
      }
      else if (SHIBYTE(__p[2]) < 0)
      {
        goto LABEL_40;
      }
      unint64_t v16 = *(unsigned __int8 **)v16;
      if (!v16) {
        goto LABEL_8;
      }
    }
  }
LABEL_76:
  unint64_t v43 = operator new(0x20uLL);
  __p[0] = v43;
  long long v102 = xmmword_1A28FD1A0;
  *(_OWORD *)&__p[1] = xmmword_1A28FD1A0;
  strcpy((char *)v43, "Requests with Failed Resources");
  uint64_t v44 = gdc::DebugTreeNode::createChildNode(a2, (long long *)__p);
  operator delete(v43);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "Count");
  uint64_t v45 = v101[13];
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  int v116 = 1;
  uint64_t v113 = 0;
  uint64_t v112 = v45;
  gdc::DebugTreeNode::addProperty((uint64_t)v44, (uint64_t)__p, (uint64_t)v111);
  for (uint64_t i = (unsigned __int8 *)v101[12]; i; uint64_t i = *(unsigned __int8 **)i)
  {
    gdc::LayerDataRequestKey::createDebugNode((uint64_t)__p, i + 16);
    gdc::DebugTreeNode::addChildNode(v44, (long long *)__p);
    BOOL v47 = (void **)v121;
    if (v121)
    {
      uint64_t v48 = v122;
      uint64_t v49 = v121;
      if (v122 != v121)
      {
        do
        {
          unint64_t v50 = (void **)*(v48 - 3);
          if (v50)
          {
            unint64_t v51 = (void **)*(v48 - 2);
            uint64_t v52 = *(v48 - 3);
            if (v51 != v50)
            {
              do
              {
                if (*((char *)v51 - 1) < 0) {
                  operator delete(*(v51 - 3));
                }
                v51 -= 3;
              }
              while (v51 != v50);
              uint64_t v52 = *(v48 - 3);
            }
            *(v48 - 2) = v50;
            operator delete(v52);
          }
          uint64_t v53 = (void **)*(v48 - 6);
          if (v53)
          {
            uint64_t v54 = (void **)*(v48 - 5);
            long long v55 = *(v48 - 6);
            if (v54 != v53)
            {
              do
              {
                if (*((char *)v54 - 9) < 0) {
                  operator delete(*(v54 - 4));
                }
                v54 -= 8;
              }
              while (v54 != v53);
              long long v55 = *(v48 - 6);
            }
            *(v48 - 5) = v53;
            operator delete(v55);
          }
          long long v56 = v48 - 10;
          if (*((char *)v48 - 57) < 0) {
            operator delete(*v56);
          }
          v48 -= 10;
        }
        while (v56 != v47);
        uint64_t v49 = v121;
      }
      uint64_t v122 = v47;
      operator delete(v49);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v120);
    if (v119 < 0)
    {
      operator delete(v118);
      if (SHIBYTE(__p[2]) < 0) {
LABEL_107:
      }
        operator delete(__p[0]);
    }
    else if (SHIBYTE(__p[2]) < 0)
    {
      goto LABEL_107;
    }
  }
  long long v57 = operator new(0x20uLL);
  __p[0] = v57;
  *(_OWORD *)&__p[1] = v102;
  strcpy((char *)v57, "Requests that Failed to Decode");
  __int16 v58 = gdc::DebugTreeNode::createChildNode(a2, (long long *)__p);
  operator delete(v57);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "Count");
  uint64_t v59 = v101[18];
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  int v110 = 1;
  uint64_t v107 = 0;
  uint64_t v106 = v59;
  gdc::DebugTreeNode::addProperty((uint64_t)v58, (uint64_t)__p, (uint64_t)v105);
  for (unint64_t j = (unsigned __int8 *)v101[17]; j; unint64_t j = *(unsigned __int8 **)j)
  {
    gdc::LayerDataRequestKey::createDebugNode((uint64_t)__p, j + 16);
    gdc::DebugTreeNode::addChildNode(v58, (long long *)__p);
    unsigned int v61 = (void **)v121;
    if (v121)
    {
      unsigned int v62 = v122;
      long long v63 = v121;
      if (v122 != v121)
      {
        do
        {
          long long v64 = (void **)*(v62 - 3);
          if (v64)
          {
            long long v65 = (void **)*(v62 - 2);
            unsigned int v66 = *(v62 - 3);
            if (v65 != v64)
            {
              do
              {
                if (*((char *)v65 - 1) < 0) {
                  operator delete(*(v65 - 3));
                }
                v65 -= 3;
              }
              while (v65 != v64);
              unsigned int v66 = *(v62 - 3);
            }
            *(v62 - 2) = v64;
            operator delete(v66);
          }
          BOOL v67 = (void **)*(v62 - 6);
          if (v67)
          {
            uint64_t v68 = (void **)*(v62 - 5);
            uint64_t v69 = *(v62 - 6);
            if (v68 != v67)
            {
              do
              {
                if (*((char *)v68 - 9) < 0) {
                  operator delete(*(v68 - 4));
                }
                v68 -= 8;
              }
              while (v68 != v67);
              uint64_t v69 = *(v62 - 6);
            }
            *(v62 - 5) = v67;
            operator delete(v69);
          }
          uint64_t v70 = v62 - 10;
          if (*((char *)v62 - 57) < 0) {
            operator delete(*v70);
          }
          v62 -= 10;
        }
        while (v70 != v61);
        long long v63 = v121;
      }
      uint64_t v122 = v61;
      operator delete(v63);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v120);
    if (v119 < 0)
    {
      operator delete(v118);
      if (SHIBYTE(__p[2]) < 0) {
LABEL_139:
      }
        operator delete(__p[0]);
    }
    else if (SHIBYTE(__p[2]) < 0)
    {
      goto LABEL_139;
    }
  }
  memset(__p, 0, sizeof(__p));
  unint64_t v71 = v101[23];
  if (v71)
  {
    if (v71 >> 58) {
LABEL_174:
    }
      abort();
    uint64_t v72 = v71 << 6;
    uint64_t v73 = (void **)operator new(v71 << 6);
    __p[0] = v73;
    __p[1] = v73;
    __p[2] = (char *)v73 + v72;
  }
  else
  {
    uint64_t v73 = 0;
  }
  uint64_t v74 = (void *)v101[22];
  if (v74)
  {
    while (1)
    {
      long long v78 = (void *)v74[2];
      v138[0] = 0;
      *(void *)((char *)v138 + 7) = 0;
      if (v73 < __p[2])
      {
        float v75 = v103;
        v73[1] = v78;
        v73[2] = v75;
        *((unsigned char *)v73 + 24) = v104;
        uint64_t v76 = (void *)v138[0];
        v73[4] = 0;
        v73[5] = v76;
        *(void **)((char *)v73 + 47) = *(void **)((char *)v138 + 7);
        *((unsigned char *)v73 + 55) = 0;
        v138[0] = 0;
        *(void *)((char *)v138 + 7) = 0;
        uint64_t v77 = v73 + 8;
        *((_DWORD *)v73 + 14) = 1;
      }
      else
      {
        uint64_t v79 = (void **)__p[0];
        uint64_t v80 = ((char *)v73 - (char *)__p[0]) >> 6;
        unint64_t v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 58) {
          goto LABEL_174;
        }
        int64_t v82 = (char *)__p[2] - (char *)__p[0];
        if (((char *)__p[2] - (char *)__p[0]) >> 5 > v81) {
          unint64_t v81 = v82 >> 5;
        }
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v83 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v81;
        }
        if (v83 >> 58) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v84 = v83 << 6;
        int v85 = (char *)operator new(v83 << 6);
        uint64_t v86 = &v85[64 * v80];
        *((void *)v86 + 1) = v78;
        *((void *)v86 + 5) = 0;
        *((void *)v86 + 6) = 0;
        uint64_t v87 = &v85[v84];
        *((void *)v86 + 4) = 0;
        v138[0] = 0;
        *(void *)((char *)v138 + 7) = 0;
        *((_DWORD *)v86 + 14) = 1;
        uint64_t v77 = (void **)(v86 + 64);
        if (v73 == v79)
        {
          __p[0] = &v85[64 * v80];
          __p[1] = v86 + 64;
          __p[2] = &v85[v84];
        }
        else
        {
          do
          {
            long long v88 = *((_OWORD *)v73 - 4);
            *(_OWORD *)(v86 - 55) = *(_OWORD *)((char *)v73 - 55);
            *((_OWORD *)v86 - 4) = v88;
            long long v89 = *((_OWORD *)v73 - 2);
            *((void *)v86 - 2) = *(v73 - 2);
            *((_OWORD *)v86 - 2) = v89;
            *(v73 - 3) = 0;
            *(v73 - 2) = 0;
            *(v73 - 4) = 0;
            *((_DWORD *)v86 - 2) = *((_DWORD *)v73 - 2);
            v86 -= 64;
            v73 -= 8;
          }
          while (v73 != v79);
          uint64_t v73 = (void **)__p[0];
          uint64_t v90 = (void **)__p[1];
          __p[0] = v86;
          __p[1] = v77;
          __p[2] = v87;
          while (v90 != v73)
          {
            if (*((char *)v90 - 9) < 0) {
              operator delete(*(v90 - 4));
            }
            v90 -= 8;
          }
        }
        if (v73) {
          operator delete(v73);
        }
      }
      __p[1] = v77;
      uint64_t v74 = (void *)*v74;
      uint64_t v73 = v77;
      if (!v74) {
        goto LABEL_167;
      }
    }
  }
  uint64_t v77 = v73;
LABEL_167:
  size_t v91 = (char *)operator new(0x20uLL);
  BOOL v103 = v91;
  long long v104 = xmmword_1A28FCF30;
  strcpy(v91, "Pending Cancelled Requests");
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)&v103, (uint64_t *)__p);
  operator delete(v91);
  unsigned int v92 = (char *)__p[0];
  if (__p[0])
  {
    while (v77 != (void **)v92)
    {
      if (*((char *)v77 - 9) < 0) {
        operator delete(*(v77 - 4));
      }
      v77 -= 8;
    }
    operator delete(v92);
  }
}

void std::__function::__func<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0,std::allocator<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 376));
  uint64_t v2 = *(void *)(v1 + 464);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  std::mutex::unlock((std::mutex *)(v1 + 376));
}

void *std::__function::__func<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0,std::allocator<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57A388;
  result[1] = v3;
  return result;
}

void std::__function::__func<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0,std::allocator<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0,std::allocator<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0>,void ()(std::shared_ptr<gdc::LayerData> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57A2F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0,std::allocator<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0>,void ()(std::shared_ptr<gdc::LayerData> const&)>::~__func()
{
}

double std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a2, a3, a4);
  unsigned int v11 = *((unsigned __int16 *)a5 + 1);
  unsigned int v12 = *((unsigned __int16 *)a4 + 1);
  BOOL v13 = v11 >= v12;
  if (v11 == v12 && (unsigned int v14 = *a5, v15 = *a4, v13 = v14 >= v15, v14 == v15))
  {
    if (!gdc::GenericKey::operator<(*((void *)a5 + 1), *((void *)a5 + 2), *((void *)a4 + 1), *((void *)a4 + 2))) {
      return result;
    }
  }
  else if (v13)
  {
    return result;
  }
  double result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a4, (uint64_t *)a5);
  unsigned int v16 = *((unsigned __int16 *)a4 + 1);
  unsigned int v17 = *((unsigned __int16 *)a3 + 1);
  BOOL v18 = v16 >= v17;
  if (v16 == v17 && (v19 = *a4, v20 = *a3, BOOL v18 = v19 >= v20, v19 == v20))
  {
    if (!gdc::GenericKey::operator<(*((void *)a4 + 1), *((void *)a4 + 2), *((void *)a3 + 1), *((void *)a3 + 2))) {
      return result;
    }
  }
  else if (v18)
  {
    return result;
  }
  double result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a3, (uint64_t *)a4);
  unsigned int v21 = *((unsigned __int16 *)a3 + 1);
  unsigned int v22 = *((unsigned __int16 *)a2 + 1);
  BOOL v23 = v21 >= v22;
  if (v21 == v22 && (v24 = *a3, v25 = *a2, BOOL v23 = v24 >= v25, v24 == v25))
  {
    if (!gdc::GenericKey::operator<(*((void *)a3 + 1), *((void *)a3 + 2), *((void *)a2 + 1), *((void *)a2 + 2))) {
      return result;
    }
  }
  else if (v23)
  {
    return result;
  }
  double result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a2, (uint64_t *)a3);
  unsigned int v26 = *((unsigned __int16 *)a2 + 1);
  unsigned int v27 = *((unsigned __int16 *)a1 + 1);
  BOOL v28 = v26 >= v27;
  if (v26 == v27 && (unsigned int v29 = *a2, v30 = *a1, v28 = v29 >= v30, v29 == v30))
  {
    if (!gdc::GenericKey::operator<(*((void *)a2 + 1), *((void *)a2 + 2), *((void *)a1 + 1), *((void *)a1 + 2))) {
      return result;
    }
  }
  else if (v28)
  {
    return result;
  }
  return std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)a2);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *((unsigned __int16 *)a2 - 47);
      unsigned int v7 = *((unsigned __int16 *)a1 + 1);
      BOOL v8 = v6 >= v7;
      if (v6 == v7 && (v9 = *(a2 - 96), v10 = *a1, BOOL v8 = v9 >= v10, v9 == v10))
      {
        if (!gdc::GenericKey::operator<(*((void *)a2 - 11), *((void *)a2 - 10), *((void *)a1 + 1), *((void *)a1 + 2)))return 1; {
      }
        }
      else if (v8)
      {
        return result;
      }
      std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)v2 - 12);
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96);
      return 1;
    default:
      unsigned int v11 = a1 + 192;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a1 + 96, a1 + 192);
      unsigned int v12 = a1 + 288;
      if (a1 + 288 == v2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      unsigned int v15 = a1 + 328;
      unsigned int v16 = a1 + 344;
      unint64_t v81 = v2;
      break;
  }
  while (2)
  {
    unsigned int v17 = *((unsigned __int16 *)v12 + 1);
    unsigned int v18 = *((unsigned __int16 *)v11 + 1);
    BOOL v19 = v17 >= v18;
    if (v17 == v18 && (v20 = *v12, unsigned int v21 = *v11, v19 = v20 >= v21, v20 == v21))
    {
      if (!gdc::GenericKey::operator<(*((void *)v12 + 1), *((void *)v12 + 2), *((void *)v11 + 1), *((void *)v11 + 2)))goto LABEL_9; {
    }
      }
    else if (v19)
    {
      goto LABEL_9;
    }
    unsigned int v22 = (char *)*((void *)v12 + 1);
    uint64_t v86 = *(void *)v12;
    *(void *)&long long v87 = v89;
    unsigned int v24 = (char *)*((void *)v12 + 3);
    uint64_t v23 = *((void *)v12 + 4);
    *(void *)&long long v88 = v89;
    *((void *)&v88 + 1) = v23;
    if (v22 == v24)
    {
      unsigned int v26 = (char *)*((void *)v12 + 2);
      unint64_t v27 = v26 - v22;
      *((void *)&v87 + 1) = &v89[v26 - v22];
      if (v26 == v22) {
        goto LABEL_33;
      }
      if (v27 < 8)
      {
        BOOL v28 = v89;
      }
      else
      {
        BOOL v28 = v89;
        if ((unint64_t)(v89 - v22) >= 0x20)
        {
          if (v27 < 0x20)
          {
            uint64_t v29 = 0;
LABEL_27:
            unint64_t v34 = v27 & 0xFFFFFFFFFFFFFFF8;
            BOOL v28 = &v89[v27 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v35 = v29 - (v27 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v36 = (uint64_t *)&v22[v29];
            unint64_t v37 = &v89[v29];
            do
            {
              uint64_t v38 = *v36++;
              *v37++ = v38;
              v35 += 8;
            }
            while (v35);
            if (v27 == v34) {
              goto LABEL_33;
            }
            v22 += v34;
            goto LABEL_32;
          }
          uint64_t v29 = v27 & 0xFFFFFFFFFFFFFFE0;
          unsigned int v30 = (long long *)(v22 + 16);
          int v31 = &v90;
          unint64_t v32 = v27 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v33 = *v30;
            *((_OWORD *)v31 - 1) = *(v30 - 1);
            *(_OWORD *)int v31 = v33;
            v30 += 2;
            v31 += 4;
            v32 -= 32;
          }
          while (v32);
          if (v27 == v29) {
            goto LABEL_33;
          }
          if ((v27 & 0x18) != 0) {
            goto LABEL_27;
          }
          v22 += v29;
          BOOL v28 = &v89[v29];
        }
      }
      do
      {
LABEL_32:
        char v39 = *v22++;
        *v28++ = v39;
      }
      while (v22 != v26);
      goto LABEL_33;
    }
    uint64_t v25 = *((void *)v12 + 2);
    *(void *)&long long v87 = v22;
    *((void *)&v87 + 1) = v25;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
LABEL_33:
    int v82 = v14;
    uint64_t v40 = 0;
    uint64_t v83 = v13;
    unint64_t v84 = v16;
    uint64_t v85 = (uint64_t)&a1[96 * v13 + 328];
    uint64_t v91 = *((void *)v12 + 9);
    long long v92 = *((_OWORD *)v12 + 5);
    unint64_t v41 = v15;
    uint64_t v42 = v16;
    for (uint64_t i = v12; ; uint64_t i = v44)
    {
      uint64_t v44 = v11;
      uint64_t v45 = (void **)(v11 + 8);
      *(void *)uint64_t i = *(void *)v11;
      uint64_t v46 = (void *)*((void *)i + 1);
      if (v46 != *((void **)i + 3)) {
        free(v46);
      }
      BOOL v47 = i + 40;
      *((void *)i + 3) = i + 40;
      uint64_t v48 = (char *)*((void *)v11 + 1);
      if (v48 != *((char **)v11 + 3))
      {
        *((void *)i + 1) = v48;
        *((void *)i + 2) = *((void *)v11 + 2);
        *(_OWORD *)uint64_t v45 = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        goto LABEL_55;
      }
      *((void *)i + 1) = v47;
      uint64_t v49 = (char *)*((void *)v11 + 2);
      unint64_t v50 = v49 - v48;
      *((void *)i + 2) = &v47[v49 - v48];
      if (v49 != v48)
      {
        if (v50 < 8 || (unint64_t)(v85 - 96 * v40 - (void)v48) < 0x20) {
          goto LABEL_54;
        }
        if (v50 >= 0x20)
        {
          unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v52 = (long long *)(v48 + 16);
          uint64_t v53 = v42;
          unint64_t v54 = v50 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v55 = *v52;
            *((_OWORD *)v53 - 1) = *(v52 - 1);
            *(_OWORD *)uint64_t v53 = v55;
            v53 += 32;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v50 == v51) {
            goto LABEL_55;
          }
          if ((v50 & 0x18) == 0)
          {
            v48 += v51;
            v47 += v51;
            do
            {
LABEL_54:
              char v61 = *v48++;
              *v47++ = v61;
            }
            while (v48 != v49);
            goto LABEL_55;
          }
        }
        else
        {
          unint64_t v51 = 0;
        }
        unint64_t v56 = v50 & 0xFFFFFFFFFFFFFFF8;
        v47 += v50 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v57 = v51 - (v50 & 0xFFFFFFFFFFFFFFF8);
        __int16 v58 = (uint64_t *)&v48[v51];
        uint64_t v59 = &v41[v51];
        do
        {
          uint64_t v60 = *v58++;
          *(void *)uint64_t v59 = v60;
          v59 += 8;
          v57 += 8;
        }
        while (v57);
        if (v50 != v56)
        {
          v48 += v56;
          goto LABEL_54;
        }
      }
LABEL_55:
      *((void *)i + 4) = *((void *)v11 + 4);
      *((void *)i + 9) = *((void *)v11 + 9);
      *((_OWORD *)i + 5) = *((_OWORD *)v11 + 5);
      if (v11 == a1) {
        break;
      }
      v11 -= 96;
      unsigned int v62 = *((unsigned __int16 *)v44 - 47);
      BOOL v63 = WORD1(v86) >= v62;
      if (WORD1(v86) == v62 && (v64 = *v11, BOOL v63 = v86 >= v64, v86 == v64))
      {
        if (!gdc::GenericKey::operator<(v87, *((uint64_t *)&v87 + 1), *((void *)v44 - 11), *((void *)v44 - 10)))
        {
LABEL_59:
          long long v65 = (uint64_t *)v44;
          goto LABEL_61;
        }
      }
      else if (v63)
      {
        goto LABEL_59;
      }
      ++v40;
      v42 -= 96;
      v41 -= 96;
    }
    long long v65 = (uint64_t *)a1;
LABEL_61:
    uint64_t v2 = v81;
    uint64_t v13 = v83;
    *long long v65 = v86;
    if (v65 == &v86) {
      goto LABEL_82;
    }
    if (*v45 != (void *)v65[3]) {
      free(*v45);
    }
    unsigned int v66 = v65 + 5;
    v65[3] = (uint64_t)(v65 + 5);
    if ((void)v87 != (void)v88)
    {
      *uint64_t v45 = (void *)v87;
      v65[2] = *((void *)&v87 + 1);
      long long v87 = 0u;
      long long v88 = 0u;
      goto LABEL_81;
    }
    *uint64_t v45 = v66;
    BOOL v67 = (char *)v87;
    v65[2] = (uint64_t)&v66[*((void *)&v87 + 1) - v87];
    uint64_t v68 = (char *)*((void *)&v87 + 1);
    if (v67 == *((char **)&v87 + 1)) {
      goto LABEL_81;
    }
    unint64_t v69 = *((void *)&v87 + 1) - (void)v67;
    if (*((void *)&v87 + 1) - (void)v67 < 8uLL || (unint64_t)((char *)v65 - v67 + 40) < 0x20)
    {
      do
      {
LABEL_80:
        char v80 = *v67++;
        *v66++ = v80;
      }
      while (v67 != v68);
      goto LABEL_81;
    }
    if (v69 >= 0x20)
    {
      unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v71 = (long long *)(v67 + 16);
      uint64_t v72 = v65 + 7;
      unint64_t v73 = v69 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v74 = *v71;
        *(v72 - 1) = *(v71 - 1);
        *uint64_t v72 = v74;
        v71 += 2;
        v72 += 2;
        v73 -= 32;
      }
      while (v73);
      if (v69 == v70) {
        goto LABEL_81;
      }
      if ((v69 & 0x18) != 0) {
        goto LABEL_75;
      }
      v67 += v70;
      v66 += v70;
      goto LABEL_80;
    }
    unint64_t v70 = 0;
LABEL_75:
    unint64_t v75 = v69 & 0xFFFFFFFFFFFFFFF8;
    v66 += v69 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v76 = v70 - (v69 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v77 = (uint64_t *)&v67[v70];
    long long v78 = (uint64_t *)((char *)v65 + v70 + 40);
    do
    {
      uint64_t v79 = *v77++;
      *v78++ = v79;
      v76 += 8;
    }
    while (v76);
    if (v69 != v75)
    {
      v67 += v75;
      goto LABEL_80;
    }
LABEL_81:
    v65[4] = *((void *)&v88 + 1);
LABEL_82:
    v65[9] = v91;
    *((_OWORD *)v44 + 5) = v92;
    if ((void)v87 != (void)v88) {
      free((void *)v87);
    }
    int v14 = v82 + 1;
    unsigned int v16 = v84;
    if (v82 == 7) {
      return v12 + 96 == v81;
    }
LABEL_9:
    unsigned int v11 = v12;
    ++v13;
    v16 += 96;
    v15 += 96;
    v12 += 96;
    if (v12 != v2) {
      continue;
    }
    return 1;
  }
}

void std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unsigned int v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unsigned int v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unsigned int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = operator new(0x18uLL);
  v13[1] = a2;
  v13[2] = a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_44;
    }
    if (prime < v7)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v7) {
LABEL_44:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v23 = *(void *)a1;
  unsigned int v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *uint64_t v13 = *v24;
LABEL_58:
    void *v24 = v13;
    goto LABEL_59;
  }
  uint64_t v25 = *(void *)(a1 + 16);
  *uint64_t v13 = v25;
  *(void *)(a1 + 16) = v13;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (v25)
  {
    unint64_t v26 = *(void *)(v25 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    unsigned int v24 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 136);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](a1 + 136, v2);
    operator delete(*v3);
  }
  if (*(unsigned char *)(a1 + 120)) {
    *(unsigned char *)(a1 + 120) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4 != *(void **)(a1 + 56))
  {
    free(v4);
  }
}

__n128 std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A340;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 24);
  gdc::LayerDataKey::LayerDataKey(a2 + 32, a1 + 32);
  *(unsigned char *)(a2 + 120) = 0;
  if (*(unsigned char *)(a1 + 120))
  {
    *(_DWORD *)(a2 + 124) = *(_DWORD *)(a1 + 124);
    *(unsigned char *)(a2 + 120) = 1;
  }
  *(void *)(a2 + 128) = *(void *)(a1 + 128);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  uint64_t v4 = *(char **)(a1 + 136);
  uint64_t v5 = *(char **)(a1 + 144);
  int64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      abort();
    }
    uint8x8_t v8 = operator new(v6);
    *(void *)(a2 + 136) = v8;
    *(void *)(a2 + 144) = v8;
    *(void *)(a2 + 152) = &v8[24 * v7];
    do
    {
      uint64_t v9 = (uint64_t)(v4 + 8);
      __int16 v10 = *(_WORD *)v4;
      v4 += 48;
      uint64_t v11 = (uint64_t)(v8 + 4);
      *uint8x8_t v8 = v10;
      v8 += 24;
      std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(v11, v9);
    }
    while (v4 != v5);
    *(void *)(a2 + 144) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 160);
  *(unsigned char *)(a2 + 176) = *(unsigned char *)(a1 + 176);
  *(__n128 *)(a2 + 160) = result;
  return result;
}

void std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57A340;
  unint64_t v3 = (void **)(a1 + 136);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](a1 + 136, v2);
    operator delete(*v3);
  }
  if (*(unsigned char *)(a1 + 120)) {
    *(unsigned char *)(a1 + 120) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4 != *(void **)(a1 + 56)) {
    free(v4);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57A340;
  unint64_t v3 = (void **)(a1 + 136);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](a1 + 136, v2);
    operator delete(*v3);
  }
  if (*(unsigned char *)(a1 + 120)) {
    *(unsigned char *)(a1 + 120) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4 != *(void **)(a1 + 56)) {
    free(v4);
  }
  return a1;
}

uint64_t **gdc::LayerDataSource::cancelLayerDataRequest(gdc::LayerDataSource *this, const gdc::LayerDataRequestKey *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  uint64_t v4 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)a2);
    uint64_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    unint64_t v17 = v5;
    _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_DEBUG, "cancelLayerDataRequest: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __n128 result = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)this + 5, (unsigned __int8 *)a2);
  if (result)
  {
    uint64_t v7 = (uint64_t)result;
    uint8x8_t v8 = result[16];
    if (*((unsigned char *)v8 + 209)) {
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)this + 160, v8[14], v8[14]);
    }
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    uint64_t v9 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
    {
      gdc::LayerDataRequestKey::keysInt32Str(&__p, *(unsigned __int16 **)(v7 + 128));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (*(unsigned char *)(*(void *)(v7 + 128) + 209)) {
        uint64_t v11 = "y";
      }
      else {
        uint64_t v11 = "n";
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v17 = p_p;
      __int16 v18 = 2080;
      BOOL v19 = v11;
      _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_DEBUG, "Cancelling layer data request: %s, pendingCreation: %s", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
    }
    os_signpost_id_t v12 = *(void *)(*(void *)(v7 + 128) + 112);
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v13 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1A1780000, v13, OS_SIGNPOST_INTERVAL_END, v12, "LayerDataRequest", "status=cancelled", (uint8_t *)&__p, 2u);
      }
    }
    float v14 = (void *)*((void *)this + 59);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    gdc::LayerDataRequestTracker::_processKey(v14, (unsigned __int8 *)a2, (uint64_t *)&__p, 1);
    return (uint64_t **)std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase((void *)this + 5, (void *)v7);
  }
  return result;
}

double std::__stable_partition_impl<std::_ClassicAlgPolicy,gdc::LogicExecutionGraphBuilder::build(std::function<BOOL ()(gdc::LogicExecutionNode const&)>)::$_0 &,std::__wrap_iter<gdc::LogicExecutionNode*>,long,std::pair<gdc::LogicExecutionNode*,long>>(long long *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint8x8_t v8 = a1;
  if (a4 == 3)
  {
    os_signpost_id_t v12 = a1 + 2;
    if (*((unsigned char *)a1 + 56) != 1) {
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a3 + 24);
    if (!v13)
    {
LABEL_73:
      std::__throw_bad_function_call[abi:nn180100]();
      *(double *)&long long v10 = gdc::NonFlatTileSelector::createDebugNode(v67);
      return *(double *)&v10;
    }
    if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)v13 + 48))(v13, v8 + 2))
    {
LABEL_7:
      *(_OWORD *)unint64_t v71 = *v8;
      long long v14 = *v8;
      *(_OWORD *)&unsigned char v71[16] = v8[1];
      long long v15 = *(long long *)((char *)v8 + 41);
      *uint8x8_t v8 = *v12;
      *(long long *)((char *)v8 + 9) = v15;
      *os_signpost_id_t v12 = v14;
      *(long long *)((char *)v8 + 41) = *(_OWORD *)&v71[9];
      long long v10 = *v12;
      *(_OWORD *)unint64_t v70 = *v12;
      *(_OWORD *)&v70[16] = v8[3];
      long long v16 = *(long long *)((char *)a2 + 9);
      *os_signpost_id_t v12 = *a2;
      *(long long *)((char *)v8 + 41) = v16;
      goto LABEL_8;
    }
    *(_OWORD *)uint64_t v72 = *v12;
    long long v38 = *v12;
    *(_OWORD *)&v72[16] = v8[3];
    long long v39 = *(long long *)((char *)a2 + 9);
    *os_signpost_id_t v12 = *a2;
    *(long long *)((char *)v8 + 41) = v39;
    *a2 = v38;
    *(long long *)((char *)a2 + 9) = *(_OWORD *)&v72[9];
    long long v10 = *v8;
    *(_OWORD *)unint64_t v73 = *v8;
    *(_OWORD *)&v73[16] = v8[1];
    long long v40 = *(long long *)((char *)v8 + 41);
    *uint8x8_t v8 = *v12;
    *(long long *)((char *)v8 + 9) = v40;
    goto LABEL_59;
  }
  if (a4 == 2)
  {
    long long v10 = *a1;
    *(_OWORD *)unint64_t v70 = *a1;
    *(_OWORD *)&v70[16] = a1[1];
    long long v11 = *(long long *)((char *)a2 + 9);
    *a1 = *a2;
    *(long long *)((char *)a1 + 9) = v11;
LABEL_8:
    *a2 = v10;
    *(void *)&long long v10 = *(void *)&v70[9];
    *(long long *)((char *)a2 + 9) = *(_OWORD *)&v70[9];
    return *(double *)&v10;
  }
  if (a6 >= a4)
  {
    long long v28 = a1[1];
    *a5 = *a1;
    a5[1] = v28;
    uint64_t v29 = a5 + 2;
    unsigned int v30 = a1 + 2;
    if (a1 + 2 == a2)
    {
      long long v31 = *a2;
      *(long long *)((char *)a1 + 9) = *(long long *)((char *)a2 + 9);
      *a1 = v31;
      unint64_t v32 = a2;
    }
    else
    {
      do
      {
        if (*((unsigned char *)v30 + 24) != 1) {
          goto LABEL_23;
        }
        uint64_t v34 = *(void *)(a3 + 24);
        if (!v34) {
          goto LABEL_73;
        }
        if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)v34 + 48))(v34, v30))
        {
LABEL_23:
          long long v33 = *v30;
          *(long long *)((char *)v8 + 9) = *(long long *)((char *)v30 + 9);
          *uint8x8_t v8 = v33;
          v8 += 2;
        }
        else
        {
          long long v35 = v30[1];
          *uint64_t v29 = *v30;
          v29[1] = v35;
          v29 += 2;
        }
        v30 += 2;
      }
      while (v30 != a2);
      long long v10 = *a2;
      *(long long *)((char *)v8 + 9) = *(long long *)((char *)a2 + 9);
      *uint8x8_t v8 = v10;
      unint64_t v32 = v8 + 2;
      if (v29 <= a5) {
        return *(double *)&v10;
      }
    }
    uint64_t v36 = 0;
    do
    {
      unint64_t v37 = &v32[v36];
      long long v10 = a5[v36];
      *(long long *)((char *)v37 + 9) = *(long long *)((char *)&a5[v36] + 9);
      *unint64_t v37 = v10;
      v36 += 2;
    }
    while (&a5[v36] < v29);
    return *(double *)&v10;
  }
  if (a4 >= 0) {
    uint64_t v19 = a4;
  }
  else {
    uint64_t v19 = a4 + 1;
  }
  uint64_t v20 = v19 >> 1;
  uint8x8_t v21 = &a1[2 * (v19 >> 1)];
  if (*((unsigned char *)v21 - 8) == 1)
  {
    uint64_t v22 = 2 * v20;
    uint64_t v23 = v19 >> 1;
    while (1)
    {
      uint64_t v24 = *(void *)(a3 + 24);
      if (!v24) {
        goto LABEL_73;
      }
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v24 + 48))(v24, &v8[v22 - 2]))
      {
        unint64_t v27 = (char *)&v8[v22];
        goto LABEL_36;
      }
      uint64_t v25 = v22 * 16 - 32;
      if (v22 == 2) {
        break;
      }
      --v23;
      int v26 = *((unsigned __int8 *)&v8[v22 - 2] - 8);
      v22 -= 2;
      if (v26 != 1)
      {
        unint64_t v27 = (char *)v8 + v25;
LABEL_36:
        unint64_t v41 = v27 - 32;
        goto LABEL_37;
      }
    }
    uint64_t v42 = v8;
  }
  else
  {
    unint64_t v41 = (char *)(v21 - 2);
    uint64_t v23 = v19 >> 1;
LABEL_37:
    uint64_t v42 = (long long *)std::__stable_partition_impl<std::_ClassicAlgPolicy,gdc::LogicExecutionGraphBuilder::build(std::function<BOOL ()(gdc::LogicExecutionNode const&)>)::$_0 &,std::__wrap_iter<gdc::LogicExecutionNode*>,long,std::pair<gdc::LogicExecutionNode*,long>>(v8, v41, a3, v23, a5, a6);
  }
  uint64_t v69 = v20;
  uint64_t v43 = (uint64_t)(a2 + 2);
  uint64_t v44 = a4 - v20;
  for (uint64_t i = (uint64_t)&v8[2 * v20 + 2]; ; i += 32)
  {
    if (*(unsigned char *)(i - 8) == 1)
    {
      uint64_t v46 = *(void *)(a3 + 24);
      if (!v46) {
        goto LABEL_73;
      }
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v46 + 48))(v46, i - 32)) {
        break;
      }
    }
    if ((long long *)i == a2) {
      goto LABEL_45;
    }
    --v44;
  }
  uint64_t v43 = std::__stable_partition_impl<std::_ClassicAlgPolicy,gdc::LogicExecutionGraphBuilder::build(std::function<BOOL ()(gdc::LogicExecutionNode const&)>)::$_0 &,std::__wrap_iter<gdc::LogicExecutionNode*>,long,std::pair<gdc::LogicExecutionNode*,long>>(i - 32, a2, a3, v44, a5, a6);
LABEL_45:
  if (v21 != v42 && v21 != (long long *)v43)
  {
    if (v42 + 2 != v21)
    {
      if (v21 + 2 == (long long *)v43)
      {
        *(_OWORD *)unint64_t v75 = *(_OWORD *)(v43 - 32);
        *(_OWORD *)&v75[16] = *(_OWORD *)(v43 - 16);
        if ((long long *)(v43 - 32) != v42) {
          memmove(v42 + 2, v42, v43 - 32 - (void)v42 - 7);
        }
        *uint64_t v42 = *(_OWORD *)v75;
        *(void *)&long long v10 = *(void *)&v75[9];
        *(long long *)((char *)v42 + 9) = *(_OWORD *)&v75[9];
      }
      else
      {
        uint64_t v47 = ((char *)v21 - (char *)v42) >> 5;
        if (v47 == (v43 - (uint64_t)v21) >> 5)
        {
          uint64_t v48 = v42 + 2;
          uint64_t v49 = (uint64_t)&v8[2 * v69 + 2];
          do
          {
            *(_OWORD *)long long v74 = *(v48 - 2);
            *(_OWORD *)&v74[16] = *(v48 - 1);
            long long v50 = *(_OWORD *)(v49 - 23);
            *(v48 - 2) = *(_OWORD *)(v49 - 32);
            *(long long *)((char *)v48 - 23) = v50;
            *(_OWORD *)(v49 - 32) = *(_OWORD *)v74;
            *(void *)&long long v10 = *(void *)&v74[9];
            *(_OWORD *)(v49 - 23) = *(_OWORD *)&v74[9];
            if (v48 == v21) {
              break;
            }
            v48 += 2;
            BOOL v51 = v49 == v43;
            v49 += 32;
          }
          while (!v51);
        }
        else
        {
          uint64_t v52 = (v43 - (uint64_t)v21) >> 5;
          uint64_t v53 = ((char *)v21 - (char *)v42) >> 5;
          do
          {
            uint64_t v54 = v53;
            uint64_t v53 = v52;
            uint64_t v52 = v54 % v52;
          }
          while (v52);
          if (v53)
          {
            long long v55 = &v42[2 * v53];
            do
            {
              long long v56 = *(v55 - 2);
              long long v57 = *(v55 - 1);
              v55 -= 2;
              *(_OWORD *)unint64_t v76 = v56;
              *(_OWORD *)&v76[16] = v57;
              __int16 v58 = &v55[2 * v47];
              uint64_t v59 = v55;
              do
              {
                uint64_t v60 = v58;
                long long v61 = *v58;
                *(long long *)((char *)v59 + 9) = *(long long *)((char *)v58 + 9);
                *uint64_t v59 = v61;
                uint64_t v62 = (v43 - (uint64_t)v58) >> 5;
                v58 += 2 * v47;
                BOOL v63 = __OFSUB__(v47, v62);
                uint64_t v65 = v47 - v62;
                char v64 = (v65 < 0) ^ v63;
                unsigned int v66 = &v42[2 * v65];
                if (!v64) {
                  __int16 v58 = v66;
                }
                uint64_t v59 = v60;
              }
              while (v58 != v55);
              *(void *)&long long v10 = *(void *)v76;
              *(long long *)((char *)v60 + 9) = *(_OWORD *)&v76[9];
              *uint64_t v60 = *(_OWORD *)v76;
            }
            while (v55 != v42);
          }
        }
      }
      return *(double *)&v10;
    }
    *(_OWORD *)unint64_t v73 = *v42;
    *(_OWORD *)&v73[16] = v42[1];
    memmove(v42, v21, v43 - (void)v21 - 7);
    os_signpost_id_t v12 = (long long *)((char *)v42 + v43 - (void)v21);
    long long v10 = *(_OWORD *)v73;
LABEL_59:
    *os_signpost_id_t v12 = v10;
    *(void *)&long long v10 = *(void *)&v73[9];
    *(long long *)((char *)v12 + 9) = *(_OWORD *)&v73[9];
  }
  return *(double *)&v10;
}

double gdc::NonFlatTileSelector::createDebugNode@<D0>(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "Non Flat Tile Selector");
  *(unsigned char *)(a1 + 23) = 22;
  *(unsigned char *)(a1 + 24) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(unsigned char *)(a1 + 95) = 0;
  return result;
}

void gdc::NonFlatTileSelector::tilesInView(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = a1;
  int v7 = *(_DWORD *)(a1 + 8);
  double v9 = *(double *)(a2 + 368);
  double v8 = *(double *)(a2 + 376);
  double v10 = v8 * v9;
  if (v8 >= v9)
  {
    double v14 = *(double *)(a2 + 456);
  }
  else
  {
    if (v10 <= 0.0) {
      double v11 = 1.0;
    }
    else {
      double v11 = v8 / v9;
    }
    long double v12 = tan(*(double *)(a2 + 456) * 0.5);
    long double v13 = atan(v11 * v12);
    double v14 = v13 + v13;
  }
  long double v15 = tan(v14 * 0.5);
  *(long double *)(v6 + 24) = v15 * v15 * ((double)(v7 * v7) * (4.0 * v9)) / (a4 * a4 * v8 * v10);
  double v16 = *(double *)(a2 + 1200);
  double v17 = *(double *)(a2 + 1208);
  double v18 = *(double *)(a2 + 1184);
  double v19 = *(double *)(a2 + 1216);
  double v20 = *(double *)(a2 + 1192);
  *(void *)std::string __p = *(void *)(a2 + 1176);
  *(double *)&__p[8] = v18;
  *(double *)&__p[16] = v20;
  *(double *)&__p[24] = v16 - *(double *)__p;
  *(double *)&__p[32] = v17 - v18;
  *(double *)&long long v226 = v19 - v20;
  double v21 = *(double *)(a2 + 1248);
  double v22 = *(double *)(a2 + 1256);
  double v23 = *(double *)(a2 + 1232);
  double v24 = *(double *)(a2 + 1264);
  double v25 = *(double *)(a2 + 1240);
  *((void *)&v226 + 1) = *(void *)(a2 + 1224);
  double v227 = v23;
  double v228 = v25;
  double v229 = v21 - *((double *)&v226 + 1);
  double v230 = v22 - v23;
  double v231 = v24 - v25;
  double v26 = *(double *)(a2 + 1296);
  double v27 = *(double *)(a2 + 1304);
  double v28 = *(double *)(a2 + 1280);
  double v29 = *(double *)(a2 + 1312);
  double v30 = *(double *)(a2 + 1288);
  double v232 = *(double *)(a2 + 1272);
  double v233 = v28;
  double v234 = v30;
  double v235 = v26 - v232;
  double v236 = v27 - v28;
  double v237 = v29 - v30;
  double v31 = *(double *)(a2 + 1344);
  double v32 = *(double *)(a2 + 1352);
  double v33 = *(double *)(a2 + 1328);
  double v34 = *(double *)(a2 + 1360);
  long long v214 = (double *)a2;
  double v35 = *(double *)(a2 + 1336);
  double v238 = *(double *)(a2 + 1320);
  double v239 = v33;
  double v240 = v35;
  double v241 = v31 - v238;
  double v242 = v32 - v33;
  double v243 = v34 - v35;
  uint64_t v244 = *(void *)__p;
  double v245 = v18;
  double v246 = v20;
  double v247 = *((double *)&v226 + 1) - *(double *)__p;
  double v248 = v23 - v18;
  double v249 = v25 - v20;
  uint64_t v250 = *((void *)&v226 + 1);
  double v251 = v23;
  double v252 = v25;
  double v253 = v238 - *((double *)&v226 + 1);
  double v254 = v33 - v23;
  double v255 = v35 - v25;
  double v256 = v238;
  double v257 = v33;
  double v258 = v35;
  double v259 = v232 - v238;
  double v260 = v28 - v33;
  double v261 = v30 - v35;
  double v262 = v232;
  double v263 = v28;
  double v264 = v30;
  double v265 = *(double *)__p - v232;
  double v266 = v18 - v28;
  double v267 = v20 - v30;
  double v268 = v16;
  double v269 = v17;
  double v270 = v19;
  double v271 = v21 - v16;
  double v272 = v22 - v17;
  double v273 = v24 - v19;
  double v274 = v21;
  double v275 = v22;
  double v276 = v24;
  double v277 = v31 - v21;
  double v278 = v32 - v22;
  double v279 = v34 - v24;
  double v280 = v31;
  double v281 = v32;
  double v282 = v34;
  double v283 = v26 - v31;
  double v284 = v27 - v32;
  double v285 = v29 - v34;
  double v286 = v26;
  double v287 = v27;
  double v288 = v29;
  double v289 = v16 - v26;
  double v290 = v17 - v27;
  double v291 = v19 - v29;
  uint64_t v36 = (char *)operator new(0x240uLL);
  uint64_t v37 = 0;
  long long v38 = v36 + 576;
  long long v39 = (double *)v36;
  uint64_t v223 = v6;
  do
  {
    long long v40 = &__p[48 * v37];
    double v41 = *(double *)(v6 + 32);
    double v42 = *(double *)(v6 + 40);
    double v43 = *((double *)v40 + 2);
    double v44 = *((double *)v40 + 5);
    if (fabs(v44) >= 1.0e-10)
    {
      double v48 = 1.0 / v44 * (v41 - v43);
      double v49 = 1.0 / v44 * (v42 - v43);
      double v50 = fmax(v48, v49);
      double v47 = fmax(fmin(v48, v49), v41);
      double v46 = fmin(v50, 1.0);
      if (v47 > v46) {
        goto LABEL_9;
      }
    }
    else
    {
      BOOL v45 = v43 >= v41 && v43 <= v42;
      if (!v45) {
        goto LABEL_9;
      }
      double v46 = 1.0;
      double v47 = 0.0;
    }
    double v51 = v44 * v47;
    double v52 = v43 + v44 * v47;
    double v53 = v44 * v46;
    float64x2_t v54 = *(float64x2_t *)(v40 + 24);
    float64x2_t v55 = vmlaq_n_f64(*(float64x2_t *)v40, v54, v47);
    float64x2_t v56 = vmlaq_n_f64(*(float64x2_t *)v40, v54, v46);
    if (v39 < (double *)v38)
    {
      *(float64x2_t *)long long v39 = v55;
      v39[2] = v52;
      *(float64x2_t *)(v39 + 3) = vsubq_f64(v56, v55);
      v39[5] = v53 - v51;
      v39 += 6;
    }
    else
    {
      unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - v36) >> 4) + 1;
      if (v57 > 0x555555555555555) {
        abort();
      }
      if (0x5555555555555556 * ((v38 - v36) >> 4) > v57) {
        unint64_t v57 = 0x5555555555555556 * ((v38 - v36) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v38 - v36) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v58 = 0x555555555555555;
      }
      else {
        unint64_t v58 = v57;
      }
      if (v58)
      {
        float64x2_t v220 = v55;
        float64x2_t v224 = v56;
        if (v58 > 0x555555555555555) {
LABEL_223:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        uint64_t v59 = (char *)operator new(48 * v58);
        float64x2_t v56 = v224;
        float64x2_t v55 = v220;
      }
      else
      {
        uint64_t v59 = 0;
      }
      uint64_t v60 = &v59[16 * (((char *)v39 - v36) >> 4)];
      *(float64x2_t *)uint64_t v60 = v55;
      *((double *)v60 + 2) = v52;
      *(float64x2_t *)(v60 + 24) = vsubq_f64(v56, v55);
      *((double *)v60 + 5) = v53 - v51;
      if (v39 == (double *)v36)
      {
        uint64_t v62 = &v59[16 * (((char *)v39 - v36) >> 4)];
      }
      else
      {
        long long v61 = &v59[16 * (((char *)v39 - v36) >> 4)];
        do
        {
          uint64_t v62 = v61 - 48;
          long long v63 = *((_OWORD *)v39 - 3);
          long long v64 = *((_OWORD *)v39 - 1);
          *((_OWORD *)v61 - 2) = *((_OWORD *)v39 - 2);
          *((_OWORD *)v61 - 1) = v64;
          *((_OWORD *)v61 - 3) = v63;
          v39 -= 6;
          v61 -= 48;
        }
        while (v39 != (double *)v36);
      }
      long long v38 = &v59[48 * v58];
      long long v39 = (double *)(v60 + 48);
      if (v36) {
        operator delete(v36);
      }
      uint64_t v36 = v62;
      uint64_t v6 = v223;
    }
LABEL_9:
    ++v37;
  }
  while (v37 != 12);
  int v65 = *(_DWORD *)(v6 + 8);
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 1065353216;
  long long v294 = 0u;
  long long v295 = 0u;
  LODWORD(v296) = 1065353216;
  *a3 = v65;
  uint64_t v215 = (uint64_t)(a3 + 2);
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a3 + 2), (uint64_t)__p);
  a3[12] = v65;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a3 + 14), (uint64_t)&v294);
  if (v36 != (char *)v39)
  {
    double v66 = v214[62];
    double v67 = v214[63];
    double v68 = v214[64];
    double v69 = 0.0;
    double v70 = 1.79769313e308;
    double v71 = -1.79769313e308;
    double v72 = -1.79769313e308;
    double v73 = 1.79769313e308;
    long long v74 = (double *)v36;
    do
    {
      double v75 = v74[1];
      double v76 = v74[2];
      double v77 = fmin(v75, v70);
      double v78 = sqrt((*v74 - v66) * (*v74 - v66) + (v75 - v67) * (v75 - v67) + (v76 - v68) * (v76 - v68));
      double v79 = fmax(v71, v75);
      double v80 = v74[4] + v75;
      double v81 = v74[3] + *v74;
      double v69 = fmax(fmax(v69, v78), sqrt((v81 - v66) * (v81 - v66) + (v80 - v67) * (v80 - v67) + (v74[5] + v76 - v68) * (v74[5] + v76 - v68)));
      double v73 = fmin(v81, fmin(*v74, v73));
      double v72 = fmax(fmax(v72, *v74), v81);
      double v70 = fmin(v80, v77);
      double v71 = fmax(v79, v80);
      v74 += 6;
    }
    while (v74 != v39);
    if (v69 == 0.0) {
      LOBYTE(v82) = 25;
    }
    else {
      int v82 = (int)fmin(fmax(*(double *)(v6 + 16) + log2(v69 * v69 * *(double *)(v6 + 24)) * -0.5, 1.0), 25.0);
    }
    double v83 = (double)(1 << v82);
    LODWORD(v84) = (1 << v82) + ~vcvtmd_s64_f64(v71 * v83);
    long long v295 = 0u;
    long long v296 = 0u;
    long long v294 = 0u;
    signed int v221 = (1 << v82) + ~vcvtmd_s64_f64(v70 * v83);
    if ((int)v84 > v221 || (signed int v85 = vcvtmd_s64_f64(v72 * v83), v219 = vcvtmd_s64_f64(v73 * v83), v219 > v85))
    {
      uint64_t v86 = 0;
      long long v87 = 0;
      goto LABEL_46;
    }
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    long long v87 = 0;
    uint64_t v86 = 0;
    uint64_t v216 = v36;
    int v93 = v85 + 1;
    signed int v217 = v85;
    do
    {
      signed int v94 = v219;
      if (v219 <= v85)
      {
        do
        {
          if (v86 == v87) {
            uint64_t v96 = 0;
          }
          else {
            uint64_t v96 = 170 * (v86 - v87) - 1;
          }
          unint64_t v97 = v91 + v92;
          if (v96 == v91 + v92)
          {
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            uint64_t v91 = *((void *)&v296 + 1);
            uint64_t v92 = v296;
            long long v87 = (void **)*((void *)&v294 + 1);
            uint64_t v86 = (void **)v295;
            unint64_t v97 = v296 + *((void *)&v296 + 1);
          }
          unint64_t v95 = (unint64_t)v87[v97 / 0xAA] + 24 * (v97 % 0xAA);
          *(unsigned char *)unint64_t v95 = -1;
          *(unsigned char *)(v95 + 1) = v82;
          *(_DWORD *)(v95 + 4) = v84;
          *(_DWORD *)(v95 + 8) = v94;
          *((void *)&v296 + 1) = ++v91;
          ++v94;
        }
        while (v93 != v94);
      }
      BOOL v45 = (int)v84 < v221;
      uint64_t v84 = (v84 + 1);
      signed int v85 = v217;
    }
    while (v45);
    if (v91)
    {
      double v98 = v214[62];
      double v99 = v214[63];
      double v100 = v214[64];
      uint64_t v101 = v223;
      while (1)
      {
        uint64_t v102 = v295;
        uint64_t v103 = 170 * ((uint64_t)(v295 - *((void *)&v294 + 1)) >> 3) - 1;
        if ((void)v295 == *((void *)&v294 + 1)) {
          uint64_t v103 = 0;
        }
        unint64_t v104 = *(void *)(*((void *)&v294 + 1) + 8 * (((uint64_t)v296 + v91 - 1) / 0xAAuLL))
             + 24 * (((uint64_t)v296 + v91 - 1) % 0xAAuLL);
        *(_WORD *)unint64_t v292 = *(_WORD *)v104;
        int32x2_t v293 = *(int32x2_t *)(v104 + 4);
        *((void *)&v296 + 1) = v91 - 1;
        if ((unint64_t)(v103 - (v91 + v296) + 1) >= 0x154)
        {
          operator delete(*(void **)(v295 - 8));
          *(void *)&long long v295 = v102 - 8;
        }
        uint64_t v105 = *(void *)(v101 + 72);
        if (v105)
        {
          (*(void (**)(unsigned char *__return_ptr))(*(void *)v105 + 48))(__p);
          int32x2_t v106 = vdup_n_s32(__p[0] == 0);
          v107.i64[0] = v106.u32[0];
          v107.i64[1] = v106.u32[1];
          int8x16_t v108 = vandq_s8((int8x16_t)vmulq_f64(*(float64x2_t *)&__p[8], (float64x2_t)vdupq_n_s64(0x3E5ACB157F7410BCuLL)), (int8x16_t)vcgezq_s64(vshlq_n_s64(v107, 0x3FuLL)));
        }
        else
        {
          int8x16_t v108 = *(int8x16_t *)(v101 + 32);
        }
        BOOL v109 = *(double *)v108.i64 == 0.0;
        int8x16_t v110 = v108;
        BOOL v111 = *(double *)&v108.i64[1] == 0.0;
        if (v109 && v111) {
          uint64_t v112 = 152;
        }
        else {
          uint64_t v112 = 80;
        }
        if (v109 && v111) {
          uint64_t v113 = v223 + 152;
        }
        else {
          uint64_t v113 = v223 + 80;
        }
        uint64_t v114 = (uint64_t *)(v113 + 48);
        uint64_t v115 = (void *)(v113 + 8);
        int v116 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((void *)(v113 + 8), v292);
        if (v116)
        {
          uint64_t v117 = *(double **)(v113 + 56);
          uint64_t v118 = (uint64_t *)v116[5];
          if (v117 != (double *)v118)
          {
            char v119 = (uint64_t *)v118[1];
            if (v119 != (uint64_t *)v117)
            {
              uint64_t v120 = *v118;
              *(void *)(v120 + 8) = v119;
              *(void *)v118[1] = v120;
              double v121 = *v117;
              *(void *)(*(void *)&v121 + 8) = v118;
              *(double *)uint64_t v118 = v121;
              *(void *)uint64_t v117 = v118;
              v118[1] = (uint64_t)v117;
              uint64_t v117 = *(double **)(v113 + 56);
            }
          }
          if (v117 != (double *)v114)
          {
            double v122 = v117[5];
            double v123 = v117[6];
            double v124 = v117[7];
            double v125 = v117[8];
            goto LABEL_187;
          }
        }
        char v126 = v292[1];
        __int32 v127 = v293.i32[1];
        __int32 v128 = v293.i32[0];
        uint64_t v129 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((void *)(v113 + 8), v292);
        char v130 = v126;
        if (v129)
        {
          uint64_t v84 = (uint64_t)v129;
          uint64_t v131 = (uint64_t *)v129[5];
          uint64_t v132 = *v131;
          *(void *)(v132 + 8) = v131[1];
          *(void *)v131[1] = v132;
          --*(void *)(v113 + 64);
          operator delete(v131);
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)(v113 + 8), (void *)v84);
          if (*(void *)__p) {
            operator delete(*(void **)__p);
          }
          char v130 = v292[1];
        }
        double v133 = 1.0 / (double)(1 << v126);
        double v122 = v133 * (double)v127;
        double v123 = v133 * (double)((1 << v126) + ~v128);
        double v124 = v122 + v133;
        double v125 = v123 + v133;
        uint64_t v134 = (char *)operator new(0x48uLL);
        uint64_t v135 = v292[0];
        v134[16] = v292[0];
        v134[17] = v130;
        int32x2_t v136 = v293;
        *(int32x2_t *)(v134 + 20) = v293;
        *((double *)v134 + 5) = v122;
        *((double *)v134 + 6) = v123;
        *((double *)v134 + 7) = v124;
        *((double *)v134 + 8) = v125;
        int v137 = *(void **)(v113 + 56);
        *(void *)uint64_t v134 = v114;
        *((void *)v134 + 1) = v137;
        void *v137 = v134;
        unint64_t v138 = *(void *)(v113 + 64) + 1;
        *(void *)(v113 + 56) = v134;
        *(void *)(v113 + 64) = v138;
        unint64_t v139 = (v292[1]
              - 0x61C8864680B583EBLL
              + ((v135 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v135 - 0x61C8864680B583EBLL) >> 2)) ^ (v135 - 0x61C8864680B583EBLL);
        unint64_t v140 = (v136.i32[0] - 0x61C8864680B583EBLL + (v139 << 6) + (v139 >> 2)) ^ v139;
        unint64_t v141 = (v136.i32[1] - 0x61C8864680B583EBLL + (v140 << 6) + (v140 >> 2)) ^ v140;
        unint64_t v142 = *(void *)(v113 + 16);
        uint64_t v101 = v223;
        if (v142)
        {
          uint8x8_t v143 = (uint8x8_t)vcnt_s8((int8x8_t)v142);
          v143.i16[0] = vaddlv_u8(v143);
          if (v143.u32[0] > 1uLL)
          {
            uint64_t v84 = (v136.i32[1] - 0x61C8864680B583EBLL + (v140 << 6) + (v140 >> 2)) ^ v140;
            if (v141 >= v142) {
              uint64_t v84 = v141 % v142;
            }
          }
          else
          {
            uint64_t v84 = v141 & (v142 - 1);
          }
          int v144 = *(uint64_t ***)(*v115 + 8 * v84);
          if (v144)
          {
            long long v145 = *v144;
            if (v145)
            {
              if (v143.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v147 = v145[1];
                  if (v147 == v141)
                  {
                    if (__PAIR64__(*((unsigned __int8 *)v145 + 17), *((unsigned __int8 *)v145 + 16)) == __PAIR64__(v292[1], v135)
                      && *(uint64_t *)((char *)v145 + 20) == *(void *)&v136)
                    {
                      goto LABEL_186;
                    }
                  }
                  else if ((v147 & (v142 - 1)) != v84)
                  {
                    goto LABEL_119;
                  }
                  long long v145 = (uint64_t *)*v145;
                  if (!v145) {
                    goto LABEL_119;
                  }
                }
              }
              do
              {
                unint64_t v146 = v145[1];
                if (v146 == v141)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v145 + 17), *((unsigned __int8 *)v145 + 16)) == __PAIR64__(v292[1], v135)
                    && *(uint64_t *)((char *)v145 + 20) == *(void *)&v136)
                  {
                    goto LABEL_186;
                  }
                }
                else
                {
                  if (v146 >= v142) {
                    v146 %= v142;
                  }
                  if (v146 != v84) {
                    break;
                  }
                }
                long long v145 = (uint64_t *)*v145;
              }
              while (v145);
            }
          }
        }
LABEL_119:
        unsigned __int8 v148 = v292[1];
        uint64_t v149 = operator new(0x30uLL);
        void *v149 = 0;
        v149[1] = v141;
        *((unsigned char *)v149 + 16) = v292[0];
        *((unsigned char *)v149 + 17) = v148;
        *(int32x2_t *)((char *)v149 + 20) = v293;
        v149[5] = v134;
        float v150 = (float)(unint64_t)(*(void *)(v113 + 32) + 1);
        float v151 = *(float *)(v113 + 40);
        if (!v142 || (float)(v151 * (float)v142) < v150) {
          break;
        }
LABEL_176:
        unint64_t v179 = (void *)*v115;
        long long v180 = *(void **)(*v115 + 8 * v84);
        if (v180)
        {
          void *v149 = *v180;
        }
        else
        {
          void *v149 = *(void *)(v113 + 24);
          *(void *)(v113 + 24) = v149;
          v179[v84] = v113 + 24;
          if (!*v149) {
            goto LABEL_185;
          }
          unint64_t v181 = *(void *)(*v149 + 8);
          if ((v142 & (v142 - 1)) != 0)
          {
            if (v181 >= v142) {
              v181 %= v142;
            }
          }
          else
          {
            v181 &= v142 - 1;
          }
          long long v180 = (void *)(*v115 + 8 * v181);
        }
        *long long v180 = v149;
LABEL_185:
        ++*(void *)(v113 + 32);
        unint64_t v138 = *(void *)(v113 + 64);
LABEL_186:
        while (v138 > *(void *)(v223 + v112))
        {
          uint64_t v184 = *(char **)(v113 + 48);
          *(_WORD *)std::string __p = *((_WORD *)v184 + 8);
          *(void *)&__p[4] = *(void *)(v184 + 20);
          long long v185 = *(_OWORD *)(v184 + 56);
          *(_OWORD *)&__p[24] = *(_OWORD *)(v184 + 40);
          long long v226 = v185;
          uint64_t v186 = *(void *)v184;
          *(void *)(v186 + 8) = *((void *)v184 + 1);
          **((void **)v184 + 1) = v186;
          *(void *)(v113 + 64) = v138 - 1;
          operator delete(v184);
          unsigned int v187 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((void *)(v113 + 8), __p);
          if (v187)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v297, (void *)(v113 + 8), v187);
            if (v297) {
              operator delete(v297);
            }
          }
          unint64_t v138 = *(void *)(v113 + 64);
        }
LABEL_187:
        *(double *)std::string __p = v122;
        *(double *)&__p[8] = v123;
        *(void *)&__p[16] = v110.i64[0];
        *(double *)&__p[24] = v124;
        *(double *)&__p[32] = v125;
        *(void *)&long long v226 = v110.i64[1];
        uint64_t v36 = v216;
        if (!geo::Intersect::encloses<double>(v214 + 123, (double *)__p)) {
          goto LABEL_72;
        }
        double v182 = (v122 - v98) * (v122 - v98);
        if (v98 >= v122) {
          double v182 = 0.0;
        }
        if (v98 > v124) {
          double v182 = (v98 - v124) * (v98 - v124);
        }
        if (v99 > v125)
        {
          double v183 = v99 - v125;
LABEL_200:
          double v182 = v182 + v183 * v183;
          goto LABEL_201;
        }
        if (v99 < v123)
        {
          double v183 = v123 - v99;
          goto LABEL_200;
        }
LABEL_201:
        if (v100 <= *(double *)&v110.i64[1])
        {
          if (v100 < *(double *)v110.i64) {
            double v182 = v182 + (*(double *)v110.i64 - v100) * (*(double *)v110.i64 - v100);
          }
        }
        else
        {
          double v182 = v182 + (v100 - *(double *)&v110.i64[1]) * (v100 - *(double *)&v110.i64[1]);
        }
        if (sqrt(v182) == 0.0) {
          unsigned int v188 = 25;
        }
        else {
          unsigned int v188 = (int)fmin(fmax(*(double *)(v101 + 16) + log2(*(double *)(v101 + 24) * v182) * -0.5, 1.0), 25.0);
        }
        unsigned __int8 v189 = v292[1];
        if (v292[1] >= v188)
        {
          std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(v215, v292, (uint64_t)v292);
LABEL_72:
          uint64_t v91 = *((void *)&v296 + 1);
          if (!*((void *)&v296 + 1)) {
            goto LABEL_221;
          }
        }
        else
        {
          uint64_t v190 = *((void *)&v294 + 1);
          uint64_t v191 = (uint64_t)(v295 - *((void *)&v294 + 1)) >> 3;
          uint64_t v192 = 170 * v191 - 1;
          int32x2_t v193 = v293;
          unsigned __int8 v194 = v292[0];
          if ((void)v295 == *((void *)&v294 + 1)) {
            uint64_t v195 = 0;
          }
          else {
            uint64_t v195 = 170 * v191 - 1;
          }
          uint64_t v197 = *((void *)&v296 + 1);
          uint64_t v196 = v296;
          unint64_t v198 = *((void *)&v296 + 1) + v296;
          if (v195 == *((void *)&v296 + 1) + (void)v296)
          {
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            uint64_t v190 = *((void *)&v294 + 1);
            uint64_t v197 = *((void *)&v296 + 1);
            uint64_t v196 = v296;
            unint64_t v198 = v296 + *((void *)&v296 + 1);
            uint64_t v192 = 170 * ((uint64_t)(v295 - *((void *)&v294 + 1)) >> 3) - 1;
          }
          char v199 = v189 + 1;
          int32x2_t v200 = vadd_s32(v193, v193);
          unint64_t v201 = *(void *)(v190 + 8 * (v198 / 0xAA)) + 24 * (v198 % 0xAA);
          *(unsigned char *)unint64_t v201 = v194;
          *(unsigned char *)(v201 + 1) = v189 + 1;
          *(int32x2_t *)(v201 + 4) = v200;
          uint64_t v202 = v197 + 1;
          *((void *)&v296 + 1) = v202;
          unint64_t v203 = v202 + v196;
          if (v192 == v202 + v196)
          {
            int32x2_t v222 = v200;
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            int32x2_t v200 = v222;
            uint64_t v190 = *((void *)&v294 + 1);
            uint64_t v202 = *((void *)&v296 + 1);
            uint64_t v196 = v296;
            unint64_t v203 = v296 + *((void *)&v296 + 1);
            uint64_t v192 = 170 * ((uint64_t)(v295 - *((void *)&v294 + 1)) >> 3) - 1;
          }
          uint64_t v84 = v200.u32[1];
          int v204 = v200.i32[1] | 1;
          unint64_t v205 = *(void *)(v190 + 8 * (v203 / 0xAA)) + 24 * (v203 % 0xAA);
          *(unsigned char *)unint64_t v205 = v194;
          *(unsigned char *)(v205 + 1) = v199;
          __int32 v206 = v200.i32[0];
          *(_DWORD *)(v205 + 4) = v200.i32[0];
          *(_DWORD *)(v205 + 8) = v200.i32[1] | 1;
          uint64_t v207 = v202 + 1;
          *((void *)&v296 + 1) = v207;
          unint64_t v208 = v207 + v196;
          if (v192 == v207 + v196)
          {
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            uint64_t v190 = *((void *)&v294 + 1);
            uint64_t v207 = *((void *)&v296 + 1);
            uint64_t v196 = v296;
            unint64_t v208 = v296 + *((void *)&v296 + 1);
            uint64_t v192 = 170 * ((uint64_t)(v295 - *((void *)&v294 + 1)) >> 3) - 1;
          }
          int v209 = v206 | 1;
          unint64_t v210 = *(void *)(v190 + 8 * (v208 / 0xAA)) + 24 * (v208 % 0xAA);
          *(unsigned char *)unint64_t v210 = v194;
          *(unsigned char *)(v210 + 1) = v199;
          *(_DWORD *)(v210 + 4) = v209;
          *(_DWORD *)(v210 + 8) = v84;
          uint64_t v211 = v207 + 1;
          *((void *)&v296 + 1) = v211;
          unint64_t v212 = v211 + v196;
          if (v192 == v212)
          {
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            uint64_t v211 = *((void *)&v296 + 1);
            uint64_t v190 = *((void *)&v294 + 1);
            unint64_t v212 = v296 + *((void *)&v296 + 1);
          }
          unint64_t v213 = *(void *)(v190 + 8 * (v212 / 0xAA)) + 24 * (v212 % 0xAA);
          *(unsigned char *)unint64_t v213 = v194;
          *(unsigned char *)(v213 + 1) = v199;
          *(_DWORD *)(v213 + 4) = v209;
          *(_DWORD *)(v213 + 8) = v204;
          uint64_t v91 = v211 + 1;
          *((void *)&v296 + 1) = v211 + 1;
          uint64_t v101 = v223;
          uint64_t v36 = v216;
          if (v211 == -1)
          {
LABEL_221:
            long long v87 = (void **)*((void *)&v294 + 1);
            uint64_t v86 = (void **)v295;
            goto LABEL_46;
          }
        }
      }
      BOOL v152 = (v142 & (v142 - 1)) != 0;
      if (v142 < 3) {
        BOOL v152 = 1;
      }
      unint64_t v153 = v152 | (2 * v142);
      unint64_t v154 = vcvtps_u32_f32(v150 / v151);
      if (v153 <= v154) {
        size_t v155 = v154;
      }
      else {
        size_t v155 = v153;
      }
      if (v155 == 1)
      {
        size_t v155 = 2;
      }
      else if ((v155 & (v155 - 1)) != 0)
      {
        uint64_t v156 = v149;
        size_t prime = std::__next_prime(v155);
        uint64_t v149 = v156;
        size_t v155 = prime;
        unint64_t v142 = *(void *)(v113 + 16);
      }
      if (v155 <= v142)
      {
        if (v155 < v142)
        {
          unint64_t v170 = vcvtps_u32_f32((float)*(unint64_t *)(v113 + 32) / *(float *)(v113 + 40));
          if (v142 < 3
            || (uint8x8_t v171 = (uint8x8_t)vcnt_s8((int8x8_t)v142), v171.i16[0] = vaddlv_u8(v171), v171.u32[0] > 1uLL))
          {
            uint64_t v176 = v149;
            unint64_t v170 = std::__next_prime(v170);
            uint64_t v149 = v176;
          }
          else
          {
            uint64_t v172 = 1 << -(char)__clz(v170 - 1);
            if (v170 >= 2) {
              unint64_t v170 = v172;
            }
          }
          if (v155 <= v170) {
            size_t v155 = v170;
          }
          if (v155 < v142)
          {
            if (v155) {
              goto LABEL_131;
            }
            unsigned int v177 = (void *)*v115;
            void *v115 = 0;
            if (v177)
            {
              uint64_t v178 = v149;
              operator delete(v177);
              uint64_t v149 = v178;
            }
            *(void *)(v113 + 16) = 0;
          }
        }
LABEL_171:
        unint64_t v142 = *(void *)(v113 + 16);
        if ((v142 & (v142 - 1)) != 0)
        {
          if (v141 >= v142) {
            uint64_t v84 = v141 % v142;
          }
          else {
            uint64_t v84 = v141;
          }
        }
        else
        {
          uint64_t v84 = (v142 - 1) & v141;
        }
        goto LABEL_176;
      }
LABEL_131:
      if (v155 >> 61) {
        goto LABEL_223;
      }
      size_t v158 = v149;
      uint64_t v159 = operator new(8 * v155);
      uint64_t v160 = (void *)*v115;
      void *v115 = v159;
      if (v160) {
        operator delete(v160);
      }
      uint64_t v161 = 0;
      *(void *)(v113 + 16) = v155;
      do
        *(void *)(*v115 + 8 * v161++) = 0;
      while (v155 != v161);
      uint64_t v163 = v113 + 24;
      uint64_t v162 = *(void **)(v113 + 24);
      uint64_t v149 = v158;
      if (!v162) {
        goto LABEL_171;
      }
      size_t v164 = v162[1];
      size_t v165 = v155 - 1;
      if ((v155 & (v155 - 1)) == 0)
      {
        size_t v166 = v164 & v165;
        *(void *)(*v115 + 8 * v166) = v163;
        while (1)
        {
          uint64_t v167 = (void *)*v162;
          if (!*v162) {
            break;
          }
          size_t v168 = v167[1] & v165;
          if (v168 == v166)
          {
            uint64_t v162 = (void *)*v162;
          }
          else if (*(void *)(*v115 + 8 * v168))
          {
            *uint64_t v162 = *v167;
            uint64_t v169 = 8 * v168;
            *uint64_t v167 = **(void **)(*v115 + v169);
            **(void **)(*v115 + v169) = v167;
          }
          else
          {
            *(void *)(*v115 + 8 * v168) = v162;
            uint64_t v162 = v167;
            size_t v166 = v168;
          }
        }
        goto LABEL_171;
      }
      if (v164 >= v155) {
        v164 %= v155;
      }
      *(void *)(*v115 + 8 * v164) = v163;
      uint64_t v173 = (void *)*v162;
      if (!*v162) {
        goto LABEL_171;
      }
      while (2)
      {
        size_t v175 = v173[1];
        if (v175 >= v155) {
          v175 %= v155;
        }
        if (v175 != v164)
        {
          if (!*(void *)(*v115 + 8 * v175))
          {
            *(void *)(*v115 + 8 * v175) = v162;
LABEL_157:
            uint64_t v162 = v173;
            uint64_t v173 = (void *)*v173;
            size_t v164 = v175;
            if (!v173) {
              goto LABEL_171;
            }
            continue;
          }
          *uint64_t v162 = *v173;
          uint64_t v174 = 8 * v175;
          *uint64_t v173 = **(void **)(*v115 + v174);
          **(void **)(*v115 + v174) = v173;
          uint64_t v173 = v162;
        }
        break;
      }
      size_t v175 = v164;
      goto LABEL_157;
    }
LABEL_46:
    if ((unint64_t)((char *)v86 - (char *)v87) < 0x11)
    {
      long long v88 = v87;
    }
    else
    {
      long long v88 = (void **)*((void *)&v294 + 1);
      unint64_t v89 = (unint64_t)v86 - *((void *)&v294 + 1);
      do
      {
        operator delete(*v87);
        ++v88;
        v89 -= 8;
        long long v87 = v88;
      }
      while (v89 > 0x10);
      *((void *)&v294 + 1) = v88;
    }
    while (v88 != v86)
    {
      uint64_t v90 = *v88++;
      operator delete(v90);
    }
    if ((void)v294) {
      operator delete((void *)v294);
    }
  }
  if (v36) {
    operator delete(v36);
  }
}

void gdc::NonFlatTileSelector::~NonFlatTileSelector(gdc::NonFlatTileSelector *this)
{
  gdc::NonFlatTileSelector::~NonFlatTileSelector(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  gdc::NonFlatTileSelector *v10;
  uint64_t v11;
  uint64_t v12;
  gdc::NonFlatTileSelector *v13;
  void *v14;
  void *v15;
  void *v16;
  gdc::NonFlatTileSelector *v17;

  *(void *)this = &unk_1EF555F00;
  if (*((void *)this + 27))
  {
    uint64_t v2 = (char *)this + 200;
    uint64_t v4 = *((void *)this + 25);
    unint64_t v3 = (char *)*((void *)this + 26);
    uint64_t v5 = *(void *)v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    *((void *)this + 27) = 0;
    if (v3 != (char *)this + 200)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v3 + 1);
        operator delete(v3);
        unint64_t v3 = v6;
      }
      while (v6 != v2);
    }
  }
  int v7 = (void *)*((void *)this + 22);
  if (v7)
  {
    do
    {
      double v8 = (void *)*v7;
      operator delete(v7);
      int v7 = v8;
    }
    while (v8);
  }
  double v9 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v9) {
    operator delete(v9);
  }
  if (*((void *)this + 18))
  {
    double v11 = *((void *)this + 16);
    double v10 = (gdc::NonFlatTileSelector *)*((void *)this + 17);
    long double v12 = *(void *)v10;
    *(void *)(v12 + 8) = *(void *)(v11 + 8);
    **(void **)(v11 + 8) = v12;
    *((void *)this + 18) = 0;
    if (v10 != (gdc::NonFlatTileSelector *)((char *)this + 128))
    {
      do
      {
        long double v13 = (gdc::NonFlatTileSelector *)*((void *)v10 + 1);
        operator delete(v10);
        double v10 = v13;
      }
      while (v13 != (gdc::NonFlatTileSelector *)((char *)this + 128));
    }
  }
  double v14 = (void *)*((void *)this + 13);
  if (v14)
  {
    do
    {
      long double v15 = (void *)*v14;
      operator delete(v14);
      double v14 = v15;
    }
    while (v15);
  }
  double v16 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v16) {
    operator delete(v16);
  }
  double v17 = (gdc::NonFlatTileSelector *)*((void *)this + 9);
  if (v17 == (gdc::NonFlatTileSelector *)((char *)this + 48))
  {
    (*(void (**)(char *))(*((void *)this + 6) + 32))((char *)this + 48);
  }
  else if (v17)
  {
    (*(void (**)(gdc::NonFlatTileSelector *))(*(void *)v17 + 40))(v17);
  }
}

void gdc::LayerDataCollector::addFallbackData(uint64_t a1, uint64_t a2, __int16 *a3, void *a4)
{
  uint64_t v8 = a1 + 48;
  double v9 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(a1 + 48), (unsigned __int8 *)a2);
  if (v9)
  {
    unint64_t v60 = (unint64_t)v9[16];
    goto LABEL_60;
  }
  unsigned __int16 v10 = *(_WORD *)(a2 + 8);
  double v11 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(a1 + 24), v10);
  unint64_t v60 = 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)v11 + 1) - *(void *)v11) >> 4);
  long double v12 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(a1 + 24), v10);
  long double v13 = v12;
  if (*a4) {
    int v14 = 3;
  }
  else {
    int v14 = 0;
  }
  unint64_t v16 = *((void *)v12 + 1);
  unint64_t v15 = *((void *)v12 + 2);
  if (v16 < v15)
  {
    int v17 = v14;
    char v61 = *(unsigned char *)a2;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v62, a2 + 8);
    unsigned __int8 v65 = 0;
    if (*(unsigned char *)(a2 + 96))
    {
      int v66 = *(_DWORD *)(a2 + 100);
      unsigned __int8 v65 = 1;
    }
    uint64_t v67 = *(void *)(a2 + 104);
    *(unsigned char *)unint64_t v16 = v61;
    gdc::LayerDataKey::LayerDataKey(v16 + 8, (uint64_t)&v62);
    *(unsigned char *)(v16 + 96) = 0;
    int v18 = v65;
    if (v65)
    {
      *(_DWORD *)(v16 + 100) = v66;
      *(unsigned char *)(v16 + 96) = 1;
    }
    *(void *)(v16 + 104) = v67;
    *(void *)(v16 + 112) = *a4;
    uint64_t v19 = a4[1];
    *(void *)(v16 + 120) = v19;
    if (v19)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      int v18 = v65;
    }
    *(_DWORD *)(v16 + 128) = v17;
    *(unsigned char *)(v16 + 132) = 1;
    *(void *)(v16 + 136) = 0;
    if (v18) {
      unsigned __int8 v65 = 0;
    }
    if (v63 != v64) {
      free(v63);
    }
    double v20 = (char *)(v16 + 144);
    goto LABEL_59;
  }
  unint64_t v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - *(void *)v12) >> 4);
  unint64_t v22 = v21 + 1;
  if (v21 + 1 > 0x1C71C71C71C71C7) {
    abort();
  }
  unint64_t v23 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - *(void *)v12) >> 4);
  if (2 * v23 > v22) {
    unint64_t v22 = 2 * v23;
  }
  if (v23 >= 0xE38E38E38E38E3) {
    unint64_t v24 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v24 = v22;
  }
  double v50 = a3;
  int v48 = v14;
  unint64_t v47 = v24;
  if (v24)
  {
    if (v24 > 0x1C71C71C71C71C7) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v25 = v8;
    double v26 = (char *)operator new(144 * v24);
  }
  else
  {
    uint64_t v25 = v8;
    double v26 = 0;
  }
  double v27 = &v26[144 * v21];
  char v61 = *(unsigned char *)a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v62, a2 + 8);
  unsigned __int8 v65 = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    int v66 = *(_DWORD *)(a2 + 100);
    unsigned __int8 v65 = 1;
  }
  uint64_t v67 = *(void *)(a2 + 104);
  *double v27 = v61;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v27 + 8), (uint64_t)&v62);
  v27[96] = 0;
  int v28 = v65;
  if (v65)
  {
    *((_DWORD *)v27 + 25) = v66;
    v27[96] = 1;
  }
  *((void *)v27 + 13) = v67;
  double v29 = &v26[144 * v21];
  uint64_t v30 = a4[1];
  *((void *)v29 + 14) = *a4;
  *((void *)v29 + 15) = v30;
  uint64_t v8 = v25;
  if (v30)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    int v28 = v65;
  }
  double v31 = &v26[144 * v21];
  *((_DWORD *)v31 + 32) = v48;
  v31[132] = 1;
  *((void *)v31 + 17) = 0;
  if (v28) {
    unsigned __int8 v65 = 0;
  }
  if (v63 != v64) {
    free(v63);
  }
  double v32 = &v26[144 * v47];
  double v20 = v27 + 144;
  double v34 = *(char **)v13;
  double v33 = (char *)*((void *)v13 + 1);
  if (v33 == *(char **)v13)
  {
    *(void *)long double v13 = v27;
    *((void *)v13 + 1) = v20;
    *((void *)v13 + 2) = v32;
    a3 = v50;
    if (!v33) {
      goto LABEL_59;
    }
  }
  else
  {
    double v46 = v32;
    uint64_t v49 = v8;
    uint64_t v35 = 0;
    do
    {
      uint64_t v36 = &v27[v35];
      uint64_t v37 = &v33[v35];
      v27[v35 - 144] = v33[v35 - 144];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v27[v35 - 136], (uint64_t)&v33[v35 - 136]);
      v27[v35 - 48] = 0;
      if (v33[v35 - 48])
      {
        *((_DWORD *)v36 - 11) = *((_DWORD *)v37 - 11);
        *(v36 - 48) = 1;
      }
      *((void *)v36 - 5) = *((void *)v37 - 5);
      *((_OWORD *)v36 - 2) = *((_OWORD *)v37 - 2);
      *((void *)v37 - 4) = 0;
      *((void *)v37 - 3) = 0;
      *((_OWORD *)v36 - 1) = *((_OWORD *)v37 - 1);
      v35 -= 144;
    }
    while (&v33[v35] != v34);
    long long v38 = &v27[v35];
    double v33 = *(char **)v13;
    long long v39 = (char *)*((void *)v13 + 1);
    double v20 = v27 + 144;
    *(void *)long double v13 = v38;
    *((void *)v13 + 1) = v27 + 144;
    *((void *)v13 + 2) = v46;
    if (v39 != v33)
    {
      a3 = v50;
      while (1)
      {
        long long v40 = (std::__shared_weak_count *)*((void *)v39 - 3);
        if (v40)
        {
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (*(v39 - 48)) {
          goto LABEL_49;
        }
LABEL_50:
        double v41 = (void *)*((void *)v39 - 16);
        if (v41 != *((void **)v39 - 14)) {
          free(v41);
        }
        v39 -= 144;
        if (v39 == v33) {
          goto LABEL_57;
        }
      }
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (!*(v39 - 48)) {
        goto LABEL_50;
      }
LABEL_49:
      *(v39 - 48) = 0;
      goto LABEL_50;
    }
    a3 = v50;
LABEL_57:
    uint64_t v8 = v49;
    if (!v33) {
      goto LABEL_59;
    }
  }
  operator delete(v33);
LABEL_59:
  *((void *)v13 + 1) = v20;
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&,unsigned long &>(v8, (unsigned __int8 *)a2, a2, (uint64_t *)&v60);
LABEL_60:
  v51[0] = *(unsigned char *)a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v52, a2 + 8);
  char v55 = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    int v56 = *(_DWORD *)(a2 + 100);
    char v55 = 1;
  }
  uint64_t v57 = *(void *)(a2 + 104);
  __int16 v58 = *a3;
  uint64_t v59 = *(void *)(a3 + 2);
  unint64_t v42 = *(void *)(a1 + 8);
  if (v42 >= *(void *)(a1 + 16))
  {
    BOOL v45 = std::vector<gdc::LayerDataIndex>::__emplace_back_slow_path<gdc::LayerKeyPair &,unsigned long &>((void **)a1, v51, (uint64_t *)&v60);
  }
  else
  {
    char v61 = v51[0];
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v62, (uint64_t)&v52);
    unsigned __int8 v65 = 0;
    if (v55)
    {
      int v66 = v56;
      unsigned __int8 v65 = 1;
    }
    uint64_t v67 = v57;
    __int16 v68 = v58;
    uint64_t v69 = v59;
    unint64_t v43 = v60;
    *(unsigned char *)unint64_t v42 = v61;
    gdc::LayerDataKey::LayerDataKey(v42 + 8, (uint64_t)&v62);
    *(unsigned char *)(v42 + 96) = 0;
    int v44 = v65;
    if (v65)
    {
      *(_DWORD *)(v42 + 100) = v66;
      *(unsigned char *)(v42 + 96) = 1;
    }
    *(void *)(v42 + 104) = v67;
    *(_WORD *)(v42 + 112) = v68;
    *(void *)(v42 + 116) = v69;
    *(void *)(v42 + 136) = v43;
    if (v44) {
      unsigned __int8 v65 = 0;
    }
    if (v63 != v64) {
      free(v63);
    }
    BOOL v45 = (char *)(v42 + 144);
  }
  *(void *)(a1 + 8) = v45;
  if (v55) {
    char v55 = 0;
  }
  if (v53 != v54) {
    free(v53);
  }
}

void *gdc::LayerDataCollector::virtualTilesBegin(void *this, uint64_t a2, uint64_t a3)
{
  *this = a2;
  this[2] = a3;
  if (a2 == a3)
  {
LABEL_9:
    this[1] = a2;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a2 + 113);
    int v4 = *(_DWORD *)(a2 + 116);
    int v5 = *(_DWORD *)(a2 + 120);
    uint64_t v6 = a2 + 144;
    int v7 = *(unsigned __int8 *)(a2 + 112);
    while (v6 != a3)
    {
      uint64_t v8 = v6;
      a2 += 144;
      if (*(unsigned __int8 *)(v6 + 112) != v7 || *(unsigned __int8 *)(v6 + 113) != v3 || *(_DWORD *)(v6 + 116) != v4) {
        goto LABEL_9;
      }
      v6 += 144;
      if (*(_DWORD *)(v8 + 120) != v5)
      {
        this[1] = v8;
        return this;
      }
    }
    this[1] = a3;
  }
  return this;
}

void gdc::FlatTileSelector::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  strcpy((char *)a2, "Flat Tile Selector");
  *(_WORD *)(a2 + 23) = 18;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  v15[23] = 8;
  strcpy(v15, "Lod Bias");
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  int v14 = 2;
  uint64_t v10 = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v15, (uint64_t)v9);
  double v5 = *(double *)(a1 + 16);
  v15[23] = 17;
  int v6 = *(_DWORD *)(a1 + 8);
  strcpy(v15, "Desired Tile Area");
  memset(&v7[4], 0, 24);
  int v8 = 2;
  v7[2] = exp2(v5 * -2.0 + 1.98) * (double)(v6 * v6);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v15, (uint64_t)v7);
}

void gdc::FlatTileSelector::tilesInView(gdc::FlatTileSelector *this@<X0>, const gdc::CameraView *a2@<X1>, double a3@<D0>, int a4@<W2>, _DWORD *a5@<X8>)
{
  *(_OWORD *)uint64_t v159 = 0u;
  *(_OWORD *)uint64_t v160 = 0u;
  int v161 = 1065353216;
  *(_OWORD *)uint64_t v156 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v158 = 1065353216;
  v153[0] = 0;
  v153[1] = 0;
  long long v154 = xmmword_1A28FCBD0;
  geo::Intersect::intersection<double>(&v162, (uint64_t)a2 + 984, (double *)v153);
  uint64_t v10 = v162;
  long long v11 = xmmword_1A28FC7B0;
  if (v162 == v163) {
    goto LABEL_14;
  }
  unint64_t v12 = (char *)v163 - (char *)v162 - 24;
  if (v12 >= 0x60)
  {
    unint64_t v18 = v12 / 0x18 + 1;
    uint64_t v19 = v18 & 3;
    if ((v18 & 3) == 0) {
      uint64_t v19 = 4;
    }
    unint64_t v20 = v18 - v19;
    uint64_t v21 = 3 * v20;
    float64x2_t v22 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    float64x2_t v23 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    unint64_t v24 = v162;
    float64x2_t v25 = v23;
    float64x2_t v26 = v23;
    float64x2_t v27 = v23;
    float64x2_t v28 = v22;
    float64x2_t v29 = v22;
    float64x2_t v8 = v22;
    do
    {
      uint64_t v30 = v24;
      v24 += 12;
      *(float64x2x3_t *)v9.f64 = vld3q_f64(v30);
      v30 += 6;
      float64x2_t v26 = vminnmq_f64(v9, v26);
      float64x2x3_t v164 = vld3q_f64(v30);
      float64x2_t v27 = vminnmq_f64(v164.val[0], v27);
      float64x2_t v22 = vmaxnmq_f64(v22, v9);
      float64x2_t v28 = vmaxnmq_f64(v28, v164.val[0]);
      float64x2_t v23 = vminnmq_f64(v31, v23);
      float64x2_t v25 = vminnmq_f64(v164.val[1], v25);
      float64x2_t v29 = vmaxnmq_f64(v29, v31);
      float64x2_t v8 = vmaxnmq_f64(v8, v164.val[1]);
      v20 -= 4;
    }
    while (v20);
    unint64_t v15 = &v162[v21];
    double v17 = vmaxnmvq_f64(vmaxnmq_f64(v29, v8));
    double v13 = vmaxnmvq_f64(vmaxnmq_f64(v22, v28));
    double v16 = vminnmvq_f64(vminnmq_f64(v26, v27));
    double v14 = vminnmvq_f64(vminnmq_f64(v23, v25));
  }
  else
  {
    double v13 = -1.79769313e308;
    double v14 = 1.79769313e308;
    unint64_t v15 = v162;
    double v16 = 1.79769313e308;
    double v17 = -1.79769313e308;
  }
  do
  {
    double v32 = *v15;
    double v33 = v15[1];
    v15 += 3;
    double v16 = fmin(v32, v16);
    double v13 = fmax(v13, v32);
    double v14 = fmin(v33, v14);
    double v17 = fmax(v17, v33);
  }
  while (v15 != v163);
  if (v16 > v13 || v14 > v17)
  {
LABEL_14:
    char v143 = 1;
    if (!v162) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  double v56 = *((double *)a2 + 66);
  double v57 = *((double *)a2 + 67);
  double v58 = *((double *)a2 + 65);
  double v59 = *((double *)a2 + 68);
  double v60 = v56 * -2.0 * v57;
  double v61 = -((v58 + v58) * v57 - v59 * (v56 * -2.0));
  double v62 = v60 + (v58 + v58) * v59;
  double v63 = 1.0;
  double v64 = -(v56 * -2.0 * v56 + 1.0 - (v58 + v58) * v58);
  double v65 = *((double *)a2 + 62);
  double v66 = *((double *)a2 + 63);
  double v67 = *((double *)a2 + 64);
  double v68 = 0.0;
  uint64_t v69 = v162;
  do
  {
    double v70 = sqrt((*v69 - v65) * (*v69 - v65) + (v69[1] - v66) * (v69[1] - v66) + (v69[2] - v67) * (v69[2] - v67));
    if (v70 > v68)
    {
      v9.f64[0] = *v69;
      v8.f64[0] = v69[1];
      double v63 = v69[2];
      double v68 = v70;
    }
    v69 += 3;
  }
  while (v69 != v163);
  float v71 = (v9.f64[0] - v65) * v61 + (v8.f64[0] - v66) * v62 + (v63 - v67) * v64;
  float v147 = v71;
  double v72 = v67 - v63;
  *(double *)&unint64_t v73 = sqrt((v65 - v9.f64[0]) * (v65 - v9.f64[0]) + (v66 - v8.f64[0]) * (v66 - v8.f64[0]) + v72 * v72);
  double v151 = *(double *)&v73;
  LOWORD(v73) = *((_WORD *)a2 + 476);
  double v74 = (double)v73;
  LOWORD(v73) = *((_WORD *)a2 + 477);
  double v75 = (double)v73;
  double v77 = *((double *)a2 + 46);
  double v76 = *((double *)a2 + 47);
  if (v76 >= v77)
  {
    double v83 = *((double *)a2 + 57);
  }
  else
  {
    double v78 = v76 * v77;
    double v79 = v76 / v77;
    double v144 = a3;
    if (v78 <= 0.0) {
      double v80 = 1.0;
    }
    else {
      double v80 = v79;
    }
    long double v81 = v80 * tan(*((double *)a2 + 57) * 0.5);
    a3 = v144;
    long double v82 = atan(v81);
    double v83 = v82 + v82;
  }
  long double v115 = tan(v83 * 0.5);
  double v116 = v147 + v147;
  float v117 = v116 * (v74 * v115) / (v75 * v74);
  *(float *)&long double v115 = v116 * v115 * v151 / (v72 * v75);
  float v118 = *((double *)this + 2)
       + -0.99
       + (float)(log2f((float)((float)((float)*((unsigned int *)this + 2) * (float)*((unsigned int *)this + 2)) * v117)* *(float *)&v115)* -0.5);
  char v119 = vcvtms_s32_f32(fminf(fmaxf(v118, 1.0), 25.0));
  double v120 = (double)(1 << v119);
  unsigned int v121 = vcvtmd_s64_f64(v16 * v120);
  unsigned int v122 = vcvtmd_s64_f64(v13 * v120);
  int v123 = vcvtmd_s64_f64(v14 * v120);
  int v124 = (1 << v119) - 1;
  int v125 = v123 & ~(v123 >> 31);
  if (v125 >= v124) {
    int v125 = (1 << v119) - 1;
  }
  int v126 = vcvtmd_s64_f64(v17 * v120);
  if (v126 <= v125) {
    int v126 = v125;
  }
  if (v126 >= v124) {
    int v126 = (1 << v119) - 1;
  }
  LODWORD(v11) = v121;
  DWORD1(v11) = v124 - v126;
  DWORD2(v11) = v122;
  HIDWORD(v11) = v124 - v125;
  char v143 = v119;
  if (v10)
  {
LABEL_15:
    long long v149 = v11;
    operator delete(v10);
    long long v11 = v149;
  }
LABEL_16:
  int v141 = DWORD1(v11);
  int v142 = v11;
  uint64_t v35 = (int64x2_t *)*((void *)this + 3);
  *((void *)this + 4) = v35;
  int v137 = HIDWORD(v11) - DWORD1(v11);
  int v139 = DWORD2(v11) - v11;
  if (HIDWORD(v11) - DWORD1(v11) >= -1 && DWORD2(v11) - (int)v11 >= -1)
  {
    double v84 = 1.0 / (double)(1 << v143);
    double v85 = (double)(int)v11;
    double v86 = (double)((1 << v143) + ~DWORD1(v11));
    int v87 = 0;
    do
    {
      int v88 = 0;
      int v89 = v87;
      float64x2_t v152 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v84 + (v86 - (double)v87) * v84), 0);
      do
      {
        double v90 = ((double)v88 + v85) * v84;
        float64x2_t v91 = vmlaq_f64(vmlaq_n_f64(*(float64x2_t *)((char *)a2 + 904), *(float64x2_t *)((char *)a2 + 808), v90), v152, *(float64x2_t *)((char *)a2 + 840));
        int64x2_t v92 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(*(float64x2_t *)((char *)a2 + 920), *(float64x2_t *)((char *)a2 + 824), v90), v152, *(float64x2_t *)((char *)a2 + 856));
        unint64_t v93 = *((void *)this + 5);
        if ((unint64_t)v35 < v93)
        {
          *uint64_t v35 = (int64x2_t)v91;
          v35[1] = v92;
          double v94 = -*(double *)&v92.i64[1];
          if (*(double *)v92.i64 > *(double *)&v92.i64[1]) {
            char v95 = 2;
          }
          else {
            char v95 = 0;
          }
          if (*(double *)v92.i64 < v94) {
            char v95 = 1;
          }
          char v96 = v95 | 8;
          if (v91.f64[0] <= *(double *)&v92.i64[1]) {
            char v96 = v95;
          }
          char v97 = v95 | 4;
          if (v91.f64[0] >= v94) {
            char v97 = v96;
          }
          if (v91.f64[1] >= v94)
          {
            if (v91.f64[1] > *(double *)&v92.i64[1]) {
              v97 |= 0x20u;
            }
          }
          else
          {
            v97 |= 0x10u;
          }
          v35[2].i8[0] = v97;
          if ((v97 & 1) == 0)
          {
            v103.i32[0] = *((unsigned __int16 *)a2 + 476);
            v103.i32[1] = *((unsigned __int16 *)a2 + 477);
            float32x2_t v104 = vcvt_f32_u32(v103);
            *(float32x2_t *)((char *)v35[2].i64 + 4) = vmul_f32(vmla_f32(v104, vcvt_f32_f64(vdivq_f64(v91, (float64x2_t)vdupq_laneq_s64(v92, 1))), v104), (float32x2_t)0x3F0000003F000000);
          }
          v35 += 3;
          goto LABEL_59;
        }
        double v98 = (int64x2_t *)*((void *)this + 3);
        unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * (v35 - v98) + 1;
        if (v99 > 0x555555555555555) {
          abort();
        }
        unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - (void)v98) >> 4);
        if (2 * v100 > v99) {
          unint64_t v99 = 2 * v100;
        }
        if (v100 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v101 = 0x555555555555555;
        }
        else {
          unint64_t v101 = v99;
        }
        if (v101)
        {
          int64x2_t v145 = v92;
          float64x2_t v148 = v91;
          if (v101 > 0x555555555555555) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v102 = (char *)operator new(48 * v101);
          int64x2_t v92 = v145;
          float64x2_t v91 = v148;
        }
        else
        {
          uint64_t v102 = 0;
        }
        uint64_t v105 = (int64x2_t *)&v102[16 * (v35 - v98)];
        *uint64_t v105 = (int64x2_t)v91;
        v105[1] = v92;
        double v106 = -*(double *)&v92.i64[1];
        if (*(double *)v92.i64 >= -*(double *)&v92.i64[1])
        {
          if (*(double *)v92.i64 <= *(double *)&v92.i64[1])
          {
            char v107 = 0;
            if (v91.f64[0] >= v106)
            {
LABEL_93:
              if (v91.f64[0] > *(double *)&v92.i64[1]) {
                v107 |= 8u;
              }
              goto LABEL_95;
            }
          }
          else
          {
            char v107 = 2;
            if (v91.f64[0] >= v106) {
              goto LABEL_93;
            }
          }
        }
        else
        {
          char v107 = 1;
          if (v91.f64[0] >= v106) {
            goto LABEL_93;
          }
        }
        v107 |= 4u;
LABEL_95:
        if (v91.f64[1] >= v106)
        {
          if (v91.f64[1] > *(double *)&v92.i64[1]) {
            v107 |= 0x20u;
          }
        }
        else
        {
          v107 |= 0x10u;
        }
        v105[2].i8[0] = v107;
        if ((v107 & 1) == 0)
        {
          v108.i32[0] = *((unsigned __int16 *)a2 + 476);
          v108.i32[1] = *((unsigned __int16 *)a2 + 477);
          float32x2_t v109 = vcvt_f32_u32(v108);
          *(float32x2_t *)&v102[16 * (v35 - v98) + 36] = vmul_f32(vmla_f32(v109, vcvt_f32_f64(vdivq_f64(v91, (float64x2_t)vdupq_laneq_s64(v92, 1))), v109), (float32x2_t)0x3F0000003F000000);
        }
        if (v35 == v98)
        {
          uint64_t v113 = v35;
          int8x16_t v110 = &v102[16 * (v35 - v98)];
        }
        else
        {
          int8x16_t v110 = &v102[16 * (v35 - v98)];
          do
          {
            int64x2_t v111 = v35[-3];
            int64x2_t v112 = v35[-1];
            *((int64x2_t *)v110 - 2) = v35[-2];
            *((int64x2_t *)v110 - 1) = v112;
            *((int64x2_t *)v110 - 3) = v111;
            v110 -= 48;
            v35 -= 3;
          }
          while (v35 != v98);
          uint64_t v113 = (int64x2_t *)*((void *)this + 3);
        }
        uint64_t v35 = v105 + 3;
        *((void *)this + 3) = v110;
        *((void *)this + 4) = v105 + 3;
        *((void *)this + 5) = &v102[48 * v101];
        if (v113) {
          operator delete(v113);
        }
LABEL_59:
        *((void *)this + 4) = v35;
        ++v88;
      }
      while (v88 != v139 + 2);
      int v87 = v89 + 1;
    }
    while (v89 + 1 != v137 + 2);
  }
  unsigned int v37 = *((_DWORD *)a2 + 238);
  WORD1(v162) = (int)((double)HIWORD(v37) * a3);
  LOWORD(v162) = (int)((double)(unsigned __int16)v37 * a3);
  if ((v137 & 0x80000000) == 0)
  {
    long long v38 = a4 ? v156 : 0;
    if ((v139 & 0x80000000) == 0)
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      unsigned int v41 = v139 + 2;
      uint64_t v138 = (v137 + 1);
      uint64_t v140 = (v139 + 1);
      uint64_t v42 = 48 * v41;
      do
      {
        int v43 = v142;
        int v44 = v141 + v40;
        uint64_t v146 = v40 + 1;
        uint64_t v150 = v39;
        uint64_t v45 = v140;
        do
        {
          LOBYTE(v153[0]) = -1;
          BYTE1(v153[0]) = v143;
          HIDWORD(v153[0]) = v44;
          LODWORD(v153[1]) = v43;
          gdc::FlatTileSelector::processTile((uint64_t)this, (uint64_t)a2, (unsigned __int16 *)&v162, (uint64_t)v153, *((void *)this + 3) + v39 + v42, *((void *)this + 3) + v39 + v42 + 48, *((void *)this + 3) + v39 + 48, *((void *)this + 3) + v39, (uint64_t)v159, (uint64_t)v38);
          v39 += 48;
          ++v43;
          --v45;
        }
        while (v45);
        uint64_t v39 = v150 + v42;
        uint64_t v40 = v146;
      }
      while (v146 != v138);
    }
  }
  if (a4)
  {
    *(_OWORD *)unint64_t v153 = 0u;
    long long v154 = 0u;
    int v155 = 1065353216;
    double v46 = (unsigned __int8 *)__p[0];
    if (__p[0])
    {
      do
      {
        if (!std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v159, v46 + 16))std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v153, v46 + 16, (uint64_t)(v46 + 16)); {
        double v46 = *(unsigned __int8 **)v46;
        }
      }
      while (v46);
    }
    if (__p[1])
    {
      unint64_t v47 = __p[0];
      if (__p[0])
      {
        do
        {
          int v48 = (void *)*v47;
          operator delete(v47);
          unint64_t v47 = v48;
        }
        while (v48);
      }
      __p[0] = 0;
      uint64_t v49 = (char *)v156[1];
      if (v156[1])
      {
        double v50 = 0;
        do
          *((void *)v156[0] + (void)v50++) = 0;
        while (v49 != v50);
      }
      __p[1] = 0;
    }
    double v51 = v153[0];
    v153[0] = 0;
    uint64_t v52 = v156[0];
    v156[0] = v51;
    if (v52) {
      operator delete(v52);
    }
    unint64_t v54 = (unint64_t)v153[1];
    double v53 = (void *)v154;
    v153[1] = 0;
    *(_OWORD *)std::string __p = v154;
    int v158 = v155;
    v156[1] = (void *)v54;
    if (*((void *)&v154 + 1))
    {
      unint64_t v55 = *(void *)(v154 + 8);
      if ((v54 & (v54 - 1)) != 0)
      {
        if (v55 >= v54) {
          v55 %= v54;
        }
      }
      else
      {
        v55 &= v54 - 1;
      }
      *((void *)v156[0] + v55) = __p;
      long long v154 = 0uLL;
    }
    else if ((void)v154)
    {
      do
      {
        uint64_t v114 = (void *)*v53;
        operator delete(v53);
        double v53 = v114;
      }
      while (v114);
    }
    __int32 v127 = v153[0];
    v153[0] = 0;
    if (v127) {
      operator delete(v127);
    }
  }
  int v128 = *((_DWORD *)this + 2);
  *a5 = v128;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a5 + 2), (uint64_t)v159);
  a5[12] = v128;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a5 + 14), (uint64_t)v156);
  uint64_t v129 = __p[0];
  if (__p[0])
  {
    do
    {
      char v130 = (void *)*v129;
      operator delete(v129);
      uint64_t v129 = v130;
    }
    while (v130);
  }
  uint64_t v131 = v156[0];
  v156[0] = 0;
  if (v131) {
    operator delete(v131);
  }
  uint64_t v132 = v160[0];
  if (v160[0])
  {
    do
    {
      double v133 = (void *)*v132;
      operator delete(v132);
      uint64_t v132 = v133;
    }
    while (v133);
  }
  uint64_t v134 = v159[0];
  v159[0] = 0;
  if (v134) {
    operator delete(v134);
  }
}

void gdc::FlatTileSelector::processTile(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a9) {
    return;
  }
  int v14 = *(unsigned __int8 *)(a5 + 32);
  int v15 = *(unsigned __int8 *)(a6 + 32);
  int v16 = *(unsigned __int8 *)(a7 + 32);
  int v17 = *(unsigned __int8 *)(a8 + 32);
  if ((v15 & v14 & v16 & v17) != 0) {
    return;
  }
  unsigned int v20 = *(unsigned __int8 *)(a4 + 1);
  if (v20 <= 0x18)
  {
    if (((v15 | v14 | v16 | v17) & 1) != 0
      || (float32x2_t v23 = *(float32x2_t *)(a8 + 36),
          float32x2_t v24 = *(float32x2_t *)(a5 + 36),
          float32x2_t v25 = vsub_f32(*(float32x2_t *)(a7 + 36), v24),
          float32x2_t v26 = (float32x2_t)vext_s8((int8x8_t)v23, *(int8x8_t *)(a6 + 36), 4uLL),
          v23.i32[1] = HIDWORD(*(void *)(a6 + 36)),
          double v27 = (double)(*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 8)),
          exp2(*(double *)(a1 + 16) * -2.0 + 1.98) * v27 < vaddv_f32(vabs_f32(vmul_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v25), vsub_f32(v24, v23)), vsub_f32(v26, (float32x2_t)vrev64_s32((int32x2_t)v24)), v25), (float32x2_t)0x3F0000003F000000)))))
    {
      float64x2_t v28 = *(float64x2_t *)a5;
      float64x2_t v29 = *(float64x2_t *)(a5 + 16);
      float64x2_t v31 = *(float64x2_t *)a6;
      float64x2_t v30 = *(float64x2_t *)(a6 + 16);
      float64x2_t v32 = vaddq_f64(*(float64x2_t *)a6, *(float64x2_t *)a5);
      __asm { FMOV            V5.2D, #0.5 }
      float64x2_t v38 = vmulq_f64(v32, _Q5);
      float64x2_t v39 = vaddq_f64(v30, v29);
      int64x2_t v40 = (int64x2_t)vmulq_f64(v39, _Q5);
      float64x2_t v137 = v38;
      int64x2_t v138 = v40;
      double v41 = -*(double *)&v40.i64[1];
      if (*(double *)v40.i64 < -*(double *)&v40.i64[1])
      {
        char v42 = 1;
        if (v38.f64[0] < v41) {
          goto LABEL_44;
        }
LABEL_41:
        if (v38.f64[0] > *(double *)&v40.i64[1]) {
          v42 |= 8u;
        }
LABEL_45:
        if (v38.f64[1] >= v41)
        {
          if (v38.f64[1] > *(double *)&v40.i64[1]) {
            v42 |= 0x20u;
          }
        }
        else
        {
          v42 |= 0x10u;
        }
        LOBYTE(v139) = v42;
        if ((v42 & 1) == 0)
        {
          float64x2_t v87 = vdivq_f64(v38, (float64x2_t)vdupq_laneq_s64(v40, 1));
          v88.i32[0] = *a3;
          v88.i32[1] = a3[1];
          float32x2_t v89 = vcvt_f32_u32(v88);
          *(float32x2_t *)((char *)&v139 + 4) = vmul_f32(vmla_f32(v89, vcvt_f32_f64(v87), v89), (float32x2_t)0x3F0000003F000000);
        }
        float64x2_t v91 = *(float64x2_t *)a7;
        float64x2_t v90 = *(float64x2_t *)(a7 + 16);
        float64x2_t v92 = vmulq_f64(vaddq_f64(*(float64x2_t *)a7, v31), _Q5);
        int64x2_t v93 = (int64x2_t)vmulq_f64(vaddq_f64(v90, v30), _Q5);
        v140[0] = v92;
        v140[1] = v93;
        double v94 = -*(double *)&v93.i64[1];
        if (*(double *)v93.i64 < -*(double *)&v93.i64[1])
        {
          char v95 = 1;
          if (v92.f64[0] < v94) {
            goto LABEL_59;
          }
LABEL_56:
          if (v92.f64[0] > *(double *)&v93.i64[1]) {
            v95 |= 8u;
          }
LABEL_60:
          if (v92.f64[1] >= v94)
          {
            if (v92.f64[1] > *(double *)&v93.i64[1]) {
              v95 |= 0x20u;
            }
          }
          else
          {
            v95 |= 0x10u;
          }
          char v141 = v95;
          if ((v95 & 1) == 0)
          {
            float64x2_t v96 = vdivq_f64(v92, (float64x2_t)vdupq_laneq_s64(v93, 1));
            v97.i32[0] = *a3;
            v97.i32[1] = a3[1];
            float32x2_t v98 = vcvt_f32_u32(v97);
            float32x2_t v142 = vmul_f32(vmla_f32(v98, vcvt_f32_f64(v96), v98), (float32x2_t)0x3F0000003F000000);
          }
          float64x2_t v100 = *(float64x2_t *)a8;
          float64x2_t v99 = *(float64x2_t *)(a8 + 16);
          float64x2_t v101 = vmulq_f64(vaddq_f64(*(float64x2_t *)a8, v91), _Q5);
          int64x2_t v102 = (int64x2_t)vmulq_f64(vaddq_f64(v99, v90), _Q5);
          v143[0] = v101;
          v143[1] = (float64x2_t)v102;
          double v103 = -*(double *)&v102.i64[1];
          if (*(double *)v102.i64 < -*(double *)&v102.i64[1])
          {
            char v104 = 1;
            if (v101.f64[0] < v103) {
              goto LABEL_74;
            }
LABEL_71:
            if (v101.f64[0] > *(double *)&v102.i64[1]) {
              v104 |= 8u;
            }
LABEL_75:
            if (v101.f64[1] >= v103)
            {
              if (v101.f64[1] > *(double *)&v102.i64[1]) {
                v104 |= 0x20u;
              }
            }
            else
            {
              v104 |= 0x10u;
            }
            char v144 = v104;
            if ((v104 & 1) == 0)
            {
              float64x2_t v105 = vdivq_f64(v101, (float64x2_t)vdupq_laneq_s64(v102, 1));
              v106.i32[0] = *a3;
              v106.i32[1] = a3[1];
              float32x2_t v107 = vcvt_f32_u32(v106);
              float32x2_t v145 = vmul_f32(vmla_f32(v107, vcvt_f32_f64(v105), v107), (float32x2_t)0x3F0000003F000000);
            }
            float64x2_t v108 = vmulq_f64(vaddq_f64(v28, v100), _Q5);
            int64x2_t v109 = (int64x2_t)vmulq_f64(vaddq_f64(v29, v99), _Q5);
            v146[0] = v108;
            v146[1] = v109;
            double v110 = -*(double *)&v109.i64[1];
            if (*(double *)v109.i64 < -*(double *)&v109.i64[1])
            {
              char v111 = 1;
              if (v108.f64[0] < v110) {
                goto LABEL_89;
              }
LABEL_86:
              if (v108.f64[0] > *(double *)&v109.i64[1]) {
                v111 |= 8u;
              }
              goto LABEL_90;
            }
            if (*(double *)v109.i64 <= *(double *)&v109.i64[1])
            {
              char v111 = 0;
              if (v108.f64[0] >= v110) {
                goto LABEL_86;
              }
            }
            else
            {
              char v111 = 2;
              if (v108.f64[0] >= v110) {
                goto LABEL_86;
              }
            }
LABEL_89:
            v111 |= 4u;
LABEL_90:
            if (v108.f64[1] >= v110)
            {
              if (v108.f64[1] > *(double *)&v109.i64[1]) {
                v111 |= 0x20u;
              }
            }
            else
            {
              v111 |= 0x10u;
            }
            char v147 = v111;
            if ((v111 & 1) == 0)
            {
              float64x2_t v112 = vdivq_f64(v108, (float64x2_t)vdupq_laneq_s64(v109, 1));
              v113.i32[0] = *a3;
              v113.i32[1] = a3[1];
              float32x2_t v114 = vcvt_f32_u32(v113);
              float32x2_t v148 = vmul_f32(vmla_f32(v114, vcvt_f32_f64(v112), v114), (float32x2_t)0x3F0000003F000000);
            }
            __asm { FMOV            V2.2D, #0.25 }
            float64x2_t v116 = vmulq_f64(vaddq_f64(vaddq_f64(v32, v91), v100), _Q2);
            int64x2_t v117 = (int64x2_t)vmulq_f64(vaddq_f64(vaddq_f64(v39, v90), v99), _Q2);
            v149[0] = v116;
            v149[1] = v117;
            double v118 = -*(double *)&v117.i64[1];
            if (*(double *)v117.i64 >= -*(double *)&v117.i64[1])
            {
              if (*(double *)v117.i64 <= *(double *)&v117.i64[1]) {
                char v119 = 0;
              }
              else {
                char v119 = 2;
              }
            }
            else
            {
              char v119 = 1;
            }
            if (v116.f64[0] >= v118)
            {
              if (v116.f64[0] > *(double *)&v117.i64[1]) {
                v119 |= 8u;
              }
            }
            else
            {
              v119 |= 4u;
            }
            if (v116.f64[1] >= v118)
            {
              if (v116.f64[1] > *(double *)&v117.i64[1]) {
                v119 |= 0x20u;
              }
            }
            else
            {
              v119 |= 0x10u;
            }
            char v150 = v119;
            if ((v119 & 1) == 0)
            {
              float64x2_t v120 = vdivq_f64(v116, (float64x2_t)vdupq_laneq_s64(v117, 1));
              v121.i32[0] = *a3;
              v121.i32[1] = a3[1];
              float32x2_t v122 = vcvt_f32_u32(v121);
              float32x2_t v151 = vmul_f32(vmla_f32(v122, vcvt_f32_f64(v120), v122), (float32x2_t)0x3F0000003F000000);
            }
            int v123 = *(_DWORD *)(a4 + 8);
            int v124 = (2 * *(_DWORD *)(a4 + 4)) | 1;
            char v134 = -1;
            char v135 = v20 + 1;
            LODWORD(v136) = v124;
            HIDWORD(v136) = 2 * v123;
            gdc::FlatTileSelector::processTile(a1, a2, a3, &v134, a5, &v137, v149, v146, a9, a10);
            char v125 = *(unsigned char *)(a4 + 1) + 1;
            char v134 = -1;
            char v135 = v125;
            uint64_t v136 = *(void *)&vadd_s32(*(int32x2_t *)(a4 + 4), *(int32x2_t *)(a4 + 4)) | 0x100000001;
            gdc::FlatTileSelector::processTile(a1, a2, a3, &v134, &v137, a6, v140, v149, a9, a10);
            char v126 = *(unsigned char *)(a4 + 1) + 1;
            int v127 = 2 * *(_DWORD *)(a4 + 4);
            int v128 = (2 * *(_DWORD *)(a4 + 8)) | 1;
            char v134 = -1;
            char v135 = v126;
            uint64_t v136 = __PAIR64__(v128, v127);
            gdc::FlatTileSelector::processTile(a1, a2, a3, &v134, v149, v140, a7, v143, a9, a10);
            char v129 = *(unsigned char *)(a4 + 1) + 1;
            char v134 = -1;
            char v135 = v129;
            uint64_t v136 = (uint64_t)vadd_s32(*(int32x2_t *)(a4 + 4), *(int32x2_t *)(a4 + 4));
            gdc::FlatTileSelector::processTile(a1, a2, a3, &v134, v146, v149, v143, a8, a9, a10);
            return;
          }
          if (*(double *)v102.i64 <= *(double *)&v102.i64[1])
          {
            char v104 = 0;
            if (v101.f64[0] >= v103) {
              goto LABEL_71;
            }
          }
          else
          {
            char v104 = 2;
            if (v101.f64[0] >= v103) {
              goto LABEL_71;
            }
          }
LABEL_74:
          v104 |= 4u;
          goto LABEL_75;
        }
        if (*(double *)v93.i64 <= *(double *)&v93.i64[1])
        {
          char v95 = 0;
          if (v92.f64[0] >= v94) {
            goto LABEL_56;
          }
        }
        else
        {
          char v95 = 2;
          if (v92.f64[0] >= v94) {
            goto LABEL_56;
          }
        }
LABEL_59:
        v95 |= 4u;
        goto LABEL_60;
      }
      if (*(double *)v40.i64 <= *(double *)&v40.i64[1])
      {
        char v42 = 0;
        if (v38.f64[0] >= v41) {
          goto LABEL_41;
        }
      }
      else
      {
        char v42 = 2;
        if (v38.f64[0] >= v41) {
          goto LABEL_41;
        }
      }
LABEL_44:
      v42 |= 4u;
      goto LABEL_45;
    }
  }
  double v43 = 1.0 / (double)(1 << v20);
  double v44 = v43 * (double)((1 << v20) + ~*(_DWORD *)(a4 + 4));
  double v45 = v43 * (double)*(int *)(a4 + 8) + v43;
  v137.f64[0] = v43 * (double)*(int *)(a4 + 8);
  v137.f64[1] = v44;
  v138.i64[0] = 0;
  *(double *)&v138.i64[1] = v45;
  *(double *)&long long v139 = v44 + v43;
  *((void *)&v139 + 1) = 0;
  if (geo::Intersect::encloses<double>((double *)(a2 + 984), v137.f64))
  {
    std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a9, (unsigned __int8 *)a4, a4);
    if (a10)
    {
      uint64_t v133 = a8;
      uint64_t v46 = *(unsigned __int8 *)(a4 + 1);
      int v47 = *(_DWORD *)(a4 + 4);
      int v48 = -1 << v46;
      if (-1 << v46 <= -2 - v47) {
        int v48 = -2 - v47;
      }
      if (v47 <= 1) {
        int v49 = 1;
      }
      else {
        int v49 = *(_DWORD *)(a4 + 4);
      }
      int v132 = ~v48;
      uint64_t v131 = ~v48 - 0x61C8864680B583EBLL;
      if (*(unsigned char *)(a5 + 32))
      {
        int v130 = v49;
        uint64_t v50 = *(int *)(a4 + 8);
        double v51 = operator new(0x28uLL);
        v51[16] = -1;
        v51[17] = v46;
        *((_DWORD *)v51 + 5) = v47;
        *((_DWORD *)v51 + 6) = v50 - 1;
        unint64_t v52 = (v47
             - 0x61C8864680B583EBLL
             + (((v46 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v46 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v46 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(void *)double v51 = 0;
        *((void *)v51 + 1) = ((v52 << 6) - 0x61C8864680B583EBLL + (v52 >> 2) + v50 - 1) ^ v52;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v51) & 1) == 0)operator delete(v51); {
        double v53 = operator new(0x28uLL);
        }
        uint64_t v54 = *(unsigned __int8 *)(a4 + 1);
        uint64_t v55 = *(int *)(a4 + 8);
        unsigned char v53[16] = -1;
        v53[17] = v54;
        *((_DWORD *)v53 + 5) = v132;
        *((_DWORD *)v53 + 6) = v55;
        unint64_t v56 = (v131
             + (((v54 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v54 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v54 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(void *)double v53 = 0;
        *((void *)v53 + 1) = (v55 - 0x61C8864680B583EBLL + (v56 << 6) + (v56 >> 2)) ^ v56;
        int v49 = v130;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v53) & 1) == 0)operator delete(v53); {
      }
        }
      unsigned int v57 = v49 - 1;
      if (*(unsigned char *)(a6 + 32))
      {
        uint64_t v58 = *(int *)(a4 + 8);
        double v59 = operator new(0x28uLL);
        uint64_t v60 = *(unsigned __int8 *)(a4 + 1);
        uint64_t v61 = *(int *)(a4 + 4);
        unsigned char v59[16] = -1;
        v59[17] = v60;
        *((_DWORD *)v59 + 5) = v61;
        *((_DWORD *)v59 + 6) = v58 + 1;
        unint64_t v62 = (v61
             - 0x61C8864680B583EBLL
             + (((v60 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v60 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v60 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(void *)double v59 = 0;
        *((void *)v59 + 1) = (v58 - 0x61C8864680B583EBLL + (v62 << 6) + (v62 >> 2) + 1) ^ v62;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v59) & 1) == 0)operator delete(v59); {
        double v63 = operator new(0x28uLL);
        }
        uint64_t v64 = *(unsigned __int8 *)(a4 + 1);
        uint64_t v65 = *(int *)(a4 + 8);
        v63[16] = -1;
        v63[17] = v64;
        *((_DWORD *)v63 + 5) = v132;
        *((_DWORD *)v63 + 6) = v65;
        unint64_t v66 = (v131
             + (((v64 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v64 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v64 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(void *)double v63 = 0;
        *((void *)v63 + 1) = (v65 - 0x61C8864680B583EBLL + (v66 << 6) + (v66 >> 2)) ^ v66;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v63) & 1) == 0)operator delete(v63); {
      }
        }
      int v67 = *(unsigned __int8 *)(a7 + 32);
      uint64_t v68 = v57 - 0x61C8864680B583EBLL;
      if (v67)
      {
        uint64_t v69 = *(int *)(a4 + 8);
        double v70 = operator new(0x28uLL);
        uint64_t v71 = *(unsigned __int8 *)(a4 + 1);
        uint64_t v72 = *(int *)(a4 + 4);
        v70[16] = -1;
        v70[17] = v71;
        *((_DWORD *)v70 + 5) = v72;
        *((_DWORD *)v70 + 6) = v69 + 1;
        unint64_t v73 = (v72
             - 0x61C8864680B583EBLL
             + (((v71 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v71 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v71 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(void *)double v70 = 0;
        *((void *)v70 + 1) = (v69 - 0x61C8864680B583EBLL + (v73 << 6) + (v73 >> 2) + 1) ^ v73;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v70) & 1) == 0)operator delete(v70); {
        double v74 = operator new(0x28uLL);
        }
        uint64_t v75 = *(unsigned __int8 *)(a4 + 1);
        uint64_t v76 = *(int *)(a4 + 8);
        v74[16] = -1;
        v74[17] = v75;
        *((_DWORD *)v74 + 5) = v57;
        *((_DWORD *)v74 + 6) = v76;
        unint64_t v77 = (v68
             + (((v75 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v75 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v75 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(void *)double v74 = 0;
        *((void *)v74 + 1) = (v76 - 0x61C8864680B583EBLL + (v77 << 6) + (v77 >> 2)) ^ v77;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v74) & 1) == 0)operator delete(v74); {
      }
        }
      if (*(unsigned char *)(v133 + 32))
      {
        uint64_t v78 = *(int *)(a4 + 8);
        double v79 = operator new(0x28uLL);
        uint64_t v80 = *(unsigned __int8 *)(a4 + 1);
        uint64_t v81 = *(int *)(a4 + 4);
        v79[16] = -1;
        v79[17] = v80;
        *((_DWORD *)v79 + 5) = v81;
        *((_DWORD *)v79 + 6) = v78 - 1;
        unint64_t v82 = (v81
             - 0x61C8864680B583EBLL
             + (((v80 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v80 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v80 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(void *)double v79 = 0;
        *((void *)v79 + 1) = (v78 - 0x61C8864680B583EBLL + (v82 << 6) + (v82 >> 2) - 1) ^ v82;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v79) & 1) == 0)operator delete(v79); {
        double v83 = operator new(0x28uLL);
        }
        uint64_t v84 = *(unsigned __int8 *)(a4 + 1);
        uint64_t v85 = *(int *)(a4 + 8);
        unsigned char v83[16] = -1;
        v83[17] = v84;
        *((_DWORD *)v83 + 5) = v57;
        *((_DWORD *)v83 + 6) = v85;
        unint64_t v86 = (v68
             + (((v84 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v84 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v84 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(void *)double v83 = 0;
        *((void *)v83 + 1) = (v85 - 0x61C8864680B583EBLL + (v86 << 6) + (v86 >> 2)) ^ v86;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v83) & 1) == 0)
        {
          operator delete(v83);
        }
      }
    }
  }
}

void gdc::FlatTileSelector::~FlatTileSelector(gdc::FlatTileSelector *this)
{
  *(void *)this = &unk_1EF555130;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF555130;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void gdc::LayerDataStore::remove(void *a1, unsigned __int8 *a2)
{
  int v3 = a1 + 3;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(a1 + 3, a2);
  if (v4)
  {
    double v5 = v4;
    int v6 = v4[16];
    unint64_t v7 = v6[18];
    float64x2_t v9 = (uint64_t *)a1[8];
    unint64_t v8 = a1[9];
    BOOL v10 = v8 >= v7;
    unint64_t v11 = v8 - v7;
    if (!v10) {
      unint64_t v11 = 0;
    }
    a1[9] = v11;
    if (v9 == v6) {
      a1[8] = v6[1];
    }
    unint64_t v12 = v4[16];
    uint64_t v13 = *v12;
    *(void *)(v13 + 8) = v12[1];
    *(void *)v12[1] = v13;
    --a1[2];
    int v14 = (std::__shared_weak_count *)v12[17];
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    if (*((unsigned char *)v12 + 112)) {
      *((unsigned char *)v12 + 112) = 0;
    }
    int v15 = (void *)v12[4];
    if (v15 != (void *)v12[6]) {
      free(v15);
    }
    operator delete(v12);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3, v5);
    int v16 = __p;
    if (__p)
    {
      if (v19)
      {
        if (*((unsigned char *)__p + 112)) {
          *((unsigned char *)__p + 112) = 0;
        }
        int v17 = (void *)v16[4];
        if (v17 != (void *)v16[6]) {
          free(v17);
        }
      }
      operator delete(v16);
    }
  }
}

char *std::vector<gdc::LayerDataRequestKeyPair>::__push_back_slow_path<gdc::LayerDataRequestKeyPair>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222) {
    abort();
  }
  if (0xDDDDDDDDDDDDDDDELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0xDDDDDDDDDDDDDDDELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = operator new(120 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = (char *)&v7[30 * v2];
  *(void *)unint64_t v8 = *(void *)a2;
  v8[8] = *(unsigned char *)(a2 + 8);
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v8 + 16), a2 + 16);
  v8[104] = 0;
  if (*(unsigned char *)(a2 + 104))
  {
    v7[30 * v2 + 27] = *(_DWORD *)(a2 + 108);
    v8[104] = 1;
  }
  float64x2_t v9 = (char *)&v7[30 * v6];
  *(void *)&v7[30 * v2 + 28] = *(void *)(a2 + 112);
  BOOL v10 = v8 + 120;
  unint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      int v14 = &v8[v13];
      int v15 = &v11[v13];
      *((void *)v14 - 15) = *(void *)&v11[v13 - 120];
      *(v14 - 112) = v11[v13 - 112];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v13 - 104], (uint64_t)&v11[v13 - 104]);
      *(v14 - 16) = 0;
      if (v11[v13 - 16])
      {
        *((_DWORD *)v14 - 3) = *((_DWORD *)v15 - 3);
        *(v14 - 16) = 1;
      }
      *((void *)v14 - 1) = *((void *)v15 - 1);
      v13 -= 120;
    }
    while (&v11[v13] != v12);
    int v16 = &v8[v13];
    unint64_t v11 = (char *)*a1;
    int v17 = (char *)a1[1];
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v9;
    while (v17 != v11)
    {
      if (*(v17 - 16)) {
        *(v17 - 16) = 0;
      }
      unint64_t v18 = (void *)*((void *)v17 - 12);
      if (v18 != *((void **)v17 - 10)) {
        free(v18);
      }
      v17 -= 120;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

void gdc::LayerDataStore::pending(gdc::LayerDataStore *this, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a2 + 80);
  std::mutex::lock((std::mutex *)(a2 + 80));
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  unint64_t v5 = *(void *)(a2 + 168);
  if (v5)
  {
    if (v5 >> 57) {
LABEL_61:
    }
      abort();
    uint64_t v6 = v5 << 7;
    unint64_t v7 = (char *)operator new(v5 << 7);
    *(void *)this = v7;
    *((void *)this + 1) = v7;
    *((void *)this + 2) = &v7[v6];
  }
  double v33 = v4;
  for (uint64_t i = *(uint64_t **)(a2 + 160); i; uint64_t i = (uint64_t *)*i)
  {
    char v35 = *((unsigned char *)i + 16);
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v36, (uint64_t)(i + 3));
    char v39 = 0;
    if (*((unsigned char *)i + 112))
    {
      int v40 = *((_DWORD *)i + 29);
      char v39 = 1;
    }
    uint64_t v9 = i[16];
    uint64_t v41 = i[15];
    uint64_t v42 = v9;
    BOOL v10 = (std::__shared_weak_count *)i[17];
    double v43 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v12 = *((void *)this + 1);
    unint64_t v11 = *((void *)this + 2);
    if (v12 >= v11)
    {
      uint64_t v15 = (uint64_t)(v12 - *(void *)this) >> 7;
      if ((unint64_t)(v15 + 1) >> 57) {
        goto LABEL_61;
      }
      uint64_t v16 = v11 - *(void *)this;
      uint64_t v17 = v16 >> 6;
      if (v16 >> 6 <= (unint64_t)(v15 + 1)) {
        uint64_t v17 = v15 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        if (v18 >> 57) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        char v19 = (char *)operator new(v18 << 7);
      }
      else
      {
        char v19 = 0;
      }
      unsigned int v20 = &v19[128 * v15];
      char *v20 = v35;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v20 + 8), (uint64_t)&v36);
      v20[96] = 0;
      if (v39)
      {
        *((_DWORD *)v20 + 25) = v40;
        v20[96] = 1;
      }
      uint64_t v21 = v42;
      *((void *)v20 + 13) = v41;
      *((void *)v20 + 14) = v21;
      float64x2_t v22 = v43;
      *((void *)v20 + 15) = v43;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float32x2_t v23 = &v19[128 * v18];
      int v14 = v20 + 128;
      float32x2_t v25 = *(char **)this;
      float32x2_t v24 = (char *)*((void *)this + 1);
      if (v24 != *(char **)this)
      {
        double v34 = v23;
        uint64_t v26 = 0;
        do
        {
          double v27 = &v20[v26];
          float64x2_t v28 = &v24[v26];
          v20[v26 - 128] = v24[v26 - 128];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v20[v26 - 120], (uint64_t)&v24[v26 - 120]);
          v20[v26 - 32] = 0;
          if (v24[v26 - 32])
          {
            *((_DWORD *)v27 - 7) = *((_DWORD *)v28 - 7);
            *(v27 - 32) = 1;
          }
          *((void *)v27 - 3) = *((void *)v28 - 3);
          *((_OWORD *)v27 - 1) = *((_OWORD *)v28 - 1);
          *((void *)v28 - 2) = 0;
          *((void *)v28 - 1) = 0;
          v26 -= 128;
        }
        while (&v24[v26] != v25);
        float32x2_t v24 = *(char **)this;
        float64x2_t v29 = (char *)*((void *)this + 1);
        *(void *)this = &v20[v26];
        *((void *)this + 1) = v14;
        *((void *)this + 2) = v34;
        if (v29 == v24)
        {
          if (!v24) {
            goto LABEL_50;
          }
LABEL_49:
          operator delete(v24);
          goto LABEL_50;
        }
        while (2)
        {
          float64x2_t v30 = (std::__shared_weak_count *)*((void *)v29 - 1);
          if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
            if (*(v29 - 32)) {
LABEL_42:
            }
              *(v29 - 32) = 0;
          }
          else if (*(v29 - 32))
          {
            goto LABEL_42;
          }
          float64x2_t v31 = (void *)*((void *)v29 - 14);
          if (v31 != *((void **)v29 - 12)) {
            free(v31);
          }
          v29 -= 128;
          if (v29 == v24) {
            goto LABEL_48;
          }
          continue;
        }
      }
      *(void *)this = v20;
      *((void *)this + 2) = v23;
LABEL_48:
      if (v24) {
        goto LABEL_49;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v12 = v35;
      gdc::LayerDataKey::LayerDataKey(v12 + 8, (uint64_t)&v36);
      *(unsigned char *)(v12 + 96) = 0;
      if (v39)
      {
        *(_DWORD *)(v12 + 100) = v40;
        *(unsigned char *)(v12 + 96) = 1;
      }
      *(void *)(v12 + 104) = v41;
      *(void *)(v12 + 112) = v42;
      uint64_t v13 = v43;
      *(void *)(v12 + 120) = v43;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = (char *)(v12 + 128);
    }
LABEL_50:
    *((void *)this + 1) = v14;
    float64x2_t v32 = v43;
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v39) {
        goto LABEL_54;
      }
LABEL_53:
      char v39 = 0;
      goto LABEL_54;
    }
    if (v39) {
      goto LABEL_53;
    }
LABEL_54:
    if (v37 != v38) {
      free(v37);
    }
  }
  std::mutex::unlock(v33);
}

void gdc::ResourceStore::erase(int8x8_t *this, const gdc::ResourceKey *a2)
{
  int8x8_t v4 = this[34];
  if (v4)
  {
    unint64_t v5 = this + 33;
    uint64_t v6 = *(unsigned __int8 *)a2;
    uint64_t v7 = *((unsigned __int16 *)a2 + 1);
    unint64_t v8 = (v7
        + ((v6 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
        - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
    uint64_t v9 = (uint64_t *)*((void *)a2 + 9);
    unint64_t v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v4);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v12 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
      if (v10 >= *(void *)&v4) {
        uint64_t v12 = v10 % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v12 = v10 & (*(void *)&v4 - 1);
    }
    uint64_t v13 = *(uint64_t ****)(*(void *)v5 + 8 * v12);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        uint64_t v15 = (const void *)*((void *)a2 + 1);
        size_t v16 = *((void *)a2 + 2) - (void)v15;
        if (v11.u32[0] < 2uLL)
        {
          uint64_t v17 = *(void *)&v4 - 1;
          while (1)
          {
            float32x2_t v23 = v14[1];
            if (v23 == (uint64_t *)v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == v6
                && *((unsigned __int16 *)v14 + 9) == v7
                && v14[11] == v9)
              {
                float32x2_t v24 = v14[3];
                if ((char *)v14[4] - (char *)v24 == v16)
                {
                  int v47 = v5;
                  int v49 = v15;
                  float32x2_t v25 = v15;
                  size_t v26 = v16;
                  int v27 = memcmp(v24, v25, v16);
                  size_t v16 = v26;
                  unint64_t v5 = v47;
                  uint64_t v15 = v49;
                  if (!v27) {
                    goto LABEL_29;
                  }
                }
              }
            }
            else if (((unint64_t)v23 & v17) != v12)
            {
              goto LABEL_36;
            }
            int v14 = (uint64_t **)*v14;
            if (!v14) {
              goto LABEL_36;
            }
          }
        }
        do
        {
          unint64_t v18 = (unint64_t)v14[1];
          if (v18 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == v6
              && *((unsigned __int16 *)v14 + 9) == v7
              && v14[11] == v9)
            {
              char v19 = v14[3];
              if ((char *)v14[4] - (char *)v19 == v16)
              {
                uint64_t v46 = v5;
                int v48 = v15;
                unsigned int v20 = v15;
                size_t v21 = v16;
                int v22 = memcmp(v19, v20, v16);
                size_t v16 = v21;
                unint64_t v5 = v46;
                uint64_t v15 = v48;
                if (!v22)
                {
LABEL_29:
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v5, v14);
                  float64x2_t v28 = __p[0];
                  if (__p[0])
                  {
                    if (v51)
                    {
                      float64x2_t v29 = (std::__shared_weak_count *)*((void *)__p[0] + 15);
                      if (v29) {
                        std::__shared_weak_count::__release_weak(v29);
                      }
                      float64x2_t v30 = (void *)v28[3];
                      if (v30 != (void *)v28[5]) {
                        free(v30);
                      }
                    }
                    operator delete(v28);
                  }
                  break;
                }
              }
            }
          }
          else
          {
            if (v18 >= *(void *)&v4) {
              v18 %= *(void *)&v4;
            }
            if (v18 != v12) {
              break;
            }
          }
          int v14 = (uint64_t **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_36:
  float64x2_t v31 = this + 46;
  float64x2_t v32 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(&this[46], (unsigned __int8 *)a2);
  if (v32)
  {
    double v33 = v32;
    double v34 = v32[14];
    unint64_t v35 = v34[16];
    unsigned int v37 = (uint64_t *)this[51];
    int8x8_t v36 = this[52];
    BOOL v38 = *(void *)&v36 >= v35;
    int8x8_t v39 = (int8x8_t)(*(void *)&v36 - v35);
    if (!v38) {
      int8x8_t v39 = 0;
    }
    this[52] = v39;
    if (v37 == v34) {
      this[51] = (int8x8_t)v34[1];
    }
    int v40 = v32[14];
    uint64_t v41 = *v40;
    *(void *)(v41 + 8) = v40[1];
    *(void *)v40[1] = v41;
    --*(void *)&this[45];
    uint64_t v42 = (std::__shared_weak_count *)v40[15];
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    double v43 = (void *)v40[3];
    if (v43 != (void *)v40[5]) {
      free(v43);
    }
    operator delete(v40);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v31, v33);
    double v44 = __p[0];
    if (__p[0])
    {
      if (v51)
      {
        double v45 = (void *)*((void *)__p[0] + 3);
        if (v45 != *((void **)__p[0] + 5)) {
          free(v45);
        }
      }
      operator delete(v44);
    }
  }
}

void std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::Error>>>::clear(void *a1)
{
  if (!a1[3]) {
    return;
  }
  unint64_t v2 = (void **)a1[2];
  if (v2)
  {
    do
    {
      unint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 167) < 0)
      {
        operator delete(v2[18]);
        if (*((char *)v2 + 143) < 0) {
LABEL_14:
        }
          operator delete(v2[15]);
      }
      else if (*((char *)v2 + 143) < 0)
      {
        goto LABEL_14;
      }
      uint64_t v6 = v2[3];
      if (v6 != v2[5]) {
        free(v6);
      }
      operator delete(v2);
      unint64_t v2 = v5;
    }
    while (v5);
  }
  a1[2] = 0;
  uint64_t v3 = a1[1];
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      *(void *)(*a1 + 8 * i) = 0;
  }
  a1[3] = 0;
}

uint64_t std::pair<gdc::ResourceKey const,gdc::Error>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v4 = (char *)(a1 + 40);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = 32;
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = *(char **)(a2 + 16);
  unint64_t v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40) {
      size_t v8 = 64;
    }
    else {
      size_t v8 = v6 - v5;
    }
    int8x8_t v4 = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    uint64_t v9 = *(char **)(a1 + 8);
    unint64_t v10 = *(char **)(a1 + 16);
    if (v9 == v10) {
      goto LABEL_21;
    }
    unint64_t v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      uint64_t v12 = v4;
      goto LABEL_20;
    }
    uint64_t v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20) {
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      int v14 = (long long *)(v9 + 16);
      uint64_t v15 = v4 + 16;
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        _OWORD *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13) {
        goto LABEL_21;
      }
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        uint64_t v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    unsigned int v20 = (uint64_t *)&v9[v13];
    size_t v21 = &v4[v13];
    do
    {
      uint64_t v22 = *v20++;
      *(void *)size_t v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18) {
      goto LABEL_21;
    }
    v9 += v18;
    do
    {
LABEL_20:
      char v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 32) = v8;
  }
  if (v5 == v6) {
    goto LABEL_40;
  }
  if (v7 < 8)
  {
    float32x2_t v25 = v4;
    goto LABEL_38;
  }
  if ((unint64_t)(v4 - v5) < 0x20)
  {
    float32x2_t v25 = v4;
    goto LABEL_38;
  }
  if (v7 >= 0x20)
  {
    unint64_t v24 = v7 & 0xFFFFFFFFFFFFFFE0;
    size_t v26 = (long long *)(v5 + 16);
    int v27 = v4 + 16;
    unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *int v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 32;
    }
    while (v28);
    if (v7 == v24) {
      goto LABEL_39;
    }
    if ((v7 & 0x18) == 0)
    {
      v5 += v24;
      float32x2_t v25 = &v4[v24];
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v24 = 0;
  }
  unint64_t v30 = v7 & 0xFFFFFFFFFFFFFFF8;
  float32x2_t v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
  float64x2_t v32 = (uint64_t *)&v5[v24];
  double v33 = &v4[v24];
  do
  {
    uint64_t v34 = *v32++;
    *(void *)double v33 = v34;
    v33 += 8;
    v31 += 8;
  }
  while (v31);
  if (v7 == v30) {
    goto LABEL_39;
  }
  v5 += v30;
  do
  {
LABEL_38:
    char v35 = *v5++;
    *v25++ = v35;
  }
  while (v5 != v6);
LABEL_39:
  int8x8_t v4 = *(char **)(a1 + 16);
LABEL_40:
  *(void *)(a1 + 16) = &v4[v7];
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  int8x8_t v36 = (std::string *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v37 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
  }
  BOOL v38 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v39 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
  }
  return a1;
}

void gdc::ResourceStore::clearAllResources(gdc::ResourceStore *this)
{
  long long v36 = 0u;
  long long v37 = 0u;
  int v38 = 1065353216;
  float v2 = (float)(unint64_t)(*((void *)this + 41) + *((void *)this + 49));
  size_t prime = (unint64_t)v2;
  if ((unint64_t)v2 == 1)
  {
    size_t prime = 2;
LABEL_6:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v36, prime);
    goto LABEL_7;
  }
  if ((prime & ((unint64_t)v2 - 1)) != 0) {
    size_t prime = std::__next_prime((unint64_t)v2);
  }
  if (prime) {
    goto LABEL_6;
  }
LABEL_7:
  int8x8_t v4 = (char *)this + 344;
  for (uint64_t i = (void *)*((void *)this + 40); i; uint64_t i = (void *)*i)
  {
    std::pair<gdc::ResourceKey const,gdc::Error>::pair[abi:nn180100]((uint64_t)v29, (uint64_t)(i + 2));
    std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)&v36, v29, (uint64_t)v29);
    if (v35 < 0)
    {
      operator delete(__p);
      if (v33 < 0) {
LABEL_25:
      }
        operator delete(v32);
    }
    else if (v33 < 0)
    {
      goto LABEL_25;
    }
    if (v30 != v31) {
      free(v30);
    }
  }
  for (uint64_t j = *((void *)this + 44); (char *)j != v4; uint64_t j = *(void *)(j + 8))
    std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)&v36, (unsigned __int8 *)(j + 16), j + 16);
  if (*((void *)this + 36))
  {
    unint64_t v7 = (void *)*((void *)this + 35);
    if (v7)
    {
      do
      {
        unint64_t v13 = (void *)*v7;
        int v14 = (std::__shared_weak_count *)v7[15];
        if (v14) {
          std::__shared_weak_count::__release_weak(v14);
        }
        uint64_t v15 = (void *)v7[3];
        if (v15 != (void *)v7[5]) {
          free(v15);
        }
        operator delete(v7);
        unint64_t v7 = v13;
      }
      while (v13);
    }
    *((void *)this + 35) = 0;
    uint64_t v8 = *((void *)this + 34);
    if (v8)
    {
      for (uint64_t k = 0; k != v8; ++k)
        *(void *)(*((void *)this + 33) + 8 * k) = 0;
    }
    *((void *)this + 36) = 0;
  }
  if (*((void *)this + 45))
  {
    uint64_t v10 = *((void *)this + 43);
    unint64_t v11 = (char *)*((void *)this + 44);
    uint64_t v12 = *(void *)v11;
    *(void *)(v12 + 8) = *(void *)(v10 + 8);
    **(void **)(v10 + 8) = v12;
    *((void *)this + 45) = 0;
    if (v11 != v4)
    {
      do
      {
        unint64_t v16 = (char *)*((void *)v11 + 1);
        long long v17 = (std::__shared_weak_count *)*((void *)v11 + 15);
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        unint64_t v18 = (void *)*((void *)v11 + 3);
        if (v18 != *((void **)v11 + 5)) {
          free(v18);
        }
        operator delete(v11);
        unint64_t v11 = v16;
      }
      while (v16 != v4);
    }
  }
  if (*((void *)this + 49))
  {
    unint64_t v19 = (void *)*((void *)this + 48);
    if (v19)
    {
      do
      {
        int v27 = (void *)*v19;
        unint64_t v28 = (void *)v19[3];
        if (v28 != (void *)v19[5]) {
          free(v28);
        }
        operator delete(v19);
        unint64_t v19 = v27;
      }
      while (v27);
    }
    *((void *)this + 48) = 0;
    uint64_t v20 = *((void *)this + 47);
    if (v20)
    {
      for (uint64_t m = 0; m != v20; ++m)
        *(void *)(*((void *)this + 46) + 8 * m) = 0;
    }
    *((void *)this + 49) = 0;
  }
  *((void *)this + 51) = v4;
  *((void *)this + 52) = 0;
  std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::Error>>>::clear((void *)this + 38);
  uint64_t v22 = *((void *)this + 11);
  if (v22) {
    (*(void (**)(uint64_t, long long *))(*(void *)v22 + 48))(v22, &v36);
  }
  char v23 = (void *)v37;
  if ((void)v37)
  {
    do
    {
      float32x2_t v25 = (void *)*v23;
      size_t v26 = (void *)v23[3];
      if (v26 != (void *)v23[5]) {
        free(v26);
      }
      operator delete(v23);
      char v23 = v25;
    }
    while (v25);
  }
  unint64_t v24 = (void *)v36;
  *(void *)&long long v36 = 0;
  if (v24) {
    operator delete(v24);
  }
}

void gdc::ResourceStore::clearResources(void *a1, uint64_t a2)
{
  int8x8_t v4 = (unsigned __int8 *)a1[35];
  if (!v4)
  {
LABEL_29:
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)int v47 = 0u;
    int v48 = 1065353216;
    unint64_t v24 = (char *)a1[40];
    if (!v24)
    {
LABEL_71:
      long long v39 = v47[0];
      if (v47[0])
      {
        do
        {
          uint64_t v41 = (void *)*v39;
          uint64_t v42 = (void *)v39[3];
          if (v42 != (void *)v39[5]) {
            free(v42);
          }
          operator delete(v39);
          long long v39 = v41;
        }
        while (v41);
      }
      int v40 = __p[0];
      __p[0] = 0;
      if (v40) {
        operator delete(v40);
      }
      return;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v25 = *(void *)(a2 + 24);
        if (!v25) {
          goto LABEL_78;
        }
        if ((*(unsigned int (**)(uint64_t, char *))(*(void *)v25 + 48))(v25, v24 + 16)) {
          break;
        }
        unint64_t v24 = *(char **)v24;
        if (!v24) {
          goto LABEL_68;
        }
      }
      std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)__p, (unsigned __int8 *)v24 + 16, (uint64_t)(v24 + 16));
      int8x8_t v26 = (int8x8_t)a1[39];
      unint64_t v27 = *((void *)v24 + 1);
      uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        if (v27 >= *(void *)&v26) {
          v27 %= *(void *)&v26;
        }
      }
      else
      {
        v27 &= *(void *)&v26 - 1;
      }
      long long v29 = *(char **)v24;
      uint64_t v30 = a1[38];
      unint64_t v31 = *(char **)(v30 + 8 * v27);
      do
      {
        float64x2_t v32 = v31;
        unint64_t v31 = *(char **)v31;
      }
      while (v31 != v24);
      if (v32 != (char *)(a1 + 40))
      {
        unint64_t v33 = *((void *)v32 + 1);
        if (v28.u32[0] > 1uLL)
        {
          if (v33 >= *(void *)&v26) {
            v33 %= *(void *)&v26;
          }
        }
        else
        {
          v33 &= *(void *)&v26 - 1;
        }
        uint64_t v34 = *(void *)v24;
        if (v33 == v27) {
          goto LABEL_53;
        }
      }
      if (!v29) {
        break;
      }
      unint64_t v35 = *((void *)v29 + 1);
      if (v28.u32[0] > 1uLL)
      {
        if (v35 >= *(void *)&v26) {
          v35 %= *(void *)&v26;
        }
      }
      else
      {
        v35 &= *(void *)&v26 - 1;
      }
      uint64_t v34 = *(void *)v24;
      if (v35 != v27) {
        break;
      }
LABEL_54:
      unint64_t v36 = *(void *)(v34 + 8);
      if (v28.u32[0] > 1uLL)
      {
        if (v36 >= *(void *)&v26) {
          v36 %= *(void *)&v26;
        }
      }
      else
      {
        v36 &= *(void *)&v26 - 1;
      }
      if (v36 != v27)
      {
        *(void *)(a1[38] + 8 * v36) = v32;
        uint64_t v34 = *(void *)v24;
      }
LABEL_60:
      *(void *)float64x2_t v32 = v34;
      *(void *)unint64_t v24 = 0;
      --a1[41];
      if (v24[167] < 0)
      {
        operator delete(*((void **)v24 + 18));
        if (v24[143] < 0) {
LABEL_67:
        }
          operator delete(*((void **)v24 + 15));
      }
      else if (v24[143] < 0)
      {
        goto LABEL_67;
      }
      long long v37 = (void *)*((void *)v24 + 3);
      if (v37 != *((void **)v24 + 5)) {
        free(v37);
      }
      operator delete(v24);
      unint64_t v24 = v29;
      if (!v29)
      {
LABEL_68:
        uint64_t v38 = a1[11];
        if (v38 && v47[1]) {
          (*(void (**)(uint64_t, void **))(*(void *)v38 + 48))(v38, __p);
        }
        goto LABEL_71;
      }
    }
    *(void *)(v30 + 8 * v27) = 0;
    uint64_t v34 = *(void *)v24;
LABEL_53:
    if (!v34) {
      goto LABEL_60;
    }
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5) {
      break;
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, (uint64_t *)v4 + 2))
    {
      uint64_t v6 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(a1 + 46, v4 + 16);
      if (v6)
      {
        unint64_t v7 = v6;
        uint64_t v8 = v6[14];
        unint64_t v9 = v8[16];
        unint64_t v11 = (uint64_t *)a1[51];
        unint64_t v10 = a1[52];
        BOOL v12 = v10 >= v9;
        unint64_t v13 = v10 - v9;
        if (!v12) {
          unint64_t v13 = 0;
        }
        a1[52] = v13;
        if (v11 == v8) {
          a1[51] = v8[1];
        }
        int v14 = v6[14];
        uint64_t v15 = *v14;
        *(void *)(v15 + 8) = v14[1];
        *(void *)v14[1] = v15;
        --a1[45];
        unint64_t v16 = (std::__shared_weak_count *)v14[15];
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        long long v17 = (void *)v14[3];
        if (v17 != (void *)v14[5]) {
          free(v17);
        }
        operator delete(v14);
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 46, v7);
        unint64_t v18 = __p[0];
        if (__p[0])
        {
          if (LOBYTE(v47[0]))
          {
            unint64_t v19 = (void *)*((void *)__p[0] + 3);
            if (v19 != *((void **)__p[0] + 5)) {
              free(v19);
            }
          }
          operator delete(v18);
        }
      }
      uint64_t v20 = *(unsigned __int8 **)v4;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 33, v4);
      size_t v21 = __p[0];
      if (__p[0])
      {
        if (LOBYTE(v47[0]))
        {
          uint64_t v22 = (std::__shared_weak_count *)*((void *)__p[0] + 15);
          if (v22) {
            std::__shared_weak_count::__release_weak(v22);
          }
          char v23 = (void *)v21[3];
          if (v23 != (void *)v21[5]) {
            free(v23);
          }
        }
        operator delete(v21);
      }
      int8x8_t v4 = v20;
      if (!v20) {
        goto LABEL_29;
      }
    }
    else
    {
      int8x8_t v4 = *(unsigned __int8 **)v4;
      if (!v4) {
        goto LABEL_29;
      }
    }
  }
LABEL_78:
  std::__throw_bad_function_call[abi:nn180100]();
  gdc::ResourceStore::createDebugNode(v43, v44, v45);
}

void gdc::ResourceStore::createDebugNode(std::string *this, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    *this = *(std::string *)a3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[2] + 7) = 0u;
  *(_OWORD *)((char *)&this[2].__r_.__value_.__r.__words[1] + 7) = 0u;
  *(_OWORD *)((char *)this[3].__r_.__value_.__r.__words + 7) = 0u;
  *((unsigned char *)&this[3].__r_.__value_.__s + 23) = 0;
  v90[23] = 9;
  strcpy(v90, "Resources");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)this, (long long *)v90);
  uint64_t v53 = a2;
  uint64_t v5 = *(void **)(a2 + 280);
  if (v5)
  {
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v5[15];
      if (v6)
      {
        unint64_t v7 = std::__shared_weak_count::lock(v6);
        if (v7) {
          break;
        }
      }
LABEL_8:
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_58;
      }
    }
    uint64_t v8 = v7;
    uint64_t v9 = v5[14];
    if (!v9) {
      goto LABEL_6;
    }
    strcpy((char *)&v66, "Resource");
    strcpy(v67, "\b");
    long long v68 = 0u;
    memset(v69, 0, sizeof(v69));
    char v70 = 0;
    gdc::ResourceKey::createDebugNode((uint64_t)v90, (unsigned __int8 *)v9);
    gdc::DebugTreeNode::addChildNode(&v66, (long long *)v90);
    unint64_t v10 = v94;
    if (v94)
    {
      uint64_t v11 = v95;
      BOOL v12 = v94;
      if ((void *)v95 != v94)
      {
        do
        {
          v11 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v11);
        }
        while ((void *)v11 != v10);
        BOOL v12 = v94;
      }
      uint64_t v95 = (uint64_t)v10;
      operator delete(v12);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v93);
    if (v92 < 0)
    {
      operator delete(v91);
      if ((v90[23] & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((v90[23] & 0x80000000) == 0)
    {
LABEL_19:
      v90[23] = 18;
      strcpy(v90, "OriginalLoadReason");
      unint64_t v13 = *(unsigned __int8 *)(v9 + 120);
      int v14 = "<Invalid>";
      if (v13 <= 4) {
        int v14 = off_1E5A99F78[v13];
      }
      memset(&v88, 0, sizeof(v88));
      int v89 = 4;
      std::string::__assign_external(&v88, v14);
      gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v90, (uint64_t)v86);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      unint64_t v15 = *(unsigned __int8 *)(v9 + 121);
      v90[23] = 6;
      strcpy(v90, "Source");
      unint64_t v16 = "<Invalid>";
      if (v15 <= 3) {
        unint64_t v16 = off_1E5A99FD8[v15];
      }
      memset(&__p, 0, sizeof(__p));
      int v85 = 4;
      std::string::__assign_external(&__p, v16);
      gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v90, (uint64_t)v83);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v17 = *(void *)(v9 + 96);
      v90[23] = 16;
      strcpy(v90, "CreatedTimestamp");
      memset(&v81[4], 0, 24);
      int v82 = 0;
      v81[0] = v17;
      gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v90, (uint64_t)v81);
      uint64_t v18 = *(void *)(v9 + 104);
      v90[23] = 13;
      strcpy(v90, "LastTimestamp");
      memset(&v79[4], 0, 24);
      int v80 = 0;
      v79[0] = v18;
      gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v90, (uint64_t)v79);
      uint64_t v19 = *(void *)(v9 + 112);
      v90[23] = 10;
      strcpy(v90, "TimeToLive");
      memset(&v77[4], 0, 24);
      int v78 = 0;
      v77[0] = v19;
      gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v90, (uint64_t)v77);
      uint64_t v20 = *(void *)(v9 + 128);
      v90[23] = 9;
      strcpy(v90, "RequestId");
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      uint64_t v73 = 0;
      int v76 = 1;
      uint64_t v72 = v20;
      gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v90, (uint64_t)v71);
      gdc::DebugTreeNode::addChildNode(ChildNode, &v66);
      size_t v21 = *(void ***)&v69[9];
      if (*(void *)&v69[9])
      {
        uint64_t v22 = *(void *)&v69[17];
        char v23 = *(void **)&v69[9];
        if (*(void *)&v69[17] != *(void *)&v69[9])
        {
          do
          {
            uint64_t v24 = *(void *)(v22 - 24);
            if (v24)
            {
              uint64_t v25 = *(void *)(v22 - 16);
              int8x8_t v26 = *(void **)(v22 - 24);
              if (v25 != v24)
              {
                do
                {
                  if (*(char *)(v25 - 1) < 0) {
                    operator delete(*(void **)(v25 - 24));
                  }
                  v25 -= 24;
                }
                while (v25 != v24);
                int8x8_t v26 = *(void **)(v22 - 24);
              }
              *(void *)(v22 - 16) = v24;
              operator delete(v26);
            }
            uint64_t v27 = *(void *)(v22 - 48);
            if (v27)
            {
              uint64_t v28 = *(void *)(v22 - 40);
              long long v29 = *(void **)(v22 - 48);
              if (v28 != v27)
              {
                do
                {
                  if (*(char *)(v28 - 9) < 0) {
                    operator delete(*(void **)(v28 - 32));
                  }
                  v28 -= 64;
                }
                while (v28 != v27);
                long long v29 = *(void **)(v22 - 48);
              }
              *(void *)(v22 - 40) = v27;
              operator delete(v29);
            }
            uint64_t v30 = (void **)(v22 - 80);
            if (*(char *)(v22 - 57) < 0) {
              operator delete(*v30);
            }
            v22 -= 80;
          }
          while (v30 != v21);
          char v23 = *(void **)&v69[9];
        }
        *(void *)&v69[17] = v21;
        operator delete(v23);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v68 + 1));
      if ((char)v68 < 0)
      {
        operator delete(*(void **)&v67[1]);
        if ((v67[0] & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      else if ((v67[0] & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete((void *)v66);
LABEL_6:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      goto LABEL_8;
    }
    operator delete(*(void **)v90);
    goto LABEL_19;
  }
LABEL_58:
  v90[23] = 16;
  strcpy(v90, "Failed Resources");
  uint64_t v55 = gdc::DebugTreeNode::createChildNode((uint64_t)this, (long long *)v90);
  for (uint64_t i = *(uint64_t **)(v53 + 320); i; uint64_t i = (uint64_t *)*i)
  {
    gdc::ResourceKey::createDebugNode((uint64_t)v90, (unsigned __int8 *)i + 16);
    strcpy((char *)&v66, "Error");
    *(_WORD *)int v67 = 5;
    long long v68 = 0u;
    memset(v69, 0, sizeof(v69));
    char v70 = 0;
    char v87 = 4;
    strcpy(v86, "Code");
    uint64_t v32 = i[14];
    memset(&v64[4], 0, 24);
    int v65 = 0;
    v64[0] = v32;
    gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v86, (uint64_t)v64);
    char v87 = 6;
    strcpy(v86, "Domain");
    uint64_t v62 = 0;
    long long v61 = 0uLL;
    int v63 = 4;
    if (&v61 != (long long *)(i + 15))
    {
      if (*((char *)i + 143) < 0)
      {
        std::string::__assign_no_alias<true>(&v61, (void *)i[15], i[16]);
      }
      else
      {
        long long v61 = *(_OWORD *)(i + 15);
        uint64_t v62 = i[17];
      }
    }
    gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v86, (uint64_t)v60);
    if (SHIBYTE(v62) < 0) {
      operator delete((void *)v61);
    }
    char v87 = 11;
    strcpy(v86, "Description");
    uint64_t v58 = 0;
    long long v57 = 0uLL;
    int v59 = 4;
    if (&v57 != (long long *)(i + 18))
    {
      if (*((char *)i + 167) < 0)
      {
        std::string::__assign_no_alias<true>(&v57, (void *)i[18], i[19]);
      }
      else
      {
        long long v57 = *((_OWORD *)i + 9);
        uint64_t v58 = i[20];
      }
    }
    gdc::DebugTreeNode::addProperty((uint64_t)&v66, (uint64_t)v86, (uint64_t)v56);
    if (SHIBYTE(v58) < 0) {
      operator delete((void *)v57);
    }
    gdc::DebugTreeNode::addChildNode(v90, &v66);
    gdc::DebugTreeNode::addChildNode(v55, (long long *)v90);
    unint64_t v33 = *(void ***)&v69[9];
    if (*(void *)&v69[9])
    {
      uint64_t v34 = *(void *)&v69[17];
      unint64_t v35 = *(void **)&v69[9];
      if (*(void *)&v69[17] != *(void *)&v69[9])
      {
        do
        {
          uint64_t v36 = *(void *)(v34 - 24);
          if (v36)
          {
            uint64_t v37 = *(void *)(v34 - 16);
            uint64_t v38 = *(void **)(v34 - 24);
            if (v37 != v36)
            {
              do
              {
                if (*(char *)(v37 - 1) < 0) {
                  operator delete(*(void **)(v37 - 24));
                }
                v37 -= 24;
              }
              while (v37 != v36);
              uint64_t v38 = *(void **)(v34 - 24);
            }
            *(void *)(v34 - 16) = v36;
            operator delete(v38);
          }
          uint64_t v39 = *(void *)(v34 - 48);
          if (v39)
          {
            uint64_t v40 = *(void *)(v34 - 40);
            uint64_t v41 = *(void **)(v34 - 48);
            if (v40 != v39)
            {
              do
              {
                if (*(char *)(v40 - 9) < 0) {
                  operator delete(*(void **)(v40 - 32));
                }
                v40 -= 64;
              }
              while (v40 != v39);
              uint64_t v41 = *(void **)(v34 - 48);
            }
            *(void *)(v34 - 40) = v39;
            operator delete(v41);
          }
          uint64_t v42 = (void **)(v34 - 80);
          if (*(char *)(v34 - 57) < 0) {
            operator delete(*v42);
          }
          v34 -= 80;
        }
        while (v42 != v33);
        unint64_t v35 = *(void **)&v69[9];
      }
      *(void *)&v69[17] = v33;
      operator delete(v35);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v68 + 1));
    if ((char)v68 < 0)
    {
      operator delete(*(void **)&v67[1]);
      if ((v67[0] & 0x80000000) == 0)
      {
LABEL_99:
        double v43 = (void **)v94;
        if (!v94) {
          goto LABEL_126;
        }
        goto LABEL_103;
      }
    }
    else if ((v67[0] & 0x80000000) == 0)
    {
      goto LABEL_99;
    }
    operator delete((void *)v66);
    double v43 = (void **)v94;
    if (!v94) {
      goto LABEL_126;
    }
LABEL_103:
    uint64_t v44 = v95;
    uint64_t v45 = v43;
    if ((void **)v95 != v43)
    {
      do
      {
        uint64_t v46 = *(void *)(v44 - 24);
        if (v46)
        {
          uint64_t v47 = *(void *)(v44 - 16);
          int v48 = *(void **)(v44 - 24);
          if (v47 != v46)
          {
            do
            {
              if (*(char *)(v47 - 1) < 0) {
                operator delete(*(void **)(v47 - 24));
              }
              v47 -= 24;
            }
            while (v47 != v46);
            int v48 = *(void **)(v44 - 24);
          }
          *(void *)(v44 - 16) = v46;
          operator delete(v48);
        }
        uint64_t v49 = *(void *)(v44 - 48);
        if (v49)
        {
          uint64_t v50 = *(void *)(v44 - 40);
          char v51 = *(void **)(v44 - 48);
          if (v50 != v49)
          {
            do
            {
              if (*(char *)(v50 - 9) < 0) {
                operator delete(*(void **)(v50 - 32));
              }
              v50 -= 64;
            }
            while (v50 != v49);
            char v51 = *(void **)(v44 - 48);
          }
          *(void *)(v44 - 40) = v49;
          operator delete(v51);
        }
        unint64_t v52 = (void **)(v44 - 80);
        if (*(char *)(v44 - 57) < 0) {
          operator delete(*v52);
        }
        v44 -= 80;
      }
      while (v52 != v43);
      uint64_t v45 = (void **)v94;
    }
    uint64_t v95 = (uint64_t)v43;
    operator delete(v45);
LABEL_126:
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v93);
    if (v92 < 0)
    {
      operator delete(v91);
      if ((v90[23] & 0x80000000) != 0) {
LABEL_130:
      }
        operator delete(*(void **)v90);
    }
    else if ((v90[23] & 0x80000000) != 0)
    {
      goto LABEL_130;
    }
  }
}

void gdc::LayerData::createDebugNode(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  strcpy((char *)a2, "Layer Data");
  *(_WORD *)(a2 + 23) = 10;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  gdc::LayerDataRequestKey::createDebugNode((uint64_t)v27, a1 + 16);
  gdc::DebugTreeNode::addChildNode((void *)a2, (long long *)v27);
  int8x8_t v4 = v31;
  if (v31)
  {
    uint64_t v5 = v32;
    uint64_t v6 = v31;
    if ((void *)v32 != v31)
    {
      do
      {
        v5 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = v31;
    }
    uint64_t v32 = (uint64_t)v4;
    operator delete(v6);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v30);
  if (v29 < 0) {
    operator delete(v28);
  }
  if ((v27[23] & 0x80000000) != 0) {
    operator delete(*(void **)v27);
  }
  v27[23] = 16;
  strcpy(v27, "CreatedTimestamp");
  uint64_t v7 = *((void *)a1 + 17);
  int v26 = 0;
  memset(&v25[4], 0, 24);
  v25[0] = v7;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v27, (uint64_t)v25);
  uint64_t v8 = *((void *)a1 + 18);
  v27[23] = 13;
  strcpy(v27, "LastTimestamp");
  int v24 = 0;
  memset(&v23[4], 0, 24);
  v23[0] = v8;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v27, (uint64_t)v23);
  uint64_t v9 = *((void *)a1 + 19);
  v27[23] = 10;
  strcpy(v27, "TimeToLive");
  int v22 = 0;
  memset(&v21[4], 0, 24);
  v21[0] = v9;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v27, (uint64_t)v21);
  uint64_t v10 = *(void *)a1;
  v27[23] = 13;
  strcpy(v27, "EstimatedCost");
  uint64_t v11 = (*(uint64_t (**)(unsigned __int8 *))(v10 + 16))(a1);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = 1;
  uint64_t v17 = 0;
  uint64_t v16 = v11;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v27, (uint64_t)v15);
  uint64_t v12 = a1[160];
  v27[23] = 8;
  strcpy(v27, "Complete");
  int v14 = 0;
  memset(&v13[4], 0, 24);
  v13[0] = v12;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v27, (uint64_t)v13);
}

uint64_t gdc::LayerData::estimatedCost(gdc::LayerData *this)
{
  return 1;
}

__n128 std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  float v2 = (char *)operator new(0x20uLL);
  *(void *)float v2 = &unk_1EF57A418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A3D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  float v2 = (char *)operator new(0x20uLL);
  *(void *)float v2 = &unk_1EF57A3D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::~__func()
{
}

void gdc::ResourceFetcher::cancelledLoad(unsigned __int16 **this, void *a2, const gdc::ResourceKey *a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[](this + 2, *((_WORD *)a3 + 1));
  std::mutex::lock((std::mutex *)(v5 + 128));
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  uint64_t v6 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str((std::string *)&__p, (unsigned __int8 *)a3);
    uint64_t v7 = (SBYTE7(v65) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315394;
    uint64_t v74 = v7;
    __int16 v75 = 2048;
    int v76 = a2;
    _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_DEBUG, "Resource Cancelled: %s, rid: %llu", buf, 0x16u);
    if (SBYTE7(v65) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = *(void *)a3;
  uint64_t v9 = (char *)*((void *)a3 + 1);
  std::string __p = a2;
  uint64_t v64 = v8;
  uint64_t v10 = v67;
  *(void *)&long long v65 = v67;
  *((void *)&v65 + 1) = v67;
  *(void *)&long long v66 = v67;
  *((void *)&v66 + 1) = 32;
  uint64_t v11 = (char *)*((void *)a3 + 2);
  unint64_t v12 = v11 - v9;
  if ((unint64_t)(v11 - v9) >= 0x21)
  {
    if (v12 <= 0x40) {
      size_t v13 = 64;
    }
    else {
      size_t v13 = v11 - v9;
    }
    uint64_t v10 = malloc_type_malloc(v13, 0x100004077774924uLL);
    unint64_t v15 = (char *)*((void *)&v65 + 1);
    int v14 = (char *)v65;
    if ((void)v65 == *((void *)&v65 + 1)) {
      goto LABEL_29;
    }
    unint64_t v16 = *((void *)&v65 + 1) - v65;
    if (*((void *)&v65 + 1) - (void)v65 < 8uLL)
    {
      uint64_t v17 = v10;
      goto LABEL_28;
    }
    uint64_t v17 = v10;
    if ((unint64_t)&v10[-v65] < 0x20) {
      goto LABEL_28;
    }
    if (v16 >= 0x20)
    {
      unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v19 = (long long *)(v65 + 16);
      int v20 = v10 + 16;
      unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        _OWORD *v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v16 == v18) {
        goto LABEL_29;
      }
      if ((v16 & 0x18) == 0)
      {
        v14 += v18;
        uint64_t v17 = &v10[v18];
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = &v10[v16 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v24 = v18 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = (uint64_t *)&v14[v18];
    int v26 = &v10[v18];
    do
    {
      uint64_t v27 = *v25++;
      *v26++ = v27;
      v24 += 8;
    }
    while (v24);
    if (v16 == v23) {
      goto LABEL_29;
    }
    v14 += v23;
    do
    {
LABEL_28:
      char v28 = *v14++;
      *v17++ = v28;
    }
    while (v14 != v15);
LABEL_29:
    *(void *)&long long v65 = v10;
    *((void *)&v65 + 1) = v10;
    *((void *)&v66 + 1) = v13;
  }
  if (v9 == v11) {
    goto LABEL_48;
  }
  if (v12 < 8)
  {
    uint64_t v30 = v10;
    goto LABEL_46;
  }
  if ((unint64_t)(v10 - v9) < 0x20)
  {
    uint64_t v30 = v10;
    goto LABEL_46;
  }
  if (v12 >= 0x20)
  {
    unint64_t v29 = v12 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v31 = (long long *)(v9 + 16);
    uint64_t v32 = v10 + 16;
    unint64_t v33 = v12 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v34 = *v31;
      *(v32 - 1) = *(v31 - 1);
      *uint64_t v32 = v34;
      v31 += 2;
      v32 += 2;
      v33 -= 32;
    }
    while (v33);
    if (v12 == v29) {
      goto LABEL_47;
    }
    if ((v12 & 0x18) == 0)
    {
      v9 += v29;
      uint64_t v30 = &v10[v29];
      goto LABEL_46;
    }
  }
  else
  {
    unint64_t v29 = 0;
  }
  unint64_t v35 = v12 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = &v10[v12 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v36 = v29 - (v12 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (uint64_t *)&v9[v29];
  uint64_t v38 = &v10[v29];
  do
  {
    uint64_t v39 = *v37++;
    *v38++ = v39;
    v36 += 8;
  }
  while (v36);
  if (v12 == v35) {
    goto LABEL_47;
  }
  v9 += v35;
  do
  {
LABEL_46:
    char v40 = *v9++;
    *v30++ = v40;
  }
  while (v9 != v11);
LABEL_47:
  uint64_t v10 = (unsigned char *)*((void *)&v65 + 1);
LABEL_48:
  uint64_t v41 = *((void *)a3 + 9);
  *((void *)&v65 + 1) = &v10[v12];
  uint64_t v68 = v41;
  long long v69 = *((_OWORD *)a3 + 5);
  memset(v70, 0, sizeof(v70));
  long long v71 = 0u;
  uint64_t v72 = 0;
  unint64_t v42 = *(void *)(v5 + 248);
  if (v42 < *(void *)(v5 + 256))
  {
    *(void *)unint64_t v42 = __p;
    double v43 = (unsigned char *)(v42 + 48);
    *(void *)(v42 + 8) = v64;
    *(void *)(v42 + 16) = v42 + 48;
    *(void *)(v42 + 24) = v42 + 48;
    *(void *)(v42 + 32) = v42 + 48;
    uint64_t v44 = v66;
    *(void *)(v42 + 40) = *((void *)&v66 + 1);
    uint64_t v45 = (char *)v65;
    if ((void)v65 != v44)
    {
      *(_OWORD *)(v42 + 16) = v65;
      long long v65 = 0uLL;
      long long v66 = 0uLL;
LABEL_68:
      *(void *)(v42 + 80) = v68;
      *(_OWORD *)(v42 + 88) = v69;
      *(void **)(v42 + 104) = v70[0];
      long long v61 = *(_OWORD *)&v70[1];
      *(void **)(v42 + 128) = v70[3];
      *(_OWORD *)(v42 + 112) = v61;
      v70[1] = 0;
      v70[2] = 0;
      uint64_t v62 = v72;
      *(_OWORD *)(v42 + 136) = v71;
      *(void *)(v42 + 152) = v62;
      v70[3] = 0;
      long long v71 = 0uLL;
      uint64_t v72 = 0;
      *(void *)(v5 + 248) = v42 + 160;
      goto LABEL_69;
    }
    *(void *)(v42 + 24) = &v43[*((void *)&v65 + 1) - v65];
    int v48 = (char *)*((void *)&v65 + 1);
    if (v45 == *((char **)&v65 + 1)) {
      goto LABEL_68;
    }
    unint64_t v49 = *((void *)&v65 + 1) - (void)v45;
    if (*((void *)&v65 + 1) - (void)v45 >= 8uLL && v42 - (unint64_t)v45 + 48 >= 0x20)
    {
      if (v49 < 0x20)
      {
        uint64_t v50 = 0;
LABEL_62:
        unint64_t v55 = v49 & 0xFFFFFFFFFFFFFFF8;
        v43 += v49 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v56 = v50 - (v49 & 0xFFFFFFFFFFFFFFF8);
        long long v57 = (uint64_t *)&v45[v50];
        uint64_t v58 = (void *)(v50 + v42 + 48);
        do
        {
          uint64_t v59 = *v57++;
          *v58++ = v59;
          v56 += 8;
        }
        while (v56);
        if (v49 == v55) {
          goto LABEL_68;
        }
        v45 += v55;
        goto LABEL_67;
      }
      uint64_t v50 = v49 & 0xFFFFFFFFFFFFFFE0;
      char v51 = (long long *)(v45 + 16);
      unint64_t v52 = (_OWORD *)(v42 + 64);
      unint64_t v53 = v49 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v54 = *v51;
        *(v52 - 1) = *(v51 - 1);
        *unint64_t v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 32;
      }
      while (v53);
      if (v49 == v50) {
        goto LABEL_68;
      }
      if ((v49 & 0x18) != 0) {
        goto LABEL_62;
      }
      v45 += v50;
      v43 += v50;
    }
    do
    {
LABEL_67:
      char v60 = *v45++;
      *v43++ = v60;
    }
    while (v45 != v48);
    goto LABEL_68;
  }
  uint64_t v46 = std::vector<gdc::ResourceRequest>::__push_back_slow_path<gdc::ResourceRequest>((void ***)(v5 + 240), (uint64_t)&__p);
  int v47 = SHIBYTE(v72);
  *(void *)(v5 + 248) = v46;
  if (v47 < 0) {
    operator delete((void *)v71);
  }
LABEL_69:
  if (SHIBYTE(v70[3]) < 0) {
    operator delete(v70[1]);
  }
  if ((void)v65 != (void)v66) {
    free((void *)v65);
  }
  std::mutex::unlock((std::mutex *)(v5 + 128));
}

uint64_t gdc::ResourceFetcher::setContentScale(uint64_t this, float a2)
{
  *(float *)(this + 8) = a2;
  return this;
}

void gdc::ResourceFetcher::tileSetInfo(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gdc::ResourceFetcher::createDebugNode(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 47) = 0u;
  *(_OWORD *)(a3 + 63) = 0u;
  *(_OWORD *)(a3 + 79) = 0u;
  *(unsigned char *)(a3 + 95) = 0;
  uint64_t v50 = a3;
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 64))(&v72, a1);
  char v51 = a1;
  if ((_BYTE)v72)
  {
    v54[23] = 19;
    strcpy(v54, "Download Zoom Range");
    uint64_t v6 = HIDWORD(v72);
    uint64_t v5 = v73;
    uint64_t v7 = (char *)operator new(0x80uLL);
    char v70 = (void **)(v7 + 128);
    long long v71 = v7 + 128;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 9) = v5;
    *((void *)v7 + 12) = 0;
    *((_DWORD *)v7 + 14) = 1;
    *((void *)v7 + 13) = 0;
    *((void *)v7 + 14) = 0;
    *((_DWORD *)v7 + 30) = 1;
    long long v69 = v7;
    gdc::DebugTreeNode::addProperty(a3, (uint64_t)v54, (uint64_t *)&v69);
    if (v7[119] < 0) {
      operator delete(*((void **)v7 + 12));
    }
    a1 = v51;
    if (v7[55] < 0) {
      operator delete(*((void **)v7 + 4));
    }
    uint64_t v8 = v7;
    goto LABEL_10;
  }
  v54[23] = 19;
  strcpy(v54, "Download Zoom Range");
  memset(&v67, 0, sizeof(v67));
  int v68 = 4;
  std::string::__assign_external(&v67, "None");
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v54, (uint64_t)v66);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v8 = (void *)v67.__r_.__value_.__r.__words[0];
LABEL_10:
    operator delete(v8);
  }
  v54[23] = 9;
  strcpy(v54, "Tile Size");
  (*(void (**)(char **__return_ptr, void *))(*a1 + 72))(&v69, a1);
  if ((_BYTE)v69)
  {
    (*(void (**)(std::string *__return_ptr, void *))(*a1 + 72))(&v74, a1);
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    int v65 = 1;
    uint64_t v62 = 0;
    uint64_t v61 = HIDWORD(v74.__r_.__value_.__r.__words[0]);
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    int v65 = 1;
    uint64_t v62 = 0;
    uint64_t v61 = 0;
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v54, (uint64_t)v60);
  uint64_t v9 = (uint64_t **)a1[10];
  long long v69 = 0;
  char v70 = 0;
  long long v71 = 0;
  if (v9)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v14 = *((unsigned __int16 *)v9 + 8);
      *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7) = 0;
      v74.__r_.__value_.__r.__words[0] = 0;
      if (v10 < v71)
      {
        *(void *)uint64_t v10 = v14;
        char v11 = v54[16];
        *(_OWORD *)(v10 + 8) = *(_OWORD *)v54;
        v10[24] = v11;
        std::string::size_type v12 = v74.__r_.__value_.__r.__words[0];
        *((void *)v10 + 4) = 0;
        *((void *)v10 + 5) = v12;
        *(void *)(v10 + 47) = *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7);
        v10[55] = 0;
        *((_DWORD *)v10 + 14) = 0;
        size_t v13 = (void **)(v10 + 64);
      }
      else
      {
        uint64_t v15 = (uint64_t)v69;
        uint64_t v16 = (v10 - v69) >> 6;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 58) {
          abort();
        }
        uint64_t v18 = v71 - v69;
        if ((v71 - v69) >> 5 > v17) {
          unint64_t v17 = v18 >> 5;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19 >> 58) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int v20 = (char *)operator new(v19 << 6);
        uint64_t v21 = (uint64_t)&v20[64 * v16];
        *(void *)uint64_t v21 = v14;
        *(void *)(v21 + 40) = 0;
        *(void *)(v21 + 48) = 0;
        *(void *)(v21 + 32) = 0;
        v74.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7) = 0;
        size_t v13 = (void **)(v21 + 64);
        *(_DWORD *)(v21 + 56) = 0;
        if (v10 == (char *)v15)
        {
          long long v69 = &v20[64 * v16];
          char v70 = (void **)(v21 + 64);
          long long v71 = &v20[64 * v19];
        }
        else
        {
          do
          {
            long long v22 = *((_OWORD *)v10 - 4);
            *(_OWORD *)(v21 - 55) = *(_OWORD *)(v10 - 55);
            *(_OWORD *)(v21 - 64) = v22;
            long long v23 = *((_OWORD *)v10 - 2);
            *(void *)(v21 - 16) = *((void *)v10 - 2);
            *(_OWORD *)(v21 - 32) = v23;
            *((void *)v10 - 3) = 0;
            *((void *)v10 - 2) = 0;
            *((void *)v10 - 4) = 0;
            *(_DWORD *)(v21 - 8) = *((_DWORD *)v10 - 2);
            v21 -= 64;
            v10 -= 64;
          }
          while (v10 != (char *)v15);
          uint64_t v10 = v69;
          unint64_t v24 = v70;
          long long v69 = (char *)v21;
          char v70 = v13;
          long long v71 = &v20[64 * v19];
          while (v24 != (void **)v10)
          {
            if (*((char *)v24 - 9) < 0) {
              operator delete(*(v24 - 4));
            }
            v24 -= 8;
          }
        }
        if (v10) {
          operator delete(v10);
        }
      }
      char v70 = v13;
      uint64_t v9 = (uint64_t **)*v9;
      uint64_t v10 = (char *)v13;
    }
    while (v9);
  }
  else
  {
    size_t v13 = 0;
  }
  v54[23] = 14;
  strcpy(v54, "Resource Types");
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v54, (uint64_t *)&v69);
  v54[23] = 6;
  strcpy(v54, "Stores");
  ChildNode = gdc::DebugTreeNode::createChildNode(a3, (long long *)v54);
  int v26 = (unsigned __int16 *)v51[2];
  uint64_t v27 = (unsigned __int16 *)v51[3];
  if (v26 != v27)
  {
    char v28 = ChildNode;
    do
    {
      uint64_t v29 = *((void *)v26 + 1);
      *((unsigned char *)&v53.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v53, "Store ");
      std::to_string(&v52, *v26);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v52;
      }
      else {
        uint64_t v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      uint64_t v32 = std::string::append(&v53, (const std::string::value_type *)v30, size);
      std::string v74 = *v32;
      v32->__r_.__value_.__r.__words[0] = 0;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      gdc::ResourceStore::createDebugNode((std::string *)v54, v29, (uint64_t)&v74);
      gdc::DebugTreeNode::addChildNode(v28, (long long *)v54);
      unint64_t v33 = (void **)__p;
      if (__p)
      {
        long long v34 = v59;
        unint64_t v35 = __p;
        if (v59 != __p)
        {
          do
          {
            unint64_t v36 = (void **)*(v34 - 3);
            if (v36)
            {
              uint64_t v37 = (void **)*(v34 - 2);
              uint64_t v38 = *(v34 - 3);
              if (v37 != v36)
              {
                do
                {
                  if (*((char *)v37 - 1) < 0) {
                    operator delete(*(v37 - 3));
                  }
                  v37 -= 3;
                }
                while (v37 != v36);
                uint64_t v38 = *(v34 - 3);
              }
              *(v34 - 2) = v36;
              operator delete(v38);
            }
            uint64_t v39 = (void **)*(v34 - 6);
            if (v39)
            {
              char v40 = (void **)*(v34 - 5);
              uint64_t v41 = *(v34 - 6);
              if (v40 != v39)
              {
                do
                {
                  if (*((char *)v40 - 9) < 0) {
                    operator delete(*(v40 - 4));
                  }
                  v40 -= 8;
                }
                while (v40 != v39);
                uint64_t v41 = *(v34 - 6);
              }
              *(v34 - 5) = v39;
              operator delete(v41);
            }
            unint64_t v42 = v34 - 10;
            if (*((char *)v34 - 57) < 0) {
              operator delete(*v42);
            }
            v34 -= 10;
          }
          while (v42 != v33);
          unint64_t v35 = __p;
        }
        uint64_t v59 = v33;
        operator delete(v35);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v57);
      if (v56 < 0)
      {
        operator delete(*(void **)&v54[24]);
        if ((v54[23] & 0x80000000) == 0)
        {
LABEL_73:
          if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_74;
          }
          goto LABEL_79;
        }
      }
      else if ((v54[23] & 0x80000000) == 0)
      {
        goto LABEL_73;
      }
      operator delete(*(void **)v54);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_74:
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_75;
        }
        goto LABEL_80;
      }
LABEL_79:
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_75:
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_81;
        }
        goto LABEL_40;
      }
LABEL_80:
      operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
LABEL_81:
      }
        operator delete(v53.__r_.__value_.__l.__data_);
LABEL_40:
      v26 += 12;
    }
    while (v26 != v27);
  }
  v54[23] = 10;
  strcpy(v54, "DecodeTime");
  double v43 = gdc::DebugTreeNode::createChildNode(v50, (long long *)v54);
  std::mutex::lock((std::mutex *)(v51 + 42));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v43, 0, (uint64_t)(v51 + 50), 1000.0);
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v43, 1, (uint64_t)(v51 + 50), 1000.0);
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v43, 2, (uint64_t)(v51 + 50), 1000.0);
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v43, 3, (uint64_t)(v51 + 50), 1000.0);
  std::mutex::unlock((std::mutex *)(v51 + 42));
  v54[23] = 5;
  strcpy(v54, "Bytes");
  uint64_t v44 = gdc::DebugTreeNode::createChildNode(v50, (long long *)v54);
  std::mutex::lock((std::mutex *)(v51 + 14));
  long long v45 = *((_OWORD *)v51 + 12);
  *(_OWORD *)long long v54 = *((_OWORD *)v51 + 11);
  *(_OWORD *)&v54[16] = v45;
  uint64_t v55 = v51[26];
  std::mutex::unlock((std::mutex *)(v51 + 14));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v44, 0, (uint64_t)v54, 1.0);
  std::mutex::lock((std::mutex *)(v51 + 14));
  long long v46 = *(_OWORD *)(v51 + 29);
  *(_OWORD *)long long v54 = *(_OWORD *)(v51 + 27);
  *(_OWORD *)&v54[16] = v46;
  uint64_t v55 = v51[31];
  std::mutex::unlock((std::mutex *)(v51 + 14));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v44, 1, (uint64_t)v54, 1.0);
  std::mutex::lock((std::mutex *)(v51 + 14));
  long long v47 = *((_OWORD *)v51 + 17);
  *(_OWORD *)long long v54 = *((_OWORD *)v51 + 16);
  *(_OWORD *)&v54[16] = v47;
  uint64_t v55 = v51[36];
  std::mutex::unlock((std::mutex *)(v51 + 14));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v44, 2, (uint64_t)v54, 1.0);
  std::mutex::lock((std::mutex *)(v51 + 14));
  long long v48 = *(_OWORD *)(v51 + 39);
  *(_OWORD *)long long v54 = *(_OWORD *)(v51 + 37);
  *(_OWORD *)&v54[16] = v48;
  uint64_t v55 = v51[41];
  std::mutex::unlock((std::mutex *)(v51 + 14));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v44, 3, (uint64_t)v54, 1.0);
  unint64_t v49 = v69;
  if (v69)
  {
    while (v13 != (void **)v49)
    {
      if (*((char *)v13 - 9) < 0) {
        operator delete(*(v13 - 4));
      }
      v13 -= 8;
    }
    operator delete(v49);
  }
}

void sub_1A281096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, gdc::DebugTreeNode *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v7 = off_1E5A99FD8[a2];
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v9;
    unint64_t v50 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v50) = v8;
  p_dst = &__dst;
  if (v8) {
LABEL_8:
  }
    memcpy(p_dst, v7, v9);
  *((unsigned char *)p_dst + v9) = 0;
  size_t v13 = gdc::DebugTreeNode::createChildNode(a1, &__dst);
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)__dst);
  }
  HIBYTE(v50) = 3;
  LODWORD(__dst) = 6780481;
  double v14 = *(double *)(a3 + 16) * a4;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  int v48 = 2;
  double v44 = v14;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v43);
  uint64_t v15 = *(void *)(a3 + 32);
  HIBYTE(v50) = 5;
  strcpy((char *)&__dst, "Count");
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  int v42 = 1;
  uint64_t v39 = 0;
  uint64_t v38 = v15;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v37);
  double v16 = *(double *)(a3 + 24);
  HIBYTE(v50) = 5;
  strcpy((char *)&__dst, "Total");
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  int v36 = 2;
  double v32 = v16 * a4;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v31);
  double v17 = *(double *)a3;
  HIBYTE(v50) = 3;
  LODWORD(__dst) = 7235917;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  int v30 = 2;
  double v26 = v17 * a4;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v25);
  double v18 = *(double *)(a3 + 8);
  HIBYTE(v50) = 3;
  LODWORD(__dst) = 7889229;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  int v24 = 2;
  double v20 = v18 * a4;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v19);
}

void gdc::ResourceFetcher::tileSize(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gdc::ResourceFetcher::downloadZoomRange(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gdc::ResourceFetcher::resourceTileForTile(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gdc::ResourceFetcher::~ResourceFetcher(gdc::ResourceFetcher *this)
{
  *(void *)this = &unk_1EF555000;
  std::mutex::~mutex((std::mutex *)((char *)this + 336));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  float v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      float v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    uint64_t v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        size_t v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  uint64_t v9 = *((void *)this + 2);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 3);
    uint64_t v11 = (void *)*((void *)this + 2);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 24;
      }
      while (v10 != v9);
      uint64_t v11 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v9;
    operator delete(v11);
  }
}

os_log_t __GEOGetGeoDisplayCoreDCELLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "DCEL");
  GEOGetGeoDisplayCoreDCELLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoDisplayCoreTaskflowLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "Taskflow");
  GEOGetGeoDisplayCoreTaskflowLog::log = (uint64_t)result;
  return result;
}

void gdc::ResourceManager::~ResourceManager(gdc::ResourceManager *this)
{
  gdc::ResourceManager::~ResourceManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  gdc::ResourceManager *v9;
  void **v10;
  gdc::ResourceManager *v11;
  gdc::ResourceManager *v12;
  gdc::ResourceManager *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  std::__shared_weak_count *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  void v56[3];
  void *v57;
  void v58[3];
  void *v59;
  void v60[3];
  void *v61;
  void v62[3];
  void *v63;
  uint64_t v64;

  uint64_t v64 = *MEMORY[0x1E4F143B8];
  float v2 = *((void *)this + 7);
  uint64_t v55 = (void **)((char *)this + 56);
  uint64_t v3 = *((void *)this + 8);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v5 = *(void **)(v2 + 8);
      int8x8_t v4 = *(std::__shared_weak_count **)(v2 + 16);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v63 = 0;
      gdc::ResourceStore::setArrivedResourceNotification(v5, v62);
      if (v63 == v62)
      {
        (*(void (**)(void *))(v62[0] + 32))(v62);
      }
      else if (v63)
      {
        (*(void (**)(void))(*v63 + 40))();
      }
      uint64_t v61 = 0;
      gdc::ResourceStore::setNewResourceNotification((uint64_t)v5, v60);
      if (v61 == v60)
      {
        (*(void (**)(void *))(v60[0] + 32))(v60);
      }
      else if (v61)
      {
        (*(void (**)(void))(*v61 + 40))();
      }
      uint64_t v59 = 0;
      gdc::ResourceStore::setRetryResourceNotification((uint64_t)v5, v58);
      if (v59 != v58) {
        break;
      }
      (*(void (**)(void *))(v58[0] + 32))(v58);
      if (v4) {
        goto LABEL_20;
      }
LABEL_3:
      v2 += 24;
      if (v2 == v3) {
        goto LABEL_22;
      }
    }
    if (v59) {
      (*(void (**)(void))(*v59 + 40))();
    }
    if (!v4) {
      goto LABEL_3;
    }
LABEL_20:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_3;
  }
LABEL_22:
  uint64_t v6 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); v6 != i; v6 += 16)
    (*(void (**)(void))(**(void **)(v6 + 8) + 40))(*(void *)(v6 + 8));
  size_t v8 = *((void *)this + 34);
  if (v8)
  {
    v56[0] = &unk_1EF57A658;
    long long v57 = v56;
    geo::TaskQueue::barrierSync(v8, v56);
    if (v57 == v56)
    {
      (*(void (**)(void *))(v56[0] + 32))(v56);
    }
    else if (v57)
    {
      (*(void (**)(void))(*v57 + 40))();
    }
  }
  uint64_t v9 = (gdc::ResourceManager *)*((void *)this + 54);
  if (v9 == (gdc::ResourceManager *)((char *)this + 408))
  {
    (*(void (**)(char *))(*((void *)this + 51) + 32))((char *)this + 408);
    uint64_t v10 = v55;
  }
  else
  {
    uint64_t v10 = v55;
    if (v9) {
      (*(void (**)(gdc::ResourceManager *))(*(void *)v9 + 40))(v9);
    }
  }
  uint64_t v11 = (gdc::ResourceManager *)*((void *)this + 50);
  if (v11 == (gdc::ResourceManager *)((char *)this + 376))
  {
    (*(void (**)(char *))(*((void *)this + 47) + 32))((char *)this + 376);
  }
  else if (v11)
  {
    (*(void (**)(gdc::ResourceManager *))(*(void *)v11 + 40))(v11);
  }
  uint64_t v12 = (gdc::ResourceManager *)*((void *)this + 46);
  if (v12 == (gdc::ResourceManager *)((char *)this + 344))
  {
    (*(void (**)(char *))(*((void *)this + 43) + 32))((char *)this + 344);
  }
  else if (v12)
  {
    (*(void (**)(gdc::ResourceManager *))(*(void *)v12 + 40))(v12);
  }
  size_t v13 = (gdc::ResourceManager *)*((void *)this + 42);
  if (v13 == (gdc::ResourceManager *)((char *)this + 312))
  {
    (*(void (**)(char *))(*((void *)this + 39) + 32))((char *)this + 312);
  }
  else if (v13)
  {
    (*(void (**)(gdc::ResourceManager *))(*(void *)v13 + 40))(v13);
  }
  double v14 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v14)
  {
    std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(*(void **)(v14 + 56));
    uint64_t v15 = *(void **)(v14 + 24);
    if (v15)
    {
      do
      {
        double v20 = (void *)*v15;
        uint64_t v21 = (void *)v15[3];
        if (v21 != (void *)v15[5]) {
          free(v21);
        }
        operator delete(v15);
        uint64_t v15 = v20;
      }
      while (v20);
    }
    double v16 = *(void **)(v14 + 8);
    *(void *)(v14 + 8) = 0;
    if (v16) {
      operator delete(v16);
    }
    MEMORY[0x1A6239270](v14, 0x10A1C40AAFFF269);
  }
  double v17 = *((void *)this + 35);
  if (v17)
  {
    double v18 = *((void *)this + 36);
    unint64_t v19 = (void *)*((void *)this + 35);
    if (v18 != v17)
    {
      do
      {
        uint64_t v22 = *(std::__shared_weak_count **)(v18 - 8);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v18 -= 16;
      }
      while (v18 != v17);
      unint64_t v19 = (void *)*((void *)this + 35);
    }
    *((void *)this + 36) = v17;
    operator delete(v19);
  }
  uint64_t v23 = *((void *)this + 31);
  if (v23)
  {
    int v24 = *((void *)this + 32);
    uint64_t v25 = (void *)*((void *)this + 31);
    if (v24 != v23)
    {
      do
      {
        double v26 = *(void **)(v24 - 24);
        if (v26)
        {
          do
          {
            uint64_t v28 = (void *)*v26;
            uint64_t v29 = (void *)v26[3];
            if (v29 != (void *)v26[5]) {
              free(v29);
            }
            operator delete(v26);
            double v26 = v28;
          }
          while (v28);
        }
        uint64_t v27 = *(void **)(v24 - 40);
        *(void *)(v24 - 40) = 0;
        if (v27) {
          operator delete(v27);
        }
        v24 -= 48;
      }
      while (v24 != v23);
      uint64_t v25 = (void *)*((void *)this + 31);
    }
    *((void *)this + 32) = v23;
    operator delete(v25);
  }
  int v30 = (void *)*((void *)this + 28);
  if (v30)
  {
    do
    {
      int v42 = (void *)*v30;
      double v43 = (void *)v30[3];
      if (v43 != (void *)v30[5]) {
        free(v43);
      }
      operator delete(v30);
      int v30 = v42;
    }
    while (v42);
  }
  unint64_t v31 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v31) {
    operator delete(v31);
  }
  double v32 = (void *)*((void *)this + 23);
  if (v32)
  {
    do
    {
      uint64_t v33 = (void *)*v32;
      operator delete(v32);
      double v32 = v33;
    }
    while (v33);
  }
  uint64_t v34 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v34) {
    operator delete(v34);
  }
  uint64_t v35 = (void *)*((void *)this + 18);
  if (v35)
  {
    do
    {
      double v44 = (void *)*v35;
      uint64_t v45 = (void *)v35[3];
      if (v45 != (void *)v35[5]) {
        free(v45);
      }
      operator delete(v35);
      uint64_t v35 = v44;
    }
    while (v44);
  }
  int v36 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v36) {
    operator delete(v36);
  }
  uint64_t v37 = (void *)*((void *)this + 13);
  if (v37)
  {
    do
    {
      uint64_t v46 = (void *)*v37;
      uint64_t v47 = (void *)v37[3];
      if (v47 != (void *)v37[5]) {
        free(v47);
      }
      operator delete(v37);
      uint64_t v37 = v46;
    }
    while (v46);
  }
  uint64_t v38 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v38) {
    operator delete(v38);
  }
  uint64_t v39 = (char *)*v10;
  if (*v10)
  {
    uint64_t v40 = (char *)*((void *)this + 8);
    uint64_t v41 = *v10;
    if (v40 != v39)
    {
      do
      {
        int v48 = (std::__shared_weak_count *)*((void *)v40 - 1);
        if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        v40 -= 24;
      }
      while (v40 != v39);
      uint64_t v41 = *v10;
    }
    *((void *)this + 8) = v39;
    operator delete(v41);
  }
  unint64_t v49 = (void *)*((void *)this + 4);
  if (v49)
  {
    *((void *)this + 5) = v49;
    operator delete(v49);
  }
  unint64_t v50 = (void *)*((void *)this + 1);
  if (v50)
  {
    char v51 = (void *)*((void *)this + 2);
    std::string v52 = (void *)*((void *)this + 1);
    if (v51 != v50)
    {
      do
      {
        long long v54 = *--v51;
        std::string v53 = v54;
        *char v51 = 0;
        if (v54) {
          (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
        }
      }
      while (v51 != v50);
      std::string v52 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v50;
    operator delete(v52);
  }
}

void sub_1A2811674(_Unwind_Exception *a1, void **a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  std::function<void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,gdc::Error>>> const&)>::~function((void *)(v2 + 408));
  std::function<void ()(void)>::~function((void *)(v2 + 376));
  std::function<std::string ()(unsigned short)>::~function((void *)(v2 + 344));
  std::function<void ()(void)>::~function((void *)(v2 + 312));
  std::unique_ptr<gdc::ResourceStatusContainer>::~unique_ptr[abi:nn180100]((uint64_t *)(v2 + 304));
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v2 + 280));
  geo::linear_map<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>,std::equal_to<gdc::ResourceFetcher *>,std::allocator<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>,std::vector<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>>::~linear_map((void **)(v2 + 248));
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v2 + 208);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v2 + 168);
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v2 + 128);
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v2 + 88);
  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map(a2);
  int8x8_t v4 = *(void **)(v2 + 32);
  if (v4)
  {
    *(void *)(v2 + 40) = v4;
    operator delete(v4);
  }
  std::vector<std::unique_ptr<gdc::ResourceFetcher>>::~vector[abi:nn180100]((void *)(v2 + 8));
  _Unwind_Resume(a1);
}

void *std::function<std::string ()(unsigned short)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<gdc::ResourceStatusContainer>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(*(void **)(v2 + 56));
    uint64_t v3 = *(void **)(v2 + 24);
    if (v3)
    {
      do
      {
        uint64_t v6 = (void *)*v3;
        uint64_t v7 = (void *)v3[3];
        if (v7 != (void *)v3[5]) {
          free(v7);
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6);
    }
    int8x8_t v4 = *(void **)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v4) {
      operator delete(v4);
    }
    MEMORY[0x1A6239270](v2, 0x10A1C40AAFFF269);
  }
  return a1;
}

void **geo::linear_map<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>,std::equal_to<gdc::ResourceFetcher *>,std::allocator<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>,std::vector<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>>::~linear_map(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int8x8_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          do
          {
            uint64_t v7 = (void *)*v5;
            size_t v8 = (void *)v5[3];
            if (v8 != (void *)v5[5]) {
              free(v8);
            }
            operator delete(v5);
            uint64_t v5 = v7;
          }
          while (v7);
        }
        uint64_t v6 = (void *)*((void *)v3 - 5);
        *((void *)v3 - 5) = 0;
        if (v6) {
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      int8x8_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *std::vector<std::unique_ptr<gdc::ResourceFetcher>>::~vector[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    int8x8_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      int8x8_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<gdc::ResourceManager::~ResourceManager()::$_0,std::allocator<gdc::ResourceManager::~ResourceManager()::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57A658;
}

void *std::__function::__func<gdc::ResourceManager::~ResourceManager()::$_0,std::allocator<gdc::ResourceManager::~ResourceManager()::$_0>,void ()(void)>::__clone()
{
  os_log_t result = operator new(0x10uLL);
  *os_log_t result = &unk_1EF57A658;
  return result;
}

void std::__function::__func<gdc::ResourceManager::~ResourceManager()::$_0,std::allocator<gdc::ResourceManager::~ResourceManager()::$_0>,void ()(void)>::~__func()
{
}

uint64_t **gdc::ResourceStatusContainer::resourceCancelled(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  os_log_t result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)this + 1, (unsigned __int8 *)a2);
  if (result) {
    *((_DWORD *)result + 28) = 4;
  }
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceFailed(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  os_log_t result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)this + 1, (unsigned __int8 *)a2);
  if (result) {
    *((_DWORD *)result + 28) = 3;
  }
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceArrived(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  os_log_t result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)this + 1, (unsigned __int8 *)a2);
  if (result) {
    *((_DWORD *)result + 28) = 2;
  }
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceLoading(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  os_log_t result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)this + 1, (unsigned __int8 *)a2);
  if (result) {
    *((_DWORD *)result + 28) = 1;
  }
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceReset(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  os_log_t result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)this + 1, (unsigned __int8 *)a2);
  if (result) {
    *((_DWORD *)result + 28) = 0;
  }
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceResetActive(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  os_log_t result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)this + 1, (unsigned __int8 *)a2);
  if (result) {
    *((_DWORD *)result + 28) = 0;
  }
  return result;
}

std::string *std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::operator()@<X0>(unsigned __int16 *a1@<X1>, std::string *a2@<X8>)
{
  return std::to_string(a2, *a1);
}

void *std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::__clone()
{
  os_log_t result = operator new(0x10uLL);
  *os_log_t result = &unk_1EF57A610;
  return result;
}

void std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::~__func()
{
}

uint64_t std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[3];
      if (v6 != (void *)v2[5]) {
        free(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    int8x8_t v4 = *(void **)(i - 24);
    if (v4)
    {
      do
      {
        uint64_t v6 = (void *)*v4;
        uint64_t v7 = (void *)v4[3];
        if (v7 != (void *)v4[5]) {
          free(v7);
        }
        operator delete(v4);
        int8x8_t v4 = v6;
      }
      while (v6);
    }
    uint64_t v5 = *(void **)(i - 40);
    *(void *)(i - 40) = 0;
    if (v5) {
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::__clone(uint64_t a1)
{
  os_log_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *os_log_t result = &unk_1EF57A580;
  result[1] = v3;
  return result;
}

void std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::~__func()
{
}

void *std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_2,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::shared_ptr<gdc::Resource> const&)>::__clone(uint64_t a1)
{
  os_log_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *os_log_t result = &unk_1EF57A538;
  result[1] = v3;
  return result;
}

void std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_2,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::shared_ptr<gdc::Resource> const&)>::~__func()
{
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<std::unordered_set>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1<std::unordered_set>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  if (v3)
  {
    int8x8_t v4 = v2 + 16;
    while (1)
    {
      uint64_t v52 = v3[2];
      std::string v53 = v57;
      long long v54 = (char *)v57;
      uint64_t v55 = v57;
      uint64_t v56 = 32;
      uint64_t v6 = (char *)v3[3];
      uint64_t v5 = (char *)v3[4];
      unint64_t v7 = v5 - v6;
      size_t v8 = v57;
      if ((unint64_t)(v5 - v6) < 0x21) {
        goto LABEL_25;
      }
      size_t v9 = v7 <= 0x40 ? 64 : v5 - v6;
      size_t v8 = malloc_type_malloc(v9, 0x100004077774924uLL);
      uint64_t v10 = (char *)v53;
      uint64_t v11 = v54;
      if (v53 != v54) {
        break;
      }
LABEL_24:
      std::string v53 = v8;
      long long v54 = (char *)v8;
      uint64_t v56 = v9;
LABEL_25:
      if (v6 != v5)
      {
        if (v7 < 8)
        {
          double v26 = v8;
        }
        else if ((unint64_t)((char *)v8 - v6) < 0x20)
        {
          double v26 = v8;
        }
        else
        {
          if (v7 < 0x20)
          {
            uint64_t v25 = 0;
LABEL_36:
            unint64_t v31 = v7 & 0xFFFFFFFFFFFFFFF8;
            double v26 = (char *)v8 + (v7 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v32 = v25 - (v7 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v33 = (uint64_t *)&v6[v25];
            uint64_t v34 = (void *)((char *)v8 + v25);
            do
            {
              uint64_t v35 = *v33++;
              *v34++ = v35;
              v32 += 8;
            }
            while (v32);
            if (v7 != v31)
            {
              v6 += v31;
              goto LABEL_41;
            }
LABEL_42:
            size_t v8 = v54;
            goto LABEL_43;
          }
          uint64_t v25 = v7 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v27 = (long long *)(v6 + 16);
          uint64_t v28 = v8 + 2;
          unint64_t v29 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            _OWORD *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 32;
          }
          while (v29);
          if (v7 == v25) {
            goto LABEL_42;
          }
          if ((v7 & 0x18) != 0) {
            goto LABEL_36;
          }
          v6 += v25;
          double v26 = (char *)v8 + v25;
        }
        do
        {
LABEL_41:
          char v36 = *v6++;
          *v26++ = v36;
        }
        while (v6 != v5);
        goto LABEL_42;
      }
LABEL_43:
      uint64_t v37 = v3[11];
      long long v54 = (char *)v8 + v7;
      v57[4] = v37;
      long long v58 = *((_OWORD *)v3 + 6);
      uint64_t v38 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(v2[38] + 8), (unsigned __int8 *)&v52);
      if (v38) {
        *((_DWORD *)v38 + 28) = 0;
      }
      uint64_t v39 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v2 + 16, (unsigned __int8 *)&v52);
      if (v39)
      {
        uint64_t v40 = v39;
        int8x8_t v41 = (int8x8_t)v2[17];
        int v42 = v39[1];
        uint8x8_t v43 = (uint8x8_t)vcnt_s8(v41);
        v43.i16[0] = vaddlv_u8(v43);
        if (v43.u32[0] > 1uLL)
        {
          if ((unint64_t)v42 >= *(void *)&v41) {
            int v42 = (uint64_t *)((unint64_t)v42 % *(void *)&v41);
          }
        }
        else
        {
          int v42 = (uint64_t *)((*(void *)&v41 - 1) & (unint64_t)v42);
        }
        double v44 = *(uint64_t ***)(*v4 + 8 * (void)v42);
        do
        {
          uint64_t v45 = v44;
          double v44 = (uint64_t **)*v44;
        }
        while (v44 != v39);
        if (v45 == v2 + 18) {
          goto LABEL_63;
        }
        uint64_t v46 = v45[1];
        if (v43.u32[0] > 1uLL)
        {
          if ((unint64_t)v46 >= *(void *)&v41) {
            uint64_t v46 = (uint64_t *)((unint64_t)v46 % *(void *)&v41);
          }
        }
        else
        {
          uint64_t v46 = (uint64_t *)((unint64_t)v46 & (*(void *)&v41 - 1));
        }
        if (v46 != v42)
        {
LABEL_63:
          if (!*v39) {
            goto LABEL_64;
          }
          unint64_t v47 = (*v39)[1];
          if (v43.u32[0] > 1uLL)
          {
            if (v47 >= *(void *)&v41) {
              v47 %= *(void *)&v41;
            }
          }
          else
          {
            v47 &= *(void *)&v41 - 1;
          }
          if ((uint64_t *)v47 != v42) {
LABEL_64:
          }
            *(void *)(*v4 + 8 * (void)v42) = 0;
        }
        int v48 = *v39;
        if (*v39)
        {
          unint64_t v49 = (uint64_t *)v48[1];
          if (v43.u32[0] > 1uLL)
          {
            if ((unint64_t)v49 >= *(void *)&v41) {
              unint64_t v49 = (uint64_t *)((unint64_t)v49 % *(void *)&v41);
            }
          }
          else
          {
            unint64_t v49 = (uint64_t *)((unint64_t)v49 & (*(void *)&v41 - 1));
          }
          if (v49 != v42)
          {
            *(void *)(*v4 + 8 * (void)v49) = v45;
            int v48 = *v39;
          }
        }
        *uint64_t v45 = v48;
        void *v39 = 0;
        --v2[19];
        unint64_t v50 = v39[3];
        if (v50 != v40[5]) {
          free(v50);
        }
        operator delete(v40);
      }
      if (v53 != v55) {
        free(v53);
      }
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        goto LABEL_77;
      }
    }
    unint64_t v12 = v54 - (unsigned char *)v53;
    if ((unint64_t)(v54 - (unsigned char *)v53) < 8)
    {
      size_t v13 = v8;
    }
    else
    {
      size_t v13 = v8;
      if ((unint64_t)((char *)v8 - (unsigned char *)v53) >= 0x20)
      {
        if (v12 < 0x20)
        {
          uint64_t v14 = 0;
LABEL_18:
          unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFF8;
          size_t v13 = (char *)v8 + (v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v20 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v21 = (uint64_t *)&v10[v14];
          uint64_t v22 = (void *)((char *)v8 + v14);
          do
          {
            uint64_t v23 = *v21++;
            *v22++ = v23;
            v20 += 8;
          }
          while (v20);
          if (v12 == v19) {
            goto LABEL_24;
          }
          v10 += v19;
          goto LABEL_23;
        }
        uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v15 = (long long *)((char *)v53 + 16);
        double v16 = v8 + 2;
        unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          *double v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 32;
        }
        while (v17);
        if (v12 == v14) {
          goto LABEL_24;
        }
        if ((v12 & 0x18) != 0) {
          goto LABEL_18;
        }
        v10 += v14;
        size_t v13 = (char *)v8 + v14;
      }
    }
    do
    {
LABEL_23:
      char v24 = *v10++;
      *v13++ = v24;
    }
    while (v10 != v11);
    goto LABEL_24;
  }
LABEL_77:
  uint64_t result = v2[42];
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  return result;
}

__n128 std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<std::unordered_set>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1<std::unordered_set>> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57A4F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<std::unordered_set>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1<std::unordered_set>> const&)>::~__func()
{
}

__n128 std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57A4A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<gdc::ResourceStore>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 408);
  if (v2)
  {
    do
    {
      unint64_t v7 = (void *)*v2;
      size_t v8 = (void *)v2[3];
      if (v8 != (void *)v2[5]) {
        free(v8);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = *(void **)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(void *)(a1 + 384))
  {
    uint64_t v4 = *(void *)(a1 + 368);
    uint64_t v5 = *(uint64_t **)(a1 + 376);
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *(void *)(a1 + 384) = 0;
    if (v5 != (uint64_t *)(a1 + 368))
    {
      do
      {
        size_t v9 = (uint64_t *)v5[1];
        uint64_t v10 = (std::__shared_weak_count *)v5[15];
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        uint64_t v11 = (void *)v5[3];
        if (v11 != (void *)v5[5]) {
          free(v11);
        }
        operator delete(v5);
        uint64_t v5 = v9;
      }
      while (v9 != (uint64_t *)(a1 + 368));
    }
  }
  unint64_t v12 = *(void ***)(a1 + 344);
  if (v12)
  {
    do
    {
      unint64_t v19 = (void **)*v12;
      if (*((char *)v12 + 167) < 0)
      {
        operator delete(v12[18]);
        if (*((char *)v12 + 143) < 0) {
LABEL_31:
        }
          operator delete(v12[15]);
      }
      else if (*((char *)v12 + 143) < 0)
      {
        goto LABEL_31;
      }
      uint64_t v20 = v12[3];
      if (v20 != v12[5]) {
        free(v20);
      }
      operator delete(v12);
      unint64_t v12 = v19;
    }
    while (v19);
  }
  size_t v13 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 304);
  if (v14)
  {
    do
    {
      uint64_t v21 = (void *)*v14;
      uint64_t v22 = (std::__shared_weak_count *)v14[15];
      if (v22) {
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v23 = (void *)v14[3];
      if (v23 != (void *)v14[5]) {
        free(v23);
      }
      operator delete(v14);
      uint64_t v14 = v21;
    }
    while (v21);
  }
  uint64_t v15 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  if (v15) {
    operator delete(v15);
  }
  uint64_t v16 = *(void *)(a1 + 264);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 272);
    long long v18 = *(void **)(a1 + 264);
    if (v17 == v16)
    {
LABEL_45:
      *(void *)(a1 + 272) = v16;
      operator delete(v18);
      goto LABEL_46;
    }
    while (1)
    {
      if (*(char *)(v17 - 1) < 0)
      {
        operator delete(*(void **)(v17 - 24));
        if (*(char *)(v17 - 25) < 0) {
LABEL_43:
        }
          operator delete(*(void **)(v17 - 48));
      }
      else if (*(char *)(v17 - 25) < 0)
      {
        goto LABEL_43;
      }
      char v24 = *(void **)(v17 - 144);
      if (v24 != *(void **)(v17 - 128)) {
        free(v24);
      }
      v17 -= 160;
      if (v17 == v16)
      {
        long long v18 = *(void **)(a1 + 264);
        goto LABEL_45;
      }
    }
  }
LABEL_46:
  uint64_t v25 = *(void *)(a1 + 240);
  if (!v25) {
    goto LABEL_58;
  }
  uint64_t v26 = *(void *)(a1 + 248);
  uint64_t v27 = *(void **)(a1 + 240);
  if (v26 != v25)
  {
    while (1)
    {
      if (*(char *)(v26 - 1) < 0)
      {
        operator delete(*(void **)(v26 - 24));
        if (*(char *)(v26 - 25) < 0) {
LABEL_55:
        }
          operator delete(*(void **)(v26 - 48));
      }
      else if (*(char *)(v26 - 25) < 0)
      {
        goto LABEL_55;
      }
      uint64_t v28 = *(void **)(v26 - 144);
      if (v28 != *(void **)(v26 - 128)) {
        free(v28);
      }
      v26 -= 160;
      if (v26 == v25)
      {
        uint64_t v27 = *(void **)(a1 + 240);
        break;
      }
    }
  }
  *(void *)(a1 + 248) = v25;
  operator delete(v27);
LABEL_58:
  uint64_t v29 = *(void *)(a1 + 216);
  if (v29)
  {
    uint64_t v30 = *(void *)(a1 + 224);
    unint64_t v31 = *(void **)(a1 + 216);
    if (v30 != v29)
    {
      do
      {
        uint64_t v32 = *(std::__shared_weak_count **)(v30 - 8);
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        v30 -= 16;
      }
      while (v30 != v29);
      unint64_t v31 = *(void **)(a1 + 216);
    }
    *(void *)(a1 + 224) = v29;
    operator delete(v31);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 152));
  uint64_t v33 = *(void *)(a1 + 144);
  if (v33 == a1 + 120)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 120) + 32))(a1 + 120);
  }
  else if (v33)
  {
    (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
  }
  uint64_t v34 = *(void *)(a1 + 112);
  if (v34 == a1 + 88)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 88) + 32))(a1 + 88);
  }
  else if (v34)
  {
    (*(void (**)(uint64_t))(*(void *)v34 + 40))(v34);
  }
  uint64_t v35 = a1 + 24;
  uint64_t v36 = *(void *)(a1 + 80);
  if (v36 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v36)
  {
    (*(void (**)(uint64_t))(*(void *)v36 + 40))(v36);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result == v35)
  {
    uint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v35 + 32);
    return v39(a1 + 24);
  }
  else if (result)
  {
    uint64_t v38 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v38();
  }
  return result;
}

void std::__shared_ptr_emplace<gdc::ResourceStore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gdc::ResourceStore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 std::__function::__func<gdc::ResourceManager::updateExpired(long long)::$_0,std::allocator<gdc::ResourceManager::updateExpired(long long)::$_0>,void ()(gdc::ResourceKey const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gdc::ResourceManager::updateExpired(long long)::$_0,std::allocator<gdc::ResourceManager::updateExpired(long long)::$_0>,void ()(gdc::ResourceKey const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57A460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::ResourceManager::updateExpired(long long)::$_0,std::allocator<gdc::ResourceManager::updateExpired(long long)::$_0>,void ()(gdc::ResourceKey const&)>::~__func()
{
}

uint64_t std::__function::__func<gdc::ResourceManager::cleanupResourceRequests(void)::$_0,std::allocator<gdc::ResourceManager::cleanupResourceRequests(void)::$_0>,void ()(std::pair<gdc::ResourceKey,gdc::ResourceStatus> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57A5C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<gdc::ResourceManager::cleanupResourceRequests(void)::$_0,std::allocator<gdc::ResourceManager::cleanupResourceRequests(void)::$_0>,void ()(std::pair<gdc::ResourceKey,gdc::ResourceStatus> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF57A5C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<gdc::ResourceManager::cleanupResourceRequests(void)::$_0,std::allocator<gdc::ResourceManager::cleanupResourceRequests(void)::$_0>,void ()(std::pair<gdc::ResourceKey,gdc::ResourceStatus> const&)>::~__func()
{
}

void gdc::ResourceManager::clearFailedResources(gdc::ResourceManager *this, gdc::ResourceManager *a2)
{
  if (this == a2) {
    return;
  }
  uint64_t v25 = v2;
  uint64_t v26 = v3;
  uint64_t v5 = this;
  do
  {
    uint64_t v6 = (void *)*((void *)v5 + 1);
    long long v22 = 0u;
    long long v23 = 0u;
    int v24 = 1065353216;
    float v7 = (float)(unint64_t)v6[41];
    size_t prime = (unint64_t)v7;
    if ((unint64_t)v7 == 1)
    {
      size_t prime = 2;
LABEL_9:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v22, prime);
      goto LABEL_10;
    }
    if ((prime & ((unint64_t)v7 - 1)) != 0) {
      size_t prime = std::__next_prime((unint64_t)v7);
    }
    if (prime) {
      goto LABEL_9;
    }
LABEL_10:
    for (uint64_t i = (void *)v6[40]; i; uint64_t i = (void *)*i)
    {
      std::pair<gdc::ResourceKey const,gdc::Error>::pair[abi:nn180100]((uint64_t)v15, (uint64_t)(i + 2));
      std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)&v22, v15, (uint64_t)v15);
      if (v21 < 0)
      {
        operator delete(__p);
        if (v19 < 0) {
LABEL_22:
        }
          operator delete(v18);
      }
      else if (v19 < 0)
      {
        goto LABEL_22;
      }
      if (v16 != v17) {
        free(v16);
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::Error>>>::clear(v6 + 38);
    uint64_t v10 = v6[11];
    if (v10) {
      (*(void (**)(uint64_t, long long *))(*(void *)v10 + 48))(v10, &v22);
    }
    uint64_t v11 = (void *)v23;
    if ((void)v23)
    {
      do
      {
        size_t v13 = (void *)*v11;
        uint64_t v14 = (void *)v11[3];
        if (v14 != (void *)v11[5]) {
          free(v14);
        }
        operator delete(v11);
        uint64_t v11 = v13;
      }
      while (v13);
    }
    unint64_t v12 = (void *)v22;
    *(void *)&long long v22 = 0;
    if (v12) {
      operator delete(v12);
    }
    uint64_t v5 = (gdc::ResourceManager *)((char *)v5 + 24);
  }
  while (v5 != a2);
}

void gdc::ConsistentZTileSelector::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "Consistent Z Tile Selector");
  std::string::__init_copy_ctor_external((std::string *)a2, v4, 0x1AuLL);
  *(unsigned char *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  operator delete(v4);
  v16[23] = 8;
  strcpy(v16, "Lod Bias");
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  int v15 = 2;
  uint64_t v11 = v5;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v10);
  int v6 = *(_DWORD *)(a1 + 8);
  long double v7 = 1.98 - (*(double *)(a1 + 16) + *(double *)(a1 + 16));
  v16[23] = 17;
  strcpy(v16, "Desired Tile Area");
  memset(&v8[4], 0, 24);
  int v9 = 2;
  v8[2] = (double)(v6 * v6) * (0.00390625 * exp2(v7));
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v8);
}

void gdc::ConsistentZTileSelector::tilesInView(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v252 = *MEMORY[0x1E4F143B8];
  double v6 = *(double *)(a2 + 16);
  long double v7 = tan(*(double *)(a2 + 8) * 0.5 + 0.785398163);
  double v8 = log(v7);
  {
    gdc::ConsistentZTileSelector::minZ(gdc::CameraView const&)::groundPlane[0] = 0.0;
    unk_1E9595090 = 0;
    xmmword_1E9595098 = xmmword_1A28FFC60;
  }
  uint64_t v233 = *(uint64_t *)(a2 + 496);
  uint64_t v230 = *(uint64_t *)(a2 + 504);
  uint64_t v224 = *(uint64_t *)(a2 + 512);
  double v9 = *(double *)(a2 + 528);
  double v10 = *(double *)(a2 + 536);
  double v11 = *(double *)(a2 + 520);
  double v228 = (double *)a2;
  double v229 = (double *)(a2 + 984);
  double v12 = *(double *)(a2 + 544);
  geo::Intersect::intersection<double>((double **)__p, a2 + 984, gdc::ConsistentZTileSelector::minZ(gdc::CameraView const&)::groundPlane);
  if (__p[0] == __p[1])
  {
    double v22 = INFINITY;
    goto LABEL_12;
  }
  double v13 = -((v11 + v11) * v10 - v12 * (v9 * -2.0));
  double v14 = v9 * -2.0 * v10 + (v11 + v11) * v12;
  double v15 = -(v9 * -2.0 * v9 + 1.0 - (v11 + v11) * v11);
  unint64_t v16 = (char *)__p[1] - (char *)__p[0] - 24;
  if (v16 > 0x47)
  {
    unint64_t v23 = v16 / 0x18 + 1;
    double v20 = *(double *)&v230;
    double v19 = *(double *)&v233;
    float64x2_t v24 = (float64x2_t)vdupq_lane_s64(v233, 0);
    float64x2_t v25 = (float64x2_t)vdupq_lane_s64(v230, 0);
    double v21 = *(double *)&v224;
    float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v224, 0);
    float64x2_t v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0);
    float64x2_t v28 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0);
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    uint64_t v30 = (const double *)__p[0];
    uint64_t v31 = v23 & 0x1FFFFFFFFFFFFFFCLL;
    float64x2_t v32 = v29;
    do
    {
      uint64_t v33 = v30;
      v30 += 12;
      float64x2x3_t v253 = vld3q_f64(v33);
      v33 += 6;
      float64x2x3_t v254 = vld3q_f64(v33);
      float64x2_t v29 = vminnmq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v253.val[0], v24), v13), v27, vsubq_f64(v253.val[1], v25)), v28, vsubq_f64(v253.val[2], v26)), v29);
      float64x2_t v32 = vminnmq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v254.val[0], v24), v13), v27, vsubq_f64(v254.val[1], v25)), v28, vsubq_f64(v254.val[2], v26)), v32);
      v31 -= 4;
    }
    while (v31);
    double v17 = vminnmvq_f64(vminnmq_f64(v29, v32));
    if (v23 == (v23 & 0x1FFFFFFFFFFFFFFCLL)) {
      goto LABEL_11;
    }
    long long v18 = (double *)((char *)__p[0] + 24 * (v23 & 0x1FFFFFFFFFFFFFFCLL));
  }
  else
  {
    double v17 = 1.79769313e308;
    long long v18 = (double *)__p[0];
    double v20 = *(double *)&v230;
    double v19 = *(double *)&v233;
    double v21 = *(double *)&v224;
  }
  do
  {
    double v17 = fmin((*v18 - v19) * v13 + (v18[1] - v20) * v14 + (v18[2] - v21) * v15, v17);
    v18 += 3;
  }
  while (v18 != __p[1]);
LABEL_11:
  double v22 = v17 + v17;
LABEL_12:
  double v34 = v6 * 0.159154943 + 0.5;
  double v35 = v8 * 0.159154943 + 0.5;
  double v36 = *(double *)(a2 + 960);
  double v37 = *(double *)(a2 + 944);
  double v38 = *(double *)(a2 + 368);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  double v39 = log2(v38 * 0.001953125);
  long double v40 = tan(v36 * 0.5);
  float v41 = v39 - log2(v22 * v37 * v40);
  int v42 = (int)fmax(floorf(v41), 0.0);
  double v43 = (double)(1 << v42);
  unsigned int v44 = vcvtmd_s64_f64(v34 * v43);
  LODWORD(v43) = (1 << v42) + ~vcvtmd_s64_f64(v35 * v43);
  HIDWORD(v43) = v44;
  double v234 = v43;
  int v231 = *(_DWORD *)(a1 + 8);
  uint64_t v225 = a1;
  double v45 = exp2(1.98 - (*(double *)(a1 + 16) + *(double *)(a1 + 16)));
  int v46 = *(unsigned __int16 *)(a2 + 952);
  int v47 = *(unsigned __int16 *)(a2 + 954);
  *(_OWORD *)double v238 = 0u;
  *(_OWORD *)double v239 = 0u;
  int v240 = 1065353216;
  *(_OWORD *)double v235 = 0u;
  *(_OWORD *)double v236 = 0u;
  int v237 = 1065353216;
  int v48 = v235;
  if (!a3) {
    int v48 = 0;
  }
  uint64_t v223 = (uint64_t)v48;
  v250[0] = -1;
  v250[1] = v42;
  double v251 = v234;
  *(_OWORD *)std::string __p = 0uLL;
  long long v248 = 0uLL;
  long long v249 = 0uLL;
  unint64_t v49 = (void **)operator new(8uLL);
  *unint64_t v49 = operator new(0xFF0uLL);
  unint64_t v50 = (char *)(v49 + 1);
  char v51 = (char *)v248;
  if ((void *)v248 != __p[1])
  {
    uint64_t v52 = v49;
    std::string v53 = v49 + 1;
    while (v52 != v49)
    {
LABEL_19:
      long long v54 = (void *)*((void *)v51 - 1);
      v51 -= 8;
      *--uint64_t v52 = v54;
      if (v51 == __p[1]) {
        goto LABEL_42;
      }
    }
    if (v53 < (void **)v50)
    {
      uint64_t v55 = (v50 - (char *)v53) >> 3;
      if (v55 >= -1) {
        uint64_t v56 = v55 + 1;
      }
      else {
        uint64_t v56 = v55 + 2;
      }
      uint64_t v57 = v56 >> 1;
      uint64_t v52 = &v49[v56 >> 1];
      long long v58 = v49;
      if (v53 != v49)
      {
        memmove(v52, v49, (char *)v53 - (char *)v49);
        long long v58 = v53;
      }
      std::string v53 = &v58[v57];
      goto LABEL_19;
    }
    unint64_t v59 = (v50 - (char *)v49) >> 2;
    if (v50 == (char *)v49) {
      unint64_t v59 = 1;
    }
    if (v59 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v60 = (v59 + 3) >> 2;
    uint64_t v61 = v59;
    uint64_t v62 = (void **)operator new(8 * v59);
    uint64_t v63 = v62;
    uint64_t v52 = &v62[v60];
    unint64_t v50 = (char *)&v62[v61];
    int64_t v65 = (char *)v53 - (char *)v49;
    BOOL v64 = v53 == v49;
    std::string v53 = v52;
    if (!v64)
    {
      std::string v53 = (void **)((char *)v52 + (v65 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v66 = v65 - 8;
      std::string v67 = (char *)&v62[v60];
      int v68 = v49;
      if (v66 >= 0x38)
      {
        std::string v67 = (char *)&v62[v60];
        int v68 = v49;
        if ((unint64_t)(v67 - (char *)v49) >= 0x20)
        {
          uint64_t v69 = (v66 >> 3) + 1;
          uint64_t v70 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          std::string v67 = (char *)&v52[v70];
          long long v71 = (long long *)(v49 + 2);
          uint64_t v72 = (char *)&v62[v60 + 2];
          uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v74 = *v71;
            *((_OWORD *)v72 - 1) = *(v71 - 1);
            *(_OWORD *)uint64_t v72 = v74;
            v71 += 2;
            v72 += 32;
            v73 -= 4;
          }
          while (v73);
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_39;
          }
          int v68 = &v49[v70];
        }
      }
      do
      {
        uint64_t v75 = (uint64_t)*v68++;
        *(void *)std::string v67 = v75;
        v67 += 8;
      }
      while (v67 != (char *)v53);
    }
    if (!v49)
    {
LABEL_40:
      unint64_t v49 = v63;
      goto LABEL_19;
    }
LABEL_39:
    operator delete(v49);
    goto LABEL_40;
  }
  std::string v53 = v49 + 1;
  uint64_t v52 = v49;
LABEL_42:
  int v76 = __p[0];
  __p[0] = v49;
  __p[1] = v52;
  *(void *)&long long v248 = v53;
  *((void *)&v248 + 1) = v50;
  if (v76) {
    operator delete(v76);
  }
  uint64_t v77 = (uint64_t)*v52;
  if (v53 == v52) {
    int v78 = 0;
  }
  else {
    int v78 = (char *)*v52;
  }
  if (v53 == v52) {
    uint64_t v79 = -v77;
  }
  else {
    uint64_t v79 = 0;
  }
  uint64_t v80 = v79 / 24;
  if (v79 < -23)
  {
    unint64_t v85 = 168 - v80;
    int v82 = &v52[-((168 - v80) / 0xAAuLL)];
    double v83 = (char *)*v82;
    unint64_t v84 = 169 - v85 % 0xAA;
  }
  else
  {
    unint64_t v81 = v80 + 1;
    int v82 = &v52[(v80 + 1) / 0xAAuLL];
    double v83 = (char *)*v82;
    unint64_t v84 = v81 % 0xAA;
  }
  unint64_t v86 = &v83[24 * v84];
  if (v78 == v86)
  {
    uint64_t v87 = *((void *)&v249 + 1);
  }
  else
  {
    uint64_t v87 = 0;
    std::string v88 = v250;
    int v89 = v52;
    do
    {
      float64x2_t v90 = (char *)(v77 + 4080);
      if (v89 == v82) {
        float64x2_t v90 = v86;
      }
      if (v78 == v90)
      {
        float64x2_t v90 = v78;
      }
      else
      {
        float64x2_t v91 = v78;
        do
        {
          *(_WORD *)float64x2_t v91 = *(_WORD *)v88;
          *(void *)(v91 + 4) = *(void *)(v88 + 4);
          v88 += 24;
          v91 += 24;
        }
        while (v91 != v90);
      }
      v87 -= 0x5555555555555555 * ((v90 - v78) >> 3);
      if (v89 == v82) {
        break;
      }
      char v92 = (char *)v89[1];
      ++v89;
      uint64_t v77 = (uint64_t)v92;
      int v78 = v92;
    }
    while (v92 != v86);
    unint64_t v50 = (char *)*((void *)&v248 + 1);
  }
  double v241 = v49;
  double v242 = v52;
  double v243 = v53;
  uint64_t v244 = v50;
  uint64_t v246 = v87;
  if (v87)
  {
    unint64_t v93 = 0;
    double v94 = (double)(v231 * v231) * (0.00390625 * v45) / (double)(v47 * v46);
    do
    {
      float64x2_t v96 = (char *)v52[v93 / 0xAA];
      --v87;
      uint64_t v97 = v93 + 1;
      uint64_t v245 = v93 + 1;
      uint64_t v246 = v87;
      if (v93 + 1 >= 0x154)
      {
        float32x2_t v98 = *v52++;
        operator delete(v98);
        uint64_t v97 = v93 - 169;
        double v242 = v52;
        uint64_t v245 = v93 - 169;
      }
      unint64_t v99 = v93 % 0xAA;
      float64x2_t v100 = &v96[24 * (v93 % 0xAA)];
      char v102 = v100[1];
      float64x2_t v101 = v100 + 1;
      int v103 = 1 << v102;
      int v104 = *(_DWORD *)(v101 + 7);
      double v232 = (int *)(v101 + 7);
      double v105 = 1.0 / (double)(1 << v102);
      double v106 = v105 * (double)v104;
      int v107 = *(_DWORD *)(v101 + 3);
      double v108 = v105 * (double)((1 << v102) + ~v107);
      double v109 = v106 + v105;
      *(double *)std::string __p = v106;
      __p[1] = *(void **)&v108;
      *(void *)&long long v248 = 0;
      double v110 = v108 + v105;
      *((double *)&v248 + 1) = v106 + v105;
      *(double *)&long long v249 = v108 + v105;
      *((void *)&v249 + 1) = 0;
      if (geo::Intersect::encloses<double>(v229, (double *)__p))
      {
        double v111 = v228[103];
        double v112 = v111 * v109;
        double v113 = v228[107];
        double v114 = v228[115];
        double v115 = v114 + v111 * v109 + v113 * v110;
        double v116 = v228[104];
        double v117 = v116 * v109;
        double v118 = v228[108];
        double v119 = v228[116];
        double v120 = v119 + v116 * v109 + v118 * v110;
        double v121 = -v120;
        if (v115 >= -v120)
        {
          if (v115 <= v120) {
            int v122 = 0;
          }
          else {
            int v122 = 2;
          }
        }
        else
        {
          int v122 = 1;
        }
        double v123 = v228[101];
        double v124 = v123 * v109;
        double v125 = v228[105];
        double v126 = v125 * v110;
        double v127 = v228[113];
        double v128 = v127 + v123 * v109 + v125 * v110;
        if (v128 >= v121)
        {
          if (v128 > v120) {
            v122 |= 8u;
          }
        }
        else
        {
          v122 |= 4u;
        }
        double v129 = v228[102];
        double v130 = v129 * v109;
        double v131 = v228[106];
        double v132 = v131 * v110;
        double v133 = v228[114];
        double v134 = v133 + v130 + v131 * v110;
        if (v134 >= v121)
        {
          if (v134 > v120) {
            v122 |= 0x20u;
          }
        }
        else
        {
          v122 |= 0x10u;
        }
        double v135 = v111 * v106;
        double v136 = v114 + v111 * v106 + v113 * v110;
        double v137 = v116 * v106;
        double v138 = v119 + v116 * v106 + v118 * v110;
        double v139 = -v138;
        if (v136 >= -v138)
        {
          if (v136 <= v138) {
            int v140 = 0;
          }
          else {
            int v140 = 2;
          }
        }
        else
        {
          int v140 = 1;
        }
        double v141 = v123 * v106;
        double v142 = v127 + v123 * v106 + v126;
        if (v142 >= v139)
        {
          if (v142 > v138) {
            v140 |= 8u;
          }
        }
        else
        {
          v140 |= 4u;
        }
        double v143 = v129 * v106;
        double v144 = v133 + v129 * v106 + v132;
        if (v144 >= v139)
        {
          if (v144 > v138) {
            v140 |= 0x20u;
          }
        }
        else
        {
          v140 |= 0x10u;
        }
        double v145 = v113 * v108;
        double v146 = v113 * v108 + v114 + v112;
        double v147 = v118 * v108;
        double v148 = v147 + v119 + v117;
        double v149 = -v148;
        if (v146 >= -v148)
        {
          if (v146 <= v148) {
            int v150 = 0;
          }
          else {
            int v150 = 2;
          }
        }
        else
        {
          int v150 = 1;
        }
        double v151 = v125 * v108;
        double v152 = v151 + v127 + v124;
        if (v152 >= v149)
        {
          if (v152 > v148) {
            v150 |= 8u;
          }
        }
        else
        {
          v150 |= 4u;
        }
        double v153 = v131 * v108 + v133 + v130;
        if (v153 >= v149)
        {
          if (v153 > v148) {
            v150 |= 0x20u;
          }
        }
        else
        {
          v150 |= 0x10u;
        }
        double v154 = v145 + v135 + v114;
        double v155 = v147 + v137 + v119;
        double v156 = -v155;
        if (v154 >= -v155)
        {
          if (v154 <= v155) {
            int v157 = 0;
          }
          else {
            int v157 = 2;
          }
        }
        else
        {
          int v157 = 1;
        }
        double v158 = v151 + v141 + v127;
        if (v158 >= v156)
        {
          if (v158 > v155) {
            v157 |= 8u;
          }
        }
        else
        {
          v157 |= 4u;
        }
        double v159 = v131 * v108 + v143 + v133;
        if (v159 >= v156)
        {
          if (v159 > v155) {
            v157 |= 0x20u;
          }
        }
        else
        {
          v157 |= 0x10u;
        }
        if ((v140 & v122 & v150 & v157) == 0)
        {
          double v160 = 1.0 / v120;
          double v161 = v160 * v128;
          double v162 = v160 * v134;
          double v163 = 1.0 / v138;
          if (fabs(((v161 - 1.0 / v148 * v152) * (v163 * v144 - v162)+ (1.0 / v148 * v153 - v162) * (1.0 / v138 * v142 - v161))* 0.5)+ fabs(((1.0 / v138 * v142 - 1.0 / v155 * v158) * (1.0 / v148 * v153 - v163 * v144)+ -(v163 * v144 - 1.0 / v155 * v159) * (1.0 / v148 * v152 - 1.0 / v138 * v142))* 0.5) > v94)
          {
            float64x2x3_t v164 = (unsigned __int8 *)&v96[24 * v99];
            if (std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v238, v164))
            {
              if (a3 && (v107 & 0x80000000) == 0 && v104 < v103) {
                std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(v223, v164, (uint64_t)v164);
              }
            }
            else
            {
              uint64_t v165 = v53 - v52;
              uint64_t v166 = 170 * v165 - 1;
              if (v53 == v52) {
                uint64_t v167 = 0;
              }
              else {
                uint64_t v167 = 170 * v165 - 1;
              }
              std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v238, v164, (uint64_t)v164);
              char v168 = *v101;
              uint64_t v169 = (int32x2_t *)(v101 + 3);
              int v170 = *(_DWORD *)(v101 + 3);
              int v171 = *v232;
              unint64_t v172 = v87 + v97;
              if (v167 == v87 + v97)
              {
                char v173 = *v101;
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v241);
                char v168 = v173;
                uint64_t v169 = (int32x2_t *)(v101 + 3);
                uint64_t v52 = v242;
                std::string v53 = v243;
                uint64_t v97 = v245;
                uint64_t v87 = v246;
                unint64_t v172 = v245 + v246;
                uint64_t v166 = 170 * (v243 - v242) - 1;
              }
              unint64_t v174 = (unint64_t)v52[v172 / 0xAA] + 24 * (v172 % 0xAA);
              *(unsigned char *)unint64_t v174 = -1;
              *(unsigned char *)(v174 + 1) = v168;
              *(_DWORD *)(v174 + 4) = v170;
              *(_DWORD *)(v174 + 8) = v171 + 1;
              uint64_t v175 = v87 + 1;
              uint64_t v246 = v87 + 1;
              char v176 = *v101;
              int32x2_t v177 = *v169;
              unint64_t v178 = v97 + v87 + 1;
              if (v166 == v178)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v241);
                uint64_t v169 = (int32x2_t *)(v101 + 3);
                uint64_t v52 = v242;
                std::string v53 = v243;
                uint64_t v97 = v245;
                uint64_t v175 = v246;
                unint64_t v178 = v245 + v246;
                uint64_t v166 = 170 * (v243 - v242) - 1;
              }
              unint64_t v179 = (unint64_t)v52[v178 / 0xAA] + 24 * (v178 % 0xAA);
              *(unsigned char *)unint64_t v179 = -1;
              *(unsigned char *)(v179 + 1) = v176;
              *(int32x2_t *)(v179 + 4) = vadd_s32(v177, (int32x2_t)0x100000001);
              uint64_t v180 = v175 + 1;
              uint64_t v246 = v180;
              char v181 = *v101;
              __int32 v182 = v169->i32[0];
              int v183 = *v232;
              unint64_t v184 = v97 + v180;
              if (v166 == v97 + v180)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v241);
                uint64_t v169 = (int32x2_t *)(v101 + 3);
                uint64_t v52 = v242;
                std::string v53 = v243;
                uint64_t v97 = v245;
                uint64_t v180 = v246;
                unint64_t v184 = v245 + v246;
                uint64_t v166 = 170 * (v243 - v242) - 1;
              }
              unint64_t v185 = (unint64_t)v52[v184 / 0xAA] + 24 * (v184 % 0xAA);
              *(unsigned char *)unint64_t v185 = -1;
              *(unsigned char *)(v185 + 1) = v181;
              *(_DWORD *)(v185 + 4) = v182 + 1;
              *(_DWORD *)(v185 + 8) = v183;
              uint64_t v186 = v180 + 1;
              uint64_t v246 = v186;
              char v187 = *v101;
              int32x2_t v188 = *v169;
              unint64_t v189 = v97 + v186;
              if (v166 == v97 + v186)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v241);
                uint64_t v169 = (int32x2_t *)(v101 + 3);
                uint64_t v52 = v242;
                std::string v53 = v243;
                uint64_t v97 = v245;
                uint64_t v186 = v246;
                unint64_t v189 = v245 + v246;
                uint64_t v166 = 170 * (v243 - v242) - 1;
              }
              unint64_t v190 = (unint64_t)v52[v189 / 0xAA] + 24 * (v189 % 0xAA);
              *(unsigned char *)unint64_t v190 = -1;
              *(unsigned char *)(v190 + 1) = v187;
              *(int32x2_t *)(v190 + 4) = vadd_s32(v188, (int32x2_t)0xFFFFFFFF00000001);
              uint64_t v191 = v186 + 1;
              uint64_t v246 = v191;
              char v192 = *v101;
              __int32 v193 = v169->i32[0];
              int v194 = *v232;
              unint64_t v195 = v97 + v191;
              if (v166 == v97 + v191)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v241);
                uint64_t v169 = (int32x2_t *)(v101 + 3);
                uint64_t v52 = v242;
                std::string v53 = v243;
                uint64_t v97 = v245;
                uint64_t v191 = v246;
                unint64_t v195 = v245 + v246;
                uint64_t v166 = 170 * (v243 - v242) - 1;
              }
              unint64_t v196 = (unint64_t)v52[v195 / 0xAA] + 24 * (v195 % 0xAA);
              *(unsigned char *)unint64_t v196 = -1;
              *(unsigned char *)(v196 + 1) = v192;
              *(_DWORD *)(v196 + 4) = v193;
              *(_DWORD *)(v196 + 8) = v194 - 1;
              uint64_t v197 = v191 + 1;
              uint64_t v246 = v197;
              char v198 = *v101;
              int32x2_t v199 = *v169;
              unint64_t v200 = v97 + v197;
              if (v166 == v97 + v197)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v241);
                uint64_t v169 = (int32x2_t *)(v101 + 3);
                uint64_t v52 = v242;
                std::string v53 = v243;
                uint64_t v97 = v245;
                uint64_t v197 = v246;
                unint64_t v200 = v245 + v246;
                uint64_t v166 = 170 * (v243 - v242) - 1;
              }
              unint64_t v201 = (unint64_t)v52[v200 / 0xAA] + 24 * (v200 % 0xAA);
              *(unsigned char *)unint64_t v201 = -1;
              *(unsigned char *)(v201 + 1) = v198;
              *(int32x2_t *)(v201 + 4) = vadd_s32(v199, (int32x2_t)-1);
              uint64_t v202 = v197 + 1;
              uint64_t v246 = v202;
              char v203 = *v101;
              __int32 v204 = v169->i32[0];
              int v205 = *v232;
              unint64_t v206 = v97 + v202;
              if (v166 == v97 + v202)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v241);
                uint64_t v169 = (int32x2_t *)(v101 + 3);
                uint64_t v52 = v242;
                std::string v53 = v243;
                uint64_t v97 = v245;
                uint64_t v202 = v246;
                unint64_t v206 = v245 + v246;
                uint64_t v166 = 170 * (v243 - v242) - 1;
              }
              unint64_t v207 = (unint64_t)v52[v206 / 0xAA] + 24 * (v206 % 0xAA);
              *(unsigned char *)unint64_t v207 = -1;
              *(unsigned char *)(v207 + 1) = v203;
              *(_DWORD *)(v207 + 4) = v204 - 1;
              *(_DWORD *)(v207 + 8) = v205;
              uint64_t v208 = v202 + 1;
              uint64_t v246 = v208;
              char v209 = *v101;
              int32x2_t v210 = *v169;
              unint64_t v211 = v97 + v208;
              if (v166 == v97 + v208)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v241);
                uint64_t v52 = v242;
                std::string v53 = v243;
                uint64_t v97 = v245;
                uint64_t v208 = v246;
                unint64_t v211 = v245 + v246;
              }
              unint64_t v95 = (unint64_t)v52[v211 / 0xAA] + 24 * (v211 % 0xAA);
              *(unsigned char *)unint64_t v95 = -1;
              *(unsigned char *)(v95 + 1) = v209;
              *(int32x2_t *)(v95 + 4) = vadd_s32(v210, (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v87 = v208 + 1;
              uint64_t v246 = v208 + 1;
            }
          }
        }
      }
      unint64_t v93 = v97;
    }
    while (v87);
  }
  unint64_t v212 = (char *)v53 - (char *)v52;
  if ((unint64_t)((char *)v53 - (char *)v52) < 0x11)
  {
    uint64_t v213 = v225;
  }
  else
  {
    uint64_t v213 = v225;
    do
    {
      long long v214 = *v52++;
      operator delete(v214);
      double v242 = v52;
      v212 -= 8;
    }
    while (v212 > 0x10);
  }
  while (v52 != v53)
  {
    uint64_t v215 = *v52++;
    operator delete(v215);
  }
  if (v241) {
    operator delete(v241);
  }
  int v216 = *(_DWORD *)(v213 + 8);
  *a4 = v216;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a4 + 2), (uint64_t)v238);
  a4[12] = v216;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a4 + 14), (uint64_t)v235);
  signed int v217 = v236[0];
  if (v236[0])
  {
    do
    {
      uint64_t v218 = (void *)*v217;
      operator delete(v217);
      signed int v217 = v218;
    }
    while (v218);
  }
  signed int v219 = v235[0];
  v235[0] = 0;
  if (v219) {
    operator delete(v219);
  }
  float64x2_t v220 = v239[0];
  if (v239[0])
  {
    do
    {
      signed int v221 = (void *)*v220;
      operator delete(v220);
      float64x2_t v220 = v221;
    }
    while (v221);
  }
  int32x2_t v222 = v238[0];
  v238[0] = 0;
  if (v222) {
    operator delete(v222);
  }
}

void gdc::ConsistentZTileSelector::~ConsistentZTileSelector(gdc::ConsistentZTileSelector *this)
{
}

unint64_t gdc::DataObject::getBytes(gdc::DataObject *this, void *a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (void *)*((void *)this + 2);
  if (!v4) {
    return 0;
  }
  [v4 getBytes:a2 length:a3];
  unint64_t result = gdc::DataObject::length((id *)this);
  if (result >= a3) {
    return a3;
  }
  return result;
}

void gdc::DataObject::~DataObject(gdc::DataObject *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;

  *((void *)this + 1) = &unk_1EF559D98;
  MEMORY[0x1A6239270](this, 0x81C402512154ALL);
}

{
  void *v2;

  uint64_t v2 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;

  *((void *)this + 1) = &unk_1EF559D98;
}

double gdc::GlobeTileSelector::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double std::vector<gm::Matrix<double,3,1>>::__insert_with_size[abi:nn180100]<gm::Matrix<double,3,1> const*,gm::Matrix<double,3,1> const*>(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v5 = (char *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = -*a1 / 24;
  double v8 = (_OWORD *)(*a1 + 24 * v7);
  uint64_t v9 = a1[2];
  if ((uint64_t)(v9 - v6) >= 192)
  {
    uint64_t v14 = v6 - (void)v8;
    if ((uint64_t)(v6 - (void)v8) > 191)
    {
      unint64_t v15 = a2 + 192;
      unint64_t v17 = a1[1];
    }
    else
    {
      unint64_t v15 = a2 + v14;
      if (a2 + v14 == a3)
      {
        unint64_t v17 = a1[1];
      }
      else
      {
        unint64_t v16 = a2 + v14;
        unint64_t v17 = a1[1];
        do
        {
          long long v18 = *(_OWORD *)v16;
          *(void *)(v17 + 16) = *(void *)(v16 + 16);
          *(_OWORD *)unint64_t v17 = v18;
          v17 += 24;
          v16 += 24;
        }
        while (v16 != a3);
      }
      a1[1] = v17;
      if (v14 < 1) {
        return *(double *)&v18;
      }
    }
    unint64_t v27 = v17 - (void)(v8 + 12);
    unint64_t v28 = v17 - 192;
    unint64_t v29 = v17;
    if (v17 - 192 < v6)
    {
      unint64_t v30 = v17 - 192;
      unint64_t v29 = v17;
      do
      {
        long long v18 = *(_OWORD *)v30;
        *(void *)(v29 + 16) = *(void *)(v30 + 16);
        *(_OWORD *)unint64_t v29 = v18;
        v29 += 24;
        v30 += 24;
      }
      while (v30 < v6);
    }
    a1[1] = v29;
    if ((_OWORD *)v17 != v8 + 12)
    {
      if (v27 - 24 < 0x138
        || ((unint64_t v31 = (v27 - 24) / 0x18,
             unint64_t v32 = (unint64_t)&v5[v27 + 24 * v7 - 24 * v31 - 24],
             v17 - 24 * v31 - 24 < v28)
          ? (BOOL v33 = v32 >= v17)
          : (BOOL v33 = 1),
            !v33))
      {
        unint64_t v35 = v17;
LABEL_45:
        double v39 = (void *)(v35 - 8);
        do
        {
          uint64_t v40 = *(void *)(v28 - 24);
          v28 -= 24;
          *(v39 - 2) = v40;
          *(v39 - 1) = *(void *)(v28 + 8);
          *(void *)&long long v18 = *(void *)(v28 + 16);
          void *v39 = v18;
          v39 -= 3;
        }
        while ((_OWORD *)v28 != v8);
        goto LABEL_47;
      }
      unint64_t v34 = v31 + 1;
      unint64_t v35 = v17 - 24 * (v34 & 0x1FFFFFFFFFFFFFFELL);
      double v36 = (const double *)(v17 - 240);
      double v37 = (double *)(v17 - 48);
      uint64_t v38 = v34 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(float64x2x3_t *)&long long v18 = vld3q_f64(v36);
        vst3q_f64(v37, *(float64x2x3_t *)&v18);
        v37 -= 6;
        v36 -= 6;
        v38 -= 2;
      }
      while (v38);
      if (v34 != (v34 & 0x1FFFFFFFFFFFFFFELL))
      {
        v28 -= 24 * (v34 & 0x1FFFFFFFFFFFFFFELL);
        goto LABEL_45;
      }
    }
LABEL_47:
    if (v15 == a2) {
      return *(double *)&v18;
    }
    unint64_t v41 = v15 - a2 - 24;
    if (v41 >= 0x138)
    {
      unint64_t v43 = v41 / 0x18;
      if ((unint64_t)v8 < a2 + 24 * v43 + 24 && (unint64_t)&v5[24 * v7 + 24 + 24 * v43] > a2)
      {
        int v42 = v8;
      }
      else
      {
        unint64_t v45 = v43 + 1;
        uint64_t v46 = (v43 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        int v42 = (void *)v8 + 3 * v46;
        int v47 = (_OWORD *)a2;
        uint64_t v48 = v46;
        do
        {
          long long v18 = v47[1];
          long long v50 = v47[4];
          long long v49 = v47[5];
          long long v51 = v47[2];
          long long v52 = v47[3];
          *double v8 = *v47;
          v8[1] = v18;
          v8[2] = v51;
          v8[3] = v52;
          v47 += 6;
          v8[4] = v50;
          v8[5] = v49;
          v8 += 6;
          v48 -= 4;
        }
        while (v48);
        if (v45 == v46) {
          return *(double *)&v18;
        }
        unint64_t v3 = a2 + 24 * v46;
      }
    }
    else
    {
      int v42 = v8;
    }
    do
    {
      *int v42 = *(void *)v3;
      v42[1] = *(void *)(v3 + 8);
      *(void *)&long long v18 = *(void *)(v3 + 16);
      v42[2] = v18;
      v3 += 24;
      v42 += 3;
    }
    while (v3 != v15);
    return *(double *)&v18;
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 3) + 8;
  if (v10 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v5) >> 3);
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0x555555555555555) {
    unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    double v13 = (char *)operator new(24 * v12);
  }
  else
  {
    double v13 = 0;
  }
  double v19 = &v13[24 * v7];
  *(_OWORD *)double v19 = *(_OWORD *)v3;
  *((void *)v19 + 2) = *(void *)(v3 + 16);
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(v3 + 24);
  *((void *)v19 + 5) = *(void *)(v3 + 40);
  *((_OWORD *)v19 + 3) = *(_OWORD *)(v3 + 48);
  *((void *)v19 + 8) = *(void *)(v3 + 64);
  *((void *)v19 + 11) = *(void *)(v3 + 88);
  *(_OWORD *)(v19 + 72) = *(_OWORD *)(v3 + 72);
  long long v20 = *(_OWORD *)(v3 + 96);
  *((void *)v19 + 14) = *(void *)(v3 + 112);
  *((_OWORD *)v19 + 6) = v20;
  *((void *)v19 + 17) = *(void *)(v3 + 136);
  *(_OWORD *)(v19 + 120) = *(_OWORD *)(v3 + 120);
  *((void *)v19 + 20) = *(void *)(v3 + 160);
  *((_OWORD *)v19 + 9) = *(_OWORD *)(v3 + 144);
  *((void *)v19 + 23) = *(void *)(v3 + 184);
  long long v18 = *(_OWORD *)(v3 + 168);
  double v21 = v19 + 192;
  *(_OWORD *)(v19 + 168) = v18;
  if ((unint64_t)(v5 + 23) >= 0x2F)
  {
    uint64_t v22 = 24 * v7;
    unint64_t v23 = v5 - 24;
    do
    {
      float64x2_t v24 = &v13[v22];
      long long v18 = *(_OWORD *)&v23[v22];
      *((void *)v24 - 1) = *(void *)&v23[v22 + 16];
      *(_OWORD *)(v24 - 24) = v18;
      v22 -= 24;
    }
    while (v22);
    double v19 = v13;
    unint64_t v6 = a1[1];
  }
  for (i = &v13[24 * v12]; v8 != (_OWORD *)v6; double v8 = (_OWORD *)((char *)v8 + 24))
  {
    long long v18 = *v8;
    *((void *)v21 + 2) = *((void *)v8 + 2);
    *(_OWORD *)double v21 = v18;
    v21 += 24;
  }
  float64x2_t v26 = (char *)*a1;
  *a1 = v19;
  a1[1] = v21;
  a1[2] = i;
  if (v26)
  {
    operator delete(v26);
  }
  return *(double *)&v18;
}

double geo::OrientedBox<double,3u,double,double>::pointAt(double *a1, double *a2)
{
  double v3 = a1[10];
  double v4 = a1[7];
  if (v3 >= v4 && (double v5 = a1[11], v6 = a1[8], v5 >= v6) && (v7 = a1[12], v8 = a1[9], v7 >= v8))
  {
    double v9 = v4 + *a2 * (v3 - v4);
    double v10 = v6 + a2[1] * (v5 - v6);
    double v11 = v8 + a2[2] * (v7 - v8);
  }
  else
  {
    memset_pattern16(__b, &unk_1A28FFCE0, 0x18uLL);
    double v9 = *(double *)__b;
    double v10 = *(double *)&__b[1];
    double v11 = *(double *)&__b[2];
  }
  double v12 = a1[4];
  double v13 = a1[5];
  double v14 = a1[3];
  return *a1
       + v9
       + (-(v12 * v9 - v14 * v10) - (v12 * v9 - v14 * v10)) * v12
       + (-(v13 * v10 - v12 * v11) - (v13 * v10 - v12 * v11)) * a1[6]
       - (-(v14 * v11 - v13 * v9) - (v14 * v11 - v13 * v9)) * v13;
}

void gdc::GlobeTileSelector::~GlobeTileSelector(gdc::GlobeTileSelector *this)
{
  gdc::GlobeTileSelector::~GlobeTileSelector(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;
  gdc::GlobeTileSelector *v4;
  gdc::GlobeTileSelector *v5;
  gdc::GlobeTileSelector *v6;
  gdc::GlobeTileSelector *v7;
  uint64_t v8;
  uint64_t v9;
  gdc::GlobeTileSelector *v10;
  void *v11;
  void *v12;
  void *v13;
  gdc::GlobeTileSelector *v14;
  uint64_t v15;
  uint64_t v16;
  gdc::GlobeTileSelector *v17;
  void *v18;
  void *v19;
  void *v20;
  gdc::GlobeTileSelector *v21;
  uint64_t v22;
  uint64_t v23;
  gdc::GlobeTileSelector *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  *(void *)this = &unk_1EF555200;
  uint64_t v2 = (char *)this + 400;
  double v3 = (char *)*((void *)this + 53);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  double v4 = (gdc::GlobeTileSelector *)*((void *)this + 49);
  if (v4 == (gdc::GlobeTileSelector *)((char *)this + 368))
  {
    (*(void (**)(char *))(*((void *)this + 46) + 32))((char *)this + 368);
    if (!*((unsigned char *)this + 352)) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v4) {
      (*(void (**)(gdc::GlobeTileSelector *))(*(void *)v4 + 40))(v4);
    }
    if (!*((unsigned char *)this + 352))
    {
LABEL_14:
      if (!*((unsigned char *)this + 312)) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }
  }
  double v5 = (gdc::GlobeTileSelector *)*((void *)this + 43);
  if (v5 != (gdc::GlobeTileSelector *)((char *)this + 320))
  {
    if (v5) {
      (*(void (**)(gdc::GlobeTileSelector *))(*(void *)v5 + 40))(v5);
    }
    goto LABEL_14;
  }
  (*(void (**)(char *))(*((void *)this + 40) + 32))((char *)this + 320);
  if (!*((unsigned char *)this + 312)) {
    goto LABEL_21;
  }
LABEL_15:
  double v6 = (gdc::GlobeTileSelector *)*((void *)this + 38);
  if (v6 == (gdc::GlobeTileSelector *)((char *)this + 280))
  {
    (*(void (**)(char *))(*((void *)this + 35) + 32))((char *)this + 280);
  }
  else if (v6)
  {
    (*(void (**)(gdc::GlobeTileSelector *))(*(void *)v6 + 40))(v6);
  }
LABEL_21:
  if (*((void *)this + 33))
  {
    double v8 = *((void *)this + 31);
    double v7 = (gdc::GlobeTileSelector *)*((void *)this + 32);
    double v9 = *(void *)v7;
    *(void *)(v9 + 8) = *(void *)(v8 + 8);
    **(void **)(v8 + 8) = v9;
    *((void *)this + 33) = 0;
    if (v7 != (gdc::GlobeTileSelector *)((char *)this + 248))
    {
      do
      {
        double v10 = (gdc::GlobeTileSelector *)*((void *)v7 + 1);
        operator delete(v7);
        double v7 = v10;
      }
      while (v10 != (gdc::GlobeTileSelector *)((char *)this + 248));
    }
  }
  double v11 = (void *)*((void *)this + 28);
  if (v11)
  {
    do
    {
      double v12 = (void *)*v11;
      operator delete(v11);
      double v11 = v12;
    }
    while (v12);
  }
  double v13 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v13) {
    operator delete(v13);
  }
  if (*((void *)this + 24))
  {
    unint64_t v15 = *((void *)this + 22);
    double v14 = (gdc::GlobeTileSelector *)*((void *)this + 23);
    unint64_t v16 = *(void *)v14;
    *(void *)(v16 + 8) = *(void *)(v15 + 8);
    **(void **)(v15 + 8) = v16;
    *((void *)this + 24) = 0;
    if (v14 != (gdc::GlobeTileSelector *)((char *)this + 176))
    {
      do
      {
        unint64_t v17 = (gdc::GlobeTileSelector *)*((void *)v14 + 1);
        operator delete(v14);
        double v14 = v17;
      }
      while (v17 != (gdc::GlobeTileSelector *)((char *)this + 176));
    }
  }
  long long v18 = (void *)*((void *)this + 19);
  if (v18)
  {
    do
    {
      double v19 = (void *)*v18;
      operator delete(v18);
      long long v18 = v19;
    }
    while (v19);
  }
  long long v20 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v20) {
    operator delete(v20);
  }
  if (*((void *)this + 15))
  {
    uint64_t v22 = *((void *)this + 13);
    double v21 = (gdc::GlobeTileSelector *)*((void *)this + 14);
    unint64_t v23 = *(void *)v21;
    *(void *)(v23 + 8) = *(void *)(v22 + 8);
    **(void **)(v22 + 8) = v23;
    *((void *)this + 15) = 0;
    if (v21 != (gdc::GlobeTileSelector *)((char *)this + 104))
    {
      do
      {
        float64x2_t v24 = (gdc::GlobeTileSelector *)*((void *)v21 + 1);
        operator delete(v21);
        double v21 = v24;
      }
      while (v24 != (gdc::GlobeTileSelector *)((char *)this + 104));
    }
  }
  float64x2_t v25 = (void *)*((void *)this + 10);
  if (v25)
  {
    do
    {
      float64x2_t v26 = (void *)*v25;
      operator delete(v25);
      float64x2_t v25 = v26;
    }
    while (v26);
  }
  unint64_t v27 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v27) {
    operator delete(v27);
  }
  unint64_t v28 = (void *)*((void *)this + 3);
  if (v28)
  {
    *((void *)this + 4) = v28;
    operator delete(v28);
  }
}

uint64_t gdc::GlobeTileSelector::GlobeTileSelector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = 256;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF555200;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 1024;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(void *)(a1 + 104) = a1 + 104;
  *(void *)(a1 + 112) = a1 + 104;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FEE70;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(void *)(a1 + 176) = a1 + 176;
  *(void *)(a1 + 184) = a1 + 176;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = xmmword_1A28FEE70;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(void *)(a1 + 248) = a1 + 248;
  *(void *)(a1 + 256) = a1 + 248;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 1638656;
  *(unsigned char *)(a1 + 276) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 360) = 0;
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5)
  {
    *(void *)(a1 + 392) = 0;
    uint64_t v6 = *(void *)(a3 + 24);
    if (v6) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  if (v5 == a2)
  {
    *(void *)(a1 + 392) = a1 + 368;
    (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1 + 368);
    uint64_t v6 = *(void *)(a3 + 24);
    if (v6) {
      goto LABEL_6;
    }
LABEL_9:
    *(void *)(a1 + 424) = 0;
    return a1;
  }
  *(void *)(a1 + 392) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v6 = *(void *)(a3 + 24);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_6:
  if (v6 == a3)
  {
    *(void *)(a1 + 424) = a1 + 400;
    (*(void (**)(void))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24));
  }
  else
  {
    *(void *)(a1 + 424) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  return a1;
}

void gdc::LayerDataKey::createDebugNode(uint64_t a1, unsigned __int16 *a2)
{
  strcpy((char *)a1, "Layer Data Key");
  *(_WORD *)(a1 + 23) = 14;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(unsigned char *)(a1 + 95) = 0;
  char v17 = 9;
  strcpy(v16, "Data Type");
  uint64_t v4 = *a2;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 1;
  uint64_t v12 = 0;
  uint64_t v11 = v4;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v16, (uint64_t)v10);
  char v17 = 5;
  strcpy(v16, "Value");
  gdc::LayerDataKey::keysInt32Str(&v6, a2);
  memset(&__p, 0, sizeof(__p));
  int v9 = 4;
  int v5 = SHIBYTE(v6.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__assign_no_alias<true>(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v16, (uint64_t)v7);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v5 & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v5 < 0) {
    goto LABEL_8;
  }
}

std::string *gdc::Registry::stringForComponentTypeId(std::string *this, int8x8_t *a2, unint64_t a3)
{
  double v3 = (std::string::__raw *)this;
  int8x8_t v4 = a2[16];
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a3;
      if (*(void *)&v4 <= a3) {
        unint64_t v6 = a3 % *(void *)&v4;
      }
    }
    else
    {
      unint64_t v6 = (*(void *)&v4 - 1) & a3;
    }
    double v7 = *(void **)(*(void *)&a2[15] + 8 * v6);
    if (v7)
    {
      double v8 = (void *)*v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          uint64_t v9 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v11 = v8[1];
            if (v11 == a3)
            {
              if (v8[2] == a3) {
                goto LABEL_24;
              }
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_21;
            }
            double v8 = (void *)*v8;
            if (!v8) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v10 = v8[1];
          if (v10 == a3)
          {
            if (v8[2] == a3)
            {
LABEL_24:
              uint64_t v12 = v8[3];
              size_t v13 = *(void *)(v12 + 24);
              if (v13 >= 0x7FFFFFFFFFFFFFF8) {
                abort();
              }
              uint64_t v14 = *(const void **)(v12 + 16);
              if (v13 >= 0x17)
              {
                uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v13 | 7) != 0x17) {
                  uint64_t v15 = v13 | 7;
                }
                uint64_t v16 = v15 + 1;
                char v17 = (std::string::__raw *)operator new(v15 + 1);
                v3->__words[1] = v13;
                v3->__words[2] = v16 | 0x8000000000000000;
                v3->__words[0] = (std::string::size_type)v17;
                double v3 = v17;
              }
              else
              {
                *((unsigned char *)&this->__r_.__value_.__s + 23) = v13;
                if (!v13)
                {
LABEL_32:
                  *((unsigned char *)v3->__words + v13) = 0;
                  return this;
                }
              }
              this = (std::string *)memmove(v3, v14, v13);
              goto LABEL_32;
            }
          }
          else
          {
            if (v10 >= *(void *)&v4) {
              v10 %= *(void *)&v4;
            }
            if (v10 != v6) {
              break;
            }
          }
          double v8 = (void *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_21:
  return std::to_string(this, a3);
}

void gdc::Timer::shutdown(gdc::Timer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  double v3 = *((void *)this + 10);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*((dispatch_object_t *)this + 10));
    *((void *)this + 10) = 0;
    *((unsigned char *)this + 96) = 0;
    *((void *)this + 1) = 0xBFF0000000000000;
  }
  std::mutex::unlock(v2);
}

void gdc::Timer::start(gdc::Timer *this, double a2, double a3)
{
  unint64_t v6 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((void *)this + 10))
  {
    *((unsigned char *)this + 96) = 1;
    *((double *)this + 1) = a3;
    *((CFAbsoluteTime *)this + 11) = CFAbsoluteTimeGetCurrent() + a2;
    double v7 = *((void *)this + 10);
    dispatch_time_t v8 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
    dispatch_source_set_timer(v7, v8, (unint64_t)(a3 * 1000000000.0), 0xF4240uLL);
  }
  std::mutex::unlock(v6);
}

uint64_t ___ZN3gdc5Timer16setTimerCallbackENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (v3 == a1 + 40)
    {
      double v7 = v6;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v3, v6);
    }
    else
    {
      double v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    double v7 = 0;
  }
  std::mutex::lock((std::mutex *)(v2 + 16));
  double v4 = *(double *)(v2 + 8);
  if (v4 <= 0.0) {
    *(unsigned char *)(v2 + 96) = 0;
  }
  else {
    *(CFAbsoluteTime *)(v2 + 88) = CFAbsoluteTimeGetCurrent() + v4;
  }
  std::mutex::unlock((std::mutex *)(v2 + 16));
  if (!v7) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(void *))(*v7 + 48))(v7);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v7) {
    return (*(uint64_t (**)(void))(*v7 + 40))();
  }
  return result;
}

uint64_t __destroy_helper_block_8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 40;
  uint64_t result = *(void *)(a1 + 64);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void gdc::Timer::~Timer(gdc::Timer *this)
{
  *(void *)this = &unk_1EF558F00;
  uint64_t v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*((dispatch_object_t *)this + 10));
    *((void *)this + 10) = 0;
    *((unsigned char *)this + 96) = 0;
    *((void *)this + 1) = 0xBFF0000000000000;
  }
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
  JUMPOUT(0x1A6239270);
}

{
  std::mutex *v2;
  NSObject *v3;

  *(void *)this = &unk_1EF558F00;
  uint64_t v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*((dispatch_object_t *)this + 10));
    *((void *)this + 10) = 0;
    *((unsigned char *)this + 96) = 0;
    *((void *)this + 1) = 0xBFF0000000000000;
  }
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
}

uint64_t ___ZN3gdc5TimerC2EP16dispatch_queue_sNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (v3 == a1 + 40)
    {
      double v7 = v6;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v3, v6);
    }
    else
    {
      double v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    double v7 = 0;
  }
  std::mutex::lock((std::mutex *)(v2 + 16));
  double v4 = *(double *)(v2 + 8);
  if (v4 <= 0.0) {
    *(unsigned char *)(v2 + 96) = 0;
  }
  else {
    *(CFAbsoluteTime *)(v2 + 88) = CFAbsoluteTimeGetCurrent() + v4;
  }
  std::mutex::unlock((std::mutex *)(v2 + 16));
  if (!v7) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(void *))(*v7 + 48))(v7);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v7) {
    return (*(uint64_t (**)(void))(*v7 + 40))();
  }
  return result;
}

void gdc::Statistics::~Statistics(gdc::Statistics *this)
{
  gdc::Statistics::~Statistics(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  *(void *)this = &unk_1EF554EC0;
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    do
    {
      double v7 = (void *)*v2;
      v2[4] = &unk_1EF558F50;
      uint64_t v8 = v2[13];
      v2[13] = 0;
      if (v8) {
        MEMORY[0x1A6239270](v8, 0x1000C4000313F17);
      }
      if (*((unsigned char *)v2 + 88)) {
        *((unsigned char *)v2 + 88) = 0;
      }
      uint64_t v9 = (void *)v2[8];
      if (v9)
      {
        do
        {
          unint64_t v10 = (void *)*v9;
          operator delete(v9);
          uint64_t v9 = v10;
        }
        while (v10);
      }
      uint64_t v11 = (void *)v2[6];
      v2[6] = 0;
      if (v11) {
        operator delete(v11);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    do
    {
      uint8x8_t v5 = (void *)*v4;
      operator delete(v4);
      double v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6) {
    operator delete(v6);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void gdc::Statistics::reset(gdc::Statistics *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  if (*((void *)this + 12))
  {
    uint64_t v3 = (void *)*((void *)this + 11);
    if (v3)
    {
      do
      {
        double v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    *((void *)this + 11) = 0;
    uint64_t v5 = *((void *)this + 10);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*((void *)this + 9) + 8 * i) = 0;
    }
    *((void *)this + 12) = 0;
  }
  if (*((void *)this + 17))
  {
    double v7 = (void *)*((void *)this + 16);
    if (v7)
    {
      do
      {
        unint64_t v10 = (void *)*v7;
        v7[4] = &unk_1EF558F50;
        uint64_t v11 = v7[13];
        v7[13] = 0;
        if (v11) {
          MEMORY[0x1A6239270](v11, 0x1000C4000313F17);
        }
        if (*((unsigned char *)v7 + 88)) {
          *((unsigned char *)v7 + 88) = 0;
        }
        uint64_t v12 = (void *)v7[8];
        if (v12)
        {
          do
          {
            size_t v13 = (void *)*v12;
            operator delete(v12);
            uint64_t v12 = v13;
          }
          while (v13);
        }
        uint64_t v14 = (void *)v7[6];
        v7[6] = 0;
        if (v14) {
          operator delete(v14);
        }
        operator delete(v7);
        double v7 = v10;
      }
      while (v10);
    }
    *((void *)this + 16) = 0;
    uint64_t v8 = *((void *)this + 15);
    if (v8)
    {
      for (uint64_t j = 0; j != v8; ++j)
        *(void *)(*((void *)this + 14) + 8 * j) = 0;
    }
    *((void *)this + 17) = 0;
  }
  std::mutex::unlock(v2);
}

void gdc::Statistics::getAllSamplers(gdc::Statistics *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  double v4 = (std::mutex *)(a2 + 8);
  std::mutex::lock((std::mutex *)(a2 + 8));
  unint64_t v5 = *(void *)(a2 + 96);
  uint64_t v22 = v4;
  if (!v5)
  {
    double v7 = 0;
    uint64_t v8 = *(uint64_t **)(a2 + 88);
    if (!v8) {
      goto LABEL_24;
    }
LABEL_6:
    uint64_t v9 = v7;
    while (1)
    {
      uint64_t v11 = v8[2];
      unint64_t v12 = *((void *)this + 2);
      if ((unint64_t)v9 < v12)
      {
        *(void *)uint64_t v9 = v11;
        *(_OWORD *)(v9 + 8) = *((_OWORD *)v8 + 2);
        *(_OWORD *)(v9 + 24) = *((_OWORD *)v8 + 3);
        *((void *)v9 + 5) = v8[8];
        unint64_t v10 = v9 + 48;
      }
      else
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 4) + 1;
        if (v13 > 0x555555555555555) {
          goto LABEL_27;
        }
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v7) >> 4);
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v15 = 0x555555555555555;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15 > 0x555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v16 = 48 * v15;
        char v17 = (char *)operator new(48 * v15);
        long long v18 = &v17[16 * ((v9 - v7) >> 4)];
        *(void *)long long v18 = v11;
        *(_OWORD *)(v18 + 8) = *((_OWORD *)v8 + 2);
        *(_OWORD *)(v18 + 24) = *((_OWORD *)v8 + 3);
        *((void *)v18 + 5) = v8[8];
        double v19 = *(char **)this;
        if (v9 == *(char **)this)
        {
          double v7 = &v17[16 * ((v9 - v7) >> 4)];
        }
        else
        {
          uint64_t v20 = 0;
          do
          {
            double v21 = &v18[v20];
            *((void *)v21 - 6) = *(void *)&v9[v20 - 48];
            *(_OWORD *)(v21 - 40) = *(_OWORD *)&v9[v20 - 40];
            *(_OWORD *)(v21 - 24) = *(_OWORD *)&v9[v20 - 24];
            *((void *)v21 - 1) = *(void *)&v9[v20 - 8];
            v20 -= 48;
          }
          while (&v9[v20] != v19);
          double v7 = &v18[v20];
          uint64_t v9 = *(char **)this;
        }
        unint64_t v10 = v18 + 48;
        *(void *)this = v7;
        *((void *)this + 1) = v18 + 48;
        *((void *)this + 2) = &v17[v16];
        if (v9) {
          operator delete(v9);
        }
      }
      *((void *)this + 1) = v10;
      uint64_t v8 = (uint64_t *)*v8;
      uint64_t v9 = v10;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  if (v5 > 0x555555555555555) {
LABEL_27:
  }
    abort();
  uint64_t v6 = 48 * v5;
  double v7 = (char *)operator new(48 * v5);
  *(void *)this = v7;
  *((void *)this + 1) = v7;
  *((void *)this + 2) = &v7[v6];
  uint64_t v8 = *(uint64_t **)(a2 + 88);
  if (v8) {
    goto LABEL_6;
  }
LABEL_24:
  std::mutex::unlock(v22);
}

void gdc::Statistics::dumpSamplerValues(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  float v4 = (float)(unint64_t)(0x5555555555555557 * ((a2[1] - *a2) >> 4));
  size_t prime = (unint64_t)v4;
  if ((unint64_t)v4 == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v4 - 1)) != 0)
  {
    size_t prime = std::__next_prime((unint64_t)v4);
    int8x8_t v6 = *(int8x8_t *)(a1 + 8);
    BOOL v7 = prime >= *(void *)&v6;
    if (prime > *(void *)&v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v6 = 0;
    BOOL v7 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v7)
  {
    unint64_t v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v6 < 3uLL || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      size_t prime = v8;
    }
    if (prime < *(void *)&v6) {
      goto LABEL_17;
    }
  }
LABEL_18:
  uint64_t v11 = *a2;
  uint64_t v48 = a2[1];
  if (*a2 != v48)
  {
    while (1)
    {
      unint64_t v12 = *(const char **)v11;
      size_t v13 = strlen(*(const char **)v11);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
LABEL_98:
      }
        abort();
      size_t v14 = v13;
      if (v13 >= 0x17) {
        break;
      }
      HIBYTE(v54) = v13;
      p_dst = (void **)&__dst;
      if (v13) {
        goto LABEL_28;
      }
LABEL_29:
      *((unsigned char *)p_dst + v14) = 0;
      int v18 = SHIBYTE(v54);
      if (v54 >= 0) {
        size_t v19 = HIBYTE(v54);
      }
      else {
        size_t v19 = v53;
      }
      unint64_t v20 = v19 + 5;
      if (v19 + 5 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_98;
      }
      uint64_t v21 = *(void *)(v11 + 8);
      if (v20 >= 0x17)
      {
        uint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17) {
          uint64_t v24 = v20 | 7;
        }
        uint64_t v25 = v24 + 1;
        p_p = operator new(v24 + 1);
        size_t v50 = v19 + 5;
        unint64_t v51 = v25 | 0x8000000000000000;
        std::string __p = p_p;
      }
      else
      {
        size_t v50 = 0;
        unint64_t v51 = 0;
        std::string __p = 0;
        p_p = &__p;
        HIBYTE(v51) = v19 + 5;
        if (!v19)
        {
          char v23 = 1;
          goto LABEL_43;
        }
      }
      if (v18 >= 0) {
        float64x2_t v26 = (void **)&__dst;
      }
      else {
        float64x2_t v26 = __dst;
      }
      memmove(p_p, v26, v19);
      char v23 = 0;
LABEL_43:
      strcpy((char *)p_p + v19, "->min");
      *((void *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = v21;
      if (SHIBYTE(v51) < 0) {
        operator delete(__p);
      }
      uint64_t v27 = *(void *)(v11 + 16);
      if (v20 <= 0x16)
      {
        size_t v50 = 0;
        unint64_t v51 = 0;
        std::string __p = 0;
        unint64_t v28 = &__p;
        HIBYTE(v51) = v19 + 5;
        if (v23) {
          goto LABEL_55;
        }
LABEL_51:
        if (v18 >= 0) {
          unint64_t v31 = (void **)&__dst;
        }
        else {
          unint64_t v31 = __dst;
        }
        memmove(v28, v31, v19);
        goto LABEL_55;
      }
      uint64_t v29 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v29 = v20 | 7;
      }
      uint64_t v30 = v29 + 1;
      unint64_t v28 = operator new(v29 + 1);
      size_t v50 = v19 + 5;
      unint64_t v51 = v30 | 0x8000000000000000;
      std::string __p = v28;
      if ((v23 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_55:
      strcpy((char *)v28 + v19, "->max");
      *((void *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = v27;
      if (SHIBYTE(v51) < 0) {
        operator delete(__p);
      }
      uint64_t v32 = *(void *)(v11 + 24);
      if (v20 <= 0x16)
      {
        size_t v50 = 0;
        unint64_t v51 = 0;
        std::string __p = 0;
        BOOL v33 = &__p;
        HIBYTE(v51) = v19 + 5;
        if (v23) {
          goto LABEL_67;
        }
LABEL_63:
        if (v18 >= 0) {
          double v36 = (void **)&__dst;
        }
        else {
          double v36 = __dst;
        }
        memmove(v33, v36, v19);
        goto LABEL_67;
      }
      uint64_t v34 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v34 = v20 | 7;
      }
      uint64_t v35 = v34 + 1;
      BOOL v33 = operator new(v34 + 1);
      size_t v50 = v19 + 5;
      unint64_t v51 = v35 | 0x8000000000000000;
      std::string __p = v33;
      if ((v23 & 1) == 0) {
        goto LABEL_63;
      }
LABEL_67:
      strcpy((char *)v33 + v19, "->avg");
      *((void *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = v32;
      if (SHIBYTE(v51) < 0) {
        operator delete(__p);
      }
      uint64_t v37 = *(void *)(v11 + 32);
      if (v20 <= 0x16)
      {
        size_t v50 = 0;
        unint64_t v51 = 0;
        std::string __p = 0;
        uint64_t v38 = &__p;
        HIBYTE(v51) = v19 + 5;
        if (v23) {
          goto LABEL_79;
        }
LABEL_75:
        if (v18 >= 0) {
          unint64_t v41 = (void **)&__dst;
        }
        else {
          unint64_t v41 = __dst;
        }
        memmove(v38, v41, v19);
        goto LABEL_79;
      }
      uint64_t v39 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v39 = v20 | 7;
      }
      uint64_t v40 = v39 + 1;
      uint64_t v38 = operator new(v39 + 1);
      size_t v50 = v19 + 5;
      unint64_t v51 = v40 | 0x8000000000000000;
      std::string __p = v38;
      if ((v23 & 1) == 0) {
        goto LABEL_75;
      }
LABEL_79:
      strcpy((char *)v38 + v19, "->sum");
      *((void *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = v37;
      if (SHIBYTE(v51) < 0) {
        operator delete(__p);
      }
      unint64_t v42 = v19 + 7;
      if (v19 + 7 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_98;
      }
      unint64_t v43 = *(void *)(v11 + 40);
      if (v42 <= 0x16)
      {
        size_t v50 = 0;
        unint64_t v51 = 0;
        std::string __p = 0;
        unsigned int v44 = &__p;
        HIBYTE(v51) = v19 + 7;
        if (v23) {
          goto LABEL_92;
        }
LABEL_88:
        if (v18 >= 0) {
          int v47 = (void **)&__dst;
        }
        else {
          int v47 = __dst;
        }
        memmove(v44, v47, v19);
        goto LABEL_92;
      }
      uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17) {
        uint64_t v45 = v42 | 7;
      }
      uint64_t v46 = v45 + 1;
      unsigned int v44 = operator new(v45 + 1);
      size_t v50 = v19 + 7;
      unint64_t v51 = v46 | 0x8000000000000000;
      std::string __p = v44;
      if ((v23 & 1) == 0) {
        goto LABEL_88;
      }
LABEL_92:
      strcpy((char *)v44 + v19, "->count");
      *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = (double)v43;
      if (SHIBYTE(v51) < 0)
      {
        operator delete(__p);
        if (v18 < 0) {
LABEL_96:
        }
          operator delete(__dst);
      }
      else if (v18 < 0)
      {
        goto LABEL_96;
      }
      v11 += 48;
      if (v11 == v48) {
        return;
      }
    }
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    size_t v53 = v14;
    int64_t v54 = v17 | 0x8000000000000000;
    long long __dst = p_dst;
LABEL_28:
    memmove(p_dst, v12, v14);
    goto LABEL_29;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    BOOL v7 = (uint64_t *)a2;
  }
  else {
    BOOL v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    size_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      size_t v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = *((void *)v14 + 1);
            if (v19 == v10)
            {
              uint64_t v20 = v14[39];
              if ((v20 & 0x80u) == 0) {
                uint64_t v21 = v14[39];
              }
              else {
                uint64_t v21 = *((void *)v14 + 3);
              }
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v7, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v22 = 0;
                  while (v14[v22 + 16] == *((unsigned __int8 *)v7 + v22))
                  {
                    if (v20 == ++v22) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            size_t v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            uint64_t v16 = v14[39];
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = v14[39];
            }
            else {
              uint64_t v17 = *((void *)v14 + 3);
            }
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v7, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v18 = 0;
                while (v14[v18 + 16] == *((unsigned __int8 *)v7 + v18))
                {
                  if (v16 == ++v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          size_t v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  size_t v14 = (unsigned __int8 *)operator new(0x30uLL);
  *(void *)size_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  uint64_t v23 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)v14 + 4) = v23;
  *((void *)v14 + 5) = 0;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    BOOL v26 = 1;
    if (v11 >= 3) {
      BOOL v26 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v11);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_71;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_71:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v34 = *(void *)a1;
  uint64_t v35 = *(void **)(*(void *)a1 + 8 * v3);
  if (v35)
  {
    *(void *)size_t v14 = *v35;
LABEL_85:
    *uint64_t v35 = v14;
    goto LABEL_86;
  }
  *(void *)size_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v34 + 8 * v3) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v36 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11) {
        v36 %= v11;
      }
    }
    else
    {
      v36 &= v11 - 1;
    }
    uint64_t v35 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_85;
  }
LABEL_86:
  ++*(void *)(a1 + 24);
  return v14;
}

void gdc::Statistics::getAllHistograms(gdc::Statistics *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  float v4 = (std::mutex *)(a2 + 8);
  std::mutex::lock((std::mutex *)(a2 + 8));
  unint64_t v5 = *(void *)(a2 + 136);
  uint64_t v20 = v4;
  if (!v5)
  {
    unint64_t v8 = 0;
    BOOL v7 = 0;
    unint64_t v9 = *(void **)(a2 + 128);
    if (!v9) {
      goto LABEL_24;
    }
LABEL_6:
    unint64_t v10 = v7;
    while (1)
    {
      uint64_t v11 = v9[2];
      uint8x8_t v12 = v9 + 4;
      if (v7 < v8)
      {
        *(void *)BOOL v7 = v11;
        *((void *)v7 + 1) = v12;
        v7 += 16;
      }
      else
      {
        uint64_t v13 = (v7 - v10) >> 4;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60) {
          goto LABEL_27;
        }
        if ((v8 - v10) >> 3 > v14) {
          unint64_t v14 = (v8 - v10) >> 3;
        }
        if ((unint64_t)(v8 - v10) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        if (v14 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v15 = 16 * v14;
        uint64_t v16 = (char *)operator new(16 * v14);
        uint64_t v17 = &v16[16 * v13];
        *(void *)uint64_t v17 = v11;
        *((void *)v17 + 1) = v12;
        if (v7 == v10)
        {
          uint64_t v19 = &v16[16 * v13];
        }
        else
        {
          uint64_t v18 = &v16[16 * v13];
          do
          {
            uint64_t v19 = v18 - 16;
            *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
            v7 -= 16;
            v18 -= 16;
          }
          while (v7 != v10);
        }
        unint64_t v8 = &v16[v15];
        BOOL v7 = v17 + 16;
        *(void *)this = v19;
        *((void *)this + 1) = v17 + 16;
        *((void *)this + 2) = v8;
        if (v10) {
          operator delete(v10);
        }
        unint64_t v10 = v19;
      }
      *((void *)this + 1) = v7;
      unint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  if (v5 >> 60) {
LABEL_27:
  }
    abort();
  uint64_t v6 = 16 * v5;
  BOOL v7 = (char *)operator new(16 * v5);
  unint64_t v8 = &v7[v6];
  *(void *)this = v7;
  *((void *)this + 1) = v7;
  *((void *)this + 2) = v8;
  unint64_t v9 = *(void **)(a2 + 128);
  if (v9) {
    goto LABEL_6;
  }
LABEL_24:
  std::mutex::unlock(v20);
}

uint64_t gdc::Tiled::stringFromLayerDataKey(gdc::Tiled *this, const gdc::LayerDataRequestKey *a2)
{
  uint64_t v3 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v4 = MEMORY[0x1E4FBA498] + 64;
  v28[0] = MEMORY[0x1E4FBA498] + 64;
  unint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA418];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v20 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v6;
  BOOL v7 = (std::ios_base *)((char *)&v20 + *(void *)(v20 - 24));
  std::ios_base::init(v7, &v21);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v20 = v3;
  v28[0] = v4;
  std::streambuf::basic_streambuf();
  uint64_t v8 = MEMORY[0x1E4FBA470] + 16;
  uint64_t v21 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v26 = 0u;
  int v27 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Tile ", 5);
  unint64_t v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)".", 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)" t:", 3);
  std::ostream::operator<<();
  if ((v27 & 0x10) != 0)
  {
    unint64_t v13 = *((void *)&v26 + 1);
    if (*((void *)&v26 + 1) < v24)
    {
      *((void *)&v26 + 1) = v24;
      unint64_t v13 = v24;
    }
    unint64_t v14 = (const void **)&v23;
  }
  else
  {
    if ((v27 & 8) == 0)
    {
      size_t v12 = 0;
      *((unsigned char *)this + 23) = 0;
      goto LABEL_16;
    }
    unint64_t v14 = (const void **)v22;
    unint64_t v13 = v22[2];
  }
  uint64_t v15 = *v14;
  size_t v12 = v13 - (void)*v14;
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v12 >= 0x17)
  {
    uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v16 = v12 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = (gdc::Tiled *)operator new(v16 + 1);
    *((void *)this + 1) = v12;
    *((void *)this + 2) = v17 | 0x8000000000000000;
    *(void *)this = v18;
    this = v18;
    goto LABEL_15;
  }
  *((unsigned char *)this + 23) = v12;
  if (v12) {
LABEL_15:
  }
    memmove(this, v15, v12);
LABEL_16:
  *((unsigned char *)this + v12) = 0;
  uint64_t v20 = *v5;
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v5[3];
  uint64_t v21 = v8;
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](v28);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<ecs2::DebugTasks>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::DebugTasks>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 + 48 * v7 != v15 - 48)
  {
    std::vector<std::function<void ()(ecs2::ExecutionDebugTaskContext)>>::__assign_with_size[abi:nn180100]<std::function<void ()(ecs2::ExecutionDebugTaskContext)>*,std::function<void ()(ecs2::ExecutionDebugTaskContext)>*>(v14 + 48 * v7, *(char **)(v15 - 48), *(char **)(v15 - 40), (uint64_t)(*(void *)(v15 - 40) - *(void *)(v15 - 48)) >> 5);
    std::vector<std::function<void ()(ecs2::ExecutionDebugTaskContext)>>::__assign_with_size[abi:nn180100]<std::function<void ()(ecs2::ExecutionDebugTaskContext)>*,std::function<void ()(ecs2::ExecutionDebugTaskContext)>*>(v14 + 48 * v7 + 24, *(char **)(v15 - 24), *(char **)(v15 - 16), (uint64_t)(*(void *)(v15 - 16) - *(void *)(v15 - 24)) >> 5);
    uint64_t v15 = a1[11];
  }
  ecs2::DebugTasks::~DebugTasks((ecs2::DebugTasks *)(v15 - 48));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v26[0] = &v24;
    v26[1] = 1;
    uint64_t v25 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v25, v26);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)std::vector<std::function<void ()(ecs2::ExecutionDebugTaskContext)>>::__assign_with_size[abi:nn180100]<std::function<void ()(ecs2::ExecutionDebugTaskContext)>*,std::function<void ()(ecs2::ExecutionDebugTaskContext)>*>(v20, v21, v22, v23);
}

char *std::vector<std::function<void ()(ecs2::ExecutionDebugTaskContext)>>::__assign_with_size[abi:nn180100]<std::function<void ()(ecs2::ExecutionDebugTaskContext)>*,std::function<void ()(ecs2::ExecutionDebugTaskContext)>*>(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)a1;
  if (a4 <= (v8 - *(void *)a1) >> 5)
  {
    unint64_t v16 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
    if (v16 >= a4)
    {
      uint64_t result = (char *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,0>(a2, a3, v9);
      uint64_t v20 = result;
      uint64_t v21 = *(char **)(a1 + 8);
      if (v21 != result)
      {
        uint64_t v22 = v21 - 32;
        unint64_t v23 = v21 - 32;
        do
        {
          uint64_t result = (char *)*((void *)v23 + 3);
          if (v23 == result)
          {
            uint64_t result = (char *)(*(uint64_t (**)(char *))(*(void *)v23 + 32))(v23);
          }
          else if (result)
          {
            uint64_t result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 40))(result);
          }
          v22 -= 32;
          BOOL v14 = v23 == v20;
          v23 -= 32;
        }
        while (!v14);
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      uint64_t v17 = &a2[32 * v16];
      uint64_t result = (char *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,0>(a2, v17, v9);
      uint64_t v19 = *(void *)(a1 + 8);
      while (v17 != a3)
      {
        uint64_t result = (char *)*((void *)v17 + 3);
        if (result)
        {
          if (v17 == result)
          {
            *(void *)(v19 + 24) = v19;
            uint64_t result = (char *)(*(uint64_t (**)(void, uint64_t))(**((void **)v17 + 3) + 24))(*((void *)v17 + 3), v19);
          }
          else
          {
            uint64_t result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 16))(result);
            *(void *)(v19 + 24) = result;
          }
        }
        else
        {
          *(void *)(v19 + 24) = 0;
        }
        v17 += 32;
        v19 += 32;
      }
      *(void *)(a1 + 8) = v19;
    }
  }
  else
  {
    if (v9)
    {
      unint64_t v10 = *(void **)(a1 + 8);
      uint64_t v11 = *(void **)a1;
      if (v10 != v9)
      {
        size_t v12 = v10 - 4;
        unint64_t v13 = v10 - 4;
        do
        {
          uint64_t v15 = (void *)v13[3];
          if (v13 == v15)
          {
            (*(void (**)(void *))(*v13 + 32))(v13);
          }
          else if (v15)
          {
            (*(void (**)(void *))(*v15 + 40))(v15);
          }
          v12 -= 4;
          BOOL v14 = v13 == v9;
          v13 -= 4;
        }
        while (!v14);
        uint64_t v11 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 59) {
      goto LABEL_45;
    }
    uint64_t v24 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v24 = a4;
    }
    BOOL v25 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
    if (!v25) {
      unint64_t v26 = v24;
    }
    if (v26 >> 59) {
LABEL_45:
    }
      abort();
    uint64_t v27 = 32 * v26;
    uint64_t result = (char *)operator new(32 * v26);
    unint64_t v28 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v27];
    if (v6 != a3)
    {
      uint64_t v29 = v6;
      do
      {
        uint64_t result = (char *)*((void *)v6 + 3);
        if (result)
        {
          if (v6 == result)
          {
            *((void *)v28 + 3) = v28;
            uint64_t result = (char *)(*(uint64_t (**)(char *, char *))(*(void *)v6 + 24))(v6, v28);
          }
          else
          {
            uint64_t result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 16))(result);
            *((void *)v28 + 3) = result;
          }
        }
        else
        {
          *((void *)v28 + 3) = 0;
        }
        v6 += 32;
        v28 += 32;
        v29 += 32;
      }
      while (v6 != a3);
    }
    *(void *)(a1 + 8) = v28;
  }
  return result;
}

void *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,std::function<void ()(ecs2::ExecutionDebugTaskContext)> *,0>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  void v13[3] = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    uint64_t v6 = a1;
    unint64_t v7 = a3;
    do
    {
      uint64_t v8 = (void *)v5[3];
      if (v8)
      {
        if (v5 == v8)
        {
          size_t v12 = v11;
          (*(void (**)(void *, void *))(*v5 + 24))(v5, v11);
          uint64_t v8 = v12;
          if (v3 == v11) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
          size_t v12 = v8;
          if (v3 == v11) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        size_t v12 = 0;
        if (v3 == v11) {
          goto LABEL_19;
        }
      }
      uint64_t v9 = (void *)v3[3];
      if (v8 != v11)
      {
        if (v3 == v9)
        {
          (*(void (**)(void *, void *))(*v3 + 24))(v3, v11);
          (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
          v3[3] = v12;
          size_t v12 = v11;
        }
        else
        {
          size_t v12 = (void *)v3[3];
          v3[3] = v8;
          uint64_t v8 = v9;
          if (v9 != v11) {
            goto LABEL_20;
          }
        }
        goto LABEL_4;
      }
      if (v3 != v9)
      {
        (*(void (**)(void *, void *))(v11[0] + 24))(v11, v3);
        (*(void (**)(void *))(*v12 + 32))(v12);
        uint64_t v8 = (void *)v3[3];
        size_t v12 = v8;
        v3[3] = v3;
LABEL_19:
        if (v8 != v11) {
          goto LABEL_20;
        }
        goto LABEL_4;
      }
      (*(void (**)(void *, void *))(v11[0] + 24))(v11, v13);
      (*(void (**)(void *))(*v12 + 32))(v12);
      size_t v12 = 0;
      (*(void (**)(void, void *))(*(void *)v3[3] + 24))(v3[3], v11);
      (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
      v3[3] = 0;
      size_t v12 = v11;
      (*(void (**)(void *, void *))(v13[0] + 24))(v13, v3);
      (*(void (**)(void *))(v13[0] + 32))(v13);
      v3[3] = v3;
      uint64_t v8 = v12;
      if (v12 != v11)
      {
LABEL_20:
        if (v8) {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        goto LABEL_5;
      }
LABEL_4:
      (*(void (**)(void *))(v11[0] + 32))(v11);
LABEL_5:
      v5 += 4;
      v3 += 4;
      v7 += 4;
      v6 += 4;
    }
    while (v5 != a2);
  }
  return v3;
}

void gdc::ComponentStorageWrapper<ecs2::DebugTasks>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<ecs2::DebugTasks>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<ecs2::DebugTasks>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
        ecs2::DebugTasks::~DebugTasks((ecs2::DebugTasks *)(v3 - 48));
      while (v3 != v2);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    unint64_t v7 = (void *)a1[5];
    uint64_t v8 = (void *)a1[4];
    if (v7 != v6)
    {
      do
      {
        uint64_t v10 = *--v7;
        uint64_t v9 = v10;
        *unint64_t v7 = 0;
        if (v10) {
          MEMORY[0x1A6239270](v9, 0x1000C40104B78CFLL);
        }
      }
      while (v7 != v6);
      uint64_t v8 = (void *)a1[4];
    }
    a1[5] = v6;
    operator delete(v8);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::remove(void *a1, unint64_t a2)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  unint64_t v26 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  BOOL v14 = (void *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  if (v16)
  {
    uint64_t v17 = v15 - 32;
    if (v16 == v17)
    {
      unint64_t v28 = v27;
      (*(void (**)(uint64_t, void *))(*(void *)v17 + 24))(v17, v27);
    }
    else
    {
      unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
    }
  }
  else
  {
    unint64_t v28 = 0;
  }
  if (v14 != v27)
  {
    uint64_t v18 = v28;
    uint64_t v19 = (void *)v14[3];
    if (v28 == v27)
    {
      if (v19 == v14)
      {
        (*(void (**)(void *, void *))(v27[0] + 24))(v27, v29);
        (*(void (**)(void *))(*v28 + 32))(v28);
        unint64_t v28 = 0;
        (*(void (**)(void, void *))(*(void *)v14[3] + 24))(v14[3], v27);
        (*(void (**)(void))(*(void *)v14[3] + 32))(v14[3]);
        v14[3] = 0;
        unint64_t v28 = v27;
        (*(void (**)(void *, void *))(v29[0] + 24))(v29, v14);
        (*(void (**)(void *))(v29[0] + 32))(v29);
      }
      else
      {
        (*(void (**)(void *, void *))(v27[0] + 24))(v27, v14);
        (*(void (**)(void *))(*v28 + 32))(v28);
        unint64_t v28 = (void *)v14[3];
      }
      v14[3] = v14;
    }
    else if (v19 == v14)
    {
      (*(void (**)(void *, void *))(*v14 + 24))(v14, v27);
      (*(void (**)(void))(*(void *)v14[3] + 32))(v14[3]);
      v14[3] = v28;
      unint64_t v28 = v27;
    }
    else
    {
      unint64_t v28 = (void *)v14[3];
      v14[3] = v18;
    }
  }
  if (v28 == v27)
  {
    (*(void (**)(void *))(v27[0] + 32))(v27);
  }
  else if (v28)
  {
    (*(void (**)(void))(*v28 + 40))();
  }
  uint64_t v20 = a1[11];
  uint64_t v21 = v20 - 32;
  uint64_t v22 = *(void *)(v20 - 8);
  if (v22 == v20 - 32)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
  }
  else if (v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
  }
  a1[11] = v21;
  unint64_t v23 = (void *)a1[28];
  if (v23)
  {
    uint64_t v24 = a1[31];
    do
    {
      v27[0] = &v26;
      v27[1] = 1;
      v29[0] = v24;
      uint64_t v25 = v23[6];
      if (!v25) {
        std::__throw_bad_function_call[abi:nn180100]();
      }
      (*(void (**)(uint64_t, void *, void *))(*(void *)v25 + 48))(v25, v29, v27);
      unint64_t v23 = (void *)*v23;
    }
    while (v23);
  }
  return 1;
}

void gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,ecs2::FunctionHandle>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,ecs2::FunctionHandle>::~sparse_map(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*a1;
  if (*a1)
  {
    uint64_t v11 = (void *)a1[1];
    size_t v12 = (void *)*a1;
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *--v11;
        uint64_t v13 = v14;
        *uint64_t v11 = 0;
        if (v14) {
          MEMORY[0x1A6239270](v13, 0x1000C40104B78CFLL);
        }
      }
      while (v11 != v10);
      size_t v12 = (void *)*a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void *std::__function::__func<RuntimeTaskRunner,std::allocator<RuntimeTaskRunner>,void ()(gdc::Context &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF519D30;
  result[1] = v3;
  return result;
}

void std::__function::__func<RuntimeTaskRunner,std::allocator<RuntimeTaskRunner>,void ()(gdc::Context &)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<ecs2::TaskHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::TaskHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<ecs2::TaskHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<ecs2::TaskHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<Commit>,std::allocator<ecs2::ForwardToExecute<Commit>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51A090;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<Commit>,std::allocator<ecs2::ForwardToExecute<Commit>>,void ()(ecs2::Runtime &)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<ecs2::GraphHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::GraphHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<ecs2::GraphHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<ecs2::GraphHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::remove(void *a1, unint64_t a2)
{
  unint64_t v38 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10] + 32 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = v15 - 32;
  uint64_t v17 = v15;
  if (v14 != v15 - 32)
  {
    uint64_t v18 = *(void *)(v15 - 24);
    for (uint64_t i = *(uint64_t **)(v14 + 8); v18 != v16 && i != (uint64_t *)v14; uint64_t i = (uint64_t *)i[1])
    {
      i[2] = *(void *)(v18 + 16);
      uint64_t v18 = *(void *)(v18 + 8);
    }
    if (i == (uint64_t *)v14)
    {
      if (v18 != v16)
      {
        uint64_t v24 = operator new(0x18uLL);
        uint64_t v25 = v24;
        void *v24 = 0;
        v24[1] = 0;
        v24[2] = *(void *)(v18 + 16);
        uint64_t v26 = *(void *)(v18 + 8);
        uint64_t v27 = 1;
        if (v26 != v16)
        {
          unint64_t v28 = v24;
          do
          {
            uint64_t v24 = operator new(0x18uLL);
            void *v24 = v28;
            v24[1] = 0;
            v24[2] = *(void *)(v26 + 16);
            v28[1] = v24;
            ++v27;
            uint64_t v26 = *(void *)(v26 + 8);
            unint64_t v28 = v24;
          }
          while (v26 != v16);
        }
        uint64_t v29 = *(void *)v14;
        *(void *)(v29 + 8) = v25;
        *uint64_t v25 = v29;
        *(void *)uint64_t v14 = v24;
        v24[1] = v14;
        *(void *)(v14 + 16) += v27;
      }
    }
    else
    {
      uint64_t v21 = *(void *)v14;
      uint64_t v22 = *i;
      *(void *)(v22 + 8) = *(void *)(*(void *)v14 + 8);
      **(void **)(v21 + 8) = v22;
      do
      {
        unint64_t v23 = (uint64_t *)i[1];
        --*(void *)(v14 + 16);
        operator delete(i);
        uint64_t i = v23;
      }
      while (v23 != (uint64_t *)v14);
    }
    uint64_t v17 = a1[11];
  }
  *(unsigned char *)(v14 + 24) = *(unsigned char *)(v15 - 8);
  int8x8_t v30 = (uint64_t *)(v17 - 32);
  if (*(void *)(v17 - 16))
  {
    uint64_t v32 = *(void *)(v17 - 32);
    unint64_t v31 = *(uint64_t **)(v17 - 24);
    uint64_t v33 = *v31;
    *(void *)(v33 + 8) = *(void *)(v32 + 8);
    **(void **)(v32 + 8) = v33;
    *(void *)(v17 - 16) = 0;
    if (v31 != v30)
    {
      do
      {
        uint64_t v34 = (uint64_t *)v31[1];
        operator delete(v31);
        unint64_t v31 = v34;
      }
      while (v34 != v30);
    }
  }
  a1[11] = v30;
  uint64_t v35 = (void *)a1[28];
  if (!v35) {
    return 1;
  }
  uint64_t v36 = a1[31];
  while (1)
  {
    v40[0] = &v38;
    v40[1] = 1;
    uint64_t v39 = v36;
    uint64_t v37 = v35[6];
    if (!v37) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v37 + 48))(v37, &v39, v40);
    uint64_t v35 = (void *)*v35;
    if (!v35) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,ecs2::ExecutionMetadata>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,ecs2::ExecutionMetadata>::~sparse_map(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[6];
  if (v2)
  {
    uint64_t v3 = (uint64_t *)a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 4;
        if (*(v3 - 2))
        {
          uint64_t v7 = *(v3 - 4);
          uint64_t v6 = (uint64_t *)*(v3 - 3);
          uint64_t v8 = *v6;
          *(void *)(v8 + 8) = *(void *)(v7 + 8);
          **(void **)(v7 + 8) = v8;
          *(v3 - 2) = 0;
          if (v6 != v5)
          {
            do
            {
              uint64_t v9 = (uint64_t *)v6[1];
              operator delete(v6);
              uint64_t v6 = v9;
            }
            while (v9 != v5);
          }
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  unint64_t v10 = (void *)a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*a1;
  if (*a1)
  {
    size_t v12 = (void *)a1[1];
    uint64_t v13 = (void *)*a1;
    if (v12 != v11)
    {
      do
      {
        uint64_t v15 = *--v12;
        uint64_t v14 = v15;
        *size_t v12 = 0;
        if (v15) {
          MEMORY[0x1A6239270](v14, 0x1000C40104B78CFLL);
        }
      }
      while (v12 != v11);
      uint64_t v13 = (void *)*a1;
    }
    a1[1] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

uint64_t std::__format_spec::__throw_invalid_type_format_error[abi:nn180100](char *a1)
{
  std::string::basic_string[abi:nn180100]<0>(&v6, "The type option contains an invalid value for ");
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, &v6, a1);
  __n128 v2 = std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v8, &v7, " formatting argument");
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v8;
  }
  else {
    uint64_t v3 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  uint64_t v4 = ((uint64_t (*)(std::string *, __n128))std::__throw_format_error[abi:nn180100])(v3, v2);
  return std::__formatter::__format_integer[abi:nn180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v4);
}

void *std::__formatter::__format_integer[abi:nn180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int8x16_t *a5, uint64_t a6, unsigned char *a7, unsigned int a8)
{
  unsigned int v12 = (a3 >> 3) & 3;
  if (v12 == 2)
  {
    char v14 = 43;
    goto LABEL_5;
  }
  uint64_t v13 = a5;
  if (v12 == 3)
  {
    char v14 = 32;
LABEL_5:
    a5->i8[0] = v14;
    uint64_t v13 = (int8x16_t *)&a5->i8[1];
  }
  if ((a3 & 0x20) != 0)
  {
    if (a7)
    {
      __int8 v15 = *a7;
      if (*a7)
      {
        uint64_t v16 = a7 + 1;
        do
        {
          v13->i8[0] = v15;
          uint64_t v13 = (int8x16_t *)((char *)v13 + 1);
          int v17 = *v16++;
          __int8 v15 = v17;
        }
        while (v17);
      }
    }
  }
  uint64_t v18 = (char *)std::__to_chars_integral[abi:nn180100]<unsigned long long>(v13, a6, a1, a8);
  if ((a3 & 0x40) == 0) {
    goto LABEL_60;
  }
  if (!*(unsigned char *)(a2 + 40))
  {
    MEMORY[0x1A6239040](&v78);
    if (*(unsigned char *)(a2 + 40))
    {
      std::locale::operator=((std::locale *)(a2 + 32), &v78);
    }
    else
    {
      std::locale::locale((std::locale *)(a2 + 32), &v78);
      *(unsigned char *)(a2 + 40) = 1;
    }
    std::locale::~locale(&v78);
  }
  int64_t v19 = v18 - (char *)v13;
  std::locale::locale(&v78, (const std::locale *)(a2 + 32));
  uint64_t v20 = std::locale::use_facet(&v78, MEMORY[0x1E4FBA2A0]);
  std::locale::~locale(&v78);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v20->__vftable[1].__on_zero_shared)(&v78, v20);
  if ((char)v80 < 0)
  {
    long long v71 = v20;
    locale = (unsigned __int8 *)v78.__locale_;
    uint64_t v22 = v79;
    if (v79 && v19 > *(char *)v78.__locale_)
    {
      uint64_t v70 = a5;
      unint64_t v23 = v78.__locale_;
      goto LABEL_24;
    }
    operator delete(v78.__locale_);
LABEL_60:
    unint64_t v42 = HIDWORD(a3);
    unint64_t v43 = *(void **)a2;
    if ((a3 & 7) == 4)
    {
      uint64_t v73 = v18;
      unint64_t v74 = a4;
      unint64_t v44 = (char *)v13 - (char *)a5;
      size_t v46 = v43[1];
      uint64_t v45 = v43[2];
      if (v45 + (char *)v13 - (char *)a5 >= v46)
      {
        ((void (*)(void))v43[3])(*v43);
        uint64_t v45 = 0;
        v43[2] = 0;
        size_t v46 = v43[1];
      }
      size_t v47 = v44 - v46;
      if (v44 >= v46)
      {
        if (v46) {
          memmove((void *)(*v43 + v45), a5, v46);
        }
        v43[2] = v46;
        ((void (*)(void, size_t, void))v43[3])(*v43, v46, v43[4]);
        v43[2] = 0;
        if (v47)
        {
          size_t v50 = &a5->i8[v46];
          do
          {
            if (v43[1] >= v47) {
              size_t v51 = v47;
            }
            else {
              size_t v51 = v43[1];
            }
            if (v51) {
              memmove((void *)*v43, v50, v51);
            }
            v43[2] = v51;
            v50 += v51;
            v47 -= v51;
            ((void (*)(void, size_t, void))v43[3])(*v43, v51, v43[4]);
            v43[2] = 0;
          }
          while (v47);
        }
      }
      else
      {
        if (v13 != a5)
        {
          memmove((void *)(*v43 + v45), a5, (char *)v13 - (char *)a5);
          uint64_t v45 = v43[2];
        }
        v43[2] = v45 + v44;
      }
      unsigned __int8 v49 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v44) {
        int v52 = v44;
      }
      else {
        int v52 = HIDWORD(a3);
      }
      unint64_t v42 = (HIDWORD(a3) - v52);
      unint64_t v43 = *(void **)a2;
      unsigned __int8 v48 = 48;
      uint64_t v18 = v73;
      a4 = v74;
    }
    else
    {
      unsigned __int8 v48 = BYTE4(a4);
      unsigned __int8 v49 = a3;
      uint64_t v13 = a5;
    }
    uint64_t v53 = a3 & 0xFFFFFF00 | (v42 << 32) | v49;
    unint64_t v54 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v48 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v13, v18, v43, v53, v54);
    }
    else {
      std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v13->i8, v18 - (char *)v13, v43, v53, v54, v18 - (char *)v13);
    }
    return v43;
  }
  if (!v80 || v19 <= SLOBYTE(v78.__locale_)) {
    goto LABEL_60;
  }
  uint64_t v70 = a5;
  long long v71 = v20;
  locale = (unsigned __int8 *)&v78;
  unint64_t v23 = v78.__locale_;
  uint64_t v22 = v79;
LABEL_24:
  uint64_t v69 = *(void **)a2;
  std::string __p = 0;
  size_t v76 = 0;
  unint64_t v77 = 0;
  uint64_t v24 = (char *)v23 + v22;
  uint64_t v25 = (char *)&v78 + v80;
  if ((v80 & 0x80u) != 0) {
    uint64_t v25 = v24;
  }
  uint64_t v26 = (char)*locale;
  char v27 = *locale;
  uint64_t v28 = v19 - v26;
  int v72 = (int)v18;
  unint64_t v74 = a4;
  if (v19 <= v26)
  {
    unsigned int v57 = 0;
    char v56 = v27 + v28;
    long long v58 = v70;
    unint64_t v59 = v71;
    goto LABEL_89;
  }
  uint64_t v29 = v25 - 1;
  do
  {
    if ((SHIBYTE(v77) & 0x80000000) == 0)
    {
      if (HIBYTE(v77) != 22)
      {
        size_t v31 = HIBYTE(v77);
        HIBYTE(v77) = (HIBYTE(v77) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_51;
      }
      int8x8_t v30 = &__p;
      size_t v31 = 22;
LABEL_36:
      if (v31 + 1 > 2 * v31) {
        unint64_t v33 = v31 + 1;
      }
      else {
        unint64_t v33 = 2 * v31;
      }
      uint64_t v34 = (v33 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17) {
        uint64_t v34 = v33 | 7;
      }
      if (v33 >= 0x17) {
        size_t v32 = v34 + 1;
      }
      else {
        size_t v32 = 23;
      }
LABEL_44:
      uint64_t v35 = (char *)operator new(v32);
      p_p = v35;
      if (!v31 || (memmove(v35, v30, v31), v31 != 22)) {
        operator delete(v30);
      }
      std::string __p = p_p;
      unint64_t v77 = v32 | 0x8000000000000000;
      goto LABEL_50;
    }
    size_t v31 = (v77 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v76 == v31)
    {
      if ((v77 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_112;
      }
      int8x8_t v30 = __p;
      size_t v32 = 0x7FFFFFFFFFFFFFF7;
      if (v31 >= 0x3FFFFFFFFFFFFFF3) {
        goto LABEL_44;
      }
      goto LABEL_36;
    }
    p_p = (char *)__p;
    size_t v31 = v76;
LABEL_50:
    size_t v76 = v31 + 1;
LABEL_51:
    uint64_t v37 = &p_p[v31];
    *uint64_t v37 = v27;
    v37[1] = 0;
    if (locale == (unsigned __int8 *)v29)
    {
      char v27 = *v29;
      locale = (unsigned __int8 *)v29;
    }
    else
    {
      unint64_t v38 = (char *)(locale + 1);
      uint64_t v39 = (char *)(locale + 1);
      do
      {
        int v40 = *v39++;
        char v27 = v40;
        if (v40) {
          BOOL v41 = 1;
        }
        else {
          BOOL v41 = v38 == v29;
        }
        unint64_t v38 = v39;
      }
      while (!v41);
      locale = (unsigned __int8 *)(v39 - 1);
    }
    v28 -= v27;
  }
  while (v28 > 0);
  char v56 = v27 + v28;
  if (SHIBYTE(v77) < 0)
  {
    size_t v61 = (v77 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v58 = v70;
    unint64_t v59 = v71;
    if (v76 == v61)
    {
      if ((v77 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
LABEL_112:
      }
        abort();
      unint64_t v60 = __p;
      size_t v63 = 0x7FFFFFFFFFFFFFF7;
      if (v61 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_93:
        if (v61 + 1 > 2 * v61) {
          unint64_t v64 = v61 + 1;
        }
        else {
          unint64_t v64 = 2 * v61;
        }
        uint64_t v65 = (v64 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v64 | 7) != 0x17) {
          uint64_t v65 = v64 | 7;
        }
        if (v64 >= 0x17) {
          size_t v63 = v65 + 1;
        }
        else {
          size_t v63 = 23;
        }
      }
      unint64_t v66 = (char *)operator new(v63);
      uint64_t v62 = v66;
      if (!v61 || (memmove(v66, v60, v61), v61 != 22)) {
        operator delete(v60);
      }
      std::string __p = v62;
      unint64_t v77 = v63 | 0x8000000000000000;
    }
    else
    {
      uint64_t v62 = (char *)__p;
      size_t v61 = v76;
    }
    size_t v76 = v61 + 1;
  }
  else
  {
    unsigned int v57 = HIBYTE(v77);
    long long v58 = v70;
    unint64_t v59 = v71;
    if (HIBYTE(v77) == 22)
    {
      unint64_t v60 = &__p;
      size_t v61 = 22;
      goto LABEL_93;
    }
LABEL_89:
    size_t v61 = v57;
    HIBYTE(v77) = (v57 + 1) & 0x7F;
    uint64_t v62 = (char *)&__p;
  }
  std::string v67 = &v62[v61];
  *std::string v67 = v56;
  v67[1] = 0;
  char v68 = ((uint64_t (*)(const std::locale::facet *))v59->__vftable[1].~facet_0)(v59);
  unint64_t v43 = std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v69, v58, v13, v72, (uint64_t *)&__p, v68, a3, v74);
  if (SHIBYTE(v77) < 0) {
    operator delete(__p);
  }
  if ((char)v80 < 0) {
    operator delete(v78.__locale_);
  }
  return v43;
}

_WORD *std::__to_chars_integral[abi:nn180100]<unsigned long long>(_WORD *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v4 = a3;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  int v5 = v6 >> 1;
  if (v5 == 4)
  {
    if (a2 - (uint64_t)a1 > 19
      || (unsigned int v7 = (1233 * (64 - __clz(a3 | 1))) >> 12,
          a2 - (uint64_t)a1 >= v7 - (std::__itoa::__pow10_64[v7] > a3) + 1))
    {
      if (HIDWORD(a3))
      {
        if (a3 > 0x2540BE3FFLL)
        {
          unint64_t v8 = a3 / 0x2540BE400;
          a1 = std::__itoa::__base_10_u32[abi:nn180100](a1, a3 / 0x2540BE400);
          v4 -= 10000000000 * v8;
        }
        *a1 = std::__itoa::__digits_base_10[v4 / 0x5F5E100];
        unsigned int v9 = v4 % 0x5F5E100;
        a1[1] = std::__itoa::__digits_base_10[v9 / 0xF4240uLL];
        v9 %= 0xF4240u;
        a1[2] = std::__itoa::__digits_base_10[v9 / 0x2710uLL];
        LOWORD(v9) = v9 % 0x2710;
        a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v9 / 0x64u];
        a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v9 % 0x64u];
        return a1 + 5;
      }
      else
      {
        return std::__itoa::__base_10_u32[abi:nn180100](a1, a3);
      }
    }
  }
  else if (v5)
  {
    if (v5 == 3)
    {
      return (_WORD *)std::__to_chars_integral[abi:nn180100]<8u,unsigned long long,0>((uint64_t)a1, a2, a3);
    }
    else if (v5 == 7)
    {
      return (_WORD *)std::__to_chars_integral[abi:nn180100]<16u,unsigned long long,0>((uint64_t)a1, a2, a3);
    }
    else
    {
      uint64_t v11 = a2 - (void)a1;
      int v17 = a1;
      uint64_t v12 = a2;
      int v13 = std::__to_chars_integral_width[abi:nn180100]<unsigned long long>(a3, a4);
      a2 = v12;
      if (v11 >= v13)
      {
        a2 = (uint64_t)v17 + v13;
        char v14 = (unsigned char *)(a2 - 1);
        do
        {
          *v14-- = a0123456789abcd[v4 % a4];
          BOOL v15 = v4 >= a4;
          v4 /= a4;
        }
        while (v15);
      }
    }
  }
  else
  {
    return (_WORD *)std::__to_chars_integral[abi:nn180100]<2u,unsigned long long,0>((uint64_t)a1, a2, a3);
  }
  return (_WORD *)a2;
}

void *std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(void *a1, int8x16_t *__src, int8x16_t *a3, int a4, uint64_t *a5, char a6, uint64_t a7, unint64_t a8)
{
  __int16 v8 = a7;
  uint64_t v11 = a3;
  unint64_t v14 = HIDWORD(a7);
  *(void *)__c = HIDWORD(a8);
  size_t v15 = (char *)a3 - (char *)__src;
  LODWORD(v16) = *((unsigned __int8 *)a5 + 23);
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = a5[1];
  }
  int v17 = a4 - __src - 1 + v16;
  if ((a7 & 7) == 4)
  {
    size_t v19 = a1[1];
    uint64_t v18 = a1[2];
    __int16 v102 = a7;
    if (v18 + v15 >= v19)
    {
      ((void (*)(void))a1[3])(*a1);
      uint64_t v18 = 0;
      a1[2] = 0;
      size_t v19 = a1[1];
    }
    size_t v20 = v15 - v19;
    if (v15 >= v19)
    {
      if (v19) {
        memmove((void *)(*a1 + v18), __src, v19);
      }
      a1[2] = v19;
      ((void (*)(void, size_t, void))a1[3])(*a1, v19, a1[4]);
      a1[2] = 0;
      if (v20)
      {
        uint64_t v24 = &__src->i8[v19];
        do
        {
          if (a1[1] >= v20) {
            size_t v25 = v20;
          }
          else {
            size_t v25 = a1[1];
          }
          if (v25) {
            memmove((void *)*a1, v24, v25);
          }
          a1[2] = v25;
          v24 += v25;
          v20 -= v25;
          ((void (*)(void, size_t, void))a1[3])(*a1, v25, a1[4]);
          a1[2] = 0;
        }
        while (v20);
      }
      size_t v21 = 0;
      __int16 v8 = v102;
      if ((int)v14 <= v17) {
        goto LABEL_10;
      }
    }
    else
    {
      if (v11 != __src)
      {
        memmove((void *)(*a1 + v18), __src, v15);
        uint64_t v18 = a1[2];
      }
      __int16 v8 = v102;
      size_t v21 = v18 + v15;
      a1[2] = v21;
      if ((int)v14 <= v17)
      {
LABEL_10:
        size_t v22 = 0;
        goto LABEL_63;
      }
    }
    __int16 v26 = v8;
    uint64_t v27 = (v14 - v17);
    uint64_t v28 = (int)v27;
    size_t v29 = a1[1];
    if (v21 + (int)v27 >= v29)
    {
      ((void (*)(void))a1[3])(*a1);
      size_t v21 = 0;
      a1[2] = 0;
      size_t v29 = a1[1];
    }
    size_t v30 = (int)v27 - v29;
    if ((int)v27 < v29)
    {
      if (v27 << 32)
      {
        memset((void *)(*a1 + v21), 48, (int)v27);
        size_t v21 = a1[2];
      }
      __int16 v8 = v26;
      size_t v22 = 0;
      v21 += v28;
LABEL_51:
      a1[2] = v21;
      goto LABEL_63;
    }
    size_t v31 = (char *)*a1;
    if (v29)
    {
      memset(&v31[v21], 48, v29);
      size_t v31 = (char *)*a1;
    }
    __int16 v8 = v26;
    a1[2] = v29;
    while (1)
    {
      ((void (*)(char *, size_t, void))a1[3])(v31, v29, a1[4]);
      a1[2] = 0;
      if (!v30) {
        break;
      }
      size_t v31 = (char *)*a1;
      if (a1[1] >= v30) {
        size_t v29 = v30;
      }
      else {
        size_t v29 = a1[1];
      }
      if (v29)
      {
        memset(v31, 48, v29);
        size_t v31 = (char *)*a1;
      }
      a1[2] = v29;
      v30 -= v29;
    }
    size_t v21 = 0;
    size_t v22 = 0;
  }
  else
  {
    if (SHIDWORD(a7) <= v17)
    {
      size_t v22 = 0;
    }
    else
    {
      size_t v22 = (a7 >> 32) - v17;
      size_t v23 = 0;
      switch(a7 & 7)
      {
        case 1:
          break;
        case 2:
          size_t v23 = v22 >> 1;
          v22 -= v22 >> 1;
          break;
        default:
          size_t v23 = (a7 >> 32) - v17;
          size_t v22 = 0;
          break;
      }
      std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v23, SHIDWORD(a8));
    }
    size_t v33 = a1[1];
    uint64_t v32 = a1[2];
    if (v32 + v15 >= v33)
    {
      ((void (*)(void))a1[3])(*a1);
      uint64_t v32 = 0;
      a1[2] = 0;
      size_t v33 = a1[1];
    }
    size_t v34 = v15 - v33;
    if (v15 < v33)
    {
      if (v11 != __src)
      {
        memmove((void *)(*a1 + v32), __src, v15);
        uint64_t v32 = a1[2];
      }
      size_t v21 = v32 + v15;
      goto LABEL_51;
    }
    if (v33) {
      memmove((void *)(*a1 + v32), __src, v33);
    }
    a1[2] = v33;
    ((void (*)(void, size_t, void))a1[3])(*a1, v33, a1[4]);
    a1[2] = 0;
    if (v34)
    {
      uint64_t v35 = &__src->i8[v33];
      do
      {
        if (a1[1] >= v34) {
          size_t v36 = v34;
        }
        else {
          size_t v36 = a1[1];
        }
        if (v36) {
          memmove((void *)*a1, v35, v36);
        }
        a1[2] = v36;
        v35 += v36;
        v34 -= v36;
        ((void (*)(void, size_t, void))a1[3])(*a1, v36, a1[4]);
        a1[2] = 0;
      }
      while (v34);
    }
    size_t v21 = 0;
  }
LABEL_63:
  uint64_t v37 = *((unsigned __int8 *)a5 + 23);
  int v38 = (char)v37;
  uint64_t v39 = (uint64_t)a5 + v37;
  if (v38 >= 0) {
    uint64_t v40 = v39;
  }
  else {
    uint64_t v40 = *a5 + a5[1];
  }
  if (v38 >= 0) {
    BOOL v41 = a5;
  }
  else {
    BOOL v41 = (uint64_t *)*a5;
  }
  uint64_t v42 = (uint64_t)v41 + 1;
  if ((v8 & 0xFF00) == 0x700)
  {
    v43.i64[0] = 0x6000000060;
    v43.i64[1] = 0x6000000060;
    v44.i64[0] = 0x600000006;
    v44.i64[1] = 0x600000006;
    int8x16_t v45 = (int8x16_t)xmmword_1A28FF670;
    int8x16_t v46 = (int8x16_t)xmmword_1A28FE720;
    v47.i64[0] = 0x4141414141414141;
    v47.i64[1] = 0x4141414141414141;
    while (1)
    {
      uint64_t v48 = v40 - 1;
      unint64_t v49 = *(char *)(v40 - 1);
      unint64_t v50 = a1[1];
      if (v21 + v49 >= v50)
      {
        ((void (*)(void))a1[3])(*a1);
        v47.i64[0] = 0x4141414141414141;
        v47.i64[1] = 0x4141414141414141;
        int8x16_t v46 = (int8x16_t)xmmword_1A28FE720;
        int8x16_t v45 = (int8x16_t)xmmword_1A28FF670;
        v44.i64[0] = 0x600000006;
        v44.i64[1] = 0x600000006;
        v43.i64[0] = 0x6000000060;
        v43.i64[1] = 0x6000000060;
        size_t v21 = 0;
        a1[2] = 0;
        unint64_t v50 = a1[1];
      }
      size_t v51 = &v11->i8[v49];
      if (v50 <= v49) {
        break;
      }
      if (v49)
      {
        int v52 = (unsigned char *)*a1;
        uint64_t v53 = (unsigned char *)(*a1 + v21);
        if (v49 < 8)
        {
          unint64_t v54 = (char *)v11;
          goto LABEL_112;
        }
        if ((unint64_t)(&v52[v21] - (unsigned char *)v11) < 0x10)
        {
          unint64_t v54 = (char *)v11;
          goto LABEL_112;
        }
        if (v49 >= 0x10)
        {
          unint64_t v76 = v49 & 0xFFFFFFFFFFFFFFF0;
          unint64_t v77 = v49 & 0xFFFFFFFFFFFFFFF0;
          std::locale v78 = v11;
          uint64_t v79 = (int8x16_t *)(*a1 + v21);
          do
          {
            int8x16_t v80 = *v78++;
            int16x8_t v81 = vmovl_high_s8(v80);
            int16x8_t v82 = vmovl_s8(*(int8x8_t *)v80.i8);
            v107.val[0] = (int8x16_t)vaddw_s16(v43, *(int16x4_t *)v82.i8);
            v107.val[1] = (int8x16_t)vaddw_high_s16(v43, v82);
            v107.val[2] = (int8x16_t)vaddw_s16(v43, *(int16x4_t *)v81.i8);
            v107.val[3] = (int8x16_t)vaddw_high_s16(v43, v81);
            *v79++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v44, (uint32x4_t)v107.val[0]), (int16x8_t)vcgtq_u32(v44, (uint32x4_t)v107.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v44, (uint32x4_t)v107.val[2]), (int16x8_t)vcgtq_u32(v44, (uint32x4_t)v107.val[3]))), vaddq_s8(vqtbl4q_s8(v107, v46), v47), v80);
            v77 -= 16;
          }
          while (v77);
          if (v76 == v49) {
            goto LABEL_115;
          }
          if ((v49 & 8) == 0)
          {
            v53 += v76;
            unint64_t v54 = &v11->i8[v76];
            goto LABEL_112;
          }
        }
        else
        {
          unint64_t v76 = 0;
        }
        unint64_t v54 = &v11->i8[v49 & 0xFFFFFFFFFFFFFFF8];
        v53 += v49 & 0xFFFFFFFFFFFFFFF8;
        double v83 = (int8x8_t *)&v52[v21 + v76];
        unint64_t v84 = (int8x8_t *)&v11->i8[v76];
        unint64_t v85 = v76 - (v49 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int8x8_t v86 = *v84++;
          int16x8_t v87 = vmovl_s8(v86);
          v105.val[0] = (int8x16_t)vaddw_s16(v43, *(int16x4_t *)v87.i8);
          v105.val[1] = (int8x16_t)vaddw_high_s16(v43, v87);
          *v83++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v44, (uint32x4_t)v105.val[0]), (int16x8_t)vcgtq_u32(v44, (uint32x4_t)v105.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v105, v45), (int8x8_t)0x4141414141414141), v86);
          v85 += 8;
        }
        while (v85);
        if ((v49 & 0xFFFFFFFFFFFFFFF8) != v49)
        {
          do
          {
LABEL_112:
            int v89 = *v54++;
            char v88 = v89;
            char v90 = v89 - 32;
            if ((v89 - 97) < 6) {
              char v88 = v90;
            }
            *v53++ = v88;
          }
          while (v54 != v51);
        }
LABEL_115:
        size_t v21 = a1[2];
      }
      size_t v56 = v21 + v49;
      a1[2] = v21 + v49;
LABEL_117:
      if (v40 == v42) {
        goto LABEL_140;
      }
      float64x2_t v91 = (unsigned char *)*a1;
      a1[2] = v56 + 1;
      v91[v56] = a6;
      size_t v21 = a1[2];
      --v40;
      uint64_t v11 = (int8x16_t *)v51;
      if (v21 == a1[1])
      {
        ((void (*)(void))a1[3])(*a1);
        v47.i64[0] = 0x4141414141414141;
        v47.i64[1] = 0x4141414141414141;
        int8x16_t v46 = (int8x16_t)xmmword_1A28FE720;
        int8x16_t v45 = (int8x16_t)xmmword_1A28FF670;
        v44.i64[0] = 0x600000006;
        v44.i64[1] = 0x600000006;
        v43.i64[0] = 0x6000000060;
        v43.i64[1] = 0x6000000060;
        size_t v21 = 0;
        a1[2] = 0;
        uint64_t v40 = v48;
        uint64_t v11 = (int8x16_t *)v51;
      }
    }
    while (1)
    {
      uint64_t v55 = (unsigned char *)*a1;
      unint64_t v57 = a1[1];
      if (v57 >= v49) {
        unint64_t v57 = v49;
      }
      long long v58 = &v11->i8[v57];
      if (!v57) {
        goto LABEL_78;
      }
      unint64_t v59 = &v55[v21];
      if (v57 < 8)
      {
        unint64_t v60 = (char *)v11;
        goto LABEL_96;
      }
      if ((unint64_t)(&v55[v21] - (unsigned char *)v11) < 0x10)
      {
        unint64_t v60 = (char *)v11;
        goto LABEL_96;
      }
      if (v57 >= 0x10)
      {
        unint64_t v61 = v57 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
        size_t v63 = v11;
        unint64_t v64 = (int8x16_t *)&v55[v21];
        do
        {
          int8x16_t v65 = *v63++;
          int16x8_t v66 = vmovl_high_s8(v65);
          int16x8_t v67 = vmovl_s8(*(int8x8_t *)v65.i8);
          v106.val[0] = (int8x16_t)vaddw_s16(v43, *(int16x4_t *)v67.i8);
          v106.val[1] = (int8x16_t)vaddw_high_s16(v43, v67);
          v106.val[2] = (int8x16_t)vaddw_s16(v43, *(int16x4_t *)v66.i8);
          v106.val[3] = (int8x16_t)vaddw_high_s16(v43, v66);
          *v64++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v44, (uint32x4_t)v106.val[0]), (int16x8_t)vcgtq_u32(v44, (uint32x4_t)v106.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v44, (uint32x4_t)v106.val[2]), (int16x8_t)vcgtq_u32(v44, (uint32x4_t)v106.val[3]))), vaddq_s8(vqtbl4q_s8(v106, v46), v47), v65);
          v62 -= 16;
        }
        while (v62);
        if (v57 == v61) {
          goto LABEL_77;
        }
        if ((v57 & 8) == 0)
        {
          v59 += v61;
          unint64_t v60 = &v11->i8[v61];
          do
          {
LABEL_96:
            int v74 = *v60++;
            char v73 = v74;
            char v75 = v74 - 32;
            if ((v74 - 97) < 6) {
              char v73 = v75;
            }
            *v59++ = v73;
          }
          while (v60 != v58);
          goto LABEL_77;
        }
      }
      else
      {
        unint64_t v61 = 0;
      }
      unint64_t v60 = &v11->i8[v57 & 0xFFFFFFFFFFFFFFF8];
      v59 += v57 & 0xFFFFFFFFFFFFFFF8;
      char v68 = (int8x8_t *)&v55[v61 + v21];
      uint64_t v69 = (int8x8_t *)&v11->i8[v61];
      unint64_t v70 = v61 - (v57 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v71 = *v69++;
        int16x8_t v72 = vmovl_s8(v71);
        v104.val[0] = (int8x16_t)vaddw_s16(v43, *(int16x4_t *)v72.i8);
        v104.val[1] = (int8x16_t)vaddw_high_s16(v43, v72);
        *v68++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v44, (uint32x4_t)v104.val[0]), (int16x8_t)vcgtq_u32(v44, (uint32x4_t)v104.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v104, v45), (int8x8_t)0x4141414141414141), v71);
        v70 += 8;
      }
      while (v70);
      if (v57 != (v57 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_96;
      }
LABEL_77:
      uint64_t v55 = (unsigned char *)*a1;
LABEL_78:
      a1[2] = v57;
      v49 -= v57;
      ((void (*)(unsigned char *, unint64_t, void))a1[3])(v55, v57, a1[4]);
      size_t v21 = 0;
      size_t v56 = 0;
      a1[2] = 0;
      uint64_t v11 = (int8x16_t *)v58;
      v43.i64[0] = 0x6000000060;
      v43.i64[1] = 0x6000000060;
      v44.i64[0] = 0x600000006;
      v44.i64[1] = 0x600000006;
      int8x16_t v46 = (int8x16_t)xmmword_1A28FE720;
      int8x16_t v45 = (int8x16_t)xmmword_1A28FF670;
      v47.i64[0] = 0x4141414141414141;
      v47.i64[1] = 0x4141414141414141;
      if (!v49) {
        goto LABEL_117;
      }
    }
  }
  while (1)
  {
    uint64_t v92 = v40 - 1;
    size_t v93 = *(char *)(v40 - 1);
    size_t v94 = a1[1];
    if (v21 + v93 >= v94)
    {
      ((void (*)(void))a1[3])(*a1);
      size_t v21 = 0;
      a1[2] = 0;
      size_t v94 = a1[1];
    }
    size_t v95 = v93 - v94;
    if (v93 >= v94) {
      break;
    }
    if (v93)
    {
      memmove((void *)(*a1 + v21), v11, v93);
      size_t v21 = a1[2];
    }
    size_t v96 = v21 + v93;
    a1[2] = v21 + v93;
    if (v40 == v42) {
      goto LABEL_140;
    }
LABEL_138:
    uint64_t v11 = (int8x16_t *)((char *)v11 + *(char *)(v40 - 1));
    unint64_t v99 = (unsigned char *)*a1;
    a1[2] = v96 + 1;
    v99[v96] = a6;
    size_t v21 = a1[2];
    --v40;
    if (v21 == a1[1])
    {
      ((void (*)(void))a1[3])(*a1);
      size_t v21 = 0;
      a1[2] = 0;
      uint64_t v40 = v92;
    }
  }
  if (v94) {
    memmove((void *)(*a1 + v21), v11, v94);
  }
  a1[2] = v94;
  ((void (*)(void, size_t, void))a1[3])(*a1, v94, a1[4]);
  a1[2] = 0;
  if (v95)
  {
    uint64_t v97 = &v11->i8[v94];
    do
    {
      if (a1[1] >= v95) {
        size_t v98 = v95;
      }
      else {
        size_t v98 = a1[1];
      }
      if (v98) {
        memmove((void *)*a1, v97, v98);
      }
      a1[2] = v98;
      v97 += v98;
      v95 -= v98;
      ((void (*)(void, size_t, void))a1[3])(*a1, v98, a1[4]);
      a1[2] = 0;
    }
    while (v95);
  }
  size_t v96 = 0;
  if (v40 != v42) {
    goto LABEL_138;
  }
LABEL_140:
  return std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v22, __c[0]);
}

void *std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(int8x16_t *a1, char *a2, void *a3, uint64_t a4, unint64_t a5)
{
  unsigned int v7 = a1;
  unint64_t v8 = a2 - (char *)a1;
  size_t v9 = (a4 >> 32) - (a2 - (char *)a1);
  if (a4 >> 32 <= a2 - (char *)a1)
  {
    unint64_t v13 = a3[1];
    uint64_t v12 = a3[2];
    if (v12 + v8 >= v13)
    {
      ((void (*)(void))a3[3])(*a3);
      uint64_t v12 = 0;
      a3[2] = 0;
      unint64_t v13 = a3[1];
    }
    if (v8 < v13)
    {
      if (v7 == (int8x16_t *)a2)
      {
LABEL_92:
        a3[2] = v12 + v8;
        return a3;
      }
      uint64_t v14 = *a3;
      size_t v15 = (unsigned char *)(*a3 + v12);
      if (v8 < 8)
      {
        uint64_t v16 = (char *)v7;
        goto LABEL_88;
      }
      if ((unint64_t)(v12 + v14 - (void)v7) < 0x10)
      {
        uint64_t v16 = (char *)v7;
        goto LABEL_88;
      }
      if (v8 >= 0x10)
      {
        unint64_t v72 = v8 & 0xFFFFFFFFFFFFFFF0;
        v88.i64[0] = 0x6000000060;
        v88.i64[1] = 0x6000000060;
        v89.i64[0] = 0x600000006;
        v89.i64[1] = 0x600000006;
        v90.i64[0] = 0x4141414141414141;
        v90.i64[1] = 0x4141414141414141;
        unint64_t v91 = v8 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v92 = v7;
        size_t v93 = (int8x16_t *)(*a3 + v12);
        do
        {
          int8x16_t v94 = *v92++;
          int16x8_t v95 = vmovl_high_s8(v94);
          int16x8_t v96 = vmovl_s8(*(int8x8_t *)v94.i8);
          v119.val[0] = (int8x16_t)vaddw_s16(v88, *(int16x4_t *)v96.i8);
          v119.val[1] = (int8x16_t)vaddw_high_s16(v88, v96);
          v119.val[2] = (int8x16_t)vaddw_s16(v88, *(int16x4_t *)v95.i8);
          v119.val[3] = (int8x16_t)vaddw_high_s16(v88, v95);
          *v93++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v89, (uint32x4_t)v119.val[0]), (int16x8_t)vcgtq_u32(v89, (uint32x4_t)v119.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v89, (uint32x4_t)v119.val[2]), (int16x8_t)vcgtq_u32(v89, (uint32x4_t)v119.val[3]))), vaddq_s8(vqtbl4q_s8(v119, (int8x16_t)xmmword_1A28FE720), v90), v94);
          v91 -= 16;
        }
        while (v91);
        if (v8 == v72) {
          goto LABEL_91;
        }
        if ((v8 & 8) == 0)
        {
          v15 += v72;
          uint64_t v16 = &v7->i8[v72];
          goto LABEL_88;
        }
      }
      else
      {
        unint64_t v72 = 0;
      }
      uint64_t v16 = &v7->i8[v8 & 0xFFFFFFFFFFFFFFF8];
      v15 += v8 & 0xFFFFFFFFFFFFFFF8;
      char v73 = (int8x8_t *)(v14 + v12 + v72);
      int v74 = (int8x8_t *)&v7->i8[v72];
      unint64_t v75 = v72 - (v8 & 0xFFFFFFFFFFFFFFF8);
      v76.i64[0] = 0x6000000060;
      v76.i64[1] = 0x6000000060;
      v77.i64[0] = 0x600000006;
      v77.i64[1] = 0x600000006;
      do
      {
        int8x8_t v78 = *v74++;
        int16x8_t v79 = vmovl_s8(v78);
        v115.val[0] = (int8x16_t)vaddw_s16(v76, *(int16x4_t *)v79.i8);
        v115.val[1] = (int8x16_t)vaddw_high_s16(v76, v79);
        *v73++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v77, (uint32x4_t)v115.val[0]), (int16x8_t)vcgtq_u32(v77, (uint32x4_t)v115.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v115, (int8x16_t)xmmword_1A28FF670), (int8x8_t)0x4141414141414141), v78);
        v75 += 8;
      }
      while (v75);
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_91:
        uint64_t v12 = a3[2];
        goto LABEL_92;
      }
      do
      {
LABEL_88:
        int v98 = *v16++;
        char v97 = v98;
        char v99 = v98 - 32;
        if ((v98 - 97) < 6) {
          char v97 = v99;
        }
        *v15++ = v97;
      }
      while (v16 != a2);
      goto LABEL_91;
    }
    v17.i64[0] = 0x6000000060;
    v17.i64[1] = 0x6000000060;
    v18.i64[0] = 0x600000006;
    v18.i64[1] = 0x600000006;
    int8x16_t v19 = (int8x16_t)xmmword_1A28FF670;
    int8x16_t v20 = (int8x16_t)xmmword_1A28FE720;
    v21.i64[0] = 0x4141414141414141;
    for (v21.i64[1] = 0x4141414141414141; ; v21.i64[1] = 0x4141414141414141)
    {
      uint64_t v22 = *a3;
      unint64_t v23 = a3[1];
      if (v23 >= v8) {
        unint64_t v23 = v8;
      }
      uint64_t v24 = &v7->i8[v23];
      if (!v23) {
        goto LABEL_12;
      }
      size_t v25 = (unsigned char *)(v22 + v12);
      if (v23 < 8)
      {
        __int16 v26 = (char *)v7;
        goto LABEL_31;
      }
      if ((unint64_t)(v12 + v22 - (void)v7) < 0x10)
      {
        __int16 v26 = (char *)v7;
        goto LABEL_31;
      }
      if (v23 >= 0x10)
      {
        unint64_t v27 = v23 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v33 = v23 & 0xFFFFFFFFFFFFFFF0;
        size_t v34 = v7;
        uint64_t v35 = (int8x16_t *)(v22 + v12);
        do
        {
          int8x16_t v36 = *v34++;
          int16x8_t v37 = vmovl_high_s8(v36);
          int16x8_t v38 = vmovl_s8(*(int8x8_t *)v36.i8);
          v117.val[0] = (int8x16_t)vaddw_s16(v17, *(int16x4_t *)v38.i8);
          v117.val[1] = (int8x16_t)vaddw_high_s16(v17, v38);
          v117.val[2] = (int8x16_t)vaddw_s16(v17, *(int16x4_t *)v37.i8);
          v117.val[3] = (int8x16_t)vaddw_high_s16(v17, v37);
          *v35++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v18, (uint32x4_t)v117.val[0]), (int16x8_t)vcgtq_u32(v18, (uint32x4_t)v117.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v18, (uint32x4_t)v117.val[2]), (int16x8_t)vcgtq_u32(v18, (uint32x4_t)v117.val[3]))), vaddq_s8(vqtbl4q_s8(v117, v20), v21), v36);
          v33 -= 16;
        }
        while (v33);
        if (v23 == v27) {
          goto LABEL_11;
        }
        int8x16_t v19 = (int8x16_t)xmmword_1A28FF670;
        if ((v23 & 8) == 0)
        {
          v25 += v27;
          __int16 v26 = &v7->i8[v27];
          do
          {
LABEL_31:
            int v40 = *v26++;
            char v39 = v40;
            char v41 = v40 - 32;
            if ((v40 - 97) < 6) {
              char v39 = v41;
            }
            *v25++ = v39;
          }
          while (v26 != v24);
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v27 = 0;
      }
      __int16 v26 = &v7->i8[v23 & 0xFFFFFFFFFFFFFFF8];
      v25 += v23 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v28 = (int8x8_t *)(v22 + v27 + v12);
      size_t v29 = (int8x8_t *)&v7->i8[v27];
      unint64_t v30 = v27 - (v23 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v31 = *v29++;
        int16x8_t v32 = vmovl_s8(v31);
        v113.val[0] = (int8x16_t)vaddw_s16(v17, *(int16x4_t *)v32.i8);
        v113.val[1] = (int8x16_t)vaddw_high_s16(v17, v32);
        *v28++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v18, (uint32x4_t)v113.val[0]), (int16x8_t)vcgtq_u32(v18, (uint32x4_t)v113.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v113, v19), (int8x8_t)0x4141414141414141), v31);
        v30 += 8;
      }
      while (v30);
      if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v22 = *a3;
LABEL_12:
      a3[2] = v23;
      v8 -= v23;
      ((void (*)(uint64_t, unint64_t, void))a3[3])(v22, v23, a3[4]);
      uint64_t v12 = 0;
      a3[2] = 0;
      unsigned int v7 = (int8x16_t *)v24;
      v17.i64[0] = 0x6000000060;
      v17.i64[1] = 0x6000000060;
      v18.i64[0] = 0x600000006;
      v18.i64[1] = 0x600000006;
      int8x16_t v20 = (int8x16_t)xmmword_1A28FE720;
      int8x16_t v19 = (int8x16_t)xmmword_1A28FF670;
      v21.i64[0] = 0x4141414141414141;
      if (!v8) {
        return a3;
      }
    }
  }
  unint64_t v10 = HIDWORD(a5);
  size_t v11 = 0;
  switch(a4 & 7)
  {
    case 1:
      break;
    case 2:
      size_t v11 = v9 >> 1;
      v9 -= v9 >> 1;
      break;
    default:
      size_t v11 = v9;
      size_t v9 = 0;
      break;
  }
  std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v11, SHIDWORD(a5));
  unint64_t v43 = a3[1];
  uint64_t v42 = a3[2];
  if (v42 + v8 >= v43)
  {
    ((void (*)(void))a3[3])(*a3);
    uint64_t v42 = 0;
    a3[2] = 0;
    unint64_t v43 = a3[1];
  }
  if (v8 >= v43)
  {
    v47.i64[0] = 0x6000000060;
    v47.i64[1] = 0x6000000060;
    v48.i64[0] = 0x600000006;
    v48.i64[1] = 0x600000006;
    int8x16_t v49 = (int8x16_t)xmmword_1A28FF670;
    int8x16_t v50 = (int8x16_t)xmmword_1A28FE720;
    v51.i64[0] = 0x4141414141414141;
    v51.i64[1] = 0x4141414141414141;
    while (1)
    {
      uint64_t v52 = *a3;
      unint64_t v53 = a3[1];
      if (v53 >= v8) {
        unint64_t v53 = v8;
      }
      unint64_t v54 = &v7->i8[v53];
      if (!v53) {
        goto LABEL_44;
      }
      uint64_t v55 = (unsigned char *)(v52 + v42);
      if (v53 < 8)
      {
        size_t v56 = (char *)v7;
        goto LABEL_63;
      }
      if ((unint64_t)(v42 + v52 - (void)v7) < 0x10)
      {
        size_t v56 = (char *)v7;
        goto LABEL_63;
      }
      if (v53 >= 0x10)
      {
        unint64_t v57 = v53 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v63 = v53 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v64 = v7;
        int8x16_t v65 = (int8x16_t *)(v52 + v42);
        do
        {
          int8x16_t v66 = *v64++;
          int16x8_t v67 = vmovl_high_s8(v66);
          int16x8_t v68 = vmovl_s8(*(int8x8_t *)v66.i8);
          v118.val[0] = (int8x16_t)vaddw_s16(v47, *(int16x4_t *)v68.i8);
          v118.val[1] = (int8x16_t)vaddw_high_s16(v47, v68);
          v118.val[2] = (int8x16_t)vaddw_s16(v47, *(int16x4_t *)v67.i8);
          v118.val[3] = (int8x16_t)vaddw_high_s16(v47, v67);
          *v65++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v48, (uint32x4_t)v118.val[0]), (int16x8_t)vcgtq_u32(v48, (uint32x4_t)v118.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v48, (uint32x4_t)v118.val[2]), (int16x8_t)vcgtq_u32(v48, (uint32x4_t)v118.val[3]))), vaddq_s8(vqtbl4q_s8(v118, v50), v51), v66);
          v63 -= 16;
        }
        while (v63);
        if (v53 == v57) {
          goto LABEL_43;
        }
        int8x16_t v49 = (int8x16_t)xmmword_1A28FF670;
        if ((v53 & 8) == 0)
        {
          v55 += v57;
          size_t v56 = &v7->i8[v57];
          do
          {
LABEL_63:
            int v70 = *v56++;
            char v69 = v70;
            char v71 = v70 - 32;
            if ((v70 - 97) < 6) {
              char v69 = v71;
            }
            *v55++ = v69;
          }
          while (v56 != v54);
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v57 = 0;
      }
      size_t v56 = &v7->i8[v53 & 0xFFFFFFFFFFFFFFF8];
      v55 += v53 & 0xFFFFFFFFFFFFFFF8;
      long long v58 = (int8x8_t *)(v52 + v57 + v42);
      unint64_t v59 = (int8x8_t *)&v7->i8[v57];
      unint64_t v60 = v57 - (v53 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v61 = *v59++;
        int16x8_t v62 = vmovl_s8(v61);
        v114.val[0] = (int8x16_t)vaddw_s16(v47, *(int16x4_t *)v62.i8);
        v114.val[1] = (int8x16_t)vaddw_high_s16(v47, v62);
        *v58++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v48, (uint32x4_t)v114.val[0]), (int16x8_t)vcgtq_u32(v48, (uint32x4_t)v114.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v114, v49), (int8x8_t)0x4141414141414141), v61);
        v60 += 8;
      }
      while (v60);
      if (v53 != (v53 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_63;
      }
LABEL_43:
      uint64_t v52 = *a3;
LABEL_44:
      a3[2] = v53;
      v8 -= v53;
      ((void (*)(uint64_t, unint64_t, void))a3[3])(v52, v53, a3[4]);
      uint64_t v42 = 0;
      a3[2] = 0;
      unsigned int v7 = (int8x16_t *)v54;
      v47.i64[0] = 0x6000000060;
      v47.i64[1] = 0x6000000060;
      v48.i64[0] = 0x600000006;
      v48.i64[1] = 0x600000006;
      int8x16_t v50 = (int8x16_t)xmmword_1A28FE720;
      int8x16_t v49 = (int8x16_t)xmmword_1A28FF670;
      v51.i64[0] = 0x4141414141414141;
      v51.i64[1] = 0x4141414141414141;
      if (!v8) {
        goto LABEL_103;
      }
    }
  }
  if (v7 == (int8x16_t *)a2) {
    goto LABEL_102;
  }
  uint64_t v44 = *a3;
  int8x16_t v45 = (unsigned char *)(*a3 + v42);
  if (v8 < 8)
  {
    int8x16_t v46 = (char *)v7;
    goto LABEL_98;
  }
  if ((unint64_t)(v42 + v44 - (void)v7) < 0x10)
  {
    int8x16_t v46 = (char *)v7;
    goto LABEL_98;
  }
  if (v8 >= 0x10)
  {
    unint64_t v80 = v8 & 0xFFFFFFFFFFFFFFF0;
    v100.i64[0] = 0x6000000060;
    v100.i64[1] = 0x6000000060;
    v101.i64[0] = 0x600000006;
    v101.i64[1] = 0x600000006;
    v102.i64[0] = 0x4141414141414141;
    v102.i64[1] = 0x4141414141414141;
    unint64_t v103 = v8 & 0xFFFFFFFFFFFFFFF0;
    int8x16x2_t v104 = v7;
    int8x16x2_t v105 = (int8x16_t *)(*a3 + v42);
    do
    {
      int8x16_t v106 = *v104++;
      int16x8_t v107 = vmovl_high_s8(v106);
      int16x8_t v108 = vmovl_s8(*(int8x8_t *)v106.i8);
      v120.val[0] = (int8x16_t)vaddw_s16(v100, *(int16x4_t *)v108.i8);
      v120.val[1] = (int8x16_t)vaddw_high_s16(v100, v108);
      v120.val[2] = (int8x16_t)vaddw_s16(v100, *(int16x4_t *)v107.i8);
      v120.val[3] = (int8x16_t)vaddw_high_s16(v100, v107);
      *v105++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v101, (uint32x4_t)v120.val[0]), (int16x8_t)vcgtq_u32(v101, (uint32x4_t)v120.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v101, (uint32x4_t)v120.val[2]), (int16x8_t)vcgtq_u32(v101, (uint32x4_t)v120.val[3]))), vaddq_s8(vqtbl4q_s8(v120, (int8x16_t)xmmword_1A28FE720), v102), v106);
      v103 -= 16;
    }
    while (v103);
    if (v8 == v80) {
      goto LABEL_101;
    }
    if ((v8 & 8) == 0)
    {
      v45 += v80;
      int8x16_t v46 = &v7->i8[v80];
      goto LABEL_98;
    }
  }
  else
  {
    unint64_t v80 = 0;
  }
  int8x16_t v46 = &v7->i8[v8 & 0xFFFFFFFFFFFFFFF8];
  v45 += v8 & 0xFFFFFFFFFFFFFFF8;
  int16x8_t v81 = (int8x8_t *)(v44 + v42 + v80);
  int16x8_t v82 = (int8x8_t *)&v7->i8[v80];
  unint64_t v83 = v80 - (v8 & 0xFFFFFFFFFFFFFFF8);
  v84.i64[0] = 0x6000000060;
  v84.i64[1] = 0x6000000060;
  v85.i64[0] = 0x600000006;
  v85.i64[1] = 0x600000006;
  do
  {
    int8x8_t v86 = *v82++;
    int16x8_t v87 = vmovl_s8(v86);
    v116.val[0] = (int8x16_t)vaddw_s16(v84, *(int16x4_t *)v87.i8);
    v116.val[1] = (int8x16_t)vaddw_high_s16(v84, v87);
    *v81++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v85, (uint32x4_t)v116.val[0]), (int16x8_t)vcgtq_u32(v85, (uint32x4_t)v116.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v116, (int8x16_t)xmmword_1A28FF670), (int8x8_t)0x4141414141414141), v86);
    v83 += 8;
  }
  while (v83);
  if (v8 != (v8 & 0xFFFFFFFFFFFFFFF8))
  {
    do
    {
LABEL_98:
      int v110 = *v46++;
      char v109 = v110;
      char v111 = v110 - 32;
      if ((v110 - 97) < 6) {
        char v109 = v111;
      }
      *v45++ = v109;
    }
    while (v46 != a2);
  }
LABEL_101:
  uint64_t v42 = a3[2];
LABEL_102:
  a3[2] = v42 + v8;
LABEL_103:
  std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v9, v10);
  return a3;
}

void *std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(void *a1, size_t __len, int __c)
{
  unsigned int v6 = __clz(~(_BYTE)__c) - 24;
  int __src = __c;
  if ((_BYTE)__c == 0xFF) {
    size_t v7 = 8;
  }
  else {
    size_t v7 = v6;
  }
  if (v7)
  {
    if (__len)
    {
      uint64_t v8 = 0;
      size_t v9 = a1[2];
      do
      {
        size_t v10 = a1[1];
        if (v9 + v7 >= v10)
        {
          ((void (*)(void))a1[3])(*a1);
          size_t v9 = 0;
          a1[2] = 0;
          size_t v10 = a1[1];
        }
        size_t v11 = v7 - v10;
        if (v7 < v10)
        {
          memcpy((void *)(*a1 + v9), &__src, v7);
          size_t v9 = a1[2] + v7;
          a1[2] = v9;
        }
        else
        {
          if (v10) {
            memcpy((void *)(*a1 + v9), &__src, v10);
          }
          a1[2] = v10;
          ((void (*)(void, size_t, void))a1[3])(*a1, v10, a1[4]);
          a1[2] = 0;
          if (v11)
          {
            uint64_t v12 = (char *)&__src + v10;
            do
            {
              if (a1[1] >= v11) {
                size_t v13 = v11;
              }
              else {
                size_t v13 = a1[1];
              }
              if (v13) {
                memcpy((void *)*a1, v12, v13);
              }
              a1[2] = v13;
              v12 += v13;
              v11 -= v13;
              ((void (*)(void, size_t, void))a1[3])(*a1, v13, a1[4]);
              a1[2] = 0;
            }
            while (v11);
          }
          size_t v9 = 0;
        }
        ++v8;
      }
      while (v8 != __len);
    }
  }
  else
  {
    size_t v15 = a1[1];
    uint64_t v14 = a1[2];
    if (v14 + __len >= v15)
    {
      ((void (*)(void))a1[3])(*a1);
      uint64_t v14 = 0;
      a1[2] = 0;
      size_t v15 = a1[1];
    }
    size_t v16 = __len - v15;
    if (__len >= v15)
    {
      uint32x4_t v18 = (char *)*a1;
      if (v15)
      {
        memset(&v18[v14], __c, v15);
        uint32x4_t v18 = (char *)*a1;
      }
      a1[2] = v15;
      ((void (*)(char *, size_t, void))a1[3])(v18, v15, a1[4]);
      while (1)
      {
        a1[2] = 0;
        if (!v16) {
          break;
        }
        int8x16_t v19 = (void *)*a1;
        if (a1[1] >= v16) {
          size_t v20 = v16;
        }
        else {
          size_t v20 = a1[1];
        }
        if (v20)
        {
          memset(v19, __c, v20);
          int8x16_t v19 = (void *)*a1;
        }
        a1[2] = v20;
        v16 -= v20;
        ((void (*)(void *, size_t, void))a1[3])(v19, v20, a1[4]);
      }
    }
    else
    {
      if (__len)
      {
        memset((void *)(*a1 + v14), __c, __len);
        uint64_t v14 = a1[2];
      }
      a1[2] = v14 + __len;
    }
  }
  return a1;
}

uint64_t std::__to_chars_integral[abi:nn180100]<2u,unsigned long long,0>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3 = 64 - __clz(a3 | 1);
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v5 = a1 + v3;
  if (a3 < 0x11)
  {
    unint64_t v7 = a3;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = a1 + v3;
    do
    {
      unint64_t v7 = a3 >> 4;
      *(_DWORD *)(v6 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v6 -= 4;
      BOOL v8 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v8);
  }
  size_t v9 = (unsigned char *)(v6 - 1);
  do
  {
    *v9-- = a01_0[v7 & 1];
    BOOL v8 = v7 > 1;
    v7 >>= 1;
  }
  while (v8);
  return v5;
}

uint64_t std::__to_chars_integral[abi:nn180100]<8u,unsigned long long,0>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (86 * (66 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v5 = a1 + v3;
  if (a3 < 0x41)
  {
    unint64_t v7 = a3;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = a1 + v3;
    do
    {
      unint64_t v7 = a3 >> 6;
      *(_WORD *)(v6 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v6 -= 2;
      a3 = v7;
    }
    while (v7 > 0x40);
  }
  BOOL v8 = (unsigned char *)(v6 - 1);
  do
  {
    *v8-- = a01234567[v7 & 7];
    BOOL v9 = v7 > 7;
    v7 >>= 3;
  }
  while (v9);
  return v5;
}

uint64_t std::__to_chars_integral[abi:nn180100]<16u,unsigned long long,0>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3 = (67 - __clz(a3 | 1)) >> 2;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v5 = a1 + v3;
  if (a3 < 0x101)
  {
    unint64_t v7 = a3;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = a1 + v3;
    do
    {
      unint64_t v7 = a3 >> 8;
      *(_WORD *)(v6 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v6 -= 2;
      a3 = v7;
    }
    while (v7 > 0x100);
  }
  BOOL v8 = (unsigned char *)(v6 - 1);
  do
  {
    *v8-- = a0123456789abcd_0[v7 & 0xF];
    BOOL v9 = v7 > 0xF;
    v7 >>= 4;
  }
  while (v9);
  return v5;
}

uint64_t std::__to_chars_integral_width[abi:nn180100]<unsigned long long>(unint64_t a1, unsigned int a2)
{
  if (a2 > a1) {
    return 1;
  }
  int v3 = 0;
  unint64_t v4 = a2 * a2;
  unint64_t v5 = (v4 * v4);
  while (1)
  {
    if (a1 < v4) {
      return v3 | 2u;
    }
    if (a1 < v4 * a2) {
      return v3 | 3u;
    }
    if (a1 < v5) {
      break;
    }
    a1 /= v5;
    v3 += 4;
    if (a1 < a2) {
      return v3 | 1u;
    }
  }
  return (v3 + 4);
}

uint64_t std::__unicode::__code_point_view<char>::__consume[abi:nn180100](unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  unsigned int v3 = __clz(v2 ^ 0xFF) - 24;
  if (v2 == 255) {
    int v4 = 8;
  }
  else {
    int v4 = v3;
  }
  switch(v4)
  {
    case 0:
      *a1 = v1 + 1;
      uint64_t result = *v1;
      break;
    case 2:
      if (a1[1] - v1 < 2 || (v1[1] & 0xC0) != 0x80) {
        goto LABEL_26;
      }
      *a1 = v1 + 1;
      unsigned __int8 v6 = *v1;
      *a1 = v1 + 2;
      unsigned int v7 = v1[1] & 0x3F | ((v6 & 0x1F) << 6);
      if (v7 >= 0x80) {
        uint64_t result = v7;
      }
      else {
        uint64_t result = 2147549181;
      }
      break;
    case 3:
      if (a1[1] - v1 < 3 || (v1[1] & 0xC0) != 0x80 || (v1[2] & 0xC0) != 0x80) {
        goto LABEL_26;
      }
      *a1 = v1 + 1;
      int v8 = *v1 & 0xF;
      *a1 = v1 + 2;
      int v9 = (v8 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      unsigned int v10 = v9 & 0xFFFFFFC0 | v1[2] & 0x3F;
      if (v10 < 0x800) {
        goto LABEL_27;
      }
      if ((v9 & 0xF800) == 0xD800) {
        uint64_t result = 2147549181;
      }
      else {
        uint64_t result = v10;
      }
      break;
    case 4:
      if (a1[1] - v1 < 4 || (v1[1] & 0xC0) != 0x80 || (v1[2] & 0xC0) != 0x80 || (v1[3] & 0xC0) != 0x80) {
        goto LABEL_26;
      }
      *a1 = v1 + 1;
      int v11 = *v1 & 7;
      *a1 = v1 + 2;
      int v12 = (v11 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      unsigned int v13 = v12 & 0xFFFFFFC0 | v1[2] & 0x3F;
      *a1 = v1 + 4;
      unsigned int v14 = v1[3] & 0x3F | (v13 << 6);
      if (v14 < 0x10000) {
        goto LABEL_27;
      }
      if (v14 >= 0x110000) {
        uint64_t result = 2147549181;
      }
      else {
        uint64_t result = v14;
      }
      break;
    default:
LABEL_26:
      *a1 = v1 + 1;
LABEL_27:
      uint64_t result = 2147549181;
      break;
  }
  return result;
}

uint64_t std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:nn180100]<char const*>(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  uint32x4_t v77 = a1;
  int8x8_t v78 = a2;
  int v7 = std::__unicode::__code_point_view<char>::__consume[abi:nn180100](&v77);
  unsigned int v8 = v7 & 0x7FFFFFFF;
  int v79 = v7 & 0x7FFFFFFF;
  unint64_t v9 = 1496;
  unsigned int v10 = (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries;
  do
  {
    unint64_t v11 = v9 >> 1;
    int v12 = &v10[v9 >> 1];
    unsigned int v14 = *v12;
    unsigned int v13 = v12 + 1;
    v9 += ~(v9 >> 1);
    if (((v7 << 11) | 0x7FFu) < v14) {
      unint64_t v9 = v11;
    }
    else {
      unsigned int v10 = v13;
    }
  }
  while (v9);
  unsigned __int8 v15 = 16;
  if (v10 != (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries)
  {
    unsigned int v16 = *(v10 - 1);
    unsigned int v17 = ((v16 >> 4) & 0x7F) + (v16 >> 11);
    unsigned __int8 v18 = v16 & 0xF;
    if (v17 >= v8) {
      unsigned __int8 v15 = v18;
    }
    else {
      unsigned __int8 v15 = 16;
    }
  }
  char v80 = v15;
  if (a1 == a2) {
    return 0;
  }
  if (v77 == v78)
  {
    if (v8 - 262142 >= 0xFFFC1102)
    {
      unsigned int v50 = (v7 << 14) | 0x3FFF;
      if (v77 != a2)
      {
        if (!a4)
        {
          unint64_t v64 = 0;
          do
          {
            unint64_t v19 = v64;
            unint64_t v66 = 108;
            int16x8_t v67 = &std::__width_estimation_table::__entries;
            do
            {
              unint64_t v68 = v66 >> 1;
              char v69 = &v67[v66 >> 1];
              unsigned int v71 = *v69;
              int v70 = v69 + 1;
              v66 += ~(v66 >> 1);
              if (v50 < v71) {
                unint64_t v66 = v68;
              }
              else {
                int16x8_t v67 = v70;
              }
            }
            while (v66);
            if (v67 == (_DWORD *)&std::__width_estimation_table::__entries)
            {
              uint64_t v65 = 1;
            }
            else if ((*(v67 - 1) & 0x3FFFu) + (*(v67 - 1) >> 14) < v8)
            {
              uint64_t v65 = 1;
            }
            else
            {
              uint64_t v65 = 2;
            }
            unint64_t v64 = v19 + v65;
          }
          while (v64 <= a3);
          return v19;
        }
        unint64_t v49 = 0;
        do
        {
          unint64_t v52 = 108;
          unint64_t v53 = &std::__width_estimation_table::__entries;
          do
          {
            unint64_t v54 = v52 >> 1;
            uint64_t v55 = &v53[v52 >> 1];
            unsigned int v57 = *v55;
            size_t v56 = v55 + 1;
            v52 += ~(v52 >> 1);
            if (v50 < v57) {
              unint64_t v52 = v54;
            }
            else {
              unint64_t v53 = v56;
            }
          }
          while (v52);
          if (v53 == (_DWORD *)&std::__width_estimation_table::__entries)
          {
            uint64_t v51 = 1;
          }
          else if ((*(v53 - 1) & 0x3FFFu) + (*(v53 - 1) >> 14) < v8)
          {
            uint64_t v51 = 1;
          }
          else
          {
            uint64_t v51 = 2;
          }
          v49 += v51;
        }
        while (v49 <= a3);
        return v49;
      }
      unint64_t v58 = 108;
      unint64_t v59 = &std::__width_estimation_table::__entries;
      do
      {
        unint64_t v60 = v58 >> 1;
        int8x8_t v61 = &v59[v58 >> 1];
        unsigned int v63 = *v61;
        int16x8_t v62 = v61 + 1;
        v58 += ~(v58 >> 1);
        if (v50 < v63) {
          unint64_t v58 = v60;
        }
        else {
          unint64_t v59 = v62;
        }
      }
      while (v58);
      if (v59 == (_DWORD *)&std::__width_estimation_table::__entries)
      {
        unint64_t v49 = 1;
      }
      else if ((*(v59 - 1) & 0x3FFFu) + (*(v59 - 1) >> 14) < v8)
      {
        unint64_t v49 = 1;
      }
      else
      {
        unint64_t v49 = 2;
      }
      if (a4 || v49 <= a3) {
        return v49;
      }
    }
    else if (a4 || a3)
    {
      if (v77 == a2) {
        return 1;
      }
      if (a4)
      {
        if (a3 + 1 > 1) {
          return a3 + 1;
        }
        else {
          return 1;
        }
      }
      else
      {
        unint64_t v73 = 1;
        do
        {
          unint64_t v49 = v73;
          if (v73 > a3) {
            break;
          }
          ++v73;
        }
        while (v49 + 1 <= a3);
      }
      return v49;
    }
    return 0;
  }
  unint64_t v75 = a2;
  unint64_t v19 = 0;
  while (2)
  {
    unint64_t v21 = a3;
    unsigned int v22 = v8;
    unint64_t v23 = v77;
    if (v77 == v78)
    {
LABEL_77:
      unsigned __int8 v15 = 15;
      char v80 = 15;
      goto LABEL_78;
    }
    int v24 = 0;
    int v74 = 1;
    while (1)
    {
      int v27 = std::__unicode::__code_point_view<char>::__consume[abi:nn180100](&v77);
      unsigned int v8 = v27 & 0x7FFFFFFF;
      int v79 = v27 & 0x7FFFFFFF;
      unint64_t v28 = 1496;
      size_t v29 = (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries;
      do
      {
        unint64_t v30 = v28 >> 1;
        int8x8_t v31 = &v29[v28 >> 1];
        unsigned int v33 = *v31;
        int16x8_t v32 = v31 + 1;
        v28 += ~(v28 >> 1);
        if (((v27 << 11) | 0x7FFu) < v33) {
          unint64_t v28 = v30;
        }
        else {
          size_t v29 = v32;
        }
      }
      while (v28);
      if (v29 == (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries)
      {
        unsigned int v36 = 16;
        char v80 = 16;
        v24 |= v15 == 3;
      }
      else
      {
        unsigned int v34 = *(v29 - 1);
        unsigned int v35 = ((v34 >> 4) & 0x7F) + (v34 >> 11);
        unsigned int v36 = v34 & 0xF;
        if (v35 < v8) {
          unsigned int v36 = 16;
        }
        char v80 = v36;
        v24 |= v15 == 3;
        if (!v15 && v36 == 5) {
          goto LABEL_27;
        }
      }
      if (v15 <= 5u && ((1 << v15) & 0x23) != 0) {
        break;
      }
      if (v36 <= 5 && ((1 << v36) & 0x23) != 0) {
        break;
      }
      if (v15 == 12 || v15 == 6)
      {
        if (v36 - 11 < 2) {
          goto LABEL_27;
        }
      }
      else if (v15 == 4 && v36 <= 0xC && ((1 << v36) & 0x10D0) != 0)
      {
        goto LABEL_27;
      }
      BOOL v39 = v15 == 11 || v15 == 7;
      if (!v39 || v36 != 11)
      {
        BOOL v25 = v36 > 0xD || ((1 << v36) & 0x2404) == 0;
        if (v25 && v15 != 8)
        {
          BOOL v41 = v15 == 13 && v36 == 3;
          if (v24 & v41)
          {
            int v24 = 1;
            LOBYTE(v36) = 3;
          }
          else
          {
            if (v15 != 9 || v36 != 9 || !v74) {
              break;
            }
            int v74 = 0;
            LOBYTE(v36) = 9;
          }
        }
      }
LABEL_27:
      unint64_t v23 = v77;
      unsigned __int8 v15 = v36;
      if (v77 == v78) {
        goto LABEL_77;
      }
    }
    unsigned __int8 v15 = v36;
LABEL_78:
    a3 = v21;
    if (v22 - 262142 < 0xFFFC1102) {
      goto LABEL_88;
    }
    unint64_t v42 = 108;
    unint64_t v43 = (unsigned int *)&std::__width_estimation_table::__entries;
    do
    {
      unint64_t v44 = v42 >> 1;
      int8x16_t v45 = &v43[v42 >> 1];
      unsigned int v47 = *v45;
      int8x16_t v46 = v45 + 1;
      v42 += ~(v42 >> 1);
      if (((v22 << 14) | 0x3FFF) < v47) {
        unint64_t v42 = v44;
      }
      else {
        unint64_t v43 = v46;
      }
    }
    while (v42);
    if (v43 == (unsigned int *)&std::__width_estimation_table::__entries)
    {
LABEL_88:
      uint64_t v48 = 1;
    }
    else if ((*(v43 - 1) & 0x3FFF) + (*(v43 - 1) >> 14) < v22)
    {
      uint64_t v48 = 1;
    }
    else
    {
      uint64_t v48 = 2;
    }
    unint64_t v49 = v19 + v48;
    if (a4 || v49 <= v21)
    {
      BOOL v20 = v23 == v75 || v49 > v21;
      v19 += v48;
      if (v20) {
        return v49;
      }
      continue;
    }
    return v19;
  }
}

void *std::__formatter::__format_locale_specific_form[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(void *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  unint64_t v11 = std::locale::use_facet(this, MEMORY[0x1E4FBA2A0]);
  ((void (*)(void **__return_ptr))v11->__vftable[1].__on_zero_shared)(__p);
  int v12 = a3[2];
  unsigned int v13 = *a3;
  if (v12 >= a3[1]) {
    int v12 = a3[1];
  }
  int8x16x2_t v113 = v12;
  int64_t v14 = v12 - v13;
  uint64_t v116 = a2;
  int8x16x4_t v117 = a3;
  if (SHIBYTE(v124) < 0)
  {
    unsigned __int8 v15 = (char *)__p[1];
    if (!__p[1]) {
      goto LABEL_72;
    }
    size_t v120 = a5;
    unsigned __int8 v18 = (void **)__p[0];
    int64_t v17 = *(char *)__p[0];
    if (v14 <= v17)
    {
      *(unsigned char *)__p[0] = 0;
      __p[1] = 0;
      a5 = v120;
      goto LABEL_72;
    }
    unint64_t v112 = a6;
    char v19 = *(unsigned char *)__p[0];
    unsigned int v16 = __p[0];
  }
  else
  {
    if (!HIBYTE(v124)) {
      goto LABEL_72;
    }
    if (v14 <= SLOBYTE(__p[0]))
    {
      LOBYTE(__p[0]) = 0;
      HIBYTE(v124) = 0;
      goto LABEL_72;
    }
    unint64_t v112 = a6;
    size_t v120 = a5;
    unsigned int v16 = __p[0];
    unsigned __int8 v15 = (char *)__p[1];
    int64_t v17 = SLOBYTE(__p[0]);
    unsigned __int8 v18 = __p;
    char v19 = (char)__p[0];
  }
  long long v121 = 0uLL;
  unint64_t v122 = 0;
  BOOL v20 = &v15[(void)v16];
  unint64_t v21 = (char *)__p + HIBYTE(v124);
  if (v124 < 0) {
    unint64_t v21 = v20;
  }
  int64_t v118 = v14;
  uint64_t v22 = v14 - v17;
  if (v14 <= v17)
  {
    unsigned int v37 = 0;
    char v36 = v19 + v22;
    a3 = v117;
    a5 = v120;
    goto LABEL_51;
  }
  int8x16x2_t v114 = v11;
  unint64_t v23 = (void **)(v21 - 1);
  do
  {
    if ((SHIBYTE(v122) & 0x80000000) == 0)
    {
      if (HIBYTE(v122) != 22)
      {
        size_t v25 = HIBYTE(v122);
        HIBYTE(v122) = (HIBYTE(v122) + 1) & 0x7F;
        unint64_t v30 = &v121;
        goto LABEL_37;
      }
      int v24 = &v121;
      size_t v25 = 22;
LABEL_22:
      if (v25 + 1 > 2 * v25) {
        unint64_t v27 = v25 + 1;
      }
      else {
        unint64_t v27 = 2 * v25;
      }
      uint64_t v28 = (v27 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v28 = v27 | 7;
      }
      if (v27 >= 0x17) {
        size_t v26 = v28 + 1;
      }
      else {
        size_t v26 = 23;
      }
LABEL_30:
      size_t v29 = (long long *)operator new(v26);
      unint64_t v30 = v29;
      if (!v25 || (memmove(v29, v24, v25), v25 != 22)) {
        operator delete(v24);
      }
      *(void *)&long long v121 = v30;
      unint64_t v122 = v26 | 0x8000000000000000;
      goto LABEL_36;
    }
    size_t v25 = (v122 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (*((void *)&v121 + 1) == v25)
    {
      if ((v122 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_192;
      }
      int v24 = (long long *)v121;
      size_t v26 = 0x7FFFFFFFFFFFFFF7;
      if (v25 >= 0x3FFFFFFFFFFFFFF3) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    size_t v25 = *((void *)&v121 + 1);
    unint64_t v30 = (long long *)v121;
LABEL_36:
    *((void *)&v121 + 1) = v25 + 1;
LABEL_37:
    int8x8_t v31 = (char *)v30 + v25;
    *int8x8_t v31 = v19;
    v31[1] = 0;
    if (v18 == v23)
    {
      char v19 = *(unsigned char *)v23;
      unsigned __int8 v18 = v23;
    }
    else
    {
      int16x8_t v32 = (void **)((char *)v18 + 1);
      unsigned int v33 = (void **)((char *)v18 + 1);
      do
      {
        int v34 = *(unsigned __int8 *)v33;
        unsigned int v33 = (void **)((char *)v33 + 1);
        char v19 = v34;
        if (v34) {
          BOOL v35 = 1;
        }
        else {
          BOOL v35 = v32 == v23;
        }
        int16x8_t v32 = v33;
      }
      while (!v35);
      unsigned __int8 v18 = (void **)((char *)v33 - 1);
    }
    v22 -= v19;
  }
  while (v22 > 0);
  char v36 = v19 + v22;
  if (SHIBYTE(v122) < 0)
  {
    size_t v38 = (v122 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    a2 = v116;
    a3 = v117;
    unint64_t v11 = v114;
    a5 = v120;
    if (*((void *)&v121 + 1) == v38)
    {
      if ((v122 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
LABEL_192:
      }
        abort();
      int __src = (long long *)v121;
      size_t v40 = 0x7FFFFFFFFFFFFFF7;
      if (v38 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_55:
        if (v38 + 1 > 2 * v38) {
          unint64_t v41 = v38 + 1;
        }
        else {
          unint64_t v41 = 2 * v38;
        }
        if (v41 >= 0x17)
        {
          uint64_t v42 = (v41 & 0x7FFFFFFFFFFFFFF8) + 8;
          uint64_t v43 = v41 | 7;
          if (v43 == 23) {
            uint64_t v43 = v42;
          }
          size_t v40 = v43 + 1;
        }
        else
        {
          size_t v40 = 23;
        }
      }
      size_t v44 = v40;
      int8x16_t v45 = (long long *)operator new(v40);
      BOOL v39 = v45;
      if (!v38 || (memmove(v45, __src, v38), v38 != 22)) {
        operator delete(__src);
      }
      *(void *)&long long v121 = v39;
      unint64_t v122 = v44 | 0x8000000000000000;
    }
    else
    {
      size_t v38 = *((void *)&v121 + 1);
      BOOL v39 = (long long *)v121;
    }
    *((void *)&v121 + 1) = v38 + 1;
  }
  else
  {
    unsigned int v37 = HIBYTE(v122);
    a2 = v116;
    a3 = v117;
    unint64_t v11 = v114;
    a5 = v120;
    if (HIBYTE(v122) == 22)
    {
      int __src = &v121;
      size_t v38 = 22;
      goto LABEL_55;
    }
LABEL_51:
    size_t v38 = v37;
    HIBYTE(v122) = (v37 + 1) & 0x7F;
    BOOL v39 = &v121;
  }
  int8x16_t v46 = (char *)v39 + v38;
  unsigned char *v46 = v36;
  v46[1] = 0;
  if (SHIBYTE(v124) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v121;
  int64_t v124 = v122;
  int64_t v14 = v118;
  a6 = v112;
LABEL_72:
  unint64_t v47 = HIDWORD(a6);
  uint64_t v48 = *(char **)(a2 + 16);
  unint64_t v49 = (char *)HIBYTE(v124);
  if (v124 < 0) {
    unint64_t v49 = (char *)__p[1];
  }
  uint64_t v50 = (uint64_t)&v49[a3[3] - v48 + *(int *)(a2 + 4) - (v49 != 0)];
  unsigned int v51 = a5 & 7;
  size_t v52 = (a5 >> 32) - v50;
  if (a5 >> 32 <= v50)
  {
    size_t v56 = 0;
    size_t v55 = 0;
    unsigned __int8 v53 = v47;
  }
  else
  {
    if (v51 == 4) {
      unsigned __int8 v53 = 48;
    }
    else {
      unsigned __int8 v53 = v47;
    }
    if (v51 == 4) {
      uint64_t v54 = 3;
    }
    else {
      uint64_t v54 = v51;
    }
    size_t v55 = 0;
    size_t v56 = v52;
    switch(v54)
    {
      case 1:
        break;
      case 2:
        size_t v55 = v52 >> 1;
        size_t v56 = v52 - (v52 >> 1);
        break;
      default:
        size_t v56 = 0;
        size_t v55 = v52;
        break;
    }
  }
  size_t v120 = v56;
  if (v51 == 4 && v13 != v48)
  {
    char v57 = *v48;
    uint64_t v58 = *a1;
    uint64_t v59 = a1[2];
    a1[2] = v59 + 1;
    *(unsigned char *)(v58 + v59) = v57;
    if (a1[2] == a1[1])
    {
      ((void (*)(void))a1[3])(*a1);
      a1[2] = 0;
    }
  }
  int v60 = v47 & 0xFFFFFF00 | v53;
  std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v55, v60);
  if (v51 != 4)
  {
    int8x8_t v61 = *(char **)(a2 + 16);
    if (v13 != v61)
    {
      char v62 = *v61;
      uint64_t v63 = *a1;
      uint64_t v64 = a1[2];
      a1[2] = v64 + 1;
      *(unsigned char *)(v63 + v64) = v62;
      if (a1[2] == a1[1])
      {
        ((void (*)(void))a1[3])(*a1);
        a1[2] = 0;
      }
    }
  }
  int v119 = v60;
  if (SHIBYTE(v124) < 0)
  {
    uint64_t v65 = (char *)__p[1];
    if (__p[1])
    {
      int16x8_t v67 = (void **)__p[0];
      unint64_t v66 = (char *)__p[0] + 1;
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v65 = (char *)HIBYTE(v124);
    if (HIBYTE(v124))
    {
      unint64_t v66 = (char *)__p + 1;
      int16x8_t v67 = __p;
LABEL_98:
      unint64_t v68 = &v65[(void)v67];
      int8x16x2_t v115 = v11;
      char v69 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
      uint64_t v70 = a1[2];
      while (1)
      {
        unsigned int v71 = v68 - 1;
        size_t v72 = *(v68 - 1);
        size_t v73 = a1[1];
        if (v70 + v72 >= v73)
        {
          ((void (*)(void))a1[3])(*a1);
          uint64_t v70 = 0;
          a1[2] = 0;
          size_t v73 = a1[1];
        }
        size_t v74 = v72 - v73;
        if (v72 >= v73)
        {
          if (v73) {
            memmove((void *)(*a1 + v70), v13, v73);
          }
          a1[2] = v73;
          ((void (*)(void, size_t, void))a1[3])(*a1, v73, a1[4]);
          a1[2] = 0;
          if (v74)
          {
            int32x4_t v76 = &v13[v73];
            do
            {
              if (a1[1] >= v74) {
                size_t v77 = v74;
              }
              else {
                size_t v77 = a1[1];
              }
              if (v77) {
                memmove((void *)*a1, v76, v77);
              }
              a1[2] = v77;
              v76 += v77;
              v74 -= v77;
              ((void (*)(void, size_t, void))a1[3])(*a1, v77, a1[4]);
              a1[2] = 0;
            }
            while (v74);
          }
          uint64_t v75 = 0;
          if (v68 == v66)
          {
LABEL_119:
            a3 = v117;
            unint64_t v11 = v115;
            goto LABEL_137;
          }
        }
        else
        {
          if (v72)
          {
            memmove((void *)(*a1 + v70), v13, v72);
            uint64_t v70 = a1[2];
          }
          uint64_t v75 = v70 + v72;
          a1[2] = v75;
          if (v68 == v66) {
            goto LABEL_119;
          }
        }
        v13 += *v71;
        uint64_t v78 = *a1;
        a1[2] = v75 + 1;
        *(unsigned char *)(v78 + v75) = v69;
        uint64_t v70 = a1[2];
        --v68;
        if (v70 == a1[1])
        {
          ((void (*)(void))a1[3])(*a1);
          uint64_t v70 = 0;
          a1[2] = 0;
          unint64_t v68 = v71;
        }
      }
    }
  }
  size_t v80 = a1[1];
  uint64_t v79 = a1[2];
  if (v79 + v14 >= v80)
  {
    ((void (*)(void))a1[3])(*a1);
    uint64_t v79 = 0;
    a1[2] = 0;
    size_t v80 = a1[1];
  }
  size_t v81 = v14 - v80;
  if (v14 >= v80)
  {
    if (v80) {
      memmove((void *)(*a1 + v79), v13, v80);
    }
    a1[2] = v80;
    ((void (*)(void, size_t, void))a1[3])(*a1, v80, a1[4]);
    a1[2] = 0;
    if (v81)
    {
      int16x8_t v82 = &v13[v80];
      do
      {
        if (a1[1] >= v81) {
          size_t v83 = v81;
        }
        else {
          size_t v83 = a1[1];
        }
        if (v83) {
          memmove((void *)*a1, v82, v83);
        }
        a1[2] = v83;
        v82 += v83;
        v81 -= v83;
        ((void (*)(void, size_t, void))a1[3])(*a1, v83, a1[4]);
        a1[2] = 0;
      }
      while (v81);
    }
    uint64_t v75 = 0;
  }
  else
  {
    if (v113 != v13)
    {
      memmove((void *)(*a1 + v79), v13, v14);
      uint64_t v79 = a1[2];
    }
    uint64_t v75 = v79 + v14;
    a1[2] = v75;
  }
LABEL_137:
  if (a3[1] != a3[3])
  {
    char v84 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[1].~facet)(v11, v75);
    uint64_t v85 = *a1;
    uint64_t v86 = a1[2];
    a1[2] = v86 + 1;
    *(unsigned char *)(v85 + v86) = v84;
    size_t v88 = a1[1];
    uint64_t v87 = a1[2];
    if (v87 == v88)
    {
      ((void (*)(void))a1[3])(*a1);
      uint64_t v87 = 0;
      a1[2] = 0;
      size_t v88 = a1[1];
    }
    uint32x4_t v89 = a3[2];
    int8x16_t v90 = a3[1] + 1;
    unint64_t v91 = v89 - v90;
    if (v89 - v90 + v87 >= v88)
    {
      ((void (*)(void))a1[3])(*a1);
      uint64_t v87 = 0;
      a1[2] = 0;
      size_t v88 = a1[1];
    }
    size_t v92 = v91 - v88;
    if (v91 >= v88)
    {
      if (v88) {
        memmove((void *)(*a1 + v87), v90, v88);
      }
      a1[2] = v88;
      ((void (*)(void, size_t, void))a1[3])(*a1, v88, a1[4]);
      a1[2] = 0;
      uint64_t v94 = v116;
      if (v92)
      {
        int16x8_t v95 = &v90[v88];
        do
        {
          if (a1[1] >= v92) {
            size_t v96 = v92;
          }
          else {
            size_t v96 = a1[1];
          }
          if (v96) {
            memmove((void *)*a1, v95, v96);
          }
          a1[2] = v96;
          v95 += v96;
          v92 -= v96;
          ((void (*)(void, size_t, void))a1[3])(*a1, v96, a1[4]);
          a1[2] = 0;
        }
        while (v92);
      }
      uint64_t v93 = 0;
    }
    else
    {
      if (v89 != v90)
      {
        memmove((void *)(*a1 + v87), v90, v89 - v90);
        uint64_t v87 = a1[2];
      }
      uint64_t v93 = v87 + v91;
      a1[2] = v93;
      uint64_t v94 = v116;
    }
    size_t v97 = *(int *)(v94 + 4);
    size_t v98 = a1[1];
    if (v93 + v97 >= v98)
    {
      ((void (*)(void))a1[3])(*a1);
      uint64_t v93 = 0;
      a1[2] = 0;
      size_t v98 = a1[1];
    }
    size_t v99 = v97 - v98;
    if (v97 >= v98)
    {
      uint64_t v100 = *a1;
      if (v98)
      {
        memset((void *)(v100 + v93), 48, v98);
        uint64_t v100 = *a1;
      }
      a1[2] = v98;
      ((void (*)(uint64_t, size_t, void))a1[3])(v100, v98, a1[4]);
      while (1)
      {
        a1[2] = 0;
        if (!v99) {
          break;
        }
        uint32x4_t v101 = (void *)*a1;
        if (a1[1] >= v99) {
          size_t v102 = v99;
        }
        else {
          size_t v102 = a1[1];
        }
        if (v102)
        {
          memset(v101, 48, v102);
          uint32x4_t v101 = (void *)*a1;
        }
        a1[2] = v102;
        v99 -= v102;
        ((void (*)(void *, size_t, void))a1[3])(v101, v102, a1[4]);
      }
      uint64_t v75 = 0;
    }
    else
    {
      if (v97)
      {
        memset((void *)(*a1 + v93), 48, v97);
        uint64_t v93 = a1[2];
      }
      uint64_t v75 = v93 + v97;
      a1[2] = v75;
    }
  }
  int8x16x2_t v104 = a3[2];
  unint64_t v103 = a3[3];
  if (v104 != v103)
  {
    size_t v105 = v103 - v104;
    size_t v106 = a1[1];
    if (v75 + v103 - v104 >= v106)
    {
      ((void (*)(void))a1[3])(*a1);
      uint64_t v75 = 0;
      a1[2] = 0;
      size_t v106 = a1[1];
    }
    size_t v107 = v105 - v106;
    if (v105 >= v106)
    {
      if (v106) {
        memmove((void *)(*a1 + v75), v104, v106);
      }
      a1[2] = v106;
      ((void (*)(void, size_t, void))a1[3])(*a1, v106, a1[4]);
      a1[2] = 0;
      if (v107)
      {
        int16x8_t v108 = &v104[v106];
        do
        {
          if (a1[1] >= v107) {
            size_t v109 = v107;
          }
          else {
            size_t v109 = a1[1];
          }
          if (v109) {
            memmove((void *)*a1, v108, v109);
          }
          a1[2] = v109;
          v108 += v109;
          v107 -= v109;
          ((void (*)(void, size_t, void))a1[3])(*a1, v109, a1[4]);
          a1[2] = 0;
        }
        while (v107);
      }
    }
    else
    {
      memmove((void *)(*a1 + v75), v104, v105);
      a1[2] += v105;
    }
  }
  std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v120, v119);
  if (SHIBYTE(v124) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void *std::__formatter::__write_using_trailing_zeros[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned char *a1, unsigned char *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned char *a7, size_t a8)
{
  unint64_t v8 = HIDWORD(a5);
  size_t v9 = (a4 >> 32) - (a6 + a8);
  size_t v15 = 0;
  switch(a4 & 7)
  {
    case 1:
      break;
    case 2:
      size_t v15 = v9 >> 1;
      v9 -= v9 >> 1;
      break;
    default:
      size_t v15 = (a4 >> 32) - (a6 + a8);
      size_t v9 = 0;
      break;
  }
  std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v15, SHIDWORD(a5));
  unint64_t v16 = a7 - a1;
  size_t v18 = a3[1];
  uint64_t v17 = a3[2];
  if (v17 + a7 - a1 >= v18)
  {
    ((void (*)(void))a3[3])(*a3);
    uint64_t v17 = 0;
    a3[2] = 0;
    size_t v18 = a3[1];
  }
  size_t v19 = v16 - v18;
  if (v16 >= v18)
  {
    if (v18) {
      memmove((void *)(*a3 + v17), a1, v18);
    }
    a3[2] = v18;
    ((void (*)(void, size_t, void))a3[3])(*a3, v18, a3[4]);
    a3[2] = 0;
    if (v19)
    {
      unint64_t v21 = &a1[v18];
      do
      {
        if (a3[1] >= v19) {
          size_t v22 = v19;
        }
        else {
          size_t v22 = a3[1];
        }
        if (v22) {
          memmove((void *)*a3, v21, v22);
        }
        a3[2] = v22;
        v21 += v22;
        v19 -= v22;
        ((void (*)(void, size_t, void))a3[3])(*a3, v22, a3[4]);
        a3[2] = 0;
      }
      while (v19);
    }
    uint64_t v20 = 0;
  }
  else
  {
    if (a7 != a1)
    {
      memmove((void *)(*a3 + v17), a1, a7 - a1);
      uint64_t v17 = a3[2];
    }
    uint64_t v20 = v17 + v16;
    a3[2] = v20;
  }
  size_t v23 = a3[1];
  if (v20 + a8 >= v23)
  {
    ((void (*)(void))a3[3])(*a3);
    uint64_t v20 = 0;
    a3[2] = 0;
    size_t v23 = a3[1];
  }
  size_t v24 = a8 - v23;
  if (a8 >= v23)
  {
    uint64_t v26 = *a3;
    if (v23)
    {
      memset((void *)(v26 + v20), 48, v23);
      uint64_t v26 = *a3;
    }
    a3[2] = v23;
    ((void (*)(uint64_t, size_t, void))a3[3])(v26, v23, a3[4]);
    while (1)
    {
      a3[2] = 0;
      if (!v24) {
        break;
      }
      unint64_t v27 = (void *)*a3;
      if (a3[1] >= v24) {
        size_t v28 = v24;
      }
      else {
        size_t v28 = a3[1];
      }
      if (v28)
      {
        memset(v27, 48, v28);
        unint64_t v27 = (void *)*a3;
      }
      a3[2] = v28;
      v24 -= v28;
      ((void (*)(void *, size_t, void))a3[3])(v27, v28, a3[4]);
    }
    size_t v25 = 0;
  }
  else
  {
    if (a8)
    {
      memset((void *)(*a3 + v20), 48, a8);
      uint64_t v20 = a3[2];
    }
    size_t v25 = v20 + a8;
    a3[2] = v25;
  }
  unint64_t v29 = a2 - a7;
  size_t v30 = a3[1];
  if (v25 + a2 - a7 >= v30)
  {
    ((void (*)(void))a3[3])(*a3);
    size_t v25 = 0;
    a3[2] = 0;
    size_t v30 = a3[1];
  }
  size_t v31 = v29 - v30;
  if (v29 >= v30)
  {
    if (v30) {
      memmove((void *)(*a3 + v25), a7, v30);
    }
    a3[2] = v30;
    ((void (*)(void, size_t, void))a3[3])(*a3, v30, a3[4]);
    a3[2] = 0;
    if (v31)
    {
      int16x8_t v32 = &a7[v30];
      do
      {
        if (a3[1] >= v31) {
          size_t v33 = v31;
        }
        else {
          size_t v33 = a3[1];
        }
        if (v33) {
          memmove((void *)*a3, v32, v33);
        }
        a3[2] = v33;
        v32 += v33;
        v31 -= v33;
        ((void (*)(void, size_t, void))a3[3])(*a3, v33, a3[4]);
        a3[2] = 0;
      }
      while (v31);
    }
  }
  else
  {
    if (a2 != a7)
    {
      memmove((void *)(*a3 + v25), a7, a2 - a7);
      size_t v25 = a3[2];
    }
    a3[2] = v25 + v29;
  }
  return std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v9, v8);
}

uint64_t std::__format_spec::__parser<char>::__validate[abi:nn180100](uint64_t result, char *a2)
{
  if ((*(unsigned char *)result & 0x18) != 0)
  {
    int v2 = "sign";
LABEL_11:
    std::__format_spec::__throw_invalid_option_format_error[abi:nn180100](a2, v2);
    goto LABEL_12;
  }
  if ((*(unsigned char *)result & 0x20) != 0)
  {
    int v2 = "alternate form";
    goto LABEL_11;
  }
  if ((*(unsigned char *)result & 7) == 4)
  {
    int v2 = "zero-padding";
    goto LABEL_11;
  }
  if (*(_DWORD *)(result + 8) != -1)
  {
    int v2 = "precision";
    goto LABEL_11;
  }
  if (*(unsigned __int8 *)(result + 1) >= 0x20u)
  {
LABEL_12:
    uint64_t v3 = ((uint64_t (*)(const char *))std::__throw_format_error[abi:nn180100])("The type does not fit in the mask");
    return std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v3);
  }
  return result;
}

void *std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  switch(BYTE1(a4))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x1A281BBF8);
    case 2:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      unint64_t v8 = &v15;
      unsigned int v10 = 2;
      size_t v9 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      unint64_t v8 = &v15;
      unsigned int v10 = 2;
      size_t v9 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      unint64_t v8 = (uint64_t *)v14;
      if (a1 | a2) {
        size_t v9 = "0";
      }
      else {
        size_t v9 = 0;
      }
      unsigned int v10 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      unint64_t v8 = (uint64_t *)v12;
      unsigned int v10 = 16;
      size_t v9 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      unint64_t v8 = (uint64_t *)v12;
      unsigned int v10 = 16;
      size_t v9 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, v7, a5, a6, v11, (uint64_t)v8, v9, v10);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, a6, v11, (uint64_t)v13, 0, 0xAu);
      break;
  }
  return result;
}

void *std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6, char *a7, uint64_t a8, unsigned char *a9, unsigned int a10)
{
  uint64_t v10 = a8;
  unint64_t v11 = (int8x16_t *)a7;
  unint64_t v13 = a4;
  *(void *)int16x8_t v108 = a3;
  unint64_t v14 = a2;
  unint64_t v15 = a1;
  char v16 = a4;
  if (a6)
  {
    char v17 = 45;
LABEL_7:
    *a7 = v17;
    size_t v19 = (int8x16_t *)(a7 + 1);
    goto LABEL_8;
  }
  int v18 = (a4 >> 3) & 3;
  if (v18 == 2)
  {
    char v17 = 43;
    goto LABEL_7;
  }
  size_t v19 = (int8x16_t *)a7;
  if (v18 == 3)
  {
    char v17 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a4 & 0x20) != 0)
  {
    if (a9)
    {
      __int8 v20 = *a9;
      if (*a9)
      {
        unint64_t v21 = a9 + 1;
        do
        {
          v19->i8[0] = v20;
          size_t v19 = (int8x16_t *)((char *)v19 + 1);
          int v22 = *v21++;
          __int8 v20 = v22;
        }
        while (v22);
      }
    }
  }
  HIDWORD(v24) = a10;
  LODWORD(v24) = a10 - 2;
  int v23 = v24 >> 1;
  if (v23 == 4)
  {
    uint64_t v25 = a8 - (void)v19;
    if (a2)
    {
      if (v25 > 38
        || (unsigned int v26 = (1233 * (128 - __clz(a2))) >> 12,
            v25 >= v26 - (__PAIR128__(a2, a1) < std::__itoa::__pow10_128[v26]) + 1))
      {
        if (__PAIR128__(a2, a1) >= __PAIR128__(0x4B3B4CA85A86C47ALL, 0x98A224000000000))
        {
          v19->i8[0] = __udivti3() | 0x30;
          unsigned int v30 = __udivti3();
          v19->i8[1] = v30 / 0x5F5E100 + 48;
          v19->i16[1] = std::__itoa::__digits_base_10[v30 % 0x5F5E100 / 0xF4240];
          unsigned int v31 = v30 % 0x5F5E100 % 0xF4240;
          v19->i16[2] = std::__itoa::__digits_base_10[v31 / 0x2710uLL];
          LOWORD(v31) = v31 % 0x2710;
          v19->i16[3] = std::__itoa::__digits_base_10[(unsigned __int16)v31 / 0x64u];
          v19->i16[4] = std::__itoa::__digits_base_10[(unsigned __int16)v31 % 0x64u];
          unint64_t v32 = __udivti3();
          v19->i16[5] = std::__itoa::__digits_base_10[v32 / 0x5F5E100];
          unsigned int v33 = v32 % 0x5F5E100;
          v19->i16[6] = std::__itoa::__digits_base_10[v33 / 0xF4240];
          v33 %= 0xF4240u;
          v19->i16[7] = std::__itoa::__digits_base_10[v33 / 0x2710uLL];
          LOWORD(v33) = v33 % 0x2710;
          v19[1].i16[0] = std::__itoa::__digits_base_10[(unsigned __int16)v33 / 0x64u];
          v19[1].i16[1] = std::__itoa::__digits_base_10[(unsigned __int16)v33 % 0x64u];
          size_t v28 = &v19[1].i16[2];
        }
        else
        {
          unint64_t v27 = __udivti3();
          if (HIDWORD(v27))
          {
            unsigned int v37 = v19;
            if (v27 > 0x2540BE3FFLL)
            {
              unsigned int v37 = (int8x16_t *)std::__itoa::__base_10_u32[abi:nn180100](v19, v27 / 0x2540BE400);
              v27 %= 0x2540BE400uLL;
            }
            v37->i16[0] = std::__itoa::__digits_base_10[v27 / 0x5F5E100];
            unsigned int v38 = v27 % 0x5F5E100;
            v37->i16[1] = std::__itoa::__digits_base_10[v38 / 0xF4240];
            v38 %= 0xF4240u;
            v37->i16[2] = std::__itoa::__digits_base_10[v38 / 0x2710uLL];
            LOWORD(v38) = v38 % 0x2710;
            v37->i16[3] = std::__itoa::__digits_base_10[(unsigned __int16)v38 / 0x64u];
            v37->i16[4] = std::__itoa::__digits_base_10[(unsigned __int16)v38 % 0x64u];
            size_t v28 = &v37->i16[5];
          }
          else
          {
            size_t v28 = std::__itoa::__base_10_u32[abi:nn180100](v19, v27);
          }
        }
        unint64_t v39 = __umodti3();
        *(unsigned char *)size_t v28 = v39 / 0x2540BE400 / 0x5F5E100 + 48;
        unsigned int v40 = v39 / 0x2540BE400 % 0x5F5E100;
        *(__int16 *)((char *)v28 + 1) = std::__itoa::__digits_base_10[v40 / 0xF4240];
        v40 %= 0xF4240u;
        *(__int16 *)((char *)v28 + 3) = std::__itoa::__digits_base_10[v40 / 0x2710uLL];
        LOWORD(v40) = v40 % 0x2710;
        *(__int16 *)((char *)v28 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v40 / 0x64u];
        *(__int16 *)((char *)v28 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v40 % 0x64u];
        *(__int16 *)((char *)v28 + 9) = std::__itoa::__digits_base_10[v39 % 0x2540BE400 / 0x5F5E100];
        unsigned int v41 = v39 % 0x2540BE400 % 0x5F5E100;
        *(__int16 *)((char *)v28 + 11) = std::__itoa::__digits_base_10[v41 / 0xF4240];
        v41 %= 0xF4240u;
        *(__int16 *)((char *)v28 + 13) = std::__itoa::__digits_base_10[v41 / 0x2710uLL];
        LOWORD(v41) = v41 % 0x2710;
        *(__int16 *)((char *)v28 + 15) = std::__itoa::__digits_base_10[(unsigned __int16)v41 / 0x64u];
        *(__int16 *)((char *)v28 + 17) = std::__itoa::__digits_base_10[(unsigned __int16)v41 % 0x64u];
        uint64_t v10 = (uint64_t)v28 + 19;
        unint64_t v13 = a4;
      }
    }
    else if (v25 > 19 {
           || (unsigned int v29 = (1233 * (64 - __clz(a1 | 1))) >> 12,
    }
               v25 >= v29 - (std::__itoa::__pow10_64[v29] > a1) + 1))
    {
      if (HIDWORD(a1))
      {
        int v34 = v19;
        if (v15 > 0x2540BE3FFLL)
        {
          int v34 = (int8x16_t *)std::__itoa::__base_10_u32[abi:nn180100](v19, v15 / 0x2540BE400);
          v15 %= 0x2540BE400uLL;
          unint64_t v11 = (int8x16_t *)a7;
        }
        v34->i16[0] = std::__itoa::__digits_base_10[v15 / 0x5F5E100];
        unsigned int v36 = v15 % 0x5F5E100;
        v34->i16[1] = std::__itoa::__digits_base_10[v36 / 0xF4240uLL];
        v36 %= 0xF4240u;
        v34->i16[2] = std::__itoa::__digits_base_10[v36 / 0x2710uLL];
        LOWORD(v36) = v36 % 0x2710;
        v34->i16[3] = std::__itoa::__digits_base_10[(unsigned __int16)v36 / 0x64u];
        v34->i16[4] = std::__itoa::__digits_base_10[(unsigned __int16)v36 % 0x64u];
        uint64_t v10 = (uint64_t)&v34->i64[1] + 2;
      }
      else
      {
        uint64_t v10 = (uint64_t)std::__itoa::__base_10_u32[abi:nn180100](v19, a1);
      }
    }
  }
  else if (v23)
  {
    if (v23 == 3)
    {
      uint64_t v10 = std::__to_chars_integral[abi:nn180100]<8u,unsigned __int128,0>((uint64_t)v19, a8, a1, a2);
    }
    else if (v23 == 7)
    {
      uint64_t v10 = std::__to_chars_integral[abi:nn180100]<16u,unsigned __int128,0>((uint64_t)v19, a8, a1, a2);
    }
    else
    {
      uint64_t v96 = a8 - (void)v19;
      int v97 = std::__to_chars_integral_width[abi:nn180100]<unsigned __int128>(a1, a2, a10);
      BOOL v98 = v96 < v97;
      unint64_t v11 = (int8x16_t *)a7;
      if (!v98)
      {
        size_t v105 = &v19->i8[v97];
        size_t v99 = v105 - 1;
        do
        {
          uint64_t v100 = __udivti3();
          BOOL v101 = __PAIR128__(v14, v15) >= a10;
          *v99-- = a0123456789abcd[v15 - v100 * a10];
          unint64_t v15 = v100;
          unint64_t v14 = v102;
        }
        while (v101);
        unint64_t v11 = (int8x16_t *)a7;
        uint64_t v10 = (uint64_t)v105;
      }
    }
  }
  else
  {
    uint64_t v10 = std::__to_chars_integral[abi:nn180100]<2u,unsigned __int128,0>((uint64_t)v19, a8, a1, a2);
  }
  uint64_t v42 = *(std::locale **)v108;
  if ((v16 & 0x40) == 0) {
    goto LABEL_82;
  }
  if (!*(unsigned char *)(*(void *)v108 + 40))
  {
    MEMORY[0x1A6239040](&v112);
    if (*(unsigned char *)(*(void *)v108 + 40))
    {
      std::locale::operator=((std::locale *)(*(void *)v108 + 32), &v112);
    }
    else
    {
      std::locale::locale((std::locale *)(*(void *)v108 + 32), &v112);
      *(unsigned char *)(*(void *)v108 + 40) = 1;
    }
    std::locale::~locale(&v112);
  }
  size_t v106 = v11;
  uint64_t v43 = v10 - (void)v19;
  std::locale::locale(&v112, v42 + 4);
  size_t v44 = std::locale::use_facet(&v112, MEMORY[0x1E4FBA2A0]);
  std::locale::~locale(&v112);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v44->__vftable[1].__on_zero_shared)(&v112, v44);
  if ((char)v114 < 0)
  {
    uint64_t v104 = v10;
    locale = (unsigned __int8 *)v112.__locale_;
    uint64_t v46 = v113;
    if (v113 && v43 > *(char *)v112.__locale_)
    {
      unint64_t v103 = a5;
      unint64_t v47 = v112.__locale_;
      goto LABEL_46;
    }
    operator delete(v112.__locale_);
    uint64_t v10 = v104;
    unint64_t v11 = v106;
LABEL_82:
    unint64_t v66 = (char *)v10;
    unint64_t v67 = HIDWORD(v13);
    unint64_t v68 = v42->__locale_;
    if ((v16 & 7) == 4)
    {
      unint64_t v69 = (char *)v19 - (char *)v11;
      size_t v71 = v68[1];
      uint64_t v70 = v68[2];
      if (v70 + (char *)v19 - (char *)v11 >= v71)
      {
        ((void (*)(void))v68[3])(*v68);
        uint64_t v70 = 0;
        v68[2] = 0;
        size_t v71 = v68[1];
      }
      unint64_t v72 = a5;
      size_t v73 = v69 - v71;
      if (v69 >= v71)
      {
        if (v71) {
          memmove((void *)(*v68 + v70), v11, v71);
        }
        v68[2] = v71;
        ((void (*)(void, size_t, void))v68[3])(*v68, v71, v68[4]);
        v68[2] = 0;
        if (v73)
        {
          int32x4_t v76 = &v11->i8[v71];
          do
          {
            if (v68[1] >= v73) {
              size_t v77 = v73;
            }
            else {
              size_t v77 = v68[1];
            }
            if (v77) {
              memmove((void *)*v68, v76, v77);
            }
            v68[2] = v77;
            v76 += v77;
            v73 -= v77;
            ((void (*)(void, size_t, void))v68[3])(*v68, v77, v68[4]);
            v68[2] = 0;
          }
          while (v73);
        }
      }
      else
      {
        if (v19 != v11)
        {
          memmove((void *)(*v68 + v70), v11, (char *)v19 - (char *)v11);
          uint64_t v70 = v68[2];
        }
        v68[2] = v70 + v69;
      }
      LODWORD(v13) = a4;
      unsigned __int8 v75 = a4 & 0xF8 | 3;
      if ((int)v67 >= (int)v69) {
        int v78 = v69;
      }
      else {
        int v78 = v67;
      }
      unint64_t v67 = (v67 - v78);
      unint64_t v68 = **(void ***)v108;
      unsigned __int8 v74 = 48;
      a5 = v72;
    }
    else
    {
      unsigned __int8 v74 = BYTE4(a5);
      unsigned __int8 v75 = v13;
      size_t v19 = v11;
    }
    uint64_t v79 = v13 & 0xFFFFFF00 | (v67 << 32) | v75;
    unint64_t v80 = a5 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v74 << 32);
    if ((v13 & 0xFF00) == 0x700) {
      std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v19, v66, v68, v79, v80);
    }
    else {
      std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v19->i8, v66 - (char *)v19, v68, v79, v80, v66 - (char *)v19);
    }
    return v68;
  }
  if (!v114 || v43 <= SLOBYTE(v112.__locale_))
  {
    unint64_t v11 = v106;
    goto LABEL_82;
  }
  unint64_t v103 = a5;
  LODWORD(v104) = v10;
  locale = (unsigned __int8 *)&v112;
  unint64_t v47 = v112.__locale_;
  uint64_t v46 = v113;
LABEL_46:
  *(std::locale *)int16x8_t v108 = (std::locale)v42->__locale_;
  std::string __p = 0;
  size_t v110 = 0;
  unint64_t v111 = 0;
  uint64_t v48 = (char *)v47 + v46;
  unint64_t v49 = (char *)&v112 + v114;
  if ((v114 & 0x80u) != 0) {
    unint64_t v49 = v48;
  }
  uint64_t v50 = (char)*locale;
  char v51 = *locale;
  uint64_t v52 = v43 - v50;
  if (v43 <= v50)
  {
    unsigned int v83 = 0;
    char v82 = v51 + v52;
    unint64_t v84 = v103;
    uint64_t v85 = a4;
    goto LABEL_111;
  }
  unsigned __int8 v53 = v49 - 1;
  do
  {
    if ((SHIBYTE(v111) & 0x80000000) == 0)
    {
      if (HIBYTE(v111) != 22)
      {
        size_t v55 = HIBYTE(v111);
        HIBYTE(v111) = (HIBYTE(v111) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_73;
      }
      uint64_t v54 = &__p;
      size_t v55 = 22;
LABEL_58:
      if (v55 + 1 > 2 * v55) {
        unint64_t v57 = v55 + 1;
      }
      else {
        unint64_t v57 = 2 * v55;
      }
      uint64_t v58 = (v57 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17) {
        uint64_t v58 = v57 | 7;
      }
      if (v57 >= 0x17) {
        size_t v56 = v58 + 1;
      }
      else {
        size_t v56 = 23;
      }
LABEL_66:
      uint64_t v59 = (char *)operator new(v56);
      p_p = v59;
      if (!v55 || (memmove(v59, v54, v55), v55 != 22)) {
        operator delete(v54);
      }
      std::string __p = p_p;
      unint64_t v111 = v56 | 0x8000000000000000;
      goto LABEL_72;
    }
    size_t v55 = (v111 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v110 == v55)
    {
      if ((v111 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_144;
      }
      uint64_t v54 = __p;
      size_t v56 = 0x7FFFFFFFFFFFFFF7;
      if (v55 >= 0x3FFFFFFFFFFFFFF3) {
        goto LABEL_66;
      }
      goto LABEL_58;
    }
    p_p = (char *)__p;
    size_t v55 = v110;
LABEL_72:
    size_t v110 = v55 + 1;
LABEL_73:
    int8x8_t v61 = &p_p[v55];
    *int8x8_t v61 = v51;
    v61[1] = 0;
    if (locale == (unsigned __int8 *)v53)
    {
      char v51 = *v53;
      locale = (unsigned __int8 *)v53;
    }
    else
    {
      char v62 = (char *)(locale + 1);
      uint64_t v63 = (char *)(locale + 1);
      do
      {
        int v64 = *v63++;
        char v51 = v64;
        if (v64) {
          BOOL v65 = 1;
        }
        else {
          BOOL v65 = v62 == v53;
        }
        char v62 = v63;
      }
      while (!v65);
      locale = (unsigned __int8 *)(v63 - 1);
    }
    v52 -= v51;
  }
  while (v52 > 0);
  char v82 = v51 + v52;
  if (SHIBYTE(v111) < 0)
  {
    size_t v87 = (v111 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v84 = v103;
    uint64_t v85 = a4;
    if (v110 == v87)
    {
      if ((v111 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
LABEL_144:
      }
        abort();
      uint64_t v86 = __p;
      size_t v89 = 0x7FFFFFFFFFFFFFF7;
      if (v87 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_115:
        if (v87 + 1 > 2 * v87) {
          unint64_t v90 = v87 + 1;
        }
        else {
          unint64_t v90 = 2 * v87;
        }
        uint64_t v91 = (v90 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v90 | 7) != 0x17) {
          uint64_t v91 = v90 | 7;
        }
        if (v90 >= 0x17) {
          size_t v89 = v91 + 1;
        }
        else {
          size_t v89 = 23;
        }
      }
      size_t v92 = (char *)operator new(v89);
      size_t v88 = v92;
      if (!v87 || (memmove(v92, v86, v87), v87 != 22)) {
        operator delete(v86);
      }
      std::string __p = v88;
      unint64_t v111 = v89 | 0x8000000000000000;
    }
    else
    {
      size_t v88 = (char *)__p;
      size_t v87 = v110;
    }
    size_t v110 = v87 + 1;
  }
  else
  {
    unsigned int v83 = HIBYTE(v111);
    unint64_t v84 = v103;
    uint64_t v85 = a4;
    if (HIBYTE(v111) == 22)
    {
      uint64_t v86 = &__p;
      size_t v87 = 22;
      goto LABEL_115;
    }
LABEL_111:
    size_t v87 = v83;
    HIBYTE(v111) = (v83 + 1) & 0x7F;
    size_t v88 = (char *)&__p;
  }
  uint64_t v93 = &v88[v87];
  *uint64_t v93 = v82;
  v93[1] = 0;
  char v94 = ((uint64_t (*)(const std::locale::facet *))v44->__vftable[1].~facet_0)(v44);
  unint64_t v68 = std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(*(void **)v108, v106, v19, v104, (uint64_t *)&__p, v94, v85, v84);
  if (SHIBYTE(v111) < 0) {
    operator delete(__p);
  }
  if ((char)v114 < 0) {
    operator delete(v112.__locale_);
  }
  return v68;
}

uint64_t std::__to_chars_integral[abi:nn180100]<2u,unsigned __int128,0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = __clz(a3 | 1) | 0x40;
  unint64_t v5 = __clz(a4);
  if (a4) {
    unint64_t v4 = v5;
  }
  int64_t v6 = 128 - v4;
  if (a2 - a1 < v6) {
    return a2;
  }
  uint64_t v8 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x11)
  {
    unint64_t v10 = a3;
    unint64_t v13 = a4;
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = a1 + v6;
    do
    {
      *((void *)&v11 + 1) = a4;
      *(void *)&long long v11 = a3;
      unint64_t v10 = v11 >> 4;
      BOOL v12 = a3 <= 0x10F;
      unint64_t v13 = a4 >> 4;
      *(_DWORD *)(v9 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v9 -= 4;
      a3 = v10;
      a4 >>= 4;
    }
    while (!v12);
  }
  unint64_t v14 = (unsigned char *)(v9 - 1);
  do
  {
    unint64_t v15 = v10 & 1;
    BOOL v12 = v10 <= 1;
    *((void *)&v16 + 1) = v13;
    *(void *)&long long v16 = v10;
    unint64_t v10 = v16 >> 1;
    v13 >>= 1;
    *v14-- = a01_0[v15];
  }
  while (!v12);
  return v8;
}

uint64_t std::__to_chars_integral[abi:nn180100]<8u,unsigned __int128,0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4 = __clz(a3 | 1) | 0x40;
  char v5 = __clz(a4);
  if (a4) {
    char v4 = v5;
  }
  uint64_t v6 = (-126 - v4) / 3u;
  if (a2 - a1 < v6) {
    return a2;
  }
  uint64_t v8 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x41)
  {
    unint64_t v10 = a3;
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = a1 + v6;
    do
    {
      *((void *)&v11 + 1) = a4;
      *(void *)&long long v11 = a3;
      unint64_t v10 = v11 >> 6;
      a4 >>= 6;
      *(_WORD *)(v9 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v9 -= 2;
      a3 = v10;
    }
    while (v10 > 0x40);
  }
  BOOL v12 = (unsigned char *)(v9 - 1);
  do
  {
    unint64_t v13 = v10 & 7;
    BOOL v14 = v10 <= 7;
    *((void *)&v15 + 1) = a4;
    *(void *)&long long v15 = v10;
    unint64_t v10 = v15 >> 3;
    a4 >>= 3;
    *v12-- = a01234567[v13];
  }
  while (!v14);
  return v8;
}

uint64_t std::__to_chars_integral[abi:nn180100]<16u,unsigned __int128,0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = __clz(a3 | 1) | 0x40;
  unint64_t v5 = __clz(a4);
  if (a4) {
    unint64_t v4 = v5;
  }
  int64_t v6 = (131 - v4) >> 2;
  if (a2 - a1 < v6) {
    return a2;
  }
  uint64_t v8 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x101)
  {
    unint64_t v10 = a3;
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = a1 + v6;
    do
    {
      *((void *)&v11 + 1) = a4;
      *(void *)&long long v11 = a3;
      unint64_t v10 = v11 >> 8;
      a4 >>= 8;
      *(_WORD *)(v9 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v9 -= 2;
      a3 = v10;
    }
    while (v10 > 0x100);
  }
  BOOL v12 = (unsigned char *)(v9 - 1);
  do
  {
    unint64_t v13 = v10 & 0xF;
    BOOL v14 = v10 <= 0xF;
    *((void *)&v15 + 1) = a4;
    *(void *)&long long v15 = v10;
    unint64_t v10 = v15 >> 4;
    a4 >>= 4;
    *v12-- = a0123456789abcd_0[v13];
  }
  while (!v14);
  return v8;
}

uint64_t std::__to_chars_integral_width[abi:nn180100]<unsigned __int128>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (__PAIR128__(a2, a1) < a3) {
    return 1;
  }
  int v5 = 0;
  unsigned int v6 = a3 * a3;
  unsigned int v7 = a3 * a3 * a3;
  while (1)
  {
    if (__PAIR128__(a2, a1) < v6) {
      return v5 | 2u;
    }
    if (__PAIR128__(a2, a1) < v7) {
      return v5 | 3u;
    }
    if (__PAIR128__(a2, a1) < v6 * v6) {
      break;
    }
    a1 = __udivti3();
    v5 += 4;
    if (__PAIR128__(a2, a1) < a3) {
      return v5 | 1u;
    }
  }
  return (v5 + 4);
}

uint64_t std::__format_spec::__throw_invalid_option_format_error[abi:nn180100](char *a1, char *a2)
{
  std::string::basic_string[abi:nn180100]<0>(&v8, "The format specifier for ");
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v9, &v8, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, &v9, " does not allow the ");
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v11, &v10, a2);
  __n128 v4 = std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v12, &v11, " option");
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v5 = &v12;
  }
  else {
    int v5 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  uint64_t v6 = ((uint64_t (*)(std::string *, __n128))std::__throw_format_error[abi:nn180100])(v5, v4);
  return std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v6);
}

void *std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  switch(BYTE1(a3))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x1A281CE74);
    case 2:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      unsigned int v7 = &v13;
      unsigned int v9 = 2;
      std::string v8 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      unsigned int v7 = &v13;
      unsigned int v9 = 2;
      std::string v8 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      unsigned int v7 = (uint64_t *)&v12[3];
      if (a1) {
        std::string v8 = "0";
      }
      else {
        std::string v8 = 0;
      }
      unsigned int v9 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      unsigned int v7 = (uint64_t *)v11;
      unsigned int v9 = 16;
      std::string v8 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      unsigned int v7 = (uint64_t *)v11;
      unsigned int v9 = 16;
      std::string v8 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, v6, a4, a5, v10, (uint64_t)v7, v8, v9);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, v10, (uint64_t)v12, 0, 0xAu);
      break;
  }
  return result;
}

void *std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, unsigned char *a8, unsigned int a9)
{
  unsigned int v9 = (int8x16_t *)a6;
  char v13 = a3;
  if (a5)
  {
    char v14 = 45;
LABEL_7:
    *a6 = v14;
    long long v16 = (int8x16_t *)(a6 + 1);
    goto LABEL_8;
  }
  int v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    char v14 = 43;
    goto LABEL_7;
  }
  long long v16 = (int8x16_t *)a6;
  if (v15 == 3)
  {
    char v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      __int8 v17 = *a8;
      if (*a8)
      {
        int v18 = a8 + 1;
        do
        {
          v16->i8[0] = v17;
          long long v16 = (int8x16_t *)((char *)v16 + 1);
          int v19 = *v18++;
          __int8 v17 = v19;
        }
        while (v19);
      }
    }
  }
  __int8 v20 = (char *)std::__to_chars_integral[abi:nn180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0) {
    goto LABEL_62;
  }
  if (!*(unsigned char *)(a2 + 40))
  {
    MEMORY[0x1A6239040](&v81);
    if (*(unsigned char *)(a2 + 40))
    {
      std::locale::operator=((std::locale *)(a2 + 32), &v81);
    }
    else
    {
      std::locale::locale((std::locale *)(a2 + 32), &v81);
      *(unsigned char *)(a2 + 40) = 1;
    }
    std::locale::~locale(&v81);
  }
  int64_t v21 = v20 - (char *)v16;
  std::locale::locale(&v81, (const std::locale *)(a2 + 32));
  int v22 = std::locale::use_facet(&v81, MEMORY[0x1E4FBA2A0]);
  std::locale::~locale(&v81);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v22->__vftable[1].__on_zero_shared)(&v81, v22);
  if ((char)v83 < 0)
  {
    unsigned __int8 v74 = v9;
    locale = (unsigned __int8 *)v81.__locale_;
    uint64_t v24 = v82;
    if (v82 && v21 > *(char *)v81.__locale_)
    {
      size_t v73 = v22;
      uint64_t v25 = v81.__locale_;
      goto LABEL_26;
    }
    operator delete(v81.__locale_);
    unsigned int v9 = v74;
LABEL_62:
    unint64_t v45 = HIDWORD(a3);
    uint64_t v46 = *(void **)a2;
    if ((v13 & 7) == 4)
    {
      int32x4_t v76 = v20;
      unint64_t v77 = a4;
      unint64_t v47 = (char *)v16 - (char *)v9;
      size_t v49 = v46[1];
      uint64_t v48 = v46[2];
      if (v48 + (char *)v16 - (char *)v9 >= v49)
      {
        ((void (*)(void))v46[3])(*v46);
        uint64_t v48 = 0;
        v46[2] = 0;
        size_t v49 = v46[1];
      }
      size_t v50 = v47 - v49;
      if (v47 >= v49)
      {
        if (v49) {
          memmove((void *)(*v46 + v48), v9, v49);
        }
        v46[2] = v49;
        ((void (*)(void, size_t, void))v46[3])(*v46, v49, v46[4]);
        v46[2] = 0;
        if (v50)
        {
          unsigned __int8 v53 = &v9->i8[v49];
          do
          {
            if (v46[1] >= v50) {
              size_t v54 = v50;
            }
            else {
              size_t v54 = v46[1];
            }
            if (v54) {
              memmove((void *)*v46, v53, v54);
            }
            v46[2] = v54;
            v53 += v54;
            v50 -= v54;
            ((void (*)(void, size_t, void))v46[3])(*v46, v54, v46[4]);
            v46[2] = 0;
          }
          while (v50);
        }
      }
      else
      {
        if (v16 != v9)
        {
          memmove((void *)(*v46 + v48), v9, (char *)v16 - (char *)v9);
          uint64_t v48 = v46[2];
        }
        v46[2] = v48 + v47;
      }
      unsigned __int8 v52 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v47) {
        int v55 = v47;
      }
      else {
        int v55 = HIDWORD(a3);
      }
      unint64_t v45 = (HIDWORD(a3) - v55);
      uint64_t v46 = *(void **)a2;
      unsigned __int8 v51 = 48;
      __int8 v20 = v76;
      a4 = v77;
    }
    else
    {
      unsigned __int8 v51 = BYTE4(a4);
      unsigned __int8 v52 = a3;
      long long v16 = v9;
    }
    uint64_t v56 = a3 & 0xFFFFFF00 | (v45 << 32) | v52;
    unint64_t v57 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v51 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v16, v20, v46, v56, v57);
    }
    else {
      std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v16->i8, v20 - (char *)v16, v46, v56, v57, v20 - (char *)v16);
    }
    return v46;
  }
  if (!v83 || v21 <= SLOBYTE(v81.__locale_)) {
    goto LABEL_62;
  }
  size_t v73 = v22;
  unsigned __int8 v74 = v9;
  locale = (unsigned __int8 *)&v81;
  uint64_t v25 = v81.__locale_;
  uint64_t v24 = v82;
LABEL_26:
  unint64_t v72 = *(void **)a2;
  std::string __p = 0;
  size_t v79 = 0;
  unint64_t v80 = 0;
  unsigned int v26 = (char *)v25 + v24;
  unint64_t v27 = (char *)&v81 + v83;
  if ((v83 & 0x80u) != 0) {
    unint64_t v27 = v26;
  }
  int64_t v28 = (char)*locale;
  char v29 = *locale;
  BOOL v30 = v21 <= v28;
  uint64_t v31 = v21 - v28;
  int v75 = (int)v20;
  unint64_t v77 = a4;
  if (v30)
  {
    unsigned int v60 = 0;
    char v59 = v29 + v31;
    char v62 = v73;
    int8x8_t v61 = v74;
    goto LABEL_91;
  }
  unint64_t v32 = v27 - 1;
  do
  {
    if ((SHIBYTE(v80) & 0x80000000) == 0)
    {
      if (HIBYTE(v80) != 22)
      {
        size_t v34 = HIBYTE(v80);
        HIBYTE(v80) = (HIBYTE(v80) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_53;
      }
      unsigned int v33 = &__p;
      size_t v34 = 22;
LABEL_38:
      if (v34 + 1 > 2 * v34) {
        unint64_t v36 = v34 + 1;
      }
      else {
        unint64_t v36 = 2 * v34;
      }
      uint64_t v37 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17) {
        uint64_t v37 = v36 | 7;
      }
      if (v36 >= 0x17) {
        size_t v35 = v37 + 1;
      }
      else {
        size_t v35 = 23;
      }
LABEL_46:
      unsigned int v38 = (char *)operator new(v35);
      p_p = v38;
      if (!v34 || (memmove(v38, v33, v34), v34 != 22)) {
        operator delete(v33);
      }
      std::string __p = p_p;
      unint64_t v80 = v35 | 0x8000000000000000;
      goto LABEL_52;
    }
    size_t v34 = (v80 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v79 == v34)
    {
      if ((v80 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_114;
      }
      unsigned int v33 = __p;
      size_t v35 = 0x7FFFFFFFFFFFFFF7;
      if (v34 >= 0x3FFFFFFFFFFFFFF3) {
        goto LABEL_46;
      }
      goto LABEL_38;
    }
    p_p = (char *)__p;
    size_t v34 = v79;
LABEL_52:
    size_t v79 = v34 + 1;
LABEL_53:
    unsigned int v40 = &p_p[v34];
    char *v40 = v29;
    v40[1] = 0;
    if (locale == (unsigned __int8 *)v32)
    {
      char v29 = *v32;
      locale = (unsigned __int8 *)v32;
    }
    else
    {
      unsigned int v41 = (char *)(locale + 1);
      uint64_t v42 = (char *)(locale + 1);
      do
      {
        int v43 = *v42++;
        char v29 = v43;
        if (v43) {
          BOOL v44 = 1;
        }
        else {
          BOOL v44 = v41 == v32;
        }
        unsigned int v41 = v42;
      }
      while (!v44);
      locale = (unsigned __int8 *)(v42 - 1);
    }
    v31 -= v29;
  }
  while (v31 > 0);
  char v59 = v29 + v31;
  if (SHIBYTE(v80) < 0)
  {
    size_t v64 = (v80 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    char v62 = v73;
    int8x8_t v61 = v74;
    if (v79 == v64)
    {
      if ((v80 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
LABEL_114:
      }
        abort();
      uint64_t v63 = __p;
      size_t v66 = 0x7FFFFFFFFFFFFFF7;
      if (v64 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_95:
        if (v64 + 1 > 2 * v64) {
          unint64_t v67 = v64 + 1;
        }
        else {
          unint64_t v67 = 2 * v64;
        }
        uint64_t v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17) {
          uint64_t v68 = v67 | 7;
        }
        if (v67 >= 0x17) {
          size_t v66 = v68 + 1;
        }
        else {
          size_t v66 = 23;
        }
      }
      unint64_t v69 = (char *)operator new(v66);
      BOOL v65 = v69;
      if (!v64 || (memmove(v69, v63, v64), v64 != 22)) {
        operator delete(v63);
      }
      std::string __p = v65;
      unint64_t v80 = v66 | 0x8000000000000000;
    }
    else
    {
      BOOL v65 = (char *)__p;
      size_t v64 = v79;
    }
    size_t v79 = v64 + 1;
  }
  else
  {
    unsigned int v60 = HIBYTE(v80);
    char v62 = v73;
    int8x8_t v61 = v74;
    if (HIBYTE(v80) == 22)
    {
      uint64_t v63 = &__p;
      size_t v64 = 22;
      goto LABEL_95;
    }
LABEL_91:
    size_t v64 = v60;
    HIBYTE(v80) = (v60 + 1) & 0x7F;
    BOOL v65 = (char *)&__p;
  }
  uint64_t v70 = &v65[v64];
  *uint64_t v70 = v59;
  v70[1] = 0;
  char v71 = ((uint64_t (*)(const std::locale::facet *))v62->__vftable[1].~facet_0)(v62);
  uint64_t v46 = std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v72, v61, v16, v75, (uint64_t *)&__p, v71, a3, v77);
  if (SHIBYTE(v80) < 0) {
    operator delete(__p);
  }
  if ((char)v83 < 0) {
    operator delete(v81.__locale_);
  }
  return v46;
}

uint64_t std::__to_chars_integral[abi:nn180100]<2u,unsigned int,0>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 32 - __clz(a3 | 1);
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v5 = a1 + v3;
  if (a3 < 0x11)
  {
    unsigned int v7 = a3;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = a1 + v3;
    do
    {
      unsigned int v7 = a3 >> 4;
      *(_DWORD *)(v6 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v6 -= 4;
      BOOL v8 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v8);
  }
  unsigned int v9 = (unsigned char *)(v6 - 1);
  do
  {
    *v9-- = a01_0[v7 & 1];
    BOOL v8 = v7 > 1;
    v7 >>= 1;
  }
  while (v8);
  return v5;
}

uint64_t std::__to_chars_integral[abi:nn180100]<8u,unsigned int,0>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (86 * (34 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v5 = a1 + v3;
  if (a3 < 0x41)
  {
    unsigned int v7 = a3;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = a1 + v3;
    do
    {
      unsigned int v7 = a3 >> 6;
      *(_WORD *)(v6 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v6 -= 2;
      a3 = v7;
    }
    while (v7 > 0x40);
  }
  BOOL v8 = (unsigned char *)(v6 - 1);
  do
  {
    *v8-- = a01234567[v7 & 7];
    BOOL v9 = v7 > 7;
    v7 >>= 3;
  }
  while (v9);
  return v5;
}

uint64_t std::__to_chars_integral[abi:nn180100]<16u,unsigned int,0>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (35 - __clz(a3 | 1)) >> 2;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v5 = a1 + v3;
  if (a3 < 0x101)
  {
    unsigned int v7 = a3;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = a1 + v3;
    do
    {
      unsigned int v7 = a3 >> 8;
      *(_WORD *)(v6 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v6 -= 2;
      a3 = v7;
    }
    while (v7 > 0x100);
  }
  BOOL v8 = (unsigned char *)(v6 - 1);
  do
  {
    *v8-- = a0123456789abcd_0[v7 & 0xF];
    BOOL v9 = v7 > 0xF;
    v7 >>= 4;
  }
  while (v9);
  return v5;
}

uint64_t std::__to_chars_integral_width[abi:nn180100]<unsigned int>(unsigned int a1, unsigned int a2)
{
  if (a1 < a2) {
    return 1;
  }
  int v3 = 0;
  unsigned int v4 = a2 * a2;
  unsigned int v5 = v4 * v4;
  while (1)
  {
    if (a1 < v4) {
      return v3 | 2u;
    }
    if (a1 < a2 * a2 * a2) {
      return v3 | 3u;
    }
    if (a1 < v5) {
      break;
    }
    a1 /= v5;
    v3 += 4;
    if (a1 < a2) {
      return v3 | 1u;
    }
  }
  return (v3 + 4);
}

char *std::vector<std::function<void ()(ecs2::ExecutionDebugTaskContext)>>::__emplace_back_slow_path<std::function<void ()(ecs2::ExecutionDebugTaskContext)> const&>(char **a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 59) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v8 = (char *)operator new(32 * v7);
  }
  else
  {
    BOOL v8 = 0;
  }
  BOOL v9 = &v8[32 * v2];
  std::string v10 = (void *)a2[3];
  if (v10)
  {
    if (v10 == a2)
    {
      *((void *)v9 + 3) = v9;
      (*(void (**)(void *, char *))(*a2 + 24))(a2, v9);
    }
    else
    {
      *((void *)v9 + 3) = (*(uint64_t (**)(void *))(*v10 + 16))(v10);
    }
  }
  else
  {
    *((void *)v9 + 3) = 0;
  }
  std::string v11 = &v8[32 * v7];
  std::string v12 = v9 + 32;
  char v14 = *a1;
  char v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    do
    {
      int v15 = v9;
      v9 -= 32;
      long long v16 = v13 - 32;
      __int8 v17 = (char *)*((void *)v13 - 1);
      if (v17)
      {
        if (v16 == v17)
        {
          *((void *)v15 - 1) = v9;
          (*(void (**)(void, char *))(**((void **)v13 - 1) + 24))(*((void *)v13 - 1), v9);
        }
        else
        {
          *((void *)v15 - 1) = v17;
          *((void *)v13 - 1) = 0;
        }
      }
      else
      {
        *((void *)v15 - 1) = 0;
      }
      v13 -= 32;
    }
    while (v16 != v14);
    char v13 = *a1;
    int v18 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v11;
    if (v18 != v13)
    {
      int v19 = v18 - 32;
      __int8 v20 = v18 - 32;
      do
      {
        int v22 = (char *)*((void *)v20 + 3);
        if (v20 == v22)
        {
          (*(void (**)(char *))(*(void *)v20 + 32))(v20);
        }
        else if (v22)
        {
          (*(void (**)(char *))(*(void *)v22 + 40))(v22);
        }
        v19 -= 32;
        BOOL v21 = v20 == v13;
        v20 -= 32;
      }
      while (!v21);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v12;
}

void gdc::UnmanagedObjectHolder<ecs2::Runtime>::extract(void *a1@<X8>)
{
  *a1 = 0;
}

char *gdc::LayerDataRequestKey::keyData(gdc::LayerDataRequestKey *this, void *a2)
{
  uint64_t result = (char *)this + 32;
  *(void *)this = result;
  *((void *)this + 1) = result;
  *((void *)this + 2) = result;
  *((void *)this + 3) = 32;
  unsigned int v5 = (char *)a2[2];
  uint64_t v6 = (char *)a2[3];
  unint64_t v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40) {
      size_t v8 = 64;
    }
    else {
      size_t v8 = v6 - v5;
    }
    uint64_t result = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    BOOL v9 = *(char **)this;
    std::string v10 = (char *)*((void *)this + 1);
    if (*(char **)this == v10) {
      goto LABEL_21;
    }
    unint64_t v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      std::string v12 = result;
      goto LABEL_20;
    }
    std::string v12 = result;
    if ((unint64_t)(result - v9) < 0x20) {
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      char v14 = (long long *)(v9 + 16);
      int v15 = result + 16;
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        _OWORD *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13) {
        goto LABEL_21;
      }
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        std::string v12 = &result[v13];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    std::string v12 = &result[v11 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    __int8 v20 = (uint64_t *)&v9[v13];
    BOOL v21 = &result[v13];
    do
    {
      uint64_t v22 = *v20++;
      *(void *)BOOL v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18) {
      goto LABEL_21;
    }
    v9 += v18;
    do
    {
LABEL_20:
      char v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(void *)this = result;
    *((void *)this + 1) = result;
    *((void *)this + 3) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      uint64_t v25 = result;
      goto LABEL_38;
    }
    if ((unint64_t)(result - v5) < 0x20)
    {
      uint64_t v25 = result;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      unint64_t v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      unsigned int v26 = (long long *)(v5 + 16);
      unint64_t v27 = result + 16;
      unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *unint64_t v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24) {
        goto LABEL_39;
      }
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        uint64_t v25 = &result[v24];
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    unint64_t v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = &result[v7 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v32 = (uint64_t *)&v5[v24];
    unsigned int v33 = &result[v24];
    do
    {
      uint64_t v34 = *v32++;
      *(void *)unsigned int v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30) {
      goto LABEL_39;
    }
    v5 += v30;
    do
    {
LABEL_38:
      char v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    uint64_t result = (char *)*((void *)this + 1);
  }
  *((void *)this + 1) = &result[v7];
  *((void *)this + 8) = a2[10];
  return result;
}

void gdc::LayerDataRequestKey::createDebugNode(uint64_t a1, unsigned __int8 *a2)
{
  strcpy((char *)a1, "Layer Data Key");
  *(_WORD *)(a1 + 23) = 14;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(unsigned char *)(a1 + 95) = 0;
  char v13 = 12;
  strcpy((char *)&v12, "Request Type");
  unsigned int v5 = (unsigned __int16 *)(a2 + 8);
  uint64_t v4 = *a2;
  int v20 = 0;
  memset(&v19[4], 0, 24);
  v19[0] = v4;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)&v12, (uint64_t)v19);
  gdc::LayerDataKey::createDebugNode((uint64_t)&v12, v5);
  gdc::DebugTreeNode::addChildNode((void *)a1, &v12);
  uint64_t v6 = __p;
  if (__p)
  {
    uint64_t v7 = (uint64_t)v18;
    size_t v8 = __p;
    if (v18 != __p)
    {
      do
      {
        v7 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v7);
      }
      while ((void *)v7 != v6);
      size_t v8 = __p;
    }
    unint64_t v18 = v6;
    operator delete(v8);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v16);
  if (v15 < 0)
  {
    operator delete(v14);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete((void *)v12);
LABEL_8:
  char v13 = 8;
  strcpy((char *)&v12, "Priority");
  if (a2[96]) {
    uint64_t v9 = *((unsigned int *)a2 + 25);
  }
  else {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  int v11 = 1;
  memset(&v10[4], 0, 24);
  v10[1] = v9;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)&v12, (uint64_t)v10);
}

void *std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(float *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *((void *)a2 + 13);
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *((void *)a2 + 13);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      std::string v10 = *v9;
      if (*v9)
      {
        int v11 = *a2;
        int v12 = *((unsigned __int16 *)a2 + 4);
        uint64_t v13 = *((void *)a2 + 10);
        char v14 = (const void *)*((void *)a2 + 2);
        size_t v15 = *((void *)a2 + 3) - (void)v14;
        if (v8.u32[0] < 2uLL)
        {
          __s2 = (void *)*((void *)a2 + 2);
          while (1)
          {
            uint64_t v19 = v10[1];
            if (v19 == v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                int v20 = (const void *)v10[4];
                if (v10[5] - (void)v20 == v15)
                {
                  uint64_t v52 = v13;
                  int v21 = memcmp(v20, __s2, v15);
                  uint64_t v13 = v52;
                  if (!v21) {
                    return v10;
                  }
                }
              }
            }
            else if ((v19 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            std::string v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              long long v17 = (const void *)v10[4];
              if (v10[5] - (void)v17 == v15)
              {
                uint64_t v51 = v13;
                int v18 = memcmp(v17, v14, v15);
                uint64_t v13 = v51;
                if (!v18) {
                  return v10;
                }
              }
            }
          }
          else
          {
            if (v16 >= v7) {
              v16 %= v7;
            }
            if (v16 != v3) {
              break;
            }
          }
          std::string v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  std::string v10 = operator new(0x98uLL);
  *std::string v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *(unsigned char *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v10 + 3), a3 + 8);
  *((unsigned char *)v10 + 112) = 0;
  if (*(unsigned char *)(a3 + 96))
  {
    *((_DWORD *)v10 + 29) = *(_DWORD *)(a3 + 100);
    *((unsigned char *)v10 + 112) = 1;
  }
  v10[15] = *(void *)(a3 + 104);
  unsigned char v10[16] = 0;
  v10[17] = 0;
  v10[18] = 0;
  float v22 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v23 = a1[8];
  if (!v7 || (float)(v23 * (float)v7) < v22)
  {
    BOOL v24 = 1;
    if (v7 >= 3) {
      BOOL v24 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v7);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v7 = *((void *)a1 + 1);
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_70;
      }
      unint64_t v39 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
LABEL_70:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v6 >= v7) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        size_t v49 = *(void **)a1;
        *(void *)a1 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v28 = operator new(8 * prime);
    long long v29 = *(void **)a1;
    *(void *)a1 = v28;
    if (v29) {
      operator delete(v29);
    }
    uint64_t v30 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v30++) = 0;
    while (prime != v30);
    unint64_t v32 = (uint64_t *)(a1 + 4);
    unint64_t v31 = (void *)*((void *)a1 + 2);
    if (!v31)
    {
LABEL_69:
      unint64_t v7 = prime;
      goto LABEL_70;
    }
    size_t v33 = v31[1];
    size_t v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v35 = v33 & v34;
      *(void *)(*(void *)a1 + 8 * v35) = v32;
      for (uint64_t i = (void *)*v31; *v31; uint64_t i = (void *)*v31)
      {
        size_t v37 = i[1] & v34;
        if (v37 == v35)
        {
          unint64_t v31 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v37))
        {
          *unint64_t v31 = *i;
          uint64_t v38 = 8 * v37;
          *uint64_t i = **(void **)(*(void *)a1 + v38);
          **(void **)(*(void *)a1 + v38) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v37) = v31;
          unint64_t v31 = i;
          size_t v35 = v37;
        }
      }
      goto LABEL_69;
    }
    if (v33 >= prime) {
      v33 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v33) = v32;
    uint64_t v42 = (void *)*v31;
    if (!*v31) {
      goto LABEL_69;
    }
    while (1)
    {
      size_t v44 = v42[1];
      if (v44 >= prime) {
        v44 %= prime;
      }
      if (v44 != v33)
      {
        if (!*(void *)(*(void *)a1 + 8 * v44))
        {
          *(void *)(*(void *)a1 + 8 * v44) = v31;
          goto LABEL_74;
        }
        *unint64_t v31 = *v42;
        uint64_t v43 = 8 * v44;
        *uint64_t v42 = **(void **)(*(void *)a1 + v43);
        **(void **)(*(void *)a1 + v43) = v42;
        uint64_t v42 = v31;
      }
      size_t v44 = v33;
LABEL_74:
      unint64_t v31 = v42;
      uint64_t v42 = (void *)*v42;
      size_t v33 = v44;
      if (!v42) {
        goto LABEL_69;
      }
    }
  }
LABEL_83:
  unint64_t v45 = *(void **)a1;
  uint64_t v46 = *(void **)(*(void *)a1 + 8 * v3);
  if (v46)
  {
    *std::string v10 = *v46;
LABEL_91:
    void *v46 = v10;
    goto LABEL_92;
  }
  *std::string v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v45[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v47 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v47 >= v7) {
        v47 %= v7;
      }
    }
    else
    {
      v47 &= v7 - 1;
    }
    uint64_t v46 = (void *)(*(void *)a1 + 8 * v47);
    goto LABEL_91;
  }
LABEL_92:
  ++*((void *)a1 + 3);
  return v10;
}

uint8x8_t gdc::LayerDataRequestTracker::_processKey(void *a1, unsigned __int8 *a2, uint64_t *a3, char a4)
{
  unint64_t v72 = (float *)(a1 + 3);
  if (!std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(a1 + 3, a2))return result; {
  unsigned int v5 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(v72, a2, (uint64_t)a2);
  }
  uint64_t v6 = v5[16];
  unint64_t v84 = v5;
  if (v5[17] != v6)
  {
    for (unint64_t i = 0; i < (v84[17] - v6) >> 3; ++i)
    {
      uint8x8_t v8 = *(int8x8_t **)(v6 + 8 * i);
      int8x8_t v9 = v8[8];
      if (v9)
      {
        unint64_t v10 = *((void *)a2 + 13);
        uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v13 = *((void *)a2 + 13);
          if (v10 >= *(void *)&v9) {
            unint64_t v13 = v10 % *(void *)&v9;
          }
        }
        else
        {
          unint64_t v13 = (*(void *)&v9 - 1) & v10;
        }
        int8x8_t v14 = v8[7];
        size_t v15 = *(int8x8_t ***)(*(void *)&v14 + 8 * v13);
        if (v15)
        {
          unint64_t v16 = *v15;
          if (*v15)
          {
            uint64_t v17 = *(void *)&v9 - 1;
            int v18 = *a2;
            int v19 = *((unsigned __int16 *)a2 + 4);
            uint64_t v20 = *((void *)a2 + 10);
            int v21 = (const void *)*((void *)a2 + 2);
            size_t v22 = *((void *)a2 + 3) - (void)v21;
            if (v11.u32[0] < 2uLL)
            {
              while (1)
              {
                int8x8_t v23 = v16[1];
                if (*(void *)&v23 == v10)
                {
                  if (v16[2].u8[0] == v18 && v16[3].u16[0] == v19 && *(void *)&v16[12] == v20)
                  {
                    BOOL v24 = (const void *)v16[4];
                    if (*(void *)&v16[5] - (void)v24 == v22)
                    {
                      uint64_t v77 = v17;
                      unint64_t v79 = v12;
                      int8x8_t v73 = v14;
                      uint64_t v75 = v20;
                      int v25 = memcmp(v24, v21, v22);
                      uint64_t v20 = v75;
                      uint64_t v17 = v77;
                      int8x8_t v14 = v73;
                      unint64_t v12 = v79;
                      if (!v25) {
                        goto LABEL_22;
                      }
                    }
                  }
                }
                else if ((*(void *)&v23 & v17) != v13)
                {
                  goto LABEL_64;
                }
                unint64_t v16 = (int8x8_t *)*v16;
                if (!v16) {
                  goto LABEL_64;
                }
              }
            }
            do
            {
              unint64_t v26 = (unint64_t)v16[1];
              if (v26 == v10)
              {
                if (v16[2].u8[0] == v18 && v16[3].u16[0] == v19 && *(void *)&v16[12] == v20)
                {
                  unint64_t v27 = (const void *)v16[4];
                  if (*(void *)&v16[5] - (void)v27 == v22)
                  {
                    uint64_t v78 = v17;
                    unint64_t v80 = v12;
                    int8x8_t v74 = v14;
                    uint64_t v76 = v20;
                    int v28 = memcmp(v27, v21, v22);
                    uint64_t v20 = v76;
                    uint64_t v17 = v78;
                    int8x8_t v14 = v74;
                    unint64_t v12 = v80;
                    if (!v28)
                    {
LABEL_22:
                      if (v12 > 1)
                      {
                        if (v10 >= *(void *)&v9) {
                          v10 %= *(void *)&v9;
                        }
                      }
                      else
                      {
                        v10 &= v17;
                      }
                      long long v29 = *(int8x8_t **)(*(void *)&v14 + 8 * v10);
                      do
                      {
                        uint64_t v30 = v29;
                        long long v29 = (int8x8_t *)*v29;
                      }
                      while (v29 != v16);
                      if (v30 == &v8[9]) {
                        goto LABEL_50;
                      }
                      unint64_t v31 = (unint64_t)v30[1];
                      if (v12 > 1)
                      {
                        if (v31 >= *(void *)&v9) {
                          v31 %= *(void *)&v9;
                        }
                      }
                      else
                      {
                        v31 &= v17;
                      }
                      if (v31 != v10)
                      {
LABEL_50:
                        if (!*(void *)v16) {
                          goto LABEL_51;
                        }
                        unint64_t v32 = *(void *)(*(void *)v16 + 8);
                        if (v12 > 1)
                        {
                          if (v32 >= *(void *)&v9) {
                            v32 %= *(void *)&v9;
                          }
                        }
                        else
                        {
                          v32 &= v17;
                        }
                        if (v32 != v10) {
LABEL_51:
                        }
                          *(void *)(*(void *)&v14 + 8 * v10) = 0;
                      }
                      int8x8_t v33 = *v16;
                      if (*v16)
                      {
                        unint64_t v34 = *(void *)(*(void *)&v33 + 8);
                        if (v12 > 1)
                        {
                          if (v34 >= *(void *)&v9) {
                            v34 %= *(void *)&v9;
                          }
                        }
                        else
                        {
                          v34 &= v17;
                        }
                        if (v34 != v10)
                        {
                          *(void *)(*(void *)&v8[7] + 8 * v34) = v30;
                          int8x8_t v33 = *v16;
                        }
                      }
                      *uint64_t v30 = v33;
                      *unint64_t v16 = 0;
                      --*(void *)&v8[10];
                      if (v16[14].i8[0]) {
                        v16[14].i8[0] = 0;
                      }
                      size_t v35 = (void *)v16[4];
                      if (v35 != (void *)v16[6]) {
                        free(v35);
                      }
                      operator delete(v16);
                      break;
                    }
                  }
                }
              }
              else
              {
                if (v26 >= *(void *)&v9) {
                  v26 %= *(void *)&v9;
                }
                if (v26 != v13) {
                  break;
                }
              }
              unint64_t v16 = (int8x8_t *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_64:
      unint64_t v36 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>((uint64_t)&v8[2], a2, (uint64_t)a2);
      uint64_t v38 = *a3;
      uint64_t v37 = a3[1];
      if (v37) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v39 = (std::__shared_weak_count *)v36[17];
      v36[16] = v38;
      v36[17] = v37;
      if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        char v40 = v8[12].i8[0];
        if (v40) {
          goto LABEL_75;
        }
      }
      else
      {
        char v40 = v8[12].i8[0];
        if (v40) {
          goto LABEL_75;
        }
      }
      if (a4)
      {
        char v40 = 1;
      }
      else
      {
        if (*a3)
        {
          char v40 = 0;
LABEL_75:
          if (!*(void *)&v8[10]) {
            goto LABEL_79;
          }
          goto LABEL_4;
        }
        char v40 = 2;
      }
      v8[12].i8[0] = v40;
      if (!*(void *)&v8[10])
      {
LABEL_79:
        char v90 = v40;
        int8x8_t v41 = v8[16];
        if (!*(void *)&v41)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          *(double *)&uint8x8_t result = gdc::S2TileSelector::createDebugNode(v71);
          return result;
        }
        (*(void (**)(int8x8_t, char *, int8x8_t *))(**(void **)&v41 + 48))(v41, &v90, v8 + 2);
        uint64_t v42 = *(uint64_t **)(v84[16] + 8 * i);
        uint64_t v43 = *v42;
        *(void *)(v43 + 8) = v42[1];
        *(void *)v42[1] = v43;
        --a1[2];
        std::__destroy_at[abi:nn180100]<gdc::LayerDataRequestTracker::RequestStatus,0>(v42 + 2);
        operator delete(v42);
      }
LABEL_4:
      uint64_t v6 = v84[16];
    }
  }
  int8x8_t v44 = (int8x8_t)a1[4];
  if (v44)
  {
    unint64_t v45 = *((void *)a2 + 13);
    uint8x8_t result = (uint8x8_t)vcnt_s8(v44);
    result.i16[0] = vaddlv_u8(result);
    unint64_t v46 = result.u32[0];
    if (result.u32[0] > 1uLL)
    {
      unint64_t v47 = *((void *)a2 + 13);
      if (v45 >= *(void *)&v44) {
        unint64_t v47 = v45 % *(void *)&v44;
      }
    }
    else
    {
      unint64_t v47 = (*(void *)&v44 - 1) & v45;
    }
    uint64_t v48 = *(void *)v72;
    size_t v49 = *(uint64_t ***)(*(void *)v72 + 8 * v47);
    if (v49)
    {
      size_t v50 = *v49;
      if (*v49)
      {
        uint64_t v51 = *(void *)&v44 - 1;
        int v52 = *a2;
        int v53 = *((unsigned __int16 *)a2 + 4);
        uint64_t v54 = *((void *)a2 + 10);
        int v55 = (const void *)*((void *)a2 + 2);
        size_t v56 = *((void *)a2 + 3) - (void)v55;
        if (result.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v57 = v50[1];
            if (v57 == v45)
            {
              if (*((unsigned __int8 *)v50 + 16) == v52 && *((unsigned __int16 *)v50 + 12) == v53 && v50[12] == v54)
              {
                uint64_t v58 = (const void *)v50[4];
                if (v50[5] - (void)v58 == v56)
                {
                  uint64_t v85 = v51;
                  unint64_t v88 = v46;
                  int v59 = memcmp(v58, v55, v56);
                  uint64_t v51 = v85;
                  unint64_t v46 = v88;
                  if (!v59) {
                    goto LABEL_98;
                  }
                }
              }
            }
            else if ((v57 & v51) != v47)
            {
              return result;
            }
            size_t v50 = (uint64_t *)*v50;
            if (!v50) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v60 = v50[1];
          if (v60 == v45)
          {
            if (*((unsigned __int8 *)v50 + 16) == v52 && *((unsigned __int16 *)v50 + 12) == v53 && v50[12] == v54)
            {
              int8x8_t v61 = (const void *)v50[4];
              if (v50[5] - (void)v61 == v56)
              {
                uint64_t v86 = v51;
                unint64_t v89 = v46;
                int v62 = memcmp(v61, v55, v56);
                uint64_t v51 = v86;
                unint64_t v46 = v89;
                if (!v62)
                {
LABEL_98:
                  if (v46 > 1)
                  {
                    if (v45 >= *(void *)&v44) {
                      v45 %= *(void *)&v44;
                    }
                  }
                  else
                  {
                    v45 &= v51;
                  }
                  uint64_t v63 = *(uint64_t **)(v48 + 8 * v45);
                  do
                  {
                    size_t v64 = v63;
                    uint64_t v63 = (uint64_t *)*v63;
                  }
                  while (v63 != v50);
                  if (v64 == a1 + 5) {
                    goto LABEL_126;
                  }
                  unint64_t v65 = v64[1];
                  if (v46 > 1)
                  {
                    if (v65 >= *(void *)&v44) {
                      v65 %= *(void *)&v44;
                    }
                  }
                  else
                  {
                    v65 &= v51;
                  }
                  if (v65 != v45)
                  {
LABEL_126:
                    if (!*v50) {
                      goto LABEL_127;
                    }
                    unint64_t v66 = *(void *)(*v50 + 8);
                    if (v46 > 1)
                    {
                      if (v66 >= *(void *)&v44) {
                        v66 %= *(void *)&v44;
                      }
                    }
                    else
                    {
                      v66 &= v51;
                    }
                    if (v66 != v45) {
LABEL_127:
                    }
                      *(void *)(v48 + 8 * v45) = 0;
                  }
                  unint64_t v67 = (uint64_t *)*v50;
                  if (*v50)
                  {
                    unint64_t v68 = v67[1];
                    if (v46 > 1)
                    {
                      if (v68 >= *(void *)&v44) {
                        v68 %= *(void *)&v44;
                      }
                    }
                    else
                    {
                      v68 &= v51;
                    }
                    if (v68 != v45)
                    {
                      *(void *)(*(void *)v72 + 8 * v68) = v64;
                      unint64_t v67 = (uint64_t *)*v50;
                    }
                  }
                  uint64_t *v64 = (uint64_t)v67;
                  *size_t v50 = 0;
                  --a1[6];
                  unint64_t v69 = (void *)v50[16];
                  if (v69)
                  {
                    v50[17] = (uint64_t)v69;
                    operator delete(v69);
                  }
                  if (*((unsigned char *)v50 + 112)) {
                    *((unsigned char *)v50 + 112) = 0;
                  }
                  uint64_t v70 = (void *)v50[4];
                  if (v70 != (void *)v50[6]) {
                    free(v70);
                  }
                  operator delete(v50);
                  return result;
                }
              }
            }
          }
          else
          {
            if (v60 >= *(void *)&v44) {
              v60 %= *(void *)&v44;
            }
            if (v60 != v47) {
              return result;
            }
          }
          size_t v50 = (uint64_t *)*v50;
        }
        while (v50);
      }
    }
  }
  return result;
}

double gdc::S2TileSelector::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void gdc::S2TileSelector::~S2TileSelector(gdc::S2TileSelector *this)
{
  *(void *)this = &unk_1EF554F00;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    operator delete(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1EF554F00;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    operator delete(v4);
  }
}

void gdc::LoadingStatusTracker::~LoadingStatusTracker(gdc::LoadingStatusTracker *this)
{
  gdc::LoadingStatusTracker::~LoadingStatusTracker(this);
  JUMPOUT(0x1A6239270);
}

{
  std::mutex *v2;
  void *v3;
  gdc::LoadingStatusTracker *v4;
  gdc::LoadingStatusTracker *v5;
  gdc::LoadingStatusTracker *v6;
  gdc::LoadingStatusTracker *v7;

  *(void *)this = &unk_1EF555F30;
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  unint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 10) = 0;
  }
  std::mutex::unlock(v2);
  uint64_t v4 = (gdc::LoadingStatusTracker *)*((void *)this + 27);
  if (v4 == (gdc::LoadingStatusTracker *)((char *)this + 192))
  {
    (*(void (**)(char *))(*((void *)this + 24) + 32))((char *)this + 192);
  }
  else if (v4)
  {
    (*(void (**)(gdc::LoadingStatusTracker *))(*(void *)v4 + 40))(v4);
  }
  unsigned int v5 = (gdc::LoadingStatusTracker *)*((void *)this + 23);
  if (v5 == (gdc::LoadingStatusTracker *)((char *)this + 160))
  {
    (*(void (**)(char *))(*((void *)this + 20) + 32))((char *)this + 160);
  }
  else if (v5)
  {
    (*(void (**)(gdc::LoadingStatusTracker *))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = (gdc::LoadingStatusTracker *)*((void *)this + 19);
  if (v6 == (gdc::LoadingStatusTracker *)((char *)this + 128))
  {
    (*(void (**)(char *))(*((void *)this + 16) + 32))((char *)this + 128);
  }
  else if (v6)
  {
    (*(void (**)(gdc::LoadingStatusTracker *))(*(void *)v6 + 40))(v6);
  }
  unint64_t v7 = (gdc::LoadingStatusTracker *)*((void *)this + 15);
  if (v7 == (gdc::LoadingStatusTracker *)((char *)this + 96))
  {
    (*(void (**)(char *))(*((void *)this + 12) + 32))((char *)this + 96);
    if (!*((unsigned char *)this + 88)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v7) {
    (*(void (**)(gdc::LoadingStatusTracker *))(*(void *)v7 + 40))(v7);
  }
  if (*((unsigned char *)this + 88)) {
LABEL_19:
  }
    *((unsigned char *)this + 88) = 0;
LABEL_20:

  std::mutex::~mutex(v2);
}

void sub_1A281EDE4(_Unwind_Exception *a1)
{
  std::function<void ()(gdc::SceneStatus)>::~function((void *)(v2 + 192));
  std::function<void ()(void)>::~function((void *)(v2 + 160));
  std::function<void ()(NSError *)>::~function((void *)(v2 + 128));
  std::function<void ()(void)>::~function((void *)(v2 + 96));
  if (*(unsigned char *)(v2 + 88)) {
    *(unsigned char *)(v2 + 88) = 0;
  }

  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void gdc::Histogram::~Histogram(gdc::Histogram *this)
{
  *(void *)this = &unk_1EF558F50;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C4000313F17);
  }
  if (*((unsigned char *)this + 56)) {
    *((unsigned char *)this + 56) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      unint64_t v3 = v4;
    }
    while (v4);
  }
  unsigned int v5 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    operator delete(v5);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = &unk_1EF558F50;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C4000313F17);
  }
  if (*((unsigned char *)this + 56)) {
    *((unsigned char *)this + 56) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      unint64_t v3 = v4;
    }
    while (v4);
  }
  unsigned int v5 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    operator delete(v5);
  }
}

void gdc::Histogram::addSample(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v6 = vcvtmd_s64_f64(a3 / *(double *)(a1 + 8));
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int8x8_t v9 = *(void **)(*(void *)(a1 + 16) + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                goto LABEL_82;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              goto LABEL_82;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v10 = operator new(0x20uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  v10[2] = v6;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v14 = *(float *)(a1 + 48);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 24);
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 24);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        size_t v50 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        if (v50) {
          operator delete(v50);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 24) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v19 = operator new(8 * prime);
    uint64_t v20 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *(void *)(a1 + 24) = prime;
    do
      *(void *)(*(void *)(a1 + 16) + 8 * v21++) = 0;
    while (prime != v21);
    uint64_t v23 = a1 + 32;
    size_t v22 = *(void **)(a1 + 32);
    if (!v22)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v24 = v22[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)(a1 + 16) + 8 * v26) = v23;
      for (unint64_t i = (void *)*v22; *v22; unint64_t i = (void *)*v22)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          size_t v22 = i;
        }
        else
        {
          uint64_t v29 = *(void *)(a1 + 16);
          if (*(void *)(v29 + 8 * v28))
          {
            *size_t v22 = *i;
            uint64_t v30 = 8 * v28;
            *unint64_t i = **(void **)(*(void *)(a1 + 16) + v30);
            **(void **)(*(void *)(a1 + 16) + v30) = i;
          }
          else
          {
            *(void *)(v29 + 8 * v28) = v22;
            size_t v22 = i;
            size_t v26 = v28;
          }
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v24) = v23;
    unint64_t v34 = (void *)*v22;
    if (!*v22) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v24)
      {
        uint64_t v37 = *(void *)(a1 + 16);
        if (!*(void *)(v37 + 8 * v36))
        {
          *(void *)(v37 + 8 * v36) = v22;
          goto LABEL_63;
        }
        *size_t v22 = *v34;
        uint64_t v35 = 8 * v36;
        *unint64_t v34 = **(void **)(*(void *)(a1 + 16) + v35);
        **(void **)(*(void *)(a1 + 16) + v35) = v34;
        unint64_t v34 = v22;
      }
      size_t v36 = v24;
LABEL_63:
      size_t v22 = v34;
      unint64_t v34 = (void *)*v34;
      size_t v24 = v36;
      if (!v34) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v38 = *(void *)(a1 + 16);
  unint64_t v39 = *(void **)(v38 + 8 * v3);
  if (v39)
  {
    *unint64_t v10 = *v39;
LABEL_80:
    void *v39 = v10;
    goto LABEL_81;
  }
  uint64_t v40 = *(void *)(a1 + 32);
  *unint64_t v10 = v40;
  *(void *)(a1 + 32) = v10;
  *(void *)(v38 + 8 * v3) = a1 + 32;
  if (v40)
  {
    unint64_t v41 = *(void *)(v40 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v41 >= v7) {
        v41 %= v7;
      }
    }
    else
    {
      v41 &= v7 - 1;
    }
    unint64_t v39 = (void *)(*(void *)(a1 + 16) + 8 * v41);
    goto LABEL_80;
  }
LABEL_81:
  ++*(void *)(a1 + 40);
LABEL_82:
  ++v10[3];
  if (!*(unsigned char *)(a1 + 56)) {
    goto LABEL_87;
  }
  uint64_t v42 = *(void *)(a1 + 64);
  if (v42 == v6 || !*(void *)(a2 + 24)) {
    goto LABEL_89;
  }
  double v43 = *(double *)(a1 + 8);
  double v44 = v43 * (double)(uint64_t)v6;
  double v45 = v43 * (double)v42;
  unint64_t v46 = *(void **)(a1 + 72);
  double v47 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - *v46) * 0.000000001;
  double v53 = v45;
  double v54 = v44;
  double v52 = v47;
  uint64_t v48 = *(void *)(a2 + 24);
  if (v48)
  {
    (*(void (**)(uint64_t, double *, double *, double *))(*(void *)v48 + 48))(v48, &v54, &v53, &v52);
LABEL_87:
    size_t v49 = *(std::chrono::steady_clock::time_point **)(a1 + 72);
    v49->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (!*(unsigned char *)(a1 + 56)) {
      *(unsigned char *)(a1 + 56) = 1;
    }
LABEL_89:
    *(void *)(a1 + 64) = v6;
    return;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  gdc::Histogram::getHistogramData(v51);
}

void gdc::Histogram::getHistogramData(gdc::Histogram *this, uint64_t a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (*(void *)(a2 + 40))
  {
    unint64_t v3 = this;
    uint64_t v4 = *(void **)(a2 + 32);
    if (v4)
    {
      int64_t v5 = 0x8000000000000000;
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        int64_t v7 = v4[2];
        if (v7 < v6) {
          uint64_t v6 = v4[2];
        }
        if (v5 <= v7) {
          int64_t v5 = v4[2];
        }
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v5 = 0x8000000000000000;
    }
    double v8 = *(double *)(a2 + 8);
    *(double *)this = v8 * (double)v6;
    *((double *)this + 1) = v8 * (double)(v5 + 1);
    *((double *)this + 2) = v8;
    unint64_t v9 = v5 - v6 + 1;
    if (v5 - v6 == -1)
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      if (v5 < v6) {
        return;
      }
      goto LABEL_17;
    }
    if (v9 >> 61) {
LABEL_68:
    }
      abort();
    uint64_t v12 = 8 * v9;
    unint64_t v11 = (char *)operator new(8 * v9);
    unint64_t v10 = &v11[v12];
    *((void *)v3 + 3) = v11;
    *((void *)v3 + 4) = v11;
    *((void *)v3 + 5) = &v11[v12];
    if (v5 >= v6)
    {
LABEL_17:
      float v13 = v11;
      uint64_t v40 = v3;
      do
      {
        int8x8_t v16 = *(int8x8_t *)(a2 + 24);
        if (!*(void *)&v16) {
          goto LABEL_40;
        }
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t v18 = v6;
          if ((unint64_t)v6 >= *(void *)&v16) {
            unint64_t v18 = (unint64_t)v6 % *(void *)&v16;
          }
        }
        else
        {
          unint64_t v18 = (*(void *)&v16 - 1) & v6;
        }
        int v19 = *(void **)(*(void *)(a2 + 16) + 8 * v18);
        if (!v19 || (uint64_t v20 = (void *)*v19) == 0)
        {
LABEL_40:
          uint64_t v24 = 0;
          if (v11 >= v10) {
            goto LABEL_41;
          }
LABEL_18:
          *(void *)unint64_t v11 = v24;
          float v14 = v11 + 8;
          goto LABEL_19;
        }
        if (v17.u32[0] < 2uLL)
        {
          uint64_t v21 = *(void *)&v16 - 1;
          while (1)
          {
            uint64_t v23 = v20[1];
            if (v6 == v23)
            {
              if (v20[2] == v6) {
                goto LABEL_62;
              }
            }
            else if ((v23 & v21) != v18)
            {
              goto LABEL_40;
            }
            uint64_t v20 = (void *)*v20;
            if (!v20) {
              goto LABEL_40;
            }
          }
        }
        while (1)
        {
          unint64_t v22 = v20[1];
          if (v6 == v22) {
            break;
          }
          if (v22 >= *(void *)&v16) {
            v22 %= *(void *)&v16;
          }
          if (v22 != v18) {
            goto LABEL_40;
          }
LABEL_30:
          uint64_t v20 = (void *)*v20;
          if (!v20) {
            goto LABEL_40;
          }
        }
        if (v20[2] != v6) {
          goto LABEL_30;
        }
LABEL_62:
        uint64_t v24 = v20[3];
        if (v11 < v10) {
          goto LABEL_18;
        }
LABEL_41:
        uint64_t v25 = (v11 - v13) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          goto LABEL_68;
        }
        if ((v10 - v13) >> 2 > v26) {
          unint64_t v26 = (v10 - v13) >> 2;
        }
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        if ((unint64_t)(v10 - v13) < 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = v26;
        }
        unint64_t v41 = v27;
        if (v27)
        {
          if (v27 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          size_t v28 = operator new(8 * v27);
        }
        else
        {
          size_t v28 = 0;
        }
        uint64_t v29 = &v28[8 * v25];
        *(void *)uint64_t v29 = v24;
        float v14 = v29 + 8;
        if (v11 == v13)
        {
          unint64_t v3 = v40;
          unint64_t v32 = v41;
        }
        else
        {
          unint64_t v30 = v11 - 8 - v13;
          if (v30 < 0x168
            || &v28[v11 - v13 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[v11 - v13 - 8]
            || &v11[-(v30 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8
            || (unint64_t)(v13 - v28) < 0x20)
          {
            unint64_t v31 = v11;
            unint64_t v3 = v40;
            unint64_t v32 = v41;
            goto LABEL_56;
          }
          uint64_t v35 = (v30 >> 3) + 1;
          unint64_t v31 = &v11[-8 * (v35 & 0x3FFFFFFFFFFFFFFCLL)];
          size_t v36 = &v28[8 * v25 - 16];
          uint64_t v37 = (long long *)(v11 - 16);
          uint64_t v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *size_t v36 = v39;
            v36 -= 2;
            v37 -= 2;
            v38 -= 4;
          }
          while (v38);
          v29 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v3 = v40;
          unint64_t v32 = v41;
          if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_56:
              uint64_t v33 = *((void *)v31 - 1);
              v31 -= 8;
              *((void *)v29 - 1) = v33;
              v29 -= 8;
            }
            while (v31 != v13);
          }
        }
        unint64_t v10 = &v28[8 * v32];
        *((void *)v3 + 3) = v29;
        *((void *)v3 + 4) = v14;
        *((void *)v3 + 5) = v10;
        if (v13)
        {
          unint64_t v34 = &v28[8 * v32];
          operator delete(v13);
          unint64_t v10 = v34;
        }
        float v13 = v29;
LABEL_19:
        *((void *)v3 + 4) = v14;
        unint64_t v11 = v14;
      }
      while (v6++ != v5);
    }
  }
}

double gdc::ViewDataAccess::worldViewProjectionMatrix(uint64_t a1, double *a2, uint64_t *a3)
{
  if (a2[47] * a2[46] == 0.0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = 0x3FF0000000000000;
    *(void *)(a1 + 40) = 0x3FF0000000000000;
    *(void *)(a1 + 80) = 0x3FF0000000000000;
    *(void *)(a1 + 120) = 0x3FF0000000000000;
    return result;
  }
  uint64_t v60 = *a3;
  long long v5 = *(_OWORD *)(a3 + 3);
  long long v61 = *(_OWORD *)(a3 + 1);
  long long v62 = v5;
  long long v63 = *(_OWORD *)(a3 + 5);
  uint64_t v65 = 0;
  uint64_t v64 = 0;
  uint64_t v68 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  int64x2_t v69 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v70 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v71 = v69;
  int64x2_t v72 = v70;
  int64x2_t v73 = v69;
  int64x2_t v74 = v70;
  int64x2_t v75 = v69;
  int64x2_t v76 = v70;
  int64x2_t v77 = v69;
  int64x2_t v78 = v70;
  int64x2_t v79 = v69;
  int64x2_t v80 = v70;
  char v81 = 1;
  char v82 = 0;
  char v83 = 0;
  long long v6 = *((_OWORD *)a2 + 24);
  long long v84 = *((_OWORD *)a2 + 23);
  long long v85 = v6;
  long long v7 = *((_OWORD *)a2 + 26);
  long long v86 = *((_OWORD *)a2 + 25);
  long long v87 = v7;
  long long v88 = *((_OWORD *)a2 + 27);
  int v89 = *((_DWORD *)a2 + 112);
  uint64_t v90 = *((void *)a2 + 57);
  long long v91 = *((_OWORD *)a2 + 29);
  *(double *)&long long v7 = a2[61];
  uint64_t v92 = *((void *)a2 + 60);
  uint64_t v93 = v7;
  v59[0] = *(unsigned char *)a2;
  int64x2_t v14 = vdupq_n_s64(0xC00921FB54442D18);
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  int64x2_t v22 = v69;
  int64x2_t v23 = v70;
  int64x2_t v24 = v69;
  int64x2_t v25 = v70;
  int64x2_t v26 = v69;
  int64x2_t v27 = v70;
  int64x2_t v28 = v69;
  int64x2_t v29 = v70;
  int64x2_t v30 = v69;
  int64x2_t v31 = v70;
  int64x2_t v32 = v69;
  int64x2_t v33 = v70;
  char v34 = 1;
  char v35 = 0;
  char v36 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  int v41 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  long long v42 = xmmword_1A28FE5B0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0x3FF0000000000000;
  unint64_t v56 = 0xBFF0000000000000;
  uint64_t v57 = 0x3FF0000000000000;
  int v58 = 2;
  if (v59[0] - 1 < 2)
  {
    gdc::CameraView::geocentricCameraView((gdc::CameraView *)v12, (const Camera *)v59);
    goto LABEL_9;
  }
  if (v59[0] == 3)
  {
    gdc::CameraView::ecefCameraView((gdc::CameraView *)v12, (const Camera *)v59);
    goto LABEL_9;
  }
  if (!v59[0])
  {
    gdc::CameraView::mercatorCameraView((gdc::CameraView *)v12, (const Camera *)v59);
LABEL_9:
    gdc::CameraView::operator=((uint64_t)v13, (uint64_t)v12);
  }
  long long v8 = v53;
  *(_OWORD *)(a1 + 64) = v52;
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = v55;
  *(_OWORD *)(a1 + 96) = v54;
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = v49;
  *(_OWORD *)a1 = v48;
  *(_OWORD *)(a1 + 16) = v10;
  double result = *(double *)&v50;
  long long v11 = v51;
  *(_OWORD *)(a1 + 32) = v50;
  *(_OWORD *)(a1 + 48) = v11;
  return result;
}

void gdc::ViewDataAccess::screenPointForCoordinate(double *a1, double *a2, uint64_t *a3)
{
  if (a1[47] * a1[46] != 0.0)
  {
    if (*(unsigned __int8 *)a1 - 1 >= 3)
    {
      if (!*(unsigned char *)a1)
      {
        long double v6 = tan(*a2 * 0.5 + 0.785398163);
        log(v6);
      }
    }
    else
    {
      double v5 = a2[1];
      __sincos_stret(*a2);
      __sincos_stret(v5);
    }
    gdc::ViewDataAccess::worldViewProjectionMatrix((uint64_t)&v12, a1, a3);
    __asm { FMOV            V1.2D, #0.5 }
  }
}

void gdc::DebugTreeProperty::addValue(gdc::DebugTreeProperty *this, DebugTreeValue *a2)
{
  double v5 = (void **)*((void *)this + 5);
  unint64_t v4 = *((void *)this + 6);
  if ((unint64_t)v5 >= v4)
  {
    long long v9 = (void **)*((void *)this + 4);
    uint64_t v10 = ((char *)v5 - (char *)v9) >> 6;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 58) {
      abort();
    }
    uint64_t v12 = v4 - (void)v9;
    if (v12 >> 5 > v11) {
      unint64_t v11 = v12 >> 5;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 58) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int64x2_t v14 = operator new(v13 << 6);
    }
    else
    {
      int64x2_t v14 = 0;
    }
    long long v16 = (char *)&v14[16 * v10];
    *(_OWORD *)long long v16 = *(_OWORD *)&a2->var0.var0;
    *(_OWORD *)(v16 + 9) = *(_OWORD *)((char *)&a2->var0.var1 + 1);
    long long v17 = (std::string *)(v16 + 32);
    if (*((char *)&a2->var0.var4.__r_.__value_.var0.__l + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, a2->var0.var4.__r_.__value_.var0.__l.__data_, a2->var0.var4.__r_.__value_.var0.__l.__size_);
      long long v9 = (void **)*((void *)this + 4);
      double v5 = (void **)*((void *)this + 5);
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a2->var0.var4.__r_.__value_.var0.__s.__data_;
      *((void *)v16 + 6) = *((void *)&a2->var0.var4.__r_.__value_.var0.__l + 2);
    }
    uint64_t v18 = (char *)&v14[16 * v13];
    v14[16 * v10 + 14] = a2->var0.var4.__r_.var0;
    long long v15 = v16 + 64;
    if (v5 == v9)
    {
      *((void *)this + 4) = v16;
      *((void *)this + 5) = v15;
      *((void *)this + 6) = v18;
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v5 - 4);
        *(_OWORD *)(v16 - 55) = *(_OWORD *)((char *)v5 - 55);
        *((_OWORD *)v16 - 4) = v19;
        long long v20 = *((_OWORD *)v5 - 2);
        *((void *)v16 - 2) = *(v5 - 2);
        *((_OWORD *)v16 - 2) = v20;
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 4) = 0;
        *((_DWORD *)v16 - 2) = *((_DWORD *)v5 - 2);
        v16 -= 64;
        v5 -= 8;
      }
      while (v5 != v9);
      long long v9 = (void **)*((void *)this + 4);
      uint64_t v21 = (void **)*((void *)this + 5);
      *((void *)this + 4) = v16;
      *((void *)this + 5) = v15;
      *((void *)this + 6) = v18;
      while (v21 != v9)
      {
        if (*((char *)v21 - 9) < 0) {
          operator delete(*(v21 - 4));
        }
        v21 -= 8;
      }
    }
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)&a2->var0.var0;
    *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)&a2->var0.var1 + 1);
    *(_OWORD *)double v5 = v6;
    long long v7 = (std::string *)(v5 + 4);
    if (*((char *)&a2->var0.var4.__r_.__value_.var0.__l + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, a2->var0.var4.__r_.__value_.var0.__l.__data_, a2->var0.var4.__r_.__value_.var0.__l.__size_);
    }
    else
    {
      long long v8 = *(_OWORD *)a2->var0.var4.__r_.__value_.var0.__s.__data_;
      v5[6] = (void *)*((void *)&a2->var0.var4.__r_.__value_.var0.__l + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *((_DWORD *)v5 + 14) = a2->var0.var4.__r_.var0;
    long long v15 = (char *)(v5 + 8);
  }
  *((void *)this + 5) = v15;
}

char *gdc::DebugTreeNode::createChildNode(uint64_t a1, long long *a2)
{
  double v5 = *(void ***)(a1 + 56);
  unint64_t v4 = *(void *)(a1 + 64);
  if ((unint64_t)v5 >= v4)
  {
    long long v7 = *(void ***)(a1 + 48);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v7) >> 5);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v7) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x2AAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = operator new(96 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int64x2_t v14 = &v12[32 * (((char *)v5 - (char *)v7) >> 5)];
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v12[32 * (((char *)v5 - (char *)v7) >> 5)], *(const std::string::value_type **)a2, *((void *)a2 + 1));
      long long v7 = *(void ***)(a1 + 48);
      double v5 = *(void ***)(a1 + 56);
    }
    else
    {
      *(_OWORD *)int64x2_t v14 = *a2;
      *((void *)v14 + 2) = *((void *)a2 + 2);
    }
    v12[96 * v8 + 24] = 0;
    *(_OWORD *)(v14 + 47) = 0u;
    *(_OWORD *)(v14 + 63) = 0u;
    long long v15 = &v12[96 * v11];
    *(_OWORD *)(v14 + 79) = 0u;
    v14[95] = 0;
    unint64_t v13 = v14 + 96;
    if (v5 == v7)
    {
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v15;
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v5 - 6);
        *((void *)v14 - 10) = *(v5 - 10);
        *((_OWORD *)v14 - 6) = v16;
        *(v5 - 11) = 0;
        *(v5 - 10) = 0;
        *(v5 - 12) = 0;
        long long v17 = *(_OWORD *)(v5 - 9);
        *((void *)v14 - 7) = *(v5 - 7);
        *(_OWORD *)(v14 - 72) = v17;
        *(v5 - 8) = 0;
        *(v5 - 7) = 0;
        *(v5 - 9) = 0;
        *((void *)v14 - 6) = 0;
        *((void *)v14 - 5) = 0;
        *((void *)v14 - 4) = 0;
        *((_OWORD *)v14 - 3) = *((_OWORD *)v5 - 3);
        *((void *)v14 - 4) = *(v5 - 4);
        *(v5 - 6) = 0;
        *(v5 - 5) = 0;
        *(v5 - 4) = 0;
        *((void *)v14 - 3) = 0;
        *((void *)v14 - 2) = 0;
        *((void *)v14 - 1) = 0;
        *(_OWORD *)(v14 - 24) = *(_OWORD *)(v5 - 3);
        *((void *)v14 - 1) = *(v5 - 1);
        v14 -= 96;
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 1) = 0;
        v5 -= 12;
      }
      while (v5 != v7);
      long long v7 = *(void ***)(a1 + 48);
      uint64_t v18 = *(void ***)(a1 + 56);
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v15;
      if (v18 != v7)
      {
        do
        {
          long long v19 = *(v18 - 3);
          if (v19)
          {
            uint64_t v20 = (uint64_t)*(v18 - 2);
            uint64_t v21 = *(v18 - 3);
            if ((void *)v20 != v19)
            {
              do
              {
                v20 -= 80;
                std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v20);
              }
              while ((void *)v20 != v19);
              uint64_t v21 = *(v18 - 3);
            }
            *(v18 - 2) = v19;
            operator delete(v21);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)v18 - 6);
          if (*((char *)v18 - 49) < 0) {
            operator delete(*(v18 - 9));
          }
          int64x2_t v22 = v18 - 12;
          if (*((char *)v18 - 73) < 0) {
            operator delete(*v22);
          }
          v18 -= 12;
        }
        while (v22 != v7);
      }
    }
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 56), *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v6 = *a2;
      v5[2] = (void *)*((void *)a2 + 2);
      *(_OWORD *)double v5 = v6;
    }
    *((unsigned char *)v5 + 24) = 0;
    *(_OWORD *)((char *)v5 + 47) = 0u;
    *(_OWORD *)((char *)v5 + 63) = 0u;
    *(_OWORD *)((char *)v5 + 79) = 0u;
    *((unsigned char *)v5 + 95) = 0;
    unint64_t v13 = (char *)(v5 + 12);
  }
  *(void *)(a1 + 56) = v13;
  return v13 - 96;
}

char *gdc::DebugTreeNode::createChildNode(uint64_t a1, long long *a2, long long *a3)
{
  unint64_t v7 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  if (v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 5);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x155555555555555) {
      unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 > 0x2AAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int64x2_t v14 = (std::string *)operator new(96 * v13);
    }
    else
    {
      int64x2_t v14 = 0;
    }
    uint64_t v18 = v14 + 4 * v10;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14 + 4 * v10, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *a2;
      v18->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    }
    long long v19 = v14 + 4 * v10 + 1;
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    }
    else
    {
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *a3;
      v14[1].__r_.__value_.__r.__words[12 * v10 + 2] = *((void *)a3 + 2);
    }
    uint64_t v20 = &v14[4 * v13];
    uint64_t v21 = v14 + 4 * v10;
    *(_OWORD *)&v21[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v21[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v21[2].__r_.__value_.__l.__data_ = 0u;
    long long v17 = (char *)&v18[4];
    int64x2_t v22 = *(void ***)(a1 + 48);
    int64x2_t v23 = *(void ***)(a1 + 56);
    if (v23 == v22)
    {
      *(void *)(a1 + 48) = v18;
      *(void *)(a1 + 56) = v17;
      *(void *)(a1 + 64) = v20;
    }
    else
    {
      do
      {
        long long v24 = *((_OWORD *)v23 - 6);
        v18[-4].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 10);
        *(_OWORD *)&v18[-4].__r_.__value_.__l.__data_ = v24;
        *(v23 - 11) = 0;
        *(v23 - 10) = 0;
        *(v23 - 12) = 0;
        long long v25 = *(_OWORD *)(v23 - 9);
        v18[-3].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 7);
        *(_OWORD *)&v18[-3].__r_.__value_.__l.__data_ = v25;
        *(v23 - 8) = 0;
        *(v23 - 7) = 0;
        *(v23 - 9) = 0;
        v18[-2].__r_.__value_.__r.__words[0] = 0;
        v18[-2].__r_.__value_.__l.__size_ = 0;
        v18[-2].__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18[-2].__r_.__value_.__l.__data_ = *((_OWORD *)v23 - 3);
        v18[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 4);
        *(v23 - 6) = 0;
        *(v23 - 5) = 0;
        *(v23 - 4) = 0;
        v18[-1].__r_.__value_.__r.__words[0] = 0;
        v18[-1].__r_.__value_.__l.__size_ = 0;
        v18[-1].__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18[-1].__r_.__value_.__l.__data_ = *(_OWORD *)(v23 - 3);
        v18[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 1);
        v18 -= 4;
        *(v23 - 3) = 0;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        v23 -= 12;
      }
      while (v23 != v22);
      int64x2_t v23 = *(void ***)(a1 + 48);
      int64x2_t v26 = *(void ***)(a1 + 56);
      *(void *)(a1 + 48) = v18;
      *(void *)(a1 + 56) = v17;
      *(void *)(a1 + 64) = v20;
      if (v26 != v23)
      {
        do
        {
          int64x2_t v27 = *(v26 - 3);
          if (v27)
          {
            uint64_t v28 = (uint64_t)*(v26 - 2);
            int64x2_t v29 = *(v26 - 3);
            if ((void *)v28 != v27)
            {
              do
              {
                v28 -= 80;
                std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v28);
              }
              while ((void *)v28 != v27);
              int64x2_t v29 = *(v26 - 3);
            }
            *(v26 - 2) = v27;
            operator delete(v29);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)v26 - 6);
          if (*((char *)v26 - 49) < 0) {
            operator delete(*(v26 - 9));
          }
          int64x2_t v30 = v26 - 12;
          if (*((char *)v26 - 73) < 0) {
            operator delete(*v30);
          }
          v26 -= 12;
        }
        while (v30 != v23);
      }
    }
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 56), *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)unint64_t v7 = v8;
    }
    long long v15 = (std::string *)(v7 + 24);
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long v16 = *a3;
      *(void *)(v7 + 40) = *((void *)a3 + 2);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    long long v17 = (char *)(v7 + 96);
  }
  *(void *)(a1 + 56) = v17;
  return v17 - 96;
}

void gdc::DebugTreeNode::addChildNode(void *a1, long long *a2)
{
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v4) {
    goto LABEL_9;
  }
  uint64_t v5 = *((unsigned __int8 *)a2 + 47);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 4);
  }
  if (v5 || *((void *)a2 + 6) != *((void *)a2 + 7) || *((void *)a2 + 9) != *((void *)a2 + 10))
  {
LABEL_9:
    unint64_t v6 = a1[7];
    unint64_t v7 = a1[8];
    if (v6 >= v7)
    {
      uint64_t v11 = a1[6];
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v11) >> 5);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0x2AAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 5);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x155555555555555) {
        unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
      }
      if (v13 > 0x2AAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = 96 * v13;
      long long v16 = (char *)operator new(96 * v13);
      long long v17 = &v16[96 * v12];
      *(_OWORD *)long long v17 = *a2;
      uint64_t v18 = &v16[v15];
      *((void *)v17 + 2) = *((void *)a2 + 2);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      *(_OWORD *)(v17 + 24) = *(long long *)((char *)a2 + 24);
      *((void *)v17 + 5) = *((void *)a2 + 5);
      *((void *)a2 + 2) = 0;
      *((void *)a2 + 3) = 0;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((_OWORD *)v17 + 3) = a2[3];
      *((void *)v17 + 8) = *((void *)a2 + 8);
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 7) = 0;
      *((void *)v17 + 11) = 0;
      *(_OWORD *)(v17 + 72) = *(long long *)((char *)a2 + 72);
      *((void *)v17 + 11) = *((void *)a2 + 11);
      *((void *)a2 + 8) = 0;
      *((void *)a2 + 9) = 0;
      *((void *)a2 + 10) = 0;
      *((void *)a2 + 11) = 0;
      unint64_t v10 = v17 + 96;
      long long v19 = (void **)a1[6];
      uint64_t v20 = (void **)a1[7];
      if (v20 == v19)
      {
        a1[6] = v17;
        a1[7] = v10;
        a1[8] = v18;
      }
      else
      {
        do
        {
          long long v21 = *((_OWORD *)v20 - 6);
          *((void *)v17 - 10) = *(v20 - 10);
          *((_OWORD *)v17 - 6) = v21;
          *(v20 - 11) = 0;
          *(v20 - 10) = 0;
          *(v20 - 12) = 0;
          long long v22 = *(_OWORD *)(v20 - 9);
          *((void *)v17 - 7) = *(v20 - 7);
          *(_OWORD *)(v17 - 72) = v22;
          *(v20 - 8) = 0;
          *(v20 - 7) = 0;
          *(v20 - 9) = 0;
          *((_OWORD *)v17 - 3) = *((_OWORD *)v20 - 3);
          *((void *)v17 - 4) = *(v20 - 4);
          *(v20 - 6) = 0;
          *(v20 - 5) = 0;
          *(v20 - 4) = 0;
          *(_OWORD *)(v17 - 24) = *(_OWORD *)(v20 - 3);
          *((void *)v17 - 1) = *(v20 - 1);
          v17 -= 96;
          *(v20 - 3) = 0;
          *(v20 - 2) = 0;
          *(v20 - 1) = 0;
          v20 -= 12;
        }
        while (v20 != v19);
        uint64_t v20 = (void **)a1[6];
        int64x2_t v23 = (void **)a1[7];
        a1[6] = v17;
        a1[7] = v10;
        a1[8] = v18;
        if (v23 != v20)
        {
          do
          {
            long long v24 = *(v23 - 3);
            if (v24)
            {
              uint64_t v25 = (uint64_t)*(v23 - 2);
              int64x2_t v26 = *(v23 - 3);
              if ((void *)v25 != v24)
              {
                do
                {
                  v25 -= 80;
                  std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v25);
                }
                while ((void *)v25 != v24);
                int64x2_t v26 = *(v23 - 3);
              }
              *(v23 - 2) = v24;
              operator delete(v26);
            }
            std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)v23 - 6);
            if (*((char *)v23 - 49) < 0) {
              operator delete(*(v23 - 9));
            }
            int64x2_t v27 = v23 - 12;
            if (*((char *)v23 - 73) < 0) {
              operator delete(*v27);
            }
            v23 -= 12;
          }
          while (v27 != v20);
        }
      }
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      long long v8 = *a2;
      *(void *)(v6 + 16) = *((void *)a2 + 2);
      *(_OWORD *)unint64_t v6 = v8;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      long long v9 = *(long long *)((char *)a2 + 24);
      *(void *)(v6 + 40) = *((void *)a2 + 5);
      *(_OWORD *)(v6 + 24) = v9;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(void *)(v6 + 64) = 0;
      *(_OWORD *)(v6 + 48) = a2[3];
      *(void *)(v6 + 64) = *((void *)a2 + 8);
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 7) = 0;
      *((void *)a2 + 8) = 0;
      *(void *)(v6 + 72) = 0;
      *(void *)(v6 + 80) = 0;
      *(void *)(v6 + 88) = 0;
      *(_OWORD *)(v6 + 72) = *(long long *)((char *)a2 + 72);
      *(void *)(v6 + 88) = *((void *)a2 + 11);
      *((void *)a2 + 9) = 0;
      *((void *)a2 + 10) = 0;
      *((void *)a2 + 11) = 0;
      unint64_t v10 = (char *)(v6 + 96);
    }
    a1[7] = v10;
  }
}

uint64_t gdc::DebugTreeNode::toString(gdc::DebugTreeNode *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  v31[0] = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v23 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v4 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  v22[0] = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = v5;
  v22[1] = 0;
  unint64_t v6 = (std::ios_base *)((char *)v22 + *(void *)(v22[0] - 24));
  std::ios_base::init(v6, &v24);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  unint64_t v7 = v4;
  uint64_t v8 = v4[5];
  uint64_t v23 = v4[4];
  *(uint64_t *)((char *)&v23 + *(void *)(v23 - 24)) = v8;
  v22[0] = v4[1];
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = v4[6];
  v31[0] = v2;
  v22[0] = v20;
  uint64_t v23 = v3;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  uint64_t v24 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v29 = 0u;
  int v30 = 24;
  long long v21 = v22;
  int64x2_t v33 = 0;
  unint64_t v10 = operator new(0x20uLL);
  *unint64_t v10 = &unk_1EF57DF38;
  v10[1] = v32;
  v10[2] = &v21;
  v10[3] = v22;
  int64x2_t v33 = v10;
  v31[19] = 0;
  ((void (*)(void))std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::operator())();
  if ((v30 & 0x10) != 0)
  {
    unint64_t v12 = *((void *)&v29 + 1);
    if (*((void *)&v29 + 1) < v27)
    {
      *((void *)&v29 + 1) = v27;
      unint64_t v12 = v27;
    }
    unint64_t v13 = (const void **)&v26;
  }
  else
  {
    if ((v30 & 8) == 0)
    {
      size_t v11 = 0;
      *((unsigned char *)this + 23) = 0;
      goto LABEL_16;
    }
    unint64_t v13 = (const void **)v25;
    unint64_t v12 = v25[2];
  }
  unint64_t v14 = *v13;
  size_t v11 = v12 - (void)*v13;
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    long long v17 = (gdc::DebugTreeNode *)operator new(v15 + 1);
    *((void *)this + 1) = v11;
    *((void *)this + 2) = v16 | 0x8000000000000000;
    *(void *)this = v17;
    this = v17;
    goto LABEL_15;
  }
  *((unsigned char *)this + 23) = v11;
  if (v11) {
LABEL_15:
  }
    memmove(this, v14, v11);
LABEL_16:
  *((unsigned char *)this + v11) = 0;
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void))(*v33 + 40))();
  }
  v22[0] = *v7;
  uint64_t v18 = v7[9];
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = v7[8];
  uint64_t v23 = v18;
  uint64_t v24 = v9;
  if (SBYTE7(v29) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](v31);
}

__n128 std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DF38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57DF38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::~__func()
{
}

uint64_t gdc::DebugTreeNode::findChildWithName(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v2 == v3) {
    return 0;
  }
  char v5 = *((unsigned char *)a2 + 23);
  if (v5 >= 0) {
    unint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v6 = a2[1];
  }
  if (v5 >= 0) {
    unint64_t v7 = (unsigned __int8 *)a2;
  }
  else {
    unint64_t v7 = *a2;
  }
  while (1)
  {
    uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v9 = *(unsigned __int8 **)(v2 + 8);
    }
    if (v9 == v6)
    {
      if ((v8 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v2, v7, *(void *)(v2 + 8))) {
          return v2;
        }
      }
      else
      {
        if (!*(unsigned char *)(v2 + 23)) {
          return v2;
        }
        uint64_t v10 = 0;
        while (*(unsigned __int8 *)(v2 + v10) == v7[v10])
        {
          if (v8 == ++v10) {
            return v2;
          }
        }
      }
    }
    uint64_t ChildWithName = gdc::DebugTreeNode::findChildWithName(v2, a2);
    if (ChildWithName) {
      break;
    }
    v2 += 96;
    if (v2 == v3) {
      return 0;
    }
  }
  return ChildWithName;
}

char *std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>(char **a1, uint64_t a2, int a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - v3) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    size_t v11 = (char *)operator new(80 * v10);
  }
  else
  {
    size_t v11 = 0;
  }
  unint64_t v12 = &v11[80 * v5];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v11[80 * v5], *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
  }
  else
  {
    *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
    *((void *)v12 + 2) = *(void *)(a2 + 16);
  }
  unint64_t v13 = &v11[80 * v10];
  unint64_t v14 = &v11[80 * v5];
  *((_DWORD *)v14 + 6) = a3;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  uint64_t v15 = v12 + 80;
  if (v4 == v3)
  {
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
    if (!v3) {
      return v15;
    }
    goto LABEL_20;
  }
  uint64_t v16 = 0;
  do
  {
    long long v17 = &v12[v16];
    uint64_t v18 = &v4[v16];
    long long v19 = *(_OWORD *)&v4[v16 - 80];
    *((void *)v17 - 8) = *(void *)&v4[v16 - 64];
    *((_OWORD *)v17 - 5) = v19;
    *((void *)v18 - 9) = 0;
    *((void *)v18 - 8) = 0;
    *((void *)v18 - 10) = 0;
    *((_DWORD *)v17 - 14) = *(_DWORD *)&v4[v16 - 56];
    *((void *)v17 - 5) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v17 - 6) = 0;
    *((_OWORD *)v17 - 3) = *(_OWORD *)&v4[v16 - 48];
    *((void *)v17 - 4) = *(void *)&v4[v16 - 32];
    *((void *)v18 - 6) = 0;
    *((void *)v18 - 5) = 0;
    *((void *)v18 - 4) = 0;
    *((void *)v17 - 3) = 0;
    *((void *)v17 - 2) = 0;
    *((void *)v17 - 1) = 0;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)&v4[v16 - 24];
    *((void *)v17 - 1) = *(void *)&v4[v16 - 8];
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((void *)v18 - 1) = 0;
    v16 -= 80;
  }
  while (&v4[v16] != v3);
  uint64_t v20 = &v12[v16];
  uint64_t v3 = *a1;
  uint64_t v21 = (uint64_t)a1[1];
  *a1 = v20;
  a1[1] = v15;
  a1[2] = v13;
  while ((char *)v21 != v3)
  {
    v21 -= 80;
    std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v21);
  }
  if (v3) {
LABEL_20:
  }
    operator delete(v3);
  return v15;
}

void gdc::DebugTreeNode::addProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a1 + 80);
  if (v5 >= *(void *)(a1 + 88))
  {
    unint64_t v7 = std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>((char **)(a1 + 72), a2, 0);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 80), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(_DWORD *)(v5 + 24) = 0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    unint64_t v7 = (char *)(v5 + 80);
  }
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = (gdc::DebugTreeProperty *)(v7 - 80);
  *(_OWORD *)&v9.var0.var0 = *(_OWORD *)a3;
  *(_OWORD *)((char *)&v9.var0.var1 + 1) = *(_OWORD *)(a3 + 9);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v9.var0.var4, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    *(_OWORD *)v9.var0.var4.__r_.__value_.var0.__s.__data_ = *(_OWORD *)(a3 + 32);
    *((void *)&v9.var0.var4.__r_.__value_.var0.__l + 2) = *(void *)(a3 + 48);
  }
  v9.var0.var4.__r_.var0 = *(_DWORD *)(a3 + 56);
  gdc::DebugTreeProperty::addValue(v8, &v9);
  if (*((char *)&v9.var0.var4.__r_.__value_.var0.__l + 23) < 0) {
    operator delete(v9.var0.var4.__r_.__value_.var0.__l.__data_);
  }
}

{
  unint64_t v5;
  long long v6;
  char *v7;
  gdc::DebugTreeProperty *v8;
  DebugTreeValue v9;

  unint64_t v5 = *(void *)(a1 + 80);
  if (v5 >= *(void *)(a1 + 88))
  {
    unint64_t v7 = std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>((char **)(a1 + 72), a2, 1);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 80), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(_DWORD *)(v5 + 24) = 1;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    unint64_t v7 = (char *)(v5 + 80);
  }
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = (gdc::DebugTreeProperty *)(v7 - 80);
  *(_OWORD *)&v9.var0.var0 = *(_OWORD *)a3;
  *(_OWORD *)((char *)&v9.var0.var1 + 1) = *(_OWORD *)(a3 + 9);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v9.var0.var4, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    *(_OWORD *)v9.var0.var4.__r_.__value_.var0.__s.__data_ = *(_OWORD *)(a3 + 32);
    *((void *)&v9.var0.var4.__r_.__value_.var0.__l + 2) = *(void *)(a3 + 48);
  }
  v9.var0.var4.__r_.var0 = *(_DWORD *)(a3 + 56);
  gdc::DebugTreeProperty::addValue(v8, &v9);
  if (*((char *)&v9.var0.var4.__r_.__value_.var0.__l + 23) < 0) {
    operator delete(v9.var0.var4.__r_.__value_.var0.__l.__data_);
  }
}

void gdc::DebugTreeNode::addProperty(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = *(void *)(a1 + 80);
  if (v5 >= *(void *)(a1 + 88))
  {
    unint64_t v7 = std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>((char **)(a1 + 72), a2, 0);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 80), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(_DWORD *)(v5 + 24) = 0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    unint64_t v7 = (char *)(v5 + 80);
  }
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *a3;
  DebugTreeValue v9 = (long long *)a3[1];
  if ((long long *)*a3 != v9)
  {
    unint64_t v10 = (gdc::DebugTreeProperty *)(v7 - 80);
    size_t v11 = (long long *)(v8 + 32);
    do
    {
      long long v12 = *(v11 - 2);
      *(_OWORD *)((char *)v19 + 9) = *(long long *)((char *)v11 - 23);
      v19[0] = v12;
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v13 = *v11;
        v20.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
      }
      unint64_t v14 = v11 - 2;
      int v15 = *((_DWORD *)v11 + 6);
      int v21 = v15;
      v16[0] = v19[0];
      *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v19 + 9);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
        int v15 = v21;
      }
      else
      {
        std::string __p = v20;
      }
      int v18 = v15;
      gdc::DebugTreeProperty::addValue(v10, (DebugTreeValue *)v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
LABEL_20:
        }
          operator delete(v20.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_20;
      }
      v11 += 4;
    }
    while (v14 + 4 != v9);
  }
}

{
  unint64_t v5;
  long long v6;
  char *v7;
  uint64_t v8;
  long long *v9;
  gdc::DebugTreeProperty *v10;
  long long *v11;
  long long v12;
  long long v13;
  long long *v14;
  int v15;
  _OWORD v16[2];
  std::string __p;
  int v18;
  _OWORD v19[2];
  std::string v20;
  int v21;

  unint64_t v5 = *(void *)(a1 + 80);
  if (v5 >= *(void *)(a1 + 88))
  {
    unint64_t v7 = std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>((char **)(a1 + 72), a2, 2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 80), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(_DWORD *)(v5 + 24) = 2;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    unint64_t v7 = (char *)(v5 + 80);
  }
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *a3;
  DebugTreeValue v9 = (long long *)a3[1];
  if ((long long *)*a3 != v9)
  {
    unint64_t v10 = (gdc::DebugTreeProperty *)(v7 - 80);
    size_t v11 = (long long *)(v8 + 32);
    do
    {
      long long v12 = *(v11 - 2);
      *(_OWORD *)((char *)v19 + 9) = *(long long *)((char *)v11 - 23);
      v19[0] = v12;
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v13 = *v11;
        v20.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
      }
      unint64_t v14 = v11 - 2;
      int v15 = *((_DWORD *)v11 + 6);
      int v21 = v15;
      v16[0] = v19[0];
      *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v19 + 9);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
        int v15 = v21;
      }
      else
      {
        std::string __p = v20;
      }
      int v18 = v15;
      gdc::DebugTreeProperty::addValue(v10, (DebugTreeValue *)v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
LABEL_20:
        }
          operator delete(v20.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_20;
      }
      v11 += 4;
    }
    while (v14 + 4 != v9);
  }
}

void gdc::DataKeyRequester::downloadTileSize(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

double gdc::DataKeyRequester::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void gdc::DataKeyRequester::visibleZoomRange(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t *geo::linear_map<gss::StylePropertyIndex,gss::PropertyID,std::equal_to<gss::StylePropertyIndex>,geo::StdAllocator<std::pair<gss::StylePropertyIndex,gss::PropertyID>,gss::Allocator>,std::vector<std::pair<gss::StylePropertyIndex,gss::PropertyID>,geo::StdAllocator<std::pair<gss::StylePropertyIndex,gss::PropertyID>,gss::Allocator>>>::~linear_map(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t gss::uint32Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return gss::uintDecoder<gss::ScenePropertyID>(a1, a2, a3, 0x20u, a4, a6);
}

uint64_t std::allocator_traits<geo::StdAllocator<float,gss::Allocator>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2, 4 * a3);
}

uint64_t std::vector<std::pair<gss::StylePropertyIndex,gss::PropertyID>,geo::StdAllocator<std::pair<gss::StylePropertyIndex,gss::PropertyID>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    *(void *)(result + 8) = v1;
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 40))(*(void *)(result + 24), v1, *(void *)(result + 16) - v1);
  }
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A6238CF0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1A6238D00](v13);
  return a1;
}

void sub_1A2822D7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1A6238D00](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1A2822D5CLL);
}

void sub_1A2822DD0(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      long long v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1A2822F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1A2823074(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t **a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = **a3;
      uint64_t v5 = 4;
      uint64_t v6 = result;
      do
      {
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        uint64_t v6 = v3;
        unsigned int v9 = *(unsigned __int16 *)(v4 + 2 * v7);
        if (v9 < *(unsigned __int16 *)(v4 + 2 * v8))
        {
          uint64_t v10 = v5;
          while (1)
          {
            *(unsigned int *)((char *)result + v10) = v8;
            uint64_t v11 = v10 - 4;
            if (v10 == 4) {
              break;
            }
            uint64_t v8 = *(unsigned int *)((char *)result + v10 - 8);
            v10 -= 4;
            if (v9 >= *(unsigned __int16 *)(v4 + 2 * v8))
            {
              int64_t v12 = (unsigned int *)((char *)result + v11);
              goto LABEL_10;
            }
          }
          int64_t v12 = result;
LABEL_10:
          *int64_t v12 = v7;
        }
        uint64_t v3 = v6 + 1;
        v5 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t **a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = **a3;
      do
      {
        uint64_t v6 = *result;
        uint64_t v5 = result[1];
        double result = v3;
        unsigned int v7 = *(unsigned __int16 *)(v4 + 2 * v5);
        if (v7 < *(unsigned __int16 *)(v4 + 2 * v6))
        {
          uint64_t v8 = result;
          do
          {
            *uint64_t v8 = v6;
            uint64_t v6 = *(v8 - 2);
            --v8;
          }
          while (v7 < *(unsigned __int16 *)(v4 + 2 * v6));
          *uint64_t v8 = v5;
        }
        uint64_t v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = **a4;
  unsigned int v7 = *(unsigned __int16 *)(v6 + 2 * v4);
  unsigned int v8 = *(unsigned __int16 *)(v6 + 2 * v5);
  uint64_t v9 = *a3;
  unsigned int v10 = *(unsigned __int16 *)(v6 + 2 * v9);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v13 = *a3;
    if (*(unsigned __int16 *)(v6 + 2 * v13) >= v8) {
      return 1;
    }
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v11 = *a2;
    uint64_t v12 = *a1;
    if (*(unsigned __int16 *)(v6 + 2 * v11) >= *(unsigned __int16 *)(v6 + 2 * v12)) {
      return 1;
    }
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a3;
  unsigned int v5 = *(unsigned __int16 *)(v4 + 2 * v3);
  if (v5 >= *(unsigned __int16 *)(v4 + 2 * *(a2 - 1)))
  {
    unsigned int v8 = a1 + 1;
    do
    {
      uint64_t v6 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
    }
    while (v5 >= *(unsigned __int16 *)(v4 + 2 * *v6));
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      unsigned int v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(unsigned __int16 *)(v4 + 2 * v7));
  }
  if (v6 < a2)
  {
    do
      unsigned int v9 = *--a2;
    while (v5 < *(unsigned __int16 *)(v4 + 2 * v9));
  }
  if (v6 < a2)
  {
    unsigned int v10 = *v6;
    unsigned int v11 = *a2;
    do
    {
      unsigned int *v6 = v11;
      *a2 = v10;
      do
      {
        unsigned int v12 = v6[1];
        ++v6;
        unsigned int v10 = v12;
      }
      while (v5 >= *(unsigned __int16 *)(v4 + 2 * v12));
      do
      {
        unsigned int v13 = *--a2;
        unsigned int v11 = v13;
      }
      while (v5 < *(unsigned __int16 *)(v4 + 2 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v3;
  return v6;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = **a3;
  unsigned int v6 = *(unsigned __int16 *)(v5 + 2 * v4);
  do
    uint64_t v7 = a1[++v3];
  while (*(unsigned __int16 *)(v5 + 2 * v7) < v6);
  unsigned int v8 = &a1[v3];
  unsigned int v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      unsigned int v11 = *--a2;
    }
    while (*(unsigned __int16 *)(v5 + 2 * v11) >= v6);
  }
  else
  {
    do
      unsigned int v10 = *--a2;
    while (*(unsigned __int16 *)(v5 + 2 * v10) >= v6);
  }
  if (v8 < a2)
  {
    unsigned int v12 = *a2;
    unsigned int v13 = v7;
    uint64_t v14 = v8;
    uint64_t v15 = a2;
    do
    {
      *uint64_t v14 = v12;
      unsigned int *v15 = v13;
      do
      {
        unsigned int v16 = v14[1];
        ++v14;
        unsigned int v13 = v16;
      }
      while (*(unsigned __int16 *)(v5 + 2 * v16) < v6);
      do
      {
        unsigned int v17 = *--v15;
        unsigned int v12 = v17;
      }
      while (*(unsigned __int16 *)(v5 + 2 * v17) >= v6);
    }
    while (v14 < v15);
    unsigned int v9 = v14 - 1;
  }
  if (v9 != a1) {
    *a1 = *v9;
  }
  *unsigned int v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(unsigned __int16 *)(**a3 + 2 * v8) < *(unsigned __int16 *)(**a3 + 2 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    unsigned int v17 = *(unsigned __int16 *)(v13 + 2 * v15);
    if (v17 < *(unsigned __int16 *)(v13 + 2 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(unsigned __int16 *)(v13 + 2 * v16))
        {
          std::string v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      std::string v20 = a1;
LABEL_12:
      _DWORD *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    unsigned int v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t **a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  if (*(unsigned __int16 *)(v13 + 2 * v11) < *(unsigned __int16 *)(v13 + 2 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(unsigned __int16 *)(v13 + 2 * v14) < *(unsigned __int16 *)(v13 + 2 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(unsigned __int16 *)(v13 + 2 * v16) < *(unsigned __int16 *)(v13 + 2 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t **a6)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t v13 = *a5;
  uint64_t v14 = *a4;
  uint64_t v15 = **a6;
  if (*(unsigned __int16 *)(v15 + 2 * v13) < *(unsigned __int16 *)(v15 + 2 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    if (*(unsigned __int16 *)(v15 + 2 * v16) < *(unsigned __int16 *)(v15 + 2 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      if (*(unsigned __int16 *)(v15 + 2 * v18) < *(unsigned __int16 *)(v15 + 2 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        if (*(unsigned __int16 *)(v15 + 2 * v20) < *(unsigned __int16 *)(v15 + 2 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *a1;
        if (*(unsigned __int16 *)(**a4 + 2 * v15) < *(unsigned __int16 *)(**a4 + 2 * v16))
        {
          *uint64_t v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v17 = (unint64_t)v8 >> 2;
      uint64_t v18 = a2 - 1;
      do
      {
        unsigned int v19 = *a1;
        uint64_t v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a4, v17);
        if (v18 == v20)
        {
          unsigned int *v20 = v19;
        }
        else
        {
          unsigned int *v20 = *v18;
          *uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(uint64_t result, uint64_t **a2, uint64_t a3, _DWORD *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (unsigned int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      uint64_t v10 = *v8;
      if (v6 + 2 >= a3)
      {
        uint64_t v11 = **a2;
      }
      else
      {
        uint64_t v11 = **a2;
        if (*(unsigned __int16 *)(v11 + 2 * v10) < *(unsigned __int16 *)(v11 + 2 * v8[1]))
        {
          LODWORD(v10) = v8[1];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      uint64_t v12 = *a4;
      unsigned int v13 = *(unsigned __int16 *)(v11 + 2 * v12);
      if (*(unsigned __int16 *)(v11 + 2 * v10) >= v13)
      {
        do
        {
          uint64_t v14 = v8;
          *a4 = v10;
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = (2 * v7) | 1;
          uint64_t v8 = (unsigned int *)(result + 4 * v15);
          uint64_t v7 = 2 * v7 + 2;
          uint64_t v10 = *v8;
          if (v7 >= a3)
          {
            uint64_t v7 = v15;
          }
          else if (*(unsigned __int16 *)(v11 + 2 * v10) >= *(unsigned __int16 *)(v11 + 2 * v8[1]))
          {
            uint64_t v7 = v15;
          }
          else
          {
            LODWORD(v10) = v8[1];
            ++v8;
          }
          a4 = v14;
        }
        while (*(unsigned __int16 *)(v11 + 2 * v10) >= v13);
        *uint64_t v14 = v12;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *a1, void **a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = &a1[v3];
    unsigned int v10 = v7[1];
    uint64_t v8 = v7 + 1;
    uint64_t v9 = v10;
    uint64_t v11 = (2 * v3) | 1;
    uint64_t v3 = 2 * v3 + 2;
    if (v3 >= a3)
    {
      uint64_t v3 = v11;
    }
    else if (*(unsigned __int16 *)(*v6 + 2 * v9) >= *(unsigned __int16 *)(*v6 + 2 * v8[1]))
    {
      uint64_t v3 = v11;
    }
    else
    {
      LODWORD(v9) = v8[1];
      ++v8;
    }
    *a1 = v9;
    a1 = v8;
  }
  while (v3 <= v5);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (unsigned int *)(result + 4 * v4);
    uint64_t v6 = *v5;
    unsigned int v9 = *(_DWORD *)(a2 - 4);
    uint64_t v7 = (unsigned int *)(a2 - 4);
    unsigned int v8 = v9;
    uint64_t v10 = **a3;
    unsigned int v11 = *(unsigned __int16 *)(v10 + 2 * v9);
    if (*(unsigned __int16 *)(v10 + 2 * v6) < v11)
    {
      do
      {
        uint64_t v12 = v5;
        *uint64_t v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (unsigned int *)(result + 4 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v12;
      }
      while (*(unsigned __int16 *)(v10 + 2 * v6) < v11);
      *uint64_t v12 = v8;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(unsigned __int16 *)(**a3 + 2 * v8) < *(unsigned __int16 *)(**a3 + 2 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    unsigned int v17 = *(unsigned __int16 *)(v13 + 2 * v15);
    if (v17 < *(unsigned __int16 *)(v13 + 2 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(unsigned __int16 *)(v13 + 2 * v16))
        {
          uint64_t v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      _DWORD *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(unsigned __int16 *)(**a3 + 2 * v8) < *(unsigned __int16 *)(**a3 + 2 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    unsigned int v17 = *(unsigned __int16 *)(v13 + 2 * v15);
    if (v17 < *(unsigned __int16 *)(v13 + 2 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(unsigned __int16 *)(v13 + 2 * v16))
        {
          uint64_t v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      _DWORD *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _WORD *__dst, _OWORD *a3, int a4)
{
  std::vector<unsigned int>::size_type v5 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    if (a4)
    {
      std::vector<unsigned int>::vector(&__p, v5);
      std::vector<unsigned int>::pointer begin = __p.__begin_;
      std::vector<unsigned int>::pointer end = __p.__end_;
      if (__p.__begin_ != __p.__end_)
      {
        unsigned int v10 = 0;
        std::vector<unsigned int>::pointer v11 = __p.__begin_;
        do
          *v11++ = v10++;
        while (v11 != end);
      }
      unint64_t v12 = 126 - 2 * __clz(end - begin);
      uint64_t v21 = (uint64_t *)a1;
      if (end == begin) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)begin, end, &v21, v13, 1);
      uint64_t v14 = __p.__begin_;
      if (*(_WORD *)(a1 + 10))
      {
        unint64_t v15 = 0;
        do
        {
          uint64_t v16 = v14[v15];
          uint64_t v17 = *(void *)a1;
          __dst[v15] = *(_WORD *)(*(void *)a1 + 2 * v16);
          *a3++ = *(_OWORD *)(v17 + *(unsigned __int16 *)(a1 + 8) + 16 * v16);
          ++v15;
        }
        while (v15 < *(unsigned __int16 *)(a1 + 10));
        *(unsigned char *)(a1 + 15) = 1;
      }
      else
      {
        *(unsigned char *)(a1 + 15) = 1;
        if (!v14) {
          return;
        }
      }
      __p.__end_ = v14;
      operator delete(v14);
    }
    else
    {
      memmove(__dst, *(const void **)a1, 2 * v5);
      uint64_t v18 = *(unsigned __int16 *)(a1 + 10);
      if (*(_WORD *)(a1 + 10))
      {
        uint64_t v19 = (const void *)(*(void *)a1 + *(unsigned __int16 *)(a1 + 8));
        memmove(a3, v19, 16 * v18);
      }
    }
  }
}

void sub_1A2823F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(unsigned __int16 *)(**a3 + 2 * v8) < *(unsigned __int16 *)(**a3 + 2 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      std::vector<unsigned int>::pointer v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    unsigned int v17 = *(unsigned __int16 *)(v13 + 2 * v15);
    if (v17 < *(unsigned __int16 *)(v13 + 2 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(unsigned __int16 *)(v13 + 2 * v16))
        {
          uint64_t v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      _DWORD *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    unsigned int v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void std::__shared_ptr_emplace<std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void **)(result + 40);
    uint64_t v4 = *(void *)(result + 32);
    if (v3 != v1)
    {
      std::vector<unsigned int>::size_type v5 = v3 - 2;
      do
      {
        uint64_t v6 = *(v5 - 3);
        if (v6)
        {
          *(v5 - 2) = v6;
          std::allocator_traits<geo::StdAllocator<float,gss::Allocator>>::deallocate[abi:ne180100](v5, v6, (*(v5 - 1) - v6) >> 2);
        }
        uint64_t v7 = v5 - 3;
        v5 -= 5;
      }
      while (v7 != v1);
      uint64_t v4 = *(void *)(v2 + 32);
    }
    *(void *)(v2 + 40) = v1;
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 56) + 40))(*(void *)(v2 + 56), v4, *(void *)(v2 + 48) - v4);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 64);
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>,geo::StdAllocator<std::string,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B2D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>,geo::StdAllocator<std::string,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B2D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>,geo::StdAllocator<std::string,gss::Allocator>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 40);
    uint64_t v4 = *(void *)(result + 32);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v1);
      uint64_t v4 = *(void *)(v2 + 32);
    }
    *(void *)(v2 + 40) = v1;
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 56) + 40))(*(void *)(v2 + 56), v4, *(void *)(v2 + 48) - v4);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>,geo::StdAllocator<std::string,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 64);
}

const char *gss::to_string(int a1)
{
  BOOL result = "None";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      BOOL result = "LineType";
      break;
    case 2:
      BOOL result = "BorderType";
      break;
    case 3:
      BOOL result = "AoiType";
      break;
    case 4:
      BOOL result = "Country";
      break;
    case 5:
      BOOL result = "FeatureType";
      break;
    case 6:
      BOOL result = "PoiType";
      break;
    case 7:
      BOOL result = "LandcoverType";
      break;
    case 8:
      BOOL result = "MinzoomRank";
      break;
    case 9:
    case 13:
    case 15:
    case 48:
    case 96:
    case 97:
    case 98:
    case 99:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 152:
LABEL_157:
      BOOL result = "Unknown";
      break;
    case 10:
      BOOL result = "Significance";
      break;
    case 11:
      BOOL result = "FerryType";
      break;
    case 12:
      BOOL result = "RailwayType";
      break;
    case 14:
      BOOL result = "BrunnelType";
      break;
    case 16:
      BOOL result = "PoiIconType";
      break;
    case 17:
      BOOL result = "DetailedLandcoverType";
      break;
    case 18:
      BOOL result = "NetworkClass";
      break;
    case 19:
      BOOL result = "RoofType";
      break;
    case 20:
      BOOL result = "LabelType";
      break;
    case 21:
      BOOL result = "RampType";
      break;
    case 22:
      BOOL result = "DisputedType";
      break;
    case 23:
      BOOL result = "RuralUrbanType";
      break;
    case 24:
      BOOL result = "DrivingSide";
      break;
    case 25:
      BOOL result = "WalkableType";
      break;
    case 26:
      BOOL result = "DrivableType";
      break;
    case 27:
      BOOL result = "DataSource";
      break;
    case 28:
      BOOL result = "BackgroundType";
      break;
    case 29:
      BOOL result = "PoiCompany";
      break;
    case 30:
      BOOL result = "TransitAgency";
      break;
    case 31:
      BOOL result = "RoadHierarchyClass";
      break;
    case 32:
      BOOL result = "TollType";
      break;
    case 33:
      BOOL result = "RampDirection";
      break;
    case 34:
      BOOL result = "ParentChildRelationship";
      break;
    case 35:
      BOOL result = "StrokeType";
      break;
    case 36:
      BOOL result = "RoadSurface";
      break;
    case 37:
      BOOL result = "TransitType";
      break;
    case 38:
      BOOL result = "VenueCategory";
      break;
    case 39:
      BOOL result = "VenueCategoryDetailed";
      break;
    case 40:
      BOOL result = "DebugShape";
      break;
    case 41:
      BOOL result = "LocalNorthRegion";
      break;
    case 42:
      BOOL result = "TransitNodeType";
      break;
    case 43:
      BOOL result = "Status";
      break;
    case 44:
      BOOL result = "RouteSignificance";
      break;
    case 45:
      BOOL result = "AccessPointType";
      break;
    case 46:
      BOOL result = "Polity";
      break;
    case 47:
      BOOL result = "PoiLandmark";
      break;
    case 49:
      BOOL result = "TransitSystemType";
      break;
    case 50:
      BOOL result = "TransitLineType";
      break;
    case 51:
      BOOL result = "TransitNodeId";
      break;
    case 52:
      BOOL result = "BrowseCategory";
      break;
    case 53:
      BOOL result = "TransitDisplayGroup";
      break;
    case 54:
      BOOL result = "TransitSystemSignificance";
      break;
    case 55:
      BOOL result = "CategoryType";
      break;
    case 56:
      BOOL result = "PolygonEdgeType";
      break;
    case 57:
      BOOL result = "TransitLineLabelConstraint";
      break;
    case 58:
      BOOL result = "TransitNodeLabelAnnotationConstraint";
      break;
    case 59:
      BOOL result = "TransitTransferStation";
      break;
    case 60:
      BOOL result = "AoiZoomRange";
      break;
    case 61:
      BOOL result = "RoadAccessType";
      break;
    case 62:
      BOOL result = "TransitAccessPointAccessType";
      break;
    case 63:
      BOOL result = "TransitAccessPointHasCuratedName";
      break;
    case 64:
      BOOL result = "VenueNodeType";
      break;
    case 65:
      BOOL result = "VenueType";
      break;
    case 66:
      BOOL result = "DisplaySection";
      break;
    case 67:
      BOOL result = "VenueGoInside";
      break;
    case 68:
      BOOL result = "LineInTransitData";
      break;
    case 69:
      BOOL result = "VenueLevelType";
      break;
    case 70:
      BOOL result = "CulDeSac";
      break;
    case 71:
      BOOL result = "Landcover";
      break;
    case 72:
      BOOL result = "AoiBoundary";
      break;
    case 73:
      BOOL result = "SbsmOverride";
      break;
    case 74:
      BOOL result = "MuninCoverage";
      break;
    case 75:
      BOOL result = "RoadSegmentRoadwayIsPedestrianNavigable";
      break;
    case 76:
      BOOL result = "RoadSegmentSideSidewalk";
      break;
    case 77:
      BOOL result = "RoadSegmentSideWalkable";
      break;
    case 78:
      BOOL result = "HasAssociation";
      break;
    case 79:
      BOOL result = "PointFeatureType";
      break;
    case 80:
      BOOL result = "TransportPolygonType";
      break;
    case 81:
      BOOL result = "CartographicMarkingType";
      break;
    case 82:
      BOOL result = "PoiClass";
      break;
    case 83:
      BOOL result = "SummaryType";
      break;
    case 84:
      BOOL result = "PoiContent";
      break;
    case 85:
      BOOL result = "LabelMinZoom";
      break;
    case 86:
      BOOL result = "RoadSegmentSideBikeable";
      break;
    case 87:
      BOOL result = "HasBikeLane";
      break;
    case 88:
      BOOL result = "TollProhibitedAreaPersistence";
      break;
    case 89:
      BOOL result = "Relevance";
      break;
    case 90:
      BOOL result = "RouteAnnotationType";
      break;
    case 91:
      BOOL result = "SpecialRoadSegmentType";
      break;
    case 92:
      BOOL result = "PhysicalFeature";
      break;
    case 93:
      BOOL result = "Currency";
      break;
    case 94:
      BOOL result = "Seasonality";
      break;
    case 95:
      BOOL result = "TransitSystemEnabled";
      break;
    case 100:
      BOOL result = "MeshType";
      break;
    case 101:
      BOOL result = "MarkingColor";
      break;
    case 102:
      BOOL result = "LaneMarkingType";
      break;
    case 103:
      BOOL result = "LaneMarkingStyle";
      break;
    case 104:
      BOOL result = "SurfaceMarkingType";
      break;
    case 105:
      BOOL result = "VegetationType";
      break;
    case 106:
      BOOL result = "VegetationTreePart";
      break;
    case 107:
      BOOL result = "RoadSurfaceClass";
      break;
    case 108:
      BOOL result = "TrafficSignType";
      break;
    case 109:
      BOOL result = "TrafficDevicePart";
      break;
    case 110:
      BOOL result = "PavementPatternStyle";
      break;
    case 150:
      BOOL result = "DebugOnly";
      break;
    case 151:
      BOOL result = "IsLuxoRegion";
      break;
    case 153:
      BOOL result = "ClimateTemperature";
      break;
    case 154:
      BOOL result = "ClimatePrecipitation";
      break;
    case 155:
      BOOL result = "FeatureRank";
      break;
    case 156:
      BOOL result = "HasDisplayElevationAnnotation";
      break;
    case 157:
      BOOL result = "LabelAnnotationType";
      break;
    case 158:
      BOOL result = "BuiltUpAreaType";
      break;
    case 159:
      BOOL result = "RelationshipToStructure";
      break;
    case 160:
      BOOL result = "ConsolidationType";
      break;
    case 161:
      BOOL result = "GeographicLineType";
      break;
    case 162:
      BOOL result = "ZoomPromotion";
      break;
    case 163:
      BOOL result = "TransitLineSignificance";
      break;
    case 164:
      BOOL result = "InMiniPoiMarket";
      break;
    case 165:
      BOOL result = "IslandType";
      break;
    case 166:
      BOOL result = "LabelModifier";
      break;
    case 167:
      BOOL result = "WaterDisplayType";
      break;
    case 168:
      BOOL result = "SubterraneanWater";
      break;
    case 169:
      BOOL result = "TransitNodeStationLmz";
      break;
    case 170:
      BOOL result = "SuppressInSpr";
      break;
    case 171:
      BOOL result = "IndoorVisibility";
      break;
    case 172:
      BOOL result = "IndigenousLandType";
      break;
    case 173:
      BOOL result = "IndigenousLandRecognition";
      break;
    case 174:
      BOOL result = "TerminalTransitNode";
      break;
    case 175:
      BOOL result = "HillShading";
      break;
    case 176:
      BOOL result = "TintBand";
      break;
    case 177:
      BOOL result = "ContourLine";
      break;
    case 178:
      BOOL result = "FormOfWay";
      break;
    case 179:
      BOOL result = "HillShadingGradual";
      break;
    case 180:
      BOOL result = "InHikingRegion";
      break;
    case 181:
      BOOL result = "MaskingType";
      break;
    case 182:
      BOOL result = "FeatureMinZoom";
      break;
    case 183:
      BOOL result = "FeatureMaxZoom";
      break;
    case 184:
      BOOL result = "InKittyhawkRegion";
      break;
    case 185:
      BOOL result = "HikingConveyance";
      break;
    case 186:
      BOOL result = "SuppressInHiking";
      break;
    case 187:
      BOOL result = "MasksFeatureType";
      break;
    case 188:
      BOOL result = "DisplayClass";
      break;
    case 189:
      BOOL result = "HasSupplementalData";
      break;
    case 190:
      BOOL result = "ContourLineType";
      break;
    case 191:
      BOOL result = "TravelDirectionType";
      break;
    case 192:
      BOOL result = "TemporalEvent";
      break;
    case 193:
      BOOL result = "PoiTierType";
      break;
    default:
      switch(a1)
      {
        case 65536:
          BOOL result = "MapMode";
          break;
        case 65537:
          BOOL result = "TimePeriod";
          break;
        case 65538:
          BOOL result = "SelectionState";
          break;
        case 65539:
          BOOL result = "AnnotationType";
          break;
        case 65540:
          BOOL result = "IconTappable";
          break;
        case 65541:
          BOOL result = "TargetDisplay";
          break;
        case 65542:
          BOOL result = "LanguageLocale";
          break;
        case 65543:
          BOOL result = "RouteProximity";
          break;
        case 65544:
          BOOL result = "TrafficIncidentType";
          break;
        case 65545:
          BOOL result = "When";
          break;
        case 65549:
          BOOL result = "OverlayType";
          break;
        case 65550:
          BOOL result = "ApplicationState";
          break;
        case 65552:
          BOOL result = "TransportType";
          break;
        case 65553:
          BOOL result = "FlyoverPlace";
          break;
        case 65554:
          BOOL result = "TransitOperationalState";
          break;
        case 65555:
          BOOL result = "TransitRoutesMerged";
          break;
        case 65556:
          BOOL result = "RouteSegmentWhen";
          break;
        case 65557:
          BOOL result = "TransitLineMergeType";
          break;
        case 65558:
          BOOL result = "TransitNodeImageType";
          break;
        case 65559:
          BOOL result = "ViewProximity";
          break;
        case 65560:
          BOOL result = "ViewportMinSize";
          break;
        case 65561:
          BOOL result = "VehicleIsParked";
          break;
        case 65562:
          BOOL result = "TransitLinkVisibleLineCount";
          break;
        case 65563:
          BOOL result = "TransitLineMultipleSystems";
          break;
        case 65564:
          BOOL result = "TransitLineMultipleLines";
          break;
        case 65565:
          BOOL result = "NavigationState";
          break;
        case 65566:
          BOOL result = "DistanceToCurrentManeuver";
          break;
        case 65567:
          BOOL result = "CustomFeatureType";
          break;
        case 65568:
          BOOL result = "Favorite";
          break;
        case 65569:
          BOOL result = "Event";
          break;
        case 65570:
          BOOL result = "SearchResult";
          break;
        case 65571:
          BOOL result = "RouteFeatureType";
          break;
        case 65572:
          BOOL result = "CustomFeature";
          break;
        case 65573:
          BOOL result = "PickingState";
          break;
        case 65574:
          BOOL result = "CurrentManeuverType";
          break;
        case 65575:
          BOOL result = "NextStepLength";
          break;
        case 65576:
          BOOL result = "CurrentIncidentType";
          break;
        case 65577:
          BOOL result = "CurrentManeuverComplexity";
          break;
        case 65578:
          BOOL result = "CurrentGroupedManeuverCount";
          break;
        case 65579:
          BOOL result = "TransitNodeVisibleLineCount";
          break;
        case 65580:
          BOOL result = "EventType";
          break;
        case 65581:
          BOOL result = "Cluster";
          break;
        case 65582:
          BOOL result = "ClusterHasMultipleCategories";
          break;
        case 65583:
          BOOL result = "ClusterIsOpen";
          break;
        case 65584:
          BOOL result = "OpenClusterElement";
          break;
        case 65585:
          BOOL result = "SearchAlongTheRoute";
          break;
        case 65586:
          BOOL result = "VehicleSpeed";
          break;
        case 65587:
          BOOL result = "SearchResultsType";
          break;
        case 65588:
          BOOL result = "CameraMode";
          break;
        case 65589:
          BOOL result = "NavLabelType";
          break;
        case 65590:
          BOOL result = "MapZoomLevel";
          break;
        case 65591:
          BOOL result = "TransitLinkMultipleSystems";
          break;
        case 65592:
          BOOL result = "NavCameraDetached";
          break;
        case 65593:
          BOOL result = "RoadSpeed";
          break;
        case 65594:
          BOOL result = "Occluded";
          break;
        case 65595:
          BOOL result = "NextManeuverRampType";
          break;
        case 65596:
          BOOL result = "MapHasLabels";
          break;
        case 65597:
          BOOL result = "ApplicationUILayout";
          break;
        case 65598:
          BOOL result = "CurrentStepLength";
          break;
        case 65599:
          BOOL result = "CategoryIconPresentation";
          break;
        case 65600:
          BOOL result = "NavigationDestination";
          break;
        case 65601:
          BOOL result = "VenueFeature";
          break;
        case 65602:
          BOOL result = "TrafficCameraType";
          break;
        case 65603:
          BOOL result = "DraggingState";
          break;
        case 65604:
          BOOL result = "VenueFeatureState";
          break;
        case 65605:
          BOOL result = "Emphasis";
          break;
        case 65606:
          BOOL result = "JetpackMode";
          break;
        case 65607:
          BOOL result = "EtaComparison";
          break;
        case 65608:
          BOOL result = "VenuesEnabled";
          break;
        case 65609:
          BOOL result = "VenuesFloorSwitcherActive";
          break;
        case 65610:
          BOOL result = "TransitNodeImageTypeDark";
          break;
        case 65611:
          BOOL result = "SettingsCategory";
          break;
        case 65612:
          BOOL result = "LabelComponent";
          break;
        case 65613:
          BOOL result = "FocusState";
          break;
        case 65614:
          BOOL result = "TrafficSignalType";
          break;
        case 65615:
          BOOL result = "RoadSignType";
          break;
        case 65616:
          BOOL result = "CollectionsType";
          break;
        case 65617:
          BOOL result = "GroundMode";
          break;
        case 65618:
          BOOL result = "EtaAdvisoryType";
          break;
        case 65619:
          BOOL result = "RouteTransportType";
          break;
        case 65620:
          BOOL result = "RouteLegWhen";
          break;
        case 65621:
          BOOL result = "RoadComplexity";
          break;
        case 65622:
          BOOL result = "PreviouslySelected";
          break;
        case 65623:
          BOOL result = "AlternateStyle";
          break;
        case 65624:
          BOOL result = "FlexPoint";
          break;
        case 65625:
          BOOL result = "FlexSelectionZone";
          break;
        case 65626:
          BOOL result = "Tier";
          break;
        case 65627:
          BOOL result = "IncidentDataSource";
          break;
        case 65628:
          BOOL result = "ClusterSize";
          break;
        case 65629:
          BOOL result = "DistanceToCurrentTrafficSection";
          break;
        case 65630:
          BOOL result = "CurrentTrafficState";
          break;
        case 65631:
          BOOL result = "Draped";
          break;
        case 65632:
          BOOL result = "ArLabelType";
          break;
        case 65633:
          BOOL result = "NextRoadComplexity";
          break;
        case 65634:
          BOOL result = "TransitCurrentManeuverType";
          break;
        case 65635:
          BOOL result = "RouteSinuosity";
          break;
        case 65636:
          BOOL result = "WindshieldMode";
          break;
        case 65637:
          BOOL result = "BifurcationType";
          break;
        case 65638:
          BOOL result = "Bridge";
          break;
        case 65639:
          BOOL result = "Tunnel";
          break;
        case 65640:
          BOOL result = "UrbanCanyon";
          break;
        case 65641:
          BOOL result = "ComplexOverpass";
          break;
        case 65642:
          BOOL result = "ComplexIntersection";
          break;
        case 65643:
          BOOL result = "LaneCount";
          break;
        case 65644:
          BOOL result = "TrafficCameraMode";
          break;
        case 65645:
          BOOL result = "ArLabelLayoutType";
          break;
        case 65646:
          BOOL result = "ArArrivalType";
          break;
        case 65647:
          BOOL result = "IsCovered";
          break;
        case 65648:
          BOOL result = "CameraPitch";
          break;
        case 65649:
          BOOL result = "Usage";
          break;
        case 65650:
          BOOL result = "MapkitUsage";
          break;
        case 65651:
          BOOL result = "PoiFiltering";
          break;
        case 65652:
          BOOL result = "NavCameraTransitionComplete";
          break;
        case 65653:
          BOOL result = "MapkitIconUsage";
          break;
        case 65654:
          BOOL result = "ClientSymbol";
          break;
        case 65655:
          BOOL result = "CarDisplayType";
          break;
        case 65656:
          BOOL result = "CarDisplayConfig";
          break;
        case 65657:
          BOOL result = "ScreenFeatureType";
          break;
        case 65659:
          BOOL result = "HikingEnabled";
          break;
        case 65660:
          BOOL result = "HikingFeatureState";
          break;
        case 65661:
          BOOL result = "RtEvChargingAnnotationType";
          break;
        case 65662:
          BOOL result = "MapkitClientMode";
          break;
        case 65663:
          BOOL result = "PlatterFocus";
          break;
        case 65664:
          BOOL result = "OfflineRegionSelector";
          break;
        case 65666:
          BOOL result = "MapPurpose";
          break;
        case 65667:
          BOOL result = "OfflineMode";
          break;
        case 65668:
          BOOL result = "ApplicationSubState";
          break;
        case 65669:
          BOOL result = "RouteSource";
          break;
        case 65670:
          BOOL result = "RoutePointManeuverType";
          break;
        default:
          goto LABEL_157;
      }
      break;
  }
  return result;
}

{
  const char *v1;

  uint64_t v1 = "Unknown";
  if (a1 == 1) {
    uint64_t v1 = "FacePerpendicular";
  }
  if (a1) {
    return v1;
  }
  else {
    return "FaceAligned";
  }
}

{
  if ((a1 - 1) > 0x35) {
    return "Unknown";
  }
  else {
    return off_1E5A9BA78[(char)(a1 - 1)];
  }
}

{
  if ((a1 - 1) > 0x17) {
    return "Unknown";
  }
  else {
    return off_1E5A9BCC8[(char)(a1 - 1)];
  }
}

{
  const char *v1;

  uint64_t v1 = "Unknown";
  if (a1 == 1) {
    uint64_t v1 = "Wind";
  }
  if (a1) {
    return v1;
  }
  else {
    return "Standard";
  }
}

{
  const char *v1;

  uint64_t v1 = "Unknown";
  if (a1 == 1) {
    uint64_t v1 = "True";
  }
  if (a1) {
    return v1;
  }
  else {
    return "False";
  }
}

{
  if ((a1 - 1) > 0xC) {
    return "Unknown";
  }
  else {
    return off_1E5A9C968[(char)(a1 - 1)];
  }
}

{
  if ((a1 - 1) > 0x41) {
    return "Unknown";
  }
  else {
    return off_1E5AA0628[(char)(a1 - 1)];
  }
}

{
  if ((a1 - 1) > 0x28) {
    return "Unknown";
  }
  else {
    return off_1E5AA0838[(char)(a1 - 1)];
  }
}

{
  if ((a1 - 1) > 0x4D) {
    return "Unknown";
  }
  else {
    return off_1E5AA0980[(char)(a1 - 1)];
  }
}

{
  if ((a1 - 1) > 0xE62) {
    return "Unknown";
  }
  else {
    return off_1E5AAA2F8[(__int16)(a1 - 1)];
  }
}

{
  const char *result;

  if (a1 <= 999)
  {
    if (a1 <= 299)
    {
      if (a1 <= 0x12B)
      {
        switch(a1)
        {
          case 'd':
            BOOL result = "RailwayService";
            break;
          case 'e':
            BOOL result = "HighSpeedRailService";
            break;
          case 'f':
            BOOL result = "LongDistanceTrains";
            break;
          case 'g':
            BOOL result = "InterRegionalRailService";
            break;
          case 'h':
            BOOL result = "CarTransportRailService";
            break;
          case 'i':
            BOOL result = "SleeperRailService";
            break;
          case 'j':
            BOOL result = "RegionalRailService";
            break;
          case 'k':
            BOOL result = "TouristRailwayService";
            break;
          case 'l':
            BOOL result = "RailShuttleWithinComplex";
            break;
          case 'm':
            BOOL result = "SuburbanRailway";
            break;
          case 'n':
            BOOL result = "ReplacementRailService";
            break;
          case 'o':
            BOOL result = "SpecialRailService";
            break;
          case 'p':
            BOOL result = "LorryTransportRailService";
            break;
          case 'q':
            BOOL result = "AllRailServices";
            break;
          case 'r':
            BOOL result = "CrossCountryRailService";
            break;
          case 's':
            BOOL result = "VehicleTransportRailService";
            break;
          case 't':
            BOOL result = "RackAndPinionRailway";
            break;
          case 'u':
            BOOL result = "AdditionalRailService";
            break;
          default:
            JUMPOUT(0);
        }
      }
      else
      {
        switch(a1)
        {
          case 200:
            BOOL result = "CoachService";
            break;
          case 201:
            BOOL result = "InternationalCoachService";
            break;
          case 202:
            BOOL result = "NationalCoachService";
            break;
          case 203:
            BOOL result = "ShuttleCoachService";
            break;
          case 204:
            BOOL result = "RegionalCoachService";
            break;
          case 205:
            BOOL result = "SpecialCoachService";
            break;
          case 206:
            BOOL result = "SightseeingCoachService";
            break;
          case 207:
            BOOL result = "TouristCoachService";
            break;
          case 208:
            BOOL result = "CommuterCoachService";
            break;
          case 209:
            BOOL result = "AllCoachServices";
            break;
          default:
            return "Unknown";
        }
      }
      return result;
    }
    if (a1 > 699)
    {
      switch(a1)
      {
        case 700:
          BOOL result = "BusService";
          break;
        case 701:
          BOOL result = "RegionalBusService";
          break;
        case 702:
          BOOL result = "ExpressBusService";
          break;
        case 703:
          BOOL result = "StoppingBusService";
          break;
        case 704:
          BOOL result = "LocalBusService";
          break;
        case 705:
          BOOL result = "NightBusService";
          break;
        case 706:
          BOOL result = "PostBusService";
          break;
        case 707:
          BOOL result = "SpecialNeedsBus";
          break;
        case 708:
          BOOL result = "MobilityBusService";
          break;
        case 709:
          BOOL result = "MobilityBusForRegisteredDisabled";
          break;
        case 710:
          BOOL result = "SightseeingBus";
          break;
        case 711:
          BOOL result = "ShuttleBus";
          break;
        case 712:
          BOOL result = "SchoolBus";
          break;
        case 713:
          BOOL result = "SchoolAndPublicServiceBus";
          break;
        case 714:
          BOOL result = "RailReplacementBusService";
          break;
        case 715:
          BOOL result = "DemandAndResponseBusService";
          break;
        case 716:
          BOOL result = "AllBusServices";
          break;
        default:
          switch(a1)
          {
            case 900:
              BOOL result = "TramService";
              break;
            case 901:
              BOOL result = "CityTramService";
              break;
            case 902:
              BOOL result = "LocalTramService";
              break;
            case 903:
              BOOL result = "RegionalTramService";
              break;
            case 904:
              BOOL result = "SightseeingTramService";
              break;
            case 905:
              BOOL result = "ShuttleTramService";
              break;
            case 906:
              BOOL result = "AllTramServices";
              break;
            default:
              if (a1 != 800) {
                return "Unknown";
              }
              BOOL result = "TrolleybusService";
              break;
          }
          break;
      }
      return result;
    }
    if (a1 <= 499)
    {
      switch(a1)
      {
        case 400:
          BOOL result = "UrbanRailwayService";
          break;
        case 401:
          BOOL result = "MetroService";
          break;
        case 402:
          BOOL result = "UndergroundService";
          break;
        case 403:
          BOOL result = "UrbanRailwayServiceMinor";
          break;
        case 404:
          BOOL result = "AllUrbanRailwayServices";
          break;
        case 405:
          BOOL result = "MonorailService";
          break;
        default:
          if (a1 != 300) {
            return "Unknown";
          }
          BOOL result = "SuburbanRailwayService";
          break;
      }
      return result;
    }
    if (a1 == 500) {
      return "MetroServiceMajor";
    }
    if (a1 == 600) {
      return "UndergroundServiceMajor";
    }
    return "Unknown";
  }
  if (a1 > 1299)
  {
    if (a1 <= 1499)
    {
      if (a1 > 1399)
      {
        switch(a1)
        {
          case 1400:
            return "FunicularService";
          case 1401:
            return "FunicularServiceMinor";
          case 1402:
            return "AllFunicularService";
        }
        return "Unknown";
      }
      switch(a1)
      {
        case 1300:
          BOOL result = "TelecabinService";
          break;
        case 1301:
          BOOL result = "TelecabinServiceMinor";
          break;
        case 1302:
          BOOL result = "CableCarService";
          break;
        case 1303:
          BOOL result = "ElevatorService";
          break;
        case 1304:
          BOOL result = "ChairLiftService";
          break;
        case 1305:
          BOOL result = "DragLiftService";
          break;
        case 1306:
          BOOL result = "SmallTelecabinService";
          break;
        case 1307:
          BOOL result = "AllTelecabinServices";
          break;
        default:
          return "Unknown";
      }
    }
    else if (a1 > 1599)
    {
      if (a1 > 1699)
      {
        switch(a1)
        {
          case 1700:
            return "MiscellaneousService";
          case 1701:
            return "HorseDrawnCarriage";
          case 1800:
            return "BRTService";
        }
        return "Unknown";
      }
      switch(a1)
      {
        case 1600:
          BOOL result = "SelfDrive";
          break;
        case 1601:
          BOOL result = "HireCar";
          break;
        case 1602:
          BOOL result = "HireVan";
          break;
        case 1603:
          BOOL result = "HireMotorbike";
          break;
        case 1604:
          BOOL result = "HireCycle";
          break;
        default:
          return "Unknown";
      }
    }
    else
    {
      switch(a1)
      {
        case 1500:
          BOOL result = "TaxiService";
          break;
        case 1501:
          BOOL result = "CommunalTaxiService";
          break;
        case 1502:
          BOOL result = "WaterTaxiService";
          break;
        case 1503:
          BOOL result = "RailTaxiService";
          break;
        case 1504:
          BOOL result = "BikeTaxiService";
          break;
        case 1505:
          BOOL result = "LicensedTaxiService";
          break;
        case 1506:
          BOOL result = "PrivateHireServiceVehicle";
          break;
        case 1507:
          BOOL result = "AllTaxiServices";
          break;
        default:
          return "Unknown";
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1000:
        BOOL result = "WaterTransportService";
        break;
      case 1001:
        BOOL result = "InternationalCarFerryService";
        break;
      case 1002:
        BOOL result = "NationalCarFerryService";
        break;
      case 1003:
        BOOL result = "RegionalCarFerryService";
        break;
      case 1004:
        BOOL result = "LocalCarFerryService";
        break;
      case 1005:
        BOOL result = "InternationalPassengerFerryService";
        break;
      case 1006:
        BOOL result = "NationalPassengerFerryService";
        break;
      case 1007:
        BOOL result = "RegionalPassengerFerryService";
        break;
      case 1008:
        BOOL result = "LocalPassengerFerryService";
        break;
      case 1009:
        BOOL result = "PostBoatService";
        break;
      case 1010:
        BOOL result = "TrainFerryService";
        break;
      case 1011:
        BOOL result = "RoadLinkFerryService";
        break;
      case 1012:
        BOOL result = "AirportLinkFerryService";
        break;
      case 1013:
        BOOL result = "CarHighSpeedFerryService";
        break;
      case 1014:
        BOOL result = "PassengerHighSpeedFerryService";
        break;
      case 1015:
        BOOL result = "SightseeingBoatService";
        break;
      case 1016:
        BOOL result = "SchoolBoat";
        break;
      case 1017:
        BOOL result = "CableDrawnBoatService";
        break;
      case 1018:
        BOOL result = "RiverBusService";
        break;
      case 1019:
        BOOL result = "ScheduledFerryService";
        break;
      case 1020:
        BOOL result = "ShuttleFerryService";
        break;
      case 1021:
        BOOL result = "AllWaterTransportServices";
        break;
      default:
        switch(a1)
        {
          case 1100:
            BOOL result = "AirService";
            break;
          case 1101:
            BOOL result = "InternationalAirService";
            break;
          case 1102:
            BOOL result = "DomesticAirService";
            break;
          case 1103:
            BOOL result = "IntercontinentalAirService";
            break;
          case 1104:
            BOOL result = "DomesticScheduledAirService";
            break;
          case 1105:
            BOOL result = "ShuttleAirService";
            break;
          case 1106:
            BOOL result = "IntercontinentalCharterAirService";
            break;
          case 1107:
            BOOL result = "InternationalCharterAirService";
            break;
          case 1108:
            BOOL result = "RoundTripCharterAirService";
            break;
          case 1109:
            BOOL result = "SightseeingAirService";
            break;
          case 1110:
            BOOL result = "HelicopterAirService";
            break;
          case 1111:
            BOOL result = "DomesticCharterAirService";
            break;
          case 1112:
            BOOL result = "SchengenAreaAirService";
            break;
          case 1113:
            BOOL result = "AirshipService";
            break;
          case 1114:
            BOOL result = "AllAirServices";
            break;
          default:
            if (a1 != 1200) {
              return "Unknown";
            }
            BOOL result = "FerryService";
            break;
        }
        break;
    }
  }
  return result;
}

const char *gss::to_string(char a1)
{
  if ((a1 - 1) > 0x1Fu) {
    return "Unknown";
  }
  else {
    return off_1E5A9C6F0[(char)(a1 - 1)];
  }
}

char *gss::to_string(int a1)
{
  return off_1E5A9CC08[a1 ^ 0x80u];
}

{
  return off_1E5A9FC08[a1 ^ 0x80u];
}

{
  return off_1E5AA9A50[a1 ^ 0x80u];
}

const char *gss::to_string(__int16 a1)
{
  if ((unsigned __int16)((unsigned __int16)(a1 - 5) >> 1) > 0x8A2u) {
    return "Unknown";
  }
  else {
    return off_1E5AA1020[(__int16)(a1 - 5)];
  }
}

const char *gss::to_string(int a1, __int16 a2)
{
  BOOL result = "";
  switch(a1)
  {
    case 1:
      return gss::to_string(a2);
    case 2:
      return gss::to_string(a2);
    case 3:
      return gss::to_string(a2);
    case 4:
      return gss::to_string(a2);
    case 5:
      return gss::to_string(a2);
    case 6:
      return gss::to_string(a2);
    case 7:
      return gss::to_string(a2);
    case 8:
    case 9:
    case 13:
    case 15:
    case 18:
    case 48:
    case 96:
    case 97:
    case 98:
    case 99:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 152:
      return result;
    case 10:
      return gss::to_string(a2);
    case 11:
      uint64_t v6 = "Unknown";
      uint64_t v8 = "Ferry";
      goto LABEL_214;
    case 12:
      return gss::to_string(a2);
    case 14:
      if (a2 >= 4u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1838;
      return v5[v4];
    case 16:
      int v11 = a2;
      int v12 = "Unknown";
      uint64_t v13 = "Custom";
      goto LABEL_162;
    case 17:
      return gss::to_string(a2);
    case 19:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1858;
      return v5[v4];
    case 20:
      uint64_t v6 = "Unknown";
      uint64_t v8 = "Polygon";
      goto LABEL_214;
    case 21:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB2318;
      return v5[v4];
    case 22:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Disputed";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "NonDisputed";
      goto LABEL_8;
    case 23:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Urban";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "Rural";
      goto LABEL_8;
    case 24:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Left";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "Right";
      goto LABEL_8;
    case 25:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Walkable";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "NonWalkable";
      goto LABEL_8;
    case 26:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Drivable";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "NonDrivable";
      goto LABEL_8;
    case 27:
      if (a2 >= 8u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1870;
      return v5[v4];
    case 28:
      int v11 = a2;
      int v12 = "Unknown";
      uint64_t v13 = "Water";
      goto LABEL_162;
    case 29:
      return gss::to_string(a2);
    case 30:
      return gss::to_string(a2);
    case 31:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 5u) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB18B0;
      return v5[v4];
    case 32:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Toll";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "NonToll";
      goto LABEL_8;
    case 33:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 3u) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB18D8;
      return v5[v4];
    case 34:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB18F0;
      return v5[v4];
    case 35:
      uint64_t v6 = "Unknown";
      uint64_t v14 = "Normal";
      goto LABEL_393;
    case 36:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Unpaved";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "Paved";
      goto LABEL_8;
    case 37:
      return gss::to_string(a2);
    case 38:
      return gss::to_string(a2);
    case 39:
      return gss::to_string(a2);
    case 40:
      return gss::to_string(a2);
    case 41:
      return gss::to_string(a2);
    case 42:
      if (a2 >= 4u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1908;
      return v5[v4];
    case 43:
      if (a2 >= 0xAu) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1928;
      return v5[v4];
    case 44:
      if (a2 >= 6u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1978;
      return v5[v4];
    case 45:
      return gss::to_string(a2);
    case 46:
      if (a2 >= 4u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB19A8;
      return v5[v4];
    case 47:
      return gss::to_string(a2);
    case 49:
      return gss::to_string(a2);
    case 50:
      return gss::to_string(a2);
    case 51:
      return gss::to_string(a2);
    case 52:
      return gss::to_string(a2);
    case 53:
      return gss::to_string(a2);
    case 54:
      if (a2 >= 5u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB19C8;
      return v5[v4];
    case 55:
      if (a2 >= 5u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB19F0;
      return v5[v4];
    case 56:
      if (a2 >= 5u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1A18;
      return v5[v4];
    case 57:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 4u) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1A40;
      return v5[v4];
    case 58:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 3u) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1A60;
      return v5[v4];
    case 59:
    case 63:
    case 66:
    case 67:
    case 68:
    case 70:
    case 72:
    case 73:
    case 75:
    case 95:
    case 150:
    case 151:
    case 156:
    case 164:
    case 168:
    case 170:
    case 174:
    case 176:
    case 180:
    case 184:
    case 186:
    case 189:
LABEL_5:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "True";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "False";
      goto LABEL_8;
    case 60:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1A78;
      return v5[v4];
    case 61:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "AuthorizedVehicles";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "NoRestrictions";
      goto LABEL_8;
    case 62:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "ToUndergroundLevel";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "ToGroundLevel";
      goto LABEL_8;
    case 64:
      if (a2 >= 8u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1A90;
      return v5[v4];
    case 65:
      return gss::to_string(a2);
    case 69:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Outdoor";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "Indoor";
      goto LABEL_8;
    case 71:
      return gss::to_string(a2);
    case 74:
      uint64_t v6 = "Unknown";
      uint64_t v8 = "Available";
      goto LABEL_214;
    case 76:
    case 77:
    case 86:
    case 87:
      if (a2 >= 4u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1B38;
      return v5[v4];
    case 78:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "VenueAmenity";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "TransitAccessPoint";
      goto LABEL_8;
    case 79:
      if (a2 >= 4u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1AD0;
      return v5[v4];
    case 80:
      return gss::to_string(a2);
    case 81:
      return gss::to_string(a2);
    case 82:
      return gss::to_string(a2);
    case 83:
      if (a2 >= 9u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1AF0;
      return v5[v4];
    case 84:
      uint64_t v6 = "Unknown";
      uint64_t v14 = "Summary";
      goto LABEL_393;
    case 85:
    case 169:
    case 182:
    case 183:
      return gss::to_string(a2);
    case 88:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1B58;
      return v5[v4];
    case 89:
      if (a2 >= 7u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1B70;
      return v5[v4];
    case 90:
      return gss::to_string(a2);
    case 91:
      uint64_t v6 = "Unknown";
      uint64_t v14 = "IntersectionInternal";
      goto LABEL_393;
    case 92:
      return gss::to_string(a2);
    case 93:
      return gss::to_string(a2);
    case 94:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "PeriodicOrIrregular";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "Perennial";
      goto LABEL_8;
    case 100:
      return gss::to_string(a2);
    case 101:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 5u) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1BA8;
      return v5[v4];
    case 102:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 0xAu) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1BD0;
      return v5[v4];
    case 103:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 3u) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1C20;
      return v5[v4];
    case 104:
      return gss::to_string(a2);
    case 105:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 4u) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1C38;
      return v5[v4];
    case 106:
      int v11 = a2;
      int v12 = "Unknown";
      if (a2 == 2) {
        int v12 = "Trunk";
      }
      uint64_t v13 = "Leaves";
      goto LABEL_162;
    case 107:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 7u) {
        return "Unknown";
      }
      uint64_t v4 = (char)v4;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1C58;
      return v5[v4];
    case 108:
      int v11 = a2;
      int v12 = "Unknown";
      if (a2 == 2) {
        int v12 = "Yield";
      }
      uint64_t v13 = "Stop";
      goto LABEL_162;
    case 109:
      int v11 = a2;
      int v12 = "Unknown";
      if (a2 == 2) {
        int v12 = "Support";
      }
      uint64_t v13 = "Main";
LABEL_162:
      BOOL v15 = v11 == 1;
LABEL_319:
      if (v15) {
        return v13;
      }
      else {
        return v12;
      }
    case 110:
      return gss::to_string(a2);
    case 153:
      if (a2 >= 7u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1C90;
      return v5[v4];
    case 154:
      if (a2 >= 6u) {
        return "Unknown";
      }
      uint64_t v4 = (char)a2;
      std::vector<unsigned int>::size_type v5 = off_1E5AB1CC8;
      return v5[v4];
    case 155:
      return gss::to_string(a2);
    case 157:
      if (a2 >= 5u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1CF8;
      return v10[v9];
    case 158:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1D20;
      return v10[v9];
    case 159:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1D38;
      return v10[v9];
    case 160:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1D50;
      return v10[v9];
    case 161:
      if (a2 >= 6u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1D68;
      return v10[v9];
    case 162:
      if (a2 >= 7u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1D98;
      return v10[v9];
    case 163:
      if (a2 >= 7u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1DD0;
      return v10[v9];
    case 165:
      if (a2 >= 4u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1E08;
      return v10[v9];
    case 166:
      uint64_t v6 = "Unknown";
      uint64_t v14 = "HideLabel";
LABEL_393:
      if (a2 == 1) {
        uint64_t v6 = v14;
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "None";
      goto LABEL_8;
    case 167:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Oceanic";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "Inland";
      goto LABEL_8;
    case 171:
      if (a2 >= 5u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1E28;
      return v10[v9];
    case 172:
      if (a2 >= 7u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1E50;
      return v10[v9];
    case 173:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1E88;
      return v10[v9];
    case 175:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1EA0;
      return v10[v9];
    case 177:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "Major";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "Minor";
      goto LABEL_8;
    case 178:
      return gss::to_string(a2);
    case 179:
      if (a2 >= 9u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1EB8;
      return v10[v9];
    case 181:
      uint64_t v6 = "Unknown";
      uint64_t v8 = "Offline";
      goto LABEL_214;
    case 185:
      if (a2 >= 3u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1F00;
      return v10[v9];
    case 187:
      uint64_t v6 = "Unknown";
      uint64_t v8 = "Hillshading";
      goto LABEL_214;
    case 188:
      return gss::to_string(a2);
    case 190:
      if (a2 >= 5u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1F18;
      return v10[v9];
    case 191:
      uint64_t v6 = "Unknown";
      if (a2 == 1) {
        uint64_t v6 = "TwoWay";
      }
      BOOL v7 = a2 == 0;
      uint64_t v8 = "OneWay";
      goto LABEL_8;
    case 192:
      uint64_t v6 = "Unknown";
      uint64_t v8 = "Olympics";
LABEL_214:
      BOOL v7 = a2 == 0;
LABEL_8:
      if (v7) {
        return v8;
      }
      else {
        return v6;
      }
    case 193:
      if (a2 >= 4u) {
        return "Unknown";
      }
      uint64_t v9 = (char)a2;
      unsigned int v10 = off_1E5AB1F40;
      return v10[v9];
    default:
      switch(a1)
      {
        case 65536:
          if (a2 >= 8u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB1F60;
          return v10[v9];
        case 65537:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "Night";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Day";
          goto LABEL_8;
        case 65538:
          if (a2 >= 4u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB1FA0;
          return v10[v9];
        case 65539:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "LocationGem";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Pin";
          goto LABEL_8;
        case 65540:
        case 65624:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "False";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "True";
          goto LABEL_8;
        case 65541:
          if (a2 >= 3u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB1FC0;
          return v10[v9];
        case 65542:
          return gss::to_string(a2);
        case 65543:
          if (a2 >= 3u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB1FD8;
          return v10[v9];
        case 65544:
          return gss::to_string(a2);
        case 65545:
          if (a2 >= 5u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB1FF0;
          return v10[v9];
        case 65549:
          if (a2 >= 3u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2018;
          return v10[v9];
        case 65550:
          if (a2 >= 9u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2030;
          return v10[v9];
        case 65552:
          if (a2 >= 6u) {
            return "Unknown";
          }
          goto LABEL_331;
        case 65553:
        case 65555:
        case 65561:
        case 65563:
        case 65564:
        case 65568:
        case 65569:
        case 65570:
        case 65572:
        case 65581:
        case 65582:
        case 65583:
        case 65584:
        case 65585:
        case 65591:
        case 65592:
        case 65594:
        case 65596:
        case 65601:
        case 65606:
        case 65608:
        case 65609:
        case 65622:
        case 65631:
        case 65636:
        case 65638:
        case 65639:
        case 65640:
        case 65641:
        case 65642:
        case 65644:
        case 65647:
        case 65651:
        case 65652:
        case 65659:
        case 65663:
        case 65664:
        case 65667:
          goto LABEL_5;
        case 65554:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "Closed";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Open";
          goto LABEL_8;
        case 65556:
          if (a2 >= 3u) {
            return "Unknown";
          }
          goto LABEL_333;
        case 65557:
          if (a2 >= 4u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2078;
          return v10[v9];
        case 65558:
          if (a2 >= 4u) {
            return "Unknown";
          }
          goto LABEL_309;
        case 65559:
          if (a2 >= 3u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2098;
          return v10[v9];
        case 65560:
          if (a2 >= 4u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB20B0;
          return v10[v9];
        case 65562:
          if (a2 >= 4u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB20D0;
          return v10[v9];
        case 65565:
          if (a2 >= 8u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB20F0;
          return v10[v9];
        case 65566:
        case 65575:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 8u) {
            return "Unknown";
          }
          goto LABEL_17;
        case 65567:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 3u) {
            return "Unknown";
          }
          uint64_t v9 = (char)v9;
          unsigned int v10 = off_1E5AB2130;
          return v10[v9];
        case 65571:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 7u) {
            return "Unknown";
          }
          uint64_t v9 = (char)v9;
          unsigned int v10 = off_1E5AB2148;
          return v10[v9];
        case 65573:
          if (a2 >= 3u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2180;
          return v10[v9];
        case 65574:
          return gss::to_string(a2);
        case 65576:
          if (a2 >= 5u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2198;
          return v10[v9];
        case 65577:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "Complex";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Simple";
          goto LABEL_8;
        case 65578:
          if (a2 >= 6u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB21C0;
          return v10[v9];
        case 65579:
          if (a2 >= 6u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB21F0;
          return v10[v9];
        case 65580:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 4u) {
            return "Unknown";
          }
          uint64_t v9 = (char)v9;
          unsigned int v10 = off_1E5AB2220;
          return v10[v9];
        case 65586:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 9u) {
            return "Unknown";
          }
          uint64_t v9 = (char)v9;
          unsigned int v10 = off_1E5AB2240;
          return v10[v9];
        case 65587:
          if (a2 >= 5u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2288;
          return v10[v9];
        case 65588:
          if (a2 >= 4u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB22B0;
          return v10[v9];
        case 65589:
          if (a2 >= 9u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB22D0;
          return v10[v9];
        case 65590:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "HighZoom";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "LowZoom";
          goto LABEL_8;
        case 65593:
          return gss::to_string(a2);
        case 65595:
          if (a2 >= 3u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2318;
          return v10[v9];
        case 65597:
          if (a2 >= 3u) {
            return "Unknown";
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2330;
          return v10[v9];
        case 65598:
        case 65629:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 8u) {
            goto LABEL_399;
          }
LABEL_17:
          uint64_t v9 = (char)v9;
          unsigned int v10 = off_1E5AB2540;
          return v10[v9];
        case 65599:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2348;
          return v10[v9];
        case 65600:
          int v16 = a2;
          int v12 = "Unknown";
          if (a2 == 1) {
            int v12 = "Confirmed";
          }
          uint64_t v13 = "Unconfirmed";
          goto LABEL_318;
        case 65602:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 7u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)v9;
          unsigned int v10 = off_1E5AB2360;
          return v10[v9];
        case 65603:
          uint64_t v6 = "Unknown";
          uint64_t v14 = "Dragging";
          goto LABEL_393;
        case 65604:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "PlaceholderForMissingFloor";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "OnCorrectFloor";
          goto LABEL_8;
        case 65605:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2398;
          return v10[v9];
        case 65607:
          if (a2 >= 4u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB23B0;
          return v10[v9];
        case 65610:
          if (a2 >= 4u) {
            goto LABEL_399;
          }
LABEL_309:
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB23D0;
          return v10[v9];
        case 65611:
          return gss::to_string(a2);
        case 65612:
          return gss::to_string(a2);
        case 65613:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "Focused";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Unfocused";
          goto LABEL_8;
        case 65614:
          int v16 = a2;
          int v12 = "Unknown";
          if (a2 == 1) {
            int v12 = "StopSign";
          }
          uint64_t v13 = "StopLight";
LABEL_318:
          BOOL v15 = v16 == 2;
          goto LABEL_319;
        case 65615:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB23F0;
          return v10[v9];
        case 65616:
          if (a2 >= 7u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2408;
          return v10[v9];
        case 65617:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "Elevated";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Flat";
          goto LABEL_8;
        case 65618:
          return gss::to_string(a2);
        case 65619:
          if (a2 >= 6u) {
            goto LABEL_399;
          }
LABEL_331:
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2440;
          return v10[v9];
        case 65620:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
LABEL_333:
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2470;
          return v10[v9];
        case 65621:
        case 65633:
          if (a2 >= 0xAu) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB25C0;
          return v10[v9];
        case 65623:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2488;
          return v10[v9];
        case 65625:
          if (a2 >= 4u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB24A0;
          return v10[v9];
        case 65626:
          if (a2 >= 5u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB24C0;
          return v10[v9];
        case 65627:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)v9;
          unsigned int v10 = off_1E5AB24E8;
          return v10[v9];
        case 65628:
          if (a2 >= 8u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2500;
          return v10[v9];
        case 65630:
          if (a2 >= 5u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2580;
          return v10[v9];
        case 65632:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB25A8;
          return v10[v9];
        case 65634:
          return gss::to_string(a2);
        case 65635:
          if (a2 >= 5u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2610;
          return v10[v9];
        case 65637:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2638;
          return v10[v9];
        case 65643:
          return gss::to_string(a2);
        case 65645:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "FacePerpendicular";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "FaceAligned";
          goto LABEL_8;
        case 65646:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "Address";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Storefront";
          goto LABEL_8;
        case 65648:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "TopDown";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Pitched";
          goto LABEL_8;
        case 65649:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "MapKit";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Maps";
          goto LABEL_8;
        case 65650:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2650;
          return v10[v9];
        case 65653:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2668;
          return v10[v9];
        case 65654:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2680;
          return v10[v9];
        case 65655:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2698;
          return v10[v9];
        case 65656:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB26B0;
          return v10[v9];
        case 65657:
          if (a2 >= 3u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB26C8;
          return v10[v9];
        case 65660:
          if (a2 >= 5u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB26E0;
          return v10[v9];
        case 65661:
          if (a2 >= 4u) {
            goto LABEL_399;
          }
          uint64_t v9 = (char)a2;
          unsigned int v10 = off_1E5AB2708;
          return v10[v9];
        case 65662:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "Wind";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Standard";
          goto LABEL_8;
        case 65666:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "NonInteractive";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Interactive";
          goto LABEL_8;
        case 65668:
          uint64_t v6 = "Unknown";
          if (a2 == 1) {
            uint64_t v6 = "RouteCreation";
          }
          BOOL v7 = a2 == 0;
          uint64_t v8 = "Default";
          goto LABEL_8;
        case 65669:
          LOBYTE(v4) = a2 - 1;
          if ((a2 - 1) < 4u)
          {
            uint64_t v4 = (char)v4;
            std::vector<unsigned int>::size_type v5 = off_1E5AB2728;
            return v5[v4];
          }
LABEL_399:
          BOOL result = "Unknown";
          break;
        case 65670:
          uint64_t v6 = "Unknown";
          uint64_t v14 = "TurnAround";
          goto LABEL_393;
        default:
          return result;
      }
      return result;
  }
}

void *gss::defaultValueForKey<gss::ScenePropertyID,BOOL>()
{
  return &gss::defaultValueForKey<gss::ScenePropertyID,BOOL>(gss::ScenePropertyID)::_defaultValue;
}

void *gss::defaultValueForKey<gss::ScenePropertyID,float>(int a1)
{
  if ((a1 - 57) > 4) {
    return &gss::defaultValueForKey<gss::ScenePropertyID,float>(gss::ScenePropertyID)::_defaultValue;
  }
  else {
    return *(&off_1E5AB2748 + (char)(a1 - 57));
  }
}

void *gss::defaultValueForKey<gss::ScenePropertyID,unsigned char>()
{
  return &gss::defaultValueForKey<gss::ScenePropertyID,unsigned char>(gss::ScenePropertyID)::_defaultValue;
}

void *gss::defaultValueForKey<gss::ScenePropertyID,int>(int a1)
{
  uint64_t v1 = &gss::defaultValueForKey<gss::ScenePropertyID,int>(gss::ScenePropertyID)::_defaultValue;
  if (a1 == 66) {
    uint64_t v1 = &gss::defaultValueForKey<gss::ScenePropertyID,int>(gss::ScenePropertyID)::kDefaultCurrentRoadSignOffset;
  }
  if (a1 == 10) {
    return &gss::defaultValueForKey<gss::ScenePropertyID,int>(gss::ScenePropertyID)::kDefaultSecondaryLightAngleAltitude;
  }
  else {
    return v1;
  }
}

void *gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(unsigned int a1)
{
  if (a1 > 8) {
    return &gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(gss::ScenePropertyID)::_defaultValue;
  }
  else {
    return *(&off_1E5AB2770 + (char)a1);
  }
}

uint64_t *gss::defaultValueForKey<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB34D328))
  {
    float32x4_t v1 = (float32x4_t)xmmword_1A28FCDD0;
    geo::_wordColor<float,4,(geo::ColorSpace)0>(&v1, (int16x4_t *)&v2);
    _MergedGlobals_1 = v2;
    __cxa_guard_release(&qword_1EB34D328);
  }
  return &_MergedGlobals_1;
}

void sub_1A28285A8(_Unwind_Exception *a1)
{
}

void *gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>()
{
  return &gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>(gss::ScenePropertyID)::_defaultValue;
}

void *gss::defaultValueForKey<gss::ScenePropertyID,std::string>()
{
  return &gss::defaultValueForKey<gss::ScenePropertyID,std::string>(gss::ScenePropertyID)::_defaultValue;
}

uint64_t gss::attributesToString@<X0>(uint64_t *a1@<X0>, int a2@<W1>, char *a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v47);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v42);
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v41 = 0;
  if (a3) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, v9);
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  if (v10 != *a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = ((v10 - *a1) >> 3) - 1;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, "");
      if (SHIBYTE(v45) < 0) {
        operator delete((void *)__p);
      }
      long long __p = *(_OWORD *)__dst;
      unint64_t v45 = v36;
      HIBYTE(v36) = 0;
      LOBYTE(__dst[0]) = 0;
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v43);
      if (SHIBYTE(v36) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"=", 1);
      std::ostream::operator<<();
      if (a2)
      {
        BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)" (", 2);
        int v16 = gss::to_string(*(_DWORD *)v11);
        size_t v17 = strlen(v16);
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"=", 1);
        uint64_t v20 = gss::to_string(*(_DWORD *)v11, *(_WORD *)(v11 + 4));
        size_t v21 = strlen(v20);
        long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
      }
      BOOL v24 = v13-- != 0;
      if (a4 && v24) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)",", 1);
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v43);
      if (SHIBYTE(v41) < 0) {
        operator delete(v40[0]);
      }
      uint64_t v41 = v36;
      *(_OWORD *)uint64_t v40 = *(_OWORD *)__dst;
      uint64_t v25 = (void *)HIBYTE(v36);
      if ((v36 & 0x8000000000000000) != 0) {
        uint64_t v25 = __dst[1];
      }
      if ((unint64_t)v25 + v12 >= a4) {
        break;
      }
      if (!v12) {
        goto LABEL_26;
      }
LABEL_37:
      if (v41 >= 0) {
        uint64_t v28 = v40;
      }
      else {
        uint64_t v28 = (void **)v40[0];
      }
      if (v41 >= 0) {
        uint64_t v29 = HIBYTE(v41);
      }
      else {
        uint64_t v29 = (uint64_t)v40[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)v28, v29);
      unint64_t v30 = HIBYTE(v41);
      if (v41 < 0) {
        unint64_t v30 = (unint64_t)v40[1];
      }
      v12 += v30;
      v11 += 8;
      if (v11 == v10) {
        goto LABEL_46;
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"\n", 1);
LABEL_26:
    if ((v39 & 0x80u) == 0) {
      uint64_t v26 = v39;
    }
    else {
      uint64_t v26 = v38;
    }
    if (v26)
    {
      if ((v39 & 0x80u) == 0) {
        unint64_t v27 = &v37;
      }
      else {
        unint64_t v27 = v37;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)v27, v26);
      if ((char)v39 < 0) {
        uint64_t v12 = v38;
      }
      else {
        uint64_t v12 = v39;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    goto LABEL_37;
  }
LABEL_46:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a5, (uint64_t)v48);
  if ((char)v39 < 0) {
    operator delete(v37);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  uint64_t v42 = *MEMORY[0x1E4FBA418];
  uint64_t v31 = v42;
  uint64_t v32 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)((char *)&v43[-1] + *(void *)(v42 - 24)) = v32;
  v43[0] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](&v46);
  uint64_t v47 = v31;
  *(void *)((char *)&v48[-1] + *(void *)(v31 - 24)) = v32;
  v48[0] = MEMORY[0x1E4FBA470] + 16;
  if (v49 < 0) {
    operator delete((void *)v48[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v50);
}

void sub_1A2828A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::ostringstream::~ostringstream((uint64_t)&a29);
  std::ostringstream::~ostringstream((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  std::vector<unsigned int>::size_type v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1A2828C2C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](v1);
  _Unwind_Resume(a1);
}

uint64_t gss::attributesToString@<X0>(gss::Allocator *a1@<X0>, int a2@<W1>, char *a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *((void *)a1 + 1);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  uint64_t v17 = gss::Allocator::instance(a1);
  uint64_t v18 = &v14;
  char v19 = 0;
  if (v10 != v9)
  {
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__vallocate[abi:ne180100]((uint64_t)&v14, (v10 - v9) >> 3);
    uint64_t v11 = 0;
    uint64_t v12 = v15;
    do
    {
      if (v12 + v11) {
        *(void *)(v12 + v11) = *(void *)(v9 + v11);
      }
      v11 += 8;
    }
    while (v9 + v11 != v10);
    uint64_t v15 = v12 + v11;
  }
  uint64_t result = gss::attributesToString(&v14, a2, a3, a4, a5);
  if (v14)
  {
    uint64_t v15 = v14;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 40))(v17, v14, v16 - v14);
  }
  return result;
}

void sub_1A2828D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    std::allocator_traits<geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::deallocate[abi:ne180100](a1 + 3, v2, (a1[2] - v2) >> 3);
  }
  return a1;
}

uint64_t gss::attributesToString@<X0>(unsigned __int16 *a1@<X0>, int a2@<W1>, char *a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  int v10 = a1[5];
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  uint64_t v24 = gss::Allocator::instance((gss::Allocator *)a1);
  if (v10)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      ++v11;
      if (v12 + 1 < a1[5]) {
        ++v12;
      }
      else {
        int v12 = a1[5];
      }
    }
    while (v12 != v10);
    uint64_t v25 = &v21;
    char v26 = 0;
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__vallocate[abi:ne180100]((uint64_t)&v21, v11);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unsigned int v16 = 0;
    uint64_t v17 = v22;
    unsigned int v18 = a1[5];
    do
    {
      if (v16 < v18)
      {
        uint64_t v15 = (_DWORD *)(*(void *)a1 + 4 * v16);
        uint64_t v13 = (_WORD *)(*(void *)a1 + a1[4] + 2 * v16);
      }
      uint64_t v19 = v17 + v14;
      if (v17 + v14)
      {
        *(_DWORD *)uint64_t v19 = *v15;
        *(_WORD *)(v19 + 4) = *v13;
      }
      if (v16 + 1 < v18) {
        ++v16;
      }
      else {
        unsigned int v16 = v18;
      }
      v14 += 8;
    }
    while (v16 != v10);
    uint64_t v22 = v17 + v14;
  }
  uint64_t result = gss::attributesToString(&v21, a2, a3, a4, a5);
  if (v21)
  {
    uint64_t v22 = v21;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 40))(v24, v21, v23 - v21);
  }
  return result;
}

void sub_1A2828F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    v1[1] = v2;
    return (uint64_t **)std::allocator_traits<geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::deallocate[abi:ne180100](v1 + 3, v2, (v1[2] - v2) >> 3);
  }
  return result;
}

uint64_t std::allocator_traits<geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2, 8 * a3);
}

void *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(void *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  int v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a2 + 88);
    unint64_t v6 = *(void *)(a2 + 48);
    if (v5 < v6)
    {
      *(void *)(a2 + 88) = v6;
      unint64_t v5 = v6;
    }
    BOOL v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      size_t v4 = 0;
      *((unsigned char *)__dst + 23) = 0;
      goto LABEL_16;
    }
    BOOL v7 = (const void **)(a2 + 16);
    unint64_t v5 = *(void *)(a2 + 32);
  }
  uint64_t v8 = *v7;
  size_t v4 = v5 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    void *v2 = v11;
    uint64_t v2 = v11;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    if (!v4) {
      goto LABEL_16;
    }
  }
  long long __dst = memmove(v2, v8, v4);
LABEL_16:
  *((unsigned char *)v2 + v4) = 0;
  return __dst;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v10 = 0;
      unsigned int v11 = *(_DWORD *)a2;
      uint64_t v12 = -a4;
      while (1)
      {
        unsigned int v13 = *(_DWORD *)((char *)v10 + (void)result);
        if (v11 < v13) {
          break;
        }
        v10 += 2;
        BOOL v48 = __CFADD__(v12++, 1);
        if (v48) {
          return result;
        }
      }
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          uint64_t v58 = (uint64_t)v10 + (void)result;
          *(_DWORD *)uint64_t v58 = v11;
          *(_DWORD *)a2 = v13;
          __int16 v59 = *(_WORD *)(v58 + 4);
          *(_WORD *)(v58 + 4) = *((_WORD *)a2 + 2);
          *((_WORD *)a2 + 2) = v59;
          return result;
        }
        if (v12 <= 0) {
          uint64_t v24 = -v12;
        }
        else {
          uint64_t v24 = 1 - v12;
        }
        uint64_t v23 = v24 >> 1;
        uint64_t v17 = &result[8 * (v24 >> 1) + (void)v10];
        unsigned int v16 = a2;
        if (a2 != a3)
        {
          unint64_t v25 = (a3 - a2) >> 3;
          unsigned int v16 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            unint64_t v27 = &v16[8 * (v25 >> 1)];
            unsigned int v29 = *(_DWORD *)v27;
            uint64_t v28 = v27 + 8;
            v25 += ~(v25 >> 1);
            if (v29 < *(_DWORD *)v17) {
              unsigned int v16 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v15 = (v16 - a2) >> 3;
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v14 = a5;
        }
        else {
          uint64_t v14 = a5 + 1;
        }
        uint64_t v15 = v14 >> 1;
        unsigned int v16 = &a2[8 * (v14 >> 1)];
        uint64_t v17 = a2;
        if ((_DWORD *)(a2 - result) != v10)
        {
          unint64_t v18 = (a2 - result - (uint64_t)v10) >> 3;
          uint64_t v17 = (char *)v10 + (void)result;
          do
          {
            unint64_t v19 = v18 >> 1;
            uint64_t v20 = &v17[8 * (v18 >> 1)];
            unsigned int v22 = *(_DWORD *)v20;
            uint64_t v21 = v20 + 8;
            v18 += ~(v18 >> 1);
            if (*(_DWORD *)v16 < v22) {
              unint64_t v18 = v19;
            }
            else {
              uint64_t v17 = v21;
            }
          }
          while (v18);
        }
        uint64_t v23 = (v17 - result - (uint64_t)v10) >> 3;
      }
      if (v17 == a2)
      {
        uint64_t v32 = v16;
      }
      else if (v16 == a2)
      {
        uint64_t v32 = v17;
      }
      else
      {
        int v30 = *(_DWORD *)v17;
        *(_DWORD *)uint64_t v17 = v11;
        *(_DWORD *)a2 = v30;
        __int16 v31 = *((_WORD *)v17 + 2);
        *((_WORD *)v17 + 2) = *((_WORD *)a2 + 2);
        *((_WORD *)a2 + 2) = v31;
        uint64_t v32 = v17 + 8;
        for (unint64_t i = a2 + 8; i != v16; i += 8)
        {
          if (v32 == a2) {
            a2 = i;
          }
          int v34 = *(_DWORD *)v32;
          *(_DWORD *)uint64_t v32 = *(_DWORD *)i;
          *(_DWORD *)unint64_t i = v34;
          LOWORD(v34) = *((_WORD *)v32 + 2);
          *((_WORD *)v32 + 2) = *((_WORD *)i + 2);
          *((_WORD *)i + 2) = v34;
          v32 += 8;
        }
        if (v32 != a2)
        {
          char v35 = v32;
          unint64_t v36 = a2;
          do
          {
            while (1)
            {
              int v37 = *(_DWORD *)v35;
              *(_DWORD *)char v35 = *(_DWORD *)v36;
              *(_DWORD *)unint64_t v36 = v37;
              LOWORD(v37) = *((_WORD *)v35 + 2);
              *((_WORD *)v35 + 2) = *((_WORD *)v36 + 2);
              *((_WORD *)v36 + 2) = v37;
              v35 += 8;
              v36 += 8;
              if (v36 == v16) {
                break;
              }
              if (v35 == a2) {
                a2 = v36;
              }
            }
            unint64_t v36 = a2;
          }
          while (v35 != a2);
        }
      }
      a4 = -(v23 + v12);
      uint64_t v38 = a5 - v15;
      if (v23 + v15 >= a5 - (v23 + v15) - v12)
      {
        uint64_t v41 = v16;
        uint64_t v42 = (char *)v10 + (void)result;
        std::__inplace_merge<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(v32, v41, a3, a4, a5 - v15, a6, a7);
        uint64_t result = v42;
        a2 = v17;
        uint64_t v38 = v15;
        a4 = v23;
        a3 = v32;
      }
      else
      {
        unsigned __int8 v39 = v17;
        uint64_t v40 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>((char *)v10 + (void)result, v39, v32, v23, v15, a6, a7);
        a3 = v40;
        uint64_t result = v32;
        a2 = v16;
      }
      a5 = v38;
      if (!v38) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        uint64_t v51 = 0;
        do
        {
          *(void *)&a6[v51] = *(void *)&result[v51];
          v51 += 8;
        }
        while (&result[v51] != a2);
        if (v51)
        {
          long long v52 = &a6[v51];
          uint64_t v53 = (uint64_t)&a6[v51 - 8];
          while (a2 != a3)
          {
            unsigned int v54 = *(_DWORD *)a2;
            BOOL v55 = *(_DWORD *)a2 >= *(_DWORD *)a6;
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
            {
              unint64_t v56 = a2;
            }
            else
            {
              unsigned int v54 = *(_DWORD *)a6;
              unint64_t v56 = a6;
            }
            if (*(_DWORD *)a2 < *(_DWORD *)a6) {
              a2 += 8;
            }
            __int16 v57 = *((_WORD *)v56 + 2);
            if (v55) {
              a6 += 8;
            }
            *(_DWORD *)uint64_t result = v54;
            *((_WORD *)result + 2) = v57;
            result += 8;
            if (v52 == a6) {
              return result;
            }
          }
          uint64_t v62 = 0;
          do
          {
            long long v63 = &result[v62];
            uint64_t v64 = &a6[v62];
            *(_DWORD *)long long v63 = *(_DWORD *)&a6[v62];
            *((_WORD *)v63 + 2) = *(_WORD *)&a6[v62 + 4];
            v62 += 8;
          }
          while ((char *)v53 != v64);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v43 = 0;
      do
      {
        *(void *)&a6[v43] = *(void *)&a2[v43];
        v43 += 8;
      }
      while (&a2[v43] != a3);
      if (v43)
      {
        long long v44 = &a6[v43];
        unint64_t v45 = a3 - 4;
        while (a2 != result)
        {
          unsigned int v46 = *((_DWORD *)a2 - 2);
          unsigned int v47 = *((_DWORD *)v44 - 2);
          BOOL v48 = v47 >= v46;
          if (v47 < v46)
          {
            char v49 = a2;
          }
          else
          {
            unsigned int v46 = *((_DWORD *)v44 - 2);
            char v49 = v44;
          }
          if (!v48) {
            a2 -= 8;
          }
          __int16 v50 = *((_WORD *)v49 - 2);
          if (v48) {
            v44 -= 8;
          }
          *((_DWORD *)v45 - 1) = v46;
          *(_WORD *)unint64_t v45 = v50;
          v45 -= 8;
          if (v44 == a6) {
            return result;
          }
        }
        unint64_t v60 = 0;
        do
        {
          long long v61 = &v45[v60];
          *((_DWORD *)v61 - 1) = *(_DWORD *)&v44[v60 - 8];
          *(_WORD *)long long v61 = *(_WORD *)&v44[v60 - 4];
          v60 -= 8;
        }
        while (&v44[v60] != a6);
      }
    }
  }
  return result;
}

void sub_1A282957C(_Unwind_Exception *a1)
{
  geo::read_write_lock::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A28296B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1A28299A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void geo::read_write_lock::write_lock(pthread_rwlock_t *this)
{
  uint64_t v1 = (geo::read_write_lock *)pthread_rwlock_wrlock(this);
  if (v1)
  {
    geo::read_write_lock::logFailure(v1, (uint64_t)"write lock", v2);
  }
}

void geo::BasicAllocationTracker::debugInfo(geo::BasicAllocationTracker *this, os_log_t oslog)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = *(void *)this;
    int v6 = 136315138;
    unint64_t v7 = v4;
    _os_log_impl(&dword_1A1780000, oslog, OS_LOG_TYPE_INFO, "BasicAllocationTracker(%s)", (uint8_t *)&v6, 0xCu);
  }
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_INFO))
  {
    unint64_t v5 = atomic_load((unint64_t *)this + 2);
    int v6 = 134217984;
    unint64_t v7 = v5;
    _os_log_impl(&dword_1A1780000, oslog, OS_LOG_TYPE_INFO, "\tCount: %zu", (uint8_t *)&v6, 0xCu);
  }
}

long long *gss::defaultValueForKey<gss::PropertyID,gss::DashPattern>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D500, memory_order_acquire) & 1) == 0)
  {
    uint64_t v1 = (gss::DashPattern *)__cxa_guard_acquire(&qword_1EB34D500);
    if (v1)
    {
      qword_1EB34D528 = 0;
      *(_OWORD *)&qword_1EB34D518 = 0u;
      xmmword_1EB34D508 = 0u;
      gss::DashPattern::DashPattern(v1);
      __cxa_atexit((void (*)(void *))gss::DashPattern::~DashPattern, &xmmword_1EB34D508, &dword_1A1780000);
      __cxa_guard_release(&qword_1EB34D500);
    }
  }
  return &xmmword_1EB34D508;
}

uint64_t gss::DashPattern::DashPattern(gss::DashPattern *this)
{
  xmmword_1EB34D508 = 0uLL;
  qword_1EB34D518 = 0;
  uint64_t result = gss::Allocator::instance(this);
  qword_1EB34D520 = result;
  return result;
}

uint64_t gss::animationCurveDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 4u, a4, a6);
}

uint64_t gss::polygonTypeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 3u, a4, a6);
}

uint64_t gss::railroadPatternDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::lineDrawStyleDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::blendModeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 0x1Bu, a4, a6);
}

uint64_t gss::labelEasingFunctionDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 5u, a4, a6);
}

uint64_t gss::labelSizingModeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::transitPlacementDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::grlIconSizeGroupDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 9u, a4, a6);
}

uint64_t gss::labelUnitStyleDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 4u, a4, a6);
}

uint64_t gss::maskTargetDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::unknownPropertyDecoder<gss::PropertyID>()
{
  return 1;
}

void std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56BB18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56BB18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t gss::FeatureAttributeSet::isSuperset(gss::FeatureAttributeSet *this, const gss::FeatureAttributeSet *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v4 = *(unsigned int **)a2;
  uint64_t v3 = (int *)*((void *)a2 + 1);
  if (*((void *)this + 1) - *(void *)this < (unint64_t)v3 - *(void *)a2) {
    return 0;
  }
  if (v4 != (unsigned int *)v3)
  {
    int v6 = 0;
    uint64_t result = 1;
    while (1)
    {
      unsigned int v7 = *v4;
      uint64_t v8 = v6;
      unsigned int v9 = *(_DWORD *)(v2 + 8 * v6);
      if (v9 > *v4) {
        return 0;
      }
      if (v9 != v7)
      {
        do
        {
          uint64_t v8 = ++v6;
          unsigned int v10 = *(_DWORD *)(v2 + 8 * v6);
          if (v10 > v7) {
            return 0;
          }
        }
        while (v10 != v7);
      }
      if (*((unsigned __int16 *)v4 + 2) != *(unsigned __int16 *)(v2 + 8 * v8 + 4)) {
        return 0;
      }
      ++v6;
      v4 += 2;
      if (v4 == (unsigned int *)v3) {
        return result;
      }
    }
  }
  return 1;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(a2 - 2) = v7;
        __int16 v8 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)a1, (unsigned int *)(a1 + 8), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(a1, a1 + 8, a1 + 16, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(a1, a1 + 8, a1 + 16, a1 + 24);
      unsigned int v18 = *(a2 - 2);
      unsigned int v19 = *(_DWORD *)(a1 + 24);
      if (v18 < v19)
      {
        *(_DWORD *)(a1 + 24) = v18;
        *(a2 - 2) = v19;
        __int16 v20 = *(_WORD *)(a1 + 28);
        *(_WORD *)(a1 + 28) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v20;
        unsigned int v21 = *(_DWORD *)(a1 + 24);
        unsigned int v22 = *(_DWORD *)(a1 + 16);
        if (v21 < v22)
        {
          *(_DWORD *)(a1 + 16) = v21;
          *(_DWORD *)(a1 + 24) = v22;
          __int16 v23 = *(_WORD *)(a1 + 20);
          __int16 v24 = *(_WORD *)(a1 + 28);
          *(_WORD *)(a1 + 20) = v24;
          *(_WORD *)(a1 + 28) = v23;
          unsigned int v25 = *(_DWORD *)(a1 + 8);
          if (v21 < v25)
          {
            *(_DWORD *)(a1 + 8) = v21;
            *(_DWORD *)(a1 + 16) = v25;
            __int16 v26 = *(_WORD *)(a1 + 12);
            *(_WORD *)(a1 + 12) = v24;
            *(_WORD *)(a1 + 20) = v26;
            unsigned int v27 = *(_DWORD *)a1;
            if (v21 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v21;
              *(_DWORD *)(a1 + 8) = v27;
              __int16 v28 = *(_WORD *)(a1 + 4);
              *(_WORD *)(a1 + 4) = v24;
              *(_WORD *)(a1 + 12) = v28;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v9 = (unsigned int *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16));
      unsigned int v10 = (unsigned int *)(a1 + 24);
      if ((unsigned int *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *v9;
    if (*v10 < *v9)
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_DWORD *)(v16 + 24) = v13;
        *(_WORD *)(v16 + 28) = *(_WORD *)(a1 + v15 + 20);
        if (v15 == -16) {
          break;
        }
        unsigned int v13 = *(_DWORD *)(v16 + 8);
        v15 -= 8;
        if (v13 <= v14)
        {
          uint64_t v17 = a1 + v15 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v17 = v14;
      *(_WORD *)(v17 + 4) = WORD2(v14);
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t gss::unknownPropertyDecoder<gss::ScenePropertyID>()
{
  return 1;
}

void std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF56BB70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56BB70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::target_type()
{
}

void grl::getSize(float *a1, void *a2)
{
  if (*a2 && ((*(uint64_t (**)(void))(*(void *)*a2 + 40))(*a2) & 1) != 0)
  {
    float v4 = (float)(*(unsigned int (**)(void))(*(void *)*a2 + 24))();
    float v5 = (float)(*(unsigned int (**)(void))(*(void *)*a2 + 32))();
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    unsigned int v6 = GEOGetGeoResourceLibEaselLog::log;
    float v4 = 0.0;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v7 = 0;
      _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_ERROR, "Input image must be a non-nullptr to get a size.", v7, 2u);
    }
    float v5 = 0.0;
  }
  *a1 = v4;
  a1[1] = v5;
}

void grl::createColorizedImage(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v8 = *a1;
  if (!v8 || ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    unsigned int v22 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    __int16 v23 = "Input image must be a non-nullptr to create a colorized image.";
    goto LABEL_24;
  }
  if (!(*(unsigned int (**)(void))(*(void *)*a1 + 24))() || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))())
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    unsigned int v22 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    __int16 v23 = "Input image must have a non-zero size to create a colorized image.";
LABEL_24:
    _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_ERROR, v23, buf, 2u);
LABEL_25:
    *a6 = 0;
    a6[1] = 0;
    return;
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)*a1 + 48))(buf);
  uint64_t v14 = *(void *)buf;
  unsigned int v13 = v36;
  uint64_t v38 = *(void *)buf;
  unsigned __int8 v39 = v36;
  if (v36)
  {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
  }
  if (v14 && ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14) & 1) != 0)
  {
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))();
    uint64_t v17 = (std::__shared_weak_count *)operator new(0x28uLL);
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
    unsigned int v18 = v17 + 1;
    __n128 v19 = esl::QuartzContext::QuartzContext(&v17[1], 3, v15, v16);
    if (((uint64_t (*)(__n128))v17[1].__get_deleter)(v19))
    {
      esl::QuartzColor::QuartzColor(buf, a2);
      esl::QuartzColor::QuartzColor(v33, a3);
      if (esl::QuartzColor::isValid((esl::QuartzColor *)buf) && esl::QuartzColor::isValid((esl::QuartzColor *)v33))
      {
        float v20 = (float)(*(unsigned int (**)(void))(*(void *)*a1 + 24))();
        unsigned int v21 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))();
        *(void *)int v30 = 0;
        float v31 = v20;
        float v32 = (float)v21;
        ((void (*)(std::__shared_weak_count *, uint8_t *, uint64_t *, void))v18->__vftable[7].~__shared_weak_count)(v18, v30, &v38, 0);
        ((void (*)(std::__shared_weak_count *, uint8_t *, uint64_t, void *, uint64_t))v18->__vftable[8].__on_zero_shared_weak)(v18, buf, a4, v33, a5);
        ((void (*)(long long *__return_ptr, std::__shared_weak_count *))v18->__vftable[9].__on_zero_shared_weak)(&v29, v18);
        if (void)v29 && ((*(uint64_t (**)(void))(*(void *)v29 + 40))(v29))
        {
          *(_OWORD *)a6 = v29;
        }
        else
        {
          if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
          }
          unsigned int v27 = GEOGetGeoResourceLibEaselLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int16 v28 = 0;
            _os_log_impl(&dword_1A1780000, v27, OS_LOG_TYPE_ERROR, "Failed to generate an image from a colorized context.", v28, 2u);
          }
          *a6 = 0;
          a6[1] = 0;
          if (*((void *)&v29 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
          }
        }
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
        }
        __int16 v26 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v30 = 0;
          _os_log_impl(&dword_1A1780000, v26, OS_LOG_TYPE_ERROR, "Failed to create gradient color to create colorized image.", v30, 2u);
        }
        *a6 = 0;
        a6[1] = 0;
      }
      v33[0] = &unk_1EF554AE8;
      v33[1] = &unk_1EF5590F8;
      if (cf) {
        CFRelease(cf);
      }
      *(void *)buf = &unk_1EF554AE8;
      unint64_t v36 = (std::__shared_weak_count *)&unk_1EF5590F8;
      if (v37) {
        CFRelease(v37);
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      unsigned int v25 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A1780000, v25, OS_LOG_TYPE_ERROR, "Failed to create a context to draw a colorized image into.", buf, 2u);
      }
      *a6 = 0;
      a6[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    unsigned int v13 = v39;
    if (v39) {
LABEL_48:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    __int16 v24 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_ERROR, "Failed to create a grayscale version of an image, to be used to colorize an image.", buf, 2u);
    }
    *a6 = 0;
    a6[1] = 0;
    if (v13) {
      goto LABEL_48;
    }
  }
}

void grl::createHaloImage(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, float a4@<S0>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  if (!v6 || ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    __n128 v19 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_WORD *)buf = 0;
    float v20 = "Input image must be a non-nullptr to create a halo image.";
LABEL_26:
    _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, v20, buf, 2u);
    goto LABEL_27;
  }
  if (!(*(unsigned int (**)(void))(*(void *)*a1 + 24))()
    || (unsigned int v9 = (grl::HaloGenerator *)(*(uint64_t (**)(void))(*(void *)*a1 + 32))(), !v9))
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    __n128 v19 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_WORD *)buf = 0;
    float v20 = "Input image must have a non-zero size to create a halo image.";
    goto LABEL_26;
  }
  if (a4 <= 0.0)
  {
LABEL_27:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  grl::HaloGenerator::sharedHaloGenerator(v9);
  unsigned int v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v30 = *a1;
  float v31 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  grl::HaloGenerator::generateHalo(&v30, &v32, a4);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v32 && ((*(uint64_t (**)(uint64_t))(*(void *)v32 + 40))(v32) & 1) != 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 32))(v32);
    unsigned int v13 = (std::__shared_weak_count *)operator new(0x28uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
    uint64_t v14 = v13 + 1;
    __n128 v15 = esl::QuartzContext::QuartzContext(&v13[1], 3, v11, v12);
    if (((uint64_t (*)(__n128))v13[1].__get_deleter)(v15))
    {
      float v16 = (float)((unsigned int (*)(std::__shared_weak_count *))v14->__vftable[2].__on_zero_shared_weak)(v14);
      unsigned int v17 = ((uint64_t (*)(std::__shared_weak_count *))v14->__vftable[3].~__shared_weak_count)(v14);
      uint64_t v27 = 0;
      float v28 = v16;
      float v29 = (float)v17;
      esl::QuartzColor::QuartzColor(buf, a2);
      if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
      {
        ((void (*)(std::__shared_weak_count *))v14->__vftable[10].~__shared_weak_count_0)(v14);
        ((void (*)(std::__shared_weak_count *, uint64_t *, uint64_t *, void))v14->__vftable[7].~__shared_weak_count)(v14, &v27, &v32, 0);
        ((void (*)(std::__shared_weak_count *, unsigned char *))v14->__vftable[5].__on_zero_shared_weak)(v14, buf);
        ((void (*)(std::__shared_weak_count *, uint64_t *, void))v14->__vftable[6].__on_zero_shared)(v14, &v27, 0);
        ((void (*)(std::__shared_weak_count *))v14->__vftable[10].~__shared_weak_count)(v14);
        ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *))v14->__vftable[9].__on_zero_shared_weak)(&v25, v14);
        if (v25 && ((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25) & 1) != 0)
        {
          unsigned int v18 = v26;
          *a3 = v25;
          a3[1] = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
          }
          __int16 v24 = GEOGetGeoResourceLibEaselLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int v34 = 136315650;
            char v35 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            __int16 v36 = 2080;
            CFTypeRef v37 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
            __int16 v38 = 1024;
            int v39 = 180;
            _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_ERROR, "Failed to create final image with halo from halo context.: Assertion with expression - %s : Failed in file - %s line - %i", v34, 0x1Cu);
          }
          *a3 = 0;
          a3[1] = 0;
        }
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
        }
        __int16 v23 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v34 = 0;
          _os_log_impl(&dword_1A1780000, v23, OS_LOG_TYPE_ERROR, "Failed to create the halo color used for an image.", v34, 2u);
        }
        *a3 = 0;
        a3[1] = 0;
      }
      *(void *)buf = &unk_1EF554AE8;
      *(void *)&uint8_t buf[8] = &unk_1EF5590F8;
      if (*(void *)&buf[16]) {
        CFRelease(*(CFTypeRef *)&buf[16]);
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      unsigned int v22 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
        *(_WORD *)&unsigned char buf[22] = 1024;
        int v41 = 154;
        _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_ERROR, "Failed to create a context to render the final image with a halo in.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      *a3 = 0;
      a3[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    unsigned int v21 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
      *(_WORD *)&unsigned char buf[22] = 1024;
      int v41 = 148;
      _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "Generating the halo of an image has failed.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void grl::createThreePartHorizontalStretchedImage(void *a1@<X0>, void *a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  if (!v7 || ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v12 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    *(_WORD *)buf = 0;
    unsigned int v13 = "Input image must be a non-nullptr to create a stretched image.";
    goto LABEL_21;
  }
  if (!(*(unsigned int (**)(void))(*(void *)*a1 + 24))() || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))())
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v12 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    *(_WORD *)buf = 0;
    unsigned int v13 = "Input image must have a non-zero size to create a stretched image.";
    goto LABEL_21;
  }
  if (a4 <= 0.0 || a5 <= 0.0)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v12 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    *(_WORD *)buf = 0;
    unsigned int v13 = "A positive left and right padding is required to create a stretched image.";
LABEL_21:
    _os_log_impl(&dword_1A1780000, v12, OS_LOG_TYPE_ERROR, v13, buf, 2u);
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  v58[0] = *a1;
  v58[1] = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    grl::getSize(&v59, v58);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  else
  {
    grl::getSize(&v59, v58);
  }
  uint64_t v55 = 0;
  float v14 = v60;
  float v56 = a4;
  float v57 = v60;
  float v46 = v60;
  float v47 = v59 - a5;
  float v48 = 0.0;
  float v49 = v59;
  float v50 = v60;
  float v51 = a4;
  float v52 = 0.0;
  float v53 = v59 - a5;
  float v54 = v60;
  uint64_t v44 = 0;
  float v45 = a4;
  v42[0] = a3 - a5;
  v42[1] = 0.0;
  v42[2] = a3;
  void v42[3] = v60;
  *(float *)uint64_t v43 = a4;
  v43[1] = 0;
  *(float *)&v43[2] = a3 - a5;
  *(float *)&v43[3] = v60;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a1 + 56))(buf);
  uint64_t v15 = *(void *)buf;
  uint64_t v40 = *(void *)buf;
  int v41 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a1 + 56))(buf);
  uint64_t v16 = *(void *)buf;
  uint64_t v38 = *(void *)buf;
  int v39 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a1 + 56))(buf);
  uint64_t v18 = *(void *)buf;
  unsigned int v17 = *(std::__shared_weak_count **)&buf[8];
  uint64_t v36 = *(void *)buf;
  CFTypeRef v37 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v15 && ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15) & 1) != 0)
  {
    if (v16 && ((*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16) & 1) != 0)
    {
      if (v18 && ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 40))(v18) & 1) != 0)
      {
        __n128 v19 = (std::__shared_weak_count *)operator new(0x28uLL);
        v19->__shared_owners_ = 0;
        v19->__shared_weak_owners_ = 0;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
        float v20 = v19 + 1;
        __n128 v21 = esl::QuartzContext::QuartzContext(&v19[1], 3, a3, v14);
        if (((uint64_t (*)(__n128))v19[1].__get_deleter)(v21))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t *, uint64_t *, uint64_t))v20->__vftable[9].__on_zero_shared)(v20, &v44, &v40, 1);
          ((void (*)(std::__shared_weak_count *, _DWORD *, uint64_t *, uint64_t))v20->__vftable[9].__on_zero_shared)(v20, v43, &v38, 1);
          ((void (*)(std::__shared_weak_count *, float *, uint64_t *, uint64_t))v20->__vftable[9].__on_zero_shared)(v20, v42, &v36, 1);
          ((void (*)(unsigned char *__return_ptr, std::__shared_weak_count *))v20->__vftable[9].__on_zero_shared_weak)(buf, v20);
          if (*(void *)buf
            && ((*(uint64_t (**)(void))(**(void **)buf + 40))(*(void *)buf) & 1) != 0)
          {
            *(_OWORD *)a2 = *(_OWORD *)buf;
          }
          else
          {
            if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
            }
            int v34 = GEOGetGeoResourceLibEaselLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)char v35 = 0;
              _os_log_impl(&dword_1A1780000, v34, OS_LOG_TYPE_ERROR, "Failed to create the horizontally stretched image from a context.", v35, 2u);
            }
            *a2 = 0;
            a2[1] = 0;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
          }
        }
        else
        {
          if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
          }
          int64x2_t v33 = GEOGetGeoResourceLibEaselLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(double *)&uint8_t buf[4] = a3;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v14;
            _os_log_impl(&dword_1A1780000, v33, OS_LOG_TYPE_ERROR, "Failed to create a context to draw the horizontally stretched image with size (x:%.3f, y:%.3f).", buf, 0x16u);
          }
          *a2 = 0;
          a2[1] = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        unsigned int v17 = v37;
        if (!v37) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      unsigned int v22 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        float v30 = v49 - v47;
        float v31 = v50 - v48;
        if ((float)(v49 - v47) < 0.0) {
          float v30 = 0.0;
        }
        double v32 = v30;
        if (v31 < 0.0) {
          float v31 = 0.0;
        }
        *(_DWORD *)buf = 134218240;
        *(double *)&uint8_t buf[4] = v32;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v31;
        __int16 v26 = "Failed to create the right part of a horizontally stretched image with size (x:%.3f, y:%.3f).";
LABEL_68:
        _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_ERROR, v26, buf, 0x16u);
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      unsigned int v22 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        float v27 = v53 - v51;
        float v28 = v54 - v52;
        if ((float)(v53 - v51) < 0.0) {
          float v27 = 0.0;
        }
        double v29 = v27;
        if (v28 < 0.0) {
          float v28 = 0.0;
        }
        *(_DWORD *)buf = 134218240;
        *(double *)&uint8_t buf[4] = v29;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v28;
        __int16 v26 = "Failed to create the center part of a horizontally stretched image with size (x:%.3f, y:%.3f).";
        goto LABEL_68;
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    unsigned int v22 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      float v23 = v56 - *(float *)&v55;
      float v24 = v57 - *((float *)&v55 + 1);
      if ((float)(v56 - *(float *)&v55) < 0.0) {
        float v23 = 0.0;
      }
      double v25 = v23;
      if (v24 < 0.0) {
        float v24 = 0.0;
      }
      *(_DWORD *)buf = 134218240;
      *(double *)&uint8_t buf[4] = v25;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v24;
      __int16 v26 = "Failed to create the left part of a horizontally stretched image with size (x:%.3f, y:%.3f).";
      goto LABEL_68;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  if (v17) {
LABEL_70:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_71:
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
}

void grl::drawRadialGradientToContext(void *a1, void *a2, uint64_t a3, float a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  if (!v9 || ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v20 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v26 = 495;
    unsigned int v17 = "A non-nullptr context is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_18:
    uint64_t v18 = v20;
    uint32_t v19 = 28;
    goto LABEL_19;
  }
  if (!*a2 || ((*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v20 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v26 = 498;
    unsigned int v17 = "A non-nullptr path is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 24))())
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v16 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      unsigned int v17 = "Receieved empty path for drawRadialGradientToContext().";
      uint64_t v18 = v16;
      uint32_t v19 = 2;
LABEL_19:
      _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_ERROR, v17, buf, v19);
    }
  }
  else
  {
    esl::QuartzColor::QuartzColor(buf, a3);
    esl::QuartzColor::QuartzColor(v23, a7);
    if (esl::QuartzColor::isValid((esl::QuartzColor *)buf) && esl::QuartzColor::isValid((esl::QuartzColor *)v23))
    {
      (*(void (**)(void))(*(void *)*a1 + 408))(*a1);
      (*(void (**)(void, void *))(*(void *)*a1 + 288))(*a1, a2);
      (*(void (**)(void))(*(void *)*a1 + 264))();
      (*(void (**)(void, uint64_t))(*(void *)*a1 + 224))(*a1, a8);
      (*(void (**)(float, float))(*(void *)*a1 + 368))(a4, a5);
      (*(void (**)(void))(*(void *)*a1 + 400))();
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      __n128 v21 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned int v22 = 0;
        _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "Failed to create the gradient colors for a path.", v22, 2u);
      }
    }
    v23[0] = &unk_1EF554AE8;
    v23[1] = &unk_1EF5590F8;
    if (cf) {
      CFRelease(cf);
    }
    *(void *)buf = &unk_1EF554AE8;
    *(void *)&uint8_t buf[8] = &unk_1EF5590F8;
    if (*(void *)&buf[16]) {
      CFRelease(*(CFTypeRef *)&buf[16]);
    }
  }
}

void grl::drawReflectedGradientToContext(void *a1, void *a2, uint64_t a3, float a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v55[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a1;
  if (!v10 || ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v21 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v46 = 524;
    uint64_t v18 = "A non-nullptr context is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_18:
    uint32_t v19 = v21;
    uint32_t v20 = 28;
    goto LABEL_19;
  }
  if (!*a2 || ((*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v21 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v46 = 527;
    uint64_t v18 = "A non-nullptr path is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 24))())
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v17 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v18 = "Receieved empty path for drawReflectedGradientToContext().";
      uint32_t v19 = v17;
      uint32_t v20 = 2;
LABEL_19:
      _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
    }
  }
  else
  {
    esl::QuartzColor::QuartzColor(v43, a3);
    esl::QuartzColor::QuartzColor(v41, a7);
    if (esl::QuartzColor::isValid((esl::QuartzColor *)v43) && esl::QuartzColor::isValid((esl::QuartzColor *)v41))
    {
      *(void *)buf = &unk_1EF554AE8;
      *(void *)&uint8_t buf[8] = &unk_1EF5590F8;
      CFTypeRef v22 = cf;
      if (cf) {
        CFRetain(cf);
      }
      *(void *)&uint8_t buf[16] = v22;
      float v47 = &unk_1EF554AE8;
      float v48 = &unk_1EF5590F8;
      CFTypeRef v23 = v42;
      if (v42)
      {
        CFRetain(v42);
        CFTypeRef v24 = v42;
      }
      else
      {
        CFTypeRef v24 = 0;
      }
      CFTypeRef v49 = v23;
      float v50 = &unk_1EF554AE8;
      float v51 = &unk_1EF5590F8;
      if (v24) {
        CFRetain(v24);
      }
      CFTypeRef v52 = v24;
      float v53 = &unk_1EF554AE8;
      float v54 = &unk_1EF5590F8;
      CFTypeRef v26 = cf;
      if (cf) {
        CFRetain(cf);
      }
      v55[0] = v26;
      uint64_t v27 = (char *)operator new(0x80uLL);
      uint64_t v28 = 0;
      v40[0] = v27;
      void v40[2] = v27 + 128;
      do
      {
        double v29 = &v27[v28];
        *(void *)double v29 = &unk_1EF554AE8;
        *((void *)v29 + 1) = &unk_1EF5590F8;
        uint64_t v30 = *(void *)&buf[v28 + 16];
        if (v30) {
          CFRetain(*(CFTypeRef *)&buf[v28 + 16]);
        }
        *((void *)v29 + 2) = v30;
        v28 += 32;
      }
      while (v28 != 128);
      uint64_t v31 = 0;
      v40[1] = v27 + 128;
      do
      {
        double v32 = &buf[v31 * 8];
        *((void *)v32 + 12) = &unk_1EF554AE8;
        *((void *)v32 + 13) = &unk_1EF5590F8;
        int64x2_t v33 = (const void *)v55[v31];
        if (v33) {
          CFRelease(v33);
        }
        v31 -= 4;
      }
      while (v31 != -16);
      float v34 = 0.5;
      float v35 = (float)(a4 * 0.5) + 0.5;
      float v36 = (float)(a5 * 0.5) + 0.5;
      float v37 = v34 - (float)(a5 * v34);
      float v38 = v34 - (float)(a4 * v34);
      int v39 = (float *)operator new(0x10uLL);
      *(void *)&uint8_t buf[8] = v39 + 4;
      *(void *)&uint8_t buf[16] = v39 + 4;
      float *v39 = v35;
      v39[1] = v36;
      v39[2] = v37;
      unsigned char v39[3] = v38;
      *(void *)buf = v39;
      (*(void (**)(void))(*(void *)*a1 + 408))();
      (*(void (**)(void))(*(void *)*a1 + 288))();
      (*(void (**)(void))(*(void *)*a1 + 264))();
      (*(void (**)(void, uint64_t))(*(void *)*a1 + 224))(*a1, a9);
      (*(void (**)(void))(*(void *)*a1 + 360))();
      (*(void (**)(void))(*(void *)*a1 + 400))();
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      *(void *)buf = v40;
      std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      double v25 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A1780000, v25, OS_LOG_TYPE_ERROR, "Failed to create the gradient colors for a path.", buf, 2u);
      }
    }
    v41[0] = &unk_1EF554AE8;
    v41[1] = &unk_1EF5590F8;
    if (v42) {
      CFRelease(v42);
    }
    v43[0] = &unk_1EF554AE8;
    v43[1] = &unk_1EF5590F8;
    if (cf) {
      CFRelease(cf);
    }
  }
}

void grl::drawDebugSquareToContext(void *a1, uint64_t a2, float *a3, float *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v12 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v21 = 663;
    unsigned int v13 = "A non-nullptr context is required for drawDebugSquareToContext().: Assertion with expression - %s : Failed in "
          "file - %s line - %i";
LABEL_11:
    _os_log_impl(&dword_1A1780000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x1Cu);
    return;
  }
  if (!*(unsigned char *)(a2 + 3))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v12 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v21 = 666;
    unsigned int v13 = "A non-zero alpha color is required to draw for drawDebugSquareToContext().: Assertion with expression - %s : F"
          "ailed in file - %s line - %i";
    goto LABEL_11;
  }
  float v9 = a4[1];
  if ((float)(*a4 * v9) > 0.0)
  {
    float v10 = a3[1];
    float v11 = *a4 + *a3;
    float v16 = *a3;
    float v17 = v10;
    float v18 = v11;
    float v19 = v9 + v10;
    esl::QuartzColor::QuartzColor(buf, a2);
    if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
    {
      (*(void (**)(void))(*(void *)*a1 + 408))(*a1);
      (*(void (**)(void, unsigned char *))(*(void *)*a1 + 232))(*a1, buf);
      (*(void (**)(void))(*(void *)*a1 + 256))();
      (*(void (**)(void))(*(void *)*a1 + 400))();
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      float v14 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "Failed to create the fill color for a debug square.", v15, 2u);
      }
    }
    *(void *)buf = &unk_1EF554AE8;
    *(void *)&uint8_t buf[8] = &unk_1EF5590F8;
    if (*(void *)&buf[16]) {
      CFRelease(*(CFTypeRef *)&buf[16]);
    }
    return;
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
  }
  uint64_t v12 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v21 = 669;
    unsigned int v13 = "A positive size is required for drawDebugSquareToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_11;
  }
}

BOOL grl::drawDebugLine(void *a1, uint64_t a2, float32x2_t *a3, float a4)
{
  uint64_t v5 = *a1;
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5) & 1) != 0)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2))
    {
      if (a4 >= 0.0)
      {
        __asm { FMOV            V2.2S, #1.0 }
        _D2.i32[0] = fmaxf(a4, 1.0);
        v17[0] = vrnda_f32(*a3);
        v17[1] = vadd_f32(_D2, v17[0]);
        (*(void (**)(void))(*(void *)*a1 + 408))(*a1);
        (*(void (**)(void, uint64_t))(*(void *)*a1 + 232))(*a1, a2);
        (*(void (**)(void))(*(void *)*a1 + 256))();
        (*(void (**)(void))(*(void *)*a1 + 400))();
        return 1;
      }
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      float v9 = GEOGetGeoResourceLibEaselLog::log;
      BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v17[0].i16[0] = 0;
        float v11 = "A positive width is required.";
LABEL_13:
        _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)v17, 2u);
        return 0;
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      float v9 = GEOGetGeoResourceLibEaselLog::log;
      BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v17[0].i16[0] = 0;
        float v11 = "A non-nullptr color is required.";
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    float v9 = GEOGetGeoResourceLibEaselLog::log;
    BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v17[0].i16[0] = 0;
      float v11 = "A non-nullptr context is required.";
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t grl::codec::IconConfigPack::packLog(grl::codec::IconConfigPack *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v25);
  std::mutex::lock((std::mutex *)((char *)this + 232));
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2 != (void *)((char *)this + 120))
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v5 = v2[3];
      float v4 = (std::__shared_weak_count *)v2[4];
      if (v4)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v6 = *(void *)(v5 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      else
      {
        uint64_t v6 = *(void *)(v5 + 24);
      }
      v3 += v6;
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != (void *)((char *)this + 120));
  }
  std::mutex::unlock((std::mutex *)((char *)this + 232));
  uint64_t v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"IconConfigPack: ", 16);
  grl::codec::ResourcePack::fileName(this, (uint64_t)__p);
  if ((v24 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v9 = v24;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  float v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  float v11 = std::locale::use_facet(&v29, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v29);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"Number of Icons: ", 17);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  unsigned int v13 = (std::locale::id *)MEMORY[0x1E4FBA258];
  float v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"Cache| hits: ", 13);
  uint64_t v15 = (unsigned int *)((char *)this + 144);
  atomic_load((unsigned int *)this + 36);
  float v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)" misses:", 8);
  float v17 = (unsigned int *)((char *)this + 148);
  atomic_load(v17);
  float v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" hitRate: ", 10);
  atomic_load(v15);
  atomic_load(v15);
  atomic_load(v17);
  float v19 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint32_t v20 = std::locale::use_facet((const std::locale *)__p, v13);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v25[0] = *MEMORY[0x1E4FBA408];
  uint64_t v21 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v25 + *(void *)(v25[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v26[0] = v21;
  v26[1] = MEMORY[0x1E4FBA470] + 16;
  if (v27 < 0) {
    operator delete((void *)v26[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v28);
}

void grl::codec::IconConfigPack::encode(grl::codec::IconConfigPack *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  size_t v120 = 0;
  long long v121 = 0;
  char v123 = 0;
  uint64_t v122 = 0;
  v132[0] = 73;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 79;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 78;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 79;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 78;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 70;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 73;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 71;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 80;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  v132[0] = 75;
  geo::obitstream::appendBytes((geo::obitstream *)&v120, (char *)v132, 1);
  int8x16x4_t v117 = 0;
  int64_t v118 = 0;
  int v119 = 0;
  uint64_t v6 = v120;
  size_t v7 = v121 - (unsigned char *)v120;
  if (v121 == v120)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v121 - (unsigned char *)v120 < 0) {
      goto LABEL_145;
    }
    uint64_t v8 = (char *)operator new(v121 - (unsigned char *)v120);
    uint64_t v9 = &v8[v7];
    int8x16x4_t v117 = v8;
    int v119 = &v8[v7];
    uint64_t v5 = (grl::Allocator *)memmove(v8, v6, v7);
    int64_t v118 = &v8[v7];
  }
  int64_t v10 = v9 - v8;
  if ((unint64_t)(v9 - v8) > 0x3F)
  {
    if (v10 != 64) {
      int64_t v118 = v8 + 64;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v117, 64 - v10);
  }
  v116[0] = 0;
  v116[1] = (void *)grl::Allocator::instance(v5);
  v116[2] = 0;
  int8x16x2_t v115 = (uint64_t *)v116;
  grl::codec::ResourcePack::encodePackInfo(this, a2, v113);
  *(_WORD *)double v143 = 1;
  *(void *)double v132 = v143;
  float v11 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v115, (unsigned __int16 *)v143, (uint64_t)&std::piecewise_construct, (_WORD **)v132);
  uint64_t v12 = v11[5];
  if (v12)
  {
    v11[6] = v12;
    operator delete(v12);
  }
  *(_OWORD *)(v11 + 5) = *(_OWORD *)v113;
  v11[7] = v114;
  v113[1] = 0;
  unsigned __int8 v114 = 0;
  v113[0] = 0;
  *(_WORD *)double v143 = 1;
  *(void *)double v132 = v143;
  *((unsigned char *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v115, (unsigned __int16 *)v143, (uint64_t)&std::piecewise_construct, (_WORD **)v132)+ 64) = 1;
  grl::PropertySet::encodePropertyContext(v111);
  strcpy((char *)v143, "\v");
  *(void *)double v132 = v143;
  unsigned int v13 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v115, (unsigned __int16 *)v143, (uint64_t)&std::piecewise_construct, (_WORD **)v132);
  float v14 = v13[5];
  if (v14)
  {
    v13[6] = v14;
    operator delete(v14);
  }
  *(_OWORD *)(v13 + 5) = *(_OWORD *)v111;
  void v13[7] = v112;
  v111[1] = 0;
  std::locale v112 = 0;
  v111[0] = 0;
  strcpy((char *)v143, "\v");
  *(void *)double v132 = v143;
  uint64_t v15 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v115, (unsigned __int16 *)v143, (uint64_t)&std::piecewise_construct, (_WORD **)v132);
  *((unsigned char *)v15 + 64) = 1;
  int16x8_t v108 = 0;
  uint64_t v109 = grl::Allocator::instance((grl::Allocator *)v15);
  uint64_t v110 = 0;
  size_t v107 = &v108;
  size_t v16 = 72960 * *(void *)(*((void *)this + 19) + 24);
  *(void *)double v143 = 0;
  uint64_t v144 = 0;
  char v146 = 0;
  uint64_t v145 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v143, v16);
  int v140 = 0;
  float v18 = (uint64_t *)grl::Allocator::instance(v17);
  double v141 = v18;
  uint64_t v142 = 0;
  double v139 = &v140;
  float v19 = (void *)*((void *)this + 19);
  uint32_t v20 = (void *)*v19;
  size_t v105 = v19 + 1;
  if ((void *)*v19 == v19 + 1) {
    goto LABEL_61;
  }
  do
  {
    double v136 = &unk_1EF5672F0;
    unsigned __int8 v138 = *((unsigned char *)v20 + 56);
    long long v137 = *(_OWORD *)(v20 + 5);
    unsigned __int8 v21 = v138;
    __int16 v22 = WORD6(v137);
    __int16 v23 = HIWORD(v137);
    unsigned __int8 v24 = v140;
    for (i = &v140; ; unsigned __int8 v24 = *i)
    {
      CFTypeRef v26 = i;
      if (!v24) {
        break;
      }
      while (1)
      {
        unint64_t i = (uint64_t **)v24;
        unsigned int v27 = *((unsigned __int8 *)v24 + 32);
        if (v138 == v27) {
          break;
        }
        if (v138 < v27) {
          goto LABEL_28;
        }
        if (v27 >= v138) {
          goto LABEL_32;
        }
LABEL_26:
        unsigned __int8 v24 = i[1];
        if (!v24)
        {
          CFTypeRef v26 = i + 1;
          goto LABEL_29;
        }
      }
      unsigned int v28 = *((unsigned __int16 *)i + 18);
      if (HIWORD(v137) == v28)
      {
        unsigned int v29 = *((unsigned __int16 *)i + 17);
        if (WORD6(v137) < v29) {
          continue;
        }
        if (v29 >= WORD6(v137)) {
          goto LABEL_32;
        }
        goto LABEL_26;
      }
      if (HIWORD(v137) >= v28)
      {
        if (v28 >= HIWORD(v137)) {
          goto LABEL_32;
        }
        goto LABEL_26;
      }
LABEL_28:
      ;
    }
LABEL_29:
    uint64_t v30 = (uint64_t *)i;
    unint64_t i = (uint64_t **)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v141 + 16))(v141, 64, 8);
    *((unsigned char *)i + 32) = v21;
    *((_WORD *)i + 17) = v22;
    *((_WORD *)i + 18) = v23;
    i[6] = 0;
    i[7] = 0;
    i[5] = 0;
    *unint64_t i = 0;
    i[1] = 0;
    i[2] = v30;
    *CFTypeRef v26 = (uint64_t *)i;
    uint64_t v31 = (uint64_t *)i;
    if (*v139)
    {
      double v139 = (uint64_t **)*v139;
      uint64_t v31 = *v26;
    }
    float v18 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v140, v31);
    ++v142;
LABEL_32:
    long long v133 = *(_OWORD *)(v20 + 5);
    LOBYTE(v134) = *((unsigned char *)v20 + 56);
    uint64_t v33 = v20[8];
    uint64_t v32 = v20[9];
    *(void *)double v132 = &unk_1EF5672F0;
    *(void *)&long long v135 = v33;
    *((void *)&v135 + 1) = v32;
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    float v34 = i[6];
    float v35 = i[7];
    if (v34 >= v35)
    {
      float v37 = i[5];
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v37) >> 4);
      unint64_t v39 = v38 + 1;
      if (v38 + 1 > 0x555555555555555) {
        goto LABEL_145;
      }
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v37) >> 4);
      if (2 * v40 > v39) {
        unint64_t v39 = 2 * v40;
      }
      if (v40 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v39 = 0x555555555555555;
      }
      if (v39 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v41 = 3 * v39;
      CFTypeRef v42 = (char *)operator new(48 * v39);
      uint64_t v43 = &v42[48 * v38];
      uint64_t v44 = (uint64_t *)&v42[16 * v41];
      *(void *)uint64_t v43 = &unk_1EF5672F0;
      *(_OWORD *)(v43 + 8) = v133;
      v43[24] = v134;
      *((_OWORD *)v43 + 2) = v135;
      long long v135 = 0uLL;
      float v45 = (uint64_t *)(v43 + 48);
      int v46 = i[5];
      float v47 = i[6];
      if (v47 == v46)
      {
        i[5] = (uint64_t *)v43;
        i[6] = v45;
        i[7] = v44;
      }
      else
      {
        uint64_t v48 = 0;
        do
        {
          CFTypeRef v49 = &v43[v48 * 8];
          *((void *)v49 - 6) = &unk_1EF5672F0;
          float v50 = &v47[v48];
          long long v51 = *(_OWORD *)&v47[v48 - 5];
          *(v49 - 24) = v47[v48 - 3];
          *(_OWORD *)(v49 - 40) = v51;
          *((_OWORD *)v49 - 1) = *(_OWORD *)&v47[v48 - 2];
          *(v50 - 2) = 0;
          *(v50 - 1) = 0;
          v48 -= 6;
        }
        while (&v47[v48] != v46);
        float v47 = i[5];
        CFTypeRef v52 = i[6];
        i[5] = (uint64_t *)&v43[v48 * 8];
        i[6] = v45;
        i[7] = v44;
        while (v52 != v47)
        {
          float v53 = (std::__shared_weak_count *)*(v52 - 1);
          if (v53) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v53);
          }
          v52 -= 6;
        }
      }
      if (v47) {
        operator delete(v47);
      }
      float v18 = (uint64_t *)*((void *)&v135 + 1);
      i[6] = v45;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18);
      }
    }
    else
    {
      *float v34 = (uint64_t)&unk_1EF5672F0;
      long long v36 = v133;
      *((unsigned char *)v34 + 24) = v134;
      *(_OWORD *)(v34 + 1) = v36;
      *((_OWORD *)v34 + 2) = v135;
      i[6] = v34 + 6;
    }
    float v54 = (void *)v20[1];
    if (v54)
    {
      do
      {
        uint64_t v55 = v54;
        float v54 = (void *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        uint64_t v55 = (void *)v20[2];
        BOOL v56 = *v55 == (void)v20;
        uint32_t v20 = v55;
      }
      while (!v56);
    }
    uint32_t v20 = v55;
  }
  while (v55 != v105);
LABEL_61:
  *(void *)&long long v133 = 0;
  *((void *)&v133 + 1) = grl::Allocator::instance((grl::Allocator *)v18);
  uint64_t v134 = 0;
  *(void *)double v132 = &v133;
  float v57 = v139;
  if (v139 == &v140) {
    goto LABEL_111;
  }
  while (2)
  {
    double v128 = 0;
    double v129 = 0;
    char v131 = 0;
    uint64_t v130 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&v128, 0x5555555555555AF8 * (((char *)v57[6] - (char *)v57[5]) >> 4));
    LODWORD(v126[0]) = -1431655765 * ((unint64_t)((char *)v57[6] - (char *)v57[5]) >> 4);
    geo::obitstream::appendBytes((geo::obitstream *)&v128, (char *)v126, 4);
    uint64_t v58 = (grl::codec::IconData **)v57[5];
    float v59 = (grl::codec::IconData **)v57[6];
    while (v58 != v59)
    {
      grl::IconKey::encode((grl::IconKey *)v58, a2, v126);
      LODWORD(__p) = LODWORD(v126[1]) - LODWORD(v126[0]);
      geo::obitstream::appendBytes((geo::obitstream *)&v128, (char *)&__p, 4);
      geo::obitstream::appendBytes((geo::obitstream *)&v128, (char *)v126[0], (char *)v126[1] - (char *)v126[0]);
      grl::codec::IconData::encode(v58[4], &__p);
      *(_DWORD *)double v147 = v125 - __p;
      geo::obitstream::appendBytes((geo::obitstream *)&v128, v147, 4);
      geo::obitstream::appendBytes((geo::obitstream *)&v128, (char *)__p, v125 - (unsigned char *)__p);
      if (__p)
      {
        double v125 = __p;
        operator delete(__p);
      }
      if (v126[0])
      {
        v126[1] = v126[0];
        operator delete(v126[0]);
      }
      v58 += 6;
    }
    long long v61 = v128;
    float v60 = v129;
    grl::codec::ResourcePack::compressData((uint64_t)&v128, (unint64_t *)v126);
    long long v106 = *(_OWORD *)v126;
    uint64_t v62 = v127;
    v126[1] = 0;
    uint64_t v127 = 0;
    v126[0] = 0;
    long long v63 = (uint64_t **)&v133;
    uint64_t v64 = &v133;
    uint64_t v65 = v133;
    if (!(void)v133) {
      goto LABEL_85;
    }
    unsigned int v66 = *((unsigned __int8 *)v57 + 32);
    unsigned int v67 = *((unsigned __int16 *)v57 + 18);
    unsigned int v68 = *((unsigned __int16 *)v57 + 17);
    while (2)
    {
      while (2)
      {
        uint64_t v64 = (long long *)v65;
        unsigned int v69 = *(unsigned __int8 *)(v65 + 32);
        if (v66 != v69)
        {
          if (v66 >= v69)
          {
            if (v69 >= v66) {
              goto LABEL_88;
            }
            goto LABEL_83;
          }
          goto LABEL_80;
        }
        unsigned int v70 = *((unsigned __int16 *)v64 + 18);
        if (v67 == v70)
        {
          unsigned int v71 = *((unsigned __int16 *)v64 + 17);
          if (v68 >= v71)
          {
            if (v71 >= v68) {
              goto LABEL_88;
            }
            goto LABEL_83;
          }
          goto LABEL_80;
        }
        if (v67 < v70)
        {
LABEL_80:
          uint64_t v65 = *(void *)v64;
          long long v63 = (uint64_t **)v64;
          if (!*(void *)v64) {
            goto LABEL_85;
          }
          continue;
        }
        break;
      }
      if (v70 >= v67) {
        goto LABEL_88;
      }
LABEL_83:
      uint64_t v65 = *((void *)v64 + 1);
      if (v65) {
        continue;
      }
      break;
    }
    long long v63 = (uint64_t **)v64 + 1;
LABEL_85:
    int64x2_t v72 = v64;
    uint64_t v64 = (long long *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)&v133 + 1) + 16))(*((void *)&v133 + 1), 72, 8);
    __int16 v73 = *((_WORD *)v57 + 18);
    *((_DWORD *)v64 + 8) = *((_DWORD *)v57 + 8);
    *((_WORD *)v64 + 18) = v73;
    *(long long *)((char *)v64 + 40) = 0u;
    *(long long *)((char *)v64 + 56) = 0u;
    *(void *)uint64_t v64 = 0;
    *((void *)v64 + 1) = 0;
    *((void *)v64 + 2) = v72;
    *long long v63 = (uint64_t *)v64;
    int64x2_t v74 = (uint64_t *)v64;
    if (**(void **)v132)
    {
      *(void *)double v132 = **(void **)v132;
      int64x2_t v74 = *v63;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v133, v74);
    ++v134;
LABEL_88:
    *((void *)v64 + 5) = v60 - v61;
    int64x2_t v75 = (void *)*((void *)v64 + 6);
    if (v75)
    {
      *((void *)v64 + 7) = v75;
      operator delete(v75);
    }
    v64[3] = v106;
    *((void *)v64 + 8) = v62;
    if (v126[0])
    {
      v126[1] = v126[0];
      operator delete(v126[0]);
    }
    if (v128)
    {
      double v129 = v128;
      operator delete(v128);
    }
    int64x2_t v76 = v57[1];
    if (v76)
    {
      do
      {
        int64x2_t v77 = (uint64_t **)v76;
        int64x2_t v76 = (uint64_t *)*v76;
      }
      while (v76);
    }
    else
    {
      do
      {
        int64x2_t v77 = (uint64_t **)v57[2];
        BOOL v56 = *v77 == (uint64_t *)v57;
        float v57 = v77;
      }
      while (!v56);
    }
    float v57 = v77;
    if (v77 != &v140) {
      continue;
    }
    break;
  }
  int64x2_t v78 = *(unsigned __int8 **)v132;
  if (*(long long **)v132 != &v133)
  {
    do
    {
      int v79 = v144;
      int v80 = *(_DWORD *)v143;
      char v81 = std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,grl::Allocator>>::__find_equal<grl::codec::IconConfigPack::IconLocationIndex>((uint64_t)&v107, &v128, v78 + 32);
      uint64_t v82 = *v81;
      if (!*v81)
      {
        char v83 = v81;
        uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v109 + 16))(v109, 40, 8);
        __int16 v84 = *((_WORD *)v78 + 18);
        *(_DWORD *)(v82 + 28) = *((_DWORD *)v78 + 8);
        *(_WORD *)(v82 + 32) = v84;
        *(_DWORD *)(v82 + 36) = 0;
        long long v85 = v128;
        *(void *)uint64_t v82 = 0;
        *(void *)(v82 + 8) = 0;
        *(void *)(v82 + 16) = v85;
        *char v83 = v82;
        long long v86 = (uint64_t *)v82;
        if (*v107)
        {
          size_t v107 = (uint64_t **)*v107;
          long long v86 = (uint64_t *)*v83;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v108, v86);
        ++v110;
      }
      *(_DWORD *)(v82 + 36) = v79 - v80;
      double v128 = (void *)*((void *)v78 + 5);
      geo::obitstream::appendBytes((geo::obitstream *)v143, (char *)&v128, 8);
      double v128 = (void *)(*((void *)v78 + 7) - *((void *)v78 + 6));
      geo::obitstream::appendBytes((geo::obitstream *)v143, (char *)&v128, 8);
      geo::obitstream::appendBytes((geo::obitstream *)v143, *((char **)v78 + 6), *((void *)v78 + 7) - *((void *)v78 + 6));
      long long v87 = (unsigned __int8 *)*((void *)v78 + 1);
      if (v87)
      {
        do
        {
          long long v88 = v87;
          long long v87 = *(unsigned __int8 **)v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          long long v88 = (unsigned __int8 *)*((void *)v78 + 2);
          BOOL v56 = *(void *)v88 == (void)v78;
          int64x2_t v78 = v88;
        }
        while (!v56);
      }
      int64x2_t v78 = v88;
    }
    while (v88 != (unsigned __int8 *)&v133);
  }
LABEL_111:
  int v89 = *(const void **)v143;
  size_t v90 = v144 - *(void *)v143;
  if (v144 != *(void *)v143)
  {
    if (v144 - *(void *)v143 >= 0)
    {
      long long v91 = (char *)operator new(v144 - *(void *)v143);
      uint64_t v92 = (uint64_t *)&v91[v90];
      memmove(v91, v89, v90);
      goto LABEL_115;
    }
LABEL_145:
    abort();
  }
  long long v91 = 0;
  uint64_t v92 = 0;
LABEL_115:
  std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,grl::Allocator>>::destroy((uint64_t)v132, (void *)v133);
  std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,grl::Allocator>>::destroy((uint64_t)&v139, v140);
  if (*(void *)v143)
  {
    uint64_t v144 = *(void *)v143;
    operator delete(*(void **)v143);
  }
  *(_WORD *)double v143 = 16;
  *(void *)double v132 = v143;
  uint64_t v93 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v115, (unsigned __int16 *)v143, (uint64_t)&std::piecewise_construct, (_WORD **)v132);
  char v94 = v93[5];
  if (v94)
  {
    v93[6] = v94;
    operator delete(v94);
  }
  v93[5] = (uint64_t *)v91;
  v93[6] = v92;
  v93[7] = v92;
  *(_WORD *)double v143 = 16;
  *(void *)double v132 = v143;
  *((unsigned char *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v115, (unsigned __int16 *)v143, (uint64_t)&std::piecewise_construct, (_WORD **)v132)+ 64) = 0;
  *(void *)double v132 = 0;
  long long v133 = 0uLL;
  LOBYTE(v134) = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v132, 14 * v110);
  *(_DWORD *)double v143 = v110;
  geo::obitstream::appendBytes((geo::obitstream *)v132, (char *)v143, 4);
  int16x8_t v95 = v107;
  if (v107 != &v108)
  {
    do
    {
      v143[0] = *((unsigned char *)v95 + 28);
      geo::obitstream::appendBytes((geo::obitstream *)v132, (char *)v143, 1);
      if (a2 >= 3)
      {
        *(_WORD *)double v143 = *((_WORD *)v95 + 15);
        geo::obitstream::appendBytes((geo::obitstream *)v132, (char *)v143, 2);
      }
      *(_WORD *)double v143 = *((_WORD *)v95 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)v132, (char *)v143, 2);
      *(_DWORD *)double v143 = *((_DWORD *)v95 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)v132, (char *)v143, 4);
      uint64_t v96 = v95[1];
      if (v96)
      {
        do
        {
          int v97 = (uint64_t **)v96;
          uint64_t v96 = (uint64_t *)*v96;
        }
        while (v96);
      }
      else
      {
        do
        {
          int v97 = (uint64_t **)v95[2];
          BOOL v56 = *v97 == (uint64_t *)v95;
          int16x8_t v95 = v97;
        }
        while (!v56);
      }
      int16x8_t v95 = v97;
    }
    while (v97 != &v108);
  }
  BOOL v98 = *(unsigned __int8 **)v132;
  size_t v99 = v133 - *(void *)v132;
  if ((void)v133 == *(void *)v132)
  {
    uint64_t v100 = 0;
    BOOL v101 = 0;
    if (*(void *)v132) {
      goto LABEL_131;
    }
  }
  else
  {
    if ((uint64_t)(v133 - *(void *)v132) < 0) {
      goto LABEL_145;
    }
    uint64_t v100 = (char *)operator new(v133 - *(void *)v132);
    BOOL v101 = (uint64_t *)&v100[v99];
    memmove(v100, v98, v99);
    if (v98)
    {
LABEL_131:
      *(void *)&long long v133 = v98;
      operator delete(v98);
    }
  }
  *(_WORD *)double v143 = 15;
  *(void *)double v132 = v143;
  unint64_t v102 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v115, (unsigned __int16 *)v143, (uint64_t)&std::piecewise_construct, (_WORD **)v132);
  unint64_t v103 = v102[5];
  if (v103)
  {
    v102[6] = v103;
    operator delete(v103);
  }
  v102[5] = (uint64_t *)v100;
  v102[6] = v101;
  v102[7] = v101;
  *(_WORD *)double v143 = 15;
  *(void *)double v132 = v143;
  *((unsigned char *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v115, (unsigned __int16 *)v143, (uint64_t)&std::piecewise_construct, (_WORD **)v132)+ 64) = 1;
  grl::codec::ResourcePack::encodeHeaderAndData((uint64_t)&v117, (unsigned __int16 **)&v115, a3);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v107, v108);
  if (v111[0])
  {
    v111[1] = v111[0];
    operator delete(v111[0]);
  }
  if (v113[0])
  {
    v113[1] = v113[0];
    operator delete(v113[0]);
  }
  std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy((uint64_t)&v115, v116[0]);
  if (v117)
  {
    int64_t v118 = (char *)v117;
    operator delete(v117);
  }
  if (v120)
  {
    long long v121 = v120;
    operator delete(v120);
  }
}

void grl::codec::IconConfigPack::~IconConfigPack(grl::codec::IconConfigPack *this)
{
  grl::codec::IconConfigPack::~IconConfigPack(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  grl::codec::IconConfigPack *v5;
  uint64_t v6;
  grl::codec::IconConfigPack *v7;
  std::__shared_weak_count *v8;
  void *v9;
  void *v10;
  void *v11;

  *(void *)this = &unk_1EF567290;
  std::mutex::~mutex((std::mutex *)((char *)this + 232));
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((void *)this + 17))
  {
    float v4 = *((void *)this + 15);
    uint64_t v5 = (grl::codec::IconConfigPack *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != (grl::codec::IconConfigPack *)((char *)this + 120))
    {
      do
      {
        size_t v7 = (grl::codec::IconConfigPack *)*((void *)v5 + 1);
        uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 4);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != (grl::codec::IconConfigPack *)((char *)this + 120));
    }
  }
  uint64_t v9 = (void *)*((void *)this + 12);
  if (v9)
  {
    do
    {
      int64_t v10 = (void *)*v9;
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  float v11 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v11) {
    operator delete(v11);
  }
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  *(void *)this = &unk_1EF567250;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t grl::codec::IconConfigPack::resourceType(grl::codec::IconConfigPack *this)
{
  return 0;
}

void *grl::codec::ResourcePack::packLog@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "");
}

void geo::obitstream::appendBytes(geo::obitstream *this, char *a2, int64_t a3)
{
  float v4 = a2;
  if (*((unsigned char *)this + 24))
  {
    if (a3 >= 1)
    {
      uint64_t v6 = (const unsigned __int8 *)&a2[a3];
      size_t v7 = (unsigned char *)*((void *)this + 1);
      do
      {
        unsigned int v8 = *v4;
        *(v7 - 1) |= v8 >> *((unsigned char *)this + 24);
        int v9 = v8 << (8 - *((unsigned char *)this + 24));
        float v11 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v12 = *(void *)this;
          unsigned int v13 = &v11[-*(void *)this];
          unint64_t v14 = (unint64_t)(v13 + 1);
          if ((uint64_t)(v13 + 1) < 0) {
            abort();
          }
          unint64_t v15 = v10 - v12;
          if (2 * v15 > v14) {
            unint64_t v14 = 2 * v15;
          }
          if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v16 = v14;
          }
          if (v16) {
            float v17 = (char *)operator new(v16);
          }
          else {
            float v17 = 0;
          }
          float v18 = &v13[(void)v17];
          float v19 = &v13[(void)v17];
          *float v19 = v9;
          size_t v7 = v19 + 1;
          if (v11 != (unsigned char *)v12)
          {
            uint32_t v20 = &v11[~v12];
            do
            {
              char v21 = *--v11;
              (v20--)[(void)v17] = v21;
            }
            while (v11 != (unsigned char *)v12);
            float v11 = *(unsigned char **)this;
            float v18 = v17;
          }
          *(void *)this = v18;
          *((void *)this + 1) = v7;
          *((void *)this + 2) = &v17[v16];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *float v11 = v9;
          size_t v7 = v11 + 1;
        }
        *((void *)this + 1) = v7;
        ++v4;
      }
      while (v4 < (char *)v6);
    }
  }
  else
  {
    std::vector<unsigned char>::reserve((unint64_t *)this, *((void *)this + 1) + a3 - *(void *)this);
    __int16 v22 = (char *)*((void *)this + 1);
    std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)this, v22, v4, &v4[a3], a3);
  }
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      abort();
    }
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    size_t v7 = &v5[(void)v6 - v2];
    unsigned int v8 = v7;
    if (v5 != (char *)v2)
    {
      int v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unsigned int v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

char *std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  char v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    float v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    unsigned int v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      float v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      float v17 = 0;
    }
    unsigned int v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    unsigned int v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      char v10 = *(char **)(a1 + 8);
      unsigned int v28 = v17;
    }
    uint64_t v30 = &v27[a5];
    uint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    float v19 = &__src[a5];
    char v21 = *(char **)(a1 + 8);
LABEL_17:
    __int16 v22 = &v5[a5];
    __int16 v23 = &v21[-a5];
    unsigned __int8 v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      unsigned __int8 v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  float v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  char v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

char *std::vector<unsigned char>::__vallocate[abi:nn180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    abort();
  }
  BOOL result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,geo::StdAllocator<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,geo::StdAllocator<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,geo::StdAllocator<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,grl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(a1 + 32, *(void **)(a1 + 40));
}

uint64_t std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,geo::StdAllocator<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,grl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 64);
}

uint64_t std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(v3, a2[1]);
    float v4 = (std::__shared_weak_count *)a2[9];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

void geo::Cache<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>,grl::codec::IconConfigPack::IconLocationIndexHash,geo::LRUPolicy>::_pop(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  unint64_t v2 = (uint64_t **)(a1 + 48);
  int v5 = *(_DWORD *)(v3 + 16);
  __int16 v6 = *(_WORD *)(v3 + 20);
  float v4 = *(std::__shared_weak_count **)(v3 + 32);
  uint64_t v7 = *(void *)(v3 + 24);
  size_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::list<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>>::pop_back(v2);
  std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::__erase_unique<grl::codec::IconConfigPack::IconLocationIndex>((void *)(a1 + 8), (unsigned __int8 *)&v5);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void std::list<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>>::pop_back(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)(v2 + 8) = (*a1)[1];
  *(void *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  uint64_t v3 = (std::__shared_weak_count *)v1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  operator delete(v1);
}

uint64_t *std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::__erase_unique<grl::codec::IconConfigPack::IconLocationIndex>(void *a1, unsigned __int8 *a2)
{
  BOOL result = (uint64_t *)std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::find<grl::codec::IconConfigPack::IconLocationIndex>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  __int16 v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    __int16 v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy(v3, a2[1]);
    unint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    uint8x8_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  __int16 v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        __int16 v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      __int16 v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 72, 8);
    *(_WORD *)(v11 + 32) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(unsigned char *)(v11 + 64) = 1;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,grl::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,grl::Allocator>>::destroy(v3, a2[1]);
    uint64_t v4 = a2[5];
    if (v4)
    {
      uint64_t v5 = a2[6];
      __int16 v6 = (void *)a2[5];
      if (v5 != v4)
      {
        do
        {
          uint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
          v5 -= 48;
        }
        while (v5 != v4);
        __int16 v6 = (void *)a2[5];
      }
      a2[6] = v4;
      operator delete(v6);
    }
    unsigned int v8 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v8();
  }
  return result;
}

uint64_t std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,grl::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,grl::Allocator>>::destroy(v3, a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

void std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B1C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B1C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>::__on_zero_shared(uint64_t a1)
{
  return std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(a1 + 24, *(void **)(a1 + 32));
}

void std::__shared_ptr_emplace<grl::codec::IconData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::codec::IconData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<grl::codec::IconData>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208)) {
    *(unsigned char *)(a1 + 208) = 0;
  }
  std::__tree<std::__value_type<unsigned short,grl::codec::PathLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::PathLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::PathLayerData>,grl::Allocator>>::destroy(a1 + 176, *(void *)(a1 + 184));
  std::__tree<std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ImageLayerData>,grl::Allocator>>::destroy(a1 + 144, *(void *)(a1 + 152));
  std::__tree<std::__value_type<unsigned short,grl::codec::TextLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::TextLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::TextLayerData>,grl::Allocator>>::destroy(a1 + 112, *(void *)(a1 + 120));
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 64);
    if (v2)
    {
      *(void *)(a1 + 72) = v2;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), v2, *(void *)(a1 + 80) - v2);
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  return std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy(a1 + 24, v3);
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::codec::PathLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::PathLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::PathLayerData>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::codec::PathLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::PathLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::PathLayerData>,grl::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<unsigned short,grl::codec::PathLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::PathLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::PathLayerData>,grl::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    uint64_t v4 = *(void *)(a2 + 40);
    if (v4)
    {
      *(void *)(a2 + 48) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 64) + 40))(*(void *)(a2 + 64), v4, *(void *)(a2 + 56) - v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ImageLayerData>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ImageLayerData>,grl::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ImageLayerData>,grl::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    uint64_t v4 = *(void *)(a2 + 40);
    if (v4)
    {
      *(void *)(a2 + 48) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 64) + 40))(*(void *)(a2 + 64), v4, *(void *)(a2 + 56) - v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::codec::TextLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::TextLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::TextLayerData>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::codec::TextLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::TextLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::TextLayerData>,grl::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<unsigned short,grl::codec::TextLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::TextLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::TextLayerData>,grl::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    if (*(char *)(a2 + 207) < 0) {
      operator delete(*(void **)(a2 + 184));
    }
    if (*(char *)(a2 + 151) < 0) {
      operator delete(*(void **)(a2 + 128));
    }
    if (*(char *)(a2 + 103) < 0) {
      operator delete(*(void **)(a2 + 80));
    }
    uint64_t v4 = *(void *)(a2 + 40);
    if (v4)
    {
      *(void *)(a2 + 48) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 64) + 40))(*(void *)(a2 + 64), v4, *(void *)(a2 + 56) - v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

os_log_t __GEOGetGeoResourceLibIconManagerLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "IconManager");
  GEOGetGeoResourceLibIconManagerLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoResourceLibCodecLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "Codec");
  GEOGetGeoResourceLibCodecLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoResourceLibRendererLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "Renderer");
  GEOGetGeoResourceLibRendererLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoResourceLibFontLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "Font");
  GEOGetGeoResourceLibFontLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoResourceLibMetricsLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "Metrics");
  GEOGetGeoResourceLibMetricsLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoResourceLibMathLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "Math");
  GEOGetGeoResourceLibMathLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoResourceLibEaselLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "Easel");
  GEOGetGeoResourceLibEaselLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoResourceLibCoreFoundationLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "CoreFoundation");
  GEOGetGeoResourceLibCoreFoundationLog::log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetGeoResourceLibCoreGraphicsLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "CoreGraphics");
  GEOGetGeoResourceLibCoreGraphicsLog::log = (uint64_t)result;
  return result;
}

void *std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__assign_with_size[abi:nn180100]<grl::LayerStyle const*,grl::LayerStyle const*>(void *result, char *__src, char *a3, unint64_t a4)
{
  __int16 v6 = __src;
  uint64_t v7 = result;
  unsigned int v8 = (char *)*result;
  if (result[2] - *result >= a4)
  {
    unsigned int v13 = (unsigned char *)result[1];
    size_t v14 = v13 - v8;
    if (v13 - v8 >= a4)
    {
      size_t v17 = a3 - __src;
      if (v17) {
        os_log_t result = memmove((void *)*result, __src, v17);
      }
      uint64_t v12 = &v8[v17];
    }
    else
    {
      size_t v15 = &__src[v14];
      if (v13 != v8)
      {
        os_log_t result = memmove((void *)*result, __src, v14);
        unsigned int v8 = (char *)v7[1];
      }
      uint64_t v12 = v8;
      if (v15 != a3)
      {
        uint64_t v12 = v8;
        size_t v16 = v8;
        do
        {
          if (v16) {
            *size_t v16 = *v15;
          }
          ++v15;
          ++v16;
          ++v12;
        }
        while (v15 != a3);
      }
    }
  }
  else
  {
    std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__vdeallocate((uint64_t)result);
    if ((a4 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v9 = v7[2] - *v7;
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a4) {
      uint64_t v10 = a4;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    os_log_t result = (void *)std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__vallocate[abi:nn180100]((uint64_t)v7, v11);
    uint64_t v12 = (char *)v7[1];
    while (v6 != a3)
    {
      if (v12) {
        *uint64_t v12 = *v6;
      }
      ++v6;
      ++v12;
    }
  }
  v7[1] = v12;
  return result;
}

void *grl::toString<esl::BlendMode>@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x1B) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = off_1E5AB2898[(char)a1];
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

void grl::IconKey::encode(grl::IconKey *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  char v12 = 0;
  uint64_t v11 = 0;
  *(_DWORD *)unsigned int v13 = *((_DWORD *)this + 4);
  geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)v13, 4);
  if (a2 >= 3)
  {
    *(_WORD *)unsigned int v13 = *((_WORD *)this + 10);
    geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)v13, 2);
  }
  *(_WORD *)unsigned int v13 = *((_WORD *)this + 11);
  geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)v13, 2);
  v13[0] = *((unsigned char *)this + 24);
  geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)v13, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __int16 v6 = v9;
  size_t v7 = v10 - v9;
  if (v10 != v9)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a3, v10 - v9);
    unsigned int v8 = (char *)a3[1];
    memmove(v8, v6, v7);
    a3[1] = &v8[v7];
    __int16 v6 = v9;
  }
  if (v6)
  {
    uint64_t v10 = v6;
    operator delete(v6);
  }
}

void grl::IconKey::~IconKey(grl::IconKey *this)
{
}

uint64_t grl::IconKey::hash(grl::IconKey *this)
{
  return *((void *)this + 1);
}

void grl::ResourceProvider::notifyObserversOfTileGroupChange(grl::ResourceProvider *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 48);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  for (unint64_t i = (uint64_t **)*((void *)this + 3); i; unint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[2] + 16))(i[2]);
  std::mutex::unlock(v2);
}

void grl::ResourceProvider::removeObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::__erase_unique<grl::ResourceObserver *>((void *)(a1 + 8), &v4);
  std::mutex::unlock(v3);
}

os_log_t ___ZL39GEOGetGeoResourceLibResourceProviderLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "ResourceProvider");
  _MergedGlobals_3 = (uint64_t)result;
  return result;
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const,std::allocator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const,std::allocator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t *std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const,std::allocator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 24);
  return std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

uint64_t *std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::__erase_unique<grl::ResourceObserver *>(void *a1, void *a2)
{
  os_log_t result = std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::find<grl::ResourceObserver *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::find<grl::ResourceObserver *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unsigned int v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  os_log_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      os_log_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t grl::ContentScaleToIntegralString(grl *this, float a2)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v5);
  uint64_t v2 = v5[0];
  *(void *)((char *)&v5[2] + *(void *)(v5[0] - 24)) = 0;
  *(_DWORD *)((char *)&v5[1] + *(void *)(v2 - 24)) = *(_DWORD *)((unsigned char *)&v5[1] + *(void *)(v2 - 24)) & 0xFFFFFEFB | 4;
  unint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"x", 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v7);
}

uint64_t grl::IconRenderer::description(grl::IconRenderer *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", size: (", 9);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  unint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", isStretched: ", 15);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", contentScale: ", 16);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", layer count: ", 15);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", layers: [", 11);
  unint64_t v4 = (grl::IconRenderer *)*((void *)this + 4);
  if (v4 != (grl::IconRenderer *)((char *)this + 40))
  {
    do
    {
      uint64_t v5 = *((void *)v4 + 5);
      if (v5)
      {
        (*(void (**)(void **__return_ptr))(*(void *)v5 + 32))(&__p);
        char v6 = (v19 & 0x80u) == 0 ? &__p : (void **)__p;
        uint64_t v7 = (v19 & 0x80u) == 0 ? v19 : v18;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v6, v7);
        if ((char)v19 < 0) {
          operator delete(__p);
        }
      }
      unsigned int v8 = (grl::IconRenderer *)*((void *)v4 + 1);
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          unsigned int v8 = *(grl::IconRenderer **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = (grl::IconRenderer *)*((void *)v4 + 2);
          BOOL v10 = *(void *)v9 == (void)v4;
          unint64_t v4 = v9;
        }
        while (!v10);
      }
      unint64_t v4 = v9;
    }
    while (v9 != (grl::IconRenderer *)((char *)this + 40));
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
  if (*((unsigned char *)this + 72))
  {
    uint64_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", infoLayerData: [", 18);
    grl::codec::InfoLayerData::toString((uint64_t *)&__p, (grl::IconRenderer *)((char *)this + 76));
    char v12 = (v19 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v13 = (v19 & 0x80u) == 0 ? v19 : v18;
    size_t v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
    if ((char)v19 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v21[0] = v15;
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v23);
}

uint64_t grl::IconRenderer::layerCount(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  unint64_t v3 = (void *)(a1 + 40);
  if (v2 == (void *)(a1 + 40))
  {
    return 0;
  }
  else
  {
    unsigned __int16 v5 = 0;
    do
    {
      if (v2[5])
      {
        if (*((unsigned __int16 *)v2 + 16) == a2) {
          ++v5;
        }
      }
      else
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
        }
        char v6 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          int v7 = *((unsigned __int16 *)v2 + 16);
          int v8 = *((unsigned __int16 *)v2 + 17);
          *(_DWORD *)buf = 67110146;
          int v14 = v7;
          __int16 v15 = 1024;
          int v16 = v8;
          __int16 v17 = 2080;
          uint64_t v18 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          __int16 v19 = 2080;
          int64_t v20 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
          __int16 v21 = 1024;
          int v22 = 172;
          _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_ERROR, "Nullptr LayerRenderer found in IconRenderer. This should never occur. LayerType: %hu, LayerIndex: %d: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x28u);
        }
      }
      unint64_t v9 = (void *)v2[1];
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          unint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (void *)v2[2];
          BOOL v11 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
  return v5;
}

_DWORD *std::list<grl::IconLayerMapKey>::push_back(uint64_t *a1, uint64_t a2)
{
  os_log_t result = operator new(0x18uLL);
  result[4] = *(_DWORD *)a2;
  *((unsigned char *)result + 20) = 0;
  if (*(unsigned char *)(a2 + 4))
  {
    *((unsigned char *)result + 21) = *(unsigned char *)(a2 + 5);
    *((unsigned char *)result + 20) = 1;
  }
  uint64_t v5 = *a1;
  *(void *)os_log_t result = *a1;
  *((void *)result + 1) = a1;
  *(void *)(v5 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void *std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::__find_equal<grl::IconLayerMapKey>(uint64_t a1, void *a2, __int16 *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 32;
    do
    {
      while (1)
      {
        int v8 = (void *)v4;
        unint64_t v9 = (__int16 *)(v4 + 32);
        if (!grl::IconLayerMapKey::operator()(v7, a3, (__int16 *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!grl::IconLayerMapKey::operator()(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    char v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::~__func()
{
}

__n128 std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57CC18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57CC18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0,std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0>,void ()(unsigned short,grl::codec::ImageLayerData const&)>::~__func()
{
}

__n128 std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0,std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0>,void ()(unsigned short,grl::codec::ImageLayerData const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EF57CCA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0,std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0>,void ()(unsigned short,grl::codec::ImageLayerData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57CCA8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57EEB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57EEB0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1EF57EEB0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF57EEB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57EE68;
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::~__value_func[abi:nn180100](a1 + 6);
  std::function<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~function(a1 + 1);
  return a1;
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57EE68;
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::~__value_func[abi:nn180100](a1 + 6);
  std::function<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~function(a1 + 1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x50uLL);
  *uint64_t v3 = &unk_1EF57EE68;
  std::__function::__value_func<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::__value_func[abi:nn180100]((uint64_t)(v3 + 1), v2);
  v3[5] = *(void *)(a1 + 40);
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)(v3 + 6), a1 + 48);
  return v3;
}

uint64_t std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57EE68;
  std::__function::__value_func<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(void *)(a1 + 40);
  return std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)(a2 + 6), a1 + 48);
}

void *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::~__value_func[abi:nn180100]((void *)(a1 + 48));
  return std::function<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~function(v1);
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::~__value_func[abi:nn180100](a1 + 6);
  std::function<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~function(v2);
  operator delete(a1);
}

esl::QuartzImage *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, esl::QuartzImage **a2@<X8>)
{
  float v3 = *(float *)(a1 + 40);
  float v4 = *(float *)(a1 + 44);
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v11 = v3 | ((unint64_t)v4 << 32);
  int v10 = 1065353216;
  if (v5)
  {
    char v6 = (grl::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t *, int *))(*(void *)v5 + 48))(v5, &v11, &v10);
    uint64_t v7 = grl::Allocator::instance(v6);
    int v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, 72, 8);
    *int v8 = &unk_1EF582BA8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    __n128 result = esl::QuartzImage::QuartzImage((esl::QuartzImage *)(v8 + 4), v6);
    *a2 = result;
    a2[1] = (esl::QuartzImage *)v8;
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return (esl::QuartzImage *)std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::~__shared_ptr_emplace();
  }
  return result;
}

void std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

uint64_t std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 72);
}

void std::__function::__func<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0,std::allocator<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::~__func()
{
}

__n128 std::__function::__func<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0,std::allocator<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF57CC60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0,std::allocator<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57CC60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void grl::createPlaceholderGlyph(grl *this)
{
  uint64_t v1 = (std::__shared_weak_count *)operator new(0x28uLL);
  v1->__shared_owners_ = 0;
  v1->__shared_weak_owners_ = 0;
  v1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
  esl::QuartzContext::QuartzContext(&v1[1], 3, 64, 64);
  esl::QuartzColor::QuartzColor((esl::QuartzColor *)v3, 1.0, 0.8, 0.8, 1.0);
  ((void (*)(std::__shared_weak_count *, void *))v1[1].__vftable[5].__on_zero_shared_weak)(&v1[1], v3);
  long long v2 = xmmword_1A29CE130;
  ((void (*)(std::__shared_weak_count *, long long *, void))v1[1].__vftable[6].__on_zero_shared)(&v1[1], &v2, 0);
  long long v2 = xmmword_1A29CE140;
  ((void (*)(std::__shared_weak_count *, long long *, void))v1[1].__vftable[6].__on_zero_shared)(&v1[1], &v2, 0);
  ((void (*)(std::__shared_weak_count *))v1[1].__vftable[9].__on_zero_shared_weak)(&v1[1]);
  v3[0] = &unk_1EF554AE8;
  v3[1] = &unk_1EF5590F8;
  if (cf) {
    CFRelease(cf);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
}

uint64_t grl::codec::TextLayerData::toString(grl::codec::TextLayerData *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v95);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)"{ ", 2);
  long long v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)"fillColor: ", 11);
  float v3 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 32);
  float v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)&__p, 1);
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 33);
  char v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&__p, 1);
  uint64_t v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 34);
  int v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  unint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 35);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
  int v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", fillColorSource: ", 19);
  unint64_t v11 = (const char *)&str_10_1;
  if (*((unsigned char *)this + 36) == 1) {
    unint64_t v11 = "TransitLine";
  }
  if (*((unsigned char *)this + 36)) {
    char v12 = (char *)v11;
  }
  else {
    char v12 = "IconPack";
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __int16 v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", fontName: ", 12);
  int v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"", 1);
  int v17 = *((char *)this + 63);
  if (v17 >= 0) {
    uint64_t v18 = (char *)this + 40;
  }
  else {
    uint64_t v18 = (char *)*((void *)this + 5);
  }
  if (v17 >= 0) {
    uint64_t v19 = *((unsigned __int8 *)this + 63);
  }
  else {
    uint64_t v19 = *((void *)this + 6);
  }
  int64_t v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"\"", 1);
  __int16 v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", fontSize: ", 12);
  std::to_string(&__p, *((float *)this + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &__p;
  }
  else {
    int v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned __int8 v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", haloColor: ", 13);
  int64_t v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 68);
  char v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)&__p, 1);
  unsigned int v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 69);
  unsigned int v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)&__p, 1);
  size_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 70);
  uint64_t v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)&__p, 1);
  uint64_t v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 71);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)&__p, 1);
  uint64_t v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", haloWeight: ", 14);
  std::to_string(&__p, *((float *)this + 18));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v33 = &__p;
  }
  else {
    uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  float v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", horizontalPadding: ", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
  long long v36 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
  std::ostream::operator<<();
  float v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextColor: ", 21);
  unint64_t v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 84);
  unint64_t v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)&__p, 1);
  unint64_t v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 85);
  uint64_t v41 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)&__p, 1);
  CFTypeRef v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 86);
  uint64_t v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)&__p, 1);
  uint64_t v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 87);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__p, 1);
  float v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextFontName: ", 24);
  int v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"\"", 1);
  int v47 = *((char *)this + 111);
  if (v47 >= 0) {
    uint64_t v48 = (char *)this + 88;
  }
  else {
    uint64_t v48 = (char *)*((void *)this + 11);
  }
  if (v47 >= 0) {
    uint64_t v49 = *((unsigned __int8 *)this + 111);
  }
  else {
    uint64_t v49 = *((void *)this + 12);
  }
  float v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)"\"", 1);
  long long v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextFontSize: ", 24);
  std::to_string(&__p, *((float *)this + 28));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFTypeRef v52 = &__p;
  }
  else {
    CFTypeRef v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  float v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextHaloColor: ", 25);
  uint64_t v55 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 116);
  BOOL v56 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)&__p, 1);
  float v57 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 117);
  uint64_t v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)&__p, 1);
  float v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 118);
  float v60 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)&__p, 1);
  long long v61 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 119);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)&__p, 1);
  uint64_t v62 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextHaloWeight: ", 26);
  std::to_string(&__p, *((float *)this + 30));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v63 = &__p;
  }
  else {
    long long v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v64 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v65 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", shadowColor: ", 15);
  unsigned int v66 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 124);
  unsigned int v67 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)&__p, 1);
  unsigned int v68 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 125);
  unsigned int v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)&__p, 1);
  unsigned int v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 126);
  unsigned int v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)&__p, 1);
  int64x2_t v72 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 127);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)&__p, 1);
  __int16 v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", shadowOffset: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)"(", 1);
  int64x2_t v74 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)", ", 2);
  std::ostream::operator<<();
  int64x2_t v75 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", shadowWeight: ", 16);
  std::to_string(&__p, *((float *)this + 34));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64x2_t v76 = &__p;
  }
  else {
    int64x2_t v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v77 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int64x2_t v78 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", text: ", 8);
  int v79 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"\"", 1);
  uint64_t v82 = *((void *)this + 18);
  char v81 = (char *)this + 144;
  uint64_t v80 = v82;
  int v83 = v81[23];
  if (v83 >= 0) {
    uint64_t v84 = (uint64_t)v81;
  }
  else {
    uint64_t v84 = v80;
  }
  if (v83 >= 0) {
    uint64_t v85 = v81[23];
  }
  else {
    uint64_t v85 = *((void *)v81 + 1);
  }
  long long v86 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, v84, v85);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)"\"", 1);
  long long v87 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", textPosition: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
  long long v88 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)", ", 2);
  std::ostream::operator<<();
  int v89 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", visible: ", 11);
  std::to_string(&__p, v81[32]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v90 = &__p;
  }
  else {
    size_t v90 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v91 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)" }", 2);
  std::stringbuf::str();
  v95[0] = *MEMORY[0x1E4FBA408];
  uint64_t v92 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v95 + *(void *)(v95[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v96[0] = v92;
  v96[1] = MEMORY[0x1E4FBA470] + 16;
  if (v97 < 0) {
    operator delete((void *)v96[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v98);
}

uint64_t grl::codec::TextLayerData::encode@<X0>(grl::codec::TextLayerData *this@<X0>, void *a2@<X8>)
{
  uint64_t v13 = 0;
  int v14 = (grl::Allocator *)grl::Allocator::instance(this);
  uint64_t v15 = 0;
  char v12 = (uint64_t *)&v13;
  int v17 = 0;
  uint64_t v18 = (grl::Allocator *)grl::Allocator::instance(v14);
  uint64_t v19 = 0;
  int v16 = (uint64_t *)&v17;
  __int16 v21 = 0;
  int v22 = (grl::Allocator *)grl::Allocator::instance(v18);
  uint64_t v23 = 0;
  int64_t v20 = (uint64_t *)&v21;
  int64_t v25 = 0;
  char v26 = (grl::Allocator *)grl::Allocator::instance(v22);
  uint64_t v27 = 0;
  unsigned __int8 v24 = (uint64_t *)&v25;
  size_t v29 = 0;
  uint64_t v30 = (grl::Allocator *)grl::Allocator::instance(v26);
  uint64_t v31 = 0;
  unsigned int v28 = &v29;
  uint64_t v33 = 0;
  std::string::size_type v34 = (grl::Allocator *)grl::Allocator::instance(v30);
  uint64_t v35 = 0;
  uint64_t v32 = (uint64_t *)&v33;
  v37[0] = 0;
  v37[1] = grl::Allocator::instance(v34);
  v37[2] = 0;
  long long v36 = v37;
  *(_WORD *)unint64_t v38 = 5;
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 8);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(void *)unint64_t v38 = ((unint64_t)*((unsigned __int8 *)this + 36) << 32) | 0x23;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v16, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)unint64_t v38 = 24;
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v38[8], *((const std::string::value_type **)this + 5), *((void *)this + 6));
    unsigned __int16 v4 = *(_WORD *)v38;
  }
  else
  {
    *(_OWORD *)&v38[8] = *(_OWORD *)((char *)this + 40);
    uint64_t v39 = *((void *)this + 7);
    unsigned __int16 v4 = 24;
  }
  std::__tree<std::__value_type<grl::PropertyID,std::string>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,std::string>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,std::string>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,std::string>>((uint64_t *)&v36, v4, (uint64_t)v38);
  if (SHIBYTE(v39) < 0) {
    operator delete(*(void **)&v38[8]);
  }
  *(void *)unint64_t v38 = ((unint64_t)*((unsigned int *)this + 16) << 32) | 0x16;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)unint64_t v38 = 6;
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 17);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(void *)unint64_t v38 = ((unint64_t)*((unsigned int *)this + 18) << 32) | 2;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  strcpy(v38, "\n");
  uint64_t v5 = *(void *)((char *)this + 76);
  *(void *)&v38[4] = v5;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v24, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)unint64_t v38 = 26;
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 21);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)unint64_t v38 = 25;
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v38[8], *((const std::string::value_type **)this + 11), *((void *)this + 12));
    unsigned __int16 v6 = *(_WORD *)v38;
  }
  else
  {
    *(_OWORD *)&v38[8] = *(_OWORD *)((char *)this + 88);
    uint64_t v39 = *((void *)this + 13);
    unsigned __int16 v6 = 25;
  }
  std::__tree<std::__value_type<grl::PropertyID,std::string>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,std::string>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,std::string>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,std::string>>((uint64_t *)&v36, v6, (uint64_t)v38);
  if (SHIBYTE(v39) < 0) {
    operator delete(*(void **)&v38[8]);
  }
  *(void *)unint64_t v38 = ((unint64_t)*((unsigned int *)this + 28) << 32) | 0x17;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)unint64_t v38 = 30;
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 29);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(void *)unint64_t v38 = ((unint64_t)*((unsigned int *)this + 30) << 32) | 0x1D;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  strcpy(v38, "\a");
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 31);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)unint64_t v38 = 4;
  uint64_t v7 = *((void *)this + 16);
  *(void *)&v38[4] = v7;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v24, (unsigned __int16 *)v38, (uint64_t)v38);
  *(void *)unint64_t v38 = ((unint64_t)*((unsigned int *)this + 34) << 32) | 3;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)unint64_t v38 = 28;
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v38[8], *((const std::string::value_type **)this + 18), *((void *)this + 19));
    unsigned __int16 v8 = *(_WORD *)v38;
  }
  else
  {
    *(_OWORD *)&v38[8] = *((_OWORD *)this + 9);
    uint64_t v39 = *((void *)this + 20);
    unsigned __int16 v8 = 28;
  }
  std::__tree<std::__value_type<grl::PropertyID,std::string>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,std::string>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,std::string>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,std::string>>((uint64_t *)&v36, v8, (uint64_t)v38);
  if (SHIBYTE(v39) < 0) {
    operator delete(*(void **)&v38[8]);
  }
  if (*((unsigned char *)this + 177))
  {
    *(_WORD *)unint64_t v38 = 31;
    uint64_t v9 = *((void *)this + 21);
    *(void *)&v38[4] = v9;
    std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v24, (unsigned __int16 *)v38, (uint64_t)v38);
  }
  if (*((unsigned char *)this + 176)) {
    int v10 = 65551;
  }
  else {
    int v10 = 15;
  }
  *(_DWORD *)unint64_t v38 = v10;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v12, (unsigned __int16 *)v38, (uint64_t)v38);
  grl::PropertySet::encode((grl::PropertySet *)&v12, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v36, v37[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v32, v33);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v28, v29);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v24, v25);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v20, v21);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v16, v17);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v12, v13);
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned __int16 v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unsigned __int16 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unsigned __int16 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned __int16 v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 32, 8);
    *(_WORD *)(v10 + 26) = *(_WORD *)a3;
    *(_DWORD *)(v10 + 28) = *(_DWORD *)(a3 + 2);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned __int16 v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 14);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unsigned __int16 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unsigned __int16 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned __int16 v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_WORD *)(v10 + 28) = *(_WORD *)a3;
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(a3 + 4);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<grl::PropertyID,std::string>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,std::string>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,std::string>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,std::string>>(uint64_t *result, unsigned __int16 a2, uint64_t a3)
{
  unsigned __int16 v4 = (uint64_t **)result;
  unsigned __int16 v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((unsigned __int16 *)v5 + 16);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unsigned __int16 v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unsigned __int16 v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result[2] + 16))(result[2], 64, 8);
    *(_WORD *)(v9 + 32) = *(_WORD *)a3;
    long long v10 = *(_OWORD *)(a3 + 8);
    *(void *)(v9 + 56) = *(void *)(a3 + 24);
    *(_OWORD *)(v9 + 40) = v10;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    return std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 14);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unsigned __int16 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unsigned __int16 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_WORD *)(v10 + 28) = *(_WORD *)a3;
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(a3 + 4);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 14);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unsigned __int16 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unsigned __int16 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_WORD *)(v10 + 28) = *(_WORD *)a3;
    *(void *)(v10 + 32) = *(void *)(a3 + 4);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unsigned __int16 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unsigned __int16 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 32, 8);
    *(_WORD *)(v10 + 26) = *(_WORD *)a3;
    *(unsigned char *)(v10 + 28) = *(unsigned char *)(a3 + 2);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void grl::codec::ResourcePack::compressData(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  v15.next_in = *(Bytef **)a1;
  v15.avail_in = *(_DWORD *)(a1 + 8) - LODWORD(v15.next_in);
  v15.uLong total_out = 0;
  memset(&v15.zalloc, 0, 24);
  int v4 = deflateInit_(&v15, -1, "1.2.12", 112);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v4)
  {
    unint64_t v5 = *(void *)(a1 + 8) - *(void *)a1;
    if (v5 >> 3 <= 0x200) {
      size_t v6 = 512;
    }
    else {
      size_t v6 = v5 >> 3;
    }
    unint64_t v7 = v5 >> 1;
    if (v7 <= 0x200) {
      size_t v8 = 512;
    }
    else {
      size_t v8 = v7;
    }
    std::vector<unsigned char>::__append(a2, v8);
    do
    {
      uLong total_out = v15.total_out;
      unint64_t v10 = *a2;
      unint64_t v11 = a2[1];
      uLong v12 = v11 - *a2;
      if (v15.total_out >= v12)
      {
        uLong v13 = v12 + v6;
        if (v12 >= v12 + v6)
        {
          if (v12 > v12 + v6)
          {
            LODWORD(v11) = v10 + v13;
            a2[1] = v10 + v13;
          }
        }
        else
        {
          std::vector<unsigned char>::__append(a2, v6);
          uLong total_out = v15.total_out;
          unint64_t v10 = *a2;
          unint64_t v11 = a2[1];
        }
      }
      v15.next_out = (Bytef *)(v10 + total_out);
      v15.avail_out = v11 - (v10 + total_out);
      deflate(&v15, 4);
    }
    while (!v15.avail_out);
    deflateEnd(&v15);
    uLong v14 = a2[1] - *a2;
    if (v15.total_out <= v14)
    {
      if (v15.total_out < v14) {
        a2[1] = *a2 + v15.total_out;
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a2, v15.total_out - v14);
    }
  }
}

uint64_t grl::codec::ResourcePack::fileName@<X0>(grl::codec::ResourcePack *this@<X0>, uint64_t a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v15);
  int v4 = *((char *)this + 31);
  if (v4 >= 0) {
    unint64_t v5 = (char *)this + 8;
  }
  else {
    unint64_t v5 = (char *)*((void *)this + 1);
  }
  if (v4 >= 0) {
    uint64_t v6 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v6 = *((void *)this + 2);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v6);
  if (*((float *)this + 8) != 1.0)
  {
    unint64_t v7 = (grl *)std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"@", 1);
    grl::ContentScaleToIntegralString((uint64_t *)__p, v7, *((float *)this + 8));
    size_t v8 = (v14 & 0x80u) == 0 ? __p : (void **)__p[0];
    unsigned int v9 = (v14 & 0x80u) == 0 ? (void *)v14 : __p[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, (uint64_t)v9);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) == 0) {
    unint64_t v11 = (unsigned char *)a2;
  }
  else {
    unint64_t v11 = *(unsigned char **)a2;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  for (; v10; --v10)
  {
    if (*v11 == 32) {
      *unint64_t v11 = 95;
    }
    ++v11;
  }
  v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v17);
}

void grl::codec::ResourcePack::encodeHeaderAndData(uint64_t a1@<X1>, unsigned __int16 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unsigned __int8 v34 = 0;
  uint64_t v33 = 0;
  geo::obitstream::appendBytes((geo::obitstream *)&v31, *(char **)a1, *(void *)(a1 + 8) - *(void *)a1);
  *(_WORD *)size_t v29 = (unsigned __int16)a2[3];
  geo::obitstream::appendBytes((geo::obitstream *)&v31, (char *)v29, 2);
  unint64_t v5 = a2[3];
  v30[0] = 0;
  v30[1] = (void *)grl::Allocator::instance(v6);
  v30[2] = 0;
  *(void *)size_t v29 = v30;
  int64_t v25 = 0;
  char v26 = 0;
  char v28 = 0;
  uint64_t v27 = 0;
  unint64_t v7 = *a2;
  if (*a2 != (unsigned __int16 *)(a2 + 1))
  {
    uint64_t v8 = 10 * (void)v5 + 66;
    do
    {
      if (*((unsigned char *)v7 + 64))
      {
        grl::codec::ResourcePack::compressData((uint64_t)(v7 + 20), (unint64_t *)&__p);
        if (v28) {
          unsigned int v9 = (uint64_t *)(&v26[v8] - (unsigned char *)v25 + 1);
        }
        else {
          unsigned int v9 = (uint64_t *)(&v26[v8] - (unsigned char *)v25);
        }
        *(void *)uint64_t v35 = v7 + 16;
        std::__tree<std::__value_type<unsigned short,unsigned long long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long long>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,unsigned long long>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v29, v7 + 16, (uint64_t)&std::piecewise_construct, (_WORD **)v35)[5] = v9;
        *(void *)uint64_t v35 = *((void *)v7 + 6) - *((void *)v7 + 5);
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)v35, 8);
        *(void *)uint64_t v35 = v24 - (unsigned char *)__p;
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)v35, 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)__p, v24 - (unsigned char *)__p);
        if (__p)
        {
          unsigned __int8 v24 = __p;
          operator delete(__p);
        }
      }
      else
      {
        if (v28) {
          uint64_t v10 = (uint64_t *)(&v26[v8] - (unsigned char *)v25 + 1);
        }
        else {
          uint64_t v10 = (uint64_t *)(&v26[v8] - (unsigned char *)v25);
        }
        std::string __p = v7 + 16;
        std::__tree<std::__value_type<unsigned short,unsigned long long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long long>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,unsigned long long>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v29, v7 + 16, (uint64_t)&std::piecewise_construct, (_WORD **)&__p)[5] = v10;
        std::string __p = (void *)(*((void *)v7 + 6) - *((void *)v7 + 5));
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)&__p, 8);
        std::string __p = 0;
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)&__p, 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v25, *((char **)v7 + 5), *((void *)v7 + 6) - *((void *)v7 + 5));
      }
      unint64_t v11 = (unsigned __int16 *)*((void *)v7 + 1);
      if (v11)
      {
        do
        {
          uLong v12 = (unsigned __int16 **)v11;
          unint64_t v11 = *(unsigned __int16 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uLong v12 = (unsigned __int16 **)*((void *)v7 + 2);
          BOOL v13 = *v12 == v7;
          unint64_t v7 = (unsigned __int16 *)v12;
        }
        while (!v13);
      }
      unint64_t v7 = (unsigned __int16 *)v12;
    }
    while (v12 != a2 + 1);
    unsigned __int8 v14 = *(void ***)v29;
    if (*(void ***)v29 != v30)
    {
      do
      {
        LOWORD(__p) = *((_WORD *)v14 + 16);
        geo::obitstream::appendBytes((geo::obitstream *)&v31, (char *)&__p, 2);
        std::string __p = v14[5];
        geo::obitstream::appendBytes((geo::obitstream *)&v31, (char *)&__p, 8);
        z_stream v15 = v14[1];
        if (v15)
        {
          do
          {
            char v16 = (void **)v15;
            z_stream v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            char v16 = (void **)v14[2];
            BOOL v13 = *v16 == v14;
            unsigned __int8 v14 = v16;
          }
          while (!v13);
        }
        unsigned __int8 v14 = v16;
      }
      while (v16 != v30);
    }
  }
  geo::obitstream::appendBytes((geo::obitstream *)&v31, (char *)v25, v26 - (unsigned char *)v25);
  unsigned __int8 v17 = v34;
  if (v34)
  {
    uint64_t v18 = (char *)operator new(1uLL);
    *uint64_t v18 = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v31, v18, 1);
    int v19 = v34 & 7;
    unsigned __int8 v34 = (v34 - v17) & 7;
    if (v19 - 1 < v34 - 1) {
      --v32;
    }
    operator delete(v18);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int64_t v20 = v31;
  size_t v21 = v32 - (unsigned char *)v31;
  if (v32 != v31)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a3, v32 - (unsigned char *)v31);
    int v22 = (char *)a3[1];
    memmove(v22, v20, v21);
    a3[1] = &v22[v21];
  }
  if (v25)
  {
    char v26 = v25;
    operator delete(v25);
  }
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)v29, v30[0]);
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
}

void grl::codec::ResourcePack::encodePackInfo(grl::codec::ResourcePack *this@<X0>, __int16 a2@<W1>, void *a3@<X8>)
{
  unint64_t v11 = 0;
  uLong v12 = 0;
  char v14 = 0;
  uint64_t v13 = 0;
  LOWORD(__p.__r_.__value_.__l.__data_) = a2;
  geo::obitstream::appendBytes((geo::obitstream *)&v11, (char *)&__p, 2);
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 8);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v6 = strlen((const char *)p_p);
  geo::obitstream::appendBytes((geo::obitstream *)&v11, (char *)p_p, v6 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)this + 8);
  geo::obitstream::appendBytes((geo::obitstream *)&v11, (char *)&__p, 4);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v7 = v11;
  size_t v8 = v12 - v11;
  if (v12 != v11)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a3, v12 - v11);
    unsigned int v9 = (char *)a3[1];
    memmove(v9, v7, v8);
    a3[1] = &v9[v8];
    unint64_t v7 = v11;
  }
  if (v7)
  {
    uLong v12 = v7;
    operator delete(v7);
  }
}

void grl::PathGenerator::createBalloonFillPath(float *a1@<X0>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582B70;
  unint64_t v5 = esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v4[1]);
  float v6 = *a1;
  float v7 = a1[1];
  float v8 = a1[2];
  float v9 = a1[3];
  *(void *)unint64_t v11 = 0;
  ((void (*)(esl::QuartzPath *, void, unsigned char *, float, float, float, float))v4[1].__vftable[1].__get_deleter)(v5, 0, v11, v6, v7, v8, v9);
  if (((uint64_t (*)(std::__shared_weak_count *))v4[1].__on_zero_shared)(&v4[1]))
  {
    *a2 = v4 + 1;
    a2[1] = v4;
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v10 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v11 = 136315650;
      *(void *)&v11[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      __int16 v12 = 2080;
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/PathGenerator+Balloon.cpp";
      __int16 v14 = 1024;
      int v15 = 98;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_ERROR, "Failed to create a balloon fill path.: Assertion with expression - %s : Failed in file - %s line - %i", v11, 0x1Cu);
    }
    *a2 = 0;
    a2[1] = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void grl::PathGenerator::createRectalloonBodyPath(float32x2_t *a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  float v6 = a1->f32[1];
  float v7 = a1[1].f32[0] - a1->f32[0];
  float v8 = a1[1].f32[1] - v6;
  if (v7 >= v8) {
    float v9 = a1[1].f32[0] - a1->f32[0];
  }
  else {
    float v9 = a1[1].f32[1] - v6;
  }
  if (v8 < v7) {
    float v7 = a1[1].f32[1] - v6;
  }
  if ((float)(v9 / v7) <= 1.5)
  {
    esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)v14);
    esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)v14, a1->f32[0], a1->f32[1]);
    esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)v14, a1[1].f32[0] - a1->f32[0], a1[1].f32[1] - a1->f32[1]);
    esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)v14, 0.5, 0.5);
    esl::QuartzAffineTransform::rotate((esl::QuartzAffineTransform *)v14, a3 + -1.5708);
    pathFromParameters((uint64_t)&unk_1E5AB2A18, &v12);
    uint64_t v10 = v13;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 120))(&v12);
    unint64_t v11 = v13;
    *a2 = v12;
    a2[1] = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    grl::PathGenerator::createLegacyRectalloonBodyPath(a1, a2);
  }
}

uint64_t grl::PathGenerator::createLegacyRectalloonBodyPath@<X0>(float32x2_t *a1@<X0>, void *a2@<X8>)
{
  float32x2_t v4 = vsub_f32(a1[1], *a1);
  int8x8_t v5 = vbic_s8((int8x8_t)v4, (int8x8_t)vcltz_f32(v4));
  if (*(float *)&v5.i32[1] < *(float *)v5.i32) {
    v5.i32[0] = v5.i32[1];
  }
  float v6 = *(float *)v5.i32 * 0.085;
  float v7 = v6 + v6;
  float v8 = operator new(0x28uLL);
  v8[1] = 0;
  v8[2] = 0;
  *float v8 = &unk_1EF582B70;
  float v9 = v8 + 3;
  esl::QuartzPath::QuartzPath((esl::QuartzPath *)(v8 + 3));
  *a2 = v8 + 3;
  a2[1] = v8;
  esl::AffineTransformMakeTranslation(a1->f32[0], a1->f32[1], (uint64_t)v22);
  float v10 = a1[1].f32[1] - a1->f32[1];
  if (v10 < 0.0) {
    float v10 = 0.0;
  }
  (*(void (**)(void *, unsigned char *, double, float))(v8[3] + 32))(v9, v22, 0.0, v10 - v7);
  float v12 = a1->f32[1];
  if ((float)(a1[1].f32[1] - v12) >= 0.0) {
    v11.n128_f32[0] = a1[1].f32[1] - v12;
  }
  else {
    v11.n128_f32[0] = 0.0;
  }
  (*(void (**)(void *, unsigned char *, double, float, float, __n128, float, float))(v8[3] + 48))(v9, v22, 0.0, v11.n128_f32[0] - v6, v6, v11, v6 + v6, v11.n128_f32[0]);
  v13.n128_f32[0] = a1[1].f32[0] - a1->f32[0];
  v14.n128_f32[0] = a1[1].f32[1] - a1->f32[1];
  if (v13.n128_f32[0] < 0.0) {
    v13.n128_f32[0] = 0.0;
  }
  v13.n128_f32[0] = v13.n128_f32[0] - v7;
  if (v14.n128_f32[0] < 0.0) {
    v14.n128_f32[0] = 0.0;
  }
  (*(void (**)(void *, unsigned char *, __n128, __n128))(v8[3] + 40))(v9, v22, v13, v14);
  v17.n128_f32[0] = a1[1].f32[1] - a1->f32[1];
  if ((float)(a1[1].f32[0] - a1->f32[0]) >= 0.0) {
    v16.n128_f32[0] = a1[1].f32[0] - a1->f32[0];
  }
  else {
    v16.n128_f32[0] = 0.0;
  }
  if (v17.n128_f32[0] < 0.0) {
    v17.n128_f32[0] = 0.0;
  }
  v15.n128_f32[0] = v16.n128_f32[0] - v6;
  (*(void (**)(void *, unsigned char *, __n128, __n128, __n128, float, float, float))(v8[3] + 48))(v9, v22, v15, v17, v16, v17.n128_f32[0] - v6, v16.n128_f32[0], v17.n128_f32[0] - v7);
  v18.n128_f32[0] = a1[1].f32[0] - a1->f32[0];
  if (v18.n128_f32[0] < 0.0) {
    v18.n128_f32[0] = 0.0;
  }
  (*(void (**)(void *, unsigned char *, __n128, float))(v8[3] + 40))(v9, v22, v18, v6 + v6);
  v19.n128_f32[0] = a1[1].f32[0] - a1->f32[0];
  if (v19.n128_f32[0] < 0.0) {
    v19.n128_f32[0] = 0.0;
  }
  (*(void (**)(void *, unsigned char *, __n128, float, float, double, float, double))(v8[3] + 48))(v9, v22, v19, v6, v19.n128_f32[0] - v6, 0.0, v19.n128_f32[0] - v7, 0.0);
  (*(void (**)(void *, unsigned char *, float, double))(v8[3] + 40))(v9, v22, v6 + v6, 0.0);
  (*(void (**)(void *, unsigned char *, float, double, double, float, double, float))(v8[3] + 48))(v9, v22, v6, 0.0, 0.0, v6, 0.0, v6 + v6);
  float v20 = a1[1].f32[1] - a1->f32[1];
  if (v20 < 0.0) {
    float v20 = 0.0;
  }
  (*(void (**)(void *, unsigned char *, double, float))(v8[3] + 40))(v9, v22, 0.0, v20 - v7);
  return (*(uint64_t (**)(void *))(v8[3] + 112))(v9);
}

void pathFromParameters(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(__p, *(char **)(a1 + 8));
  grl::parseCommandList((char *)__p, v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, *(char **)(a1 + 8));
  grl::pathFromSVGDescription((char *)__p, (uint64_t)a2);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)__p);
  esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)__p, *(float *)(a1 + 24), *(float *)(a1 + 28));
  CGFloat v4 = esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)__p, *(float *)(a1 + 16), *(float *)(a1 + 20));
  (*(void (**)(uint64_t *__return_ptr, CGFloat))(*(void *)*a2 + 120))(&v8, v4);
  uint64_t v6 = v8;
  int8x8_t v5 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v7 = (std::__shared_weak_count *)a2[1];
  *a2 = v6;
  a2[1] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  __p[0] = v12;
  std::vector<grl::PathCommand>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
}

void grl::PathGenerator::createBalloonTailPath(grl::PathGenerator *this@<X0>, void *a2@<X8>)
{
  transformFromMetrics(this, (esl::QuartzAffineTransform *)v8);
  pathFromParameters((uint64_t)&balloonComponentPathDefinitions, &v6);
  CGFloat v4 = v7;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 120))(&v6);
  int8x8_t v5 = v7;
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

CGFloat transformFromMetrics@<D0>(const grl::PathLayerMetrics *a1@<X0>, esl::QuartzAffineTransform *a2@<X8>)
{
  esl::QuartzAffineTransform::QuartzAffineTransform(a2);
  esl::QuartzAffineTransform::translate(a2, *((float *)a1 + 13), *((float *)a1 + 14));
  esl::QuartzAffineTransform::translate(a2, *((float *)a1 + 27), *((float *)a1 + 28));
  esl::QuartzAffineTransform::rotate(a2, *((float *)a1 + 24) + -1.5708);
  float v4 = *((float *)a1 + 26);
  return esl::QuartzAffineTransform::scale(a2, v4, v4);
}

void grl::PathGenerator::createRectalloonTailPath(grl::PathGenerator *this@<X0>, void *a2@<X8>)
{
  transformFromMetrics(this, (esl::QuartzAffineTransform *)v8);
  pathFromParameters((uint64_t)&unk_1E5AB29F8, &v6);
  float v4 = v7;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 120))(&v6);
  int8x8_t v5 = v7;
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void grl::PathGenerator::createBalloonDotPath(grl::PathGenerator *this@<X0>, float a2@<S0>, void *a3@<X8>)
{
  float v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582B70;
  esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v7[1]);
  transformFromMetrics(this, (esl::QuartzAffineTransform *)v27);
  pathFromParameters((uint64_t)&unk_1E5AB29D8, &v25);
  uint64_t v9 = v25;
  uint64_t v8 = v26;
  uint64_t v25 = 0;
  char v26 = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  float v10 = (*(float (**)(uint64_t))(*(void *)v9 + 104))(v9);
  float v12 = v11;
  float v14 = v13;
  float v16 = v15;
  esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)&v25);
  float v17 = v10 + (float)((float)(v14 - v10) * 0.5);
  float v18 = v12 + (float)((float)(v16 - v12) * 0.5);
  esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)&v25, v17, v18);
  esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)&v25, a2, a2);
  esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)&v25, -v17, -v18);
  esl::AffineTransformConcat((esl *)&v25, (const esl::QuartzAffineTransform *)v27, v19, (uint64_t)&v21);
  long long v28 = v22;
  long long v29 = v23;
  long long v30 = v24;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(*(void *)v9 + 120))(&v21, v9, v27);
  uint64_t v20 = v22;
  *a3 = v21;
  a3[1] = v20;
  if (v20)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    if ((void)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v22);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void grl::PathGenerator::createRectalloonDotPath(grl::PathGenerator *this@<X0>, float a2@<S0>, void *a3@<X8>)
{
  float v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582B70;
  esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v7[1]);
  transformFromMetrics(this, (esl::QuartzAffineTransform *)v27);
  pathFromParameters((uint64_t)&unk_1E5AB2A38, &v25);
  uint64_t v9 = v25;
  uint64_t v8 = v26;
  uint64_t v25 = 0;
  char v26 = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  float v10 = (*(float (**)(uint64_t))(*(void *)v9 + 104))(v9);
  float v12 = v11;
  float v14 = v13;
  float v16 = v15;
  esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)&v25);
  float v17 = v10 + (float)((float)(v14 - v10) * 0.5);
  float v18 = v12 + (float)((float)(v16 - v12) * 0.5);
  esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)&v25, v17, v18);
  esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)&v25, a2, a2);
  esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)&v25, -v17, -v18);
  esl::AffineTransformConcat((esl *)&v25, (const esl::QuartzAffineTransform *)v27, v19, (uint64_t)&v21);
  long long v28 = v22;
  long long v29 = v23;
  long long v30 = v24;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(*(void *)v9 + 120))(&v21, v9, v27);
  uint64_t v20 = v22;
  *a3 = v21;
  a3[1] = v20;
  if (v20)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    if ((void)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v22);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void std::vector<grl::PathCommand>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  long long v2 = *a1;
  if (*v2)
  {
    std::vector<grl::PathCommand>::__clear[abi:nn180100]((uint64_t *)v2);
    float v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<grl::PathCommand>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    float v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *grl::SizeGroupToString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 9) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = off_1E5AB2A58[(char)a1];
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

void grl::PathGenerator::createRectanglePath(float *a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582B70;
  float v7 = esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v6[1]);
  ((void (*)(esl::QuartzPath *, void, float, float))v6[1].__on_zero_shared_weak)(v7, 0, *a1 + a3, a1[1]);
  ((void (*)(std::__shared_weak_count *, void, void, float, float, float, float, double))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, a1[2] - a3, a1[1] + a3, a3, 4.7124, 0.0);
  ((void (*)(std::__shared_weak_count *, void, void, float, float, float, double, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, a1[2] - a3, a1[3] - a3, a3, 0.0, 1.5708);
  ((void (*)(std::__shared_weak_count *, void, void, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, *a1 + a3, a1[3] - a3, a3, 1.5708, 3.1416);
  ((void (*)(std::__shared_weak_count *, void, void, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, *a1 + a3, a1[1] + a3, a3, 3.1416, 4.7124);
  ((void (*)(std::__shared_weak_count *))v6[1].__vftable[2].__on_zero_shared_weak)(&v6[1]);
  if (((uint64_t (*)(std::__shared_weak_count *))v6[1].__on_zero_shared)(&v6[1]))
  {
    *a2 = v6 + 1;
    a2[1] = v6;
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v8 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315650;
      float v10 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      __int16 v11 = 2080;
      float v12 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/PathGenerator.cpp";
      __int16 v13 = 1024;
      int v14 = 43;
      _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_ERROR, "Failed to create rectangular path.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v9, 0x1Cu);
    }
    *a2 = 0;
    a2[1] = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

uint64_t grl::SkipStreamBytes(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (a2)
  {
    unint64_t v5 = v3 + a2;
    if (v5 >= v4) {
      unint64_t v5 = a1[1];
    }
    a1[2] = v5;
  }
  else
  {
    uint64_t v6 = v4 - v3;
    if (v6)
    {
      size_t v7 = 0;
      while (*(unsigned char *)(*a1 + v3 + v7))
      {
        if (v6 == ++v7) {
          return 1;
        }
      }
      std::string::basic_string[abi:nn180100](&__p, (void *)(*a1 + v3), v7);
      a1[2] += v7 + 1;
      if (v10 < 0) {
        operator delete(__p);
      }
    }
  }
  return 1;
}

void *grl::toString<grl::LayerType>@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 4) {
    uint64_t v2 = (char *)&str_10_1;
  }
  else {
    uint64_t v2 = off_1E5AB2AA8[(__int16)a1];
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

void *grl::toString<grl::ShapeType>@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 9) {
    uint64_t v2 = (char *)&str_10_1;
  }
  else {
    uint64_t v2 = off_1E5AB2AD0[(char)a1];
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

uint64_t grl::IconMetrics::size(grl::IconMetrics *this)
{
  return (uint64_t)this + 32;
}

void grl::IconMetrics::setupStretchedIcon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 232))
  {
    unint64_t v5 = (void **)(a3 + 40);
    uint64_t v6 = (void **)(a3 + 72);
    uint64_t LayerRenderer = grl::IconRenderer::findLayerRenderer(a2, 3, 0);
    if (LayerRenderer && *(_WORD *)(LayerRenderer + 8) == 3)
    {
      uint64_t v8 = *v5;
      if (!*v5) {
        goto LABEL_8;
      }
      do
      {
        int v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
      if (v9 == v5 || *((_WORD *)v9 + 14)) {
LABEL_8:
      }
        int v10 = 1;
      else {
        int v10 = 0;
      }
      __int16 v11 = *v6;
      if (*v6)
      {
        do
        {
          float v12 = v11;
          __int16 v11 = (void *)*v11;
        }
        while (v11);
        if (v12 != v6 && ((*((_WORD *)v12 + 14) == 0) & ~v10) != 0) {
          operator new();
        }
      }
      if (GEOGetGeoResourceLibMetricsLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_21_0);
      }
      uint64_t v15 = GEOGetGeoResourceLibMetricsLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        __int16 v31 = 2080;
        uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
        __int16 v33 = 1024;
        int v34 = 427;
        _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "Failed to get text bounds and text baseline for text layer.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)buf, 0x1Cu);
      }
    }
    uint64_t v16 = grl::IconRenderer::findLayerRenderer(a2, 2, 0);
    if (v16)
    {
      if (*(_WORD *)(v16 + 8) == 2) {
        uint64_t v17 = v16 + 16;
      }
      else {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v18 = grl::IconRenderer::findLayerRenderer(a2, 2, 0);
    if (v18 && *(_WORD *)(v18 + 8) == 2 && v17) {
      operator new();
    }
    unsigned __int16 v19 = 0;
    do
    {
      uint64_t v20 = grl::IconRenderer::findLayerRenderer(a2, 3, v19);
      if (!v20) {
        break;
      }
      uint64_t v21 = (float32x2_t *)v20;
      if (*(_WORD *)(v20 + 8) != 3) {
        break;
      }
      uint64_t v22 = grl::IconMetrics::privateLayerMetrics(a1, 3, v19);
      if (!v22)
      {
        if (GEOGetGeoResourceLibMetricsLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_21_0);
        }
        uint64_t v27 = GEOGetGeoResourceLibMetricsLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          __int16 v31 = 2080;
          uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
          __int16 v33 = 1024;
          int v34 = 473;
          _os_log_impl(&dword_1A1780000, v27, OS_LOG_TYPE_ERROR, "Failed to find TextLayerMetrics for a stretched icon.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)buf, 0x1Cu);
        }
        break;
      }
      float32x2_t v23 = vsub_f32(vadd_f32(*(float32x2_t *)(a1 + 16), vmul_f32(vsub_f32(*(float32x2_t *)(a1 + 24), *(float32x2_t *)(a1 + 16)), (float32x2_t)0x3F0000003F000000)), vmul_f32(*(float32x2_t *)(v22 + 44), (float32x2_t)0x3F0000003F000000));
      if (v21[24].i8[1])
      {
        float32x2_t v24 = v21[23];
        float32x2_t v25 = (float32x2_t)v23.u32[0];
        v23.i32[0] = vadd_f32(v23, v24).u32[0];
        v23.i32[1] = vsub_f32(v25, v24).i32[1];
      }
      *(float32x2_t *)(v22 + 52) = v23;
      unsigned int v26 = v19++;
    }
    while (v26 < 4);
    float v28 = ceilf(0.0);
    uint64_t v29 = grl::IconRenderer::findLayerRenderer(a2, 0, 0);
    if (v29 && !*(_WORD *)(v29 + 8)) {
      operator new();
    }
    if (__PAIR64__(LODWORD(v28), LODWORD(v28)))
    {
      *(float *)(a1 + 32) = v28;
      *(float *)(a1 + 36) = v28;
      *(void *)(a1 + 40) = 0;
      *(float *)(a1 + 48) = v28 * 0.5;
      *(float *)(a1 + 52) = v28 * 0.5;
      *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
      *(float *)(a1 + 56) = v28 * 0.5;
      *(float *)(a1 + 60) = v28 * 0.5;
      return;
    }
    if (GEOGetGeoResourceLibMetricsLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_21_0);
    }
    __int16 v13 = GEOGetGeoResourceLibMetricsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      __int16 v31 = 2080;
      uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
      __int16 v33 = 1024;
      int v34 = 513;
      int v14 = "An icon with a size of 0 was generated.: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_54;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibMetricsLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_21_0);
    }
    __int16 v13 = GEOGetGeoResourceLibMetricsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      __int16 v31 = 2080;
      uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
      __int16 v33 = 1024;
      int v34 = 411;
      int v14 = "No common image size found for images used in stretched icon.: Assertion with expression - %s : Failed in fi"
            "le - %s line - %i";
LABEL_54:
      _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)buf, 0x1Cu);
    }
  }
}

float gm::Box<float,2>::create(uint64_t a1)
{
  uint64_t v1 = 0;
  char v2 = 1;
  do
  {
    float v3 = *(float *)(a1 + 4 * v1) * 0.5;
    *((float *)&v7 + v1) = *((float *)&v7 + v1) - v3;
    char v4 = v2;
    *((float *)&v6 + v1) = v3 + *((float *)&v6 + v1);
    uint64_t v1 = 1;
    char v2 = 0;
  }
  while ((v4 & 1) != 0);
  return *(float *)&v7;
}

BOOL gm::Box<float,2>::operator==(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t grl::codec::InfoLayerData::toString(grl::codec::InfoLayerData *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v59);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)"{ ", 2);
  char v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)"alternateImageFamily: ", 22);
  std::to_string(&__p, *(_DWORD *)this);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", alternateImageTextLimit: ", 27);
  std::to_string(&__p, *((_DWORD *)this + 1));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", calloutFillColor: ", 20);
  int v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 8);
  int v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
  __int16 v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 9);
  float v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&__p, 1);
  __int16 v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 10);
  int v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
  uint64_t v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", calloutHaloColor: ", 20);
  uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 12);
  uint64_t v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)&__p, 1);
  unsigned __int16 v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 13);
  uint64_t v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)&__p, 1);
  uint64_t v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 14);
  uint64_t v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)&__p, 1);
  float32x2_t v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)&__p, 1);
  float32x2_t v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", calloutShape: ", 16);
  float32x2_t v25 = (const char *)&str_10_1;
  if (*((unsigned char *)this + 16) == 1) {
    float32x2_t v25 = "Square";
  }
  if (*((unsigned char *)this + 16)) {
    unsigned int v26 = (char *)v25;
  }
  else {
    unsigned int v26 = "Circle";
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v26);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v27 = &__p;
  }
  else {
    uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v27, v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", calloutTextColor: ", 20);
  long long v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 17);
  __int16 v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)&__p, 1);
  uint64_t v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 18);
  __int16 v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)&__p, 1);
  int v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 19);
  uint64_t v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)&__p, 1);
  long long v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)&__p, 1);
  float v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", labelAnnotationIconColor: ", 28);
  unint64_t v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 21);
  uint64_t v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)&__p, 1);
  unint64_t v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 22);
  uint64_t v41 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)&__p, 1);
  CFTypeRef v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 23);
  uint64_t v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)&__p, 1);
  uint64_t v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__p, 1);
  float v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", labelTextColor: ", 18);
  int v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 25);
  int v47 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)&__p, 1);
  uint64_t v48 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 26);
  uint64_t v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)&__p, 1);
  float v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 27);
  long long v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)&__p, 1);
  CFTypeRef v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)&__p, 1);
  std::string::size_type v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", scale: ", 9);
  std::to_string(&__p, *((float *)this + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v54 = &__p;
  }
  else {
    float v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v55 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)" }", 2);
  std::stringbuf::str();
  v59[0] = *MEMORY[0x1E4FBA408];
  uint64_t v56 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v59 + *(void *)(v59[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v60[0] = v56;
  v60[1] = MEMORY[0x1E4FBA470] + 16;
  if (v61 < 0) {
    operator delete((void *)v60[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v62);
}

uint64_t grl::codec::InfoLayerData::encode@<X0>(grl::codec::InfoLayerData *this@<X0>, void *a2@<X8>)
{
  uint64_t v6 = 0;
  std::string::size_type v7 = (grl::Allocator *)grl::Allocator::instance(this);
  uint64_t v8 = 0;
  unint64_t v5 = &v6;
  int v10 = 0;
  __int16 v11 = (grl::Allocator *)grl::Allocator::instance(v7);
  uint64_t v12 = 0;
  int v9 = (uint64_t *)&v10;
  int v14 = 0;
  uint64_t v15 = (grl::Allocator *)grl::Allocator::instance(v11);
  uint64_t v16 = 0;
  __int16 v13 = (uint64_t *)&v14;
  uint64_t v18 = 0;
  unsigned __int16 v19 = (grl::Allocator *)grl::Allocator::instance(v15);
  uint64_t v20 = 0;
  uint64_t v17 = &v18;
  uint64_t v22 = 0;
  float32x2_t v23 = (grl::Allocator *)grl::Allocator::instance(v19);
  uint64_t v24 = 0;
  uint64_t v21 = &v22;
  unsigned int v26 = 0;
  uint64_t v27 = (grl::Allocator *)grl::Allocator::instance(v23);
  uint64_t v28 = 0;
  float32x2_t v25 = (uint64_t *)&v26;
  v30[0] = 0;
  v30[1] = grl::Allocator::instance(v27);
  v30[2] = 0;
  uint64_t v29 = v30;
  *(void *)__int16 v31 = ((unint64_t)*(unsigned int *)this << 32) | 0x14;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v9, v31, (uint64_t)v31);
  *(void *)__int16 v31 = ((unint64_t)*((unsigned int *)this + 1) << 32) | 0x13;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v9, v31, (uint64_t)v31);
  v31[0] = 34;
  *(_DWORD *)&v31[1] = *((_DWORD *)this + 2);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  if (*((unsigned char *)this + 36))
  {
    v31[0] = 27;
    *(_DWORD *)&v31[1] = *((_DWORD *)this + 3);
    std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  }
  *(void *)__int16 v31 = ((unint64_t)*((unsigned __int8 *)this + 16) << 32) | 0x25;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v9, v31, (uint64_t)v31);
  if (*((unsigned char *)this + 37))
  {
    v31[0] = 41;
    *(_DWORD *)&v31[1] = *(_DWORD *)((char *)this + 17);
    std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  }
  v31[0] = 44;
  *(_DWORD *)&v31[1] = *(_DWORD *)((char *)this + 21);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  v31[0] = 38;
  *(_DWORD *)&v31[1] = *(_DWORD *)((char *)this + 25);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  *(void *)__int16 v31 = (unint64_t)*((unsigned int *)this + 8) << 32;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v13, v31, (uint64_t)v31);
  grl::PropertySet::encode((grl::PropertySet *)&v5, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v25, v26);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v21, v22);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v17, v18);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v13, v14);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v9, v10);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v5, v6);
}

void *geo::_retain_ptr<__CFDictionary const*,geo::_retain_cf<__CFDictionary const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF5591F8;
  char v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *geo::_retain_ptr<__CFDictionary *,geo::_retain_cf<__CFDictionary *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559058;
  char v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void grl::createCFString(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 23) >= 0) {
    float v3 = (const char *)a1;
  }
  else {
    float v3 = *(const char **)a1;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  std::string::size_type v7 = &unk_1EF5591D8;
  CFTypeRef cf = v4;
  if (v4)
  {
    *a2 = &unk_1EF5591D8;
    a2[1] = v4;
  }
  else
  {
    if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
    }
    unint64_t v5 = GEOGetGeoResourceLibCoreFoundationLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_ERROR, "Failed to create CFString.", v6, 2u);
    }
    *a2 = &unk_1EF5591D8;
    a2[1] = 0;
    std::string::size_type v7 = &unk_1EF5591D8;
    if (cf) {
      CFRelease(cf);
    }
  }
}

void geo::_retain_ptr<__CFDictionary const*,geo::_retain_cf<__CFDictionary const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF5591F8;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x1A6239270);
}

void geo::_retain_ptr<__CFDictionary *,geo::_retain_cf<__CFDictionary *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559058;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x1A6239270);
}

void grl::FontKey::createDescriptor(void)const::$_0::operator()(uint64_t a1, grl *a2, grl *a3)
{
  grl::createCFMutableDictionary(&v10);
  grl::createCFNumber(a2, &v8);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F24558], value);
  grl::createCFNumber(a3, &v6);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F24548], cf);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)a1 + 8), theDict);
  uint64_t v6 = &unk_1EF5591B8;
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v8 = &unk_1EF5591B8;
  if (value) {
    CFRelease(value);
  }
  int v10 = &unk_1EF559058;
  if (theDict) {
    CFRelease(theDict);
  }
}

void *geo::_retain_ptr<__CFArray const*,geo::_retain_cf<__CFArray const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559358;
  char v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void geo::_retain_ptr<__CFArray const*,geo::_retain_cf<__CFArray const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559358;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t grl::codec::PathLayerData::toString(grl::codec::PathLayerData *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v111);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)"{ ", 2);
  char v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)"blendMode: ", 11);
  grl::toString<esl::BlendMode>(*((unsigned __int8 *)this + 32), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", changeHaloAndShadowOrder: ", 28);
  std::to_string(&__p, *((unsigned __int8 *)this + 33));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", clusterElementHaloColor: ", 27);
  int v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 34);
  int v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
  __int16 v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 35);
  uint64_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&__p, 1);
  __int16 v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 36);
  int v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
  uint64_t v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 37);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", cornerRadius: ", 16);
  std::to_string(&__p, *((float *)this + 10));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &__p;
  }
  else {
    uint64_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned __int16 v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", fillColor: ", 13);
  uint64_t v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 44);
  uint64_t v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)&__p, 1);
  uint64_t v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 45);
  float32x2_t v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)&__p, 1);
  uint64_t v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 46);
  float32x2_t v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)&__p, 1);
  unsigned int v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 47);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)&__p, 1);
  uint64_t v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", fillColorSource: ", 19);
  uint64_t v28 = (const char *)&str_10_1;
  if (*((unsigned char *)this + 48) == 1) {
    uint64_t v28 = "TransitLine";
  }
  if (*((unsigned char *)this + 48)) {
    uint64_t v29 = (char *)v28;
  }
  else {
    uint64_t v29 = "IconPack";
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v30 = &__p;
  }
  else {
    long long v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", fillSize: ", 12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"(", 1);
  __int16 v33 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
  std::ostream::operator<<();
  int v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", fillType: ", 12);
  unint64_t v35 = *((char *)this + 60);
  if (v35 > 2) {
    long long v36 = (char *)&str_10_1;
  }
  else {
    long long v36 = off_1E5AB2B20[v35];
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v36);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v37 = &__p;
  }
  else {
    float v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)v37, v38);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientAngle: ", 17);
  std::to_string(&__p, *((float *)this + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v40 = &__p;
  }
  else {
    unint64_t v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  CFTypeRef v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientEndColor: ", 20);
  uint64_t v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 68);
  uint64_t v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)&__p, 1);
  float v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 69);
  int v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)&__p, 1);
  int v47 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 70);
  uint64_t v48 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)&__p, 1);
  uint64_t v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 71);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)&__p, 1);
  float v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientEndLocation: ", 23);
  std::to_string(&__p, *((float *)this + 18));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v51 = &__p;
  }
  else {
    long long v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientStartColor: ", 22);
  float v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 76);
  std::string::size_type v55 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)&__p, 1);
  uint64_t v56 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 77);
  float v57 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)&__p, 1);
  uint64_t v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 78);
  float v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)&__p, 1);
  float v60 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 79);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)&__p, 1);
  char v61 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientStartLocation: ", 25);
  std::to_string(&__p, *((float *)this + 20));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v62 = &__p;
  }
  else {
    uint64_t v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v63 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientType: ", 16);
  unint64_t v65 = *((char *)this + 84);
  if (v65 > 3) {
    unsigned int v66 = (char *)&str_10_1;
  }
  else {
    unsigned int v66 = off_1E5AB2B38[v65];
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v66);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v67 = &__p;
  }
  else {
    unsigned int v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v68 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)v67, v68);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned int v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", haloColor: ", 13);
  unsigned int v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 85);
  unsigned int v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)&__p, 1);
  int64x2_t v72 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 86);
  __int16 v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)&__p, 1);
  int64x2_t v74 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 87);
  int64x2_t v75 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)&__p, 1);
  int64x2_t v76 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 88);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v76, (uint64_t)&__p, 1);
  std::string::size_type v77 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", haloWeight: ", 14);
  std::to_string(&__p, *((float *)this + 23));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64x2_t v78 = &__p;
  }
  else {
    int64x2_t v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v79 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v79 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v80 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", isClipPath: ", 14);
  std::to_string(&__p, *((unsigned __int8 *)this + 96));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v81 = &__p;
  }
  else {
    char v81 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v82 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v82 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v83 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", scale: ", 9);
  std::to_string(&__p, *((float *)this + 25));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v84 = &__p;
  }
  else {
    uint64_t v84 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v85 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v85 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v86 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", shadowColor: ", 15);
  long long v87 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 104);
  long long v88 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)&__p, 1);
  int v89 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 105);
  size_t v90 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)&__p, 1);
  std::string::size_type v91 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 106);
  uint64_t v92 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v91, (uint64_t)&__p, 1);
  uint64_t v93 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 107);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)&__p, 1);
  char v94 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", shadowOffset: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)"(", 1);
  int16x8_t v95 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)", ", 2);
  std::ostream::operator<<();
  uint64_t v96 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", shadowWeight: ", 16);
  std::to_string(&__p, *((float *)this + 29));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v97 = &__p;
  }
  else {
    char v97 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v98 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v98 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)v97, v98);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v99 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", shapeType: ", 13);
  grl::toString<grl::ShapeType>(*((unsigned __int8 *)this + 120), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v100 = &__p;
  }
  else {
    uint64_t v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v101 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v102 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", tailDirection: ", 17);
  std::to_string(&__p, *((float *)this + 31));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v103 = &__p;
  }
  else {
    unint64_t v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v104 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v104 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v102, (uint64_t)v103, v104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v105 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", visible: ", 11);
  std::to_string(&__p, *((unsigned __int8 *)this + 128));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v106 = &__p;
  }
  else {
    long long v106 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v107 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v107 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v105, (uint64_t)v106, v107);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)" }", 2);
  std::stringbuf::str();
  v111[0] = *MEMORY[0x1E4FBA408];
  uint64_t v108 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v111 + *(void *)(v111[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v112[0] = v108;
  v112[1] = MEMORY[0x1E4FBA470] + 16;
  if (v113 < 0) {
    operator delete((void *)v112[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v114);
}

uint64_t grl::codec::PathLayerData::encode@<X0>(grl::codec::PathLayerData *this@<X0>, void *a2@<X8>)
{
  __int16 v11 = 0;
  uint64_t v12 = (grl::Allocator *)grl::Allocator::instance(this);
  uint64_t v13 = 0;
  int v10 = (uint64_t *)&v11;
  uint64_t v15 = 0;
  uint64_t v16 = (grl::Allocator *)grl::Allocator::instance(v12);
  uint64_t v17 = 0;
  int v14 = (uint64_t *)&v15;
  unsigned __int16 v19 = 0;
  uint64_t v20 = (grl::Allocator *)grl::Allocator::instance(v16);
  uint64_t v21 = 0;
  std::string::size_type v18 = (uint64_t *)&v19;
  float32x2_t v23 = 0;
  uint64_t v24 = (grl::Allocator *)grl::Allocator::instance(v20);
  uint64_t v25 = 0;
  uint64_t v22 = (uint64_t *)&v23;
  uint64_t v27 = 0;
  uint64_t v28 = (grl::Allocator *)grl::Allocator::instance(v24);
  uint64_t v29 = 0;
  unsigned int v26 = &v27;
  std::string::size_type v31 = 0;
  uint64_t v32 = (grl::Allocator *)grl::Allocator::instance(v28);
  uint64_t v33 = 0;
  long long v30 = (uint64_t *)&v31;
  v35[0] = 0;
  v35[1] = grl::Allocator::instance(v32);
  v35[2] = 0;
  int v34 = v35;
  *(void *)long long v36 = ((unint64_t)*((unsigned __int8 *)this + 32) << 32) | 8;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  if (*((unsigned char *)this + 33)) {
    int v4 = 65548;
  }
  else {
    int v4 = 12;
  }
  *(_DWORD *)long long v36 = v4;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v10, (unsigned __int16 *)v36, (uint64_t)v36);
  strcpy(v36, "/");
  *(_DWORD *)&v36[2] = *(_DWORD *)((char *)this + 34);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned int *)this + 10) << 32) | 0xD;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)long long v36 = 5;
  *(_DWORD *)&v36[2] = *((_DWORD *)this + 11);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned __int8 *)this + 48) << 32) | 0x23;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)long long v36 = 1;
  uint64_t v5 = *(void *)((char *)this + 52);
  *(void *)&v36[4] = v5;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v22, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned __int8 *)this + 60) << 32) | 0x12;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned int *)this + 16) << 32) | 0x27;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)long long v36 = 17;
  *(_DWORD *)&v36[2] = *((_DWORD *)this + 17);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned int *)this + 18) << 32) | 0x21;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)long long v36 = 16;
  *(_DWORD *)&v36[2] = *((_DWORD *)this + 19);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned int *)this + 20) << 32) | 0x20;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned __int8 *)this + 84) << 32) | 0x28;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)long long v36 = 6;
  *(_DWORD *)&v36[2] = *(_DWORD *)((char *)this + 85);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned int *)this + 23) << 32) | 2;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  if (*((unsigned char *)this + 96)) {
    int v6 = 65579;
  }
  else {
    int v6 = 43;
  }
  *(_DWORD *)long long v36 = v6;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v10, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = (unint64_t)*((unsigned int *)this + 25) << 32;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  strcpy(v36, "\a");
  *(_DWORD *)&v36[2] = *((_DWORD *)this + 26);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)long long v36 = 4;
  uint64_t v7 = *(void *)((char *)this + 108);
  *(void *)&v36[4] = v7;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v22, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned int *)this + 29) << 32) | 3;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned __int8 *)this + 120) << 32) | 0x15;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  *(void *)long long v36 = ((unint64_t)*((unsigned int *)this + 31) << 32) | 0xE;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  if (*((unsigned char *)this + 128)) {
    int v8 = 65551;
  }
  else {
    int v8 = 15;
  }
  *(_DWORD *)long long v36 = v8;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v10, (unsigned __int16 *)v36, (uint64_t)v36);
  grl::PropertySet::encode((grl::PropertySet *)&v10, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v34, v35[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v30, v31);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v26, v27);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v18, v19);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v14, v15);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v10, v11);
}

void grl::PropertySet::encode(grl::PropertySet *this@<X0>, void *a2@<X8>)
{
  uint64_t v33 = 0;
  int v34 = 0;
  char v36 = 0;
  uint64_t v35 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v33, 0x3E8uLL);
  __int16 v4 = *((void *)this + 3) != 0;
  if (*((void *)this + 7)) {
    ++v4;
  }
  if (*((void *)this + 11)) {
    ++v4;
  }
  if (*((void *)this + 15)) {
    ++v4;
  }
  if (*((void *)this + 19)) {
    ++v4;
  }
  if (*((void *)this + 23)) {
    ++v4;
  }
  if (*((void *)this + 27)) {
    ++v4;
  }
  *(_WORD *)float v37 = v4;
  geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
  if (*((void *)this + 3))
  {
    *(_WORD *)float v37 = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)float v37 = *((void *)this + 3);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    uint64_t v5 = *(grl::PropertySet **)this;
    if (*(grl::PropertySet **)this != (grl::PropertySet *)((char *)this + 8))
    {
      do
      {
        *(_WORD *)float v37 = *((_WORD *)v5 + 13);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        v37[0] = *((unsigned char *)v5 + 28);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        int v6 = (grl::PropertySet *)*((void *)v5 + 1);
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            int v6 = *(grl::PropertySet **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (grl::PropertySet *)*((void *)v5 + 2);
            BOOL v8 = *(void *)v7 == (void)v5;
            uint64_t v5 = v7;
          }
          while (!v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != (grl::PropertySet *)((char *)this + 8));
    }
  }
  if (*((void *)this + 7))
  {
    *(_WORD *)float v37 = 2;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)float v37 = *((void *)this + 7);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    int v9 = (grl::PropertySet *)*((void *)this + 4);
    if (v9 != (grl::PropertySet *)((char *)this + 40))
    {
      do
      {
        *(_WORD *)float v37 = *((_WORD *)v9 + 14);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        *(_DWORD *)float v37 = *((_DWORD *)v9 + 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        int v10 = (grl::PropertySet *)*((void *)v9 + 1);
        if (v10)
        {
          do
          {
            __int16 v11 = v10;
            int v10 = *(grl::PropertySet **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            __int16 v11 = (grl::PropertySet *)*((void *)v9 + 2);
            BOOL v8 = *(void *)v11 == (void)v9;
            int v9 = v11;
          }
          while (!v8);
        }
        int v9 = v11;
      }
      while (v11 != (grl::PropertySet *)((char *)this + 40));
    }
  }
  if (*((void *)this + 11))
  {
    *(_WORD *)float v37 = 1;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)float v37 = *((void *)this + 11);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    uint64_t v12 = (grl::PropertySet *)*((void *)this + 8);
    if (v12 != (grl::PropertySet *)((char *)this + 72))
    {
      do
      {
        *(_WORD *)float v37 = *((_WORD *)v12 + 14);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        *(_DWORD *)float v37 = *((_DWORD *)v12 + 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        uint64_t v13 = (grl::PropertySet *)*((void *)v12 + 1);
        if (v13)
        {
          do
          {
            int v14 = v13;
            uint64_t v13 = *(grl::PropertySet **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            int v14 = (grl::PropertySet *)*((void *)v12 + 2);
            BOOL v8 = *(void *)v14 == (void)v12;
            uint64_t v12 = v14;
          }
          while (!v8);
        }
        uint64_t v12 = v14;
      }
      while (v14 != (grl::PropertySet *)((char *)this + 72));
    }
  }
  if (*((void *)this + 15))
  {
    *(_WORD *)float v37 = 3;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)float v37 = *((void *)this + 15);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    uint64_t v15 = (grl::PropertySet *)*((void *)this + 12);
    if (v15 != (grl::PropertySet *)((char *)this + 104))
    {
      do
      {
        *(_WORD *)float v37 = *((_WORD *)v15 + 14);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        *(_DWORD *)float v37 = *((_DWORD *)v15 + 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        *(_DWORD *)float v37 = *((_DWORD *)v15 + 9);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        uint64_t v16 = (grl::PropertySet *)*((void *)v15 + 1);
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = *(grl::PropertySet **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (grl::PropertySet *)*((void *)v15 + 2);
            BOOL v8 = *(void *)v17 == (void)v15;
            uint64_t v15 = v17;
          }
          while (!v8);
        }
        uint64_t v15 = v17;
      }
      while (v17 != (grl::PropertySet *)((char *)this + 104));
    }
  }
  if (*((void *)this + 19))
  {
    *(_WORD *)float v37 = 4;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)float v37 = *((void *)this + 19);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    std::string::size_type v18 = (grl::PropertySet *)*((void *)this + 16);
    if (v18 != (grl::PropertySet *)((char *)this + 136))
    {
      do
      {
        *(_WORD *)float v37 = *((_WORD *)v18 + 14);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        *(_DWORD *)float v37 = *((_DWORD *)v18 + 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        *(_DWORD *)float v37 = *((_DWORD *)v18 + 9);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        *(_DWORD *)float v37 = *((_DWORD *)v18 + 10);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        *(_DWORD *)float v37 = *((_DWORD *)v18 + 11);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        unsigned __int16 v19 = (grl::PropertySet *)*((void *)v18 + 1);
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            unsigned __int16 v19 = *(grl::PropertySet **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (grl::PropertySet *)*((void *)v18 + 2);
            BOOL v8 = *(void *)v20 == (void)v18;
            std::string::size_type v18 = v20;
          }
          while (!v8);
        }
        std::string::size_type v18 = v20;
      }
      while (v20 != (grl::PropertySet *)((char *)this + 136));
    }
  }
  if (*((void *)this + 23))
  {
    *(_WORD *)float v37 = 5;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)float v37 = *((void *)this + 23);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    uint64_t v21 = (grl::PropertySet *)*((void *)this + 20);
    if (v21 != (grl::PropertySet *)((char *)this + 168))
    {
      do
      {
        *(_WORD *)float v37 = *((_WORD *)v21 + 13);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        v37[0] = *((unsigned char *)v21 + 28);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        v37[0] = *((unsigned char *)v21 + 29);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        v37[0] = *((unsigned char *)v21 + 30);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        v37[0] = *((unsigned char *)v21 + 31);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        uint64_t v22 = (grl::PropertySet *)*((void *)v21 + 1);
        if (v22)
        {
          do
          {
            float32x2_t v23 = v22;
            uint64_t v22 = *(grl::PropertySet **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            float32x2_t v23 = (grl::PropertySet *)*((void *)v21 + 2);
            BOOL v8 = *(void *)v23 == (void)v21;
            uint64_t v21 = v23;
          }
          while (!v8);
        }
        uint64_t v21 = v23;
      }
      while (v23 != (grl::PropertySet *)((char *)this + 168));
    }
  }
  if (*((void *)this + 27))
  {
    *(_WORD *)float v37 = 6;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)float v37 = *((void *)this + 27);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    uint64_t v24 = (void *)*((void *)this + 24);
    uint64_t v25 = (char *)this + 200;
    if (v24 != (void *)((char *)this + 200))
    {
      do
      {
        *(_WORD *)float v37 = *((_WORD *)v24 + 16);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        if (*((char *)v24 + 63) >= 0) {
          unsigned int v26 = (char *)(v24 + 5);
        }
        else {
          unsigned int v26 = (char *)v24[5];
        }
        size_t v27 = strlen(v26);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, v26, v27 + 1);
        uint64_t v28 = (char *)v24[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            uint64_t v28 = *(char **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (char *)v24[2];
            BOOL v8 = *(void *)v29 == (void)v24;
            uint64_t v24 = v29;
          }
          while (!v8);
        }
        uint64_t v24 = v29;
      }
      while (v29 != v25);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v30 = v33;
  size_t v31 = v34 - v33;
  if (v34 != v33)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a2, v34 - v33);
    uint64_t v32 = (char *)a2[1];
    memmove(v32, v30, v31);
    a2[1] = &v32[v31];
    long long v30 = v33;
  }
  if (v30)
  {
    int v34 = v30;
    operator delete(v30);
  }
}

void grl::PropertySet::encodePropertyContext(void *a1@<X8>)
{
  int v9 = 0;
  int v10 = 0;
  char v12 = 0;
  uint64_t v11 = 0;
  unsigned __int8 v13 = 7;
  geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)&v13, 1);
  unsigned int v3 = 0;
  do
  {
    unsigned __int8 v13 = v3;
    geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)&v13, 1);
    unint64_t v4 = 0x41008040401uLL >> (8 * v3);
    if (v3 >= 7) {
      LOBYTE(v4) = 0;
    }
    unsigned __int8 v13 = v4;
    geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)&v13, 1);
  }
  while (v3++ < 6);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v6 = v9;
  size_t v7 = v10 - v9;
  if (v10 != v9)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a1, v10 - v9);
    BOOL v8 = (char *)a1[1];
    memmove(v8, v6, v7);
    a1[1] = &v8[v7];
    int v6 = v9;
  }
  if (v6)
  {
    int v10 = v6;
    operator delete(v6);
  }
}

unsigned char *grl::IconModifiers::setClusterIcon(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t grl::IconModifiers::setGlyphHidden(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1) = a2;
  return this;
}

uint64_t grl::IconModifiers::setLandmark(uint64_t this, char a2)
{
  *(unsigned char *)(this + 5) = a2;
  return this;
}

uint64_t grl::IconModifiers::setSelected(uint64_t this, char a2)
{
  *(unsigned char *)(this + 6) = a2;
  return this;
}

uint64_t grl::IconModifiers::setUseBalloonShape(uint64_t this, char a2)
{
  *(unsigned char *)(this + 7) = a2;
  return this;
}

float grl::IconModifiers::setOpacity(grl::IconModifiers *this, float a2)
{
  float result = fminf(fmaxf(a2, 0.0), 1.0);
  *((float *)this + 2) = result;
  return result;
}

uint64_t grl::IconModifiers::setPathScale(uint64_t this, float a2)
{
  if (!*(unsigned char *)(this + 16)) {
    *(unsigned char *)(this + 16) = 1;
  }
  *(float *)(this + 20) = a2;
  return this;
}

uint64_t grl::IconModifiers::setTailDirection(uint64_t this, float a2)
{
  if (!*(unsigned char *)(this + 44)) {
    *(unsigned char *)(this + 44) = 1;
  }
  *(float *)(this + 48) = a2;
  return this;
}

char *grl::IconModifiers::setClusterIconValues(uint64_t a1, uint64_t a2)
{
  float result = (char *)(a1 + 120);
  if (result != (char *)a2) {
    return std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void *grl::IconModifiers::setImageDataProvider(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  char v2 = (void *)(a1 + 168);
  std::__function::__value_func<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  std::__function::__value_func<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::swap[abi:nn180100](v4, v2);
  return std::function<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~function(v4);
}

char *std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  size_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *size_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = std::vector<unsigned int>::__vallocate[abi:nn180100](v7, v11);
    unsigned __int8 v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      std::string::size_type v18 = v9;
      unsigned __int16 v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    std::string::size_type v18 = v9;
    unsigned __int16 v19 = v16;
LABEL_18:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *char v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned int>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  float result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

char *std::vector<geo::Color<unsigned char,4,(geo::ColorSpace)2>>::__assign_with_size[abi:nn180100]<geo::Color<unsigned char,4,(geo::ColorSpace)2>*,geo::Color<unsigned char,4,(geo::ColorSpace)2>*>(void *a1, int *a2, int *a3, unint64_t a4)
{
  int v6 = a2;
  uint64_t v8 = a1[2];
  float result = (char *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 2)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<unsigned int>::__vallocate[abi:nn180100](a1, v11);
    unsigned __int8 v13 = (char *)a1[1];
    char v12 = (void **)(a1 + 1);
    float result = v13;
    int v14 = v13;
    if (v6 != a3)
    {
      int v14 = result;
      do
      {
        int v15 = *v6++;
        *(_DWORD *)int v14 = v15;
        v14 += 4;
      }
      while (v6 != a3);
    }
    goto LABEL_13;
  }
  std::string::size_type v18 = (char *)a1[1];
  char v12 = (void **)(a1 + 1);
  size_t v17 = v18;
  unint64_t v19 = (v18 - result) >> 2;
  if (v19 >= a4)
  {
    int v14 = result;
    while (v6 != a3)
    {
      for (uint64_t i = 0; i != 4; ++i)
        v14[i] = *((unsigned char *)v6 + i);
      ++v6;
      v14 += 4;
    }
LABEL_13:
    int64_t v16 = v14 - result;
    goto LABEL_24;
  }
  uint64_t v20 = &a2[v19];
  if (v17 != result)
  {
    do
    {
      for (uint64_t j = 0; j != 4; ++j)
        result[j] = *((unsigned char *)v6 + j);
      ++v6;
      result += 4;
    }
    while (v6 != v20);
    float result = (char *)*v12;
  }
  uint64_t v22 = result;
  if (v20 != a3)
  {
    uint64_t v22 = result;
    float32x2_t v23 = result;
    do
    {
      int v24 = *v20++;
      *v23++ = v24;
      v22 += 4;
    }
    while (v20 != a3);
  }
  int64_t v16 = v22 - result;
LABEL_24:
  *char v12 = &result[v16];
  return result;
}

void grl::ResourceManager::~ResourceManager(grl::ResourceManager *this)
{
  *(void *)this = &unk_1EF567028;
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t grl::PathCommand::expectedFloatCount(int a1)
{
  uint64_t result = 0;
  if (!(!v2 & v1))
  {
    switch(a1)
    {
      case 'A':
        goto LABEL_8;
      case 'B':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'I':
      case 'J':
      case 'K':
      case 'N':
      case 'O':
      case 'P':
      case 'R':
      case 'U':
        return result;
      case 'C':
        goto LABEL_9;
      case 'H':
      case 'V':
        goto LABEL_6;
      case 'L':
      case 'M':
      case 'T':
        goto LABEL_5;
      case 'Q':
      case 'S':
        goto LABEL_7;
      default:
        JUMPOUT(0);
    }
  }
  switch(a1)
  {
    case 'a':
LABEL_8:
      uint64_t result = 7;
      break;
    case 'c':
LABEL_9:
      uint64_t result = 6;
      break;
    case 'h':
    case 'v':
LABEL_6:
      uint64_t result = 1;
      break;
    case 'l':
    case 'm':
    case 't':
LABEL_5:
      uint64_t result = 2;
      break;
    case 'q':
    case 's':
LABEL_7:
      uint64_t result = 4;
      break;
    default:
      return result;
  }
  return result;
}

BOOL grl::isSeparatorCharacter(grl *this)
{
  if (this == 44) {
    return 1;
  }
  if ((this & 0x80000000) != 0) {
    int v2 = __maskrune((__darwin_ct_rune_t)this, 0x4000uLL);
  }
  else {
    int v2 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * this + 60) & 0x4000;
  }
  return v2 != 0;
}

void grl::parseCommandList(char *a1@<X0>, char **a2@<X8>)
{
  char v60 = 0;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  char v3 = a1[23];
  if (v3 >= 0) {
    uint64_t v4 = (unsigned __int8 *)a1;
  }
  else {
    uint64_t v4 = *(unsigned __int8 **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  char v61 = a2;
  while (2)
  {
    int v6 = &v4[v5];
    uint64_t v7 = -v5;
    uint64_t v8 = (char *)v4;
    do
    {
      unsigned int v9 = (char)*v4++;
      BOOL isSeparatorCharacter = grl::isSeparatorCharacter((grl *)v9);
      uint64_t v11 = v7 + 1;
      ++v8;
    }
    while (isSeparatorCharacter && v7++ != 0);
    if (v11 == 1) {
      return;
    }
    int v13 = (char)*(v4 - 1);
    if (v13 <= 96)
    {
      int v14 = 77;
      switch(*(v4 - 1))
      {
        case 'A':
          int v14 = 65;
          goto LABEL_39;
        case 'B':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'I':
        case 'J':
        case 'K':
        case 'N':
        case 'O':
        case 'P':
        case 'R':
        case 'U':
          goto LABEL_123;
        case 'C':
          int v14 = 67;
          goto LABEL_39;
        case 'H':
          int v14 = 72;
          goto LABEL_39;
        case 'L':
          int v14 = 76;
          goto LABEL_39;
        case 'M':
          goto LABEL_39;
        case 'Q':
          int v14 = 81;
          goto LABEL_39;
        case 'S':
          int v14 = 83;
          goto LABEL_39;
        case 'T':
          int v14 = 84;
          goto LABEL_39;
        case 'V':
          int v14 = 86;
          goto LABEL_39;
        default:
          if (v13 != 90) {
            goto LABEL_123;
          }
          goto LABEL_23;
      }
    }
    switch(*(v4 - 1))
    {
      case 'a':
        int v14 = 97;
        goto LABEL_39;
      case 'b':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'i':
      case 'j':
      case 'k':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
      case 'u':
        goto LABEL_123;
      case 'c':
        int v14 = 99;
        goto LABEL_39;
      case 'h':
        int v14 = 104;
        goto LABEL_39;
      case 'l':
        int v14 = 108;
        goto LABEL_39;
      case 'm':
        int v14 = 109;
        goto LABEL_39;
      case 'q':
        int v14 = 113;
        goto LABEL_39;
      case 's':
        int v14 = 115;
        goto LABEL_39;
      case 't':
        int v14 = 116;
        goto LABEL_39;
      case 'v':
        int v14 = 118;
        goto LABEL_39;
      default:
        if (v13 == 122)
        {
LABEL_23:
          int v14 = 90;
LABEL_39:
          uint64_t v63 = -v11;
          unint64_t v65 = 0;
          unsigned int v66 = 0;
          unint64_t v67 = 0;
          buf[0] = v14;
          if (grl::PathCommand::expectedFloatCount(v14))
          {
            int v62 = v14;
            int v15 = 0;
            int64_t v16 = 0;
            unint64_t v17 = 0;
            std::string::size_type v18 = v4;
            while (1)
            {
              unint64_t v19 = v18 - 1;
              uint64_t v20 = v18 - 1;
              do
              {
                uint64_t v21 = v18;
                unsigned int v22 = (char)*++v20;
                BOOL v23 = grl::isSeparatorCharacter((grl *)v22);
                std::string::size_type v18 = v21 + 1;
                ++v19;
              }
              while (v23);
              if (v20 == v6)
              {
                uint64_t v21 = v6;
                goto LABEL_82;
              }
              uint64_t v24 = *v20;
              if (v24 > 0x2E || ((1 << v24) & 0x680000000000) == 0)
              {
                if ((v24 & 0x80) != 0) {
                  goto LABEL_82;
                }
                if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v24 + 60) & 0x400) == 0) {
                  break;
                }
              }
              size_t __idx = 0;
              unint64_t v26 = v6 - v19;
              if ((unint64_t)(v6 - v19) >= 0x7FFFFFFFFFFFFFF8) {
                goto LABEL_127;
              }
              if (v26 > 0x16)
              {
                uint64_t v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v26 | 7) != 0x17) {
                  uint64_t v28 = v26 | 7;
                }
                uint64_t v29 = v28 + 1;
                p_str = operator new(v28 + 1);
                __str.__r_.__value_.__l.__size_ = v6 - v19;
                __str.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
              }
              else
              {
                *((unsigned char *)&__str.__r_.__value_.__s + 23) = (_BYTE)v6 - (_BYTE)v19;
                p_str = &__str;
              }
              uint64_t v30 = 0;
              do
              {
                p_str[v30] = v20[v30];
                ++v30;
              }
              while (&v20[v30] != v6);
              p_str[v30] = 0;
              float v31 = std::stof(&__str, &__idx);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (!__idx) {
                goto LABEL_83;
              }
              if ((unint64_t)v15 >= v17)
              {
                uint64_t v33 = (v15 - v16) >> 2;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62) {
                  goto LABEL_127;
                }
                if ((uint64_t)(v17 - (void)v16) >> 1 > v34) {
                  unint64_t v34 = (uint64_t)(v17 - (void)v16) >> 1;
                }
                if (v17 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v34;
                }
                if (v35) {
                  unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v35);
                }
                else {
                  uint64_t v36 = 0;
                }
                float v37 = (float *)(v35 + 4 * v33);
                *float v37 = v31;
                uint64_t v32 = (char *)(v37 + 1);
                while (v15 != v16)
                {
                  int v38 = *((_DWORD *)v15 - 1);
                  v15 -= 4;
                  *((_DWORD *)v37-- - 1) = v38;
                }
                unint64_t v17 = v35 + 4 * v36;
                unint64_t v65 = v37;
                unsigned int v66 = v32;
                unint64_t v67 = v17;
                if (v16) {
                  operator delete(v16);
                }
                int64_t v16 = (char *)v37;
              }
              else
              {
                *(float *)int v15 = v31;
                uint64_t v32 = v15 + 4;
              }
              unsigned int v66 = v32;
              std::string::size_type v18 = &v20[__idx];
              int v15 = v32;
            }
            uint64_t v21 = v20;
LABEL_82:
            unint64_t v19 = v21;
LABEL_83:
            v4 += v19 - (unsigned __int8 *)v8;
            uint64_t v5 = v63 - (v19 - (unsigned __int8 *)v8);
            if (v65 == (float *)v15)
            {
              a2 = v61;
              if (qword_1EB34D548 != -1) {
                dispatch_once(&qword_1EB34D548, &__block_literal_global_3);
              }
              int v47 = _MergedGlobals_4;
              if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
              {
                LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
                HIDWORD(__str.__r_.__value_.__r.__words[0]) = v62;
                _os_log_impl(&dword_1A1780000, v47, OS_LOG_TYPE_ERROR, "Error reading arguments for command: %c", (uint8_t *)&__str, 8u);
              }
              char v48 = 0;
              char v60 = 1;
              if (!v15) {
                goto LABEL_115;
              }
LABEL_114:
              unsigned int v66 = v15;
              operator delete(v15);
              goto LABEL_115;
            }
            a2 = v61;
            LOBYTE(v14) = v62;
          }
          else
          {
            uint64_t v5 = v63;
          }
          unint64_t v40 = (unint64_t)a2[1];
          unint64_t v39 = (unint64_t)a2[2];
          if (v40 < v39)
          {
            *(unsigned char *)unint64_t v40 = v14;
            std::string::size_type v41 = (char *)(v40 + 32);
            std::vector<float>::vector((void *)(v40 + 8), (uint64_t)&v65);
            goto LABEL_113;
          }
          uint64_t v42 = (uint64_t)(v40 - (void)*a2) >> 5;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59) {
LABEL_127:
          }
            abort();
          uint64_t v44 = v39 - (void)*a2;
          if (v44 >> 4 > v43) {
            unint64_t v43 = v44 >> 4;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            if (v45 >> 59) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int v46 = (char *)operator new(32 * v45);
          }
          else
          {
            int v46 = 0;
          }
          float v50 = &v46[32 * v45];
          uint64_t v49 = &v46[32 * v42];
          *uint64_t v49 = v14;
          std::string::size_type v41 = v49 + 32;
          std::vector<float>::vector((void *)v49 + 1, (uint64_t)&v65);
          long long v51 = *a2;
          std::string::size_type v52 = a2[1];
          if (v52 == *a2)
          {
            *a2 = v49;
            a2[2] = v50;
            if (v52) {
              goto LABEL_112;
            }
          }
          else
          {
            uint64_t v53 = 0;
            do
            {
              float v54 = &v49[v53];
              std::string::size_type v55 = &v52[v53];
              *(v54 - 32) = v52[v53 - 32];
              *((void *)v54 - 2) = 0;
              *((void *)v54 - 1) = 0;
              *((void *)v54 - 3) = 0;
              *(_OWORD *)(v54 - 24) = *(_OWORD *)&v52[v53 - 24];
              *((void *)v54 - 1) = *(void *)&v52[v53 - 8];
              *((void *)v55 - 3) = 0;
              *((void *)v55 - 2) = 0;
              *((void *)v55 - 1) = 0;
              v53 -= 32;
            }
            while (&v52[v53] != v51);
            uint64_t v56 = a2;
            std::string::size_type v52 = *a2;
            float v57 = a2[1];
            void *v56 = &v49[v53];
            v56[2] = v50;
            while (v57 != v52)
            {
              uint64_t v58 = (void *)*((void *)v57 - 3);
              if (v58)
              {
                *((void *)v57 - 2) = v58;
                operator delete(v58);
              }
              v57 -= 32;
            }
            a2 = v61;
            if (v52) {
LABEL_112:
            }
              operator delete(v52);
          }
LABEL_113:
          a2[1] = v41;
          char v48 = 1;
          int v15 = (char *)v65;
          if (v65) {
            goto LABEL_114;
          }
LABEL_115:
          if ((v48 & 1) == 0)
          {
            if ((v60 & 1) == 0)
            {
              *(void *)buf = a2;
              std::vector<grl::PathCommand>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
            }
            return;
          }
          continue;
        }
LABEL_123:
        if (qword_1EB34D548 != -1) {
          dispatch_once(&qword_1EB34D548, &__block_literal_global_3);
        }
        float v59 = _MergedGlobals_4;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A1780000, v59, OS_LOG_TYPE_ERROR, "Unrecognized character while parsing command type", buf, 2u);
        }
        return;
    }
  }
}

void grl::pathFromSVGDescription(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  grl::parseCommandList(a1, &v145);
  *(void *)buf = grl::Allocator::instance(v3);
  _ZNSt3__115allocate_sharedB8nn180100IN3esl10QuartzPathEN3geo12StdAllocatorIS2_N3grl9AllocatorEEEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf, (esl::QuartzPath **)a2);
  uint64_t v4 = v145;
  uint64_t v5 = v146;
  if (v145 != v146)
  {
    uint64_t v6 = 0;
    float v7 = 0.0;
    float v8 = 0.0;
    float v9 = 0.0;
    float v10 = 0.0;
    uint64_t v128 = a2;
    do
    {
      v142[0] = *v4;
      std::vector<float>::vector(&__p, (uint64_t)(v4 + 8));
      int v11 = v142[0];
      if (!(!v125 & v12))
      {
        switch(v142[0])
        {
          case 'A':
            goto LABEL_32;
          case 'B':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'I':
          case 'J':
          case 'K':
          case 'N':
          case 'O':
          case 'P':
          case 'R':
          case 'U':
            goto LABEL_114;
          case 'C':
            goto LABEL_68;
          case 'H':
          case 'V':
            goto LABEL_7;
          case 'L':
          case 'M':
            goto LABEL_22;
          case 'Q':
            goto LABEL_74;
          case 'S':
            goto LABEL_80;
          case 'T':
            goto LABEL_88;
          default:
            JUMPOUT(0);
        }
      }
      switch(v142[0])
      {
        case 'a':
LABEL_32:
          int v38 = *(esl::QuartzPath **)a2;
          float v37 = *(std::__shared_weak_count **)(a2 + 8);
          if (v37) {
            atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v39 = (char *)__p;
          uint64_t v40 = v144 - (unsigned char *)__p;
          unint64_t v41 = grl::PathCommand::expectedFloatCount((char)v11);
          if (v41 <= v40 >> 2)
          {
            unint64_t v42 = 0;
            float v129 = v10;
            float v135 = v9;
            do
            {
              unint64_t v43 = (float *)&v39[4 * v41 * v42];
              float v44 = *v43;
              float v45 = v43[1];
              float v46 = v43[2];
              float v47 = v43[3];
              float v48 = v43[4];
              grl::pointAtIndex((uint64_t)v142, v41 * v42 + 5);
              if (v44 == 0.0 || v45 == 0.0)
              {
                (*(void (**)(esl::QuartzPath *, void))(*(void *)v38 + 40))(v38, 0);
                float v9 = v135;
              }
              else
              {
                float v132 = v48;
                int v51 = v48 > 0.0;
                float v138 = fabsf(v44);
                float v140 = fabsf(v45);
                int v52 = v47 <= 0.0;
                float v53 = v49;
                float v54 = v50;
                float v131 = (float)(v46 / 180.0) * 3.1416;
                __float2 v55 = __sincosf_stret(v131);
                float v133 = v54;
                float v134 = v53;
                float v56 = (float)((float)(v55.__cosval * (float)(v53 - v8)) * 0.5)
                    + (float)((float)(v55.__sinval * (float)(v54 - v7)) * 0.5);
                float v57 = (float)((float)(v55.__cosval * (float)(v54 - v8)) * 0.5)
                    - (float)((float)((float)(v53 - v8) * v55.__sinval) * 0.5);
                float v58 = (float)((float)(v57 * v57) / (float)(v45 * v45))
                    + (float)((float)(v56 * v56) / (float)(v44 * v44));
                float v59 = sqrtf(v58);
                if (v58 <= 1.0) {
                  float v60 = 1.0;
                }
                else {
                  float v60 = v59;
                }
                float v61 = v140 * v60;
                float v62 = v138 * v60;
                float v63 = sqrtf((float)((float)((float)((float)(v44 * v44) * (float)(v45 * v45))- (float)((float)(v44 * v44) * (float)(v57 * v57)))- (float)((float)(v45 * v45) * (float)(v56 * v56)))/ (float)((float)((float)(v45 * v45) * (float)(v56 * v56))+ (float)((float)(v44 * v44) * (float)(v57 * v57))));
                if (v52 != v51) {
                  float v63 = -v63;
                }
                float v137 = (float)((float)(v57 * v62) / v61) * v63;
                float v139 = v138 * v60;
                float v64 = (float)(v56 - v137) / v62;
                float v136 = (float)((float)(v56 * v61) / v62) * v63;
                float v141 = v140 * v60;
                float v65 = (float)(v57 - v136) / v61;
                float v66 = sqrtf((float)((float)(v64 * v64) + 0.0) + (float)(v65 * v65));
                float v67 = (float)((float)(v64 + 0.0) + (float)(v65 * 0.0)) / v66;
                float v68 = -1.0;
                float v69 = -1.0;
                if (v67 >= -1.0)
                {
                  float v69 = (float)((float)(v64 + 0.0) + (float)(v65 * 0.0)) / v66;
                  if (v67 > 1.0) {
                    float v69 = 1.0;
                  }
                }
                float v70 = fabsf(acosf(v69));
                if ((float)(v65 - (float)(v64 * 0.0)) < 0.0) {
                  float v70 = -v70;
                }
                float v130 = v70;
                float v71 = (float)((float)-v56 - v137) / v139;
                float v72 = (float)((float)-v57 - v136) / v141;
                float v73 = (float)((float)((float)(v64 * v71) + 0.0) + (float)(v65 * v72))
                    / (float)(v66 * sqrtf((float)((float)(v71 * v71) + 0.0) + (float)(v72 * v72)));
                if (v73 >= -1.0)
                {
                  float v68 = v73;
                  if (v73 > 1.0) {
                    float v68 = 1.0;
                  }
                }
                float v74 = fabsf(acosf(v68));
                if ((float)((float)(v64 * v72) - (float)(v65 * v71)) < 0.0) {
                  float v74 = -v74;
                }
                float v10 = v129;
                if (v132 <= 0.0 || v74 >= 0.0)
                {
                  if (v74 > 0.0 && v132 <= 0.0) {
                    float v75 = v74 + -6.2832;
                  }
                  else {
                    float v75 = v74;
                  }
                }
                else
                {
                  float v75 = v74 + 6.2832;
                }
                float v9 = v135;
                esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)buf);
                esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)buf, (float)((float)(v8 + v134) * 0.5)+ (float)((float)(v55.__cosval * v137) - (float)(v55.__sinval * v136)), (float)((float)(v7 + v133) * 0.5)+ (float)((float)(v55.__cosval * v136) + (float)(v55.__sinval * v137)));
                esl::QuartzAffineTransform::rotate((esl::QuartzAffineTransform *)buf, v131);
                esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)buf, v139, v141);
                (*(void (**)(esl::QuartzPath *, BOOL, uint8_t *, double, double, float, float, float))(*(void *)v38 + 72))(v38, v132 > 0.0, buf, 0.0, 0.0, 1.0, v130, v130 + v75);
                float v7 = v133;
                float v8 = v134;
              }
              ++v42;
              unint64_t v39 = (char *)__p;
              unint64_t v77 = (v144 - (unsigned char *)__p) >> 2;
              unint64_t v41 = grl::PathCommand::expectedFloatCount(v142[0]);
            }
            while (v42 < v77 / v41);
          }
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
          a2 = v128;
          break;
        case 'b':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'i':
        case 'j':
        case 'k':
        case 'n':
        case 'o':
        case 'p':
        case 'r':
        case 'u':
          goto LABEL_114;
        case 'c':
LABEL_68:
          int64x2_t v78 = *(esl::QuartzPath **)a2;
          uint64_t v29 = *(std::__shared_weak_count **)(a2 + 8);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v79 = v144 - (unsigned char *)__p;
          unint64_t v80 = grl::PathCommand::expectedFloatCount((char)v11);
          if (v80 <= v79 >> 2)
          {
            unint64_t v81 = 0;
            do
            {
              unint64_t v82 = v80 * v81;
              grl::pointAtIndex((uint64_t)v142, v80 * v81);
              float v84 = v83;
              float v86 = v85;
              grl::pointAtIndex((uint64_t)v142, v82 + 2);
              float v10 = v87;
              float v9 = v88;
              grl::pointAtIndex((uint64_t)v142, v82 + 4);
              float v8 = v89;
              float v7 = v90;
              (*(void (**)(esl::QuartzPath *, void, float, float, float, float, float, float))(*(void *)v78 + 48))(v78, 0, v84, v86, v10, v9, v89, v90);
              ++v81;
              unint64_t v91 = (v144 - (unsigned char *)__p) >> 2;
              unint64_t v80 = grl::PathCommand::expectedFloatCount(v142[0]);
            }
            while (v81 < v91 / v80);
          }
          goto LABEL_96;
        case 'h':
        case 'v':
LABEL_7:
          int v13 = v5;
          uint64_t v14 = v6;
          int64_t v16 = *(esl::QuartzPath **)a2;
          int v15 = *(std::__shared_weak_count **)(a2 + 8);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v17 = v11 - 97;
          BOOL v18 = (v11 - 97) < 0x16;
          unint64_t v19 = (float *)__p;
          uint64_t v20 = v144 - (unsigned char *)__p;
          unint64_t v21 = grl::PathCommand::expectedFloatCount((char)v11);
          if (v21 <= v20 >> 2)
          {
            unint64_t v22 = 0;
            char v23 = v11 & 0xDF;
            unsigned int v24 = v18 & (0x2D1885u >> v17);
            do
            {
              float v25 = v19[v21 * v22];
              if (v24)
              {
                float v26 = v7 + v25;
                float v27 = v8 + v25;
                if (v23 == 72) {
                  float v8 = v27;
                }
                else {
                  float v7 = v26;
                }
              }
              else if (v23 == 72)
              {
                float v8 = v19[v21 * v22];
              }
              else
              {
                float v7 = v19[v21 * v22];
              }
              (*(void (**)(esl::QuartzPath *, void, float, float))(*(void *)v16 + 40))(v16, 0, v8, v7);
              ++v22;
              unint64_t v19 = (float *)__p;
              unint64_t v28 = (v144 - (unsigned char *)__p) >> 2;
              unint64_t v21 = grl::PathCommand::expectedFloatCount(v142[0]);
            }
            while (v22 < v28 / v21);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v6 = v14;
          uint64_t v5 = v13;
          a2 = v128;
          break;
        case 'l':
        case 'm':
LABEL_22:
          uint64_t v30 = *(esl::QuartzPath **)a2;
          uint64_t v29 = *(std::__shared_weak_count **)(a2 + 8);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v31 = v144 - (unsigned char *)__p;
          unint64_t v32 = grl::PathCommand::expectedFloatCount((char)v11);
          if (v32 <= v31 >> 2)
          {
            unint64_t v33 = 0;
            do
            {
              grl::pointAtIndex((uint64_t)v142, v32 * v33);
              float v8 = v34.n128_f32[0];
              float v7 = v35.n128_f32[0];
              if (v33 || (v142[0] | 0x20) != 0x6D) {
                (*(void (**)(esl::QuartzPath *, void, __n128, __n128))(*(void *)v30 + 40))(v30, 0, v34, v35);
              }
              else {
                (*(void (**)(esl::QuartzPath *, void, __n128, __n128))(*(void *)v30 + 32))(v30, 0, v34, v35);
              }
              ++v33;
              unint64_t v36 = (v144 - (unsigned char *)__p) >> 2;
              unint64_t v32 = grl::PathCommand::expectedFloatCount(v142[0]);
            }
            while (v33 < v36 / v32);
          }
          goto LABEL_96;
        case 'q':
LABEL_74:
          uint64_t v92 = *(esl::QuartzPath **)a2;
          uint64_t v29 = *(std::__shared_weak_count **)(a2 + 8);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v93 = v144 - (unsigned char *)__p;
          unint64_t v94 = grl::PathCommand::expectedFloatCount((char)v11);
          if (v94 <= v93 >> 2)
          {
            unint64_t v95 = 0;
            do
            {
              unint64_t v96 = v94 * v95;
              grl::pointAtIndex((uint64_t)v142, v94 * v95);
              float v10 = v97;
              float v9 = v98;
              grl::pointAtIndex((uint64_t)v142, v96 + 2);
              float v8 = v99;
              float v7 = v100;
              (*(void (**)(esl::QuartzPath *, void))(*(void *)v92 + 56))(v92, 0);
              ++v95;
              unint64_t v101 = (v144 - (unsigned char *)__p) >> 2;
              unint64_t v94 = grl::PathCommand::expectedFloatCount(v142[0]);
            }
            while (v95 < v101 / v94);
          }
          goto LABEL_96;
        case 's':
LABEL_80:
          unint64_t v102 = *(esl::QuartzPath **)a2;
          uint64_t v29 = *(std::__shared_weak_count **)(a2 + 8);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (((v6 - 67) >> 4) & 0xFC | (16 * (v6 - 67)))
          {
            float v10 = v8;
            float v9 = v7;
          }
          uint64_t v103 = v144 - (unsigned char *)__p;
          unint64_t v104 = grl::PathCommand::expectedFloatCount((char)v11);
          if (v104 <= v103 >> 2)
          {
            unint64_t v105 = 0;
            do
            {
              unint64_t v106 = v104 * v105;
              float v107 = v8 + (float)(v8 - v10);
              float v108 = v7 + (float)(v7 - v9);
              grl::pointAtIndex((uint64_t)v142, v104 * v105);
              float v10 = v109;
              float v9 = v110;
              grl::pointAtIndex((uint64_t)v142, v106 + 2);
              float v8 = v111;
              float v7 = v112;
              (*(void (**)(esl::QuartzPath *, void, float, float, float, float, float, float))(*(void *)v102 + 48))(v102, 0, v107, v108, v10, v9, v111, v112);
              ++v105;
              unint64_t v113 = (v144 - (unsigned char *)__p) >> 2;
              unint64_t v104 = grl::PathCommand::expectedFloatCount(v142[0]);
            }
            while (v105 < v113 / v104);
          }
          goto LABEL_96;
        case 't':
LABEL_88:
          uint64_t v114 = *(esl::QuartzPath **)a2;
          uint64_t v29 = *(std::__shared_weak_count **)(a2 + 8);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v6 - 81 > 0x23
            || ((1 << (v6 - 81)) & 0x900000009) == 0)
          {
            float v10 = v8;
            float v9 = v7;
          }
          uint64_t v115 = v144 - (unsigned char *)__p;
          unint64_t v116 = grl::PathCommand::expectedFloatCount((char)v11);
          if (v116 <= v115 >> 2)
          {
            unint64_t v117 = 0;
            do
            {
              float v10 = v8 + (float)(v8 - v10);
              float v9 = v7 + (float)(v7 - v9);
              grl::pointAtIndex((uint64_t)v142, v116 * v117);
              float v8 = v118;
              float v7 = v119;
              (*(void (**)(esl::QuartzPath *, void, float, float, float, float))(*(void *)v114 + 56))(v114, 0, v10, v9, v118, v119);
              ++v117;
              unint64_t v120 = (v144 - (unsigned char *)__p) >> 2;
              unint64_t v116 = grl::PathCommand::expectedFloatCount(v142[0]);
            }
            while (v117 < v120 / v116);
          }
LABEL_96:
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          break;
        default:
          if (v142[0] == 90)
          {
            (*(void (**)(void))(**(void **)a2 + 112))();
            float v8 = (*(float (**)(void))(**(void **)a2 + 96))();
            float v7 = v126;
            float v10 = v8;
            float v9 = v126;
          }
          else
          {
LABEL_114:
            if (qword_1EB34D548 != -1) {
              dispatch_once(&qword_1EB34D548, &__block_literal_global_3);
            }
            uint64_t v127 = _MergedGlobals_4;
            if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1A1780000, v127, OS_LOG_TYPE_ERROR, "Unhandled path command", buf, 2u);
            }
          }
          break;
      }
      unint64_t v121 = (v144 - (unsigned char *)__p) >> 2;
      unsigned __int8 v122 = v142[0];
      unint64_t v123 = v121 % grl::PathCommand::expectedFloatCount(v142[0]);
      if (v123)
      {
        if (qword_1EB34D548 != -1) {
          dispatch_once(&qword_1EB34D548, &__block_literal_global_3);
        }
        int64_t v124 = _MergedGlobals_4;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v142[0];
          _os_log_impl(&dword_1A1780000, v124, OS_LOG_TYPE_ERROR, "Incorrect number of arguments for command: %c", buf, 8u);
        }
      }
      else
      {
        uint64_t v6 = v122;
      }
      if (__p)
      {
        uint64_t v144 = __p;
        operator delete(__p);
      }
      v4 += 32;
      if (v123) {
        BOOL v125 = 1;
      }
      else {
        BOOL v125 = v4 == v5;
      }
    }
    while (!v125);
  }
  *(void *)buf = &v145;
  std::vector<grl::PathCommand>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
}

os_log_t ___ZL26GEOGetGeoResourceLibSVGLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoResourceLib", "SVG");
  _MergedGlobals_4 = (uint64_t)result;
  return result;
}

void *std::vector<float>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  size_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v3 - *(void *)a2 < 0) {
      abort();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5 >> 2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[4 * v7];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a1);
}

void grl::pointAtIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 + 1 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2))
  {
    if (qword_1EB34D548 != -1) {
      dispatch_once(&qword_1EB34D548, &__block_literal_global_3);
    }
    int v2 = _MergedGlobals_4;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315650;
      uint64_t v4 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      __int16 v5 = 2080;
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/SVGParser.cpp";
      __int16 v7 = 1024;
      int v8 = 208;
      _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_ERROR, "Invalid float index: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v3, 0x1Cu);
    }
  }
}

esl::QuartzPath *_ZNSt3__115allocate_sharedB8nn180100IN3esl10QuartzPathEN3geo12StdAllocatorIS2_N3grl9AllocatorEEEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X0>, esl::QuartzPath **a2@<X8>)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 48, 8);
  uint64_t v5 = *a1;
  *uint64_t v4 = &unk_1EF52E338;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v5;
  os_log_t result = esl::QuartzPath::QuartzPath((esl::QuartzPath *)(v4 + 4));
  *a2 = result;
  a2[1] = (esl::QuartzPath *)v4;
  return result;
}

void std::__shared_ptr_emplace<esl::QuartzPath,geo::StdAllocator<esl::QuartzPath,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzPath,geo::StdAllocator<esl::QuartzPath,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<esl::QuartzPath,geo::StdAllocator<esl::QuartzPath,grl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

uint64_t std::__shared_ptr_emplace<esl::QuartzPath,geo::StdAllocator<esl::QuartzPath,grl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 48);
}

void grl::codec::IconData::encode(grl::codec::IconData *this@<X0>, void *a2@<X8>)
{
  unint64_t v22 = 0;
  char v23 = 0;
  char v25 = 0;
  uint64_t v24 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v22, 0x3E8uLL);
  LOBYTE(__p) = *((void *)this + 3);
  geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 1);
  uint64_t v4 = *(grl::codec::IconData **)this;
  if (*(grl::codec::IconData **)this != (grl::codec::IconData *)((char *)this + 8))
  {
    do
    {
      LOWORD(__p) = *((_WORD *)v4 + 14);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      LODWORD(__p) = *((_DWORD *)v4 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 4);
      LODWORD(__p) = *((_DWORD *)v4 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 4);
      LODWORD(__p) = *((_DWORD *)v4 + 10);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 4);
      uint64_t v5 = (grl::codec::IconData *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(grl::codec::IconData **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (grl::codec::IconData *)*((void *)v4 + 2);
          BOOL v7 = *(void *)v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != (grl::codec::IconData *)((char *)this + 8));
  }
  LOBYTE(__p) = *((unsigned char *)this + 184)
              + *((unsigned char *)this + 176)
              + *((unsigned char *)this + 32)
              + *((unsigned char *)this + 112)
              + *((_DWORD *)this + 36);
  geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 1);
  int v8 = (grl::codec::IconData *)*((void *)this + 19);
  if (v8 != (grl::codec::IconData *)((char *)this + 160))
  {
    do
    {
      LOWORD(__p) = 1;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      LOWORD(__p) = *((_WORD *)v8 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      grl::codec::PathLayerData::encode((grl::codec::IconData *)((char *)v8 + 40), &__p);
      *(_DWORD *)float v26 = v21 - __p;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (unsigned char *)__p);
      if (__p)
      {
        unint64_t v21 = __p;
        operator delete(__p);
      }
      uint64_t v9 = (grl::codec::IconData *)*((void *)v8 + 1);
      if (v9)
      {
        do
        {
          float v10 = v9;
          uint64_t v9 = *(grl::codec::IconData **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          float v10 = (grl::codec::IconData *)*((void *)v8 + 2);
          BOOL v7 = *(void *)v10 == (void)v8;
          int v8 = v10;
        }
        while (!v7);
      }
      int v8 = v10;
    }
    while (v10 != (grl::codec::IconData *)((char *)this + 160));
  }
  if (*((unsigned char *)this + 32))
  {
    LOWORD(__p) = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
    LOWORD(__p) = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
    grl::codec::ColorLayerData::encode((grl::codec::IconData *)((char *)this + 40), &__p);
    *(_DWORD *)float v26 = v21 - __p;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (unsigned char *)__p);
    if (__p)
    {
      unint64_t v21 = __p;
      operator delete(__p);
    }
  }
  int v11 = (grl::codec::IconData *)*((void *)this + 15);
  if (v11 != (grl::codec::IconData *)((char *)this + 128))
  {
    do
    {
      LOWORD(__p) = 2;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      LOWORD(__p) = *((_WORD *)v11 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      grl::codec::ImageLayerData::encode((grl::codec::IconData *)((char *)v11 + 40), &__p);
      *(_DWORD *)float v26 = v21 - __p;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (unsigned char *)__p);
      if (__p)
      {
        unint64_t v21 = __p;
        operator delete(__p);
      }
      char v12 = (grl::codec::IconData *)*((void *)v11 + 1);
      if (v12)
      {
        do
        {
          int v13 = v12;
          char v12 = *(grl::codec::IconData **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (grl::codec::IconData *)*((void *)v11 + 2);
          BOOL v7 = *(void *)v13 == (void)v11;
          int v11 = v13;
        }
        while (!v7);
      }
      int v11 = v13;
    }
    while (v13 != (grl::codec::IconData *)((char *)this + 128));
  }
  uint64_t v14 = (grl::codec::IconData *)*((void *)this + 11);
  if (v14 != (grl::codec::IconData *)((char *)this + 96))
  {
    do
    {
      LOWORD(__p) = 3;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      LOWORD(__p) = *((_WORD *)v14 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      grl::codec::TextLayerData::encode((grl::codec::IconData *)((char *)v14 + 40), &__p);
      *(_DWORD *)float v26 = v21 - __p;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (unsigned char *)__p);
      if (__p)
      {
        unint64_t v21 = __p;
        operator delete(__p);
      }
      int v15 = (grl::codec::IconData *)*((void *)v14 + 1);
      if (v15)
      {
        do
        {
          int64_t v16 = v15;
          int v15 = *(grl::codec::IconData **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int64_t v16 = (grl::codec::IconData *)*((void *)v14 + 2);
          BOOL v7 = *(void *)v16 == (void)v14;
          uint64_t v14 = v16;
        }
        while (!v7);
      }
      uint64_t v14 = v16;
    }
    while (v16 != (grl::codec::IconData *)((char *)this + 96));
  }
  if (*((unsigned char *)this + 184))
  {
    LOWORD(__p) = 4;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
    LOWORD(__p) = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
    grl::codec::InfoLayerData::encode((grl::codec::IconData *)((char *)this + 188), &__p);
    *(_DWORD *)float v26 = v21 - __p;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (unsigned char *)__p);
    if (__p)
    {
      unint64_t v21 = __p;
      operator delete(__p);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  char v17 = v22;
  size_t v18 = v23 - v22;
  if (v23 != v22)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a2, v23 - v22);
    unint64_t v19 = (char *)a2[1];
    memmove(v19, v17, v18);
    a2[1] = &v19[v18];
    char v17 = v22;
  }
  if (v17)
  {
    char v23 = v17;
    operator delete(v17);
  }
}

grl::codec::ColorLayerData *grl::codec::IconData::colorLayer@<X0>(grl::codec::IconData *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 32))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v5 = *((void *)this + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v5;
    os_log_t result = (grl::codec::ColorLayerData *)std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>(a2, *((unsigned char **)this + 5), *((unsigned char **)this + 6), *((void *)this + 6) - *((void *)this + 5));
    *(unsigned char *)(a2 + 32) = *((unsigned char *)this + 72);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)((char *)this + 73);
    *(_DWORD *)(a2 + 40) = *((_DWORD *)this + 20);
    *(_WORD *)(a2 + 44) = *((_WORD *)this + 42);
  }
  else
  {
    return grl::codec::ColorLayerData::ColorLayerData((grl::codec::ColorLayerData *)a2);
  }
  return result;
}

void std::__shared_ptr_emplace<grl::IconImage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A3F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::IconImage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A3F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__function::__func<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0,std::allocator<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::~__func()
{
}

void *std::__function::__func<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0,std::allocator<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::__clone(uint64_t a1)
{
  os_log_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *os_log_t result = &unk_1EF57DF80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0,std::allocator<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57DF80;
  a2[1] = v2;
  return result;
}

void grl::PathLayerMetrics::constructBalloonMetrics(uint64_t a1, uint64_t a2, float *a3, double a4, int32x2_t a5, double a6, double a7)
{
  unsigned int v9 = *(unsigned __int8 *)(a2 + 120);
  int32x2_t v10 = *(int32x2_t *)(a2 + 52);
  BOOL v11 = *(float *)v10.i32 > 0.0;
  if (*(float *)&v10.i32[1] > 0.0) {
    BOOL v11 = 1;
  }
  if (v9 > 9 || ((1 << v9) & 0x2C4) == 0)
  {
    if (v11)
    {
      if (*(float *)v10.i32 < *(float *)&v10.i32[1]) {
        v10.i32[0] = HIDWORD(*(void *)(a2 + 52));
      }
    }
    else
    {
      v10.i32[0] = *(__int32 *)a3;
      if (*a3 < a3[1]) {
        v10.i32[0] = (__int32)a3[1];
      }
    }
    float32x2_t v14 = (float32x2_t)vdup_lane_s32(v10, 0);
  }
  else
  {
    a5 = *(int32x2_t *)a3;
    if (v11) {
      unsigned int v13 = -1;
    }
    else {
      unsigned int v13 = 0;
    }
    float32x2_t v14 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v13), (int8x8_t)v10, (int8x8_t)a5);
  }
  LODWORD(a7) = *(_DWORD *)(a2 + 116);
  float32x2_t v15 = *(float32x2_t *)(a2 + 108);
  unsigned int v16 = v9 - 3;
  float v17 = 0.0;
  float v18 = 0.0;
  if (v16 <= 6)
  {
    float v17 = flt_1A29CE210[(char)v16];
    float v18 = flt_1A29CE22C[(char)v16];
  }
  float v55 = v17;
  float32x2_t v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
  float32x2_t v20 = vsub_f32(v19, v15);
  float32x2_t v53 = vadd_f32(v19, v15);
  float v51 = fmaxf(*(float *)&a7, 0.0);
  float32x2_t v21 = vmul_n_f32(v14, COERCE_FLOAT(*(void *)(a2 + 100)));
  float32x2_t v52 = v21;
  float v22 = v21.f32[1];
  if (v21.f32[1] < v21.f32[0]) {
    v21.f32[0] = v21.f32[1];
  }
  *(float *)a5.i32 = ceilf(*(float *)(a2 + 92));
  int32x2_t v50 = a5;
  float v54 = *(float *)a5.i32 + (float)(*(float *)a5.i32 + v21.f32[0]);
  float v23 = *(float *)(a2 + 124);
  __float2 v24 = __sincosf_stret(v23);
  float v25 = fmodf(v23 + 3.1416, 6.2832);
  float v26 = fmodf(v25 + 6.2832, 6.2832) + 0.0;
  __float2 v27 = __sincosf_stret(v26);
  float v28 = *(float *)(a2 + 64) * 3.14159265 / 180.0;
  float32x2_t v29 = vrndp_f32(vmaxnm_f32(v20, 0));
  float32x2_t v30 = vmul_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v24.__sinval), LODWORD(v24.__cosval)), v55), v54);
  float32x2_t v31 = vrndp_f32(vabs_f32(vminnm_f32(v30, 0)));
  *(float32x2_t *)&long long v32 = vadd_f32(v29, v31);
  *(float *)(a1 + 12) = *(float *)v50.i32 + *(float *)&v32;
  uint64_t v33 = a1 + 12;
  *(float *)(v33 + 84) = v26;
  *(float *)(v33 + 88) = v51;
  float32x2_t v34 = (float32x2_t)vdup_lane_s32(v50, 0);
  _V18.S[1] = v52.i32[1];
  float32x2_t v36 = vadd_f32(v34, vadd_f32(v34, v52));
  float32x2_t v37 = vadd_f32(v29, vadd_f32(vrndp_f32(vmaxnm_f32(v30, 0)), vadd_f32(v36, v31)));
  _S19 = 0.5;
  float v39 = vmlas_n_f32(*(float *)v50.i32 + *(float *)&v32, 0.5, v52.f32[0]);
  __asm { FMLA            S10, S19, V18.S[1] }
  *(float *)(v33 + 92) = v54;
  *(float *)(v33 + 96) = v39;
  *(float *)(v33 + 100) = _S10;
  *(float *)(v33 + 48) = (float)(v54 * (float)(v18 * (float)(v27.__cosval - (float)(v27.__sinval * 0.0))))
                       + (float)((float)(v54
                                       * (float)((float)(v55 + 0.5) * (float)(v24.__cosval - (float)(v24.__sinval * 0.0))))
                               + v39);
  *(float *)(v33 + 52) = (float)(v54 * (float)(v18 * (float)(v27.__sinval + (float)(v27.__cosval * 0.0))))
                       + (float)((float)(v54
                                       * (float)((float)(v55 + 0.5) * (float)(v24.__sinval + (float)(v24.__cosval * 0.0))))
                               + _S10);
  *(float *)(v33 + 4) = *(float *)v50.i32 + *((float *)&v32 + 1);
  *(float *)(v33 + 8) = v52.f32[0] + (float)(*(float *)v50.i32 + *(float *)&v32);
  *((float32x2_t *)&v32 + 1) = vadd_f32(v36, *(float32x2_t *)&v32);
  *(float *)(v33 + 12) = v22 + (float)(*(float *)v50.i32 + *((float *)&v32 + 1));
  *(_OWORD *)(v33 + 16) = v32;
  *(float32x2_t *)(v33 + 104) = v29;
  *(float32x2_t *)(v33 + 112) = v37;
  *(float32x2_t *)(v33 + 32) = vadd_f32(vrndp_f32(vmaxnm_f32(v53, 0)), v37);
  double GradientStartPoint = grl::LayerMetrics::findGradientStartPoint(3u, (float *)v33, v28);
  *(_DWORD *)(v33 + 64) = LODWORD(GradientStartPoint);
  *(_DWORD *)(v33 + 68) = v45;
  float v46 = fmodf((float)(v28 + -3.1416) + 3.1416, 6.2832);
  float v47 = fmodf(v46 + 6.2832, 6.2832);
  double v48 = grl::LayerMetrics::findGradientStartPoint(3u, (float *)v33, v47 + -3.1416);
  *(_DWORD *)(v33 + 72) = LODWORD(v48);
  *(_DWORD *)(v33 + 76) = v49;
  *(float *)(v33 + 56) = v39;
  *(float *)(v33 + 60) = _S10;
}

grl::codec::ColorLayerData *grl::codec::ColorLayerData::ColorLayerData(grl::codec::ColorLayerData *this)
{
  __int16 v6 = 515;
  char v7 = 1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  uint64_t v2 = grl::Allocator::instance(this);
  *((void *)this + 3) = v2;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 3, 1);
  uint64_t v4 = 0;
  *(void *)this = v3;
  *((void *)this + 2) = v3 + 3;
  do
  {
    if (v3 + v4) {
      *(unsigned char *)(v3 + v4) = *((unsigned char *)&v6 + v4);
    }
    ++v4;
  }
  while (v4 != 3);
  *((void *)this + 1) = v3 + 3;
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 36) = -1;
  *((_DWORD *)this + 10) = 1119092736;
  *((_WORD *)this + 22) = 257;
  return this;
}

uint64_t grl::codec::ColorLayerData::toString(grl::codec::ColorLayerData *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v27);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"{ ", 2);
  uint64_t v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"blendMode: ", 11);
  grl::toString<esl::BlendMode>(*((unsigned __int8 *)this + 32), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", fillColor: ", 13);
  __int16 v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 33);
  char v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
  int v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 34);
  unsigned int v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)&__p, 1);
  int32x2_t v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 35);
  BOOL v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
  char v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 36);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)&__p, 1);
  unsigned int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", gradientAngle: ", 17);
  std::to_string(&__p, *((float *)this + 10));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float32x2_t v14 = &__p;
  }
  else {
    float32x2_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned int v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", gradientType: ", 16);
  unint64_t v17 = *((char *)this + 44);
  if (v17 > 3) {
    float v18 = (char *)&str_10_1;
  }
  else {
    float v18 = off_1E5AB2B58[v17];
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float32x2_t v19 = &__p;
  }
  else {
    float32x2_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  float32x2_t v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", visible: ", 11);
  std::to_string(&__p, *((unsigned __int8 *)this + 45));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v22 = &__p;
  }
  else {
    float v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" }", 2);
  std::stringbuf::str();
  v27[0] = *MEMORY[0x1E4FBA408];
  uint64_t v24 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v28[0] = v24;
  v28[1] = MEMORY[0x1E4FBA470] + 16;
  if (v29 < 0) {
    operator delete((void *)v28[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v30);
}

uint64_t grl::codec::ColorLayerData::encode@<X0>(grl::codec::ColorLayerData *this@<X0>, void *a2@<X8>)
{
  char v7 = 0;
  int v8 = (grl::Allocator *)grl::Allocator::instance(this);
  uint64_t v9 = 0;
  __int16 v6 = (uint64_t *)&v7;
  BOOL v11 = 0;
  char v12 = (grl::Allocator *)grl::Allocator::instance(v8);
  uint64_t v13 = 0;
  int32x2_t v10 = (uint64_t *)&v11;
  std::string::size_type v15 = 0;
  unsigned int v16 = (grl::Allocator *)grl::Allocator::instance(v12);
  uint64_t v17 = 0;
  float32x2_t v14 = (uint64_t *)&v15;
  float32x2_t v19 = 0;
  std::string::size_type v20 = (grl::Allocator *)grl::Allocator::instance(v16);
  uint64_t v21 = 0;
  float v18 = &v19;
  std::string::size_type v23 = 0;
  uint64_t v24 = (grl::Allocator *)grl::Allocator::instance(v20);
  uint64_t v25 = 0;
  float v22 = &v23;
  __float2 v27 = 0;
  float v28 = (grl::Allocator *)grl::Allocator::instance(v24);
  uint64_t v29 = 0;
  float v26 = (uint64_t *)&v27;
  v31[0] = 0;
  v31[1] = grl::Allocator::instance(v28);
  v31[2] = 0;
  uint64_t v30 = v31;
  unint64_t v32 = ((unint64_t)*((unsigned __int8 *)this + 32) << 32) | 8;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v10, (unsigned __int16 *)&v32, (uint64_t)&v32);
  LOWORD(v32) = 5;
  *(_DWORD *)((char *)&v32 + 2) = *(_DWORD *)((char *)this + 33);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v26, (unsigned __int16 *)&v32, (uint64_t)&v32);
  unint64_t v32 = ((unint64_t)*((unsigned int *)this + 10) << 32) | 0x27;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v14, (unsigned __int16 *)&v32, (uint64_t)&v32);
  unint64_t v32 = ((unint64_t)*((unsigned __int8 *)this + 44) << 32) | 0x28;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v10, (unsigned __int16 *)&v32, (uint64_t)&v32);
  if (*((unsigned char *)this + 45)) {
    int v4 = 65551;
  }
  else {
    int v4 = 15;
  }
  LODWORD(v32) = v4;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v6, (unsigned __int16 *)&v32, (uint64_t)&v32);
  grl::PropertySet::encode((grl::PropertySet *)&v6, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v30, v31[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v26, v27);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v18, v19);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v14, v15);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v10, v11);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v6, v7);
}

uint64_t grl::codec::ColorLayerData::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_WORD **)a2;
  unint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  float v44 = *(_WORD **)a2;
  unint64_t v45 = v4;
  if (v4 >= 2)
  {
    uint64_t v46 = 2;
    unsigned int v41 = (unsigned __int16)*v3;
    if (!*v3)
    {
      char v5 = 1;
      return v5 & 1;
    }
    BOOL v6 = 0;
    int v7 = 0;
    int v8 = (void *)(a3 + 8);
    float v39 = (void *)(a3 + 8);
    while (v46 + 2 <= v45)
    {
      uint64_t v9 = v46 + 4;
      if (v46 + 4 > v45)
      {
        int v35 = 91;
        float32x2_t v36 = "numPropertiesForType.has_value()";
        float32x2_t v37 = "Property Count could not be read";
        goto LABEL_65;
      }
      unsigned int v10 = *(unsigned __int16 *)((char *)v44 + v46);
      v46 += 4;
      uint64_t v11 = *v8;
      if (!*v8) {
        goto LABEL_62;
      }
      int v12 = *(unsigned __int16 *)((char *)v44 + v9 - 2);
      uint64_t v13 = v8;
      do
      {
        unsigned int v14 = *(_DWORD *)(v11 + 28);
        BOOL v15 = v14 >= v10;
        if (v14 >= v10) {
          unsigned int v16 = (uint64_t *)v11;
        }
        else {
          unsigned int v16 = (uint64_t *)(v11 + 8);
        }
        if (v15) {
          uint64_t v13 = (void *)v11;
        }
        uint64_t v11 = *v16;
      }
      while (*v16);
      if (v13 == v8 || *((_DWORD *)v13 + 7) > v10)
      {
LABEL_62:
        int v35 = 94;
        float32x2_t v36 = "decoderMapIter != propertyContext.decoderMap.end()";
        float32x2_t v37 = "Property Type read from set that wasnt in the Property Info Chapter";
LABEL_65:
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v37, v36, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ColorLayerData_Generated.cpp", v35);
        char v5 = v6;
        return v5 & 1;
      }
      int v42 = v7;
      for (char i = v6; v12; --v12)
      {
        unint64_t v17 = v45;
        uint64_t v18 = v46;
        uint64_t v19 = v46 + 2;
        if (v46 + 2 > v45)
        {
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property ID could not be read", "propertyIDValue.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ColorLayerData_Generated.cpp", 98);
          char v5 = i;
          return v5 & 1;
        }
        v46 += 2;
        uint64_t v20 = *((unsigned __int8 *)v13 + 32);
        if (v10 <= 6 && v20 == (0x41008040401uLL >> (8 * v10)))
        {
          uint64_t v21 = v44;
          signed int v22 = *(unsigned __int16 *)((char *)v44 + v18);
          if (grl::propertyTypeFromPropertyID(v22) == v10)
          {
            if (v22 <= 14)
            {
              if (v22 == 5)
              {
                if (v18 + 3 > v17)
                {
                  unint64_t v31 = v18 + 3;
                }
                else
                {
                  uint64_t v46 = v18 + 3;
                  char v23 = *((unsigned char *)v21 + v19);
                  unint64_t v31 = v18 + 4;
                  uint64_t v19 = v18 + 3;
                }
                if (v31 > v17)
                {
                  unint64_t v32 = v31;
                }
                else
                {
                  uint64_t v46 = v31;
                  char v24 = *((unsigned char *)v21 + v19);
                  unint64_t v32 = v31 + 1;
                  uint64_t v19 = v31;
                }
                if (v32 > v17)
                {
                  unint64_t v33 = v32;
                }
                else
                {
                  uint64_t v46 = v32;
                  char v25 = *((unsigned char *)v21 + v19);
                  unint64_t v33 = v32 + 1;
                  uint64_t v19 = v32;
                }
                if (v33 <= v17)
                {
                  uint64_t v46 = v33;
                  if (v18 + 3 <= v17 && v31 <= v17 && v32 <= v17)
                  {
                    char v34 = *((unsigned char *)v21 + v19);
                    *(unsigned char *)(a1 + 33) = v23;
                    *(unsigned char *)(a1 + 34) = v24;
                    *(unsigned char *)(a1 + 35) = v25;
                    *(unsigned char *)(a1 + 36) = v34;
                  }
                }
                continue;
              }
              if (v22 == 8)
              {
                if (v18 + 6 <= v17)
                {
                  uint64_t v46 = v18 + 6;
                  int v29 = *(_DWORD *)((char *)v21 + v18 + 2);
                  uint64_t v28 = a1;
                }
                else
                {
                  uint64_t v28 = a1;
                  LOBYTE(v29) = *(unsigned char *)(a1 + 32);
                }
                *(unsigned char *)(v28 + 32) = v29;
                continue;
              }
            }
            else
            {
              switch(v22)
              {
                case 15:
                  if (v18 + 3 <= v17)
                  {
                    uint64_t v46 = v18 + 3;
                    *(unsigned char *)(a1 + 45) = *((unsigned char *)v21 + v19) != 0;
                  }
                  continue;
                case 39:
                  if (v18 + 6 <= v17)
                  {
                    int v30 = *(_DWORD *)((char *)v21 + v19);
                    uint64_t v46 = v18 + 6;
                    *(_DWORD *)(a1 + 40) = v30;
                  }
                  continue;
                case 40:
                  if (v18 + 6 <= v17)
                  {
                    uint64_t v46 = v18 + 6;
                    int v27 = *(_DWORD *)((char *)v21 + v18 + 2);
                    uint64_t v26 = a1;
                  }
                  else
                  {
                    uint64_t v26 = a1;
                    LOBYTE(v27) = *(unsigned char *)(a1 + 44);
                  }
                  *(unsigned char *)(v26 + 44) = v27;
                  continue;
              }
            }
          }
        }
        grl::SkipStreamBytes(&v44, v20);
      }
      int v7 = v42 + 1;
      char v5 = 1;
      BOOL v6 = v42 + 1 >= v41;
      int v8 = v39;
      if (v42 + 1 == v41) {
        return v5 & 1;
      }
    }
    int v35 = 87;
    float32x2_t v36 = "propertyTypeValue.has_value()";
    float32x2_t v37 = "Property Type could not be read";
    goto LABEL_65;
  }
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property Type Count could not be read", "numPropertyTypes.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ColorLayerData_Generated.cpp", 83);
  char v5 = 0;
  return v5 & 1;
}

void grl::FontManager::clearFontCache(grl::FontManager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 168);
  std::mutex::lock((std::mutex *)((char *)this + 168));
  std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::clear((uint64_t)this + 104);
  std::__list_imp<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>>::clear((uint64_t *)this + 18);
  CGFontDBGetLocal();
  CGFontDBPurgeAllFonts();
  std::mutex::unlock(v2);
}

BOOL grl::FontManager::fontHasSmallCaps(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  char v1 = &unk_1EF5592F8;
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    CFTypeRef v46 = v2;
    uint64_t v3 = &unk_1EF5592F8;
    CFRetain(v2);
  }
  else
  {
    CFTypeRef v46 = 0;
    uint64_t v3 = &unk_1EF5592F8;
  }
  CFTypeRef v47 = v2;
  CFArrayRef v4 = (const __CFArray *)CTFontCopyFeaturesInternal();
  char v5 = &unk_1EF559358;
  float v60 = &unk_1EF559358;
  CFArrayRef v61 = v4;
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count <= 0) {
      goto LABEL_91;
    }
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    uint64_t v9 = (const void *)*MEMORY[0x1E4F24558];
    key = (void *)*MEMORY[0x1E4F24560];
    unint64_t v45 = (void *)*MEMORY[0x1E4F24548];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v61, v8);
      float v58 = &unk_1EF5591F8;
      if (!ValueAtIndex)
      {
        CFDictionaryRef v59 = 0;
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
        }
        uint64_t v18 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_ERROR, "Failed to get feature dictionary for font.", buf, 2u);
        }
        CFTypeRef v48 = 0;
        int v17 = 1;
        goto LABEL_24;
      }
      CFDictionaryRef v11 = ValueAtIndex;
      CFRetain(ValueAtIndex);
      CFDictionaryRef v59 = v11;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v11, v9);
      float v56 = &unk_1EF5591B8;
      if (!Value)
      {
        int v17 = 4;
        goto LABEL_24;
      }
      CFNumberRef v13 = Value;
      CFRetain(Value);
      CFNumberRef v57 = v13;
      if (CFNumberIsFloatType(v13))
      {
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
        }
        uint64_t v14 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          BOOL v15 = v14;
          unsigned int v16 = "Font feature type is not int, can't read feature.";
          goto LABEL_14;
        }
        goto LABEL_15;
      }
      int valuePtr = 0;
      if (!CFNumberGetValue(v57, kCFNumberSInt32Type, &valuePtr))
      {
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
        }
        uint64_t v36 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          BOOL v15 = v36;
          unsigned int v16 = "Failed to get value from feature type for font.";
LABEL_14:
          _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, v16, buf, 2u);
        }
LABEL_15:
        CFTypeRef v48 = 0;
        int v17 = 1;
        goto LABEL_16;
      }
      if (valuePtr != 38)
      {
        int v17 = 4;
        goto LABEL_16;
      }
      CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(v59, key);
      float32x2_t v53 = &unk_1EF559358;
      if (!v19)
      {
        CFArrayRef theArray = 0;
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
        }
        float32x2_t v37 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A1780000, v37, OS_LOG_TYPE_ERROR, "Failed to get feature selectors array for font.", buf, 2u);
        }
        CFTypeRef v48 = 0;
        int v17 = 1;
        goto LABEL_84;
      }
      CFArrayRef v20 = v19;
      CFRetain(v19);
      CFArrayRef theArray = v20;
      CFIndex v21 = CFArrayGetCount(v20);
      if (v21 < 1)
      {
        int v17 = 0;
        goto LABEL_84;
      }
      CFIndex v22 = v21;
      unsigned int v41 = v5;
      int v42 = v3;
      unint64_t v43 = v1;
      CFIndex v23 = 0;
      while (1)
      {
        char v24 = CFArrayGetValueAtIndex(theArray, v23);
        float v51 = &unk_1EF5591F8;
        if (v24)
        {
          char v25 = v24;
          CFRetain(v24);
          CFTypeRef cf = v25;
          CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v25, v45);
          *(void *)buf = &unk_1EF5591B8;
          if (v26)
          {
            CFNumberRef v27 = v26;
            CFRetain(v26);
            *(void *)&uint8_t buf[8] = v27;
            if (CFNumberIsFloatType(v27))
            {
              if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
                dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
              }
              uint64_t v28 = GEOGetGeoResourceLibCoreFoundationLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)int32x2_t v50 = 0;
                int v29 = v28;
                int v30 = "Font feature selector is not int, can't read feature.";
                goto LABEL_51;
              }
              goto LABEL_52;
            }
            *(_DWORD *)int32x2_t v50 = 0;
            if (CFNumberGetValue(*(CFNumberRef *)&buf[8], kCFNumberSInt32Type, v50))
            {
              if (*(_DWORD *)v50 == 1)
              {
                CFTypeRef v48 = cf;
                p_CFTypeRef cf = &cf;
                goto LABEL_69;
              }
              int v32 = 0;
LABEL_54:
              *(void *)buf = &unk_1EF5591B8;
              if (*(void *)&buf[8]) {
                CFRelease(*(CFTypeRef *)&buf[8]);
              }
              goto LABEL_56;
            }
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
            }
            int v35 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int v49 = 0;
              _os_log_impl(&dword_1A1780000, v35, OS_LOG_TYPE_ERROR, "Failed to get value from feature type for font.", v49, 2u);
            }
            p_CFTypeRef cf = &v48;
LABEL_69:
            *p_CFTypeRef cf = 0;
          }
          else
          {
            *(void *)&uint8_t buf[8] = 0;
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
            }
            uint64_t v33 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int32x2_t v50 = 0;
              int v29 = v33;
              int v30 = "Failed to get feature selector id for font.";
LABEL_51:
              _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_ERROR, v30, v50, 2u);
            }
LABEL_52:
            CFTypeRef v48 = 0;
          }
          int v32 = 1;
          goto LABEL_54;
        }
        CFTypeRef cf = 0;
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
        }
        unint64_t v31 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontManager.cpp";
          __int16 v63 = 1024;
          int v64 = 132;
          _os_log_impl(&dword_1A1780000, v31, OS_LOG_TYPE_ERROR, "Failed to get features selector array value for font.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
        CFTypeRef v48 = 0;
        int v32 = 1;
LABEL_56:
        float v51 = &unk_1EF5591F8;
        if (cf) {
          CFRelease(cf);
        }
        if (v32) {
          break;
        }
        if (v22 == ++v23)
        {
          int v17 = 0;
          goto LABEL_83;
        }
      }
      int v17 = 1;
LABEL_83:
      uint64_t v3 = v42;
      char v1 = v43;
      char v5 = v41;
LABEL_84:
      float32x2_t v53 = &unk_1EF559358;
      if (theArray) {
        CFRelease(theArray);
      }
LABEL_16:
      float v56 = &unk_1EF5591B8;
      if (v57) {
        CFRelease(v57);
      }
LABEL_24:
      float v58 = &unk_1EF5591F8;
      if (v59) {
        CFRelease(v59);
      }
      if (v17 && v17 != 4) {
        goto LABEL_92;
      }
      if (++v8 == v7) {
        goto LABEL_91;
      }
    }
  }
  if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
  }
  int v38 = GEOGetGeoResourceLibCoreFoundationLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A1780000, v38, OS_LOG_TYPE_ERROR, "Failed to get feature information for font.", buf, 2u);
  }
LABEL_91:
  CFTypeRef v48 = 0;
LABEL_92:
  float v60 = v5;
  if (v61) {
    CFRelease(v61);
  }
  CFTypeRef v39 = v48;
  if (v48) {
    CFRelease(v48);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (v46) {
    CFRelease(v46);
  }
  return v39 != 0;
}

void *geo::_retain_ptr<CGDataProvider *,geo::_retain_cf<CGDataProvider *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559038;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *geo::_retain_ptr<__CFData const*,geo::_retain_cf<__CFData const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF5592B8;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void grl::FontManager::~FontManager(grl::FontManager *this)
{
  grl::FontManager::~FontManager(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF566FB0;
  std::mutex::~mutex((std::mutex *)((char *)this + 168));
  std::__list_imp<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>>::clear((uint64_t *)this + 18);
  std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::__deallocate_node((uint64_t)this + 104, *((void **)this + 15));
  uint64_t v2 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    operator delete(v2);
  }
  grl::ResourceManager::~ResourceManager(this);
}

void std::__list_imp<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        char v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:nn180100]<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,0>((esl::FontKey *)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      esl::FontKey::~FontKey((esl::FontKey *)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void geo::_retain_ptr<__CFData const*,geo::_retain_cf<__CFData const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF5592B8;
  char v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x1A6239270);
}

void geo::_retain_ptr<CGDataProvider *,geo::_retain_cf<CGDataProvider *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559038;
  char v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t grl::LayerMetrics::LayerMetrics(uint64_t a1, uint64_t a2, float *a3, float *a4)
{
  *(void *)a1 = &unk_1EF567000;
  *(_WORD *)(a1 + 8) = 2;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  BOOL v6 = (float *)(a1 + 12);
  float v7 = *a3;
  float v8 = a3[1];
  float v9 = roundf(*a4);
  if (*a3 < v9) {
    float v7 = v9;
  }
  *(float *)(a1 + 44) = v7;
  *(float *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 16) = 0;
  float *v6 = 0.0;
  *(float *)(a1 + 20) = v7 + 0.0;
  *(float *)(a1 + 24) = v8 + 0.0;
  double GradientStartPoint = grl::LayerMetrics::findGradientStartPoint(2u, v6, *(float *)(a2 + 52));
  *(_DWORD *)(a1 + 76) = LODWORD(GradientStartPoint);
  *(_DWORD *)(a1 + 80) = v11;
  float v12 = fmodf((float)(*(float *)(a2 + 52) + -3.1416) + 3.1416, 6.2832);
  float v13 = fmodf(v12 + 6.2832, 6.2832);
  double v14 = grl::LayerMetrics::findGradientStartPoint(2u, v6, v13 + -3.1416);
  *(_DWORD *)(a1 + 84) = LODWORD(v14);
  *(_DWORD *)(a1 + 88) = v15;
  return a1;
}

uint64_t grl::LayerMetrics::LayerMetrics(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)a1 = &unk_1EF567000;
  *(_WORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  char v5 = (float *)(a1 + 12);
  *(_DWORD *)(a1 + 44) = *a3;
  *(_DWORD *)(a1 + 48) = a3[1];
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *a3;
  *(_DWORD *)(a1 + 24) = a3[1];
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 36) = 0;
  double GradientStartPoint = grl::LayerMetrics::findGradientStartPoint(2u, (float *)(a1 + 12), *(float *)(a2 + 40));
  *(_DWORD *)(a1 + 76) = LODWORD(GradientStartPoint);
  *(_DWORD *)(a1 + 80) = v7;
  float v8 = fmodf((float)(*(float *)(a2 + 40) + -3.1416) + 3.1416, 6.2832);
  float v9 = fmodf(v8 + 6.2832, 6.2832);
  double v10 = grl::LayerMetrics::findGradientStartPoint(2u, v5, v9 + -3.1416);
  *(_DWORD *)(a1 + 84) = LODWORD(v10);
  *(_DWORD *)(a1 + 88) = v11;
  return a1;
}

void *geo::_retain_ptr<__CFAttributedString const*,geo::_retain_cf<__CFAttributedString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559298;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void geo::_retain_ptr<__CFAttributedString const*,geo::_retain_cf<__CFAttributedString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559298;
  char v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_pointer<esl::QuartzImage *,std::shared_ptr<esl::QuartzImage>::__shared_ptr_default_delete<esl::QuartzImage,esl::QuartzImage>,std::allocator<esl::QuartzImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<esl::QuartzImage *,std::shared_ptr<esl::QuartzImage>::__shared_ptr_default_delete<esl::QuartzImage,esl::QuartzImage>,std::allocator<esl::QuartzImage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t grl::codec::IconMapPack::packLog(grl::codec::IconMapPack *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of Key Value Pairs: ", 27);
  char v1 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(void *)(*v1 - 24)));
  uint64_t v2 = (std::locale::id *)MEMORY[0x1E4FBA258];
  uint64_t v3 = std::locale::use_facet(&v16, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of Names: ", 17);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  char v5 = std::locale::use_facet(&v16, v2);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of Data Identifiers: ", 28);
  BOOL v6 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  int v7 = std::locale::use_facet(&v16, v2);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of Data Text Values: ", 28);
  float v8 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  float v9 = std::locale::use_facet(&v16, v2);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v15);
}

uint64_t grl::codec::IconMapPack::dataIDFallback(grl::codec::IconMapPack *this, unsigned int *a2)
{
  uint64_t v2 = (char *)*((void *)this + 56);
  uint64_t v3 = (char *)this + 456;
  if (v2 != (char *)this + 456)
  {
    unsigned int v4 = *a2;
    while (v4 < *((_DWORD *)v2 + 7) || v4 > *((_DWORD *)v2 + 8))
    {
      BOOL v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          int v7 = v6;
          BOOL v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
      if (v7 == v3) {
        return 0;
      }
    }
  }
  if (v2 == v3) {
    return 0;
  }
  else {
    return *((unsigned int *)v2 + 9);
  }
}

void grl::codec::IconMapPack::encode(grl::codec::IconMapPack **this@<X0>, __int16 a2@<W1>, void *a3@<X8>)
{
  float v85 = 0;
  float v86 = 0;
  char v88 = 0;
  uint64_t v87 = 0;
  v91[0] = 73;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 79;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 78;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 77;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 80;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 80;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 75;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  unint64_t v82 = 0;
  float v83 = 0;
  float v84 = 0;
  int v7 = v85;
  size_t v8 = v86 - (unsigned char *)v85;
  if (v86 == v85)
  {
    float v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    if (v86 - (unsigned char *)v85 < 0) {
      goto LABEL_135;
    }
    float v9 = (char *)operator new(v86 - (unsigned char *)v85);
    uint64_t v10 = &v9[v8];
    unint64_t v82 = v9;
    float v84 = &v9[v8];
    BOOL v6 = (grl::Allocator *)memmove(v9, v7, v8);
    float v83 = &v9[v8];
  }
  int64_t v11 = v10 - v9;
  if ((unint64_t)(v10 - v9) > 0x3F)
  {
    if (v11 != 64) {
      float v83 = v9 + 64;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v82, 64 - v11);
  }
  v81[0] = 0;
  v81[1] = (void *)grl::Allocator::instance(v6);
  v81[2] = 0;
  unint64_t v80 = (uint64_t *)v81;
  grl::codec::ResourcePack::encodePackInfo((grl::codec::ResourcePack *)this, a2, v78);
  LOWORD(__p.__r_.__value_.__l.__data_) = 1;
  *(void *)unint64_t v91 = &__p;
  float v12 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v80, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)v91);
  float v13 = v12[5];
  if (v13)
  {
    unsigned char v12[6] = v13;
    operator delete(v13);
  }
  *(_OWORD *)(v12 + 5) = *(_OWORD *)v78;
  v12[7] = v79;
  v78[1] = 0;
  uint64_t v79 = 0;
  v78[0] = 0;
  *(void *)unint64_t v91 = 0;
  uint64_t v92 = 0;
  char v94 = 0;
  uint64_t v93 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v91, ((void)this[17] << 6) + 16 * (void)this[10]);
  LODWORD(__p.__r_.__value_.__l.__data_) = this[10];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  for (uint64_t i = this[8]; i; uint64_t i = *(grl::codec::IconMapPack **)i)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)i + 4);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)i + 5);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)i + 6);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[17];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  for (uint64_t j = this[15]; j; uint64_t j = *(grl::codec::IconMapPack **)j)
  {
    if (*((char *)j + 39) < 0)
    {
      std::string::size_type v17 = *((void *)j + 3);
      if (v17 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_135;
      }
      std::locale v16 = (std::string::value_type *)*((void *)j + 2);
    }
    else
    {
      std::locale v16 = (char *)j + 16;
      std::string::size_type v17 = *((unsigned __int8 *)j + 39);
    }
    uint64_t v18 = &v16[v17];
    if (v17 > 0x16)
    {
      uint64_t v20 = (v17 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v20 = v17 | 7;
      }
      uint64_t v21 = v20 + 1;
      p_p = (std::string *)operator new(v20 + 1);
      __p.__r_.__value_.__l.__size_ = v17;
      __p.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v17;
      p_p = &__p;
    }
    while (v16 != v18)
    {
      std::string::value_type v22 = *v16++;
      p_p->__r_.__value_.__s.__data_[0] = v22;
      p_p = (std::string *)((char *)p_p + 1);
    }
    p_p->__r_.__value_.__s.__data_[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v23 = &__p;
    }
    else {
      CFIndex v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v24 = strlen((const char *)v23);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)v23, v24 + 1);
    *(_DWORD *)float v89 = *((_DWORD *)j + 12);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)v89, 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[24];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  for (uint64_t k = this[22]; k; uint64_t k = *(grl::codec::IconMapPack **)k)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)k + 4);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)k + 5);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[31];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  CFNumberRef v26 = this[29];
  if (v26)
  {
    while (1)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v26 + 4);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = *((void *)v26 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      CFNumberRef v27 = (uint64_t *)*((void *)v26 + 6);
      if (v27) {
        break;
      }
LABEL_52:
      CFNumberRef v26 = *(grl::codec::IconMapPack **)v26;
      if (!v26) {
        goto LABEL_53;
      }
    }
    while (1)
    {
      if (*((char *)v27 + 39) < 0)
      {
        std::string::size_type v29 = v27[3];
        if (v29 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_135;
        }
        uint64_t v28 = (const void *)v27[2];
      }
      else
      {
        uint64_t v28 = v27 + 2;
        std::string::size_type v29 = *((unsigned __int8 *)v27 + 39);
      }
      if (v29 >= 0x17)
      {
        uint64_t v31 = (v29 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17) {
          uint64_t v31 = v29 | 7;
        }
        uint64_t v32 = v31 + 1;
        int v30 = (std::string *)operator new(v31 + 1);
        __p.__r_.__value_.__l.__size_ = v29;
        __p.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      }
      else
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v29;
        int v30 = &__p;
        if (!v29) {
          goto LABEL_46;
        }
      }
      memmove(v30, v28, v29);
LABEL_46:
      v30->__r_.__value_.__s.__data_[v29] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v33 = &__p;
      }
      else {
        uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      size_t v34 = strlen((const char *)v33);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)v33, v34 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v27 + 12);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      CFNumberRef v27 = (uint64_t *)*v27;
      if (!v27) {
        goto LABEL_52;
      }
    }
  }
LABEL_53:
  int v35 = *(void **)v91;
  size_t v36 = (size_t)v92 - *(void *)v91;
  if (v92 == *(void **)v91)
  {
    float32x2_t v37 = 0;
    int v38 = 0;
    if (*(void *)v91)
    {
LABEL_56:
      uint64_t v92 = v35;
      operator delete(v35);
    }
  }
  else
  {
    if ((uint64_t)v92 - *(void *)v91 < 0) {
      goto LABEL_135;
    }
    float32x2_t v37 = (char *)operator new((size_t)v92 - *(void *)v91);
    int v38 = (uint64_t *)&v37[v36];
    memmove(v37, v35, v36);
    if (v35) {
      goto LABEL_56;
    }
  }
  LOWORD(__p.__r_.__value_.__l.__data_) = 11;
  *(void *)unint64_t v91 = &__p;
  CFTypeRef v39 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v80, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)v91);
  uint64_t v40 = v39[5];
  if (v40)
  {
    v39[6] = v40;
    operator delete(v40);
  }
  v39[5] = (uint64_t *)v37;
  v39[6] = v38;
  v39[7] = v38;
  *(void *)unint64_t v91 = 0;
  uint64_t v92 = 0;
  char v94 = 0;
  uint64_t v93 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v91, ((void)this[54] * (void)this[59]) << 9);
  LODWORD(__p.__r_.__value_.__l.__data_) = this[54];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  for (uint64_t m = this[52]; m; uint64_t m = *(grl::codec::IconMapPack **)m)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)m + 4);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)m + 5);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[59];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  int v42 = this[56];
  if (v42 != (grl::codec::IconMapPack *)(this + 57))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v42 + 7);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v42 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v42 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      unint64_t v43 = (grl::codec::IconMapPack *)*((void *)v42 + 1);
      if (v43)
      {
        do
        {
          float v44 = v43;
          unint64_t v43 = *(grl::codec::IconMapPack **)v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          float v44 = (grl::codec::IconMapPack *)*((void *)v42 + 2);
          BOOL v45 = *(void *)v44 == (void)v42;
          int v42 = v44;
        }
        while (!v45);
      }
      int v42 = v44;
    }
    while (v44 != (grl::codec::IconMapPack *)(this + 57));
  }
  CFTypeRef v46 = *(void **)v91;
  size_t v47 = (size_t)v92 - *(void *)v91;
  if (v92 != *(void **)v91)
  {
    if ((uint64_t)v92 - *(void *)v91 < 0) {
      goto LABEL_135;
    }
    CFTypeRef v48 = (char *)operator new((size_t)v92 - *(void *)v91);
    int v49 = (uint64_t *)&v48[v47];
    memmove(v48, v46, v47);
    if (!v46) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  CFTypeRef v48 = 0;
  int v49 = 0;
  if (*(void *)v91)
  {
LABEL_71:
    uint64_t v92 = v46;
    operator delete(v46);
  }
LABEL_72:
  LOWORD(__p.__r_.__value_.__l.__data_) = 13;
  *(void *)unint64_t v91 = &__p;
  int32x2_t v50 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v80, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)v91);
  float v51 = v50[5];
  if (v51)
  {
    v50[6] = v51;
    operator delete(v51);
  }
  v50[5] = (uint64_t *)v48;
  v50[6] = v49;
  v50[7] = v49;
  *(void *)unint64_t v91 = 0;
  uint64_t v92 = 0;
  char v94 = 0;
  uint64_t v93 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v91, 1536 * ((uint64_t)this[36] + (void)this[44] + (unint64_t)this[40] + (void)this[48]));
  LODWORD(__p.__r_.__value_.__l.__data_) = this[36];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  float32x2_t v52 = this[33];
  if (v52 != (grl::codec::IconMapPack *)(this + 34))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v52 + 7);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      float32x2_t v53 = (grl::codec::IconMapPack *)*((void *)v52 + 1);
      if (v53)
      {
        do
        {
          float v54 = v53;
          float32x2_t v53 = *(grl::codec::IconMapPack **)v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          float v54 = (grl::codec::IconMapPack *)*((void *)v52 + 2);
          BOOL v45 = *(void *)v54 == (void)v52;
          float32x2_t v52 = v54;
        }
        while (!v45);
      }
      float32x2_t v52 = v54;
    }
    while (v54 != (grl::codec::IconMapPack *)(this + 34));
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[44];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  float v55 = this[41];
  if (v55 != (grl::codec::IconMapPack *)(this + 42))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v55 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = (*((void *)v55 + 6) - *((void *)v55 + 5)) >> 2;
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      float v56 = (int *)*((void *)v55 + 5);
      CFNumberRef v57 = (int *)*((void *)v55 + 6);
      while (v56 != v57)
      {
        int v58 = *v56++;
        LODWORD(__p.__r_.__value_.__l.__data_) = v58;
        geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      }
      CFDictionaryRef v59 = (grl::codec::IconMapPack *)*((void *)v55 + 1);
      if (v59)
      {
        do
        {
          float v60 = v59;
          CFDictionaryRef v59 = *(grl::codec::IconMapPack **)v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          float v60 = (grl::codec::IconMapPack *)*((void *)v55 + 2);
          BOOL v45 = *(void *)v60 == (void)v55;
          float v55 = v60;
        }
        while (!v45);
      }
      float v55 = v60;
    }
    while (v60 != (grl::codec::IconMapPack *)(this + 42));
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[48];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  CFArrayRef v61 = this[45];
  if (v61 != (grl::codec::IconMapPack *)(this + 46))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v61 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = (*((void *)v61 + 6) - *((void *)v61 + 5)) >> 2;
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      float v62 = (int *)*((void *)v61 + 5);
      __int16 v63 = (int *)*((void *)v61 + 6);
      while (v62 != v63)
      {
        int v64 = *v62++;
        LODWORD(__p.__r_.__value_.__l.__data_) = v64;
        geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      }
      uint64_t v65 = (grl::codec::IconMapPack *)*((void *)v61 + 1);
      if (v65)
      {
        do
        {
          float v66 = v65;
          uint64_t v65 = *(grl::codec::IconMapPack **)v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          float v66 = (grl::codec::IconMapPack *)*((void *)v61 + 2);
          BOOL v45 = *(void *)v66 == (void)v61;
          CFArrayRef v61 = v66;
        }
        while (!v45);
      }
      CFArrayRef v61 = v66;
    }
    while (v66 != (grl::codec::IconMapPack *)(this + 46));
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[40];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  float v67 = this[37];
  if (v67 != (grl::codec::IconMapPack *)(this + 38))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v67 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      if (*((char *)v67 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v67 + 5), *((void *)v67 + 6));
      }
      else {
        std::string __p = *(std::string *)((char *)v67 + 40);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v68 = &__p;
      }
      else {
        float v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      size_t v69 = strlen((const char *)v68);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)v68, v69 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      float v70 = (grl::codec::IconMapPack *)*((void *)v67 + 1);
      if (v70)
      {
        do
        {
          float v71 = v70;
          float v70 = *(grl::codec::IconMapPack **)v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          float v71 = (grl::codec::IconMapPack *)*((void *)v67 + 2);
          BOOL v45 = *(void *)v71 == (void)v67;
          float v67 = v71;
        }
        while (!v45);
      }
      float v67 = v71;
    }
    while (v71 != (grl::codec::IconMapPack *)(this + 38));
  }
  float v72 = *(void **)v91;
  size_t v73 = (size_t)v92 - *(void *)v91;
  if (v92 != *(void **)v91)
  {
    if ((uint64_t)v92 - *(void *)v91 >= 0)
    {
      float v74 = (char *)operator new((size_t)v92 - *(void *)v91);
      float v75 = (uint64_t *)&v74[v73];
      memmove(v74, v72, v73);
      if (!v72) {
        goto LABEL_120;
      }
      goto LABEL_119;
    }
LABEL_135:
    abort();
  }
  float v74 = 0;
  float v75 = 0;
  if (*(void *)v91)
  {
LABEL_119:
    uint64_t v92 = v72;
    operator delete(v72);
  }
LABEL_120:
  LOWORD(__p.__r_.__value_.__l.__data_) = 14;
  *(void *)unint64_t v91 = &__p;
  int64x2_t v76 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v80, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)v91);
  unint64_t v77 = v76[5];
  if (v77)
  {
    v76[6] = v77;
    operator delete(v77);
  }
  v76[5] = (uint64_t *)v74;
  v76[6] = v75;
  v76[7] = v75;
  grl::codec::ResourcePack::encodeHeaderAndData((uint64_t)&v82, (unsigned __int16 **)&v80, a3);
  if (v78[0])
  {
    v78[1] = v78[0];
    operator delete(v78[0]);
  }
  std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy((uint64_t)&v80, v81[0]);
  if (v82)
  {
    float v83 = (char *)v82;
    operator delete(v82);
  }
  if (v85)
  {
    float v86 = v85;
    operator delete(v85);
  }
}

void grl::codec::IconMapPack::~IconMapPack(grl::codec::IconMapPack *this)
{
  grl::codec::IconMapPack::~IconMapPack(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  *(void *)this = &unk_1EF5671D0;
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 448, *((void **)this + 57));
  std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)this + 49);
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 360, *((void *)this + 46));
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 328, *((void *)this + 42));
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)this + 296, *((void *)this + 38));
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)this + 264, *((void **)this + 34));
  uint64_t v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::~__hash_table((uint64_t)(v2 + 3));
      (*(void (**)(void, void *, uint64_t))(**((void **)this + 30) + 40))(*((void *)this + 30), v2, 80);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unsigned int v4 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v4) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 28) + 40))(*((void *)this + 28), v4, 8 * *((void *)this + 27));
  }
  std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)this + 19);
  std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::~__hash_table((uint64_t)this + 96);
  char v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      (*(void (**)(void))(**((void **)this + 9) + 40))(*((void *)this + 9));
      char v5 = v6;
    }
    while (v6);
  }
  int v7 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v7, 8 * *((void *)this + 6));
  }
  *(void *)this = &unk_1EF567250;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t grl::codec::IconMapPack::resourceType(grl::codec::IconMapPack *this)
{
  return 0;
}

uint64_t grl::HaloGenerator::sharedHaloGenerator(grl::HaloGenerator *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&_MergedGlobals_5, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&_MergedGlobals_5, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<grl::HaloGenerator::sharedHaloGenerator(void)::$_0 &&>>);
  }
  return qword_1EB34D558;
}

void grl::HaloGenerator::generateHalo(void *a1@<X1>, void *a2@<X8>, float a3@<S0>)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*a1 && (char v5 = a1, ((*(uint64_t (**)(void))(*(void *)*a1 + 40))(*a1) & 1) != 0) && a3 > 0.0)
  {
    float v6 = 0.0;
    if (a3 >= 0.0) {
      float v6 = a3;
    }
    if (v6 <= 7.0) {
      float v7 = v6;
    }
    else {
      float v7 = 7.0;
    }
    float v8 = (float)(*(unsigned int (**)(void))(*(void *)*v5 + 24))() + (float)(v7 * 2.0);
    float v9 = (float)(*(unsigned int (**)(void))(*(void *)*v5 + 32))() + (float)(v7 * 2.0);
    uint64_t v10 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
    int64_t v11 = v10 + 1;
    LODWORD(v12) = vcvtps_u32_f32(v8);
    LODWORD(v13) = vcvtps_u32_f32(v9);
    __n128 v14 = esl::QuartzContext::QuartzContext(&v10[1], 1, v12, v13);
    if (((uint64_t (*)(__n128))v10[1].__get_deleter)(v14))
    {
      uint64_t v40 = v10;
      if (((CGImageGetAlphaInfo(*(CGImageRef *)(*v5 + 16)) - 1) & 0xFFFFFFFD) != 0) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = 3;
      }
      uint64_t v45 = ((uint64_t (*)(std::__shared_weak_count *))v11->__vftable[10].__on_zero_shared_weak)(v11);
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)*v5 + 120))();
      if (((unsigned int (*)(std::__shared_weak_count *))v11->__vftable[3].~__shared_weak_count)(v11))
      {
        unint64_t v17 = 0;
        uint64_t v18 = vcvtps_s32_f32(v7);
        float v19 = v7 * 0.9;
        float v20 = v7 * 1.1;
        uint64_t v49 = -v18;
        if (v18 >= 0) {
          uint64_t v21 = v18;
        }
        else {
          uint64_t v21 = -v18;
        }
        uint64_t v53 = v21 + 1;
        unint64_t v43 = &_MergedGlobals_5[-2 * v18 + 16];
        uint64_t v41 = v16 + v15 - 8 * v18;
        uint64_t v42 = -2 * v18;
        uint64_t v44 = -2 * v18;
        float32x2_t v52 = v5;
        uint64_t v46 = v21;
        uint64_t v47 = v18;
        do
        {
          if (((unsigned int (*)(std::__shared_weak_count *))v11->__vftable[2].__on_zero_shared_weak)(v11))
          {
            unint64_t v22 = 0;
            uint64_t v50 = v41;
            unint64_t v51 = v42;
            unint64_t v48 = v17;
            do
            {
              float v23 = 0.0;
              if ((v18 & 0x8000000000000000) == 0)
              {
                char v25 = v43;
                uint64_t v24 = v44;
                uint64_t v26 = v49;
                while (1)
                {
                  unint64_t v27 = v26 + v17;
                  if ((uint64_t)(v26 + v17) >= 0
                    && v27 < ((unsigned int (*)(std::__shared_weak_count *))v11->__vftable[3].~__shared_weak_count)(v11))
                  {
                    uint64_t v28 = v27 - v18;
                    if (v28 >= 0 && v28 < (unint64_t)(*(unsigned int (**)(void))(*(void *)*v5 + 32))()) {
                      break;
                    }
                  }
LABEL_37:
                  char v25 = (std::once_flag::_State_type *)((char *)v25 + 1);
                  ++v24;
                  if (v26++ == v21) {
                    goto LABEL_42;
                  }
                }
                uint64_t v30 = v50;
                unint64_t v29 = v51;
                uint64_t v31 = v25;
                uint64_t v32 = v49;
                do
                {
                  if ((uint64_t)(v22 + v32) >= 0
                    && v22 + v32 < ((unsigned int (*)(std::__shared_weak_count *))v11->__vftable[2].__on_zero_shared_weak)(v11)
                    && (v29 & 0x8000000000000000) == 0
                    && v29 < (*(unsigned int (**)(void))(*(void *)*v52 + 24))())
                  {
                    LOBYTE(v33) = *(unsigned char *)v31;
                    float v34 = (float)v33 / 3.1;
                    float v35 = 1.0;
                    if (v34 > v19)
                    {
                      float v35 = 0.0;
                      if (v34 < v20) {
                        float v35 = 1.0 - (float)((float)(v34 - v19) / (float)(v20 - v19));
                      }
                    }
                    LOBYTE(v36) = *(unsigned char *)(v30 + v24 * (*(uint64_t (**)(void))(*(void *)*v52 + 136))());
                    float v23 = v23 + (float)(v35 * (float)v36);
                    if (v23 >= 255.0)
                    {
                      float v23 = 255.0;
                      char v5 = v52;
                      uint64_t v18 = v47;
                      unint64_t v17 = v48;
                      uint64_t v21 = v46;
                      goto LABEL_42;
                    }
                  }
                  ++v32;
                  uint64_t v31 = (std::once_flag::_State_type *)((char *)v31 + 15);
                  v30 += 4;
                  ++v29;
                }
                while (v53 != v32);
                char v5 = v52;
                uint64_t v18 = v47;
                unint64_t v17 = v48;
                uint64_t v21 = v46;
                if (v23 != 255.0) {
                  goto LABEL_37;
                }
                float v23 = 255.0;
              }
LABEL_42:
              if (v23 >= 0.0) {
                float v38 = v23;
              }
              else {
                float v38 = 0.0;
              }
              if (v38 > 255.0) {
                float v38 = 255.0;
              }
              *(unsigned char *)(v45
                       + v22
                       + ((uint64_t (*)(std::__shared_weak_count *))v11->__vftable[2].__on_zero_shared)(v11)
                       * v17) = llroundf(v38);
              ++v22;
              v50 += 4;
              ++v51;
            }
            while (v22 < ((unsigned int (*)(std::__shared_weak_count *))v11->__vftable[2].__on_zero_shared_weak)(v11));
          }
          ++v17;
          ++v44;
        }
        while (v17 < ((unsigned int (*)(std::__shared_weak_count *))v11->__vftable[3].~__shared_weak_count)(v11));
      }
      ((void (*)(std::__shared_weak_count *))v11->__vftable[9].__on_zero_shared_weak)(v11);
      uint64_t v10 = v40;
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      CFTypeRef v39 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        float v55 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        __int16 v56 = 2080;
        CFNumberRef v57 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/HaloGenerator.cpp";
        __int16 v58 = 1024;
        int v59 = 103;
        _os_log_impl(&dword_1A1780000, v39, OS_LOG_TYPE_ERROR, "Failed to create grayscale context for holding stroke image.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      *a2 = 0;
      a2[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<grl::HaloGenerator::sharedHaloGenerator(void)::$_0 &&>>()
{
}

void grl::codec::IconDataPack::packLog(grl::codec::IconDataPack *this)
{
  char v2 = (std::mutex *)((char *)this + 336);
  std::mutex::lock((std::mutex *)((char *)this + 336));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v18);
  uint64_t v3 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"IconDataPack: ", 14);
  grl::codec::ResourcePack::fileName(this, (uint64_t)__p);
  if ((v17 & 0x80u) == 0) {
    unsigned int v4 = __p;
  }
  else {
    unsigned int v4 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v5 = v17;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  float v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  float v7 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"Number of Atlas Images: ", 24);
  float v8 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  float v9 = (std::locale::id *)MEMORY[0x1E4FBA258];
  uint64_t v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"Cache| hits: ", 13);
  int64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)" misses: ", 9);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" hitRate: ", 10);
  uint64_t v13 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  __n128 v14 = std::locale::use_facet((const std::locale *)__p, v9);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v19[0] = v15;
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62391A0](&v21);
  std::mutex::unlock(v2);
}

void grl::codec::IconDataPack::encode(grl::codec::IconDataPack **this@<X0>, __int16 a2@<W1>, void *a3@<X8>)
{
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  char v45 = 0;
  uint64_t v44 = 0;
  v46[0] = 73;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 79;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 78;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 68;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 84;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 80;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 75;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  CFTypeRef v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  float v7 = v42;
  size_t v8 = v43 - (unsigned char *)v42;
  if (v43 == v42)
  {
    float v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    if (v43 - (unsigned char *)v42 < 0) {
      goto LABEL_42;
    }
    float v9 = (char *)operator new(v43 - (unsigned char *)v42);
    uint64_t v10 = &v9[v8];
    CFTypeRef v39 = v9;
    uint64_t v41 = &v9[v8];
    float v6 = (grl::Allocator *)memmove(v9, v7, v8);
    uint64_t v40 = &v9[v8];
  }
  int64_t v11 = v10 - v9;
  if ((unint64_t)(v10 - v9) > 0x3F)
  {
    if (v11 != 64) {
      uint64_t v40 = v9 + 64;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v39, 64 - v11);
  }
  v38[0] = 0;
  v38[1] = (void *)grl::Allocator::instance(v6);
  v38[2] = 0;
  float32x2_t v37 = (uint64_t *)v38;
  grl::codec::ResourcePack::encodePackInfo((grl::codec::ResourcePack *)this, a2, __p);
  LOWORD(v32) = 1;
  *(void *)uint64_t v46 = &v32;
  uint64_t v12 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)&v32, (uint64_t)&std::piecewise_construct, (_WORD **)v46);
  uint64_t v13 = v12[5];
  if (v13)
  {
    unsigned char v12[6] = v13;
    operator delete(v13);
  }
  *(_OWORD *)(v12 + 5) = *(_OWORD *)__p;
  v12[7] = v36;
  __p[1] = 0;
  unsigned int v36 = 0;
  __p[0] = 0;
  LOWORD(v32) = 1;
  *(void *)uint64_t v46 = &v32;
  __n128 v14 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)&v32, (uint64_t)&std::piecewise_construct, (_WORD **)v46);
  *((unsigned char *)v14 + 64) = 1;
  v33[0] = 0;
  v33[1] = (void *)grl::Allocator::instance((grl::Allocator *)v14);
  uint64_t v34 = 0;
  uint64_t v32 = v33;
  *(_WORD *)uint64_t v50 = 14;
  *(void *)uint64_t v46 = v50;
  uint64_t v15 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)v50, (uint64_t)&std::piecewise_construct, (_WORD **)v46);
  unsigned __int8 v17 = v15 + 5;
  uint64_t v16 = v15[5];
  if (v16)
  {
    v15[6] = v16;
    operator delete(v16);
  }
  *unsigned __int8 v17 = 0;
  v17[1] = 0;
  float32x2_t v17[2] = 0;
  *(_WORD *)uint64_t v50 = 14;
  *(void *)uint64_t v46 = v50;
  *((unsigned char *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)v50, (uint64_t)&std::piecewise_construct, (_WORD **)v46)+ 64) = 0;
  size_t v18 = 20 * (void)this[8];
  *(void *)uint64_t v46 = 0;
  uint64_t v47 = 0;
  char v49 = 0;
  uint64_t v48 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v46, v18);
  *(_DWORD *)uint64_t v50 = this[8];
  geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
  float v19 = this[5];
  if (v19 != (grl::codec::IconDataPack *)(this + 6))
  {
    do
    {
      *(_DWORD *)uint64_t v50 = *((_DWORD *)v19 + 7);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_WORD *)uint64_t v50 = *((_WORD *)v19 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 2);
      *(_DWORD *)uint64_t v50 = *((_DWORD *)v19 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_DWORD *)uint64_t v50 = *((_DWORD *)v19 + 10);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_DWORD *)uint64_t v50 = *((_DWORD *)v19 + 11);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_DWORD *)uint64_t v50 = *((_DWORD *)v19 + 12);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      char v20 = (grl::codec::IconDataPack *)*((void *)v19 + 1);
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          char v20 = *(grl::codec::IconDataPack **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (grl::codec::IconDataPack *)*((void *)v19 + 2);
          BOOL v22 = *(void *)v21 == (void)v19;
          float v19 = v21;
        }
        while (!v22);
      }
      float v19 = v21;
    }
    while (v21 != (grl::codec::IconDataPack *)(this + 6));
  }
  *(_WORD *)uint64_t v50 = v34;
  geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 2);
  float v23 = v32;
  if (v32 != v33)
  {
    do
    {
      *(_WORD *)uint64_t v50 = *((_WORD *)v23 + 14);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 2);
      *(_DWORD *)uint64_t v50 = *((_DWORD *)v23 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_DWORD *)uint64_t v50 = *((_DWORD *)v23 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      uint64_t v24 = v23[1];
      if (v24)
      {
        do
        {
          char v25 = (void **)v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          char v25 = (void **)v23[2];
          BOOL v22 = *v25 == v23;
          float v23 = v25;
        }
        while (!v22);
      }
      float v23 = v25;
    }
    while (v25 != v33);
  }
  uint64_t v26 = *(void **)v46;
  size_t v27 = (size_t)v47 - *(void *)v46;
  if (v47 != *(void **)v46)
  {
    if ((uint64_t)v47 - *(void *)v46 >= 0)
    {
      uint64_t v28 = (char *)operator new((size_t)v47 - *(void *)v46);
      unint64_t v29 = (uint64_t *)&v28[v27];
      memmove(v28, v26, v27);
      if (!v26) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
LABEL_42:
    abort();
  }
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  if (*(void *)v46)
  {
LABEL_30:
    uint64_t v47 = v26;
    operator delete(v26);
  }
LABEL_31:
  strcpy((char *)v50, "\r");
  *(void *)uint64_t v46 = v50;
  uint64_t v30 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)v50, (uint64_t)&std::piecewise_construct, (_WORD **)v46);
  uint64_t v31 = v30[5];
  if (v31)
  {
    v30[6] = v31;
    operator delete(v31);
  }
  v30[5] = (uint64_t *)v28;
  v30[6] = v29;
  v30[7] = v29;
  strcpy((char *)v50, "\r");
  *(void *)uint64_t v46 = v50;
  *((unsigned char *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)v50, (uint64_t)&std::piecewise_construct, (_WORD **)v46)+ 64) = 1;
  grl::codec::ResourcePack::encodeHeaderAndData((uint64_t)&v39, (unsigned __int16 **)&v37, a3);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v32, v33[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy((uint64_t)&v37, v38[0]);
  if (v39)
  {
    uint64_t v40 = (char *)v39;
    operator delete(v39);
  }
  if (v42)
  {
    unint64_t v43 = v42;
    operator delete(v42);
  }
}

void grl::codec::IconDataPack::~IconDataPack(grl::codec::IconDataPack *this)
{
  grl::codec::IconDataPack::~IconDataPack(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  grl::codec::IconDataPack *v4;
  uint64_t v5;
  grl::codec::IconDataPack *v6;
  std::__shared_weak_count *v7;
  void *v8;
  void *v9;
  void *v10;

  *(void *)this = &unk_1EF567210;
  std::mutex::~mutex((std::mutex *)((char *)this + 336));
  char v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((void *)this + 17))
  {
    uint64_t v3 = *((void *)this + 15);
    unsigned int v4 = (grl::codec::IconDataPack *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (grl::codec::IconDataPack *)((char *)this + 120))
    {
      do
      {
        float v6 = (grl::codec::IconDataPack *)*((void *)v4 + 1);
        float v7 = (std::__shared_weak_count *)*((void *)v4 + 4);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        operator delete(v4);
        unsigned int v4 = v6;
      }
      while (v6 != (grl::codec::IconDataPack *)((char *)this + 120));
    }
  }
  size_t v8 = (void *)*((void *)this + 12);
  if (v8)
  {
    do
    {
      float v9 = (void *)*v8;
      operator delete(v8);
      size_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v10) {
    operator delete(v10);
  }
  std::__tree<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,grl::Allocator>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  *(void *)this = &unk_1EF567250;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t grl::codec::IconDataPack::resourceType(grl::codec::IconDataPack *this)
{
  return 0;
}

uint64_t std::__tree<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,grl::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,grl::Allocator>>::destroy(v3, a2[1]);
    unsigned int v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

void geo::Cache<unsigned short,std::shared_ptr<esl::QuartzImage>,std::hash<unsigned short>,geo::LRUPolicy>::_pop(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  char v2 = (uint64_t **)(a1 + 48);
  unsigned __int16 v5 = *(_WORD *)(v3 + 16);
  unsigned int v4 = *(std::__shared_weak_count **)(v3 + 32);
  uint64_t v6 = *(void *)(v3 + 24);
  float v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::list<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>>::pop_back(v2);
  std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::__erase_unique<unsigned short>((void *)(a1 + 8), &v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::__erase_unique<unsigned short>(void *a1, unsigned __int16 *a2)
{
  uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::find<unsigned short>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CCF0;
  char v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CCF0;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EF57CCF0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy_deallocate(void *__p)
{
  char v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

uint64_t grl::codec::ImageLayerData::toString(grl::codec::ImageLayerData *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v112);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)"{ ", 2);
  char v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)"blendMode: ", 11);
  grl::toString<esl::BlendMode>(*((unsigned __int8 *)this + 32), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned __int16 v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", changeHaloAndShadowOrder: ", 28);
  std::to_string(&__p, *((unsigned __int8 *)this + 33));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", fillColor: ", 13);
  float v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 34);
  uint64_t v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
  int64_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 35);
  uint64_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&__p, 1);
  uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 36);
  __n128 v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
  uint64_t v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 37);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", fillColorSource: ", 19);
  unsigned __int8 v17 = (const char *)&str_10_1;
  if (*((unsigned char *)this + 38) == 1) {
    unsigned __int8 v17 = "TransitLine";
  }
  if (*((unsigned char *)this + 38)) {
    size_t v18 = (char *)v17;
  }
  else {
    size_t v18 = "IconPack";
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v19 = &__p;
  }
  else {
    float v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", fillSize: ", 12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
  BOOL v22 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  std::ostream::operator<<();
  float v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", fillType: ", 12);
  unint64_t v24 = *((char *)this + 48);
  if (v24 > 2) {
    char v25 = (char *)&str_10_1;
  }
  else {
    char v25 = off_1E5AB2B90[v24];
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v25);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v26 = &__p;
  }
  else {
    uint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)v26, v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientAngle: ", 17);
  std::to_string(&__p, *((float *)this + 13));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v29 = &__p;
  }
  else {
    unint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientEndColor: ", 20);
  uint64_t v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 56);
  unsigned int v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)&__p, 1);
  uint64_t v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 57);
  float v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)&__p, 1);
  unsigned int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 58);
  float32x2_t v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)&__p, 1);
  float v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 59);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)&__p, 1);
  CFTypeRef v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientEndLocation: ", 23);
  std::to_string(&__p, *((float *)this + 15));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &__p;
  }
  else {
    uint64_t v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientStartColor: ", 22);
  unint64_t v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 64);
  uint64_t v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)&__p, 1);
  char v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 65);
  uint64_t v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)&__p, 1);
  uint64_t v47 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 66);
  uint64_t v48 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)&__p, 1);
  char v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 67);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)&__p, 1);
  uint64_t v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientStartLocation: ", 25);
  std::to_string(&__p, *((float *)this + 17));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v51 = &__p;
  }
  else {
    unint64_t v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientType: ", 16);
  unint64_t v54 = *((char *)this + 72);
  float v55 = (char *)&str_10_1;
  if (v54 <= 3) {
    float v55 = off_1E5AB2BA8[v54];
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v55);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v56 = &__p;
  }
  else {
    __int16 v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v57 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)v56, v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __int16 v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", haloColor: ", 13);
  int v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 73);
  uint64_t v60 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)&__p, 1);
  CFArrayRef v61 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 74);
  float v62 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)&__p, 1);
  __int16 v63 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 75);
  int v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)&__p, 1);
  uint64_t v65 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 76);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)&__p, 1);
  float v66 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", haloWeight: ", 14);
  std::to_string(&__p, *((float *)this + 20));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v67 = &__p;
  }
  else {
    float v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v68 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", horizontalPadding: ", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"(", 1);
  float v70 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)", ", 2);
  std::ostream::operator<<();
  float v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", horizontalStretchPadding: ", 28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)"(", 1);
  float v72 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)", ", 2);
  std::ostream::operator<<();
  size_t v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", imageDataSource: ", 19);
  float v74 = "External";
  if (*((unsigned char *)this + 100) != 1) {
    float v74 = (const char *)&str_10_1;
  }
  if (*((unsigned char *)this + 100)) {
    float v75 = (char *)v74;
  }
  else {
    float v75 = "IconPack";
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v75);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64x2_t v76 = &__p;
  }
  else {
    int64x2_t v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v77 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)v76, v77);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int64x2_t v78 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", imageOffset: ", 15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"(", 1);
  uint64_t v79 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)", ", 2);
  std::ostream::operator<<();
  unint64_t v80 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", imageStretchType: ", 20);
  unint64_t v81 = *((char *)this + 112);
  if (v81 > 2) {
    unint64_t v82 = (char *)&str_10_1;
  }
  else {
    unint64_t v82 = off_1E5AB2BC8[v81];
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v82);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v83 = &__p;
  }
  else {
    float v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v84 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)v83, v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  float v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", opacity: ", 11);
  std::to_string(&__p, *((float *)this + 29));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v86 = &__p;
  }
  else {
    float v86 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v87 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)v86, v87);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v88 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", shadowColor: ", 15);
  float v89 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 120);
  float v90 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)&__p, 1);
  unint64_t v91 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 121);
  uint64_t v92 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v91, (uint64_t)&__p, 1);
  uint64_t v93 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 122);
  char v94 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)&__p, 1);
  unint64_t v95 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 123);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)&__p, 1);
  unint64_t v96 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", shadowOffset: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)"(", 1);
  float v97 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v97, (uint64_t)", ", 2);
  std::ostream::operator<<();
  float v98 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", shadowWeight: ", 16);
  std::to_string(&__p, *((float *)this + 33));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v99 = &__p;
  }
  else {
    float v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v100 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v101 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", useShapeRect: ", 16);
  std::to_string(&__p, *((unsigned __int8 *)this + 136));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v102 = &__p;
  }
  else {
    unint64_t v102 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v103 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v101, (uint64_t)v102, v103);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v104 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", verticalPadding: ", 19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v104, (uint64_t)"(", 1);
  unint64_t v105 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v105, (uint64_t)", ", 2);
  std::ostream::operator<<();
  unint64_t v106 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", visible: ", 11);
  std::to_string(&__p, *((unsigned __int8 *)this + 148));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v107 = &__p;
  }
  else {
    float v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v108 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v106, (uint64_t)v107, v108);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)" }", 2);
  std::stringbuf::str();
  v112[0] = *MEMORY[0x1E4FBA408];
  uint64_t v109 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v112 + *(void *)(v112[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v113[0] = v109;
  v113[1] = MEMORY[0x1E4FBA470] + 16;
  if (v114 < 0) {
    operator delete((void *)v113[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v115);
}

uint64_t grl::codec::ImageLayerData::encode@<X0>(grl::codec::ImageLayerData *this@<X0>, void *a2@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = (grl::Allocator *)grl::Allocator::instance(this);
  uint64_t v17 = 0;
  __n128 v14 = (uint64_t *)&v15;
  float v19 = 0;
  std::string::size_type v20 = (grl::Allocator *)grl::Allocator::instance(v16);
  uint64_t v21 = 0;
  size_t v18 = (uint64_t *)&v19;
  float v23 = 0;
  unint64_t v24 = (grl::Allocator *)grl::Allocator::instance(v20);
  uint64_t v25 = 0;
  BOOL v22 = (uint64_t *)&v23;
  std::string::size_type v27 = 0;
  uint64_t v28 = (grl::Allocator *)grl::Allocator::instance(v24);
  uint64_t v29 = 0;
  uint64_t v26 = (uint64_t *)&v27;
  uint64_t v31 = 0;
  uint64_t v32 = (grl::Allocator *)grl::Allocator::instance(v28);
  uint64_t v33 = 0;
  std::string::size_type v30 = &v31;
  float v35 = 0;
  unsigned int v36 = (grl::Allocator *)grl::Allocator::instance(v32);
  uint64_t v37 = 0;
  uint64_t v34 = (uint64_t *)&v35;
  v39[0] = 0;
  v39[1] = grl::Allocator::instance(v36);
  v39[2] = 0;
  float v38 = v39;
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned __int8 *)this + 32) << 32) | 8;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  if (*((unsigned char *)this + 33)) {
    int v3 = 65548;
  }
  else {
    int v3 = 12;
  }
  *(_DWORD *)uint64_t v40 = v3;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v14, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)uint64_t v40 = 5;
  *(_DWORD *)&void v40[2] = *(_DWORD *)((char *)this + 34);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned __int8 *)this + 38) << 32) | 0x23;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)uint64_t v40 = 1;
  uint64_t v4 = *((void *)this + 5);
  *(void *)&v40[4] = v4;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned __int8 *)this + 48) << 32) | 0x12;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned int *)this + 13) << 32) | 0x27;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)uint64_t v40 = 17;
  *(_DWORD *)&void v40[2] = *((_DWORD *)this + 14);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned int *)this + 15) << 32) | 0x21;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)uint64_t v40 = 16;
  *(_DWORD *)&void v40[2] = *((_DWORD *)this + 16);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned int *)this + 17) << 32) | 0x20;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned __int8 *)this + 72) << 32) | 0x28;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)uint64_t v40 = 6;
  *(_DWORD *)&void v40[2] = *(_DWORD *)((char *)this + 73);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned int *)this + 20) << 32) | 2;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  strcpy(v40, "\n");
  uint64_t v5 = *(void *)((char *)this + 84);
  *(void *)&v40[4] = v5;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  strcpy(v40, "$");
  uint64_t v6 = *(void *)((char *)this + 92);
  *(void *)&v40[4] = v6;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned __int8 *)this + 100) << 32) | 0x30;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  if (*((unsigned char *)this + 149))
  {
    strcpy(v40, "*");
    uint64_t v7 = *((void *)this + 13);
    *(void *)&v40[4] = v7;
    std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  }
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned __int8 *)this + 112) << 32) | 9;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned int *)this + 29) << 32) | 0x2E;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  strcpy(v40, "\a");
  *(_DWORD *)&void v40[2] = *((_DWORD *)this + 30);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)uint64_t v40 = 4;
  uint64_t v8 = *(void *)((char *)this + 124);
  *(void *)&v40[4] = v8;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  *(void *)uint64_t v40 = ((unint64_t)*((unsigned int *)this + 33) << 32) | 3;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  if (*((unsigned char *)this + 136)) {
    int v9 = 65581;
  }
  else {
    int v9 = 45;
  }
  *(_DWORD *)uint64_t v40 = v9;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v14, (unsigned __int16 *)v40, (uint64_t)v40);
  strcpy(v40, "\v");
  uint64_t v10 = *(void *)((char *)this + 140);
  *(void *)&v40[4] = v10;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  if (*((unsigned char *)this + 148)) {
    int v11 = 65551;
  }
  else {
    int v11 = 15;
  }
  *(_DWORD *)uint64_t v40 = v11;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v14, (unsigned __int16 *)v40, (uint64_t)v40);
  grl::PropertySet::encode((grl::PropertySet *)&v14, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v38, v39[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v34, v35);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v30, v31);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v26, v27);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v18, v19);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v14, v15);
}

void *grl::buildStringFromResourceNames@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1 && a2)
  {
    uint64_t v4 = a1;
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v10);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"[", 1);
    unint64_t v5 = 0;
    do
    {
      int v6 = *(char *)(v4 + 23);
      if (v6 >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *(void *)v4;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v4 + 8);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, v7, v8);
      if (v5 < a2 - 1) {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
      }
      ++v5;
      v4 += 24;
    }
    while (a2 != v5);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
    std::stringbuf::str();
    v10[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v10[1] = MEMORY[0x1E4FBA470] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1A62391A0](&v12);
  }
  else
  {
    return std::string::basic_string[abi:nn180100]<0>(a3, "nullptr");
  }
}

void grl::IconManager::~IconManager(grl::IconManager *this)
{
  *(void *)this = &unk_1EF566FD8;
  grl::ResourceProvider::removeObserver(*((void *)this + 1), (uint64_t)this);
  char v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::pair<std::string,float>,std::mutex>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::mutex>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::mutex>,grl::Allocator>>::destroy((uint64_t)this + 440, *((void *)this + 56));
  std::condition_variable::~condition_variable((std::condition_variable *)this + 8);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 7);
  std::mutex::~mutex((std::mutex *)((char *)this + 272));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 216));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 168));
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    std::default_delete<grl::IconManager::PackInfo>::operator()[abi:nn180100](v3);
  }
  grl::ResourceManager::~ResourceManager(this);
}

{
  uint64_t vars8;

  grl::IconManager::~IconManager(this);
  JUMPOUT(0x1A6239270);
}

void grl::IconManager::imageForDataID(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, float *a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v12 = ceilf(*a4);
  unsigned int v20 = a2;
  std::string::basic_string[abi:nn180100]<0>(&__p, "Default");
  v26[0] = v12;
  grl::IconManager::retrieveResourcePack(buf, a1, (float *)&__p, 2);
  uint64_t v13 = *(grl::codec::IconMapPack **)buf;
  __n128 v14 = (std::__shared_weak_count *)v22[0];
  if (v22[0])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22[0] + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v13) {
    grl::IconManager::loadGlobalResourcePack((uint64_t)buf, a1);
  }
  uint64_t v15 = v14;
  uint64_t v16 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,unsigned int>,grl::Allocator>>::find<unsigned int>((void *)v13 + 19, &v20);
  if (v16)
  {
    unsigned int v17 = *(_DWORD *)(v16 + 20);
    if (v17)
    {
LABEL_10:
      if (!v15) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  uint64_t v16 = grl::codec::IconMapPack::dataIDFallback(v13, &v20);
  if (v16)
  {
    unsigned int v17 = v16;
    goto LABEL_10;
  }
  if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
  }
  float v19 = GEOGetGeoResourceLibIconManagerLog::log;
  uint64_t v16 = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR);
  if (v16)
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v20;
    LOWORD(v22[0]) = 2048;
    *(double *)((char *)v22 + 2) = v12;
    _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, "Failed to find ID for Data Identifier\nData Identifier: %i - Content Scale: %f", buf, 0x12u);
  }
  unsigned int v17 = 0;
  if (v15) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_12:
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  if (a5) {
    *a5 = v17;
  }
  if (v17)
  {
    uint64_t v24 = 0;
    uint64_t v25 = grl::Allocator::instance((grl::Allocator *)v16);
    *(void *)uint64_t v26 = 0;
    std::string __p = &v24;
    grl::IconManager::imageForIconID(a1, v17, a3, (uint64_t)a4);
  }
  if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
  }
  size_t v18 = GEOGetGeoResourceLibIconManagerLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
  {
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = a2;
    _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_ERROR, "Failed to find Icon ID for Data ID: %i", (uint8_t *)&__p, 8u);
  }
  *a6 = 0;
  a6[1] = 0;
}

void grl::IconManager::multiPOIBalloonContent(grl::Allocator *a1, float ***a2, unsigned int a3, const grl::IconModifiers *a4, uint64_t a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v65 = 0;
  uint64_t v66 = grl::Allocator::instance(a1);
  uint64_t v67 = 0;
  int v64 = &v65;
  grl::IconModifiers::IconModifiers((grl::IconModifiers *)v70, a4);
  char v62 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    unsigned int v10 = 0;
    unsigned int v9 = 0;
    goto LABEL_28;
  }
  __int16 v58 = a2;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  BOOL v11 = 0;
  while (1)
  {
    uint64_t v13 = *v7;
    float v12 = (std::__shared_weak_count *)v7[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v15 = v13[12];
    float v14 = v13[13];
    float v17 = v13[10];
    float v16 = v13[11];
    LODWORD(v68) = 1;
    BYTE4(v68) = 0;
    uint64_t v18 = std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::find<grl::IconLayerMapKey>((uint64_t)(v13 + 24), (__int16 *)&v68);
    if (v13 + 26 == (float *)v18) {
      float v19 = 0;
    }
    else {
      float v19 = *(float **)(v18 + 40);
    }
    if (*((unsigned char *)v13 + 163)
      && (LODWORD(v68) = gm::Box<float,2>::operator+(v19 + 3, v19 + 13),
          HIDWORD(v68) = v20,
          image[0] = (CGImageRef)__PAIR64__(v22, v21),
          LODWORD(v73) = gm::Box<float,2>::operator+(v19 + 7, v19 + 13),
          HIDWORD(v73) = v23,
          unint64_t v74 = __PAIR64__(v25, v24),
          !gm::Box<float,2>::operator==(&v68, &v73)))
    {
      if (v62)
      {
        uint64_t v26 = (unsigned __int8 *)v13 + 163;
LABEL_15:
        BOOL v11 = geo::optional<geo::Color<unsigned char,4,(geo::ColorSpace)2>>::operator==((uint64_t)&v62, v26);
        goto LABEL_20;
      }
      BOOL v11 = 1;
      if (*((unsigned char *)v13 + 163))
      {
        int v63 = *((_DWORD *)v13 + 41);
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v26 = (unsigned __int8 *)v13 + 153;
      if (*((unsigned char *)v13 + 153))
      {
        if (!v62)
        {
          int v63 = *(_DWORD *)((char *)v13 + 154);
          BOOL v11 = 1;
LABEL_19:
          char v62 = 1;
          goto LABEL_20;
        }
        goto LABEL_15;
      }
    }
LABEL_20:
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    v10 += (float)(v15 - v17);
    unsigned int v9 = fmax((double)v9, (float)(v14 - v16));
    v7 += 2;
    if (v7 == v8)
    {
      if (v11)
      {
        a2 = v58;
        if (!v62) {
          goto LABEL_32;
        }
        goto LABEL_29;
      }
      a2 = v58;
LABEL_28:
      int v63 = -11250604;
LABEL_29:
      if (!v71) {
        char v71 = 1;
      }
      int v72 = v63;
LABEL_32:
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      uint64_t v28 = CGBitmapContextCreate(0, v10, v9, 8uLL, 4 * v10, DeviceRGB, 2u);
      uint64_t v29 = *a2;
      std::string::size_type v30 = a2[1];
      if (*a2 != v30)
      {
        float v31 = 0.0;
        do
        {
          uint64_t v33 = *v29;
          uint64_t v32 = (std::__shared_weak_count *)v29[1];
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::size_type v68 = (void *)__PAIR64__((float)((float)(v33[11] - v33[13]) + (float)v9) * 0.5, LODWORD(v31));
          float v34 = gm::Box<float,2>::operator+(v33 + 10, (float *)&v68);
          double v35 = v34;
          double v37 = v36;
          float v39 = v38 - v34;
          float v41 = v40 - v36;
          if (v39 < 0.0) {
            float v39 = 0.0;
          }
          double v42 = v39;
          if (v41 >= 0.0) {
            float v43 = v41;
          }
          else {
            float v43 = 0.0;
          }
          CGFloat v44 = v43;
          grl::IconImage::image((grl::IconImage *)v33, &v68);
          v78.origin.x = v35;
          v78.origin.y = v37;
          v78.size.width = v42;
          v78.size.height = v44;
          CGContextDrawImage(v28, v78, image[0]);
          std::string::size_type v68 = &unk_1EF559118;
          if (image[0]) {
            CFRelease(image[0]);
          }
          float v45 = v33[10];
          if ((float)(v33[12] - v45) >= 0.0) {
            float v46 = v33[12] - v45;
          }
          else {
            float v46 = 0.0;
          }
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          float v31 = v31 + v46;
          v29 += 2;
        }
        while (v29 != v30);
      }
      uint64_t v47 = CGBitmapContextCreateImage(v28);
      CFRelease(DeviceRGB);
      CFRelease(v28);
      uint64_t v48 = operator new(0x40uLL);
      v48[2] = 0;
      v48[1] = 0;
      *uint64_t v48 = &unk_1EF582BE0;
      esl::QuartzImage::QuartzImage((esl::QuartzImage *)(v48 + 3), v47);
      CFRelease(v47);
      image[3] = 0;
      float v49 = (float)(*(unsigned int (**)(void *))(v48[3] + 24))(v48 + 3);
      unsigned int v50 = (*(uint64_t (**)(void *))(v48[3] + 32))(v48 + 3);
      *(float *)&std::string::size_type v68 = v49;
      *((float *)&v68 + 1) = (float)v50;
      atomic_fetch_add_explicit(v48 + 1, 1uLL, memory_order_relaxed);
      size_t v73 = &unk_1EF57CBD0;
      unint64_t v74 = (unint64_t)(v48 + 3);
      float v75 = v48;
      int64x2_t v76 = &v73;
      std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::swap[abi:nn180100](&v73, image);
      std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::~__value_func[abi:nn180100](&v73);
      uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66 + 16))(v66, 80, 8);
      *(_WORD *)(v51 + 32) = 0;
      *(void *)(v51 + 40) = v68;
      std::string::size_type v52 = (void *)std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100](v51 + 48, (uint64_t)image);
      uint64_t v53 = v65;
      if (v65)
      {
        unsigned int v54 = *(unsigned __int16 *)(v51 + 32);
        while (1)
        {
          while (1)
          {
            float v55 = (uint64_t **)v53;
            unsigned int v56 = *((unsigned __int16 *)v53 + 16);
            if (v54 >= v56) {
              break;
            }
            uint64_t v53 = *v55;
            std::string::size_type v57 = v55;
            if (!*v55) {
              goto LABEL_58;
            }
          }
          if (v56 >= v54) {
            break;
          }
          uint64_t v53 = v55[1];
          if (!v53)
          {
            std::string::size_type v57 = v55 + 1;
            goto LABEL_58;
          }
        }
        if (v51)
        {
          std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::~__value_func[abi:nn180100](v52);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66 + 40))(v66, v51, 80);
        }
      }
      else
      {
        std::string::size_type v57 = &v65;
        float v55 = &v65;
LABEL_58:
        *(void *)uint64_t v51 = 0;
        *(void *)(v51 + 8) = 0;
        *(void *)(v51 + 16) = v55;
        *std::string::size_type v57 = (uint64_t *)v51;
        if (*v64)
        {
          int v64 = (uint64_t **)*v64;
          uint64_t v51 = (uint64_t)*v57;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v65, (uint64_t *)v51);
        ++v67;
      }
      grl::IconManager::imageForIconID((uint64_t)a1, a3, (uint64_t)v70, a5);
    }
  }
}

BOOL geo::optional<geo::Color<unsigned char,4,(geo::ColorSpace)2>>::operator==(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return (*(unsigned char *)a1 != 0) ^ (v2 == 0);
  }
  else {
    return *(_DWORD *)(a1 + 1) == *(_DWORD *)(a2 + 1);
  }
}

void grl::IconManager::removeAllPacks(grl::IconManager *this)
{
}

void grl::IconManager::clearFontCache(grl::IconManager *this)
{
  char v1 = (grl::FontManager *)*((void *)this + 62);
  if (v1) {
    grl::FontManager::clearFontCache(v1);
  }
}

void grl::IconManager::packLogs(grl::IconManager *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 104));
  if (*((void *)this + 12))
  {
    int v72 = v4;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v77);
    uint64_t v5 = v78[0];
    *(_DWORD *)((char *)&v78[1] + *(void *)(v78[0] - 24)) = *(_DWORD *)((unsigned char *)&v78[1] + *(void *)(v78[0] - 24)) & 0xFFFFFEFB | 4;
    *(void *)((char *)&v78[2] + *(void *)(v5 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"hits=", 5);
    int v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)" misses=", 8);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"hit%=", 5);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    unsigned int v9 = (std::locale::id *)MEMORY[0x1E4FBA258];
    unsigned int v10 = std::locale::use_facet(&v74, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Number of Config Packs: ", 24);
    BOOL v11 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    float v12 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Number of Image Packs: ", 23);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    float v14 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Number of Map Packs: ", 21);
    float v15 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    float v16 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
    float v17 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Config Packs: ", 14);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    float v19 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    size_t v73 = this;
    uint64_t v20 = *((void *)this + 12);
    uint64_t v21 = v20 + 152;
    uint64_t v22 = *(void *)(v20 + 160);
    if (v22 != v20 + 152)
    {
      int v23 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unsigned int v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Pack Key: ", 10);
        int v25 = *(char *)(v22 + 39);
        if (v25 >= 0) {
          uint64_t v26 = v22 + 16;
        }
        else {
          uint64_t v26 = *(void *)(v22 + 16);
        }
        if (v25 >= 0) {
          uint64_t v27 = *(unsigned __int8 *)(v22 + 39);
        }
        else {
          uint64_t v27 = *(void *)(v22 + 24);
        }
        uint64_t v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, v26, v27);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" - ", 3);
        uint64_t v29 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
        std::string::size_type v30 = std::locale::use_facet(&v74, v23);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(&v74);
        std::ostream::put();
        std::ostream::flush();
        (*(void (**)(std::locale *__return_ptr))(**(void **)(v22 + 48) + 40))(&v74);
        if ((v76 & 0x80u) == 0) {
          locale = &v74;
        }
        else {
          locale = v74.__locale_;
        }
        if ((v76 & 0x80u) == 0) {
          uint64_t v32 = v76;
        }
        else {
          uint64_t v32 = v75;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)locale, v32);
        if ((char)v76 < 0) {
          operator delete(v74.__locale_);
        }
        uint64_t v22 = *(void *)(v22 + 8);
      }
      while (v22 != v21);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
    uint64_t v33 = (std::locale::id *)MEMORY[0x1E4FBA258];
    float v34 = std::locale::use_facet(&v74, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    double v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Image Packs: ", 13);
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
    float v36 = std::locale::use_facet(&v74, v33);
    ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v37 = *((void *)v73 + 12);
    uint64_t v38 = v37 + 80;
    uint64_t v39 = *(void *)(v37 + 88);
    if (v39 != v37 + 80)
    {
      float v40 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        float v41 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Pack Key: ", 10);
        int v42 = *(char *)(v39 + 39);
        if (v42 >= 0) {
          uint64_t v43 = v39 + 16;
        }
        else {
          uint64_t v43 = *(void *)(v39 + 16);
        }
        if (v42 >= 0) {
          uint64_t v44 = *(unsigned __int8 *)(v39 + 39);
        }
        else {
          uint64_t v44 = *(void *)(v39 + 24);
        }
        float v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, v43, v44);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)" - ", 3);
        float v46 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
        uint64_t v47 = std::locale::use_facet(&v74, v40);
        ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
        std::locale::~locale(&v74);
        std::ostream::put();
        std::ostream::flush();
        (*(void (**)(std::locale *__return_ptr))(**(void **)(v39 + 48) + 40))(&v74);
        if ((v76 & 0x80u) == 0) {
          uint64_t v48 = &v74;
        }
        else {
          uint64_t v48 = v74.__locale_;
        }
        if ((v76 & 0x80u) == 0) {
          uint64_t v49 = v76;
        }
        else {
          uint64_t v49 = v75;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)v48, v49);
        if ((char)v76 < 0) {
          operator delete(v74.__locale_);
        }
        uint64_t v39 = *(void *)(v39 + 8);
      }
      while (v39 != v38);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
    unsigned int v50 = (std::locale::id *)MEMORY[0x1E4FBA258];
    uint64_t v51 = std::locale::use_facet(&v74, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::string::size_type v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Map Packs: ", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
    uint64_t v53 = std::locale::use_facet(&v74, v50);
    ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    unsigned int v54 = (void *)*((void *)v73 + 12);
    std::string::size_type v57 = (void *)*v54;
    unsigned int v56 = v54 + 1;
    float v55 = v57;
    if (v57 != v56)
    {
      __int16 v58 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        int v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Pack Key: ", 10);
        int v60 = *((char *)v55 + 55);
        if (v60 >= 0) {
          uint64_t v61 = (uint64_t)(v55 + 4);
        }
        else {
          uint64_t v61 = v55[4];
        }
        if (v60 >= 0) {
          uint64_t v62 = *((unsigned __int8 *)v55 + 55);
        }
        else {
          uint64_t v62 = v55[5];
        }
        int v63 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, v61, v62);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" - ", 3);
        int v64 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
        uint64_t v65 = std::locale::use_facet(&v74, v58);
        ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
        std::locale::~locale(&v74);
        std::ostream::put();
        std::ostream::flush();
        (*(void (**)(std::locale *__return_ptr))(*(void *)v55[8] + 40))(&v74);
        if ((v76 & 0x80u) == 0) {
          uint64_t v66 = &v74;
        }
        else {
          uint64_t v66 = v74.__locale_;
        }
        if ((v76 & 0x80u) == 0) {
          uint64_t v67 = v76;
        }
        else {
          uint64_t v67 = v75;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)v66, v67);
        if ((char)v76 < 0) {
          operator delete(v74.__locale_);
        }
        std::string::size_type v68 = (void *)v55[1];
        if (v68)
        {
          do
          {
            size_t v69 = v68;
            std::string::size_type v68 = (void *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            size_t v69 = (void *)v55[2];
            BOOL v70 = *v69 == (void)v55;
            float v55 = v69;
          }
          while (!v70);
        }
        float v55 = v69;
      }
      while (v69 != v56);
    }
    std::stringbuf::str();
    v77[0] = *MEMORY[0x1E4FBA408];
    uint64_t v71 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v77 + *(void *)(v77[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v78[0] = v71;
    v78[1] = MEMORY[0x1E4FBA470] + 16;
    if (v79 < 0) {
      operator delete((void *)v78[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A62391A0](&v80);
    uint64_t v4 = v72;
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(a2, "Pack Info Is Null");
  }
  std::__shared_mutex_base::unlock_shared(v4);
}

grl::IconModifiers *grl::IconModifiers::IconModifiers(grl::IconModifiers *this, const grl::IconModifiers *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((unsigned char *)this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((unsigned char *)this + 16) = 1;
  }
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)this + 25) = 0;
  if (*((unsigned char *)a2 + 25))
  {
    *(_DWORD *)((char *)this + 26) = *(_DWORD *)((char *)a2 + 26);
    *((unsigned char *)this + 25) = 1;
  }
  *((unsigned char *)this + 30) = 0;
  if (*((unsigned char *)a2 + 30))
  {
    *(_DWORD *)((char *)this + 31) = *(_DWORD *)((char *)a2 + 31);
    *((unsigned char *)this + 30) = 1;
  }
  *((unsigned char *)this + 36) = 0;
  if (*((unsigned char *)a2 + 36))
  {
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((unsigned char *)this + 36) = 1;
  }
  *((unsigned char *)this + 44) = 0;
  if (*((unsigned char *)a2 + 44))
  {
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((unsigned char *)this + 44) = 1;
  }
  geo::optional<std::string>::optional((unsigned char *)this + 56, (uint64_t)a2 + 56);
  *((void *)this + 11) = 0;
  uint64_t v4 = *((void *)a2 + 13);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = v4;
  uint64_t v5 = (uint64_t **)((char *)this + 96);
  *((void *)this + 14) = 0;
  *((void *)this + 11) = (char *)this + 96;
  int v6 = (const grl::IconModifiers *)*((void *)a2 + 11);
  if (v6 != (const grl::IconModifiers *)((char *)a2 + 96))
  {
    do
    {
      uint64_t v7 = *v5;
      uint64_t v8 = (uint64_t **)((char *)this + 96);
      if (*((uint64_t ***)this + 11) == v5) {
        goto LABEL_18;
      }
      unsigned int v9 = *v5;
      unsigned int v10 = (char *)this + 96;
      if (v7)
      {
        do
        {
          uint64_t v8 = (uint64_t **)v9;
          unsigned int v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t **)*((void *)v10 + 2);
          BOOL v11 = *v8 == (uint64_t *)v10;
          unsigned int v10 = (char *)v8;
        }
        while (v11);
      }
      unsigned int v12 = *((unsigned __int16 *)v6 + 16);
      if (*((unsigned __int16 *)v8 + 16) < v12)
      {
LABEL_18:
        if (v7) {
          uint64_t v13 = v8;
        }
        else {
          uint64_t v13 = (uint64_t **)((char *)this + 96);
        }
        if (v7) {
          float v14 = v8 + 1;
        }
        else {
          float v14 = (uint64_t **)((char *)this + 96);
        }
        if (*v14) {
          goto LABEL_37;
        }
      }
      else
      {
        float v14 = (uint64_t **)((char *)this + 96);
        uint64_t v13 = (uint64_t **)((char *)this + 96);
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v7;
              unsigned int v15 = *((unsigned __int16 *)v7 + 16);
              if (v15 <= v12) {
                break;
              }
              uint64_t v7 = *v13;
              float v14 = v13;
              if (!*v13) {
                goto LABEL_33;
              }
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            uint64_t v7 = v13[1];
            if (!v7)
            {
              float v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_33:
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 13) + 16))(*((void *)this + 13), 64, 8);
      *(_WORD *)(v16 + 32) = *((_WORD *)v6 + 16);
      float v17 = (std::string *)(v16 + 40);
      if (*((char *)v6 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)v6 + 5), *((void *)v6 + 6));
      }
      else
      {
        long long v18 = *(_OWORD *)((char *)v6 + 40);
        *(void *)(v16 + 56) = *((void *)v6 + 7);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      }
      std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at((uint64_t **)this + 11, (uint64_t)v13, v14, (uint64_t *)v16);
LABEL_37:
      float v19 = (const grl::IconModifiers *)*((void *)v6 + 1);
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          float v19 = *(const grl::IconModifiers **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (const grl::IconModifiers *)*((void *)v6 + 2);
          BOOL v11 = *(void *)v20 == (void)v6;
          int v6 = v20;
        }
        while (!v11);
      }
      int v6 = v20;
    }
    while (v20 != (const grl::IconModifiers *)((char *)a2 + 96));
  }
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  uint64_t v22 = (unsigned char *)*((void *)a2 + 15);
  uint64_t v21 = (unsigned char *)*((void *)a2 + 16);
  int64_t v23 = v21 - v22;
  if (v21 != v22)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100]((void *)this + 15, v23 >> 2);
    unsigned int v24 = (char *)*((void *)this + 16);
    memmove(v24, v22, v23);
    *((void *)this + 16) = &v24[v23];
  }
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  uint64_t v25 = *((void *)a2 + 18);
  uint64_t v26 = *((void *)a2 + 19);
  if (v26 != v25)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100]((void *)this + 18, (v26 - v25) >> 2);
    uint64_t v27 = 0;
    uint64_t v28 = *((void *)this + 19);
    do
    {
      *(_DWORD *)(v28 + v27) = *(_DWORD *)(v25 + v27);
      v27 += 4;
    }
    while (v25 + v27 != v26);
    *((void *)this + 19) = v28 + v27;
  }
  std::__function::__value_func<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::__value_func[abi:nn180100]((uint64_t)this + 168, (uint64_t)a2 + 168);
  return this;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,float>,std::mutex>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::mutex>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::mutex>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<std::pair<std::string,float>,std::mutex>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::mutex>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::mutex>,grl::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<std::pair<std::string,float>,std::mutex>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::mutex>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::mutex>,grl::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    std::mutex::~mutex((std::mutex *)(a2 + 64));
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

void geo::Cache<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash,geo::LRUPolicy>::_pop(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(char *)(v2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 16), *(void *)(v2 + 24));
  }
  else {
    std::string __p = *(std::string *)(v2 + 16);
  }
  int v9 = *(_DWORD *)(v2 + 40);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 56);
  uint64_t v10 = *(void *)(v2 + 48);
  BOOL v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (uint64_t *)a1[6];
  uint64_t v5 = *v4;
  *(void *)(v5 + 8) = v4[1];
  *(void *)v4[1] = v5;
  --a1[8];
  std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>((uint64_t)(v4 + 2));
  operator delete(v4);
  int v6 = a1 + 1;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::find<std::pair<std::string,float>>(v6, (float *)&__p);
  if (v7) {
    std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::erase(v6, (char *)v7);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::erase(void *a1, char *__p)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  uint64_t v4 = *(void *)__p;
  unint64_t v5 = *((void *)__p + 1);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v5 >= *(void *)&v3) {
      v5 %= *(void *)&v3;
    }
  }
  else
  {
    v5 &= *(void *)&v3 - 1;
  }
  uint64_t v7 = *(char **)(*a1 + 8 * v5);
  do
  {
    uint64_t v8 = v7;
    uint64_t v7 = *(char **)v7;
  }
  while (v7 != __p);
  if (v8 != (char *)(a1 + 2))
  {
    unint64_t v9 = *((void *)v8 + 1);
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 == v5)
    {
LABEL_20:
      if (!v4) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = *(void *)(v4 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v3) {
      v10 %= *(void *)&v3;
    }
  }
  else
  {
    v10 &= *(void *)&v3 - 1;
  }
  if (v10 != v5)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v5) = 0;
    uint64_t v4 = *(void *)__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = *(void *)(v4 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
  }
  else
  {
    v11 &= *(void *)&v3 - 1;
  }
  if (v11 != v5)
  {
    *(void *)(*a1 + 8 * v11) = v8;
    uint64_t v4 = *(void *)__p;
  }
LABEL_27:
  *(void *)uint64_t v8 = v4;
  *(void *)std::string __p = 0;
  --a1[3];
  if (__p[39] < 0) {
    operator delete(*((void **)__p + 2));
  }
  operator delete(__p);
}

void *std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CBD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CBD0;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EF57CBD0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF57CBD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

float std::vector<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  else
  {
    uint8x8_t v6 = (long long *)(a2 + v4 - a4);
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      if (v7)
      {
        long long v8 = *v6;
        *(void *)(v7 + 16) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v7 = v8;
        *((void *)v6 + 1) = 0;
        *((void *)v6 + 2) = 0;
        *(void *)uint8x8_t v6 = 0;
        float result = *((float *)v6 + 6);
        *(float *)(v7 + 24) = result;
      }
      v6 += 2;
      v7 += 32;
    }
    while ((unint64_t)v6 < a3);
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = -32 * ((v4 - a4) >> 5);
    do
    {
      unsigned int v12 = (void **)(v4 + v10 - 32);
      if (*(char *)(v4 + v10 - 9) < 0) {
        operator delete(*v12);
      }
      uint64_t v13 = (long long *)(v5 + v10 - 32);
      long long v14 = *v13;
      *(void *)(v4 + v10 - 16) = *(void *)(v5 + v10 - 16);
      *(_OWORD *)unsigned int v12 = v14;
      *(unsigned char *)(v5 + v10 - 9) = 0;
      *(unsigned char *)uint64_t v13 = 0;
      float result = *(float *)(v5 + v10 - 8);
      *(float *)(v4 + v10 - 8) = result;
      v10 -= 32;
    }
    while (v11 != v10);
  }
  return result;
}

float geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>::construct<std::pair<std::string,float>,std::pair<std::string,float>&>(std::string *this, long long *a2)
{
  if (this)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    float result = *((float *)a2 + 6);
    *(float *)&this[1].__r_.__value_.__l.__data_ = result;
  }
  return result;
}

void std::default_delete<grl::IconManager::PackInfo>::operator()[abi:nn180100](uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 304));
  std::mutex::~mutex((std::mutex *)(a1 + 240));
  std::mutex::~mutex((std::mutex *)(a1 + 176));
  if (*(void *)(a1 + 168))
  {
    uint64_t v2 = *(void *)(a1 + 152);
    uint64_t v3 = *(uint64_t **)(a1 + 160);
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(v2 + 8);
    **(void **)(v2 + 8) = v4;
    *(void *)(a1 + 168) = 0;
    if (v3 != (uint64_t *)(a1 + 152))
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 152));
    }
  }
  uint8x8_t v6 = *(void ***)(a1 + 128);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void **)*v6;
      if (*((char *)v6 + 39) < 0) {
        operator delete(v6[2]);
      }
      operator delete(v6);
      uint8x8_t v6 = v7;
    }
    while (v7);
  }
  long long v8 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v8) {
    operator delete(v8);
  }
  if (*(void *)(a1 + 96))
  {
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = *(uint64_t **)(a1 + 88);
    uint64_t v11 = *v10;
    *(void *)(v11 + 8) = *(void *)(v9 + 8);
    **(void **)(v9 + 8) = v11;
    *(void *)(a1 + 96) = 0;
    if (v10 != (uint64_t *)(a1 + 80))
    {
      do
      {
        unsigned int v12 = (uint64_t *)v10[1];
        std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>((uint64_t)(v10 + 2));
        operator delete(v10);
        uint64_t v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 80));
    }
  }
  uint64_t v13 = *(void ***)(a1 + 56);
  if (v13)
  {
    do
    {
      long long v14 = (void **)*v13;
      if (*((char *)v13 + 39) < 0) {
        operator delete(v13[2]);
      }
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
  unsigned int v15 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v15) {
    operator delete(v15);
  }
  std::__tree<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,grl::Allocator>>::destroy(a1, *(void *)(a1 + 8));
  JUMPOUT(0x1A6239270);
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,grl::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,grl::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
    unint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

void std::__shared_ptr_emplace<grl::codec::IconDataPack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::codec::IconDataPack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<grl::codec::IconDataPack>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<grl::codec::IconConfigPack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::codec::IconConfigPack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<grl::codec::IconConfigPack>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<grl::codec::IconMapPack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::codec::IconMapPack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<grl::codec::IconMapPack>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

BOOL grl::ShapeLayerRenderer::renderBalloonToContext(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 152))
  {
    *(void *)buf = 0;
    if (*(void *)(a1 + 204))
    {
      std::string::size_type v87 = 0;
      char v88 = 0;
      uint64_t v89 = 0;
      int v7 = *(unsigned __int8 *)(a1 + 296);
      if (v7 == 5 || v7 == 0)
      {
        *(_WORD *)buf = 513;
        buf[2] = 3;
        unsigned int v12 = &buf[3];
        unint64_t v13 = 3;
      }
      else
      {
        buf[0] = *(unsigned char *)(a1 + 296);
        unsigned int v12 = &buf[1];
        unint64_t v13 = 1;
      }
      std::vector<grl::IconComponent>::__assign_with_size[abi:nn180100]<grl::IconComponent const*,grl::IconComponent const*>(&v87, buf, v12, v13);
      float v86 = (grl::PathGenerator *)(a1 + 160);
      if (*(void *)(a1 + 16) == *(void *)(a1 + 24))
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
        }
        long long v14 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "_data.hasLayerStyles()";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
          __int16 v91 = 1024;
          int v92 = 267;
          _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "Balloon rendering needs LayerStyles to render.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
      }
      unsigned int v15 = *(unsigned __int8 **)(a1 + 16);
      __int16 v58 = *(unsigned __int8 **)(a1 + 24);
      if (v15 != v58)
      {
        uint64_t v16 = v87;
        float v17 = v88;
        do
        {
          int v18 = *v15;
          for (uint64_t i = v16; i != v17; ++i)
          {
            grl::ShapeLayerRenderer::renderBalloonToContext(grl::IconRenderer const&,std::shared_ptr<esl::QuartzContext>,std::list<std::shared_ptr<esl::QuartzImage>> &)const::$_0::operator()((grl::Allocator *)&v85, &v86, *i, *(unsigned __int8 *)(a1 + 136), v18);
            if ((void)v85 && ((*(uint64_t (**)(void))(*(void *)v85 + 24))(v85) & 1) == 0)
            {
              switch(v18)
              {
                case 0:
                  if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
                    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
                  }
                  uint64_t v20 = GEOGetGeoResourceLibRendererLog::log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "iconLayer != LayerStyle::None";
                    *(_WORD *)&buf[12] = 2080;
                    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResource"
                                          "Lib/LayerRenderer.cpp";
                    __int16 v91 = 1024;
                    int v92 = 277;
                    _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "Invalid LayerStyle enum used in createLayer().: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                  }
                  break;
                case 1:
                  unsigned int v84 = *(_DWORD *)(a1 + 60);
                  float32x2_t v21 = vsub_f32(*(float32x2_t *)(a1 + 180), *(float32x2_t *)(a1 + 172));
                  float32x2_t v22 = (float32x2_t)vbic_s8((int8x8_t)v21, (int8x8_t)vcltz_f32(v21));
                  if (vmul_lane_f32(v22, v22, 1).f32[0] > 0.0 && HIBYTE(v84) != 0)
                  {
                    unsigned int v24 = *(unsigned __int8 *)(a1 + 76);
                    if (v24 >= 2)
                    {
                      if (v24 == 2)
                      {
                        switch(*(unsigned char *)(a1 + 100))
                        {
                          case 0:
                            std::string::size_type v30 = (std::__shared_weak_count *)a3[1];
                            uint64_t v79 = *a3;
                            uint64_t v80 = v30;
                            if (v30) {
                              atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            long long v78 = v85;
                            if (*((void *)&v85 + 1)) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
                            }
                            grl::drawFillToContext(&v79, &v78, (uint64_t)&v84, 0);
                            if (*((void *)&v78 + 1)) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78
                            }
                                                                                       + 1));
                            uint64_t v26 = v80;
                            if (v80) {
                              goto LABEL_70;
                            }
                            break;
                          case 1:
                            float v31 = (std::__shared_weak_count *)a3[1];
                            uint64_t v76 = *a3;
                            uint64_t v77 = v31;
                            if (v31) {
                              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            long long v75 = v85;
                            if (*((void *)&v85 + 1)) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
                            }
                            int v32 = *(_DWORD *)(a1 + 92);
                            float v33 = *(float *)(a1 + 96);
                            float32x2_t v34 = *(float32x2_t *)(a1 + 212);
                            *(float32x2_t *)buf = vadd_f32(*(float32x2_t *)(a1 + 236), v34);
                            int v73 = *(_DWORD *)(a1 + 84);
                            int v74 = v32;
                            float v35 = *(float *)(a1 + 88);
                            float32x2_t v72 = vadd_f32(v34, *(float32x2_t *)(a1 + 244));
                            grl::drawLinearGradientToContext(&v76, &v75, (uint64_t)&v74, v33, v35, (uint64_t)buf, (uint64_t)&v73, (uint64_t)&v72, *(unsigned __int8 *)(a1 + 48));
                            if (*((void *)&v75 + 1)) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75
                            }
                                                                                       + 1));
                            uint64_t v26 = v77;
                            if (v77) {
                              goto LABEL_70;
                            }
                            break;
                          case 2:
                            float v36 = gm::Box<float,2>::operator+((float *)(a1 + 172), (float *)(a1 + 212));
                            float v39 = v36 + (float)((float)(v37 - v36) * 0.5);
                            float v41 = v40 + (float)((float)(v38 - v40) * 0.5);
                            *(float *)buf = v39;
                            *(float *)&uint8_t buf[4] = v41;
                            float v42 = *(float *)(a1 + 244);
                            float v43 = *(float *)(a1 + 248);
                            float v45 = *(float *)(a1 + 212);
                            float v44 = *(float *)(a1 + 216);
                            float v46 = (std::__shared_weak_count *)a3[1];
                            uint64_t v70 = *a3;
                            uint64_t v71 = v46;
                            if (v46) {
                              atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            long long v69 = v85;
                            if (*((void *)&v85 + 1)) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
                            }
                            float v47 = sqrtf((float)((float)((float)((float)(v42 + v45) - v39) * (float)((float)(v42 + v45) - v39))+ 0.0)+ (float)((float)((float)(v43 + v44) - v41) * (float)((float)(v43 + v44) - v41)));
                            v72.i32[0] = *(_DWORD *)(a1 + 92);
                            float v48 = v47 * *(float *)(a1 + 96);
                            int v74 = *(_DWORD *)(a1 + 84);
                            grl::drawRadialGradientToContext(&v70, &v69, (uint64_t)&v72, v48, v47 * *(float *)(a1 + 88), (uint64_t)buf, (uint64_t)&v74, *(unsigned __int8 *)(a1 + 48));
                            if (*((void *)&v69 + 1)) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69
                            }
                                                                                       + 1));
                            uint64_t v26 = v71;
                            if (v71) {
                              goto LABEL_70;
                            }
                            break;
                          case 3:
                            uint64_t v49 = (std::__shared_weak_count *)a3[1];
                            uint64_t v67 = *a3;
                            std::string::size_type v68 = v49;
                            if (v49) {
                              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            long long v66 = v85;
                            if (*((void *)&v85 + 1)) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
                            }
                            int v50 = *(_DWORD *)(a1 + 92);
                            float v51 = *(float *)(a1 + 96);
                            float32x2_t v52 = *(float32x2_t *)(a1 + 212);
                            *(float32x2_t *)buf = vadd_f32(*(float32x2_t *)(a1 + 236), v52);
                            int v73 = *(_DWORD *)(a1 + 84);
                            int v74 = v50;
                            float v53 = *(float *)(a1 + 88);
                            float32x2_t v72 = vadd_f32(v52, *(float32x2_t *)(a1 + 244));
                            grl::drawReflectedGradientToContext(&v67, &v66, (uint64_t)&v74, v51, v53, (uint64_t)buf, (uint64_t)&v73, (uint64_t)&v72, *(unsigned __int8 *)(a1 + 48));
                            if (*((void *)&v66 + 1)) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66
                            }
                                                                                       + 1));
                            uint64_t v26 = v68;
                            if (v68) {
                              goto LABEL_70;
                            }
                            break;
                          default:
                            goto LABEL_28;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v25 = (std::__shared_weak_count *)a3[1];
                      uint64_t v82 = *a3;
                      float v83 = v25;
                      if (v25) {
                        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      long long v81 = v85;
                      if (*((void *)&v85 + 1)) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
                      }
                      grl::drawFillToContext(&v82, &v81, (uint64_t)&v84, 0);
                      if (*((void *)&v81 + 1)) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
                      }
                      uint64_t v26 = v83;
                      if (v83) {
                        goto LABEL_70;
                      }
                    }
                  }
                  break;
                case 2:
                  uint64_t v27 = 60;
                  if (*(float *)(a1 + 108) > 0.0) {
                    uint64_t v27 = 101;
                  }
                  *(_DWORD *)buf = *(_DWORD *)(a1 + v27);
                  if (*(unsigned char *)(a1 + 104))
                  {
                    uint64_t v28 = (std::__shared_weak_count *)a3[1];
                    uint64_t v64 = *a3;
                    uint64_t v65 = v28;
                    if (v28) {
                      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    long long v63 = v85;
                    if (*((void *)&v85 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    grl::drawFillToContext(&v64, &v63, (uint64_t)buf, 0);
                    if (*((void *)&v63 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
                    }
                    uint64_t v26 = v65;
                    if (v65) {
                      goto LABEL_70;
                    }
                  }
                  break;
                case 3:
                  if (*(unsigned char *)(a1 + 123) && (*(void *)(a1 + 124) || *(float *)(a1 + 132) != 0.0))
                  {
                    uint64_t v29 = (std::__shared_weak_count *)a3[1];
                    uint64_t v61 = *a3;
                    uint64_t v62 = v29;
                    if (v29) {
                      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    long long v60 = v85;
                    if (*((void *)&v85 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    v72.i32[0] = *(_DWORD *)(a1 + 120);
                    *(void *)buf = *(void *)(a1 + 124);
                    grl::drawShadowToContext(&v61, &v60, (uint64_t)&v72, (float *)buf, *(float *)(a1 + 132));
                    if (*((void *)&v60 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
                    }
                    uint64_t v26 = v62;
                    if (v62) {
LABEL_70:
                    }
                      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
                  }
                  break;
                default:
                  break;
              }
            }
LABEL_28:
            if (*((void *)&v85 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
            }
          }
          if (*(unsigned char *)(a2 + 282))
          {
            (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 392))(buf);
            unsigned int v54 = operator new(0x20uLL);
            v54[1] = *(_OWORD *)buf;
            uint64_t v55 = *a4;
            *(void *)unsigned int v54 = *a4;
            *((void *)v54 + 1) = a4;
            *(void *)(v55 + 8) = v54;
            *a4 = (uint64_t)v54;
            ++a4[2];
          }
          ++v15;
        }
        while (v15 != v58);
      }
      if (*(unsigned char *)(a1 + 112))
      {
        grl::ShapeLayerRenderer::renderBalloonToContext(grl::IconRenderer const&,std::shared_ptr<esl::QuartzContext>,std::list<std::shared_ptr<esl::QuartzImage>> &)const::$_0::operator()((grl::Allocator *)buf, &v86, *(unsigned __int8 *)(a1 + 296), *(unsigned __int8 *)(a1 + 136), 1);
        if (!*(void *)buf)
        {
          grl::ShapeLayerRenderer::renderBalloonToContext(grl::IconRenderer const&,std::shared_ptr<esl::QuartzContext>,std::list<std::shared_ptr<esl::QuartzImage>> &)const::$_0::operator()((grl::Allocator *)&v85, &v86, *(unsigned __int8 *)(a1 + 296), *(unsigned __int8 *)(a1 + 136), 2);
          long long v56 = v85;
          long long v85 = 0uLL;
          std::string::size_type v57 = *(std::__shared_weak_count **)&buf[8];
          *(_OWORD *)buf = v56;
          if (v57)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
            if (*((void *)&v85 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
            }
          }
        }
        (*(void (**)(void, unsigned char *))(*(void *)*a3 + 288))(*a3, buf);
        (*(void (**)(void))(*(void *)*a3 + 264))();
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
      }
      if (v87) {
        operator delete(v87);
      }
      return 1;
    }
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v9 = GEOGetGeoResourceLibRendererLog::log;
    BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      __int16 v91 = 1024;
      int v92 = 215;
      uint64_t v11 = "Metrics must contain a size to draw into a context.: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_17;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v9 = GEOGetGeoResourceLibRendererLog::log;
    BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      __int16 v91 = 1024;
      int v92 = 212;
      uint64_t v11 = "Nullptr for LayerMetrics being used to render layer.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_17:
      _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_ERROR, v11, buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

uint64_t grl::ShapeLayerRenderer::description(grl::ShapeLayerRenderer *this)
{
  return grl::codec::PathLayerData::toString((grl::ShapeLayerRenderer *)((char *)this + 16));
}

void grl::ShapeLayerRenderer::renderBalloonToContext(grl::IconRenderer const&,std::shared_ptr<esl::QuartzContext>,std::list<std::shared_ptr<esl::QuartzImage>> &)const::$_0::operator()(grl::Allocator *a1, grl::PathGenerator **a2, int a3, unsigned int a4, int a5)
{
  if (a3 == 3)
  {
    if (a4 > 9 || ((1 << a4) & 0x350) == 0) {
      goto LABEL_11;
    }
    float v13 = 1.0;
    if (a5 == 2 && (a4 & 0xFE) == 8)
    {
      float v14 = gm::Box<float,2>::operator+((float *)*a2 + 7, (float *)*a2 + 13);
      float v18 = sqrtf((float)((float)((float)(v15 - v14) * (float)(v15 - v14)) + 0.0)+ (float)((float)(v17 - v16) * (float)(v17 - v16)))* 0.5;
      float v19 = gm::Box<float,2>::operator+((float *)*a2 + 3, (float *)*a2 + 13);
      float v13 = (float)((float)(*((float *)*a2 + 26) * 0.088235)
                  + (float)((float)(v18
                                  - (float)(sqrtf((float)((float)((float)(v20 - v19) * (float)(v20 - v19)) + 0.0)+ (float)((float)(v22 - v21) * (float)(v22 - v21)))* 0.5))* 0.7))/ (float)(*((float *)*a2 + 26) * 0.088235);
      if (v13 < 1.0) {
        float v13 = 1.0;
      }
      if (v13 > 2.0) {
        float v13 = 2.0;
      }
    }
    if (a4 == 8 || a4 == 4)
    {
      int64_t v23 = *a2;
      grl::PathGenerator::createBalloonDotPath(v23, v13, a1);
    }
    else
    {
      uint64_t v25 = *a2;
      grl::PathGenerator::createRectalloonDotPath(v25, v13, a1);
    }
  }
  else
  {
    if (a3 != 2)
    {
      if (a3 == 1)
      {
        long long v8 = (float *)((char *)*a2 + 52);
        if (a5 == 1) {
          uint64_t v9 = (float *)((char *)*a2 + 12);
        }
        else {
          uint64_t v9 = (float *)((char *)*a2 + 28);
        }
        LODWORD(v27) = gm::Box<float,2>::operator+(v9, v8);
        HIDWORD(v27) = v10;
        int v28 = v11;
        int v29 = v12;
        if (a4 <= 8 && ((1 << a4) & 0x118) != 0) {
          grl::PathGenerator::createBalloonFillPath((float *)&v27, a1);
        }
        else {
          grl::PathGenerator::createRectalloonBodyPath((float32x2_t *)&v27, a1, *((float *)*a2 + 24));
        }
      }
      else
      {
        uint64_t v27 = grl::Allocator::instance(a1);
        _ZNSt3__115allocate_sharedB8nn180100IN3esl10QuartzPathEN3geo12StdAllocatorIS2_N3grl9AllocatorEEEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v27, (esl::QuartzPath **)a1);
        (*(void (**)(void, void, double, double))(**(void **)a1 + 32))(*(void *)a1, 0, 0.0, 0.0);
      }
      return;
    }
    if (a5 == 1)
    {
LABEL_11:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      return;
    }
    if (a4 <= 8 && ((1 << a4) & 0x118) != 0)
    {
      unsigned int v24 = *a2;
      grl::PathGenerator::createBalloonTailPath(v24, a1);
    }
    else
    {
      uint64_t v26 = *a2;
      grl::PathGenerator::createRectalloonTailPath(v26, a1);
    }
  }
}

uint64_t grl::ImageLayerRenderer::description(grl::ImageLayerRenderer *this)
{
  return grl::codec::ImageLayerData::toString((grl::ImageLayerRenderer *)((char *)this + 16));
}

uint64_t grl::TextLayerRenderer::description(grl::TextLayerRenderer *this)
{
  return grl::codec::TextLayerData::toString((grl::TextLayerRenderer *)((char *)this + 16));
}

uint64_t grl::ColorLayerRenderer::ColorLayerRenderer(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 1;
  *(void *)a1 = &unk_1EF567128;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v4;
  std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>(a1 + 16, *(unsigned char **)a2, *(unsigned char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 49) = *(_DWORD *)(a2 + 33);
  int v5 = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = 0;
  return a1;
}

BOOL grl::ColorLayerRenderer::renderToContext(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 64))
  {
    *(void *)buf = 0;
    if (*(void *)(a1 + 116))
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 24))
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
        }
        long long v8 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "_data.hasLayerStyles()";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
          __int16 v26 = 1024;
          int v27 = 736;
          _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_ERROR, "No LayerStyles given for color layer rendering.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
      }
      uint64_t v9 = *(unsigned char **)(a1 + 16);
      for (uint64_t i = *(unsigned char **)(a1 + 24); v9 != i; ++v9)
      {
        if (*v9 == 1)
        {
          int v12 = (std::__shared_weak_count *)operator new(0x28uLL);
          v12->__shared_owners_ = 0;
          v12->__shared_weak_owners_ = 0;
          v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582B70;
          esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v12[1]);
          float v13 = (float)(*(unsigned int (**)(void))(*(void *)*a3 + 112))();
          (*(void (**)(void))(*(void *)*a3 + 120))();
          ((void (*)(std::__shared_weak_count *, void, double, double, float, float))v12[1].__vftable[2].~__shared_weak_count_0)(&v12[1], 0, 0.0, 0.0, v13, (float)v14);
          float v15 = (std::__shared_weak_count *)a3[1];
          uint64_t v23 = *a3;
          unsigned int v24 = v15;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float v21 = v12 + 1;
          float v22 = v12;
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          *(_DWORD *)buf = *(_DWORD *)(a1 + 49);
          grl::drawFillToContext(&v23, &v21, (uint64_t)buf, *(unsigned __int8 *)(a1 + 48));
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          if (*(unsigned char *)(a2 + 282))
          {
            (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 392))(buf);
            float v16 = operator new(0x20uLL);
            v16[1] = *(_OWORD *)buf;
            uint64_t v17 = *a4;
            *(void *)float v16 = *a4;
            *((void *)v16 + 1) = a4;
            *(void *)(v17 + 8) = v16;
            *a4 = (uint64_t)v16;
            ++a4[2];
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        else if (!*v9)
        {
          if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
          }
          int v11 = GEOGetGeoResourceLibRendererLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "iconLayer != LayerStyle::None";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
            __int16 v26 = 1024;
            int v27 = 740;
            _os_log_impl(&dword_1A1780000, v11, OS_LOG_TYPE_ERROR, "Invalid LayerStyle enum used.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
        }
      }
      return 1;
    }
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    float v19 = GEOGetGeoResourceLibRendererLog::log;
    BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      __int16 v26 = 1024;
      int v27 = 731;
      float v20 = "Metrics must contain a size to draw into a context.: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_34;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    float v19 = GEOGetGeoResourceLibRendererLog::log;
    BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      __int16 v26 = 1024;
      int v27 = 728;
      float v20 = "Nullptr for LayerMetrics being used to render layer.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_34:
      _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

__n128 grl::ColorLayerRenderer::setLayerMetrics(void (***this)(void), const grl::LayerMetrics *a2)
{
  if (*((unsigned char *)this + 64)) {
    (*this[9])();
  }
  else {
    *((unsigned char *)this + 64) = 1;
  }
  this[9] = (void (**)(void))&unk_1EF567000;
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 6) = v4;
  __n128 result = *(__n128 *)((char *)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 56);
  long long v7 = *(_OWORD *)((char *)a2 + 72);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 22);
  *((_OWORD *)this + 8) = v6;
  *((_OWORD *)this + 9) = v7;
  *((__n128 *)this + 7) = result;
  return result;
}

uint64_t grl::ColorLayerRenderer::description(grl::ColorLayerRenderer *this)
{
  return grl::codec::ColorLayerData::toString((grl::ColorLayerRenderer *)((char *)this + 16));
}

void grl::ColorLayerRenderer::~ColorLayerRenderer(grl::ColorLayerRenderer *this)
{
  grl::ColorLayerRenderer::~ColorLayerRenderer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF567128;
  if (*((unsigned char *)this + 64))
  {
    (**((void (***)(char *))this + 9))((char *)this + 72);
    *((unsigned char *)this + 64) = 0;
  }
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 40))(*((void *)this + 5), v2, *((void *)this + 4) - v2);
  }
}

void *std::vector<grl::IconComponent>::__assign_with_size[abi:nn180100]<grl::IconComponent const*,grl::IconComponent const*>(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if ((v11 & 0x8000000000000000) != 0) {
      abort();
    }
    __n128 result = operator new(v11);
    uint64_t v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      __n128 result = memcpy(result, __src, v12);
    }
LABEL_20:
    float v16 = &v9[v12];
    goto LABEL_21;
  }
  float v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      __n128 result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_20;
  }
  float v15 = &__src[v14];
  if (v13 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    __n128 result = memmove(v9, v15, a3 - v15);
  }
  float v16 = &v9[a3 - v15];
LABEL_21:
  v7[1] = v16;
  return result;
}

unint64_t geo::codec::VectorTile::totalBuildingFootprintsCount(geo::codec::VectorTile *this)
{
  return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)this + 36) - *((void *)this + 35)) >> 3)
       - 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(*((void *)this + 48) - *((void *)this + 47)) >> 3);
}

uint64_t geo::codec::VectorTile::totalThreeDBuildingsCount(geo::codec::VectorTile *this)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 56) - *((void *)this + 55)) >> 4)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 4);
}

uint64_t geo::codec::VectorTile::transitSystemInfoForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 160);
  uint64_t v3 = *((void *)this + 161) - v2;
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3 / 104;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  for (uint64_t i = (unsigned int *)(v2 + 84); *(void *)(i - 11) != a2; i += 26)
  {
    if (!--v4) {
      return 0;
    }
  }
  unint64_t v7 = *i;
  uint64_t v8 = *((void *)this + 164);
  unint64_t v9 = 0x8E38E38E38E38E39 * ((*((void *)this + 165) - v8) >> 3);
  uint64_t v10 = v8 + 72 * v7;
  if (v9 <= v7) {
    return 0;
  }
  else {
    return v10;
  }
}

uint64_t geo::codec::VectorTile::transitLineForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 161);
  uint64_t result = *((void *)this + 160);
  uint64_t v4 = v2 - result;
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4 / 104;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  while (*(void *)(result + 40) != a2)
  {
    result += 104;
    if (!--v5) {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::VectorTile::transitNodeForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 177);
  uint64_t result = *((void *)this + 176);
  uint64_t v4 = v2 - result;
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4 / 344;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  while (*(void *)(result + 40) != a2)
  {
    result += 344;
    if (!--v5) {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::VectorTile::transitAccessPointForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 196);
  uint64_t result = *((void *)this + 195);
  uint64_t v4 = v2 - result;
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4 / 248;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  while (*(void *)(result + 40) != a2)
  {
    result += 248;
    if (!--v5) {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::VectorTile::coastlines(geo::codec::VectorTile *this)
{
  return *((void *)this + 8);
}

uint64_t geo::codec::VectorTile::coastlinesCount(geo::codec::VectorTile *this)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3);
}

uint64_t geo::codec::VectorTile::polygons(geo::codec::VectorTile *this)
{
  return *((void *)this + 12);
}

unint64_t geo::codec::VectorTile::venuesCount(geo::codec::VectorTile *this)
{
  return 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 4);
}

uint64_t geo::codec::VectorTile::venues(geo::codec::VectorTile *this)
{
  return *((void *)this + 23);
}

unint64_t geo::codec::VectorTile::venueBuildingsCount(geo::codec::VectorTile *this)
{
  return 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)this + 28) - *((void *)this + 27)) >> 3);
}

uint64_t geo::codec::VectorTile::venueBuildings(geo::codec::VectorTile *this)
{
  return *((void *)this + 27);
}

uint64_t geo::codec::VectorTile::venueLevelsCount(geo::codec::VectorTile *this)
{
  return *((void *)this + 31);
}

uint64_t geo::codec::VectorTile::venueLevels(geo::codec::VectorTile *this)
{
  return *((void *)this + 32);
}

uint64_t geo::codec::VectorTile::venueComponentsCount(geo::codec::VectorTile *this)
{
  return *((void *)this + 33);
}

uint64_t geo::codec::VectorTile::venueComponents(geo::codec::VectorTile *this)
{
  return *((void *)this + 34);
}

unint64_t geo::codec::VectorTile::nonOverlappingBuildingFootprintsCount(geo::codec::VectorTile *this)
{
  return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)this + 36) - *((void *)this + 35)) >> 3);
}

uint64_t geo::codec::VectorTile::nonOverlappingThreeDBuildingsCount(geo::codec::VectorTile *this)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 56) - *((void *)this + 55)) >> 4);
}

uint64_t geo::codec::VectorTile::annotations(geo::codec::VectorTile *this)
{
  return *((void *)this + 67);
}

uint64_t geo::codec::VectorTile::annotationValues(geo::codec::VectorTile *this)
{
  return *((void *)this + 71);
}

uint64_t geo::codec::VectorTile::overpasses(geo::codec::VectorTile *this)
{
  return *((void *)this + 85);
}

uint64_t geo::codec::VectorTile::junctionsCount(geo::codec::VectorTile *this)
{
  return *((void *)this + 87);
}

uint64_t geo::codec::VectorTile::hasComputedJunctions(geo::codec::VectorTile *this)
{
  return *((unsigned __int8 *)this + 704);
}

uint64_t geo::codec::VectorTile::lineCrossings(geo::codec::VectorTile *this)
{
  return *((void *)this + 93);
}

uint64_t geo::codec::VectorTile::curveLineVertices(geo::codec::VectorTile *this)
{
  return *((void *)this + 96);
}

uint64_t geo::codec::VectorTile::transitLines(geo::codec::VectorTile *this)
{
  return *((void *)this + 160);
}

uint64_t geo::codec::VectorTile::transitLineCount(geo::codec::VectorTile *this)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)this + 161) - *((void *)this + 160)) >> 3);
}

uint64_t geo::codec::VectorTile::transitSystems(geo::codec::VectorTile *this)
{
  return *((void *)this + 164);
}

uint64_t geo::codec::VectorTile::transitLinks(geo::codec::VectorTile *this)
{
  return *((void *)this + 168);
}

unint64_t geo::codec::VectorTile::transitLinkCount(geo::codec::VectorTile *this)
{
  return 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((void *)this + 169) - *((void *)this + 168)) >> 3);
}

uint64_t geo::codec::VectorTile::transitVertices(geo::codec::VectorTile *this)
{
  return *((void *)this + 175);
}

uint64_t geo::codec::VectorTile::transitNodes(geo::codec::VectorTile *this)
{
  return *((void *)this + 176);
}

unint64_t geo::codec::VectorTile::transitNodeCount(geo::codec::VectorTile *this)
{
  return 0x82FA0BE82FA0BE83 * ((uint64_t)(*((void *)this + 177) - *((void *)this + 176)) >> 3);
}

uint64_t geo::codec::VectorTile::transitStationTransfers(geo::codec::VectorTile *this)
{
  return *((void *)this + 183);
}

uint64_t geo::codec::VectorTile::transitStationTransferCount(geo::codec::VectorTile *this)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)this + 184) - *((void *)this + 183)) >> 3);
}

uint64_t geo::codec::VectorTile::transitPointsOnRoad(geo::codec::VectorTile *this)
{
  return *((void *)this + 189);
}

uint64_t geo::codec::VectorTile::transitPointsOnRoadCount(geo::codec::VectorTile *this)
{
  return *((void *)this + 190);
}

uint64_t geo::codec::VectorTile::transitLinkLineMinZoomOverrides(geo::codec::VectorTile *this)
{
  return *((void *)this + 192);
}

uint64_t geo::codec::VectorTile::transitAccessPoints(geo::codec::VectorTile *this)
{
  return *((void *)this + 195);
}

unint64_t geo::codec::VectorTile::transitAccessPointCount(geo::codec::VectorTile *this)
{
  return 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)this + 196) - *((void *)this + 195)) >> 3);
}

uint64_t geo::codec::VectorTile::transitNodeLineIndices(geo::codec::VectorTile *this)
{
  return *((void *)this + 200);
}

uint64_t geo::codec::VectorTile::transitLinkSections(geo::codec::VectorTile *this)
{
  return *((void *)this + 212);
}

uint64_t geo::codec::VectorTile::transitNodeCollapseIndices(geo::codec::VectorTile *this)
{
  return *((void *)this + 222);
}

uint64_t geo::codec::VectorTile::transitNodeCollapseIDs(geo::codec::VectorTile *this)
{
  return *((void *)this + 224);
}

uint64_t geo::codec::VectorTile::transitNodeCollapseIDCount(geo::codec::VectorTile *this)
{
  return *((void *)this + 225);
}

uint64_t geo::codec::VectorTile::poiStorefrontBundleIDs(geo::codec::VectorTile *this)
{
  return *((void *)this + 234);
}

uint64_t geo::codec::VectorTile::labelSummaryIcons(geo::codec::VectorTile *this)
{
  return *((void *)this + 236);
}

uint64_t geo::codec::VectorTile::daVinciAssetCount(geo::codec::VectorTile *this)
{
  return (unsigned __int16)(-13107 * ((*((_DWORD *)this + 520) - *((_DWORD *)this + 518)) >> 3));
}

uint64_t geo::codec::VectorTile::daVinciBuildingVertexOffset(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 562);
}

void *geo::codec::VectorTile::_tileBoundsForBuildings(geo::codec::VectorTile *this, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  uint64_t v8 = (void *)((char *)this + 2424);
  uint64_t v9 = *((void *)this + 303);
  if (v9 == *((void *)this + 304))
  {
    uint64_t v63 = *((void *)this + 289);
    uint64_t v12 = *((void *)this + 282);
    uint64_t v13 = *((void *)this + 287);
    unint64_t v14 = (unsigned __int16)(-13107 * ((*((_DWORD *)this + 582) - *((_DWORD *)this + 580)) >> 3));
    if (v14 > (*((void *)this + 305) - v9) >> 4)
    {
      uint64_t v15 = 16 * v14;
      uint64_t v16 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)this + 306) + 16))(*((void *)this + 306), 16 * v14, 4);
      uint64_t v17 = *((void *)this + 304);
      uint64_t v18 = *((void *)this + 303);
      uint64_t v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *(_OWORD *)(v19 - 16) = *(_OWORD *)(v17 - 16);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        uint64_t v17 = *v8;
      }
      *((void *)this + 303) = v19;
      *((void *)this + 304) = v16;
      uint64_t v20 = *((void *)this + 305);
      *((void *)this + 305) = v16 + v15;
      if (v17) {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 306) + 40))(*((void *)this + 306), v17, v20 - v17);
      }
    }
    uint64_t v21 = *((void *)this + 290);
    if (-13107 * (unsigned __int16)((*((_DWORD *)this + 582) - v21) >> 3))
    {
      for (unint64_t i = 0; i < (unsigned __int16)(-13107 * ((*((_DWORD *)this + 582) - v21) >> 3)); ++i)
      {
        uint64_t v24 = v21 + 40 * i;
        uint64_t v25 = *(unsigned __int16 *)(v24 + 34);
        if (*(_WORD *)(v24 + 34))
        {
          uint64_t v26 = 0;
          uint64_t v27 = v63 + 20 * *(unsigned __int16 *)(v24 + 32);
          a4.i32[0] = 2139095039;
          a6.i32[0] = -8388609;
          a8.i32[0] = -8388609;
          a7.i32[0] = 2139095039;
          do
          {
            uint64_t v28 = (unsigned int *)(v13 + 8 * *(unsigned int *)(v27 + 20 * v26 + 12));
            uint64_t v29 = *((unsigned __int16 *)v28 + 2);
            if (*((_WORD *)v28 + 2))
            {
              unsigned int v30 = *v28;
              if (v29 >= 9)
              {
                int v32 = (const float *)(v12 + 12 * v30);
                uint64_t v33 = v29 & 7;
                if ((v29 & 7) == 0) {
                  uint64_t v33 = 8;
                }
                float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
                uint64_t v31 = v29 - v33;
                float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0);
                float32x4_t v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
                uint64_t v37 = v31;
                float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
                float32x4_t v39 = v34;
                a7 = v35;
                a8 = v36;
                float32x4_t v40 = v38;
                do
                {
                  float v41 = v32;
                  v32 += 24;
                  float32x4x3_t v64 = vld3q_f32(v41);
                  v41 += 12;
                  float32x4_t v35 = vminnmq_f32(v64.val[0], v35);
                  float32x4x3_t v65 = vld3q_f32(v41);
                  a7 = vminnmq_f32(v65.val[0], a7);
                  float32x4_t v36 = vmaxnmq_f32(v36, v64.val[0]);
                  a8 = vmaxnmq_f32(a8, v65.val[0]);
                  float32x4_t v34 = vminnmq_f32(v64.val[1], v34);
                  float32x4_t v39 = vminnmq_f32(v65.val[1], v39);
                  float32x4_t v38 = vmaxnmq_f32(v38, v64.val[1]);
                  float32x4_t v40 = vmaxnmq_f32(v40, v65.val[1]);
                  v37 -= 8;
                }
                while (v37);
                a6 = vmaxnmq_f32(v38, v40);
                a6.f32[0] = vmaxnmvq_f32(a6);
                a4 = vmaxnmq_f32(v36, a8);
                a8.f32[0] = vmaxnmvq_f32(a4);
                a7.f32[0] = vminnmvq_f32(vminnmq_f32(v35, a7));
                a4.f32[0] = vminnmvq_f32(vminnmq_f32(v34, v39));
              }
              else
              {
                uint64_t v31 = 0;
              }
              uint64_t v42 = v29 - v31;
              float v43 = (float *)(v12 + 4 + 12 * v31 + 12 * v30);
              do
              {
                float v44 = *(v43 - 1);
                a7.f32[0] = fminf(v44, a7.f32[0]);
                a8.f32[0] = fmaxf(a8.f32[0], v44);
                a4.f32[0] = fminf(*v43, a4.f32[0]);
                a6.f32[0] = fmaxf(a6.f32[0], *v43);
                v43 += 3;
                --v42;
              }
              while (v42);
            }
            ++v26;
          }
          while (v26 != v25);
        }
        else
        {
          a4.i32[0] = 2139095039;
          a6.i32[0] = -8388609;
          a8.i32[0] = -8388609;
          a7.i32[0] = 2139095039;
        }
        float v45 = (_DWORD *)*((void *)this + 304);
        unint64_t v46 = *((void *)this + 305);
        if ((unint64_t)v45 < v46)
        {
          if (v45)
          {
            *float v45 = a7.i32[0];
            v45[1] = a4.i32[0];
            v45[2] = a8.i32[0];
            v45[3] = a6.i32[0];
          }
          uint64_t v23 = v45 + 4;
          goto LABEL_12;
        }
        float v47 = v8;
        uint64_t v48 = *v8;
        uint64_t v49 = ((uint64_t)v45 - *v8) >> 4;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = v46 - v48;
        if (v51 >> 3 > v50) {
          unint64_t v50 = v51 >> 3;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
        }
        if (v50)
        {
          unsigned __int32 v59 = a7.i32[0];
          unint64_t v60 = a8.i64[0];
          unsigned __int32 v61 = a4.i32[0];
          unsigned __int32 v62 = a6.i32[0];
          uint64_t v52 = 16 * v50;
          uint64_t v53 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)this + 306) + 16))(*((void *)this + 306), 16 * v50, 4);
          unsigned int v54 = (unsigned __int32 *)(v53 + 16 * v49);
          unint64_t v50 = v53 + v52;
          if (v53)
          {
            a4.i32[1] = HIDWORD(v60);
            *unsigned int v54 = v59;
            v54[1] = v61;
            v54[2] = v60;
            v54[3] = v62;
          }
          uint64_t v8 = v47;
          uint64_t v55 = *((void *)this + 304);
          uint64_t v56 = *((void *)this + 303);
          std::string::size_type v57 = v54;
          if (v55 == v56)
          {
LABEL_40:
            uint64_t v23 = v54 + 4;
            *((void *)this + 303) = v57;
            *((void *)this + 304) = v54 + 4;
            uint64_t v58 = *((void *)this + 305);
            *((void *)this + 305) = v50;
            if (!v55) {
              goto LABEL_12;
            }
            goto LABEL_41;
          }
        }
        else
        {
          unsigned int v54 = (unsigned __int32 *)(16 * v49);
          uint64_t v8 = v47;
          uint64_t v55 = *((void *)this + 304);
          uint64_t v56 = *((void *)this + 303);
          std::string::size_type v57 = v54;
          if (v55 == v56) {
            goto LABEL_40;
          }
        }
        do
        {
          *((_OWORD *)v57 - 1) = *(_OWORD *)(v55 - 16);
          v57 -= 4;
          v55 -= 16;
        }
        while (v55 != v56);
        uint64_t v55 = *v8;
        uint64_t v23 = v54 + 4;
        *((void *)this + 303) = v57;
        *((void *)this + 304) = v54 + 4;
        uint64_t v58 = *((void *)this + 305);
        *((void *)this + 305) = v50;
        if (!v55) {
          goto LABEL_12;
        }
LABEL_41:
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 306) + 40))(*((void *)this + 306), v55, v58 - v55);
LABEL_12:
        *((void *)this + 304) = v23;
        uint64_t v21 = *((void *)this + 290);
      }
    }
  }
  return v8;
}

uint64_t geo::codec::VectorTile::daVinciLineLoops(geo::codec::VectorTile *this)
{
  return *((void *)this + 287);
}

uint64_t geo::codec::VectorTile::daVinciBuildingSections(geo::codec::VectorTile *this)
{
  return *((void *)this + 289);
}

uint64_t geo::codec::VectorTile::daVinciBuildingColors(geo::codec::VectorTile *this)
{
  return *((void *)this + 294);
}

BOOL geo::codec::VectorTile::daVinciBuildingColorsArePresent(geo::codec::VectorTile *this)
{
  return *((void *)this + 294) != *((void *)this + 295);
}

uint64_t geo::codec::VectorTile::daVinciBuildingsSupportTerrainElevation(geo::codec::VectorTile *this)
{
  return *((unsigned __int8 *)this + 2496);
}

uint64_t geo::codec::VectorTile::buildingToModifierMap(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 2384;
}

uint64_t geo::codec::VectorTile::daVinciBuildingTileBound(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 2480;
}

void **geo::codec::VectorTile::buildingTileIntersectionInfo(void **this, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  uint64_t v9 = geo::codec::VectorTile::_tileBoundsForBuildings((geo::codec::VectorTile *)this, a2, a3, a4, a5, a6, a7, a8);
  if (-13107 * (unsigned __int16)((*((_DWORD *)this + 582) - *((_DWORD *)this + 580)) >> 3))
  {
    uint64_t v10 = this[307];
    if (v10 == this[308])
    {
      uint64_t v12 = v9;
      uint64_t v13 = v9[1] - *v9;
      if (v13)
      {
        size_t v14 = v13 >> 4;
        unint64_t v15 = (unsigned char *)this[309] - v10;
        if (v15 >= v13 >> 4)
        {
          bzero(this[307], v13 >> 4);
          this[308] = &v10[v14];
        }
        else
        {
          if (v13 < 0) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = 2 * v15;
          if (2 * v15 <= v14) {
            uint64_t v16 = v14;
          }
          if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v17 = v16;
          }
          uint64_t v18 = (char *)operator new(v17);
          bzero(v18, v14);
          this[307] = v18;
          this[308] = &v18[v14];
          this[309] = &v18[v17];
          if (v10) {
            operator delete(v10);
          }
        }
      }
      uint64_t v19 = v12[1];
      uint64_t v20 = v19 - *v12;
      if (v19 != *v12)
      {
        uint64_t v21 = 0;
        unint64_t v22 = v20 >> 4;
        uint64_t v23 = (uint64_t *)((char *)this[290] + 16);
        uint64_t v24 = (float *)(*v12 + 8);
        do
        {
          uint64_t v26 = *v23;
          v23 += 5;
          uint64_t v25 = v26;
          if (v26 == 0x1102AA1513BA17CALL || v25 == 0x110205D497D8D032)
          {
            float v28 = *v24;
            float v29 = 1.0 - v24[1];
            BOOL v30 = v29 >= 0.0;
            float v32 = *(v24 - 2);
            float v31 = *(v24 - 1);
            BOOL v33 = v32 >= 0.0;
            if (v32 < 0.0 && v29 < 0.0) {
              *((unsigned char *)this[307] + v21) = 1;
            }
            float v34 = 1.0 - v31;
            BOOL v35 = v29 < 0.0 || v32 >= 0.0;
            if (!v35 && v34 < 1.0) {
              *((unsigned char *)this[307] + v21) = 2;
            }
            BOOL v36 = v34 < 1.0;
            if (v34 < 1.0) {
              BOOL v33 = 1;
            }
            if (!v33) {
              *((unsigned char *)this[307] + v21) = 3;
            }
            BOOL v37 = v32 < 0.0 || v34 < 1.0;
            if (!v37 && v28 < 1.0) {
              *((unsigned char *)this[307] + v21) = 4;
            }
            if (v28 < 1.0) {
              BOOL v36 = 1;
            }
            if (!v36) {
              *((unsigned char *)this[307] + v21) = 5;
            }
            BOOL v38 = v29 < 0.0 || v28 < 1.0;
            if (!v38 && v34 < 1.0) {
              *((unsigned char *)this[307] + v21) = 6;
            }
            if (v28 >= 1.0 && v29 < 0.0) {
              *((unsigned char *)this[307] + v21) = 7;
            }
            if (v28 >= 1.0) {
              BOOL v30 = 1;
            }
            if (v32 >= 0.0 && !v30) {
              *((unsigned char *)this[307] + v21) = 8;
            }
            if (v32 >= 0.0 && v28 < 1.0 && v29 >= 0.0 && v34 < 1.0) {
              *((unsigned char *)this[307] + v21) = 0;
            }
          }
          ++v21;
          v24 += 4;
        }
        while (v22 > (unsigned __int16)v21);
      }
    }
  }
  return this + 307;
}

uint64_t geo::codec::VectorTile::materialModifiers(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 2104;
}

uint64_t geo::codec::VectorTile::dtmRasterInfo(geo::codec::VectorTile *this)
{
  return *((void *)this + 364);
}

uint64_t geo::codec::VectorTile::dtmRasterBlob(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 2888;
}

uint64_t geo::codec::VectorTile::hillshadeRasterCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 748);
}

uint64_t geo::codec::VectorTile::hillshadeRasterData(geo::codec::VectorTile *this)
{
  return *((void *)this + 373);
}

uint64_t geo::codec::VectorTile::hillshadeRasterFormat(geo::codec::VectorTile *this)
{
  return *((unsigned __int8 *)this + 3016);
}

void *geo::codec::VectorTile::liveMetadataForID(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2 = this[78];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*(void *)&this[77] + 8 * v4);
  if (!v5) {
    return 0;
  }
  long long v6 = (void *)*v5;
  if (!v6) {
    return 0;
  }
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6 + 3;
        }
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      long long v6 = (void *)*v6;
      if (!v6) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      return 0;
    }
LABEL_11:
    long long v6 = (void *)*v6;
    if (!v6) {
      return 0;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6 + 3;
}

uint64_t geo::codec::VectorTile::liveVariants(geo::codec::VectorTile *this)
{
  return *((void *)this + 82);
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(_WORD **)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 1)
  {
    if (a2)
    {
      uint64_t v11 = 2 * a2;
      uint64_t v12 = &v4[a2];
      do
      {
        if (v4) {
          *unint64_t v4 = 0;
        }
        ++v4;
        v11 -= 2;
      }
      while (v11);
      unint64_t v4 = v12;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    uint64_t v6 = (uint64_t)v4 - *(void *)result;
    uint64_t v7 = v6 >> 1;
    uint64_t v8 = (v6 >> 1) + a2;
    if (v8 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v5 - *(void *)result;
    if (v9 > v8) {
      uint64_t v8 = v9;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 2 * v10, 2);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v13 = (_WORD *)(result + 2 * v7);
    uint64_t v14 = 2 * a2;
    unint64_t v15 = &v13[a2];
    uint64_t v16 = v13;
    do
    {
      if (v16) {
        *uint64_t v16 = 0;
      }
      ++v16;
      v14 -= 2;
    }
    while (v14);
    uint64_t v17 = *(void *)v3;
    uint64_t v18 = *(void *)(v3 + 8);
    if (v18 != *(void *)v3)
    {
      unint64_t v19 = v18 - *(void *)v3 - 2;
      if (v19 < 0x1E) {
        goto LABEL_35;
      }
      if ((unint64_t)(v18 - (v6 + result)) < 0x20) {
        goto LABEL_35;
      }
      uint64_t v20 = (v19 >> 1) + 1;
      unint64_t v21 = 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v22 = v18 - v21;
      uint64_t v13 = (_WORD *)((char *)v13 - v21);
      uint64_t v23 = (_OWORD *)(result + 2 * v7 - 16);
      uint64_t v24 = (long long *)(v18 - 16);
      unint64_t v25 = v20 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *uint64_t v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 16;
      }
      while (v25);
      uint64_t v18 = v22;
      if (v20 != (v20 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_35:
        do
        {
          __int16 v27 = *(_WORD *)(v18 - 2);
          v18 -= 2;
          *--uint64_t v13 = v27;
        }
        while (v18 != v17);
      }
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v15;
    uint64_t v28 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + 2 * v10;
    if (v17) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v17, v28 - v17);
    }
  }
  return result;
}

os_log_t __GEOGetGeoCodecsMaterialDecodeLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoCodecs", "MaterialDecode");
  _MergedGlobals_6 = (uint64_t)result;
  return result;
}

void ***std::__exception_guard_exceptions<std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  char v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    int8x8_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      unint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*((void *)v4 - 3);
          if (v6)
          {
            do
            {
              uint64_t v7 = (void *)*v6;
              operator delete(v6);
              uint64_t v6 = v7;
            }
            while (v7);
          }
          uint64_t v8 = (void *)*((void *)v4 - 5);
          *((void *)v4 - 5) = 0;
          if (v8) {
            operator delete(v8);
          }
          v4 -= 48;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::__split_buffer<geo::codec::MaterialSheet::Material>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 456;
    geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(i - 456));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::vector<std::pair<unsigned short,unsigned int>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        unint64_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t geo::codec::transitLinkFirstPoint(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 20)) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 1;
LABEL_4:
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v5;
  if (*(void *)a1 && (uint64_t v7 = *(void *)(*(void *)a1 + 1400)) != 0)
  {
    uint64_t v8 = (void *)(*(void *)(v7 + 32) + 16 * *(unsigned int *)(a1 + 16) + v3);
    uint64_t v9 = v8[1];
    uint64_t v10 = *(void *)(v7 + 8) + 8 * *v8;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
LABEL_11:
  if (!v9)
  {
LABEL_12:
    while (v4 < *(unsigned int *)(a1 + 20))
    {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
      ++v4;
      v3 += 16;
      if (v2) {
        goto LABEL_4;
      }
    }
    return 0;
  }
  return v10;
}

uint64_t geo::codec::transitLinkPoints(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a1 + 20))
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5 && (uint64_t v7 = std::__shared_weak_count::lock(v5)) != 0)
    {
      uint64_t v8 = v7;
      if (*(void *)a1)
      {
        uint64_t v9 = *(void *)(*(void *)a1 + 1400);
        if (v9)
        {
          uint64_t v10 = (void *)(*(void *)(v9 + 32) + 16 * *(unsigned int *)(a1 + 16) + 16 * a2);
          uint64_t v11 = *(void *)(v9 + 8) + 8 * *v10;
          *a3 = v10[1];
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return v11;
          }
        }
        else
        {
          uint64_t v11 = 0;
          *a3 = 0;
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return v11;
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return v11;
        }
      }
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
      return v11;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *a3 = 0;
    return 0;
  }
}

uint64_t std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void geo::codec::transitNodeFeatureGetSystem(void *a1, unint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (a1)
  {
    if (a1[29] > a2)
    {
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = (void *)*a1;
          if (*a1)
          {
            if (a3)
            {
              unint64_t v10 = *(void *)(v9[180] + 8 * (a1[28] + a2));
              uint64_t v11 = v9[165];
              uint64_t v12 = v9[164];
              if (v10 < 0x8E38E38E38E38E39 * ((v11 - v12) >> 3)) {
                *a3 = v12 + 72 * v10;
              }
            }
          }
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
}

void *geo::codec::multiSectionFeaturePointsWithElevation(void *result, unint64_t a2, void *a3, void *a4)
{
  if (!result)
  {
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = result;
  if (*((unsigned int *)result + 25) <= a2) {
    goto LABEL_11;
  }
  os_log_t result = geo::codec::vertexPoolForFeature((uint64_t)result);
  uint64_t v8 = result;
  if (!result)
  {
LABEL_13:
    *a4 = v8;
    return result;
  }
  uint64_t v9 = result[4];
  if (!v9) {
    return 0;
  }
  unint64_t v10 = *((unsigned int *)v6 + 24) + a2;
  if (result[5] <= v10 || (unint64_t v11 = *(void *)(v9 + 16 * v10), v11 >= result[2]))
  {
LABEL_11:
    os_log_t result = 0;
    *a4 = 0;
    return result;
  }
  os_log_t result = (void *)(result[1] + 8 * v11);
  if (a3)
  {
    uint64_t v12 = v8[3];
    if (v12)
    {
      *a3 = v12 + 4 * v11;
      uint64_t v9 = v8[4];
    }
  }
  *a4 = *(void *)(v9 + 16 * v10 + 8);
  return result;
}

uint64_t geo::codec::tileGetNativeLabel(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  if (*(void *)result)
  {
    uint64_t v4 = *(void *)(*(void *)result + 1048);
    if (a3) {
      *a3 = *(void *)(v4 + 24 * a2);
    }
    if (a4)
    {
      uint64_t v5 = *(void *)(v4 + 24 * a2 + 8);
LABEL_10:
      *a4 = v5;
    }
  }
  else
  {
    if (a3) {
      *a3 = 0;
    }
    if (a4)
    {
      uint64_t v5 = 0;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t *geo::codec::transitSystemInfoGetNativeLabel(uint64_t *result, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  if (a2)
  {
    uint64_t v5 = *result;
    if (*(void *)(a2 + 40) <= a3 || v5 == 0)
    {
      if (a4) {
        *a4 = 0;
      }
      if (a5)
      {
        uint64_t v7 = 0;
LABEL_15:
        *a5 = v7;
      }
    }
    else
    {
      unint64_t v8 = *(void *)(a2 + 48) + a3;
      uint64_t v9 = *(void *)(v5 + 1048);
      if (a4) {
        *a4 = *(void *)(v9 + 24 * v8);
      }
      if (a5)
      {
        uint64_t v7 = *(void *)(v9 + 24 * v8 + 8);
        goto LABEL_15;
      }
    }
  }
  return result;
}

void geo::codec::transitLineGetSubtitleNativeLabel(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    return;
  }
  int v6 = *(_DWORD *)(a1 + 92);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6 == -1)
  {
    if (v7)
    {
      unint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8 && *(unsigned char *)(a1 + 72) && *(void *)a1)
      {
        uint64_t v12 = (void *)(*(void *)(*(void *)a1 + 1064) + 32 * *(unsigned int *)(a1 + 60));
        if (a2) {
          *a2 = *v12;
        }
        if (a3) {
          *a3 = v12[1];
        }
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
    if (a2) {
      *a2 = 0;
    }
    if (a3) {
      *a3 = 0;
    }
LABEL_29:
    if (!v8) {
      return;
    }
    goto LABEL_30;
  }
  if (!v7)
  {
    unint64_t v8 = 0;
    goto LABEL_19;
  }
  unint64_t v8 = std::__shared_weak_count::lock(v7);
  if (!v8 || !*(void *)a1)
  {
LABEL_19:
    if (a2) {
      *a2 = 0;
    }
    if (a3)
    {
      uint64_t v11 = 0;
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 92);
  uint64_t v10 = *(void *)(*(void *)a1 + 1048);
  if (a2) {
    *a2 = *(void *)(v10 + 24 * v9);
  }
  if (a3)
  {
    uint64_t v11 = *(void *)(v10 + 24 * v9 + 8);
LABEL_23:
    *a3 = v11;
    goto LABEL_29;
  }
LABEL_30:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void *geo::codec::tileGetLocalizedLabel(void **a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  return geo::codec::vectorTileGetLocalizedLabel(*a1, 1uLL, a2, 0, a3, a4);
}

void *geo::codec::transitSystemInfoGetLocalizedLabel(void **a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  return geo::codec::vectorTileGetLocalizedLabel(*a1, *(void *)(a2 + 40), *(void *)(a2 + 48), a3, a4, a5);
}

void geo::codec::decompressBinaryBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *a6;
  for (uint64_t i = a6[1]; i != v7; i -= 72)
  {
    uint64_t v9 = *(void *)(i - 32);
    if (v9)
    {
      *(void *)(i - 24) = v9;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(i - 8) + 40))(*(void *)(i - 8), v9, *(void *)(i - 16) - v9);
    }
    uint64_t v10 = *(void *)(i - 64);
    if (v10)
    {
      *(void *)(i - 56) = v10;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(i - 40) + 40))(*(void *)(i - 40), v10, *(void *)(i - 48) - v10);
    }
  }
  a6[1] = v7;
  operator new();
}

void sub_1A2844A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t geo::codec::transitLinkGetLineCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t geo::codec::transitLinkGetLineDirection(void *a1, unint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  uint64_t v7 = 0;
  if (a1[4] <= a2 || !*a1) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(*a1 + 1656);
  if (v8)
  {
    uint64_t v7 = *(unsigned __int8 *)(v8 + a1[3] + a2);
LABEL_8:
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v7;
    }
    goto LABEL_12;
  }
  uint64_t v7 = 0;
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v7;
  }
LABEL_12:
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v7;
}

void *geo::codec::transitLinkGetFromNodeID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  if (!a1) {
    return v2;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (*v2 && v2[14] > (unint64_t)(2 * a2))
  {
    uint64_t v2 = **(void ***)(*(void *)(*v2 + 1680) + 8 * (v2[13] + 2 * a2));
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

void *geo::codec::transitLinkGetToNodeID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  if (!a1) {
    return v2;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (*v2 && (unint64_t v7 = (2 * a2) | 1, v2[14] > v7))
  {
    uint64_t v2 = **(void ***)(*(void *)(*v2 + 1680) + 8 * (v2[13] + v7));
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

BOOL geo::codec::transitLinkGetShouldDrawFromEndPoint(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (*a1 && 2 * a2 < (unint64_t)(2 * a1[4]))
  {
    BOOL v7 = *(unsigned __int8 *)(*(void *)(*a1 + 1768) + 2 * (a1[3] + a2)) != 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v7;
    }
  }
  else
  {
    BOOL v7 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v7;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v7;
}

unint64_t geo::codec::transitLinkGetShouldDrawToEndPoint(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  if (!a1) {
    return v2;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (*(void *)v2 && (unint64_t v7 = (2 * a2) | 1, v7 < 2 * *(void *)(v2 + 32)))
  {
    unint64_t v2 = *(unsigned __int8 *)(*(void *)(*(void *)v2 + 1768) + v7 + 2 * *(void *)(v2 + 24)) != 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  else
  {
    unint64_t v2 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

uint64_t geo::codec::vectorTransitLineAlongLink(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  unint64_t v7 = (void *)*a1;
  if (!*a1
    || ((uint64_t v8 = v7[160], v9 = v7[173], v8) ? (v10 = v9 == 0) : (v10 = 1), v10 || (v11 = a1[3] + a2, v11 >= v7[174])))
  {
    uint64_t v15 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v15;
    }
  }
  else
  {
    unint64_t v12 = *(void *)(v9 + 8 * v11);
    unint64_t v13 = 0x4EC4EC4EC4EC4EC5 * ((v7[161] - v8) >> 3);
    uint64_t v14 = v8 + 104 * v12;
    if (v12 >= v13) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v15;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v15;
}

uint64_t *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

char *geo::codec::polygonFeatureGetStrokeSpecifications(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  unint64_t v7 = (void *)*a1;
  if (*a1
    && (size_t v8 = v7[157],
        uint64_t v9 = (char *)v7[156],
        uint64_t __key = ((uint64_t)a1 - v7[12]) >> 7,
        BOOL v10 = (char *)bsearch(&__key, v9, v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareStrokeSpecifications), a2))
  {
    if (!v10)
    {
      unint64_t v12 = 0;
      *a2 = 0;
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v12;
      }
      goto LABEL_18;
    }
    unint64_t v11 = v10;
    do
    {
      unint64_t v12 = v10;
      unint64_t v13 = v11;
      if (v10 <= v9) {
        break;
      }
      v10 -= 16;
      v11 -= 16;
    }
    while (__key == *((_DWORD *)v12 - 4));
    uint64_t v14 = &v9[16 * v8];
    uint64_t v15 = v12;
    if (v12 < v14)
    {
      uint64_t v15 = v12;
      do
      {
        if (__key != *(_DWORD *)v15) {
          break;
        }
        v15 += 16;
      }
      while (v15 < v14);
    }
    *a2 = (v15 - v13) >> 4;
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_18:
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    unint64_t v12 = 0;
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
  }
  return v12;
}

void sub_1A28453F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *geo::codec::multiSectionFeatureGetGhostPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_t result = geo::codec::vertexPoolForFeature(a1);
  if (result)
  {
    uint64_t v7 = result[8];
    if (v7 && (uint64_t v8 = *(unsigned int *)(a1 + 96) + a2, (v9 = *(void *)(v7 + 16 * v8 + 8)) != 0))
    {
      for (os_log_t result = (void *)(result[7] + 32 * *(void *)(v7 + 16 * v8)); result[3] != a3; result += 4)
      {
        if (!--v9) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *geo::codec::polygonFeatureGetCharacteristicPointsForSection(void *a1, uint64_t a2, uint64_t *a3)
{
  __key[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4) {
    return 0;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (void *)*a1;
  if (*a1)
  {
    size_t v10 = v9[153];
    unint64_t v11 = (char *)v9[152];
    uint64_t v12 = ((uint64_t)a1 - v9[12]) >> 7;
    __key[0] = v12;
    __key[1] = a2;
    unint64_t v13 = (char *)bsearch(__key, v11, v10, 0x64uLL, (int (__cdecl *)(const void *, const void *))geo::codec::_searchForCharacteristicPointsInSection(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long,unsigned long *)::$_0::__invoke);
    if (a3)
    {
      uint64_t v14 = v13;
      if (v13)
      {
        if (v13 > v11)
        {
          do
          {
            if (v12 != *((_DWORD *)v14 - 24)) {
              break;
            }
            if (*((_DWORD *)v14 - 23) != a2) {
              break;
            }
            v14 -= 100;
          }
          while (v14 > v11);
        }
        *a3 = 0;
        uint64_t v15 = &v11[100 * v10];
        if (v14 < v15)
        {
          uint64_t v16 = 1;
          uint64_t v17 = v14;
          do
          {
            if (v12 != *((_DWORD *)v17 + 1)) {
              break;
            }
            if (*((_DWORD *)v17 + 2) != a2) {
              break;
            }
            *a3 = v16;
            v17 += 100;
            ++v16;
          }
          while (v17 < v15);
        }
        goto LABEL_19;
      }
      *a3 = 0;
    }
  }
  uint64_t v14 = 0;
LABEL_19:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v14;
}

void sub_1A2845630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *geo::codec::polygonFeatureGetCharacteristicPoints(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  uint64_t v7 = (void *)*a1;
  if (*a1)
  {
    size_t v8 = v7[153];
    uint64_t v9 = (char *)v7[152];
    uint64_t __key = ((uint64_t)a1 - v7[12]) >> 7;
    size_t v10 = (char *)bsearch(&__key, v9, v8, 0x64uLL, (int (__cdecl *)(const void *, const void *))geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke);
    if (a2)
    {
      unint64_t v11 = v10;
      if (v10)
      {
        if (v10 > v9)
        {
          do
          {
            if (__key != *((_DWORD *)v11 - 24)) {
              break;
            }
            v11 -= 100;
          }
          while (v11 > v9);
        }
        *a2 = 0;
        uint64_t v12 = &v9[100 * v8];
        if (v11 < v12)
        {
          uint64_t v13 = __key;
          uint64_t v14 = 1;
          uint64_t v15 = v11;
          do
          {
            if (v13 != *((_DWORD *)v15 + 1)) {
              break;
            }
            *a2 = v14;
            v15 += 100;
            ++v14;
          }
          while (v15 < v12);
        }
        goto LABEL_17;
      }
      *a2 = 0;
    }
  }
  unint64_t v11 = 0;
LABEL_17:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v11;
}

void sub_1A28457A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *geo::codec::multiSectionFeaturePrecision(uint64_t a1)
{
  os_log_t result = geo::codec::vertexPoolForFeature(a1);
  if (result) {
    return (void *)*(unsigned __int8 *)result;
  }
  return result;
}

float geo::codec::buildingFootprintExtrusionHeight(uint64_t a1, unint64_t a2)
{
  float v2 = 0.0;
  if (*(unsigned int *)(a1 + 100) <= a2) {
    return v2;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4) {
    return v2;
  }
  int v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    return v2;
  }
  uint64_t v7 = v6;
  if (*(void *)a1) {
    float v2 = *(float *)(*(void *)(*(void *)a1 + 312) + 4 * (*(void *)(a1 + 112) + a2));
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v2;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

float geo::codec::buildingFootprintBaseHeight(uint64_t a1, unint64_t a2)
{
  float v2 = 0.0;
  if (*(unsigned int *)(a1 + 100) <= a2) {
    return v2;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4) {
    return v2;
  }
  int v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    return v2;
  }
  uint64_t v7 = v6;
  if (*(void *)a1)
  {
    uint64_t v8 = *(void *)(*(void *)a1 + 344);
    if (v8) {
      float v2 = *(float *)(v8 + 4 * (*(void *)(a1 + 120) + a2));
    }
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v2;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

BOOL geo::codec::TileKeyEquals(void *a1, void *a2)
{
  return *a1 == *a2 && *(void *)((char *)a1 + 3) == *(void *)((char *)a2 + 3);
}

uint64_t geo::codec::buildingFootprintFeatureAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 280);
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((*(void *)(*(void *)a1 + 288) - v2) >> 3);
  uint64_t v4 = *(void *)(*(void *)a1 + 376);
  if (v3 - 0xF0F0F0F0F0F0F0FLL * ((*(void *)(*(void *)a1 + 384) - v4) >> 3) <= a2) {
    return 0;
  }
  BOOL v5 = a2 >= v3;
  unint64_t v6 = a2 - v3;
  if (v5) {
    return v4 + 136 * v6;
  }
  else {
    return v2 + 136 * a2;
  }
}

uint64_t geo::codec::threeDBuildingFeatureAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 440);
  unint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(*(void *)a1 + 448) - v2) >> 4);
  uint64_t v4 = *(void *)(*(void *)a1 + 472);
  if (v3 + 0x6DB6DB6DB6DB6DB7 * ((*(void *)(*(void *)a1 + 480) - v4) >> 4) <= a2) {
    return 0;
  }
  BOOL v5 = a2 >= v3;
  unint64_t v6 = a2 - v3;
  if (v5) {
    return v4 + 112 * v6;
  }
  else {
    return v2 + 112 * a2;
  }
}

uint64_t geo::codec::pBTransitStationTransferGetPoints(void *a1, unint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (!a1) {
    return 0;
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  if (*a1
    && a1[11] > a2
    && (uint64_t v9 = *(void **)(*a1 + 1456)) != 0
    && (uint64_t v10 = v9[1]) != 0
    && (uint64_t v11 = v9[4]) != 0
    && (unint64_t v12 = a1[10] + a2, v12 <= v9[5]))
  {
    if (a3) {
      *a3 = *(void *)(v11 + 16 * v12 + 8);
    }
    uint64_t v13 = v10 + 8 * *(void *)(v11 + 16 * v12);
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v13;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v13;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v8);
  return v13;
}

float geo::codec::roadFeatureMapOriginalToEvaluatedIndex(std::__shared_weak_count **this, const GeoCodecsRoadFeature *a2, float a3)
{
  float v3 = -1.0;
  if (*((unsigned int *)this + 25) <= (unint64_t)a2) {
    return v3;
  }
  uint64_t v7 = std::__shared_weak_count::lock(this[1]);
  uint64_t shared_owners = (*this)[32].__shared_owners_;
  if (!shared_owners)
  {
    float v3 = a3;
    goto LABEL_31;
  }
  unint64_t v9 = (unint64_t)a3;
  unint64_t v10 = (unint64_t)a3 + 1;
  uint64_t v11 = (void *)((char *)(*this)[32].__on_zero_shared_weak + 16 * ((void)a2 + *((unsigned int *)this + 24)));
  unint64_t v12 = v11[1];
  if (v10 >= v12 && v12 <= v9) {
    goto LABEL_31;
  }
  unint64_t v14 = *v11 + v9;
  unint64_t v15 = v10 >= v12 ? v14 : v14 + 1;
  if (*((unsigned int *)this + 25) <= (unint64_t)a2) {
    goto LABEL_31;
  }
  unint64_t v16 = *(unsigned int *)(shared_owners + 4 * v14);
  uint64_t v17 = *(unsigned int *)(shared_owners + 4 * v15);
  uint64_t v18 = geo::codec::vertexPoolForFeature((uint64_t)this);
  if (!v18) {
    goto LABEL_31;
  }
  uint64_t v20 = v18[4];
  if (!v20) {
    goto LABEL_31;
  }
  unint64_t v21 = (unint64_t)a2 + *((unsigned int *)this + 24);
  if (v18[5] <= v21) {
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)(v20 + 16 * v21);
  if (v22 >= v18[2]) {
    goto LABEL_31;
  }
  uint64_t v23 = v18[1];
  if (!v23) {
    goto LABEL_31;
  }
  if (v16 < v17)
  {
    uint64_t v24 = v23 + 8 * v22;
    float32x2_t v25 = *(float32x2_t *)(v24 + 8 * v16);
    unint64_t v26 = v16 + 1;
    uint64_t v27 = v17 - v16;
    float v28 = 0.0;
    unint64_t v29 = v16 + 1;
    float32x2_t v30 = v25;
    if (v17 - v16 >= 8)
    {
      unint64_t v29 = v26 + (v27 & 0xFFFFFFFFFFFFFFF8);
      v19.i64[1] = *(void *)(v24 + 8 * v16);
      int8x16_t v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)v25, 0);
      float v32 = (_OWORD *)(8 * v22 + 8 * v16 + v23 + 40);
      float32x4_t v33 = 0uLL;
      unint64_t v34 = v27 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v35 = 0uLL;
      do
      {
        BOOL v36 = (const float *)(v32 - 2);
        float32x4x2_t v59 = vld2q_f32(v36);
        int32x4_t v38 = *(int32x4_t *)v32;
        int8x16_t v37 = *((int8x16_t *)v32 + 1);
        v32 += 4;
        float32x4_t v39 = (float32x4_t)vuzp1q_s32(v38, (int32x4_t)v37);
        float32x4_t v40 = (float32x4_t)vuzp2q_s32(v38, (int32x4_t)v37);
        float32x4_t v41 = vsubq_f32(v59.val[0], (float32x4_t)vextq_s8(v31, (int8x16_t)v59.val[0], 0xCuLL));
        float32x4_t v42 = vsubq_f32(v39, (float32x4_t)vextq_s8((int8x16_t)v59.val[0], (int8x16_t)v39, 0xCuLL));
        float32x4_t v43 = vsubq_f32(v59.val[1], (float32x4_t)vextq_s8(v19, (int8x16_t)v59.val[1], 0xCuLL));
        v59.val[0] = vsubq_f32(v40, (float32x4_t)vextq_s8((int8x16_t)v59.val[1], (int8x16_t)v40, 0xCuLL));
        float32x4_t v33 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v41, v41), v43, v43)), v33);
        float32x4_t v35 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v42, v42), v59.val[0], v59.val[0])), v35);
        int8x16_t v19 = (int8x16_t)v40;
        int8x16_t v31 = (int8x16_t)v39;
        v34 -= 8;
      }
      while (v34);
      float32x4_t v44 = vaddq_f32(v35, v33);
      float v28 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44));
      if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_25;
      }
      float32x2_t v30 = (float32x2_t)vextq_s8(v37, v37, 8uLL).u64[0];
    }
    uint64_t v45 = v17 - v29 + 1;
    unint64_t v46 = (float32x2_t *)(v23 + 8 * v29 + 8 * v22);
    do
    {
      float32x2_t v47 = *v46++;
      float32x2_t v48 = vsub_f32(v47, v30);
      float v28 = sqrtf(vaddv_f32(vmul_f32(v48, v48))) + v28;
      float32x2_t v30 = v47;
      --v45;
    }
    while (v45);
LABEL_25:
    float v49 = v28 * (float)(a3 - floorf(a3));
    float32x2_t v50 = *(float32x2_t *)(v24 + 8 * v26);
    float32x2_t v51 = vsub_f32(v50, v25);
    float v52 = sqrtf(vaddv_f32(vmul_f32(v51, v51)));
    float v53 = 0.0;
    if (v52 > v49)
    {
      float v57 = v52;
LABEL_36:
      float v3 = (float)((float)(v49 - v53) / v57) + (float)v16;
      goto LABEL_31;
    }
    uint64_t v54 = v23 + 8 * v22 + 16;
    while (v17 - 1 != v16)
    {
      float v53 = v52;
      float32x2_t v55 = *(float32x2_t *)(v54 + 8 * v16);
      float32x2_t v56 = vsub_f32(v55, v50);
      float v57 = sqrtf(vaddv_f32(vmul_f32(v56, v56)));
      float v52 = v57 + v52;
      ++v16;
      float32x2_t v50 = v55;
      if (v52 > v49) {
        goto LABEL_36;
      }
    }
  }
  float v3 = (float)v17;
LABEL_31:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v3;
}

void geo::codec::transitLinkExtractLineInfo(void *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (!v7 || (unint64_t v9 = std::__shared_weak_count::lock(v7)) == 0)
  {
    *a3 = 0;
    *a4 = 0;
    uint64_t v20 = *a3;
    if (!*a3) {
      return;
    }
    goto LABEL_18;
  }
  unint64_t v10 = v9;
  uint64_t v11 = (void *)*a1;
  if (!*a1
    || ((uint64_t v12 = v11[160], v13 = v11[173], v12) ? (v14 = v13 == 0) : (v14 = 1), v14 || (v15 = a1[3] + a2, v15 >= v11[174])))
  {
    uint64_t v19 = 0;
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_27;
    }
  }
  else
  {
    unint64_t v16 = *(void *)(v13 + 8 * v15);
    unint64_t v17 = 0x4EC4EC4EC4EC4EC5 * ((v11[161] - v12) >> 3);
    uint64_t v18 = v12 + 104 * v16;
    if (v16 >= v17) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18;
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_27:
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v19;
      *a4 = 0;
      uint64_t v20 = *a3;
      if (!*a3) {
        return;
      }
      goto LABEL_18;
    }
  }
  *a3 = v19;
  *a4 = 0;
  uint64_t v20 = *a3;
  if (!*a3) {
    return;
  }
LABEL_18:
  unint64_t v21 = (std::__shared_weak_count *)a1[1];
  if (v21)
  {
    unint64_t v22 = *(unsigned int *)(v20 + 84);
    uint64_t v23 = std::__shared_weak_count::lock(v21);
    if (v23)
    {
      uint64_t v24 = v23;
      float32x2_t v25 = (void *)*a1;
      if (*a1)
      {
        uint64_t v26 = v25[165];
        uint64_t v27 = v25[164];
        if (0x8E38E38E38E38E39 * ((v26 - v27) >> 3) > v22) {
          *a4 = v27 + 72 * v22;
        }
      }
      if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

uint64_t geo::codec::vectorTransitLineForTransitNodeSubtitleIndex(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0;
  }
  float v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v5;
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*(unsigned __int8 *)(a1 + 274) > a2)
    {
      unint64_t v8 = *(_DWORD *)(a1 + 292) + a2;
      if (v7[204] > v8)
      {
        uint64_t v9 = *(void *)(v7[203] + 8 * v8);
        if (v9 != -1)
        {
          uint64_t v10 = v7[160] + 104 * v9;
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            goto LABEL_14;
          }
          return v10;
        }
      }
    }
  }
  uint64_t v10 = 0;
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v10;
  }
LABEL_14:
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v10;
}

void geo::codec::transitNodeFeatureGetStyleAttributes(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a1)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  BOOL v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v5);
    if (v7 && *a1 && a1[39] > a2)
    {
      long long v8 = *(_OWORD *)(*(void *)(*a1 + 1720) + 16 * (a1[38] + a2));
      *(_OWORD *)a3 = v8;
      if (*((void *)&v8 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
      }
LABEL_15:
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      return;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (a1[39])
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v9 = a1[4];
    *a3 = a1[3];
    a3[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (v7) {
    goto LABEL_15;
  }
}

void geo::codec::transitNodeFeatureGetNativeParentheticalLabels(uint64_t *a1, void *a2, void *a3, void *a4, void *a5)
{
  if (!a1) {
    return;
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (!v6) {
    return;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v6);
  if (!v11) {
    return;
  }
  uint64_t v12 = v11;
  uint64_t v13 = *a1;
  if (*a1)
  {
    uint64_t v14 = a1[35];
    if (v14 == -1)
    {
      if (a2) {
        *a2 = 0;
      }
      if (a3) {
        *a3 = 0;
      }
      if (!a4) {
        goto LABEL_21;
      }
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 1048);
      if (a2) {
        *a2 = *(void *)(v15 + 24 * v14);
      }
      if (a5) {
        *a5 = *(void *)(v15 + 24 * v14 + 8);
      }
      if (a3) {
        *a3 = *(void *)(*(void *)(v13 + 1048) + 24 * v14 + 24);
      }
      if (!a4) {
        goto LABEL_21;
      }
      uint64_t v16 = *(void *)(*(void *)(v13 + 1048) + 24 * v14 + 48);
    }
    *a4 = v16;
  }
LABEL_21:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void geo::codec::transitNodeFeatureGetLocalizedParentheticalLabels(void *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, void *a5)
{
  if (!a1) {
    goto LABEL_26;
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  if (!v10) {
    goto LABEL_26;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v10);
  if (!v11) {
    goto LABEL_26;
  }
  uint64_t v12 = v11;
  if (!*a1 || (uint64_t v13 = a1[35], v13 == -1))
  {
    unint64_t v15 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v16 = 0;
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_9:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    uint64_t v14 = (unint64_t *)(*(void *)(*a1 + 1048) + 24 * v13);
    unint64_t v15 = *v14;
    uint64_t v16 = (void *)v14[1];
    unint64_t v17 = v14[3];
    unint64_t v18 = v14[6];
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
  }
  if (v15 && v17 && v18)
  {
    uint64_t v19 = (std::__shared_weak_count *)a1[1];
    float v57 = v16;
    unint64_t v58 = v18;
    if (!v19)
    {
      unint64_t v31 = 0;
      unint64_t v22 = 0;
      goto LABEL_53;
    }
    uint64_t v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      unint64_t v21 = v20;
      unint64_t v22 = (void *)*a1;
      if (!*a1)
      {
        unint64_t v56 = 0;
        if (atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      unint64_t v23 = v22[107];
      if (v23 > v15) {
        goto LABEL_38;
      }
      if (v22[108] <= v15) {
        goto LABEL_38;
      }
      uint64_t v24 = (const void *)v22[135];
      uint64_t v25 = v22[136];
      unint64_t __key = v15 - v23;
      uint64_t v26 = bsearch(&__key, v24, (v25 - (uint64_t)v24) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
      if (!v26) {
        goto LABEL_38;
      }
      unint64_t v27 = v26[1];
      if (v27 == -1) {
        goto LABEL_38;
      }
      float v28 = v22 + 127;
      uint64_t v29 = 127;
      if ((v26[3] & 1) == 0)
      {
        uint64_t v29 = 113;
        float v28 = v22 + 113;
      }
      uint64_t v30 = v22[v29];
      if (v27 < v28[1] - v30 && v30)
      {
        unint64_t v22 = (void *)v26[2];
        unint64_t v56 = v30 + v27;
        if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_39;
        }
      }
      else
      {
LABEL_38:
        unint64_t v22 = 0;
        unint64_t v56 = 0;
        if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_39:
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    else
    {
      unint64_t v22 = 0;
      unint64_t v56 = 0;
    }
LABEL_40:
    float v32 = (std::__shared_weak_count *)a1[1];
    if (v32)
    {
      float32x4_t v33 = std::__shared_weak_count::lock(v32);
      if (v33)
      {
        unint64_t v34 = v33;
        float32x4_t v35 = (void *)*a1;
        if (*a1)
        {
          unint64_t v36 = v35[107];
          if (v36 > v17) {
            goto LABEL_57;
          }
          if (v35[108] <= v17) {
            goto LABEL_57;
          }
          int8x16_t v37 = (const void *)v35[135];
          uint64_t v38 = v35[136];
          unint64_t __key = v17 - v36;
          float32x4_t v39 = bsearch(&__key, v37, (v38 - (uint64_t)v37) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
          if (!v39) {
            goto LABEL_57;
          }
          unint64_t v40 = v39[1];
          if (v40 == -1) {
            goto LABEL_57;
          }
          float32x4_t v41 = v35 + 127;
          uint64_t v42 = 127;
          if ((v39[3] & 1) == 0)
          {
            uint64_t v42 = 113;
            float32x4_t v41 = v35 + 113;
          }
          uint64_t v43 = v35[v42];
          if (v40 < v41[1] - v43 && v43) {
            float32x4_t v35 = (void *)(v43 + v40);
          }
          else {
LABEL_57:
          }
            float32x4_t v35 = 0;
        }
        if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      else
      {
        float32x4_t v35 = 0;
      }
      uint64_t v45 = (std::__shared_weak_count *)a1[1];
      if (!v45 || (unint64_t v46 = std::__shared_weak_count::lock(v45)) == 0)
      {
        float32x4_t v44 = 0;
LABEL_73:
        unint64_t v31 = v56;
        goto LABEL_77;
      }
      float32x2_t v47 = v46;
      float32x4_t v44 = (void *)*a1;
      unint64_t v31 = v56;
      if (v44)
      {
        unint64_t v48 = v44[107];
        if (v48 <= v58 && v44[108] > v58)
        {
          float v49 = (const void *)v44[135];
          uint64_t v50 = v44[136];
          unint64_t __key = v58 - v48;
          float32x2_t v51 = bsearch(&__key, v49, (v50 - (uint64_t)v49) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
          if (!v51) {
            goto LABEL_74;
          }
          unint64_t v52 = v51[1];
          if (v52 == -1) {
            goto LABEL_74;
          }
          float v53 = v44 + 127;
          uint64_t v54 = 127;
          if ((v51[3] & 1) == 0)
          {
            uint64_t v54 = 113;
            float v53 = v44 + 113;
          }
          uint64_t v55 = v44[v54];
          if (v52 >= v53[1] - v55)
          {
LABEL_74:
            unint64_t v31 = v56;
          }
          else
          {
            unint64_t v31 = v56;
            if (v55)
            {
              float32x4_t v44 = (void *)(v55 + v52);
              goto LABEL_76;
            }
          }
        }
        float32x4_t v44 = 0;
      }
LABEL_76:
      if (atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_77;
      }
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      goto LABEL_73;
    }
    unint64_t v31 = v56;
LABEL_53:
    float32x4_t v35 = 0;
    float32x4_t v44 = 0;
LABEL_77:
    if (v31 && v35 && v44 && v22)
    {
      if (a2) {
        *a2 = v31;
      }
      if (a3) {
        *a3 = (unint64_t)v35;
      }
      if (a4) {
        *a4 = (unint64_t)v44;
      }
    }
    else
    {
      if (a2) {
        *a2 = v15;
      }
      unint64_t v22 = v57;
      if (a3) {
        *a3 = v17;
      }
      if (a4) {
        *a4 = v58;
      }
    }
    if (!a5) {
      return;
    }
LABEL_34:
    *a5 = v22;
    return;
  }
LABEL_26:
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5)
  {
    unint64_t v22 = 0;
    goto LABEL_34;
  }
}

void sub_1A2846938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A284694C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A2846960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *geo::codec::forEachEdgeOnJunction(uint64_t *result, unsigned int *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  if (a2)
  {
    float v3 = result;
    uint64_t v4 = *result;
    if (*result)
    {
      if (*(void *)(a3 + 24) && *a2)
      {
        unint64_t v6 = 0;
        uint64_t v7 = *(void *)(v4 + 712);
        uint64_t v8 = *(void *)(v4 + 32);
        do
        {
          uint64_t v9 = v8 + 168 * *(unsigned int *)(v7 + 16 * (v6 + a2[1]) + 4);
          v11[0] = &unk_1EF57A970;
          v11[1] = &v10;
          unsigned char v11[2] = a3;
          uint64_t v12 = v11;
          geo::codec::forEachEdgeInRoad(v3, v9, 1, (uint64_t)v11);
          os_log_t result = v12;
          if (v12 == v11)
          {
            os_log_t result = (uint64_t *)(*(uint64_t (**)(void *))(v11[0] + 32))(v11);
          }
          else if (v12)
          {
            os_log_t result = (uint64_t *)(*(uint64_t (**)(void))(*v12 + 40))();
          }
          ++v6;
          a2 = v10;
        }
        while (v6 < *v10);
      }
    }
  }
  return result;
}

void sub_1A2846AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(GeoCodecsRoadEdge *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::compareStrokeSpecifications(geo::codec *this, unsigned int *a2, const void *a3)
{
  unint64_t v3 = *a2;
  BOOL v4 = *(void *)this >= v3;
  BOOL v5 = *(void *)this > v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t geo::codec::_searchForCharacteristicPointsInSection(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long,unsigned long *)::$_0::__invoke(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *(unsigned int *)(a2 + 4);
  unint64_t v5 = *(unsigned int *)(a2 + 8);
  BOOL v7 = v3 >= v5;
  int v6 = v3 > v5;
  if (!v7) {
    int v6 = -1;
  }
  BOOL v7 = v2 >= v4;
  if (v2 <= v4) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = 1;
  }
  if (v7) {
    return v8;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 4);
  if (*a1 < v2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > v2;
  }
}

void FeatureStyleAttributes::~FeatureStyleAttributes(FeatureStyleAttributes *this)
{
  if (*((void *)this + 1))
  {
    unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  else
  {
    free(*(void **)this);
    *(void *)this = 0;
    *((unsigned char *)this + 33) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    free(v3);
    *((void *)this + 3) = 0;
    *((unsigned char *)this + 32) = 0;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(void *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    uint64_t v6 = *(void *)result;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)result) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0xAAAAAAAAAAAAAAALL) {
      uint64_t v10 = 0x1555555555555555;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      os_log_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 12 * v10, 4);
      uint64_t v6 = *(void *)v3;
      uint64_t v4 = *(void *)(v3 + 8);
    }
    else
    {
      os_log_t result = 0;
    }
    unint64_t v11 = result + 12 * v7;
    unint64_t v12 = v11 + 12 * (12 * a2 / 0xC);
    if (v4 != v6)
    {
      do
      {
        uint64_t v13 = *(void *)(v4 - 12);
        v4 -= 12;
        int v14 = *(_DWORD *)(v4 + 8);
        *(void *)(v11 - 12) = v13;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v14;
      }
      while (v4 != v6);
      uint64_t v6 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v11;
    *(void *)(v3 + 8) = v12;
    uint64_t v15 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + 12 * v10;
    if (v6) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v6, v15 - v6);
    }
  }
  return result;
}

uint64_t std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_DWORD **)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      uint64_t v11 = 4 * a2;
      unint64_t v12 = &v4[a2];
      do
      {
        if (v4) {
          *uint64_t v4 = 0;
        }
        ++v4;
        v11 -= 4;
      }
      while (v11);
      uint64_t v4 = v12;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    uint64_t v6 = (uint64_t)v4 - *(void *)result;
    uint64_t v7 = v6 >> 2;
    unint64_t v8 = (v6 >> 2) + a2;
    if (v8 >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - *(void *)result;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      uint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      os_log_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * v10, 4);
    }
    else {
      os_log_t result = 0;
    }
    uint64_t v13 = (_DWORD *)(result + 4 * v7);
    uint64_t v14 = 4 * a2;
    uint64_t v15 = &v13[a2];
    uint64_t v16 = v13;
    do
    {
      if (v16) {
        *uint64_t v16 = 0;
      }
      ++v16;
      v14 -= 4;
    }
    while (v14);
    uint64_t v17 = *(void *)v3;
    uint64_t v18 = *(void *)(v3 + 8);
    if (v18 != *(void *)v3)
    {
      unint64_t v19 = v18 - *(void *)v3 - 4;
      if (v19 < 0x2C) {
        goto LABEL_35;
      }
      if ((unint64_t)(v18 - (v6 + result)) < 0x20) {
        goto LABEL_35;
      }
      uint64_t v20 = (v19 >> 2) + 1;
      uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v22 = v18 - v21;
      uint64_t v13 = (_DWORD *)((char *)v13 - v21);
      unint64_t v23 = (_OWORD *)(result + 4 * v7 - 16);
      uint64_t v24 = (long long *)(v18 - 16);
      uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *unint64_t v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 8;
      }
      while (v25);
      uint64_t v18 = v22;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          int v27 = *(_DWORD *)(v18 - 4);
          v18 -= 4;
          *--uint64_t v13 = v27;
        }
        while (v18 != v17);
      }
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v15;
    uint64_t v28 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + 4 * v10;
    if (v17) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v17, v28 - v17);
    }
  }
  return result;
}

uint64_t std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v5 = *(unsigned char **)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v5[a2];
      do
      {
        if (v5) {
          *uint64_t v5 = 0;
        }
        ++v5;
        --v2;
      }
      while (v2);
      uint64_t v5 = v11;
    }
    *(void *)(result + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void *)result;
    uint64_t v7 = &v5[-*(void *)result];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v4 - v6;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      os_log_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), v10, 1);
    }
    else {
      os_log_t result = 0;
    }
    unint64_t v12 = &v7[result];
    uint64_t v13 = &v7[result + v2];
    uint64_t v14 = &v7[result];
    do
    {
      if (v14) {
        *uint64_t v14 = 0;
      }
      ++v14;
      --v2;
    }
    while (v2);
    uint64_t v16 = *(void *)v3;
    uint64_t v15 = *(void *)(v3 + 8);
    unint64_t v17 = v15 - *(void *)v3;
    if (v15 != *(void *)v3)
    {
      if (v17 < 0x20) {
        goto LABEL_36;
      }
      if ((unint64_t)(v6 - (void)&v5[result] + v15) < 0x20) {
        goto LABEL_36;
      }
      v12 -= v17 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v18 = &v7[result - 16];
      unint64_t v19 = (long long *)(v15 - 16);
      unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *uint64_t v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 32;
      }
      while (v20);
      v15 -= v17 & 0xFFFFFFFFFFFFFFE0;
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_36:
        do
        {
          char v22 = *(unsigned char *)--v15;
          *--unint64_t v12 = v22;
        }
        while (v15 != v16);
      }
      uint64_t v15 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v12;
    *(void *)(v3 + 8) = v13;
    uint64_t v23 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + v10;
    if (v15) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v15, v23 - v15);
    }
  }
  return result;
}

float32x4_t gm::operator*<float,4,4,4>@<Q0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 36);
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 44);
  uint64_t v8 = *(void *)(a2 + 52);
  uint64_t v9 = *(void *)(a2 + 56);
  float v10 = *(float *)(a2 + 60);
  float32x4_t v11 = *a1;
  float32x4_t v12 = a1[1];
  float32x4_t v13 = a1[2];
  float32x4_t v14 = a1[3];
  float32x4_t v15 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)(a2 + 16))), v12, COERCE_FLOAT(*(_OWORD *)(a2 + 20))), v13, COERCE_FLOAT(*(_OWORD *)(a2 + 24))), v14, COERCE_FLOAT(*(_OWORD *)(a2 + 28)));
  *a3 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2)), v12, COERCE_FLOAT(*(_OWORD *)(a2 + 4))), v13, COERCE_FLOAT(*(_OWORD *)(a2 + 8))), v14, COERCE_FLOAT(*(_OWORD *)(a2 + 12)));
  a3[1] = v15;
  float32x4_t result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, *(float *)&v3), v12, *(float *)&v5), v13, *(float *)&v6), v14, *(float *)&v7);
  a3[2] = result;
  a3[3] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, *(float *)&v4), v12, *(float *)&v8), v13, *(float *)&v9), v14, v10);
  return result;
}

void std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::~__func()
{
}

__n128 std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EF57A970;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A970;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::operator()(uint64_t result, uint64_t *a2)
{
  if (*(void *)(*a2 + 40) == **(void **)(result + 8))
  {
    uint64_t v2 = *(void *)(result + 16);
    uint64_t v4 = *a2;
    uint64_t v3 = *(void *)(v2 + 24);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec21forEachEdgeOnJunctionERKNSt3__110shared_ptrINS0_10VectorTileEEEPK29GeoCodecsConnectiv"
                     "ityJunctionNS1_8functionIFvP17GeoCodecsRoadEdgeEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec21forEachEdgeOnJunctionERKNSt3__110shared_ptrINS0_10VectorTileEEEPK29GeoCode"
                                "csConnectivityJunctionNS1_8functionIFvP17GeoCodecsRoadEdgeEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec21forEachEdgeOnJunctionERKNSt3__110shared_ptrINS0_10VectorTileEEEPK29GeoCodecsConnectivityJunctionNS1_8functionIFvP17GeoCodecsRoadEdgeEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec21forEachEdgeOnJunctionERKNSt3__110shared_ptrINS0_10VectorTileEEEPK29GeoCodecsConnectivityJunctionNS1_8functionIFvP17GeoCodecsRoadEdgeEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::target_type()
{
}

void geo::codec::AssetDecoder::decodeAsset(geo::codec::AssetDecoder *this@<X0>, geo::ibitstream *a2@<X1>, geo::codec::AssetDecoder *a3@<X8>)
{
  float32x4_t v12 = 0;
  float32x4_t v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  BOOL Bytes = geo::ibitstream::readBytes((uint64_t *)this, (uint64_t)&__p, 4uLL);
  uint64_t v8 = __p;
  if (!Bytes)
  {
    if (__p)
    {
      uint64_t v16 = (char *)__p;
      operator delete(__p);
    }
    float v10 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_15;
  }
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v12, (char *)__p, v16, v16 - (unsigned char *)__p);
  if (v8) {
    operator delete(v8);
  }
  if (*(unsigned char *)v12 != 68)
  {
    float32x4_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_20:
    fprintf(v11, "%s:%d Asset Parse: Magic header does not match\n");
    goto LABEL_21;
  }
  if (*((unsigned char *)v12 + 1) != 86)
  {
    float32x4_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_20;
  }
  if (*((unsigned char *)v12 + 2) != 97)
  {
    float32x4_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_20;
  }
  if (*((unsigned char *)v12 + 3) != 115)
  {
    float32x4_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_20;
  }
  geo::ibitstream::readUInt32((uint64_t *)this, (uint64_t)&__p);
  if (!(_BYTE)__p)
  {
    float v10 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_15:
    fprintf(v10, "%s:%d Asset Parse: Read error\n");
    goto LABEL_21;
  }
  unsigned int v9 = HIDWORD(__p);
  *(_DWORD *)a2 = HIDWORD(__p);
  if (v9 > 0x12)
  {
    if (v9 == 19) {
      geo::codec::AssetDecoder::decodeAssetDeprecated(a3, this, (unsigned int *)a2);
    }
    geo::codec::AssetDecoder::decodeAssetV20(a3, this, (unsigned int *)a2);
  }
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d Asset Parse: Non supported version\n");
LABEL_21:
  *(void *)a3 = 0;
  if (v12)
  {
    float32x4_t v13 = v12;
    operator delete(v12);
  }
}

void sub_1A284775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void geo::codec::AssetDecoder::decodeAssetV20(geo::codec::AssetDecoder *this, geo::ibitstream *a2, unsigned int *a3)
{
}

void sub_1A2848D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v14 - 184));
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v14 - 152));
  _Unwind_Resume(a1);
}

void sub_1A2848E90(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1A2848EC0(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1A2848ED4(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1A2848EE8(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1A2848EFC(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1A2848F10(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1A2848F24(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1A2848F38(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void geo::codec::AssetDecoder::decodeAssetDeprecated(geo::codec::AssetDecoder *this, geo::ibitstream *a2, unsigned int *a3)
{
}

void sub_1A284A93C(_Unwind_Exception *a1)
{
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 176));
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 144));
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t geo::ibitstream::readUInt16(uint64_t this, uint64_t *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = a2[2];
  unint64_t v4 = v3 + 2;
  char v5 = *((unsigned char *)a2 + 24);
  unint64_t v6 = v3 + 3;
  if (!v5) {
    unint64_t v6 = v3 + 2;
  }
  if (v2 >= v6)
  {
    uint64_t v7 = *a2;
    if (*((unsigned char *)a2 + 24))
    {
      char v8 = 8 - v5;
      int v9 = (1 << (8 - v5)) + 255;
      int v10 = 0xFFFF << (8 - v5);
      int v11 = *(unsigned __int8 *)(v7 + v3);
      uint64_t v12 = v3 + 1;
      if (v3 + 1 >= v2) {
        int v13 = 0;
      }
      else {
        int v13 = *(unsigned __int8 *)(v7 + v12);
      }
      unsigned int v15 = ((v13 & v10) >> v8) | ((v9 & v11) << v5);
      a2[2] = v12;
      unsigned __int16 v16 = *(unsigned __int8 *)(v7 + v12);
      if (v4 >= v2) {
        int v17 = 0;
      }
      else {
        int v17 = *(unsigned __int8 *)(v7 + v4);
      }
      a2[2] = v4;
      *(unsigned char *)this = 1;
      *(_WORD *)(this + 2) = v15 | (unsigned __int16)(((unsigned __int16)((v17 & v10) >> v8) | (unsigned __int16)(((unsigned __int16)v9 & v16) << v5)) << 8);
    }
    else
    {
      unsigned int v14 = *(unsigned __int16 *)(v7 + v3);
      a2[2] = v4;
      *(unsigned char *)this = 1;
      *(_WORD *)(this + 2) = v14 | (unsigned __int16)((unsigned __int16)(v14 >> 8) << 8);
    }
  }
  else
  {
    *(unsigned char *)this = 0;
  }
  return this;
}

void std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    uint64_t v3 = *(void *)(a1 + 8) - *(void *)a1;
    uint64_t v4 = 16 * a2;
    uint64_t v5 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 16 * a2, 8);
    uint64_t v6 = v5 + v3;
    uint64_t v7 = v5 + v4;
    char v8 = *(void **)a1;
    int v9 = *(void **)(a1 + 8);
    if (v9 == *(void **)a1)
    {
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v6;
      uint64_t v13 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v10 = v5 + v3;
      do
      {
        long long v11 = *((_OWORD *)v9 - 1);
        v9 -= 2;
        *(_OWORD *)(v10 - 16) = v11;
        v10 -= 16;
        *int v9 = 0;
        v9[1] = 0;
      }
      while (v9 != v8);
      int v9 = *(void **)a1;
      uint64_t v12 = *(void **)(a1 + 8);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v6;
      uint64_t v13 = *(void *)(a1 + 16);
      for (*(void *)(a1 + 16) = v7; v12 != v9; v12 -= 2)
      {
        unsigned int v14 = (std::__shared_weak_count *)*(v12 - 1);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    if (v9) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, v13 - (void)v9);
    }
  }
}

uint64_t std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v6 = (uint64_t)v4 - *(void *)result;
  uint64_t v7 = v6 >> 3;
  unint64_t v8 = a2 - (v6 >> 3);
  if (a2 <= v6 >> 3)
  {
    if (a2 >= v6 >> 3) {
      return result;
    }
    unsigned __int16 v16 = (void *)(v5 + 8 * a2);
LABEL_15:
    *(void *)(result + 8) = v16;
    return result;
  }
  uint64_t v9 = *(void *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 3)
  {
    unsigned __int16 v16 = &v4[v8];
    uint64_t v17 = 8 * a2 - 8 * v7;
    do
    {
      if (v4) {
        *uint64_t v4 = 0;
      }
      ++v4;
      v17 -= 8;
    }
    while (v17);
    goto LABEL_15;
  }
  if (a2 >> 61) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v9 - v5;
  unint64_t v11 = (v9 - v5) >> 2;
  if (v11 <= a2) {
    unint64_t v11 = a2;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v12 = v11;
  }
  __n128 result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v12, 2);
  uint64_t v13 = (void *)(result + 8 * v7);
  uint64_t v14 = 8 * a2 - 8 * v7;
  unsigned int v15 = v13;
  do
  {
    if (v15) {
      void *v15 = 0;
    }
    ++v15;
    v14 -= 8;
  }
  while (v14);
  uint64_t v19 = *(void *)v3;
  uint64_t v18 = *(void *)(v3 + 8);
  if (v18 != *(void *)v3)
  {
    unint64_t v20 = v18 - *(void *)v3 - 8;
    if (v20 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v18 - (v6 + result)) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v23 = v18 - v22;
    uint64_t v13 = (void *)((char *)v13 - v22);
    uint64_t v24 = (_OWORD *)(result + 8 * v7 - 16);
    uint64_t v25 = (long long *)(v18 - 16);
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    uint64_t v18 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v28 = *(void *)(v18 - 8);
        v18 -= 8;
        *--uint64_t v13 = v28;
      }
      while (v18 != v19);
    }
    uint64_t v18 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v13;
  *(void *)(v3 + 8) = result + 8 * a2;
  uint64_t v29 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = result + 8 * v12;
  if (v18) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v18, v29 - v18);
  }
  return result;
}

void std::vector<geo::codec::Mesh,geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (geo::codec::Mesh *)a1[1];
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    long long v27 = (geo::codec::Mesh *)(v4 + 152 * a2);
    while (v5 != v27)
    {
      uint64_t v5 = (geo::codec::Mesh *)((char *)v5 - 152);
      geo::codec::Mesh::~Mesh(v5);
    }
LABEL_24:
    a1[1] = (uint64_t)v27;
    return;
  }
  uint64_t v8 = a1[2];
  if (0x86BCA1AF286BCA1BLL * ((v8 - (uint64_t)v5) >> 3) >= v7)
  {
    long long v27 = (geo::codec::Mesh *)((char *)v5 + 152 * v7);
    uint64_t v28 = 152 * a2 - 8 * (((uint64_t)v5 - *a1) >> 3);
    do
    {
      geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>::construct<geo::codec::Mesh>((uint64_t)v5);
      uint64_t v5 = (geo::codec::Mesh *)((char *)v5 + 152);
      v28 -= 152;
    }
    while (v28);
    goto LABEL_24;
  }
  if (a2 > 0x1AF286BCA1AF286) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x86BCA1AF286BCA1BLL * ((v8 - v4) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0xD79435E50D7943) {
    uint64_t v11 = 0x1AF286BCA1AF286;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 152 * v11, 8);
  uint64_t v13 = 152 * v6;
  uint64_t v14 = v12 + 152 * v6;
  unint64_t v15 = v12 + 152 * a2;
  unint64_t v16 = 152 * a2 - v13;
  uint64_t v17 = v14;
  do
  {
    geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>::construct<geo::codec::Mesh>(v17);
    v17 += 152;
    v16 -= 152;
  }
  while (v16);
  uint64_t v18 = v12 + 152 * v11;
  uint64_t v19 = *a1;
  uint64_t v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = v14;
    a1[1] = v15;
    uint64_t v26 = a1[2];
    a1[2] = v18;
    if (!v20) {
      return;
    }
LABEL_26:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v20, v26 - v20);
    return;
  }
  uint64_t v21 = 0;
  do
  {
    uint64_t v22 = v14 + v21;
    uint64_t v23 = v20 + v21;
    *(void *)(v22 - 152) = 0;
    *(void *)(v22 - 144) = 0;
    *(void *)(v22 - 136) = 0;
    *(void *)(v22 - 128) = *(void *)(v20 + v21 - 128);
    *(_OWORD *)(v22 - 152) = *(_OWORD *)(v20 + v21 - 152);
    *(void *)(v22 - 136) = *(void *)(v20 + v21 - 136);
    *(void *)(v23 - 152) = 0;
    *(void *)(v23 - 144) = 0;
    *(void *)(v23 - 136) = 0;
    *(void *)(v22 - 120) = 0;
    *(void *)(v22 - 112) = 0;
    *(void *)(v22 - 104) = 0;
    *(void *)(v22 - 96) = *(void *)(v20 + v21 - 96);
    *(_OWORD *)(v22 - 120) = *(_OWORD *)(v20 + v21 - 120);
    *(void *)(v22 - 104) = *(void *)(v20 + v21 - 104);
    *(void *)(v23 - 120) = 0;
    *(void *)(v23 - 112) = 0;
    *(void *)(v23 - 104) = 0;
    *(void *)(v22 - 88) = 0;
    *(void *)(v22 - 80) = 0;
    *(void *)(v22 - 72) = 0;
    *(void *)(v22 - 64) = *(void *)(v20 + v21 - 64);
    *(_OWORD *)(v22 - 88) = *(_OWORD *)(v20 + v21 - 88);
    *(void *)(v22 - 72) = *(void *)(v20 + v21 - 72);
    *(void *)(v23 - 88) = 0;
    *(void *)(v23 - 80) = 0;
    *(void *)(v23 - 72) = 0;
    *(void *)(v22 - 56) = 0;
    *(void *)(v22 - 48) = 0;
    *(void *)(v22 - 40) = 0;
    *(void *)(v22 - 32) = *(void *)(v20 + v21 - 32);
    *(_OWORD *)(v22 - 56) = *(_OWORD *)(v20 + v21 - 56);
    *(void *)(v22 - 40) = *(void *)(v20 + v21 - 40);
    *(void *)(v23 - 56) = 0;
    *(void *)(v23 - 48) = 0;
    *(void *)(v23 - 40) = 0;
    long long v24 = *(_OWORD *)(v20 + v21 - 24);
    *(void *)(v22 - 8) = *(void *)(v20 + v21 - 8);
    *(_OWORD *)(v22 - 24) = v24;
    v21 -= 152;
  }
  while (v20 + v21 != v19);
  uint64_t v20 = *a1;
  uint64_t v25 = a1[1];
  *a1 = v14 + v21;
  a1[1] = v15;
  uint64_t v26 = a1[2];
  a1[2] = v18;
  while (v25 != v20)
    geo::codec::Mesh::~Mesh((geo::codec::Mesh *)(v25 - 152));
  if (v20) {
    goto LABEL_26;
  }
}

uint64_t buildAssetMesh(geo::ibitstream *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *((unsigned __int8 *)this + 24);
  BOOL v6 = *((unsigned char *)this + 24) != 0;
  unint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *((void *)this + 2);
  unint64_t v9 = v8 + 2;
  if (!*((unsigned char *)this + 24)) {
    unint64_t v9 = v8 + 1;
  }
  if (v7 < v9)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_5:
    fprintf(v10, "%s:%d Asset Parse: Read error\n");
    return 0;
  }
  unint64_t v16 = v8 + 1;
  uint64_t v17 = *(void *)this;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)this + v8);
  if (*((unsigned char *)this + 24))
  {
    if (v16 >= v7) {
      int v19 = 0;
    }
    else {
      int v19 = *(unsigned __int8 *)(v17 + v16);
    }
    unsigned int v18 = ((v19 & (0xFFFF << (8 - v5))) >> (8 - v5)) | ((((1 << (8 - v5)) - 1) & v18) << v5);
  }
  *((void *)this + 2) = v16;
  if (a2)
  {
    unint64_t v20 = v8 + 2;
    if (v7 < v20 + v6)
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    unsigned int v21 = *(unsigned __int8 *)(v17 + v16);
    if (v5)
    {
      if (v20 >= v7) {
        int v22 = 0;
      }
      else {
        int v22 = *(unsigned __int8 *)(v17 + v20);
      }
      unsigned int v21 = ((v22 & (0xFFFF << (8 - v5))) >> (8 - v5)) | ((((1 << (8 - v5)) - 1) & v21) << v5);
    }
    *((void *)this + 2) = v20;
    *(unsigned char *)(a3 + 128) = v21;
  }
  uint64_t v23 = v18;
  if (v18 >= (unint64_t)((a5 - a4) >> 3))
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d Asset Parse: vertex format index exceeds its range\n");
    return 0;
  }
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
  if (!LOBYTE(v82[0]))
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_5;
  }
  float v74 = *((float *)v82 + 1);
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
  if (!LOBYTE(v82[0]))
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_5;
  }
  float v73 = *((float *)v82 + 1);
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
  if (!LOBYTE(v82[0]))
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_5;
  }
  float v72 = *((float *)v82 + 1);
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
  if (!LOBYTE(v82[0]))
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_5;
  }
  float v71 = *((float *)v82 + 1);
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
  if (!LOBYTE(v82[0]))
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_5;
  }
  float v70 = *((float *)v82 + 1);
  Float = geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
  if (!LOBYTE(v82[0]))
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_5;
  }
  uint64_t v25 = (__int16 *)(a4 + 8 * v23);
  __int16 v26 = *v25;
  float v67 = *((float *)v82 + 1);
  if ((*v25 & 8) != 0)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    float v68 = *((float *)v82 + 1);
    Float = geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    float v28 = *((float *)v82 + 1);
    __int16 v26 = *v25;
    float v27 = v68;
  }
  else
  {
    float v27 = -1.0;
    float v28 = 2.0;
    if ((v26 & 2) != 0) {
      float v28 = 2.0 / (float)~(-1 << *(unsigned char *)(a4 + 8 * v23 + 5));
    }
  }
  float v66 = v28;
  float v69 = v27;
  if ((v26 & 0x10) != 0)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    float v64 = *((float *)v82 + 1);
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    float v61 = *((float *)v82 + 1);
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    float v62 = *((float *)v82 + 1);
    Float = geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)v82);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    float v31 = *((float *)v82 + 1);
    __int16 v26 = *v25;
    float v29 = v62;
    float v30 = v64;
  }
  else
  {
    float v29 = 1.0;
    float v30 = 0.0;
    if ((v26 & 4) != 0)
    {
      uint64_t v32 = a4 + 8 * v23;
      float v29 = 1.0 / (float)~(-1 << *(unsigned char *)(v32 + 6));
      float v31 = 1.0 / (float)~(-1 << *(unsigned char *)(v32 + 7));
      float v61 = 0.0;
    }
    else
    {
      float v61 = 0.0;
      float v31 = 1.0;
    }
  }
  float v60 = v31;
  float v63 = v29;
  float v65 = v30;
  if (v26)
  {
    memset(v82, 0, sizeof(v82));
    float v83 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)Float);
    memset(v80, 0, sizeof(v80));
    long long v81 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v83);
    memset(v78, 0, sizeof(v78));
    uint64_t v79 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v81);
    memset(v77, 0, 24);
    v77[3] = geo::codec::Allocator::instance(v79);
    geo::ibitstream::readVarInt((uint64_t)this, (uint64_t)&v75);
    if ((_BYTE)v75)
    {
      uint64_t v56 = *((void *)this + 2);
      if (v76 <= *((void *)this + 1)
                - ((v56 + ((unint64_t)*((unsigned __int8 *)this + 24) >> 3)) & 0x1FFFFFFFFFFFFFFFLL))
        geo::codec::decompressBinaryBlob(*(void *)this + v56, v76, (uint64_t)v82, (uint64_t)v80, (uint64_t)v78, v77);
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d Asset Parse: Asset size overflows the buffer\n");
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d Asset Parse: Read error\n");
    }
    uint64_t v11 = 0;
    long long v75 = v77;
    std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v75);
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](v78);
    std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](v80);
    std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](v82);
  }
  else
  {
    geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, 0x10u);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    if (!WORD2(v82[0]))
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d Asset Parse: Mesh has 0 vertex\n");
      return 0;
    }
    unint64_t v57 = WORD2(v82[0]);
    std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(a3, WORD2(v82[0]));
    float32x4_t v33 = *(float **)a3;
    unint64_t v34 = *(float **)(a3 + 8);
    if (*(float **)a3 != v34)
    {
      float32x4_t v35 = (unsigned __int8 *)(a4 + 8 * v23);
      unint64_t v36 = v35 + 2;
      unint64_t v58 = v35 + 4;
      float32x4x2_t v59 = v35 + 3;
      while (1)
      {
        geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, *v36);
        if (!LOBYTE(v82[0]))
        {
          uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
          goto LABEL_5;
        }
        unsigned int v37 = HIDWORD(v82[0]);
        geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, *v59);
        if (!LOBYTE(v82[0]))
        {
          uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
          goto LABEL_5;
        }
        unsigned int v38 = HIDWORD(v82[0]);
        geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, *v58);
        if (!LOBYTE(v82[0])) {
          break;
        }
        unsigned int v39 = HIDWORD(v82[0]);
        *float32x4_t v33 = v74 + (float)(v71 * (float)v37);
        v33[1] = v73 + (float)(v70 * (float)v38);
        void v33[2] = v72 + (float)(v67 * (float)v39);
        v33 += 3;
        if (v33 == v34) {
          goto LABEL_61;
        }
      }
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
LABEL_61:
    if ((*v25 & 2) != 0)
    {
      std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(a3 + 32, v57);
      unint64_t v40 = *(float **)(a3 + 32);
      float32x4_t v41 = *(float **)(a3 + 40);
      if (v40 != v41)
      {
        uint64_t v42 = (unsigned __int8 *)(a4 + 8 * v23 + 5);
        while (1)
        {
          geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, *v42);
          if (!LOBYTE(v82[0]))
          {
            uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
            goto LABEL_5;
          }
          unsigned int v43 = HIDWORD(v82[0]);
          geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, *v42);
          if (!LOBYTE(v82[0]))
          {
            uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
            goto LABEL_5;
          }
          unsigned int v44 = HIDWORD(v82[0]);
          geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, *v42);
          if (!LOBYTE(v82[0])) {
            break;
          }
          unsigned int v45 = HIDWORD(v82[0]);
          float *v40 = v69 + (float)(v66 * (float)v43);
          v40[1] = v69 + (float)(v66 * (float)v44);
          void v40[2] = v69 + (float)(v66 * (float)v45);
          v40 += 3;
          if (v40 == v41) {
            goto LABEL_68;
          }
        }
        uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
        goto LABEL_5;
      }
    }
LABEL_68:
    if ((*v25 & 4) != 0)
    {
      std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::resize(a3 + 64, v57);
      unint64_t v46 = *(float **)(a3 + 64);
      float32x2_t v47 = *(float **)(a3 + 72);
      if (v46 != v47)
      {
        uint64_t v48 = a4 + 8 * v23;
        float v49 = (unsigned __int8 *)(v48 + 6);
        uint64_t v50 = (unsigned __int8 *)(v48 + 7);
        while (1)
        {
          geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, *v49);
          if (!LOBYTE(v82[0]))
          {
            uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
            goto LABEL_5;
          }
          unsigned int v51 = HIDWORD(v82[0]);
          geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, *v50);
          if (!LOBYTE(v82[0])) {
            break;
          }
          float v52 = v61 + (float)(v60 * (float)HIDWORD(v82[0]));
          float *v46 = v65 + (float)(v63 * (float)v51);
          v46[1] = v52;
          v46 += 2;
          if (v46 == v47) {
            goto LABEL_74;
          }
        }
        uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
        goto LABEL_5;
      }
    }
LABEL_74:
    geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, 8u);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    unsigned __int8 v53 = BYTE4(v82[0]);
    geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, 0x20u);
    if (!LOBYTE(v82[0]))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
    if (!HIDWORD(v82[0]))
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d Asset Parse: Mesh has 0 index\n");
      return 0;
    }
    std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize((void *)(a3 + 96), HIDWORD(v82[0]));
    uint64_t v54 = *(_WORD **)(a3 + 96);
    uint64_t v55 = *(_WORD **)(a3 + 104);
    if (v54 != v55)
    {
      while (1)
      {
        geo::ibitstream::unpack32((uint64_t)v82, (uint64_t *)this, v53);
        if (!LOBYTE(v82[0])) {
          break;
        }
        *v54++ = WORD2(v82[0]);
        if (v54 == v55) {
          goto LABEL_80;
        }
      }
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_5;
    }
LABEL_80:
    if (*((unsigned char *)this + 24))
    {
      *((unsigned char *)this + 24) = 0;
      ++*((void *)this + 2);
    }
    return 1;
  }
  return v11;
}

void sub_1A284C25C(_Unwind_Exception *a1)
{
  *(void *)(v1 - 232) = v1 - 216;
  std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)(v1 - 232));
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 184));
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 152));
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v6 = (uint64_t)v4 - *(void *)result;
  uint64_t v7 = v6 >> 3;
  unint64_t v8 = a2 - (v6 >> 3);
  if (a2 <= v6 >> 3)
  {
    if (a2 >= v6 >> 3) {
      return result;
    }
    unint64_t v16 = (void *)(v5 + 8 * a2);
LABEL_15:
    *(void *)(result + 8) = v16;
    return result;
  }
  uint64_t v9 = *(void *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 3)
  {
    unint64_t v16 = &v4[v8];
    uint64_t v17 = 8 * a2 - 8 * v7;
    do
    {
      if (v4) {
        *uint64_t v4 = 0;
      }
      ++v4;
      v17 -= 8;
    }
    while (v17);
    goto LABEL_15;
  }
  if (a2 >> 61) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v9 - v5;
  unint64_t v11 = (v9 - v5) >> 2;
  if (v11 <= a2) {
    unint64_t v11 = a2;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v12 = v11;
  }
  __n128 result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v12, 8);
  uint64_t v13 = (void *)(result + 8 * v7);
  uint64_t v14 = 8 * a2 - 8 * v7;
  unint64_t v15 = v13;
  do
  {
    if (v15) {
      void *v15 = 0;
    }
    ++v15;
    v14 -= 8;
  }
  while (v14);
  uint64_t v18 = *(void *)v3;
  uint64_t v19 = *(void *)(v3 + 8);
  if (v19 != *(void *)v3)
  {
    unint64_t v20 = v19 - *(void *)v3 - 8;
    if (v20 < 0x58) {
      goto LABEL_33;
    }
    if ((unint64_t)(v19 - (v6 + result)) < 0x20) {
      goto LABEL_33;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v23 = v19 - v22;
    uint64_t v13 = (void *)((char *)v13 - v22);
    long long v24 = (_OWORD *)(result + 8 * v7 - 16);
    uint64_t v25 = (long long *)(v19 - 16);
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    uint64_t v19 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_33:
      do
      {
        uint64_t v28 = *(void *)(v19 - 8);
        v19 -= 8;
        *--uint64_t v13 = v28;
      }
      while (v19 != v18);
    }
  }
  *(void *)uint64_t v3 = v13;
  *(void *)(v3 + 8) = result + 8 * a2;
  uint64_t v29 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = result + 8 * v12;
  if (v18) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v18, v29 - v18);
  }
  return result;
}

geo::codec::MaterialSheet *geo::codec::MaterialSheet::MaterialSheet(geo::codec::MaterialSheet *this)
{
  *(_WORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + 72) = 1065353216;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_DWORD *)this + 82) = 1065353216;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 1065353216;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 102) = 1065353216;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 1065353216;
  *((_WORD *)this + 228) = 0;
  *(_OWORD *)((char *)this + 460) = 0u;
  *(_OWORD *)((char *)this + 476) = 0u;
  *((_DWORD *)this + 123) = 0;
  *((_DWORD *)this + 124) = 1065353216;
  *((void *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((void *)this + 67) = geo::codec::Allocator::instance(this);
  return this;
}

void std::vector<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator>>::emplace_back<std::pair<unsigned long long,geo::codec::MaterialSheet>>(uint64_t *a1, geo::codec::MaterialSheet *a2)
{
  uint64_t v5 = (void *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xF128CFC4A33F128DLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x76B981DAE6076BLL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xF128CFC4A33F128DLL * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x3B5CC0ED7303B5) {
      uint64_t v10 = 0x76B981DAE6076BLL;
    }
    else {
      uint64_t v10 = v9;
    }
    unint64_t v20 = a1 + 3;
    if (v10)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 552 * v10, 8);
      uint64_t v12 = (void *)(v11 + 552 * v7);
      uint64_t v19 = v11 + 552 * v10;
      if (v11)
      {
        *uint64_t v12 = *(void *)a2;
        geo::codec::MaterialSheet::MaterialSheet((geo::codec::MaterialSheet *)(v11 + 552 * v7 + 8), (geo::codec::MaterialSheet *)((char *)a2 + 8));
        uint64_t v6 = v12 + 69;
        uint64_t v18 = v12 + 69;
        uint64_t v13 = *a1;
        uint64_t v14 = a1[1];
        if (v14 != *a1) {
          goto LABEL_14;
        }
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v12 = (void *)(8 * (((uint64_t)v5 - *a1) >> 3));
      uint64_t v19 = 0;
    }
    uint64_t v6 = v12 + 69;
    uint64_t v18 = v12 + 69;
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    if (v14 != *a1)
    {
LABEL_14:
      unint64_t v15 = 0;
      do
      {
        v12[v15 / 8 - 69] = *(void *)(v14 + v15 - 552);
        geo::codec::MaterialSheet::MaterialSheet((geo::codec::MaterialSheet *)&v12[v15 / 8 - 68], (const geo::codec::MaterialSheet *)(v14 + v15 - 544));
        v15 -= 552;
      }
      while (v14 + v15 != v13);
      uint64_t v16 = *a1;
      uint64_t v14 = a1[1];
      uint64_t v12 = (void *)((char *)v12 + v15);
      uint64_t v6 = v18;
LABEL_20:
      *a1 = (uint64_t)v12;
      a1[1] = (uint64_t)v6;
      uint64_t v17 = a1[2];
      a1[2] = v19;
      if (v14 == v16)
      {
        uint64_t v16 = v14;
        if (!v14) {
          goto LABEL_26;
        }
      }
      else
      {
        do
        {
          geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(v14 - 544));
          v14 -= 552;
        }
        while (v14 != v16);
        if (!v16) {
          goto LABEL_26;
        }
      }
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v20 + 40))(*v20, v16, v17 - v16);
      goto LABEL_26;
    }
LABEL_19:
    uint64_t v16 = v14;
    goto LABEL_20;
  }
  if (v5)
  {
    *uint64_t v5 = *(void *)a2;
    geo::codec::MaterialSheet::MaterialSheet((geo::codec::MaterialSheet *)(v5 + 1), (geo::codec::MaterialSheet *)((char *)a2 + 8));
  }
  uint64_t v6 = v5 + 69;
  a1[1] = (uint64_t)(v5 + 69);
LABEL_26:
  a1[1] = (uint64_t)v6;
}

void sub_1A284C7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A284C7EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A284C7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  for (; v3; v3 += 552)
    geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(v2 + 8 + v3));
  std::__split_buffer<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::emplace_back<std::shared_ptr<geo::codec::AssetLodInstance>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(_OWORD **)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
    {
      *unint64_t v4 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    uint64_t v6 = (uint64_t)(v4 + 1);
    goto LABEL_26;
  }
  uint64_t v7 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 60) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v5 - *(void *)a1;
  if (v9 >> 3 > v8) {
    unint64_t v8 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    uint64_t v10 = 16 * v8;
    uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 16 * v8, 8);
    uint64_t v12 = (_OWORD *)(v11 + 16 * v7);
    unint64_t v8 = v11 + v10;
    if (v11)
    {
      *uint64_t v12 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    uint64_t v6 = (uint64_t)(v12 + 1);
    uint64_t v13 = *(void **)a1;
    uint64_t v14 = *(void **)(a1 + 8);
    if (v14 == *(void **)a1) {
      goto LABEL_23;
    }
    do
    {
LABEL_16:
      long long v15 = *((_OWORD *)v14 - 1);
      v14 -= 2;
      *--uint64_t v12 = v15;
      *uint64_t v14 = 0;
      v14[1] = 0;
    }
    while (v14 != v13);
    uint64_t v14 = *(void **)a1;
    uint64_t v16 = *(void **)(a1 + 8);
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v6;
    uint64_t v17 = *(void *)(a1 + 16);
    for (*(void *)(a1 + 16) = v8; v16 != v14; v16 -= 2)
    {
      uint64_t v18 = (std::__shared_weak_count *)*(v16 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    goto LABEL_24;
  }
  uint64_t v12 = (_OWORD *)(16 * v7);
  uint64_t v6 = 16 * v7 + 16;
  uint64_t v13 = *(void **)a1;
  uint64_t v14 = *(void **)(a1 + 8);
  if (v14 != *(void **)a1) {
    goto LABEL_16;
  }
LABEL_23:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v6;
  uint64_t v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8;
LABEL_24:
  if (v14) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14, v17 - (void)v14);
  }
LABEL_26:
  *(void *)(a1 + 8) = v6;
}

geo::codec::AssetLodInstance *_ZNSt3__111make_sharedB8ne180100IN3geo5codec16AssetLodInstanceEJEvEENS_10shared_ptrIT_EEDpOT0_(geo::codec::AssetLodInstance **a1)
{
  uint64_t v2 = (char *)operator new(0x1B8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EF582F60;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  __n128 result = geo::codec::AssetLodInstance::AssetLodInstance((geo::codec::AssetLodInstance *)(v2 + 24));
  *a1 = result;
  a1[1] = (geo::codec::AssetLodInstance *)v2;
  return result;
}

void *std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::resize(void *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = (v3 - *result) >> 5;
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (void *)std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::__append((uint64_t)result, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *result + 32 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = result[1];
      do
      {
        uint64_t v10 = *(void *)(v8 - 32);
        v8 -= 32;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 24) = v9;
          __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 8) + 40))(*(void *)(v3 - 8), v9, *(void *)(v3 - 16) - v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    v2[1] = v7;
  }
  return result;
}

void *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(void *result, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(result[1] - *result) >> 1;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3) {
    return (void *)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__append((uint64_t)result, v4);
  }
  if (!v3) {
    result[1] = *result + 2 * a2;
  }
  return result;
}

void std::vector<geo::codec::ModelNode,geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = 0x8E38E38E38E38E39 * ((v5 - *(void *)a1) >> 4);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    uint64_t v28 = v4 + 144 * a2;
    while (v5 != v28)
    {
      v5 -= 144;
      geo::codec::ModelNode::~ModelNode((geo::codec::ModelNode *)v5);
    }
LABEL_16:
    *(void *)(v3 + 8) = v28;
    return;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (0x8E38E38E38E38E39 * ((v8 - v5) >> 4) >= v7)
  {
    uint64_t v28 = v5 + 144 * v7;
    uint64_t v29 = 144 * a2 - 16 * ((v5 - *(void *)a1) >> 4);
    __asm { FMOV            V0.4S, #1.0 }
    long long v44 = _Q0;
    do
    {
      if (v5)
      {
        *(_OWORD *)(v5 + 112) = 0u;
        *(_OWORD *)(v5 + 128) = 0u;
        *(_OWORD *)(v5 + 80) = 0u;
        *(_OWORD *)(v5 + 96) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)uint64_t v5 = 0u;
        float v31 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
        *(void *)(v5 + 24) = v31;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        uint64_t v32 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v31);
        *(void *)(v5 + 56) = v32;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 80) = 0;
        a1 = geo::codec::Allocator::instance(v32);
        *(void *)(v5 + 88) = a1;
        *(void *)(v5 + 96) = 0;
        *(void *)(v5 + 104) = 0;
        *(void *)(v5 + 112) = 0;
        *(_OWORD *)(v5 + 120) = v44;
      }
      v5 += 144;
      v29 -= 144;
    }
    while (v29);
    goto LABEL_16;
  }
  if (a2 > 0x1C71C71C71C71C7) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - v4) >> 4);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0xE38E38E38E38E3) {
    uint64_t v11 = 0x1C71C71C71C71C7;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = 144 * v11;
  uint64_t v13 = (geo::codec::Allocator *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 144 * v11, 8);
  uint64_t v14 = v13;
  uint64_t v15 = 144 * v6;
  uint64_t v16 = (char *)v13 + 144 * v6;
  uint64_t v17 = (char *)v13 + v12;
  uint64_t v42 = (char *)v13 + 144 * a2;
  __asm { FMOV            V0.4S, #1.0 }
  long long v43 = _Q0;
  do
  {
    long long v24 = (_OWORD *)((char *)v14 + v15);
    if ((geo::codec::Allocator *)((char *)v14 + v15))
    {
      v24[7] = 0u;
      v24[8] = 0u;
      v24[5] = 0u;
      v24[6] = 0u;
      void v24[3] = 0u;
      v24[4] = 0u;
      v24[1] = 0u;
      v24[2] = 0u;
      _OWORD *v24 = 0u;
      uint64_t v25 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v13);
      uint64_t v26 = (void *)((char *)v14 + v15);
      void v26[3] = v25;
      float v26[4] = 0;
      v26[5] = 0;
      v26[6] = 0;
      long long v27 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v25);
      v26[7] = v27;
      v26[8] = 0;
      v26[9] = 0;
      v26[10] = 0;
      uint64_t v13 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v27);
      uint64_t v23 = (char *)v14 + v15;
      *((void *)v23 + 11) = v13;
      *((void *)v23 + 12) = 0;
      *((void *)v23 + 13) = 0;
      *((void *)v23 + 14) = 0;
      *(_OWORD *)(v23 + 120) = v43;
    }
    v15 += 144;
  }
  while (144 * a2 != v15);
  uint64_t v33 = *(void *)v3;
  uint64_t v34 = *(void *)(v3 + 8);
  if (v34 == *(void *)v3)
  {
    *(void *)uint64_t v3 = v16;
    *(void *)(v3 + 8) = v42;
    uint64_t v41 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v17;
    if (!v34) {
      return;
    }
    goto LABEL_29;
  }
  uint64_t v35 = 0;
  do
  {
    std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector((uint64_t *)&v16[v35 - 144], (uint64_t *)(v34 + v35 - 144));
    std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector((uint64_t *)&v16[v35 - 112], (uint64_t *)(v34 + v35 - 112));
    unint64_t v36 = &v16[v35];
    std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector((uint64_t *)&v16[v35 - 80], (uint64_t *)(v34 + v35 - 80));
    uint64_t v37 = *(void *)(v34 + v35 - 48);
    *((_DWORD *)v36 - 10) = *(_DWORD *)(v34 + v35 - 40);
    *((void *)v36 - 6) = v37;
    uint64_t v38 = *(void *)(v34 + v35 - 36);
    *((_DWORD *)v36 - 7) = *(_DWORD *)(v34 + v35 - 28);
    *(void *)(v36 - 36) = v38;
    *((_DWORD *)v36 - 6) = *(_DWORD *)(v34 + v35 - 24);
    uint64_t v39 = *(void *)(v34 + v35 - 20);
    *((_DWORD *)v36 - 3) = *(_DWORD *)(v34 + v35 - 12);
    *(void *)(v36 - 20) = v39;
    LOWORD(v39) = *(_WORD *)(v34 + v35 - 8);
    *(v36 - 6) = *(unsigned char *)(v34 + v35 - 6);
    *((_WORD *)v36 - 4) = v39;
    v35 -= 144;
  }
  while (v34 + v35 != v33);
  uint64_t v34 = *(void *)v3;
  uint64_t v40 = *(void *)(v3 + 8);
  *(void *)uint64_t v3 = &v16[v35];
  uint64_t v41 = *(void *)(v3 + 16);
  *(void *)(v3 + 8) = v42;
  *(void *)(v3 + 16) = v17;
  while (v40 != v34)
    geo::codec::ModelNode::~ModelNode((geo::codec::ModelNode *)(v40 - 144));
  if (v34) {
LABEL_29:
  }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v34, v41 - v34);
}

uint64_t std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::unordered_map[abi:ne180100](uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  unint64_t v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = geo::codec::Allocator::instance(v2);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  return a1;
}

uint64_t buildLocalTransformMatrix(unint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4, void *a5, uint64_t a6, char a7)
{
  uint64_t result = 0;
  long long v9 = *(_OWORD *)(a6 + 16);
  float32x4_t v118 = *(float32x4_t *)a6;
  long long v119 = v9;
  long long v10 = *(_OWORD *)(a6 + 48);
  long long v120 = *(_OWORD *)(a6 + 32);
  long long v121 = v10;
  if (!a5) {
    return result;
  }
  uint64_t v11 = (uint64_t)a4;
  uint64_t v13 = *a4;
  if (0x8E38E38E38E38E39 * ((a4[1] - *a4) >> 4) < a3) {
    return result;
  }
  uint64_t v14 = a5;
  uint64_t v16 = v13 + 144 * a3;
  uint64_t v17 = (unsigned char *)(v16 + 138);
  uint64_t v110 = *a4;
  if (*(unsigned char *)(v16 + 138))
  {
    uint64_t v18 = v13 + 144 * a3;
    float v19 = *(float *)(v18 + 108);
    float v20 = *(float *)(v18 + 112);
    float v21 = *(float *)(v18 + 116);
    float v22 = *(float *)(v18 + 120);
    float v23 = v20 + v20;
    float v24 = (float)(v20 + v20) * v20;
    float v25 = (float)(v21 + v21) * v21;
    float v26 = v19 + v19;
    float v27 = (float)(v19 + v19) * v20;
    float v28 = (float)(v21 + v21) * v22;
    float v29 = v21 * (float)(v19 + v19);
    float v30 = v22 * v23;
    float v31 = (float)(v22 * v23) + v29;
    float v32 = 1.0 - (float)((float)(v19 + v19) * v19);
    float v33 = v23 * v21;
    float v34 = v22 * v26;
    *(float *)unint64_t v116 = 1.0 - (float)(v24 + v25);
    *(float *)&v116[4] = v28 + v27;
    *(float *)&v116[16] = v27 - v28;
    *(float *)&v116[20] = v32 - v25;
    *(float *)&v116[32] = v31;
    *(float *)&v116[36] = v33 - v34;
    *(float *)&v116[8] = v29 - v30;
    *(void *)&v116[24] = COERCE_UNSIGNED_INT(v34 + v33);
    *(float *)&v116[40] = v32 - v24;
    *(_DWORD *)&v116[12] = 0;
    *(_DWORD *)&v116[44] = 0;
    *(void *)&v116[48] = *(void *)(v18 + 96);
    *(_DWORD *)&v116[56] = *(_DWORD *)(v18 + 104);
    *(_DWORD *)&v116[60] = 1065353216;
    long long v124 = 0u;
    long long v125 = 0u;
    uint64_t v126 = 0;
    long long v123 = 0u;
    int v127 = 1065353216;
    int v122 = *(_DWORD *)(v18 + 124);
    LODWORD(v124) = *(_DWORD *)(v18 + 128);
    DWORD1(v125) = *(_DWORD *)(v18 + 132);
    gm::operator*<float,4,4,4>((float32x4_t *)v116, (uint64_t)&v122, v117);
    gm::operator*<float,4,4,4>(&v118, (uint64_t)v117, (float32x4_t *)v116);
    float32x4_t v118 = *(float32x4_t *)v116;
    long long v119 = *(_OWORD *)&v116[16];
    long long v120 = *(_OWORD *)&v116[32];
    long long v121 = *(_OWORD *)&v116[48];
  }
  else if (a7)
  {
    uint64_t v35 = 1;
    uint64_t v36 = v110 + 144 * a3;
    uint64_t v37 = *(void *)(v36 + 64);
    uint64_t v38 = *(void *)(v36 + 72);
    if (v37 != v38) {
      goto LABEL_136;
    }
    return 1;
  }
  uint64_t v40 = *(unsigned __int16 **)v16;
  uint64_t v39 = *(unsigned __int16 **)(v16 + 8);
  while (v40 != v39)
  {
    unsigned __int16 v41 = *v40++;
    *(_WORD *)unint64_t v116 = v41;
    *(float32x4_t *)&v116[4] = v118;
    *(_OWORD *)&v116[20] = v119;
    *(_OWORD *)&v116[36] = v120;
    *(_OWORD *)&v116[52] = v121;
    std::__hash_table<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,gm::Matrix<float,4,4>>>(a1, v41, (uint64_t)v116);
  }
  uint64_t v42 = v110 + 144 * a3;
  long long v43 = *(unsigned __int16 **)(v42 + 32);
  float v112 = *(unsigned __int16 **)(v42 + 40);
  if (v43 == v112)
  {
    uint64_t v35 = 0;
    uint64_t v107 = v110 + 144 * a3;
    uint64_t v37 = *(void *)(v107 + 64);
    uint64_t v38 = *(void *)(v107 + 72);
    if (v37 != v38) {
      goto LABEL_136;
    }
    return 1;
  }
  unsigned int v108 = a3;
  uint64_t v109 = v11;
  char v114 = (__int16 *)(v110 + 144 * a3 + 136);
  uint64_t v115 = a2 + 3;
  float v111 = v14;
  while (2)
  {
    unint64_t v113 = v43;
    uint64_t v44 = *v14 + 32 * *v43;
    unsigned int v45 = *(_WORD **)v44;
    unint64_t v46 = *(_WORD **)(v44 + 8);
    if (*(_WORD **)v44 == v46) {
      goto LABEL_12;
    }
    do
    {
      while (1)
      {
        while (1)
        {
          unint64_t v47 = (unsigned __int16)*v45;
          if ((*v17 & 8) != 0) {
            break;
          }
          *(_WORD *)unint64_t v116 = *v45;
          *(float32x4_t *)&v116[4] = v118;
          *(_OWORD *)&v116[20] = v119;
          *(_OWORD *)&v116[36] = v120;
          *(_OWORD *)&v116[52] = v121;
          std::__hash_table<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,gm::Matrix<float,4,4>>>(a1, v47, (uint64_t)v116);
          if (++v45 == v46) {
            goto LABEL_12;
          }
        }
        unint64_t v48 = a2[1];
        if (v48)
        {
          uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
          v49.i16[0] = vaddlv_u8(v49);
          if (v49.u32[0] > 1uLL)
          {
            uint64_t v11 = (unsigned __int16)*v45;
            if (v48 <= v47) {
              uint64_t v11 = v47 % v48;
            }
          }
          else
          {
            uint64_t v11 = (v48 - 1) & v47;
          }
          uint64_t v50 = *(uint64_t **)(*a2 + 8 * v11);
          if (v50)
          {
            uint64_t v51 = *v50;
            if (*v50) {
              break;
            }
          }
        }
LABEL_37:
        uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[4] + 16))(a2[4], 56, 8);
        *(void *)uint64_t v51 = 0;
        *(void *)(v51 + 8) = v47;
        *(_WORD *)(v51 + 16) = v47;
        *(void *)(v51 + 32) = 0;
        *(void *)(v51 + 40) = 0;
        *(void *)(v51 + 24) = 0;
        {
          operator new();
        }
        *(void *)(v51 + 48) = geo::codec::Allocator::instance(void)::alloc;
        float v54 = (float)(unint64_t)(a2[5] + 1);
        float v55 = *((float *)a2 + 12);
        if (!v48 || (float)(v55 * (float)v48) < v54)
        {
          BOOL v57 = (v48 & (v48 - 1)) != 0;
          if (v48 < 3) {
            BOOL v57 = 1;
          }
          unint64_t v58 = v57 | (2 * v48);
          unint64_t v59 = vcvtps_u32_f32(v54 / v55);
          if (v58 <= v59) {
            size_t prime = v59;
          }
          else {
            size_t prime = v58;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
          }
          unint64_t v48 = a2[1];
          if (prime <= v48)
          {
            if (prime >= v48) {
              goto LABEL_106;
            }
            unint64_t v71 = vcvtps_u32_f32((float)(unint64_t)a2[5] / *((float *)a2 + 12));
            if (v48 < 3 || (uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v72.i16[0] = vaddlv_u8(v72), v72.u32[0] > 1uLL))
            {
              unint64_t v71 = std::__next_prime(v71);
            }
            else
            {
              uint64_t v73 = 1 << -(char)__clz(v71 - 1);
              if (v71 >= 2) {
                unint64_t v71 = v73;
              }
            }
            if (prime <= v71) {
              size_t prime = v71;
            }
            if (prime >= v48)
            {
              unint64_t v48 = a2[1];
              if ((v48 & (v48 - 1)) != 0) {
                goto LABEL_119;
              }
              goto LABEL_107;
            }
            if (!prime)
            {
              uint64_t v96 = *a2;
              *a2 = 0;
              if (v96) {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[2] + 40))(a2[2], v96, 8 * a2[1]);
              }
              unint64_t v48 = 0;
              a2[1] = 0;
              goto LABEL_107;
            }
          }
          uint64_t v61 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)a2[2] + 16))(a2[2], 8 * prime, 8);
          uint64_t v62 = *a2;
          *a2 = v61;
          if (v62) {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[2] + 40))(a2[2], v62, 8 * a2[1]);
          }
          uint64_t v63 = 0;
          a2[1] = prime;
          do
            *(void *)(*a2 + 8 * v63++) = 0;
          while (prime != v63);
          float v64 = (void *)*v115;
          if (!*v115)
          {
LABEL_118:
            unint64_t v48 = prime;
            if ((prime & (prime - 1)) != 0)
            {
LABEL_119:
              if (v48 <= v47)
              {
                uint64_t v11 = v47 % v48;
                uint64_t v56 = *(uint64_t **)(*a2 + 8 * (v47 % v48));
                if (!v56) {
                  goto LABEL_108;
                }
              }
              else
              {
                uint64_t v11 = v47;
                uint64_t v56 = *(uint64_t **)(*a2 + 8 * v47);
                if (!v56) {
                  goto LABEL_108;
                }
              }
              goto LABEL_41;
            }
LABEL_107:
            uint64_t v11 = (v48 - 1) & v47;
            uint64_t v56 = *(uint64_t **)(*a2 + 8 * v11);
            if (!v56) {
              goto LABEL_108;
            }
LABEL_41:
            *(void *)uint64_t v51 = *v56;
            uint64_t v11 = 68;
            goto LABEL_127;
          }
          size_t v65 = v64[1];
          size_t v66 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v67 = v65 & v66;
            *(void *)(*a2 + 8 * v67) = v115;
            for (uint64_t i = (void *)*v64; *v64; uint64_t i = (void *)*v64)
            {
              size_t v69 = i[1] & v66;
              if (v69 == v67)
              {
                float v64 = i;
              }
              else if (*(void *)(*a2 + 8 * v69))
              {
                void *v64 = *i;
                uint64_t v70 = 8 * v69;
                *uint64_t i = **(void **)(*a2 + v70);
                **(void **)(*a2 + v70) = i;
              }
              else
              {
                *(void *)(*a2 + 8 * v69) = v64;
                float v64 = i;
                size_t v67 = v69;
              }
            }
            goto LABEL_118;
          }
          if (v65 < prime)
          {
            *(void *)(*a2 + 8 * v65) = v115;
            float v74 = (void *)*v64;
            if (*v64) {
              goto LABEL_113;
            }
            goto LABEL_105;
          }
          v65 %= prime;
          *(void *)(*a2 + 8 * v65) = v115;
          float v74 = (void *)*v64;
          if (!*v64)
          {
LABEL_105:
            unint64_t v48 = prime;
LABEL_106:
            if ((v48 & (v48 - 1)) != 0) {
              goto LABEL_119;
            }
            goto LABEL_107;
          }
          while (1)
          {
LABEL_113:
            size_t v99 = v74[1];
            if (v99 >= prime) {
              v99 %= prime;
            }
            if (v99 == v65) {
              goto LABEL_112;
            }
            if (*(void *)(*a2 + 8 * v99))
            {
              void *v64 = *v74;
              uint64_t v98 = 8 * v99;
              *float v74 = **(void **)(*a2 + v98);
              **(void **)(*a2 + v98) = v74;
              float v74 = v64;
LABEL_112:
              float v64 = v74;
              float v74 = (void *)*v74;
              if (!v74) {
                goto LABEL_118;
              }
            }
            else
            {
              *(void *)(*a2 + 8 * v99) = v64;
              float v64 = v74;
              float v74 = (void *)*v74;
              size_t v65 = v99;
              if (!v74) {
                goto LABEL_118;
              }
            }
          }
        }
        uint64_t v56 = *(uint64_t **)(*a2 + 8 * v11);
        if (v56) {
          goto LABEL_41;
        }
LABEL_108:
        *(void *)uint64_t v51 = a2[3];
        a2[3] = v51;
        *(void *)(*a2 + 8 * v11) = v115;
        uint64_t v11 = 68;
        if (!*(void *)v51) {
          goto LABEL_128;
        }
        unint64_t v97 = *(void *)(*(void *)v51 + 8);
        if ((v48 & (v48 - 1)) != 0)
        {
          if (v97 >= v48) {
            v97 %= v48;
          }
        }
        else
        {
          v97 &= v48 - 1;
        }
        uint64_t v56 = (uint64_t *)(*a2 + 8 * v97);
LABEL_127:
        uint64_t *v56 = v51;
LABEL_128:
        ++a2[5];
        unint64_t v75 = *(void *)(v51 + 32);
        unint64_t v76 = *(void *)(v51 + 40);
        if (v75 < v76) {
          goto LABEL_129;
        }
LABEL_76:
        uint64_t v77 = *(void *)(v51 + 24);
        unint64_t v78 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v75 - v77) >> 2);
        unint64_t v79 = v78 + 1;
        if (v78 + 1 > 0x3C3C3C3C3C3C3C3) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v80 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v76 - v77) >> 2);
        if (2 * v80 > v79) {
          unint64_t v79 = 2 * v80;
        }
        if (v80 >= 0x1E1E1E1E1E1E1E1) {
          unint64_t v79 = 0x3C3C3C3C3C3C3C3;
        }
        if (v79)
        {
          uint64_t v81 = 68 * v79;
          uint64_t v82 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v51 + 48) + 16))(*(void *)(v51 + 48), 68 * v79, 4);
          uint64_t v83 = v82 + 68 * v78;
          unint64_t v79 = v82 + v81;
          if (v82)
          {
            __int16 v84 = *v114;
            float32x4_t v85 = v118;
            long long v86 = v119;
            long long v87 = v121;
            *(_OWORD *)(v83 + 32) = v120;
            *(_OWORD *)(v83 + 48) = v87;
            *(float32x4_t *)uint64_t v83 = v85;
            *(_OWORD *)(v83 + 16) = v86;
            *(_WORD *)(v82 + 68 * v78 + 64) = v84;
          }
          uint64_t v89 = *(void *)(v51 + 24);
          uint64_t v88 = *(void *)(v51 + 32);
          uint64_t v90 = v82 + 68 * v78;
          if (v88 != v89)
          {
            do
            {
LABEL_87:
              *(_OWORD *)(v90 - 68) = *(_OWORD *)(v88 - 68);
              long long v91 = *(_OWORD *)(v88 - 52);
              long long v92 = *(_OWORD *)(v88 - 36);
              long long v93 = *(_OWORD *)(v88 - 20);
              *(_DWORD *)(v90 - 4) = *(_DWORD *)(v88 - 4);
              *(_OWORD *)(v90 - 20) = v93;
              *(_OWORD *)(v90 - 36) = v92;
              *(_OWORD *)(v90 - 52) = v91;
              v90 -= 68;
              v88 -= 68;
            }
            while (v88 != v89);
            uint64_t v88 = *(void *)(v51 + 24);
            uint64_t v94 = v83 + 68;
            *(void *)(v51 + 24) = v90;
            *(void *)(v51 + 32) = v83 + 68;
            uint64_t v95 = *(void *)(v51 + 40);
            *(void *)(v51 + 40) = v79;
            if (!v88) {
              goto LABEL_92;
            }
LABEL_91:
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v51 + 48) + 40))(*(void *)(v51 + 48), v88, v95 - v88);
            goto LABEL_92;
          }
        }
        else
        {
          uint64_t v83 = 68 * v78;
          uint64_t v89 = *(void *)(v51 + 24);
          uint64_t v88 = *(void *)(v51 + 32);
          uint64_t v90 = 68 * v78;
          if (v88 != v89) {
            goto LABEL_87;
          }
        }
        uint64_t v94 = v83 + 68;
        *(void *)(v51 + 24) = v90;
        *(void *)(v51 + 32) = v83 + 68;
        uint64_t v95 = *(void *)(v51 + 40);
        *(void *)(v51 + 40) = v79;
        if (v88) {
          goto LABEL_91;
        }
LABEL_92:
        *(void *)(v51 + 32) = v94;
        if (++v45 == v46) {
          goto LABEL_12;
        }
      }
      if (v49.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v53 = *(void *)(v51 + 8);
          if (v53 == v47)
          {
            if (*(unsigned __int16 *)(v51 + 16) == v47) {
              goto LABEL_75;
            }
          }
          else if ((v53 & (v48 - 1)) != v11)
          {
            goto LABEL_37;
          }
          uint64_t v51 = *(void *)v51;
          if (!v51) {
            goto LABEL_37;
          }
        }
      }
      while (1)
      {
        unint64_t v52 = *(void *)(v51 + 8);
        if (v52 == v47) {
          break;
        }
        if (v52 >= v48) {
          v52 %= v48;
        }
        if (v52 != v11) {
          goto LABEL_37;
        }
LABEL_27:
        uint64_t v51 = *(void *)v51;
        if (!v51) {
          goto LABEL_37;
        }
      }
      if (*(unsigned __int16 *)(v51 + 16) != v47) {
        goto LABEL_27;
      }
LABEL_75:
      uint64_t v11 = 68;
      unint64_t v75 = *(void *)(v51 + 32);
      unint64_t v76 = *(void *)(v51 + 40);
      if (v75 >= v76) {
        goto LABEL_76;
      }
LABEL_129:
      if (v75)
      {
        __int16 v100 = *v114;
        float32x4_t v101 = v118;
        long long v102 = v119;
        long long v103 = v121;
        *(_OWORD *)(v75 + 32) = v120;
        *(_OWORD *)(v75 + 48) = v103;
        *(float32x4_t *)unint64_t v75 = v101;
        *(_OWORD *)(v75 + 16) = v102;
        *(_WORD *)(v75 + 64) = v100;
      }
      *(void *)(v51 + 32) = v75 + 68;
      ++v45;
    }
    while (v45 != v46);
LABEL_12:
    long long v43 = v113 + 1;
    uint64_t v14 = v111;
    if (v113 + 1 != v112) {
      continue;
    }
    break;
  }
  uint64_t v35 = 0;
  uint64_t v11 = v109;
  uint64_t v104 = v110 + 144 * v108;
  uint64_t v37 = *(void *)(v104 + 64);
  uint64_t v38 = *(void *)(v104 + 72);
  if (v37 == v38) {
    return 1;
  }
LABEL_136:
  uint64_t v105 = v37 + 2;
  do
  {
    uint64_t result = buildLocalTransformMatrix(a1, a2, *(unsigned __int16 *)(v105 - 2), v11, v14, &v118, v35);
    if (result) {
      BOOL v106 = v105 == v38;
    }
    else {
      BOOL v106 = 1;
    }
    v105 += 2;
  }
  while (!v106);
  return result;
}

void sub_1A284DC70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pthread_rwlock_t *a9, uint64_t a10)
{
  uint64_t v11 = (geo::read_write_lock *)pthread_rwlock_destroy(a9);
  if (v11) {
    geo::read_write_lock::logFailure(v11, (uint64_t)"destruction", v12);
  }
  MEMORY[0x1A6239270](a10, 0x10F1C40DA10AB66);
  __clang_call_terminate(a1);
}

void sub_1A284DCC4(void *a1)
{
}

void sub_1A284DCE8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4)
  {
    *(void *)(v2 + 32) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 48) + 40))(*(void *)(v2 + 48), v4, *(void *)(v2 + 40) - v4);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 32) + 40))(*(void *)(v1 + 32), v2, 56);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::AssetDecoder::applyTransforms(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  if (v2 == *(void *)result || !a2[1]) {
    return result;
  }
  uint64_t v5 = (uint64_t *)result;
  uint64_t v6 = 0;
  long long v43 = (uint64_t *)result;
  while (2)
  {
    unint64_t v8 = a2[1];
    if (!v8) {
      goto LABEL_7;
    }
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = (unsigned __int16)v6;
      if (v8 <= (unsigned __int16)v6) {
        unint64_t v10 = (unsigned __int16)v6 % v8;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & (unsigned __int16)v6;
    }
    uint64_t v11 = *(uint64_t ****)(*a2 + 8 * v10);
    if (!v11) {
      goto LABEL_7;
    }
    uint64_t v12 = *v11;
    if (!*v11) {
      goto LABEL_7;
    }
    unint64_t v13 = v8 - 1;
    if (v9.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v14 = v12[1];
        if (v14 == (uint64_t *)(unsigned __int16)v6)
        {
          if (*((unsigned __int16 *)v12 + 8) == (unsigned __int16)v6) {
            goto LABEL_29;
          }
        }
        else if (((unint64_t)v14 & v13) != v10)
        {
          goto LABEL_7;
        }
        uint64_t v12 = (uint64_t **)*v12;
        if (!v12) {
          goto LABEL_7;
        }
      }
    }
    while (1)
    {
      unint64_t v15 = (unint64_t)v12[1];
      if (v15 == (unsigned __int16)v6) {
        break;
      }
      if (v15 >= v8)
      {
        uint64_t result = v15 / v8;
        v15 %= v8;
      }
      if (v15 != v10) {
        goto LABEL_7;
      }
LABEL_23:
      uint64_t v12 = (uint64_t **)*v12;
      if (!v12) {
        goto LABEL_7;
      }
    }
    if (*((unsigned __int16 *)v12 + 8) != (unsigned __int16)v6) {
      goto LABEL_23;
    }
LABEL_29:
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v16 = (unsigned __int16)v6;
      if (v8 <= (unsigned __int16)v6) {
        unint64_t v16 = (unsigned __int16)v6 % v8;
      }
    }
    else
    {
      unint64_t v16 = (v8 - 1) & (unsigned __int16)v6;
    }
    uint64_t v17 = *(uint64_t ***)(*a2 + 8 * v16);
    if (!v17 || (uint64_t v18 = *v17) == 0) {
LABEL_67:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v9.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v19 = v18[1];
        if (v19 == (unsigned __int16)v6)
        {
          if (*((unsigned __int16 *)v18 + 8) == (unsigned __int16)v6) {
            goto LABEL_41;
          }
        }
        else if ((v19 & v13) != v16)
        {
          goto LABEL_67;
        }
        uint64_t v18 = (uint64_t *)*v18;
        if (!v18) {
          goto LABEL_67;
        }
      }
    }
    while (2)
    {
      unint64_t v31 = v18[1];
      if (v31 != (unsigned __int16)v6)
      {
        if (v31 >= v8) {
          v31 %= v8;
        }
        if (v31 != v16) {
          goto LABEL_67;
        }
        goto LABEL_53;
      }
      if (*((unsigned __int16 *)v18 + 8) != (unsigned __int16)v6)
      {
LABEL_53:
        uint64_t v18 = (uint64_t *)*v18;
        if (!v18) {
          goto LABEL_67;
        }
        continue;
      }
      break;
    }
LABEL_41:
    float v20 = (uint64_t *)(v3 + 152 * v6);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    uint64_t result = v23 & 0xFFFFFFFFFFFFLL | 0xEC89000000000000;
    if (v21 == v22)
    {
      uint64_t v29 = *(unsigned int *)(v3 + 152 * v6 + 148);
      if (v29)
      {
        float v27 = 0;
        unint64_t v30 = 0;
        goto LABEL_61;
      }
    }
    else
    {
      if (v21 - v22 < 0) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v22) >> 2);
      unint64_t v25 = (v24 - 1) >> 6;
      uint64_t v42 = 8 * (v25 + 1);
      float v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
      float v27 = v26;
      if (v24 >= 0x41) {
        unint64_t v28 = (v24 - 1) >> 6;
      }
      else {
        unint64_t v28 = 0;
      }
      v26[v28] = 0;
      if (v24 >= 0x40) {
        bzero(v26, 8 * (v24 >> 6));
      }
      if ((v24 & 0x3F) != 0) {
        v27[v24 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
      }
      uint64_t v29 = *(unsigned int *)(v3 + 152 * v6 + 148);
      if (v29)
      {
        unint64_t v30 = v25 + 1;
        uint64_t v5 = v43;
LABEL_61:
        unsigned int v32 = *(_DWORD *)(v3 + 152 * v6 + 144);
        uint64_t v33 = v20[12];
        do
        {
          unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v32);
          unint64_t v35 = v34 >> 6;
          uint64_t v36 = 1 << v34;
          uint64_t v37 = v27[v34 >> 6];
          if (((1 << v34) & v37) == 0)
          {
            uint64_t v38 = (float *)(*v20 + 12 * *(unsigned __int16 *)(v33 + 2 * v32));
            float v39 = v38[1];
            float v40 = v38[2];
            float v41 = (float)((float)((float)(*((float *)v18 + 7) * *v38) + (float)(*((float *)v18 + 11) * v39))
                        + (float)(*((float *)v18 + 15) * v40))
                + *((float *)v18 + 19);
            *(float32x2_t *)uint64_t v38 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)((char *)v18 + 20), *v38), *(float32x2_t *)((char *)v18 + 36), v39), *(float32x2_t *)((char *)v18 + 52), v40), *(float32x2_t *)((char *)v18 + 68));
            v38[2] = v41;
            v27[v35] = v36 | v37;
          }
          ++v32;
          --v29;
        }
        while (v29);
        uint64_t v7 = 8 * v30;
      }
      else
      {
        uint64_t v5 = v43;
        uint64_t v7 = v42;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v23 + 40))(v23, v27, v7);
    }
    uint64_t v3 = *v5;
    uint64_t v2 = v5[1];
LABEL_7:
    if (0x86BCA1AF286BCA1BLL * ((v2 - v3) >> 3) > ++v6) {
      continue;
    }
    return result;
  }
}

uint64_t *std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::~unordered_map[abi:ne180100](uint64_t *a1)
{
  for (uint64_t i = (void *)a1[3]; i; uint64_t i = v3)
  {
    uint64_t v3 = (void *)*i;
    (*(void (**)(uint64_t))(*(void *)a1[4] + 40))(a1[4]);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v4, 8 * a1[1]);
  }
  return a1;
}

uint64_t *std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert(uint64_t ***a1, unsigned __int16 *a2)
{
  if (a1[2])
  {
    uint64_t v4 = (uint64_t **)(a1 + 1);
    if (*a1 == (uint64_t **)(a1 + 1))
    {
      unint64_t v10 = *a1;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = *a1;
      do
      {
        uint64_t v7 = v6[1];
        if (v7)
        {
          do
          {
            unint64_t v8 = (uint64_t **)v7;
            uint64_t v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            unint64_t v8 = (uint64_t **)v6[2];
            BOOL v9 = *v8 == (uint64_t *)v6;
            uint64_t v6 = v8;
          }
          while (!v9);
        }
        ++v5;
        uint64_t v6 = v8;
      }
      while (v8 != v4);
      unint64_t v10 = *a1;
      do
      {
        unint64_t v11 = v5 >> 1;
        uint64_t v12 = (uint64_t *)v10;
        if (v5 != 1)
        {
          uint64_t v14 = v5 >> 1;
          unint64_t v15 = v10;
          do
          {
            uint64_t v17 = v15[1];
            if (v17)
            {
              do
              {
                uint64_t v12 = v17;
                uint64_t v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                uint64_t v12 = v15[2];
                BOOL v9 = *v12 == (void)v15;
                unint64_t v15 = (uint64_t **)v12;
              }
              while (!v9);
            }
            unint64_t v15 = (uint64_t **)v12;
          }
          while (v14-- > 1);
        }
        if (*((unsigned __int16 *)v12 + 14) < a2[1])
        {
          unint64_t v13 = (uint64_t *)v12[1];
          if (v13)
          {
            do
            {
              unint64_t v10 = (uint64_t **)v13;
              unint64_t v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              unint64_t v10 = (uint64_t **)v12[2];
              BOOL v9 = *v10 == v12;
              uint64_t v12 = (uint64_t *)v10;
            }
            while (!v9);
          }
          unint64_t v11 = v5 + ~v11;
        }
        unint64_t v5 = v11;
      }
      while (v11);
    }
    if (v10 != v4 && *((unsigned __int16 *)v10 + 13) < a2[1]) {
      return 0;
    }
    if (v10 != *a1)
    {
      uint64_t v22 = *v10;
      if (*v10)
      {
        do
        {
          uint64_t v23 = v22;
          uint64_t v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = v10[2];
          BOOL v9 = *v23 == (void)v10;
          unint64_t v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*a2 < *((unsigned __int16 *)v23 + 14)) {
        return 0;
      }
    }
    unint64_t v25 = *v4;
    float v20 = (uint64_t **)(a1 + 1);
    if (*v4)
    {
      unsigned int v26 = a2[1];
      while (1)
      {
        while (1)
        {
          float v20 = (uint64_t **)v25;
          unsigned int v27 = *((unsigned __int16 *)v25 + 14);
          if (v26 >= v27) {
            break;
          }
          unint64_t v25 = *v20;
          uint64_t v4 = v20;
          if (!*v20) {
            goto LABEL_55;
          }
        }
        if (v27 >= v26) {
          return 0;
        }
        unint64_t v25 = v20[1];
        if (!v25) {
          goto LABEL_53;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = (uint64_t **)(a1 + 1);
    uint64_t v18 = (uint64_t *)a1[1];
    if (v18)
    {
      unsigned int v19 = a2[1];
      while (1)
      {
        while (1)
        {
          float v20 = (uint64_t **)v18;
          unsigned int v21 = *((unsigned __int16 *)v18 + 14);
          if (v19 >= v21) {
            break;
          }
          uint64_t v18 = *v20;
          uint64_t v4 = v20;
          if (!*v20) {
            goto LABEL_55;
          }
        }
        if (v21 >= v19) {
          return 0;
        }
        uint64_t v18 = v20[1];
        if (!v18)
        {
LABEL_53:
          uint64_t v4 = v20 + 1;
          goto LABEL_55;
        }
      }
    }
    float v20 = (uint64_t **)(a1 + 1);
  }
LABEL_55:
  unint64_t v28 = (char *)operator new(0x20uLL);
  *(_DWORD *)(v28 + 26) = *(_DWORD *)a2;
  *((_WORD *)v28 + 15) = a2[2];
  *(void *)unint64_t v28 = 0;
  *((void *)v28 + 1) = 0;
  *((void *)v28 + 2) = v20;
  *uint64_t v4 = (uint64_t *)v28;
  uint64_t v29 = **a1;
  if (v29)
  {
    *a1 = (uint64_t **)v29;
    unint64_t v30 = *v4;
  }
  else
  {
    unint64_t v30 = (uint64_t *)v28;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v30);
  a1[2] = (uint64_t **)((char *)a1[2] + 1);
  return 1;
}

geo::codec::Asset **std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100](geo::codec::Asset **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    geo::codec::Asset::~Asset(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

BOOL geo::codec::AssetDecoder::decodeAssetOcclusionMeshes(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  geo::ibitstream::readUInt32((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    uint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 570;
LABEL_50:
    fprintf(v18, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v19);
    return 0;
  }
  int v6 = v49;
  *a2 = v49;
  if (!v6) {
    return 0;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    uint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 575;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    uint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 576;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    uint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 577;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    uint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 579;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    uint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 580;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    uint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 581;
    goto LABEL_50;
  }
  geo::ibitstream::readByte(a1, &v46);
  if (!v46)
  {
    uint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 583;
    goto LABEL_50;
  }
  if (v47)
  {
    std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::resize((uint64_t)&v50, v47);
    uint64_t v7 = v50;
    uint64_t v8 = v51;
    if (v50 != v51)
    {
      int v9 = *(unsigned __int8 *)(a1 + 24);
      BOOL v10 = *(unsigned char *)(a1 + 24) != 0;
      unint64_t v12 = *(void *)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)a1;
      char v14 = 8 - v9;
      int v15 = (1 << (8 - v9)) + 255;
      int v16 = 0xFFFF << (8 - v9);
      uint64_t v17 = (unsigned char *)(v50 + 3);
      while (1)
      {
        while (1)
        {
          unint64_t v22 = v11 + 2;
          if (v12 < v11 + 2 + v10)
          {
            uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
            int v45 = 590;
            goto LABEL_66;
          }
          if (v9)
          {
            unint64_t v23 = v11 + 1;
            if (v11 + 1 >= v12) {
              int v24 = 0;
            }
            else {
              int v24 = *(unsigned __int8 *)(v13 + v23);
            }
            int v27 = *(unsigned __int8 *)(v13 + v11);
            *(void *)(a1 + 16) = v23;
            if (v22 >= v12) {
              int v26 = 0;
            }
            else {
              int v26 = *(unsigned __int8 *)(v13 + v22);
            }
            __int16 v25 = (((v24 & v16) >> v14) | ((v15 & v27) << v9));
            LOWORD(v26) = (((v26 & v16) >> v14) | ((((1 << (8 - v9)) - 1) & *(unsigned char *)(v13 + v23)) << v9));
          }
          else
          {
            __int16 v25 = *(_WORD *)(v13 + v11);
            int v26 = HIBYTE(*(unsigned __int16 *)(v13 + v11));
          }
          unint64_t v28 = v17 - 3;
          *(void *)(a1 + 16) = v22;
          *(_WORD *)(v17 - 3) = v25 | ((_WORD)v26 << 8);
          unint64_t v29 = v11 + 3;
          if (v12 < v11 + 3 + v10)
          {
            uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
            int v45 = 591;
            goto LABEL_66;
          }
          int v30 = *(unsigned __int8 *)(v13 + v22);
          if (v9) {
            break;
          }
          *(void *)(a1 + 16) = v29;
          *(v17 - 1) = v30;
          unint64_t v32 = v11 + 4;
          if (v12 < v11 + 4 + v10) {
            goto LABEL_64;
          }
          char v33 = *(unsigned char *)(v13 + v29);
          *(void *)(a1 + 16) = v32;
          *uint64_t v17 = v33;
          v11 += 5;
          if (v12 < v11 + v10) {
            goto LABEL_65;
          }
          char v34 = *(unsigned char *)(v13 + v32);
          *(void *)(a1 + 16) = v11;
          v17[1] = v34;
          v17 += 8;
          if (v28 + 8 == (unsigned char *)v8) {
            goto LABEL_54;
          }
        }
        if (v29 >= v12) {
          int v31 = 0;
        }
        else {
          int v31 = *(unsigned __int8 *)(v13 + v29);
        }
        *(void *)(a1 + 16) = v29;
        *(v17 - 1) = ((v31 & v16) >> v14) | ((v15 & v30) << v9);
        unint64_t v35 = v11 + 4;
        if (v12 < v11 + 4 + v10)
        {
LABEL_64:
          uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
          int v45 = 592;
          goto LABEL_66;
        }
        int v36 = v35 >= v12 ? 0 : *(unsigned __int8 *)(v13 + v35);
        char v37 = ((v36 & v16) >> v14) | ((((1 << (8 - v9)) - 1) & *(unsigned char *)(v13 + v29)) << v9);
        *(void *)(a1 + 16) = v35;
        *uint64_t v17 = v37;
        v11 += 5;
        if (v12 < v11 + v10) {
          break;
        }
        if (v11 < v12) {
          int v20 = *(unsigned __int8 *)(v13 + v11);
        }
        else {
          int v20 = 0;
        }
        unsigned int v21 = ((v20 & v16) >> v14) | ((((1 << (8 - v9)) - 1) & *(unsigned char *)(v13 + v35)) << v9);
        *(void *)(a1 + 16) = v11;
        v17[1] = v21;
        v17 += 8;
        if (v28 + 8 == (unsigned char *)v8) {
          goto LABEL_54;
        }
      }
LABEL_65:
      uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
      int v45 = 593;
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
LABEL_54:
  geo::ibitstream::readUInt16((uint64_t)&v46, (uint64_t *)a1);
  if (v46)
  {
    unint64_t v40 = v48;
    unint64_t v41 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
    std::vector<geo::codec::Mesh>::resize((char **)a3, v41 + v48);
    if (v40)
    {
      BOOL v38 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 152 * v41;
      while ((buildAssetMesh((geo::ibitstream *)a1, 0, *(void *)a3 + v43, v7, v8) & 1) != 0)
      {
        BOOL v38 = ++v42 >= v40;
        v43 += 152;
        if (v40 == v42) {
          goto LABEL_59;
        }
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d Asset Parse: Failed to decode asset mesh\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", 601);
    }
    else
    {
LABEL_59:
      BOOL v38 = 1;
    }
    goto LABEL_67;
  }
  uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
  int v45 = 596;
LABEL_66:
  fprintf(v44, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v45);
  BOOL v38 = 0;
LABEL_67:
  if (v7)
  {
    uint64_t v51 = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v53 + 40))(v53, v7, v52 - v7);
  }
  return v38;
}

void sub_1A284EB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A284EC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<geo::codec::Mesh>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (geo::codec::Mesh *)a1[1];
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((v5 - (geo::codec::Mesh *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v8 = a1[2];
    if (0x86BCA1AF286BCA1BLL * ((v8 - (char *)v5) >> 3) >= v7)
    {
      int v27 = (char *)v5 + 152 * v7;
      uint64_t v28 = 152 * a2 - 8 * ((v5 - (geo::codec::Mesh *)*a1) >> 3);
      do
      {
        std::allocator<geo::codec::Mesh>::construct[abi:ne180100]<geo::codec::Mesh>((uint64_t)v5);
        unint64_t v5 = (geo::codec::Mesh *)((char *)v5 + 152);
        v28 -= 152;
      }
      while (v28);
      a1[1] = v27;
      return;
    }
    if (a2 > 0x1AF286BCA1AF286) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x86BCA1AF286BCA1BLL * ((v8 - v4) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0xD79435E50D7943) {
      unint64_t v11 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 > 0x1AF286BCA1AF286) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v12 = (char *)operator new(152 * v11);
    uint64_t v13 = 152 * v6;
    char v14 = &v12[152 * v6];
    int v15 = &v12[152 * a2];
    unint64_t v16 = 152 * a2 - v13;
    uint64_t v17 = (uint64_t)v14;
    do
    {
      std::allocator<geo::codec::Mesh>::construct[abi:ne180100]<geo::codec::Mesh>(v17);
      v17 += 152;
      v16 -= 152;
    }
    while (v16);
    uint64_t v18 = &v12[152 * v11];
    int v19 = *a1;
    int v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v18;
      if (!v20) {
        return;
      }
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        unint64_t v22 = &v14[v21];
        unint64_t v23 = &v20[v21];
        *((void *)v22 - 19) = 0;
        *((void *)v22 - 18) = 0;
        *((void *)v22 - 17) = 0;
        *((void *)v22 - 16) = *(void *)&v20[v21 - 128];
        *(_OWORD *)(v22 - 152) = *(_OWORD *)&v20[v21 - 152];
        *((void *)v22 - 17) = *(void *)&v20[v21 - 136];
        *((void *)v23 - 19) = 0;
        *((void *)v23 - 18) = 0;
        *((void *)v23 - 17) = 0;
        *((void *)v22 - 15) = 0;
        *((void *)v22 - 14) = 0;
        *((void *)v22 - 13) = 0;
        *((void *)v22 - 12) = *(void *)&v20[v21 - 96];
        *(_OWORD *)(v22 - 120) = *(_OWORD *)&v20[v21 - 120];
        *((void *)v22 - 13) = *(void *)&v20[v21 - 104];
        *((void *)v23 - 15) = 0;
        *((void *)v23 - 14) = 0;
        *((void *)v23 - 13) = 0;
        *((void *)v22 - 11) = 0;
        *((void *)v22 - 10) = 0;
        *((void *)v22 - 9) = 0;
        *((void *)v22 - 8) = *(void *)&v20[v21 - 64];
        *(_OWORD *)(v22 - 88) = *(_OWORD *)&v20[v21 - 88];
        *((void *)v22 - 9) = *(void *)&v20[v21 - 72];
        *((void *)v23 - 11) = 0;
        *((void *)v23 - 10) = 0;
        *((void *)v23 - 9) = 0;
        *((void *)v22 - 7) = 0;
        *((void *)v22 - 6) = 0;
        *((void *)v22 - 5) = 0;
        *((void *)v22 - 4) = *(void *)&v20[v21 - 32];
        *(_OWORD *)(v22 - 56) = *(_OWORD *)&v20[v21 - 56];
        *((void *)v22 - 5) = *(void *)&v20[v21 - 40];
        *((void *)v23 - 7) = 0;
        *((void *)v23 - 6) = 0;
        *((void *)v23 - 5) = 0;
        long long v24 = *(_OWORD *)&v20[v21 - 24];
        *((void *)v22 - 1) = *(void *)&v20[v21 - 8];
        *(_OWORD *)(v22 - 24) = v24;
        v21 -= 152;
      }
      while (&v20[v21] != v19);
      int v20 = *a1;
      __int16 v25 = a1[1];
      *a1 = &v14[v21];
      a1[1] = v15;
      a1[2] = v18;
      while (v25 != v20)
        geo::codec::Mesh::~Mesh((geo::codec::Mesh *)(v25 - 152));
      if (!v20) {
        return;
      }
    }
    operator delete(v20);
    return;
  }
  if (a2 < v6)
  {
    int v26 = (geo::codec::Mesh *)&v4[152 * a2];
    while (v5 != v26)
    {
      unint64_t v5 = (geo::codec::Mesh *)((char *)v5 - 152);
      geo::codec::Mesh::~Mesh(v5);
    }
    a1[1] = (char *)v26;
  }
}

void std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::emplace_back<std::unique_ptr<geo::codec::AssetLodInstance>>(uint64_t **a1, uint64_t *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      uint64_t v6 = *a2;
      *unint64_t v5 = *a2;
      if (v6) {
        operator new();
      }
      v5[1] = 0;
      *a2 = 0;
    }
    uint64_t v17 = v5 + 2;
    a1[1] = v17;
    goto LABEL_32;
  }
  uint64_t v7 = ((char *)v5 - (char *)*a1) >> 4;
  if ((unint64_t)(v7 + 1) >> 60) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v4 - (void)*a1;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= (unint64_t)(v7 + 1)) {
    uint64_t v9 = v7 + 1;
  }
  BOOL v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
  uint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  if (!v10) {
    uint64_t v11 = v9;
  }
  int v26 = a1 + 3;
  if (v11)
  {
    uint64_t v12 = 16 * v11;
    uint64_t v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[3] + 16))(a1[3], 16 * v11, 8);
    char v14 = (uint64_t *)(v13 + 16 * v7);
    uint64_t v15 = v13 + v12;
    if (v13)
    {
      uint64_t v16 = *a2;
      *char v14 = *a2;
      if (v16) {
        operator new();
      }
      *(void *)(v13 + 16 * v7 + 8) = 0;
      *a2 = 0;
      uint64_t v17 = v14 + 2;
      int v19 = *a1;
      uint64_t v18 = a1[1];
      if (v18 != *a1) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v15 = 0;
    char v14 = (uint64_t *)(16 * v7);
  }
  uint64_t v17 = v14 + 2;
  int v19 = *a1;
  uint64_t v18 = a1[1];
  if (v18 != *a1)
  {
    do
    {
LABEL_20:
      long long v20 = *((_OWORD *)v18 - 1);
      v18 -= 2;
      *((_OWORD *)v14 - 1) = v20;
      v14 -= 2;
      *uint64_t v18 = 0;
      v18[1] = 0;
    }
    while (v18 != v19);
    uint64_t v21 = *a1;
    uint64_t v18 = a1[1];
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v21 = v18;
LABEL_23:
  *a1 = v14;
  a1[1] = v17;
  unint64_t v22 = a1[2];
  a1[2] = (uint64_t *)v15;
  __int16 v25 = v22;
  if (v18 != v21)
  {
    do
    {
      long long v24 = v18 - 2;
      unint64_t v23 = (std::__shared_weak_count *)*(v18 - 1);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      uint64_t v18 = v24;
    }
    while (v24 != v21);
    uint64_t v18 = v21;
  }
  if (v18) {
    (*(void (**)(void, uint64_t *, int64_t))(*(void *)*v26 + 40))(*v26, v18, (char *)v25 - (char *)v18);
  }
LABEL_32:
  a1[1] = v17;
}

void sub_1A284F1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A284F1D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

geo::codec::AssetLodInstance **std::unique_ptr<geo::codec::AssetLodInstance>::~unique_ptr[abi:ne180100](geo::codec::AssetLodInstance **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    geo::codec::AssetLodInstance::~AssetLodInstance(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)result) >> 2);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5) {
      *(void *)(result + 8) = v3 + 12 * a2;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(result + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 2) >= v6)
    {
      *(void *)(result + 8) = v4 + 12 * (12 * v6 / 0xC);
    }
    else
    {
      if (a2 > 0x1555555555555555) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 2);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0xAAAAAAAAAAAAAAALL) {
        uint64_t v10 = 0x1555555555555555;
      }
      else {
        uint64_t v10 = v9;
      }
      uint64_t v11 = 12 * v10;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 12 * v10, 4);
      uint64_t v13 = *(void *)v2;
      uint64_t v12 = *(void *)(v2 + 8);
      unint64_t v14 = result + 12 * v5;
      unint64_t v15 = v14 + 12 * (12 * v6 / 0xC);
      if (v12 != *(void *)v2)
      {
        do
        {
          uint64_t v16 = *(void *)(v12 - 12);
          v12 -= 12;
          int v17 = *(_DWORD *)(v12 + 8);
          *(void *)(v14 - 12) = v16;
          v14 -= 12;
          *(_DWORD *)(v14 + 8) = v17;
        }
        while (v12 != v13);
        uint64_t v12 = *(void *)v2;
      }
      *(void *)uint64_t v2 = v14;
      *(void *)(v2 + 8) = v15;
      uint64_t v18 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = result + v11;
      if (v12) {
        return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v12, v18 - v12);
      }
    }
  }
  return result;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  if (a2 > (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 2)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8) - *(void *)result;
    uint64_t v4 = 4 * a2;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * a2, 4);
    unint64_t v5 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v6 = *(void *)v2;
    uint64_t v7 = *(void *)(v2 + 8);
    unint64_t v8 = v5;
    if (v7 != *(void *)v2)
    {
      unint64_t v9 = v7 - *(void *)v2 - 4;
      if (v9 >= 0x2C)
      {
        unint64_t v8 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7 - (v3 & 0xFFFFFFFFFFFFFFFCLL) - result >= 0x20)
        {
          uint64_t v10 = (v9 >> 2) + 1;
          uint64_t v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v12 = v7 - v11;
          unint64_t v8 = v5 - v11;
          uint64_t v13 = (_OWORD *)(result + 4 * (v3 >> 2) - 16);
          unint64_t v14 = (long long *)(v7 - 16);
          uint64_t v15 = v10 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v16 = *v14;
            *(v13 - 1) = *(v14 - 1);
            *uint64_t v13 = v16;
            v13 -= 2;
            v14 -= 2;
            v15 -= 8;
          }
          while (v15);
          uint64_t v7 = v12;
          if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        unint64_t v8 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
      }
      do
      {
        int v17 = *(_DWORD *)(v7 - 4);
        v7 -= 4;
        *(_DWORD *)(v8 - 4) = v17;
        v8 -= 4;
      }
      while (v7 != v6);
    }
LABEL_10:
    *(void *)uint64_t v2 = v8;
    *(void *)(v2 + 8) = v5;
    uint64_t v18 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = result + v4;
    if (v6) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v6, v18 - v6);
    }
  }
  return result;
}

uint64_t *std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = v4;
  if (a2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 12 * a2, 4);
    *a1 = v5;
    a1[1] = v5 + 12 * a2;
    a1[2] = v5 + 12 * a2;
  }
  return a1;
}

void sub_1A284F5D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::move[abi:ne180100]<std::__wrap_iter<gm::Matrix<float,3,1> *>,std::back_insert_iterator<std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    unint64_t v6 = a3[1];
    do
    {
      unint64_t v7 = a3[2];
      if (v6 < v7)
      {
        if (v6)
        {
          uint64_t v8 = *v5;
          *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
          *(void *)unint64_t v6 = v8;
        }
        v6 += 12;
        goto LABEL_4;
      }
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a3) >> 2);
      unint64_t v10 = v9 + 1;
      if (v9 + 1 > 0x1555555555555555) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a3) >> 2);
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0xAAAAAAAAAAAAAAALL) {
        uint64_t v12 = 0x1555555555555555;
      }
      else {
        uint64_t v12 = v10;
      }
      if (v12)
      {
        uint64_t v13 = 12 * v12;
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3[3] + 16))(a3[3], 12 * v12, 4);
        uint64_t v15 = v14 + 12 * v9;
        uint64_t v12 = v14 + v13;
        if (v14)
        {
          uint64_t v16 = *v5;
          *(_DWORD *)(v15 + 8) = *((_DWORD *)v5 + 2);
          *(void *)uint64_t v15 = v16;
        }
        uint64_t v18 = *a3;
        uint64_t v17 = a3[1];
        uint64_t v19 = v14 + 12 * v9;
        if (v17 == *a3)
        {
LABEL_18:
          unint64_t v6 = v15 + 12;
          *a3 = v19;
          a3[1] = v15 + 12;
          uint64_t v20 = a3[2];
          a3[2] = v12;
          if (!v17) {
            goto LABEL_4;
          }
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v15 = 4 * ((uint64_t)(v6 - *a3) >> 2);
        uint64_t v18 = *a3;
        uint64_t v17 = a3[1];
        uint64_t v19 = v15;
        if (v17 == *a3) {
          goto LABEL_18;
        }
      }
      do
      {
        uint64_t v21 = *(void *)(v17 - 12);
        v17 -= 12;
        int v22 = *(_DWORD *)(v17 + 8);
        *(void *)(v19 - 12) = v21;
        v19 -= 12;
        *(_DWORD *)(v19 + 8) = v22;
      }
      while (v17 != v18);
      uint64_t v17 = *a3;
      unint64_t v6 = v15 + 12;
      *a3 = v19;
      a3[1] = v15 + 12;
      uint64_t v20 = a3[2];
      a3[2] = v12;
      if (!v17) {
        goto LABEL_4;
      }
LABEL_23:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3[3] + 40))(a3[3], v17, v20 - v17);
LABEL_4:
      a3[1] = v6;
      uint64_t v5 = (uint64_t *)((char *)v5 + 12);
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = v4;
  if (a2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 8 * a2, 4);
    *a1 = v5;
    a1[1] = v5 + 8 * a2;
    a1[2] = v5 + 8 * a2;
  }
  return a1;
}

void sub_1A284F8F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void std::vector<std::unordered_map<unsigned short,unsigned long long>>::resize(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      int v26 = &v5[40 * a2];
      while (v4 != v26)
      {
        int v27 = (void *)*((void *)v4 - 3);
        if (v27)
        {
          do
          {
            uint64_t v28 = (void *)*v27;
            operator delete(v27);
            int v27 = v28;
          }
          while (v28);
        }
        int v30 = (void *)*((void *)v4 - 5);
        v4 -= 40;
        unint64_t v29 = v30;
        *(void *)uint64_t v4 = 0;
        if (v30) {
          operator delete(v29);
        }
      }
      a1[1] = v26;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      int v31 = &v4[40 * v7];
      do
      {
        *(_OWORD *)uint64_t v4 = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_DWORD *)v4 + 8) = 1065353216;
        v4 += 40;
      }
      while (v4 != v31);
      a1[1] = v31;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x333333333333333) {
        unint64_t v11 = 0x666666666666666;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(40 * v11);
      uint64_t v13 = &v12[40 * v6];
      uint64_t v14 = &v12[40 * a2];
      uint64_t v15 = v13;
      do
      {
        *(_OWORD *)uint64_t v15 = 0uLL;
        *((_OWORD *)v15 + 1) = 0uLL;
        *((_DWORD *)v15 + 8) = 1065353216;
        v15 += 40;
      }
      while (v15 != v14);
      uint64_t v16 = &v12[40 * v11];
      if (v4 == v5)
      {
        *a1 = v13;
        a1[1] = v14;
        a1[2] = v16;
      }
      else
      {
        uint64_t v17 = 0;
        do
        {
          uint64_t v19 = &v13[v17];
          uint64_t v20 = &v4[v17];
          uint64_t v21 = *(void *)&v4[v17 - 40];
          *((void *)v20 - 5) = 0;
          *((void *)v19 - 5) = v21;
          unint64_t v22 = *(void *)&v4[v17 - 32];
          *((void *)v19 - 4) = v22;
          *((void *)v20 - 4) = 0;
          uint64_t v23 = *(void *)&v4[v17 - 24];
          *((void *)v19 - 3) = v23;
          uint64_t v24 = (uint64_t)&v13[v17 - 24];
          uint64_t v25 = *(void *)&v4[v17 - 16];
          *(void *)(v24 + 8) = v25;
          *(_DWORD *)(v24 + 16) = *(_DWORD *)&v4[v17 - 8];
          if (v25)
          {
            unint64_t v18 = *(void *)(v23 + 8);
            if ((v22 & (v22 - 1)) != 0)
            {
              if (v18 >= v22) {
                v18 %= v22;
              }
            }
            else
            {
              v18 &= v22 - 1;
            }
            *(void *)(v21 + 8 * v18) = v24;
            *(void *)&v4[v17 - 24] = 0;
            *(void *)&v4[v17 - 16] = 0;
          }
          v17 -= 40;
        }
        while (&v4[v17] != v5);
        uint64_t v4 = (char *)*a1;
        unint64_t v32 = (char *)a1[1];
        *a1 = &v13[v17];
        a1[1] = v14;
        a1[2] = v16;
        while (v32 != v4)
        {
          char v33 = (void *)*((void *)v32 - 3);
          if (v33)
          {
            do
            {
              char v34 = (void *)*v33;
              operator delete(v33);
              char v33 = v34;
            }
            while (v34);
          }
          int v36 = (void *)*((void *)v32 - 5);
          v32 -= 40;
          unint64_t v35 = v36;
          *(void *)unint64_t v32 = 0;
          if (v36) {
            operator delete(v35);
          }
        }
      }
      if (v4)
      {
        operator delete(v4);
      }
    }
  }
}

void std::unordered_map<unsigned short,unsigned long long>::reserve[abi:ne180100](uint64_t a1, unint64_t a2)
{
  unint64_t prime = vcvtps_u32_f32((float)a2 / *(float *)(a1 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_18;
  }
  if (prime >= *(void *)&v4) {
    return;
  }
  size_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (*(void *)&v4 >= 3uLL)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] <= 1uLL)
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        size_t v5 = v7;
      }
      if (prime <= v5) {
        unint64_t prime = v5;
      }
      if (prime >= *(void *)&v4) {
        return;
      }
LABEL_18:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
      return;
    }
  }
  size_t v8 = std::__next_prime(v5);
  if (prime <= v8) {
    unint64_t prime = v8;
  }
  if (prime < *(void *)&v4) {
    goto LABEL_18;
  }
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, _WORD *a2)
{
  uint64_t v3 = result;
  int8x8_t v4 = *(_WORD **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      *int8x8_t v4 = *a2;
    }
    *(void *)(result + 8) = v4 + 1;
    return result;
  }
  uint64_t v6 = (uint64_t)v4 - *(void *)result;
  if (v6 <= -3) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = v6 >> 1;
  unint64_t v8 = v5 - *(void *)result;
  if (v8 <= (v6 >> 1) + 1) {
    uint64_t v9 = v7 + 1;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    uint64_t v10 = 2 * v9;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 2 * v9, 2);
    unint64_t v11 = (_WORD *)(result + 2 * v7);
    uint64_t v9 = result + v10;
    if (result) {
      *unint64_t v11 = *a2;
    }
    uint64_t v12 = (uint64_t)(v11 + 1);
    uint64_t v13 = *(void *)v3;
    uint64_t v14 = *(void *)(v3 + 8);
    uint64_t v15 = v14 - *(void *)v3;
    if (v14 != *(void *)v3) {
      goto LABEL_15;
    }
LABEL_22:
    uint64_t v20 = v11;
    goto LABEL_25;
  }
  unint64_t v11 = (_WORD *)(2 * v7);
  uint64_t v12 = 2 * v7 + 2;
  uint64_t v13 = *(void *)result;
  uint64_t v14 = *(void *)(result + 8);
  uint64_t v15 = v14 - *(void *)result;
  if (v14 == *(void *)result) {
    goto LABEL_22;
  }
LABEL_15:
  unint64_t v16 = v15 - 2;
  if (v16 < 0x1E || (unint64_t)(v14 - (void)v11) < 0x20)
  {
    uint64_t v19 = v14;
    uint64_t v20 = v11;
  }
  else
  {
    uint64_t v17 = (v16 >> 1) + 1;
    unint64_t v18 = 2 * (v17 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v19 = v14 - v18;
    uint64_t v20 = &v11[v18 / 0xFFFFFFFFFFFFFFFELL];
    uint64_t v21 = v11 - 8;
    unint64_t v22 = (long long *)(v14 - 16);
    unint64_t v23 = v17 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *uint64_t v21 = v24;
      v21 -= 2;
      v22 -= 2;
      v23 -= 16;
    }
    while (v23);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_25;
    }
  }
  do
  {
    __int16 v25 = *(_WORD *)(v19 - 2);
    v19 -= 2;
    *--uint64_t v20 = v25;
  }
  while (v19 != v13);
LABEL_25:
  *(void *)uint64_t v3 = v20;
  *(void *)(v3 + 8) = v12;
  uint64_t v26 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v9;
  if (v13) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v13, v26 - v13);
  }
  *(void *)(v3 + 8) = v12;
  return result;
}

uint64_t *std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v5 = result[1];
  unint64_t v4 = result[2];
  if (v5 < v4)
  {
    if (v5) {
      uint64_t result = std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector((uint64_t *)result[1], a2);
    }
    uint64_t v6 = v5 + 32;
    v3[1] = v5 + 32;
    goto LABEL_27;
  }
  uint64_t v7 = result + 3;
  uint64_t v8 = (uint64_t)(v5 - *result) >> 5;
  if ((unint64_t)(v8 + 1) >> 59) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v4 - *result;
  uint64_t v10 = v9 >> 4;
  if (v9 >> 4 <= (unint64_t)(v8 + 1)) {
    uint64_t v10 = v8 + 1;
  }
  BOOL v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0;
  uint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
  if (!v11) {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = 32 * v12;
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 16))(*v7, 32 * v12, 8);
    uint64_t result = (uint64_t *)(v14 + 32 * v8);
    uint64_t v15 = v14 + v13;
    if (v14) {
      uint64_t result = std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(result, a2);
    }
    uint64_t v6 = (uint64_t)(result + 4);
    uint64_t v17 = (uint64_t *)*v3;
    unint64_t v16 = (uint64_t *)v3[1];
    if (v16 != (uint64_t *)*v3) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t result = (uint64_t *)(32 * v8);
    uint64_t v6 = 32 * v8 + 32;
    uint64_t v17 = (uint64_t *)*v3;
    unint64_t v16 = (uint64_t *)v3[1];
    if (v16 != (uint64_t *)*v3)
    {
LABEL_14:
      unint64_t v18 = 0;
      do
      {
        uint64_t v19 = &result[v18];
        uint64_t v20 = &v16[v18];
        *(v19 - 4) = 0;
        *(v19 - 3) = 0;
        *(v19 - 2) = 0;
        *(v19 - 1) = v16[v18 - 1];
        *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v18 - 4];
        *(v19 - 2) = v16[v18 - 2];
        *(v20 - 4) = 0;
        *(v20 - 3) = 0;
        *(v20 - 2) = 0;
        v18 -= 4;
      }
      while (&v16[v18] != v17);
      uint64_t v21 = (uint64_t *)*v3;
      unint64_t v16 = (uint64_t *)v3[1];
      uint64_t result = (uint64_t *)((char *)result + v18 * 8);
      goto LABEL_19;
    }
  }
  uint64_t v21 = v16;
LABEL_19:
  *uint64_t v3 = (uint64_t)result;
  v3[1] = v6;
  uint64_t v22 = v3[2];
  void v3[2] = v15;
  if (v16 != v21)
  {
    unint64_t v23 = v16 - 4;
    do
    {
      uint64_t v25 = *v23;
      if (*v23)
      {
        v23[1] = v25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23[3] + 40))(v23[3], v25, v23[2] - v25);
      }
      BOOL v24 = v23 == v21;
      v23 -= 4;
    }
    while (!v24);
    unint64_t v16 = v21;
  }
  if (v16) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t *, uint64_t))(*(void *)*v7 + 40))(*v7, v16, v22 - (void)v16);
  }
LABEL_27:
  v3[1] = v6;
  return result;
}

void sub_1A2850130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A2850148(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  if (a2 > (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 1)
  {
    uint64_t v2 = result;
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = *(void *)(result + 8) - *(void *)result;
    uint64_t v4 = 2 * a2;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 2 * a2, 2);
    unint64_t v5 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v6 = *(void *)v2;
    uint64_t v7 = *(void *)(v2 + 8);
    unint64_t v8 = v5;
    if (v7 == *(void *)v2) {
      goto LABEL_11;
    }
    unint64_t v9 = v7 - *(void *)v2 - 2;
    if (v9 >= 0x1E)
    {
      unint64_t v8 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
      if (v7 - (v3 & 0xFFFFFFFFFFFFFFFELL) - result >= 0x20)
      {
        uint64_t v10 = (v9 >> 1) + 1;
        unint64_t v11 = 2 * (v10 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v12 = v7 - v11;
        unint64_t v8 = v5 - v11;
        uint64_t v13 = (_OWORD *)(result + 2 * (v3 >> 1) - 16);
        uint64_t v14 = (long long *)(v7 - 16);
        unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v16 = *v14;
          *(v13 - 1) = *(v14 - 1);
          *uint64_t v13 = v16;
          v13 -= 2;
          v14 -= 2;
          v15 -= 16;
        }
        while (v15);
        uint64_t v7 = v12;
        if (v10 == (v10 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      unint64_t v8 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
    }
    do
    {
      __int16 v17 = *(_WORD *)(v7 - 2);
      v7 -= 2;
      *(_WORD *)(v8 - 2) = v17;
      v8 -= 2;
    }
    while (v7 != v6);
LABEL_11:
    *(void *)uint64_t v2 = v8;
    *(void *)(v2 + 8) = v5;
    uint64_t v18 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = result + v4;
    if (v6) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v6, v18 - v6);
    }
  }
  return result;
}

unint64_t geo::codec::AssetDecoder::applyTransforms(unint64_t result, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != *(void *)result)
  {
    unint64_t v7 = a4[1];
    if (v7)
    {
      unint64_t v8 = a3;
      uint64_t v10 = (uint64_t *)result;
      uint64_t v11 = 0;
      int v49 = (uint64_t *)result;
LABEL_4:
      uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        unint64_t v13 = (unsigned __int16)v11;
        if (v7 <= (unsigned __int16)v11) {
          unint64_t v13 = (unsigned __int16)v11 % v7;
        }
      }
      else
      {
        unint64_t v13 = (unsigned __int16)v11 & (v7 + 0xFFFF);
      }
      uint64_t v14 = *(uint64_t ****)(*a4 + 8 * v13);
      if (v14)
      {
        unint64_t v15 = *v14;
        if (*v14)
        {
          unint64_t v16 = v7 - 1;
          if (v12.u32[0] < 2uLL)
          {
            while (1)
            {
              __int16 v17 = v15[1];
              if (v17 == (uint64_t *)(unsigned __int16)v11)
              {
                if (*((unsigned __int16 *)v15 + 8) == (unsigned __int16)v11) {
                  goto LABEL_24;
                }
              }
              else if (((unint64_t)v17 & v16) != v13)
              {
                goto LABEL_64;
              }
              unint64_t v15 = (uint64_t **)*v15;
              if (!v15) {
                goto LABEL_64;
              }
            }
          }
          do
          {
            unint64_t v18 = (unint64_t)v15[1];
            if (v18 == (unsigned __int16)v11)
            {
              if (*((unsigned __int16 *)v15 + 8) == (unsigned __int16)v11)
              {
LABEL_24:
                if (v12.u32[0] > 1uLL)
                {
                  unint64_t v19 = (unsigned __int16)v11;
                  if (v7 <= (unsigned __int16)v11) {
                    unint64_t v19 = (unsigned __int16)v11 % v7;
                  }
                }
                else
                {
                  unint64_t v19 = (unsigned __int16)v11 & (v7 + 0xFFFF);
                }
                uint64_t v20 = *(uint64_t ***)(*a4 + 8 * v19);
                if (!v20 || (uint64_t v21 = *v20) == 0) {
LABEL_68:
                }
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                if (v12.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v22 = v21[1];
                    if (v22 == (unsigned __int16)v11)
                    {
                      if (*((unsigned __int16 *)v21 + 8) == (unsigned __int16)v11) {
                        goto LABEL_36;
                      }
                    }
                    else if ((v22 & v16) != v19)
                    {
                      goto LABEL_68;
                    }
                    uint64_t v21 = (uint64_t *)*v21;
                    if (!v21) {
                      goto LABEL_68;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v34 = v21[1];
                  if (v34 == (unsigned __int16)v11)
                  {
                    if (*((unsigned __int16 *)v21 + 8) == (unsigned __int16)v11)
                    {
LABEL_36:
                      uint64_t v24 = *v8;
                      uint64_t v23 = v8[1];
                      uint64_t v25 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
                      uint64_t result = v25 & 0xFFFFFFFFFFFFLL | 0xEC89000000000000;
                      if (v23 == v24)
                      {
                        uint64_t v32 = *(unsigned int *)(v5 + 152 * v11 + 148);
                        if (v32)
                        {
                          int v30 = 0;
                          unint64_t v33 = 0;
                          goto LABEL_56;
                        }
                      }
                      else
                      {
                        if (v23 - v24 < 0) {
                          std::vector<double>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v26 = a2;
                        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 2);
                        unint64_t v28 = (v27 - 1) >> 6;
                        uint64_t v47 = 8 * (v28 + 1);
                        unint64_t v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
                        int v30 = v29;
                        unint64_t v48 = v28 + 1;
                        if (v27 >= 0x41) {
                          unint64_t v31 = (v27 - 1) >> 6;
                        }
                        else {
                          unint64_t v31 = 0;
                        }
                        v29[v31] = 0;
                        if (v27 >= 0x40) {
                          bzero(v29, 8 * (v27 >> 6));
                        }
                        if ((v27 & 0x3F) != 0) {
                          v30[v27 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v27 & 0x3F));
                        }
                        uint64_t v32 = *(unsigned int *)(v5 + 152 * v11 + 148);
                        a2 = v26;
                        if (v32)
                        {
                          uint64_t v10 = v49;
                          unint64_t v8 = a3;
                          unint64_t v33 = v48;
LABEL_56:
                          unsigned int v35 = *(_DWORD *)(v5 + 152 * v11 + 144);
                          uint64_t v36 = *a2;
                          uint64_t v37 = *v8;
                          do
                          {
                            unint64_t v38 = *(unsigned __int16 *)(v36 + 2 * v35);
                            unint64_t v39 = v38 >> 6;
                            uint64_t v40 = 1 << v38;
                            uint64_t v41 = v30[v38 >> 6];
                            if (((1 << v38) & v41) == 0)
                            {
                              uint64_t v42 = (float *)(v37 + 12 * *(unsigned __int16 *)(v36 + 2 * v35));
                              float v43 = v42[1];
                              float v44 = v42[2];
                              float v45 = (float)((float)((float)(*((float *)v21 + 7) * *v42)
                                                  + (float)(*((float *)v21 + 11) * v43))
                                          + (float)(*((float *)v21 + 15) * v44))
                                  + *((float *)v21 + 19);
                              *(float32x2_t *)uint64_t v42 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)((char *)v21 + 20), *v42), *(float32x2_t *)((char *)v21 + 36), v43), *(float32x2_t *)((char *)v21 + 52), v44), *(float32x2_t *)((char *)v21 + 68));
                              v42[2] = v45;
                              v30[v39] = v40 | v41;
                            }
                            ++v35;
                            --v32;
                          }
                          while (v32);
                          uint64_t v46 = 8 * v33;
                        }
                        else
                        {
                          uint64_t v10 = v49;
                          unint64_t v8 = a3;
                          uint64_t v46 = v47;
                        }
                        uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v25 + 40))(v25, v30, v46);
                      }
                      uint64_t v5 = *v10;
                      uint64_t v4 = v10[1];
                      goto LABEL_64;
                    }
                  }
                  else
                  {
                    if (v34 >= v7) {
                      v34 %= v7;
                    }
                    if (v34 != v19) {
                      goto LABEL_68;
                    }
                  }
                  uint64_t v21 = (uint64_t *)*v21;
                  if (!v21) {
                    goto LABEL_68;
                  }
                }
              }
            }
            else
            {
              if (v18 >= v7)
              {
                uint64_t result = v18 / v7;
                v18 %= v7;
              }
              if (v18 != v13) {
                break;
              }
            }
            unint64_t v15 = (uint64_t **)*v15;
          }
          while (v15);
        }
      }
LABEL_64:
      while (0x86BCA1AF286BCA1BLL * ((v4 - v5) >> 3) > ++v11)
      {
        unint64_t v7 = a4[1];
        if (v7) {
          goto LABEL_4;
        }
      }
    }
  }
  return result;
}

uint64_t *std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

geo::codec::Asset *geo::codec::Asset::Asset(geo::codec::Asset *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  uint64_t v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance(this);
  *((void *)this + 6) = v2;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  uint64_t v3 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v2);
  *((void *)this + 10) = v3;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  uint64_t v4 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v3);
  *((void *)this + 14) = v4;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  uint64_t v5 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v4);
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = v5;
  uint64_t v6 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v5);
  *((void *)this + 21) = v6;
  *((void *)this + 22) = 0;
  unint64_t v7 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
  *((void *)this + 23) = v7;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 50) = 1065353216;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 26) = 0;
  uint64_t v8 = geo::codec::Allocator::instance(v7);
  *((void *)this + 32) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = v8;
  *((void *)this + 30) = (char *)this + 248;
  *((unsigned char *)this + 300) = 0;
  return this;
}

void std::__tree<std::__value_type<gm::Range<unsigned short>,unsigned char>,std::__map_value_compare<gm::Range<unsigned short>,std::__value_type<gm::Range<unsigned short>,unsigned char>,geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned short>,unsigned char>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<gm::Range<unsigned short>,unsigned char>,std::__map_value_compare<gm::Range<unsigned short>,std::__value_type<gm::Range<unsigned short>,unsigned char>,geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned short>,unsigned char>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<gm::Range<unsigned short>,unsigned char>,std::__map_value_compare<gm::Range<unsigned short>,std::__value_type<gm::Range<unsigned short>,unsigned char>,geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned short>,unsigned char>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void geo::codec::Mesh::~Mesh(geo::codec::Mesh *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 40))(*((void *)this + 15), v2, *((void *)this + 14) - v2);
  }
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v3, *((void *)this + 10) - v3);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v4, *((void *)this + 6) - v4);
  }
  uint64_t v5 = *(void *)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v5, *((void *)this + 2) - v5);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,geo::codec::Allocator>>::~__hash_table(uint64_t *a1)
{
  for (uint64_t i = (uint64_t *)a1[3]; i; uint64_t i = v3)
  {
    uint64_t v3 = (uint64_t *)*i;
    uint64_t v4 = i[3];
    if (v4)
    {
      i[4] = v4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)i[6] + 40))(i[6], v4, i[5] - v4);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1[4] + 40))(a1[4], i, 56);
  }
  uint64_t v5 = *a1;
  *a1 = 0;
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v5, 8 * a1[1]);
  }
  return a1;
}

uint64_t std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = v4 - *(void *)result;
  uint64_t v6 = v5 >> 3;
  unint64_t v7 = a2 - (v5 >> 3);
  if (a2 <= v5 >> 3)
  {
    if (a2 < v5 >> 3) {
      *(void *)(result + 8) = v3 + 8 * a2;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(result + 16);
    if (v7 <= (v8 - v4) >> 3)
    {
      *(void *)(result + 8) = v4 + 8 * v7;
    }
    else
    {
      if (a2 >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v8 - v3;
      uint64_t v10 = v9 >> 2;
      if (v9 >> 2 <= a2) {
        uint64_t v10 = a2;
      }
      BOOL v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
      uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v11) {
        uint64_t v12 = v10;
      }
      uint64_t v13 = 8 * v12;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v12, 4);
      uint64_t v15 = *(void *)v2;
      uint64_t v14 = *(void *)(v2 + 8);
      uint64_t v16 = result + 8 * v6;
      unint64_t v17 = v16 + 8 * v7;
      if (v14 != *(void *)v2)
      {
        unint64_t v18 = v14 - *(void *)v2 - 8;
        if (v18 < 0x58) {
          goto LABEL_25;
        }
        if ((unint64_t)(v14 - v5 - result) < 0x20) {
          goto LABEL_25;
        }
        uint64_t v19 = (v18 >> 3) + 1;
        uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v21 = v14 - v20;
        v16 -= v20;
        uint64_t v22 = (_OWORD *)(result + 8 * v6 - 16);
        uint64_t v23 = (long long *)(v14 - 16);
        uint64_t v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *uint64_t v22 = v25;
          v22 -= 2;
          v23 -= 2;
          v24 -= 4;
        }
        while (v24);
        uint64_t v14 = v21;
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_25:
          do
          {
            uint64_t v26 = *(void *)(v14 - 8);
            v14 -= 8;
            *(void *)(v16 - 8) = v26;
            v16 -= 8;
          }
          while (v14 != v15);
        }
        uint64_t v14 = *(void *)v2;
      }
      *(void *)uint64_t v2 = v16;
      *(void *)(v2 + 8) = v17;
      uint64_t v27 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = result + v13;
      if (v14) {
        return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v14, v27 - v14);
      }
    }
  }
  return result;
}

uint64_t *std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t geo::ibitstream::unpack32(uint64_t this, uint64_t *a2, unsigned int a3)
{
  int v3 = *((unsigned __int8 *)a2 + 24);
  unint64_t v5 = a2[1];
  uint64_t v4 = a2[2];
  unint64_t v6 = v4 + ((v3 + a3) >> 3);
  if (v6 > v5) {
    goto LABEL_16;
  }
  int v7 = ((_BYTE)v3 + (_BYTE)a3) & 7;
  BOOL v8 = v6 == v5 && v7 != 0;
  if (a3 > 0x20 || v8) {
    goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (a3)
  {
    uint64_t v10 = *a2;
    do
    {
      int v11 = a3;
      if (8 - v3 < a3) {
        int v11 = 8 - v3;
      }
      unsigned int v9 = (*(unsigned __int8 *)(v10 + v4) >> (8 - v3 - v11)) & ~(-1 << v11) | (v9 << v11);
      LOBYTE(a3) = a3 - v11;
      v4 += (v11 + (unint64_t)v3) >> 3;
      a2[2] = v4;
      int v3 = ((_BYTE)v3 + (_BYTE)v11) & 7;
      *((unsigned char *)a2 + 24) = v3;
    }
    while ((_BYTE)a3);
  }
  if (v4 == v6 && v7 == v3)
  {
    *(unsigned char *)this = 1;
    *(_DWORD *)(this + 4) = v9;
  }
  else
  {
LABEL_16:
    *(unsigned char *)this = 0;
  }
  return this;
}

uint64_t **std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    uint64_t v3 = v1[1];
    uint64_t v4 = **result;
    unint64_t v5 = *result;
    if (v3 != v2)
    {
      unint64_t v6 = result;
      do
      {
        uint64_t v7 = *(void *)(v3 - 32);
        if (v7)
        {
          *(void *)(v3 - 24) = v7;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 8) + 40))(*(void *)(v3 - 8), v7, *(void *)(v3 - 16) - v7);
        }
        uint64_t v8 = *(void *)(v3 - 64);
        if (v8)
        {
          *(void *)(v3 - 56) = v8;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 40) + 40))(*(void *)(v3 - 40), v8, *(void *)(v3 - 48) - v8);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      unint64_t v5 = *v6;
      uint64_t v4 = **v6;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
  }
  return result;
}

geo::codec::MaterialSheet *geo::codec::MaterialSheet::MaterialSheet(geo::codec::MaterialSheet *this, const geo::codec::MaterialSheet *a2)
{
  uint64_t v3 = this;
  *(_WORD *)this = *(_WORD *)a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  int64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    unint64_t v7 = 0x823EE08FB823EE09 * (v6 >> 3);
    if (v7 >= 0x8FB823EE08FB83) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v6);
    uint64_t v9 = 0;
    *((void *)this + 1) = v8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = &v8[456 * v7];
    do
    {
      geo::codec::MaterialSheet::Material::Material((geo::codec::MaterialSheet::Material *)&v8[v9], (const geo::codec::MaterialSheet::Material *)(v4 + v9));
      v9 += 456;
    }
    while (v4 + v9 != v5);
    uint64_t v10 = &v8[v9];
    uint64_t v3 = this;
    *((void *)this + 2) = v10;
  }
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 6) = 0;
  *((void *)v3 + 5) = 0;
  uint64_t v11 = *((void *)a2 + 4);
  uint64_t v12 = *((void *)a2 + 5);
  int64_t v13 = v12 - v11;
  if (v12 != v11)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    if (v14 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(v13);
    uint64_t v16 = 0;
    *((void *)v3 + 4) = v15;
    *((void *)v3 + 5) = v15;
    *((void *)v3 + 6) = &v15[24 * v14];
    do
    {
      uint64_t v19 = &v15[v16];
      uint64_t v20 = v11 + v16;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      uint64_t v22 = *(unsigned char **)(v11 + v16);
      uint64_t v21 = *(unsigned char **)(v11 + v16 + 8);
      uint64_t v23 = v21 - v22;
      if (v21 != v22)
      {
        if (v23 < 0) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = (char *)operator new(v21 - v22);
        *(void *)uint64_t v19 = v17;
        *((void *)v19 + 1) = v17;
        *((void *)v19 + 2) = &v17[8 * (v23 >> 3)];
        size_t v18 = v23 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v17, v22, v18);
        *((void *)v19 + 1) = &v17[v18];
      }
      v16 += 24;
    }
    while (v20 + 24 != v12);
    uint64_t v3 = this;
    *((void *)this + 5) = &v15[v16];
  }
  geo::codec::MaterialSheet::Material::Material((geo::codec::MaterialSheet *)((char *)v3 + 56), (const geo::codec::MaterialSheet *)((char *)a2 + 56));
  *((_OWORD *)v3 + 32) = 0u;
  uint64_t v24 = *((void *)a2 + 67);
  *((void *)v3 + 66) = 0;
  *((void *)v3 + 67) = v24;
  uint64_t v25 = *((void *)a2 + 64);
  uint64_t v26 = *((void *)a2 + 65);
  if (v26 != v25)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v26 - v25) >> 3) >= 0x666666666666667) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
    uint64_t v28 = 0;
    *((void *)this + 64) = v27;
    *((void *)this + 65) = v27;
    *((void *)this + 66) = v27 + 8 * ((v26 - v25) >> 3);
    unint64_t v29 = (void *)v27;
    do
    {
      if (v29)
      {
        *unint64_t v29 = 0;
        v29[1] = 0;
        uint64_t v30 = *(void *)(v25 + 24);
        v29[2] = 0;
        v29[3] = v30;
        unint64_t v31 = *(unsigned char **)v25;
        uint64_t v32 = *(unsigned char **)(v25 + 8);
        unint64_t v33 = (unint64_t)&v32[-*(void *)v25];
        if (v32 != *(unsigned char **)v25)
        {
          if ((v33 & 0x8000000000000000) != 0) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v30 + 16))(v30, &v32[-*(void *)v25], 1);
          *unint64_t v29 = v34;
          v29[1] = v34;
          v29[2] = v34 + v33;
          do
          {
            if (v34) {
              *(unsigned char *)uint64_t v34 = *v31;
            }
            ++v31;
            ++v34;
          }
          while (v31 != v32);
          v29[1] = v34;
        }
        void v29[4] = *(void *)(v25 + 32);
      }
      v25 += 40;
      v29 += 5;
      v28 += 40;
    }
    while (v25 != v26);
    uint64_t v3 = this;
    *((void *)this + 65) = v29;
  }
  return v3;
}

void sub_1A2851260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
}

void sub_1A2851354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,unsigned int>>>,std::vector<std::pair<unsigned short,unsigned int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  *(void *)(a4 + 40) = v4;
  JUMPOUT(0x1A2851380);
}

void sub_1A28513EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  for (; v6; v6 -= 456)
    geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v5 - 456 + v6));
  *(void *)(a5 + 16) = v5;
  std::__exception_guard_exceptions<std::vector<geo::codec::MaterialSheet::Material>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<geo::codec::MaterialSheet::Material>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **v1;
      if (v4 != v3)
      {
        do
          geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v4 - 456));
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,unsigned int>>>,std::vector<std::pair<unsigned short,unsigned int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

uint64_t **std::__exception_guard_exceptions<std::vector<geo::codec::MaterialTexture,geo::StdAllocator<geo::codec::MaterialTexture,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **a1;
      uint64_t v6 = *a1;
      if (v4 != v3)
      {
        uint64_t v7 = v2[1];
        do
        {
          uint64_t v9 = *(void *)(v7 - 40);
          v7 -= 40;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v4 - 32) = v8;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v4 - 16) + 40))(*(void *)(v4 - 16), v8, *(void *)(v4 - 24) - v8);
          }
          uint64_t v4 = v7;
        }
        while (v7 != v3);
        uint64_t v6 = *a1;
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[3] + 40))(v6[3], v5, v6[2] - v5);
    }
  }
  return a1;
}

unint64_t std::__hash_table<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,gm::Matrix<float,4,4>>>(unint64_t result, unsigned __int16 a2, uint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(result + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)result + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return result;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return result;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 32) + 16))(*(void *)(result + 32), 88, 8);
  unint64_t v13 = result;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = v6;
  *(_OWORD *)(result + 16) = *(_OWORD *)a3;
  long long v14 = *(_OWORD *)(a3 + 16);
  long long v15 = *(_OWORD *)(a3 + 32);
  long long v16 = *(_OWORD *)(a3 + 48);
  *(_DWORD *)(result + 80) = *(_DWORD *)(a3 + 64);
  *(_OWORD *)(result + 48) = v15;
  *(_OWORD *)(result + 64) = v16;
  *(_OWORD *)(result + 32) = v14;
  float v17 = (float)(unint64_t)(*(void *)(v5 + 40) + 1);
  float v18 = *(float *)(v5 + 48);
  if (!v7 || (float)(v18 * (float)v7) < v17)
  {
    BOOL v20 = 1;
    if (v7 >= 3) {
      BOOL v20 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v7);
    unint64_t v22 = vcvtps_u32_f32(v17 / v18);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    if (v23 == 1)
    {
      size_t v23 = 2;
    }
    else if ((v23 & (v23 - 1)) != 0)
    {
      uint64_t result = std::__next_prime(v23);
      size_t v23 = result;
    }
    unint64_t v7 = *(void *)(v5 + 8);
    if (v23 > v7)
    {
LABEL_36:
      uint64_t result = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(v5 + 16) + 16))(*(void *)(v5 + 16), 8 * v23, 8);
      uint64_t v24 = *(void *)v5;
      *(void *)unint64_t v5 = result;
      if (v24) {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 16) + 40))(*(void *)(v5 + 16), v24, 8 * *(void *)(v5 + 8));
      }
      uint64_t v25 = 0;
      *(void *)(v5 + 8) = v23;
      do
        *(void *)(*(void *)v5 + 8 * v25++) = 0;
      while (v23 != v25);
      unint64_t v27 = v5 + 24;
      uint64_t v26 = *(void **)(v5 + 24);
      if (!v26) {
        goto LABEL_67;
      }
      size_t v28 = v26[1];
      size_t v29 = v23 - 1;
      if ((v23 & (v23 - 1)) == 0)
      {
        size_t v30 = v28 & v29;
        *(void *)(*(void *)v5 + 8 * v30) = v27;
        for (uint64_t i = (void *)*v26; *v26; uint64_t i = (void *)*v26)
        {
          size_t v32 = i[1] & v29;
          if (v32 == v30)
          {
            uint64_t v26 = i;
          }
          else if (*(void *)(*(void *)v5 + 8 * v32))
          {
            *uint64_t v26 = *i;
            uint64_t v33 = 8 * v32;
            *uint64_t i = **(void **)(*(void *)v5 + v33);
            **(void **)(*(void *)v5 + v33) = i;
          }
          else
          {
            *(void *)(*(void *)v5 + 8 * v32) = v26;
            uint64_t v26 = i;
            size_t v30 = v32;
          }
        }
        goto LABEL_67;
      }
      if (v28 >= v23) {
        v28 %= v23;
      }
      *(void *)(*(void *)v5 + 8 * v28) = v27;
      uint64_t v36 = (void *)*v26;
      if (!*v26)
      {
LABEL_67:
        unint64_t v7 = v23;
        if ((v23 & (v23 - 1)) != 0) {
          goto LABEL_68;
        }
        goto LABEL_83;
      }
      while (1)
      {
        size_t v38 = v36[1];
        if (v38 >= v23) {
          v38 %= v23;
        }
        if (v38 == v28) {
          goto LABEL_61;
        }
        if (*(void *)(*(void *)v5 + 8 * v38))
        {
          *uint64_t v26 = *v36;
          uint64_t v37 = 8 * v38;
          *uint64_t v36 = **(void **)(*(void *)v5 + v37);
          **(void **)(*(void *)v5 + v37) = v36;
          uint64_t v36 = v26;
LABEL_61:
          uint64_t v26 = v36;
          uint64_t v36 = (void *)*v36;
          if (!v36) {
            goto LABEL_67;
          }
        }
        else
        {
          *(void *)(*(void *)v5 + 8 * v38) = v26;
          uint64_t v26 = v36;
          uint64_t v36 = (void *)*v36;
          size_t v28 = v38;
          if (!v36) {
            goto LABEL_67;
          }
        }
      }
    }
    if (v23 < v7)
    {
      uint64_t result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (v7 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        uint64_t result = std::__next_prime(result);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(result - 1);
        if (result >= 2) {
          uint64_t result = v35;
        }
      }
      if (v23 <= result) {
        size_t v23 = result;
      }
      if (v23 < v7)
      {
        if (!v23)
        {
          uint64_t v39 = *(void *)v5;
          *(void *)unint64_t v5 = 0;
          if (v39) {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 16) + 40))(*(void *)(v5 + 16), v39, 8 * *(void *)(v5 + 8));
          }
          unint64_t v7 = 0;
          *(void *)(v5 + 8) = 0;
          goto LABEL_83;
        }
        goto LABEL_36;
      }
      unint64_t v7 = *(void *)(v5 + 8);
    }
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_68:
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v19 = *(unint64_t **)(*(void *)v5 + 8 * (v6 % v7));
        if (v19) {
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v19 = *(unint64_t **)(*(void *)v5 + 8 * v6);
        if (v19) {
          goto LABEL_25;
        }
      }
      goto LABEL_84;
    }
LABEL_83:
    unint64_t v3 = (v7 - 1) & v6;
    uint64_t v19 = *(unint64_t **)(*(void *)v5 + 8 * v3);
    if (v19) {
      goto LABEL_25;
    }
    goto LABEL_84;
  }
  uint64_t v19 = *(unint64_t **)(*(void *)v5 + 8 * v3);
  if (v19)
  {
LABEL_25:
    *(void *)unint64_t v13 = *v19;
LABEL_90:
    *uint64_t v19 = v13;
    goto LABEL_91;
  }
LABEL_84:
  *(void *)unint64_t v13 = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = v13;
  *(void *)(*(void *)v5 + 8 * v3) = v5 + 24;
  if (*(void *)v13)
  {
    unint64_t v40 = *(void *)(*(void *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7) {
        v40 %= v7;
      }
    }
    else
    {
      v40 &= v7 - 1;
    }
    uint64_t v19 = (unint64_t *)(*(void *)v5 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*(void *)(v5 + 40);
  return result;
}

void sub_1A2851B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,void *>,geo::codec::Allocator>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,void *>,geo::codec::Allocator>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 88);
  }
  return a1;
}

geo::codec::AssetLodInstance *geo::codec::AssetLodInstance::AssetLodInstance(geo::codec::AssetLodInstance *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance(this);
  *((void *)this + 3) = v2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 1065353216;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  unint64_t v3 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v2);
  *((void *)this + 11) = v3;
  *((void *)this + 12) = 0;
  uint64_t v4 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v3);
  *((void *)this + 13) = v4;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = 0;
  unint64_t v5 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v4);
  *((void *)this + 19) = v5;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  unint64_t v6 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v5);
  *((void *)this + 23) = v6;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  unint64_t v7 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
  *((void *)this + 27) = v7;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  uint8x8_t v8 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v7);
  *((void *)this + 31) = v8;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  uint64_t v9 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v8);
  *((void *)this + 35) = v9;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  uint64_t v10 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v9);
  *((void *)this + 39) = v10;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  unint64_t v11 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v10);
  *((void *)this + 43) = v11;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  uint64_t v12 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v11);
  *((void *)this + 47) = v12;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = geo::codec::Allocator::instance(v12);
  return this;
}

uint64_t std::vector<geo::codec::Asset::LodInfo,geo::StdAllocator<geo::codec::Asset::LodInfo,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_DWORD **)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      uint64_t v11 = 4 * a2;
      uint64_t v12 = &v4[a2];
      do
      {
        if (v4) {
          *uint64_t v4 = 0;
        }
        ++v4;
        v11 -= 4;
      }
      while (v11);
      uint64_t v4 = v12;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    uint64_t v6 = (uint64_t)v4 - *(void *)result;
    uint64_t v7 = v6 >> 2;
    unint64_t v8 = (v6 >> 2) + a2;
    if (v8 >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - *(void *)result;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      uint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * v10, 2);
    }
    else {
      uint64_t result = 0;
    }
    unint64_t v13 = (_DWORD *)(result + 4 * v7);
    uint64_t v14 = 4 * a2;
    long long v15 = &v13[a2];
    long long v16 = v13;
    do
    {
      if (v16) {
        *long long v16 = 0;
      }
      ++v16;
      v14 -= 4;
    }
    while (v14);
    uint64_t v18 = *(void *)v3;
    uint64_t v17 = *(void *)(v3 + 8);
    if (v17 != *(void *)v3)
    {
      unint64_t v19 = v17 - *(void *)v3 - 4;
      if (v19 < 0x2C) {
        goto LABEL_36;
      }
      if ((unint64_t)(v17 - (v6 + result)) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v20 = (v19 >> 2) + 1;
      uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v22 = v17 - v21;
      unint64_t v13 = (_DWORD *)((char *)v13 - v21);
      size_t v23 = (_OWORD *)(result + 4 * v7 - 16);
      uint64_t v24 = (long long *)(v17 - 16);
      uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *size_t v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 8;
      }
      while (v25);
      uint64_t v17 = v22;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_36:
        do
        {
          int v27 = *(_DWORD *)(v17 - 4);
          v17 -= 4;
          *--unint64_t v13 = v27;
        }
        while (v17 != v18);
      }
      uint64_t v17 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v15;
    uint64_t v28 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + 4 * v10;
    if (v17) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v17, v28 - v17);
    }
  }
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

uint64_t geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>::construct<geo::codec::Mesh>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    *(void *)(result + 144) = 0;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    uint64_t v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    v1[3] = v2;
    v1[4] = 0;
    v1[5] = 0;
    v1[6] = 0;
    uint64_t v3 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v2);
    v1[7] = v3;
    v1[8] = 0;
    v1[9] = 0;
    v1[10] = 0;
    uint64_t v4 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v3);
    v1[11] = v4;
    v1[12] = 0;
    v1[13] = 0;
    v1[14] = 0;
    uint64_t result = geo::codec::Allocator::instance(v4);
    v1[15] = result;
  }
  return result;
}

uint64_t std::__split_buffer<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 552;
    geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(i - 544));
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<geo::codec::AssetLodInstance>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::codec::AssetLodInstance>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<geo::codec::AssetLodInstance>::__on_zero_shared(uint64_t a1)
{
}

void geo::codec::AssetLodInstance::~AssetLodInstance(geo::codec::AssetLodInstance *this)
{
  uint64_t v2 = *((void *)this + 48);
  if (v2)
  {
    *((void *)this + 49) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 51) + 40))(*((void *)this + 51), v2, *((void *)this + 50) - v2);
  }
  uint64_t v3 = *((void *)this + 44);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 45);
    uint64_t v5 = *((void *)this + 44);
    if (v4 != v3)
    {
      uint64_t v6 = *((void *)this + 45);
      do
      {
        uint64_t v8 = *(void *)(v6 - 32);
        v6 -= 32;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 24) = v7;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v4 - 8) + 40))(*(void *)(v4 - 8), v7, *(void *)(v4 - 16) - v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *((void *)this + 44);
    }
    *((void *)this + 45) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 47) + 40))(*((void *)this + 47), v5, *((void *)this + 46) - v5);
  }
  uint64_t v9 = *((void *)this + 40);
  if (v9)
  {
    *((void *)this + 41) = v9;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 43) + 40))(*((void *)this + 43), v9, *((void *)this + 42) - v9);
  }
  uint64_t v10 = *((void *)this + 36);
  if (v10)
  {
    *((void *)this + 37) = v10;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 39) + 40))(*((void *)this + 39), v10, *((void *)this + 38) - v10);
  }
  uint64_t v11 = *((void *)this + 32);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 33);
    uint64_t v13 = *((void *)this + 32);
    if (v12 != v11)
    {
      do
        geo::codec::Mesh::~Mesh((geo::codec::Mesh *)(v12 - 152));
      while (v12 != v11);
      uint64_t v13 = *((void *)this + 32);
    }
    *((void *)this + 33) = v11;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 35) + 40))(*((void *)this + 35), v13, *((void *)this + 34) - v13);
  }
  uint64_t v14 = *((void *)this + 28);
  if (v14)
  {
    *((void *)this + 29) = v14;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 31) + 40))(*((void *)this + 31), v14, *((void *)this + 30) - v14);
  }
  uint64_t v15 = *((void *)this + 24);
  if (v15)
  {
    *((void *)this + 25) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 27) + 40))(*((void *)this + 27), v15, *((void *)this + 26) - v15);
  }
  uint64_t v16 = *((void *)this + 20);
  if (v16)
  {
    *((void *)this + 21) = v16;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v16, *((void *)this + 22) - v16);
  }
  uint64_t v17 = *((void *)this + 16);
  if (v17)
  {
    uint64_t v18 = *((void *)this + 17);
    uint64_t v19 = *((void *)this + 16);
    if (v18 != v17)
    {
      do
        geo::codec::ModelNode::~ModelNode((geo::codec::ModelNode *)(v18 - 144));
      while (v18 != v17);
      uint64_t v19 = *((void *)this + 16);
    }
    *((void *)this + 17) = v17;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 19) + 40))(*((void *)this + 19), v19, *((void *)this + 18) - v19);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,geo::codec::Allocator>>::~__hash_table((uint64_t *)this + 9);
  uint64_t v20 = (void *)*((void *)this + 6);
  if (v20)
  {
    do
    {
      long long v26 = (void *)*v20;
      int v27 = (void *)v20[5];
      if (v27)
      {
        do
        {
          uint64_t v28 = (void *)*v27;
          operator delete(v27);
          int v27 = v28;
        }
        while (v28);
      }
      size_t v29 = (void *)v20[3];
      void v20[3] = 0;
      if (v29) {
        operator delete(v29);
      }
      operator delete(v20);
      uint64_t v20 = v26;
    }
    while (v26);
  }
  uint64_t v21 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v23 = *((void *)this + 1);
    uint64_t v24 = *(void *)this;
    if (v23 != v22)
    {
      uint64_t v25 = *((void *)this + 1);
      do
      {
        uint64_t v31 = *(void *)(v25 - 32);
        v25 -= 32;
        uint64_t v30 = v31;
        if (v31)
        {
          *(void *)(v23 - 24) = v30;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v23 - 8) + 40))(*(void *)(v23 - 8), v30, *(void *)(v23 - 16) - v30);
        }
        uint64_t v23 = v25;
      }
      while (v25 != v22);
      uint64_t v24 = *(void *)this;
    }
    *((void *)this + 1) = v22;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v24, *((void *)this + 2) - v24);
  }
}

void geo::codec::ModelNode::~ModelNode(geo::codec::ModelNode *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v2, *((void *)this + 10) - v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v3, *((void *)this + 6) - v3);
  }
  uint64_t v4 = *(void *)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v4, *((void *)this + 2) - v4);
  }
}

uint64_t std::__split_buffer<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v5 = i - 32;
      uint64_t v4 = *(void *)(i - 32);
      *(void *)(a1 + 16) = i - 32;
      if (v4) {
        break;
      }
      i -= 32;
      if (v5 == v3) {
        goto LABEL_6;
      }
    }
    *(void *)(i - 24) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(i - 8) + 40))(*(void *)(i - 8), v4, *(void *)(i - 16) - v4);
  }
LABEL_6:
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

void std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__hash_table<std::__hash_value_type<unsigned short,unsigned long long>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned long long>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned long long>>(uint64_t a1, unsigned __int16 a2, __int16 a3, uint64_t a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v12 + 8) == a2) {
                return;
              }
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (uint64_t **)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v12[1];
          if (v13 == a2)
          {
            if (*((unsigned __int16 *)v12 + 8) == a2) {
              return;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v15 = operator new(0x20uLL);
  void *v15 = 0;
  v15[1] = v8;
  *((_WORD *)v15 + 8) = a3;
  v15[3] = a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16) {
    goto LABEL_50;
  }
  BOOL v18 = 1;
  if (v9 >= 3) {
    BOOL v18 = (v9 & (v9 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v9);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    size_t prime = v20;
  }
  else {
    size_t prime = v19;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v9 = *(void *)(a1 + 8);
  }
  if (prime > v9) {
    goto LABEL_34;
  }
  if (prime < v9)
  {
    unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      unint64_t v22 = std::__next_prime(v22);
    }
    else
    {
      uint64_t v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2) {
        unint64_t v22 = v24;
      }
    }
    if (prime <= v22) {
      size_t prime = v22;
    }
    if (prime < v9) {
LABEL_34:
    }
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
    {
      unint64_t v4 = v8 % v9;
      uint64_t v25 = *(void *)a1;
      long long v26 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
      if (!v26) {
        goto LABEL_53;
      }
LABEL_51:
      void *v15 = *v26;
LABEL_59:
      *long long v26 = v15;
      goto LABEL_60;
    }
    unint64_t v4 = v8;
LABEL_50:
    uint64_t v25 = *(void *)a1;
    long long v26 = *(void **)(*(void *)a1 + 8 * v4);
    if (!v26) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  unint64_t v4 = (v9 - 1) & v8;
  uint64_t v25 = *(void *)a1;
  long long v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26) {
    goto LABEL_51;
  }
LABEL_53:
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    long long v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
}

void sub_1A2852C5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void **)(*a1 + 8 * v3);
    if (v9)
    {
      uint8x8_t v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint8x8_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint8x8_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v13 = a1 + 2;
  uint64_t v14 = operator new(0x40uLL);
  uint64_t v15 = v14;
  *uint64_t v14 = 0;
  v14[1] = a2;
  uint64_t v17 = *a3;
  uint64_t v16 = a3[1];
  unint64_t v18 = a3[2];
  a3[1] = 0;
  a3[2] = 0;
  v14[2] = v17;
  v14[3] = v16;
  v14[4] = v18;
  uint64_t v19 = a3[3];
  v14[5] = v19;
  uint64_t v20 = a3[4];
  unsigned char v14[6] = v20;
  *((_DWORD *)v14 + 14) = *((_DWORD *)a3 + 10);
  if (v20)
  {
    unint64_t v21 = *(void *)(v19 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      BOOL v23 = v21 >= v18;
      unint64_t v22 = v21 % v18;
      if (!v23) {
        unint64_t v22 = v21;
      }
    }
    else
    {
      unint64_t v22 = v21 & (v18 - 1);
    }
    *(void *)(v16 + 8 * v22) = v14 + 5;
    a3[3] = 0;
    a3[4] = 0;
  }
  float v24 = (float)(unint64_t)(a1[3] + 1);
  float v25 = *((float *)a1 + 8);
  if (!v7 || (float)(v25 * (float)v7) < v24)
  {
    BOOL v28 = 1;
    if (v7 >= 3) {
      BOOL v28 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v7);
    unint64_t v30 = vcvtps_u32_f32(v24 / v25);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v7 = a1[1];
    if (prime > v7)
    {
LABEL_42:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v32 = operator new(8 * prime);
      uint64_t v33 = (void *)*a1;
      *a1 = (uint64_t)v32;
      if (v33) {
        operator delete(v33);
      }
      uint64_t v34 = 0;
      a1[1] = prime;
      do
        *(void *)(*a1 + 8 * v34++) = 0;
      while (prime != v34);
      uint64_t v35 = (void *)*v13;
      if (!*v13) {
        goto LABEL_74;
      }
      size_t v36 = v35[1];
      size_t v37 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v38 = v36 & v37;
        *(void *)(*a1 + 8 * v38) = v13;
        for (uint64_t i = (void *)*v35; *v35; uint64_t i = (void *)*v35)
        {
          size_t v40 = i[1] & v37;
          if (v40 == v38)
          {
            uint64_t v35 = i;
          }
          else if (*(void *)(*a1 + 8 * v40))
          {
            *uint64_t v35 = *i;
            uint64_t v41 = 8 * v40;
            *uint64_t i = **(void **)(*a1 + v41);
            **(void **)(*a1 + v41) = i;
          }
          else
          {
            *(void *)(*a1 + 8 * v40) = v35;
            uint64_t v35 = i;
            size_t v38 = v40;
          }
        }
        goto LABEL_74;
      }
      if (v36 >= prime) {
        v36 %= prime;
      }
      *(void *)(*a1 + 8 * v36) = v13;
      float v45 = (void *)*v35;
      if (!*v35)
      {
LABEL_74:
        unint64_t v7 = prime;
        uint64_t v48 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_75;
        }
        goto LABEL_90;
      }
      while (1)
      {
        size_t v47 = v45[1];
        if (v47 >= prime) {
          v47 %= prime;
        }
        if (v47 == v36) {
          goto LABEL_68;
        }
        if (*(void *)(*a1 + 8 * v47))
        {
          *uint64_t v35 = *v45;
          uint64_t v46 = 8 * v47;
          *float v45 = **(void **)(*a1 + v46);
          **(void **)(*a1 + v46) = v45;
          float v45 = v35;
LABEL_68:
          uint64_t v35 = v45;
          float v45 = (void *)*v45;
          if (!v45) {
            goto LABEL_74;
          }
        }
        else
        {
          *(void *)(*a1 + 8 * v47) = v35;
          uint64_t v35 = v45;
          float v45 = (void *)*v45;
          size_t v36 = v47;
          if (!v45) {
            goto LABEL_74;
          }
        }
      }
    }
    if (prime < v7)
    {
      unint64_t v42 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v43 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        unint64_t v42 = std::__next_prime(v42);
      }
      else
      {
        uint64_t v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2) {
          unint64_t v42 = v44;
        }
      }
      if (prime <= v42) {
        size_t prime = v42;
      }
      if (prime < v7)
      {
        if (!prime)
        {
          int v49 = (void *)*a1;
          *a1 = 0;
          if (v49) {
            operator delete(v49);
          }
          unint64_t v7 = 0;
          a1[1] = 0;
          uint64_t v48 = -1;
          goto LABEL_90;
        }
        goto LABEL_42;
      }
      unint64_t v7 = a1[1];
    }
    uint64_t v48 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_75:
      if (v7 <= a2)
      {
        unint64_t v3 = a2 % v7;
        uint64_t v26 = *a1;
        unint64_t v27 = *(void **)(*a1 + 8 * (a2 % v7));
        if (v27) {
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t v3 = a2;
        uint64_t v26 = *a1;
        unint64_t v27 = *(void **)(*a1 + 8 * a2);
        if (v27) {
          goto LABEL_31;
        }
      }
      goto LABEL_91;
    }
LABEL_90:
    unint64_t v3 = v48 & a2;
    uint64_t v26 = *a1;
    unint64_t v27 = *(void **)(*a1 + 8 * (v48 & a2));
    if (v27) {
      goto LABEL_31;
    }
    goto LABEL_91;
  }
  uint64_t v26 = *a1;
  unint64_t v27 = *(void **)(*a1 + 8 * v3);
  if (v27)
  {
LABEL_31:
    void *v15 = *v27;
LABEL_97:
    *unint64_t v27 = v15;
    goto LABEL_98;
  }
LABEL_91:
  void *v15 = *v13;
  *unint64_t v13 = v15;
  *(void *)(v26 + 8 * v3) = v13;
  if (*v15)
  {
    unint64_t v50 = *(void *)(*v15 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v50 >= v7) {
        v50 %= v7;
      }
    }
    else
    {
      v50 &= v7 - 1;
    }
    unint64_t v27 = (void *)(*a1 + 8 * v50);
    goto LABEL_97;
  }
LABEL_98:
  ++a1[3];
}

void sub_1A2853178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = a2[3];
  a1[2] = 0;
  a1[3] = v3;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v5 - *a2, 2);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = v7 + 2 * (v6 >> 1);
    do
    {
      if (v7 + v8) {
        *(_WORD *)(v7 + v8) = *(_WORD *)(v4 + v8);
      }
      v8 += 2;
    }
    while (v4 + v8 != v5);
    a1[1] = v7 + v8;
  }
  return a1;
}

void sub_1A2853250(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocator<geo::codec::Mesh>::construct[abi:ne180100]<geo::codec::Mesh>(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v2);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v4 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v3);
  *(void *)(a1 + 88) = v4;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t result = geo::codec::Allocator::instance(v4);
  *(void *)(a1 + 120) = result;
  return result;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_DWORD **)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      uint64_t v11 = 4 * a2;
      uint64_t v12 = &v4[a2];
      do
      {
        if (v4) {
          *uint64_t v4 = 0;
        }
        ++v4;
        v11 -= 4;
      }
      while (v11);
      uint64_t v4 = v12;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    uint64_t v6 = (uint64_t)v4 - *(void *)result;
    uint64_t v7 = v6 >> 2;
    unint64_t v8 = (v6 >> 2) + a2;
    if (v8 >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - *(void *)result;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      uint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * v10, 4);
    }
    else {
      uint64_t result = 0;
    }
    unint64_t v13 = (_DWORD *)(result + 4 * v7);
    uint64_t v14 = 4 * a2;
    uint64_t v15 = &v13[a2];
    uint64_t v16 = v13;
    do
    {
      if (v16) {
        *uint64_t v16 = 0;
      }
      ++v16;
      v14 -= 4;
    }
    while (v14);
    uint64_t v17 = *(void *)v3;
    uint64_t v18 = *(void *)(v3 + 8);
    if (v18 != *(void *)v3)
    {
      unint64_t v19 = v18 - *(void *)v3 - 4;
      if (v19 < 0x2C) {
        goto LABEL_35;
      }
      if ((unint64_t)(v18 - (v6 + result)) < 0x20) {
        goto LABEL_35;
      }
      uint64_t v20 = (v19 >> 2) + 1;
      uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v22 = v18 - v21;
      unint64_t v13 = (_DWORD *)((char *)v13 - v21);
      BOOL v23 = (_OWORD *)(result + 4 * v7 - 16);
      float v24 = (long long *)(v18 - 16);
      uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *BOOL v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 8;
      }
      while (v25);
      uint64_t v18 = v22;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          int v27 = *(_DWORD *)(v18 - 4);
          v18 -= 4;
          *--unint64_t v13 = v27;
        }
        while (v18 != v17);
      }
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v15;
    uint64_t v28 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + 4 * v10;
    if (v17) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v17, v28 - v17);
    }
  }
  return result;
}

void std::__shared_ptr_pointer<geo::codec::AssetLodInstance  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

geo::codec::AssetLodInstance *std::__shared_ptr_pointer<geo::codec::AssetLodInstance  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(geo::codec::AssetLodInstance **)(a1 + 24);
  if (result)
  {
    geo::codec::AssetLodInstance::~AssetLodInstance(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<geo::codec::AssetLodInstance  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN3geo5codec16AssetLodInstanceEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN3geo5codec16AssetLodInstanceEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN3geo5codec16AssetLodInstanceEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN3geo5codec16AssetLodInstanceEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 - *(void *)result;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      uint64_t v9 = 8 * v7;
      uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v7, 4);
      uint64_t v10 = (void *)(result + 8 * v6);
      unint64_t v7 = result + v9;
      if (result) {
        *uint64_t v10 = *a2;
      }
      uint64_t v11 = (uint64_t)(v10 + 1);
      uint64_t v13 = *(void *)v3;
      uint64_t v12 = *(void *)(v3 + 8);
      uint64_t v14 = v12 - *(void *)v3;
      if (v12 == *(void *)v3)
      {
LABEL_14:
        *(void *)uint64_t v3 = v10;
        *(void *)(v3 + 8) = v11;
        uint64_t v15 = *(void *)(v3 + 16);
        *(void *)(v3 + 16) = v7;
        if (!v12)
        {
LABEL_15:
          *(void *)(v3 + 8) = v11;
          return result;
        }
LABEL_26:
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v15 - v12);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)(8 * v6);
      uint64_t v11 = 8 * v6 + 8;
      uint64_t v13 = *(void *)result;
      uint64_t v12 = *(void *)(result + 8);
      uint64_t v14 = v12 - *(void *)result;
      if (v12 == *(void *)result) {
        goto LABEL_14;
      }
    }
    unint64_t v16 = v14 - 8;
    if (v16 < 0x38 || (unint64_t)(v12 - (void)v10) < 0x20)
    {
      uint64_t v19 = v12;
      uint64_t v20 = v10;
    }
    else
    {
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v19 = v12 - v18;
      uint64_t v20 = &v10[v18 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v21 = v10 - 2;
      uint64_t v22 = (long long *)(v12 - 16);
      uint64_t v23 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        uint64_t v12 = *(void *)v3;
        *(void *)uint64_t v3 = v20;
        *(void *)(v3 + 8) = v11;
        uint64_t v15 = *(void *)(v3 + 16);
        *(void *)(v3 + 16) = v7;
        if (!v12) {
          goto LABEL_15;
        }
        goto LABEL_26;
      }
    }
    do
    {
      uint64_t v25 = *(void *)(v19 - 8);
      v19 -= 8;
      *--uint64_t v20 = v25;
    }
    while (v19 != v13);
    goto LABEL_25;
  }
  if (v4) {
    *uint64_t v4 = *a2;
  }
  *(void *)(result + 8) = v4 + 1;
  return result;
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  BOOL v3 = __sz >= v2;
  std::vector<int>::size_type v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  uint64_t v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      uint64_t v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v8 = (char *)end - (char *)this->__begin_;
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + __n;
    if (v10 >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * __n;
    unint64_t v16 = (int *)&v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = (int *)&v14[v15];
    if (end != begin)
    {
      unint64_t v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)((char *)end - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      uint64_t v21 = &v13[4 * v9 - 16];
      uint64_t v22 = (long long *)(end - 4);
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<unsigned short>::__append(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      uint64_t v6 = &v5[2 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = (v8 >> 1) + a2;
    if (v10 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - (void)v7;
    if (v11 > v10) {
      uint64_t v10 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 < 0) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(2 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v9];
    size_t v15 = 2 * a2;
    unint64_t v16 = &v13[2 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 2;
      if (v18 < 0x1E) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 1) + 1;
      unint64_t v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[2 * v9 - 16];
      uint64_t v22 = v5 - 16;
      unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_31:
        do
        {
          __int16 v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void mgcl::tmesh::Decoder::~Decoder(gcl::tmesh::DecoderImpl ***this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1)
  {
    std::vector<int>::size_type v2 = *v1;
    uint64_t *v1 = 0;
    if (v2)
    {
      gcl::tmesh::DecoderImpl::~DecoderImpl(v2);
      MEMORY[0x1A6239270]();
    }
    MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  }
}

uint64_t gcl::ArithmeticDecoder::decodeExpGolomb(unsigned int *a1, int a2, _WORD *a3)
{
  int v3 = 0;
  unsigned int v4 = (unsigned __int16)*a3;
  unsigned int v6 = a1[7];
  unsigned int v5 = a1[8];
  if (v6 >= 0x40000001) {
    goto LABEL_12;
  }
LABEL_2:
  int v7 = a1[10];
  do
  {
    v5 *= 2;
    a1[10] = --v7;
    if (!v7)
    {
      uint64_t v10 = *((void *)a1 + 2);
      *((void *)a1 + 2) = v10 + 1;
      unint64_t v11 = *a1;
      if (v10 + 1 >= v11)
      {
        int v12 = 65280;
        unint64_t v13 = v10 + 2;
        *((void *)a1 + 2) = v13;
        if (v13 >= v11)
        {
LABEL_11:
          int v8 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        int v12 = *(unsigned __int8 *)(*((void *)a1 + 1) + v10 + 1) << 8;
        unint64_t v13 = v10 + 2;
        *((void *)a1 + 2) = v13;
        if (v13 >= v11) {
          goto LABEL_11;
        }
      }
      int v8 = *(unsigned __int8 *)(*((void *)a1 + 1) + v13);
LABEL_4:
      v5 |= v12 | v8;
      int v7 = 16;
      a1[10] = 16;
    }
    unsigned int v9 = 2 * v6;
    BOOL v16 = v6 >= 0x20000001;
    v6 *= 2;
  }
  while (!v16);
  while (1)
  {
    unsigned int v6 = (HIWORD(v9) * (unsigned __int16)v4) & 0xFFFF0000;
    unsigned int v14 = v9 - v6;
    if (v5 < v6) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = (HIWORD(v9) * (unsigned __int16)v4) & 0xFFFF0000;
    }
    BOOL v16 = v5 >= v6;
    v5 -= v15;
    int v17 = v16;
    v4 += *((unsigned __int16 *)a1 + ((v4 >> 7) & 0x1FE | v17) + 24);
    *a3 = v4;
    if (v16) {
      unsigned int v6 = v14;
    }
    a1[7] = v6;
    a1[8] = v5;
    if (!v16 || a2 >= 31) {
      break;
    }
    int v19 = 1 << a2++;
    v3 |= v19;
    if (v6 < 0x40000001) {
      goto LABEL_2;
    }
LABEL_12:
    unsigned int v9 = v6;
  }
  int v20 = 0;
  if (a2)
  {
    while (v6 >= 0x40000001)
    {
      unsigned int v22 = v6;
LABEL_31:
      unsigned int v23 = (v22 >> 1) & 0x7FFF0000;
      unsigned int v6 = v22 - v23;
      int v24 = v5 >= v23;
      if (v5 < v23)
      {
        unsigned int v6 = v23;
        unsigned int v23 = 0;
      }
      v5 -= v23;
      a1[7] = v6;
      a1[8] = v5;
      v20 |= v24 << --a2;
      if (!a2) {
        return (v20 + v3);
      }
    }
    int v25 = a1[10];
    while (1)
    {
      v5 *= 2;
      a1[10] = --v25;
      if (v25) {
        goto LABEL_38;
      }
      uint64_t v27 = *((void *)a1 + 2);
      *((void *)a1 + 2) = v27 + 1;
      unint64_t v28 = *a1;
      if (v27 + 1 >= v28)
      {
        int v29 = 65280;
        unint64_t v30 = v27 + 2;
        *((void *)a1 + 2) = v30;
        if (v30 >= v28)
        {
LABEL_44:
          int v26 = 255;
          goto LABEL_37;
        }
      }
      else
      {
        int v29 = *(unsigned __int8 *)(*((void *)a1 + 1) + v27 + 1) << 8;
        unint64_t v30 = v27 + 2;
        *((void *)a1 + 2) = v30;
        if (v30 >= v28) {
          goto LABEL_44;
        }
      }
      int v26 = *(unsigned __int8 *)(*((void *)a1 + 1) + v30);
LABEL_37:
      v5 |= v29 | v26;
      int v25 = 16;
      a1[10] = 16;
LABEL_38:
      unsigned int v22 = 2 * v6;
      BOOL v16 = v6 >= 0x20000001;
      v6 *= 2;
      if (v16) {
        goto LABEL_31;
      }
    }
  }
  return (v20 + v3);
}

uint64_t gcl::hls::checkBitstream(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!a1 || a2 < 0 || (unint64_t)a2 < 4) {
    return 3;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4 || (unint64_t)a2 < 0x10 || a1 == (_DWORD *)-16 || !a4) {
    return 3;
  }
  unsigned int v4 = (unsigned __int8 *)(a1 + 2);
  uint64_t v5 = 4 * a4;
  unint64_t v6 = a1[3];
  while (*a3 != *a1)
  {
    ++a3;
    v5 -= 4;
    if (!v5) {
      return 3;
    }
  }
  uint64_t v8 = 16;
  if (a2 > 16) {
    uint64_t v8 = a2;
  }
  BOOL v9 = (a2 & (unint64_t)~(a2 >> 63)) - v8 + 16 > v6 || a2 < (uint64_t)v6;
  if (v9 || a1 == (_DWORD *)-8 || (unsigned __int8 *)((char *)a1 + v6) < v4) {
    return 3;
  }
  unsigned int v10 = -1;
  for (unint64_t i = v6 - 8; i; --i)
  {
    int v12 = *v4++;
    unsigned int v10 = __const__ZN3gcl12computeCRC32EPKhm_table[v12 ^ HIBYTE(v10)] ^ (v10 << 8);
  }
  if (a1[1] == v10) {
    return 0;
  }
  else {
    return 3;
  }
}

unsigned __int8 *gcl::tmesh::DecoderImpl::initArithmeticDecoder(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (a3 < 4) {
    return 0;
  }
  unsigned int v10 = *a2;
  uint64_t v8 = (unsigned __int8 *)(a2 + 1);
  BOOL v9 = (unsigned __int8 *)v10;
  if (v8)
  {
    unint64_t v11 = &v9[(void)v8];
    if (!&v9[(void)v8]) {
      return 0;
    }
  }
  else
  {
    unint64_t v11 = v9;
    uint64_t v8 = 0;
    if (!v9) {
      return 0;
    }
  }
  if (a3 - 4 - (void)v9 < 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 2704) = v9;
  *(void *)(a1 + 2712) = v8;
  *(void *)&long long v3 = 0xFFFF000000000000;
  *((void *)&v3 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 2728) = v3;
  *(void *)(a1 + 2744) = 16;
  if (!v9)
  {
    int v4 = -16777216;
    goto LABEL_13;
  }
  int v4 = *v8 << 24;
  *(_DWORD *)(a1 + 2736) = v4;
  if (v9 == 1)
  {
LABEL_13:
    int v5 = v4 | 0xFF0000;
    goto LABEL_14;
  }
  int v5 = v4 | (v8[1] << 16);
  *(_DWORD *)(a1 + 2736) = v5;
  if (v9 <= 2)
  {
LABEL_14:
    int v6 = v5 | 0xFF00;
    goto LABEL_15;
  }
  int v6 = v5 | (v8[2] << 8);
  *(_DWORD *)(a1 + 2736) = v6;
  if (v9 == 3)
  {
LABEL_15:
    int v7 = 255;
    goto LABEL_16;
  }
  int v7 = v8[3];
LABEL_16:
  *(_DWORD *)(a1 + 2736) = v7 | v6;
  *(void *)(a1 + 2720) = 3;
  memcpy((void *)(a1 + 2752), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  return v11;
}

uint64_t gcl::tmesh::DecoderImpl::decompressPositionsAndConnectivity(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int *a7, int16x8_t a8)
{
  *(_DWORD *)(a1 + 3872) = 0;
  if (!a5 || !a6) {
    goto LABEL_59;
  }
  unsigned int v15 = (_DWORD *)gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo(a2, a3, a1 + 3776, a8);
  if (!v15) {
    goto LABEL_16;
  }
  if (v16 < 0) {
    goto LABEL_16;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 3784);
  if (a3 - v17 < 0) {
    goto LABEL_16;
  }
  if (!a2) {
    goto LABEL_16;
  }
  if ((unint64_t)v15 + v16 < a2) {
    goto LABEL_16;
  }
  unint64_t v18 = a2 + v17;
  if (v18 < (unint64_t)v15) {
    goto LABEL_16;
  }
  uint64_t v19 = v18 - (void)v15;
  if (v19 < 0) {
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 3780)
    || (char v20 = *(unsigned char *)(a1 + 3781), (v20 & 0xFC) != 4)
    || (int v21 = *(_DWORD *)(a1 + 3808), (v20 & 0xFE) == 4) && (v21 | 4) != 4 && *(unsigned char *)(a1 + 3800))
  {
    uint64_t result = 4;
    goto LABEL_60;
  }
  if ((*(_DWORD *)(a1 + 3812) - 3) < 2 || (v21 | 2) == 3)
  {
LABEL_16:
    uint64_t result = 3;
LABEL_60:
    *(_DWORD *)(a1 + 3872) = result;
    return result;
  }
  if ((unint64_t)v19 >= 4)
  {
    int v24 = *v15;
    if ((v19 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    {
      int v23 = 0;
      int v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      unsigned int v28 = *(unsigned __int8 *)(a1 + 3820);
      if (!*(unsigned char *)(a1 + 3820)) {
        goto LABEL_21;
      }
    }
    else
    {
      int v23 = v15[1];
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) == 8)
      {
        int v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        unsigned int v28 = *(unsigned __int8 *)(a1 + 3820);
        if (!*(unsigned char *)(a1 + 3820)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v26 = v19 - 12;
        uint64_t v27 = (unsigned __int8 *)(v15 + 3);
        int v25 = v15[2];
        unsigned int v28 = *(unsigned __int8 *)(a1 + 3820);
        if (!*(unsigned char *)(a1 + 3820)) {
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
    int v23 = 0;
    int v24 = 0;
    int v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    unsigned int v28 = *(unsigned __int8 *)(a1 + 3820);
    if (!*(unsigned char *)(a1 + 3820))
    {
LABEL_21:
      unsigned int v29 = 0;
      unsigned int v30 = 0;
      goto LABEL_36;
    }
  }
  if (v26)
  {
    unsigned int v28 = *v27;
    if (v26 == 1)
    {
      unsigned int v29 = 0;
    }
    else
    {
      unsigned int v29 = v27[1];
      if (v26 != 2)
      {
        v26 -= 3;
        unsigned int v30 = v27[2];
        v27 += 3;
        goto LABEL_36;
      }
    }
    unsigned int v30 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    unsigned int v29 = 0;
    unsigned int v28 = 0;
    unsigned int v30 = 0;
    uint64_t v27 = 0;
  }
LABEL_36:
  if (!v27) {
    goto LABEL_16;
  }
  unsigned int v31 = (int)v28 <= (int)v29 ? v29 : v28;
  int v32 = v28 <= v29 ? v29 : v28;
  unsigned int v33 = v31 >= v30 ? v32 : v30;
  if (v33 >= 0x1D) {
    goto LABEL_16;
  }
  *(_DWORD *)(a1 + 2688) = v28;
  *(_DWORD *)(a1 + 2692) = v29;
  *(_DWORD *)(a1 + 2696) = v30;
  gcl::tmesh::DecoderImpl::init((gcl::tmesh::DecoderImpl *)a1, *(_DWORD *)(a1 + 3788), *(_DWORD *)(a1 + 3792));
  inited = gcl::tmesh::DecoderImpl::initArithmeticDecoder(a1, v27, v26);
  if (!inited) {
    goto LABEL_16;
  }
  uint64_t v36 = v35;
  if (v35 < 0) {
    goto LABEL_16;
  }
  size_t v37 = inited;
  uint64_t v38 = a6;
  if (*(unsigned char *)(a1 + 3800)) {
    uint64_t v38 = *(void *)(a1 + 128);
  }
  uint64_t v39 = *(void *)(a1 + 104);
  if (*(unsigned char *)(a1 + 3816)) {
    gcl::tmesh::DecoderImpl::decompressAdaptiveTraversal((_DWORD *)a1, v39, v38);
  }
  else {
    gcl::tmesh::DecoderImpl::decompress(a1, v39, v38);
  }
  if (!*(unsigned char *)(a1 + 3800))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 56), 2uLL);
    uint64_t v41 = *(_DWORD **)(a1 + 56);
    *uint64_t v41 = 0;
    v41[1] = *(_DWORD *)(a1 + 3792);
    goto LABEL_63;
  }
  if (!a7)
  {
LABEL_59:
    uint64_t result = 5;
    goto LABEL_60;
  }
  if (!gcl::tmesh::DecoderImpl::initArithmeticDecoder(a1, v37, v36) || v40 < 0) {
    goto LABEL_16;
  }
  gcl::tmesh::DecoderImpl::decompressTriangleOrder((gcl::tmesh::DecoderImpl *)a1, a7);
  gcl::tmesh::DecoderImpl::updateMappingInformation((std::vector<int> *)a1, a7, a6);
LABEL_63:
  uint64_t result = *(unsigned int *)(a1 + 3872);
  if (!result)
  {
    if (*(int *)(a1 + 3792) >= 1)
    {
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      do
      {
        uint64_t v44 = *(void *)(a1 + 128) + v42;
        uint64_t v45 = *(void *)(a6 + v42);
        *(_DWORD *)(v44 + 8) = *(_DWORD *)(a6 + v42 + 8);
        *(void *)uint64_t v44 = v45;
        ++v43;
        v42 += 12;
      }
      while (v43 < *(int *)(a1 + 3792));
    }
    int v46 = *(_DWORD *)(a1 + 3788);
    if (v24 || v23 || v25)
    {
      if (v46 >= 1)
      {
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        do
        {
          float v54 = (_DWORD *)(*(void *)(a1 + 104) + v52);
          int v55 = *v54 + v24;
          int v56 = v54[1] + v23;
          LODWORD(v54) = v54[2] + v25;
          BOOL v57 = (_DWORD *)(a5 + v52);
          *BOOL v57 = v55;
          v57[1] = v56;
          v57[2] = v54;
          ++v53;
          v52 += 12;
        }
        while (v53 < *(int *)(a1 + 3788));
      }
    }
    else if (v46 >= 1)
    {
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      do
      {
        int v49 = (uint64_t *)(*(void *)(a1 + 104) + v47);
        uint64_t v50 = a5 + v47;
        uint64_t v51 = *v49;
        *(_DWORD *)(v50 + 8) = *((_DWORD *)v49 + 2);
        *(void *)uint64_t v50 = v51;
        ++v48;
        v47 += 12;
      }
      while (v48 < *(int *)(a1 + 3788));
    }
    uint64_t result = 0;
    *a4 = *(unsigned int *)(a1 + 3784);
  }
  return result;
}

uint64_t gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t a4)
{
  if (a2 < 4) {
    return 0;
  }
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v4 == 12
    || v4 == 16
    || v4 == 20
    || a2 == 24
    || a2 == 25
    || a2 == 26
    || a2 == 27)
  {
    return 0;
  }
  if ((unint64_t)a2 < 0x20) {
    return 0;
  }
  if (*(_DWORD *)a1 != -90009999) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 4);
  char v7 = *(unsigned char *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 9);
  __int16 v9 = *(_WORD *)(a1 + 10);
  int v10 = *(_DWORD *)(a1 + 12);
  int v11 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  int v12 = *(_DWORD *)(a1 + 20) & 0x7FFFFFFF;
  int v13 = *(unsigned __int8 *)(a1 + 24);
  int v14 = *(unsigned __int8 *)(a1 + 25);
  unsigned int v15 = *(unsigned __int8 *)(a1 + 26);
  int v16 = *(unsigned __int8 *)(a1 + 27);
  *(uint16x4_t *)a4.i8 = vshl_u16((uint16x4_t)vdup_n_s16(v15), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL);
  *(_DWORD *)a3 = 0;
  *(unsigned char *)(a3 + 4) = v7;
  *(unsigned char *)(a3 + 5) = v8;
  *(_WORD *)(a3 + 6) = v9;
  *(_DWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 12) = v11;
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v16;
  *(unsigned char *)(a3 + 24) = v15 & 1;
  *(_DWORD *)(a3 + 28) = v6;
  *(_DWORD *)(a3 + 32) = v13;
  *(_DWORD *)(a3 + 36) = v14;
  a4.i32[0] &= 0xFF01FF01;
  a4.i16[2] &= 0xFF01u;
  a4.i16[3] &= 0xFF01u;
  *(_DWORD *)(a3 + 40) = vmovn_s16(a4).u32[0];
  *(unsigned char *)(a3 + 44) = (v15 & 0x20) != 0;
  return a1 + 32;
}

void gcl::tmesh::DecoderImpl::init(gcl::tmesh::DecoderImpl *this, int a2, int a3)
{
  uint64_t v7 = *((void *)this + 13);
  uint64_t v8 = *((void *)this + 14);
  int v6 = (char *)this + 104;
  unint64_t v9 = a2;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
  BOOL v11 = a2 >= v10;
  unint64_t v12 = a2 - v10;
  if (v12 != 0 && v11)
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)v6, v12);
  }
  else if (!v11)
  {
    *((void *)this + 14) = v7 + 12 * (int)v9;
  }
  *(void *)this = 0;
  uint64_t v13 = *((void *)this + 7);
  if (*((void *)this + 8) != v13) {
    *((void *)this + 8) = v13;
  }
  uint64_t v14 = *((void *)this + 16);
  *(void *)((char *)this + 3836) = 0;
  *((_DWORD *)this + 947) = a2;
  *((_DWORD *)this + 948) = a3;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 17) - v14) >> 2);
  if (a3 <= v15)
  {
    if (a3 < v15) {
      *((void *)this + 17) = v14 + 12 * a3;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)this + 128, a3 - v15);
  }
  uint64_t v17 = (char *)*((void *)this + 4);
  int v16 = (char *)*((void *)this + 5);
  unint64_t v18 = v16 - v17;
  if ((unint64_t)(v16 - v17) <= 0x3F)
  {
    uint64_t v19 = *((void *)this + 6);
    if (v19 - (uint64_t)v16 >= 64 - v18)
    {
      bzero(*((void **)this + 5), 64 - v18);
      *((void *)this + 5) = v17 + 64;
      goto LABEL_41;
    }
    unint64_t v20 = v19 - (void)v17;
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= 0x40) {
      uint64_t v21 = 64;
    }
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v22 = v21;
    }
    int v23 = (char *)operator new(v22);
    int v24 = &v23[v18];
    int v25 = &v23[v22];
    bzero(&v23[v18], 64 - v18);
    if (v16 == v17) {
      goto LABEL_39;
    }
    if (v18 >= 8 && (unint64_t)(v17 - v23) >= 0x20)
    {
      if (v18 < 0x20)
      {
        unint64_t v26 = 0;
        goto LABEL_31;
      }
      unint64_t v26 = v18 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v27 = v16 - 16;
      unsigned int v28 = &v23[v16 - 16 - v17];
      unint64_t v29 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v30 = *(_OWORD *)v27;
        *((_OWORD *)v28 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)unsigned int v28 = v30;
        v28 -= 32;
        v27 -= 32;
        v29 -= 32;
      }
      while (v29);
      if (v18 == v26) {
        goto LABEL_38;
      }
      if ((v18 & 0x18) != 0)
      {
LABEL_31:
        v24 -= v18 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v31 = &v16[-v26 - 8];
        int v32 = (char *)(v31 - v17);
        unint64_t v33 = v26 - (v18 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v34 = *(void *)v31;
          v31 -= 8;
          *(void *)&v32[(void)v23] = v34;
          v32 -= 8;
          v33 += 8;
        }
        while (v33);
        v16 -= v18 & 0xFFFFFFFFFFFFFFF8;
        if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_38;
        }
        goto LABEL_36;
      }
      v24 -= v26;
      v16 -= v26;
    }
LABEL_36:
    uint64_t v35 = v24 - 1;
    do
    {
      char v36 = *--v16;
      *v35-- = v36;
    }
    while (v16 != v17);
LABEL_38:
    int v16 = v17;
    int v24 = v23;
LABEL_39:
    *((void *)this + 4) = v24;
    *((void *)this + 5) = v23 + 64;
    *((void *)this + 6) = v25;
    if (v16) {
      operator delete(v16);
    }
    goto LABEL_41;
  }
  if (v18 != 64) {
    *((void *)this + 5) = v17 + 64;
  }
LABEL_41:
  uint64_t v37 = *((void *)this + 1);
  unint64_t v38 = *((void *)this + 2) - v37;
  if (v38 > 0xFF)
  {
    if (v38 != 256) {
      *((void *)this + 2) = v37 + 256;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 8), 64 - (v38 >> 2));
  }
  uint64_t v40 = (char *)*((void *)this + 19);
  uint64_t v39 = (char *)*((void *)this + 20);
  unint64_t v41 = (v39 - v40) >> 4;
  unint64_t v42 = v9 - v41;
  if (v9 <= v41)
  {
    if (v9 < v41)
    {
      uint64_t v39 = &v40[16 * v9];
      *((void *)this + 20) = v39;
    }
  }
  else
  {
    uint64_t v43 = *((void *)this + 21);
    if (v42 <= (v43 - (uint64_t)v39) >> 4)
    {
      bzero(*((void **)this + 20), 16 * v42);
      uint64_t v51 = &v39[16 * v42];
      *((void *)this + 20) = v51;
    }
    else
    {
      if (a2 < 0) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v44 = v43 - (void)v40;
      uint64_t v45 = v44 >> 3;
      if (v44 >> 3 <= v9) {
        uint64_t v45 = v9;
      }
      BOOL v11 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      if (!v11) {
        unint64_t v46 = v45;
      }
      if (v46 >> 60) {
        goto LABEL_130;
      }
      uint64_t v47 = 16 * v46;
      uint64_t v48 = (char *)operator new(16 * v46);
      int v49 = &v48[16 * v41];
      uint64_t v50 = &v48[v47];
      bzero(v49, 16 * v42);
      uint64_t v51 = &v49[16 * v42];
      if (v39 != v40)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v39 - 1);
          v49 -= 16;
          v39 -= 16;
        }
        while (v39 != v40);
        uint64_t v39 = (char *)*((void *)this + 19);
      }
      *((void *)this + 19) = v49;
      *((void *)this + 20) = v51;
      *((void *)this + 21) = v50;
      if (v39)
      {
        operator delete(v39);
        uint64_t v51 = (char *)*((void *)this + 20);
      }
    }
    uint64_t v40 = (char *)*((void *)this + 19);
    uint64_t v39 = v51;
  }
  if (v40 != v39) {
    memset(v40, 255, (v39 - v40) & 0xFFFFFFFFFFFFFFF0);
  }
  uint64_t v52 = (char *)*((void *)this + 22);
  uint64_t v53 = (char *)*((void *)this + 23);
  unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 2);
  if (v9 <= v54)
  {
    if (v9 < v54)
    {
      uint64_t v53 = &v52[12 * (int)v9];
      *((void *)this + 23) = v53;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)this + 176, v9 - v54);
    uint64_t v52 = (char *)*((void *)this + 22);
    uint64_t v53 = (char *)*((void *)this + 23);
  }
  if (v53 - v52 >= 1) {
    memset(v52, 255, 12 * ((v53 - v52) / 0xCuLL - ((unint64_t)(v53 - v52) > 0xB)) + 12);
  }
  int v55 = (char *)*((void *)this + 25);
  int v56 = (char *)*((void *)this + 26);
  unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 2);
  if (v9 <= v57)
  {
    if (v9 < v57)
    {
      int v56 = &v55[12 * (int)v9];
      *((void *)this + 26) = v56;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)this + 200, v9 - v57);
    int v55 = (char *)*((void *)this + 25);
    int v56 = (char *)*((void *)this + 26);
  }
  if (v56 - v55 >= 1) {
    memset(v55, 255, 12 * ((v56 - v55) / 0xCuLL - ((unint64_t)(v56 - v55) > 0xB)) + 12);
  }
  if (!*((unsigned char *)this + 3817) || !*((unsigned char *)this + 3816))
  {
    unint64_t v58 = (char *)*((void *)this + 10);
    unint64_t v59 = (char *)*((void *)this + 11);
    unint64_t v60 = (v59 - v58) >> 2;
    if (v9 <= v60)
    {
      if (v9 < v60)
      {
        unint64_t v59 = &v58[4 * v9];
        *((void *)this + 11) = v59;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v9 - v60);
      unint64_t v58 = (char *)*((void *)this + 10);
      unint64_t v59 = (char *)*((void *)this + 11);
    }
    if (v59 - v58 >= 1) {
      bzero(v58, 4 * (((unint64_t)(v59 - v58) >> 2) - ((unint64_t)(v59 - v58) > 3)) + 4);
    }
  }
  if (*((unsigned char *)this + 3816))
  {
    uint64_t v62 = (char *)*((void *)this + 28);
    uint64_t v61 = (char *)*((void *)this + 29);
    uint64_t v63 = (char *)(v61 - v62);
    unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v61 - v62) >> 2);
    unint64_t v65 = v9 - v64;
    if (v9 <= v64)
    {
      if (v9 >= v64)
      {
LABEL_113:
        float32x4_t v85 = (const void **)((char *)this + 256);
        while (1)
        {
          uint64_t v88 = *v85;
          long long v87 = v85[1];
          size_t v89 = v87 - (unsigned char *)*v85;
          if (v87 == *v85)
          {
            long long v91 = 0;
            uint64_t v90 = 0;
          }
          else
          {
            if ((v89 & 0x8000000000000000) != 0) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v90 = (char *)operator new(v87 - (unsigned char *)*v85);
            memcpy(v90, v88, v89);
            if (v89 > 0x1FF)
            {
              long long v86 = v90;
              goto LABEL_115;
            }
            v89 >>= 3;
            long long v91 = &v90[8 * v89];
          }
          long long v92 = (char *)operator new(0x200uLL);
          if (v91 != v90)
          {
            unint64_t v93 = (v91 - 8 - v90) & 0xFFFFFFFFFFFFFFF8;
            long long v86 = &v92[8 * v89 - v93 - 8];
            memcpy(v86, &v91[-v93 - 8], v93 + 8);
            if (!v90) {
              goto LABEL_115;
            }
LABEL_125:
            operator delete(v90);
            goto LABEL_115;
          }
          long long v86 = &v92[8 * v89];
          if (v90) {
            goto LABEL_125;
          }
LABEL_115:
          operator delete(v86);
          v85 += 3;
          if (v85 == (const void **)((char *)this + 1792)) {
            goto LABEL_126;
          }
        }
      }
      unint64_t v80 = &v62[12 * (int)v9];
    }
    else
    {
      uint64_t v66 = *((void *)this + 30);
      if (0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v61) >> 2) < v65)
      {
        if (a2 < 0) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v62) >> 2);
        unint64_t v68 = 0x5555555555555556 * ((v66 - (uint64_t)v62) >> 2);
        if (v68 <= v9) {
          unint64_t v68 = v9;
        }
        if (v67 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v69 = 0x1555555555555555;
        }
        else {
          unint64_t v69 = v68;
        }
        if (v69 <= 0x1555555555555555)
        {
          uint64_t v70 = (char *)operator new(12 * v69);
          unint64_t v71 = &v70[4 * ((v61 - v62) >> 2)];
          uint8x8_t v72 = &v70[12 * v9];
          unint64_t v73 = 12 * v9 - (void)v63 - 12;
          float v74 = v71;
          if (v73 < 0x54) {
            goto LABEL_135;
          }
          unint64_t v75 = v73 / 0xC + 1;
          float v74 = &v71[12 * (v75 & 0x3FFFFFFFFFFFFFF8)];
          uint64_t v76 = v75 & 0x3FFFFFFFFFFFFFF8;
          uint64_t v77 = &v70[4 * ((v61 - v62) >> 2)];
          do
          {
            *(_OWORD *)uint64_t v77 = xmmword_1A29CE9E0;
            *((_OWORD *)v77 + 1) = xmmword_1A29CE9D0;
            *((_OWORD *)v77 + 4) = xmmword_1A29CE9D0;
            *((_OWORD *)v77 + 5) = xmmword_1A29CE9C0;
            *((_OWORD *)v77 + 2) = xmmword_1A29CE9C0;
            *((_OWORD *)v77 + 3) = xmmword_1A29CE9E0;
            v77 += 96;
            v76 -= 8;
          }
          while (v76);
          if (v75 != (v75 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_135:
            do
            {
              *(void *)float v74 = 0xFFFFFFFF00000000;
              *((_DWORD *)v74 + 2) = -1;
              v74 += 12;
            }
            while (v74 != v72);
          }
          if (v61 != v62)
          {
            do
            {
              uint64_t v78 = *(void *)(v61 - 12);
              v61 -= 12;
              int v79 = *((_DWORD *)v61 + 2);
              *(void *)(v71 - 12) = v78;
              v71 -= 12;
              *((_DWORD *)v71 + 2) = v79;
            }
            while (v61 != v62);
            uint64_t v61 = (char *)*((void *)this + 28);
          }
          *((void *)this + 28) = v71;
          *((void *)this + 29) = v72;
          *((void *)this + 30) = &v70[12 * v69];
          if (v61) {
            operator delete(v61);
          }
          goto LABEL_113;
        }
LABEL_130:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v80 = &v61[12 * v65];
      unint64_t v81 = 12 * (int)v9 - (void)v63 - 12;
      if (v81 >= 0x54)
      {
        unint64_t v83 = v81 / 0xC + 1;
        uint64_t v82 = &v61[12 * (v83 & 0x3FFFFFFFFFFFFFF8)];
        uint64_t v84 = v83 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          *(_OWORD *)uint64_t v61 = xmmword_1A29CE9E0;
          *((_OWORD *)v61 + 1) = xmmword_1A29CE9D0;
          *((_OWORD *)v61 + 4) = xmmword_1A29CE9D0;
          *((_OWORD *)v61 + 5) = xmmword_1A29CE9C0;
          *((_OWORD *)v61 + 2) = xmmword_1A29CE9C0;
          *((_OWORD *)v61 + 3) = xmmword_1A29CE9E0;
          v61 += 96;
          v84 -= 8;
        }
        while (v84);
        if (v83 == (v83 & 0x3FFFFFFFFFFFFFF8)) {
          goto LABEL_112;
        }
      }
      else
      {
        uint64_t v82 = (char *)*((void *)this + 29);
      }
      do
      {
        *(void *)uint64_t v82 = 0xFFFFFFFF00000000;
        *((_DWORD *)v82 + 2) = -1;
        v82 += 12;
      }
      while (v82 != v80);
    }
LABEL_112:
    *((void *)this + 29) = v80;
    goto LABEL_113;
  }
LABEL_126:
  memset_pattern16((char *)this + 2048, &memset_pattern_27, 0xAuLL);
  *((_WORD *)this + 1029) = 0x8000;
  memset_pattern16((char *)this + 2060, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2076, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2092, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2108, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2124, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2140, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2146, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2152, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2158, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2164, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2170, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2176, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2182, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2188, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2194, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2200, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2206, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2212, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2218, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2224, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2230, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2240, &memset_pattern_27, 0x20uLL);
  *((_DWORD *)this + 559) = -2147450880;
  *((void *)this + 284) = 0x8000800080008000;
  memset_pattern16((char *)this + 2416, &memset_pattern_27, 6uLL);
  gcl::tmesh::ACContext::init((std::vector<int> *)this + 101, 3);
  gcl::tmesh::ACContext::init((std::vector<int> *)this + 106, 3);
}

void sub_1A2854EF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void gcl::tmesh::DecoderImpl::decompressAdaptiveTraversal(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3 = a1[948];
  uint64_t v205 = 0;
  int v4 = a1[947];
  if (v4 >= 1)
  {
    uint64_t v5 = (uint64_t)a1;
    uint64_t v6 = 0;
    int v196 = v3 + 1;
    int32x2_t v199 = a1 + 62;
    LODWORD(v7) = -1;
    do
    {
      if (v6 == HIDWORD(v205))
      {
        ++HIDWORD(v205);
        if (*(unsigned char *)(v5 + 3820)) {
          int v8 = -1;
        }
        else {
          int v8 = v7;
        }
        *(_DWORD *)(*(void *)(v5 + 176) + 12 * v6) = v8;
        gcl::tmesh::DecoderImpl::decompressGeometry(v5, v6, a2);
        gcl::MutableApproximatePriorityQueue<gcl::tmesh::VertexPriority,64>::insert(v199, (int *)(*(void *)(v5 + 224) + 12 * v6));
        int v9 = *(_DWORD *)(v5 + 248);
        if (v9)
        {
          uint64_t v193 = v6;
          while (1)
          {
            unsigned int v10 = *(_DWORD *)(v5 + 252);
            if ((v10 & 0x80000000) != 0)
            {
              uint64_t v13 = 0;
            }
            else
            {
              *(_DWORD *)(v5 + 248) = --v9;
              uint64_t v11 = v5 + 248 + 24 * v10;
              uint64_t v12 = *(void *)(v11 + 16);
              uint64_t v13 = *(void *)(v12 - 8);
              *(void *)(v11 + 16) = v12 - 8;
              *(_DWORD *)(v13 + 8) = -1;
              if (v9)
              {
                do
                {
                  if (*(void *)(v5 + 24 * v10 + 256) != *(void *)(v5 + 24 * v10 + 264)) {
                    break;
                  }
                  *(_DWORD *)(v5 + 252) = v10 - 1;
                  BOOL v14 = (int)v10-- <= 0;
                }
                while (!v14);
              }
              else
              {
                *(_DWORD *)(v5 + 252) = -1;
              }
            }
            unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *(void *)(v5 + 224)) >> 2);
            uint64_t v17 = (int *)(*(void *)(v5 + 152)
                        + ((uint64_t)(0xAAAAAAAB00000000 * ((v13 - *(void *)(v5 + 224)) >> 2)) >> 28));
            int v15 = *v17;
            int v16 = v17[1];
            BOOL v18 = *v17 != -1;
            BOOL v19 = v16 == *v17 && v15 != -1;
            unsigned int v20 = (v18 | (2 * (v16 != -1))) + v19;
            uint64_t v21 = v5 + 2 * v20;
            unsigned int v22 = *(unsigned __int16 *)(v21 + 2048);
            unsigned int v23 = *(_DWORD *)(v5 + 2732);
            unsigned int v24 = *(_DWORD *)(v5 + 2736);
            if (v23 < 0x40000001)
            {
              int v25 = *(_DWORD *)(v5 + 2744);
              while (1)
              {
                v24 *= 2;
                *(_DWORD *)(v5 + 2744) = --v25;
                if (v25) {
                  goto LABEL_27;
                }
                uint64_t v28 = *(void *)(v5 + 2720);
                *(void *)(v5 + 2720) = v28 + 1;
                unint64_t v29 = *(unsigned int *)(v5 + 2704);
                if (v28 + 1 >= v29)
                {
                  int v30 = 65280;
                  unint64_t v31 = v28 + 2;
                  *(void *)(v5 + 2720) = v31;
                  if (v31 >= v29)
                  {
LABEL_33:
                    int v26 = 255;
                    goto LABEL_26;
                  }
                }
                else
                {
                  int v30 = *(unsigned __int8 *)(*(void *)(v5 + 2712) + v28 + 1) << 8;
                  unint64_t v31 = v28 + 2;
                  *(void *)(v5 + 2720) = v31;
                  if (v31 >= v29) {
                    goto LABEL_33;
                  }
                }
                int v26 = *(unsigned __int8 *)(*(void *)(v5 + 2712) + v31);
LABEL_26:
                v24 |= v30 | v26;
                int v25 = 16;
                *(_DWORD *)(v5 + 2744) = 16;
LABEL_27:
                unsigned int v27 = 2 * v23;
                BOOL v41 = v23 >= 0x20000001;
                v23 *= 2;
                if (v41) {
                  goto LABEL_35;
                }
              }
            }
            unsigned int v27 = *(_DWORD *)(v5 + 2732);
LABEL_35:
            int v32 = (_WORD *)(v21 + 2048);
            unsigned int v33 = (HIWORD(v27) * v22) & 0xFFFF0000;
            unsigned int v34 = v27 - v33;
            unsigned int v35 = v24 < v33 ? 0 : (HIWORD(v27) * v22) & 0xFFFF0000;
            *(_DWORD *)(v5 + 2736) = v24 - v35;
            *int v32 = *(_WORD *)(v5 + 2 * ((v22 >> 7) & 0x1FE | (v24 >= v33)) + 2752) + v22;
            unsigned int v36 = v24 < v33 ? v33 : v34;
            *(_DWORD *)(v5 + 2732) = v36;
            if (v24 >= v33) {
              break;
            }
LABEL_11:
            if (!v9) {
              goto LABEL_3;
            }
          }
          uint64_t v194 = (int)v7;
          int v195 = v7;
          char v198 = (_DWORD *)(a2 + 12 * (int)v7);
          while (2)
          {
            int v204 = 0;
            int v43 = gcl::tmesh::DecoderImpl::decompressTFanConnectivity((gcl::tmesh::DecoderImpl *)v5, v7, v20, a3, &v204, (_DWORD *)&v205 + 1, &v205);
            if (v43 < 0 || (int v44 = v43, v43 > v196))
            {
LABEL_273:
              *(_DWORD *)(v5 + 3872) = 3;
              return;
            }
            BOOL v45 = v204 == 3 || v204 == 5;
            if (v45)
            {
              if (v43)
              {
                unint64_t v46 = v43 + 1;
                do
                {
                  uint64_t v47 = (v46 - 2);
                  if (*(unsigned char *)(*(void *)(v5 + 32) + v47)) {
                    gcl::tmesh::DecoderImpl::decompressGeometry(v5, *(_DWORD *)(*(void *)(v5 + 8) + 4 * v47), a2);
                  }
                  --v46;
                }
                while (v46 > 1);
                goto LABEL_69;
              }
            }
            else if (v43)
            {
              uint64_t v48 = 0;
              do
              {
                if (*(unsigned char *)(*(void *)(v5 + 32) + v48)) {
                  gcl::tmesh::DecoderImpl::decompressGeometry(v5, *(_DWORD *)(*(void *)(v5 + 8) + 4 * v48), a2);
                }
                ++v48;
              }
              while (v44 != v48);
LABEL_69:
              if (v44 > 1)
              {
                if (*(unsigned char *)(v5 + 3818))
                {
                  uint64_t v49 = *(void *)(v5 + 224);
                  uint64_t v50 = v44 - 1;
                  uint64_t v51 = (int *)(*(void *)(v5 + 8) + 4);
                  while (1)
                  {
                    int v53 = *(v51 - 1);
                    int v52 = *v51;
                    unint64_t v54 = (_DWORD *)(a2 + 12 * v53);
                    int v55 = (int *)(a2 + 12 * *v51);
                    int v57 = *v55;
                    int v56 = v55[1];
                    int v58 = v54[1];
                    int v59 = *v55 - *v54;
                    int v60 = v56 - v58;
                    int v61 = v55[2];
                    int v62 = v54[2];
                    int v63 = v61 - v62;
                    int v64 = v198[1];
                    int v65 = *v198 - *v54;
                    int v66 = v64 - v58;
                    int v67 = v198[2];
                    int v68 = v67 - v62;
                    if (v59 >= 0) {
                      unsigned int v69 = v59;
                    }
                    else {
                      unsigned int v69 = -v59;
                    }
                    if (v60 >= 0) {
                      unsigned int v70 = v60;
                    }
                    else {
                      unsigned int v70 = -v60;
                    }
                    if (v63 >= 0) {
                      unsigned int v71 = v63;
                    }
                    else {
                      unsigned int v71 = -v63;
                    }
                    BOOL v74 = v69 < 0x1000 && v70 < 0x1000 && v71 < 0x1000;
                    if (v65 >= 0) {
                      unsigned int v75 = v65;
                    }
                    else {
                      unsigned int v75 = -v65;
                    }
                    if (v66 >= 0) {
                      unsigned int v76 = v66;
                    }
                    else {
                      unsigned int v76 = -v66;
                    }
                    if (v68 >= 0) {
                      unsigned int v77 = v68;
                    }
                    else {
                      unsigned int v77 = -v68;
                    }
                    if (v74 && v75 <= 0xFFF && v76 <= 0xFFF && v77 <= 0xFFF)
                    {
                      int v78 = v65 * v59 + v66 * v60 + v68 * v63;
                      if (!v78) {
                        goto LABEL_145;
                      }
                      int v79 = v68 * v60 - v66 * v63;
                      if (v79 < 0) {
                        int v79 = v66 * v63 - v68 * v60;
                      }
                      int v80 = v65 * v63 - v68 * v59;
                      if (v80 < 0) {
                        int v80 = -v80;
                      }
                      int v81 = v66 * v59 - v65 * v60;
                      if (v81 < 0) {
                        int v81 = -v81;
                      }
                      int v82 = v79 + v80;
                      if (v80 < v81)
                      {
                        int v83 = v81;
                      }
                      else
                      {
                        int v82 = v79 + v81;
                        int v83 = v80;
                      }
                      BOOL v84 = v79 >= v80 && v79 >= v81;
                      if (v84) {
                        unsigned int v85 = v80 + v81;
                      }
                      else {
                        unsigned int v85 = v82;
                      }
                      if (v84) {
                        int v86 = v79;
                      }
                      else {
                        int v86 = v83;
                      }
                      unsigned int v87 = v86 + (v85 >> 2);
                      if (v78 < 0) {
                        LODWORD(v88) = -16 * v78 / (int)(v87 - v78) + 16;
                      }
                      else {
                        LODWORD(v88) = (int)(16 * v87) / (int)(v87 + v78);
                      }
                    }
                    else
                    {
                      uint64_t v89 = v66 * (uint64_t)v60 + v65 * (uint64_t)v59 + v68 * (uint64_t)v63;
                      if (!v89)
                      {
LABEL_145:
                        LODWORD(v88) = 16;
                        goto LABEL_148;
                      }
                      uint64_t v90 = v68 * (uint64_t)v60 - v66 * (uint64_t)v63;
                      if (v90 < 0) {
                        uint64_t v90 = v66 * (uint64_t)v63 - v68 * (uint64_t)v60;
                      }
                      uint64_t v91 = v65 * (uint64_t)v63 - v68 * (uint64_t)v59;
                      if (v91 < 0) {
                        uint64_t v91 = -v91;
                      }
                      uint64_t v92 = v66 * (uint64_t)v59 - v65 * (uint64_t)v60;
                      if (v92 < 0) {
                        uint64_t v92 = -v92;
                      }
                      uint64_t v93 = v90 + v91;
                      if (v91 < (unint64_t)v92)
                      {
                        uint64_t v94 = v92;
                      }
                      else
                      {
                        uint64_t v93 = v90 + v92;
                        uint64_t v94 = v91;
                      }
                      BOOL v95 = v90 >= (unint64_t)v91 && v90 >= (unint64_t)v92;
                      if (v95) {
                        unint64_t v96 = v91 + v92;
                      }
                      else {
                        unint64_t v96 = v93;
                      }
                      if (v95) {
                        uint64_t v97 = v90;
                      }
                      else {
                        uint64_t v97 = v94;
                      }
                      uint64_t v88 = v97 + (v96 >> 2);
                      if (v89 < 0) {
                        LODWORD(v88) = -16 * v89 / (v88 - v89) + 16;
                      }
                      else {
                        uint64_t v88 = 16 * v88 / (v88 + v89);
                      }
                    }
LABEL_148:
                    int v98 = *v198 - v57;
                    int v99 = v64 - v56;
                    int v100 = v67 - v61;
                    int v101 = -v59;
                    int v102 = -v60;
                    int v103 = -v63;
                    if (v98 >= 0) {
                      unsigned int v104 = v98;
                    }
                    else {
                      unsigned int v104 = -v98;
                    }
                    BOOL v105 = v104 < 0x1000 && v74;
                    if (v99 >= 0) {
                      unsigned int v106 = v99;
                    }
                    else {
                      unsigned int v106 = -v99;
                    }
                    if (v100 >= 0) {
                      unsigned int v107 = v100;
                    }
                    else {
                      unsigned int v107 = -v100;
                    }
                    if (!v105 || v106 > 0xFFF || v107 > 0xFFF)
                    {
                      uint64_t v113 = v99 * (uint64_t)v102 + v98 * (uint64_t)v101 + v100 * (uint64_t)v103;
                      if (v113)
                      {
                        int v114 = -v59;
                        uint64_t v115 = v100 * (uint64_t)v102 - v99 * (uint64_t)v103;
                        if (v115 < 0) {
                          uint64_t v115 = v99 * (uint64_t)v103 - v100 * (uint64_t)v102;
                        }
                        uint64_t v116 = v98 * (uint64_t)v103 - v100 * (uint64_t)v114;
                        if (v116 < 0) {
                          uint64_t v116 = -v116;
                        }
                        uint64_t v117 = v99 * (uint64_t)v114 - v98 * (uint64_t)v102;
                        if (v117 < 0) {
                          uint64_t v117 = -v117;
                        }
                        uint64_t v118 = v115 + v116;
                        if (v116 < (unint64_t)v117)
                        {
                          uint64_t v119 = v117;
                        }
                        else
                        {
                          uint64_t v118 = v115 + v117;
                          uint64_t v119 = v116;
                        }
                        BOOL v120 = v115 >= (unint64_t)v116 && v115 >= (unint64_t)v117;
                        if (v120) {
                          unint64_t v121 = v116 + v117;
                        }
                        else {
                          unint64_t v121 = v118;
                        }
                        if (v120) {
                          uint64_t v122 = v115;
                        }
                        else {
                          uint64_t v122 = v119;
                        }
                        unint64_t v123 = v122 + (v121 >> 2);
                        if (v113 < 0) {
                          LODWORD(v113) = -16 * v113 / (uint64_t)(v123 - v113) + 16;
                        }
                        else {
                          uint64_t v113 = (uint64_t)(16 * v123) / (uint64_t)(v123 + v113);
                        }
                        goto LABEL_202;
                      }
LABEL_195:
                      LODWORD(v113) = 16;
                      goto LABEL_202;
                    }
                    int v108 = v98 * v101 + v99 * v102 + v100 * v103;
                    if (!v108) {
                      goto LABEL_195;
                    }
                    int v109 = v99 * v63 + v100 * v102;
                    if (v109 < 0) {
                      int v109 = -v109;
                    }
                    int v110 = v98 * v103 + v100 * v59;
                    if (v110 < 0) {
                      int v110 = -v110;
                    }
                    int v111 = v98 * v60 + v99 * v101;
                    if (v111 < 0) {
                      int v111 = -v111;
                    }
                    if (v109 < v110 || v109 < v111)
                    {
                      unsigned int v124 = v109 + v110;
                      int v125 = v109 + v111;
                      if (v110 < v111)
                      {
                        int v126 = v111;
                      }
                      else
                      {
                        unsigned int v124 = v125;
                        int v126 = v110;
                      }
                      unsigned int v112 = v126 + (v124 >> 2);
                      if (v108 < 0)
                      {
LABEL_173:
                        LODWORD(v113) = -16 * v108 / (int)(v112 - v108) + 16;
                        goto LABEL_202;
                      }
                    }
                    else
                    {
                      unsigned int v112 = v109 + ((v110 + v111) >> 2);
                      if (v108 < 0) {
                        goto LABEL_173;
                      }
                    }
                    LODWORD(v113) = (int)(16 * v112) / (int)(v112 + v108);
LABEL_202:
                    uint64_t v127 = 12 * v53;
                    *(_DWORD *)(v49 + v127) += v88;
                    uint64_t v128 = 12 * v52;
                    int v129 = *(_DWORD *)(v49 + v128) + v113;
                    *(_DWORD *)(v49 + v128) = v129;
                    if ((*(_DWORD *)(v49 + v127) & 0x80000000) != 0 || v129 < 0) {
                      goto LABEL_273;
                    }
                    if (*(_DWORD *)(v5 + 3872)) {
                      return;
                    }
                    ++v51;
                    if (!--v50) {
                      goto LABEL_209;
                    }
                  }
                }
                uint64_t v130 = *(void *)(v5 + 224);
                uint64_t v131 = v44 - 1;
                float v132 = (int *)(*(void *)(v5 + 8) + 4);
                do
                {
                  int v133 = *v132;
                  *(_DWORD *)(v130 + 12 * *(v132 - 1)) += 8;
                  *(_DWORD *)(v130 + 12 * v133) += 8;
                  ++v132;
                  --v131;
                }
                while (v131);
              }
LABEL_209:
              if (v44 >= 1)
              {
                uint64_t v134 = 0;
                uint64_t v135 = v44;
                uint64_t v200 = v44;
                while (1)
                {
                  int v139 = *(_DWORD *)(*(void *)(v5 + 8) + 4 * v134);
                  uint64_t v140 = *(void *)(v5 + 224);
                  if (*(unsigned char *)(*(void *)(v5 + 32) + v134))
                  {
                    int v141 = *(_DWORD *)(v5 + 252);
                    goto LABEL_218;
                  }
                  uint64_t v158 = *(unsigned int *)(v140 + 12 * v139 + 8);
                  if ((v158 & 0x80000000) == 0) {
                    break;
                  }
LABEL_215:
                  if (++v134 == v135) {
                    goto LABEL_258;
                  }
                }
                uint64_t v159 = v5 + 24 * *(int *)(v140 + 12 * v139 + 4);
                double v160 = (uint64_t *)(v159 + 264);
                uint64_t v163 = v159 + 256;
                uint64_t v161 = *(void *)(v159 + 256);
                uint64_t v162 = *(void *)(v163 + 8);
                int v164 = ((unint64_t)(v162 - v161) >> 3) - 1;
                if (v158 != v164)
                {
                  uint64_t v165 = 8 * v164;
                  uint64_t v166 = *(void *)(v161 + 8 * v158);
                  *(void *)(v161 + 8 * v158) = *(void *)(v161 + v165);
                  *(void *)(v161 + v165) = v166;
                  *(_DWORD *)(*(void *)(v161 + 8 * v158) + 8) = v158;
                  *(_DWORD *)(v166 + 8) = v164;
                  uint64_t v162 = *v160;
                }
                uint64_t v167 = *(void *)(v162 - 8);
                uint64_t *v160 = v162 - 8;
                *(_DWORD *)(v167 + 8) = -1;
                BOOL v45 = (*v199)-- == 1;
                if (v45)
                {
                  int v141 = -1;
                  *(_DWORD *)(v5 + 252) = -1;
                }
                else
                {
                  unsigned int v168 = *(_DWORD *)(v5 + 252);
                  int v141 = v168;
                  if ((v168 & 0x80000000) == 0)
                  {
                    while (*(void *)(v5 + 24 * v168 + 256) == *(void *)(v5 + 24 * v168 + 264))
                    {
                      int v141 = v168 - 1;
                      *(_DWORD *)(v5 + 252) = v168 - 1;
                      BOOL v14 = (int)v168-- <= 0;
                      if (v14)
                      {
                        if (v167) {
                          goto LABEL_218;
                        }
                        goto LABEL_215;
                      }
                    }
                    int v141 = v168;
                    if (v167) {
                      goto LABEL_218;
                    }
                    goto LABEL_215;
                  }
                }
LABEL_218:
                uint64_t v142 = (int *)(v140 + 12 * v139);
                if (*v142 >= 63) {
                  int v143 = 63;
                }
                else {
                  int v143 = *v142;
                }
                if (v143 <= v141) {
                  int v144 = v141;
                }
                else {
                  int v144 = v143;
                }
                *(_DWORD *)(v5 + 252) = v144;
                uint64_t v145 = (void *)(v5 + 24 * v143);
                char v146 = (int ***)(v145 + 32);
                double v147 = v145 + 33;
                uint64_t v148 = (char *)v145[32];
                double v149 = (int **)v145[33];
                uint64_t v150 = ((char *)v149 - v148) >> 3;
                uint64_t v151 = v140 + 12 * v139;
                *(_DWORD *)(v151 + 4) = v143;
                *(_DWORD *)(v151 + 8) = v150;
                unint64_t v152 = v145[34];
                if ((unint64_t)v149 >= v152)
                {
                  unint64_t v153 = v150 + 1;
                  if ((unint64_t)(v150 + 1) >> 61) {
                    std::vector<double>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v154 = v152 - (void)v148;
                  if (v154 >> 2 > v153) {
                    unint64_t v153 = v154 >> 2;
                  }
                  if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  unint64_t v202 = v153;
                  if (v153)
                  {
                    if (v153 >> 61) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    double v155 = operator new(8 * v153);
                    char v146 = (int ***)(v145 + 32);
                    double v147 = v145 + 33;
                    uint64_t v5 = (uint64_t)a1;
                    double v156 = (int **)&v155[8 * v150];
                    void *v156 = v142;
                    uint64_t v136 = (uint64_t)(v156 + 1);
                    int v157 = (char *)((char *)v149 - v148);
                    if (v149 == (int **)v148)
                    {
LABEL_252:
                      *char v146 = v156;
                      *double v147 = v136;
                      v145[34] = &v155[8 * v202];
                      if (v149)
                      {
                        unint64_t v178 = v146;
                        unint64_t v179 = v147;
                        operator delete(v149);
                        double v147 = v179;
                        uint64_t v5 = (uint64_t)a1;
                        char v146 = v178;
                      }
                      uint64_t v135 = v200;
                      goto LABEL_212;
                    }
                  }
                  else
                  {
                    double v155 = 0;
                    double v156 = (int **)(8 * v150);
                    *(void *)(8 * v150) = v142;
                    uint64_t v136 = 8 * v150 + 8;
                    int v157 = (char *)((char *)v149 - v148);
                    if (v149 == (int **)v148) {
                      goto LABEL_252;
                    }
                  }
                  unint64_t v169 = (unint64_t)(v157 - 8);
                  if (v169 < 0x58) {
                    goto LABEL_279;
                  }
                  if ((char *)v149 - v155 - (((char *)v149 - v148) & 0xFFFFFFFFFFFFFFF8) < 0x20) {
                    goto LABEL_279;
                  }
                  uint64_t v170 = (v169 >> 3) + 1;
                  uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
                  unint64_t v172 = &v149[v171 / 0xFFFFFFFFFFFFFFF8];
                  double v156 = (int **)((char *)v156 - v171);
                  char v173 = &v155[8 * v150 - 16];
                  unint64_t v174 = v149 - 2;
                  uint64_t v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v176 = *(_OWORD *)v174;
                    *(v173 - 1) = *((_OWORD *)v174 - 1);
                    *char v173 = v176;
                    v173 -= 2;
                    v174 -= 4;
                    v175 -= 4;
                  }
                  while (v175);
                  double v149 = v172;
                  if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_279:
                    do
                    {
                      int32x2_t v177 = *--v149;
                      *--double v156 = v177;
                    }
                    while (v149 != (int **)v148);
                  }
                  double v149 = *v146;
                  goto LABEL_252;
                }
                void *v149 = v142;
                uint64_t v136 = (uint64_t)(v149 + 1);
LABEL_212:
                *double v147 = v136;
                ++*(_DWORD *)(v5 + 248);
                uint64_t v137 = v5 + 248 + 4 * v143;
                unint64_t v138 = (unint64_t)(v136 - (void)*v146) >> 3;
                if (*(_DWORD *)(v137 + 1544) > (int)v138) {
                  LODWORD(v138) = *(_DWORD *)(v137 + 1544);
                }
                *(_DWORD *)(v137 + 1544) = v138;
                goto LABEL_215;
              }
            }
LABEL_258:
            if (*(_DWORD *)(v5 + 3872)) {
              return;
            }
            int v180 = *(_DWORD *)(*(void *)(v5 + 152) + 16 * v194);
            int v181 = *(_DWORD *)(*(void *)(v5 + 152) + 16 * v194 + 4);
            BOOL v182 = v181 != -1;
            BOOL v183 = v180 != -1;
            BOOL v184 = v181 == v180 && v180 != -1;
            unsigned int v185 = *(_DWORD *)(v5 + 2732);
            unsigned int v186 = *(_DWORD *)(v5 + 2736);
            if (v185 < 0x40000001)
            {
              int v187 = *(_DWORD *)(v5 + 2744);
              LODWORD(v7) = v195;
              while (2)
              {
                v186 *= 2;
                *(_DWORD *)(v5 + 2744) = --v187;
                if (v187) {
                  goto LABEL_266;
                }
                uint64_t v189 = *(void *)(v5 + 2720);
                *(void *)(v5 + 2720) = v189 + 1;
                unint64_t v190 = *(unsigned int *)(v5 + 2704);
                if (v189 + 1 >= v190)
                {
                  int v191 = 65280;
                  unint64_t v192 = v189 + 2;
                  *(void *)(v5 + 2720) = v192;
                  if (v192 >= v190) {
                    goto LABEL_272;
                  }
                }
                else
                {
                  int v191 = *(unsigned __int8 *)(*(void *)(v5 + 2712) + v189 + 1) << 8;
                  unint64_t v192 = v189 + 2;
                  *(void *)(v5 + 2720) = v192;
                  if (v192 >= v190)
                  {
LABEL_272:
                    int v188 = 255;
LABEL_265:
                    v186 |= v191 | v188;
                    int v187 = 16;
                    *(_DWORD *)(v5 + 2744) = 16;
LABEL_266:
                    unsigned int v37 = 2 * v185;
                    BOOL v41 = v185 >= 0x20000001;
                    v185 *= 2;
                    if (v41) {
                      goto LABEL_44;
                    }
                    continue;
                  }
                }
                break;
              }
              int v188 = *(unsigned __int8 *)(*(void *)(v5 + 2712) + v192);
              goto LABEL_265;
            }
            unsigned int v37 = *(_DWORD *)(v5 + 2732);
            LODWORD(v7) = v195;
LABEL_44:
            unsigned int v20 = (v183 | (2 * v182)) + v184;
            unsigned int v38 = *(unsigned __int16 *)(v5 + 2058);
            unsigned int v39 = (HIWORD(v37) * v38) & 0xFFFF0000;
            if (v186 < v39) {
              unsigned int v40 = 0;
            }
            else {
              unsigned int v40 = (HIWORD(v37) * v38) & 0xFFFF0000;
            }
            *(_DWORD *)(v5 + 2736) = v186 - v40;
            BOOL v41 = v186 >= v39;
            *(_WORD *)(v5 + 2058) = *(_WORD *)(v5 + 2 * ((v38 >> 7) & 0x1FE | (v186 >= v39)) + 2752) + v38;
            if (v186 < v39) {
              unsigned int v42 = (HIWORD(v37) * v38) & 0xFFFF0000;
            }
            else {
              unsigned int v42 = v37 - v39;
            }
            *(_DWORD *)(v5 + 2732) = v42;
            if (!v41)
            {
              int v9 = *v199;
              uint64_t v6 = v193;
              goto LABEL_11;
            }
            continue;
          }
        }
LABEL_3:
        int v4 = *(_DWORD *)(v5 + 3788);
      }
      ++v6;
    }
    while (v6 < v4);
  }
}

void gcl::tmesh::DecoderImpl::decompress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v60 = 0;
  if (*(int *)(a1 + 3788) >= 1)
  {
    int v6 = 0;
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    LODWORD(v9) = -1;
    while (1)
    {
      while (v7 != v6)
      {
        if (++v7 >= *(int *)(a1 + 3788)) {
          return;
        }
      }
      int v10 = v6 + 1;
      int v61 = v6 + 1;
      int v11 = *(unsigned char *)(a1 + 3820) ? -1 : v9;
      *(_DWORD *)(*(void *)(a1 + 176) + 12 * v7) = v11;
      gcl::tmesh::DecoderImpl::decompressGeometry(a1, v7, a2);
      if ((int)v8 <= v6) {
        break;
      }
LABEL_73:
      ++v7;
      int v6 = v10;
      if (v7 >= *(int *)(a1 + 3788)) {
        return;
      }
    }
    uint64_t v8 = (int)v8;
    uint64_t v12 = *(void *)(a1 + 152);
    unsigned int v13 = *(_DWORD *)(a1 + 2732);
    unsigned int v14 = *(_DWORD *)(a1 + 2736);
    while (1)
    {
LABEL_9:
      uint64_t v9 = v8;
      int v15 = (int *)(v12 + 16 * v8);
      int v17 = *v15;
      int v16 = v15[1];
      BOOL v18 = v16 != -1;
      BOOL v19 = v17 != -1;
      BOOL v20 = v16 == v17 && v17 != -1;
      if (v13 < 0x40000001)
      {
        int v21 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v14 *= 2;
          *(_DWORD *)(a1 + 2744) = --v21;
          if (v21) {
            goto LABEL_16;
          }
          uint64_t v24 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v24 + 1;
          unint64_t v25 = *(unsigned int *)(a1 + 2704);
          if (v24 + 1 >= v25)
          {
            int v26 = 65280;
            unint64_t v27 = v24 + 2;
            *(void *)(a1 + 2720) = v27;
            if (v27 >= v25)
            {
LABEL_22:
              int v22 = 255;
              goto LABEL_15;
            }
          }
          else
          {
            int v26 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v24 + 1) << 8;
            unint64_t v27 = v24 + 2;
            *(void *)(a1 + 2720) = v27;
            if (v27 >= v25) {
              goto LABEL_22;
            }
          }
          int v22 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v27);
LABEL_15:
          v14 |= v26 | v22;
          int v21 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_16:
          unsigned int v23 = 2 * v13;
          BOOL v33 = v13 >= 0x20000001;
          v13 *= 2;
          if (v33) {
            goto LABEL_24;
          }
        }
      }
      unsigned int v23 = v13;
LABEL_24:
      unsigned int v28 = (v19 | (2 * v18)) + v20;
      unint64_t v29 = (_WORD *)(a1 + 2 * v28 + 2048);
      unsigned int v30 = (unsigned __int16)*v29;
      unsigned int v13 = (HIWORD(v23) * v30) & 0xFFFF0000;
      unsigned int v31 = v14 < v13 ? 0 : (HIWORD(v23) * v30) & 0xFFFF0000;
      unsigned int v32 = v14 - v31;
      *(_DWORD *)(a1 + 2736) = v32;
      BOOL v33 = v14 >= v13;
      *unint64_t v29 = *(_WORD *)(a1 + 2 * ((v30 >> 7) & 0x1FE | (v14 >= v13)) + 2752) + v30;
      unsigned int v34 = v14 < v13 ? (HIWORD(v23) * v30) & 0xFFFF0000 : v23 - v13;
      *(_DWORD *)(a1 + 2732) = v34;
      if (v33) {
        break;
      }
      unsigned int v14 = v32;
      ++v8;
      if (v9 + 1 >= v10) {
        goto LABEL_73;
      }
    }
    while (1)
    {
      int v59 = 0;
      unsigned int v38 = gcl::tmesh::DecoderImpl::decompressTFanConnectivity((gcl::tmesh::DecoderImpl *)a1, v8, v28, a3, &v59, &v61, &v60);
      if ((v38 & 0x80000000) != 0 || (int)v38 > *(_DWORD *)(a1 + 3792) + 1) {
        break;
      }
      if (v59 == 3 || v59 == 5)
      {
        if (v38)
        {
          unint64_t v40 = v38 + 1;
          do
          {
            uint64_t v41 = (v40 - 2);
            if (*(unsigned char *)(*(void *)(a1 + 32) + v41)) {
              gcl::tmesh::DecoderImpl::decompressGeometry(a1, *(_DWORD *)(*(void *)(a1 + 8) + 4 * v41), a2);
            }
            --v40;
          }
          while (v40 > 1);
        }
      }
      else if (v38)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v38;
        do
        {
          if (*(unsigned char *)(*(void *)(a1 + 32) + v42)) {
            gcl::tmesh::DecoderImpl::decompressGeometry(a1, *(_DWORD *)(*(void *)(a1 + 8) + 4 * v42), a2);
          }
          ++v42;
        }
        while (v43 != v42);
      }
      uint64_t v12 = *(void *)(a1 + 152);
      int v44 = (int *)(v12 + 16 * v8);
      int v46 = *v44;
      int v45 = v44[1];
      BOOL v47 = v45 != -1;
      BOOL v48 = v46 != -1;
      BOOL v49 = v45 == v46 && v46 != -1;
      unsigned int v50 = *(unsigned __int16 *)(a1 + 2058);
      unsigned int v51 = *(_DWORD *)(a1 + 2732);
      unsigned int v52 = *(_DWORD *)(a1 + 2736);
      if (v51 < 0x40000001)
      {
        int v53 = *(_DWORD *)(a1 + 2744);
        while (2)
        {
          v52 *= 2;
          *(_DWORD *)(a1 + 2744) = --v53;
          if (v53) {
            goto LABEL_65;
          }
          uint64_t v55 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v55 + 1;
          unint64_t v56 = *(unsigned int *)(a1 + 2704);
          if (v55 + 1 >= v56)
          {
            int v57 = 65280;
            unint64_t v58 = v55 + 2;
            *(void *)(a1 + 2720) = v58;
            if (v58 >= v56) {
              goto LABEL_71;
            }
          }
          else
          {
            int v57 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v55 + 1) << 8;
            unint64_t v58 = v55 + 2;
            *(void *)(a1 + 2720) = v58;
            if (v58 >= v56)
            {
LABEL_71:
              int v54 = 255;
LABEL_64:
              v52 |= v57 | v54;
              int v53 = 16;
              *(_DWORD *)(a1 + 2744) = 16;
LABEL_65:
              unsigned int v35 = 2 * v51;
              BOOL v33 = v51 >= 0x20000001;
              v51 *= 2;
              if (v33) {
                goto LABEL_34;
              }
              continue;
            }
          }
          break;
        }
        int v54 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v58);
        goto LABEL_64;
      }
      unsigned int v35 = *(_DWORD *)(a1 + 2732);
LABEL_34:
      unsigned int v28 = (v48 | (2 * v47)) + v49;
      unsigned int v13 = (HIWORD(v35) * v50) & 0xFFFF0000;
      if (v52 < v13) {
        unsigned int v36 = 0;
      }
      else {
        unsigned int v36 = (HIWORD(v35) * v50) & 0xFFFF0000;
      }
      unsigned int v14 = v52 - v36;
      *(_DWORD *)(a1 + 2736) = v14;
      *(_WORD *)(a1 + 2058) = *(_WORD *)(a1 + 2 * ((v50 >> 7) & 0x1FE | (v52 >= v13)) + 2752) + v50;
      if (v52 < v13) {
        unsigned int v37 = (HIWORD(v35) * v50) & 0xFFFF0000;
      }
      else {
        unsigned int v37 = v35 - v13;
      }
      *(_DWORD *)(a1 + 2732) = v37;
      if (v52 < v13)
      {
        int v10 = v61;
        ++v8;
        if (v9 + 1 >= v61) {
          goto LABEL_73;
        }
        goto LABEL_9;
      }
    }
    *(_DWORD *)(a1 + 3872) = 3;
  }
}

void gcl::tmesh::DecoderImpl::decompressTriangleOrder(gcl::tmesh::DecoderImpl *this, int *a2)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 952))
  {
    memset_pattern16(__b, &memset_pattern_27, 0x80uLL);
    __int16 v274 = 0x8000;
    uint64_t v135 = a2;
    if (*((int *)this + 948) < 1) {
      return;
    }
    uint64_t v136 = 0;
    int v137 = 0;
    unsigned int v138 = __b[0];
    unsigned int v139 = 0x8000;
    unsigned int v140 = 0x8000;
    while (1)
    {
      unsigned int v142 = *((_DWORD *)this + 683);
      unsigned int v143 = *((_DWORD *)this + 684);
      if (v142 < 0x40000001)
      {
        int v144 = *((_DWORD *)this + 686);
        while (1)
        {
          v143 *= 2;
          *((_DWORD *)this + 686) = --v144;
          if (v144) {
            goto LABEL_167;
          }
          uint64_t v147 = *((void *)this + 340);
          *((void *)this + 340) = v147 + 1;
          unint64_t v148 = *((unsigned int *)this + 676);
          if (v147 + 1 >= v148)
          {
            int v149 = 65280;
            unint64_t v150 = v147 + 2;
            *((void *)this + 340) = v150;
            if (v150 >= v148)
            {
LABEL_173:
              int v145 = 255;
              goto LABEL_166;
            }
          }
          else
          {
            int v149 = *(unsigned __int8 *)(*((void *)this + 339) + v147 + 1) << 8;
            unint64_t v150 = v147 + 2;
            *((void *)this + 340) = v150;
            if (v150 >= v148) {
              goto LABEL_173;
            }
          }
          int v145 = *(unsigned __int8 *)(*((void *)this + 339) + v150);
LABEL_166:
          v143 |= v149 | v145;
          int v144 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_167:
          unsigned int v146 = 2 * v142;
          BOOL v23 = v142 >= 0x20000001;
          v142 *= 2;
          if (v23) {
            goto LABEL_175;
          }
        }
      }
      unsigned int v146 = *((_DWORD *)this + 683);
LABEL_175:
      unsigned int v151 = (HIWORD(v146) * (unsigned __int16)v140) & 0xFFFF0000;
      if (v143 < v151) {
        unsigned int v152 = 0;
      }
      else {
        unsigned int v152 = (HIWORD(v146) * (unsigned __int16)v140) & 0xFFFF0000;
      }
      unsigned int v153 = v143 - v152;
      *((_DWORD *)this + 684) = v143 - v152;
      BOOL v154 = v143 >= v151;
      unsigned int v155 = (v140 >> 7) & 0x1FE | (v143 >= v151);
      unsigned int v156 = v146 - v151;
      int v157 = *((unsigned __int16 *)this + v155 + 1376);
      if (v154) {
        unsigned int v151 = v146 - v151;
      }
      *((_DWORD *)this + 683) = v151;
      if (v154) {
        break;
      }
      int v141 = 0;
LABEL_162:
      v140 += v157;
      v137 += v141;
      v135[v136++] = v137;
      if (v136 >= *((int *)this + 948)) {
        return;
      }
    }
    if (v156 < 0x40000001)
    {
      int v158 = *((_DWORD *)this + 686);
      while (1)
      {
        v153 *= 2;
        *((_DWORD *)this + 686) = --v158;
        if (v158) {
          goto LABEL_186;
        }
        uint64_t v161 = *((void *)this + 340);
        *((void *)this + 340) = v161 + 1;
        unint64_t v162 = *((unsigned int *)this + 676);
        if (v161 + 1 >= v162)
        {
          int v163 = 65280;
          unint64_t v164 = v161 + 2;
          *((void *)this + 340) = v164;
          if (v164 >= v162)
          {
LABEL_192:
            int v159 = 255;
            goto LABEL_185;
          }
        }
        else
        {
          int v163 = *(unsigned __int8 *)(*((void *)this + 339) + v161 + 1) << 8;
          unint64_t v164 = v161 + 2;
          *((void *)this + 340) = v164;
          if (v164 >= v162) {
            goto LABEL_192;
          }
        }
        int v159 = *(unsigned __int8 *)(*((void *)this + 339) + v164);
LABEL_185:
        v153 |= v163 | v159;
        int v158 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_186:
        unsigned int v160 = 2 * v156;
        BOOL v23 = v156 >= 0x20000001;
        v156 *= 2;
        if (v23) {
          goto LABEL_194;
        }
      }
    }
    unsigned int v160 = v156;
LABEL_194:
    unsigned int v165 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    int v166 = *((unsigned __int16 *)this + ((v139 >> 7) & 0x1FE | (v153 >= v165)) + 1376);
    if (v153 < v165) {
      unsigned int v167 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    }
    else {
      unsigned int v167 = v160 - v165;
    }
    if (v153 < v165) {
      unsigned int v168 = 0;
    }
    else {
      unsigned int v168 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    }
    unsigned int v169 = v153 - v168;
    *((_DWORD *)this + 683) = v167;
    *((_DWORD *)this + 684) = v169;
    if (v167 < 0x40000001)
    {
      int v170 = *((_DWORD *)this + 686);
      while (1)
      {
        v169 *= 2;
        *((_DWORD *)this + 686) = --v170;
        if (v170) {
          goto LABEL_204;
        }
        uint64_t v173 = *((void *)this + 340);
        *((void *)this + 340) = v173 + 1;
        unint64_t v174 = *((unsigned int *)this + 676);
        if (v173 + 1 >= v174)
        {
          int v175 = 65280;
          unint64_t v176 = v173 + 2;
          *((void *)this + 340) = v176;
          if (v176 >= v174)
          {
LABEL_210:
            int v171 = 255;
            goto LABEL_203;
          }
        }
        else
        {
          int v175 = *(unsigned __int8 *)(*((void *)this + 339) + v173 + 1) << 8;
          unint64_t v176 = v173 + 2;
          *((void *)this + 340) = v176;
          if (v176 >= v174) {
            goto LABEL_210;
          }
        }
        int v171 = *(unsigned __int8 *)(*((void *)this + 339) + v176);
LABEL_203:
        v169 |= v175 | v171;
        int v170 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_204:
        unsigned int v172 = 2 * v167;
        BOOL v23 = v167 >= 0x20000001;
        v167 *= 2;
        if (v23) {
          goto LABEL_212;
        }
      }
    }
    unsigned int v172 = v167;
LABEL_212:
    unsigned int v177 = (HIWORD(v172) * (unsigned __int16)v138) & 0xFFFF0000;
    unsigned int v178 = v172 - v177;
    BOOL v179 = v169 >= v177;
    int v180 = *((unsigned __int16 *)this + ((v138 >> 7) & 0x1FE | v179) + 1376);
    if (v169 < v177) {
      unsigned int v181 = v177;
    }
    else {
      unsigned int v181 = v178;
    }
    if (v169 < v177) {
      unsigned int v182 = 0;
    }
    else {
      unsigned int v182 = v177;
    }
    if (v169 < v177) {
      uint64_t v183 = 1;
    }
    else {
      uint64_t v183 = 2;
    }
    unsigned int v184 = v169 - v182;
    *((_DWORD *)this + 683) = v181;
    *((_DWORD *)this + 684) = v184;
    unsigned int v185 = (unsigned __int16)__b[v183];
    if (v181 < 0x40000001)
    {
      int v186 = *((_DWORD *)this + 686);
      while (1)
      {
        v184 *= 2;
        *((_DWORD *)this + 686) = --v186;
        if (v186) {
          goto LABEL_225;
        }
        uint64_t v189 = *((void *)this + 340);
        *((void *)this + 340) = v189 + 1;
        unint64_t v190 = *((unsigned int *)this + 676);
        if (v189 + 1 >= v190)
        {
          int v191 = 65280;
          unint64_t v192 = v189 + 2;
          *((void *)this + 340) = v192;
          if (v192 >= v190)
          {
LABEL_231:
            int v187 = 255;
            goto LABEL_224;
          }
        }
        else
        {
          int v191 = *(unsigned __int8 *)(*((void *)this + 339) + v189 + 1) << 8;
          unint64_t v192 = v189 + 2;
          *((void *)this + 340) = v192;
          if (v192 >= v190) {
            goto LABEL_231;
          }
        }
        int v187 = *(unsigned __int8 *)(*((void *)this + 339) + v192);
LABEL_224:
        v184 |= v191 | v187;
        int v186 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_225:
        unsigned int v188 = 2 * v181;
        BOOL v23 = v181 >= 0x20000001;
        v181 *= 2;
        if (v23) {
          goto LABEL_233;
        }
      }
    }
    unsigned int v188 = v181;
LABEL_233:
    unsigned int v193 = (HIWORD(v188) * v185) & 0xFFFF0000;
    unsigned int v194 = v188 - v193;
    BOOL v195 = v184 >= v193;
    __b[v183] = *((_WORD *)this + ((v185 >> 7) & 0x1FE | v195) + 1376) + v185;
    if (v184 < v193) {
      unsigned int v196 = v193;
    }
    else {
      unsigned int v196 = v194;
    }
    if (v184 < v193) {
      unsigned int v197 = 0;
    }
    else {
      unsigned int v197 = v193;
    }
    unsigned int v198 = v184 - v197;
    *((_DWORD *)this + 683) = v196;
    *((_DWORD *)this + 684) = v198;
    int v199 = v179 | (2 * v195);
    uint64_t v200 = (v199 + 3);
    unsigned int v201 = (unsigned __int16)__b[v200];
    if (v196 < 0x40000001)
    {
      int v202 = *((_DWORD *)this + 686);
      while (1)
      {
        v198 *= 2;
        *((_DWORD *)this + 686) = --v202;
        if (v202) {
          goto LABEL_243;
        }
        uint64_t v205 = *((void *)this + 340);
        *((void *)this + 340) = v205 + 1;
        unint64_t v206 = *((unsigned int *)this + 676);
        if (v205 + 1 >= v206)
        {
          int v207 = 65280;
          unint64_t v208 = v205 + 2;
          *((void *)this + 340) = v208;
          if (v208 >= v206)
          {
LABEL_249:
            int v203 = 255;
            goto LABEL_242;
          }
        }
        else
        {
          int v207 = *(unsigned __int8 *)(*((void *)this + 339) + v205 + 1) << 8;
          unint64_t v208 = v205 + 2;
          *((void *)this + 340) = v208;
          if (v208 >= v206) {
            goto LABEL_249;
          }
        }
        int v203 = *(unsigned __int8 *)(*((void *)this + 339) + v208);
LABEL_242:
        v198 |= v207 | v203;
        int v202 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_243:
        unsigned int v204 = 2 * v196;
        BOOL v23 = v196 >= 0x20000001;
        v196 *= 2;
        if (v23) {
          goto LABEL_251;
        }
      }
    }
    unsigned int v204 = v196;
LABEL_251:
    unsigned int v209 = (HIWORD(v204) * v201) & 0xFFFF0000;
    unsigned int v210 = v204 - v209;
    BOOL v211 = v198 >= v209;
    __b[v200] = *((_WORD *)this + ((v201 >> 7) & 0x1FE | v211) + 1376) + v201;
    if (v198 < v209) {
      unsigned int v212 = v209;
    }
    else {
      unsigned int v212 = v210;
    }
    if (v198 < v209) {
      unsigned int v213 = 0;
    }
    else {
      unsigned int v213 = v209;
    }
    unsigned int v214 = v198 - v213;
    *((_DWORD *)this + 683) = v212;
    *((_DWORD *)this + 684) = v214;
    int v215 = v199 | (4 * v211);
    uint64_t v216 = (v215 + 7);
    unsigned int v217 = (unsigned __int16)__b[v216];
    if (v212 < 0x40000001)
    {
      int v218 = *((_DWORD *)this + 686);
      while (1)
      {
        v214 *= 2;
        *((_DWORD *)this + 686) = --v218;
        if (v218) {
          goto LABEL_261;
        }
        uint64_t v221 = *((void *)this + 340);
        *((void *)this + 340) = v221 + 1;
        unint64_t v222 = *((unsigned int *)this + 676);
        if (v221 + 1 >= v222)
        {
          int v223 = 65280;
          unint64_t v224 = v221 + 2;
          *((void *)this + 340) = v224;
          if (v224 >= v222)
          {
LABEL_267:
            int v219 = 255;
            goto LABEL_260;
          }
        }
        else
        {
          int v223 = *(unsigned __int8 *)(*((void *)this + 339) + v221 + 1) << 8;
          unint64_t v224 = v221 + 2;
          *((void *)this + 340) = v224;
          if (v224 >= v222) {
            goto LABEL_267;
          }
        }
        int v219 = *(unsigned __int8 *)(*((void *)this + 339) + v224);
LABEL_260:
        v214 |= v223 | v219;
        int v218 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_261:
        unsigned int v220 = 2 * v212;
        BOOL v23 = v212 >= 0x20000001;
        v212 *= 2;
        if (v23) {
          goto LABEL_269;
        }
      }
    }
    unsigned int v220 = v212;
LABEL_269:
    unsigned int v225 = (HIWORD(v220) * v217) & 0xFFFF0000;
    unsigned int v226 = v220 - v225;
    BOOL v227 = v214 >= v225;
    __b[v216] = *((_WORD *)this + ((v217 >> 7) & 0x1FE | v227) + 1376) + v217;
    if (v214 < v225) {
      unsigned int v228 = v225;
    }
    else {
      unsigned int v228 = v226;
    }
    if (v214 < v225) {
      unsigned int v229 = 0;
    }
    else {
      unsigned int v229 = v225;
    }
    unsigned int v230 = v214 - v229;
    *((_DWORD *)this + 683) = v228;
    *((_DWORD *)this + 684) = v230;
    int v231 = v215 | (8 * v227);
    uint64_t v232 = (v231 + 15);
    unsigned int v233 = (unsigned __int16)__b[v232];
    if (v228 < 0x40000001)
    {
      int v234 = *((_DWORD *)this + 686);
      while (1)
      {
        v230 *= 2;
        *((_DWORD *)this + 686) = --v234;
        if (v234) {
          goto LABEL_279;
        }
        uint64_t v237 = *((void *)this + 340);
        *((void *)this + 340) = v237 + 1;
        unint64_t v238 = *((unsigned int *)this + 676);
        if (v237 + 1 >= v238)
        {
          int v239 = 65280;
          unint64_t v240 = v237 + 2;
          *((void *)this + 340) = v240;
          if (v240 >= v238)
          {
LABEL_285:
            int v235 = 255;
            goto LABEL_278;
          }
        }
        else
        {
          int v239 = *(unsigned __int8 *)(*((void *)this + 339) + v237 + 1) << 8;
          unint64_t v240 = v237 + 2;
          *((void *)this + 340) = v240;
          if (v240 >= v238) {
            goto LABEL_285;
          }
        }
        int v235 = *(unsigned __int8 *)(*((void *)this + 339) + v240);
LABEL_278:
        v230 |= v239 | v235;
        int v234 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_279:
        unsigned int v236 = 2 * v228;
        BOOL v23 = v228 >= 0x20000001;
        v228 *= 2;
        if (v23) {
          goto LABEL_287;
        }
      }
    }
    unsigned int v236 = v228;
LABEL_287:
    unsigned int v241 = (HIWORD(v236) * v233) & 0xFFFF0000;
    unsigned int v242 = v236 - v241;
    BOOL v243 = v230 >= v241;
    __b[v232] = *((_WORD *)this + ((v233 >> 7) & 0x1FE | v243) + 1376) + v233;
    if (v230 < v241) {
      unsigned int v244 = v241;
    }
    else {
      unsigned int v244 = v242;
    }
    if (v230 < v241) {
      unsigned int v245 = 0;
    }
    else {
      unsigned int v245 = v241;
    }
    unsigned int v246 = v230 - v245;
    *((_DWORD *)this + 683) = v244;
    *((_DWORD *)this + 684) = v246;
    int v247 = v231 | (16 * v243);
    uint64_t v248 = (v247 + 31);
    unsigned int v249 = (unsigned __int16)__b[v248];
    if (v244 >= 0x40000001)
    {
      unsigned int v252 = v244;
LABEL_305:
      unsigned int v257 = (HIWORD(v252) * v249) & 0xFFFF0000;
      unsigned int v258 = v252 - v257;
      BOOL v259 = v246 >= v257;
      __b[v248] = *((_WORD *)this + ((v249 >> 7) & 0x1FE | v259) + 1376) + v249;
      if (v246 < v257) {
        unsigned int v260 = v257;
      }
      else {
        unsigned int v260 = v258;
      }
      if (v246 < v257) {
        unsigned int v261 = 0;
      }
      else {
        unsigned int v261 = v257;
      }
      *((_DWORD *)this + 683) = v260;
      *((_DWORD *)this + 684) = v246 - v261;
      int v262 = v247 | (32 * v259);
      if (v262 == 63)
      {
        uint64_t v272 = v136;
        unsigned int v263 = v139;
        unsigned int v270 = v138;
        int v264 = v157;
        unsigned int v265 = v165;
        int v266 = v137;
        int v267 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, 6, &v274);
        int v137 = v266;
        unsigned int v165 = v265;
        int v157 = v264;
        unsigned int v139 = v263;
        uint64_t v136 = v272;
        uint64_t v135 = a2;
        int v262 = v267 + 63;
        unsigned int v138 = v270;
      }
      v139 += v166;
      v138 += v180;
      int v141 = ~v262;
      if (v153 >= v165) {
        int v141 = v262 + 1;
      }
      goto LABEL_162;
    }
    int v250 = *((_DWORD *)this + 686);
    while (1)
    {
      v246 *= 2;
      *((_DWORD *)this + 686) = --v250;
      if (v250) {
        goto LABEL_297;
      }
      uint64_t v253 = *((void *)this + 340);
      *((void *)this + 340) = v253 + 1;
      unint64_t v254 = *((unsigned int *)this + 676);
      if (v253 + 1 >= v254)
      {
        int v255 = 65280;
        unint64_t v256 = v253 + 2;
        *((void *)this + 340) = v256;
        if (v256 >= v254)
        {
LABEL_303:
          int v251 = 255;
          goto LABEL_296;
        }
      }
      else
      {
        int v255 = *(unsigned __int8 *)(*((void *)this + 339) + v253 + 1) << 8;
        unint64_t v256 = v253 + 2;
        *((void *)this + 340) = v256;
        if (v256 >= v254) {
          goto LABEL_303;
        }
      }
      int v251 = *(unsigned __int8 *)(*((void *)this + 339) + v256);
LABEL_296:
      v246 |= v255 | v251;
      int v250 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_297:
      unsigned int v252 = 2 * v244;
      BOOL v23 = v244 >= 0x20000001;
      v244 *= 2;
      if (v23) {
        goto LABEL_305;
      }
    }
  }
  memset_pattern16(__b, &memset_pattern_27, 0x80uLL);
  __int16 v274 = 0x8000;
  int v3 = a2;
  if (*((int *)this + 948) >= 1)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    unsigned int v6 = __b[0];
    unsigned int v7 = 0x8000;
    int v8 = 6;
    unsigned int v9 = 0x8000;
    while (1)
    {
      unsigned int v11 = *((_DWORD *)this + 683);
      unsigned int v12 = *((_DWORD *)this + 684);
      if (v11 < 0x40000001)
      {
        int v13 = *((_DWORD *)this + 686);
        while (1)
        {
          v12 *= 2;
          *((_DWORD *)this + 686) = --v13;
          if (v13) {
            goto LABEL_9;
          }
          uint64_t v16 = *((void *)this + 340);
          *((void *)this + 340) = v16 + 1;
          unint64_t v17 = *((unsigned int *)this + 676);
          if (v16 + 1 >= v17)
          {
            int v18 = 65280;
            unint64_t v19 = v16 + 2;
            *((void *)this + 340) = v19;
            if (v19 >= v17)
            {
LABEL_15:
              int v14 = 255;
              goto LABEL_8;
            }
          }
          else
          {
            int v18 = *(unsigned __int8 *)(*((void *)this + 339) + v16 + 1) << 8;
            unint64_t v19 = v16 + 2;
            *((void *)this + 340) = v19;
            if (v19 >= v17) {
              goto LABEL_15;
            }
          }
          int v14 = *(unsigned __int8 *)(*((void *)this + 339) + v19);
LABEL_8:
          v12 |= v18 | v14;
          int v13 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_9:
          unsigned int v15 = 2 * v11;
          BOOL v23 = v11 >= 0x20000001;
          v11 *= 2;
          if (v23) {
            goto LABEL_17;
          }
        }
      }
      unsigned int v15 = *((_DWORD *)this + 683);
LABEL_17:
      unsigned int v20 = (HIWORD(v15) * (unsigned __int16)v9) & 0xFFFF0000;
      if (v12 < v20) {
        unsigned int v21 = 0;
      }
      else {
        unsigned int v21 = (HIWORD(v15) * (unsigned __int16)v9) & 0xFFFF0000;
      }
      unsigned int v22 = v12 - v21;
      *((_DWORD *)this + 684) = v12 - v21;
      BOOL v23 = v12 >= v20;
      unsigned int v24 = (v9 >> 7) & 0x1FE | (v12 >= v20);
      unsigned int v25 = v15 - v20;
      int v26 = *((unsigned __int16 *)this + v24 + 1376);
      if (v23) {
        unsigned int v20 = v15 - v20;
      }
      *((_DWORD *)this + 683) = v20;
      if (v23) {
        break;
      }
      int v10 = 0;
LABEL_4:
      v9 += v26;
      v5 += v10;
      v3[v4++] = v5;
      if (v4 >= *((int *)this + 948)) {
        return;
      }
    }
    if (v25 < 0x40000001)
    {
      int v27 = *((_DWORD *)this + 686);
      while (1)
      {
        v22 *= 2;
        *((_DWORD *)this + 686) = --v27;
        if (v27) {
          goto LABEL_28;
        }
        uint64_t v30 = *((void *)this + 340);
        *((void *)this + 340) = v30 + 1;
        unint64_t v31 = *((unsigned int *)this + 676);
        if (v30 + 1 >= v31)
        {
          int v32 = 65280;
          unint64_t v33 = v30 + 2;
          *((void *)this + 340) = v33;
          if (v33 >= v31)
          {
LABEL_34:
            int v28 = 255;
            goto LABEL_27;
          }
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*((void *)this + 339) + v30 + 1) << 8;
          unint64_t v33 = v30 + 2;
          *((void *)this + 340) = v33;
          if (v33 >= v31) {
            goto LABEL_34;
          }
        }
        int v28 = *(unsigned __int8 *)(*((void *)this + 339) + v33);
LABEL_27:
        v22 |= v32 | v28;
        int v27 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_28:
        unsigned int v29 = 2 * v25;
        BOOL v23 = v25 >= 0x20000001;
        v25 *= 2;
        if (v23) {
          goto LABEL_36;
        }
      }
    }
    unsigned int v29 = v25;
LABEL_36:
    unsigned int v34 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
    unsigned int v35 = v29 - v34;
    int v36 = *((unsigned __int16 *)this + ((v7 >> 7) & 0x1FE | (v22 >= v34)) + 1376);
    if (v22 >= v34)
    {
      unsigned int v37 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
    }
    else
    {
      unsigned int v35 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
      unsigned int v37 = 0;
    }
    unsigned int v38 = v22 - v37;
    *((_DWORD *)this + 683) = v35;
    *((_DWORD *)this + 684) = v38;
    if (v35 < 0x40000001)
    {
      int v39 = *((_DWORD *)this + 686);
      while (1)
      {
        v38 *= 2;
        *((_DWORD *)this + 686) = --v39;
        if (v39) {
          goto LABEL_43;
        }
        uint64_t v42 = *((void *)this + 340);
        *((void *)this + 340) = v42 + 1;
        unint64_t v43 = *((unsigned int *)this + 676);
        if (v42 + 1 >= v43)
        {
          int v44 = 65280;
          unint64_t v45 = v42 + 2;
          *((void *)this + 340) = v45;
          if (v45 >= v43)
          {
LABEL_49:
            int v40 = 255;
            goto LABEL_42;
          }
        }
        else
        {
          int v44 = *(unsigned __int8 *)(*((void *)this + 339) + v42 + 1) << 8;
          unint64_t v45 = v42 + 2;
          *((void *)this + 340) = v45;
          if (v45 >= v43) {
            goto LABEL_49;
          }
        }
        int v40 = *(unsigned __int8 *)(*((void *)this + 339) + v45);
LABEL_42:
        v38 |= v44 | v40;
        int v39 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_43:
        unsigned int v41 = 2 * v35;
        BOOL v23 = v35 >= 0x20000001;
        v35 *= 2;
        if (v23) {
          goto LABEL_51;
        }
      }
    }
    unsigned int v41 = v35;
LABEL_51:
    unsigned int v46 = (HIWORD(v41) * (unsigned __int16)v6) & 0xFFFF0000;
    unsigned int v47 = v41 - v46;
    BOOL v48 = v38 >= v46;
    int v49 = *((unsigned __int16 *)this + ((v6 >> 7) & 0x1FE | v48) + 1376);
    if (v38 < v46) {
      unsigned int v50 = v46;
    }
    else {
      unsigned int v50 = v47;
    }
    if (v38 < v46) {
      unsigned int v46 = 0;
    }
    unsigned int v51 = v38 - v46;
    *((_DWORD *)this + 683) = v50;
    *((_DWORD *)this + 684) = v51;
    uint64_t v52 = (v48 & 0x7FFFFFFu) + 1;
    unsigned int v53 = (unsigned __int16)__b[v52];
    if (v50 < 0x40000001)
    {
      int v54 = *((_DWORD *)this + 686);
      while (1)
      {
        v51 *= 2;
        *((_DWORD *)this + 686) = --v54;
        if (v54) {
          goto LABEL_60;
        }
        uint64_t v57 = *((void *)this + 340);
        *((void *)this + 340) = v57 + 1;
        unint64_t v58 = *((unsigned int *)this + 676);
        if (v57 + 1 >= v58)
        {
          int v59 = 65280;
          unint64_t v60 = v57 + 2;
          *((void *)this + 340) = v60;
          if (v60 >= v58)
          {
LABEL_66:
            int v55 = 255;
            goto LABEL_59;
          }
        }
        else
        {
          int v59 = *(unsigned __int8 *)(*((void *)this + 339) + v57 + 1) << 8;
          unint64_t v60 = v57 + 2;
          *((void *)this + 340) = v60;
          if (v60 >= v58) {
            goto LABEL_66;
          }
        }
        int v55 = *(unsigned __int8 *)(*((void *)this + 339) + v60);
LABEL_59:
        v51 |= v59 | v55;
        int v54 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_60:
        unsigned int v56 = 2 * v50;
        BOOL v23 = v50 >= 0x20000001;
        v50 *= 2;
        if (v23) {
          goto LABEL_68;
        }
      }
    }
    unsigned int v56 = v50;
LABEL_68:
    int v61 = 32 * v48;
    unsigned int v62 = (HIWORD(v56) * v53) & 0xFFFF0000;
    BOOL v63 = v51 >= v62;
    __b[v52] = *((_WORD *)this + ((v53 >> 7) & 0x1FE | v63) + 1376) + v53;
    if (v51 < v62) {
      unsigned int v64 = (HIWORD(v56) * v53) & 0xFFFF0000;
    }
    else {
      unsigned int v64 = v56 - v62;
    }
    if (v51 < v62) {
      unsigned int v65 = 0;
    }
    else {
      unsigned int v65 = (HIWORD(v56) * v53) & 0xFFFF0000;
    }
    unsigned int v66 = v51 - v65;
    *((_DWORD *)this + 683) = v64;
    *((_DWORD *)this + 684) = v66;
    unsigned int v67 = v61 | (16 * v63);
    uint64_t v68 = (v67 >> 4) + 3;
    unsigned int v69 = (unsigned __int16)__b[v68];
    if (v64 < 0x40000001)
    {
      int v70 = *((_DWORD *)this + 686);
      while (1)
      {
        v66 *= 2;
        *((_DWORD *)this + 686) = --v70;
        if (v70) {
          goto LABEL_78;
        }
        uint64_t v73 = *((void *)this + 340);
        *((void *)this + 340) = v73 + 1;
        unint64_t v74 = *((unsigned int *)this + 676);
        if (v73 + 1 >= v74)
        {
          int v75 = 65280;
          unint64_t v76 = v73 + 2;
          *((void *)this + 340) = v76;
          if (v76 >= v74)
          {
LABEL_84:
            int v71 = 255;
            goto LABEL_77;
          }
        }
        else
        {
          int v75 = *(unsigned __int8 *)(*((void *)this + 339) + v73 + 1) << 8;
          unint64_t v76 = v73 + 2;
          *((void *)this + 340) = v76;
          if (v76 >= v74) {
            goto LABEL_84;
          }
        }
        int v71 = *(unsigned __int8 *)(*((void *)this + 339) + v76);
LABEL_77:
        v66 |= v75 | v71;
        int v70 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_78:
        unsigned int v72 = 2 * v64;
        BOOL v23 = v64 >= 0x20000001;
        v64 *= 2;
        if (v23) {
          goto LABEL_86;
        }
      }
    }
    unsigned int v72 = v64;
LABEL_86:
    unsigned int v77 = (HIWORD(v72) * v69) & 0xFFFF0000;
    BOOL v78 = v66 >= v77;
    __b[v68] = *((_WORD *)this + ((v69 >> 7) & 0x1FE | v78) + 1376) + v69;
    if (v66 < v77) {
      unsigned int v79 = (HIWORD(v72) * v69) & 0xFFFF0000;
    }
    else {
      unsigned int v79 = v72 - v77;
    }
    if (v66 < v77) {
      unsigned int v80 = 0;
    }
    else {
      unsigned int v80 = (HIWORD(v72) * v69) & 0xFFFF0000;
    }
    unsigned int v81 = v66 - v80;
    *((_DWORD *)this + 683) = v79;
    *((_DWORD *)this + 684) = v81;
    unsigned int v82 = v67 | (8 * v78);
    uint64_t v83 = (v82 >> 3) + 7;
    unsigned int v84 = (unsigned __int16)__b[v83];
    if (v79 < 0x40000001)
    {
      int v85 = *((_DWORD *)this + 686);
      while (1)
      {
        v81 *= 2;
        *((_DWORD *)this + 686) = --v85;
        if (v85) {
          goto LABEL_96;
        }
        uint64_t v88 = *((void *)this + 340);
        *((void *)this + 340) = v88 + 1;
        unint64_t v89 = *((unsigned int *)this + 676);
        if (v88 + 1 >= v89)
        {
          int v90 = 65280;
          unint64_t v91 = v88 + 2;
          *((void *)this + 340) = v91;
          if (v91 >= v89)
          {
LABEL_102:
            int v86 = 255;
            goto LABEL_95;
          }
        }
        else
        {
          int v90 = *(unsigned __int8 *)(*((void *)this + 339) + v88 + 1) << 8;
          unint64_t v91 = v88 + 2;
          *((void *)this + 340) = v91;
          if (v91 >= v89) {
            goto LABEL_102;
          }
        }
        int v86 = *(unsigned __int8 *)(*((void *)this + 339) + v91);
LABEL_95:
        v81 |= v90 | v86;
        int v85 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_96:
        unsigned int v87 = 2 * v79;
        BOOL v23 = v79 >= 0x20000001;
        v79 *= 2;
        if (v23) {
          goto LABEL_104;
        }
      }
    }
    unsigned int v87 = v79;
LABEL_104:
    unsigned int v92 = (HIWORD(v87) * v84) & 0xFFFF0000;
    BOOL v93 = v81 >= v92;
    __b[v83] = *((_WORD *)this + ((v84 >> 7) & 0x1FE | v93) + 1376) + v84;
    if (v81 < v92) {
      unsigned int v94 = (HIWORD(v87) * v84) & 0xFFFF0000;
    }
    else {
      unsigned int v94 = v87 - v92;
    }
    if (v81 < v92) {
      unsigned int v95 = 0;
    }
    else {
      unsigned int v95 = (HIWORD(v87) * v84) & 0xFFFF0000;
    }
    unsigned int v96 = v81 - v95;
    *((_DWORD *)this + 683) = v94;
    *((_DWORD *)this + 684) = v96;
    unsigned int v97 = v82 | (4 * v93);
    uint64_t v98 = (v97 >> 2) + 15;
    unsigned int v99 = (unsigned __int16)__b[v98];
    if (v94 < 0x40000001)
    {
      int v100 = *((_DWORD *)this + 686);
      while (1)
      {
        v96 *= 2;
        *((_DWORD *)this + 686) = --v100;
        if (v100) {
          goto LABEL_114;
        }
        uint64_t v103 = *((void *)this + 340);
        *((void *)this + 340) = v103 + 1;
        unint64_t v104 = *((unsigned int *)this + 676);
        if (v103 + 1 >= v104)
        {
          int v105 = 65280;
          unint64_t v106 = v103 + 2;
          *((void *)this + 340) = v106;
          if (v106 >= v104)
          {
LABEL_120:
            int v101 = 255;
            goto LABEL_113;
          }
        }
        else
        {
          int v105 = *(unsigned __int8 *)(*((void *)this + 339) + v103 + 1) << 8;
          unint64_t v106 = v103 + 2;
          *((void *)this + 340) = v106;
          if (v106 >= v104) {
            goto LABEL_120;
          }
        }
        int v101 = *(unsigned __int8 *)(*((void *)this + 339) + v106);
LABEL_113:
        v96 |= v105 | v101;
        int v100 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_114:
        unsigned int v102 = 2 * v94;
        BOOL v23 = v94 >= 0x20000001;
        v94 *= 2;
        if (v23) {
          goto LABEL_122;
        }
      }
    }
    unsigned int v102 = v94;
LABEL_122:
    unsigned int v107 = (HIWORD(v102) * v99) & 0xFFFF0000;
    BOOL v108 = v96 >= v107;
    __b[v98] = *((_WORD *)this + ((v99 >> 7) & 0x1FE | v108) + 1376) + v99;
    if (v96 < v107) {
      unsigned int v109 = (HIWORD(v102) * v99) & 0xFFFF0000;
    }
    else {
      unsigned int v109 = v102 - v107;
    }
    if (v96 < v107) {
      unsigned int v110 = 0;
    }
    else {
      unsigned int v110 = (HIWORD(v102) * v99) & 0xFFFF0000;
    }
    unsigned int v111 = v96 - v110;
    *((_DWORD *)this + 683) = v109;
    *((_DWORD *)this + 684) = v111;
    unsigned int v112 = v97 | (2 * v108);
    uint64_t v113 = (v112 >> 1) + 31;
    unsigned int v114 = (unsigned __int16)__b[v113];
    if (v109 >= 0x40000001)
    {
      unsigned int v117 = v109;
LABEL_140:
      unsigned int v122 = (HIWORD(v117) * v114) & 0xFFFF0000;
      unsigned int v123 = v117 - v122;
      BOOL v124 = v111 >= v122;
      __b[v113] = *((_WORD *)this + ((v114 >> 7) & 0x1FE | v124) + 1376) + v114;
      if (v111 < v122) {
        unsigned int v125 = v122;
      }
      else {
        unsigned int v125 = v123;
      }
      if (v111 < v122) {
        unsigned int v126 = 0;
      }
      else {
        unsigned int v126 = v122;
      }
      *((_DWORD *)this + 683) = v125;
      *((_DWORD *)this + 684) = v111 - v126;
      int v127 = v112 | v124;
      if (v127 == 63)
      {
        int v268 = v49;
        int v269 = v36;
        unsigned int v271 = v9;
        uint64_t v128 = v4;
        int v129 = v26;
        unsigned int v130 = v7;
        int v131 = v8;
        int v132 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, v8, &v274);
        int v127 = v132 + 63;
        int v133 = -63 - v132;
        if (v132 >= -63) {
          int v133 = v132 + 63;
        }
        int v134 = v133 >> v131;
        if (!v131 || v134)
        {
          if (v134 <= 1) {
            int v8 = v131;
          }
          else {
            int v8 = v131 + 1;
          }
        }
        else
        {
          int v8 = v131 - 1;
        }
        int v3 = a2;
        unsigned int v7 = v130;
        int v26 = v129;
        uint64_t v4 = v128;
        int v36 = v269;
        unsigned int v9 = v271;
        int v49 = v268;
      }
      v7 += v36;
      v6 += v49;
      int v10 = ~v127;
      if (v22 >= v34) {
        int v10 = v127 + 1;
      }
      goto LABEL_4;
    }
    int v115 = *((_DWORD *)this + 686);
    while (1)
    {
      v111 *= 2;
      *((_DWORD *)this + 686) = --v115;
      if (v115) {
        goto LABEL_132;
      }
      uint64_t v118 = *((void *)this + 340);
      *((void *)this + 340) = v118 + 1;
      unint64_t v119 = *((unsigned int *)this + 676);
      if (v118 + 1 >= v119)
      {
        int v120 = 65280;
        unint64_t v121 = v118 + 2;
        *((void *)this + 340) = v121;
        if (v121 >= v119)
        {
LABEL_138:
          int v116 = 255;
          goto LABEL_131;
        }
      }
      else
      {
        int v120 = *(unsigned __int8 *)(*((void *)this + 339) + v118 + 1) << 8;
        unint64_t v121 = v118 + 2;
        *((void *)this + 340) = v121;
        if (v121 >= v119) {
          goto LABEL_138;
        }
      }
      int v116 = *(unsigned __int8 *)(*((void *)this + 339) + v121);
LABEL_131:
      v111 |= v120 | v116;
      int v115 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_132:
      unsigned int v117 = 2 * v109;
      BOOL v23 = v109 >= 0x20000001;
      v109 *= 2;
      if (v23) {
        goto LABEL_140;
      }
    }
  }
}

void gcl::tmesh::DecoderImpl::updateMappingInformation(std::vector<int> *this, int *a2, uint64_t a3)
{
  int begin = (int)this[158].__begin_;
  if (!begin) {
    return;
  }
  unsigned int v7 = a2;
  int v8 = a2;
  if (begin != 1)
  {
    int v8 = a2 + 1;
    int v9 = a2[1];
    int v10 = *a2;
    if (v9 >= *a2) {
      unsigned int v7 = a2;
    }
    else {
      unsigned int v7 = a2 + 1;
    }
    if (v9 < v10) {
      int v8 = a2;
    }
    if (begin != 2)
    {
      unsigned int v11 = a2 + 2;
      if (v9 <= v10) {
        int v12 = *a2;
      }
      else {
        int v12 = a2[1];
      }
      if (v9 < v10) {
        int v10 = a2[1];
      }
      uint64_t v13 = 4 * begin - 12;
      while (v13)
      {
        int v16 = *v11;
        int v15 = v11[1];
        if (v15 >= *v11)
        {
          if (v16 < v10)
          {
            int v10 = *v11;
            unsigned int v7 = v11;
          }
          BOOL v14 = v15 < v12;
          if (v15 > v12) {
            int v12 = v11[1];
          }
          if (!v14) {
            int v8 = v11 + 1;
          }
          v11 += 2;
          v13 -= 8;
          if (v13 == -4) {
            goto LABEL_35;
          }
        }
        else
        {
          int v10 = *v7;
          if (v15 < *v7)
          {
            int v10 = v11[1];
            unsigned int v7 = v11 + 1;
          }
          int v12 = *v8;
          if (v16 > *v8) {
            int v12 = *v11;
          }
          if (v16 >= *v8) {
            int v8 = v11;
          }
          v11 += 2;
          v13 -= 8;
          if (v13 == -4) {
            goto LABEL_35;
          }
        }
      }
      int v17 = *v11;
      if (*v11 < *v7) {
        goto LABEL_36;
      }
      if (v17 >= *v8) {
        int v8 = v11;
      }
    }
  }
LABEL_35:
  int v17 = *v7;
LABEL_36:
  if (v17 < 0 || (int v18 = *v8, v19 = v18 - v17, v18 - v17 > begin))
  {
    LODWORD(this[161].__end_) = 3;
  }
  else
  {
    int v20 = v19 + 2;
    LODWORD(this->__begin_) = v18;
    HIDWORD(this->__begin_) = v17;
    p_std::vector<int>::pointer end = &this[2].__end_;
    std::vector<int>::pointer end = this[2].__end_;
    value = this[2].__end_cap_.__value_;
    if (value != end)
    {
      this[2].__end_cap_.__value_ = end;
      value = end;
    }
    unint64_t v24 = value - end;
    if (v20 <= v24)
    {
      if (v20 < v24) {
        this[2].__end_cap_.__value_ = &end[v20];
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 56), v20 - v24);
      int begin = (int)this[158].__begin_;
    }
    if (begin >= 1)
    {
      uint64_t v25 = 0;
      std::vector<int>::pointer v26 = *p_end;
      do
      {
        uint64_t v27 = a2[v25] - v17 + 1;
        ++v26[v27];
        ++v25;
      }
      while (v25 < SLODWORD(this[158].__begin_));
      int begin = (int)this[158].__begin_;
    }
    if ((v19 & 0x80000000) == 0)
    {
      std::vector<int>::pointer v28 = *p_end;
      if (v20 <= 2) {
        uint64_t v29 = 2;
      }
      else {
        uint64_t v29 = v20;
      }
      int v32 = *v28;
      uint64_t v30 = v28 + 1;
      int v31 = v32;
      uint64_t v33 = v29 - 1;
      do
      {
        v31 += *v30;
        *v30++ = v31;
        --v33;
      }
      while (v33);
      int begin = (int)this[158].__begin_;
    }
    if (begin >= 1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      do
      {
        std::vector<int>::pointer v36 = this[2].__end_;
        uint64_t v37 = a2[v35] - v17;
        int v38 = v36[v37];
        v36[v37] = v38 + 1;
        int v39 = &this[5].__end_[v34];
        LODWORD(v36) = v39[2];
        uint64_t v40 = a3 + 12 * v38;
        *(void *)uint64_t v40 = *(void *)v39;
        *(_DWORD *)(v40 + 8) = v36;
        ++v35;
        v34 += 3;
      }
      while (v35 < SLODWORD(this[158].__begin_));
    }
    if ((v19 & 0x80000000) == 0)
    {
      uint64_t v41 = 0;
      int v42 = 0;
      std::vector<int>::pointer v43 = *p_end;
      do
      {
        int v44 = v43[v41];
        if (v42 < v44)
        {
          unsigned int v45 = v17 + v41;
          unint64_t v46 = v44 - (uint64_t)v42;
          unint64_t v47 = v42;
          if (v46 < 8) {
            goto LABEL_68;
          }
          unint64_t v47 = (v46 & 0xFFFFFFFFFFFFFFF8) + v42;
          int32x4_t v48 = vdupq_n_s32(v45);
          int v49 = (int32x4_t *)&a2[v42 + 4];
          unint64_t v50 = v46 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v49[-1] = v48;
            *int v49 = v48;
            v49 += 2;
            v50 -= 8;
          }
          while (v50);
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_68:
            unint64_t v51 = v44 - v47;
            uint64_t v52 = (unsigned int *)&a2[v47];
            do
            {
              *v52++ = v45;
              --v51;
            }
            while (v51);
          }
        }
        v43[v41++] = v42;
        int v42 = v44;
      }
      while (v41 != v19 + 1);
    }
  }
}

uint64_t gcl::tmesh::DecoderImpl::decompressVertexAttributes(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, int *a5, BOOL *a6)
{
  if (*(_DWORD *)(a1 + 3872)) {
    return 6;
  }
  if (!a2) {
    return 5;
  }
  uint64_t result = 5;
  if ((a3 & 0x8000000000000000) == 0 && a5)
  {
    if (a3 < 4) {
      return 3;
    }
    unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    if ((a3 & 0xFFFFFFFFFFFFFFFCLL) == 4
      || a3 == 8
      || a3 == 9
      || (a3 & 0xFFFFFFFFFFFFFFFELL) == 0xA
      || v8 == 12
      || v8 == 16)
    {
      return 3;
    }
    uint64_t result = 3;
    if (a3 - 20 >= 5 && a3 >= 0x20 && *(_DWORD *)a2 == -290009985)
    {
      int v10 = *(_DWORD *)(a2 + 4);
      int v11 = *(unsigned __int8 *)(a2 + 8);
      int v12 = *(unsigned __int8 *)(a2 + 9);
      __int16 v13 = *(_WORD *)(a2 + 10);
      unint64_t v14 = *(unsigned int *)(a2 + 12);
      int v15 = *(_DWORD *)(a2 + 16) & 0x7FFFFFFF;
      int v16 = *(unsigned __int8 *)(a2 + 20);
      int v17 = *(unsigned __int8 *)(a2 + 21);
      std::vector<int>::size_type v18 = *(unsigned __int8 *)(a2 + 22);
      int v19 = *(unsigned __int8 *)(a2 + 23);
      int v20 = *(unsigned __int8 *)(a2 + 24);
      int v21 = *(unsigned __int8 *)(a2 + 26);
      unsigned int v22 = *(unsigned __int8 *)(a2 + 27);
      *(_DWORD *)(a1 + 3824) = 0;
      *(unsigned char *)(a1 + 3828) = v11;
      *(unsigned char *)(a1 + 3829) = v12;
      *(_WORD *)(a1 + 3830) = v13;
      *(_DWORD *)(a1 + 3832) = v14;
      *(_DWORD *)(a1 + 3836) = v15;
      *(_DWORD *)(a1 + 3840) = v18;
      *(_DWORD *)(a1 + 3844) = v17;
      *(_DWORD *)(a1 + 3848) = v22;
      *(_DWORD *)(a1 + 3852) = v16;
      *(_DWORD *)(a1 + 3856) = v21;
      *(_DWORD *)(a1 + 3860) = v10;
      *(_DWORD *)(a1 + 3864) = v19;
      uint64_t v98 = a1;
      *(_DWORD *)(a1 + 3868) = v20;
      BOOL v23 = (int *)(a2 + 32);
      if (a2 == -32 || a3 < v14 || a2 + a3 < a2) {
        return 3;
      }
      uint64_t result = 3;
      if (a2 + v14 >= (unint64_t)v23 && v14 >= 0x20)
      {
        if (v11) {
          return 4;
        }
        uint64_t result = 4;
        if ((v12 - 5) <= 2)
        {
          if (v15 == *(_DWORD *)(a1 + 3788) && (a6 || !v21))
          {
            uint64_t v24 = v14 - 32;
            if ((v20 - 5) > 1)
            {
              if (v22 <= 0x1B)
              {
                std::vector<int>::vector(&v100, v18);
                std::vector<int>::size_type v25 = v18;
                if (!v18)
                {
                  int v30 = 0;
                  std::vector<int>::size_type v25 = 0;
                  goto LABEL_42;
                }
LABEL_36:
                std::vector<int>::pointer begin = v100.__begin_;
                std::vector<int>::size_type v27 = v18;
                do
                {
                  while (1)
                  {
                    BOOL v29 = v24 < 4;
                    v24 -= 4;
                    if (v29) {
                      break;
                    }
                    int v28 = *v23++;
                    *begin++ = v28;
                    if (!--v27) {
                      goto LABEL_41;
                    }
                  }
                  uint64_t v24 = 0;
                  BOOL v23 = 0;
                  ++begin;
                  --v27;
                }
                while (v27);
LABEL_41:
                int v30 = 1;
LABEL_42:
                int v31 = (int32x4_t **)(v98 + 2664);
                std::vector<int>::resize((std::vector<int> *)(v98 + 2664), v25);
                if (!v30)
                {
                  if (v23)
                  {
                    unsigned __int8 v36 = 0;
LABEL_71:
                    inited = gcl::tmesh::DecoderImpl::initArithmeticDecoder(v98, v23, v24);
                    uint64_t v77 = 3;
                    if (inited && (v76 & 0x8000000000000000) == 0)
                    {
                      gcl::tmesh::DecoderImpl::decodeVertexAttributesAC((gcl::tmesh::DecoderImpl *)v98, a5, a6);
                      if ((v36 & 1) != 0 && *(int *)(v98 + 3788) >= 1 && v30)
                      {
                        LODWORD(v78) = 0;
                        int v79 = 0;
                        std::vector<int>::pointer v80 = v100.__begin_;
                        unsigned int v81 = &v100.__begin_[v18];
                        uint64_t v82 = v18 & 0xF8;
                        std::vector<int>::pointer v83 = v100.__begin_ + 4;
                        do
                        {
                          uint64_t v84 = (int)v78;
                          if (v18 >= 8
                            && ((uint64_t v85 = (int)v78, v86 = &a5[v85], v87 = &a5[v18 + v85], v86 < v81)
                              ? (BOOL v88 = v80 >= v87)
                              : (BOOL v88 = 1),
                                v88))
                          {
                            uint64_t v78 = v84 + v82;
                            uint64_t v89 = v18 & 0xF8;
                            int v90 = (int32x4_t *)v83;
                            unint64_t v91 = (int32x4_t *)&a5[v84 + 4];
                            do
                            {
                              int32x4_t v92 = vaddq_s32(*v91, *v90);
                              v91[-1] = vaddq_s32(v91[-1], v90[-1]);
                              *unint64_t v91 = v92;
                              v90 += 2;
                              v91 += 2;
                              v89 -= 8;
                            }
                            while (v89);
                            uint64_t v93 = v18 & 0xF8;
                            if (v82 == v18) {
                              goto LABEL_77;
                            }
                          }
                          else
                          {
                            uint64_t v93 = 0;
                            uint64_t v78 = v84;
                          }
                          std::vector<int>::size_type v94 = v18 - v93;
                          unsigned int v95 = &v80[v93];
                          do
                          {
                            int v96 = *v95++;
                            a5[v78++] += v96;
                            --v94;
                          }
                          while (v94);
LABEL_77:
                          ++v79;
                        }
                        while (v79 < *(_DWORD *)(v98 + 3788));
                      }
                      uint64_t v77 = 0;
                      *a4 = *(unsigned int *)(v98 + 3832);
                    }
                    goto LABEL_94;
                  }
LABEL_92:
                  uint64_t v77 = 3;
LABEL_94:
                  if (v100.__begin_)
                  {
                    v100.__end_ = v100.__begin_;
                    operator delete(v100.__begin_);
                  }
                  return v77;
                }
                uint64_t v32 = 0;
                do
                {
                  while (1)
                  {
                    BOOL v29 = v24-- < 1;
                    if (!v29) {
                      break;
                    }
                    BOOL v23 = 0;
                    uint64_t v24 = 0;
                    if (++v32 == v18) {
                      goto LABEL_92;
                    }
                  }
                  uint64_t v33 = *v31;
                  __int32 v34 = *(unsigned __int8 *)v23;
                  BOOL v23 = (int *)((char *)v23 + 1);
                  (*v31)->i32[v32++] = v34;
                }
                while (v32 != v18);
                if (!v23) {
                  goto LABEL_92;
                }
                if (v18 < 8)
                {
                  uint64_t v35 = 0;
                  unsigned __int8 v36 = 0;
                  unsigned __int8 v37 = 1;
                  goto LABEL_68;
                }
                if (v18 >= 0x20)
                {
                  uint64_t v35 = v18 & 0xE0;
                  int8x16_t v38 = *((int8x16_t *)v100.__begin_ + 2);
                  int8x16_t v39 = *((int8x16_t *)v100.__begin_ + 3);
                  int8x16_t v40 = *(int8x16_t *)v100.__begin_;
                  int8x16_t v41 = *((int8x16_t *)v100.__begin_ + 1);
                  int8x16_t v42 = *((int8x16_t *)v100.__begin_ + 6);
                  int8x16_t v43 = *((int8x16_t *)v100.__begin_ + 7);
                  int8x16_t v44 = *((int8x16_t *)v100.__begin_ + 4);
                  int8x16_t v45 = *((int8x16_t *)v100.__begin_ + 5);
                  v46.i64[0] = 0x1D0000001DLL;
                  v46.i64[1] = 0x1D0000001DLL;
                  int8x16_t v47 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[2]), (int16x8_t)vcgtq_s32(v46, v33[3]));
                  int8x16_t v48 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, *v33), (int16x8_t)vcgtq_s32(v46, v33[1]));
                  int8x16_t v49 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[6]), (int16x8_t)vcgtq_s32(v46, v33[7]));
                  int8x16_t v50 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[4]), (int16x8_t)vcgtq_s32(v46, v33[5]));
                  if (v35 == 32)
                  {
                    int8x16_t v51 = vuzp1q_s8(v48, v47);
                    int8x16_t v52 = vuzp1q_s8(v50, v49);
                  }
                  else
                  {
                    int8x16_t v53 = vuzp1q_s8(v50, v49);
                    int8x16_t v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 9));
                    int8x16_t v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 8));
                    int8x16_t v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 10));
                    int8x16_t v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 11));
                    int8x16_t v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 13));
                    int8x16_t v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 12));
                    int8x16_t v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 14));
                    int8x16_t v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 15));
                    int8x16_t v54 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[12]), (int16x8_t)vcgtq_s32(v46, v33[13])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[14]), (int16x8_t)vcgtq_s32(v46, v33[15])));
                    int8x16_t v51 = vandq_s8(vuzp1q_s8(v48, v47), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[8]), (int16x8_t)vcgtq_s32(v46, v33[9])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[10]), (int16x8_t)vcgtq_s32(v46, v33[11]))));
                    int8x16_t v52 = vandq_s8(v53, v54);
                    if (v35 != 64)
                    {
                      int8x16_t v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 17));
                      int8x16_t v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 16));
                      int8x16_t v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 18));
                      int8x16_t v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 19));
                      int8x16_t v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 21));
                      int8x16_t v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 20));
                      int8x16_t v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 22));
                      int8x16_t v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 23));
                      v55.i64[0] = 0x1D0000001DLL;
                      v55.i64[1] = 0x1D0000001DLL;
                      int8x16_t v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[16]), (int16x8_t)vcgtq_s32(v55, v33[17])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[18]), (int16x8_t)vcgtq_s32(v55, v33[19]))));
                      int8x16_t v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[20]), (int16x8_t)vcgtq_s32(v55, v33[21])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[22]), (int16x8_t)vcgtq_s32(v55, v33[23]))));
                      if (v35 != 96)
                      {
                        int8x16_t v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 25));
                        int8x16_t v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 24));
                        int8x16_t v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 26));
                        int8x16_t v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 27));
                        int8x16_t v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 29));
                        int8x16_t v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 28));
                        int8x16_t v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 30));
                        int8x16_t v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 31));
                        int8x16_t v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[24]), (int16x8_t)vcgtq_s32(v55, v33[25])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[26]), (int16x8_t)vcgtq_s32(v55, v33[27]))));
                        int8x16_t v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[28]), (int16x8_t)vcgtq_s32(v55, v33[29])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[30]), (int16x8_t)vcgtq_s32(v55, v33[31]))));
                        if (v35 != 128)
                        {
                          int8x16_t v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 33));
                          int8x16_t v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 32));
                          int8x16_t v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 34));
                          int8x16_t v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 35));
                          int8x16_t v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 37));
                          int8x16_t v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 36));
                          int8x16_t v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 38));
                          int8x16_t v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 39));
                          v56.i64[0] = 0x1D0000001DLL;
                          v56.i64[1] = 0x1D0000001DLL;
                          int8x16_t v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[32]), (int16x8_t)vcgtq_s32(v56, v33[33])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[34]), (int16x8_t)vcgtq_s32(v56, v33[35]))));
                          int8x16_t v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[36]), (int16x8_t)vcgtq_s32(v56, v33[37])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[38]), (int16x8_t)vcgtq_s32(v56, v33[39]))));
                          if (v35 != 160)
                          {
                            int8x16_t v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 41));
                            int8x16_t v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 40));
                            int8x16_t v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 42));
                            int8x16_t v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 43));
                            int8x16_t v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 45));
                            int8x16_t v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 44));
                            int8x16_t v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 46));
                            int8x16_t v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 47));
                            int8x16_t v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[40]), (int16x8_t)vcgtq_s32(v56, v33[41])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[42]), (int16x8_t)vcgtq_s32(v56, v33[43]))));
                            int8x16_t v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[44]), (int16x8_t)vcgtq_s32(v56, v33[45])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[46]), (int16x8_t)vcgtq_s32(v56, v33[47]))));
                            if (v35 != 192)
                            {
                              int8x16_t v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 49));
                              int8x16_t v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 48));
                              int8x16_t v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 50));
                              int8x16_t v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 51));
                              int8x16_t v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 53));
                              int8x16_t v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 52));
                              int8x16_t v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 54));
                              int8x16_t v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 55));
                              v57.i64[0] = 0x1D0000001DLL;
                              v57.i64[1] = 0x1D0000001DLL;
                              int8x16_t v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[48]), (int16x8_t)vcgtq_s32(v57, v33[49])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[50]), (int16x8_t)vcgtq_s32(v57, v33[51]))));
                              int8x16_t v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[52]), (int16x8_t)vcgtq_s32(v57, v33[53])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[54]), (int16x8_t)vcgtq_s32(v57, v33[55]))));
                            }
                          }
                        }
                      }
                    }
                  }
                  unsigned __int8 v36 = vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v44, v40)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v45, v41))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v42, v38)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v43, v39)))))) & 1;
                  unsigned __int8 v37 = vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vandq_s8(v52, v51), 7uLL)));
                  if (v35 == v18) {
                    goto LABEL_70;
                  }
                  if ((v18 & 0x18) == 0)
                  {
LABEL_68:
                    std::vector<int>::size_type v69 = v18 - v35;
                    uint64_t v70 = v35;
                    int v71 = &v33->i32[v70];
                    unsigned int v72 = &v100.__begin_[v70];
                    do
                    {
                      int v73 = *v72++;
                      v36 |= v73 != 0;
                      int v74 = *v71++;
                      v37 &= v74 < 29;
                      --v69;
                    }
                    while (v69);
                    goto LABEL_70;
                  }
                }
                else
                {
                  unsigned __int8 v36 = 0;
                  uint64_t v35 = 0;
                  unsigned __int8 v37 = 1;
                }
                uint64_t v58 = v35;
                int8x8_t v59 = (int8x8_t)-1;
                v59.i8[0] = v37;
                int8x8_t v60 = (int8x8_t)v36;
                uint64_t v35 = v18 & 0xF8;
                int v61 = &v100.__begin_[v58];
                unsigned int v62 = (int32x4_t *)((char *)v33 + 4 * v58);
                uint64_t v63 = v58 - v35;
                v64.i64[0] = 0x1D0000001DLL;
                v64.i64[1] = 0x1D0000001DLL;
                do
                {
                  int32x4_t v65 = *(int32x4_t *)v61;
                  int32x4_t v66 = *((int32x4_t *)v61 + 1);
                  v61 += 8;
                  int8x8_t v60 = vorr_s8(v60, vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v65), (int16x8_t)vceqzq_s32(v66)))));
                  int32x4_t v67 = *v62;
                  int32x4_t v68 = v62[1];
                  v62 += 2;
                  int8x8_t v59 = vand_s8(v59, vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_s32(v64, v67), (int16x8_t)vcgtq_s32(v64, v68))));
                  v63 += 8;
                }
                while (v63);
                unsigned __int8 v36 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v60, 7uLL))) & 1;
                unsigned __int8 v37 = vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v59, 7uLL)));
                if (v35 != v18) {
                  goto LABEL_68;
                }
LABEL_70:
                if (v37) {
                  goto LABEL_71;
                }
                goto LABEL_92;
              }
            }
            else if (v18 == 2)
            {
              uint64_t result = 3;
              if (v22 - 28 < 0xFFFFFFE5) {
                return result;
              }
              std::vector<int>::size_type v25 = 2;
              std::vector<int>::vector(&v100, 2uLL);
              goto LABEL_36;
            }
          }
          return 3;
        }
      }
    }
  }
  return result;
}

void sub_1A2857D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    if (__n >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    std::vector<int>::size_type v4 = __n;
    int v5 = (int *)operator new(4 * __n);
    this->__begin_ = v5;
    this->__end_cap_.__value_ = &v5[__n];
    bzero(v5, 4 * __n);
    this->__end_ = &v5[v4];
  }
  return this;
}

void sub_1A2857E1C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void gcl::tmesh::DecoderImpl::decodeVertexAttributesAC(gcl::tmesh::DecoderImpl *this, int *a2, BOOL *a3)
{
  uint64_t v1100 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((unsigned int *)this + 960);
  *(void *)v1069 = v6;
  if (*((_DWORD *)this + 964) == 1)
  {
    memset_pattern16(&__b, &memset_pattern_27, 4uLL);
    uint64_t v7 = *((unsigned int *)this + 959);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *((void *)this + 22);
      uint64_t v10 = *((void *)this + 25);
      unsigned int v11 = *((_DWORD *)this + 683);
      unsigned int v12 = *((_DWORD *)this + 684);
      while (1)
      {
        int v19 = (int *)(v9 + 12 * v8);
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        uint64_t v22 = v19[2];
        BOOL v23 = (int *)(v10 + 12 * v8);
        uint64_t v24 = v23[2];
        if (v24 != -1)
        {
          BOOL v25 = a3[v21] + a3[v20] + a3[v22] + a3[*v23] + a3[v23[1]] + a3[v24] > 2;
          if (v11 < 0x40000001) {
            break;
          }
          goto LABEL_4;
        }
        if (v22 != -1)
        {
          BOOL v25 = a3[v21] + a3[v20] + a3[v22] > 1;
          if (v11 < 0x40000001) {
            break;
          }
          goto LABEL_4;
        }
        if (v21 != -1)
        {
          BOOL v25 = a3[v20];
          if (v25)
          {
            BOOL v26 = a3[v21];
            goto LABEL_23;
          }
          goto LABEL_24;
        }
        if (v20 != -1)
        {
          BOOL v26 = a3[v20];
LABEL_23:
          BOOL v25 = v26;
LABEL_24:
          if (v11 < 0x40000001) {
            break;
          }
          goto LABEL_4;
        }
        BOOL v25 = 0;
        if (v11 < 0x40000001) {
          break;
        }
LABEL_4:
        unsigned int v13 = v11;
LABEL_5:
        unsigned int v14 = *((unsigned __int16 *)&v1078[-2] + v25);
        unsigned int v15 = (HIWORD(v13) * v14) & 0xFFFF0000;
        unsigned int v16 = v13 - v15;
        BOOL v17 = v12 >= v15;
        *((_WORD *)&v1078[-2] + v25) = *((_WORD *)this + ((v14 >> 7) & 0x1FE | v17) + 1376) + v14;
        if (v12 < v15) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v16;
        }
        if (v12 < v15) {
          unsigned int v18 = 0;
        }
        else {
          unsigned int v18 = v15;
        }
        v12 -= v18;
        *((_DWORD *)this + 683) = v11;
        *((_DWORD *)this + 684) = v12;
        a3[v8++] = v17;
        if (v8 == v7) {
          goto LABEL_37;
        }
      }
      int v27 = *((_DWORD *)this + 686);
      while (1)
      {
        v12 *= 2;
        *((_DWORD *)this + 686) = --v27;
        if (v27) {
          goto LABEL_28;
        }
        uint64_t v29 = *((void *)this + 340);
        *((void *)this + 340) = v29 + 1;
        unint64_t v30 = *((unsigned int *)this + 676);
        if (v29 + 1 >= v30)
        {
          int v31 = 65280;
          unint64_t v32 = v29 + 2;
          *((void *)this + 340) = v32;
          if (v32 >= v30)
          {
LABEL_34:
            int v28 = 255;
            goto LABEL_27;
          }
        }
        else
        {
          int v31 = *(unsigned __int8 *)(*((void *)this + 339) + v29 + 1) << 8;
          unint64_t v32 = v29 + 2;
          *((void *)this + 340) = v32;
          if (v32 >= v30) {
            goto LABEL_34;
          }
        }
        int v28 = *(unsigned __int8 *)(*((void *)this + 339) + v32);
LABEL_27:
        v12 |= v31 | v28;
        int v27 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_28:
        unsigned int v13 = 2 * v11;
        BOOL v84 = v11 >= 0x20000001;
        v11 *= 2;
        if (v84) {
          goto LABEL_5;
        }
      }
    }
LABEL_37:
    uint64_t v6 = *(void *)v1069;
  }
  uint64_t v33 = (int)v6;
  v1064 = a3;
  v1065 = a2;
  uint64_t v1066 = (int)v6;
  switch(*((_DWORD *)this + 967))
  {
    case 0:
      long long v1090 = 0u;
      long long v1091 = 0u;
      long long v1088 = 0u;
      long long v1089 = 0u;
      long long v1086 = 0u;
      long long v1087 = 0u;
      long long v1084 = 0u;
      long long v1085 = 0u;
      long long v1082 = 0u;
      long long v1083 = 0u;
      long long v1081 = 0u;
      long long v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      long long __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v33);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      uint64_t v34 = *(void *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = (int32x4_t *)operator new(4 * v33);
        v1074 = v35;
        v1076 = (int32x4_t *)((char *)v35 + 4 * v33);
        bzero(v35, 4 * v33);
        v1075 = v1076;
        uint64_t v34 = *(void *)v1069;
        if (*((int *)this + 959) < 1) {
          goto LABEL_519;
        }
      }
      else
      {
        uint64_t v35 = 0;
        if (*((int *)this + 959) < 1)
        {
LABEL_519:
          if (!v35) {
            goto LABEL_1158;
          }
          unint64_t v369 = v35;
          goto LABEL_1157;
        }
      }
      uint64_t v327 = 0;
      int v328 = *((_DWORD *)this + 964);
      uint64_t v329 = v34 & 0xFFFFFFFC;
      size_t v1051 = v34 & 0xFFFFFFF8;
      size_t v1060 = 4 * v34;
      while (1)
      {
        if (v328)
        {
          if (!a3[v327]) {
            goto LABEL_479;
          }
          v331 = (int *)(*((void *)this + 22) + 12 * v327);
          int v332 = *v331;
          int v333 = v331[1];
          if (v333 == -1 || !a3[v332] || !a3[v333])
          {
            if (v332 == -1 || !a3[v332])
            {
LABEL_508:
              if (v34) {
                bzero(v35, v1060);
              }
              gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v35, v1066, 3u, 0, (int32x4_t *)&a2[v327 * v1066]);
              uint64_t v34 = *(void *)v1069;
              goto LABEL_479;
            }
LABEL_487:
            if (v34)
            {
              uint64_t v334 = v332 * (int)v1066;
              if (v1066 < 8 || (unint64_t)((char *)v35 - (char *)a2 - 4 * v334) < 0x20)
              {
                size_t v335 = 0;
                goto LABEL_491;
              }
              size_t v365 = v1051;
              uint64_t v366 = &a2[v334 + 4];
              long long v367 = v35 + 1;
              do
              {
                int32x4_t v368 = *(int32x4_t *)v366;
                v367[-1] = *((int32x4_t *)v366 - 1);
                *long long v367 = v368;
                v366 += 8;
                v367 += 2;
                v365 -= 8;
              }
              while (v365);
              size_t v335 = v1051;
              if (v1051 != v34)
              {
LABEL_491:
                size_t v336 = v34 - v335;
                size_t v337 = v335;
                uint64_t v338 = &v35->i32[v335];
                v339 = &a2[v334 + v337];
                do
                {
                  __int32 v340 = *v339++;
                  *v338++ = v340;
                  --v336;
                }
                while (v336);
              }
            }
            unsigned int v330 = 0;
            goto LABEL_478;
          }
        }
        else
        {
          uint64_t v341 = (int *)(*((void *)this + 22) + 12 * v327);
          int v332 = *v341;
          int v333 = v341[1];
          if (v333 == -1)
          {
            if (v332 == -1) {
              goto LABEL_508;
            }
            goto LABEL_487;
          }
        }
        if (v34)
        {
          int v342 = v332 * v34;
          uint64_t v343 = v332 * (int)v34;
          int v344 = v333 * v1066;
          uint64_t v345 = v333 * (int)v1066;
          if (v34 < 8
            || ((unint64_t)((char *)v35 - (char *)&a2[v344]) >= 0x10
              ? (BOOL v346 = (unint64_t)((char *)v35 - (char *)&a2[v342]) >= 0x10)
              : (BOOL v346 = 0),
                !v346))
          {
            uint64_t v347 = 0;
LABEL_502:
            uint64_t v348 = v34 - v347;
            uint64_t v349 = v347;
            v350 = &v35->i32[v347];
            v351 = &a2[v345 + v349];
            uint64_t v352 = &a2[v343 + v349];
            do
            {
              int v354 = *v352++;
              int v353 = v354;
              int v355 = *v351++;
              BOOL v296 = __OFADD__(v355, v353);
              int v356 = v355 + v353;
              if (v356 < 0 != v296) {
                ++v356;
              }
              *v350++ = v356 >> 1;
              --v348;
            }
            while (v348);
            goto LABEL_477;
          }
          unint64_t v357 = &a2[v342];
          uint64_t v358 = v329;
          long long v359 = v35;
          uint64_t v360 = &a2[v344];
          do
          {
            int32x4_t v361 = *(int32x4_t *)v357;
            v357 += 4;
            int32x4_t v362 = v361;
            int32x4_t v363 = *(int32x4_t *)v360;
            v360 += 4;
            uint32x4_t v364 = (uint32x4_t)vaddq_s32(v363, v362);
            *v359++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v364, v364, 0x1FuLL), 1uLL);
            v358 -= 4;
          }
          while (v358);
          uint64_t v347 = v329;
          if (v329 != v34) {
            goto LABEL_502;
          }
        }
LABEL_477:
        unsigned int v330 = 1;
LABEL_478:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v35, v1066, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v330 - 2], (int32x4_t *)&a2[v327 * v1066]);
        uint64_t v34 = *(void *)v1069;
LABEL_479:
        if (++v327 >= *((int *)this + 959)) {
          goto LABEL_519;
        }
      }
    case 1:
      uint64_t v1099 = 0;
      long long v1097 = 0u;
      long long __p = 0u;
      long long v1095 = 0u;
      long long v1096 = 0u;
      long long v1093 = 0u;
      long long v1094 = 0u;
      long long v1091 = 0u;
      long long v1092 = 0u;
      long long v1089 = 0u;
      long long v1090 = 0u;
      long long v1087 = 0u;
      long long v1088 = 0u;
      long long v1085 = 0u;
      long long v1086 = 0u;
      long long v1083 = 0u;
      long long v1084 = 0u;
      long long v1081 = 0u;
      long long v1082 = 0u;
      long long v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      long long __b = 0u;
      *(_OWORD *)v1078 = 0u;
      uint64_t v43 = v6;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v43);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v43);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      uint64_t v44 = v43;
      if (v43)
      {
        uint64_t v45 = v1066;
        if ((v1066 & 0x80000000) != 0) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        int8x16_t v41 = (int32x4_t *)operator new(4 * v1066);
        v1074 = v41;
        v1076 = (int32x4_t *)((char *)v41 + 4 * v1066);
        bzero(v41, 4 * v1066);
        v1075 = v1076;
        uint64_t v44 = *(void *)v1069;
        if (*((int *)this + 959) < 1)
        {
LABEL_1144:
          if (!v41) {
            goto LABEL_1147;
          }
          v676 = v41;
LABEL_1146:
          operator delete(v676);
LABEL_1147:
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (*((void *)&v1096 + 1))
          {
            *(void *)&long long v1097 = *((void *)&v1096 + 1);
            operator delete(*((void **)&v1096 + 1));
          }
          if ((void)v1095)
          {
            *((void *)&v1095 + 1) = v1095;
            operator delete((void *)v1095);
          }
          if (*((void *)&v1093 + 1))
          {
            *(void *)&long long v1094 = *((void *)&v1093 + 1);
            operator delete(*((void **)&v1093 + 1));
          }
          unint64_t v369 = (int32x4_t *)v1092;
          if ((void)v1092)
          {
            *((void *)&v1092 + 1) = v1092;
LABEL_1157:
            operator delete(v369);
          }
LABEL_1158:
          if (*((void *)&v1090 + 1))
          {
            *(void *)&long long v1091 = *((void *)&v1090 + 1);
            operator delete(*((void **)&v1090 + 1));
          }
          if ((void)v1089)
          {
            *((void *)&v1089 + 1) = v1089;
            operator delete((void *)v1089);
          }
          if (*((void *)&v1087 + 1))
          {
            *(void *)&long long v1088 = *((void *)&v1087 + 1);
            operator delete(*((void **)&v1087 + 1));
          }
          if ((void)v1086)
          {
            *((void *)&v1086 + 1) = v1086;
            operator delete((void *)v1086);
          }
          if (*((void *)&v1084 + 1))
          {
            *(void *)&long long v1085 = *((void *)&v1084 + 1);
            operator delete(*((void **)&v1084 + 1));
          }
          if ((void)v1083)
          {
            *((void *)&v1083 + 1) = v1083;
            operator delete((void *)v1083);
          }
          if (*((void *)&v1081 + 1))
          {
            *(void *)&long long v1082 = *((void *)&v1081 + 1);
            operator delete(*((void **)&v1081 + 1));
          }
          if (v1080[0])
          {
            v1080[1] = v1080[0];
            operator delete(v1080[0]);
          }
          if (v1078[1])
          {
            *(void **)&long long v1079 = v1078[1];
            operator delete(v1078[1]);
          }
          v326 = (int32x4_t *)__b;
          if ((void)__b)
          {
            *((void *)&__b + 1) = __b;
            goto LABEL_1178;
          }
          return;
        }
      }
      else
      {
        int8x16_t v41 = 0;
        uint64_t v45 = v1066;
        if (*((int *)this + 959) < 1) {
          goto LABEL_1144;
        }
      }
      uint64_t v958 = 0;
      int v959 = *((_DWORD *)this + 964);
      uint64_t v1068 = v44 & 0xFFFFFFF8;
      size_t v1048 = v44 & 0xFFFFFFFC;
      v1056 = a2 + 4;
      size_t v1063 = 4 * v44;
      while (1)
      {
        if (v959)
        {
          if (!a3[v958]) {
            goto LABEL_1086;
          }
          v961 = (int *)(*((void *)this + 22) + 12 * v958);
          int v962 = *v961;
          int v963 = v961[1];
          int v964 = v961[2];
          if (v964 == -1 || !a3[v962] || !a3[v963] || !a3[v964])
          {
            if (v963 != -1 && a3[v962] && a3[v963])
            {
LABEL_1113:
              if (v44)
              {
                int v988 = v962 * v44;
                uint64_t v989 = v962 * (int)v44;
                int v990 = v963 * v44;
                uint64_t v991 = v963 * (int)v44;
                if (v45 >= 8
                  && ((unint64_t)((char *)v41 - (char *)&a2[v990]) >= 0x10
                    ? (BOOL v992 = (unint64_t)((char *)v41 - (char *)&a2[v988]) >= 0x10)
                    : (BOOL v992 = 0),
                      v992))
                {
                  v1011 = &a2[v988];
                  size_t v1012 = v1048;
                  v1013 = v41;
                  v1014 = &a2[v990];
                  do
                  {
                    int32x4_t v1015 = *(int32x4_t *)v1011;
                    v1011 += 4;
                    int32x4_t v1016 = v1015;
                    int32x4_t v1017 = *(int32x4_t *)v1014;
                    v1014 += 4;
                    uint32x4_t v1018 = (uint32x4_t)vaddq_s32(v1017, v1016);
                    *v1013++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v1018, v1018, 0x1FuLL), 1uLL);
                    v1012 -= 4;
                  }
                  while (v1012);
                  size_t v993 = v1048;
                  if (v1048 != v44) {
                    goto LABEL_1120;
                  }
                }
                else
                {
                  size_t v993 = 0;
LABEL_1120:
                  size_t v994 = v44 - v993;
                  size_t v995 = v993;
                  v996 = &v41->i32[v993];
                  v997 = &a2[v991 + v995];
                  v998 = &a2[v989 + v995];
                  do
                  {
                    int v1000 = *v998++;
                    int v999 = v1000;
                    int v1001 = *v997++;
                    BOOL v296 = __OFADD__(v1001, v999);
                    int v1002 = v1001 + v999;
                    if (v1002 < 0 != v296) {
                      ++v1002;
                    }
                    *v996++ = v1002 >> 1;
                    --v994;
                  }
                  while (v994);
                }
              }
              unsigned int v960 = 1;
              goto LABEL_1085;
            }
            if (v962 == -1 || !a3[v962])
            {
LABEL_1133:
              if (v44)
              {
                bzero(v41, v1063);
                uint64_t v44 = *(void *)v1069;
              }
              gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v44, 3u, 0, (int32x4_t *)&a2[v958 * v45]);
              uint64_t v44 = *(void *)v1069;
              goto LABEL_1086;
            }
LABEL_1098:
            if (v45)
            {
              uint64_t v965 = v962 * (int)v45;
              if (v44 < 8 || (unint64_t)((char *)v41 - (char *)&a2[v965]) < 0x20)
              {
                uint64_t v966 = 0;
                goto LABEL_1102;
              }
              v1019 = &v1056[v965];
              v1020 = v41 + 1;
              uint64_t v1021 = v1068;
              do
              {
                int32x4_t v1022 = *(int32x4_t *)v1019;
                v1020[-1] = *((int32x4_t *)v1019 - 1);
                int32x4_t *v1020 = v1022;
                v1019 += 8;
                v1020 += 2;
                v1021 -= 8;
              }
              while (v1021);
              uint64_t v966 = v1068;
              if (v1068 != v44)
              {
LABEL_1102:
                uint64_t v967 = v44 - v966;
                uint64_t v968 = v966;
                v969 = &v41->i32[v966];
                v970 = &a2[v965 + v968];
                do
                {
                  __int32 v971 = *v970++;
                  *v969++ = v971;
                  --v967;
                }
                while (v967);
              }
            }
            unsigned int v960 = 0;
            goto LABEL_1085;
          }
        }
        else
        {
          v972 = (int *)(*((void *)this + 22) + 12 * v958);
          int v962 = *v972;
          int v963 = v972[1];
          int v964 = v972[2];
          if (v964 == -1)
          {
            if (v963 != -1) {
              goto LABEL_1113;
            }
            if (v962 == -1) {
              goto LABEL_1133;
            }
            goto LABEL_1098;
          }
        }
        if (v44)
        {
          uint64_t v973 = v962 * (int)v44;
          uint64_t v974 = v963 * (int)v45;
          uint64_t v975 = v964 * (int)v45;
          if (v45 >= 0xC)
          {
            uint64_t v976 = 0;
            int64_t v1003 = (char *)v41 - (char *)a2;
            if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v975) >= 0x20
              && (unint64_t)(v1003 - 4 * v974) >= 0x20
              && (unint64_t)(v1003 - 4 * v973) >= 0x20)
            {
              v1004 = (int32x4_t *)&v1056[v973];
              v1005 = v41 + 1;
              v1006 = (int32x4_t *)&v1056[v974];
              v1007 = (int32x4_t *)&v1056[v975];
              uint64_t v1008 = v1068;
              do
              {
                int32x4_t v1009 = vsubq_s32(vaddq_s32(v1006[-1], v1004[-1]), v1007[-1]);
                int32x4_t v1010 = vsubq_s32(vaddq_s32(*v1006, *v1004), *v1007);
                v1004 += 2;
                v1005[-1] = v1009;
                int32x4_t *v1005 = v1010;
                v1005 += 2;
                v1006 += 2;
                v1007 += 2;
                v1008 -= 8;
              }
              while (v1008);
              uint64_t v976 = v1068;
              if (v1068 == v44) {
                goto LABEL_1084;
              }
            }
          }
          else
          {
            uint64_t v976 = 0;
          }
          uint64_t v977 = v976;
          uint64_t v978 = v44 - v976;
          v979 = &v41->i32[v977];
          v980 = &a2[v975 + v977];
          v981 = &a2[v974 + v977];
          v982 = &a2[v973 + v977];
          do
          {
            int v984 = *v982++;
            int v983 = v984;
            int v985 = *v981++;
            int v986 = v985 + v983;
            int v987 = *v980++;
            *v979++ = v986 - v987;
            --v978;
          }
          while (v978);
        }
LABEL_1084:
        unsigned int v960 = 2;
LABEL_1085:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v45, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v960 - 2], (int32x4_t *)&a2[v958 * v45]);
        uint64_t v44 = *(void *)v1069;
LABEL_1086:
        if (++v958 >= *((int *)this + 959)) {
          goto LABEL_1144;
        }
      }
    case 2:
      uint64_t v1099 = 0;
      long long v1097 = 0u;
      long long __p = 0u;
      long long v1095 = 0u;
      long long v1096 = 0u;
      long long v1093 = 0u;
      long long v1094 = 0u;
      long long v1091 = 0u;
      long long v1092 = 0u;
      long long v1089 = 0u;
      long long v1090 = 0u;
      long long v1087 = 0u;
      long long v1088 = 0u;
      long long v1085 = 0u;
      long long v1086 = 0u;
      long long v1083 = 0u;
      long long v1084 = 0u;
      long long v1081 = 0u;
      long long v1082 = 0u;
      long long v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      long long __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      uint64_t v39 = v33;
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v33);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      memset_pattern16(&v1072, &memset_pattern_27, 6uLL);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      uint64_t v40 = *(void *)v1069;
      if (v1069[0])
      {
        if ((v33 & 0x80000000) != 0) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        int8x16_t v41 = (int32x4_t *)operator new(4 * v33);
        v1074 = v41;
        v1076 = (int32x4_t *)((char *)v41 + 4 * v33);
        bzero(v41, 4 * v33);
        v1075 = (int32x4_t *)((char *)v41 + 4 * v33);
        uint64_t v40 = *(void *)v1069;
        if (*((int *)this + 959) < 1) {
          goto LABEL_1144;
        }
      }
      else
      {
        int8x16_t v41 = 0;
        if (*((int *)this + 959) < 1) {
          goto LABEL_1144;
        }
      }
      uint64_t v677 = 0;
      int v678 = *((_DWORD *)this + 964);
      unsigned int v679 = v1072.u16[0];
      uint64_t v1054 = 4 * v40;
      uint64_t v1062 = v40 & 0xFFFFFFF8;
      uint64_t v1041 = v40 & 0xFFFFFFFC;
      v1046 = a2 + 4;
      int32x4_t v680 = vdupq_n_s32(0x55555556u);
      int32x4_t v1067 = v680;
      while (1)
      {
        if (v678 && !a3[v677]) {
          goto LABEL_823;
        }
        v682 = (int *)(*((void *)this + 22) + 12 * v677);
        uint64_t v683 = *v682;
        uint64_t v684 = v682[1];
        uint64_t v685 = v682[2];
        v686 = (int *)(*((void *)this + 25) + 12 * v677);
        uint64_t v687 = v686[2];
        if (v687 != -1
          && ((v689 = *v686, uint64_t v688 = v686[1], !v678)
           || a3[v683] && a3[v684] && a3[v685] && a3[v689] && a3[v688] && a3[v687]))
        {
          unsigned int v690 = *((_DWORD *)this + 683);
          unsigned int v691 = *((_DWORD *)this + 684);
          if (v690 < 0x40000001)
          {
            int v692 = *((_DWORD *)this + 686);
            while (1)
            {
              v691 *= 2;
              *((_DWORD *)this + 686) = --v692;
              if (v692) {
                goto LABEL_838;
              }
              uint64_t v695 = *((void *)this + 340);
              *((void *)this + 340) = v695 + 1;
              unint64_t v696 = *((unsigned int *)this + 676);
              if (v695 + 1 >= v696)
              {
                int v697 = 65280;
                unint64_t v698 = v695 + 2;
                *((void *)this + 340) = v698;
                if (v698 >= v696)
                {
LABEL_844:
                  int v693 = 255;
                  goto LABEL_837;
                }
              }
              else
              {
                int v697 = *(unsigned __int8 *)(*((void *)this + 339) + v695 + 1) << 8;
                unint64_t v698 = v695 + 2;
                *((void *)this + 340) = v698;
                if (v698 >= v696) {
                  goto LABEL_844;
                }
              }
              int v693 = *(unsigned __int8 *)(*((void *)this + 339) + v698);
LABEL_837:
              v691 |= v697 | v693;
              int v692 = 16;
              *((_DWORD *)this + 686) = 16;
LABEL_838:
              unsigned int v694 = 2 * v690;
              BOOL v84 = v690 >= 0x20000001;
              v690 *= 2;
              if (v84) {
                goto LABEL_886;
              }
            }
          }
          unsigned int v694 = *((_DWORD *)this + 683);
LABEL_886:
          unsigned int v736 = (HIWORD(v694) * (unsigned __int16)v679) & 0xFFFF0000;
          unsigned int v737 = v694 - v736;
          BOOL v738 = v691 >= v736;
          BOOL v739 = v691 >= v736;
          int v740 = *((unsigned __int16 *)this + ((v679 >> 7) & 0x1FE | v739) + 1376);
          if (v691 < v736) {
            unsigned int v741 = v736;
          }
          else {
            unsigned int v741 = v737;
          }
          if (v691 < v736) {
            unsigned int v742 = 0;
          }
          else {
            unsigned int v742 = v736;
          }
          uint64_t v743 = 1;
          if (v738) {
            uint64_t v743 = 2;
          }
          unsigned int v744 = v691 - v742;
          *((_DWORD *)this + 683) = v741;
          *((_DWORD *)this + 684) = v744;
          if (v741 < 0x40000001)
          {
            int v745 = *((_DWORD *)this + 686);
            while (2)
            {
              v744 *= 2;
              *((_DWORD *)this + 686) = --v745;
              if (v745) {
                goto LABEL_898;
              }
              uint64_t v748 = *((void *)this + 340);
              *((void *)this + 340) = v748 + 1;
              unint64_t v749 = *((unsigned int *)this + 676);
              if (v748 + 1 >= v749)
              {
                int v750 = 65280;
                unint64_t v751 = v748 + 2;
                *((void *)this + 340) = v751;
                if (v751 >= v749) {
                  goto LABEL_904;
                }
              }
              else
              {
                int v750 = *(unsigned __int8 *)(*((void *)this + 339) + v748 + 1) << 8;
                unint64_t v751 = v748 + 2;
                *((void *)this + 340) = v751;
                if (v751 >= v749)
                {
LABEL_904:
                  int v746 = 255;
LABEL_897:
                  v744 |= v750 | v746;
                  int v745 = 16;
                  *((_DWORD *)this + 686) = 16;
LABEL_898:
                  unsigned int v747 = 2 * v741;
                  BOOL v84 = v741 >= 0x20000001;
                  v741 *= 2;
                  if (v84) {
                    goto LABEL_906;
                  }
                  continue;
                }
              }
              break;
            }
            int v746 = *(unsigned __int8 *)(*((void *)this + 339) + v751);
            goto LABEL_897;
          }
          unsigned int v747 = v741;
LABEL_906:
          v679 += v740;
          unsigned int v752 = v1072.u16[v743];
          unsigned int v753 = (HIWORD(v747) * v752) & 0xFFFF0000;
          unsigned int v754 = v747 - v753;
          BOOL v755 = v744 >= v753;
          v1072.i16[v743] = *((_WORD *)this + ((v752 >> 7) & 0x1FE | v755) + 1376) + v752;
          if (v744 < v753) {
            unsigned int v756 = v753;
          }
          else {
            unsigned int v756 = v754;
          }
          if (v744 < v753) {
            unsigned int v757 = 0;
          }
          else {
            unsigned int v757 = v753;
          }
          *((_DWORD *)this + 683) = v756;
          *((_DWORD *)this + 684) = v744 - v757;
          int v758 = v739 | (2 * v755);
          int v759 = v683 * v40;
          uint64_t v760 = v759;
          int v761 = v684 * v40;
          uint64_t v762 = v761;
          int v763 = v685 * v40;
          uint64_t v764 = (int)v685 * (int)v40;
          if (v758)
          {
            int v765 = v689 * v40;
            uint64_t v766 = (int)v689 * (int)v40;
            int v767 = v688 * v39;
            uint64_t v768 = v767;
            int v769 = v687 * v40;
            if (v758 == 1)
            {
              if (v40)
              {
                if (v40 >= 0xC)
                {
                  uint64_t v786 = 0;
                  int64_t v829 = (char *)v41 - (char *)a2;
                  if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v769) >= 0x20
                    && (unint64_t)(v829 - 4 * v767) >= 0x20
                    && (unint64_t)(v829 - 4 * v766) >= 0x20)
                  {
                    v830 = (int32x4_t *)&v1046[v766];
                    v831 = v41 + 1;
                    v832 = (int32x4_t *)&v1046[v767];
                    v833 = (int32x4_t *)&v1046[v769];
                    uint64_t v834 = v1062;
                    do
                    {
                      int32x4_t v835 = vsubq_s32(vaddq_s32(v832[-1], v830[-1]), v833[-1]);
                      int32x4_t v836 = vsubq_s32(vaddq_s32(*v832, *v830), *v833);
                      v830 += 2;
                      v831[-1] = v835;
                      int32x4_t *v831 = v836;
                      v831 += 2;
                      v832 += 2;
                      v833 += 2;
                      v834 -= 8;
                    }
                    while (v834);
                    uint64_t v786 = v1062;
                    if (v1062 == v40) {
                      goto LABEL_821;
                    }
                  }
                }
                else
                {
                  uint64_t v786 = 0;
                }
                uint64_t v787 = v786;
                uint64_t v788 = v40 - v786;
                v789 = &v41->i32[v787];
                v790 = &a2[v769 + v787];
                v791 = &a2[v768 + v787];
                v792 = &a2[v766 + v787];
                do
                {
                  int v794 = *v792++;
                  int v793 = v794;
                  int v795 = *v791++;
                  int v796 = v795 + v793;
                  int v797 = *v790++;
                  *v789++ = v796 - v797;
                  --v788;
                }
                while (v788);
              }
            }
            else
            {
              v770 = &a2[v759];
              v771 = &a2[v761];
              v772 = &a2[v765];
              v773 = &a2[v767];
              if (v758 == 2)
              {
                if (v40)
                {
                  if (v39 < 0xC)
                  {
                    for (uint64_t i = 0; i != v40; ++i)
                    {
LABEL_918:
                      int v775 = v770[i];
                      int v776 = v772[i];
                      BOOL v296 = __OFADD__(v776, v775);
                      int v777 = v776 + v775;
                      if (v777 < 0 != v296) {
                        ++v777;
                      }
                      v41->i32[i] = v773[i] + v771[i] - (v777 >> 1);
                    }
                    goto LABEL_821;
                  }
                  uint64_t i = 0;
                  uint64_t v845 = v766;
                  int64_t v846 = (char *)v41 - (char *)a2;
                  if ((unint64_t)((char *)v41 - (char *)a2 - v845 * 4) < 0x20) {
                    goto LABEL_918;
                  }
                  uint64_t v847 = v760;
                  if ((unint64_t)(v846 - 4 * v760) < 0x20) {
                    goto LABEL_918;
                  }
                  if ((unint64_t)(v846 - 4 * v768) < 0x20) {
                    goto LABEL_918;
                  }
                  uint64_t v848 = v762;
                  if ((unint64_t)(v846 - v848 * 4) < 0x20) {
                    goto LABEL_918;
                  }
                  v849 = (int32x4_t *)&v1046[v848];
                  v850 = v41 + 1;
                  v851 = (int32x4_t *)&v1046[v768];
                  v852 = (int32x4_t *)&v1046[v845];
                  v853 = (int32x4_t *)&v1046[v847];
                  uint64_t v854 = v1062;
                  do
                  {
                    uint32x4_t v855 = (uint32x4_t)vaddq_s32(v852[-1], v853[-1]);
                    uint32x4_t v856 = (uint32x4_t)vaddq_s32(*v852, *v853);
                    int32x4_t v857 = vsubq_s32(vaddq_s32(*v851, *v849), vshrq_n_s32((int32x4_t)vsraq_n_u32(v856, v856, 0x1FuLL), 1uLL));
                    v850[-1] = vsubq_s32(vaddq_s32(v851[-1], v849[-1]), vshrq_n_s32((int32x4_t)vsraq_n_u32(v855, v855, 0x1FuLL), 1uLL));
                    int32x4_t *v850 = v857;
                    v849 += 2;
                    v850 += 2;
                    v851 += 2;
                    v852 += 2;
                    v853 += 2;
                    v854 -= 8;
                  }
                  while (v854);
                  uint64_t i = v1062;
                  if (v1062 != v40) {
                    goto LABEL_918;
                  }
                }
              }
              else if (v40)
              {
                v810 = &a2[v763];
                v811 = &a2[v769];
                if (v39 < 0xC)
                {
                  for (uint64_t j = 0; j != v40; ++j)
                  {
LABEL_944:
                    int v813 = v770[j];
                    int v814 = v772[j];
                    BOOL v296 = __OFADD__(v814, v813);
                    int v815 = v814 + v813;
                    if (v815 < 0 != v296) {
                      ++v815;
                    }
                    unint64_t v816 = 1431655766 * ((v815 >> 1) - (v810[j] + v811[j]) + 2 * (v773[j] + v771[j]));
                    v41->i32[j] = HIDWORD(v816) + (v816 >> 63);
                  }
                  goto LABEL_821;
                }
                uint64_t j = 0;
                if ((unint64_t)((char *)v41 - (char *)&a2[v769]) < 0x10) {
                  goto LABEL_944;
                }
                if ((unint64_t)((char *)v41 - (char *)&a2[v764]) < 0x10) {
                  goto LABEL_944;
                }
                if ((unint64_t)((char *)v41 - (char *)&a2[v768]) < 0x10) {
                  goto LABEL_944;
                }
                if ((unint64_t)((char *)v41 - (char *)&a2[v762]) < 0x10) {
                  goto LABEL_944;
                }
                if ((unint64_t)((char *)v41 - (char *)&a2[v766]) < 0x10) {
                  goto LABEL_944;
                }
                if ((unint64_t)((char *)v41 - (char *)&a2[v760]) < 0x10) {
                  goto LABEL_944;
                }
                uint64_t v858 = v1041;
                v859 = (uint32x4_t *)v41;
                v860 = &a2[v769];
                v861 = (int32x4_t *)v810;
                v862 = (int32x4_t *)v773;
                v863 = (int32x4_t *)v771;
                v864 = (int32x4_t *)v772;
                v865 = (int32x4_t *)v770;
                do
                {
                  int32x4_t v866 = *v865++;
                  int32x4_t v867 = v866;
                  int32x4_t v868 = *v864++;
                  uint32x4_t v869 = (uint32x4_t)vaddq_s32(v868, v867);
                  int32x4_t v870 = *v863++;
                  int32x4_t v871 = v870;
                  int32x4_t v872 = *v862++;
                  int32x4_t v873 = v872;
                  int32x4_t v874 = *v861++;
                  int32x4_t v875 = v874;
                  int32x4_t v876 = *(int32x4_t *)v860;
                  v860 += 4;
                  int32x4_t v877 = vaddq_s32(v873, v871);
                  int32x4_t v878 = vaddq_s32(vsubq_s32(vshrq_n_s32((int32x4_t)vsraq_n_u32(v869, v869, 0x1FuLL), 1uLL), vaddq_s32(v875, v876)), vaddq_s32(v877, v877));
                  uint32x4_t v879 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v878.i8, *(int32x2_t *)v680.i8), (int32x4_t)vmull_high_s32(v878, v680));
                  *v859++ = vsraq_n_u32(v879, v879, 0x1FuLL);
                  v858 -= 4;
                }
                while (v858);
                uint64_t j = v1041;
                if (v1041 != v40) {
                  goto LABEL_944;
                }
              }
            }
          }
          else if (v40)
          {
            if (v39 >= 0xC)
            {
              uint64_t v798 = 0;
              int64_t v837 = (char *)v41 - (char *)a2;
              if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v763) >= 0x20
                && (unint64_t)(v837 - 4 * v762) >= 0x20
                && (unint64_t)(v837 - 4 * v760) >= 0x20)
              {
                v838 = (int32x4_t *)&v1046[v760];
                v839 = v41 + 1;
                v840 = (int32x4_t *)&v1046[v762];
                v841 = (int32x4_t *)&v1046[v763];
                uint64_t v842 = v1062;
                do
                {
                  int32x4_t v843 = vsubq_s32(vaddq_s32(v840[-1], v838[-1]), v841[-1]);
                  int32x4_t v844 = vsubq_s32(vaddq_s32(*v840, *v838), *v841);
                  v838 += 2;
                  v839[-1] = v843;
                  int32x4_t *v839 = v844;
                  v839 += 2;
                  v840 += 2;
                  v841 += 2;
                  v842 -= 8;
                }
                while (v842);
                uint64_t v798 = v1062;
                if (v1062 == v40) {
                  goto LABEL_821;
                }
              }
            }
            else
            {
              uint64_t v798 = 0;
            }
            uint64_t v799 = v798;
            uint64_t v800 = v40 - v798;
            v801 = &v41->i32[v799];
            v802 = &a2[v763 + v799];
            v803 = &a2[v762 + v799];
            v804 = &a2[v760 + v799];
            do
            {
              int v806 = *v804++;
              int v805 = v806;
              int v807 = *v803++;
              int v808 = v807 + v805;
              int v809 = *v802++;
              *v801++ = v808 - v809;
              --v800;
            }
            while (v800);
          }
        }
        else
        {
          if (v685 == -1 || v678 && (!a3[v683] || !a3[v684] || !a3[v685]))
          {
            if (v684 == -1 || v678 && (!a3[v683] || !a3[v684]))
            {
              if (v683 == -1 || v678 && !a3[v683])
              {
                if (v40) {
                  bzero(v41, v1054);
                }
                gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v39, 3u, 0, (int32x4_t *)&a2[v677 * v39]);
                uint64_t v40 = *(void *)v1069;
                int32x4_t v680 = v1067;
                goto LABEL_823;
              }
              if (v39)
              {
                uint64_t v729 = (int)v683 * (int)v39;
                if (v40 < 8 || (unint64_t)((char *)v41 - (char *)a2 - 4 * v729) < 0x20)
                {
                  uint64_t v730 = 0;
                  goto LABEL_879;
                }
                v825 = &v1046[v729];
                v826 = v41 + 1;
                uint64_t v827 = v1062;
                do
                {
                  int32x4_t v828 = *(int32x4_t *)v825;
                  v826[-1] = *((int32x4_t *)v825 - 1);
                  int32x4_t *v826 = v828;
                  v825 += 8;
                  v826 += 2;
                  v827 -= 8;
                }
                while (v827);
                uint64_t v730 = v1062;
                if (v1062 != v40)
                {
LABEL_879:
                  uint64_t v731 = v40 - v730;
                  uint64_t v732 = v730;
                  v733 = &v41->i32[v730];
                  v734 = &a2[v729 + v732];
                  do
                  {
                    __int32 v735 = *v734++;
                    *v733++ = v735;
                    --v731;
                  }
                  while (v731);
                }
              }
              unsigned int v681 = 0;
              goto LABEL_822;
            }
            if (v39)
            {
              int v714 = v683 * v40;
              uint64_t v715 = (int)v683 * (int)v40;
              int v716 = v684 * v40;
              uint64_t v717 = (int)v684 * (int)v40;
              if (v40 >= 8
                && ((unint64_t)((char *)v41 - (char *)&a2[v716]) >= 0x10
                  ? (BOOL v718 = (unint64_t)((char *)v41 - (char *)&a2[v714]) >= 0x10)
                  : (BOOL v718 = 0),
                    v718))
              {
                v817 = &a2[v714];
                uint64_t v818 = v1041;
                v819 = v41;
                v820 = &a2[v716];
                do
                {
                  int32x4_t v821 = *(int32x4_t *)v817;
                  v817 += 4;
                  int32x4_t v822 = v821;
                  int32x4_t v823 = *(int32x4_t *)v820;
                  v820 += 4;
                  uint32x4_t v824 = (uint32x4_t)vaddq_s32(v823, v822);
                  *v819++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v824, v824, 0x1FuLL), 1uLL);
                  v818 -= 4;
                }
                while (v818);
                uint64_t v719 = v1041;
                if (v1041 != v40) {
                  goto LABEL_867;
                }
              }
              else
              {
                uint64_t v719 = 0;
LABEL_867:
                uint64_t v720 = v40 - v719;
                uint64_t v721 = v719;
                v722 = &v41->i32[v719];
                v723 = &a2[v717 + v721];
                v724 = &a2[v715 + v721];
                do
                {
                  int v726 = *v724++;
                  int v725 = v726;
                  int v727 = *v723++;
                  BOOL v296 = __OFADD__(v727, v725);
                  int v728 = v727 + v725;
                  if (v728 < 0 != v296) {
                    ++v728;
                  }
                  *v722++ = v728 >> 1;
                  --v720;
                }
                while (v720);
              }
            }
            unsigned int v681 = 1;
            goto LABEL_822;
          }
          if (v40)
          {
            uint64_t v699 = (int)v683 * (int)v39;
            uint64_t v700 = (int)v684 * (int)v39;
            uint64_t v701 = (int)v685 * (int)v40;
            if (v40 >= 0xC)
            {
              uint64_t v702 = 0;
              int64_t v778 = (char *)v41 - (char *)a2;
              if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v701) >= 0x20
                && (unint64_t)(v778 - 4 * v700) >= 0x20
                && (unint64_t)(v778 - 4 * v699) >= 0x20)
              {
                v779 = (int32x4_t *)&v1046[v699];
                v780 = v41 + 1;
                v781 = (int32x4_t *)&v1046[v700];
                v782 = (int32x4_t *)&v1046[v701];
                uint64_t v783 = v1062;
                do
                {
                  int32x4_t v784 = vsubq_s32(vaddq_s32(v781[-1], v779[-1]), v782[-1]);
                  int32x4_t v785 = vsubq_s32(vaddq_s32(*v781, *v779), *v782);
                  v779 += 2;
                  v780[-1] = v784;
                  int32x4_t *v780 = v785;
                  v780 += 2;
                  v781 += 2;
                  v782 += 2;
                  v783 -= 8;
                }
                while (v783);
                uint64_t v702 = v1062;
                if (v1062 == v40) {
                  goto LABEL_821;
                }
              }
            }
            else
            {
              uint64_t v702 = 0;
            }
            uint64_t v703 = v702;
            uint64_t v704 = v40 - v702;
            v705 = &v41->i32[v703];
            v706 = &a2[v701 + v703];
            v707 = &a2[v700 + v703];
            v708 = &a2[v699 + v703];
            do
            {
              int v710 = *v708++;
              int v709 = v710;
              int v711 = *v707++;
              int v712 = v711 + v709;
              int v713 = *v706++;
              *v705++ = v712 - v713;
              --v704;
            }
            while (v704);
          }
        }
LABEL_821:
        unsigned int v681 = 2;
LABEL_822:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v39, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v681 - 2], (int32x4_t *)&a2[v677 * v39]);
        uint64_t v40 = *(void *)v1069;
        int32x4_t v680 = v1067;
LABEL_823:
        if (++v677 >= *((int *)this + 959)) {
          goto LABEL_1144;
        }
      }
    case 3:
      uint64_t v1099 = 0;
      long long v1097 = 0u;
      long long __p = 0u;
      long long v1095 = 0u;
      long long v1096 = 0u;
      long long v1093 = 0u;
      long long v1094 = 0u;
      long long v1091 = 0u;
      long long v1092 = 0u;
      long long v1089 = 0u;
      long long v1090 = 0u;
      long long v1087 = 0u;
      long long v1088 = 0u;
      long long v1085 = 0u;
      long long v1086 = 0u;
      long long v1083 = 0u;
      long long v1084 = 0u;
      long long v1081 = 0u;
      long long v1082 = 0u;
      long long v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      long long __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      uint64_t v42 = *(void *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unsigned __int8 v37 = (int32x4_t *)operator new(4 * v33);
        v1074 = v37;
        v1076 = (int32x4_t *)((char *)v37 + 4 * v33);
        bzero(v37, 4 * v33);
        v1075 = v1076;
        v1057 = (int32x4_t *)operator new(4 * v33);
        bzero(v1057, 4 * v33);
        uint64_t v42 = *(void *)v1069;
        if (*((int *)this + 959) < 1)
        {
LABEL_1080:
          v675 = v1057;
          if (!v1057) {
            goto LABEL_817;
          }
          goto LABEL_816;
        }
      }
      else
      {
        unsigned __int8 v37 = 0;
        v1057 = 0;
        if (*((int *)this + 959) < 1) {
          goto LABEL_1080;
        }
      }
      uint64_t v880 = 0;
      int v881 = *((_DWORD *)this + 964);
      unint64_t v1038 = (unint64_t)v1057 + 4 * v42;
      uint64_t v1042 = v42 & 0xFFFFFFFC;
      uint64_t v1047 = 4 * v42;
      v1032 = a2 + 4;
      v1035 = (char *)(v42 & 0xFFFFFFF8);
      int v1055 = 0x8000;
      while (1)
      {
        if (v881 && !a3[v880]) {
          goto LABEL_993;
        }
        v884 = (int *)(*((void *)this + 22) + 12 * v880);
        uint64_t v885 = *v884;
        uint64_t v886 = v884[1];
        uint64_t v887 = v884[2];
        v888 = (int *)(*((void *)this + 25) + 12 * v880);
        uint64_t v889 = v888[2];
        if (v889 != -1)
        {
          uint64_t v890 = *v888;
          uint64_t v891 = v888[1];
          if (!v881 || v1064[v885] && v1064[v886] && v1064[v887] && v1064[v890] && v1064[v891] && v1064[v889])
          {
            v1023 = v37;
            int v892 = v42;
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v885 * (int)v42], (int32x4_t *)&v1065[(int)v886 * (int)v42], (int32x4_t *)&v1065[(int)v887 * (int)v1066], v1066, (int *)(*((void *)this + 13) + 12 * (int)v885), (int *)(*((void *)this + 13) + 12 * (int)v886), (int *)(*((void *)this + 13) + 12 * (int)v887), (int *)(*((void *)this + 13) + 12 * v880), v1023);
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v890 * v892], (int32x4_t *)&v1065[(int)v891 * (int)v1066], (int32x4_t *)&v1065[(int)v889 * (int)v1066], v892, (int *)(*((void *)this + 13) + 12 * (int)v890), (int *)(*((void *)this + 13) + 12 * (int)v891), (int *)(*((void *)this + 13) + 12 * (int)v889), (int *)(*((void *)this + 13) + 12 * v880), v1057);
            if (v1066)
            {
              v893 = v1074;
              uint64_t v42 = *(void *)v1069;
              if (v1069[0] >= 4u)
              {
                a3 = v1064;
                v883 = v1065;
                v895 = v1057;
                if ((unint64_t)v1074 >= v1038 || v1057 >= (int32x4_t *)&v1074->i8[v1047])
                {
                  uint64_t v935 = v1042;
                  v936 = v1057;
                  v937 = v1074;
                  do
                  {
                    int32x4_t v938 = *v936++;
                    uint32x4_t v939 = (uint32x4_t)vaddq_s32(v938, *v937);
                    *v937++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v939, v939, 0x1FuLL), 1uLL);
                    v935 -= 4;
                  }
                  while (v935);
                  uint64_t v894 = v1042;
                  if (v1042 == *(void *)v1069)
                  {
LABEL_1071:
                    unsigned int v882 = 2;
                    goto LABEL_992;
                  }
                }
                else
                {
                  uint64_t v894 = 0;
                }
              }
              else
              {
                uint64_t v894 = 0;
                a3 = v1064;
                v883 = v1065;
                v895 = v1057;
              }
              uint64_t v940 = *(void *)v1069 - v894;
              uint64_t v941 = v894;
              v942 = &v895->i32[v894];
              v943 = &v893->i32[v941];
              do
              {
                int v944 = *v942++;
                int v945 = v944 + *v943;
                if (v945 < 0 != __OFADD__(v944, *v943)) {
                  ++v945;
                }
                *v943++ = v945 >> 1;
                --v940;
              }
              while (v940);
              goto LABEL_1071;
            }
            unsigned int v882 = 2;
            a3 = v1064;
            v883 = v1065;
            goto LABEL_991;
          }
        }
        a3 = v1064;
        v883 = v1065;
        if (v887 != -1 && (!v881 || v1064[v885] && v1064[v886] && v1064[v887]))
        {
          uint64_t v896 = v42;
          gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v885 * (int)v42], (int32x4_t *)&v1065[(int)v886 * (int)v42], (int32x4_t *)&v1065[(int)v887 * (int)v42], v42, (int *)(*((void *)this + 13) + 12 * (int)v885), (int *)(*((void *)this + 13) + 12 * (int)v886), (int *)(*((void *)this + 13) + 12 * (int)v887), (int *)(*((void *)this + 13) + 12 * v880), v37);
          unsigned int v882 = 2;
          a3 = v1064;
          uint64_t v42 = v896;
          goto LABEL_992;
        }
        if (v886 == -1 || v881 && (!v1064[v885] || !v1064[v886]))
        {
          if (v885 == -1 || v881 && !v1064[v885])
          {
            if (v42)
            {
              bzero(v37, v1047);
              uint64_t v42 = *(void *)v1069;
            }
            gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v37, v42, 3u, 0, (int32x4_t *)&v1065[v880 * v1066]);
            uint64_t v42 = *(void *)v1069;
            goto LABEL_993;
          }
          if (v42)
          {
            uint64_t v901 = (int)v885 * (int)v1066;
            if (v1066 < 8 || (unint64_t)((char *)v37 - (char *)v1065 - 4 * v901) < 0x20)
            {
              v902 = 0;
              goto LABEL_1027;
            }
            v946 = v1035;
            v947 = &v1032[v901];
            v948 = v37 + 1;
            do
            {
              int32x4_t v949 = *(int32x4_t *)v947;
              v948[-1] = *((int32x4_t *)v947 - 1);
              int32x4_t *v948 = v949;
              v947 += 8;
              v948 += 2;
              v946 -= 8;
            }
            while (v946);
            v902 = v1035;
            if (v1035 != (char *)v42)
            {
LABEL_1027:
              uint64_t v903 = v42 - (void)v902;
              uint64_t v904 = (uint64_t)v902;
              v905 = &v37->i32[(void)v902];
              v906 = &v1065[v901 + v904];
              do
              {
                __int32 v907 = *v906++;
                *v905++ = v907;
                --v903;
              }
              while (v903);
            }
          }
          unsigned int v882 = 0;
          goto LABEL_992;
        }
        if (v42 != 2)
        {
          if (v42)
          {
            int v914 = v885 * v42;
            uint64_t v915 = (int)v885 * (int)v42;
            int v916 = v886 * v1066;
            uint64_t v917 = (int)v886 * (int)v1066;
            if (v1066 >= 8
              && ((unint64_t)((char *)v37 - (char *)&v1065[v916]) >= 0x10
                ? (BOOL v918 = (unint64_t)((char *)v37 - (char *)&v1065[v914]) >= 0x10)
                : (BOOL v918 = 0),
                  v918))
            {
              v950 = (int32x4_t *)&v1065[v914];
              uint64_t v951 = v1042;
              v952 = v37;
              v953 = (int32x4_t *)&v1065[v916];
              do
              {
                int32x4_t v954 = *v950++;
                int32x4_t v955 = v954;
                int32x4_t v956 = *v953++;
                uint32x4_t v957 = (uint32x4_t)vaddq_s32(v956, v955);
                *v952++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v957, v957, 0x1FuLL), 1uLL);
                v951 -= 4;
              }
              while (v951);
              uint64_t v919 = v1042;
              if (v1042 != v42) {
                goto LABEL_1049;
              }
            }
            else
            {
              uint64_t v919 = 0;
LABEL_1049:
              uint64_t v920 = v42 - v919;
              uint64_t v921 = v919;
              v922 = &v37->i32[v919];
              v923 = &v1065[v917 + v921];
              v924 = &v1065[v915 + v921];
              do
              {
                int v926 = *v924++;
                int v925 = v926;
                int v927 = *v923++;
                BOOL v296 = __OFADD__(v927, v925);
                int v928 = v927 + v925;
                if (v928 < 0 != v296) {
                  ++v928;
                }
                *v922++ = v928 >> 1;
                --v920;
              }
              while (v920);
            }
          }
          unsigned int v882 = 1;
          goto LABEL_992;
        }
        unsigned int v897 = *((_DWORD *)this + 683);
        unsigned int v898 = *((_DWORD *)this + 684);
        if (v897 < 0x40000001) {
          break;
        }
        unsigned int v909 = *((_DWORD *)this + 683);
        unsigned int v900 = v1055;
LABEL_1058:
        unsigned int v929 = (HIWORD(v909) * (unsigned __int16)v900) & 0xFFFF0000;
        unsigned int v930 = v909 - v929;
        BOOL v931 = v898 >= v929;
        unsigned int v932 = v900;
        int v933 = *((unsigned __int16 *)this + ((v900 >> 7) & 0x1FE | v931) + 1376);
        if (v898 < v929) {
          unsigned int v934 = v929;
        }
        else {
          unsigned int v934 = v930;
        }
        if (v898 < v929) {
          unsigned int v929 = 0;
        }
        *((_DWORD *)this + 683) = v934;
        *((_DWORD *)this + 684) = v898 - v929;
        gcl::tmesh::ComputeTexCoordinatesPrediction(&v1065[2 * v885], &v1065[2 * v886], (_DWORD *)(*((void *)this + 13) + 12 * (int)v885), (_DWORD *)(*((void *)this + 13) + 12 * (int)v886), (int *)(*((void *)this + 13) + 12 * v880), v931, v37->i32);
        int v1055 = v933 + v932;
        unsigned int v882 = 1;
        a3 = v1064;
LABEL_991:
        uint64_t v42 = *(void *)v1069;
LABEL_992:
        unsigned __int8 v37 = v1074;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v1074, v42, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v882 - 2], (int32x4_t *)&v883[v880 * v1066]);
        uint64_t v42 = *(void *)v1069;
LABEL_993:
        if (++v880 >= *((int *)this + 959)) {
          goto LABEL_1080;
        }
      }
      int v899 = *((_DWORD *)this + 686);
      unsigned int v900 = v1055;
      while (1)
      {
        v898 *= 2;
        *((_DWORD *)this + 686) = --v899;
        if (v899) {
          goto LABEL_1032;
        }
        uint64_t v910 = *((void *)this + 340);
        *((void *)this + 340) = v910 + 1;
        unint64_t v911 = *((unsigned int *)this + 676);
        if (v910 + 1 >= v911)
        {
          int v912 = 65280;
          unint64_t v913 = v910 + 2;
          *((void *)this + 340) = v913;
          if (v913 >= v911)
          {
LABEL_1038:
            int v908 = 255;
            goto LABEL_1031;
          }
        }
        else
        {
          int v912 = *(unsigned __int8 *)(*((void *)this + 339) + v910 + 1) << 8;
          unint64_t v913 = v910 + 2;
          *((void *)this + 340) = v913;
          if (v913 >= v911) {
            goto LABEL_1038;
          }
        }
        int v908 = *(unsigned __int8 *)(*((void *)this + 339) + v913);
LABEL_1031:
        v898 |= v912 | v908;
        int v899 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_1032:
        unsigned int v909 = 2 * v897;
        BOOL v84 = v897 >= 0x20000001;
        v897 *= 2;
        if (v84) {
          goto LABEL_1058;
        }
      }
    case 4:
      uint64_t v1099 = 0;
      long long v1097 = 0u;
      long long __p = 0u;
      long long v1095 = 0u;
      long long v1096 = 0u;
      long long v1093 = 0u;
      long long v1094 = 0u;
      long long v1091 = 0u;
      long long v1092 = 0u;
      long long v1089 = 0u;
      long long v1090 = 0u;
      long long v1087 = 0u;
      long long v1088 = 0u;
      long long v1085 = 0u;
      long long v1086 = 0u;
      long long v1083 = 0u;
      long long v1084 = 0u;
      long long v1081 = 0u;
      long long v1082 = 0u;
      long long v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      long long __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      memset_pattern16(&v1072, &memset_pattern_27, 6uLL);
      memset_pattern16(&v1070, &memset_pattern_27, 6uLL);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      uint64_t v36 = *(void *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unsigned __int8 v37 = (int32x4_t *)operator new(4 * v33);
        v1074 = v37;
        v1076 = (int32x4_t *)((char *)v37 + 4 * v33);
        bzero(v37, 4 * v33);
        v1075 = (int32x4_t *)((char *)v37 + 4 * v33);
        v1033 = (int32x4_t *)operator new(4 * v33);
        bzero(v1033, 4 * v33);
        uint64_t v36 = *(void *)v1069;
        unsigned int v38 = v1070.u16[0];
        unsigned int v1043 = v1072.u16[0];
        if (*((int *)this + 959) < 1)
        {
LABEL_815:
          v1070.i16[0] = v38;
          v1072.i16[0] = v1043;
          v675 = v1033;
          if (!v1033)
          {
LABEL_817:
            if (!v37) {
              goto LABEL_1147;
            }
            v1075 = v37;
            v676 = v37;
            goto LABEL_1146;
          }
LABEL_816:
          operator delete(v675);
          goto LABEL_817;
        }
      }
      else
      {
        unsigned __int8 v37 = 0;
        v1033 = 0;
        unsigned int v38 = v1070.u16[0];
        unsigned int v1043 = v1072.u16[0];
        if (*((int *)this + 959) < 1) {
          goto LABEL_815;
        }
      }
      uint64_t v370 = 0;
      int v371 = *((_DWORD *)this + 964);
      v1024 = &a2[v36];
      unint64_t v1025 = (unint64_t)v1033 + 4 * v36;
      uint64_t v1028 = v36 & 0xFFFFFFF8;
      uint64_t v1029 = 4 * v36;
      v1026 = a2 + 4;
      uint64_t v1027 = v36 & 0xFFFFFFFC;
      int v1031 = 0x8000;
      int32x4_t v372 = vdupq_n_s32(0x55555556u);
      int v1040 = v371;
      *(int32x4_t *)v1061 = v372;
      while (1)
      {
        if (v371 && !a3[v370]) {
          goto LABEL_525;
        }
        v374 = (int *)(*((void *)this + 22) + 12 * v370);
        uint64_t v375 = *v374;
        uint64_t v376 = v374[1];
        uint64_t v377 = v374[2];
        uint64_t v378 = (int *)(*((void *)this + 25) + 12 * v370);
        uint64_t v379 = v378[2];
        if (v379 == -1) {
          break;
        }
        uint64_t v380 = *v378;
        uint64_t v381 = v378[1];
        if (v371)
        {
          if (!a3[v375] || !a3[v376] || !a3[v377] || !a3[v380] || !a3[v381] || !a3[v379]) {
            break;
          }
        }
        unsigned int v382 = *((_DWORD *)this + 683);
        unsigned int v383 = *((_DWORD *)this + 684);
        if (v382 < 0x40000001)
        {
          int v384 = *((_DWORD *)this + 686);
          while (1)
          {
            v383 *= 2;
            *((_DWORD *)this + 686) = --v384;
            if (v384) {
              goto LABEL_540;
            }
            uint64_t v387 = *((void *)this + 340);
            *((void *)this + 340) = v387 + 1;
            unint64_t v388 = *((unsigned int *)this + 676);
            if (v387 + 1 >= v388)
            {
              int v389 = 65280;
              unint64_t v390 = v387 + 2;
              *((void *)this + 340) = v390;
              if (v390 >= v388)
              {
LABEL_546:
                int v385 = 255;
                goto LABEL_539;
              }
            }
            else
            {
              int v389 = *(unsigned __int8 *)(*((void *)this + 339) + v387 + 1) << 8;
              unint64_t v390 = v387 + 2;
              *((void *)this + 340) = v390;
              if (v390 >= v388) {
                goto LABEL_546;
              }
            }
            int v385 = *(unsigned __int8 *)(*((void *)this + 339) + v390);
LABEL_539:
            v383 |= v389 | v385;
            int v384 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_540:
            unsigned int v386 = 2 * v382;
            BOOL v84 = v382 >= 0x20000001;
            v382 *= 2;
            if (v84) {
              goto LABEL_593;
            }
          }
        }
        unsigned int v386 = *((_DWORD *)this + 683);
LABEL_593:
        unsigned int v420 = (HIWORD(v386) * (unsigned __int16)v38) & 0xFFFF0000;
        unsigned int v421 = v386 - v420;
        BOOL v422 = v383 >= v420;
        BOOL v423 = v383 >= v420;
        int v424 = *((unsigned __int16 *)this + ((v38 >> 7) & 0x1FE | v423) + 1376);
        if (v383 < v420) {
          unsigned int v425 = v420;
        }
        else {
          unsigned int v425 = v421;
        }
        if (v383 < v420) {
          unsigned int v420 = 0;
        }
        if (v422) {
          uint64_t v426 = 2;
        }
        else {
          uint64_t v426 = 1;
        }
        unsigned int v427 = v383 - v420;
        *((_DWORD *)this + 683) = v425;
        *((_DWORD *)this + 684) = v383 - v420;
        v1037 = v37;
        if (v425 < 0x40000001)
        {
          int v428 = *((_DWORD *)this + 686);
          while (2)
          {
            v427 *= 2;
            *((_DWORD *)this + 686) = --v428;
            if (v428) {
              goto LABEL_605;
            }
            uint64_t v431 = *((void *)this + 340);
            *((void *)this + 340) = v431 + 1;
            unint64_t v432 = *((unsigned int *)this + 676);
            if (v431 + 1 >= v432)
            {
              int v433 = 65280;
              unint64_t v434 = v431 + 2;
              *((void *)this + 340) = v434;
              if (v434 >= v432) {
                goto LABEL_611;
              }
            }
            else
            {
              int v433 = *(unsigned __int8 *)(*((void *)this + 339) + v431 + 1) << 8;
              unint64_t v434 = v431 + 2;
              *((void *)this + 340) = v434;
              if (v434 >= v432)
              {
LABEL_611:
                int v429 = 255;
LABEL_604:
                v427 |= v433 | v429;
                int v428 = 16;
                *((_DWORD *)this + 686) = 16;
LABEL_605:
                unsigned int v430 = 2 * v425;
                BOOL v84 = v425 >= 0x20000001;
                v425 *= 2;
                if (v84) {
                  goto LABEL_613;
                }
                continue;
              }
            }
            break;
          }
          int v429 = *(unsigned __int8 *)(*((void *)this + 339) + v434);
          goto LABEL_604;
        }
        unsigned int v430 = v425;
LABEL_613:
        int v435 = v380;
        int v436 = v375 * v36;
        uint64_t v437 = (int)v375 * (int)v36;
        int v438 = v376 * v1066;
        int v439 = v377 * v1066;
        v38 += v424;
        unsigned int v440 = v1070.u16[v426];
        unsigned int v441 = (HIWORD(v430) * v440) & 0xFFFF0000;
        unsigned int v442 = v430 - v441;
        BOOL v443 = v427 >= v441;
        v1070.i16[v426] = *((_WORD *)this + ((v440 >> 7) & 0x1FE | v443) + 1376) + v440;
        if (v427 < v441) {
          unsigned int v444 = v441;
        }
        else {
          unsigned int v444 = v442;
        }
        if (v427 < v441) {
          unsigned int v445 = 0;
        }
        else {
          unsigned int v445 = v441;
        }
        *((_DWORD *)this + 683) = v444;
        *((_DWORD *)this + 684) = v427 - v445;
        int v446 = v423 | (2 * v443);
        if (v446)
        {
          unsigned int v1052 = v38;
          v447 = (int32x4_t *)&v1065[v436];
          v448 = (int32x4_t *)&v1065[v438];
          v449 = (int32x4_t *)&v1065[v439];
          v450 = (int32x4_t *)&v1065[v435 * (int)v36];
          int v451 = v381 * v36;
          v452 = (int32x4_t *)&v1065[(int)v381 * (int)v36];
          int v453 = v379 * v36;
          v454 = (int32x4_t *)&v1065[(int)v379 * (int)v36];
          if (v446 == 2)
          {
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v447, v448, v449, v1066, (int *)(*((void *)this + 13) + 12 * (int)v375), (int *)(*((void *)this + 13) + 12 * (int)v376), (int *)(*((void *)this + 13) + 12 * (int)v377), (int *)(*((void *)this + 13) + 12 * v370), v1037);
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v450, v452, v454, v1069[0], (int *)(*((void *)this + 13) + 12 * v435), (int *)(*((void *)this + 13) + 12 * (int)v381), (int *)(*((void *)this + 13) + 12 * (int)v379), (int *)(*((void *)this + 13) + 12 * v370), v1033);
            uint64_t v36 = *(void *)v1069;
            uint64_t v402 = v1066;
            if (!v1066)
            {
              unsigned int v373 = 2;
              v393 = v1065;
LABEL_738:
              unsigned int v38 = v1052;
              goto LABEL_739;
            }
            v525 = v1074;
            a3 = v1064;
            v393 = v1065;
            unsigned int v38 = v1052;
            int v371 = v1040;
            if (v1066 < 4 || (unint64_t)v1074 < v1025 && v1033 < (int32x4_t *)&v1074->i8[v1029])
            {
              uint64_t v526 = 0;
LABEL_682:
              uint64_t v527 = *(void *)v1069 - v526;
              uint64_t v528 = v526;
              v529 = &v1033->i32[v526];
              v530 = &v525->i32[v528];
              do
              {
                int v531 = *v529++;
                int v532 = v531 + *v530;
                if (v532 < 0 != __OFADD__(v531, *v530)) {
                  ++v532;
                }
                *v530++ = v532 >> 1;
                --v527;
              }
              while (v527);
              goto LABEL_523;
            }
            uint64_t v662 = v1027;
            v663 = v1033;
            v664 = v1074;
            do
            {
              int32x4_t v665 = *v663++;
              uint32x4_t v666 = (uint32x4_t)vaddq_s32(v665, *v664);
              *v664++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v666, v666, 0x1FuLL), 1uLL);
              v662 -= 4;
            }
            while (v662);
            uint64_t v526 = v1027;
            if (v1027 != *(void *)v1069) {
              goto LABEL_682;
            }
          }
          else
          {
            uint64_t v455 = v435 * (int)v36;
            if (v446 != 1)
            {
              if (v36 == 2)
              {
                gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)v447, v448->i32, v449->i32, (_DWORD *)(*((void *)this + 13) + 12 * (int)v375), (_DWORD *)(*((void *)this + 13) + 12 * (int)v376), (int *)(*((void *)this + 13) + 12 * v370), v1037->i32);
                gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)v450, v452->i32, v454->i32, (_DWORD *)(*((void *)this + 13) + 12 * v435), (_DWORD *)(*((void *)this + 13) + 12 * (int)v381), (int *)(*((void *)this + 13) + 12 * v370), v1033->i32);
                v546 = v1074;
                __int32 v547 = v1074->i32[1];
                __int32 v548 = v1033->i32[0] + v1074->i32[0];
                if (v548 < 0 != __OFADD__(v1033->i32[0], v1074->i32[0])) {
                  ++v548;
                }
                v1074->i32[0] = v548 >> 1;
                __int32 v549 = v1033->i32[1];
                BOOL v296 = __OFADD__(v549, v547);
                int v550 = v549 + v547;
                if (v550 < 0 != v296) {
                  ++v550;
                }
                v546->i32[1] = v550 >> 1;
                unsigned int v373 = 2;
                v393 = v1065;
                uint64_t v402 = v1066;
                uint64_t v36 = *(void *)v1069;
                goto LABEL_738;
              }
              v393 = v1065;
              uint64_t v402 = v1066;
              a3 = v1064;
              if (v1066)
              {
                if (v1066 >= 0xC)
                {
                  uint64_t v575 = 0;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v453]) < 0x10) {
                    goto LABEL_722;
                  }
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v439]) < 0x10) {
                    goto LABEL_722;
                  }
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v451]) < 0x10) {
                    goto LABEL_722;
                  }
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[(int)v376 * (int)v1066]) < 0x10) {
                    goto LABEL_722;
                  }
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v455]) < 0x10) {
                    goto LABEL_722;
                  }
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v437]) < 0x10) {
                    goto LABEL_722;
                  }
                  uint64_t v640 = v1027;
                  v641 = (uint32x4_t *)v1037;
                  v642 = (int32x4_t *)&v1065[v453];
                  v643 = (int32x4_t *)&v1065[v439];
                  v644 = v452;
                  v645 = v448;
                  v646 = (int32x4_t *)&v1065[v435 * (int)v36];
                  v647 = v447;
                  do
                  {
                    int32x4_t v648 = *v647++;
                    int32x4_t v649 = v648;
                    int32x4_t v650 = *v646++;
                    uint32x4_t v651 = (uint32x4_t)vaddq_s32(v650, v649);
                    int32x4_t v652 = *v645++;
                    int32x4_t v653 = v652;
                    int32x4_t v654 = *v644++;
                    int32x4_t v655 = v654;
                    int32x4_t v656 = *v643++;
                    int32x4_t v657 = v656;
                    int32x4_t v658 = *v642++;
                    int32x4_t v659 = vaddq_s32(v655, v653);
                    int32x4_t v660 = vaddq_s32(vsubq_s32(vshrq_n_s32((int32x4_t)vsraq_n_u32(v651, v651, 0x1FuLL), 1uLL), vaddq_s32(v657, v658)), vaddq_s32(v659, v659));
                    uint32x4_t v661 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v660.i8, *(int32x2_t *)v372.i8), (int32x4_t)vmull_high_s32(v660, v372));
                    *v641++ = vsraq_n_u32(v661, v661, 0x1FuLL);
                    v640 -= 4;
                  }
                  while (v640);
                  uint64_t v575 = v1027;
                  if (v1027 != v36) {
                    goto LABEL_722;
                  }
                }
                else
                {
                  uint64_t v575 = 0;
                  do
                  {
LABEL_722:
                    __int32 v576 = v447->i32[v575];
                    __int32 v577 = v450->i32[v575];
                    BOOL v296 = __OFADD__(v577, v576);
                    int v578 = v577 + v576;
                    if (v578 < 0 != v296) {
                      ++v578;
                    }
                    unint64_t v579 = 1431655766
                         * ((v578 >> 1) - (v449->i32[v575] + v454->i32[v575]) + 2 * (v452->i32[v575] + v448->i32[v575]));
                    v1037->i32[v575++] = HIDWORD(v579) + (v579 >> 63);
                  }
                  while (v36 != v575);
                }
              }
              unsigned int v373 = 2;
LABEL_736:
              unsigned int v38 = v1052;
              int v371 = v1040;
              goto LABEL_524;
            }
            a3 = v1064;
            v393 = v1065;
            if (!v36)
            {
              unsigned int v373 = 2;
              uint64_t v402 = v1066;
              goto LABEL_736;
            }
            unsigned int v38 = v1052;
            int v371 = v1040;
            uint64_t v456 = 0;
            if (v36 >= 0xC)
            {
              v457 = v1037;
              if ((unint64_t)((char *)v1037 - (char *)&v1065[v453]) < 0x20)
              {
                uint64_t v402 = v1066;
              }
              else
              {
                uint64_t v402 = v1066;
                if ((unint64_t)((char *)v1037 - (char *)&v1065[v451]) >= 0x20
                  && (unint64_t)((char *)v1037 - (char *)&v1065[v455]) >= 0x20)
                {
                  v604 = (int32x4_t *)&v1026[v455];
                  v605 = v1037 + 1;
                  v606 = (int32x4_t *)&v1026[v451];
                  v607 = (int32x4_t *)&v1026[v453];
                  uint64_t v608 = v1028;
                  do
                  {
                    int32x4_t v609 = vsubq_s32(vaddq_s32(v606[-1], v604[-1]), v607[-1]);
                    int32x4_t v610 = vsubq_s32(vaddq_s32(*v606, *v604), *v607);
                    v604 += 2;
                    v605[-1] = v609;
                    int32x4_t *v605 = v610;
                    v605 += 2;
                    v606 += 2;
                    v607 += 2;
                    v608 -= 8;
                  }
                  while (v608);
                  uint64_t v456 = v1028;
                  if (v1028 == v36) {
                    goto LABEL_523;
                  }
                }
              }
            }
            else
            {
              uint64_t v402 = v1066;
              v457 = v1037;
            }
            uint64_t v458 = v456;
            uint64_t v459 = v36 - v456;
            v460 = &v457->i32[v458];
            v461 = &v1065[v453 + v458];
            v462 = &v1065[v451 + v458];
            v463 = &v1065[v455 + v458];
            do
            {
              int v465 = *v463++;
              int v464 = v465;
              int v466 = *v462++;
              int v467 = v466 + v464;
              int v468 = *v461++;
              *v460++ = v467 - v468;
              --v459;
            }
            while (v459);
          }
        }
        else
        {
          if (!v36)
          {
            unsigned int v373 = 2;
            v393 = v1065;
            uint64_t v402 = v1066;
LABEL_739:
            a3 = v1064;
            int v371 = v1040;
            goto LABEL_524;
          }
          v393 = v1065;
          uint64_t v402 = v1066;
          a3 = v1064;
          int v371 = v1040;
          uint64_t v533 = 0;
          if (v1066 >= 0xC)
          {
            v534 = v37;
            int64_t v596 = (char *)v37 - (char *)v1065;
            if ((unint64_t)((char *)v37 - (char *)v1065 - 4 * v439) >= 0x20
              && (unint64_t)(v596 - 4 * v438) >= 0x20
              && (unint64_t)(v596 - 4 * v436) >= 0x20)
            {
              v597 = (int32x4_t *)&v1026[v436];
              v598 = v37 + 1;
              v599 = (int32x4_t *)&v1026[v438];
              v600 = (int32x4_t *)&v1026[v439];
              uint64_t v601 = v1028;
              do
              {
                int32x4_t v602 = vsubq_s32(vaddq_s32(v599[-1], v597[-1]), v600[-1]);
                int32x4_t v603 = vsubq_s32(vaddq_s32(*v599, *v597), *v600);
                v597 += 2;
                v598[-1] = v602;
                int32x4_t *v598 = v603;
                v598 += 2;
                v599 += 2;
                v600 += 2;
                v601 -= 8;
              }
              while (v601);
              uint64_t v533 = v1028;
              if (v1028 == v36) {
                goto LABEL_523;
              }
            }
          }
          else
          {
            v534 = v37;
          }
          uint64_t v535 = v533;
          uint64_t v536 = v36 - v533;
          v537 = &v534->i32[v535];
          v538 = &v1065[v439 + v535];
          v539 = &v1065[v438 + v535];
          v540 = &v1065[v436 + v535];
          do
          {
            int v542 = *v540++;
            int v541 = v542;
            int v543 = *v539++;
            int v544 = v543 + v541;
            int v545 = *v538++;
            *v537++ = v544 - v545;
            --v536;
          }
          while (v536);
        }
LABEL_523:
        unsigned int v373 = 2;
LABEL_524:
        unsigned __int8 v37 = v1074;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v1074, v36, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v373 - 2], (int32x4_t *)&v393[v370 * v402]);
        uint64_t v36 = *(void *)v1069;
        int32x4_t v372 = *(int32x4_t *)v1061;
LABEL_525:
        if (++v370 >= *((int *)this + 959)) {
          goto LABEL_815;
        }
      }
      if (v377 != -1 && (!v371 || a3[v375] && a3[v376] && a3[v377]))
      {
        unsigned int v391 = *((_DWORD *)this + 683);
        unsigned int v392 = *((_DWORD *)this + 684);
        v393 = v1065;
        if (v391 < 0x40000001)
        {
          int v394 = *((_DWORD *)this + 686);
          int v395 = v1066;
          while (1)
          {
            v392 *= 2;
            *((_DWORD *)this + 686) = --v394;
            if (v394) {
              goto LABEL_556;
            }
            uint64_t v398 = *((void *)this + 340);
            *((void *)this + 340) = v398 + 1;
            unint64_t v399 = *((unsigned int *)this + 676);
            if (v398 + 1 >= v399)
            {
              int v400 = 65280;
              unint64_t v401 = v398 + 2;
              *((void *)this + 340) = v401;
              if (v401 >= v399)
              {
LABEL_562:
                int v396 = 255;
                goto LABEL_555;
              }
            }
            else
            {
              int v400 = *(unsigned __int8 *)(*((void *)this + 339) + v398 + 1) << 8;
              unint64_t v401 = v398 + 2;
              *((void *)this + 340) = v401;
              if (v401 >= v399) {
                goto LABEL_562;
              }
            }
            int v396 = *(unsigned __int8 *)(*((void *)this + 339) + v401);
LABEL_555:
            v392 |= v400 | v396;
            int v394 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_556:
            unsigned int v397 = 2 * v391;
            BOOL v84 = v391 >= 0x20000001;
            v391 *= 2;
            if (v84) {
              goto LABEL_629;
            }
          }
        }
        unsigned int v397 = *((_DWORD *)this + 683);
        int v395 = v1066;
LABEL_629:
        unsigned int v469 = (HIWORD(v397) * (unsigned __int16)v1043) & 0xFFFF0000;
        unsigned int v470 = v397 - v469;
        BOOL v471 = v392 >= v469;
        BOOL v472 = v392 >= v469;
        int v473 = *((unsigned __int16 *)this + ((v1043 >> 7) & 0x1FE | v472) + 1376);
        if (v392 < v469) {
          unsigned int v474 = v469;
        }
        else {
          unsigned int v474 = v470;
        }
        if (v392 < v469) {
          unsigned int v475 = 0;
        }
        else {
          unsigned int v475 = v469;
        }
        uint64_t v476 = 1;
        if (v471) {
          uint64_t v476 = 2;
        }
        unsigned int v477 = v392 - v475;
        *((_DWORD *)this + 683) = v474;
        *((_DWORD *)this + 684) = v477;
        if (v474 < 0x40000001)
        {
          int v478 = *((_DWORD *)this + 686);
          while (1)
          {
            v477 *= 2;
            *((_DWORD *)this + 686) = --v478;
            if (v478) {
              goto LABEL_641;
            }
            uint64_t v481 = *((void *)this + 340);
            *((void *)this + 340) = v481 + 1;
            unint64_t v482 = *((unsigned int *)this + 676);
            if (v481 + 1 >= v482)
            {
              int v483 = 65280;
              unint64_t v484 = v481 + 2;
              *((void *)this + 340) = v484;
              if (v484 >= v482)
              {
LABEL_647:
                int v479 = 255;
                goto LABEL_640;
              }
            }
            else
            {
              int v483 = *(unsigned __int8 *)(*((void *)this + 339) + v481 + 1) << 8;
              unint64_t v484 = v481 + 2;
              *((void *)this + 340) = v484;
              if (v484 >= v482) {
                goto LABEL_647;
              }
            }
            int v479 = *(unsigned __int8 *)(*((void *)this + 339) + v484);
LABEL_640:
            v477 |= v483 | v479;
            int v478 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_641:
            unsigned int v480 = 2 * v474;
            BOOL v84 = v474 >= 0x20000001;
            v474 *= 2;
            if (v84) {
              goto LABEL_649;
            }
          }
        }
        unsigned int v480 = v474;
LABEL_649:
        unsigned int v1053 = v38;
        uint64_t v485 = (int)v375 * (int)v36;
        v486 = (int32x4_t *)&v1065[v485];
        uint64_t v487 = (int)v376 * v395;
        v488 = (int32x4_t *)&v1065[v487];
        uint64_t v489 = (int)v377 * (int)v36;
        v490 = (int32x4_t *)&v1065[v489];
        v1043 += v473;
        unsigned int v491 = v1072.u16[v476];
        unsigned int v492 = (HIWORD(v480) * v491) & 0xFFFF0000;
        unsigned int v493 = v480 - v492;
        BOOL v494 = v477 >= v492;
        v1072.i16[v476] = *((_WORD *)this + ((v491 >> 7) & 0x1FE | v494) + 1376) + v491;
        if (v477 < v492) {
          unsigned int v495 = v492;
        }
        else {
          unsigned int v495 = v493;
        }
        if (v477 < v492) {
          unsigned int v496 = 0;
        }
        else {
          unsigned int v496 = v492;
        }
        *((_DWORD *)this + 683) = v495;
        *((_DWORD *)this + 684) = v477 - v496;
        int v497 = v472 | (2 * v494);
        if (v497 != 2)
        {
          if (v497 != 1)
          {
            if (!v497)
            {
              unsigned int v38 = v1053;
              if (v36)
              {
                if (v36 >= 0xC)
                {
                  uint64_t v498 = 0;
                  if ((unint64_t)((char *)v37 - (char *)&v1065[v489]) >= 0x20)
                  {
                    int v371 = v1040;
                    a3 = v1064;
                    if ((unint64_t)((char *)v37 - (char *)&v1065[v487]) >= 0x20
                      && (unint64_t)((char *)v37 - (char *)&v1065[v485]) >= 0x20)
                    {
                      v611 = (int32x4_t *)&v1026[v485];
                      v612 = v37 + 1;
                      v613 = (int32x4_t *)&v1026[v487];
                      v614 = (int32x4_t *)&v1026[v489];
                      uint64_t v615 = v1028;
                      do
                      {
                        int32x4_t v616 = vsubq_s32(vaddq_s32(v613[-1], v611[-1]), v614[-1]);
                        int32x4_t v617 = vsubq_s32(vaddq_s32(*v613, *v611), *v614);
                        v611 += 2;
                        v612[-1] = v616;
                        int32x4_t *v612 = v617;
                        v612 += 2;
                        v613 += 2;
                        v614 += 2;
                        v615 -= 8;
                      }
                      while (v615);
                      uint64_t v498 = v1028;
                      if (v1028 == v36) {
                        goto LABEL_813;
                      }
                    }
                    goto LABEL_662;
                  }
                }
                else
                {
                  uint64_t v498 = 0;
                }
                int v371 = v1040;
                a3 = v1064;
LABEL_662:
                uint64_t v499 = v498;
                uint64_t v500 = v36 - v498;
                v501 = &v37->i32[v499];
                v502 = &v1065[v489 + v499];
                v503 = &v1065[v487 + v499];
                v504 = &v1065[v485 + v499];
                do
                {
                  int v506 = *v504++;
                  int v505 = v506;
                  int v507 = *v503++;
                  int v508 = v507 + v505;
                  int v509 = *v502++;
                  *v501++ = v508 - v509;
                  --v500;
                }
                while (v500);
LABEL_813:
                unsigned int v373 = 2;
                uint64_t v402 = v1066;
                goto LABEL_524;
              }
LABEL_733:
              unsigned int v373 = 2;
              uint64_t v402 = v1066;
              int v371 = v1040;
              a3 = v1064;
              goto LABEL_524;
            }
            if (v36 == 2)
            {
              gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)&v1065[2 * v375], &v1065[2 * v376], &v1065[2 * v377], (_DWORD *)(*((void *)this + 13) + 12 * (int)v375), (_DWORD *)(*((void *)this + 13) + 12 * (int)v376), (int *)(*((void *)this + 13) + 12 * v370), v37->i32);
              unsigned int v373 = 2;
              uint64_t v36 = *(void *)v1069;
              uint64_t v402 = v1066;
              unsigned int v38 = v1053;
              int v371 = v1040;
              a3 = v1064;
              goto LABEL_524;
            }
            unsigned int v38 = v1053;
            if (!v36) {
              goto LABEL_733;
            }
            if (v36 >= 0xC)
            {
              uint64_t v580 = 0;
              int64_t v667 = (char *)v37 - (char *)v1065;
              if ((unint64_t)((char *)v37 - (char *)v1065 - 4 * v489) >= 0x20)
              {
                int v371 = v1040;
                a3 = v1064;
                if ((unint64_t)(v667 - 4 * v487) >= 0x20 && (unint64_t)(v667 - 4 * v485) >= 0x20)
                {
                  v668 = (int32x4_t *)&v1026[v485];
                  v669 = v37 + 1;
                  v670 = (int32x4_t *)&v1026[v487];
                  v671 = (int32x4_t *)&v1026[v489];
                  uint64_t v672 = v1028;
                  do
                  {
                    int32x4_t v673 = vsubq_s32(vaddq_s32(v670[-1], v668[-1]), v671[-1]);
                    int32x4_t v674 = vsubq_s32(vaddq_s32(*v670, *v668), *v671);
                    v668 += 2;
                    v669[-1] = v673;
                    int32x4_t *v669 = v674;
                    v669 += 2;
                    v670 += 2;
                    v671 += 2;
                    v672 -= 8;
                  }
                  while (v672);
                  uint64_t v580 = v1028;
                  if (v1028 == v36) {
                    goto LABEL_813;
                  }
                }
                goto LABEL_730;
              }
            }
            else
            {
              uint64_t v580 = 0;
            }
            int v371 = v1040;
            a3 = v1064;
LABEL_730:
            uint64_t v581 = v580;
            uint64_t v582 = v36 - v580;
            v583 = &v37->i32[v581];
            v584 = &v1065[v489 + v581];
            v585 = &v1065[v487 + v581];
            v586 = &v1065[v485 + v581];
            do
            {
              int v588 = *v586++;
              int v587 = v588;
              int v589 = *v585++;
              int v590 = v589 + v587;
              int v591 = *v584++;
              *v583++ = v590 - v591;
              --v582;
            }
            while (v582);
            goto LABEL_813;
          }
          gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[v485], (int32x4_t *)&v1065[v487], v490, v36, (int *)(*((void *)this + 13) + 12 * (int)v375), (int *)(*((void *)this + 13) + 12 * (int)v376), (int *)(*((void *)this + 13) + 12 * (int)v377), (int *)(*((void *)this + 13) + 12 * v370), v37);
          unsigned int v373 = 2;
          uint64_t v36 = *(void *)v1069;
LABEL_709:
          uint64_t v402 = v1066;
          unsigned int v38 = v1053;
          int v371 = v1040;
          a3 = v1064;
          goto LABEL_524;
        }
        uint64_t v551 = (int)v377 * (int)v36;
        uint64_t v552 = v487;
        gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v486, v488, v490, v36, (int *)(*((void *)this + 13) + 12 * (int)v375), (int *)(*((void *)this + 13) + 12 * (int)v376), (int *)(*((void *)this + 13) + 12 * (int)v377), (int *)(*((void *)this + 13) + 12 * v370), v37);
        if (!v1066)
        {
          unsigned int v373 = 2;
          uint64_t v36 = *(void *)v1069;
          v393 = v1065;
          uint64_t v402 = v1066;
          unsigned int v38 = v1053;
          int v371 = v1040;
          a3 = v1064;
          goto LABEL_524;
        }
        v553 = v1074;
        uint64_t v36 = *(void *)v1069;
        if (v1069[0] >= 8u)
        {
          uint64_t v554 = 0;
          v618 = (int32x4_t *)((char *)v1074 + v1029);
          uint64_t v555 = v551;
          BOOL v620 = v1074 < (int32x4_t *)&v1024[v552] && v488 < v618;
          BOOL v622 = v1074 < (int32x4_t *)&v1024[v485] && v486 < v618;
          if (v490 >= v618 || v1074 >= (int32x4_t *)&v1024[v551])
          {
            v393 = v1065;
            if (!v620 && !v622)
            {
              uint64_t v624 = v1027;
              v625 = v1074;
              do
              {
                int32x4_t v626 = *v486++;
                int32x4_t v627 = v626;
                int32x4_t v628 = *v488++;
                int32x4_t v629 = vaddq_s32(v628, v627);
                int32x4_t v630 = *v490++;
                uint32x4_t v631 = (uint32x4_t)vaddq_s32(vsubq_s32(v629, v630), *v625);
                *v625++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v631, v631, 0x1FuLL), 1uLL);
                v624 -= 4;
              }
              while (v624);
              uint64_t v554 = v1027;
              if (v1027 == *(void *)v1069)
              {
LABEL_708:
                unsigned int v373 = 2;
                goto LABEL_709;
              }
            }
LABEL_704:
            uint64_t v556 = v554;
            uint64_t v557 = *(void *)v1069 - v554;
            v558 = &v553->i32[v556];
            v559 = &v393[v555 + v556];
            v560 = &v393[v552 + v556];
            v561 = &v393[v485 + v556];
            do
            {
              int v563 = *v561++;
              int v562 = v563;
              int v564 = *v560++;
              int v565 = v564 + v562;
              int v566 = *v559++;
              int v567 = v565 - v566;
              BOOL v296 = __OFADD__(v567, *v558);
              int v568 = v567 + *v558;
              if (v568 < 0 != v296) {
                ++v568;
              }
              *v558++ = v568 >> 1;
              --v557;
            }
            while (v557);
            goto LABEL_708;
          }
        }
        else
        {
          uint64_t v554 = 0;
          uint64_t v555 = v551;
        }
        v393 = v1065;
        goto LABEL_704;
      }
      v393 = v1065;
      uint64_t v402 = v1066;
      if (v376 != -1 && (!v371 || a3[v375] && a3[v376]))
      {
        if (v36 == 2)
        {
          unsigned int v403 = *((_DWORD *)this + 683);
          unsigned int v404 = *((_DWORD *)this + 684);
          if (v403 >= 0x40000001)
          {
            unsigned int v415 = *((_DWORD *)this + 683);
            unsigned int v406 = v1031;
LABEL_713:
            unsigned int v569 = (HIWORD(v415) * (unsigned __int16)v406) & 0xFFFF0000;
            unsigned int v570 = v415 - v569;
            BOOL v571 = v404 >= v569;
            unsigned int v572 = v406;
            int v573 = *((unsigned __int16 *)this + ((v406 >> 7) & 0x1FE | v571) + 1376);
            if (v404 < v569) {
              unsigned int v574 = v569;
            }
            else {
              unsigned int v574 = v570;
            }
            if (v404 < v569) {
              unsigned int v569 = 0;
            }
            *((_DWORD *)this + 683) = v574;
            *((_DWORD *)this + 684) = v404 - v569;
            gcl::tmesh::ComputeTexCoordinatesPrediction(&v1065[2 * v375], &v1065[2 * v376], (_DWORD *)(*((void *)this + 13) + 12 * (int)v375), (_DWORD *)(*((void *)this + 13) + 12 * (int)v376), (int *)(*((void *)this + 13) + 12 * v370), v571, v37->i32);
            int v1031 = v573 + v572;
            unsigned int v373 = 1;
            a3 = v1064;
            uint64_t v36 = *(void *)v1069;
            int v371 = v1040;
            goto LABEL_524;
          }
          int v405 = *((_DWORD *)this + 686);
          unsigned int v406 = v1031;
          while (1)
          {
            v404 *= 2;
            *((_DWORD *)this + 686) = --v405;
            if (v405) {
              goto LABEL_582;
            }
            uint64_t v416 = *((void *)this + 340);
            *((void *)this + 340) = v416 + 1;
            unint64_t v417 = *((unsigned int *)this + 676);
            if (v416 + 1 >= v417)
            {
              int v418 = 65280;
              unint64_t v419 = v416 + 2;
              *((void *)this + 340) = v419;
              if (v419 >= v417)
              {
LABEL_588:
                int v414 = 255;
                goto LABEL_581;
              }
            }
            else
            {
              int v418 = *(unsigned __int8 *)(*((void *)this + 339) + v416 + 1) << 8;
              unint64_t v419 = v416 + 2;
              *((void *)this + 340) = v419;
              if (v419 >= v417) {
                goto LABEL_588;
              }
            }
            int v414 = *(unsigned __int8 *)(*((void *)this + 339) + v419);
LABEL_581:
            v404 |= v418 | v414;
            int v405 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_582:
            unsigned int v415 = 2 * v403;
            BOOL v84 = v403 >= 0x20000001;
            v403 *= 2;
            if (v84) {
              goto LABEL_713;
            }
          }
        }
        if (v36)
        {
          int v510 = v375 * v1066;
          uint64_t v511 = (int)v375 * (int)v1066;
          int v512 = v376 * v1066;
          uint64_t v513 = (int)v376 * (int)v1066;
          if (v36 < 8
            || ((unint64_t)((char *)v37 - (char *)&v1065[v512]) >= 0x10
              ? (BOOL v514 = (unint64_t)((char *)v37 - (char *)&v1065[v510]) >= 0x10)
              : (BOOL v514 = 0),
                !v514))
          {
            uint64_t v515 = 0;
            goto LABEL_672;
          }
          v632 = (int32x4_t *)&v1065[v510];
          uint64_t v633 = v1027;
          v634 = v37;
          v635 = (int32x4_t *)&v1065[v512];
          do
          {
            int32x4_t v636 = *v632++;
            int32x4_t v637 = v636;
            int32x4_t v638 = *v635++;
            uint32x4_t v639 = (uint32x4_t)vaddq_s32(v638, v637);
            *v634++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v639, v639, 0x1FuLL), 1uLL);
            v633 -= 4;
          }
          while (v633);
          uint64_t v515 = v1027;
          if (v1027 != v36)
          {
LABEL_672:
            uint64_t v516 = v36 - v515;
            uint64_t v517 = v515;
            v518 = &v37->i32[v515];
            v519 = &v1065[v513 + v517];
            v520 = &v1065[v511 + v517];
            do
            {
              int v522 = *v520++;
              int v521 = v522;
              int v523 = *v519++;
              BOOL v296 = __OFADD__(v523, v521);
              int v524 = v523 + v521;
              if (v524 < 0 != v296) {
                ++v524;
              }
              *v518++ = v524 >> 1;
              --v516;
            }
            while (v516);
          }
        }
        unsigned int v373 = 1;
        goto LABEL_524;
      }
      if (v375 == -1 || v371 && !a3[v375])
      {
        if (v36)
        {
          bzero(v37, v1029);
          uint64_t v36 = *(void *)v1069;
        }
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v37, v36, 3u, 0, (int32x4_t *)&v1065[v370 * v1066]);
        uint64_t v36 = *(void *)v1069;
        int32x4_t v372 = *(int32x4_t *)v1061;
        goto LABEL_525;
      }
      if (!v36) {
        goto LABEL_579;
      }
      uint64_t v407 = (int)v375 * (int)v1066;
      if (v1066 >= 8 && (unint64_t)((char *)v37 - (char *)v1065 - 4 * v407) >= 0x20)
      {
        v592 = &v1026[v407];
        v593 = v37 + 1;
        uint64_t v594 = v1028;
        do
        {
          int32x4_t v595 = *(int32x4_t *)v592;
          v593[-1] = *((int32x4_t *)v592 - 1);
          int32x4_t *v593 = v595;
          v592 += 8;
          v593 += 2;
          v594 -= 8;
        }
        while (v594);
        uint64_t v408 = v1028;
        if (v1028 == v36) {
          goto LABEL_579;
        }
      }
      else
      {
        uint64_t v408 = 0;
      }
      uint64_t v409 = v36 - v408;
      uint64_t v410 = v408;
      v411 = &v37->i32[v408];
      v412 = &v1065[v407 + v410];
      do
      {
        __int32 v413 = *v412++;
        *v411++ = v413;
        --v409;
      }
      while (v409);
LABEL_579:
      unsigned int v373 = 0;
      goto LABEL_524;
    case 5:
      signed int v46 = ~(-1 << (*((_DWORD *)this + 962) - 1));
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      gcl::tmesh::EstimateQuantizedNormals((uint64_t *)this + 13, (void *)this + 16, (uint64_t)&v1074, v46);
      *(void *)&long long v1084 = 0;
      long long v1082 = 0u;
      long long v1083 = 0u;
      long long v1081 = 0u;
      long long v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      long long __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v1069[0]);
      int v47 = *((_DWORD *)this + 959);
      uint64_t v48 = *(void *)v1069;
      if (v47 < 1) {
        goto LABEL_463;
      }
      uint64_t v49 = 0;
      int v1058 = *((_DWORD *)this + 964);
      int v1044 = 2 * v46;
      unsigned int v1049 = 0x8000;
      while (v1058 && !a3[v49])
      {
LABEL_75:
        if (++v49 >= v47) {
          goto LABEL_463;
        }
      }
      int32x4_t v57 = &v1074->i32[3 * v49];
      int v59 = *v57;
      int v58 = v57[1];
      int v60 = v57[2];
      uint64_t v61 = *(int *)(*((void *)this + 22) + 12 * v49);
      if (v61 != -1 && (!v1058 || a3[v61]))
      {
        unsigned int v62 = &v1065[(int)v61 * (int)v1066];
        int v63 = *v62 - v46;
        int v64 = v62[1] - v46;
        if (v63 >= 0) {
          int v65 = v63;
        }
        else {
          int v65 = -v63;
        }
        if (v64 >= 0) {
          int v66 = v64;
        }
        else {
          int v66 = -v64;
        }
        int v67 = v46 - v65;
        int v68 = v66 - v46;
        if (v63 >= 0) {
          int v68 = v46 - v66;
        }
        int v69 = v65 - v46;
        if (v64 >= 0) {
          int v69 = v67;
        }
        int v70 = v67 - v66;
        if (v70 < 0)
        {
          int v63 = v68;
          int v64 = v69;
        }
        if (v60 * (uint64_t)v70 + v59 * (uint64_t)v63 + v58 * (uint64_t)v64 < 0)
        {
          int v59 = -v59;
          int v58 = -v58;
          int v60 = -v60;
        }
        goto LABEL_115;
      }
      unsigned int v71 = *((_DWORD *)this + 683);
      unsigned int v72 = *((_DWORD *)this + 684);
      if (v71 >= 0x40000001)
      {
        unsigned int v75 = *((_DWORD *)this + 683);
LABEL_107:
        unsigned int v80 = (HIWORD(v75) * (unsigned __int16)v1049) & 0xFFFF0000;
        unsigned int v81 = v75 - v80;
        if (v72 < v80) {
          unsigned int v82 = 0;
        }
        else {
          unsigned int v82 = (HIWORD(v75) * (unsigned __int16)v1049) & 0xFFFF0000;
        }
        unsigned int v83 = v72 - v82;
        BOOL v84 = v72 >= v80;
        v1049 += *((unsigned __int16 *)this + ((v1049 >> 7) & 0x1FE | (v72 >= v80)) + 1376);
        if (v72 < v80) {
          unsigned int v85 = v80;
        }
        else {
          unsigned int v85 = v81;
        }
        *((_DWORD *)this + 683) = v85;
        *((_DWORD *)this + 684) = v83;
        if (v84)
        {
          int v59 = -v59;
          int v58 = -v58;
          int v60 = -v60;
        }
LABEL_115:
        if (v59 >= 0) {
          unsigned int v86 = v59;
        }
        else {
          unsigned int v86 = -v59;
        }
        if (v58 >= 0) {
          unsigned int v87 = v58;
        }
        else {
          unsigned int v87 = -v58;
        }
        if (v60 >= 0) {
          unsigned int v88 = v60;
        }
        else {
          unsigned int v88 = -v60;
        }
        BOOL v90 = v86 < v87 || v86 < v88;
        if (v90)
        {
          unsigned int v86 = v88;
          int v91 = v58;
          int v92 = v59;
          if (v87 < v88) {
            goto LABEL_135;
          }
          uint64_t v93 = &v1072.i32[3];
          unsigned int v86 = v87;
          int v91 = v60;
          int v92 = v59;
        }
        else
        {
          uint64_t v93 = (int *)v1073;
          int v91 = v58;
          int v92 = v60;
        }
        *uint64_t v93 = v60;
LABEL_135:
        v1072.i64[0] = __PAIR64__(v91, v92);
        v1072.i32[2] = v86;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, &v1072, v48, *((_DWORD *)this + 966), (uint64_t *)&__b, &v1070);
        int v51 = v1070.i32[0];
        int v94 = v1070.i32[1];
        if (v1070.i32[0] >= 0) {
          __int32 v95 = v1070.i32[0];
        }
        else {
          __int32 v95 = -v1070.i32[0];
        }
        if (v1070.i32[1] >= 0) {
          __int32 v96 = v1070.i32[1];
        }
        else {
          __int32 v96 = -v1070.i32[1];
        }
        int v97 = v46 - v95;
        int v98 = v46 - v95 - v96;
        if (v98 < 0)
        {
          int v99 = v46 - v96;
          int v100 = v96 - v46;
          if (v1070.i32[0] >= 0) {
            int v51 = v99;
          }
          else {
            int v51 = v100;
          }
          int v101 = v95 - v46;
          if (v1070.i32[1] >= 0) {
            int v94 = v97;
          }
          else {
            int v94 = v101;
          }
          uint64_t v48 = *(void *)v1069;
          if (v90) {
            goto LABEL_151;
          }
        }
        else
        {
          uint64_t v48 = *(void *)v1069;
          if (v90)
          {
LABEL_151:
            if (v87 >= v88)
            {
              int v50 = v94;
              if (v58 >= 0) {
                int v94 = v98;
              }
              else {
                int v94 = -v98;
              }
            }
            else if (v60 >= 0)
            {
              int v50 = v98;
            }
            else
            {
              int v50 = -v98;
            }
            goto LABEL_64;
          }
        }
        int v50 = v51;
        if (v59 >= 0) {
          int v51 = v98;
        }
        else {
          int v51 = -v98;
        }
LABEL_64:
        a3 = v1064;
        int8x16_t v52 = &v1065[v49 * v1066];
        if (v94 >= 0) {
          int v53 = v94;
        }
        else {
          int v53 = -v94;
        }
        if (v51 < 0)
        {
          int v54 = -v51;
        }
        else
        {
          int v53 = v1044 - v53;
          int v54 = v51;
        }
        if (v94 >= 0) {
          int v54 = v1044 - v54;
        }
        int v55 = v51 + v46;
        int v56 = v94 + v46;
        if (v50 < 0)
        {
          int v55 = v53;
          int v56 = v54;
        }
        *int8x16_t v52 = v55;
        v52[1] = v56;
        int v47 = *((_DWORD *)this + 959);
        goto LABEL_75;
      }
      int v73 = *((_DWORD *)this + 686);
      while (1)
      {
        v72 *= 2;
        *((_DWORD *)this + 686) = --v73;
        if (v73) {
          goto LABEL_99;
        }
        uint64_t v76 = *((void *)this + 340);
        *((void *)this + 340) = v76 + 1;
        unint64_t v77 = *((unsigned int *)this + 676);
        if (v76 + 1 >= v77)
        {
          int v78 = 65280;
          unint64_t v79 = v76 + 2;
          *((void *)this + 340) = v79;
          if (v79 >= v77)
          {
LABEL_105:
            int v74 = 255;
            goto LABEL_98;
          }
        }
        else
        {
          int v78 = *(unsigned __int8 *)(*((void *)this + 339) + v76 + 1) << 8;
          unint64_t v79 = v76 + 2;
          *((void *)this + 340) = v79;
          if (v79 >= v77) {
            goto LABEL_105;
          }
        }
        int v74 = *(unsigned __int8 *)(*((void *)this + 339) + v79);
LABEL_98:
        v72 |= v78 | v74;
        int v73 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_99:
        unsigned int v75 = 2 * v71;
        BOOL v84 = v71 >= 0x20000001;
        v71 *= 2;
        if (v84) {
          goto LABEL_107;
        }
      }
    case 6:
      signed int v102 = ~(-1 << (*((_DWORD *)this + 962) - 1));
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      unsigned int v1059 = v102;
      gcl::tmesh::EstimateQuantizedNormals((uint64_t *)this + 13, (void *)this + 16, (uint64_t)&v1074, v102);
      uint64_t v1099 = 0;
      long long v1097 = 0u;
      long long __p = 0u;
      long long v1095 = 0u;
      long long v1096 = 0u;
      long long v1093 = 0u;
      long long v1094 = 0u;
      long long v1091 = 0u;
      long long v1092 = 0u;
      long long v1089 = 0u;
      long long v1090 = 0u;
      long long v1087 = 0u;
      long long v1088 = 0u;
      long long v1085 = 0u;
      long long v1086 = 0u;
      long long v1083 = 0u;
      long long v1084 = 0u;
      long long v1081 = 0u;
      long long v1082 = 0u;
      long long v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      long long __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v1069[0]);
      memset_pattern16(v1073, &memset_pattern_27, 6uLL);
      memset_pattern16((char *)&v1072.u64[1] + 4, &memset_pattern_27, 6uLL);
      int v103 = *((_DWORD *)this + 959);
      LODWORD(v104) = v1066;
      unsigned int v105 = v1059;
      if (v103 <= 0) {
        goto LABEL_443;
      }
      int v106 = v1069[0];
      uint64_t v107 = 0;
      int v108 = *((_DWORD *)this + 964);
      unsigned int v1036 = v1073[0];
      int v1034 = 2 * v1059;
      unsigned int v1039 = 0x8000;
      unsigned int v1045 = v1072.u16[6];
      int32x2_t v109 = vdup_n_s32(v1059);
      unsigned int v1030 = 0x8000;
      int v1050 = v108;
      break;
    default:
      return;
  }
  do
  {
    if (!v108 || a3[v107])
    {
      int v115 = &v1074->i8[12 * v107];
      double v116 = *(double *)v115;
      int v117 = *((_DWORD *)v115 + 2);
      uint64_t v118 = (int *)(*((void *)this + 22) + 12 * v107);
      uint64_t v119 = *v118;
      uint64_t v120 = v118[1];
      uint64_t v121 = v118[2];
      unsigned int v122 = (int *)(*((void *)this + 25) + 12 * v107);
      uint64_t v123 = v122[2];
      if (v123 != -1)
      {
        uint64_t v125 = *v122;
        uint64_t v124 = v122[1];
        if (!v108 || a3[v119] && a3[v120] && a3[v121] && a3[v125] && a3[v124] && a3[v123])
        {
          int32x2_t v126 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * v106], v109);
          int32x2_t v127 = vabs_s32(vrev64_s32(v126));
          int v128 = v105 - v127.i32[1] - v127.i32[0];
          if (v128 >= 0)
          {
            unsigned int v129 = *((_DWORD *)this + 683);
            unsigned int v130 = *((_DWORD *)this + 684);
            if (v129 < 0x40000001) {
              goto LABEL_179;
            }
LABEL_290:
            unsigned int v133 = v129;
LABEL_291:
            unsigned int v216 = (HIWORD(v133) * (unsigned __int16)v1045) & 0xFFFF0000;
            unsigned int v217 = v133 - v216;
            BOOL v218 = v130 >= v216;
            BOOL v219 = v130 >= v216;
            int v220 = *((unsigned __int16 *)this + ((v1045 >> 7) & 0x1FE | v219) + 1376);
            if (v130 < v216) {
              unsigned int v221 = v216;
            }
            else {
              unsigned int v221 = v217;
            }
            if (v130 < v216) {
              unsigned int v222 = 0;
            }
            else {
              unsigned int v222 = v216;
            }
            uint64_t v223 = 1;
            if (v218) {
              uint64_t v223 = 2;
            }
            unsigned int v224 = v130 - v222;
            *((_DWORD *)this + 683) = v221;
            *((_DWORD *)this + 684) = v224;
            if (v221 < 0x40000001)
            {
              int v225 = *((_DWORD *)this + 686);
              while (1)
              {
                v224 *= 2;
                *((_DWORD *)this + 686) = --v225;
                if (v225) {
                  goto LABEL_303;
                }
                uint64_t v228 = *((void *)this + 340);
                *((void *)this + 340) = v228 + 1;
                unint64_t v229 = *((unsigned int *)this + 676);
                if (v228 + 1 >= v229)
                {
                  int v230 = 65280;
                  unint64_t v231 = v228 + 2;
                  *((void *)this + 340) = v231;
                  if (v231 >= v229)
                  {
LABEL_309:
                    int v226 = 255;
                    goto LABEL_302;
                  }
                }
                else
                {
                  int v230 = *(unsigned __int8 *)(*((void *)this + 339) + v228 + 1) << 8;
                  unint64_t v231 = v228 + 2;
                  *((void *)this + 340) = v231;
                  if (v231 >= v229) {
                    goto LABEL_309;
                  }
                }
                int v226 = *(unsigned __int8 *)(*((void *)this + 339) + v231);
LABEL_302:
                v224 |= v230 | v226;
                int v225 = 16;
                *((_DWORD *)this + 686) = 16;
LABEL_303:
                unsigned int v227 = 2 * v221;
                BOOL v84 = v221 >= 0x20000001;
                v221 *= 2;
                if (v84) {
                  goto LABEL_311;
                }
              }
            }
            unsigned int v227 = v221;
LABEL_311:
            v1045 += v220;
            unsigned int v232 = v1072.u16[v223 + 6];
            unsigned int v233 = (HIWORD(v227) * v232) & 0xFFFF0000;
            unsigned int v234 = v227 - v233;
            BOOL v235 = v224 >= v233;
            v1072.i16[v223 + 6] = *((_WORD *)this + ((v232 >> 7) & 0x1FE | v235) + 1376) + v232;
            if (v224 < v233) {
              unsigned int v236 = v233;
            }
            else {
              unsigned int v236 = v234;
            }
            if (v224 < v233) {
              unsigned int v237 = 0;
            }
            else {
              unsigned int v237 = v233;
            }
            *((_DWORD *)this + 683) = v236;
            *((_DWORD *)this + 684) = v224 - v237;
            int v238 = v219 | (2 * v235);
            if (v238 == 2)
            {
              int32x2_t v274 = vsub_s32(*(int32x2_t *)&a2[(int)v125 * (int)v104], v109);
              int32x2_t v275 = vabs_s32(vrev64_s32(v274));
              int v276 = v105 - v275.i32[1] - v275.i32[0];
              if (v276 < 0) {
                int32x2_t v274 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v274), (int8x8_t)vsub_s32(v275, v109), (int8x8_t)__PAIR64__(v105 - v275.i32[1], v105 - v275.i32[0]));
              }
              int32x2_t v277 = vsub_s32(*(int32x2_t *)&a2[(int)v124 * (int)v104], v109);
              int32x2_t v278 = vabs_s32(vrev64_s32(v277));
              int v279 = v105 - v278.i32[1] - v278.i32[0];
              if (v279 < 0) {
                int32x2_t v277 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v277), (int8x8_t)vsub_s32(v278, v109), (int8x8_t)__PAIR64__(v105 - v278.i32[1], v105 - v278.i32[0]));
              }
              int32x2_t v269 = vsub_s32(*(int32x2_t *)&a2[(int)v123 * (int)v104], v109);
              int32x2_t v280 = vabs_s32(vrev64_s32(v269));
              int v271 = v105 - v280.i32[1] - v280.i32[0];
              if (v271 < 0) {
                int32x2_t v269 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v269), (int8x8_t)vsub_s32(v280, v109), (int8x8_t)__PAIR64__(v105 - v280.i32[1], v105 - v280.i32[0]));
              }
              int32x2_t v272 = vadd_s32(v277, v274);
              int v273 = v279 + v276;
            }
            else
            {
              if (v238 != 1)
              {
                if (v238)
                {
                  int32x2_t v281 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * v106], v109);
                  int32x2_t v282 = vabs_s32(vrev64_s32(v281));
                  int v283 = v105 - v282.i32[1] - v282.i32[0];
                  if (v283 < 0) {
                    int32x2_t v281 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v281), (int8x8_t)vsub_s32(v282, v109), (int8x8_t)__PAIR64__(v105 - v282.i32[1], v105 - v282.i32[0]));
                  }
                  int32x2_t v284 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * (int)v104], v109);
                  int32x2_t v285 = vabs_s32(vrev64_s32(v284));
                  int v286 = v105 - v285.i32[1] - v285.i32[0];
                  if (v286 < 0) {
                    int32x2_t v284 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v284), (int8x8_t)vsub_s32(v285, v109), (int8x8_t)__PAIR64__(v105 - v285.i32[1], v105 - v285.i32[0]));
                  }
                  int32x2_t v287 = vsub_s32(*(int32x2_t *)&a2[(int)v125 * v106], v109);
                  int32x2_t v288 = vabs_s32(vrev64_s32(v287));
                  int v289 = v105 - v288.i32[1] - v288.i32[0];
                  if (v289 < 0) {
                    int32x2_t v287 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v287), (int8x8_t)vsub_s32(v288, v109), (int8x8_t)__PAIR64__(v105 - v288.i32[1], v105 - v288.i32[0]));
                  }
                  int32x2_t v290 = vsub_s32(*(int32x2_t *)&a2[(int)v124 * (int)v104], v109);
                  int32x2_t v291 = vabs_s32(vrev64_s32(v290));
                  int v292 = v105 - v291.i32[1] - v291.i32[0];
                  if (v292 < 0) {
                    int32x2_t v290 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v290), (int8x8_t)vsub_s32(v291, v109), (int8x8_t)__PAIR64__(v105 - v291.i32[1], v105 - v291.i32[0]));
                  }
                  int32x2_t v293 = vsub_s32(*(int32x2_t *)&a2[(int)v123 * v106], v109);
                  int32x2_t v294 = vabs_s32(vrev64_s32(v293));
                  if ((int)(v105 - v294.i32[1] - v294.i32[0]) < 0) {
                    int32x2_t v293 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v293), (int8x8_t)vsub_s32(v294, v109), (int8x8_t)__PAIR64__(v105 - v294.i32[1], v105 - v294.i32[0]));
                  }
                  uint32x2_t v295 = (uint32x2_t)vadd_s32(v287, v126);
                  BOOL v296 = __OFADD__(v289, v128);
                  int v297 = v289 + v128;
                  if (v297 < 0 != v296) {
                    ++v297;
                  }
                  int32x2_t v298 = vadd_s32(v290, v281);
                  int64x2_t v299 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v298, v298), (int32x2_t)vsra_n_u32(v295, v295, 0x1FuLL), 1uLL), vadd_s32(v284, v293)), vdup_n_s32(0x55555556u));
                  double v116 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v299, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v299, 0x3FuLL))));
                  unint64_t v300 = 1431655766
                       * (int)((v297 >> 1) + 2 * (v292 + v283) - (v286 + v105 - v294.i32[1] - v294.i32[0]));
                  int v117 = HIDWORD(v300) + (v300 >> 63);
                }
                else
                {
                  int32x2_t v239 = vzip1_s32(v126, *(int32x2_t *)&v116);
                  int32x2_t v240 = vzip2_s32(v126, *(int32x2_t *)&v116);
                  if (v239.i32[0] * (uint64_t)v239.i32[1] + v117 * (uint64_t)v128 + v240.i32[0] * (uint64_t)v240.i32[1] < 0)
                  {
                    double v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
                    int v117 = -v117;
                  }
                }
                goto LABEL_385;
              }
              int32x2_t v266 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * (int)v104], v109);
              int32x2_t v267 = vabs_s32(vrev64_s32(v266));
              int v268 = v105 - v267.i32[1] - v267.i32[0];
              if (v268 < 0) {
                int32x2_t v266 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v266), (int8x8_t)vsub_s32(v267, v109), (int8x8_t)__PAIR64__(v105 - v267.i32[1], v105 - v267.i32[0]));
              }
              int32x2_t v269 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * v106], v109);
              int32x2_t v270 = vabs_s32(vrev64_s32(v269));
              int v271 = v105 - v270.i32[1] - v270.i32[0];
              if (v271 < 0) {
                int32x2_t v269 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v269), (int8x8_t)vsub_s32(v270, v109), (int8x8_t)__PAIR64__(v105 - v270.i32[1], v105 - v270.i32[0]));
              }
              int32x2_t v272 = vadd_s32(v266, v126);
              int v273 = v268 + v128;
            }
            double v116 = COERCE_DOUBLE(vsub_s32(v272, v269));
            int v117 = v273 - v271;
LABEL_385:
            unsigned int v247 = 2;
            goto LABEL_394;
          }
          v215.i32[0] = v105 - v127.i32[0];
          v215.i32[1] = v105 - v127.i32[1];
          int32x2_t v126 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v126), (int8x8_t)vsub_s32(v127, v109), v215);
          unsigned int v129 = *((_DWORD *)this + 683);
          unsigned int v130 = *((_DWORD *)this + 684);
          if (v129 >= 0x40000001) {
            goto LABEL_290;
          }
LABEL_179:
          int v131 = *((_DWORD *)this + 686);
          while (1)
          {
            v130 *= 2;
            *((_DWORD *)this + 686) = --v131;
            if (v131) {
              goto LABEL_182;
            }
            uint64_t v134 = *((void *)this + 340);
            *((void *)this + 340) = v134 + 1;
            unint64_t v135 = *((unsigned int *)this + 676);
            if (v134 + 1 >= v135)
            {
              int v136 = 65280;
              unint64_t v137 = v134 + 2;
              *((void *)this + 340) = v137;
              if (v137 >= v135)
              {
LABEL_188:
                int v132 = 255;
                goto LABEL_181;
              }
            }
            else
            {
              int v136 = *(unsigned __int8 *)(*((void *)this + 339) + v134 + 1) << 8;
              unint64_t v137 = v134 + 2;
              *((void *)this + 340) = v137;
              if (v137 >= v135) {
                goto LABEL_188;
              }
            }
            int v132 = *(unsigned __int8 *)(*((void *)this + 339) + v137);
LABEL_181:
            v130 |= v136 | v132;
            int v131 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_182:
            unsigned int v133 = 2 * v129;
            BOOL v84 = v129 >= 0x20000001;
            v129 *= 2;
            if (v84) {
              goto LABEL_291;
            }
          }
        }
      }
      if (v121 != -1 && (!v108 || a3[v119] && a3[v120] && a3[v121]))
      {
        int32x2_t v138 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * (int)v104], v109);
        int32x2_t v139 = vabs_s32(vrev64_s32(v138));
        int v140 = v105 - v139.i32[1] - v139.i32[0];
        if (v140 < 0) {
          int32x2_t v138 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v138), (int8x8_t)vsub_s32(v139, v109), (int8x8_t)__PAIR64__(v105 - v139.i32[1], v105 - v139.i32[0]));
        }
        int32x2_t v141 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * v106], v109);
        int32x2_t v142 = vabs_s32(vrev64_s32(v141));
        int v143 = v105 - v142.i32[1] - v142.i32[0];
        if (v143 < 0) {
          int32x2_t v141 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v141), (int8x8_t)vsub_s32(v142, v109), (int8x8_t)__PAIR64__(v105 - v142.i32[1], v105 - v142.i32[0]));
        }
        int32x2_t v144 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * (int)v104], v109);
        int32x2_t v145 = vabs_s32(vrev64_s32(v144));
        int v146 = v105 - v145.i32[1] - v145.i32[0];
        if (v146 < 0) {
          int32x2_t v144 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v144), (int8x8_t)vsub_s32(v145, v109), (int8x8_t)__PAIR64__(v105 - v145.i32[1], v105 - v145.i32[0]));
        }
        unsigned int v147 = *((_DWORD *)this + 683);
        unsigned int v148 = *((_DWORD *)this + 684);
        if (v147 < 0x40000001)
        {
          int v149 = *((_DWORD *)this + 686);
          while (1)
          {
            v148 *= 2;
            *((_DWORD *)this + 686) = --v149;
            if (v149) {
              goto LABEL_204;
            }
            uint64_t v152 = *((void *)this + 340);
            *((void *)this + 340) = v152 + 1;
            unint64_t v153 = *((unsigned int *)this + 676);
            if (v152 + 1 >= v153)
            {
              int v154 = 65280;
              unint64_t v155 = v152 + 2;
              *((void *)this + 340) = v155;
              if (v155 >= v153)
              {
LABEL_210:
                int v150 = 255;
                goto LABEL_203;
              }
            }
            else
            {
              int v154 = *(unsigned __int8 *)(*((void *)this + 339) + v152 + 1) << 8;
              unint64_t v155 = v152 + 2;
              *((void *)this + 340) = v155;
              if (v155 >= v153) {
                goto LABEL_210;
              }
            }
            int v150 = *(unsigned __int8 *)(*((void *)this + 339) + v155);
LABEL_203:
            v148 |= v154 | v150;
            int v149 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_204:
            unsigned int v151 = 2 * v147;
            BOOL v84 = v147 >= 0x20000001;
            v147 *= 2;
            if (v84) {
              goto LABEL_258;
            }
          }
        }
        unsigned int v151 = *((_DWORD *)this + 683);
LABEL_258:
        unsigned int v189 = (HIWORD(v151) * (unsigned __int16)v1036) & 0xFFFF0000;
        unsigned int v190 = v151 - v189;
        BOOL v191 = v148 >= v189;
        BOOL v192 = v148 >= v189;
        int v193 = *((unsigned __int16 *)this + ((v1036 >> 7) & 0x1FE | v192) + 1376);
        if (v148 < v189) {
          unsigned int v194 = v189;
        }
        else {
          unsigned int v194 = v190;
        }
        if (v148 < v189) {
          unsigned int v195 = 0;
        }
        else {
          unsigned int v195 = v189;
        }
        uint64_t v196 = 1;
        if (v191) {
          uint64_t v196 = 2;
        }
        unsigned int v197 = v148 - v195;
        *((_DWORD *)this + 683) = v194;
        *((_DWORD *)this + 684) = v197;
        unsigned int v198 = (unsigned __int16)v1073[v196];
        if (v194 < 0x40000001)
        {
          int v199 = *((_DWORD *)this + 686);
          while (1)
          {
            v197 *= 2;
            *((_DWORD *)this + 686) = --v199;
            if (v199) {
              goto LABEL_270;
            }
            uint64_t v202 = *((void *)this + 340);
            *((void *)this + 340) = v202 + 1;
            unint64_t v203 = *((unsigned int *)this + 676);
            if (v202 + 1 >= v203)
            {
              int v204 = 65280;
              unint64_t v205 = v202 + 2;
              *((void *)this + 340) = v205;
              if (v205 >= v203)
              {
LABEL_276:
                int v200 = 255;
                goto LABEL_269;
              }
            }
            else
            {
              int v204 = *(unsigned __int8 *)(*((void *)this + 339) + v202 + 1) << 8;
              unint64_t v205 = v202 + 2;
              *((void *)this + 340) = v205;
              if (v205 >= v203) {
                goto LABEL_276;
              }
            }
            int v200 = *(unsigned __int8 *)(*((void *)this + 339) + v205);
LABEL_269:
            v197 |= v204 | v200;
            int v199 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_270:
            unsigned int v201 = 2 * v194;
            BOOL v84 = v194 >= 0x20000001;
            v194 *= 2;
            if (v84) {
              goto LABEL_278;
            }
          }
        }
        unsigned int v201 = v194;
LABEL_278:
        unsigned int v206 = v193 + v1036;
        unsigned int v207 = (HIWORD(v201) * v198) & 0xFFFF0000;
        unsigned int v208 = v201 - v207;
        BOOL v209 = v197 >= v207;
        v1073[v196] = *((_WORD *)this + ((v198 >> 7) & 0x1FE | v209) + 1376) + v198;
        if (v197 < v207) {
          unsigned int v210 = v207;
        }
        else {
          unsigned int v210 = v208;
        }
        if (v197 < v207) {
          unsigned int v211 = 0;
        }
        else {
          unsigned int v211 = v207;
        }
        *((_DWORD *)this + 683) = v210;
        *((_DWORD *)this + 684) = v197 - v211;
        int v212 = v192 | (2 * v209);
        unsigned int v1036 = v206;
        if (v212 == 2)
        {
          uint32x2_t v301 = (uint32x2_t)vsub_s32(v141, (int32x2_t)vmvn_s8((int8x8_t)v138));
          int v302 = v140 + v143;
          double v116 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v301, v301, 0x1FuLL), 1uLL));
          if (v140 + v143 + 1 >= 0) {
            int v303 = v302 + 1;
          }
          else {
            int v303 = v302 + 2;
          }
          int v117 = v303 >> 1;
        }
        else if (v212 == 1)
        {
          double v116 = COERCE_DOUBLE(vsub_s32(vadd_s32(v141, v138), v144));
          int v117 = v143 + v140 - v146;
        }
        else if (v212)
        {
          int64x2_t v304 = vmull_s32(vadd_s32(vsub_s32(v141, (int32x2_t)vmvn_s8((int8x8_t)v138)), v144), vdup_n_s32(0x55555556u));
          double v116 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v304, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v304, 0x3FuLL))));
          int v117 = (v140 + v143 + v146 + 1) / 3;
        }
        else
        {
          int32x2_t v213 = vzip1_s32(v138, *(int32x2_t *)&v116);
          int32x2_t v214 = vzip2_s32(v138, *(int32x2_t *)&v116);
          if (v213.i32[0] * (uint64_t)v213.i32[1] + v117 * (uint64_t)v140 + v214.i32[0] * (uint64_t)v214.i32[1] < 0)
          {
            double v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
            int v117 = -v117;
          }
        }
        unsigned int v247 = 1;
LABEL_394:
        int v305 = LODWORD(v116);
        int v1071 = LODWORD(v116);
        int v306 = HIDWORD(v116);
        v1070.i32[3] = HIDWORD(v116);
        int32x2_t v307 = vabs_s32(*(int32x2_t *)&v116);
        unsigned int v308 = v307.u32[1];
        if (v117 >= 0) {
          unsigned int v309 = v117;
        }
        else {
          unsigned int v309 = -v117;
        }
        __int32 v310 = v307.i32[0];
        BOOL v312 = v307.i32[0] < (unsigned __int32)v307.i32[1] || v307.i32[0] < v309;
        if (v312)
        {
          __int32 v310 = v309;
          int v313 = v306;
          int v314 = v305;
          if (v307.i32[1] < v309) {
            goto LABEL_408;
          }
          uint64_t v315 = &v1070.i32[3];
          __int32 v310 = v307.i32[1];
          int v313 = v117;
          int v314 = v305;
        }
        else
        {
          uint64_t v315 = &v1071;
          int v313 = v306;
          int v314 = v117;
        }
        *uint64_t v315 = v117;
LABEL_408:
        v1072.i64[0] = __PAIR64__(v313, v314);
        v1072.i32[2] = v310;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, &v1072, v1066, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v247 - 2], &v1070);
        int v111 = v1070.i32[0];
        int v316 = v1070.i32[1];
        if (v1070.i32[0] >= 0) {
          __int32 v317 = v1070.i32[0];
        }
        else {
          __int32 v317 = -v1070.i32[0];
        }
        if (v1070.i32[1] >= 0) {
          __int32 v318 = v1070.i32[1];
        }
        else {
          __int32 v318 = -v1070.i32[1];
        }
        unsigned int v105 = v1059;
        int v319 = v1059 - v317;
        int v320 = v1059 - v317 - v318;
        if (v320 < 0)
        {
          int v321 = v1059 - v318;
          int v322 = v318 - v1059;
          if (v1070.i32[0] >= 0) {
            int v111 = v321;
          }
          else {
            int v111 = v322;
          }
          int v323 = v317 - v1059;
          if (v1070.i32[1] >= 0) {
            int v316 = v319;
          }
          else {
            int v316 = v323;
          }
          int v106 = v1069[0];
          if (v312)
          {
LABEL_424:
            if (v308 >= v309)
            {
              int v325 = v316;
              if (v306 >= 0) {
                int v316 = v320;
              }
              else {
                int v316 = -v320;
              }
              a2 = v1065;
              uint64_t v104 = v1066;
              int v108 = v1050;
              if (v325 < 0) {
                goto LABEL_434;
              }
            }
            else
            {
              if (v117 >= 0) {
                int v324 = v320;
              }
              else {
                int v324 = -v320;
              }
              a2 = v1065;
              uint64_t v104 = v1066;
              int v108 = v1050;
              if (v324 < 0)
              {
LABEL_434:
                if (v316 >= 0) {
                  int v112 = v316;
                }
                else {
                  int v112 = -v316;
                }
                if (v111 < 0) {
                  int v111 = -v111;
                }
                else {
                  int v112 = v1034 - v112;
                }
                if (v316 >= 0) {
                  int v113 = v1034 - v111;
                }
                else {
                  int v113 = v111;
                }
                goto LABEL_165;
              }
            }
LABEL_164:
            int v112 = v111 + v1059;
            int v113 = v316 + v1059;
LABEL_165:
            unsigned int v114 = &a2[v107 * v104];
            int *v114 = v112;
            v114[1] = v113;
            int v103 = *((_DWORD *)this + 959);
            goto LABEL_166;
          }
        }
        else
        {
          int v106 = v1069[0];
          if (v312) {
            goto LABEL_424;
          }
        }
        int v110 = v111;
        if (v305 >= 0) {
          int v111 = v320;
        }
        else {
          int v111 = -v320;
        }
        a2 = v1065;
        uint64_t v104 = v1066;
        int v108 = v1050;
        if (v110 < 0) {
          goto LABEL_434;
        }
        goto LABEL_164;
      }
      if (v120 != -1 && (!v108 || a3[v119] && a3[v120]))
      {
        int32x2_t v156 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * v106], v109);
        int32x2_t v157 = vabs_s32(vrev64_s32(v156));
        int v158 = v105 - v157.i32[1] - v157.i32[0];
        if (v158 < 0) {
          int32x2_t v156 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v156), (int8x8_t)vsub_s32(v157, v109), (int8x8_t)__PAIR64__(v105 - v157.i32[1], v105 - v157.i32[0]));
        }
        int32x2_t v159 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * (int)v104], v109);
        int32x2_t v160 = vabs_s32(vrev64_s32(v159));
        if ((int)(v105 - v160.i32[1] - v160.i32[0]) < 0) {
          int32x2_t v159 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v159), (int8x8_t)vsub_s32(v160, v109), (int8x8_t)__PAIR64__(v105 - v160.i32[1], v105 - v160.i32[0]));
        }
        unsigned int v161 = *((_DWORD *)this + 683);
        unsigned int v162 = *((_DWORD *)this + 684);
        if (v161 < 0x40000001)
        {
          int v163 = *((_DWORD *)this + 686);
          while (1)
          {
            v162 *= 2;
            *((_DWORD *)this + 686) = --v163;
            if (v163) {
              goto LABEL_223;
            }
            uint64_t v166 = *((void *)this + 340);
            *((void *)this + 340) = v166 + 1;
            unint64_t v167 = *((unsigned int *)this + 676);
            if (v166 + 1 >= v167)
            {
              int v168 = 65280;
              unint64_t v169 = v166 + 2;
              *((void *)this + 340) = v169;
              if (v169 >= v167)
              {
LABEL_229:
                int v164 = 255;
                goto LABEL_222;
              }
            }
            else
            {
              int v168 = *(unsigned __int8 *)(*((void *)this + 339) + v166 + 1) << 8;
              unint64_t v169 = v166 + 2;
              *((void *)this + 340) = v169;
              if (v169 >= v167) {
                goto LABEL_229;
              }
            }
            int v164 = *(unsigned __int8 *)(*((void *)this + 339) + v169);
LABEL_222:
            v162 |= v168 | v164;
            int v163 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_223:
            unsigned int v165 = 2 * v161;
            BOOL v84 = v161 >= 0x20000001;
            v161 *= 2;
            if (v84) {
              goto LABEL_323;
            }
          }
        }
        unsigned int v165 = *((_DWORD *)this + 683);
LABEL_323:
        unsigned int v241 = (HIWORD(v165) * (unsigned __int16)v1039) & 0xFFFF0000;
        unsigned int v242 = v165 - v241;
        if (v162 < v241) {
          unsigned int v243 = 0;
        }
        else {
          unsigned int v243 = (HIWORD(v165) * (unsigned __int16)v1039) & 0xFFFF0000;
        }
        *((_DWORD *)this + 684) = v162 - v243;
        BOOL v244 = v162 >= v241;
        unsigned int v245 = *((unsigned __int16 *)this + ((v1039 >> 7) & 0x1FE | (v162 >= v241)) + 1376) + v1039;
        if (v162 < v241) {
          unsigned int v246 = v241;
        }
        else {
          unsigned int v246 = v242;
        }
        *((_DWORD *)this + 683) = v246;
        unsigned int v1039 = v245;
        if (v244)
        {
          unsigned int v247 = 0;
          uint32x2_t v248 = (uint32x2_t)vsub_s32(v159, (int32x2_t)vmvn_s8((int8x8_t)v156));
          __int32 v249 = v158 + v105 - v160.i32[1] - v160.i32[0];
          double v116 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v248, v248, 0x1FuLL), 1uLL));
          if (v249 + 1 >= 0) {
            int v250 = v249 + 1;
          }
          else {
            int v250 = v249 + 2;
          }
          int v117 = v250 >> 1;
          goto LABEL_394;
        }
LABEL_357:
        int32x2_t v264 = vzip1_s32(v156, *(int32x2_t *)&v116);
        int32x2_t v265 = vzip2_s32(v156, *(int32x2_t *)&v116);
        unsigned int v247 = 0;
        if (v264.i32[0] * (uint64_t)v264.i32[1] + v117 * (uint64_t)v158 + v265.i32[0] * (uint64_t)v265.i32[1] < 0)
        {
          double v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
          int v117 = -v117;
        }
        goto LABEL_394;
      }
      if (v119 != -1 && (!v108 || a3[v119]))
      {
        int32x2_t v156 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * (int)v104], v109);
        int32x2_t v170 = vabs_s32(vrev64_s32(v156));
        int v158 = v105 - v170.i32[1] - v170.i32[0];
        if (v158 < 0) {
          int32x2_t v156 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v156), (int8x8_t)vsub_s32(v170, v109), (int8x8_t)__PAIR64__(v105 - v170.i32[1], v105 - v170.i32[0]));
        }
        unsigned int v171 = *((_DWORD *)this + 683);
        unsigned int v172 = *((_DWORD *)this + 684);
        if (v171 >= 0x40000001)
        {
          unsigned int v175 = *((_DWORD *)this + 683);
LABEL_348:
          unsigned int v258 = (HIWORD(v175) * (unsigned __int16)v1039) & 0xFFFF0000;
          unsigned int v259 = v175 - v258;
          if (v172 < v258) {
            unsigned int v260 = 0;
          }
          else {
            unsigned int v260 = (HIWORD(v175) * (unsigned __int16)v1039) & 0xFFFF0000;
          }
          *((_DWORD *)this + 684) = v172 - v260;
          BOOL v261 = v172 >= v258;
          unsigned int v262 = *((unsigned __int16 *)this + ((v1039 >> 7) & 0x1FE | (v172 >= v258)) + 1376) + v1039;
          if (v172 < v258) {
            unsigned int v263 = v258;
          }
          else {
            unsigned int v263 = v259;
          }
          *((_DWORD *)this + 683) = v263;
          unsigned int v1039 = v262;
          if (v261)
          {
            unsigned int v247 = 0;
            int v117 = v105 - v170.i32[1] - v170.i32[0];
            double v116 = *(double *)&v156;
            goto LABEL_394;
          }
          goto LABEL_357;
        }
        int v173 = *((_DWORD *)this + 686);
        while (1)
        {
          v172 *= 2;
          *((_DWORD *)this + 686) = --v173;
          if (v173) {
            goto LABEL_239;
          }
          uint64_t v176 = *((void *)this + 340);
          *((void *)this + 340) = v176 + 1;
          unint64_t v177 = *((unsigned int *)this + 676);
          if (v176 + 1 >= v177)
          {
            int v178 = 65280;
            unint64_t v179 = v176 + 2;
            *((void *)this + 340) = v179;
            if (v179 >= v177)
            {
LABEL_245:
              int v174 = 255;
              goto LABEL_238;
            }
          }
          else
          {
            int v178 = *(unsigned __int8 *)(*((void *)this + 339) + v176 + 1) << 8;
            unint64_t v179 = v176 + 2;
            *((void *)this + 340) = v179;
            if (v179 >= v177) {
              goto LABEL_245;
            }
          }
          int v174 = *(unsigned __int8 *)(*((void *)this + 339) + v179);
LABEL_238:
          v172 |= v178 | v174;
          int v173 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_239:
          unsigned int v175 = 2 * v171;
          BOOL v84 = v171 >= 0x20000001;
          v171 *= 2;
          if (v84) {
            goto LABEL_348;
          }
        }
      }
      unsigned int v180 = *((_DWORD *)this + 683);
      unsigned int v181 = *((_DWORD *)this + 684);
      if (v180 >= 0x40000001)
      {
        unsigned int v184 = *((_DWORD *)this + 683);
LABEL_336:
        unsigned int v251 = (HIWORD(v184) * (unsigned __int16)v1030) & 0xFFFF0000;
        unsigned int v252 = v184 - v251;
        if (v181 < v251) {
          unsigned int v253 = 0;
        }
        else {
          unsigned int v253 = (HIWORD(v184) * (unsigned __int16)v1030) & 0xFFFF0000;
        }
        unsigned int v254 = v181 - v253;
        double v255 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
        BOOL v256 = v181 >= v251;
        v1030 += *((unsigned __int16 *)this + ((v1030 >> 7) & 0x1FE | (v181 >= v251)) + 1376);
        if (v181 < v251) {
          unsigned int v257 = v251;
        }
        else {
          unsigned int v257 = v252;
        }
        *((_DWORD *)this + 683) = v257;
        *((_DWORD *)this + 684) = v254;
        if (v256) {
          int v117 = -v117;
        }
        unsigned int v247 = 0;
        if (v256) {
          double v116 = v255;
        }
        goto LABEL_394;
      }
      int v182 = *((_DWORD *)this + 686);
      while (1)
      {
        v181 *= 2;
        *((_DWORD *)this + 686) = --v182;
        if (v182) {
          goto LABEL_250;
        }
        uint64_t v185 = *((void *)this + 340);
        *((void *)this + 340) = v185 + 1;
        unint64_t v186 = *((unsigned int *)this + 676);
        if (v185 + 1 >= v186)
        {
          int v187 = 65280;
          unint64_t v188 = v185 + 2;
          *((void *)this + 340) = v188;
          if (v188 >= v186)
          {
LABEL_256:
            int v183 = 255;
            goto LABEL_249;
          }
        }
        else
        {
          int v187 = *(unsigned __int8 *)(*((void *)this + 339) + v185 + 1) << 8;
          unint64_t v188 = v185 + 2;
          *((void *)this + 340) = v188;
          if (v188 >= v186) {
            goto LABEL_256;
          }
        }
        int v183 = *(unsigned __int8 *)(*((void *)this + 339) + v188);
LABEL_249:
        v181 |= v187 | v183;
        int v182 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_250:
        unsigned int v184 = 2 * v180;
        BOOL v84 = v180 >= 0x20000001;
        v180 *= 2;
        if (v84) {
          goto LABEL_336;
        }
      }
    }
LABEL_166:
    ++v107;
  }
  while (v107 < v103);
LABEL_443:
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (*((void *)&v1096 + 1))
  {
    *(void *)&long long v1097 = *((void *)&v1096 + 1);
    operator delete(*((void **)&v1096 + 1));
  }
  if ((void)v1095)
  {
    *((void *)&v1095 + 1) = v1095;
    operator delete((void *)v1095);
  }
  if (*((void *)&v1093 + 1))
  {
    *(void *)&long long v1094 = *((void *)&v1093 + 1);
    operator delete(*((void **)&v1093 + 1));
  }
  if ((void)v1092)
  {
    *((void *)&v1092 + 1) = v1092;
    operator delete((void *)v1092);
  }
  if (*((void *)&v1090 + 1))
  {
    *(void *)&long long v1091 = *((void *)&v1090 + 1);
    operator delete(*((void **)&v1090 + 1));
  }
  if ((void)v1089)
  {
    *((void *)&v1089 + 1) = v1089;
    operator delete((void *)v1089);
  }
  if (*((void *)&v1087 + 1))
  {
    *(void *)&long long v1088 = *((void *)&v1087 + 1);
    operator delete(*((void **)&v1087 + 1));
  }
  if ((void)v1086)
  {
    *((void *)&v1086 + 1) = v1086;
    operator delete((void *)v1086);
  }
  if (*((void *)&v1084 + 1))
  {
    *(void *)&long long v1085 = *((void *)&v1084 + 1);
    operator delete(*((void **)&v1084 + 1));
  }
LABEL_463:
  if ((void)v1083)
  {
    *((void *)&v1083 + 1) = v1083;
    operator delete((void *)v1083);
  }
  if (*((void *)&v1081 + 1))
  {
    *(void *)&long long v1082 = *((void *)&v1081 + 1);
    operator delete(*((void **)&v1081 + 1));
  }
  if (v1080[0])
  {
    v1080[1] = v1080[0];
    operator delete(v1080[0]);
  }
  if (v1078[1])
  {
    *(void **)&long long v1079 = v1078[1];
    operator delete(v1078[1]);
  }
  if ((void)__b)
  {
    *((void *)&__b + 1) = __b;
    operator delete((void *)__b);
  }
  v326 = v1074;
  if (v1074)
  {
    v1075 = v1074;
LABEL_1178:
    operator delete(v326);
  }
}

void sub_1A285C6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  gcl::tmesh::ACContext::~ACContext((gcl::tmesh::ACContext *)&a69);
  gcl::tmesh::ACContext::~ACContext((gcl::tmesh::ACContext *)&a54);
  gcl::tmesh::ACContext::~ACContext((gcl::tmesh::ACContext *)&a39);
  _Unwind_Resume(a1);
}

void gcl::tmesh::EstimateQuantizedNormals(uint64_t *a1, void *a2, uint64_t a3, signed int a4)
{
  uint64_t v7 = (a1[1] - *a1) / 12;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = *(float **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  uint64_t v11 = v7 << 32;
  if (!(v7 << 32))
  {
    unsigned int v18 = 0;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
    if ((int)v19 < 1) {
      goto LABEL_81;
    }
    goto LABEL_16;
  }
  size_t v12 = (int)v7;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - (void)v10) >> 2);
  int v116 = v7;
  if (v13 >= (int)v7)
  {
    bzero(v10, 12 * ((12 * (int)v7 - 12) / 0xCuLL) + 12);
    *(void *)(a3 + 8) = &v10[3 * (int)v7];
    if (v11 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    if (v11 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*(void *)(a3 + 16) - (void)v10) >> 2);
    if (v14 <= (int)v7) {
      unint64_t v14 = (int)v7;
    }
    if (v13 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x1555555555555555;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15 > 0x1555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v16 = 12 * v15;
    BOOL v17 = (char *)operator new(12 * v15);
    bzero(v17, 12 * ((12 * v12 - 12) / 0xC) + 12);
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = &v17[12 * v12];
    *(void *)(a3 + 16) = &v17[v16];
    if (v10) {
      operator delete(v10);
    }
  }
  unsigned int v18 = operator new(v12);
  bzero(v18, v12);
  LODWORD(v7) = v116;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
  if ((int)v19 >= 1)
  {
LABEL_16:
    unint64_t v19 = v19;
    uint64_t v20 = *a1;
    uint64_t v21 = (int *)(*a2 + 8);
    uint64_t v22 = *(float **)a3;
    do
    {
      uint64_t v24 = *(v21 - 2);
      BOOL v25 = (int *)(v20 + 12 * v24);
      BOOL v26 = (int *)(v20 + 12 * *(v21 - 1));
      int v27 = (int *)(v20 + 12 * *v21);
      uint64_t v28 = *v25;
      uint64_t v29 = v25[1];
      uint64_t v30 = *v26 - v28;
      uint64_t v31 = *v27 - v28;
      uint64_t v32 = v26[1] - v29;
      uint64_t v33 = v25[2];
      uint64_t v34 = v26[2] - v33;
      uint64_t v35 = v27[1] - v29;
      uint64_t v36 = v27[2] - v33;
      uint64_t v37 = v36 * v32 - v35 * v34;
      uint64_t v38 = v31 * v34 - v36 * v30;
      uint64_t v39 = v35 * v30 - v31 * v32;
      uint64_t v40 = &v22[3 * v24];
      char v41 = *((unsigned char *)v18 + v24);
      if (v41)
      {
        uint64_t v42 = 1 << (v41 - 1);
        uint64_t v43 = (v42 + v37) >> v41;
        if (v37 < 0) {
          uint64_t v43 = -((v42 - v37) >> v41);
        }
        if (v38 < 0) {
          uint64_t v44 = -((v42 - v38) >> v41);
        }
        else {
          uint64_t v44 = (v42 + v38) >> v41;
        }
        uint64_t v45 = v44 + *((int *)v40 + 1);
        uint64_t v46 = (v42 - v39) >> v41;
        uint64_t v47 = (v42 + v39) >> v41;
        if (v39 < 0) {
          uint64_t v47 = -v46;
        }
        uint64_t v48 = v47 + *((int *)v40 + 2);
      }
      else
      {
        uint64_t v45 = v38 + *((int *)v40 + 1);
        uint64_t v48 = v39 + *((int *)v40 + 2);
        uint64_t v43 = v37;
      }
      uint64_t v49 = v43 + *(int *)v40;
      unint64_t v50 = (uint64_t)fmax(fmax(fabs((double)v49), fabs((double)v45)), fabs((double)v48)) + 1;
      if (v50 >> 30)
      {
        char v51 = __clz(v50);
        char v52 = 34 - v51;
        *((unsigned char *)v18 + v24) = v41 + 34 - v51;
        uint64_t v53 = 1 << (33 - v51);
        unint64_t v54 = (unint64_t)(v53 - v49) >> (34 - v51);
        unint64_t v55 = (unint64_t)(v53 + v49) >> (34 - v51);
        if (v49 < 0) {
          uint64_t v49 = -(uint64_t)v54;
        }
        else {
          LODWORD(v49) = v55;
        }
        if (v45 < 0) {
          uint64_t v45 = -(uint64_t)((unint64_t)(v53 - v45) >> v52);
        }
        else {
          uint64_t v45 = (unint64_t)(v53 + v45) >> v52;
        }
        unint64_t v56 = (unint64_t)(v53 - v48) >> v52;
        unint64_t v57 = (unint64_t)(v53 + v48) >> v52;
        if (v48 < 0) {
          uint64_t v48 = -(uint64_t)v56;
        }
        else {
          LODWORD(v48) = v57;
        }
      }
      *(_DWORD *)uint64_t v40 = v49;
      *((_DWORD *)v40 + 1) = v45;
      *((_DWORD *)v40 + 2) = v48;
      uint64_t v58 = *(v21 - 1);
      int v59 = &v22[3 * (int)v58];
      char v60 = *((unsigned char *)v18 + v58);
      if (v60)
      {
        uint64_t v61 = 1 << (v60 - 1);
        if (v37 < 0) {
          uint64_t v62 = -((v61 - v37) >> v60);
        }
        else {
          uint64_t v62 = (v61 + v37) >> v60;
        }
        uint64_t v63 = (v61 + v38) >> v60;
        if (v38 < 0) {
          uint64_t v63 = -((v61 - v38) >> v60);
        }
        uint64_t v64 = v63 + *((int *)v59 + 1);
        uint64_t v65 = (v61 + v39) >> v60;
        uint64_t v66 = (v61 - v39) >> v60;
        if (v39 < 0) {
          uint64_t v67 = -v66;
        }
        else {
          uint64_t v67 = v65;
        }
        uint64_t v68 = v67 + *((int *)v59 + 2);
      }
      else
      {
        uint64_t v64 = v38 + *((int *)v59 + 1);
        uint64_t v68 = v39 + *((int *)v59 + 2);
        uint64_t v62 = v37;
      }
      uint64_t v69 = v62 + *(int *)v59;
      unint64_t v70 = (uint64_t)fmax(fmax(fabs((double)v69), fabs((double)v64)), fabs((double)v68)) + 1;
      if (v70 >> 30)
      {
        char v71 = __clz(v70);
        char v72 = 34 - v71;
        *((unsigned char *)v18 + v58) = v60 + 34 - v71;
        uint64_t v73 = 1 << (33 - v71);
        unint64_t v74 = (unint64_t)(v73 + v69) >> (34 - v71);
        unint64_t v75 = (unint64_t)(v73 - v69) >> (34 - v71);
        if (v69 < 0) {
          uint64_t v69 = -(uint64_t)v75;
        }
        else {
          LODWORD(v69) = v74;
        }
        if (v64 < 0) {
          uint64_t v64 = -(uint64_t)((unint64_t)(v73 - v64) >> v72);
        }
        else {
          uint64_t v64 = (unint64_t)(v73 + v64) >> v72;
        }
        unint64_t v76 = (unint64_t)(v73 + v68) >> v72;
        unint64_t v77 = (unint64_t)(v73 - v68) >> v72;
        if (v68 < 0) {
          uint64_t v68 = -(uint64_t)v77;
        }
        else {
          LODWORD(v68) = v76;
        }
      }
      *(_DWORD *)int v59 = v69;
      *((_DWORD *)v59 + 1) = v64;
      *((_DWORD *)v59 + 2) = v68;
      uint64_t v78 = *v21;
      unint64_t v79 = &v22[3 * (int)v78];
      char v80 = *((unsigned char *)v18 + v78);
      if (v80)
      {
        uint64_t v81 = 1 << (v80 - 1);
        if (v37 < 0) {
          uint64_t v37 = -((v81 - v37) >> v80);
        }
        else {
          uint64_t v37 = (v81 + v37) >> v80;
        }
        if (v38 < 0) {
          uint64_t v82 = -((v81 - v38) >> v80);
        }
        else {
          uint64_t v82 = (v81 + v38) >> v80;
        }
        uint64_t v83 = v82 + *((int *)v79 + 1);
        uint64_t v84 = (v81 + v39) >> v80;
        uint64_t v85 = (v81 - v39) >> v80;
        if (v39 < 0) {
          uint64_t v86 = -v85;
        }
        else {
          uint64_t v86 = v84;
        }
        uint64_t v23 = v86 + *((int *)v79 + 2);
      }
      else
      {
        uint64_t v83 = v38 + *((int *)v79 + 1);
        uint64_t v23 = v39 + *((int *)v79 + 2);
      }
      uint64_t v87 = v37 + *(int *)v79;
      unint64_t v88 = (uint64_t)fmax(fmax(fabs((double)v87), fabs((double)v83)), fabs((double)v23)) + 1;
      if (v88 >> 30)
      {
        char v89 = __clz(v88);
        char v90 = 34 - v89;
        *((unsigned char *)v18 + v78) = v80 + 34 - v89;
        uint64_t v91 = 1 << (33 - v89);
        unint64_t v92 = (unint64_t)(v91 + v87) >> (34 - v89);
        unint64_t v93 = (unint64_t)(v91 - v87) >> (34 - v89);
        if (v87 < 0) {
          uint64_t v87 = -(uint64_t)v93;
        }
        else {
          LODWORD(v87) = v92;
        }
        if (v83 < 0) {
          uint64_t v83 = -(uint64_t)((unint64_t)(v91 - v83) >> v90);
        }
        else {
          uint64_t v83 = (unint64_t)(v91 + v83) >> v90;
        }
        if (v23 < 0) {
          uint64_t v23 = -(uint64_t)((unint64_t)(v91 - v23) >> v90);
        }
        else {
          uint64_t v23 = (unint64_t)(v91 + v23) >> v90;
        }
      }
      *(_DWORD *)unint64_t v79 = v87;
      *((_DWORD *)v79 + 1) = v83;
      v21 += 3;
      *((_DWORD *)v79 + 2) = v23;
      --v19;
    }
    while (v19);
  }
LABEL_81:
  if ((int)v7 < 1) {
    goto LABEL_113;
  }
  int v94 = *(float **)a3;
  if (v7 >= 2uLL)
  {
    unint64_t v95 = v7 - (unint64_t)(v7 & 1);
    int8x8_t v96 = (int8x8_t)vdup_n_s32(a4);
    unint64_t v97 = v95;
    int v98 = *(float **)a3;
    while (1)
    {
      float32x2x3_t v119 = vld3_f32(v98);
      v99.i64[0] = v119.val[0].i32[0];
      v99.i64[1] = v119.val[0].i32[1];
      int64x2_t v100 = v99;
      v99.i64[0] = v119.val[1].i32[0];
      v99.i64[1] = v119.val[1].i32[1];
      int64x2_t v101 = v99;
      v99.i64[0] = v119.val[2].i32[0];
      v99.i64[1] = v119.val[2].i32[1];
      int64x2_t v102 = v99;
      int64x2_t v103 = vabsq_s64(v99);
      int64x2_t v104 = vaddq_s64(vaddq_s64(vabsq_s64(v101), vabsq_s64(v100)), v103);
      int8x8_t v105 = (int8x8_t)vmovn_s64(vtstq_s64(v104, v104));
      if (v105.i8[0])
      {
        v103.i64[0] = v100.i32[0] * (uint64_t)a4 / v104.i64[0];
        uint64_t v106 = v104.i64[1];
        if ((v105.i8[4] & 1) == 0)
        {
LABEL_88:
          if ((v105.i8[0] & 1) == 0) {
            goto LABEL_89;
          }
          goto LABEL_95;
        }
      }
      else
      {
        uint64_t v106 = v104.i64[1];
        if ((v105.i8[4] & 1) == 0) {
          goto LABEL_88;
        }
      }
      v103.i64[1] = v100.i32[2] * (uint64_t)a4 / v106;
      if ((v105.i8[0] & 1) == 0)
      {
LABEL_89:
        if ((v105.i8[4] & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_96;
      }
LABEL_95:
      v100.i64[0] = v101.i32[0] * (uint64_t)a4 / v104.i64[0];
      if ((v105.i8[4] & 1) == 0)
      {
LABEL_90:
        if ((v105.i8[0] & 1) == 0) {
          goto LABEL_91;
        }
        goto LABEL_97;
      }
LABEL_96:
      v100.i64[1] = v101.i32[2] * (uint64_t)a4 / v106;
      if ((v105.i8[0] & 1) == 0)
      {
LABEL_91:
        if (v105.i8[4]) {
          goto LABEL_98;
        }
        goto LABEL_85;
      }
LABEL_97:
      v101.i64[0] = v102.i32[0] * (uint64_t)a4 / v104.i64[0];
      if (v105.i8[4]) {
LABEL_98:
      }
        v101.i64[1] = v102.i32[2] * (uint64_t)a4 / v106;
LABEL_85:
      v120.val[0] = (float32x2_t)vand_s8((int8x8_t)vmovn_s64(v103), v105);
      v120.val[1] = (float32x2_t)vand_s8((int8x8_t)vmovn_s64(v100), v105);
      v120.val[2] = (float32x2_t)vorr_s8((int8x8_t)vmovn_s64((int64x2_t)vbicq_s8((int8x16_t)v101, (int8x16_t)vceqzq_s64(v104))), vbic_s8(v96, v105));
      vst3_f32(v98, v120);
      v98 += 6;
      v97 -= 2;
      if (!v97)
      {
        if (v7) {
          goto LABEL_100;
        }
        goto LABEL_113;
      }
    }
  }
  unint64_t v95 = 0;
LABEL_100:
  unint64_t v107 = v7 - v95;
  int v108 = (signed int *)&v94[3 * v95 + 2];
  do
  {
    while (1)
    {
      uint64_t v110 = *(v108 - 2);
      uint64_t v109 = *(v108 - 1);
      uint64_t v111 = *v108;
      uint64_t v112 = v110 >= 0 ? *(v108 - 2) : -v110;
      uint64_t v113 = v109 >= 0 ? *(v108 - 1) : -v109;
      uint64_t v114 = v111 >= 0 ? *v108 : -v111;
      uint64_t v115 = v113 + v112 + v114;
      if (!v115) {
        break;
      }
      *(v108 - 2) = (int)v110 * (uint64_t)a4 / v115;
      *(v108 - 1) = (int)v109 * (uint64_t)a4 / v115;
      signed int *v108 = (int)v111 * (uint64_t)a4 / v115;
      v108 += 3;
      if (!--v107) {
        goto LABEL_113;
      }
    }
    *(v108 - 2) = 0;
    *(v108 - 1) = 0;
    signed int *v108 = a4;
    v108 += 3;
    --v107;
  }
  while (v107);
LABEL_113:
  if (v18)
  {
    operator delete(v18);
  }
}

void gcl::tmesh::ACContext::init(std::vector<int> *this, int a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = ((char *)this->__end_ - (char *)this->__begin_) >> 1;
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)this, v6);
  }
  else if (!v5)
  {
    this->__end_ = (std::vector<int>::pointer)((char *)this->__begin_ + 2 * v3);
  }
  std::vector<int>::pointer begin = this[1].__begin_;
  unint64_t v8 = ((char *)this[1].__end_ - (char *)begin) >> 1;
  if (v3 <= v8)
  {
    if (v3 < v8) {
      this[1].__end_ = (std::vector<int>::pointer)((char *)begin + 2 * v3);
    }
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[1], v3 - v8);
  }
  std::vector<int>::pointer v9 = this[2].__begin_;
  unint64_t v10 = ((char *)this[2].__end_ - (char *)v9) >> 1;
  if (v3 << 6 <= v10)
  {
    if (v3 << 6 < v10) {
      this[2].__end_ = &v9[32 * v3];
    }
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[2], (v3 << 6) - v10);
  }
  std::vector<int>::pointer v11 = this[3].__begin_;
  unint64_t v12 = ((char *)this[3].__end_ - (char *)v11) >> 1;
  if (v3 <= v12)
  {
    if (v3 < v12) {
      this[3].__end_ = (std::vector<int>::pointer)((char *)v11 + 2 * v3);
    }
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[3], v3 - v12);
  }
  std::vector<int>::pointer v13 = this[4].__begin_;
  std::vector<int>::pointer end = this[4].__end_;
  unint64_t v15 = end - v13;
  if (v3 <= v15)
  {
    if (v3 < v15)
    {
      std::vector<int>::pointer end = &v13[v3];
      this[4].__end_ = end;
    }
  }
  else
  {
    std::vector<int>::__append(this + 4, v3 - v15);
    std::vector<int>::pointer v13 = this[4].__begin_;
    std::vector<int>::pointer end = this[4].__end_;
  }
  if ((char *)end - (char *)v13 >= 1) {
    memset_pattern16(v13, &unk_1A29CE9F0, 4 * (((unint64_t)((char *)end - (char *)v13) >> 2) - ((unint64_t)((char *)end - (char *)v13) > 3))+ 4);
  }
  uint64_t v16 = this->__end_;
  if (this->__begin_ != v16) {
    memset_pattern16(this->__begin_, &memset_pattern_27, ((char *)v16 - (char *)this->__begin_) & 0xFFFFFFFFFFFFFFFELL);
  }
  std::vector<int>::pointer v17 = this[1].__begin_;
  std::vector<int>::pointer v18 = this[1].__end_;
  if (v17 != v18) {
    memset_pattern16(v17, &memset_pattern_27, ((char *)v18 - (char *)v17) & 0xFFFFFFFFFFFFFFFELL);
  }
  std::vector<int>::pointer v19 = this[2].__begin_;
  std::vector<int>::pointer v20 = this[2].__end_;
  if (v19 != v20) {
    memset_pattern16(v19, &memset_pattern_27, ((char *)v20 - (char *)v19) & 0xFFFFFFFFFFFFFFFELL);
  }
  std::vector<int>::pointer v21 = this[3].__begin_;
  std::vector<int>::pointer v22 = this[3].__end_;
  if (v21 != v22)
  {
    memset_pattern16(v21, &memset_pattern_27, ((char *)v22 - (char *)v21) & 0xFFFFFFFFFFFFFFFELL);
  }
}

void gcl::tmesh::DecoderImpl::decodeResidual(uint64_t a1, int32x4_t *a2, uint64_t a3, unsigned int a4, uint64_t *a5, int32x4_t *a6)
{
  uint64_t v8 = a3;
  if (!a3)
  {
    unint64_t v10 = 0;
    goto LABEL_6;
  }
  if ((a3 & 0x80000000) != 0) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = (int32x4_t *)operator new(4 * (int)a3);
  bzero(v10, 4 * (int)v8);
  if (a4 <= 4)
  {
LABEL_6:
    unsigned int v308 = v10;
    switch(a4)
    {
      case 0u:
        if (!v8) {
          goto LABEL_356;
        }
        uint64_t v11 = 0;
        while (1)
        {
          uint64_t v13 = *a5;
          unsigned int v14 = *(unsigned __int16 *)(*a5 + 2 * v11);
          unsigned int v15 = *(_DWORD *)(a1 + 2732);
          unsigned int v16 = *(_DWORD *)(a1 + 2736);
          if (v15 < 0x40000001)
          {
            int v17 = *(_DWORD *)(a1 + 2744);
            while (1)
            {
              v16 *= 2;
              *(_DWORD *)(a1 + 2744) = --v17;
              if (v17) {
                goto LABEL_17;
              }
              uint64_t v20 = *(void *)(a1 + 2720);
              *(void *)(a1 + 2720) = v20 + 1;
              unint64_t v21 = *(unsigned int *)(a1 + 2704);
              if (v20 + 1 >= v21)
              {
                int v22 = 65280;
                unint64_t v23 = v20 + 2;
                *(void *)(a1 + 2720) = v23;
                if (v23 >= v21)
                {
LABEL_23:
                  int v18 = 255;
                  goto LABEL_16;
                }
              }
              else
              {
                int v22 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v20 + 1) << 8;
                unint64_t v23 = v20 + 2;
                *(void *)(a1 + 2720) = v23;
                if (v23 >= v21) {
                  goto LABEL_23;
                }
              }
              int v18 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v23);
LABEL_16:
              v16 |= v22 | v18;
              int v17 = 16;
              *(_DWORD *)(a1 + 2744) = 16;
LABEL_17:
              unsigned int v19 = 2 * v15;
              BOOL v27 = v15 >= 0x20000001;
              v15 *= 2;
              if (v27) {
                goto LABEL_25;
              }
            }
          }
          unsigned int v19 = *(_DWORD *)(a1 + 2732);
LABEL_25:
          int v12 = 0;
          unsigned int v24 = (HIWORD(v19) * v14) & 0xFFFF0000;
          unsigned int v25 = v16 < v24 ? 0 : (HIWORD(v19) * v14) & 0xFFFF0000;
          unsigned int v26 = v16 - v25;
          BOOL v27 = v16 >= v24;
          unsigned int v28 = (v14 >> 7) & 0x1FE | (v16 >= v24);
          unsigned int v29 = v19 - v24;
          *(_WORD *)(v13 + 2 * v11) = *(_WORD *)(a1 + 2 * v28 + 2752) + v14;
          unsigned int v30 = v27 ? v19 - v24 : (HIWORD(v19) * v14) & 0xFFFF0000;
          *(_DWORD *)(a1 + 2732) = v30;
          *(_DWORD *)(a1 + 2736) = v26;
          if (v27) {
            break;
          }
LABEL_12:
          v10->i32[v11++] = v12;
          if (v11 == v8) {
            goto LABEL_349;
          }
        }
        uint64_t v31 = a5[3];
        unsigned int v32 = *(unsigned __int16 *)(v31 + 2 * v11);
        if (v29 < 0x40000001)
        {
          int v33 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v26 *= 2;
            *(_DWORD *)(a1 + 2744) = --v33;
            if (v33) {
              goto LABEL_37;
            }
            uint64_t v36 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v36 + 1;
            unint64_t v37 = *(unsigned int *)(a1 + 2704);
            if (v36 + 1 >= v37)
            {
              int v38 = 65280;
              unint64_t v39 = v36 + 2;
              *(void *)(a1 + 2720) = v39;
              if (v39 >= v37)
              {
LABEL_43:
                int v34 = 255;
                goto LABEL_36;
              }
            }
            else
            {
              int v38 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v36 + 1) << 8;
              unint64_t v39 = v36 + 2;
              *(void *)(a1 + 2720) = v39;
              if (v39 >= v37) {
                goto LABEL_43;
              }
            }
            int v34 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v39);
LABEL_36:
            v26 |= v38 | v34;
            int v33 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_37:
            unsigned int v35 = 2 * v29;
            BOOL v27 = v29 >= 0x20000001;
            v29 *= 2;
            if (v27) {
              goto LABEL_45;
            }
          }
        }
        unsigned int v35 = v19 - v24;
LABEL_45:
        unsigned int v40 = (HIWORD(v35) * v32) & 0xFFFF0000;
        *(_WORD *)(v31 + 2 * v11) = *(_WORD *)(a1 + 2 * ((v32 >> 7) & 0x1FE | (v26 >= v40)) + 2752) + v32;
        if (v26 < v40) {
          unsigned int v41 = (HIWORD(v35) * v32) & 0xFFFF0000;
        }
        else {
          unsigned int v41 = v35 - v40;
        }
        if (v26 < v40) {
          unsigned int v42 = 0;
        }
        else {
          unsigned int v42 = v40;
        }
        unsigned int v43 = v26 - v42;
        *(_DWORD *)(a1 + 2732) = v41;
        *(_DWORD *)(a1 + 2736) = v26 - v42;
        uint64_t v44 = (_WORD *)(a5[6] + 2 * (int)(v11 << 6));
        unsigned int v45 = (unsigned __int16)*v44;
        if (v41 < 0x40000001)
        {
          int v46 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v43 *= 2;
            *(_DWORD *)(a1 + 2744) = --v46;
            if (v46) {
              goto LABEL_55;
            }
            uint64_t v49 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v49 + 1;
            unint64_t v50 = *(unsigned int *)(a1 + 2704);
            if (v49 + 1 >= v50)
            {
              int v51 = 65280;
              unint64_t v52 = v49 + 2;
              *(void *)(a1 + 2720) = v52;
              if (v52 >= v50)
              {
LABEL_61:
                int v47 = 255;
                goto LABEL_54;
              }
            }
            else
            {
              int v51 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v49 + 1) << 8;
              unint64_t v52 = v49 + 2;
              *(void *)(a1 + 2720) = v52;
              if (v52 >= v50) {
                goto LABEL_61;
              }
            }
            int v47 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v52);
LABEL_54:
            v43 |= v51 | v47;
            int v46 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_55:
            unsigned int v48 = 2 * v41;
            BOOL v27 = v41 >= 0x20000001;
            v41 *= 2;
            if (v27) {
              goto LABEL_63;
            }
          }
        }
        unsigned int v48 = v41;
LABEL_63:
        unsigned int v53 = (HIWORD(v48) * v45) & 0xFFFF0000;
        unsigned int v54 = v48 - v53;
        BOOL v55 = v43 >= v53;
        *uint64_t v44 = *(_WORD *)(a1 + 2 * ((v45 >> 7) & 0x1FE | v55) + 2752) + v45;
        if (v43 >= v53)
        {
          uint64_t v56 = 2;
        }
        else
        {
          unsigned int v54 = v53;
          unsigned int v53 = 0;
          uint64_t v56 = 1;
        }
        unsigned int v57 = v43 - v53;
        *(_DWORD *)(a1 + 2732) = v54;
        *(_DWORD *)(a1 + 2736) = v57;
        unsigned int v58 = (unsigned __int16)v44[v56];
        if (v54 < 0x40000001)
        {
          int v59 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v57 *= 2;
            *(_DWORD *)(a1 + 2744) = --v59;
            if (v59) {
              goto LABEL_70;
            }
            uint64_t v62 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v62 + 1;
            unint64_t v63 = *(unsigned int *)(a1 + 2704);
            if (v62 + 1 >= v63)
            {
              int v64 = 65280;
              unint64_t v65 = v62 + 2;
              *(void *)(a1 + 2720) = v65;
              if (v65 >= v63)
              {
LABEL_76:
                int v60 = 255;
                goto LABEL_69;
              }
            }
            else
            {
              int v64 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v62 + 1) << 8;
              unint64_t v65 = v62 + 2;
              *(void *)(a1 + 2720) = v65;
              if (v65 >= v63) {
                goto LABEL_76;
              }
            }
            int v60 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v65);
LABEL_69:
            v57 |= v64 | v60;
            int v59 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_70:
            unsigned int v61 = 2 * v54;
            BOOL v27 = v54 >= 0x20000001;
            v54 *= 2;
            if (v27) {
              goto LABEL_78;
            }
          }
        }
        unsigned int v61 = v54;
LABEL_78:
        unsigned int v66 = (HIWORD(v61) * v58) & 0xFFFF0000;
        unsigned int v67 = v61 - v66;
        BOOL v68 = v57 >= v66;
        v44[v56] = *(_WORD *)(a1 + 2 * ((v58 >> 7) & 0x1FE | v68) + 2752) + v58;
        if (v57 < v66) {
          unsigned int v69 = v66;
        }
        else {
          unsigned int v69 = v67;
        }
        if (v57 < v66) {
          unsigned int v70 = 0;
        }
        else {
          unsigned int v70 = v66;
        }
        unsigned int v71 = v57 - v70;
        *(_DWORD *)(a1 + 2732) = v69;
        *(_DWORD *)(a1 + 2736) = v71;
        int v72 = v55 | (2 * v68);
        uint64_t v73 = (v72 + 3);
        unsigned int v74 = (unsigned __int16)v44[v73];
        if (v69 < 0x40000001)
        {
          int v75 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v71 *= 2;
            *(_DWORD *)(a1 + 2744) = --v75;
            if (v75) {
              goto LABEL_88;
            }
            uint64_t v78 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v78 + 1;
            unint64_t v79 = *(unsigned int *)(a1 + 2704);
            if (v78 + 1 >= v79)
            {
              int v80 = 65280;
              unint64_t v81 = v78 + 2;
              *(void *)(a1 + 2720) = v81;
              if (v81 >= v79)
              {
LABEL_94:
                int v76 = 255;
                goto LABEL_87;
              }
            }
            else
            {
              int v80 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v78 + 1) << 8;
              unint64_t v81 = v78 + 2;
              *(void *)(a1 + 2720) = v81;
              if (v81 >= v79) {
                goto LABEL_94;
              }
            }
            int v76 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v81);
LABEL_87:
            v71 |= v80 | v76;
            int v75 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_88:
            unsigned int v77 = 2 * v69;
            BOOL v27 = v69 >= 0x20000001;
            v69 *= 2;
            if (v27) {
              goto LABEL_96;
            }
          }
        }
        unsigned int v77 = v69;
LABEL_96:
        unsigned int v82 = (HIWORD(v77) * v74) & 0xFFFF0000;
        unsigned int v83 = v77 - v82;
        BOOL v84 = v71 >= v82;
        v44[v73] = *(_WORD *)(a1 + 2 * ((v74 >> 7) & 0x1FE | v84) + 2752) + v74;
        if (v71 < v82) {
          unsigned int v85 = v82;
        }
        else {
          unsigned int v85 = v83;
        }
        if (v71 < v82) {
          unsigned int v86 = 0;
        }
        else {
          unsigned int v86 = v82;
        }
        unsigned int v87 = v71 - v86;
        *(_DWORD *)(a1 + 2732) = v85;
        *(_DWORD *)(a1 + 2736) = v87;
        int v88 = v72 | (4 * v84);
        uint64_t v89 = (v88 + 7);
        unsigned int v90 = (unsigned __int16)v44[v89];
        if (v85 < 0x40000001)
        {
          int v91 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v87 *= 2;
            *(_DWORD *)(a1 + 2744) = --v91;
            if (v91) {
              goto LABEL_106;
            }
            uint64_t v94 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v94 + 1;
            unint64_t v95 = *(unsigned int *)(a1 + 2704);
            if (v94 + 1 >= v95)
            {
              int v96 = 65280;
              unint64_t v97 = v94 + 2;
              *(void *)(a1 + 2720) = v97;
              if (v97 >= v95)
              {
LABEL_112:
                int v92 = 255;
                goto LABEL_105;
              }
            }
            else
            {
              int v96 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v94 + 1) << 8;
              unint64_t v97 = v94 + 2;
              *(void *)(a1 + 2720) = v97;
              if (v97 >= v95) {
                goto LABEL_112;
              }
            }
            int v92 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v97);
LABEL_105:
            v87 |= v96 | v92;
            int v91 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_106:
            unsigned int v93 = 2 * v85;
            BOOL v27 = v85 >= 0x20000001;
            v85 *= 2;
            if (v27) {
              goto LABEL_114;
            }
          }
        }
        unsigned int v93 = v85;
LABEL_114:
        unsigned int v98 = (HIWORD(v93) * v90) & 0xFFFF0000;
        unsigned int v99 = v93 - v98;
        BOOL v100 = v87 >= v98;
        v44[v89] = *(_WORD *)(a1 + 2 * ((v90 >> 7) & 0x1FE | v100) + 2752) + v90;
        if (v87 < v98) {
          unsigned int v101 = v98;
        }
        else {
          unsigned int v101 = v99;
        }
        if (v87 < v98) {
          unsigned int v102 = 0;
        }
        else {
          unsigned int v102 = v98;
        }
        unsigned int v103 = v87 - v102;
        *(_DWORD *)(a1 + 2732) = v101;
        *(_DWORD *)(a1 + 2736) = v103;
        int v104 = v88 | (8 * v100);
        uint64_t v105 = (v104 + 15);
        unsigned int v106 = (unsigned __int16)v44[v105];
        if (v101 < 0x40000001)
        {
          int v107 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v103 *= 2;
            *(_DWORD *)(a1 + 2744) = --v107;
            if (v107) {
              goto LABEL_124;
            }
            uint64_t v110 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v110 + 1;
            unint64_t v111 = *(unsigned int *)(a1 + 2704);
            if (v110 + 1 >= v111)
            {
              int v112 = 65280;
              unint64_t v113 = v110 + 2;
              *(void *)(a1 + 2720) = v113;
              if (v113 >= v111)
              {
LABEL_130:
                int v108 = 255;
                goto LABEL_123;
              }
            }
            else
            {
              int v112 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v110 + 1) << 8;
              unint64_t v113 = v110 + 2;
              *(void *)(a1 + 2720) = v113;
              if (v113 >= v111) {
                goto LABEL_130;
              }
            }
            int v108 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v113);
LABEL_123:
            v103 |= v112 | v108;
            int v107 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_124:
            unsigned int v109 = 2 * v101;
            BOOL v27 = v101 >= 0x20000001;
            v101 *= 2;
            if (v27) {
              goto LABEL_132;
            }
          }
        }
        unsigned int v109 = v101;
LABEL_132:
        unsigned int v114 = (HIWORD(v109) * v106) & 0xFFFF0000;
        unsigned int v115 = v109 - v114;
        BOOL v116 = v103 >= v114;
        v44[v105] = *(_WORD *)(a1 + 2 * ((v106 >> 7) & 0x1FE | v116) + 2752) + v106;
        if (v103 < v114) {
          unsigned int v117 = v114;
        }
        else {
          unsigned int v117 = v115;
        }
        if (v103 < v114) {
          unsigned int v118 = 0;
        }
        else {
          unsigned int v118 = v114;
        }
        unsigned int v119 = v103 - v118;
        *(_DWORD *)(a1 + 2732) = v117;
        *(_DWORD *)(a1 + 2736) = v119;
        int v120 = v104 | (16 * v116);
        uint64_t v121 = (v120 + 31);
        unsigned int v122 = (unsigned __int16)v44[v121];
        if (v117 >= 0x40000001)
        {
          unsigned int v125 = v117;
LABEL_150:
          unsigned int v130 = (HIWORD(v125) * v122) & 0xFFFF0000;
          unsigned int v131 = v125 - v130;
          BOOL v132 = v119 >= v130;
          v44[v121] = *(_WORD *)(a1 + 2 * ((v122 >> 7) & 0x1FE | v132) + 2752) + v122;
          if (v119 < v130) {
            unsigned int v133 = v130;
          }
          else {
            unsigned int v133 = v131;
          }
          if (v119 < v130) {
            unsigned int v134 = 0;
          }
          else {
            unsigned int v134 = v130;
          }
          *(_DWORD *)(a1 + 2732) = v133;
          *(_DWORD *)(a1 + 2736) = v119 - v134;
          int v135 = v120 | (32 * v132);
          if (v135 == 63) {
            int v135 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 2704), *(_DWORD *)(a5[12] + 4 * v11), (_WORD *)(a5[9] + 2 * v11))+ 63;
          }
          if (v26 >= v40) {
            int v12 = v135 + 1;
          }
          else {
            int v12 = ~v135;
          }
          goto LABEL_12;
        }
        int v123 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v119 *= 2;
          *(_DWORD *)(a1 + 2744) = --v123;
          if (v123) {
            goto LABEL_142;
          }
          uint64_t v126 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v126 + 1;
          unint64_t v127 = *(unsigned int *)(a1 + 2704);
          if (v126 + 1 >= v127)
          {
            int v128 = 65280;
            unint64_t v129 = v126 + 2;
            *(void *)(a1 + 2720) = v129;
            if (v129 >= v127)
            {
LABEL_148:
              int v124 = 255;
              goto LABEL_141;
            }
          }
          else
          {
            int v128 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v126 + 1) << 8;
            unint64_t v129 = v126 + 2;
            *(void *)(a1 + 2720) = v129;
            if (v129 >= v127) {
              goto LABEL_148;
            }
          }
          int v124 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v129);
LABEL_141:
          v119 |= v128 | v124;
          int v123 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_142:
          unsigned int v125 = 2 * v117;
          BOOL v27 = v117 >= 0x20000001;
          v117 *= 2;
          if (v27) {
            goto LABEL_150;
          }
        }
      case 2u:
        if (!v8) {
          goto LABEL_356;
        }
        unint64_t v152 = 0;
        uint64_t v153 = 0;
        int v154 = (unsigned int *)(a1 + 2704);
        while (1)
        {
          uint64_t v156 = a5[12];
          int v157 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v154, *(_DWORD *)(v156 + v152), (_WORD *)(a5[3] + v153), (_WORD *)(a5[9] + v153));
          if (v157 >= 0) {
            unsigned int v158 = v157;
          }
          else {
            unsigned int v158 = -v157;
          }
          int v159 = *(_DWORD *)(v156 + v152);
          unsigned int v160 = v158 >> v159;
          if (v159) {
            BOOL v161 = v160 == 0;
          }
          else {
            BOOL v161 = 0;
          }
          if (v161)
          {
            int v155 = -1;
          }
          else
          {
            if (v160 < 2) {
              goto LABEL_183;
            }
            int v155 = 1;
          }
          *(_DWORD *)(v156 + v152) = v155 + v159;
LABEL_183:
          v10->i32[v152 / 4] = v157;
          v153 += 2;
          v152 += 4;
          if (2 * v8 == v153) {
            goto LABEL_349;
          }
        }
      case 3u:
        if (!v8) {
          goto LABEL_356;
        }
        uint64_t v136 = 0;
        uint64_t v137 = *(void *)(a1 + 2664);
        while (1)
        {
          int v139 = *(_DWORD *)(v137 + 4 * v136);
          if (v139 >= 1) {
            break;
          }
          __int32 v138 = 0;
LABEL_161:
          v10->i32[v136++] = v138;
          if (v136 == v8) {
            goto LABEL_349;
          }
        }
        int v140 = 0;
        __int32 v138 = 0;
        unsigned int v141 = *(_DWORD *)(a1 + 2732);
        unsigned int v142 = *(_DWORD *)(a1 + 2736);
        while (v141 >= 0x40000001)
        {
          unsigned int v143 = v141;
LABEL_165:
          unsigned int v144 = (v143 >> 1) & 0x7FFF0000;
          unsigned int v141 = v143 - v144;
          int v145 = v142 >= v144;
          if (v142 < v144)
          {
            unsigned int v141 = v144;
            unsigned int v144 = 0;
          }
          v142 -= v144;
          *(_DWORD *)(a1 + 2732) = v141;
          *(_DWORD *)(a1 + 2736) = v142;
          v138 += v145 << v140++;
          if (v140 == v139) {
            goto LABEL_161;
          }
        }
        int v146 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v142 *= 2;
          *(_DWORD *)(a1 + 2744) = --v146;
          if (v146) {
            goto LABEL_172;
          }
          uint64_t v148 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v148 + 1;
          unint64_t v149 = *(unsigned int *)(a1 + 2704);
          if (v148 + 1 >= v149)
          {
            int v150 = 65280;
            unint64_t v151 = v148 + 2;
            *(void *)(a1 + 2720) = v151;
            if (v151 >= v149)
            {
LABEL_178:
              int v147 = 255;
              goto LABEL_171;
            }
          }
          else
          {
            int v150 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v148 + 1) << 8;
            unint64_t v151 = v148 + 2;
            *(void *)(a1 + 2720) = v151;
            if (v151 >= v149) {
              goto LABEL_178;
            }
          }
          int v147 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v151);
LABEL_171:
          v142 |= v150 | v147;
          int v146 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_172:
          unsigned int v143 = 2 * v141;
          BOOL v27 = v141 >= 0x20000001;
          v141 *= 2;
          if (v27) {
            goto LABEL_165;
          }
        }
      case 4u:
        if (!v8) {
          goto LABEL_356;
        }
        uint64_t v162 = 0;
        uint64_t v163 = v8;
        break;
      default:
        goto LABEL_349;
    }
    while (1)
    {
      uint64_t v166 = *a5;
      unsigned int v167 = *(unsigned __int16 *)(*a5 + 2 * v162);
      unsigned int v168 = *(_DWORD *)(a1 + 2732);
      unsigned int v169 = *(_DWORD *)(a1 + 2736);
      if (v168 < 0x40000001)
      {
        int v170 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v169 *= 2;
          *(_DWORD *)(a1 + 2744) = --v170;
          if (v170) {
            goto LABEL_205;
          }
          uint64_t v173 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v173 + 1;
          unint64_t v174 = *(unsigned int *)(a1 + 2704);
          if (v173 + 1 >= v174)
          {
            int v175 = 65280;
            unint64_t v176 = v173 + 2;
            *(void *)(a1 + 2720) = v176;
            if (v176 >= v174)
            {
LABEL_211:
              int v171 = 255;
              goto LABEL_204;
            }
          }
          else
          {
            int v175 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v173 + 1) << 8;
            unint64_t v176 = v173 + 2;
            *(void *)(a1 + 2720) = v176;
            if (v176 >= v174) {
              goto LABEL_211;
            }
          }
          int v171 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v176);
LABEL_204:
          v169 |= v175 | v171;
          int v170 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_205:
          unsigned int v172 = 2 * v168;
          BOOL v27 = v168 >= 0x20000001;
          v168 *= 2;
          if (v27) {
            goto LABEL_213;
          }
        }
      }
      unsigned int v172 = *(_DWORD *)(a1 + 2732);
LABEL_213:
      int v165 = 0;
      unsigned int v177 = (HIWORD(v172) * v167) & 0xFFFF0000;
      unsigned int v178 = v169 < v177 ? 0 : (HIWORD(v172) * v167) & 0xFFFF0000;
      unsigned int v179 = v169 - v178;
      BOOL v180 = v169 >= v177;
      unsigned int v181 = (v167 >> 7) & 0x1FE | (v169 >= v177);
      unsigned int v182 = v172 - v177;
      *(_WORD *)(v166 + 2 * v162) = *(_WORD *)(a1 + 2 * v181 + 2752) + v167;
      unsigned int v183 = v180 ? v172 - v177 : (HIWORD(v172) * v167) & 0xFFFF0000;
      *(_DWORD *)(a1 + 2732) = v183;
      *(_DWORD *)(a1 + 2736) = v179;
      if (v180) {
        break;
      }
LABEL_200:
      v10->i32[v162++] = v165;
      if (v162 == v163) {
        goto LABEL_349;
      }
    }
    uint64_t v184 = a5[3];
    unsigned int v185 = *(unsigned __int16 *)(v184 + 2 * v162);
    if (v182 < 0x40000001)
    {
      int v186 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v179 *= 2;
        *(_DWORD *)(a1 + 2744) = --v186;
        if (v186) {
          goto LABEL_225;
        }
        uint64_t v189 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v189 + 1;
        unint64_t v190 = *(unsigned int *)(a1 + 2704);
        if (v189 + 1 >= v190)
        {
          int v191 = 65280;
          unint64_t v192 = v189 + 2;
          *(void *)(a1 + 2720) = v192;
          if (v192 >= v190)
          {
LABEL_231:
            int v187 = 255;
            goto LABEL_224;
          }
        }
        else
        {
          int v191 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v189 + 1) << 8;
          unint64_t v192 = v189 + 2;
          *(void *)(a1 + 2720) = v192;
          if (v192 >= v190) {
            goto LABEL_231;
          }
        }
        int v187 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v192);
LABEL_224:
        v179 |= v191 | v187;
        int v186 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_225:
        unsigned int v188 = 2 * v182;
        BOOL v27 = v182 >= 0x20000001;
        v182 *= 2;
        if (v27) {
          goto LABEL_233;
        }
      }
    }
    unsigned int v188 = v172 - v177;
LABEL_233:
    unsigned int v193 = (HIWORD(v188) * v185) & 0xFFFF0000;
    *(_WORD *)(v184 + 2 * v162) = *(_WORD *)(a1 + 2 * ((v185 >> 7) & 0x1FE | (v179 >= v193)) + 2752) + v185;
    if (v179 < v193) {
      unsigned int v194 = (HIWORD(v188) * v185) & 0xFFFF0000;
    }
    else {
      unsigned int v194 = v188 - v193;
    }
    if (v179 < v193) {
      unsigned int v195 = 0;
    }
    else {
      unsigned int v195 = (HIWORD(v188) * v185) & 0xFFFF0000;
    }
    unsigned int v196 = v179 - v195;
    *(_DWORD *)(a1 + 2732) = v194;
    *(_DWORD *)(a1 + 2736) = v179 - v195;
    unsigned int v197 = (_WORD *)(a5[6] + 2 * (int)(v162 << 6));
    unsigned int v198 = (unsigned __int16)*v197;
    if (v194 < 0x40000001)
    {
      int v199 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v196 *= 2;
        *(_DWORD *)(a1 + 2744) = --v199;
        if (v199) {
          goto LABEL_243;
        }
        uint64_t v202 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v202 + 1;
        unint64_t v203 = *(unsigned int *)(a1 + 2704);
        if (v202 + 1 >= v203)
        {
          int v204 = 65280;
          unint64_t v205 = v202 + 2;
          *(void *)(a1 + 2720) = v205;
          if (v205 >= v203)
          {
LABEL_249:
            int v200 = 255;
            goto LABEL_242;
          }
        }
        else
        {
          int v204 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v202 + 1) << 8;
          unint64_t v205 = v202 + 2;
          *(void *)(a1 + 2720) = v205;
          if (v205 >= v203) {
            goto LABEL_249;
          }
        }
        int v200 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v205);
LABEL_242:
        v196 |= v204 | v200;
        int v199 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_243:
        unsigned int v201 = 2 * v194;
        BOOL v27 = v194 >= 0x20000001;
        v194 *= 2;
        if (v27) {
          goto LABEL_251;
        }
      }
    }
    unsigned int v201 = v194;
LABEL_251:
    unsigned int v206 = (HIWORD(v201) * v198) & 0xFFFF0000;
    unsigned int v207 = v201 - v206;
    BOOL v208 = v196 >= v206;
    *unsigned int v197 = *(_WORD *)(a1 + 2 * ((v198 >> 7) & 0x1FE | v208) + 2752) + v198;
    if (v196 >= v206)
    {
      unsigned int v209 = v206;
    }
    else
    {
      unsigned int v207 = v206;
      unsigned int v209 = 0;
    }
    unsigned int v210 = v196 - v209;
    *(_DWORD *)(a1 + 2732) = v207;
    *(_DWORD *)(a1 + 2736) = v210;
    uint64_t v211 = (v208 & 0x7FFFFFFu) + 1;
    unsigned int v212 = (unsigned __int16)v197[v211];
    if (v207 < 0x40000001)
    {
      int v213 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v210 *= 2;
        *(_DWORD *)(a1 + 2744) = --v213;
        if (v213) {
          goto LABEL_258;
        }
        uint64_t v216 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v216 + 1;
        unint64_t v217 = *(unsigned int *)(a1 + 2704);
        if (v216 + 1 >= v217)
        {
          int v218 = 65280;
          unint64_t v219 = v216 + 2;
          *(void *)(a1 + 2720) = v219;
          if (v219 >= v217)
          {
LABEL_264:
            int v214 = 255;
            goto LABEL_257;
          }
        }
        else
        {
          int v218 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v216 + 1) << 8;
          unint64_t v219 = v216 + 2;
          *(void *)(a1 + 2720) = v219;
          if (v219 >= v217) {
            goto LABEL_264;
          }
        }
        int v214 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v219);
LABEL_257:
        v210 |= v218 | v214;
        int v213 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_258:
        unsigned int v215 = 2 * v207;
        BOOL v27 = v207 >= 0x20000001;
        v207 *= 2;
        if (v27) {
          goto LABEL_266;
        }
      }
    }
    unsigned int v215 = v207;
LABEL_266:
    int v220 = 32 * v208;
    unsigned int v221 = (HIWORD(v215) * v212) & 0xFFFF0000;
    BOOL v222 = v210 >= v221;
    v197[v211] = *(_WORD *)(a1 + 2 * ((v212 >> 7) & 0x1FE | v222) + 2752) + v212;
    if (v210 < v221) {
      unsigned int v223 = (HIWORD(v215) * v212) & 0xFFFF0000;
    }
    else {
      unsigned int v223 = v215 - v221;
    }
    if (v210 < v221) {
      unsigned int v221 = 0;
    }
    unsigned int v224 = v210 - v221;
    *(_DWORD *)(a1 + 2732) = v223;
    *(_DWORD *)(a1 + 2736) = v224;
    unsigned int v225 = v220 | (16 * v222);
    uint64_t v226 = (v225 >> 4) + 3;
    unsigned int v227 = (unsigned __int16)v197[v226];
    if (v223 < 0x40000001)
    {
      int v228 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v224 *= 2;
        *(_DWORD *)(a1 + 2744) = --v228;
        if (v228) {
          goto LABEL_275;
        }
        uint64_t v231 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v231 + 1;
        unint64_t v232 = *(unsigned int *)(a1 + 2704);
        if (v231 + 1 >= v232)
        {
          int v233 = 65280;
          unint64_t v234 = v231 + 2;
          *(void *)(a1 + 2720) = v234;
          if (v234 >= v232)
          {
LABEL_281:
            int v229 = 255;
            goto LABEL_274;
          }
        }
        else
        {
          int v233 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v231 + 1) << 8;
          unint64_t v234 = v231 + 2;
          *(void *)(a1 + 2720) = v234;
          if (v234 >= v232) {
            goto LABEL_281;
          }
        }
        int v229 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v234);
LABEL_274:
        v224 |= v233 | v229;
        int v228 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_275:
        unsigned int v230 = 2 * v223;
        BOOL v27 = v223 >= 0x20000001;
        v223 *= 2;
        if (v27) {
          goto LABEL_283;
        }
      }
    }
    unsigned int v230 = v223;
LABEL_283:
    unsigned int v235 = (HIWORD(v230) * v227) & 0xFFFF0000;
    BOOL v236 = v224 >= v235;
    v197[v226] = *(_WORD *)(a1 + 2 * ((v227 >> 7) & 0x1FE | v236) + 2752) + v227;
    if (v224 < v235) {
      unsigned int v237 = (HIWORD(v230) * v227) & 0xFFFF0000;
    }
    else {
      unsigned int v237 = v230 - v235;
    }
    if (v224 < v235) {
      unsigned int v238 = 0;
    }
    else {
      unsigned int v238 = (HIWORD(v230) * v227) & 0xFFFF0000;
    }
    unsigned int v239 = v224 - v238;
    *(_DWORD *)(a1 + 2732) = v237;
    *(_DWORD *)(a1 + 2736) = v239;
    unsigned int v240 = v225 | (8 * v236);
    uint64_t v241 = (v240 >> 3) + 7;
    unsigned int v242 = (unsigned __int16)v197[v241];
    if (v237 < 0x40000001)
    {
      int v243 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v239 *= 2;
        *(_DWORD *)(a1 + 2744) = --v243;
        if (v243) {
          goto LABEL_293;
        }
        uint64_t v246 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v246 + 1;
        unint64_t v247 = *(unsigned int *)(a1 + 2704);
        if (v246 + 1 >= v247)
        {
          int v248 = 65280;
          unint64_t v249 = v246 + 2;
          *(void *)(a1 + 2720) = v249;
          if (v249 >= v247)
          {
LABEL_299:
            int v244 = 255;
            goto LABEL_292;
          }
        }
        else
        {
          int v248 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v246 + 1) << 8;
          unint64_t v249 = v246 + 2;
          *(void *)(a1 + 2720) = v249;
          if (v249 >= v247) {
            goto LABEL_299;
          }
        }
        int v244 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v249);
LABEL_292:
        v239 |= v248 | v244;
        int v243 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_293:
        unsigned int v245 = 2 * v237;
        BOOL v27 = v237 >= 0x20000001;
        v237 *= 2;
        if (v27) {
          goto LABEL_301;
        }
      }
    }
    unsigned int v245 = v237;
LABEL_301:
    unsigned int v250 = (HIWORD(v245) * v242) & 0xFFFF0000;
    BOOL v251 = v239 >= v250;
    v197[v241] = *(_WORD *)(a1 + 2 * ((v242 >> 7) & 0x1FE | v251) + 2752) + v242;
    if (v239 < v250) {
      unsigned int v252 = (HIWORD(v245) * v242) & 0xFFFF0000;
    }
    else {
      unsigned int v252 = v245 - v250;
    }
    if (v239 < v250) {
      unsigned int v253 = 0;
    }
    else {
      unsigned int v253 = (HIWORD(v245) * v242) & 0xFFFF0000;
    }
    unsigned int v254 = v239 - v253;
    *(_DWORD *)(a1 + 2732) = v252;
    *(_DWORD *)(a1 + 2736) = v254;
    unsigned int v255 = v240 | (4 * v251);
    uint64_t v256 = (v255 >> 2) + 15;
    unsigned int v257 = (unsigned __int16)v197[v256];
    if (v252 < 0x40000001)
    {
      int v258 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v254 *= 2;
        *(_DWORD *)(a1 + 2744) = --v258;
        if (v258) {
          goto LABEL_311;
        }
        uint64_t v261 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v261 + 1;
        unint64_t v262 = *(unsigned int *)(a1 + 2704);
        if (v261 + 1 >= v262)
        {
          int v263 = 65280;
          unint64_t v264 = v261 + 2;
          *(void *)(a1 + 2720) = v264;
          if (v264 >= v262)
          {
LABEL_317:
            int v259 = 255;
            goto LABEL_310;
          }
        }
        else
        {
          int v263 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v261 + 1) << 8;
          unint64_t v264 = v261 + 2;
          *(void *)(a1 + 2720) = v264;
          if (v264 >= v262) {
            goto LABEL_317;
          }
        }
        int v259 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v264);
LABEL_310:
        v254 |= v263 | v259;
        int v258 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_311:
        unsigned int v260 = 2 * v252;
        BOOL v27 = v252 >= 0x20000001;
        v252 *= 2;
        if (v27) {
          goto LABEL_319;
        }
      }
    }
    unsigned int v260 = v252;
LABEL_319:
    unsigned int v265 = (HIWORD(v260) * v257) & 0xFFFF0000;
    BOOL v266 = v254 >= v265;
    v197[v256] = *(_WORD *)(a1 + 2 * ((v257 >> 7) & 0x1FE | v266) + 2752) + v257;
    if (v254 < v265) {
      unsigned int v267 = (HIWORD(v260) * v257) & 0xFFFF0000;
    }
    else {
      unsigned int v267 = v260 - v265;
    }
    if (v254 < v265) {
      unsigned int v268 = 0;
    }
    else {
      unsigned int v268 = (HIWORD(v260) * v257) & 0xFFFF0000;
    }
    unsigned int v269 = v254 - v268;
    *(_DWORD *)(a1 + 2732) = v267;
    *(_DWORD *)(a1 + 2736) = v269;
    unsigned int v270 = v255 | (2 * v266);
    uint64_t v271 = (v270 >> 1) + 31;
    unsigned int v272 = (unsigned __int16)v197[v271];
    if (v267 < 0x40000001)
    {
      int v273 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v269 *= 2;
        *(_DWORD *)(a1 + 2744) = --v273;
        if (v273) {
          goto LABEL_329;
        }
        uint64_t v276 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v276 + 1;
        unint64_t v277 = *(unsigned int *)(a1 + 2704);
        if (v276 + 1 >= v277)
        {
          int v278 = 65280;
          unint64_t v279 = v276 + 2;
          *(void *)(a1 + 2720) = v279;
          if (v279 >= v277)
          {
LABEL_335:
            int v274 = 255;
            goto LABEL_328;
          }
        }
        else
        {
          int v278 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v276 + 1) << 8;
          unint64_t v279 = v276 + 2;
          *(void *)(a1 + 2720) = v279;
          if (v279 >= v277) {
            goto LABEL_335;
          }
        }
        int v274 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v279);
LABEL_328:
        v269 |= v278 | v274;
        int v273 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_329:
        unsigned int v275 = 2 * v267;
        BOOL v27 = v267 >= 0x20000001;
        v267 *= 2;
        if (v27) {
          goto LABEL_337;
        }
      }
    }
    unsigned int v275 = v267;
LABEL_337:
    unsigned int v280 = (HIWORD(v275) * v272) & 0xFFFF0000;
    unsigned int v281 = v275 - v280;
    BOOL v282 = v269 >= v280;
    v197[v271] = *(_WORD *)(a1 + 2 * ((v272 >> 7) & 0x1FE | v282) + 2752) + v272;
    if (v269 < v280) {
      unsigned int v283 = v280;
    }
    else {
      unsigned int v283 = v281;
    }
    if (v269 < v280) {
      unsigned int v284 = 0;
    }
    else {
      unsigned int v284 = v280;
    }
    *(_DWORD *)(a1 + 2732) = v283;
    *(_DWORD *)(a1 + 2736) = v269 - v284;
    int v285 = v270 | v282;
    if ((v270 | v282) == 0x3F)
    {
      uint64_t v286 = v8;
      uint64_t v287 = a5[12];
      int v285 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 2704), *(_DWORD *)(v287 + 4 * v162), (_WORD *)(a5[9] + 2 * v162))+ 63;
      int v288 = *(_DWORD *)(v287 + 4 * v162);
      int v289 = v285 >> v288;
      if (v288 && !v289)
      {
        int v164 = -1;
LABEL_196:
        *(_DWORD *)(v287 + 4 * v162) = v164 + v288;
        uint64_t v8 = v286;
        unint64_t v10 = v308;
        goto LABEL_197;
      }
      if (v289 >= 2)
      {
        int v164 = 1;
        goto LABEL_196;
      }
      uint64_t v8 = v286;
      unint64_t v10 = v308;
    }
LABEL_197:
    if (v179 >= v193) {
      int v165 = v285 + 1;
    }
    else {
      int v165 = ~v285;
    }
    goto LABEL_200;
  }
LABEL_349:
  if ((int)v8 < 1)
  {
LABEL_356:
    if (!v10) {
      return;
    }
    goto LABEL_361;
  }
  uint64_t v290 = 0;
  if (v8 < 8)
  {
    int v292 = a6;
    int32x2_t v291 = a2;
LABEL_359:
    uint64_t v298 = v8 - v290;
    uint64_t v299 = v290;
    unint64_t v300 = &v292->i32[v290];
    uint32x2_t v301 = &v10->i32[v299];
    int v302 = &v291->i32[v299];
    do
    {
      int v304 = *v302++;
      int v303 = v304;
      int v305 = *v301++;
      *v300++ = v305 + v303;
      --v298;
    }
    while (v298);
    goto LABEL_361;
  }
  int v292 = a6;
  int32x2_t v291 = a2;
  if ((unint64_t)((char *)a6 - (char *)a2) < 0x20) {
    goto LABEL_359;
  }
  uint64_t v290 = v8 & 0xFFFFFFF8;
  int32x2_t v293 = a2 + 1;
  int32x2_t v294 = v10 + 1;
  uint32x2_t v295 = a6 + 1;
  uint64_t v296 = v290;
  do
  {
    int32x4_t v297 = vaddq_s32(*v294, *v293);
    v295[-1] = vaddq_s32(v294[-1], v293[-1]);
    int32x4_t *v295 = v297;
    v293 += 2;
    v294 += 2;
    v295 += 2;
    v296 -= 8;
  }
  while (v296);
  if (v290 != v8) {
    goto LABEL_359;
  }
LABEL_361:
  operator delete(v10);
}

void sub_1A285E690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gcl::tmesh::ACContext::~ACContext(gcl::tmesh::ACContext *this)
{
  std::vector<int>::size_type v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v6;
    operator delete(v6);
  }
}

uint64_t gcl::tmesh::Decoder::getAttributeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 4) {
    return 3;
  }
  uint64_t result = 3;
  if (a2 != 8)
  {
    uint64_t v5 = a2 & 0x7FFFFFFFFFFFFFFCLL;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 4
      && a2 != 9
      && (a2 & 0xFFFFFFFFFFFFFFFELL) != 0xA
      && v5 != 12
      && v5 != 16
      && (unint64_t)(a2 - 20) >= 5
      && (unint64_t)a2 >= 0x1C
      && a1 != -32
      && (unint64_t)a2 >= 0x20
      && *(_DWORD *)a1 == -290009985)
    {
      uint64_t result = 0;
      char v6 = *(unsigned char *)(a1 + 8);
      char v7 = *(unsigned char *)(a1 + 9);
      __int16 v8 = *(_WORD *)(a1 + 10);
      int v9 = *(_DWORD *)(a1 + 12);
      int v10 = *(_DWORD *)(a1 + 16);
      int v11 = *(unsigned __int8 *)(a1 + 20);
      int v12 = *(unsigned __int8 *)(a1 + 21);
      int v13 = *(unsigned __int8 *)(a1 + 22);
      int v14 = *(unsigned __int8 *)(a1 + 26);
      int v15 = *(unsigned __int8 *)(a1 + 27);
      *(unsigned char *)(a3 + 4) = v6;
      *(_DWORD *)a3 = 0;
      *(unsigned char *)(a3 + 5) = v7;
      *(_WORD *)(a3 + 6) = v8;
      *(_DWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 12) = v10 & 0x7FFFFFFF;
      *(_DWORD *)(a3 + 16) = v13;
      *(_DWORD *)(a3 + 20) = v12;
      *(_DWORD *)(a3 + 24) = v15;
      *(_DWORD *)(a3 + 28) = v11;
      *(_DWORD *)(a3 + 32) = v14;
    }
  }
  return result;
}

void std::vector<gcl::ArithmeticContext>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  char v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      memset_pattern16(v5, &memset_pattern_27, 2 * a2);
      char v6 = &v5[2 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    char v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = (v8 >> 1) + a2;
    if (v10 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - (void)v7;
    if (v11 > v10) {
      uint64_t v10 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 < 0) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v13 = operator new(2 * v12);
    }
    else
    {
      int v13 = 0;
    }
    int v14 = &v13[2 * v9];
    size_t v15 = 2 * a2;
    unsigned int v16 = &v13[2 * v12];
    memset_pattern16(v14, &memset_pattern_27, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 2;
      if (v18 < 0x1E) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 1) + 1;
      unint64_t v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      char v6 = &v5[-v20];
      v14 -= v20;
      unint64_t v21 = &v13[2 * v9 - 16];
      int v22 = v5 - 16;
      unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_31:
        do
        {
          __int16 v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t gcl::ArithmeticDecoder::decodeSignedExpGolomb(unsigned int *a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t result = gcl::ArithmeticDecoder::decodeExpGolomb(a1, a2, a4);
  if (result)
  {
    unsigned int v7 = (unsigned __int16)*a3;
    unsigned int v9 = a1[7];
    unsigned int v8 = a1[8];
    if (v9 <= 0x40000000)
    {
      int v10 = a1[10];
      while (1)
      {
        v8 *= 2;
        a1[10] = --v10;
        if (v10) {
          goto LABEL_6;
        }
        uint64_t v13 = *((void *)a1 + 2);
        *((void *)a1 + 2) = v13 + 1;
        unint64_t v14 = *a1;
        if (v13 + 1 >= v14)
        {
          int v15 = 65280;
          unint64_t v16 = v13 + 2;
          *((void *)a1 + 2) = v16;
          if (v16 >= v14)
          {
LABEL_12:
            int v11 = 255;
            goto LABEL_5;
          }
        }
        else
        {
          int v15 = *(unsigned __int8 *)(*((void *)a1 + 1) + v13 + 1) << 8;
          unint64_t v16 = v13 + 2;
          *((void *)a1 + 2) = v16;
          if (v16 >= v14) {
            goto LABEL_12;
          }
        }
        int v11 = *(unsigned __int8 *)(*((void *)a1 + 1) + v16);
LABEL_5:
        v8 |= v15 | v11;
        int v10 = 16;
        a1[10] = 16;
LABEL_6:
        unsigned int v12 = 2 * v9;
        BOOL v18 = v9 >= 0x20000001;
        v9 *= 2;
        if (v18) {
          goto LABEL_14;
        }
      }
    }
    unsigned int v12 = a1[7];
LABEL_14:
    unsigned int v17 = (HIWORD(v12) * v7) & 0xFFFF0000;
    BOOL v18 = v8 >= v17;
    *a3 = *((_WORD *)a1 + ((v7 >> 7) & 0x1FE | (v8 >= v17)) + 24) + v7;
    if (v8 < v17) {
      unsigned int v19 = (HIWORD(v12) * v7) & 0xFFFF0000;
    }
    else {
      unsigned int v19 = v12 - v17;
    }
    if (v8 < v17) {
      unsigned int v17 = 0;
    }
    if (v18) {
      uint64_t result = result;
    }
    else {
      uint64_t result = -(int)result;
    }
    a1[7] = v19;
    a1[8] = v8 - v17;
  }
  return result;
}

int32x2_t gcl::tmesh::DecoderImpl::decompressGeometry(uint64_t a1, int a2, uint64_t a3)
{
  char v6 = (int *)(*(void *)(a1 + 176) + 12 * a2);
  int v7 = *v6;
  int v8 = v6[1];
  int v9 = v6[2];
  int v10 = *(_DWORD *)(a1 + 3812);
  if (v10 != 1)
  {
    if (v10 != 2) {
      goto LABEL_17;
    }
    int v11 = (int *)(*(void *)(a1 + 200) + 12 * a2);
    int v12 = v11[2];
    if (v12 != -1)
    {
      int v14 = *v11;
      int v13 = v11[1];
      unsigned int v15 = *(unsigned __int16 *)(a1 + 2416);
      unsigned int v16 = *(_DWORD *)(a1 + 2732);
      unsigned int v17 = *(_DWORD *)(a1 + 2736);
      if (v16 < 0x40000001)
      {
        int v18 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v17 *= 2;
          *(_DWORD *)(a1 + 2744) = --v18;
          if (v18) {
            goto LABEL_8;
          }
          uint64_t v21 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v21 + 1;
          unint64_t v22 = *(unsigned int *)(a1 + 2704);
          if (v21 + 1 >= v22)
          {
            int v23 = 65280;
            unint64_t v24 = v21 + 2;
            *(void *)(a1 + 2720) = v24;
            if (v24 >= v22)
            {
LABEL_14:
              int v19 = 255;
              goto LABEL_7;
            }
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v21 + 1) << 8;
            unint64_t v24 = v21 + 2;
            *(void *)(a1 + 2720) = v24;
            if (v24 >= v22) {
              goto LABEL_14;
            }
          }
          int v19 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v24);
LABEL_7:
          v17 |= v23 | v19;
          int v18 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_8:
          unsigned int v20 = 2 * v16;
          BOOL v38 = v16 >= 0x20000001;
          v16 *= 2;
          if (v38) {
            goto LABEL_24;
          }
        }
      }
      unsigned int v20 = *(_DWORD *)(a1 + 2732);
LABEL_24:
      unsigned int v36 = (HIWORD(v20) * v15) & 0xFFFF0000;
      unsigned int v37 = v20 - v36;
      BOOL v38 = v17 >= v36;
      BOOL v39 = v17 >= v36;
      uint64_t v40 = a1 + 2416;
      *(_WORD *)(a1 + 2416) = *(_WORD *)(a1 + 2 * ((v15 >> 7) & 0x1FE | v39) + 2752) + v15;
      if (v17 < v36) {
        unsigned int v41 = v36;
      }
      else {
        unsigned int v41 = v37;
      }
      if (v17 < v36) {
        unsigned int v42 = 0;
      }
      else {
        unsigned int v42 = v36;
      }
      uint64_t v43 = 2;
      if (v38) {
        uint64_t v43 = 4;
      }
      unsigned int v44 = v17 - v42;
      *(_DWORD *)(a1 + 2732) = v41;
      *(_DWORD *)(a1 + 2736) = v44;
      unsigned int v45 = (_WORD *)(v40 + v43);
      unsigned int v46 = *(unsigned __int16 *)(v40 + v43);
      if (v41 < 0x40000001)
      {
        int v47 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v44 *= 2;
          *(_DWORD *)(a1 + 2744) = --v47;
          if (v47) {
            goto LABEL_36;
          }
          uint64_t v50 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v50 + 1;
          unint64_t v51 = *(unsigned int *)(a1 + 2704);
          if (v50 + 1 >= v51)
          {
            int v52 = 65280;
            unint64_t v53 = v50 + 2;
            *(void *)(a1 + 2720) = v53;
            if (v53 >= v51)
            {
LABEL_42:
              int v48 = 255;
              goto LABEL_35;
            }
          }
          else
          {
            int v52 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v50 + 1) << 8;
            unint64_t v53 = v50 + 2;
            *(void *)(a1 + 2720) = v53;
            if (v53 >= v51) {
              goto LABEL_42;
            }
          }
          int v48 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v53);
LABEL_35:
          v44 |= v52 | v48;
          int v47 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_36:
          unsigned int v49 = 2 * v41;
          BOOL v38 = v41 >= 0x20000001;
          v41 *= 2;
          if (v38) {
            goto LABEL_44;
          }
        }
      }
      unsigned int v49 = v41;
LABEL_44:
      unsigned int v54 = (HIWORD(v49) * v46) & 0xFFFF0000;
      unsigned int v55 = v49 - v54;
      BOOL v56 = v44 >= v54;
      *unsigned int v45 = *(_WORD *)(a1 + 2 * ((v46 >> 7) & 0x1FE | v56) + 2752) + v46;
      if (v44 < v54) {
        unsigned int v57 = v54;
      }
      else {
        unsigned int v57 = v55;
      }
      if (v44 < v54) {
        unsigned int v54 = 0;
      }
      *(_DWORD *)(a1 + 2732) = v57;
      *(_DWORD *)(a1 + 2736) = v44 - v54;
      int v58 = v39 | (2 * v56);
      if (v58 == 2)
      {
        unint64_t v65 = (int32x2_t *)(a3 + 12 * v8);
        unsigned int v66 = (int32x2_t *)(a3 + 12 * v13);
        unsigned int v67 = (int32x2_t *)(a3 + 12 * v7);
        BOOL v68 = (int32x2_t *)(a3 + 12 * v14);
        __int32 v69 = v67[1].i32[0];
        __int32 v70 = v68[1].i32[0];
        BOOL v33 = __OFADD__(v70, v69);
        int v71 = v70 + v69;
        int32x2_t v72 = vadd_s32(*v66, *v65);
        uint32x2_t v73 = (uint32x2_t)vadd_s32(*v68, *v67);
        int32x2_t v74 = vshr_n_s32((int32x2_t)vsra_n_u32(v73, v73, 0x1FuLL), 1uLL);
        if (v71 < 0 != v33) {
          int v75 = v71 + 1;
        }
        else {
          int v75 = v71;
        }
        int32x2_t v93 = vsub_s32(v72, v74);
        int v29 = v66[1].i32[0] + v65[1].i32[0] - (v75 >> 1);
      }
      else if (v58 == 1)
      {
        int v76 = (int32x2_t *)(a3 + 12 * v14);
        unsigned int v77 = (int32x2_t *)(a3 + 12 * v13);
        uint64_t v78 = (int32x2_t *)(a3 + 12 * v12);
        int32x2_t v93 = vsub_s32(vadd_s32(*v77, *v76), *v78);
        int v29 = v77[1].i32[0] + v76[1].i32[0] - v78[1].i32[0];
      }
      else if (v58)
      {
        unint64_t v79 = (int32x2_t *)(a3 + 12 * v7);
        int v80 = (int32x2_t *)(a3 + 12 * v14);
        __int32 v81 = v79[1].i32[0];
        __int32 v82 = v80[1].i32[0];
        BOOL v33 = __OFADD__(v82, v81);
        int v83 = v82 + v81;
        if (v83 < 0 != v33) {
          ++v83;
        }
        BOOL v84 = (int32x2_t *)(a3 + 12 * v8);
        unsigned int v85 = (int32x2_t *)(a3 + 12 * v13);
        unsigned int v86 = (int32x2_t *)(a3 + 12 * v9);
        unsigned int v87 = (int32x2_t *)(a3 + 12 * v12);
        uint32x2_t v88 = (uint32x2_t)vadd_s32(*v80, *v79);
        int32x2_t v89 = vadd_s32(*v85, *v84);
        int64x2_t v90 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v89, v89), (int32x2_t)vsra_n_u32(v88, v88, 0x1FuLL), 1uLL), vadd_s32(*v86, *v87)), vdup_n_s32(0x55555556u));
        int32x2_t v93 = vadd_s32(vshrn_n_s64(v90, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v90, 0x3FuLL)));
        int v29 = (2 * (v85[1].i32[0] + v84[1].i32[0]) + (v83 >> 1) - (v86[1].i32[0] + v87[1].i32[0])) / 3;
      }
      else
      {
        int v59 = (int32x2_t *)(a3 + 12 * v7);
        int v60 = (int32x2_t *)(a3 + 12 * v8);
        unsigned int v61 = (int32x2_t *)(a3 + 12 * v9);
        int32x2_t v93 = vsub_s32(vadd_s32(*v60, *v59), *v61);
        int v29 = v60[1].i32[0] + v59[1].i32[0] - v61[1].i32[0];
      }
      unsigned int v25 = 1;
      goto LABEL_64;
    }
  }
  if (v9 != -1)
  {
    unsigned int v25 = 0;
    unsigned int v26 = (int32x2_t *)(a3 + 12 * v7);
    BOOL v27 = (int32x2_t *)(a3 + 12 * v8);
    unsigned int v28 = (int32x2_t *)(a3 + 12 * v9);
    int32x2_t v93 = vsub_s32(vadd_s32(*v27, *v26), *v28);
    int v29 = v27[1].i32[0] + v26[1].i32[0] - v28[1].i32[0];
LABEL_64:
    gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)&v94, a1, *(_DWORD *)(a1 + 3808), (uint64_t *)(a1 + 120 * v25 + 2424));
    int32x2_t v62 = v94;
    int v63 = v95;
    int32x2_t v64 = v93;
    goto LABEL_65;
  }
LABEL_17:
  if (v8 != -1)
  {
    unsigned int v25 = 0;
    unsigned int v30 = (int32x2_t *)(a3 + 12 * v7);
    uint64_t v31 = (int32x2_t *)(a3 + 12 * v8);
    uint32x2_t v32 = (uint32x2_t)vadd_s32(*v31, *v30);
    LODWORD(v30) = v30[1].i32[0];
    LODWORD(v31) = v31[1].i32[0];
    BOOL v33 = __OFADD__(v31, v30);
    int v34 = v31 + v30;
    int32x2_t v93 = vshr_n_s32((int32x2_t)vsra_n_u32(v32, v32, 0x1FuLL), 1uLL);
    if (v34 < 0 != v33) {
      ++v34;
    }
    int v29 = v34 >> 1;
    goto LABEL_64;
  }
  if (v7 != -1)
  {
    unsigned int v25 = 0;
    unsigned int v35 = (int32x2_t *)(a3 + 12 * v7);
    int32x2_t v93 = *v35;
    int v29 = v35[1].i32[0];
    goto LABEL_64;
  }
  if (!*(unsigned char *)(a1 + 3820))
  {
    unsigned int v25 = 0;
    int v29 = 0;
    int32x2_t v93 = 0;
    goto LABEL_64;
  }
  gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)&v94, a1, 3, 0);
  int v29 = 0;
  int32x2_t v62 = v94;
  int v63 = v95;
  int32x2_t v64 = 0;
LABEL_65:
  int v91 = (int32x2_t *)(a3 + 12 * a2);
  int32x2_t result = vadd_s32(v62, v64);
  *int v91 = result;
  v91[1].i32[0] = v63 + v29;
  return result;
}

void gcl::MutableApproximatePriorityQueue<gcl::tmesh::VertexPriority,64>::insert(_DWORD *a1, int *a2)
{
  if (*a2 >= 63) {
    int v4 = 63;
  }
  else {
    int v4 = *a2;
  }
  int v5 = a1[1];
  if (v4 > v5) {
    int v5 = v4;
  }
  a1[1] = v5;
  char v6 = &a1[6 * v4];
  int v9 = (char *)*((void *)v6 + 1);
  int v7 = (int ***)(v6 + 2);
  int v8 = v9;
  int v10 = (uint64_t *)(v7 + 1);
  int v11 = (char *)v7[1];
  int v12 = v11;
  unint64_t v13 = v11 - v9;
  uint64_t v14 = (v11 - v9) >> 3;
  a2[1] = v4;
  a2[2] = v14;
  unsigned int v16 = v7 + 2;
  unint64_t v15 = (unint64_t)v7[2];
  if ((unint64_t)v11 < v15)
  {
    *(void *)int v11 = a2;
    uint64_t v17 = (uint64_t)(v11 + 8);
    goto LABEL_28;
  }
  unint64_t v18 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = v15 - (void)v8;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v21 = operator new(8 * v20);
    unsigned int v16 = v7 + 2;
    int v10 = (uint64_t *)(v7 + 1);
    unint64_t v22 = (int **)&v21[8 * v14];
    int v23 = &v21[8 * v20];
    *unint64_t v22 = a2;
    uint64_t v17 = (uint64_t)(v22 + 1);
    unint64_t v24 = (char *)(v11 - v8);
    if (v11 == v8) {
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  uint64_t v21 = 0;
  unint64_t v22 = (int **)(8 * v14);
  int v23 = 0;
  *(void *)(8 * v14) = a2;
  uint64_t v17 = 8 * v14 + 8;
  unint64_t v24 = (char *)(v11 - v8);
  if (v11 != v8)
  {
LABEL_19:
    unint64_t v25 = (unint64_t)(v24 - 8);
    if (v25 < 0x58) {
      goto LABEL_35;
    }
    if (v11 - v21 - (v13 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_35;
    }
    uint64_t v26 = (v25 >> 3) + 1;
    uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    int v12 = &v11[-v27];
    unint64_t v22 = (int **)((char *)v22 - v27);
    unsigned int v28 = &v21[8 * v14 - 16];
    int v29 = v11 - 16;
    uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      _OWORD *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        uint32x2_t v32 = (int *)*((void *)v12 - 1);
        v12 -= 8;
        *--unint64_t v22 = v32;
      }
      while (v12 != v8);
    }
    int v12 = (char *)*v7;
  }
LABEL_26:
  *int v7 = v22;
  *int v10 = v17;
  *unsigned int v16 = v23;
  if (v12)
  {
    BOOL v33 = v12;
    int v34 = v10;
    operator delete(v33);
    int v10 = v34;
  }
LABEL_28:
  *int v10 = v17;
  ++*a1;
  unsigned int v35 = &a1[v4];
  unint64_t v36 = (unint64_t)(v17 - (void)*v7) >> 3;
  if (v35[386] > (int)v36) {
    LODWORD(v36) = v35[386];
  }
  v35[386] = v36;
}

uint64_t gcl::tmesh::DecoderImpl::decompressTFanConnectivity(gcl::tmesh::DecoderImpl *this, int a2, unsigned int a3, uint64_t a4, int *a5, _DWORD *a6, _DWORD *a7)
{
  int v12 = (_WORD *)((char *)this + 16 * a3 + 2060);
  unsigned int v13 = (unsigned __int16)*v12;
  unsigned int v14 = *((_DWORD *)this + 683);
  unsigned int v15 = *((_DWORD *)this + 684);
  if (v14 < 0x40000001)
  {
    int v16 = *((_DWORD *)this + 686);
    while (1)
    {
      v15 *= 2;
      *((_DWORD *)this + 686) = --v16;
      if (v16) {
        goto LABEL_5;
      }
      uint64_t v19 = *((void *)this + 340);
      *((void *)this + 340) = v19 + 1;
      unint64_t v20 = *((unsigned int *)this + 676);
      if (v19 + 1 >= v20)
      {
        int v21 = 65280;
        unint64_t v22 = v19 + 2;
        *((void *)this + 340) = v22;
        if (v22 >= v20)
        {
LABEL_11:
          int v17 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        int v21 = *(unsigned __int8 *)(*((void *)this + 339) + v19 + 1) << 8;
        unint64_t v22 = v19 + 2;
        *((void *)this + 340) = v22;
        if (v22 >= v20) {
          goto LABEL_11;
        }
      }
      int v17 = *(unsigned __int8 *)(*((void *)this + 339) + v22);
LABEL_4:
      v15 |= v21 | v17;
      int v16 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_5:
      unsigned int v18 = 2 * v14;
      BOOL v43 = v14 >= 0x20000001;
      v14 *= 2;
      if (v43) {
        goto LABEL_13;
      }
    }
  }
  unsigned int v18 = *((_DWORD *)this + 683);
LABEL_13:
  unsigned int v23 = (HIWORD(v18) * v13) & 0xFFFF0000;
  unsigned int v24 = v18 - v23;
  if (v15 < v23) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = v23;
  }
  unsigned int v26 = v15 - v25;
  *((_DWORD *)this + 684) = v26;
  *int v12 = *((_WORD *)this + ((v13 >> 7) & 0x1FE | (v15 >= v23)) + 1376) + v13;
  if (v15 < v23) {
    unsigned int v27 = v23;
  }
  else {
    unsigned int v27 = v24;
  }
  *((_DWORD *)this + 683) = v27;
  if (v15 < v23)
  {
    uint32x2_t v32 = (char *)this + 16 * a3;
    unsigned int v33 = *((unsigned __int16 *)v32 + 1031);
    if (v23 < 0x40000001)
    {
      int v34 = *((_DWORD *)this + 686);
      while (1)
      {
        v26 *= 2;
        *((_DWORD *)this + 686) = --v34;
        if (v34) {
          goto LABEL_26;
        }
        uint64_t v37 = *((void *)this + 340);
        *((void *)this + 340) = v37 + 1;
        unint64_t v38 = *((unsigned int *)this + 676);
        if (v37 + 1 >= v38)
        {
          int v39 = 65280;
          unint64_t v40 = v37 + 2;
          *((void *)this + 340) = v40;
          if (v40 >= v38)
          {
LABEL_32:
            int v35 = 255;
            goto LABEL_25;
          }
        }
        else
        {
          int v39 = *(unsigned __int8 *)(*((void *)this + 339) + v37 + 1) << 8;
          unint64_t v40 = v37 + 2;
          *((void *)this + 340) = v40;
          if (v40 >= v38) {
            goto LABEL_32;
          }
        }
        int v35 = *(unsigned __int8 *)(*((void *)this + 339) + v40);
LABEL_25:
        v26 |= v39 | v35;
        int v34 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_26:
        unsigned int v36 = 2 * v23;
        BOOL v43 = v23 >= 0x20000001;
        v23 *= 2;
        if (v43) {
          goto LABEL_34;
        }
      }
    }
    unsigned int v36 = v23;
LABEL_34:
    unsigned int v41 = (HIWORD(v36) * v33) & 0xFFFF0000;
    unsigned int v42 = v36 - v41;
    BOOL v43 = v26 >= v41;
    BOOL v44 = v26 >= v41;
    *((_WORD *)v32 + 1031) = *((_WORD *)this + ((v33 >> 7) & 0x1FE | v44) + 1376) + v33;
    if (v26 < v41) {
      unsigned int v45 = v41;
    }
    else {
      unsigned int v45 = v42;
    }
    if (v26 < v41) {
      unsigned int v41 = 0;
    }
    uint64_t v46 = 4;
    if (v43) {
      uint64_t v46 = 6;
    }
    unsigned int v47 = v26 - v41;
    *((_DWORD *)this + 683) = v45;
    *((_DWORD *)this + 684) = v47;
    int v48 = &v32[v46 + 2060];
    unsigned int v49 = *(unsigned __int16 *)v48;
    if (v45 < 0x40000001)
    {
      int v50 = *((_DWORD *)this + 686);
      while (1)
      {
        v47 *= 2;
        *((_DWORD *)this + 686) = --v50;
        if (v50) {
          goto LABEL_45;
        }
        uint64_t v53 = *((void *)this + 340);
        *((void *)this + 340) = v53 + 1;
        unint64_t v54 = *((unsigned int *)this + 676);
        if (v53 + 1 >= v54)
        {
          int v55 = 65280;
          unint64_t v56 = v53 + 2;
          *((void *)this + 340) = v56;
          if (v56 >= v54)
          {
LABEL_51:
            int v51 = 255;
            goto LABEL_44;
          }
        }
        else
        {
          int v55 = *(unsigned __int8 *)(*((void *)this + 339) + v53 + 1) << 8;
          unint64_t v56 = v53 + 2;
          *((void *)this + 340) = v56;
          if (v56 >= v54) {
            goto LABEL_51;
          }
        }
        int v51 = *(unsigned __int8 *)(*((void *)this + 339) + v56);
LABEL_44:
        v47 |= v55 | v51;
        int v50 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_45:
        unsigned int v52 = 2 * v45;
        BOOL v43 = v45 >= 0x20000001;
        v45 *= 2;
        if (v43) {
          goto LABEL_53;
        }
      }
    }
    unsigned int v52 = v45;
LABEL_53:
    unsigned int v57 = (HIWORD(v52) * v49) & 0xFFFF0000;
    unsigned int v58 = v52 - v57;
    BOOL v59 = v47 >= v57;
    *(_WORD *)int v48 = *((_WORD *)this + ((v49 >> 7) & 0x1FE | v59) + 1376) + v49;
    if (v47 < v57) {
      unsigned int v60 = v57;
    }
    else {
      unsigned int v60 = v58;
    }
    if (v47 < v57) {
      unsigned int v61 = 0;
    }
    else {
      unsigned int v61 = v57;
    }
    unsigned int v62 = v47 - v61;
    *((_DWORD *)this + 683) = v60;
    *((_DWORD *)this + 684) = v62;
    int v63 = v44 | (2 * v59);
    int32x2_t v64 = (_WORD *)((char *)this + 16 * a3 + 2 * (v63 | 4) + 2060);
    unsigned int v65 = (unsigned __int16)*v64;
    if (v60 >= 0x40000001)
    {
      unsigned int v68 = v60;
LABEL_71:
      unsigned int v73 = (HIWORD(v68) * v65) & 0xFFFF0000;
      unsigned int v74 = v68 - v73;
      BOOL v75 = v62 >= v73;
      _WORD *v64 = *((_WORD *)this + ((v65 >> 7) & 0x1FE | (v62 >= v73)) + 1376) + v65;
      if (v62 < v73) {
        unsigned int v76 = v73;
      }
      else {
        unsigned int v76 = v74;
      }
      if (v62 < v73) {
        unsigned int v73 = 0;
      }
      int v77 = v63 + 5;
      if (!v75) {
        int v77 = v63 + 1;
      }
      *((_DWORD *)this + 683) = v76;
      *((_DWORD *)this + 684) = v62 - v73;
      int v31 = 0;
      char v29 = 0;
      int v78 = 1;
      char v28 = 1;
      int v30 = 1;
      switch(v77)
      {
        case 1:
          goto LABEL_90;
        case 2:
          char v28 = 0;
          char v29 = 0;
          int v31 = 1;
          int v239 = 1;
          *a5 = v77;
          char v243 = 0;
          if (!*((unsigned char *)this + 3817)) {
            goto LABEL_98;
          }
          goto LABEL_91;
        case 3:
          int v78 = 0;
          char v28 = 0;
          int v30 = 0;
          goto LABEL_85;
        case 4:
          int v78 = 0;
          char v28 = 0;
LABEL_85:
          char v79 = 1;
          goto LABEL_87;
        case 5:
          char v79 = 0;
          char v28 = 0;
          int v30 = 0;
LABEL_87:
          int v31 = 1;
          char v29 = 1;
          int v239 = v78;
          *a5 = v77;
          char v243 = v79;
          if (!*((unsigned char *)this + 3817)) {
            goto LABEL_98;
          }
          goto LABEL_91;
        case 6:
          int v31 = 0;
          char v29 = 1;
LABEL_90:
          int v239 = 1;
          *a5 = v77;
          char v243 = 0;
          if (*((unsigned char *)this + 3817)) {
            goto LABEL_91;
          }
          goto LABEL_98;
        case 7:
          int v31 = 0;
          char v29 = 1;
          int v239 = 0;
          *a5 = v77;
          char v243 = 1;
          if (!*((unsigned char *)this + 3817)) {
            goto LABEL_98;
          }
          goto LABEL_91;
        default:
          char v28 = 0;
          int v31 = 1;
          char v29 = 1;
          int v30 = 1;
          int v239 = 1;
          *a5 = v77;
          char v243 = 0;
          if (!*((unsigned char *)this + 3817)) {
            goto LABEL_98;
          }
          goto LABEL_91;
      }
    }
    int v66 = *((_DWORD *)this + 686);
    while (1)
    {
      v62 *= 2;
      *((_DWORD *)this + 686) = --v66;
      if (v66) {
        goto LABEL_63;
      }
      uint64_t v69 = *((void *)this + 340);
      *((void *)this + 340) = v69 + 1;
      unint64_t v70 = *((unsigned int *)this + 676);
      if (v69 + 1 >= v70)
      {
        int v71 = 65280;
        unint64_t v72 = v69 + 2;
        *((void *)this + 340) = v72;
        if (v72 >= v70)
        {
LABEL_69:
          int v67 = 255;
          goto LABEL_62;
        }
      }
      else
      {
        int v71 = *(unsigned __int8 *)(*((void *)this + 339) + v69 + 1) << 8;
        unint64_t v72 = v69 + 2;
        *((void *)this + 340) = v72;
        if (v72 >= v70) {
          goto LABEL_69;
        }
      }
      int v67 = *(unsigned __int8 *)(*((void *)this + 339) + v72);
LABEL_62:
      v62 |= v71 | v67;
      int v66 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_63:
      unsigned int v68 = 2 * v60;
      BOOL v43 = v60 >= 0x20000001;
      v60 *= 2;
      if (v43) {
        goto LABEL_71;
      }
    }
  }
  char v28 = 0;
  char v29 = 0;
  int v30 = 0;
  int v31 = 1;
  int v239 = 1;
  *a5 = 0;
  char v243 = 0;
  if (!*((unsigned char *)this + 3817))
  {
LABEL_98:
    int v246 = 7;
    __int32 v82 = (int *)(*((void *)this + 10) + 4 * a2);
    if (*v82 >= 7) {
      __int32 v82 = &v246;
    }
    goto LABEL_100;
  }
LABEL_91:
  if (!*((unsigned char *)this + 3816)) {
    goto LABEL_98;
  }
  int v80 = *(_DWORD *)(*((void *)this + 28) + 12 * a2);
  if (v80 <= 19) {
    int v80 = 19;
  }
  unsigned int v81 = v80 - 19;
  unsigned int v244 = v81 >> 1;
  int v245 = 15;
  BOOL v43 = v81 >= 0x1E;
  __int32 v82 = &v245;
  if (!v43) {
    __int32 v82 = (int *)&v244;
  }
LABEL_100:
  int v83 = *v82;
  BOOL v84 = (_WORD *)((char *)this + 6 * *v82 + 2140);
  unsigned int v85 = (unsigned __int16)*v84;
  unsigned int v86 = *((_DWORD *)this + 683);
  unsigned int v87 = *((_DWORD *)this + 684);
  if (v86 < 0x40000001)
  {
    int v88 = *((_DWORD *)this + 686);
    while (1)
    {
      v87 *= 2;
      *((_DWORD *)this + 686) = --v88;
      if (v88) {
        goto LABEL_104;
      }
      uint64_t v91 = *((void *)this + 340);
      *((void *)this + 340) = v91 + 1;
      unint64_t v92 = *((unsigned int *)this + 676);
      if (v91 + 1 >= v92)
      {
        int v93 = 65280;
        unint64_t v94 = v91 + 2;
        *((void *)this + 340) = v94;
        if (v94 >= v92)
        {
LABEL_110:
          int v89 = 255;
          goto LABEL_103;
        }
      }
      else
      {
        int v93 = *(unsigned __int8 *)(*((void *)this + 339) + v91 + 1) << 8;
        unint64_t v94 = v91 + 2;
        *((void *)this + 340) = v94;
        if (v94 >= v92) {
          goto LABEL_110;
        }
      }
      int v89 = *(unsigned __int8 *)(*((void *)this + 339) + v94);
LABEL_103:
      v87 |= v93 | v89;
      int v88 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_104:
      unsigned int v90 = 2 * v86;
      BOOL v43 = v86 >= 0x20000001;
      v86 *= 2;
      if (v43) {
        goto LABEL_112;
      }
    }
  }
  unsigned int v90 = *((_DWORD *)this + 683);
LABEL_112:
  unsigned int v95 = (HIWORD(v90) * v85) & 0xFFFF0000;
  unsigned int v96 = v90 - v95;
  BOOL v97 = v87 >= v95;
  BOOL v98 = v87 >= v95;
  *BOOL v84 = *((_WORD *)this + ((v85 >> 7) & 0x1FE | v98) + 1376) + v85;
  if (v87 < v95) {
    unsigned int v99 = v95;
  }
  else {
    unsigned int v99 = v96;
  }
  if (v87 < v95) {
    unsigned int v100 = 0;
  }
  else {
    unsigned int v100 = v95;
  }
  uint64_t v101 = 2;
  if (v97) {
    uint64_t v101 = 4;
  }
  unsigned int v102 = v87 - v100;
  *((_DWORD *)this + 683) = v99;
  *((_DWORD *)this + 684) = v102;
  unsigned int v103 = (_WORD *)((char *)this + 6 * v83 + v101 + 2140);
  unsigned int v104 = (unsigned __int16)*v103;
  if (v99 < 0x40000001)
  {
    int v105 = *((_DWORD *)this + 686);
    while (1)
    {
      v102 *= 2;
      *((_DWORD *)this + 686) = --v105;
      if (v105) {
        goto LABEL_124;
      }
      uint64_t v108 = *((void *)this + 340);
      *((void *)this + 340) = v108 + 1;
      unint64_t v109 = *((unsigned int *)this + 676);
      if (v108 + 1 >= v109)
      {
        int v110 = 65280;
        unint64_t v111 = v108 + 2;
        *((void *)this + 340) = v111;
        if (v111 >= v109)
        {
LABEL_130:
          int v106 = 255;
          goto LABEL_123;
        }
      }
      else
      {
        int v110 = *(unsigned __int8 *)(*((void *)this + 339) + v108 + 1) << 8;
        unint64_t v111 = v108 + 2;
        *((void *)this + 340) = v111;
        if (v111 >= v109) {
          goto LABEL_130;
        }
      }
      int v106 = *(unsigned __int8 *)(*((void *)this + 339) + v111);
LABEL_123:
      v102 |= v110 | v106;
      int v105 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_124:
      unsigned int v107 = 2 * v99;
      BOOL v43 = v99 >= 0x20000001;
      v99 *= 2;
      if (v43) {
        goto LABEL_132;
      }
    }
  }
  unsigned int v107 = v99;
LABEL_132:
  char v240 = v29;
  char v241 = v28;
  unsigned int v112 = (HIWORD(v107) * v104) & 0xFFFF0000;
  unsigned int v113 = v107 - v112;
  BOOL v114 = v102 >= v112;
  *unsigned int v103 = *((_WORD *)this + ((v104 >> 7) & 0x1FE | v114) + 1376) + v104;
  if (v102 < v112) {
    unsigned int v115 = v112;
  }
  else {
    unsigned int v115 = v113;
  }
  if (v102 < v112) {
    unsigned int v116 = 0;
  }
  else {
    unsigned int v116 = v112;
  }
  *((_DWORD *)this + 683) = v115;
  *((_DWORD *)this + 684) = v102 - v116;
  unsigned int v117 = v98 | (2 * v114);
  if (v117 == 3)
  {
    int v118 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, 0, (_WORD *)this + 1118);
    if (v118 < -3) {
      goto LABEL_145;
    }
    unsigned int v117 = v118 + 3;
  }
  if ((int)v117 < *((_DWORD *)this + 948) - *a7)
  {
    BOOL v236 = (unsigned int *)((char *)this + 2704);
    int v237 = a2;
    int v232 = v31;
    int v233 = v30;
    unint64_t v234 = a5;
    unsigned int v235 = a7;
    uint64_t v231 = a4;
    uint64_t v119 = v117 + 1;
    uint64_t v120 = v117 + 2;
    uint64_t v121 = *((void *)this + 1);
    unsigned int v122 = (char *)this + 8;
    unint64_t v123 = (*((void *)this + 2) - v121) >> 2;
    if ((int)v119 < (int)v123) {
      goto LABEL_180;
    }
    unint64_t v124 = (2 * v120) | 1u;
    if (v124 <= v123)
    {
      if (v124 < v123) {
        *((void *)this + 2) = v121 + 4 * v124;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 8), v124 - v123);
    }
    unint64_t v127 = (char *)*((void *)this + 4);
    uint64_t v126 = (char *)*((void *)this + 5);
    size_t v128 = v124 - (v126 - v127);
    if (v124 <= v126 - v127)
    {
      if (v124 < v126 - v127) {
        *((void *)this + 5) = &v127[v124];
      }
LABEL_180:
      **((unsigned char **)this + 4) = v243;
      *(unsigned char *)(*((void *)this + 4) + v119) = v241;
      uint64_t v148 = (_DWORD *)*((void *)this + 1);
      uint64_t v149 = *((void *)this + 19);
      int v242 = *(_DWORD *)(v149 + 16 * v237);
      if (v240)
      {
        if (!v239)
        {
LABEL_186:
          if ((int)v117 < 1) {
            goto LABEL_239;
          }
          unsigned int v151 = *((unsigned __int16 *)this + 1138);
          unsigned int v152 = *((_DWORD *)this + 683);
          unsigned int v153 = *((_DWORD *)this + 684);
          if (v152 < 0x40000001)
          {
            int v154 = *((_DWORD *)this + 686);
            while (1)
            {
              v153 *= 2;
              *((_DWORD *)this + 686) = --v154;
              if (v154) {
                goto LABEL_191;
              }
              uint64_t v157 = *((void *)this + 340);
              *((void *)this + 340) = v157 + 1;
              unint64_t v158 = *((unsigned int *)this + 676);
              if (v157 + 1 >= v158)
              {
                int v159 = 65280;
                unint64_t v160 = v157 + 2;
                *((void *)this + 340) = v160;
                if (v160 >= v158)
                {
LABEL_197:
                  int v155 = 255;
                  goto LABEL_190;
                }
              }
              else
              {
                int v159 = *(unsigned __int8 *)(*((void *)this + 339) + v157 + 1) << 8;
                unint64_t v160 = v157 + 2;
                *((void *)this + 340) = v160;
                if (v160 >= v158) {
                  goto LABEL_197;
                }
              }
              int v155 = *(unsigned __int8 *)(*((void *)this + 339) + v160);
LABEL_190:
              v153 |= v159 | v155;
              int v154 = 16;
              *((_DWORD *)this + 686) = 16;
LABEL_191:
              unsigned int v156 = 2 * v152;
              BOOL v43 = v152 >= 0x20000001;
              v152 *= 2;
              if (v43) {
                goto LABEL_199;
              }
            }
          }
          unsigned int v156 = *((_DWORD *)this + 683);
LABEL_199:
          unsigned int v161 = (HIWORD(v156) * v151) & 0xFFFF0000;
          unsigned int v162 = v156 - v161;
          if (v153 < v161) {
            unsigned int v163 = 0;
          }
          else {
            unsigned int v163 = (HIWORD(v156) * v151) & 0xFFFF0000;
          }
          *((_DWORD *)this + 684) = v153 - v163;
          *((_WORD *)this + 1138) = *((_WORD *)this + ((v151 >> 7) & 0x1FE | (v153 >= v161)) + 1376) + v151;
          if (v153 < v161) {
            unsigned int v164 = v161;
          }
          else {
            unsigned int v164 = v162;
          }
          *((_DWORD *)this + 683) = v164;
          if (v153 >= v161)
          {
            uint64_t v165 = 1;
            do
              *(unsigned char *)(*((void *)this + 4) + v165++) = 1;
            while (v119 != v165);
            goto LABEL_239;
          }
          if (v117 == 1)
          {
            *(unsigned char *)(*((void *)this + 4) + 1) = 0;
            if (*((unsigned char *)this + 3816))
            {
              int v167 = gcl::tmesh::DecoderImpl::decodeIndex(this, *((_DWORD *)this + 947));
            }
            else
            {
              int v166 = *((_DWORD *)this + 947);
              int v167 = v166 - gcl::ArithmeticDecoder::decodeExpGolomb(v236, 0, (_WORD *)this + 1137);
            }
            *(_DWORD *)(*(void *)v122 + 4) = v167;
LABEL_239:
            if (*((_DWORD *)this + 968)) {
              return 0xFFFFFFFFLL;
            }
            if (v233)
            {
              if (!v232)
              {
LABEL_248:
                unsigned int v125 = (_DWORD *)((char *)this + 3872);
                if (*v234 == 3 || *v234 == 5)
                {
                  uint64_t v186 = *((void *)this + 4);
                  uint64_t v187 = v117 + 1;
                  unsigned int v188 = v235;
                  do
                  {
                    if (*(unsigned char *)(v186 + v187))
                    {
                      int v190 = (*a6)++;
                      *(_DWORD *)(*(void *)v122 + 4 * v187) = v190;
                    }
                    BOOL v189 = v187-- <= 0;
                  }
                  while (!v189);
                }
                else
                {
                  uint64_t v191 = 0;
                  uint64_t v186 = *((void *)this + 4);
                  unsigned int v188 = v235;
                  do
                  {
                    if (*(unsigned char *)(v186 + v191))
                    {
                      int v192 = (*a6)++;
                      *(_DWORD *)(*(void *)v122 + 4 * v191) = v192;
                    }
                    ++v191;
                  }
                  while (v120 != v191);
                }
                uint64_t v193 = 0;
                uint64_t v194 = *((void *)this + 19);
                while (1)
                {
                  int v195 = *(_DWORD *)(*((void *)this + 1) + 4 * v193);
                  if (v195 < 0 || v195 >= (int)((unint64_t)(*((void *)this + 20) - v194) >> 4)) {
                    goto LABEL_146;
                  }
                  if (v120 == ++v193)
                  {
                    int v196 = *v234;
                    if (*v234 > 2)
                    {
                      if (v196 == 3 || v196 == 5)
                      {
                        if (v117 <= 0x7FFFFFFD)
                        {
                          unint64_t v203 = (int *)(v194 + 16 * v237);
                          int v204 = v203[3];
                          int v205 = *v203;
                          uint64_t v206 = v117;
                          do
                          {
                            int v207 = v205;
                            int v205 = *(_DWORD *)(*((void *)this + 1) + 4 * v206);
                            if (*(unsigned char *)(*((void *)this + 4) + v206))
                            {
                              BOOL v208 = (_DWORD *)(*((void *)this + 22) + 12 * v205);
                              *BOOL v208 = v237;
                              v208[1] = v207;
                              v208[2] = v204;
                            }
                            int v204 = v207;
                            BOOL v189 = v206-- <= 0;
                          }
                          while (!v189);
                        }
                      }
                      else if ((int)v120 >= 1)
                      {
                        uint64_t v221 = 0;
                        int v222 = -1;
                        int v223 = -1;
                        do
                        {
                          int v224 = v222;
                          int v222 = *(_DWORD *)(*((void *)this + 1) + 4 * v221);
                          if (*(unsigned char *)(*((void *)this + 4) + v221))
                          {
                            unsigned int v225 = (_DWORD *)(*((void *)this + 22) + 12 * v222);
                            *unsigned int v225 = v237;
                            v225[1] = v224;
                            v225[2] = v223;
                          }
                          ++v221;
                          int v223 = v224;
                        }
                        while (v120 != v221);
                      }
                    }
                    else
                    {
                      unsigned int v197 = (_DWORD *)(v194 + 16 * v237);
                      if (v117 <= 0x7FFFFFFD)
                      {
                        int v198 = v197[1];
                        int v199 = v197[2];
                        uint64_t v200 = 1;
                        do
                        {
                          int v201 = *(_DWORD *)(*((void *)this + 1) + 4 * v200);
                          if (*(unsigned char *)(*((void *)this + 4) + v200))
                          {
                            uint64_t v202 = (_DWORD *)(*((void *)this + 22) + 12 * v201);
                            *uint64_t v202 = v237;
                            v202[1] = v198;
                            v202[2] = v199;
                          }
                          ++v200;
                          int v199 = v198;
                          int v198 = v201;
                        }
                        while (v120 != v200);
                        uint64_t v186 = *((void *)this + 4);
                      }
                      if (!v196 && *(unsigned char *)(v186 + v117))
                      {
                        unsigned int v209 = (_DWORD *)(*((void *)this + 25) + 12 * *(int *)(*((void *)this + 1) + 4 * v117));
                        *unsigned int v209 = v237;
                        v209[1] = *v197;
                        v209[2] = *(_DWORD *)(v194 + 16 * v237 + 12);
                      }
                    }
                    if (*((unsigned char *)this + 3816))
                    {
                      BOOL v210 = *((unsigned char *)this + 3817) == 0;
                      if (*v188 + (int)v119 > *((_DWORD *)this + 948)) {
                        goto LABEL_146;
                      }
                    }
                    else
                    {
                      BOOL v210 = 1;
                      if (*v188 + (int)v119 > *((_DWORD *)this + 948)) {
                        goto LABEL_146;
                      }
                    }
                    uint64_t v211 = *((void *)this + 19);
                    uint64_t v212 = v120 - 1;
                    int v213 = (int *)(*((void *)this + 1) + 4);
                    do
                    {
                      uint64_t v215 = *(v213 - 1);
                      uint64_t v214 = *v213;
                      int v216 = (*v188)++;
                      unint64_t v217 = (_DWORD *)(v231 + 12 * v216);
                      *unint64_t v217 = v237;
                      v217[1] = v215;
                      v217[2] = v214;
                      int v218 = (_DWORD *)(v211 + 16 * v215);
                      uint64_t v219 = v211 + 16 * v214;
                      *(_DWORD *)(v219 + 4) = v215;
                      *(_DWORD *)(v219 + 8) = v237;
                      _DWORD *v218 = v214;
                      v218[3] = v237;
                      if (v210)
                      {
                        uint64_t v220 = *((void *)this + 10);
                        ++*(_DWORD *)(v220 + 4 * v215);
                        ++*(_DWORD *)(v220 + 4 * v214);
                      }
                      ++v213;
                      --v212;
                    }
                    while (v212);
                    return v120;
                  }
                }
              }
              if (*((unsigned char *)this + 3816)) {
                int v242 = gcl::tmesh::DecoderImpl::decodeIndex(this, v237 + 1);
              }
              else {
                int v242 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v236, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)+ v237+ 1;
              }
            }
            v148[v119] = v242;
            goto LABEL_248;
          }
          uint64_t v168 = 1;
          while (1)
          {
            unsigned int v170 = *((_DWORD *)this + 683);
            unsigned int v171 = *((_DWORD *)this + 684);
            if (v170 < 0x40000001) {
              break;
            }
            unsigned int v174 = *((_DWORD *)this + 683);
LABEL_228:
            unsigned int v179 = *((unsigned __int16 *)this + 1139);
            unsigned int v180 = (HIWORD(v174) * v179) & 0xFFFF0000;
            unsigned int v181 = v174 - v180;
            BOOL v182 = v171 >= v180;
            *((_WORD *)this + 1139) = *((_WORD *)this + ((v179 >> 7) & 0x1FE | v182) + 1376) + v179;
            if (v171 < v180) {
              unsigned int v183 = v180;
            }
            else {
              unsigned int v183 = v181;
            }
            if (v171 < v180) {
              unsigned int v180 = 0;
            }
            *((_DWORD *)this + 683) = v183;
            *((_DWORD *)this + 684) = v171 - v180;
            *(unsigned char *)(*((void *)this + 4) + v168) = v182;
            if (!*(unsigned char *)(*((void *)this + 4) + v168))
            {
              if (*((unsigned char *)this + 3816))
              {
                int v169 = gcl::tmesh::DecoderImpl::decodeIndex(this, *((_DWORD *)this + 947));
              }
              else
              {
                int v184 = *((_DWORD *)this + 947);
                int v169 = v184 - gcl::ArithmeticDecoder::decodeExpGolomb(v236, 0, (_WORD *)this + 1137);
              }
              *(_DWORD *)(*(void *)v122 + 4 * v168) = v169;
            }
            if (++v168 == v119) {
              goto LABEL_239;
            }
          }
          int v172 = *((_DWORD *)this + 686);
          while (1)
          {
            v171 *= 2;
            *((_DWORD *)this + 686) = --v172;
            if (v172) {
              goto LABEL_220;
            }
            uint64_t v175 = *((void *)this + 340);
            *((void *)this + 340) = v175 + 1;
            unint64_t v176 = *((unsigned int *)this + 676);
            if (v175 + 1 >= v176)
            {
              int v177 = 65280;
              unint64_t v178 = v175 + 2;
              *((void *)this + 340) = v178;
              if (v178 >= v176)
              {
LABEL_226:
                int v173 = 255;
                goto LABEL_219;
              }
            }
            else
            {
              int v177 = *(unsigned __int8 *)(*((void *)this + 339) + v175 + 1) << 8;
              unint64_t v178 = v175 + 2;
              *((void *)this + 340) = v178;
              if (v178 >= v176) {
                goto LABEL_226;
              }
            }
            int v173 = *(unsigned __int8 *)(*((void *)this + 339) + v178);
LABEL_219:
            v171 |= v177 | v173;
            int v172 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_220:
            unsigned int v174 = 2 * v170;
            BOOL v43 = v170 >= 0x20000001;
            v170 *= 2;
            if (v43) {
              goto LABEL_228;
            }
          }
        }
        if (*((unsigned char *)this + 3816)) {
          int v150 = gcl::tmesh::DecoderImpl::decodeIndex(this, v237 - 1);
        }
        else {
          int v150 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v236, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)
        }
               + v237
               - 1;
      }
      else
      {
        int v150 = *(_DWORD *)(v149 + 16 * v237 + 4);
      }
      _DWORD *v148 = v150;
      goto LABEL_186;
    }
    uint64_t v129 = *((void *)this + 6);
    if (v129 - (uint64_t)v126 >= v128)
    {
      bzero(*((void **)this + 5), v124 - (v126 - v127));
      *((void *)this + 5) = &v127[v124];
      goto LABEL_180;
    }
    unint64_t v130 = v129 - (void)v127;
    uint64_t v131 = 2 * v130;
    if (2 * v130 <= v124) {
      uint64_t v131 = (2 * v120) | 1u;
    }
    if (v130 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v132 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v132 = v131;
    }
    size_t v229 = v132;
    uint64_t v226 = (char *)operator new(v132);
    unint64_t v227 = v126 - v127;
    unsigned int v230 = &v226[v229];
    int v228 = &v226[v124];
    unsigned int v133 = &v226[v126 - v127];
    bzero(v133, v128);
    if (v126 == v127)
    {
      int v135 = v230;
      unsigned int v134 = &v226[v126 - v127];
      uint64_t v136 = v228;
      goto LABEL_178;
    }
    if (v227 < 8)
    {
      unsigned int v134 = v226;
      goto LABEL_175;
    }
    unsigned int v134 = v226;
    if ((unint64_t)(v127 - v226) >= 0x20)
    {
      if (v227 < 0x20)
      {
        unint64_t v137 = 0;
        goto LABEL_170;
      }
      unint64_t v137 = v227 & 0xFFFFFFFFFFFFFFE0;
      __int32 v138 = v126 - 16;
      int v139 = &v226[v126 - 16 - v127];
      unint64_t v140 = v227 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v141 = *(_OWORD *)v138;
        *((_OWORD *)v139 - 1) = *((_OWORD *)v138 - 1);
        *(_OWORD *)int v139 = v141;
        v139 -= 32;
        v138 -= 32;
        v140 -= 32;
      }
      while (v140);
      if (v227 == v137) {
        goto LABEL_177;
      }
      if ((v227 & 0x18) != 0)
      {
LABEL_170:
        v133 -= v227 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v142 = &v126[-v137 - 8];
        unsigned int v143 = (char *)(v142 - v127);
        unint64_t v144 = v137 - (v227 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v145 = *(void *)v142;
          v142 -= 8;
          *(void *)&v143[(void)v226] = v145;
          v143 -= 8;
          v144 += 8;
        }
        while (v144);
        v126 -= v227 & 0xFFFFFFFFFFFFFFF8;
        if (v227 == (v227 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_177;
        }
        goto LABEL_175;
      }
      v133 -= v137;
      v126 -= v137;
    }
LABEL_175:
    int v146 = v133 - 1;
    do
    {
      char v147 = *--v126;
      *v146-- = v147;
    }
    while (v126 != v127);
LABEL_177:
    uint64_t v126 = v127;
    int v135 = v230;
    uint64_t v136 = v228;
LABEL_178:
    *((void *)this + 4) = v134;
    *((void *)this + 5) = v136;
    *((void *)this + 6) = v135;
    if (v126) {
      operator delete(v126);
    }
    goto LABEL_180;
  }
LABEL_145:
  unsigned int v125 = (_DWORD *)((char *)this + 3872);
LABEL_146:
  _DWORD *v125 = 3;
  return 0xFFFFFFFFLL;
}

uint64_t gcl::tmesh::DecoderImpl::decodeResidual(uint64_t result, uint64_t a2, int a3, uint64_t *a4)
{
  char v6 = (_DWORD *)result;
  switch(a3)
  {
    case 0:
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v9 = *a4;
        unsigned int v10 = *(unsigned __int16 *)(*a4 + 2 * v7);
        unsigned int v11 = *(_DWORD *)(a2 + 2732);
        unsigned int v12 = *(_DWORD *)(a2 + 2736);
        if (v11 < 0x40000001)
        {
          int v13 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v12 *= 2;
            *(_DWORD *)(a2 + 2744) = --v13;
            if (v13) {
              goto LABEL_11;
            }
            uint64_t v16 = *(void *)(a2 + 2720);
            *(void *)(a2 + 2720) = v16 + 1;
            unint64_t v17 = *(unsigned int *)(a2 + 2704);
            if (v16 + 1 >= v17)
            {
              int v18 = 65280;
              unint64_t v19 = v16 + 2;
              *(void *)(a2 + 2720) = v19;
              if (v19 >= v17)
              {
LABEL_17:
                int v14 = 255;
                goto LABEL_10;
              }
            }
            else
            {
              int v18 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v16 + 1) << 8;
              unint64_t v19 = v16 + 2;
              *(void *)(a2 + 2720) = v19;
              if (v19 >= v17) {
                goto LABEL_17;
              }
            }
            int v14 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v19);
LABEL_10:
            v12 |= v18 | v14;
            int v13 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_11:
            unsigned int v15 = 2 * v11;
            BOOL v23 = v11 >= 0x20000001;
            v11 *= 2;
            if (v23) {
              goto LABEL_19;
            }
          }
        }
        unsigned int v15 = *(_DWORD *)(a2 + 2732);
LABEL_19:
        int v8 = 0;
        unsigned int v20 = (HIWORD(v15) * v10) & 0xFFFF0000;
        unsigned int v21 = v12 < v20 ? 0 : (HIWORD(v15) * v10) & 0xFFFF0000;
        unsigned int v22 = v12 - v21;
        *(_DWORD *)(a2 + 2736) = v12 - v21;
        BOOL v23 = v12 >= v20;
        unsigned int v24 = (v10 >> 7) & 0x1FE | (v12 >= v20);
        unsigned int v25 = v15 - v20;
        *(_WORD *)(v9 + 2 * v7) = *(_WORD *)(a2 + 2 * v24 + 2752) + v10;
        unsigned int v26 = v23 ? v15 - v20 : (HIWORD(v15) * v10) & 0xFFFF0000;
        *(_DWORD *)(a2 + 2732) = v26;
        if (v23) {
          break;
        }
LABEL_6:
        v6[v7++] = v8;
        if (v7 == 3) {
          return result;
        }
      }
      uint64_t v27 = a4[3];
      unsigned int v28 = *(unsigned __int16 *)(v27 + 2 * v7);
      if (v25 < 0x40000001)
      {
        int v29 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v22 *= 2;
          *(_DWORD *)(a2 + 2744) = --v29;
          if (v29) {
            goto LABEL_31;
          }
          uint64_t v32 = *(void *)(a2 + 2720);
          *(void *)(a2 + 2720) = v32 + 1;
          unint64_t v33 = *(unsigned int *)(a2 + 2704);
          if (v32 + 1 >= v33)
          {
            int v34 = 65280;
            unint64_t v35 = v32 + 2;
            *(void *)(a2 + 2720) = v35;
            if (v35 >= v33)
            {
LABEL_37:
              int v30 = 255;
              goto LABEL_30;
            }
          }
          else
          {
            int v34 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v32 + 1) << 8;
            unint64_t v35 = v32 + 2;
            *(void *)(a2 + 2720) = v35;
            if (v35 >= v33) {
              goto LABEL_37;
            }
          }
          int v30 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v35);
LABEL_30:
          v22 |= v34 | v30;
          int v29 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_31:
          unsigned int v31 = 2 * v25;
          BOOL v23 = v25 >= 0x20000001;
          v25 *= 2;
          if (v23) {
            goto LABEL_39;
          }
        }
      }
      unsigned int v31 = v15 - v20;
LABEL_39:
      unsigned int v36 = (HIWORD(v31) * v28) & 0xFFFF0000;
      *(_WORD *)(v27 + 2 * v7) = *(_WORD *)(a2 + 2 * ((v28 >> 7) & 0x1FE | (v22 >= v36)) + 2752) + v28;
      if (v22 < v36) {
        unsigned int v37 = (HIWORD(v31) * v28) & 0xFFFF0000;
      }
      else {
        unsigned int v37 = v31 - v36;
      }
      if (v22 < v36) {
        unsigned int v38 = 0;
      }
      else {
        unsigned int v38 = v36;
      }
      unsigned int v39 = v22 - v38;
      *(_DWORD *)(a2 + 2732) = v37;
      *(_DWORD *)(a2 + 2736) = v22 - v38;
      unint64_t v40 = (_WORD *)(a4[6] + (v7 << 7));
      unsigned int v41 = (unsigned __int16)*v40;
      if (v37 < 0x40000001)
      {
        int v42 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v39 *= 2;
          *(_DWORD *)(a2 + 2744) = --v42;
          if (v42) {
            goto LABEL_49;
          }
          uint64_t v45 = *(void *)(a2 + 2720);
          *(void *)(a2 + 2720) = v45 + 1;
          unint64_t v46 = *(unsigned int *)(a2 + 2704);
          if (v45 + 1 >= v46)
          {
            int v47 = 65280;
            unint64_t v48 = v45 + 2;
            *(void *)(a2 + 2720) = v48;
            if (v48 >= v46)
            {
LABEL_55:
              int v43 = 255;
              goto LABEL_48;
            }
          }
          else
          {
            int v47 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v45 + 1) << 8;
            unint64_t v48 = v45 + 2;
            *(void *)(a2 + 2720) = v48;
            if (v48 >= v46) {
              goto LABEL_55;
            }
          }
          int v43 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v48);
LABEL_48:
          v39 |= v47 | v43;
          int v42 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_49:
          unsigned int v44 = 2 * v37;
          BOOL v23 = v37 >= 0x20000001;
          v37 *= 2;
          if (v23) {
            goto LABEL_57;
          }
        }
      }
      unsigned int v44 = v37;
LABEL_57:
      unsigned int v49 = (HIWORD(v44) * v41) & 0xFFFF0000;
      unsigned int v50 = v44 - v49;
      BOOL v51 = v39 >= v49;
      _WORD *v40 = *(_WORD *)(a2 + 2 * ((v41 >> 7) & 0x1FE | v51) + 2752) + v41;
      if (v39 >= v49)
      {
        uint64_t v52 = 2;
      }
      else
      {
        unsigned int v50 = v49;
        unsigned int v49 = 0;
        uint64_t v52 = 1;
      }
      unsigned int v53 = v39 - v49;
      *(_DWORD *)(a2 + 2732) = v50;
      *(_DWORD *)(a2 + 2736) = v53;
      unsigned int v54 = (unsigned __int16)v40[v52];
      if (v50 < 0x40000001)
      {
        int v55 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v53 *= 2;
          *(_DWORD *)(a2 + 2744) = --v55;
          if (v55) {
            goto LABEL_64;
          }
          uint64_t v58 = *(void *)(a2 + 2720);
          *(void *)(a2 + 2720) = v58 + 1;
          unint64_t v59 = *(unsigned int *)(a2 + 2704);
          if (v58 + 1 >= v59)
          {
            int v60 = 65280;
            unint64_t v61 = v58 + 2;
            *(void *)(a2 + 2720) = v61;
            if (v61 >= v59)
            {
LABEL_70:
              int v56 = 255;
              goto LABEL_63;
            }
          }
          else
          {
            int v60 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v58 + 1) << 8;
            unint64_t v61 = v58 + 2;
            *(void *)(a2 + 2720) = v61;
            if (v61 >= v59) {
              goto LABEL_70;
            }
          }
          int v56 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v61);
LABEL_63:
          v53 |= v60 | v56;
          int v55 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_64:
          unsigned int v57 = 2 * v50;
          BOOL v23 = v50 >= 0x20000001;
          v50 *= 2;
          if (v23) {
            goto LABEL_72;
          }
        }
      }
      unsigned int v57 = v50;
LABEL_72:
      unsigned int v62 = (HIWORD(v57) * v54) & 0xFFFF0000;
      unsigned int v63 = v57 - v62;
      BOOL v64 = v53 >= v62;
      v40[v52] = *(_WORD *)(a2 + 2 * ((v54 >> 7) & 0x1FE | v64) + 2752) + v54;
      if (v53 < v62) {
        unsigned int v65 = v62;
      }
      else {
        unsigned int v65 = v63;
      }
      if (v53 < v62) {
        unsigned int v66 = 0;
      }
      else {
        unsigned int v66 = v62;
      }
      unsigned int v67 = v53 - v66;
      *(_DWORD *)(a2 + 2732) = v65;
      *(_DWORD *)(a2 + 2736) = v67;
      int v68 = v51 | (2 * v64);
      uint64_t v69 = (v68 + 3);
      unsigned int v70 = (unsigned __int16)v40[v69];
      if (v65 < 0x40000001)
      {
        int v71 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v67 *= 2;
          *(_DWORD *)(a2 + 2744) = --v71;
          if (v71) {
            goto LABEL_82;
          }
          uint64_t v74 = *(void *)(a2 + 2720);
          *(void *)(a2 + 2720) = v74 + 1;
          unint64_t v75 = *(unsigned int *)(a2 + 2704);
          if (v74 + 1 >= v75)
          {
            int v76 = 65280;
            unint64_t v77 = v74 + 2;
            *(void *)(a2 + 2720) = v77;
            if (v77 >= v75)
            {
LABEL_88:
              int v72 = 255;
              goto LABEL_81;
            }
          }
          else
          {
            int v76 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v74 + 1) << 8;
            unint64_t v77 = v74 + 2;
            *(void *)(a2 + 2720) = v77;
            if (v77 >= v75) {
              goto LABEL_88;
            }
          }
          int v72 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v77);
LABEL_81:
          v67 |= v76 | v72;
          int v71 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_82:
          unsigned int v73 = 2 * v65;
          BOOL v23 = v65 >= 0x20000001;
          v65 *= 2;
          if (v23) {
            goto LABEL_90;
          }
        }
      }
      unsigned int v73 = v65;
LABEL_90:
      unsigned int v78 = (HIWORD(v73) * v70) & 0xFFFF0000;
      unsigned int v79 = v73 - v78;
      BOOL v80 = v67 >= v78;
      v40[v69] = *(_WORD *)(a2 + 2 * ((v70 >> 7) & 0x1FE | v80) + 2752) + v70;
      if (v67 < v78) {
        unsigned int v81 = v78;
      }
      else {
        unsigned int v81 = v79;
      }
      if (v67 < v78) {
        unsigned int v82 = 0;
      }
      else {
        unsigned int v82 = v78;
      }
      unsigned int v83 = v67 - v82;
      *(_DWORD *)(a2 + 2732) = v81;
      *(_DWORD *)(a2 + 2736) = v83;
      int v84 = v68 | (4 * v80);
      uint64_t v85 = (v84 + 7);
      unsigned int v86 = (unsigned __int16)v40[v85];
      if (v81 < 0x40000001)
      {
        int v87 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v83 *= 2;
          *(_DWORD *)(a2 + 2744) = --v87;
          if (v87) {
            goto LABEL_100;
          }
          uint64_t v90 = *(void *)(a2 + 2720);
          *(void *)(a2 + 2720) = v90 + 1;
          unint64_t v91 = *(unsigned int *)(a2 + 2704);
          if (v90 + 1 >= v91)
          {
            int v92 = 65280;
            unint64_t v93 = v90 + 2;
            *(void *)(a2 + 2720) = v93;
            if (v93 >= v91)
            {
LABEL_106:
              int v88 = 255;
              goto LABEL_99;
            }
          }
          else
          {
            int v92 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v90 + 1) << 8;
            unint64_t v93 = v90 + 2;
            *(void *)(a2 + 2720) = v93;
            if (v93 >= v91) {
              goto LABEL_106;
            }
          }
          int v88 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v93);
LABEL_99:
          v83 |= v92 | v88;
          int v87 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_100:
          unsigned int v89 = 2 * v81;
          BOOL v23 = v81 >= 0x20000001;
          v81 *= 2;
          if (v23) {
            goto LABEL_108;
          }
        }
      }
      unsigned int v89 = v81;
LABEL_108:
      unsigned int v94 = (HIWORD(v89) * v86) & 0xFFFF0000;
      unsigned int v95 = v89 - v94;
      BOOL v96 = v83 >= v94;
      v40[v85] = *(_WORD *)(a2 + 2 * ((v86 >> 7) & 0x1FE | v96) + 2752) + v86;
      if (v83 < v94) {
        unsigned int v97 = v94;
      }
      else {
        unsigned int v97 = v95;
      }
      if (v83 < v94) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v94;
      }
      unsigned int v99 = v83 - v98;
      *(_DWORD *)(a2 + 2732) = v97;
      *(_DWORD *)(a2 + 2736) = v99;
      int v100 = v84 | (8 * v96);
      uint64_t v101 = (v100 + 15);
      unsigned int v102 = (unsigned __int16)v40[v101];
      if (v97 < 0x40000001)
      {
        int v103 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v99 *= 2;
          *(_DWORD *)(a2 + 2744) = --v103;
          if (v103) {
            goto LABEL_118;
          }
          uint64_t v106 = *(void *)(a2 + 2720);
          *(void *)(a2 + 2720) = v106 + 1;
          unint64_t v107 = *(unsigned int *)(a2 + 2704);
          if (v106 + 1 >= v107)
          {
            int v108 = 65280;
            unint64_t v109 = v106 + 2;
            *(void *)(a2 + 2720) = v109;
            if (v109 >= v107)
            {
LABEL_124:
              int v104 = 255;
              goto LABEL_117;
            }
          }
          else
          {
            int v108 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v106 + 1) << 8;
            unint64_t v109 = v106 + 2;
            *(void *)(a2 + 2720) = v109;
            if (v109 >= v107) {
              goto LABEL_124;
            }
          }
          int v104 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v109);
LABEL_117:
          v99 |= v108 | v104;
          int v103 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_118:
          unsigned int v105 = 2 * v97;
          BOOL v23 = v97 >= 0x20000001;
          v97 *= 2;
          if (v23) {
            goto LABEL_126;
          }
        }
      }
      unsigned int v105 = v97;
LABEL_126:
      unsigned int v110 = (HIWORD(v105) * v102) & 0xFFFF0000;
      unsigned int v111 = v105 - v110;
      BOOL v112 = v99 >= v110;
      v40[v101] = *(_WORD *)(a2 + 2 * ((v102 >> 7) & 0x1FE | v112) + 2752) + v102;
      if (v99 < v110) {
        unsigned int v113 = v110;
      }
      else {
        unsigned int v113 = v111;
      }
      if (v99 < v110) {
        unsigned int v114 = 0;
      }
      else {
        unsigned int v114 = v110;
      }
      unsigned int v115 = v99 - v114;
      *(_DWORD *)(a2 + 2732) = v113;
      *(_DWORD *)(a2 + 2736) = v115;
      int v116 = v100 | (16 * v112);
      uint64_t v117 = (v116 + 31);
      unsigned int v118 = (unsigned __int16)v40[v117];
      if (v113 >= 0x40000001)
      {
        unsigned int v121 = v113;
LABEL_144:
        unsigned int v126 = (HIWORD(v121) * v118) & 0xFFFF0000;
        unsigned int v127 = v121 - v126;
        BOOL v128 = v115 >= v126;
        v40[v117] = *(_WORD *)(a2 + 2 * ((v118 >> 7) & 0x1FE | v128) + 2752) + v118;
        if (v115 < v126) {
          unsigned int v129 = v126;
        }
        else {
          unsigned int v129 = v127;
        }
        if (v115 < v126) {
          unsigned int v130 = 0;
        }
        else {
          unsigned int v130 = v126;
        }
        *(_DWORD *)(a2 + 2732) = v129;
        *(_DWORD *)(a2 + 2736) = v115 - v130;
        int v131 = v116 | (32 * v128);
        if (v131 == 63)
        {
          int32x2_t result = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a2 + 2704), *(_DWORD *)(a4[12] + 4 * v7), (_WORD *)(a4[9] + 2 * v7));
          int v131 = result + 63;
        }
        if (v22 >= v36) {
          int v8 = v131 + 1;
        }
        else {
          int v8 = ~v131;
        }
        goto LABEL_6;
      }
      int v119 = *(_DWORD *)(a2 + 2744);
      while (1)
      {
        v115 *= 2;
        *(_DWORD *)(a2 + 2744) = --v119;
        if (v119) {
          goto LABEL_136;
        }
        uint64_t v122 = *(void *)(a2 + 2720);
        *(void *)(a2 + 2720) = v122 + 1;
        unint64_t v123 = *(unsigned int *)(a2 + 2704);
        if (v122 + 1 >= v123)
        {
          int v124 = 65280;
          unint64_t v125 = v122 + 2;
          *(void *)(a2 + 2720) = v125;
          if (v125 >= v123)
          {
LABEL_142:
            int v120 = 255;
            goto LABEL_135;
          }
        }
        else
        {
          int v124 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v122 + 1) << 8;
          unint64_t v125 = v122 + 2;
          *(void *)(a2 + 2720) = v125;
          if (v125 >= v123) {
            goto LABEL_142;
          }
        }
        int v120 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v125);
LABEL_135:
        v115 |= v124 | v120;
        int v119 = 16;
        *(_DWORD *)(a2 + 2744) = 16;
LABEL_136:
        unsigned int v121 = 2 * v113;
        BOOL v23 = v113 >= 0x20000001;
        v113 *= 2;
        if (v23) {
          goto LABEL_144;
        }
      }
    case 2:
      int v146 = (unsigned int *)(a2 + 2704);
      char v147 = (int *)a4[12];
      int v148 = gcl::ArithmeticDecoder::decodeSignedExpGolomb((unsigned int *)(a2 + 2704), *v147, (_WORD *)a4[3], (_WORD *)a4[9]);
      if (v148 >= 0) {
        unsigned int v149 = v148;
      }
      else {
        unsigned int v149 = -v148;
      }
      unsigned int v150 = v149 >> *v147;
      if (*v147) {
        BOOL v151 = v150 == 0;
      }
      else {
        BOOL v151 = 0;
      }
      if (v151)
      {
        int v152 = -1;
      }
      else
      {
        if (v150 < 2) {
          goto LABEL_334;
        }
        int v152 = 1;
      }
      *v147 += v152;
LABEL_334:
      _DWORD *v6 = v148;
      uint64_t v279 = a4[12];
      int v280 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v146, *(_DWORD *)(v279 + 4), (_WORD *)(a4[3] + 2), (_WORD *)(a4[9] + 2));
      if (v280 >= 0) {
        unsigned int v281 = v280;
      }
      else {
        unsigned int v281 = -v280;
      }
      int v282 = *(_DWORD *)(v279 + 4);
      unsigned int v283 = v281 >> v282;
      if (v282) {
        BOOL v284 = v283 == 0;
      }
      else {
        BOOL v284 = 0;
      }
      if (v284)
      {
        int v285 = -1;
      }
      else
      {
        if (v283 < 2)
        {
LABEL_345:
          v6[1] = v280;
          uint64_t v286 = a4[12];
          int32x2_t result = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v146, *(_DWORD *)(v286 + 8), (_WORD *)(a4[3] + 4), (_WORD *)(a4[9] + 4));
          if ((int)result >= 0) {
            unsigned int v287 = result;
          }
          else {
            unsigned int v287 = -(int)result;
          }
          int v288 = *(_DWORD *)(v286 + 8);
          unsigned int v289 = v287 >> v288;
          if (!v288 || v289)
          {
            if (v289 < 2) {
              goto LABEL_354;
            }
            int v290 = 1;
          }
          else
          {
            int v290 = -1;
          }
          *(_DWORD *)(v286 + 8) = v290 + v288;
          goto LABEL_354;
        }
        int v285 = 1;
      }
      *(_DWORD *)(v279 + 4) = v285 + v282;
      goto LABEL_345;
    case 3:
      int v132 = *(_DWORD *)(a2 + 2688);
      if (v132 <= 0)
      {
        int v134 = 0;
        goto LABEL_357;
      }
      int v133 = 0;
      int v134 = 0;
      unsigned int v135 = *(_DWORD *)(a2 + 2732);
      unsigned int v136 = *(_DWORD *)(a2 + 2736);
      do
      {
        if (v135 < 0x40000001)
        {
          int v140 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v136 *= 2;
            *(_DWORD *)(a2 + 2744) = --v140;
            if (v140) {
              goto LABEL_162;
            }
            uint64_t v142 = *(void *)(a2 + 2720);
            *(void *)(a2 + 2720) = v142 + 1;
            unint64_t v143 = *(unsigned int *)(a2 + 2704);
            if (v142 + 1 >= v143)
            {
              int v144 = 65280;
              unint64_t v145 = v142 + 2;
              *(void *)(a2 + 2720) = v145;
              if (v145 >= v143)
              {
LABEL_168:
                int v141 = 255;
                goto LABEL_161;
              }
            }
            else
            {
              int v144 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v142 + 1) << 8;
              unint64_t v145 = v142 + 2;
              *(void *)(a2 + 2720) = v145;
              if (v145 >= v143) {
                goto LABEL_168;
              }
            }
            int v141 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v145);
LABEL_161:
            v136 |= v144 | v141;
            int v140 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_162:
            unsigned int v137 = 2 * v135;
            BOOL v23 = v135 >= 0x20000001;
            v135 *= 2;
            if (v23) {
              goto LABEL_155;
            }
          }
        }
        unsigned int v137 = v135;
LABEL_155:
        unsigned int v138 = (v137 >> 1) & 0x7FFF0000;
        unsigned int v135 = v137 - v138;
        int v139 = v136 >= v138;
        if (v136 < v138)
        {
          unsigned int v135 = v138;
          unsigned int v138 = 0;
        }
        v136 -= v138;
        *(_DWORD *)(a2 + 2732) = v135;
        *(_DWORD *)(a2 + 2736) = v136;
        v134 += v139 << v133++;
      }
      while (v133 != v132);
LABEL_357:
      *(_DWORD *)int32x2_t result = v134;
      int v291 = *(_DWORD *)(a2 + 2692);
      if (v291 >= 1)
      {
        int v292 = 0;
        int v293 = 0;
        unsigned int v294 = *(_DWORD *)(a2 + 2732);
        unsigned int v295 = *(_DWORD *)(a2 + 2736);
        while (v294 >= 0x40000001)
        {
          unsigned int v296 = v294;
LABEL_360:
          unsigned int v297 = (v296 >> 1) & 0x7FFF0000;
          unsigned int v294 = v296 - v297;
          int v298 = v295 >= v297;
          if (v295 < v297)
          {
            unsigned int v294 = v297;
            unsigned int v297 = 0;
          }
          v295 -= v297;
          *(_DWORD *)(a2 + 2732) = v294;
          *(_DWORD *)(a2 + 2736) = v295;
          v293 += v298 << v292++;
          if (v292 == v291) {
            goto LABEL_375;
          }
        }
        int v299 = *(_DWORD *)(a2 + 2744);
        while (2)
        {
          v295 *= 2;
          *(_DWORD *)(a2 + 2744) = --v299;
          if (v299) {
            goto LABEL_367;
          }
          uint64_t v301 = *(void *)(a2 + 2720);
          *(void *)(a2 + 2720) = v301 + 1;
          unint64_t v302 = *(unsigned int *)(a2 + 2704);
          if (v301 + 1 >= v302)
          {
            int v303 = 65280;
            unint64_t v304 = v301 + 2;
            *(void *)(a2 + 2720) = v304;
            if (v304 >= v302) {
              goto LABEL_373;
            }
          }
          else
          {
            int v303 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v301 + 1) << 8;
            unint64_t v304 = v301 + 2;
            *(void *)(a2 + 2720) = v304;
            if (v304 >= v302)
            {
LABEL_373:
              int v300 = 255;
LABEL_366:
              v295 |= v303 | v300;
              int v299 = 16;
              *(_DWORD *)(a2 + 2744) = 16;
LABEL_367:
              unsigned int v296 = 2 * v294;
              BOOL v23 = v294 >= 0x20000001;
              v294 *= 2;
              if (v23) {
                goto LABEL_360;
              }
              continue;
            }
          }
          break;
        }
        int v300 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v304);
        goto LABEL_366;
      }
      int v293 = 0;
LABEL_375:
      *(_DWORD *)(result + 4) = v293;
      int v305 = *(_DWORD *)(a2 + 2696);
      if (v305 < 1)
      {
        int32x2_t result = 0;
        v6[2] = 0;
        return result;
      }
      int v306 = 0;
      LODWORD(result) = 0;
      unsigned int v307 = *(_DWORD *)(a2 + 2732);
      unsigned int v308 = *(_DWORD *)(a2 + 2736);
      while (2)
      {
        if (v307 < 0x40000001)
        {
          int v312 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v308 *= 2;
            *(_DWORD *)(a2 + 2744) = --v312;
            if (v312) {
              goto LABEL_385;
            }
            uint64_t v314 = *(void *)(a2 + 2720);
            *(void *)(a2 + 2720) = v314 + 1;
            unint64_t v315 = *(unsigned int *)(a2 + 2704);
            if (v314 + 1 >= v315)
            {
              int v316 = 65280;
              unint64_t v317 = v314 + 2;
              *(void *)(a2 + 2720) = v317;
              if (v317 >= v315)
              {
LABEL_391:
                int v313 = 255;
                goto LABEL_384;
              }
            }
            else
            {
              int v316 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v314 + 1) << 8;
              unint64_t v317 = v314 + 2;
              *(void *)(a2 + 2720) = v317;
              if (v317 >= v315) {
                goto LABEL_391;
              }
            }
            int v313 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v317);
LABEL_384:
            v308 |= v316 | v313;
            int v312 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_385:
            unsigned int v309 = 2 * v307;
            BOOL v23 = v307 >= 0x20000001;
            v307 *= 2;
            if (v23) {
              goto LABEL_378;
            }
          }
        }
        unsigned int v309 = v307;
LABEL_378:
        unsigned int v310 = (v309 >> 1) & 0x7FFF0000;
        unsigned int v307 = v309 - v310;
        int v311 = v308 >= v310;
        if (v308 < v310)
        {
          unsigned int v307 = v310;
          unsigned int v310 = 0;
        }
        v308 -= v310;
        *(_DWORD *)(a2 + 2732) = v307;
        *(_DWORD *)(a2 + 2736) = v308;
        int32x2_t result = ((v311 << v306++) + result);
        if (v306 != v305) {
          continue;
        }
        break;
      }
LABEL_354:
      v6[2] = result;
      return result;
    case 4:
      uint64_t v153 = 0;
      __int32 v318 = (unsigned int *)(a2 + 2704);
      break;
    default:
      return result;
  }
  while (1)
  {
    uint64_t v156 = *a4;
    unsigned int v157 = *(unsigned __int16 *)(*a4 + 2 * v153);
    unsigned int v158 = *(_DWORD *)(a2 + 2732);
    unsigned int v159 = *(_DWORD *)(a2 + 2736);
    if (v158 < 0x40000001)
    {
      int v160 = *(_DWORD *)(a2 + 2744);
      while (1)
      {
        v159 *= 2;
        *(_DWORD *)(a2 + 2744) = --v160;
        if (v160) {
          goto LABEL_189;
        }
        uint64_t v163 = *(void *)(a2 + 2720);
        *(void *)(a2 + 2720) = v163 + 1;
        unint64_t v164 = *(unsigned int *)(a2 + 2704);
        if (v163 + 1 >= v164)
        {
          int v165 = 65280;
          unint64_t v166 = v163 + 2;
          *(void *)(a2 + 2720) = v166;
          if (v166 >= v164)
          {
LABEL_195:
            int v161 = 255;
            goto LABEL_188;
          }
        }
        else
        {
          int v165 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v163 + 1) << 8;
          unint64_t v166 = v163 + 2;
          *(void *)(a2 + 2720) = v166;
          if (v166 >= v164) {
            goto LABEL_195;
          }
        }
        int v161 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v166);
LABEL_188:
        v159 |= v165 | v161;
        int v160 = 16;
        *(_DWORD *)(a2 + 2744) = 16;
LABEL_189:
        unsigned int v162 = 2 * v158;
        BOOL v23 = v158 >= 0x20000001;
        v158 *= 2;
        if (v23) {
          goto LABEL_197;
        }
      }
    }
    unsigned int v162 = *(_DWORD *)(a2 + 2732);
LABEL_197:
    int v155 = 0;
    unsigned int v167 = (HIWORD(v162) * v157) & 0xFFFF0000;
    unsigned int v168 = v159 < v167 ? 0 : (HIWORD(v162) * v157) & 0xFFFF0000;
    unsigned int v169 = v159 - v168;
    *(_DWORD *)(a2 + 2736) = v159 - v168;
    BOOL v170 = v159 >= v167;
    unsigned int v171 = (v157 >> 7) & 0x1FE | (v159 >= v167);
    unsigned int v172 = v162 - v167;
    *(_WORD *)(v156 + 2 * v153) = *(_WORD *)(a2 + 2 * v171 + 2752) + v157;
    unsigned int v173 = v170 ? v162 - v167 : (HIWORD(v162) * v157) & 0xFFFF0000;
    *(_DWORD *)(a2 + 2732) = v173;
    if (v170) {
      break;
    }
LABEL_184:
    v6[v153++] = v155;
    if (v153 == 3) {
      return result;
    }
  }
  uint64_t v174 = a4[3];
  unsigned int v175 = *(unsigned __int16 *)(v174 + 2 * v153);
  if (v172 < 0x40000001)
  {
    int v176 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v169 *= 2;
      *(_DWORD *)(a2 + 2744) = --v176;
      if (v176) {
        goto LABEL_209;
      }
      uint64_t v179 = *(void *)(a2 + 2720);
      *(void *)(a2 + 2720) = v179 + 1;
      unint64_t v180 = *(unsigned int *)(a2 + 2704);
      if (v179 + 1 >= v180)
      {
        int v181 = 65280;
        unint64_t v182 = v179 + 2;
        *(void *)(a2 + 2720) = v182;
        if (v182 >= v180)
        {
LABEL_215:
          int v177 = 255;
          goto LABEL_208;
        }
      }
      else
      {
        int v181 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v179 + 1) << 8;
        unint64_t v182 = v179 + 2;
        *(void *)(a2 + 2720) = v182;
        if (v182 >= v180) {
          goto LABEL_215;
        }
      }
      int v177 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v182);
LABEL_208:
      v169 |= v181 | v177;
      int v176 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_209:
      unsigned int v178 = 2 * v172;
      BOOL v23 = v172 >= 0x20000001;
      v172 *= 2;
      if (v23) {
        goto LABEL_217;
      }
    }
  }
  unsigned int v178 = v162 - v167;
LABEL_217:
  unsigned int v183 = (HIWORD(v178) * v175) & 0xFFFF0000;
  *(_WORD *)(v174 + 2 * v153) = *(_WORD *)(a2 + 2 * ((v175 >> 7) & 0x1FE | (v169 >= v183)) + 2752) + v175;
  if (v169 < v183) {
    unsigned int v184 = (HIWORD(v178) * v175) & 0xFFFF0000;
  }
  else {
    unsigned int v184 = v178 - v183;
  }
  if (v169 < v183) {
    unsigned int v185 = 0;
  }
  else {
    unsigned int v185 = (HIWORD(v178) * v175) & 0xFFFF0000;
  }
  unsigned int v186 = v169 - v185;
  *(_DWORD *)(a2 + 2732) = v184;
  *(_DWORD *)(a2 + 2736) = v169 - v185;
  uint64_t v187 = (_WORD *)(a4[6] + (v153 << 7));
  unsigned int v188 = (unsigned __int16)*v187;
  if (v184 < 0x40000001)
  {
    int v189 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v186 *= 2;
      *(_DWORD *)(a2 + 2744) = --v189;
      if (v189) {
        goto LABEL_227;
      }
      uint64_t v192 = *(void *)(a2 + 2720);
      *(void *)(a2 + 2720) = v192 + 1;
      unint64_t v193 = *(unsigned int *)(a2 + 2704);
      if (v192 + 1 >= v193)
      {
        int v194 = 65280;
        unint64_t v195 = v192 + 2;
        *(void *)(a2 + 2720) = v195;
        if (v195 >= v193)
        {
LABEL_233:
          int v190 = 255;
          goto LABEL_226;
        }
      }
      else
      {
        int v194 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v192 + 1) << 8;
        unint64_t v195 = v192 + 2;
        *(void *)(a2 + 2720) = v195;
        if (v195 >= v193) {
          goto LABEL_233;
        }
      }
      int v190 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v195);
LABEL_226:
      v186 |= v194 | v190;
      int v189 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_227:
      unsigned int v191 = 2 * v184;
      BOOL v23 = v184 >= 0x20000001;
      v184 *= 2;
      if (v23) {
        goto LABEL_235;
      }
    }
  }
  unsigned int v191 = v184;
LABEL_235:
  unsigned int v196 = (HIWORD(v191) * v188) & 0xFFFF0000;
  unsigned int v197 = v191 - v196;
  BOOL v198 = v186 >= v196;
  *uint64_t v187 = *(_WORD *)(a2 + 2 * ((v188 >> 7) & 0x1FE | v198) + 2752) + v188;
  if (v186 >= v196)
  {
    unsigned int v199 = v196;
  }
  else
  {
    unsigned int v197 = v196;
    unsigned int v199 = 0;
  }
  unsigned int v200 = v186 - v199;
  *(_DWORD *)(a2 + 2732) = v197;
  *(_DWORD *)(a2 + 2736) = v200;
  uint64_t v201 = (v198 & 0x7FFFFFFu) + 1;
  unsigned int v202 = (unsigned __int16)v187[v201];
  if (v197 < 0x40000001)
  {
    int v203 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v200 *= 2;
      *(_DWORD *)(a2 + 2744) = --v203;
      if (v203) {
        goto LABEL_242;
      }
      uint64_t v206 = *(void *)(a2 + 2720);
      *(void *)(a2 + 2720) = v206 + 1;
      unint64_t v207 = *(unsigned int *)(a2 + 2704);
      if (v206 + 1 >= v207)
      {
        int v208 = 65280;
        unint64_t v209 = v206 + 2;
        *(void *)(a2 + 2720) = v209;
        if (v209 >= v207)
        {
LABEL_248:
          int v204 = 255;
          goto LABEL_241;
        }
      }
      else
      {
        int v208 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v206 + 1) << 8;
        unint64_t v209 = v206 + 2;
        *(void *)(a2 + 2720) = v209;
        if (v209 >= v207) {
          goto LABEL_248;
        }
      }
      int v204 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v209);
LABEL_241:
      v200 |= v208 | v204;
      int v203 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_242:
      unsigned int v205 = 2 * v197;
      BOOL v23 = v197 >= 0x20000001;
      v197 *= 2;
      if (v23) {
        goto LABEL_250;
      }
    }
  }
  unsigned int v205 = v197;
LABEL_250:
  int v210 = 32 * v198;
  unsigned int v211 = (HIWORD(v205) * v202) & 0xFFFF0000;
  BOOL v212 = v200 >= v211;
  v187[v201] = *(_WORD *)(a2 + 2 * ((v202 >> 7) & 0x1FE | v212) + 2752) + v202;
  if (v200 < v211) {
    unsigned int v213 = (HIWORD(v205) * v202) & 0xFFFF0000;
  }
  else {
    unsigned int v213 = v205 - v211;
  }
  if (v200 < v211) {
    unsigned int v211 = 0;
  }
  unsigned int v214 = v200 - v211;
  *(_DWORD *)(a2 + 2732) = v213;
  *(_DWORD *)(a2 + 2736) = v214;
  unsigned int v215 = v210 | (16 * v212);
  uint64_t v216 = (v215 >> 4) + 3;
  unsigned int v217 = (unsigned __int16)v187[v216];
  if (v213 < 0x40000001)
  {
    int v218 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v214 *= 2;
      *(_DWORD *)(a2 + 2744) = --v218;
      if (v218) {
        goto LABEL_259;
      }
      uint64_t v221 = *(void *)(a2 + 2720);
      *(void *)(a2 + 2720) = v221 + 1;
      unint64_t v222 = *(unsigned int *)(a2 + 2704);
      if (v221 + 1 >= v222)
      {
        int v223 = 65280;
        unint64_t v224 = v221 + 2;
        *(void *)(a2 + 2720) = v224;
        if (v224 >= v222)
        {
LABEL_265:
          int v219 = 255;
          goto LABEL_258;
        }
      }
      else
      {
        int v223 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v221 + 1) << 8;
        unint64_t v224 = v221 + 2;
        *(void *)(a2 + 2720) = v224;
        if (v224 >= v222) {
          goto LABEL_265;
        }
      }
      int v219 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v224);
LABEL_258:
      v214 |= v223 | v219;
      int v218 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_259:
      unsigned int v220 = 2 * v213;
      BOOL v23 = v213 >= 0x20000001;
      v213 *= 2;
      if (v23) {
        goto LABEL_267;
      }
    }
  }
  unsigned int v220 = v213;
LABEL_267:
  unsigned int v225 = (HIWORD(v220) * v217) & 0xFFFF0000;
  BOOL v226 = v214 >= v225;
  v187[v216] = *(_WORD *)(a2 + 2 * ((v217 >> 7) & 0x1FE | v226) + 2752) + v217;
  if (v214 < v225) {
    unsigned int v227 = (HIWORD(v220) * v217) & 0xFFFF0000;
  }
  else {
    unsigned int v227 = v220 - v225;
  }
  if (v214 < v225) {
    unsigned int v228 = 0;
  }
  else {
    unsigned int v228 = (HIWORD(v220) * v217) & 0xFFFF0000;
  }
  unsigned int v229 = v214 - v228;
  *(_DWORD *)(a2 + 2732) = v227;
  *(_DWORD *)(a2 + 2736) = v229;
  unsigned int v230 = v215 | (8 * v226);
  uint64_t v231 = (v230 >> 3) + 7;
  unsigned int v232 = (unsigned __int16)v187[v231];
  if (v227 < 0x40000001)
  {
    int v233 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v229 *= 2;
      *(_DWORD *)(a2 + 2744) = --v233;
      if (v233) {
        goto LABEL_277;
      }
      uint64_t v236 = *(void *)(a2 + 2720);
      *(void *)(a2 + 2720) = v236 + 1;
      unint64_t v237 = *(unsigned int *)(a2 + 2704);
      if (v236 + 1 >= v237)
      {
        int v238 = 65280;
        unint64_t v239 = v236 + 2;
        *(void *)(a2 + 2720) = v239;
        if (v239 >= v237)
        {
LABEL_283:
          int v234 = 255;
          goto LABEL_276;
        }
      }
      else
      {
        int v238 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v236 + 1) << 8;
        unint64_t v239 = v236 + 2;
        *(void *)(a2 + 2720) = v239;
        if (v239 >= v237) {
          goto LABEL_283;
        }
      }
      int v234 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v239);
LABEL_276:
      v229 |= v238 | v234;
      int v233 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_277:
      unsigned int v235 = 2 * v227;
      BOOL v23 = v227 >= 0x20000001;
      v227 *= 2;
      if (v23) {
        goto LABEL_285;
      }
    }
  }
  unsigned int v235 = v227;
LABEL_285:
  unsigned int v240 = (HIWORD(v235) * v232) & 0xFFFF0000;
  BOOL v241 = v229 >= v240;
  v187[v231] = *(_WORD *)(a2 + 2 * ((v232 >> 7) & 0x1FE | v241) + 2752) + v232;
  if (v229 < v240) {
    unsigned int v242 = (HIWORD(v235) * v232) & 0xFFFF0000;
  }
  else {
    unsigned int v242 = v235 - v240;
  }
  if (v229 < v240) {
    unsigned int v243 = 0;
  }
  else {
    unsigned int v243 = (HIWORD(v235) * v232) & 0xFFFF0000;
  }
  unsigned int v244 = v229 - v243;
  *(_DWORD *)(a2 + 2732) = v242;
  *(_DWORD *)(a2 + 2736) = v244;
  unsigned int v245 = v230 | (4 * v241);
  uint64_t v246 = (v245 >> 2) + 15;
  unsigned int v247 = (unsigned __int16)v187[v246];
  if (v242 < 0x40000001)
  {
    int v248 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v244 *= 2;
      *(_DWORD *)(a2 + 2744) = --v248;
      if (v248) {
        goto LABEL_295;
      }
      uint64_t v251 = *(void *)(a2 + 2720);
      *(void *)(a2 + 2720) = v251 + 1;
      unint64_t v252 = *(unsigned int *)(a2 + 2704);
      if (v251 + 1 >= v252)
      {
        int v253 = 65280;
        unint64_t v254 = v251 + 2;
        *(void *)(a2 + 2720) = v254;
        if (v254 >= v252)
        {
LABEL_301:
          int v249 = 255;
          goto LABEL_294;
        }
      }
      else
      {
        int v253 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v251 + 1) << 8;
        unint64_t v254 = v251 + 2;
        *(void *)(a2 + 2720) = v254;
        if (v254 >= v252) {
          goto LABEL_301;
        }
      }
      int v249 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v254);
LABEL_294:
      v244 |= v253 | v249;
      int v248 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_295:
      unsigned int v250 = 2 * v242;
      BOOL v23 = v242 >= 0x20000001;
      v242 *= 2;
      if (v23) {
        goto LABEL_303;
      }
    }
  }
  unsigned int v250 = v242;
LABEL_303:
  unsigned int v255 = (HIWORD(v250) * v247) & 0xFFFF0000;
  BOOL v256 = v244 >= v255;
  v187[v246] = *(_WORD *)(a2 + 2 * ((v247 >> 7) & 0x1FE | v256) + 2752) + v247;
  if (v244 < v255) {
    unsigned int v257 = (HIWORD(v250) * v247) & 0xFFFF0000;
  }
  else {
    unsigned int v257 = v250 - v255;
  }
  if (v244 < v255) {
    unsigned int v258 = 0;
  }
  else {
    unsigned int v258 = (HIWORD(v250) * v247) & 0xFFFF0000;
  }
  unsigned int v259 = v244 - v258;
  *(_DWORD *)(a2 + 2732) = v257;
  *(_DWORD *)(a2 + 2736) = v259;
  unsigned int v260 = v245 | (2 * v256);
  uint64_t v261 = (v260 >> 1) + 31;
  unsigned int v262 = (unsigned __int16)v187[v261];
  if (v257 < 0x40000001)
  {
    int v263 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v259 *= 2;
      *(_DWORD *)(a2 + 2744) = --v263;
      if (v263) {
        goto LABEL_313;
      }
      uint64_t v266 = *(void *)(a2 + 2720);
      *(void *)(a2 + 2720) = v266 + 1;
      unint64_t v267 = *(unsigned int *)(a2 + 2704);
      if (v266 + 1 >= v267)
      {
        int v268 = 65280;
        unint64_t v269 = v266 + 2;
        *(void *)(a2 + 2720) = v269;
        if (v269 >= v267)
        {
LABEL_319:
          int v264 = 255;
          goto LABEL_312;
        }
      }
      else
      {
        int v268 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v266 + 1) << 8;
        unint64_t v269 = v266 + 2;
        *(void *)(a2 + 2720) = v269;
        if (v269 >= v267) {
          goto LABEL_319;
        }
      }
      int v264 = *(unsigned __int8 *)(*(void *)(a2 + 2712) + v269);
LABEL_312:
      v259 |= v268 | v264;
      int v263 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_313:
      unsigned int v265 = 2 * v257;
      BOOL v23 = v257 >= 0x20000001;
      v257 *= 2;
      if (v23) {
        goto LABEL_321;
      }
    }
  }
  unsigned int v265 = v257;
LABEL_321:
  unsigned int v270 = (HIWORD(v265) * v262) & 0xFFFF0000;
  unsigned int v271 = v265 - v270;
  BOOL v272 = v259 >= v270;
  v187[v261] = *(_WORD *)(a2 + 2 * ((v262 >> 7) & 0x1FE | v272) + 2752) + v262;
  if (v259 < v270) {
    unsigned int v273 = v270;
  }
  else {
    unsigned int v273 = v271;
  }
  if (v259 < v270) {
    unsigned int v274 = 0;
  }
  else {
    unsigned int v274 = v270;
  }
  *(_DWORD *)(a2 + 2732) = v273;
  *(_DWORD *)(a2 + 2736) = v259 - v274;
  int v275 = v260 | v272;
  if ((v260 | v272) == 0x3F)
  {
    uint64_t v276 = a4[12];
    int32x2_t result = gcl::ArithmeticDecoder::decodeExpGolomb(v318, *(_DWORD *)(v276 + 4 * v153), (_WORD *)(a4[9] + 2 * v153));
    int v275 = result + 63;
    int v277 = *(_DWORD *)(v276 + 4 * v153);
    int v278 = ((int)result + 63) >> v277;
    if (v277 && !v278)
    {
      int v154 = -1;
LABEL_180:
      *(_DWORD *)(v276 + 4 * v153) = v154 + v277;
      goto LABEL_181;
    }
    if (v278 >= 2)
    {
      int v154 = 1;
      goto LABEL_180;
    }
  }
LABEL_181:
  if (v169 >= v183) {
    int v155 = v275 + 1;
  }
  else {
    int v155 = ~v275;
  }
  goto LABEL_184;
}

uint64_t gcl::tmesh::DecoderImpl::decodeIndex(gcl::tmesh::DecoderImpl *this, int a2)
{
  unint64_t v3 = (unsigned int *)((char *)this + 2704);
  unsigned int v4 = *((unsigned __int16 *)this + 1119);
  unsigned int v5 = *((_DWORD *)this + 683);
  unsigned int v6 = *((_DWORD *)this + 684);
  if (v5 < 0x40000001)
  {
    int v7 = *((_DWORD *)this + 686);
    while (1)
    {
      v6 *= 2;
      *((_DWORD *)this + 686) = --v7;
      if (v7) {
        goto LABEL_5;
      }
      uint64_t v10 = *((void *)this + 340);
      *((void *)this + 340) = v10 + 1;
      unint64_t v11 = *((unsigned int *)this + 676);
      if (v10 + 1 >= v11)
      {
        int v12 = 65280;
        unint64_t v13 = v10 + 2;
        *((void *)this + 340) = v13;
        if (v13 >= v11)
        {
LABEL_11:
          int v8 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        int v12 = *(unsigned __int8 *)(*((void *)this + 339) + v10 + 1) << 8;
        unint64_t v13 = v10 + 2;
        *((void *)this + 340) = v13;
        if (v13 >= v11) {
          goto LABEL_11;
        }
      }
      int v8 = *(unsigned __int8 *)(*((void *)this + 339) + v13);
LABEL_4:
      v6 |= v12 | v8;
      int v7 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_5:
      unsigned int v9 = 2 * v5;
      BOOL v30 = v5 >= 0x20000001;
      v5 *= 2;
      if (v30) {
        goto LABEL_13;
      }
    }
  }
  unsigned int v9 = *((_DWORD *)this + 683);
LABEL_13:
  unsigned int v14 = (HIWORD(v9) * v4) & 0xFFFF0000;
  unsigned int v15 = v9 - v14;
  if (v6 < v14) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = (HIWORD(v9) * v4) & 0xFFFF0000;
  }
  unsigned int v17 = v6 - v16;
  *((_DWORD *)this + 684) = v17;
  *((_WORD *)this + 1119) = *((_WORD *)this + ((v4 >> 7) & 0x1FE | (v6 >= v14)) + 1376) + v4;
  if (v6 < v14) {
    unsigned int v18 = (HIWORD(v9) * v4) & 0xFFFF0000;
  }
  else {
    unsigned int v18 = v9 - v14;
  }
  *((_DWORD *)this + 683) = v18;
  if (v6 < v14) {
    return gcl::ArithmeticDecoder::decodeSignedExpGolomb(v3, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)+ a2;
  }
  unsigned int v19 = *((unsigned __int16 *)this + 1140);
  if (v15 < 0x40000001)
  {
    int v20 = *((_DWORD *)this + 686);
    while (1)
    {
      v17 *= 2;
      *((_DWORD *)this + 686) = --v20;
      if (v20) {
        goto LABEL_25;
      }
      uint64_t v23 = *((void *)this + 340);
      *((void *)this + 340) = v23 + 1;
      unint64_t v24 = *((unsigned int *)this + 676);
      if (v23 + 1 >= v24)
      {
        int v25 = 65280;
        unint64_t v26 = v23 + 2;
        *((void *)this + 340) = v26;
        if (v26 >= v24)
        {
LABEL_31:
          int v21 = 255;
          goto LABEL_24;
        }
      }
      else
      {
        int v25 = *(unsigned __int8 *)(*((void *)this + 339) + v23 + 1) << 8;
        unint64_t v26 = v23 + 2;
        *((void *)this + 340) = v26;
        if (v26 >= v24) {
          goto LABEL_31;
        }
      }
      int v21 = *(unsigned __int8 *)(*((void *)this + 339) + v26);
LABEL_24:
      v17 |= v25 | v21;
      int v20 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_25:
      unsigned int v22 = 2 * v15;
      BOOL v30 = v15 >= 0x20000001;
      v15 *= 2;
      if (v30) {
        goto LABEL_33;
      }
    }
  }
  unsigned int v22 = v9 - v14;
LABEL_33:
  unsigned int v28 = (HIWORD(v22) * v19) & 0xFFFF0000;
  unsigned int v29 = v22 - v28;
  BOOL v30 = v17 >= v28;
  BOOL v31 = v17 >= v28;
  uint64_t v32 = (char *)this + 2280;
  *((_WORD *)this + 1140) = *((_WORD *)this + ((v19 >> 7) & 0x1FE | v31) + 1376) + v19;
  if (v17 >= v28)
  {
    unsigned int v33 = v28;
  }
  else
  {
    unsigned int v29 = v28;
    unsigned int v33 = 0;
  }
  uint64_t v34 = 2;
  if (v30) {
    uint64_t v34 = 4;
  }
  unsigned int v35 = v17 - v33;
  *((_DWORD *)this + 683) = v29;
  *((_DWORD *)this + 684) = v35;
  unsigned int v36 = &v32[v34];
  unsigned int v37 = *(unsigned __int16 *)&v32[v34];
  if (v29 < 0x40000001)
  {
    int v38 = *((_DWORD *)this + 686);
    while (1)
    {
      v35 *= 2;
      *((_DWORD *)this + 686) = --v38;
      if (v38) {
        goto LABEL_42;
      }
      uint64_t v41 = *((void *)this + 340);
      *((void *)this + 340) = v41 + 1;
      unint64_t v42 = *((unsigned int *)this + 676);
      if (v41 + 1 >= v42)
      {
        int v43 = 65280;
        unint64_t v44 = v41 + 2;
        *((void *)this + 340) = v44;
        if (v44 >= v42)
        {
LABEL_48:
          int v39 = 255;
          goto LABEL_41;
        }
      }
      else
      {
        int v43 = *(unsigned __int8 *)(*((void *)this + 339) + v41 + 1) << 8;
        unint64_t v44 = v41 + 2;
        *((void *)this + 340) = v44;
        if (v44 >= v42) {
          goto LABEL_48;
        }
      }
      int v39 = *(unsigned __int8 *)(*((void *)this + 339) + v44);
LABEL_41:
      v35 |= v43 | v39;
      int v38 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_42:
      unsigned int v40 = 2 * v29;
      BOOL v30 = v29 >= 0x20000001;
      v29 *= 2;
      if (v30) {
        goto LABEL_50;
      }
    }
  }
  unsigned int v40 = v29;
LABEL_50:
  unsigned int v45 = (HIWORD(v40) * v37) & 0xFFFF0000;
  unsigned int v46 = v40 - v45;
  BOOL v47 = v35 >= v45;
  *(_WORD *)unsigned int v36 = *((_WORD *)this + ((v37 >> 7) & 0x1FE | v47) + 1376) + v37;
  if (v35 < v45) {
    unsigned int v48 = v45;
  }
  else {
    unsigned int v48 = v46;
  }
  if (v35 < v45) {
    unsigned int v49 = 0;
  }
  else {
    unsigned int v49 = v45;
  }
  unsigned int v50 = v35 - v49;
  *((_DWORD *)this + 683) = v48;
  *((_DWORD *)this + 684) = v50;
  int v51 = v31 | (2 * v47);
  uint64_t v52 = (_WORD *)((char *)this + 2 * (v51 + 3) + 2280);
  unsigned int v53 = (unsigned __int16)*v52;
  if (v48 < 0x40000001)
  {
    int v54 = *((_DWORD *)this + 686);
    while (1)
    {
      v50 *= 2;
      *((_DWORD *)this + 686) = --v54;
      if (v54) {
        goto LABEL_60;
      }
      uint64_t v57 = *((void *)this + 340);
      *((void *)this + 340) = v57 + 1;
      unint64_t v58 = *((unsigned int *)this + 676);
      if (v57 + 1 >= v58)
      {
        int v59 = 65280;
        unint64_t v60 = v57 + 2;
        *((void *)this + 340) = v60;
        if (v60 >= v58)
        {
LABEL_66:
          int v55 = 255;
          goto LABEL_59;
        }
      }
      else
      {
        int v59 = *(unsigned __int8 *)(*((void *)this + 339) + v57 + 1) << 8;
        unint64_t v60 = v57 + 2;
        *((void *)this + 340) = v60;
        if (v60 >= v58) {
          goto LABEL_66;
        }
      }
      int v55 = *(unsigned __int8 *)(*((void *)this + 339) + v60);
LABEL_59:
      v50 |= v59 | v55;
      int v54 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_60:
      unsigned int v56 = 2 * v48;
      BOOL v30 = v48 >= 0x20000001;
      v48 *= 2;
      if (v30) {
        goto LABEL_68;
      }
    }
  }
  unsigned int v56 = v48;
LABEL_68:
  unsigned int v61 = (HIWORD(v56) * v53) & 0xFFFF0000;
  unsigned int v62 = v56 - v61;
  BOOL v63 = v50 >= v61;
  *uint64_t v52 = *((_WORD *)this + ((v53 >> 7) & 0x1FE | v63) + 1376) + v53;
  if (v50 < v61) {
    unsigned int v64 = v61;
  }
  else {
    unsigned int v64 = v62;
  }
  if (v50 < v61) {
    unsigned int v65 = 0;
  }
  else {
    unsigned int v65 = v61;
  }
  unsigned int v66 = v50 - v65;
  *((_DWORD *)this + 683) = v64;
  *((_DWORD *)this + 684) = v66;
  int v67 = v51 | (4 * v63);
  int v68 = (_WORD *)((char *)this + 2 * (v67 + 7) + 2280);
  unsigned int v69 = (unsigned __int16)*v68;
  if (v64 < 0x40000001)
  {
    int v70 = *((_DWORD *)this + 686);
    while (1)
    {
      v66 *= 2;
      *((_DWORD *)this + 686) = --v70;
      if (v70) {
        goto LABEL_78;
      }
      uint64_t v73 = *((void *)this + 340);
      *((void *)this + 340) = v73 + 1;
      unint64_t v74 = *((unsigned int *)this + 676);
      if (v73 + 1 >= v74)
      {
        int v75 = 65280;
        unint64_t v76 = v73 + 2;
        *((void *)this + 340) = v76;
        if (v76 >= v74)
        {
LABEL_84:
          int v71 = 255;
          goto LABEL_77;
        }
      }
      else
      {
        int v75 = *(unsigned __int8 *)(*((void *)this + 339) + v73 + 1) << 8;
        unint64_t v76 = v73 + 2;
        *((void *)this + 340) = v76;
        if (v76 >= v74) {
          goto LABEL_84;
        }
      }
      int v71 = *(unsigned __int8 *)(*((void *)this + 339) + v76);
LABEL_77:
      v66 |= v75 | v71;
      int v70 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_78:
      unsigned int v72 = 2 * v64;
      BOOL v30 = v64 >= 0x20000001;
      v64 *= 2;
      if (v30) {
        goto LABEL_86;
      }
    }
  }
  unsigned int v72 = v64;
LABEL_86:
  unsigned int v77 = (HIWORD(v72) * v69) & 0xFFFF0000;
  unsigned int v78 = v72 - v77;
  BOOL v79 = v66 >= v77;
  _WORD *v68 = *((_WORD *)this + ((v69 >> 7) & 0x1FE | v79) + 1376) + v69;
  if (v66 < v77) {
    unsigned int v80 = v77;
  }
  else {
    unsigned int v80 = v78;
  }
  if (v66 < v77) {
    unsigned int v81 = 0;
  }
  else {
    unsigned int v81 = v77;
  }
  unsigned int v82 = v66 - v81;
  *((_DWORD *)this + 683) = v80;
  *((_DWORD *)this + 684) = v82;
  int v83 = v67 | (8 * v79);
  int v84 = (_WORD *)((char *)this + 2 * (v83 + 15) + 2280);
  unsigned int v85 = (unsigned __int16)*v84;
  if (v80 < 0x40000001)
  {
    int v86 = *((_DWORD *)this + 686);
    while (1)
    {
      v82 *= 2;
      *((_DWORD *)this + 686) = --v86;
      if (v86) {
        goto LABEL_96;
      }
      uint64_t v89 = *((void *)this + 340);
      *((void *)this + 340) = v89 + 1;
      unint64_t v90 = *((unsigned int *)this + 676);
      if (v89 + 1 >= v90)
      {
        int v91 = 65280;
        unint64_t v92 = v89 + 2;
        *((void *)this + 340) = v92;
        if (v92 >= v90)
        {
LABEL_102:
          int v87 = 255;
          goto LABEL_95;
        }
      }
      else
      {
        int v91 = *(unsigned __int8 *)(*((void *)this + 339) + v89 + 1) << 8;
        unint64_t v92 = v89 + 2;
        *((void *)this + 340) = v92;
        if (v92 >= v90) {
          goto LABEL_102;
        }
      }
      int v87 = *(unsigned __int8 *)(*((void *)this + 339) + v92);
LABEL_95:
      v82 |= v91 | v87;
      int v86 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_96:
      unsigned int v88 = 2 * v80;
      BOOL v30 = v80 >= 0x20000001;
      v80 *= 2;
      if (v30) {
        goto LABEL_104;
      }
    }
  }
  unsigned int v88 = v80;
LABEL_104:
  unsigned int v93 = (HIWORD(v88) * v85) & 0xFFFF0000;
  unsigned int v94 = v88 - v93;
  BOOL v95 = v82 >= v93;
  *int v84 = *((_WORD *)this + ((v85 >> 7) & 0x1FE | v95) + 1376) + v85;
  if (v82 < v93) {
    unsigned int v96 = v93;
  }
  else {
    unsigned int v96 = v94;
  }
  if (v82 < v93) {
    unsigned int v97 = 0;
  }
  else {
    unsigned int v97 = v93;
  }
  unsigned int v98 = v82 - v97;
  *((_DWORD *)this + 683) = v96;
  *((_DWORD *)this + 684) = v98;
  int v99 = v83 | (16 * v95);
  int v100 = (_WORD *)((char *)this + 2 * (v99 + 31) + 2280);
  unsigned int v101 = (unsigned __int16)*v100;
  if (v96 < 0x40000001)
  {
    int v102 = *((_DWORD *)this + 686);
    while (1)
    {
      v98 *= 2;
      *((_DWORD *)this + 686) = --v102;
      if (v102) {
        goto LABEL_114;
      }
      uint64_t v105 = *((void *)this + 340);
      *((void *)this + 340) = v105 + 1;
      unint64_t v106 = *((unsigned int *)this + 676);
      if (v105 + 1 >= v106)
      {
        int v107 = 65280;
        unint64_t v108 = v105 + 2;
        *((void *)this + 340) = v108;
        if (v108 >= v106)
        {
LABEL_120:
          int v103 = 255;
          goto LABEL_113;
        }
      }
      else
      {
        int v107 = *(unsigned __int8 *)(*((void *)this + 339) + v105 + 1) << 8;
        unint64_t v108 = v105 + 2;
        *((void *)this + 340) = v108;
        if (v108 >= v106) {
          goto LABEL_120;
        }
      }
      int v103 = *(unsigned __int8 *)(*((void *)this + 339) + v108);
LABEL_113:
      v98 |= v107 | v103;
      int v102 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_114:
      unsigned int v104 = 2 * v96;
      BOOL v30 = v96 >= 0x20000001;
      v96 *= 2;
      if (v30) {
        goto LABEL_122;
      }
    }
  }
  unsigned int v104 = v96;
LABEL_122:
  unsigned int v109 = (HIWORD(v104) * v101) & 0xFFFF0000;
  unsigned int v110 = v104 - v109;
  BOOL v111 = v98 >= v109;
  *int v100 = *((_WORD *)this + ((v101 >> 7) & 0x1FE | v111) + 1376) + v101;
  if (v98 < v109) {
    unsigned int v112 = v109;
  }
  else {
    unsigned int v112 = v110;
  }
  if (v98 < v109) {
    unsigned int v113 = 0;
  }
  else {
    unsigned int v113 = v109;
  }
  unsigned int v114 = v98 - v113;
  *((_DWORD *)this + 683) = v112;
  *((_DWORD *)this + 684) = v114;
  unsigned int v115 = *((unsigned __int16 *)this + 1204);
  if (v112 < 0x40000001)
  {
    int v116 = *((_DWORD *)this + 686);
    while (1)
    {
      v114 *= 2;
      *((_DWORD *)this + 686) = --v116;
      if (v116) {
        goto LABEL_132;
      }
      uint64_t v119 = *((void *)this + 340);
      *((void *)this + 340) = v119 + 1;
      unint64_t v120 = *((unsigned int *)this + 676);
      if (v119 + 1 >= v120)
      {
        int v121 = 65280;
        unint64_t v122 = v119 + 2;
        *((void *)this + 340) = v122;
        if (v122 >= v120)
        {
LABEL_138:
          int v117 = 255;
          goto LABEL_131;
        }
      }
      else
      {
        int v121 = *(unsigned __int8 *)(*((void *)this + 339) + v119 + 1) << 8;
        unint64_t v122 = v119 + 2;
        *((void *)this + 340) = v122;
        if (v122 >= v120) {
          goto LABEL_138;
        }
      }
      int v117 = *(unsigned __int8 *)(*((void *)this + 339) + v122);
LABEL_131:
      v114 |= v121 | v117;
      int v116 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_132:
      unsigned int v118 = 2 * v112;
      BOOL v30 = v112 >= 0x20000001;
      v112 *= 2;
      if (v30) {
        goto LABEL_140;
      }
    }
  }
  unsigned int v118 = v112;
LABEL_140:
  unsigned int v123 = (HIWORD(v118) * v115) & 0xFFFF0000;
  unsigned int v124 = v118 - v123;
  BOOL v125 = v114 >= v123;
  BOOL v126 = v114 >= v123;
  unsigned int v127 = (char *)this + 2408;
  *((_WORD *)this + 1204) = *((_WORD *)this + ((v115 >> 7) & 0x1FE | v126) + 1376) + v115;
  if (v114 >= v123)
  {
    unsigned int v128 = v123;
  }
  else
  {
    unsigned int v124 = v123;
    unsigned int v128 = 0;
  }
  uint64_t v129 = 2;
  if (v125) {
    uint64_t v129 = 4;
  }
  unsigned int v130 = v114 - v128;
  *((_DWORD *)this + 683) = v124;
  *((_DWORD *)this + 684) = v130;
  int v131 = &v127[v129];
  unsigned int v132 = *(unsigned __int16 *)&v127[v129];
  if (v124 < 0x40000001)
  {
    int v133 = *((_DWORD *)this + 686);
    while (1)
    {
      v130 *= 2;
      *((_DWORD *)this + 686) = --v133;
      if (v133) {
        goto LABEL_149;
      }
      uint64_t v136 = *((void *)this + 340);
      *((void *)this + 340) = v136 + 1;
      unint64_t v137 = *((unsigned int *)this + 676);
      if (v136 + 1 >= v137)
      {
        int v138 = 65280;
        unint64_t v139 = v136 + 2;
        *((void *)this + 340) = v139;
        if (v139 >= v137)
        {
LABEL_155:
          int v134 = 255;
          goto LABEL_148;
        }
      }
      else
      {
        int v138 = *(unsigned __int8 *)(*((void *)this + 339) + v136 + 1) << 8;
        unint64_t v139 = v136 + 2;
        *((void *)this + 340) = v139;
        if (v139 >= v137) {
          goto LABEL_155;
        }
      }
      int v134 = *(unsigned __int8 *)(*((void *)this + 339) + v139);
LABEL_148:
      v130 |= v138 | v134;
      int v133 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_149:
      unsigned int v135 = 2 * v124;
      BOOL v30 = v124 >= 0x20000001;
      v124 *= 2;
      if (v30) {
        goto LABEL_157;
      }
    }
  }
  unsigned int v135 = v124;
LABEL_157:
  unsigned int v140 = (HIWORD(v135) * v132) & 0xFFFF0000;
  unsigned int v141 = v135 - v140;
  BOOL v142 = v130 >= v140;
  *(_WORD *)int v131 = *((_WORD *)this + ((v132 >> 7) & 0x1FE | v142) + 1376) + v132;
  if (v130 < v140) {
    unsigned int v143 = v140;
  }
  else {
    unsigned int v143 = v141;
  }
  if (v130 < v140) {
    unsigned int v140 = 0;
  }
  *((_DWORD *)this + 683) = v143;
  *((_DWORD *)this + 684) = v130 - v140;
  int v144 = v126 | (2 * v142);
  if (v144 == 3)
  {
    int v145 = gcl::ArithmeticDecoder::decodeExpGolomb(v3, 0, (_WORD *)this + 1207);
    if (v145 < -3) {
      goto LABEL_168;
    }
    int v144 = v145 + 3;
  }
  uint64_t v146 = *((void *)this + 3 * (v99 | (32 * v111)) + 32);
  if (v144 < (int)((unint64_t)(*((void *)this + 3 * (v99 | (32 * v111)) + 33) - v146) >> 3))
  {
    uint64_t v147 = *(void *)(v146 + 8 * v144);
    if (v147) {
      return -1431655765 * ((unint64_t)(v147 - *((void *)this + 28)) >> 2);
    }
  }
LABEL_168:
  *((_DWORD *)this + 968) = 3;
  return 0xFFFFFFFFLL;
}

gcl::tmesh::DecoderImpl *gcl::tmesh::DecoderImpl::DecoderImpl(gcl::tmesh::DecoderImpl *this)
{
  *(_OWORD *)((char *)this + 236) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 63) = -1;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  bzero((char *)this + 256, 0x700uLL);
  memset_pattern16((char *)this + 2048, &memset_pattern_21, 0xAuLL);
  *((_WORD *)this + 1029) = 0x8000;
  memset_pattern16((char *)this + 2060, &memset_pattern_22, 0x50uLL);
  memset_pattern16((char *)this + 2140, &memset_pattern_23, 0x60uLL);
  *((_DWORD *)this + 559) = -2147450880;
  memset_pattern16((char *)this + 2240, &memset_pattern_24, 0x20uLL);
  *((void *)this + 284) = 0x8000800080008000;
  memset_pattern16((char *)this + 2280, &memset_pattern_25, 0x80uLL);
  memset_pattern16((char *)this + 2408, &memset_pattern_26, 6uLL);
  *((_WORD *)this + 1207) = 0x8000;
  memset_pattern16((char *)this + 2416, &memset_pattern_27, 6uLL);
  *((void *)this + 339) = 0;
  *((void *)this + 472) = 0;
  *((void *)this + 474) = 0;
  *((void *)this + 473) = 0;
  *((unsigned char *)this + 3800) = 0;
  *((_DWORD *)this + 951) = 0;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *(_OWORD *)((char *)this + 2440) = 0u;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *((void *)this + 335) = 0;
  *((void *)this + 476) = 0x200000004;
  *((_DWORD *)this + 954) = 16843009;
  *((unsigned char *)this + 3820) = 1;
  *((_OWORD *)this + 239) = 0u;
  *((_OWORD *)this + 240) = 0u;
  *((void *)this + 482) = 0;
  *((void *)this + 483) = 0x200000004;
  *((_DWORD *)this + 968) = 6;
  return this;
}

void std::vector<gcl::Vector3<int>>::__append(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      unsigned int v6 = &v5[v13];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    int v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v12 = (char *)operator new(12 * v11);
    }
    else
    {
      int v12 = 0;
    }
    unsigned int v14 = &v12[4 * (v8 >> 2)];
    unsigned int v15 = &v12[12 * v11];
    size_t v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    unsigned int v17 = &v14[v16];
    if (v5 == v7)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v15;
      if (!v7) {
        return;
      }
      goto LABEL_28;
    }
    unint64_t v18 = v5 - v7 - 12;
    if (v18 < 0xB4) {
      goto LABEL_25;
    }
    unint64_t v19 = v18 / 0xC;
    if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14) {
      goto LABEL_25;
    }
    unint64_t v21 = v19 + 1;
    uint64_t v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    unsigned int v6 = &v5[-12 * v22];
    uint64_t v23 = &v14[-12 * v22];
    unint64_t v24 = (const float *)(v5 - 48);
    int v25 = (float *)(v14 - 48);
    uint64_t v26 = v22;
    do
    {
      float32x4x3_t v29 = vld3q_f32(v24);
      vst3q_f32(v25, v29);
      v25 -= 12;
      v24 -= 12;
      v26 -= 4;
    }
    while (v26);
    v14 -= 12 * v22;
    if (v21 != v22)
    {
LABEL_25:
      uint64_t v23 = v14;
      do
      {
        int v27 = *((_DWORD *)v6 - 3);
        v6 -= 12;
        *((_DWORD *)v23 - 3) = v27;
        v23 -= 12;
        *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
        *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
      }
      while (v6 != v7);
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v15;
    if (v7)
    {
LABEL_28:
      operator delete(v7);
    }
  }
}

void gcl::tmesh::DecoderImpl::~DecoderImpl(gcl::tmesh::DecoderImpl *this)
{
  std::vector<int>::size_type v2 = (void *)*((void *)this + 333);
  if (v2)
  {
    *((void *)this + 334) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 330);
  if (v3)
  {
    *((void *)this + 331) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 327);
  if (v4)
  {
    *((void *)this + 328) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 324);
  if (v5)
  {
    *((void *)this + 325) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)*((void *)this + 321);
  if (v6)
  {
    *((void *)this + 322) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 318);
  if (v7)
  {
    *((void *)this + 319) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 315);
  if (v8)
  {
    *((void *)this + 316) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 312);
  if (v9)
  {
    *((void *)this + 313) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 309);
  if (v10)
  {
    *((void *)this + 310) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 306);
  if (v11)
  {
    *((void *)this + 307) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 303);
  if (v12)
  {
    *((void *)this + 304) = v12;
    operator delete(v12);
  }
  uint64_t v13 = 1536;
  do
  {
    unsigned int v14 = *(void **)((char *)this + v13 + 232);
    if (v14)
    {
      *(void *)((char *)this + v13 + 240) = v14;
      operator delete(v14);
    }
    v13 -= 24;
  }
  while (v13);
  unsigned int v15 = (void *)*((void *)this + 28);
  if (v15)
  {
    *((void *)this + 29) = v15;
    operator delete(v15);
  }
  size_t v16 = (void *)*((void *)this + 25);
  if (v16)
  {
    *((void *)this + 26) = v16;
    operator delete(v16);
  }
  unsigned int v17 = (void *)*((void *)this + 22);
  if (v17)
  {
    *((void *)this + 23) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 19);
  if (v18)
  {
    *((void *)this + 20) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 16);
  if (v19)
  {
    *((void *)this + 17) = v19;
    operator delete(v19);
  }
  int v20 = (void *)*((void *)this + 13);
  if (v20)
  {
    *((void *)this + 14) = v20;
    operator delete(v20);
  }
  unint64_t v21 = (void *)*((void *)this + 10);
  if (v21)
  {
    *((void *)this + 11) = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)*((void *)this + 7);
  if (v22)
  {
    *((void *)this + 8) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 4);
  if (v23)
  {
    *((void *)this + 5) = v23;
    operator delete(v23);
  }
  unint64_t v24 = (void *)*((void *)this + 1);
  if (v24)
  {
    *((void *)this + 2) = v24;
    operator delete(v24);
  }
}

int32x4_t *gcl::tmesh::ComputeGeneralizedParallelogramPrediction(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int a4, int *a5, int *a6, int *a7, int *a8, int32x4_t *a9)
{
  unint64_t v9 = a9;
  uint64_t v10 = *a7;
  uint64_t v11 = a7[1];
  uint64_t v12 = *a5 - v10;
  uint64_t v13 = a5[1] - v11;
  uint64_t v14 = a7[2];
  uint64_t v15 = a5[2] - v14;
  uint64_t v16 = *a6 - v10;
  uint64_t v17 = a6[1] - v11;
  uint64_t v18 = a6[2] - v14;
  uint64_t v19 = *a8 - v10;
  uint64_t v20 = a8[1] - v11;
  uint64_t v21 = a8[2] - v14;
  unint64_t v22 = v12 * v12 + v13 * v13 + v15 * v15;
  unint64_t v23 = v16 * v16 + v17 * v17 + v18 * v18;
  if (v22 >> 30) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v23 >> 30 == 0;
  }
  if (v24 && (unint64_t)(v19 * v19 + v20 * v20 + v21 * v21) >> 30 == 0)
  {
    uint64_t v38 = v16 * v12 + v17 * v13 + v18 * v15;
    unint64_t v39 = v23 * v22 - v38 * v38;
    if (!v39)
    {
      if (a4 < 1) {
        return result;
      }
      if (a4 >= 8)
      {
        uint64_t v44 = 0;
        if ((unint64_t)((char *)a9 - (char *)result) >= 0x20
          && (unint64_t)((char *)a9 - (char *)a2) >= 0x20
          && (unint64_t)((char *)a9 - (char *)a3) >= 0x20)
        {
          uint64_t v44 = a4 & 0x7FFFFFF8;
          unsigned int v69 = result + 1;
          int v70 = a9 + 1;
          int v71 = a2 + 1;
          unsigned int v72 = a3 + 1;
          uint64_t v73 = a4 & 0xFFFFFFF8;
          do
          {
            int32x4_t v74 = vsubq_s32(vaddq_s32(v71[-1], v69[-1]), v72[-1]);
            int32x4_t v75 = vsubq_s32(vaddq_s32(*v71, *v69), *v72);
            v69 += 2;
            v70[-1] = v74;
            *int v70 = v75;
            v70 += 2;
            v71 += 2;
            v72 += 2;
            v73 -= 8;
          }
          while (v73);
          if (v44 == a4) {
            return result;
          }
        }
      }
      else
      {
        uint64_t v44 = 0;
      }
      uint64_t v76 = a4 - v44;
      uint64_t v77 = v44;
      unsigned int v78 = &a9->i32[v44];
      BOOL v79 = &a3->i32[v44];
      unsigned int v80 = &a2->i32[v77];
      unsigned int v81 = &result->i32[v77];
      do
      {
        int v83 = *v81++;
        int v82 = v83;
        int v85 = *v80++;
        int v84 = v85;
        int v86 = *v79++;
        *v78++ = v84 + v82 - v86;
        --v76;
      }
      while (v76);
      return result;
    }
    uint64_t v40 = v19 * v12 + v20 * v13 + v21 * v15;
    uint64_t v41 = v19 * v16 + v20 * v17 + v21 * v18;
    if (v39 >= 0x80)
    {
      char v52 = __clz(v39);
      char v53 = 57 - v52;
      uint64_t v54 = 1 << (56 - v52);
      unint64_t v39 = (uint64_t)(v54 + v39) >> v53;
      uint64_t v55 = v40 * v23 - v41 * v38;
      if (v55 < 0) {
        uint64_t v42 = -(uint64_t)((unint64_t)(v54 - v55) >> v53);
      }
      else {
        uint64_t v42 = (unint64_t)(v54 + v55) >> v53;
      }
      if (v42 >= 0x3FFFFFFFFFFFLL) {
        uint64_t v42 = 0x3FFFFFFFFFFFLL;
      }
      if (v42 <= (uint64_t)0xFFFFC00000000001) {
        uint64_t v42 = 0xFFFFC00000000001;
      }
      uint64_t v56 = v41 * v22 - v40 * v38;
      if (v56 < 0) {
        uint64_t v43 = -(uint64_t)((unint64_t)(v54 - v56) >> v53);
      }
      else {
        uint64_t v43 = (unint64_t)(v54 + v56) >> v53;
      }
    }
    else
    {
      uint64_t v42 = v40 * v23 - v41 * v38;
      if (v42 >= 0x3FFFFFFFFFFFLL) {
        uint64_t v42 = 0x3FFFFFFFFFFFLL;
      }
      if (v42 <= (uint64_t)0xFFFFC00000000001) {
        uint64_t v42 = 0xFFFFC00000000001;
      }
      uint64_t v43 = v41 * v22 - v40 * v38;
    }
    if (v43 >= 0x3FFFFFFFFFFFLL) {
      uint64_t v43 = 0x3FFFFFFFFFFFLL;
    }
    unint64_t v57 = 0xFFFFC00000000001;
    if (v43 > (uint64_t)0xFFFFC00000000001) {
      unint64_t v57 = v43;
    }
    uint64_t v58 = gcl::tmesh::approximateInverseLut[v39 - 1];
    if (v42 * v58 >= 0x3FFFFFFF) {
      uint64_t v59 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v59 = v42 * v58;
    }
    if (v59 <= -1073741823) {
      uint64_t v59 = -1073741823;
    }
    uint64_t v60 = v57 * v58;
    if (v60 >= 0x3FFFFFFF) {
      uint64_t v60 = 0x3FFFFFFFLL;
    }
    if (v60 <= -1073741823) {
      uint64_t v60 = -1073741823;
    }
    if (a4 >= 1)
    {
      uint64_t v61 = a4;
      do
      {
        uint64_t v63 = result->i32[0];
        int32x2_t result = (int32x4_t *)((char *)result + 4);
        uint64_t v64 = v59 * v63;
        uint64_t v65 = a2->i32[0];
        a2 = (int32x4_t *)((char *)a2 + 4);
        uint64_t v66 = v60 * v65 + v64;
        uint64_t v67 = a3->i32[0];
        a3 = (int32x4_t *)((char *)a3 + 4);
        uint64_t v68 = v66 + (0x10000 - (v59 + v60)) * v67;
        if (v68 < 0) {
          int64_t v62 = -(uint64_t)((unint64_t)(0x8000 - v68) >> 16);
        }
        else {
          int64_t v62 = (unint64_t)(v68 + 0x8000) >> 16;
        }
        if (v62 >= 0x3FFFFFFF) {
          int64_t v62 = 0x3FFFFFFFLL;
        }
        if (v62 <= -1073741823) {
          LODWORD(v62) = -1073741823;
        }
        v9->i32[0] = v62;
        unint64_t v9 = (int32x4_t *)((char *)v9 + 4);
        --v61;
      }
      while (v61);
    }
  }
  else
  {
    if (a4 < 1) {
      return result;
    }
    if (a4 < 8)
    {
      uint64_t v26 = 0;
LABEL_11:
      uint64_t v27 = a4 - v26;
      uint64_t v28 = v26;
      float32x4x3_t v29 = &a9->i32[v26];
      BOOL v30 = &a3->i32[v26];
      BOOL v31 = &a2->i32[v28];
      uint64_t v32 = &result->i32[v28];
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        int v36 = *v31++;
        int v35 = v36;
        int v37 = *v30++;
        *v29++ = v35 + v33 - v37;
        --v27;
      }
      while (v27);
      return result;
    }
    uint64_t v26 = 0;
    if ((unint64_t)((char *)a9 - (char *)result) < 0x20) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)a9 - (char *)a2) < 0x20) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)a9 - (char *)a3) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v26 = a4 & 0xFFFFFFF8;
    unsigned int v45 = result + 1;
    unsigned int v46 = a9 + 1;
    BOOL v47 = a2 + 1;
    unsigned int v48 = a3 + 1;
    uint64_t v49 = v26;
    do
    {
      int32x4_t v50 = vsubq_s32(vaddq_s32(v47[-1], v45[-1]), v48[-1]);
      int32x4_t v51 = vsubq_s32(vaddq_s32(*v47, *v45), *v48);
      v45 += 2;
      v46[-1] = v50;
      int32x4_t *v46 = v51;
      v46 += 2;
      v47 += 2;
      v48 += 2;
      v49 -= 8;
    }
    while (v49);
    if (v26 != a4) {
      goto LABEL_11;
    }
  }
  return result;
}

int *gcl::tmesh::ComputeTexCoordinatesPrediction(int *result, int *a2, _DWORD *a3, _DWORD *a4, int *a5, int a6, int *a7)
{
  int v7 = a4[1];
  int v8 = a3[1];
  int v9 = a4[2];
  int v10 = a3[2];
  unint64_t v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a4 - *a3) * (uint64_t)(*a4 - *a3) + (v9 - v10) * (uint64_t)(v9 - v10);
  int v12 = *a5;
  int v13 = a5[1];
  int v14 = a5[2];
  unint64_t v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a3) * (uint64_t)(v12 - *a3) + (v14 - v10) * (uint64_t)(v14 - v10);
  unint64_t v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v15 >> 28 == 0;
  }
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    int v20 = *a2 + *result;
    if (v20 < 0 != __OFADD__(*a2, *result)) {
      ++v20;
    }
    *a7 = v20 >> 1;
    int v21 = result[1];
    int v22 = a2[1];
    BOOL v23 = __OFADD__(v22, v21);
    int v24 = v22 + v21;
    if (v24 < 0 != v23) {
      ++v24;
    }
    a7[1] = v24 >> 1;
  }
  else
  {
    char v25 = __clz(v11);
    char v26 = 57 - v25;
    uint64_t v27 = 1 << (56 - v25);
    unint64_t v28 = (v27 + v11) >> v26;
    unint64_t v29 = (v27 + v15) >> v26;
    unint64_t v30 = (v27 + v16) >> v26;
    if (v11 >= 0x80)
    {
      unint64_t v16 = v30;
      unint64_t v15 = v29;
      unint64_t v11 = v28;
    }
    uint64_t v31 = gcl::tmesh::approximateInverseLut[v11 - 1];
    uint64_t v32 = (v15 - v16) * v31;
    uint64_t v33 = 1073676288;
    if (v32 < 1073676288) {
      uint64_t v33 = v32;
    }
    uint64_t v34 = v33 + 0x10000;
    BOOL v35 = v32 < -1073807360;
    uint64_t v36 = -1073741824;
    if (!v35) {
      uint64_t v36 = v34;
    }
    uint64_t v37 = ((v15 * v31) << 18) - v36 * v36;
    if (v37 >= 0xFFFFFFFFLL) {
      uint64_t v37 = 0xFFFFFFFFLL;
    }
    LODWORD(v37) = v37 & ~(v37 >> 63);
    uint64_t v38 = *result;
    uint64_t v39 = result[1];
    uint64_t v40 = *a2 - v38;
    uint64_t v41 = a2[1] - v39;
    unsigned int v42 = __clz(v37);
    if (v37 >= 2) {
      uint64_t v37 = ((v37 >> ((32 - v42) >> 1)) + (1 << ((32 - v42) >> 1))) >> 1;
    }
    else {
      uint64_t v37 = v37;
    }
    uint64_t v43 = v37 * *((int *)&qword_1A28FC078 + a6);
    uint64_t v44 = v36 * v40 + v43 * v41;
    if (v44 >= 0) {
      unint64_t v45 = (unint64_t)(v44 + 0x10000) >> 17;
    }
    else {
      unint64_t v45 = -(uint64_t)((unint64_t)(0x10000 - v44) >> 17);
    }
    uint64_t v46 = v45 + v38;
    uint64_t v47 = v36 * v41 - v43 * v40;
    if (v47 >= 0) {
      unint64_t v48 = (unint64_t)(v47 + 0x10000) >> 17;
    }
    else {
      unint64_t v48 = -(uint64_t)((unint64_t)(0x10000 - v47) >> 17);
    }
    uint64_t v49 = v48 + v39;
    if (v46 >= 0x3FFFFFFF) {
      uint64_t v50 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v50 = v46;
    }
    if (v50 <= -1073741823) {
      LODWORD(v50) = -1073741823;
    }
    if (v49 >= 0x3FFFFFFF) {
      uint64_t v49 = 0x3FFFFFFFLL;
    }
    if (v49 <= -1073741823) {
      LODWORD(v49) = -1073741823;
    }
    *a7 = v50;
    a7[1] = v49;
  }
  return result;
}

unint64_t gcl::tmesh::ComputeTexCoordinatesPrediction(unint64_t result, int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7)
{
  int v7 = a5[1];
  int v8 = a4[1];
  int v9 = a5[2];
  int v10 = a4[2];
  unint64_t v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a5 - *a4) * (uint64_t)(*a5 - *a4) + (v9 - v10) * (uint64_t)(v9 - v10);
  int v12 = *a6;
  int v13 = a6[1];
  int v14 = a6[2];
  unint64_t v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v10) * (uint64_t)(v14 - v10);
  unint64_t v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a5) * (uint64_t)(v12 - *a5) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v15 >> 28 == 0;
  }
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    int v20 = *a2 + *(_DWORD *)result;
    if (v20 < 0 != __OFADD__(*a2, *(_DWORD *)result)) {
      ++v20;
    }
    *a7 = v20 >> 1;
    int v21 = *(_DWORD *)(result + 4);
    int v22 = a2[1];
    BOOL v23 = __OFADD__(v22, v21);
    int v24 = v22 + v21;
    if (v24 < 0 != v23) {
      ++v24;
    }
    a7[1] = v24 >> 1;
  }
  else
  {
    char v25 = __clz(v11);
    char v26 = 57 - v25;
    uint64_t v27 = 1 << (56 - v25);
    unint64_t v28 = (v27 + v11) >> v26;
    unint64_t v29 = (v27 + v15) >> v26;
    unint64_t v30 = (v27 + v16) >> v26;
    if (v11 >= 0x80)
    {
      unint64_t v16 = v30;
      unint64_t v15 = v29;
      unint64_t v11 = v28;
    }
    uint64_t v31 = gcl::tmesh::approximateInverseLut[v11 - 1];
    uint64_t v32 = (v15 - v16) * v31;
    uint64_t v33 = 1073676288;
    if (v32 < 1073676288) {
      uint64_t v33 = v32;
    }
    uint64_t v34 = v33 + 0x10000;
    BOOL v35 = v32 < -1073807360;
    uint64_t v36 = -1073741824;
    if (!v35) {
      uint64_t v36 = v34;
    }
    uint64_t v37 = ((v15 * v31) << 18) - v36 * v36;
    if (v37 >= 0xFFFFFFFFLL) {
      uint64_t v37 = 0xFFFFFFFFLL;
    }
    LODWORD(v37) = v37 & ~(v37 >> 63);
    uint64_t v38 = *(int *)result;
    uint64_t v39 = *(int *)(result + 4);
    uint64_t v40 = *a2 - v38;
    uint64_t v41 = a2[1] - v39;
    unsigned int v42 = (32 - __clz(v37)) >> 1;
    int32x2_t result = v37 >> v42;
    if (v37 >= 2) {
      uint64_t v37 = (result + (1 << v42)) >> 1;
    }
    else {
      uint64_t v37 = v37;
    }
    if ((v39 - a3[1]) * v40 < (v38 - *a3) * v41) {
      uint64_t v37 = -v37;
    }
    uint64_t v43 = v36 * v40 - v37 * v41;
    if (v43 >= 0) {
      unint64_t v44 = (unint64_t)(v43 + 0x10000) >> 17;
    }
    else {
      unint64_t v44 = -(uint64_t)((unint64_t)(0x10000 - v43) >> 17);
    }
    uint64_t v45 = v44 + v38;
    uint64_t v46 = v36 * v41 + v37 * v40;
    if (v46 >= 0) {
      unint64_t v47 = (unint64_t)(v46 + 0x10000) >> 17;
    }
    else {
      unint64_t v47 = -(uint64_t)((unint64_t)(0x10000 - v46) >> 17);
    }
    uint64_t v48 = v47 + v39;
    if (v45 >= 0x3FFFFFFF) {
      uint64_t v49 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v49 = v45;
    }
    if (v49 <= -1073741823) {
      LODWORD(v49) = -1073741823;
    }
    if (v48 >= 0x3FFFFFFF) {
      uint64_t v48 = 0x3FFFFFFFLL;
    }
    if (v48 <= -1073741823) {
      LODWORD(v48) = -1073741823;
    }
    *a7 = v49;
    a7[1] = v48;
  }
  return result;
}

uint64_t mc_split(uint64_t a1, int a2, float a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 160);
  int v7 = *(_DWORD *)(a1 + 136);
  int v8 = (char *)malloc_type_malloc(12 * v6, 0x100004052888210uLL);
  int v9 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a1 + 160)), 0x100004052888210uLL);
  int v10 = v9;
  if (*(_DWORD *)(a1 + 160))
  {
    unint64_t v11 = 0;
    int v12 = v9 + 8;
    int v13 = (int *)(*(void *)(a1 + 168) + 8);
    do
    {
      *(v12 - 2) = *(v13 - 2);
      *(v12 - 1) = *(v13 - 1);
      int v14 = *v13;
      v13 += 4;
      *int v12 = v14;
      v12 += 3;
      ++v11;
      unint64_t v15 = *(unsigned int *)(a1 + 160);
    }
    while (v11 < v15);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  float v16 = a3 * a3;
  mc_create_corner_table(v15, *(_DWORD *)(a1 + 136), v10, v8, 0);
  free(v10);
  int v17 = 0;
  int v18 = 10;
  int v189 = a2;
  do
  {
    unsigned int v19 = *(_DWORD *)(a1 + 160);
    if (v17 >= (int)v19) {
      goto LABEL_149;
    }
    int v20 = 0;
    unsigned int v188 = v18;
    int v187 = v18 - 1;
    uint64_t v21 = v17;
    int v22 = *(char **)(a1 + 168);
    BOOL v23 = v22;
    unsigned int v190 = *(_DWORD *)(a1 + 160);
    do
    {
      while (1)
      {
        int v24 = &v23[16 * v21];
        int v25 = *(_DWORD *)v24;
        if (*(_DWORD *)v24 == -1) {
          goto LABEL_9;
        }
        int v26 = *((_DWORD *)v24 + 1);
        if (v26 == -1) {
          goto LABEL_9;
        }
        int v27 = *((_DWORD *)v24 + 2);
        _ZF = v26 == v27 || v25 == v27;
        BOOL v29 = _ZF || v25 == v26;
        if (v29 || v27 == -1) {
          goto LABEL_9;
        }
        uint64_t v31 = *(char **)(a1 + 144);
        if (a2)
        {
          uint64_t v32 = (float *)&v31[12 * v25];
          float v33 = v32[1];
          float v34 = v32[2];
          float v35 = sqrt((float)((float)((float)(*v32 * *v32) + (float)(v33 * v33)) + (float)(v34 * v34))) + 0.000001;
          float v36 = 1.0 / v35;
          float v37 = *v32 * v36;
          float v38 = v33 * v36;
          float v39 = v34 * v36;
          uint64_t v40 = (float *)&v31[12 * v26];
          float v41 = v40[1];
          float v42 = v40[2];
          float v43 = sqrt((float)((float)((float)(*v40 * *v40) + (float)(v41 * v41)) + (float)(v42 * v42))) + 0.000001;
          float v44 = 1.0 / v43;
          float v45 = *v40 * v44;
          float v46 = v41 * v44;
          float v47 = v42 * v44;
          uint64_t v48 = (float *)&v31[12 * v27];
          float v49 = v48[1];
          float v50 = v48[2];
          float v51 = sqrt((float)((float)((float)(*v48 * *v48) + (float)(v49 * v49)) + (float)(v50 * v50))) + 0.000001;
          float v52 = 1.0 / v51;
          float v53 = *v48 * v52;
          float v54 = v49 * v52;
          float v55 = v50 * v52;
          float v56 = (float)((float)((float)(v45 - v53) * (float)(v45 - v53))
                      + (float)((float)(v46 - v54) * (float)(v46 - v54)))
              + (float)((float)(v47 - v55) * (float)(v47 - v55));
          int v57 = v56 <= v16;
          if (v56 <= 0.0) {
            int v57 = 1;
          }
          if (v57) {
            float v56 = 0.0;
          }
          int v58 = v57 << 31 >> 31;
          float v59 = (float)((float)((float)(v53 - v37) * (float)(v53 - v37))
                      + (float)((float)(v54 - v38) * (float)(v54 - v38)))
              + (float)((float)(v55 - v39) * (float)(v55 - v39));
          if (v59 > v16 && v59 > v56) {
            int v58 = 1;
          }
          else {
            float v59 = v56;
          }
          float v60 = (float)((float)((float)(v37 - v45) * (float)(v37 - v45))
                      + (float)((float)(v38 - v46) * (float)(v38 - v46)))
              + (float)((float)(v39 - v47) * (float)(v39 - v47));
          if (v60 <= v16) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v61 = (float *)&v31[12 * v26];
          int64_t v62 = (float *)&v31[12 * v27];
          float v63 = *v61;
          float v64 = v61[1];
          float v65 = *v62;
          float v66 = v62[1];
          float v67 = v61[2];
          float v68 = v62[2];
          float v69 = (float)((float)((float)(*v61 - *v62) * (float)(*v61 - *v62))
                      + (float)((float)(v64 - v66) * (float)(v64 - v66)))
              + (float)((float)(v67 - v68) * (float)(v67 - v68));
          int v70 = v69 <= v16;
          if (v69 <= 0.0) {
            int v70 = 1;
          }
          int v71 = v70 << 31 >> 31;
          if (v70) {
            float v69 = 0.0;
          }
          unsigned int v72 = (float *)&v31[12 * v25];
          float v73 = *v72;
          float v74 = v72[1];
          float v75 = (float)((float)(v65 - *v72) * (float)(v65 - *v72)) + (float)((float)(v66 - v74) * (float)(v66 - v74));
          float v76 = v72[2];
          float v59 = v75 + (float)((float)(v68 - v76) * (float)(v68 - v76));
          LODWORD(v72) = v59 > v16;
          BOOL v77 = v59 > v69;
          BOOL v78 = (v72 & v77) == 0;
          if ((v72 & v77) != 0) {
            int v58 = 1;
          }
          else {
            int v58 = v71;
          }
          if (v78) {
            float v59 = v69;
          }
          float v60 = (float)((float)((float)(v73 - v63) * (float)(v73 - v63))
                      + (float)((float)(v74 - v64) * (float)(v74 - v64)))
              + (float)((float)(v76 - v67) * (float)(v76 - v67));
          if (v60 <= v16) {
            goto LABEL_45;
          }
        }
        if (v60 > v59)
        {
          int v58 = 2;
          break;
        }
LABEL_45:
        if ((v58 & 0x80000000) == 0) {
          break;
        }
LABEL_9:
        if (v19 == ++v21) {
          goto LABEL_146;
        }
      }
      int v79 = v58 + 3 * v21;
      int v80 = *(_DWORD *)&v8[4 * v79];
      if (v80 < 0) {
        uint64_t v81 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v81 = (v80 / 3);
      }
      if (v80 < 0) {
        int v82 = -1;
      }
      else {
        int v82 = v80 % 3;
      }
      if ((int)v81 >= 0) {
        int v83 = 4;
      }
      else {
        int v83 = 2;
      }
      int v191 = v82;
      if (v83 + *(_DWORD *)(a1 + 160) > v6)
      {
        uint64_t v6 = (int)fmax((double)(int)v6 * 1.5, 100000.0);
        int v8 = (char *)malloc_type_realloc(v8, 12 * v6, 0x100004052888210uLL);
        int v22 = (char *)malloc_type_realloc(*(void **)(a1 + 168), 16 * (int)v6, 0x1000040451B5BE8uLL);
        *(void *)(a1 + 168) = v22;
        uint64_t v31 = *(char **)(a1 + 144);
      }
      int v84 = *(_DWORD *)(a1 + 136);
      uint64_t v194 = v6;
      if (v84 + 1 <= v7)
      {
        int v192 = v7;
      }
      else
      {
        int v192 = (int)fmax((double)v7 * 1.5, 100000.0);
        uint64_t v31 = (char *)malloc_type_realloc(v31, 12 * v192, 0x10000403E1C8BA9uLL);
        *(void *)(a1 + 144) = v31;
        int v22 = *(char **)(a1 + 168);
        int v84 = *(_DWORD *)(a1 + 136);
      }
      int v85 = v79 / 3;
      int v86 = v79 % 3;
      int v87 = &v22[16 * (v79 / 3)];
      if ((int)v81 < 0) {
        unsigned int v88 = 0;
      }
      else {
        unsigned int v88 = &v22[16 * v81];
      }
      unsigned int v89 = *(_DWORD *)&v87[4
                          * (char)(v86
                                 + 1
                                 - 3
                                 * ((((86 * (char)(v86 + 1)) & 0x8000) != 0)
                                  + ((unsigned __int16)(86 * (char)(v86 + 1)) >> 8)))];
      unint64_t v90 = (float *)&v31[12 * v89];
      if ((v86 + 2) >= 3) {
        uint64_t v91 = (v86 - 1);
      }
      else {
        uint64_t v91 = (v86 + 2);
      }
      unsigned int v92 = *(_DWORD *)&v87[4 * v91];
      unsigned int v93 = (int32x2_t *)&v31[12 * v92];
      int v94 = v84;
      BOOL v95 = (float32x2_t *)&v31[12 * v84];
      uint64_t v193 = v91;
      if (a2)
      {
        float v96 = *(float *)&v31[12 * v89 + 8];
        float v97 = *(float *)&v31[12 * v92 + 8];
        float32x2_t v98 = (float32x2_t)vzip1_s32(*v93, *(int32x2_t *)v90);
        float32x2_t v99 = (float32x2_t)vzip2_s32(*v93, *(int32x2_t *)v90);
        float32x2_t v100 = vsqrt_f32(vmla_f32(vmla_f32(vmul_f32(v98, v98), v99, v99), (float32x2_t)__PAIR64__(LODWORD(v96), LODWORD(v97)), (float32x2_t)__PAIR64__(LODWORD(v96), LODWORD(v97))));
        LODWORD(v101) = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v100, 1), v100).u32[0];
        float v102 = 0.5;
        if (fabsf(v101) > 0.001)
        {
          float64x2_t v103 = vcvtq_f64_f32(v100);
          __asm { FMOV            V16.2D, #1.0 }
          v103.f64[0] = (float)(vaddv_f32(vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL), v103), (int8x16_t)vdupq_n_s64(0x41CDCD64FFFFFFFFuLL), (int8x16_t)vdivq_f64(_Q16, v103))))* 0.5);
          double v108 = 1.0 / v103.f64[0];
          _NF = v103.f64[0] < 0.000000001;
          double v109 = 1000000000.0;
          if (!_NF) {
            double v109 = v108;
          }
          float v110 = v109;
          float v102 = (float)(v110 - v100.f32[0]) / v101;
        }
        if (v102 > 0.9 || v102 < 0.1) {
          float v112 = 0.5;
        }
        else {
          float v112 = v102;
        }
        *BOOL v95 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v90, v112), (float32x2_t)*v93, 1.0 - v112);
        float v113 = (float)(v112 * v96) + (float)((float)(1.0 - v112) * v97);
        goto LABEL_96;
      }
      unsigned int v114 = (float *)&v31[12 * *(unsigned int *)v87];
      unsigned int v115 = (float *)&v31[12 * *((unsigned int *)v87 + 1)];
      int v116 = (float *)&v31[12 * *((unsigned int *)v87 + 2)];
      float v117 = v114[1];
      float v118 = v115[1];
      float v119 = v114[2];
      float v120 = v115[2];
      float v121 = (float)((float)((float)(*v114 - *v115) * (float)(*v114 - *v115))
                   + (float)((float)(v117 - v118) * (float)(v117 - v118)))
           + (float)((float)(v119 - v120) * (float)(v119 - v120));
      float v122 = v116[1];
      float v123 = (float)((float)(*v114 - *v116) * (float)(*v114 - *v116))
           + (float)((float)(v117 - v122) * (float)(v117 - v122));
      float v124 = v116[2];
      float v125 = v123 + (float)((float)(v119 - v124) * (float)(v119 - v124));
      float v126 = fminf(fminf(v121, v125), (float)((float)((float)(*v115 - *v116) * (float)(*v115 - *v116))+ (float)((float)(v118 - v122) * (float)(v118 - v122)))+ (float)((float)(v120 - v124) * (float)(v120 - v124)));
      float32x2_t v127 = *(float32x2_t *)v90;
      float32x2_t v128 = vsub_f32(*(float32x2_t *)v90, (float32x2_t)*v93);
      float v129 = vaddv_f32(vmul_f32(v128, v128));
      float v130 = *(float *)&v31[12 * v89 + 8];
      float v131 = *(float *)&v31[12 * v92 + 8];
      if ((float)(v126 / (float)(v129 + (float)((float)(v130 - v131) * (float)(v130 - v131)))) >= 0.01)
      {
        *BOOL v95 = vmul_f32(vadd_f32((float32x2_t)*v93, v127), (float32x2_t)0x3F0000003F000000);
        float v113 = (float)(v131 + v130) * 0.5;
        goto LABEL_96;
      }
      if (v121 == v126)
      {
        int v116 = (float *)&v31[12 * *((unsigned int *)v87 + 1)];
LABEL_83:
        unsigned int v115 = (float *)&v31[12 * *(unsigned int *)v87];
        goto LABEL_84;
      }
      if (v125 == v126) {
        goto LABEL_83;
      }
LABEL_84:
      BOOL v132 = v116 == v90 || v115 == v90;
      if (v132) {
        LODWORD(v133) = *(void *)v90;
      }
      else {
        LODWORD(v133) = *v93;
      }
      if (v132) {
        int v134 = &v31[12 * v89];
      }
      else {
        int v134 = &v31[12 * v92];
      }
      if (v132)
      {
        v127.i32[0] = (__int32)*v93;
        unint64_t v90 = (float *)&v31[12 * v92];
      }
      v95->f32[0] = v133 + (float)((float)(v127.f32[0] - v133) * 0.25);
      float v135 = *((float *)v134 + 2);
      float v136 = v90[2];
      *(float *)&v31[12 * v94 + 4] = *((float *)v134 + 1) + (float)((float)(v90[1] - *((float *)v134 + 1)) * 0.25);
      float v113 = v135 + (float)((float)(v136 - v135) * 0.25);
LABEL_96:
      uint64_t v137 = v85;
      *(float *)&v31[12 * v94 + 8] = v113;
      bzero(&v22[16 * *(unsigned int *)(a1 + 160)], (16 * v83));
      int v138 = *(char **)(a1 + 168);
      uint64_t v139 = 4 * v86;
      unsigned int v140 = &v138[16 * *(unsigned int *)(a1 + 160)];
      *(_DWORD *)unsigned int v140 = *(_DWORD *)&v87[v139];
      *((_DWORD *)v140 + 1) = *(_DWORD *)&v87[4
                                            * (char)(v86
                                                   + 1
                                                   - 3
                                                   * ((((86 * (char)(v86 + 1)) & 0x8000) != 0)
                                                    + ((unsigned __int16)(86 * (char)(v86 + 1)) >> 8)))];
      *((_DWORD *)v140 + 2) = *(_DWORD *)(a1 + 136);
      unsigned int v141 = &v22[16 * v137];
      *((_DWORD *)v140 + 3) = *((_DWORD *)v141 + 3);
      BOOL v142 = &v138[16 * (*(_DWORD *)(a1 + 160) + 1)];
      *(_DWORD *)BOOL v142 = *(_DWORD *)&v87[4 * v193];
      *((_DWORD *)v142 + 1) = *(_DWORD *)&v87[v139];
      *((_DWORD *)v142 + 2) = *(_DWORD *)(a1 + 136);
      *((_DWORD *)v142 + 3) = *((_DWORD *)v141 + 3);
      if (v88)
      {
        unsigned int v143 = &v138[16 * (*(_DWORD *)(a1 + 160) + 2)];
        *(_DWORD *)unsigned int v143 = *(_DWORD *)&v88[4 * v191];
        *((_DWORD *)v143 + 1) = *(_DWORD *)&v88[4
                                              * (char)(v191
                                                     + 1
                                                     - 3
                                                     * ((((86 * (char)(v191 + 1)) & 0x8000) != 0)
                                                      + ((unsigned __int16)(86 * (char)(v191 + 1)) >> 8)))];
        *((_DWORD *)v143 + 2) = *(_DWORD *)(a1 + 136);
        *((_DWORD *)v143 + 3) = *((_DWORD *)v88 + 3);
        int v144 = &v138[16 * (*(_DWORD *)(a1 + 160) + 3)];
        int v145 = v191 + 2;
        if ((v191 + 2) >= 3) {
          int v145 = v191 - 1;
        }
        *(_DWORD *)int v144 = *(_DWORD *)&v88[4 * v145];
        *((_DWORD *)v144 + 1) = *(_DWORD *)&v88[4 * v191];
        *((_DWORD *)v144 + 2) = *(_DWORD *)(a1 + 136);
        *((_DWORD *)v144 + 3) = *((_DWORD *)v88 + 3);
      }
      unsigned int v146 = *(_DWORD *)(a1 + 160);
      uint64_t v6 = v194;
      unsigned int v19 = v190;
      if (v146 < v146 + v83)
      {
        uint64_t v147 = &v8[12 * v146 + 8];
        do
        {
          *((void *)v147 - 1) = -1;
          *(_DWORD *)uint64_t v147 = -1;
          v147 += 12;
          ++v146;
        }
        while (*(_DWORD *)(a1 + 160) + v83 > v146);
        unsigned int v146 = *(_DWORD *)(a1 + 160);
      }
      int v148 = *(_DWORD *)&v138[16 * v146];
      unsigned int v149 = &v138[16 * v137];
      if (v148 == *(_DWORD *)v149)
      {
        int v150 = 0;
        if ((v81 & 0x80000000) != 0) {
          goto LABEL_106;
        }
      }
      else
      {
        if (v148 == *((_DWORD *)v149 + 1)) {
          int v150 = 1;
        }
        else {
          int v150 = 2;
        }
        if ((v81 & 0x80000000) != 0)
        {
LABEL_106:
          int v151 = 0;
          int v152 = 3 * v146;
          int v153 = -1;
          int v154 = 3 * v146;
          goto LABEL_117;
        }
      }
      int v155 = *(_DWORD *)&v138[16 * v146 + 32];
      uint64_t v156 = &v138[16 * v81];
      if (v155 == *(_DWORD *)v156)
      {
        int v151 = 0;
      }
      else if (v155 == *((_DWORD *)v156 + 1))
      {
        int v151 = 1;
      }
      else
      {
        int v151 = 2;
      }
      int v153 = 3 * v146;
      int v152 = 3 * v146 + 10;
      *(_DWORD *)&v8[12 * v146] = v152;
      int v154 = 3 * v146;
LABEL_117:
      *(_DWORD *)&v8[4 * v152] = v153;
      uint64_t v157 = v154 + 1;
      *(_DWORD *)&v8[4 * v157] = v154 + 3;
      *(_DWORD *)&v8[4 * v154 + 12] = v157;
      uint64_t v158 = 3 * v137;
      int v159 = v150 - 1;
      if (!v150) {
        int v159 = 2;
      }
      uint64_t v160 = 4 * (v159 + (int)v158);
      uint64_t v161 = v154 + 2;
      *(_DWORD *)&v8[4 * v161] = *(_DWORD *)&v8[v160];
      int v162 = *(_DWORD *)&v8[v160];
      if ((v162 & 0x80000000) == 0) {
        *(_DWORD *)&v8[4 * v162] = v161;
      }
      if ((int)v81 < 0) {
        int v163 = -1;
      }
      else {
        int v163 = v154 + 6;
      }
      *(_DWORD *)&v8[4 * v154 + 16] = v163;
      a2 = v189;
      if ((v81 & 0x80000000) == 0) {
        *(_DWORD *)&v8[4 * v154 + 24] = v154 + 4;
      }
      if (v150 == 2) {
        int v164 = 0;
      }
      else {
        int v164 = v150 + 1;
      }
      uint64_t v165 = 4 * (v164 + (int)v158);
      *(_DWORD *)&v8[4 * v154 + 20] = *(_DWORD *)&v8[v165];
      int v166 = *(_DWORD *)&v8[v165];
      if ((v166 & 0x80000000) == 0) {
        *(_DWORD *)&v8[4 * v166] = v154 + 5;
      }
      if ((v81 & 0x80000000) != 0)
      {
        *(_DWORD *)&v8[4 * v158 + 8] = -1;
        uint64_t v167 = (int)v158;
        *(_DWORD *)&v8[4 * (int)v158 + 4] = -1;
      }
      else
      {
        *(_DWORD *)&v8[4 * v154 + 28] = v154 + 9;
        *(_DWORD *)&v8[4 * v154 + 36] = v154 + 7;
        uint64_t v167 = (3 * v81);
        int v168 = v151 + 2;
        if ((v151 + 2) >= 3) {
          int v168 = v151 - 1;
        }
        uint64_t v169 = 4 * (v168 + (int)v167);
        *(_DWORD *)&v8[4 * v154 + 32] = *(_DWORD *)&v8[v169];
        int v170 = *(_DWORD *)&v8[v169];
        if ((v170 & 0x80000000) == 0) {
          *(_DWORD *)&v8[4 * v170] = v154 + 8;
        }
        if (v151 == 2) {
          int v171 = 0;
        }
        else {
          int v171 = v151 + 1;
        }
        int v172 = *(_DWORD *)&v8[4 * v171 + 4 * (int)v167];
        if ((v172 & 0x80000000) == 0)
        {
          int v173 = v154 + 11;
          *(_DWORD *)&v8[4 * v173] = v172;
          *(_DWORD *)&v8[4 * v172] = v173;
        }
        uint64_t v174 = &v8[4 * (int)v158];
        *((_DWORD *)v174 + 2) = -1;
        *(void *)uint64_t v174 = -1;
        *(_DWORD *)&v8[4 * (int)v167 + 8] = -1;
        *(_DWORD *)&v8[4 * (v167 + 1)] = -1;
      }
      *(_DWORD *)&v8[4 * v167] = -1;
      *(_DWORD *)(a1 + 160) += v83;
      ++*(_DWORD *)(a1 + 136);
      *((_DWORD *)v87 + 2) = -1;
      *(void *)int v87 = -1;
      if (v88)
      {
        *((_DWORD *)v88 + 2) = -1;
        *(void *)unsigned int v88 = -1;
      }
      int v20 = 1;
      BOOL v23 = v138;
      int v7 = v192;
      ++v21;
      int v22 = v138;
    }
    while (v190 != v21);
LABEL_146:
    if (!v20) {
      break;
    }
    int v17 = v19;
    int v18 = v187;
  }
  while (v188 >= 2);
  unsigned int v19 = *(_DWORD *)(a1 + 160);
LABEL_149:
  if (v19)
  {
    uint64_t v175 = 0;
    unint64_t v176 = 0;
    unsigned int v177 = 0;
    do
    {
      uint64_t v178 = *(void *)(a1 + 168);
      uint64_t v179 = v178 + v175;
      int v180 = *(_DWORD *)(v178 + v175);
      if (v180 != -1)
      {
        int v181 = *(_DWORD *)(v179 + 4);
        if (v181 != -1)
        {
          int v182 = *(_DWORD *)(v178 + v175 + 8);
          if (v181 != v182 && v180 != v182 && v180 != v181 && v182 != -1)
          {
            *(_OWORD *)(v178 + 16 * (int)v177++) = *(_OWORD *)v179;
            unsigned int v19 = *(_DWORD *)(a1 + 160);
          }
        }
      }
      ++v176;
      v175 += 16;
    }
    while (v176 < v19);
  }
  else
  {
    unsigned int v177 = 0;
  }
  *(_DWORD *)(a1 + 160) = v177;
  *(void *)(a1 + 168) = malloc_type_realloc(*(void **)(a1 + 168), 16 * v177, 0x1000040451B5BE8uLL);
  *(void *)(a1 + 144) = malloc_type_realloc(*(void **)(a1 + 144), 12 * *(unsigned int *)(a1 + 136), 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 152) = malloc_type_realloc(*(void **)(a1 + 152), 12 * *(unsigned int *)(a1 + 136), 0x10000403E1C8BA9uLL);
  free(v8);
  return 1;
}

BOOL mc_edgebreaker_decompress(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (!*(_DWORD *)v2) {
    goto LABEL_4;
  }
  uint64_t v3 = *(void *)(v2 + 32);
  if ((unint64_t)(v3 + 4) > *(void *)(v2 + 24))
  {
    *(_DWORD *)uint64_t v2 = 0;
LABEL_4:
    int v4 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_6;
  }
  int v4 = *(_DWORD *)(*(void *)(v2 + 8) + v3);
  *(void *)(v2 + 32) = v3 + 4;
  *(_DWORD *)(a1 + 24) = v4;
  if (v4 < 0) {
    return 0;
  }
LABEL_6:
  unsigned int v5 = malloc_type_malloc(4 * (3 * v4), 0x100004052888210uLL);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a1 + 24)), 0x100004052888210uLL);
  *(void *)(a1 + 40) = v6;
  memset(v6, 255, 12 * v4);
  memset(v5, 255, 12 * v4);
  uint64_t v7 = *(void *)(a1 + 72);
  unint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(v7 + 32);
  unint64_t v10 = v8 - v9;
  if (v8 - v9 >= 0x10)
  {
    while (*(_DWORD *)v7)
    {
      if (v9 + 4 > v8) {
        goto LABEL_10;
      }
      uint64_t v23 = *(unsigned int *)(*(void *)(v7 + 8) + v9);
      *(void *)(v7 + 32) = v9 + 4;
      uint64_t v11 = v9 + 8;
      if (v9 + 8 > v8) {
        goto LABEL_10;
      }
      uint64_t v24 = *(unsigned int *)(*(void *)(v7 + 8) + v9 + 4);
      *(void *)(v7 + 32) = v11;
      if ((v23 & 0x80000000) == 0) {
        *(_DWORD *)&v6[4 * v23] = v24;
      }
      if ((v24 & 0x80000000) == 0) {
        *(_DWORD *)&v6[4 * v24] = v23;
      }
      v10 -= 8;
      uint64_t v9 = v11;
      if (v10 <= 0xF) {
        goto LABEL_8;
      }
    }
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(v7 + 32);
LABEL_8:
  if (!*(_DWORD *)v7)
  {
LABEL_11:
    int v13 = 0;
    int v14 = 0;
    *(_DWORD *)(a1 + 28) = 0;
    goto LABEL_12;
  }
  uint64_t v12 = v11 + 4;
  if (v11 + 4 > v8)
  {
LABEL_10:
    *(_DWORD *)uint64_t v7 = 0;
    goto LABEL_11;
  }
  int v13 = *(_DWORD *)(*(void *)(v7 + 8) + v11);
  *(void *)(v7 + 32) = v12;
  *(_DWORD *)(a1 + 28) = v13;
  unint64_t v32 = v11 + 8;
  if (v32 <= v8)
  {
    int v14 = *(_DWORD *)(*(void *)(v7 + 8) + v12);
    *(void *)(v7 + 32) = v32;
  }
  else
  {
    int v14 = 0;
    *(_DWORD *)uint64_t v7 = 0;
  }
LABEL_12:
  BOOL v15 = 0;
  if ((v13 & 0x80000000) == 0 && (v14 & 0x80000000) == 0)
  {
    float v16 = (int *)malloc_type_calloc(v4, 4uLL, 0x100004052888210uLL);
    int v17 = malloc_type_malloc(3 * v4, 0x100004077774924uLL);
    int v18 = v17;
    LODWORD(v19) = 0;
    if (v4 >= 1 && !v14)
    {
      *int v17 = 80;
      LODWORD(v19) = 1;
    }
    if ((int)v19 < v4)
    {
      int v20 = 0;
      int v21 = 0;
      int v22 = v19;
      while (1)
      {
        uint64_t v25 = *(void *)(a1 + 64);
        if (*(_DWORD *)v25)
        {
          uint64_t v26 = *(void *)(v25 + 32);
          uint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) <= *(void *)(v25 + 24))
          {
            int v28 = *(unsigned __int8 *)(*(void *)(v25 + 8) + v26);
            *(void *)(v25 + 32) = v27;
            uint64_t v19 = v22 + 1;
            v17[v22] = v28;
            if (v28 == 69)
            {
              if (v20 < 1)
              {
                ++v21;
                if ((int)v19 < v4)
                {
                  if (v21 >= v14)
                  {
                    v17[v19] = 80;
                    LODWORD(v19) = v22 + 2;
                  }
                  else
                  {
                    v16[v21] = v19;
                  }
                }
              }
              else
              {
                --v20;
              }
            }
            else if (v28 == 83 && *(_DWORD *)&v6[12 * v22 + 4 * ((3 * v22 + 2) % 3)] == -1)
            {
              ++v20;
            }
            goto LABEL_29;
          }
          *(_DWORD *)uint64_t v25 = 0;
        }
        LODWORD(v19) = v22 + 1;
        v17[v22] = 0;
LABEL_29:
        int v22 = v19;
        if ((int)v19 >= v4) {
          goto LABEL_44;
        }
      }
    }
    int v21 = 0;
LABEL_44:
    LODWORD(v29) = v19 - 1;
    if ((int)v19 < 1)
    {
      unint64_t v30 = 0;
      int v31 = v13 - 1;
      if (v21 < 1)
      {
LABEL_160:
        free(v30);
        BOOL v15 = v31 == -1;
        free(v16);
        free(v18);
        return v15;
      }
    }
    else
    {
      unint64_t v30 = (unsigned int *)malloc_type_calloc(3 * (int)v19, 4uLL, 0x100004052888210uLL);
      int v31 = v13 - 1;
      if (v21 < 1) {
        goto LABEL_160;
      }
    }
    LODWORD(v33) = 0;
    do
    {
      --v21;
      uint64_t v29 = (int)v29;
      unsigned int v34 = -1;
      while (v21 >= v14 || (v21 & 0x80000000) == 0 && v29 >= v16[v21])
      {
        switch(*((unsigned char *)v18 + v29))
        {
          case 'C':
            int v35 = 3 * v29;
            int v36 = 3 * v29 + 1;
            if ((v34 & 0x80000000) == 0) {
              *(_DWORD *)&v6[4 * v34] = v36;
            }
            if ((v29 & 0x8000000000000000) == 0) {
              *(_DWORD *)&v6[4 * v36] = v34;
            }
            int v37 = v35 + 2;
            int v38 = 3 * ((v35 + 2) / 3);
            unsigned int v39 = v38 + (v35 + 4) % 3;
            uint64_t v40 = &v6[4 * v39];
            if ((*(_DWORD *)v40 & 0x80000000) != 0 || *(_DWORD *)v40 == v37)
            {
              int v41 = v37;
            }
            else
            {
              int v41 = v37;
              do
              {
                *((_DWORD *)v5 + (v41 + 1) % 3 + v38) = v31;
                int v41 = *(_DWORD *)v40;
                int v38 = 3 * (*(_DWORD *)v40 / 3);
                unsigned int v39 = v38 + (*(_DWORD *)v40 + 2) % 3;
                uint64_t v40 = &v6[4 * v39];
              }
              while ((*(_DWORD *)v40 & 0x80000000) == 0 && *(_DWORD *)v40 != v37);
            }
            *((_DWORD *)v5 + (v41 + 1) % 3 + v38) = v31;
            if ((v39 & 0x80000000) == 0) {
              *(_DWORD *)&v6[4 * v39] = v37;
            }
            --v31;
            if ((v29 & 0x8000000000000000) == 0) {
              *(_DWORD *)&v6[4 * v37] = v39;
            }
            goto LABEL_55;
          case 'E':
            if ((int)v34 >= 1 && v30)
            {
              v30[(int)v33] = v34;
              LODWORD(v33) = v33 + 1;
            }
            goto LABEL_55;
          case 'L':
            int v42 = 3 * v29 + 1;
            if ((v34 & 0x80000000) != 0) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 'P':
            int v43 = 3 * v29;
            if ((v34 & 0x80000000) == 0) {
              *(_DWORD *)&v6[4 * v34] = v43;
            }
            if ((v29 & 0x8000000000000000) == 0) {
              *(_DWORD *)&v6[4 * v43] = v34;
            }
            int v44 = v31 - 2;
            int v45 = v43 + 1;
            int v46 = 3 * ((v43 + 1) / 3);
            unsigned int v47 = v46 + (v43 + 3) % 3;
            uint64_t v48 = &v6[4 * v47];
            if ((*(_DWORD *)v48 & 0x80000000) != 0 || *(_DWORD *)v48 == v45)
            {
              int v50 = v43 + 1;
              int v49 = 3 * (v45 / 3);
            }
            else
            {
              int v49 = 3 * (v45 / 3);
              int v50 = v43 + 1;
              do
              {
                *((_DWORD *)v5 + (v50 + 1) % 3 + v49) = v44;
                int v50 = *(_DWORD *)v48;
                int v49 = 3 * (*(_DWORD *)v48 / 3);
                unsigned int v47 = v49 + (*(_DWORD *)v48 + 2) % 3;
                uint64_t v48 = &v6[4 * v47];
              }
              while ((*(_DWORD *)v48 & 0x80000000) == 0 && *(_DWORD *)v48 != v45);
            }
            *((_DWORD *)v5 + (v50 + 1) % 3 + v49) = v44;
            if ((v47 & 0x80000000) == 0) {
              *(_DWORD *)&v6[4 * v47] = v45;
            }
            if ((v29 & 0x8000000000000000) == 0) {
              *(_DWORD *)&v6[4 * v45] = v47;
            }
            int v57 = v31 - 1;
            int v58 = v43 + 2;
            int v59 = 3 * ((v43 + 2) / 3);
            unsigned int v60 = v59 + (v43 + 4) % 3;
            uint64_t v61 = &v6[4 * v60];
            if ((*(_DWORD *)v61 & 0x80000000) != 0 || *(_DWORD *)v61 == v58)
            {
              int v63 = v43 + 2;
              int v62 = 3 * (v58 / 3);
            }
            else
            {
              int v62 = 3 * (v58 / 3);
              int v63 = v43 + 2;
              do
              {
                *((_DWORD *)v5 + (v63 + 1) % 3 + v62) = v57;
                int v63 = *(_DWORD *)v61;
                int v62 = 3 * (*(_DWORD *)v61 / 3);
                unsigned int v60 = v62 + (*(_DWORD *)v61 + 2) % 3;
                uint64_t v61 = &v6[4 * v60];
              }
              while ((*(_DWORD *)v61 & 0x80000000) == 0 && *(_DWORD *)v61 != v58);
            }
            *((_DWORD *)v5 + (v63 + 1) % 3 + v62) = v57;
            if ((v60 & 0x80000000) == 0) {
              *(_DWORD *)&v6[4 * v60] = v58;
            }
            if ((v29 & 0x8000000000000000) == 0) {
              *(_DWORD *)&v6[4 * v58] = v60;
            }
            int v64 = v45 - v46;
            unsigned int v65 = v58 - v59 + v43;
            float v66 = &v6[4 * v65];
            if ((*(_DWORD *)v66 & 0x80000000) != 0)
            {
              *((_DWORD *)v5 + v43 + v64) = v31;
              if ((v65 & 0x80000000) == 0) {
                goto LABEL_127;
              }
            }
            else
            {
              int v67 = 3 * v29;
              if (*(_DWORD *)v66 != v43)
              {
                int v67 = 3 * v29;
                int v68 = 3 * v29;
                do
                {
                  *((_DWORD *)v5 + (v68 + 1) % 3 + v67) = v31;
                  int v68 = *(_DWORD *)v66;
                  int v67 = 3 * (*(_DWORD *)v66 / 3);
                  unsigned int v65 = v67 + (*(_DWORD *)v66 + 2) % 3;
                  float v66 = &v6[4 * v65];
                }
                while ((*(_DWORD *)v66 & 0x80000000) == 0 && *(_DWORD *)v66 != v43);
                int v64 = (v68 + 1) % 3;
              }
              *((_DWORD *)v5 + v67 + v64) = v31;
              if ((v65 & 0x80000000) == 0) {
LABEL_127:
              }
                *(_DWORD *)&v6[4 * v65] = v43;
            }
            if ((v29 & 0x8000000000000000) == 0) {
              *(_DWORD *)&v6[4 * v43] = v65;
            }
            v31 -= 3;
            --v21;
            goto LABEL_55;
          case 'R':
            int v42 = 3 * v29 + 2;
            if ((v34 & 0x80000000) == 0) {
LABEL_74:
            }
              *(_DWORD *)&v6[4 * v34] = v42;
LABEL_75:
            if ((v29 & 0x8000000000000000) == 0) {
              *(_DWORD *)&v6[4 * v42] = v34;
            }
            goto LABEL_55;
          case 'S':
            uint64_t v51 = 3 * v29;
            int v52 = 3 * v29 + 1;
            if ((v34 & 0x80000000) == 0) {
              *(_DWORD *)&v6[4 * v34] = v52;
            }
            if (v29 < 0)
            {
              uint64_t v53 = v51 + 2;
              int v69 = *(_DWORD *)&v6[4 * v53];
              if (v69 == -1 && v30 != 0)
              {
                uint64_t v33 = (int)v33 - 1;
                uint64_t v77 = v30[v33];
                if ((v77 & 0x80000000) != 0) {
                  goto LABEL_55;
                }
                goto LABEL_151;
              }
              if (v69 > -2) {
                goto LABEL_55;
              }
              unsigned int v56 = -v69;
            }
            else
            {
              *(_DWORD *)&v6[4 * v52] = v34;
              uint64_t v53 = v51 + 2;
              int v54 = *(_DWORD *)&v6[4 * v53];
              if (v54 == -1 && v30 != 0)
              {
                uint64_t v33 = (int)v33 - 1;
                uint64_t v77 = v30[v33];
                *(_DWORD *)&v6[4 * v53] = v77;
                if ((v77 & 0x80000000) != 0) {
                  goto LABEL_55;
                }
LABEL_151:
                *(_DWORD *)&v6[4 * v77] = v53;
                goto LABEL_55;
              }
              if (v54 >= -1) {
                goto LABEL_55;
              }
              unsigned int v56 = -v54;
              *(_DWORD *)&v6[4 * v53] = v56;
            }
            *(_DWORD *)&v6[4 * v56] = v53;
            do
            {
              int v71 = 3 * ((int)v53 / 3) + ((int)v53 + 1) % 3;
              LODWORD(v53) = *(_DWORD *)&v6[4 * v71];
            }
            while ((v53 & 0x80000000) == 0);
            int v72 = 3 * (v71 / 3) + (v71 + 1) % 3;
            do
            {
              int v73 = 3 * (v72 / 3) + (v72 + 1) % 3;
              int v72 = *(_DWORD *)&v6[4 * v73];
            }
            while ((v72 & 0x80000000) == 0);
            do
            {
              int v74 = 3 * (v73 / 3);
              *((_DWORD *)v5 + v74 + (v73 + 1) % 3) = v31;
              int v73 = v74 + (v73 + 2) % 3;
              for (unsigned int i = *(_DWORD *)&v6[4 * v73]; (i & 0x80000000) == 0; unsigned int i = *(_DWORD *)&v6[4 * v73])
              {
                unsigned int v76 = 3 * (i / 3);
                *((_DWORD *)v5 + v76 + (i + 1) % 3) = v31;
                int v73 = v76 + (i + 2) % 3;
              }
              --v31;
            }
            while (*((_DWORD *)v5 + 3 * (v73 / 3) + (v73 + 1) % 3) == -1);
LABEL_55:
            unsigned int v34 = 3 * v29--;
            break;
          default:
            goto LABEL_55;
        }
      }
      if (v14)
      {
        int v78 = 3 * v16[v21];
        int v79 = 3 * ((v78 + 1) / 3) + (v78 + 2) % 3;
        do
        {
          int v80 = 3 * (v79 / 3) + (v79 + 1) % 3;
          int v79 = *(_DWORD *)&v6[4 * v80];
        }
        while ((v79 & 0x80000000) == 0);
        do
        {
          int v81 = 3 * (v80 / 3);
          *((_DWORD *)v5 + v81 + (v80 + 1) % 3) = v31;
          int v80 = v81 + (v80 + 2) % 3;
          for (unsigned int j = *(_DWORD *)&v6[4 * v80]; (j & 0x80000000) == 0; unsigned int j = *(_DWORD *)&v6[4 * v80])
          {
            unsigned int v83 = 3 * (j / 3);
            *((_DWORD *)v5 + v83 + (j + 1) % 3) = v31;
            int v80 = v83 + (j + 2) % 3;
          }
          --v31;
        }
        while (*((_DWORD *)v5 + 3 * (v80 / 3) + (v80 + 1) % 3) == -1);
        --v14;
      }
    }
    while (v21 > 0);
    goto LABEL_160;
  }
  return v15;
}

BOOL mc_edgebreaker_decompress_and_update_mesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(int *)(a1 + 160);
  uint64_t v11 = *(int *)(a1 + 136);
  *(_OWORD *)uint64_t v27 = 0u;
  *(_OWORD *)int v28 = 0u;
  v25[0] = v10;
  v25[1] = v11;
  uint64_t v26 = malloc_type_calloc(3 * v10, 4uLL, 0x100004052888210uLL);
  uint64_t v29 = malloc_type_malloc(4 * v10, 0x100004052888210uLL);
  unint64_t v30 = malloc_type_malloc(4 * v11, 0x100004052888210uLL);
  memset(v30, 255, 4 * v11);
  uint64_t v12 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
  *(_DWORD *)uint64_t v12 = 1;
  v12[1] = a4;
  v12[3] = a5;
  if (a5) {
    *(_DWORD *)uint64_t v12 = a4 != 0;
  }
  unint64_t v32 = v12;
  int v13 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
  *(_DWORD *)int v13 = 1;
  v13[1] = a2;
  unsigned char v13[3] = a3;
  if (a3) {
    *(_DWORD *)int v13 = a2 != 0;
  }
  int v31 = v13;
  BOOL v14 = mc_edgebreaker_decompress((uint64_t)v25);
  BOOL v15 = v28[0];
  if (v14 && *(_DWORD *)(a1 + 160))
  {
    unint64_t v16 = 0;
    int v17 = (_DWORD *)(*(void *)(a1 + 168) + 8);
    int v18 = (int *)((char *)v28[0] + 8);
    do
    {
      *(v17 - 2) = *(v18 - 2);
      *(v17 - 1) = *(v18 - 1);
      int v19 = *v18;
      v18 += 3;
      *int v17 = v19;
      v17 += 4;
      ++v16;
    }
    while (v16 < *(unsigned int *)(a1 + 160));
  }
  int v20 = v31;
  if (v31)
  {
    int v21 = (void *)*((void *)v31 + 2);
    if (v21) {
      free(v21);
    }
    free(v20);
  }
  int v22 = v32;
  if (v32)
  {
    uint64_t v23 = (void *)*((void *)v32 + 2);
    if (v23) {
      free(v23);
    }
    free(v22);
  }
  free(v27[0]);
  free(v26);
  free(v28[1]);
  free(v15);
  free(v29);
  free(v30);
  return v14;
}

uint64_t mc_decode_vert_cube(uint64_t a1, const float *a2, float a3, float a4, float a5, double a6, float a7, double a8, double a9, double a10)
{
  int v17 = (float32x2_t *)malloc_type_malloc(4 * *(unsigned int *)(a1 + 136), 0x100004052888210uLL);
  double v68 = a5;
  double v72 = 1.0 / a4;
  long double v18 = cbrt(v72 * (v68 + v68));
  uint64_t v19 = *(unsigned int *)(a1 + 136);
  if (!v19) {
    goto LABEL_9;
  }
  unint64_t v20 = *(void *)(a1 + 144);
  if (a5 != 0.0)
  {
    double v27 = v72 / (v18 * v18) + v18 / v68;
    double v28 = -v18;
    *(double *)&uint64_t v29 = a7;
    if (v19 >= 4
      && (v20 >= (unint64_t)v17 + 4 * v19 || (unint64_t)v17 >= v20 + 12 * v19))
    {
      uint64_t v30 = v19 & 0xFFFFFFFC;
      float64x2_t v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28, 0);
      float64x2_t v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0);
      float64x2_t v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v27, 0);
      float64x2_t v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v72, 0);
      float64x2_t v57 = (float64x2_t)vdupq_lane_s64(v29, 0);
      int8x16_t v58 = (int8x16_t)vdupq_n_s64(0x7FF0000000000000uLL);
      uint64_t v59 = v30;
      unsigned int v60 = (float32x4_t *)v17;
      uint64_t v61 = a2;
      int8x16_t v62 = (int8x16_t)vdupq_n_s64(0xFFF0000000000000);
      int v63 = *(float **)(a1 + 144);
      do
      {
        float32x4x4_t v76 = vld4q_f32(v61);
        v61 += 16;
        v74.val[0] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v76.val[0]), a3);
        v74.val[1] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v76.val[1]), a3);
        v74.val[2] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v76.val[2]), a3);
        v76.val[0] = vcvtq_f32_s32((int32x4_t)v76.val[3]);
        v76.val[1] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v76.val[0].f32);
        vst3q_f32(v63, v74);
        v63 += 12;
        v76.val[0] = (float32x4_t)vcvt_hight_f64_f32(v76.val[0]);
        v76.val[2] = (float32x4_t)vmulq_n_f64((float64x2_t)v76.val[0], v68);
        v76.val[3] = (float32x4_t)vmulq_n_f64((float64x2_t)v76.val[1], v68);
        int8x16_t v64 = (int8x16_t)vcgeq_f64((float64x2_t)v76.val[3], v53);
        int8x16_t v65 = (int8x16_t)vcgeq_f64((float64x2_t)v76.val[2], v53);
        float64x2_t v66 = vdivq_f64(v56, vsubq_f64(v55, (float64x2_t)v76.val[0]));
        float64x2_t v67 = vdivq_f64(v56, vsubq_f64(v55, (float64x2_t)v76.val[1]));
        v76.val[0] = (float32x4_t)vdivq_f64(v56, vaddq_f64(v55, (float64x2_t)v76.val[0]));
        v76.val[1] = (float32x4_t)vdivq_f64(v56, vaddq_f64(v55, (float64x2_t)v76.val[1]));
        v76.val[1] = (float32x4_t)vminnmq_f64((float64x2_t)vbslq_s8(vandq_s8(v64, (int8x16_t)vcgeq_f64(v54, (float64x2_t)v76.val[3])), (int8x16_t)v76.val[3], vbslq_s8(vandq_s8(v64, (int8x16_t)vcgtq_f64((float64x2_t)v76.val[3], v54)), vbslq_s8((int8x16_t)vcgtzq_f64(v67), (int8x16_t)vsqrtq_f64(v67), v58), vbslq_s8((int8x16_t)vcgtzq_f64((float64x2_t)v76.val[1]), (int8x16_t)vnegq_f64(vsqrtq_f64((float64x2_t)v76.val[1])), v62))), v57);
        v76.val[0] = (float32x4_t)vminnmq_f64((float64x2_t)vbslq_s8(vandq_s8(v65, (int8x16_t)vcgeq_f64(v54, (float64x2_t)v76.val[2])), (int8x16_t)v76.val[2], vbslq_s8(vandq_s8(v65, (int8x16_t)vcgtq_f64((float64x2_t)v76.val[2], v54)), vbslq_s8((int8x16_t)vcgtzq_f64(v66), (int8x16_t)vsqrtq_f64(v66), v58), vbslq_s8((int8x16_t)vcgtzq_f64((float64x2_t)v76.val[0]), (int8x16_t)vnegq_f64(vsqrtq_f64((float64x2_t)v76.val[0])), v62))), v57);
        *v60++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64((float64x2_t)v76.val[1], (float64x2_t)v76.val[1])), vmulq_f64((float64x2_t)v76.val[0], (float64x2_t)v76.val[0]));
        v59 -= 4;
      }
      while (v59);
      if (v30 == v19) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    uint64_t v31 = v19 - v30;
    unint64_t v32 = (_DWORD *)v17 + v30;
    uint64_t v33 = (float *)(v20 + 12 * v30 + 8);
    unsigned int v34 = (int *)&a2[4 * v30 + 2];
    while (1)
    {
      *((float32x2_t *)v33 - 1) = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v34 - 2)), a3);
      *uint64_t v33 = (float)*v34 * a3;
      double v40 = (float)v34[1];
      double v38 = v40 * v68;
      if (v40 * v68 < v28) {
        break;
      }
      if (v38 > v18)
      {
        double v41 = v72 / (v27 - v40);
        double v36 = sqrt(v41);
        BOOL v37 = v41 <= 0.0;
        double v38 = INFINITY;
LABEL_16:
        if (!v37) {
          double v38 = v36;
        }
      }
      double v39 = fmin(v38, *(double *)&v29);
      *(float *)&double v39 = v39 * v39;
      *v32++ = LODWORD(v39);
      v33 += 3;
      v34 += 4;
      if (!--v31) {
        goto LABEL_9;
      }
    }
    double v35 = v72 / (v27 + v40);
    double v36 = -sqrt(v35);
    BOOL v37 = v35 <= 0.0;
    double v38 = -INFINITY;
    goto LABEL_16;
  }
  *(float *)&long double v18 = 1.0 / (float)-(float)(*(float *)&a6 - (float)(a7 * a7));
  if (v19 < 4
    || v20 < (unint64_t)v17 + 4 * v19 && (unint64_t)v17 < v20 + 12 * v19)
  {
    uint64_t v21 = 0;
LABEL_7:
    uint64_t v22 = v19 - v21;
    uint64_t v23 = (float *)v17 + v21;
    uint64_t v24 = (float *)(v20 + 12 * v21 + 8);
    uint64_t v25 = (int *)&a2[4 * v21 + 2];
    do
    {
      *((float32x2_t *)v24 - 1) = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v25 - 2)), a3);
      float *v24 = (float)*v25 * a3;
      v24 += 3;
      *v23++ = (float)(1.0 / fmaxf((float)v25[1] * a4, *(float *)&v18)) - *(float *)&a6;
      v25 += 4;
      --v22;
    }
    while (v22);
    goto LABEL_9;
  }
  float32x4_t v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 0);
  float32x4_t v43 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
  uint64_t v21 = v19 & 0xFFFFFFFC;
  __asm { FMOV            V3.4S, #1.0 }
  uint64_t v49 = v21;
  int v50 = (float32x4_t *)v17;
  uint64_t v51 = a2;
  int v52 = *(float **)(a1 + 144);
  do
  {
    float32x4x4_t v75 = vld4q_f32(v51);
    v51 += 16;
    v73.val[0] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v75.val[0]), a3);
    v73.val[1] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v75.val[1]), a3);
    v73.val[2] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v75.val[2]), a3);
    vst3q_f32(v52, v73);
    v52 += 12;
    *v50++ = vsubq_f32(vdivq_f32(_Q3, vmaxnmq_f32(vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v75.val[3]), a4), v42)), v43);
    v49 -= 4;
  }
  while (v49);
  if (v21 != v19) {
    goto LABEL_7;
  }
LABEL_9:
  mc_mesh_cube_distance_unproject(a1, v17, a8, a9, a10);
  free(v17);
  return 1;
}

uint64_t mc_encode_decode_vert(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  unint64_t v8 = (char *)malloc_type_malloc(12 * *(unsigned int *)(a1 + 136), 0x8CA9B5EDuLL);
  uint64_t v9 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a1 + 160)), 0x100004052888210uLL);
  uint64_t v10 = v9;
  if (*(_DWORD *)(a1 + 160))
  {
    unint64_t v11 = 0;
    uint64_t v12 = v9 + 8;
    int v13 = (int *)(*(void *)(a1 + 168) + 8);
    do
    {
      *(v12 - 2) = *(v13 - 2);
      *(v12 - 1) = *(v13 - 1);
      int v14 = *v13;
      v13 += 4;
      *uint64_t v12 = v14;
      v12 += 3;
      ++v11;
      unint64_t v15 = *(unsigned int *)(a1 + 160);
    }
    while (v11 < v15);
    uint64_t v16 = *(unsigned int *)(a1 + 136);
    if (!a4)
    {
LABEL_7:
      if ((int)v16 <= 0)
      {
        uint64_t v26 = mc_encode_decode_predictive(v15, v16, v10, v8, 3u, a3, a4);
        goto LABEL_27;
      }
      uint64_t v17 = *(void *)(a1 + 144);
      float64x2_t v18 = *(float64x2_t *)a2;
      __asm { FMOV            V2.2D, #1.0 }
      uint64_t v24 = *(uint64_t *)(a2 + 16);
      if (v16 == 1)
      {
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = v16 & 0xFFFFFFFE;
        float64x2_t v27 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18.f64[0], 0));
        float64x2_t v28 = vdivq_f64(_Q2, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1));
        float64x2_t v29 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(v24, 0));
        uint64_t v30 = v25;
        uint64_t v31 = (float *)v8;
        unint64_t v32 = *(const float **)(a1 + 144);
        do
        {
          float32x2x3_t v61 = vld3_f32(v32);
          v32 += 6;
          v62.val[0] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v61.val[0]), v27))));
          v62.val[1] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v61.val[1]), v28))));
          v62.val[2] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v61.val[2]), v29))));
          vst3_f32(v31, v62);
          v31 += 6;
          v30 -= 2;
        }
        while (v30);
        if (v25 == v16) {
          goto LABEL_16;
        }
      }
      float64x2_t v33 = vdivq_f64(_Q2, v18);
      uint64_t v34 = v16 - v25;
      uint64_t v35 = 12 * v25 + 8;
      double v36 = (float *)(v17 + v35);
      BOOL v37 = (int32x2_t *)&v8[v35];
      double v38 = 1.0 / *(double *)&v24;
      do
      {
        v37[-1] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v36 - 2)), v33))));
        float v39 = *v36;
        v36 += 3;
        v37->i32[0] = llround(v39 * v38);
        BOOL v37 = (int32x2_t *)((char *)v37 + 12);
        --v34;
      }
      while (v34);
LABEL_16:
      LODWORD(v15) = *(_DWORD *)(a1 + 160);
      LODWORD(v16) = *(_DWORD *)(a1 + 136);
    }
  }
  else
  {
    LODWORD(v15) = 0;
    uint64_t v16 = *(unsigned int *)(a1 + 136);
    if (!a4) {
      goto LABEL_7;
    }
  }
  uint64_t v40 = mc_encode_decode_predictive(v15, v16, v10, v8, 3u, a3, a4);
  uint64_t v26 = v40;
  if (a4)
  {
    if (v40)
    {
      uint64_t v41 = *(unsigned int *)(a1 + 136);
      if ((int)v41 >= 1)
      {
        uint64_t v42 = *(void *)(a1 + 144);
        float64x2_t v43 = *(float64x2_t *)a2;
        double v44 = *(double *)(a2 + 16);
        if (v41 < 4)
        {
          uint64_t v45 = 0;
LABEL_25:
          uint64_t v53 = v41 - v45;
          uint64_t v54 = 12 * v45 + 8;
          float64x2_t v55 = (float32x2_t *)(v42 + v54);
          float64x2_t v56 = &v8[v54];
          do
          {
            uint64_t v57 = *((void *)v56 - 1);
            v58.i64[0] = (int)v57;
            v58.i64[1] = SHIDWORD(v57);
            v55[-1] = vcvt_f32_f64(vmulq_f64(v43, vcvtq_f64_s64(v58)));
            int v59 = *(_DWORD *)v56;
            v56 += 12;
            *(float *)&uint64_t v57 = v44 * (double)v59;
            v55->i32[0] = v57;
            float64x2_t v55 = (float32x2_t *)((char *)v55 + 12);
            --v53;
          }
          while (v53);
          goto LABEL_27;
        }
        uint64_t v45 = v41 & 0x7FFFFFFC;
        uint64_t v46 = v41 & 0xFFFFFFFC;
        unsigned int v47 = (const float *)v8;
        uint64_t v48 = *(float **)(a1 + 144);
        do
        {
          float32x4x3_t v63 = vld3q_f32(v47);
          v47 += 12;
          v49.i64[0] = v63.val[0].i32[0];
          v49.i64[1] = v63.val[0].i32[1];
          float64x2_t v50 = vcvtq_f64_s64(v49);
          v49.i64[0] = v63.val[0].i32[2];
          v49.i64[1] = v63.val[0].i32[3];
          v64.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v50, v43.f64[0])), vmulq_n_f64(vcvtq_f64_s64(v49), v43.f64[0]));
          v49.i64[0] = v63.val[1].i32[0];
          v49.i64[1] = v63.val[1].i32[1];
          float64x2_t v51 = vcvtq_f64_s64(v49);
          v49.i64[0] = v63.val[1].i32[2];
          v49.i64[1] = v63.val[1].i32[3];
          v64.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_laneq_f64(v51, v43, 1)), vmulq_laneq_f64(vcvtq_f64_s64(v49), v43, 1));
          v49.i64[0] = v63.val[2].i32[0];
          v49.i64[1] = v63.val[2].i32[1];
          float64x2_t v52 = vcvtq_f64_s64(v49);
          v49.i64[0] = v63.val[2].i32[2];
          v49.i64[1] = v63.val[2].i32[3];
          v64.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v52, v44)), vmulq_n_f64(vcvtq_f64_s64(v49), v44));
          vst3q_f32(v48, v64);
          v48 += 12;
          v46 -= 4;
        }
        while (v46);
        if (v45 != v41) {
          goto LABEL_25;
        }
      }
    }
  }
LABEL_27:
  free(v10);
  free(v8);
  return v26;
}

void mc_io_r_vertices_cam(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = 0;
  long long v92 = 0u;
  long long v93 = 0u;
  memset(v91, 0, sizeof(v91));
  int v90 = 0;
  float v4 = 0.0;
  unint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 == v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unsigned int v9 = 0;
LABEL_14:
    float v15 = 0.0;
LABEL_15:
    float v16 = 0.0;
    goto LABEL_16;
  }
  if (!*(_DWORD *)a1 || (uint64_t v10 = v6 + 4, v6 + 4 > v5))
  {
LABEL_13:
    uint64_t v7 = 0;
    unsigned int v9 = 0;
    *(_DWORD *)a1 = 0;
    uint64_t v8 = v6;
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  int v12 = *(_DWORD *)(v11 + v6);
  *(void *)(a1 + 32) = v10;
  uint64_t v8 = v6 + 6;
  if (v6 + 6 > v5)
  {
    v6 += 4;
    goto LABEL_13;
  }
  unsigned int v13 = *(unsigned __int16 *)(v11 + v10);
  *(void *)(a1 + 32) = v8;
  if (v12 != 1263421507 || v13 >= 2)
  {
    v6 += 6;
    goto LABEL_13;
  }
  uint64_t v58 = v6 + 10;
  if (v6 + 10 > v5)
  {
    *(_DWORD *)a1 = 0;
    int v59 = &v90;
LABEL_69:
    unsigned int v61 = 0;
    uint64_t v7 = 0;
    *int v59 = 0;
    int v60 = v90;
    goto LABEL_70;
  }
  int v60 = *(_DWORD *)(v11 + v8);
  *(void *)(a1 + 32) = v58;
  int v90 = v60;
  uint64_t v8 = v6 + 12;
  if (v6 + 12 > v5)
  {
    uint64_t v8 = v6 + 10;
    int v59 = (int *)a1;
    goto LABEL_69;
  }
  unsigned int v61 = *(unsigned __int16 *)(v11 + v58);
  *(void *)(a1 + 32) = v8;
  uint64_t v63 = v6 + 14;
  if (v6 + 14 <= v5)
  {
    *(void *)(a1 + 32) = v63;
    uint64_t v8 = v6 + 22;
    if (v6 + 22 <= v5)
    {
      uint64_t v7 = *(void *)(v11 + v63);
      *(void *)(a1 + 32) = v8;
    }
    else
    {
      uint64_t v7 = 0;
      *(_DWORD *)a1 = 0;
      uint64_t v8 = v6 + 14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_70:
  unsigned int v9 = 0;
  if (v60 != 9 || v61 > 1) {
    goto LABEL_14;
  }
  if (!*(_DWORD *)a1 || (uint64_t v62 = v8 + 4, v8 + 4 > v5))
  {
    unsigned int v9 = 0;
    goto LABEL_14;
  }
  uint64_t v64 = *(void *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(v64 + v8);
  *(void *)(a1 + 32) = v62;
  uint64_t v65 = v8 + 8;
  if (v8 + 8 > v5) {
    goto LABEL_14;
  }
  float v15 = *(float *)(v64 + v62);
  *(void *)(a1 + 32) = v65;
  uint64_t v66 = v8 + 12;
  if (v8 + 12 > v5) {
    goto LABEL_15;
  }
  uint64_t v67 = *(void *)(a1 + 8);
  float v16 = *(float *)(v67 + v65);
  *(void *)(a1 + 32) = v66;
  uint64_t v68 = v8 + 16;
  if (v8 + 16 > v5
    || (float v4 = *(float *)(v67 + v66), *(void *)(a1 + 32) = v68, v8 + 18 > v5)
    || (int v69 = *(unsigned __int16 *)(*(void *)(a1 + 8) + v68), *(void *)(a1 + 32) = v8 + 18, v69))
  {
LABEL_16:
    *(_DWORD *)a1 = 0;
    if (v9 == *(_DWORD *)(a2 + 136)) {
      goto LABEL_17;
    }
LABEL_86:
    uint64_t v17 = 0;
LABEL_87:
    *(_DWORD *)a1 = 0;
    goto LABEL_88;
  }
  float v87 = v16;
  float v89 = v15;
  mc_read_mat4(a1, (double *)v91);
  if (*(_DWORD *)a1)
  {
    unint64_t v71 = *(void *)(a1 + 24);
    uint64_t v70 = *(void *)(a1 + 32);
    uint64_t v72 = v70 + 2;
    if (v70 + 2 <= v71)
    {
      uint64_t v73 = *(void *)(a1 + 8);
      int v74 = *(unsigned __int16 *)(v73 + v70);
      *(void *)(a1 + 32) = v72;
      if (!v74)
      {
        uint64_t v75 = v70 + 4;
        if (v70 + 4 <= v71)
        {
          int v77 = *(unsigned __int16 *)(v73 + v72);
          *(void *)(a1 + 32) = v75;
          LODWORD(v92) = v77;
          uint64_t v78 = v70 + 12;
          float32x4x4_t v76 = (long long *)a1;
          if (v70 + 12 <= v71)
          {
            uint64_t v79 = *(void *)(v73 + v75);
            *(void *)(a1 + 32) = v78;
            *((void *)&v92 + 1) = v79;
            uint64_t v80 = v70 + 20;
            if (v70 + 20 <= v71)
            {
              uint64_t v81 = *(void *)(v73 + v78);
              *(void *)(a1 + 32) = v80;
              *(void *)&long long v93 = v81;
              uint64_t v82 = v70 + 28;
              if (v70 + 28 <= v71)
              {
                uint64_t v83 = *(void *)(v73 + v80);
                *(void *)(a1 + 32) = v82;
                *((void *)&v93 + 1) = v83;
                unint64_t v84 = v70 + 36;
                if (v84 <= v71)
                {
                  uint64_t v85 = *(void *)(v73 + v82);
                  *(void *)(a1 + 32) = v84;
                  uint64_t v94 = v85;
                  float v16 = v87;
                  float v15 = v89;
                  if (v9 != *(_DWORD *)(a2 + 136)) {
                    goto LABEL_86;
                  }
                  goto LABEL_17;
                }
                *(_DWORD *)a1 = 0;
              }
              else
              {
                *(_DWORD *)a1 = 0;
                *((void *)&v93 + 1) = 0;
              }
              goto LABEL_97;
            }
            *(_DWORD *)a1 = 0;
LABEL_96:
            long long v93 = 0uLL;
LABEL_97:
            uint64_t v94 = 0;
            float v16 = v87;
            float v15 = v89;
            if (v9 != *(_DWORD *)(a2 + 136)) {
              goto LABEL_86;
            }
            goto LABEL_17;
          }
        }
        else
        {
          float32x4x4_t v76 = &v92;
          *(_DWORD *)a1 = 0;
        }
        *(_DWORD *)float32x4x4_t v76 = 0;
        *((void *)&v92 + 1) = 0;
        goto LABEL_96;
      }
    }
  }
  *(_DWORD *)a1 = 0;
  float v16 = v87;
  float v15 = v89;
  if (v9 != *(_DWORD *)(a2 + 136)) {
    goto LABEL_86;
  }
LABEL_17:
  if (!*(_DWORD *)a1)
  {
    uint64_t v17 = 0;
    goto LABEL_88;
  }
  float v86 = v16;
  float v88 = v15;
  uint64_t v17 = (float32x4_t *)malloc_type_malloc(4 * (int)(3 * v9), 0x100004052888210uLL);
  mc_read_tiny_big(a1, 3 * v9, v17);
  if (*(_DWORD *)a1 && *(void *)(a1 + 24) >= (unint64_t)(v7 + v8)) {
    *(void *)(a1 + 32) = v7 + v8;
  }
  float64x2_t v18 = (char *)malloc_type_malloc(4 * (int)(3 * v9), 0x100004052888210uLL);
  uint64_t v19 = v18;
  if ((int)v9 >= 1)
  {
    if (v9 < 8)
    {
      uint64_t v20 = 0;
LABEL_47:
      unint64_t v32 = &v17->i32[v20];
      float64x2_t v33 = &v17->i32[v20 + v9];
      uint64_t v34 = v9 - v20;
      uint64_t v35 = &v18[12 * v20 + 8];
      do
      {
        *((_DWORD *)v35 - 2) = *v32;
        int v36 = *v33++;
        *((_DWORD *)v35 - 1) = v36;
        *(_DWORD *)uint64_t v35 = v32[2 * v9];
        v35 += 12;
        ++v32;
        --v34;
      }
      while (v34);
      goto LABEL_49;
    }
    uint64_t v20 = 0;
    uint64_t v21 = (float32x4_t *)&v18[12 * v9];
    uint64_t v22 = (char *)v17 + 8 * v9;
    uint64_t v23 = &v17->i8[4 * v9];
    BOOL v25 = v18 < v22 && v23 < (char *)v21;
    BOOL v27 = v18 < v23 && v17 < v21;
    if (v22 < (char *)v21 && v18 < (char *)v17 + 12 * v9) {
      goto LABEL_47;
    }
    if (v25) {
      goto LABEL_47;
    }
    if (v27) {
      goto LABEL_47;
    }
    uint64_t v20 = v9 & 0xFFFFFFFC;
    uint64_t v29 = v20;
    uint64_t v30 = v17;
    uint64_t v31 = (float *)v18;
    do
    {
      v95.val[0] = *v30;
      v95.val[1] = *(float32x4_t *)((char *)v30 + 4 * v9);
      v95.val[2] = *(float32x4_t *)((char *)v30 + 8 * v9);
      vst3q_f32(v31, v95);
      v31 += 12;
      ++v30;
      v29 -= 4;
    }
    while (v29);
    if (v20 != v9) {
      goto LABEL_47;
    }
  }
LABEL_49:
  memcpy(v17, v18, 4 * (int)(3 * v9));
  free(v19);
  BOOL v37 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a2 + 160)), 0x100004052888210uLL);
  double v38 = v37;
  if (*(_DWORD *)(a2 + 160))
  {
    unint64_t v39 = 0;
    uint64_t v40 = v37 + 8;
    uint64_t v41 = (int *)(*(void *)(a2 + 168) + 8);
    do
    {
      *(v40 - 2) = *(v41 - 2);
      *(v40 - 1) = *(v41 - 1);
      int v42 = *v41;
      v41 += 4;
      _DWORD *v40 = v42;
      v40 += 3;
      ++v39;
      unint64_t v43 = *(unsigned int *)(a2 + 160);
    }
    while (v39 < v43);
  }
  else
  {
    LODWORD(v43) = 0;
  }
  int v44 = mc_encode_decode_predictive(v43, *(_DWORD *)(a2 + 136), v38, (char *)v17, 3u, (char *)v17, 1);
  free(v38);
  if (!v44) {
    goto LABEL_87;
  }
  uint64_t v46 = *(unsigned int *)(a2 + 136);
  if (v46)
  {
    uint64_t v47 = *(void *)(a2 + 144);
    *(float *)v45.i32 = 1.0 / v4;
    if (v46 < 4)
    {
      uint64_t v48 = 0;
LABEL_61:
      uint64_t v53 = v46 - v48;
      uint64_t v54 = 12 * v48 + 8;
      float64x2_t v55 = (float *)(v47 + v54);
      float64x2_t v56 = (int *)((char *)v17 + v54);
      do
      {
        *((float32x2_t *)v55 - 1) = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v56 - 2)), v88);
        int v57 = *v56;
        v56 += 3;
        *float64x2_t v55 = fmaxf(v86 * (float)v57, *(float *)v45.i32);
        v55 += 3;
        --v53;
      }
      while (v53);
      goto LABEL_63;
    }
    uint64_t v48 = v46 & 0xFFFFFFFC;
    float32x4_t v49 = (float32x4_t)vdupq_lane_s32(v45, 0);
    uint64_t v50 = v48;
    float64x2_t v51 = (const float *)v17;
    float64x2_t v52 = *(float **)(a2 + 144);
    do
    {
      float32x4x3_t v96 = vld3q_f32(v51);
      v51 += 12;
      v97.val[0] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v96.val[0]), v88);
      v97.val[1] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v96.val[1]), v88);
      v97.val[2] = vmaxnmq_f32(vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v96.val[2]), v86), v49);
      vst3q_f32(v52, v97);
      v52 += 12;
      v50 -= 4;
    }
    while (v50);
    if (v48 != v46) {
      goto LABEL_61;
    }
  }
LABEL_63:
  if (!mc_mesh_cam_unproject(a2, 0, (uint64_t)v91)) {
    goto LABEL_87;
  }
LABEL_88:
  free(v17);
}

void mc_io_r_vertices_predictive(uint64_t a1, uint64_t a2)
{
  v36[3] = *MEMORY[0x1E4F143B8];
  int v35 = 0;
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == v3)
  {
LABEL_2:
    unint64_t v5 = 0;
LABEL_9:
    *(_DWORD *)a1 = 0;
    goto LABEL_10;
  }
  unint64_t v6 = v4 + 4;
  if (*(_DWORD *)a1) {
    BOOL v7 = v6 > v3;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7
    || (uint64_t v8 = *(void *)(a1 + 8), v9 = *(_DWORD *)(v8 + v4), *(void *)(a1 + 32) = v6, v10 = v4 + 6, v4 + 6 > v3)
    || ((unsigned int v11 = *(unsigned __int16 *)(v8 + v6), *(void *)(a1 + 32) = v10, v9 == 1263421507)
      ? (BOOL v12 = v11 >= 2)
      : (BOOL v12 = 1),
        v12))
  {
    unint64_t v5 = 0;
    *(_DWORD *)a1 = 0;
    goto LABEL_9;
  }
  uint64_t v14 = v4 + 10;
  if (v4 + 10 > v3)
  {
    *(_DWORD *)a1 = 0;
    float v15 = &v35;
LABEL_22:
    unsigned int v17 = 0;
    uint64_t v18 = 0;
    int *v15 = 0;
    int v16 = v35;
    goto LABEL_23;
  }
  int v16 = *(_DWORD *)(v8 + v10);
  *(void *)(a1 + 32) = v14;
  int v35 = v16;
  uint64_t v10 = v4 + 12;
  if (v4 + 12 > v3)
  {
    uint64_t v10 = v4 + 10;
    float v15 = (int *)a1;
    goto LABEL_22;
  }
  unsigned int v17 = *(unsigned __int16 *)(v8 + v14);
  *(void *)(a1 + 32) = v10;
  uint64_t v34 = v4 + 14;
  if (v4 + 14 <= v3)
  {
    *(void *)(a1 + 32) = v34;
    uint64_t v10 = v4 + 22;
    if (v4 + 22 <= v3)
    {
      uint64_t v18 = *(void *)(v8 + v34);
      *(void *)(a1 + 32) = v10;
    }
    else
    {
      uint64_t v18 = 0;
      *(_DWORD *)a1 = 0;
      uint64_t v10 = v4 + 14;
    }
  }
  else
  {
    uint64_t v18 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_23:
  unint64_t v5 = 0;
  if (v16 != 6 || v17 > 1) {
    goto LABEL_9;
  }
  if (!*(_DWORD *)a1) {
    goto LABEL_2;
  }
  uint64_t v19 = v10 + 4;
  if (v10 + 4 > v3) {
    goto LABEL_2;
  }
  uint64_t v20 = *(void *)(a1 + 8);
  int v21 = *(_DWORD *)(v20 + v10);
  *(void *)(a1 + 32) = v19;
  uint64_t v22 = v10 + 12;
  if (v10 + 12 > v3) {
    goto LABEL_2;
  }
  uint64_t v23 = *(void *)(v20 + v19);
  *(void *)(a1 + 32) = v22;
  v36[0] = v23;
  uint64_t v24 = v10 + 20;
  if (v10 + 20 > v3) {
    goto LABEL_2;
  }
  uint64_t v25 = *(void *)(a1 + 8);
  uint64_t v26 = *(void *)(v25 + v22);
  *(void *)(a1 + 32) = v24;
  v36[1] = v26;
  if (v10 + 28 > v3) {
    goto LABEL_2;
  }
  uint64_t v27 = *(void *)(v25 + v24);
  *(void *)(a1 + 32) = v10 + 28;
  v36[2] = v27;
  if (v21 != *(_DWORD *)(a2 + 136)) {
    goto LABEL_2;
  }
  int v28 = 3 * v21;
  uint64_t v29 = (char *)malloc_type_malloc(12 * v21, 0x100004052888210uLL);
  mc_read_tiny_big(a1, v28, v29);
  if (!*(_DWORD *)a1)
  {
    unint64_t v5 = v29;
    goto LABEL_9;
  }
  if (*(void *)(a1 + 24) >= (unint64_t)(v18 + v10)) {
    *(void *)(a1 + 32) = v18 + v10;
  }
  uint64_t v30 = (char *)malloc_type_malloc(4 * v28, 0x100004052888210uLL);
  unint64_t v5 = v30;
  if (*(_DWORD *)(a2 + 136))
  {
    unint64_t v31 = 0;
    unint64_t v32 = v30 + 8;
    do
    {
      *(v32 - 2) = *(_DWORD *)&v29[4 * v31];
      *(v32 - 1) = *(_DWORD *)&v29[4 * (v31 + *(_DWORD *)(a2 + 136))];
      int v33 = v31++ + 2 * *(_DWORD *)(a2 + 136);
      *unint64_t v32 = *(_DWORD *)&v29[4 * v33];
      v32 += 3;
    }
    while (v31 < *(unsigned int *)(a2 + 136));
  }
  free(v29);
  if (!mc_encode_decode_vert(a2, (uint64_t)v36, v5, 1)) {
    goto LABEL_9;
  }
LABEL_10:
  free(v5);
}

void mc_io_r_vertices_cube(uint64_t a1, uint64_t a2)
{
  int v76 = 0;
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == v3) {
    goto LABEL_10;
  }
  if (!*(_DWORD *)a1) {
    goto LABEL_10;
  }
  uint64_t v5 = v4 + 4;
  if (v4 + 4 > v3) {
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + v4);
  *(void *)(a1 + 32) = v5;
  uint64_t v8 = v4 + 6;
  if (v4 + 6 > v3) {
    goto LABEL_10;
  }
  unsigned int v9 = *(unsigned __int16 *)(v6 + v5);
  *(void *)(a1 + 32) = v8;
  if (v7 != 1263421507 || v9 > 1)
  {
LABEL_10:
    unsigned int v11 = 0;
LABEL_11:
    *(_DWORD *)a1 = 0;
    goto LABEL_12;
  }
  uint64_t v13 = v4 + 10;
  if (v4 + 10 > v3)
  {
    *(_DWORD *)a1 = 0;
    uint64_t v14 = &v76;
LABEL_19:
    unsigned int v16 = 0;
    uint64_t v17 = 0;
    *uint64_t v14 = 0;
    int v15 = v76;
    goto LABEL_20;
  }
  int v15 = *(_DWORD *)(v6 + v8);
  *(void *)(a1 + 32) = v13;
  int v76 = v15;
  uint64_t v8 = v4 + 12;
  if (v4 + 12 > v3)
  {
    uint64_t v8 = v4 + 10;
    uint64_t v14 = (int *)a1;
    goto LABEL_19;
  }
  unsigned int v16 = *(unsigned __int16 *)(v6 + v13);
  *(void *)(a1 + 32) = v8;
  uint64_t v43 = v4 + 14;
  if (v4 + 14 <= v3)
  {
    *(void *)(a1 + 32) = v43;
    uint64_t v8 = v4 + 22;
    if (v4 + 22 <= v3)
    {
      uint64_t v17 = *(void *)(v6 + v43);
      *(void *)(a1 + 32) = v8;
    }
    else
    {
      uint64_t v17 = 0;
      *(_DWORD *)a1 = 0;
      uint64_t v8 = v4 + 14;
    }
  }
  else
  {
    uint64_t v17 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_20:
  unsigned int v11 = 0;
  if (v15 != 8 || v16 > 1) {
    goto LABEL_11;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v18 = v8 + 4;
    if (v8 + 4 <= v3)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = *(int *)(v19 + v8);
      *(void *)(a1 + 32) = v18;
      uint64_t v21 = v8 + 8;
      if (v8 + 8 <= v3)
      {
        float v22 = *(float *)(v19 + v18);
        *(void *)(a1 + 32) = v21;
        uint64_t v23 = v8 + 12;
        if (v8 + 12 <= v3)
        {
          uint64_t v24 = *(void *)(a1 + 8);
          float v25 = *(float *)(v24 + v21);
          *(void *)(a1 + 32) = v23;
          uint64_t v26 = v8 + 16;
          if (v8 + 16 <= v3)
          {
            float v27 = *(float *)(v24 + v23);
            *(void *)(a1 + 32) = v26;
            uint64_t v28 = v8 + 24;
            if (v8 + 24 <= v3)
            {
              double v29 = *(double *)(*(void *)(a1 + 8) + v26);
              *(void *)(a1 + 32) = v28;
              uint64_t v30 = v8 + 32;
              if (v8 + 32 <= v3)
              {
                double v75 = v29;
                float v74 = v27;
                double v31 = *(double *)(*(void *)(a1 + 8) + v28);
                *(void *)(a1 + 32) = v30;
                uint64_t v32 = v8;
                unint64_t v33 = v8 + 40;
                if (v33 <= v3)
                {
                  double v34 = *(double *)(*(void *)(a1 + 8) + v30);
                  uint64_t v35 = v20;
                  *(void *)(a1 + 32) = v33;
                  int v36 = 4 * v20;
                  unsigned int v37 = v20;
                  size_t v38 = 16 * v20;
                  unsigned int v11 = (float32x4_t *)malloc_type_malloc(16 * v20, 0x100004052888210uLL);
                  mc_read_tiny_big(a1, v36, v11);
                  float v39 = 0.0;
                  if (*(_DWORD *)a1)
                  {
                    unint64_t v41 = *(void *)(a1 + 24);
                    uint64_t v40 = *(void *)(a1 + 32);
                    uint64_t v42 = v40 + 4;
                    if (v40 + 4 <= v41)
                    {
                      float v39 = *(float *)(*(void *)(a1 + 8) + v40);
                      if (v41 >= v17 + v32) {
                        uint64_t v42 = v17 + v32;
                      }
                      *(void *)(a1 + 32) = v42;
                    }
                    else
                    {
                      *(_DWORD *)a1 = 0;
                    }
                  }
                  int v44 = (float *)malloc_type_malloc(v38, 0x100004052888210uLL);
                  int32x2_t v45 = v44;
                  if ((int)v35 >= 1)
                  {
                    if (v37 < 8)
                    {
                      uint64_t v46 = 0;
LABEL_45:
                      uint64_t v47 = &v11->f32[v46];
                      uint64_t v48 = v46 + v35;
                      uint64_t v49 = v35 - v46;
                      uint64_t v50 = &v45[4 * v46 + 2];
                      float64x2_t v51 = &v11->i32[v48];
                      do
                      {
                        *(v50 - 2) = *v47;
                        int v52 = *v51++;
                        *((_DWORD *)v50 - 1) = v52;
                        *uint64_t v50 = v47[2 * v35];
                        v50[1] = v47[3 * v35];
                        ++v47;
                        v50 += 4;
                        --v49;
                      }
                      while (v49);
                      goto LABEL_47;
                    }
                    uint64_t v46 = 0;
                    unsigned int v61 = (float32x4_t *)&v44[4 * v35];
                    uint64_t v62 = &v11->f32[3 * v35];
                    uint64_t v63 = &v11->f32[2 * v35];
                    uint64_t v64 = &v11->f32[v35];
                    BOOL v66 = v44 < v62 && v63 < (float *)v61;
                    BOOL v68 = v44 < v63 && v64 < (float *)v61;
                    BOOL v70 = v44 < v64 && v11 < v61;
                    if (v62 < (float *)v61 && v44 < v11[v35].f32) {
                      goto LABEL_45;
                    }
                    if (v66) {
                      goto LABEL_45;
                    }
                    if (v68) {
                      goto LABEL_45;
                    }
                    if (v70) {
                      goto LABEL_45;
                    }
                    uint64_t v46 = v35 & 0x7FFFFFFC;
                    uint64_t v72 = v35 & 0xFFFFFFFC;
                    uint64_t v73 = v11;
                    do
                    {
                      v78.val[0] = *v73;
                      v78.val[1] = *(float32x4_t *)((char *)v73 + 4 * v35);
                      v78.val[2] = *(float32x4_t *)((char *)v73 + 8 * v35);
                      v78.val[3] = *(float32x4_t *)((char *)v73 + 12 * v35);
                      vst4q_f32(v45, v78);
                      v45 += 16;
                      ++v73;
                      v72 -= 4;
                    }
                    while (v72);
                    int32x2_t v45 = v44;
                    if (v46 != v35) {
                      goto LABEL_45;
                    }
                  }
LABEL_47:
                  memcpy(v11, v45, v38);
                  free(v45);
                  uint64_t v53 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a2 + 160)), 0x100004052888210uLL);
                  uint64_t v54 = v53;
                  if (*(_DWORD *)(a2 + 160))
                  {
                    unint64_t v55 = 0;
                    float64x2_t v56 = v53 + 8;
                    int v57 = (int *)(*(void *)(a2 + 168) + 8);
                    do
                    {
                      *(v56 - 2) = *(v57 - 2);
                      *(v56 - 1) = *(v57 - 1);
                      int v58 = *v57;
                      v57 += 4;
                      _DWORD *v56 = v58;
                      v56 += 3;
                      ++v55;
                      unint64_t v59 = *(unsigned int *)(a2 + 160);
                    }
                    while (v55 < v59);
                  }
                  else
                  {
                    LODWORD(v59) = 0;
                  }
                  int v60 = mc_encode_decode_predictive(v59, *(_DWORD *)(a2 + 136), v54, (char *)v11, 4u, (char *)v11, 1);
                  free(v54);
                  mc_decode_vert_cube(a2, v11->f32, v22, v25, v39, 0.0, v74, v75, v31, v34);
                  if (v60) {
                    goto LABEL_12;
                  }
                  goto LABEL_11;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_10;
  }
  unsigned int v11 = 0;
LABEL_12:
  free(v11);
}

double mc_io_r_uv_model(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)a2) {
    goto LABEL_4;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = v3 + 2;
  if ((unint64_t)(v3 + 2) > *(void *)(a2 + 24)) {
    goto LABEL_4;
  }
  int v5 = *(unsigned __int16 *)(*(void *)(a2 + 8) + v3);
  *(void *)(a2 + 32) = v4;
  if (v5) {
    goto LABEL_4;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!*(_DWORD *)a2)
  {
LABEL_9:
    *(void *)a1 = 0;
    return result;
  }
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 + 2;
  if (v9 + 2 > v8)
  {
    *(_DWORD *)a2 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  int v12 = *(unsigned __int16 *)(v11 + v9);
  *(void *)(a2 + 32) = v10;
  *(_DWORD *)a1 = v12;
  unint64_t v13 = v9 + 4;
  if (v13 <= v8)
  {
    int v14 = *(__int16 *)(v11 + v10);
    *(void *)(a2 + 32) = v13;
  }
  else
  {
    int v14 = 0;
    *(_DWORD *)a2 = 0;
  }
  *(_DWORD *)(a1 + 4) = v14;
  if (v12)
  {
    if (v12 != 1) {
      goto LABEL_4;
    }
    if (v13 > v8) {
      goto LABEL_4;
    }
    uint64_t v15 = *(void *)(a2 + 32);
    uint64_t v16 = v15 + 2;
    if ((unint64_t)(v15 + 2) > *(void *)(a2 + 24)) {
      goto LABEL_4;
    }
    int v17 = *(unsigned __int16 *)(*(void *)(a2 + 8) + v15);
    *(void *)(a2 + 32) = v16;
    if (v17
      || (double result = mc_read_mat4(a2, (double *)(a1 + 8)), !*(_DWORD *)a2)
      || (v19 = *(void *)(a2 + 24), uint64_t v18 = *(void *)(a2 + 32), v20 = v18 + 2, v18 + 2 > v19)
      || (uint64_t v21 = *(void *)(a2 + 8), v22 = *(unsigned __int16 *)(v21 + v18), *(void *)(a2 + 32) = v20, v22))
    {
LABEL_4:
      *(_DWORD *)a2 = 0;
      return result;
    }
    uint64_t v23 = (_DWORD *)(a1 + 136);
    uint64_t v24 = v18 + 4;
    if (v18 + 4 > v19)
    {
      *(_DWORD *)a2 = 0;
LABEL_25:
      *uint64_t v23 = 0;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      double result = 0.0;
      *(void *)(a1 + 168) = 0;
      return result;
    }
    int v25 = *(unsigned __int16 *)(v21 + v20);
    *(void *)(a2 + 32) = v24;
    *uint64_t v23 = v25;
    uint64_t v26 = v18 + 12;
    if (v18 + 12 > v19)
    {
      uint64_t v23 = (_DWORD *)a2;
      goto LABEL_25;
    }
    uint64_t v27 = *(void *)(v21 + v24);
    *(void *)(a2 + 32) = v26;
    *(void *)(a1 + 144) = v27;
    uint64_t v28 = v18 + 20;
    if (v18 + 20 <= v19)
    {
      uint64_t v29 = *(void *)(v21 + v26);
      *(void *)(a2 + 32) = v28;
      *(void *)(a1 + 152) = v29;
      uint64_t v30 = v18 + 28;
      if (v18 + 28 <= v19)
      {
        uint64_t v31 = *(void *)(v21 + v28);
        *(void *)(a2 + 32) = v30;
        *(void *)(a1 + 160) = v31;
        unint64_t v32 = v18 + 36;
        if (v32 <= v19)
        {
          double result = *(double *)(v21 + v30);
          *(void *)(a2 + 32) = v32;
          *(double *)(a1 + 168) = result;
        }
        else
        {
          *(_DWORD *)a2 = 0;
          double result = 0.0;
          *(void *)(a1 + 168) = 0;
        }
      }
      else
      {
        *(_DWORD *)a2 = 0;
        *(void *)(a1 + 160) = 0;
        double result = 0.0;
        *(void *)(a1 + 168) = 0;
      }
    }
    else
    {
      *(_DWORD *)a2 = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      double result = 0.0;
      *(void *)(a1 + 168) = 0;
    }
  }
  return result;
}

uint64_t mc_mesh_uv_encode_decode(uint64_t a1, int a2, long long *a3, uint64_t a4, char *a5, int a6)
{
  int v12 = (char *)malloc_type_malloc(12 * *(unsigned int *)(a1 + 136), 0x9AAC9FB8uLL);
  unint64_t v13 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a1 + 160)), 0x100004052888210uLL);
  if (a2)
  {
    int v14 = (float *)malloc_type_malloc(12 * *(unsigned int *)(a1 + 136), 0x10000403E1C8BA9uLL);
    if (!mc_uv_predictor_apply_hints(a1, a2, a3, (uint64_t)v14))
    {
      uint64_t v21 = 0;
      goto LABEL_43;
    }
    if (a6)
    {
      char v15 = 1;
      if (*(_DWORD *)(a1 + 160)) {
        goto LABEL_5;
      }
LABEL_10:
      LODWORD(v20) = 0;
      goto LABEL_11;
    }
    unint64_t v28 = *(unsigned int *)(a1 + 136);
    if (!v28) {
      goto LABEL_98;
    }
    unint64_t v29 = *(void *)(a1 + 152);
    if (v28 >= 8)
    {
      uint64_t v30 = 0;
      uint64_t v80 = 12 * v28 - 8;
      uint64_t v81 = (char *)v14 + v80;
      unint64_t v82 = v29 + v80;
      uint64_t v83 = 12 * v28 - 4;
      BOOL v85 = (unint64_t)(v14 + 1) < v29 + v83 && v29 + 4 < (unint64_t)v14 + v83;
      BOOL v87 = (unint64_t)(v14 + 2) < v29 + 12 * v28 && v29 + 8 < (unint64_t)&v14[3 * v28];
      if ((v29 >= (unint64_t)v81 || (unint64_t)v14 >= v82) && !v85 && !v87)
      {
        uint64_t v30 = v28 & 0xFFFFFFFC;
        uint64_t v89 = v30;
        int v90 = *(const float **)(a1 + 152);
        uint64_t v91 = v14;
        do
        {
          float32x4x3_t v132 = vld3q_f32(v90);
          v90 += 12;
          float32x4x3_t v136 = vld3q_f32(v91);
          v140.val[0] = vsubq_f32(v132.val[0], v136.val[0]);
          v140.val[1] = vsubq_f32(v132.val[1], v136.val[1]);
          v140.val[2] = vsubq_f32(v132.val[2], v136.val[2]);
          vst3q_f32(v91, v140);
          v91 += 12;
          v89 -= 4;
        }
        while (v89);
        if (v30 == v28)
        {
LABEL_91:
          float64x2_t v97 = *(float64x2_t *)a4;
          uint64_t v98 = *(uint64_t *)(a4 + 16);
          __asm { FMOV            V2.2D, #1.0 }
          if (v28 >= 2)
          {
            uint64_t v101 = 0;
            uint64_t v100 = v28 & 0xFFFFFFFE;
            float64x2_t v102 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v97.f64[0], 0));
            float64x2_t v103 = vdivq_f64(_Q2, (float64x2_t)vdupq_laneq_s64((int64x2_t)v97, 1));
            float64x2_t v104 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(v98, 0));
            do
            {
              uint64_t v105 = &v14[v101];
              float32x2x3_t v128 = vld3_f32(v105);
              v130.val[0] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v128.val[0]), v102))));
              v130.val[1] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v128.val[1]), v103))));
              v130.val[2] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v128.val[2]), v104))));
              unint64_t v106 = (float *)&v12[v101 * 4];
              vst3_f32(v106, v130);
              v101 += 6;
            }
            while (6 * (v28 >> 1) != v101);
            if (v100 == v28)
            {
LABEL_98:
              char v15 = 0;
              if (!*(_DWORD *)(a1 + 160)) {
                goto LABEL_10;
              }
              goto LABEL_5;
            }
          }
          else
          {
            uint64_t v100 = 0;
          }
          float64x2_t v107 = vdivq_f64(_Q2, v97);
          uint64_t v108 = v28 - v100;
          uint64_t v109 = 3 * v100;
          double v110 = 1.0 / *(double *)&v98;
          do
          {
            BOOL v111 = (int32x2_t *)&v12[v109 * 4];
            *BOOL v111 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)&v14[v109]), v107))));
            v111[1].i32[0] = llround(v14[v109 + 2] * v110);
            v109 += 3;
            --v108;
          }
          while (v108);
          goto LABEL_98;
        }
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    uint64_t v92 = v28 - v30;
    uint64_t v93 = 12 * v30 + 8;
    uint64_t v94 = (float *)((char *)v14 + v93);
    float32x4x3_t v95 = (float *)(v29 + v93);
    do
    {
      *((float32x2_t *)v94 - 1) = vsub_f32(*(float32x2_t *)(v95 - 2), *(float32x2_t *)(v94 - 2));
      float v96 = *v95;
      v95 += 3;
      *uint64_t v94 = v96 - *v94;
      v94 += 3;
      --v92;
    }
    while (v92);
    goto LABEL_91;
  }
  if (!a6)
  {
    uint64_t v31 = *(unsigned int *)(a1 + 136);
    if (!v31) {
      goto LABEL_105;
    }
    uint64_t v32 = *(void *)(a1 + 152);
    float64x2_t v33 = *(float64x2_t *)a4;
    uint64_t v34 = *(uint64_t *)(a4 + 16);
    if (v31 == 1)
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = v31 & 0xFFFFFFFE;
      __asm { FMOV            V5.2D, #1.0 }
      float64x2_t v113 = vdivq_f64(_Q5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33.f64[0], 0));
      float64x2_t v114 = vdivq_f64(_Q5, (float64x2_t)vdupq_laneq_s64((int64x2_t)v33, 1));
      float64x2_t v115 = vdivq_f64(_Q5, (float64x2_t)vdupq_lane_s64(v34, 0));
      uint64_t v116 = v35;
      float v117 = (float *)v12;
      float v118 = *(const float **)(a1 + 152);
      do
      {
        float32x2x3_t v127 = vld3_f32(v118);
        v118 += 6;
        v129.val[0] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v127.val[0]), v113))));
        v129.val[1] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v127.val[1]), v114))));
        v129.val[2] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v127.val[2]), v115))));
        vst3_f32(v117, v129);
        v117 += 6;
        v116 -= 2;
      }
      while (v116);
      if (v35 == v31)
      {
LABEL_105:
        char v15 = 0;
        int v14 = 0;
        if (!*(_DWORD *)(a1 + 160)) {
          goto LABEL_10;
        }
        goto LABEL_5;
      }
    }
    __asm { FMOV            V2.2D, #1.0 }
    float64x2_t v120 = vdivq_f64(_Q2, v33);
    uint64_t v121 = v31 - v35;
    uint64_t v122 = 12 * v35 + 8;
    float v123 = (float *)(v32 + v122);
    float v124 = (int32x2_t *)&v12[v122];
    double v125 = 1.0 / *(double *)&v34;
    do
    {
      v124[-1] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v123 - 2)), v120))));
      float v126 = *v123;
      v123 += 3;
      v124->i32[0] = llround(v126 * v125);
      float v124 = (int32x2_t *)((char *)v124 + 12);
      --v121;
    }
    while (v121);
    goto LABEL_105;
  }
  int v14 = 0;
  char v15 = 1;
  if (!*(_DWORD *)(a1 + 160)) {
    goto LABEL_10;
  }
LABEL_5:
  unint64_t v16 = 0;
  int v17 = v13 + 8;
  uint64_t v18 = (int *)(*(void *)(a1 + 168) + 8);
  do
  {
    *(v17 - 2) = *(v18 - 2);
    *(v17 - 1) = *(v18 - 1);
    int v19 = *v18;
    v18 += 4;
    *int v17 = v19;
    v17 += 3;
    ++v16;
    unint64_t v20 = *(unsigned int *)(a1 + 160);
  }
  while (v16 < v20);
LABEL_11:
  uint64_t v21 = mc_encode_decode_predictive(v20, *(_DWORD *)(a1 + 136), v13, v12, 3u, a5, a6);
  char v22 = v15 ^ 1;
  if (!v21) {
    char v22 = 1;
  }
  if (v22) {
    goto LABEL_43;
  }
  uint64_t v23 = *(unsigned int *)(a1 + 136);
  uint64_t v24 = *(float **)(a1 + 152);
  if ((int)v23 >= 1)
  {
    float64x2_t v25 = *(float64x2_t *)a4;
    double v26 = *(double *)(a4 + 16);
    if (v23 < 4)
    {
      uint64_t v27 = 0;
LABEL_27:
      uint64_t v43 = v23 - v27;
      uint64_t v44 = 12 * v27 + 8;
      int32x2_t v45 = (float32x2_t *)((char *)v24 + v44);
      uint64_t v46 = &v12[v44];
      do
      {
        uint64_t v47 = *((void *)v46 - 1);
        v48.i64[0] = (int)v47;
        v48.i64[1] = SHIDWORD(v47);
        v45[-1] = vcvt_f32_f64(vmulq_f64(v25, vcvtq_f64_s64(v48)));
        int v49 = *(_DWORD *)v46;
        v46 += 12;
        *(float *)&uint64_t v47 = v26 * (double)v49;
        v45->i32[0] = v47;
        int32x2_t v45 = (float32x2_t *)((char *)v45 + 12);
        --v43;
      }
      while (v43);
      goto LABEL_29;
    }
    uint64_t v27 = v23 & 0x7FFFFFFC;
    uint64_t v36 = v23 & 0xFFFFFFFC;
    unsigned int v37 = (const float *)v12;
    size_t v38 = *(float **)(a1 + 152);
    do
    {
      float32x4x3_t v133 = vld3q_f32(v37);
      v37 += 12;
      v39.i64[0] = v133.val[0].i32[0];
      v39.i64[1] = v133.val[0].i32[1];
      float64x2_t v40 = vcvtq_f64_s64(v39);
      v39.i64[0] = v133.val[0].i32[2];
      v39.i64[1] = v133.val[0].i32[3];
      v137.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v40, v25.f64[0])), vmulq_n_f64(vcvtq_f64_s64(v39), v25.f64[0]));
      v39.i64[0] = v133.val[1].i32[0];
      v39.i64[1] = v133.val[1].i32[1];
      float64x2_t v41 = vcvtq_f64_s64(v39);
      v39.i64[0] = v133.val[1].i32[2];
      v39.i64[1] = v133.val[1].i32[3];
      v137.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_laneq_f64(v41, v25, 1)), vmulq_laneq_f64(vcvtq_f64_s64(v39), v25, 1));
      v39.i64[0] = v133.val[2].i32[0];
      v39.i64[1] = v133.val[2].i32[1];
      float64x2_t v42 = vcvtq_f64_s64(v39);
      v39.i64[0] = v133.val[2].i32[2];
      v39.i64[1] = v133.val[2].i32[3];
      v137.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v42, v26)), vmulq_n_f64(vcvtq_f64_s64(v39), v26));
      vst3q_f32(v38, v137);
      v38 += 12;
      v36 -= 4;
    }
    while (v36);
    if (v27 != v23) {
      goto LABEL_27;
    }
  }
LABEL_29:
  if (a2)
  {
    if (!v23) {
      goto LABEL_43;
    }
    if (v23 >= 8)
    {
      uint64_t v50 = 0;
      uint64_t v68 = 12 * v23 - 8;
      unint64_t v69 = (unint64_t)v24 + v68;
      BOOL v70 = (float *)((char *)v14 + v68);
      uint64_t v71 = 12 * v23 - 4;
      BOOL v73 = v24 + 1 < (float *)((char *)v14 + v71) && v14 + 1 < (float *)((char *)v24 + v71);
      BOOL v75 = v24 + 2 < &v14[3 * v23] && v14 + 2 < &v24[3 * v23];
      if (((unint64_t)v14 >= v69 || v24 >= v70) && !v73 && !v75)
      {
        uint64_t v50 = v23 & 0xFFFFFFFC;
        uint64_t v77 = v50;
        float32x4x4_t v78 = v14;
        uint64_t v79 = v24;
        do
        {
          float32x4x3_t v131 = vld3q_f32(v79);
          float32x4x3_t v135 = vld3q_f32(v78);
          v78 += 12;
          v139.val[0] = vaddq_f32(v135.val[0], v131.val[0]);
          v139.val[1] = vaddq_f32(v135.val[1], v131.val[1]);
          v139.val[2] = vaddq_f32(v135.val[2], v131.val[2]);
          vst3q_f32(v79, v139);
          v79 += 12;
          v77 -= 4;
        }
        while (v77);
        if (v50 == v23) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      uint64_t v50 = 0;
    }
    uint64_t v51 = v23 - v50;
    uint64_t v52 = 12 * v50 + 8;
    uint64_t v53 = (float *)((char *)v14 + v52);
    uint64_t v54 = (float *)((char *)v24 + v52);
    do
    {
      *((float32x2_t *)v54 - 1) = vadd_f32(*(float32x2_t *)(v53 - 2), *(float32x2_t *)(v54 - 2));
      float v55 = *v53;
      v53 += 3;
      *uint64_t v54 = v55 + *v54;
      v54 += 3;
      --v51;
    }
    while (v51);
  }
LABEL_35:
  if (!v23) {
    goto LABEL_43;
  }
  if (v23 < 4)
  {
    uint64_t v56 = 0;
LABEL_41:
    uint64_t v64 = v23 - v56;
    uint64_t v65 = &v24[3 * v56 + 2];
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *((float32x2_t *)v65 - 1) = vmaxnm_f32(vminnm_f32(*(float32x2_t *)(v65 - 2), _D0), 0);
      *uint64_t v65 = fmaxf(fminf(*v65, 10000.0), 0.0);
      v65 += 3;
      --v64;
    }
    while (v64);
    goto LABEL_43;
  }
  uint64_t v56 = v23 & 0xFFFFFFFC;
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v61 = (float32x4_t)vdupq_n_s32(0x461C4000u);
  uint64_t v62 = v56;
  uint64_t v63 = v24;
  do
  {
    float32x4x3_t v134 = vld3q_f32(v63);
    v138.val[0] = vmaxnmq_f32(vminnmq_f32(v134.val[0], _Q0), (float32x4_t)0);
    v138.val[1] = vmaxnmq_f32(vminnmq_f32(v134.val[1], _Q0), (float32x4_t)0);
    v138.val[2] = vmaxnmq_f32(vminnmq_f32(v134.val[2], v61), (float32x4_t)0);
    vst3q_f32(v63, v138);
    v63 += 12;
    v62 -= 4;
  }
  while (v62);
  if (v56 != v23) {
    goto LABEL_41;
  }
LABEL_43:
  free(v14);
  free(v13);
  free(v12);
  return v21;
}

void mc_io_r_uv_predictive(uint64_t a1, uint64_t a2)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  int v95 = 0;
  unint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 == v4)
  {
    uint64_t v5 = 0;
LABEL_5:
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    int v6 = 0;
    int v10 = 0;
    goto LABEL_26;
  }
  int v6 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    int v10 = 0;
    goto LABEL_26;
  }
  uint64_t v7 = v5 + 4;
  if (v5 + 4 > v4) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  int v12 = *(_DWORD *)(v11 + v5);
  *(void *)(a1 + 32) = v7;
  uint64_t v13 = v5 + 6;
  if (v5 + 6 > v4)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    int v6 = 0;
    int v10 = 0;
    v5 += 4;
    goto LABEL_26;
  }
  unsigned int v14 = *(unsigned __int16 *)(v11 + v7);
  *(void *)(a1 + 32) = v13;
  if (v12 != 1263421507 || v14 > 1)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    int v6 = 0;
    int v10 = 0;
    v5 += 6;
    goto LABEL_26;
  }
  uint64_t v16 = v5 + 10;
  if (v5 + 10 > v4)
  {
    *(_DWORD *)a1 = 0;
    int v17 = &v95;
LABEL_19:
    unsigned int v19 = 0;
    uint64_t v8 = 0;
    *int v17 = 0;
    int v18 = v95;
    goto LABEL_20;
  }
  int v18 = *(_DWORD *)(v11 + v13);
  *(void *)(a1 + 32) = v16;
  int v95 = v18;
  uint64_t v13 = v5 + 12;
  if (v5 + 12 > v4)
  {
    uint64_t v13 = v5 + 10;
    int v17 = (int *)a1;
    goto LABEL_19;
  }
  unsigned int v19 = *(unsigned __int16 *)(v11 + v16);
  *(void *)(a1 + 32) = v13;
  uint64_t v79 = v5 + 14;
  if (v5 + 14 <= v4)
  {
    *(void *)(a1 + 32) = v79;
    uint64_t v13 = v5 + 22;
    if (v5 + 22 <= v4)
    {
      uint64_t v8 = *(void *)(v11 + v79);
      *(void *)(a1 + 32) = v13;
    }
    else
    {
      uint64_t v8 = 0;
      *(_DWORD *)a1 = 0;
      uint64_t v13 = v5 + 14;
    }
  }
  else
  {
    uint64_t v8 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_20:
  unsigned int v9 = 0;
  if (v18 != 7 || v19 > 2)
  {
    uint64_t v5 = v13;
    int v6 = 0;
    int v10 = 0;
    goto LABEL_26;
  }
  int v20 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    uint64_t v21 = v13 + 4;
    if (v13 + 4 <= v4)
    {
      int v6 = *(_DWORD *)(*(void *)(a1 + 8) + v13);
      *(void *)(a1 + 32) = v21;
      if (v13 + 8 <= v4)
      {
        int v10 = *(_DWORD *)(*(void *)(a1 + 8) + v21);
        *(void *)(a1 + 32) = v13 + 8;
        uint64_t v21 = v13 + 8;
      }
      else
      {
        int v20 = 0;
        int v10 = 0;
        *(_DWORD *)a1 = 0;
      }
    }
    else
    {
      int v6 = 0;
      int v20 = 0;
      int v10 = 0;
      *(_DWORD *)a1 = 0;
      uint64_t v21 = v13;
    }
  }
  else
  {
    int v6 = 0;
    int v10 = 0;
    uint64_t v21 = v13;
  }
  if (v19 < 2)
  {
    if (!v20) {
      goto LABEL_27;
    }
    uint64_t v81 = v21 + 8;
    if (v21 + 8 <= v4)
    {
      uint64_t v84 = *(void *)(a1 + 8);
      uint64_t v85 = *(void *)(v84 + v21);
      *(void *)(a1 + 32) = v81;
      uint64_t v96 = v85;
      unint64_t v86 = v21 + 16;
      if (v86 <= v4)
      {
        uint64_t v22 = *(void *)(v84 + v81);
        *(void *)(a1 + 32) = v86;
        goto LABEL_29;
      }
      int v20 = 0;
      *(_DWORD *)a1 = 0;
LABEL_28:
      uint64_t v22 = 0;
LABEL_29:
      int v23 = 0;
      uint64_t v97 = v22;
      uint64_t v24 = 0x3F847AE147AE147BLL;
      goto LABEL_30;
    }
    uint64_t v5 = v13;
    unsigned int v9 = v19;
LABEL_26:
    *(_DWORD *)a1 = 0;
    uint64_t v13 = v5;
    unsigned int v19 = v9;
LABEL_27:
    int v20 = 0;
    uint64_t v96 = 0;
    goto LABEL_28;
  }
  if (!v20) {
    goto LABEL_122;
  }
  uint64_t v80 = v21 + 1;
  if (v21 + 1 > v4)
  {
    *(_DWORD *)a1 = 0;
LABEL_122:
    int v23 = 0;
LABEL_123:
    uint64_t v96 = 0;
LABEL_124:
    int v20 = 0;
    uint64_t v97 = 0;
LABEL_125:
    uint64_t v24 = 0;
    unsigned int v19 = 2;
    goto LABEL_30;
  }
  uint64_t v82 = *(void *)(a1 + 8);
  int v23 = *(unsigned __int8 *)(v82 + v21);
  *(void *)(a1 + 32) = v80;
  uint64_t v83 = v21 + 9;
  if (v21 + 9 > v4)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_123;
  }
  uint64_t v91 = *(void *)(v82 + v80);
  *(void *)(a1 + 32) = v83;
  uint64_t v96 = v91;
  uint64_t v92 = v21 + 17;
  if (v21 + 17 > v4)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_124;
  }
  uint64_t v93 = *(void *)(*(void *)(a1 + 8) + v83);
  *(void *)(a1 + 32) = v92;
  uint64_t v97 = v93;
  unint64_t v94 = v21 + 25;
  if (v94 > v4)
  {
    int v20 = 0;
    *(_DWORD *)a1 = 0;
    goto LABEL_125;
  }
  uint64_t v24 = *(void *)(*(void *)(a1 + 8) + v92);
  *(void *)(a1 + 32) = v94;
  int v20 = 1;
  unsigned int v19 = 2;
LABEL_30:
  uint64_t v98 = v24;
  size_t v25 = *(unsigned int *)(a2 + 136);
  if (v25 != v10)
  {
    uint64_t v50 = 0;
    double v26 = 0;
    *(_DWORD *)a1 = 0;
    if (v6 != *(_DWORD *)(a2 + 160)) {
      goto LABEL_54;
    }
    goto LABEL_55;
  }
  if (v6 != *(_DWORD *)(a2 + 160))
  {
    uint64_t v50 = 0;
    double v26 = 0;
    goto LABEL_54;
  }
  if (!v20)
  {
    uint64_t v50 = 0;
    double v26 = 0;
    goto LABEL_55;
  }
  double v26 = (float32x4_t *)malloc_type_calloc(v25, 0xCuLL, 0x100004052888210uLL);
  int v27 = *(_DWORD *)(a2 + 136);
  int v28 = 2 * v27;
  int v29 = 3 * v27;
  if (v23) {
    int v30 = v29;
  }
  else {
    int v30 = v28;
  }
  mc_read_tiny_big(a1, v30, v26);
  if (v19 <= 1)
  {
    uint64_t v31 = *(int *)(a2 + 136);
    uint64_t v32 = (float32x4_t *)malloc_type_malloc(8 * v31, 0x100004052888210uLL);
    float64x2_t v33 = v32;
    if ((int)v31 >= 1)
    {
      if (v31 >= 8)
      {
        uint64_t v34 = 0;
        unint64_t v69 = (float32x4_t *)((char *)v32 + 4 * v31);
        BOOL v70 = (float32x4_t *)((char *)v26 + 8 * v31);
        BOOL v72 = v32 < v70 && v26 < v69;
        if ((v26 >= (float32x4_t *)((char *)v32 + 8 * v31) || v69 >= v70) && !v72)
        {
          uint64_t v34 = v31 & 0x7FFFFFF8;
          f32 = v26[2].f32;
          uint64_t v75 = v31 & 0xFFFFFFF8;
          int v76 = v32;
          do
          {
            uint64_t v77 = f32 - 8;
            float32x4x2_t v101 = vld2q_f32(v77);
            float32x4x2_t v102 = vld2q_f32(f32);
            *int v76 = v101.val[0];
            v76[1] = v102.val[0];
            float32x4x4_t v78 = (float32x4_t *)((char *)v76 + 4 * v31);
            *float32x4x4_t v78 = v101.val[1];
            v78[1] = v102.val[1];
            f32 += 16;
            v76 += 2;
            v75 -= 8;
          }
          while (v75);
          if (v34 == v31) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        uint64_t v34 = 0;
      }
      uint64_t v35 = &v32->i32[v34];
      uint64_t v36 = &v32->i32[v34 + v31];
      uint64_t v37 = v31 - v34;
      size_t v38 = &v26->i32[2 * v34 + 1];
      do
      {
        *v35++ = *(v38 - 1);
        __int32 v39 = *v38;
        v38 += 2;
        *v36++ = v39;
        --v37;
      }
      while (v37);
    }
LABEL_42:
    memcpy(v26, v32, 8 * v31);
    free(v33);
  }
  uint64_t v40 = *(unsigned int *)(a2 + 136);
  float64x2_t v41 = (char *)malloc_type_malloc(12 * v40, 0x100004052888210uLL);
  float64x2_t v42 = v41;
  if ((int)v40 < 1) {
    goto LABEL_48;
  }
  if (v40 < 8)
  {
    uint64_t v43 = 0;
LABEL_46:
    uint64_t v44 = &v26->i32[v43];
    int32x2_t v45 = &v26->i32[v43 + v40];
    uint64_t v46 = v40 - v43;
    uint64_t v47 = &v41[12 * v43 + 8];
    do
    {
      *((_DWORD *)v47 - 2) = *v44;
      int v48 = *v45++;
      *((_DWORD *)v47 - 1) = v48;
      *(_DWORD *)uint64_t v47 = v44[2 * v40];
      v47 += 12;
      ++v44;
      --v46;
    }
    while (v46);
    goto LABEL_48;
  }
  uint64_t v43 = 0;
  uint64_t v51 = (float32x4_t *)&v41[12 * v40];
  uint64_t v52 = (char *)v26 + 8 * v40;
  uint64_t v53 = &v26->i8[4 * v40];
  BOOL v55 = v41 < v52 && v53 < (char *)v51;
  BOOL v57 = v41 < v53 && v26 < v51;
  if (v52 < (char *)v51 && v41 < (char *)v26 + 12 * v40) {
    goto LABEL_46;
  }
  if (v55) {
    goto LABEL_46;
  }
  if (v57) {
    goto LABEL_46;
  }
  uint64_t v43 = v40 & 0x7FFFFFFC;
  uint64_t v59 = v40 & 0xFFFFFFFC;
  int v60 = v26;
  float32x4_t v61 = (float *)v41;
  do
  {
    v103.val[0] = *v60;
    v103.val[1] = *(float32x4_t *)((char *)v60 + 4 * v40);
    v103.val[2] = *(float32x4_t *)((char *)v60 + 8 * v40);
    vst3q_f32(v61, v103);
    v61 += 12;
    ++v60;
    v59 -= 4;
  }
  while (v59);
  if (v43 != v40) {
    goto LABEL_46;
  }
LABEL_48:
  memcpy(v26, v41, 12 * v40);
  free(v42);
  if (!*(_DWORD *)a1)
  {
    uint64_t v50 = 0;
    goto LABEL_55;
  }
  uint64_t v49 = *(void *)(a1 + 32);
  if ((unint64_t)(v49 + 2) > *(void *)(a1 + 24))
  {
    uint64_t v50 = 0;
LABEL_54:
    *(_DWORD *)a1 = 0;
    goto LABEL_55;
  }
  size_t v62 = *(unsigned __int16 *)(*(void *)(a1 + 8) + v49);
  *(void *)(a1 + 32) = v49 + 2;
  uint64_t v63 = (long long *)malloc_type_calloc(v62, 0xB0uLL, 0x1000040D737CE88uLL);
  uint64_t v50 = v63;
  if (v62)
  {
    uint64_t v64 = (uint64_t)v63;
    size_t v65 = v62;
    do
    {
      mc_io_r_uv_model(v64, a1);
      v64 += 176;
      --v65;
    }
    while (v65);
  }
  if (*(_DWORD *)a1)
  {
    if (*(void *)(a1 + 24) >= (unint64_t)(v13 + v8)) {
      *(void *)(a1 + 32) = v13 + v8;
    }
    if (!mc_mesh_uv_encode_decode(a2, v62, v50, (uint64_t)&v96, (char *)v26, 1)) {
      goto LABEL_54;
    }
    if (!v23)
    {
      uint64_t v66 = *(unsigned int *)(a2 + 136);
      if (v66)
      {
        uint64_t v67 = *(void *)(a2 + 152);
        if (v66 == 1)
        {
          uint64_t v68 = 0;
LABEL_137:
          uint64_t v89 = v66 - v68;
          int v90 = (_DWORD *)(v67 + 12 * v68 + 8);
          do
          {
            *int v90 = 1065353216;
            v90 += 3;
            --v89;
          }
          while (v89);
          goto LABEL_55;
        }
        uint64_t v68 = v66 & 0xFFFFFFFE;
        BOOL v87 = (_DWORD *)(v67 + 20);
        uint64_t v88 = v68;
        do
        {
          *(v87 - 3) = 1065353216;
          *BOOL v87 = 1065353216;
          v87 += 6;
          v88 -= 2;
        }
        while (v88);
        if (v68 != v66) {
          goto LABEL_137;
        }
      }
    }
  }
LABEL_55:
  free(v50);
  free(v26);
}

void mc_io_r_uv_model_chunk(uint64_t a1, _DWORD *a2, void **a3)
{
  if (*a3)
  {
    *(_DWORD *)a1 = 0;
    return;
  }
  int v23 = 0;
  unint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 == v4) {
    goto LABEL_10;
  }
  unint64_t v6 = v5 + 4;
  if (!*(_DWORD *)a1 || v6 > v4) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(_DWORD *)(v8 + v5);
  *(void *)(a1 + 32) = v6;
  uint64_t v10 = v5 + 6;
  if (v5 + 6 > v4) {
    goto LABEL_10;
  }
  unsigned int v11 = *(unsigned __int16 *)(v8 + v6);
  *(void *)(a1 + 32) = v10;
  if (v9 != 1263421507 || v11 > 1) {
    goto LABEL_10;
  }
  uint64_t v14 = v5 + 10;
  if (v5 + 10 <= v4)
  {
    int v16 = *(_DWORD *)(v8 + v10);
    *(void *)(a1 + 32) = v14;
    int v23 = v16;
    uint64_t v10 = v5 + 12;
    if (v5 + 12 <= v4)
    {
      unsigned int v17 = *(unsigned __int16 *)(v8 + v14);
      *(void *)(a1 + 32) = v10;
      uint64_t v22 = v5 + 14;
      if (v5 + 14 <= v4)
      {
        *(void *)(a1 + 32) = v22;
        uint64_t v10 = v5 + 22;
        if (v5 + 22 <= v4)
        {
          uint64_t v18 = *(void *)(v8 + v22);
          *(void *)(a1 + 32) = v10;
        }
        else
        {
          uint64_t v18 = 0;
          *(_DWORD *)a1 = 0;
          uint64_t v10 = v5 + 14;
        }
      }
      else
      {
        uint64_t v18 = 0;
        *(_DWORD *)a1 = 0;
      }
      goto LABEL_21;
    }
    uint64_t v10 = v5 + 10;
    char v15 = (int *)a1;
  }
  else
  {
    *(_DWORD *)a1 = 0;
    char v15 = &v23;
  }
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  int *v15 = 0;
  int v16 = v23;
LABEL_21:
  if (v16 != 10 || v17 >= 2) {
    goto LABEL_10;
  }
  if (!*(_DWORD *)a1) {
    return;
  }
  if (v10 + 2 > v4)
  {
LABEL_10:
    *(_DWORD *)a1 = 0;
    return;
  }
  size_t v19 = *(unsigned __int16 *)(*(void *)(a1 + 8) + v10);
  *(void *)(a1 + 32) = v10 + 2;
  *a2 = v19;
  *a3 = malloc_type_calloc(v19, 0xB0uLL, 0x1000040D737CE88uLL);
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 176 * v19;
    do
    {
      mc_io_r_uv_model((uint64_t)*a3 + v20, a1);
      v20 += 176;
    }
    while (v21 != v20);
  }
  if (*(_DWORD *)a1)
  {
    if (*(void *)(a1 + 24) >= (unint64_t)(v10 + v18)) {
      *(void *)(a1 + 32) = v10 + v18;
    }
  }
}

void mc_io_r_vi_connectivity_eb(uint64_t a1, uint64_t a2)
{
  int v35 = 0;
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == v3) {
    goto LABEL_10;
  }
  if (!*(_DWORD *)a1) {
    goto LABEL_10;
  }
  uint64_t v5 = v4 + 4;
  if (v4 + 4 > v3) {
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + v4);
  *(void *)(a1 + 32) = v5;
  uint64_t v8 = v4 + 6;
  if (v4 + 6 > v3) {
    goto LABEL_10;
  }
  unsigned int v9 = *(unsigned __int16 *)(v6 + v5);
  *(void *)(a1 + 32) = v8;
  if (v7 != 1263421507 || v9 > 1)
  {
LABEL_10:
    unsigned int v11 = 0;
    int v12 = 0;
    goto LABEL_11;
  }
  uint64_t v14 = v4 + 10;
  if (v4 + 10 > v3)
  {
    *(_DWORD *)a1 = 0;
    char v15 = &v35;
LABEL_19:
    unsigned int v17 = 0;
    uint64_t v18 = 0;
    int *v15 = 0;
    int v16 = v35;
    goto LABEL_20;
  }
  int v16 = *(_DWORD *)(v6 + v8);
  *(void *)(a1 + 32) = v14;
  int v35 = v16;
  uint64_t v8 = v4 + 12;
  if (v4 + 12 > v3)
  {
    uint64_t v8 = v4 + 10;
    char v15 = (int *)a1;
    goto LABEL_19;
  }
  unsigned int v17 = *(unsigned __int16 *)(v6 + v14);
  *(void *)(a1 + 32) = v8;
  uint64_t v32 = v4 + 14;
  if (v4 + 14 <= v3)
  {
    *(void *)(a1 + 32) = v32;
    uint64_t v8 = v4 + 22;
    if (v4 + 22 <= v3)
    {
      uint64_t v18 = *(void *)(v6 + v32);
      *(void *)(a1 + 32) = v8;
    }
    else
    {
      uint64_t v18 = 0;
      *(_DWORD *)a1 = 0;
      uint64_t v8 = v4 + 14;
    }
  }
  else
  {
    uint64_t v18 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_20:
  unsigned int v11 = 0;
  int v12 = 0;
  if (v16 != 4 || v17 > 1) {
    goto LABEL_11;
  }
  if (!*(_DWORD *)a1)
  {
    unsigned int v11 = 0;
    int v12 = 0;
    goto LABEL_12;
  }
  uint64_t v19 = v8 + 4;
  if (v8 + 4 > v3) {
    goto LABEL_10;
  }
  uint64_t v20 = *(void *)(a1 + 8);
  int v21 = *(_DWORD *)(v20 + v8);
  *(void *)(a1 + 32) = v19;
  uint64_t v22 = v8 + 8;
  if (v8 + 8 > v3) {
    goto LABEL_10;
  }
  int v23 = *(_DWORD *)(v20 + v19);
  *(void *)(a1 + 32) = v22;
  uint64_t v24 = v8 + 16;
  if (v8 + 16 > v3) {
    goto LABEL_10;
  }
  uint64_t v25 = *(void *)(a1 + 8);
  size_t v26 = *(void *)(v25 + v22);
  *(void *)(a1 + 32) = v24;
  if (v8 + 24 > v3) {
    goto LABEL_10;
  }
  size_t v27 = *(void *)(v25 + v24);
  *(void *)(a1 + 32) = v8 + 24;
  unsigned int v11 = malloc_type_malloc(v26, 0xFAECDBABuLL);
  int v12 = malloc_type_malloc(v27, 0x1B0038D8uLL);
  if (!*(_DWORD *)a1) {
    goto LABEL_43;
  }
  uint64_t v28 = *(void *)(a1 + 32);
  if (v28 + v26 > *(void *)(a1 + 24)) {
    goto LABEL_31;
  }
  memcpy(v11, (const void *)(*(void *)(a1 + 8) + v28), v26);
  size_t v29 = *(void *)(a1 + 32) + v26;
  *(void *)(a1 + 32) = v29;
  if (!*(_DWORD *)a1) {
    goto LABEL_43;
  }
  if (v29 + v27 > *(void *)(a1 + 24))
  {
LABEL_31:
    *(_DWORD *)a1 = 0;
    char v30 = 1;
    int v31 = *(_DWORD *)(a2 + 160);
    if (!v31) {
      goto LABEL_49;
    }
    goto LABEL_44;
  }
  memcpy(v12, (const void *)(*(void *)(a1 + 8) + v29), v27);
  *(void *)(a1 + 32) += v27;
  if (!*(_DWORD *)a1)
  {
LABEL_43:
    char v30 = 1;
    int v31 = *(_DWORD *)(a2 + 160);
    if (!v31) {
      goto LABEL_49;
    }
    goto LABEL_44;
  }
  if (*(void *)(a1 + 24) >= (unint64_t)(v18 + v8))
  {
    char v30 = 0;
    *(void *)(a1 + 32) = v18 + v8;
    int v31 = *(_DWORD *)(a2 + 160);
    if (!v31) {
      goto LABEL_49;
    }
  }
  else
  {
    char v30 = 0;
    int v31 = *(_DWORD *)(a2 + 160);
    if (!v31)
    {
LABEL_49:
      int v34 = *(_DWORD *)(a2 + 136);
      if ((!v34 || v34 == v23)
        && ((v30 & 1) != 0
         || v31 == v21
         && v34 == v23
         && mc_edgebreaker_decompress_and_update_mesh(a2, (uint64_t)v11, v26, (uint64_t)v12, v27)))
      {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
LABEL_44:
  if (v31 == v21) {
    goto LABEL_49;
  }
  *(_DWORD *)a1 = 0;
  int v33 = *(_DWORD *)(a2 + 136);
  if (v33 && v33 != v23) {
LABEL_11:
  }
    *(_DWORD *)a1 = 0;
LABEL_12:
  free(v11);
  free(v12);
}

void mc_io_r_material_id(uint64_t a1, uint64_t a2)
{
  int v25 = 0;
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == v3) {
    goto LABEL_7;
  }
  unint64_t v5 = v4 + 4;
  if (!*(_DWORD *)a1 || v5 > v3) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(_DWORD *)(v7 + v4);
  *(void *)(a1 + 32) = v5;
  uint64_t v9 = v4 + 6;
  if (v4 + 6 > v3) {
    goto LABEL_7;
  }
  unsigned int v10 = *(unsigned __int16 *)(v7 + v5);
  *(void *)(a1 + 32) = v9;
  if (v8 != 1263421507 || v10 > 1) {
    goto LABEL_7;
  }
  uint64_t v13 = v4 + 10;
  if (v4 + 10 > v3)
  {
    *(_DWORD *)a1 = 0;
    uint64_t v14 = &v25;
LABEL_17:
    unsigned int v16 = 0;
    uint64_t v17 = 0;
    *uint64_t v14 = 0;
    int v15 = v25;
    goto LABEL_18;
  }
  int v15 = *(_DWORD *)(v7 + v9);
  *(void *)(a1 + 32) = v13;
  int v25 = v15;
  uint64_t v9 = v4 + 12;
  if (v4 + 12 > v3)
  {
    uint64_t v9 = v4 + 10;
    uint64_t v14 = (int *)a1;
    goto LABEL_17;
  }
  unsigned int v16 = *(unsigned __int16 *)(v7 + v13);
  *(void *)(a1 + 32) = v9;
  uint64_t v24 = v4 + 14;
  if (v4 + 14 <= v3)
  {
    *(void *)(a1 + 32) = v24;
    uint64_t v9 = v4 + 22;
    if (v4 + 22 <= v3)
    {
      uint64_t v17 = *(void *)(v7 + v24);
      *(void *)(a1 + 32) = v9;
    }
    else
    {
      uint64_t v17 = 0;
      *(_DWORD *)a1 = 0;
      uint64_t v9 = v4 + 14;
    }
  }
  else
  {
    uint64_t v17 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_18:
  if (v15 != 5
    || v16 > 1
    || !*(_DWORD *)a1
    || v9 + 4 > v3
    || (uint64_t v18 = *(int *)(*(void *)(a1 + 8) + v9), *(void *)(a1 + 32) = v9 + 4, v18 != *(_DWORD *)(a2 + 160)))
  {
LABEL_7:
    *(_DWORD *)a1 = 0;
    return;
  }
  uint64_t v19 = v18;
  uint64_t v20 = (int *)malloc_type_malloc(4 * v18, 0x100004052888210uLL);
  mc_read_tiny_big(a1, v18, v20);
  if ((int)v18 >= 1)
  {
    int v21 = (_DWORD *)(*(void *)(a2 + 168) + 12);
    uint64_t v22 = v20;
    do
    {
      int v23 = *v22++;
      *int v21 = v23;
      v21 += 4;
      --v19;
    }
    while (v19);
  }
  if (*(_DWORD *)a1 && *(void *)(a1 + 24) >= (unint64_t)(v9 + v17)) {
    *(void *)(a1 + 32) = v9 + v17;
  }
  free(v20);
}

uint64_t mc_io_r_postprocess(uint64_t result, _DWORD *a2)
{
  int v24 = 0;
  unint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)(result + 32);
  if (v3 == v2) {
    goto LABEL_7;
  }
  unint64_t v4 = v3 + 4;
  if (!*(_DWORD *)result || v4 > v2) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(result + 8);
  int v7 = *(_DWORD *)(v6 + v3);
  *(void *)(result + 32) = v4;
  uint64_t v8 = v3 + 6;
  if (v3 + 6 > v2) {
    goto LABEL_7;
  }
  unsigned int v9 = *(unsigned __int16 *)(v6 + v4);
  *(void *)(result + 32) = v8;
  if (v7 != 1263421507 || v9 > 1) {
    goto LABEL_7;
  }
  uint64_t v11 = v3 + 10;
  if (v3 + 10 <= v2)
  {
    int v13 = *(_DWORD *)(v6 + v8);
    *(void *)(result + 32) = v11;
    int v24 = v13;
    uint64_t v8 = v3 + 12;
    if (v3 + 12 <= v2)
    {
      unsigned int v14 = *(unsigned __int16 *)(v6 + v11);
      *(void *)(result + 32) = v8;
      uint64_t v18 = v3 + 14;
      if (v3 + 14 <= v2)
      {
        *(void *)(result + 32) = v18;
        uint64_t v8 = v3 + 22;
        if (v3 + 22 <= v2)
        {
          uint64_t v15 = *(void *)(v6 + v18);
          *(void *)(result + 32) = v8;
        }
        else
        {
          uint64_t v15 = 0;
          *(_DWORD *)double result = 0;
          uint64_t v8 = v18;
        }
      }
      else
      {
        uint64_t v15 = 0;
        *(_DWORD *)double result = 0;
      }
      goto LABEL_19;
    }
    uint64_t v8 = v3 + 10;
    int v12 = (int *)result;
  }
  else
  {
    *(_DWORD *)double result = 0;
    int v12 = &v24;
  }
  unsigned int v14 = 0;
  uint64_t v15 = 0;
  *int v12 = 0;
  int v13 = v24;
LABEL_19:
  if (v13 != 11 || v14 >= 2) {
    goto LABEL_7;
  }
  if (!*(_DWORD *)result) {
    goto LABEL_8;
  }
  if (v8 + 1 > v2)
  {
LABEL_7:
    *(_DWORD *)double result = 0;
LABEL_8:
    *a2 = 0;
    a2[2] = 0;
    return result;
  }
  int v16 = *(unsigned __int8 *)(*(void *)(result + 8) + v8);
  *(void *)(result + 32) = v8 + 1;
  *a2 = v16;
  if (v16)
  {
    uint64_t v17 = *(void *)(result + 32);
    if (v17 + 4 > v2)
    {
      *(_DWORD *)double result = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
    }
    int v19 = *(_DWORD *)(*(void *)(result + 8) + v17);
    *(void *)(result + 32) = v17 + 4;
    a2[1] = v19;
  }
  uint64_t v20 = *(void *)(result + 32);
  uint64_t v21 = v20 + 1;
  if (v20 + 1 <= v2)
  {
    int v22 = *(unsigned __int8 *)(*(void *)(result + 8) + v20);
    *(void *)(result + 32) = v21;
    a2[2] = v22;
    unint64_t v23 = v15 + v8;
    if (v2 >= v23) {
      *(void *)(result + 32) = v23;
    }
  }
  else
  {
    *(_DWORD *)double result = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t mc_mesh_recompute_uv(uint64_t a1, int a2, uint64_t a3)
{
  v68[256] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = malloc_type_calloc(*(unsigned int *)(a1 + 136), 1uLL, 0x100004077774924uLL);
  bzero(v68, 0x800uLL);
  if (a2 >= 1)
  {
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = *(unsigned int *)(a3 + 4);
      if (v8 > 0xFF) {
        goto LABEL_36;
      }
      v68[v8] = a3;
      a3 += 176;
    }
    while (--v7);
  }
  if (!*(void *)(a1 + 152))
  {
    uint64_t v62 = *(unsigned int *)(a1 + 136);
    if (!v62
      || (uint64_t v63 = malloc_type_malloc(12 * v62, 0x10000403E1C8BA9uLL), (*(void *)(a1 + 152) = v63) == 0))
    {
LABEL_36:
      uint64_t v10 = 0;
      goto LABEL_37;
    }
  }
  unint64_t v9 = *(unsigned int *)(a1 + 160);
  uint64_t v10 = 1;
  if (v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v65 = _Q0;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      uint64_t v21 = *(void *)(a1 + 168);
      uint64_t v22 = *(unsigned int *)(v21 + v11 + 12);
      if (v22 > 0xFF) {
        goto LABEL_36;
      }
      uint64_t v23 = v68[v22];
      if (v23) {
        break;
      }
LABEL_10:
      ++v12;
      v11 += 16;
      if (v12 >= v9)
      {
        uint64_t v10 = 1;
        goto LABEL_37;
      }
    }
    uint64_t v24 = *(int *)(v21 + v11);
    float64x2_t v66 = 0uLL;
    double v67 = 0.0;
    if (v6[v24])
    {
      uint64_t v25 = v21 + v11;
      uint64_t v26 = *(int *)(v25 + 4);
      float64x2_t v66 = 0uLL;
      double v67 = 0.0;
      if (v6[v26]) {
        goto LABEL_15;
      }
    }
    else
    {
      v6[v24] = 1;
      if (*(_DWORD *)v23 == 1)
      {
        char v30 = (float *)(*(void *)(a1 + 144) + 12 * (int)v24);
        double v31 = v30[1];
        double v32 = *v30;
        double v33 = v30[2];
        double v34 = *(double *)(a1 + 80) * v31
            + *(double *)(a1 + 72) * v32
            + *(double *)(a1 + 96)
            + *(double *)(a1 + 88) * v33;
        double v35 = *(double *)(a1 + 48) * v31
            + *(double *)(a1 + 40) * v32
            + *(double *)(a1 + 56) * v33
            + *(double *)(a1 + 64);
        double v36 = *(double *)(a1 + 16) * v31 + *(double *)(a1 + 8) * v32 + *(double *)(a1 + 24) * v33 + *(double *)(a1 + 32);
        if (!mc_projection_project((double *)(v23 + 136), (long double *)v66.f64, v36 * *(double *)(v23 + 8)+ *(double *)(v23 + 16) * v35+ *(double *)(v23 + 24) * v34+ *(double *)(v23 + 32), *(double *)(v23 + 40) * v36+ *(double *)(v23 + 48) * v35+ *(double *)(v23 + 56) * v34+ *(double *)(v23 + 64), *(double *)(v23 + 72) * v36+ *(double *)(v23 + 80) * v35+ *(double *)(v23 + 88) * v34+ *(double *)(v23 + 96)))goto LABEL_36; {
        float64x2_t v37 = vmulq_f64(v66, v65);
        }
        *(void *)&v28.f64[0] = *(_OWORD *)&vaddq_f64(v37, v65);
        v28.f64[1] = vsubq_f64(v65, v37).f64[1];
        double v29 = v67;
      }
      else
      {
        float64x2_t v28 = 0uLL;
        double v29 = 0.0;
        if (!*(_DWORD *)v23) {
          double v29 = 1.0;
        }
      }
      size_t v38 = (float32x2_t *)(*(void *)(a1 + 152) + 12 * (int)v24);
      float32x2_t *v38 = vmaxnm_f32(vminnm_f32(vcvt_f32_f64(v28), _D8), 0);
      float v39 = v29;
      v38[1].f32[0] = fmaxf(fminf(v39, 10000.0), 0.0);
      uint64_t v25 = v21 + v11;
      uint64_t v26 = *(int *)(v25 + 4);
      float64x2_t v66 = 0uLL;
      double v67 = 0.0;
      if (v6[v26])
      {
LABEL_15:
        uint64_t v27 = *(int *)(v25 + 8);
        float64x2_t v66 = 0uLL;
        double v67 = 0.0;
        if (!v6[v27])
        {
LABEL_29:
          v6[v27] = 1;
          if (*(_DWORD *)v23 == 1)
          {
            uint64_t v54 = (float *)(*(void *)(a1 + 144) + 12 * (int)v27);
            double v55 = v54[1];
            double v56 = *v54;
            double v57 = v54[2];
            double v58 = *(double *)(a1 + 80) * v55
                + *(double *)(a1 + 72) * v56
                + *(double *)(a1 + 96)
                + *(double *)(a1 + 88) * v57;
            double v59 = *(double *)(a1 + 48) * v55
                + *(double *)(a1 + 40) * v56
                + *(double *)(a1 + 56) * v57
                + *(double *)(a1 + 64);
            double v60 = *(double *)(a1 + 16) * v55
                + *(double *)(a1 + 8) * v56
                + *(double *)(a1 + 24) * v57
                + *(double *)(a1 + 32);
            if (!mc_projection_project((double *)(v23 + 136), (long double *)v66.f64, v60 * *(double *)(v23 + 8)+ *(double *)(v23 + 16) * v59+ *(double *)(v23 + 24) * v58+ *(double *)(v23 + 32), *(double *)(v23 + 40) * v60+ *(double *)(v23 + 48) * v59+ *(double *)(v23 + 56) * v58+ *(double *)(v23 + 64), *(double *)(v23 + 72) * v60+ *(double *)(v23 + 80) * v59+ *(double *)(v23 + 88) * v58+ *(double *)(v23 + 96)))goto LABEL_36; {
            float64x2_t v61 = vmulq_f64(v66, v65);
            }
            *(void *)&v52.f64[0] = *(_OWORD *)&vaddq_f64(v61, v65);
            v52.f64[1] = vsubq_f64(v65, v61).f64[1];
            double v53 = v67;
          }
          else
          {
            float64x2_t v52 = 0uLL;
            double v53 = 0.0;
            if (!*(_DWORD *)v23) {
              double v53 = 1.0;
            }
          }
          int v19 = (float32x2_t *)(*(void *)(a1 + 152) + 12 * (int)v27);
          *int v19 = vmaxnm_f32(vminnm_f32(vcvt_f32_f64(v52), _D8), 0);
          float v20 = v53;
          v19[1].f32[0] = fmaxf(fminf(v20, 10000.0), 0.0);
        }
LABEL_9:
        unint64_t v9 = *(unsigned int *)(a1 + 160);
        goto LABEL_10;
      }
    }
    v6[v26] = 1;
    if (*(_DWORD *)v23 == 1)
    {
      float64x2_t v42 = (float *)(*(void *)(a1 + 144) + 12 * (int)v26);
      double v43 = v42[1];
      double v44 = *v42;
      double v45 = v42[2];
      double v46 = *(double *)(a1 + 80) * v43 + *(double *)(a1 + 72) * v44 + *(double *)(a1 + 96) + *(double *)(a1 + 88) * v45;
      double v47 = *(double *)(a1 + 48) * v43 + *(double *)(a1 + 40) * v44 + *(double *)(a1 + 56) * v45 + *(double *)(a1 + 64);
      double v48 = *(double *)(a1 + 16) * v43 + *(double *)(a1 + 8) * v44 + *(double *)(a1 + 24) * v45 + *(double *)(a1 + 32);
      if (!mc_projection_project((double *)(v23 + 136), (long double *)v66.f64, v48 * *(double *)(v23 + 8)+ *(double *)(v23 + 16) * v47+ *(double *)(v23 + 24) * v46+ *(double *)(v23 + 32), *(double *)(v23 + 40) * v48+ *(double *)(v23 + 48) * v47+ *(double *)(v23 + 56) * v46+ *(double *)(v23 + 64), *(double *)(v23 + 72) * v48+ *(double *)(v23 + 80) * v47+ *(double *)(v23 + 88) * v46+ *(double *)(v23 + 96)))goto LABEL_36; {
      float64x2_t v49 = vmulq_f64(v66, v65);
      }
      *(void *)&v40.f64[0] = *(_OWORD *)&vaddq_f64(v49, v65);
      v40.f64[1] = vsubq_f64(v65, v49).f64[1];
      double v41 = v67;
    }
    else
    {
      float64x2_t v40 = 0uLL;
      double v41 = 0.0;
      if (!*(_DWORD *)v23) {
        double v41 = 1.0;
      }
    }
    uint64_t v50 = (float32x2_t *)(*(void *)(a1 + 152) + 12 * (int)v26);
    *uint64_t v50 = vmaxnm_f32(vminnm_f32(vcvt_f32_f64(v40), _D8), 0);
    float v51 = v41;
    v50[1].f32[0] = fmaxf(fminf(v51, 10000.0), 0.0);
    uint64_t v27 = *(int *)(v25 + 8);
    float64x2_t v66 = 0uLL;
    double v67 = 0.0;
    if (!v6[v27]) {
      goto LABEL_29;
    }
    goto LABEL_9;
  }
LABEL_37:
  free(v6);
  return v10;
}

void mc_la_data_decode(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  bzero(a1, 0x2F0uLL);
  if (!*(_DWORD *)a2) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v6 = v4 + 1;
  if (v4 + 1 > v5) {
    goto LABEL_3;
  }
  int v8 = *(unsigned __int8 *)(*(void *)(a2 + 8) + v4);
  *(void *)(a2 + 32) = v6;
  if (v8) {
    goto LABEL_26;
  }
  uint64_t v9 = v4 + 9;
  if (v4 + 9 > v5)
  {
LABEL_3:
    *(_DWORD *)a2 = 0;
LABEL_4:
    *a1 = 0;
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(*(void *)(a2 + 8) + v6);
  *(void *)(a2 + 32) = v9;
  *a1 = v10;
  unint64_t v11 = v4 + 17;
  if (v11 > *(void *)(a2 + 24))
  {
    *(_DWORD *)a2 = 0;
LABEL_5:
    a1[1] = 0;
    if (!*(_DWORD *)a2) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v24 = *(void *)(*(void *)(a2 + 8) + v9);
  *(void *)(a2 + 32) = v11;
  a1[1] = v24;
  if (!*(_DWORD *)a2)
  {
LABEL_8:
    a1[2] = 0;
    if (!*(_DWORD *)a2) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 32);
  if ((unint64_t)(v7 + 8) > *(void *)(a2 + 24))
  {
    *(_DWORD *)a2 = 0;
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(*(void *)(a2 + 8) + v7);
  *(void *)(a2 + 32) = v7 + 8;
  a1[2] = v12;
  if (*(_DWORD *)a2)
  {
LABEL_16:
    uint64_t v13 = *(void *)(a2 + 32);
    if ((unint64_t)(v13 + 8) > *(void *)(a2 + 24))
    {
      *(_DWORD *)a2 = 0;
      a1[3] = 0;
      if (!*(_DWORD *)a2) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
    uint64_t v14 = *(void *)(*(void *)(a2 + 8) + v13);
    *(void *)(a2 + 32) = v13 + 8;
    a1[3] = v14;
    if (*(_DWORD *)a2) {
      goto LABEL_20;
    }
LABEL_26:
    *(_DWORD *)a2 = 0;
    return;
  }
LABEL_9:
  a1[3] = 0;
  if (!*(_DWORD *)a2) {
    goto LABEL_26;
  }
LABEL_20:
  unint64_t v16 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v17 = v15 + 4;
  if (v15 + 4 > v16) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(a2 + 8);
  float v19 = *(float *)(v18 + v15);
  *(void *)(a2 + 32) = v17;
  unint64_t v20 = v15 + 6;
  if (v20 > v16) {
    goto LABEL_26;
  }
  int v21 = *(unsigned __int16 *)(v18 + v17);
  *(void *)(a2 + 32) = v20;
  if (v21 != 180) {
    goto LABEL_26;
  }
  mc_read_tiny_big(a2, 180, v25);
  uint64_t v22 = 0;
  int v23 = v25[0];
  *((float *)a1 + 8) = v19 * (float)v25[0];
  do
  {
    v23 += v25[v22 + 1];
    v25[v22 + 1] = v23;
    *(float *)((char *)a1 + v22 * 4 + 36) = v19 * (float)v23;
    ++v22;
  }
  while (v22 != 179);
}

uint64_t mc_container_decode_la_data_chapter(uint64_t a1, unint64_t a2, void *a3)
{
  if (*(void *)(a1 + 16) <= a2) {
    return 0;
  }
  uint64_t v3 = (unsigned __int16 *)(*(void *)(a1 + 8) + 40 * a2);
  int v4 = *v3;
  int v5 = v3[4];
  if (v4 != 5 || v5 != 0) {
    return 0;
  }
  chapter_data = mc_container_get_chapter_data(a1, a2, 0);
  if (!chapter_data) {
    return 0;
  }
  uint64_t v9 = chapter_data;
  mc_la_data_decode(a3, (uint64_t)chapter_data);
  uint64_t v10 = *(unsigned int *)v9;
  unint64_t v11 = (void *)v9[2];
  if (v11) {
    free(v11);
  }
  free(v9);
  return v10;
}

uint64_t mc_mesh_face_walker_next(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 48);
  if (v1 == *(_DWORD **)(a1 + 40))
  {
    unsigned int v17 = *(_DWORD *)(a1 + 16);
    unsigned int v18 = *(_DWORD *)(a1 + 20);
    if (v18 >= v17) {
      return 0;
    }
    for (unsigned int i = (unsigned char *)(*(void *)(a1 + 24) + (int)v18); *i; ++i)
    {
      *(_DWORD *)(a1 + 20) = ++v18;
      if (v17 <= v18) {
        return 0;
      }
    }
    *unsigned int i = 1;
    uint64_t v24 = *(_DWORD **)(a1 + 40);
    int v23 = *(_DWORD **)(a1 + 48);
    *int v23 = 3 * *(_DWORD *)(a1 + 20);
    uint64_t v1 = v23 + 1;
    *(void *)(a1 + 48) = v1;
    if (v1 == v24) {
      return 0;
    }
  }
  uint64_t v2 = (int)*(v1 - 1);
  *(void *)(a1 + 48) = v1 - 1;
  *(_DWORD *)(a1 + 8) = v2;
  int v3 = (int)v2 / 3;
  *(_DWORD *)a1 = (int)v2 / 3;
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(_DWORD *)(v4 + 4 * v2);
  *(_DWORD *)(a1 + 12) = v5;
  if ((v5 & 0x80000000) == 0 && !*(unsigned char *)(*(void *)(a1 + 24) + v5 / 3uLL)) {
    *(_DWORD *)(a1 + 12) = -1;
  }
  *(_DWORD *)(a1 + 4) = -1;
  int v6 = 3 * v3;
  unsigned int v7 = *(_DWORD *)(v4 + 4 * v6);
  if ((v7 & 0x80000000) != 0 || (uint64_t v8 = *(void *)(a1 + 24), v9 = v7 / 3uLL, *(unsigned char *)(v8 + v9)))
  {
    unsigned int v10 = *(_DWORD *)(v4 + 4 * (v6 + 1));
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    *(unsigned char *)(v8 + v9) = 1;
    unint64_t v20 = *(unsigned int **)(a1 + 48);
    unsigned int *v20 = v7;
    *(void *)(a1 + 48) = v20 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 3 * *(_DWORD *)a1;
    unsigned int v10 = *(_DWORD *)(v4 + 4 * (v6 + 1));
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_9;
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  unint64_t v12 = v10 / 3uLL;
  if (!*(unsigned char *)(v11 + v12))
  {
    *(unsigned char *)(v11 + v12) = 1;
    int v21 = *(unsigned int **)(a1 + 48);
    *int v21 = v10;
    *(void *)(a1 + 48) = v21 + 1;
    unsigned int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * (3 * *(_DWORD *)a1 + 2));
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    return 1;
  }
LABEL_9:
  unsigned int v13 = *(_DWORD *)(v4 + 4 * (v6 + 2));
  if ((v13 & 0x80000000) != 0) {
    return 1;
  }
LABEL_10:
  uint64_t v14 = *(void *)(a1 + 24);
  unint64_t v15 = v13 / 3uLL;
  if (!*(unsigned char *)(v14 + v15))
  {
    *(unsigned char *)(v14 + v15) = 1;
    uint64_t v22 = *(unsigned int **)(a1 + 48);
    *uint64_t v22 = v13;
    *(void *)(a1 + 48) = v22 + 1;
  }
  return 1;
}

void *mc_mesh_face_walker_create(unsigned int a1, int a2, char *a3)
{
  int v6 = malloc_type_calloc(1uLL, 0x38uLL, 0x1010040D707D299uLL);
  *((void *)v6 + 4) = malloc_type_malloc(12 * a1, 0x100004052888210uLL);
  *((void *)v6 + 5) = malloc_type_malloc(12 * a1, 0x100004052888210uLL);
  unsigned int v7 = malloc_type_malloc(a1, 0x100004077774924uLL);
  *((void *)v6 + 3) = v7;
  uint64_t v8 = *((void *)v6 + 5);
  *((_DWORD *)v6 + 4) = a1;
  *((void *)v6 + 6) = v8;
  bzero(v7, a1);
  *((_DWORD *)v6 + 5) = 0;
  if (mc_create_corner_table(a1, a2, a3, *((void **)v6 + 4), 1)) {
    return v6;
  }
  free(*((void **)v6 + 3));
  free(*((void **)v6 + 4));
  free(*((void **)v6 + 5));
  free(v6);
  return 0;
}

uint64_t mc_log_message(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char *__format, ...)
{
  va_start(va, __format);
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    uint64_t v8 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))error_log_callback;
    if (!error_log_callback) {
      return result;
    }
    goto LABEL_6;
  }
  if (result == 1)
  {
    uint64_t v8 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))debug_log_callback;
    if (debug_log_callback)
    {
LABEL_6:
      vsnprintf(__str, 0x400uLL, __format, va);
      return v8(__str, a2, a3, a4);
    }
  }
  return result;
}

void mc_mesh_cube_distance_unproject(uint64_t a1, float32x2_t *a2, double a3, double a4, double a5)
{
  *(void *)&long long v48 = 0;
  long long v51 = 0uLL;
  long long v53 = 0uLL;
  long long v47 = 0x3FF0000000000000uLL;
  *((double *)&v48 + 1) = -a3;
  long long v49 = xmmword_1A28FCCC0;
  *(void *)&long long v50 = 0;
  *((double *)&v50 + 1) = -a4;
  *(void *)&long long v52 = 0x3FF0000000000000;
  *((double *)&v52 + 1) = -a5;
  *(void *)&long long v54 = 0;
  *((void *)&v54 + 1) = 0x3FF0000000000000;
  long long v7 = *(_OWORD *)(a1 + 88);
  v46[4] = *(_OWORD *)(a1 + 72);
  v46[5] = v7;
  long long v8 = *(_OWORD *)(a1 + 120);
  v46[6] = *(_OWORD *)(a1 + 104);
  v46[7] = v8;
  long long v9 = *(_OWORD *)(a1 + 24);
  v46[0] = *(_OWORD *)(a1 + 8);
  v46[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 56);
  v46[2] = *(_OWORD *)(a1 + 40);
  v46[3] = v10;
  mc_mat_4x4_mul_mm((double *)&v47, (double *)v46, (double *)&v55);
  long long v53 = v61;
  long long v54 = v62;
  long long v47 = v55;
  long long v48 = v56;
  long long v49 = v57;
  long long v50 = v58;
  long long v51 = v59;
  long long v52 = v60;
  mc_mat_4x4_invert((double *)&v47, (double *)&v55);
  uint64_t v11 = *(unsigned int *)(a1 + 136);
  if (v11)
  {
    long long v12 = v55;
    long long v13 = v56;
    long long v14 = v57;
    long long v15 = v58;
    long long v16 = v59;
    long long v17 = v60;
    unint64_t v18 = *(void *)(a1 + 144);
    if (v11 == 1
      || v18 < (unint64_t)a2 + 4 * v11 && v18 + 12 * v11 > (unint64_t)a2)
    {
      uint64_t v19 = 0;
LABEL_6:
      uint64_t v20 = v11 - v19;
      int v21 = (float *)a2 + v19;
      uint64_t v22 = (float *)(v18 + 12 * v19 + 8);
      do
      {
        double v23 = *(v22 - 2);
        double v24 = *(v22 - 1);
        double v25 = *v22;
        float v26 = *v21++;
        double v27 = sqrt(v26 / (v23 * v23 + v24 * v24 + v25 * v25));
        double v28 = v27 * v23;
        double v29 = v27 * v24;
        double v30 = v27 * v25;
        double v31 = *((double *)&v13 + 1) + v28 * *(double *)&v12 + v29 * *((double *)&v12 + 1) + v30 * *(double *)&v13;
        double v32 = *((double *)&v15 + 1) + v28 * *(double *)&v14 + v29 * *((double *)&v14 + 1) + v30 * *(double *)&v15;
        double v33 = *((double *)&v17 + 1) + v28 * *(double *)&v16 + v29 * *((double *)&v16 + 1) + v30 * *(double *)&v17;
        *(float *)&double v29 = v31;
        *(float *)&double v30 = v32;
        *(v22 - 2) = *(float *)&v29;
        *(v22 - 1) = *(float *)&v30;
        *(float *)&double v33 = v33;
        *uint64_t v22 = *(float *)&v33;
        v22 += 3;
        --v20;
      }
      while (v20);
      return;
    }
    float64x2_t v34 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v56 + 1), 0);
    float64x2_t v35 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v58 + 1), 0);
    uint64_t v19 = v11 & 0xFFFFFFFE;
    float64x2_t v36 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v60 + 1), 0);
    uint64_t v37 = v19;
    size_t v38 = a2;
    float v39 = *(float **)(a1 + 144);
    do
    {
      float32x2x3_t v63 = vld3_f32(v39);
      float64x2_t v40 = vcvtq_f64_f32(v63.val[0]);
      float64x2_t v41 = vcvtq_f64_f32(v63.val[1]);
      *(float64x2_t *)v63.val[0].f32 = vcvtq_f64_f32(v63.val[2]);
      float32x2_t v42 = *v38++;
      *(float64x2_t *)v63.val[1].f32 = vsqrtq_f64(vdivq_f64(vcvtq_f64_f32(v42), vmlaq_f64(vmlaq_f64(vmulq_f64(v40, v40), v41, v41), *(float64x2_t *)v63.val[0].f32, *(float64x2_t *)v63.val[0].f32)));
      *(float64x2_t *)v63.val[2].f32 = vmulq_f64(*(float64x2_t *)v63.val[1].f32, v40);
      float64x2_t v43 = vmulq_f64(*(float64x2_t *)v63.val[1].f32, v41);
      *(float64x2_t *)v63.val[0].f32 = vmulq_f64(*(float64x2_t *)v63.val[1].f32, *(float64x2_t *)v63.val[0].f32);
      float64x2_t v44 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v35, *(float64x2_t *)v63.val[2].f32, *(double *)&v14), v43, *((double *)&v14 + 1)), *(float64x2_t *)v63.val[0].f32, *(double *)&v15);
      float64x2_t v45 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v36, *(float64x2_t *)v63.val[2].f32, *(double *)&v16), v43, *((double *)&v16 + 1)), *(float64x2_t *)v63.val[0].f32, *(double *)&v17);
      v63.val[0] = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v34, *(float64x2_t *)v63.val[2].f32, *(double *)&v12), v43, *((double *)&v12 + 1)), *(float64x2_t *)v63.val[0].f32, *(double *)&v13));
      v63.val[1] = vcvt_f32_f64(v44);
      v63.val[2] = vcvt_f32_f64(v45);
      vst3_f32(v39, v63);
      v39 += 6;
      v37 -= 2;
    }
    while (v37);
    if (v19 != v11) {
      goto LABEL_6;
    }
  }
}

uint64_t mc_mesh_cam_unproject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 144);
  long long v41 = *(_OWORD *)(a3 + 128);
  long long v42 = v5;
  long long v6 = *(_OWORD *)(a3 + 80);
  long long v7 = *(_OWORD *)(a3 + 48);
  long long v37 = *(_OWORD *)(a3 + 64);
  long long v38 = v6;
  long long v8 = *(_OWORD *)(a3 + 112);
  long long v9 = *(_OWORD *)(a3 + 80);
  long long v39 = *(_OWORD *)(a3 + 96);
  long long v40 = v8;
  long long v10 = *(_OWORD *)(a3 + 16);
  v34[0] = *(_OWORD *)a3;
  v34[1] = v10;
  long long v11 = *(_OWORD *)(a3 + 48);
  float64x2_t v13 = *(float64x2_t *)a3;
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v35 = *(_OWORD *)(a3 + 32);
  long long v36 = v11;
  long long v30 = v37;
  long long v31 = v9;
  long long v32 = v39;
  long long v33 = v8;
  float64x2_t v26 = v13;
  long long v27 = v12;
  uint64_t v43 = *(void *)(a3 + 160);
  long long v28 = v35;
  long long v29 = v7;
  long long v14 = *(_OWORD *)(a1 + 88);
  v25[4] = *(_OWORD *)(a1 + 72);
  void v25[5] = v14;
  long long v15 = *(_OWORD *)(a1 + 120);
  v25[6] = *(_OWORD *)(a1 + 104);
  void v25[7] = v15;
  long long v16 = *(_OWORD *)(a1 + 24);
  v25[0] = *(_OWORD *)(a1 + 8);
  v25[1] = v16;
  long long v17 = *(_OWORD *)(a1 + 56);
  _DWORD v25[2] = *(_OWORD *)(a1 + 40);
  void v25[3] = v17;
  mc_mat_4x4_mul_mm(v26.f64, (double *)v25, (double *)v34);
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 136)) {
      return 1;
    }
  }
  else
  {
    a2 = *(void *)(a1 + 144);
    if (!*(_DWORD *)(a1 + 136)) {
      return 1;
    }
  }
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  while (1)
  {
    float64x2_t v26 = 0uLL;
    *(void *)&long long v27 = 0;
    uint64_t result = mc_camera_unproject((uint64_t)v34, &v26, *(float *)(*(void *)(a1 + 144) + v18), *(float *)(*(void *)(a1 + 144) + v18 + 4), *(float *)(*(void *)(a1 + 144) + v18 + 8));
    if (!result) {
      break;
    }
    float v21 = v26.f64[0];
    uint64_t v22 = (float *)(a2 + v18);
    *uint64_t v22 = v21;
    float v23 = v26.f64[1];
    v22[1] = v23;
    float v24 = *(double *)&v27;
    void v22[2] = v24;
    ++v19;
    v18 += 12;
    if (v19 >= *(unsigned int *)(a1 + 136)) {
      return 1;
    }
  }
  return result;
}

uint64_t mc_material_attach_alpha_data(uint64_t a1, const void *a2, size_t a3, int a4)
{
  if (HIDWORD(a3)) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result
    || (uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0x20uLL, 0x10800403AF1B36BuLL), (*(void *)(a1 + 16) = result) != 0))
  {
    int v9 = *(_DWORD *)(a1 + 8);
    if (v9 != 2 && a4 != 0 && v9 != 4) {
      return 0;
    }
    free(*(void **)(result + 24));
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    if (a4)
    {
      uint64_t result = (uint64_t)malloc_type_malloc(a3, 0x505EE921uLL);
      if (!result)
      {
        *(void *)(*(void *)(a1 + 16) + 24) = 0;
        return result;
      }
      float64x2_t v13 = (void *)result;
      memcpy((void *)result, a2, a3);
      uint64_t v14 = *(void *)(a1 + 16);
      *(void *)(v14 + 24) = v13;
      *(_DWORD *)(v14 + 16) = a4;
      *(_DWORD *)(v14 + 20) = a3;
      memcpy(v13, a2, a3);
    }
    return 1;
  }
  return result;
}

void mc_scene_free(void **a1)
{
  if (a1)
  {
    uint64_t v2 = (void **)*a1;
    if (*a1)
    {
      int v3 = (char *)a1[1];
      if (v3)
      {
        uint64_t v4 = v2 + 23;
        do
        {
          free(*(v4 - 5));
          free(*(v4 - 4));
          free(*(v4 - 2));
          long long v5 = *v4;
          v4 += 24;
          free(v5);
          --v3;
        }
        while (v3);
      }
      free(v2);
    }
    long long v6 = (void **)a1[2];
    if (v6)
    {
      long long v7 = (char *)a1[3];
      if (v7)
      {
        long long v8 = v6 + 23;
        do
        {
          free(*(v8 - 5));
          free(*(v8 - 4));
          free(*(v8 - 2));
          int v9 = *v8;
          v8 += 24;
          free(v9);
          --v7;
        }
        while (v7);
      }
      free(v6);
    }
    long long v10 = (void **)a1[4];
    if (v10)
    {
      long long v11 = (char *)a1[5];
      if (v11)
      {
        uint64_t v12 = v10 + 2;
        do
        {
          float64x2_t v13 = *v12;
          if (*v12)
          {
            uint64_t v14 = (void *)v13[1];
            if (v14) {
              free(v14);
            }
            long long v15 = (void *)v13[3];
            if (v15) {
              free(v15);
            }
            free(v13);
          }
          v12 += 3;
          --v11;
        }
        while (v11);
      }
      free(v10);
    }
  }
  free(a1);
}

uint64_t mc_create_corner_table(int a1, int a2, char *a3, void *a4, int a5)
{
  long long v10 = (void **)malloc_type_calloc(1uLL, 0x18uLL, 0x100402FEFCB83uLL);
  uint64_t v11 = a2;
  size_t v12 = 4 * a2;
  unint64_t v13 = (3 * a1);
  uint64_t v14 = (char *)malloc_type_malloc(4 * (v11 + v13), 0x6967BA73uLL);
  *long long v10 = v14;
  v10[1] = &v14[v12];
  v10[2] = a3;
  memset(v14, 255, v12);
  if (a1)
  {
    if (v13 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (3 * a1);
    }
    memset(a4, 255, 4 * v15);
    uint64_t v16 = 0;
    long long v17 = *v10;
    uint64_t v18 = v10[1];
    while (1)
    {
      uint64_t v19 = 3 * v16;
      uint64_t v20 = &a3[12 * v16];
      uint64_t v21 = *(int *)v20;
      uint64_t v22 = &v17[*((int *)v20 + 1)];
      int v23 = *v22;
      if (*v22 == -1) {
        goto LABEL_25;
      }
      float v24 = v10[2];
      int v25 = v23 % 3;
      int v26 = v23 % 3 == 2 ? -2 : 1;
      if (v24[v26 + v23] != v21) {
        break;
      }
LABEL_18:
      *uint64_t v22 = v18[v23];
      if (v25) {
        int v29 = -1;
      }
      else {
        int v29 = 2;
      }
      int v30 = v29 + v23;
      if (!a5 && *((_DWORD *)a4 + v30) != -1)
      {
LABEL_69:
        uint64_t v57 = 0;
        goto LABEL_70;
      }
      *((_DWORD *)a4 + (int)v19 + 2) = v30;
      *((_DWORD *)a4 + v30) = v19 + 2;
      uint64_t v31 = *((int *)v20 + 1);
      uint64_t v32 = v19 + 1;
      long long v33 = &v17[*((int *)v20 + 2)];
      int v34 = *v33;
      if (*v33 == -1) {
        goto LABEL_45;
      }
LABEL_26:
      long long v35 = v10[2];
      int v36 = v34 % 3;
      if (v34 % 3 == 2) {
        int v37 = -2;
      }
      else {
        int v37 = 1;
      }
      if (v35[v37 + v34] == v31)
      {
LABEL_36:
        *long long v33 = v18[v34];
        if ((-1431655765 * v32) >= 0x55555556) {
          int v40 = -1;
        }
        else {
          int v40 = 2;
        }
        if (v36) {
          int v41 = -1;
        }
        else {
          int v41 = 2;
        }
        int v42 = v41 + v34;
        if (!a5 && *((_DWORD *)a4 + v42) != -1) {
          goto LABEL_69;
        }
        int v43 = v40 + v32;
        *((_DWORD *)a4 + v43) = v42;
        *((_DWORD *)a4 + v42) = v43;
        goto LABEL_46;
      }
      while (1)
      {
        int v38 = v34;
        int v34 = v18[v34];
        if (v34 == -1) {
          break;
        }
        int v36 = v34 % 3;
        if (v34 % 3 == 2) {
          int v39 = -2;
        }
        else {
          int v39 = 1;
        }
        if (v35[v39 + v34] == v31)
        {
          long long v33 = &v18[v38];
          goto LABEL_36;
        }
      }
LABEL_45:
      v18[v32] = v17[v31];
      v17[v31] = v32;
LABEL_46:
      uint64_t v44 = *((int *)v20 + 2);
      uint64_t v45 = v19 + 2;
      double v46 = &v17[*(int *)v20];
      int v47 = *v46;
      if (*v46 == -1)
      {
LABEL_6:
        v18[v45] = v17[v44];
        v17[v44] = v45;
        if (++v16 == a1) {
          goto LABEL_68;
        }
      }
      else
      {
        long long v48 = v10[2];
        int v49 = v47 % 3;
        if (v47 % 3 == 2) {
          int v50 = -2;
        }
        else {
          int v50 = 1;
        }
        if (v48[v50 + v47] != v44)
        {
          while (1)
          {
            int v51 = v47;
            int v47 = v18[v47];
            if (v47 == -1) {
              goto LABEL_6;
            }
            int v49 = v47 % 3;
            if (v47 % 3 == 2) {
              int v52 = -2;
            }
            else {
              int v52 = 1;
            }
            if (v48[v52 + v47] == v44)
            {
              double v46 = &v18[v51];
              break;
            }
          }
        }
        int *v46 = v18[v47];
        if ((-1431655765 * v45) >= 0x55555556) {
          int v53 = -1;
        }
        else {
          int v53 = 2;
        }
        if (v49) {
          int v54 = -1;
        }
        else {
          int v54 = 2;
        }
        int v55 = v54 + v47;
        if (!a5 && *((_DWORD *)a4 + v55) != -1) {
          goto LABEL_69;
        }
        int v56 = v53 + v45;
        *((_DWORD *)a4 + v56) = v55;
        *((_DWORD *)a4 + v55) = v56;
        if (++v16 == a1) {
          goto LABEL_68;
        }
      }
    }
    while (1)
    {
      int v27 = v23;
      int v23 = v18[v23];
      if (v23 == -1) {
        break;
      }
      int v25 = v23 % 3;
      if (v23 % 3 == 2) {
        int v28 = -2;
      }
      else {
        int v28 = 1;
      }
      if (v24[v28 + v23] == v21)
      {
        uint64_t v22 = &v18[v27];
        goto LABEL_18;
      }
    }
LABEL_25:
    v18[3 * v16] = v17[v21];
    v17[v21] = v19;
    uint64_t v31 = *((int *)v20 + 1);
    uint64_t v32 = v19 + 1;
    long long v33 = &v17[*((int *)v20 + 2)];
    int v34 = *v33;
    if (*v33 == -1) {
      goto LABEL_45;
    }
    goto LABEL_26;
  }
  long long v17 = *v10;
LABEL_68:
  uint64_t v57 = 1;
LABEL_70:
  free(v17);
  free(v10);
  return v57;
}

uint64_t mc_encode_decode_predictive(unsigned int a1, int a2, char *a3, char *a4, unsigned int a5, char *a6, int a7)
{
  v214[48] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    LODWORD(v11) = a2;
    uint64_t result = (uint64_t)mc_mesh_face_walker_create(a1, a2, a3);
    if (!result) {
      return result;
    }
    uint64_t v13 = result;
    if (a4 == a6)
    {
      uint64_t v14 = (char *)malloc_type_malloc(4 * a5 * v11, 0x100004052888210uLL);
      memcpy(v14, a4, 4 * a5 * v11);
      if (a7) {
        a6 = v14;
      }
      else {
        a6 = a4;
      }
      unint64_t v207 = v14;
      if (!a7) {
        a4 = v14;
      }
    }
    else
    {
      unint64_t v207 = 0;
    }
    uint64_t v11 = v11;
    uint64_t v15 = (unsigned __int8 *)malloc_type_calloc(v11, 1uLL, 0x100004077774924uLL);
    uint64_t __n = 4 * (int)a5;
    if (mc_mesh_face_walker_next(v13))
    {
      unint64_t v209 = a4 + 16;
      uint64_t v210 = a5 & 0xFFFFFFF8;
      int v208 = a6 + 16;
      while (1)
      {
        uint64_t v18 = *(int *)(v13 + 8);
        uint64_t v19 = *(int *)&a3[4 * v18];
        if (v15[v19]) {
          goto LABEL_16;
        }
        v15[v19] = 1;
        uint64_t v31 = *(int *)(v13 + 12);
        if (v31 == -1)
        {
          uint64_t v48 = 4 * (int)(v19 * a5);
          if (a7)
          {
            int v49 = &a4[v48];
            int v50 = &a6[v48];
          }
          else
          {
            int v49 = &a6[v48];
            int v50 = &a4[v48];
          }
          memcpy(v49, v50, __n);
          goto LABEL_16;
        }
        if ((int)a5 < 1) {
          goto LABEL_16;
        }
        int v32 = 3 * ((int)v31 / 3);
        int v33 = *(_DWORD *)&a3[4 * v32 + 4 * (((int)v31 + 1) % 3)];
        int v34 = *(_DWORD *)&a3[4 * v32 + 4 * (((int)v31 + 2) % 3)];
        uint64_t v35 = (int)(*(_DWORD *)&a3[4 * v31] * a5);
        uint64_t v36 = (int)(v33 * a5);
        uint64_t v37 = (int)(v34 * a5);
        if (a5 < 8) {
          break;
        }
        uint64_t v83 = (int32x4_t *)v214;
        uint64_t v84 = (int32x4_t *)&v209[4 * v36];
        uint64_t v85 = (int32x4_t *)&v209[4 * v37];
        uint64_t v86 = a5 & 0xFFFFFFF8;
        BOOL v87 = (int32x4_t *)&v209[4 * v35];
        do
        {
          int32x4_t v88 = vsubq_s32(vaddq_s32(v85[-1], v84[-1]), v87[-1]);
          int32x4_t v89 = vsubq_s32(vaddq_s32(*v85, *v84), *v87);
          v84 += 2;
          v83[-1] = v88;
          *uint64_t v83 = v89;
          v83 += 2;
          v85 += 2;
          v87 += 2;
          v86 -= 8;
        }
        while (v86);
        uint64_t v38 = a5 & 0xFFFFFFF8;
        if (v210 != a5) {
          goto LABEL_51;
        }
LABEL_53:
        uint64_t v101 = (int)(v19 * a5);
        if (a7)
        {
          if (a5 >= 8 && (uint64_t v102 = 4 * v101, (unint64_t)(&a4[4 * v101] - &a6[4 * v101]) >= 0x20))
          {
            uint64_t v176 = a5 & 0xFFFFFFF8;
            unsigned int v177 = (int32x4_t *)&v209[v102];
            uint64_t v178 = (int32x4_t *)&v208[v102];
            uint64_t v179 = (int32x4_t *)v214;
            do
            {
              int32x4_t v180 = vaddq_s32(*v179, *v178);
              v177[-1] = vaddq_s32(v179[-1], v178[-1]);
              int32x4_t *v177 = v180;
              v177 += 2;
              v179 += 2;
              v178 += 2;
              v176 -= 8;
            }
            while (v176);
            uint64_t v103 = a5 & 0xFFFFFFF8;
            if (v210 == a5) {
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t v103 = 0;
          }
          uint64_t v104 = a5 - v103;
          uint64_t v105 = (int *)&v213[4 * v103];
          uint64_t v106 = 4 * (v103 + v101);
          float64x2_t v107 = &a4[v106];
          uint64_t v108 = &a6[v106];
          do
          {
            int v110 = *(_DWORD *)v108;
            v108 += 4;
            int v109 = v110;
            int v111 = *v105++;
            *(_DWORD *)float64x2_t v107 = v111 + v109;
            v107 += 4;
            --v104;
          }
          while (v104);
        }
        else
        {
          if (a5 >= 8 && (uint64_t v151 = 4 * v101, (unint64_t)(&a6[4 * v101] - &a4[4 * v101]) >= 0x20))
          {
            int v191 = (int32x4_t *)&v208[v151];
            uint64_t v192 = a5 & 0xFFFFFFF8;
            uint64_t v193 = (int32x4_t *)&v209[v151];
            uint64_t v194 = (int32x4_t *)v214;
            do
            {
              int32x4_t v195 = vsubq_s32(*v193, *v194);
              v191[-1] = vsubq_s32(v193[-1], v194[-1]);
              int32x4_t *v191 = v195;
              v191 += 2;
              v194 += 2;
              v193 += 2;
              v192 -= 8;
            }
            while (v192);
            uint64_t v152 = a5 & 0xFFFFFFF8;
            if (v210 == a5) {
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t v152 = 0;
          }
          uint64_t v153 = a5 - v152;
          int v154 = (int *)&v213[4 * v152];
          uint64_t v155 = 4 * (v152 + v101);
          uint64_t v156 = &a6[v155];
          uint64_t v157 = &a4[v155];
          do
          {
            int v159 = *(_DWORD *)v157;
            v157 += 4;
            int v158 = v159;
            int v160 = *v154++;
            *(_DWORD *)uint64_t v156 = v158 - v160;
            v156 += 4;
            --v153;
          }
          while (v153);
        }
LABEL_16:
        int v20 = 3 * ((int)v18 / 3) + ((int)v18 + 1) % 3;
        uint64_t v21 = *(int *)&a3[4 * v20];
        if (v15[v21]) {
          goto LABEL_17;
        }
        v15[v21] = 1;
        uint64_t v39 = *(int *)(v13 + 12);
        if (v39 == -1)
        {
          uint64_t v51 = 4 * (int)(v21 * a5);
          if (a7)
          {
            int v52 = &a4[v51];
            int v53 = &a6[v51];
          }
          else
          {
            int v52 = &a6[v51];
            int v53 = &a4[v51];
          }
          memcpy(v52, v53, __n);
          goto LABEL_17;
        }
        if ((int)a5 < 1) {
          goto LABEL_17;
        }
        int v40 = 3 * ((int)v39 / 3);
        int v41 = *(_DWORD *)&a3[4 * v40 + 4 * (((int)v39 + 1) % 3)];
        int v42 = *(_DWORD *)&a3[4 * v40 + 4 * (((int)v39 + 2) % 3)];
        uint64_t v43 = (int)(*(_DWORD *)&a3[4 * v39] * a5);
        uint64_t v44 = (int)(v41 * a5);
        uint64_t v45 = (int)(v42 * a5);
        if (a5 < 8)
        {
          uint64_t v46 = 0;
LABEL_63:
          uint64_t v119 = 4 * v46;
          uint64_t v120 = a5 - v46;
          uint64_t v121 = &v213[v119];
          uint64_t v122 = &a4[4 * v43 + v119];
          float v123 = &a4[4 * v45 + v119];
          float v124 = &a4[4 * v44 + v119];
          do
          {
            int v126 = *(_DWORD *)v124;
            v124 += 4;
            int v125 = v126;
            int v127 = *(_DWORD *)v123;
            v123 += 4;
            int v128 = v127 + v125;
            int v129 = *(_DWORD *)v122;
            v122 += 4;
            *v121++ = v128 - v129;
            --v120;
          }
          while (v120);
          goto LABEL_65;
        }
        float v112 = (int32x4_t *)v214;
        float64x2_t v113 = (int32x4_t *)&v209[4 * v44];
        float64x2_t v114 = (int32x4_t *)&v209[4 * v45];
        uint64_t v115 = a5 & 0xFFFFFFF8;
        uint64_t v116 = (int32x4_t *)&v209[4 * v43];
        do
        {
          int32x4_t v117 = vsubq_s32(vaddq_s32(v114[-1], v113[-1]), v116[-1]);
          int32x4_t v118 = vsubq_s32(vaddq_s32(*v114, *v113), *v116);
          v113 += 2;
          v112[-1] = v117;
          *float v112 = v118;
          v112 += 2;
          v114 += 2;
          v116 += 2;
          v115 -= 8;
        }
        while (v115);
        uint64_t v46 = a5 & 0xFFFFFFF8;
        if (v210 != a5) {
          goto LABEL_63;
        }
LABEL_65:
        uint64_t v130 = (int)v21 * (uint64_t)(int)a5;
        if (a7)
        {
          if (a5 >= 8 && (uint64_t v131 = 4 * v130, (unint64_t)(&a4[4 * v130] - &a6[4 * v130]) >= 0x20))
          {
            uint64_t v181 = a5 & 0xFFFFFFF8;
            int v182 = (int32x4_t *)&v209[v131];
            unsigned int v183 = (int32x4_t *)&v208[v131];
            unsigned int v184 = (int32x4_t *)v214;
            do
            {
              int32x4_t v185 = vaddq_s32(*v184, *v183);
              v182[-1] = vaddq_s32(v184[-1], v183[-1]);
              *int v182 = v185;
              v182 += 2;
              v184 += 2;
              v183 += 2;
              v181 -= 8;
            }
            while (v181);
            uint64_t v132 = a5 & 0xFFFFFFF8;
            if (v210 == a5) {
              goto LABEL_17;
            }
          }
          else
          {
            uint64_t v132 = 0;
          }
          uint64_t v133 = a5 - v132;
          float32x4x3_t v134 = (int *)&v213[4 * v132];
          uint64_t v135 = 4 * (v132 + v130);
          float32x4x3_t v136 = &a4[v135];
          float32x4x3_t v137 = &a6[v135];
          do
          {
            int v139 = *(_DWORD *)v137;
            v137 += 4;
            int v138 = v139;
            int v140 = *v134++;
            *(_DWORD *)float32x4x3_t v136 = v140 + v138;
            v136 += 4;
            --v133;
          }
          while (v133);
        }
        else
        {
          if (a5 >= 8 && (uint64_t v161 = 4 * v130, (unint64_t)(&a6[4 * v130] - &a4[4 * v130]) >= 0x20))
          {
            unsigned int v196 = (int32x4_t *)&v208[v161];
            uint64_t v197 = a5 & 0xFFFFFFF8;
            BOOL v198 = (int32x4_t *)&v209[v161];
            unsigned int v199 = (int32x4_t *)v214;
            do
            {
              int32x4_t v200 = vsubq_s32(*v198, *v199);
              v196[-1] = vsubq_s32(v198[-1], v199[-1]);
              *unsigned int v196 = v200;
              v196 += 2;
              v199 += 2;
              v198 += 2;
              v197 -= 8;
            }
            while (v197);
            uint64_t v162 = a5 & 0xFFFFFFF8;
            if (v210 == a5) {
              goto LABEL_17;
            }
          }
          else
          {
            uint64_t v162 = 0;
          }
          uint64_t v163 = a5 - v162;
          int v164 = (int *)&v213[4 * v162];
          uint64_t v165 = 4 * (v162 + v130);
          int v166 = &a6[v165];
          uint64_t v167 = &a4[v165];
          do
          {
            int v169 = *(_DWORD *)v167;
            v167 += 4;
            int v168 = v169;
            int v170 = *v164++;
            *(_DWORD *)int v166 = v168 - v170;
            v166 += 4;
            --v163;
          }
          while (v163);
        }
LABEL_17:
        uint64_t v22 = *(int *)&a3[12 * (v20 / 3) + 4 * ((v20 + 1) % 3)];
        if (v15[v22]) {
          goto LABEL_14;
        }
        v15[v22] = 1;
        uint64_t v23 = *(int *)(v13 + 12);
        if (v23 == -1)
        {
          uint64_t v47 = 4 * (int)(v22 * a5);
          if (a7)
          {
            uint64_t v16 = &a4[v47];
            long long v17 = &a6[v47];
          }
          else
          {
            uint64_t v16 = &a6[v47];
            long long v17 = &a4[v47];
          }
          memcpy(v16, v17, __n);
          goto LABEL_14;
        }
        if ((int)a5 < 1) {
          goto LABEL_14;
        }
        int v24 = 3 * ((int)v23 / 3);
        int v25 = *(_DWORD *)&a3[4 * v24 + 4 * (((int)v23 + 1) % 3)];
        int v26 = *(_DWORD *)&a3[4 * v24 + 4 * (((int)v23 + 2) % 3)];
        uint64_t v27 = (int)(*(_DWORD *)&a3[4 * v23] * a5);
        uint64_t v28 = (int)(v25 * a5);
        uint64_t v29 = (int)(v26 * a5);
        if (a5 < 8)
        {
          uint64_t v30 = 0;
LABEL_39:
          uint64_t v61 = 4 * v30;
          uint64_t v62 = a5 - v30;
          float32x2x3_t v63 = &v213[v61];
          uint64_t v64 = &a4[4 * v27 + v61];
          float64x2_t v65 = &a4[4 * v29 + v61];
          float64x2_t v66 = &a4[4 * v28 + v61];
          do
          {
            int v68 = *(_DWORD *)v66;
            v66 += 4;
            int v67 = v68;
            int v69 = *(_DWORD *)v65;
            v65 += 4;
            int v70 = v69 + v67;
            int v71 = *(_DWORD *)v64;
            v64 += 4;
            *v63++ = v70 - v71;
            --v62;
          }
          while (v62);
          goto LABEL_41;
        }
        int v54 = (int32x4_t *)v214;
        int v55 = (int32x4_t *)&v209[4 * v28];
        int v56 = (int32x4_t *)&v209[4 * v29];
        uint64_t v57 = a5 & 0xFFFFFFF8;
        long long v58 = (int32x4_t *)&v209[4 * v27];
        do
        {
          int32x4_t v59 = vsubq_s32(vaddq_s32(v56[-1], v55[-1]), v58[-1]);
          int32x4_t v60 = vsubq_s32(vaddq_s32(*v56, *v55), *v58);
          v55 += 2;
          v54[-1] = v59;
          *int v54 = v60;
          v54 += 2;
          v56 += 2;
          v58 += 2;
          v57 -= 8;
        }
        while (v57);
        uint64_t v30 = a5 & 0xFFFFFFF8;
        if (v210 != a5) {
          goto LABEL_39;
        }
LABEL_41:
        uint64_t v72 = (int)v22 * (uint64_t)(int)a5;
        if (a7)
        {
          if (a5 >= 8 && (uint64_t v73 = 4 * v72, (unint64_t)(&a4[4 * v72] - &a6[4 * v72]) >= 0x20))
          {
            uint64_t v171 = a5 & 0xFFFFFFF8;
            int v172 = (int32x4_t *)&v209[v73];
            int v173 = (int32x4_t *)&v208[v73];
            uint64_t v174 = (int32x4_t *)v214;
            do
            {
              int32x4_t v175 = vaddq_s32(*v174, *v173);
              v172[-1] = vaddq_s32(v174[-1], v173[-1]);
              *int v172 = v175;
              v172 += 2;
              v174 += 2;
              v173 += 2;
              v171 -= 8;
            }
            while (v171);
            uint64_t v74 = a5 & 0xFFFFFFF8;
            if (v210 == a5) {
              goto LABEL_14;
            }
          }
          else
          {
            uint64_t v74 = 0;
          }
          uint64_t v75 = a5 - v74;
          int v76 = (int *)&v213[4 * v74];
          uint64_t v77 = 4 * (v74 + v72);
          float32x4x4_t v78 = &a4[v77];
          uint64_t v79 = &a6[v77];
          do
          {
            int v81 = *(_DWORD *)v79;
            v79 += 4;
            int v80 = v81;
            int v82 = *v76++;
            *(_DWORD *)float32x4x4_t v78 = v82 + v80;
            v78 += 4;
            --v75;
          }
          while (v75);
        }
        else
        {
          if (a5 >= 8 && (uint64_t v141 = 4 * v72, (unint64_t)(&a6[4 * v72] - &a4[4 * v72]) >= 0x20))
          {
            unsigned int v186 = (int32x4_t *)&v208[v141];
            uint64_t v187 = a5 & 0xFFFFFFF8;
            unsigned int v188 = (int32x4_t *)&v209[v141];
            int v189 = (int32x4_t *)v214;
            do
            {
              int32x4_t v190 = vsubq_s32(*v188, *v189);
              v186[-1] = vsubq_s32(v188[-1], v189[-1]);
              *unsigned int v186 = v190;
              v186 += 2;
              v189 += 2;
              v188 += 2;
              v187 -= 8;
            }
            while (v187);
            uint64_t v142 = a5 & 0xFFFFFFF8;
            if (v210 == a5) {
              goto LABEL_14;
            }
          }
          else
          {
            uint64_t v142 = 0;
          }
          uint64_t v143 = a5 - v142;
          int v144 = (int *)&v213[4 * v142];
          uint64_t v145 = 4 * (v142 + v72);
          unsigned int v146 = &a6[v145];
          uint64_t v147 = &a4[v145];
          do
          {
            int v149 = *(_DWORD *)v147;
            v147 += 4;
            int v148 = v149;
            int v150 = *v144++;
            *(_DWORD *)unsigned int v146 = v148 - v150;
            v146 += 4;
            --v143;
          }
          while (v143);
        }
LABEL_14:
        if (!mc_mesh_face_walker_next(v13)) {
          goto LABEL_118;
        }
      }
      uint64_t v38 = 0;
LABEL_51:
      uint64_t v90 = 4 * v38;
      uint64_t v91 = a5 - v38;
      uint64_t v92 = &v213[v90];
      uint64_t v93 = &a4[4 * v35 + v90];
      unint64_t v94 = &a4[4 * v37 + v90];
      int v95 = &a4[4 * v36 + v90];
      do
      {
        int v97 = *(_DWORD *)v95;
        v95 += 4;
        int v96 = v97;
        int v98 = *(_DWORD *)v94;
        v94 += 4;
        int v99 = v98 + v96;
        int v100 = *(_DWORD *)v93;
        v93 += 4;
        *v92++ = v99 - v100;
        --v91;
      }
      while (v91);
      goto LABEL_53;
    }
LABEL_118:
    if (v11)
    {
      if (a7)
      {
        uint64_t v201 = 0;
        unsigned int v202 = v15;
        do
        {
          if (!*v202++) {
            memcpy(&a4[v201], &a6[v201], __n);
          }
          v201 += 4 * (int)a5;
          --v11;
        }
        while (v11);
      }
      else
      {
        uint64_t v204 = 0;
        unsigned int v205 = v15;
        do
        {
          if (!*v205++) {
            memcpy(&a6[v204], &a4[v204], __n);
          }
          v204 += 4 * (int)a5;
          --v11;
        }
        while (v11);
      }
    }
    free(*(void **)(v13 + 24));
    free(*(void **)(v13 + 32));
    free(*(void **)(v13 + 40));
    free((void *)v13);
    free(v15);
    free(v207);
  }
  return 1;
}

double mc_mat_4x4_mul_mm@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v4 = *a2;
  double v3 = a2[1];
  double v6 = a2[4];
  double v5 = a2[5];
  double v8 = a2[8];
  double v7 = a2[9];
  double v10 = a2[12];
  double v9 = a2[13];
  double v12 = a2[2];
  double v11 = a2[3];
  double v14 = a2[6];
  double v13 = a2[7];
  double v16 = a2[10];
  double v15 = a2[11];
  double v18 = a2[14];
  double v17 = a2[15];
  double v19 = *a1;
  double v20 = a1[1];
  double v21 = a1[2];
  double v22 = a1[3];
  double v23 = *a1 * v3 + v20 * v5 + v21 * v7 + v22 * v9;
  *a3 = *a1 * *a2 + v20 * v6 + v21 * v8 + v22 * v10;
  a3[1] = v23;
  a3[2] = v19 * v12 + v20 * v14 + v21 * v16 + v22 * v18;
  a3[3] = v19 * v11 + v20 * v13 + v21 * v15 + v22 * v17;
  double v24 = a1[4];
  double v25 = a1[5];
  double v26 = a1[6];
  double v27 = a1[7];
  a3[4] = v24 * v4 + v25 * v6 + v26 * v8 + v27 * v10;
  a3[5] = v24 * v3 + v25 * v5 + v26 * v7 + v27 * v9;
  a3[6] = v24 * v12 + v25 * v14 + v26 * v16 + v27 * v18;
  a3[7] = v24 * v11 + v25 * v13 + v26 * v15 + v27 * v17;
  double v28 = a1[8];
  double v29 = a1[9];
  double v30 = a1[10];
  double v31 = a1[11];
  a3[8] = v28 * v4 + v29 * v6 + v30 * v8 + v31 * v10;
  a3[9] = v28 * v3 + v29 * v5 + v30 * v7 + v31 * v9;
  a3[10] = v28 * v12 + v29 * v14 + v30 * v16 + v31 * v18;
  a3[11] = v28 * v11 + v29 * v13 + v30 * v15 + v31 * v17;
  double v32 = a1[12];
  double v33 = a1[13];
  double v34 = v32 * v4 + v33 * v6;
  double v35 = a1[14];
  double v36 = a1[15];
  a3[12] = v34 + v35 * v8 + v36 * v10;
  a3[13] = v32 * v3 + v33 * v5 + v35 * v7 + v36 * v9;
  double result = v32 * v11 + v33 * v13 + v35 * v15 + v36 * v17;
  a3[14] = v32 * v12 + v33 * v14 + v35 * v16 + v36 * v18;
  a3[15] = result;
  return result;
}

double mc_mat_4x4_invert@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v2 = a1[10];
  double v3 = a1[11];
  double v5 = a1[4];
  double v4 = a1[5];
  double v7 = a1[14];
  double v6 = a1[15];
  double v9 = a1[8];
  double v8 = a1[9];
  double v11 = a1[6];
  double v10 = a1[7];
  double v13 = a1[12];
  double v12 = a1[13];
  double v69 = v7 * v3 * v4 + v8 * v6 * v11 + v12 * v2 * v10;
  double v70 = v8 * v7;
  double v68 = v2 * v4 * v6 + v10 * (v8 * v7) + v11 * v3 * v12;
  double v67 = v9 * v10 * v7 + v13 * v11 * v3;
  double v66 = v5 * v3 * v7 + v9 * v11 * v6 + (v13 * v10 - v5 * v6) * v2;
  double v65 = v5 * v3 * v12 + v9 * v4 * v6 + v13 * v10 * v8;
  double v64 = v5 * (v8 * v6) + v9 * v10 * v12 + v13 * v4 * v3;
  double v63 = v9 * v11 * v12 + v13 * v4 * v2;
  double v62 = v5 * (v12 * v2) + v13 * v11 * v8 + (v9 * v4 - v5 * v8) * v7;
  double v14 = a1[1];
  double v15 = a1[2];
  double v16 = a1[3];
  double v60 = v15 * v8;
  double v61 = v14 * (v7 * v3) + v15 * v8 * v6 + (v16 * v12 - v14 * v6) * v2;
  double v56 = v15 * v9;
  double v59 = v15 * v9 * v6 + v16 * v13 * v2 + *a1 * v3 * v7;
  double v17 = v16 * v9;
  double v18 = v14 * v9;
  double v19 = v14 * v13;
  double v20 = (*a1 * v3 - v16 * v9) * v12 - (v14 * v13 * v3 - v14 * v9 * v6);
  double v21 = v15 * v13;
  double v22 = v14 * v10 * v7 + v15 * v4 * v6 + v16 * v12 * v11;
  double v23 = v16 * v13 - *a1 * v6;
  double v57 = v15 * v13 * v3 + v17 * v7 + *a1 * v2 * v6;
  double v58 = v20 + v23 * v8;
  double v24 = v15 * v5;
  double v25 = v16 * v5;
  double v26 = *a1 * v10 - v16 * v5;
  double v54 = v26 * v7 - (v15 * v13 * v10 - v15 * v5 * v6) + v23 * v11;
  double v55 = v18 * v7 + v15 * v13 * v8 + *a1 * v2 * v12;
  double v27 = v14 * v5;
  double v28 = v27 * v6 + v16 * v13 * v4;
  double v29 = -(v19 * v11 - v21 * v4);
  double v30 = v15 * v12 * v3 + v16 * v8 * v7;
  double v31 = v16 * v4;
  double v32 = v14 * v6 * v11 + v15 * v12 * v10 + v16 * v4 * v7;
  double v33 = *a1 * v4;
  double v34 = v27 - v33;
  double v35 = v29 + (v27 - v33) * v7;
  double v36 = v14 * v10 * v2 + v16 * v8 * v11 + (v15 * v4 - v14 * v11) * v3;
  double v37 = v24 * v3 + v17 * v11;
  double v38 = -(v18 * v10 - v17 * v4);
  double v39 = v27 * v2 + v56 * v4;
  double v40 = v19 * v2 + v56 * v12;
  double v41 = v19 * v10 + v25 * v12;
  double v42 = v38 + v34 * v3;
  double v43 = v56 * v10 + v25 * v2 + *a1 * v11 * v3;
  double v44 = v42 + v26 * v8;
  double v45 = v39 + *a1 * v11 * v8;
  double v46 = v18 * v11 + v24 * v8;
  double v47 = v35 + (*a1 * v11 - v24) * v12;
  double v48 = v28 + *a1 * v10 * v12;
  double v49 = v37 + *a1 * v10 * v2;
  double v50 = v40 + *a1 * v70 - v55;
  double v51 = v36 - (v60 * v10 + v31 * v2);
  double v52 = 1.0 / ((v66 - v67) * v14 + v15 * (v64 - v65) + v16 * (v62 - v63) + *a1 * (v68 - v69));
  *a2 = (v68 - v69) * v52;
  a2[1] = (v61 - v30) * v52;
  a2[2] = (v32 - v22) * v52;
  a2[3] = v51 * v52;
  a2[4] = (v66 - v67) * v52;
  a2[5] = (v57 - v59) * v52;
  a2[6] = v54 * v52;
  a2[7] = (v43 - v49) * v52;
  a2[8] = (v64 - v65) * v52;
  a2[9] = v58 * v52;
  a2[10] = (v41 + v33 * v6 - v48) * v52;
  a2[11] = v44 * v52;
  a2[12] = (v62 - v63) * v52;
  a2[13] = v50 * v52;
  double result = (v46 + v33 * v2 - v45) * v52;
  a2[14] = v47 * v52;
  a2[15] = result;
  return result;
}

uint64_t mc_mesh_decode(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3)
  {
    BOOL v6 = 1;
    double v7 = (int *)malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
    double v8 = (unsigned int *)v7;
    *double v7 = 1;
    *((void *)v7 + 1) = a1;
    *((void *)v7 + 3) = a2;
    if (a2)
    {
      BOOL v6 = a1 != 0;
      *double v7 = v6;
    }
    int v136 = 0;
    int v137 = 0;
    uint64_t v135 = 0;
    int v134 = 0;
    uint64_t v133 = 0;
    unint64_t v9 = *((void *)v7 + 4);
    if (v9 == a2)
    {
      int v137 = -1;
      unint64_t v10 = a2;
      if (!v6) {
        goto LABEL_32;
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_32;
      }
      unint64_t v12 = v9 + 4;
      if (v9 + 4 > a2) {
        goto LABEL_32;
      }
      int v13 = *(_DWORD *)(a1 + v9);
      *((void *)v7 + 4) = v12;
      unint64_t v10 = v9 + 6;
      if (v9 + 6 > a2) {
        goto LABEL_32;
      }
      unsigned int v14 = *(unsigned __int16 *)(a1 + v12);
      *((void *)v7 + 4) = v10;
      if (v13 != 1263421507 || v14 > 1) {
        goto LABEL_32;
      }
      if (v9 + 10 <= a2)
      {
        int v20 = *(_DWORD *)(a1 + v10);
        *((void *)v7 + 4) = v9 + 10;
        int v137 = v20;
        unint64_t v10 = v9 + 10;
        double v16 = v7;
        if (v9 + 12 <= a2)
        {
          *((void *)v7 + 4) = v9 + 12;
          if (v9 + 14 > a2) {
            goto LABEL_32;
          }
          *((void *)v7 + 4) = v9 + 14;
          unint64_t v10 = v9 + 22;
          if (v9 + 22 > a2) {
            goto LABEL_32;
          }
          *((void *)v7 + 4) = v10;
          if (v9 > a2) {
            goto LABEL_8;
          }
LABEL_7:
          *((void *)v7 + 4) = v9;
          unint64_t v10 = v9;
LABEL_8:
          if (!v137)
          {
            int v137 = 0;
            unint64_t v11 = *((void *)v7 + 3);
            if (v10 == v11)
            {
              int v137 = -1;
              goto LABEL_39;
            }
            unint64_t v17 = v10 + 4;
            if (v10 + 4 <= v11)
            {
              int v18 = *(_DWORD *)(a1 + v10);
              *((void *)v7 + 4) = v17;
              unint64_t v19 = v10 + 6;
              if (v10 + 6 <= v11)
              {
                unsigned int v21 = *(unsigned __int16 *)(a1 + v17);
                *((void *)v7 + 4) = v19;
                if (v18 == 1263421507 && v21 < 2)
                {
                  unint64_t v22 = v10 + 10;
                  if (v10 + 10 <= v11)
                  {
                    int v26 = *(_DWORD *)(a1 + v19);
                    *((void *)v7 + 4) = v22;
                    int v137 = v26;
                    unint64_t v19 = v10 + 12;
                    if (v10 + 12 <= v11)
                    {
                      int v27 = *(unsigned __int16 *)(a1 + v22);
                      *((void *)v7 + 4) = v19;
                      unint64_t v131 = v10 + 14;
                      if (v10 + 14 <= v11)
                      {
                        *((void *)v7 + 4) = v131;
                        unint64_t v19 = v10 + 22;
                        if (v10 + 22 <= v11)
                        {
                          uint64_t v28 = *(void *)(a1 + v131);
                          *((void *)v7 + 4) = v19;
                        }
                        else
                        {
                          uint64_t v28 = 0;
                          *double v7 = 0;
                          unint64_t v19 = v10 + 14;
                        }
                      }
                      else
                      {
                        uint64_t v28 = 0;
                        *double v7 = 0;
                      }
                      goto LABEL_38;
                    }
                    unint64_t v19 = v10 + 10;
                    double v23 = v7;
                  }
                  else
                  {
                    *double v7 = 0;
                    double v23 = &v137;
                  }
                  int v27 = 0;
                  uint64_t v28 = 0;
                  *double v23 = 0;
                  int v26 = v137;
LABEL_38:
                  if (!(v26 | v27))
                  {
                    if (!*v7) {
                      goto LABEL_40;
                    }
                    if (v19 + 8 <= v11)
                    {
                      uint64_t v114 = *(void *)(a1 + v19);
                      *((void *)v7 + 4) = v19 + 8;
                    }
                    else
                    {
                      uint64_t v114 = 0;
                      *double v7 = 0;
                    }
                    *(void *)uint64_t v3 = v114;
                    mc_read_mat4((uint64_t)v7, (double *)(v3 + 8));
                    if (!*v8) {
                      goto LABEL_40;
                    }
                    unint64_t v116 = *((void *)v8 + 3);
                    uint64_t v115 = *((void *)v8 + 4);
                    uint64_t v117 = v115 + 4;
                    if (v115 + 4 <= v116)
                    {
                      uint64_t v118 = *((void *)v8 + 1);
                      uint64_t v119 = *(unsigned int *)(v118 + v115);
                      *((void *)v8 + 4) = v117;
                      unint64_t v120 = v115 + 8;
                      if (v120 <= v116)
                      {
                        uint64_t v121 = *(unsigned int *)(v118 + v117);
                        unint64_t v122 = v19 + v28;
                        if (*((void *)v8 + 3) < v19 + v28) {
                          unint64_t v122 = v120;
                        }
                        *((void *)v8 + 4) = v122;
                        if (!*(void *)(v3 + 144) && !*(_DWORD *)(v3 + 136))
                        {
                          *(_DWORD *)(v3 + 136) = v119;
                          float v123 = malloc_type_malloc(12 * v119, 0x10000403E1C8BA9uLL);
                          *(void *)(v3 + 144) = v123;
                          if (v123)
                          {
                            if (!*(void *)(v3 + 152))
                            {
                              uint64_t v124 = *(unsigned int *)(v3 + 136);
                              if (v124)
                              {
                                int v125 = malloc_type_malloc(12 * v124, 0x10000403E1C8BA9uLL);
                                *(void *)(v3 + 152) = v125;
                                if (v125)
                                {
                                  if (!*(void *)(v3 + 168) && !*(_DWORD *)(v3 + 160))
                                  {
                                    if (!v121) {
                                      goto LABEL_40;
                                    }
                                    int v126 = malloc_type_realloc(0, 16 * v121, 0x6209F6ECuLL);
                                    if (v126)
                                    {
                                      int v127 = v126;
                                      bzero(v126, 16 * v121);
                                      *(void *)(v3 + 168) = v127;
                                      *(_DWORD *)(v3 + 160) = v121;
                                      goto LABEL_40;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_39:
                  *double v8 = 0;
LABEL_40:
                  int v132 = 0;
                  while (2)
                  {
                    int v137 = 0;
                    unint64_t v29 = *((void *)v8 + 3);
                    unint64_t v30 = *((void *)v8 + 4);
                    if (v30 == v29)
                    {
                      int v31 = 0;
                      int v32 = 0;
                      int v137 = -1;
                      unint64_t v33 = v30;
                      if (!*v8) {
                        goto LABEL_229;
                      }
LABEL_63:
                      if (v29 >= v30)
                      {
                        *((void *)v8 + 4) = v30;
                        unint64_t v33 = v30;
                      }
                      int v43 = v137;
                      switch(v137)
                      {
                        case -1:
                        case 0:
                          if (v132)
                          {
                            int v128 = v136;
                            uint64_t v129 = v135;
                            if (v133)
                            {
                              if (v133 == 1)
                              {
                                int v130 = 0;
                              }
                              else
                              {
                                if (v133 != 2) {
                                  goto LABEL_228;
                                }
                                int v130 = 1;
                              }
                              if (!mc_split(v3, v130, *((float *)&v133 + 1))) {
                                goto LABEL_228;
                              }
                            }
                            if (v134 && !mc_mesh_recompute_uv(v3, v128, v129)) {
                              goto LABEL_228;
                            }
                          }
                          goto LABEL_229;
                        case 1:
                          int v137 = 0;
                          if (v33 == v29) {
                            goto LABEL_149;
                          }
                          unint64_t v44 = v33 + 4;
                          if (v33 + 4 > v29) {
                            goto LABEL_149;
                          }
                          uint64_t v45 = *((void *)v8 + 1);
                          int v46 = *(_DWORD *)(v45 + v33);
                          *((void *)v8 + 4) = v44;
                          unint64_t v47 = v33 + 6;
                          if (v33 + 6 > v29) {
                            goto LABEL_149;
                          }
                          unsigned int v48 = *(unsigned __int16 *)(v45 + v44);
                          *((void *)v8 + 4) = v47;
                          if (v46 != 1263421507 || v48 > 1) {
                            goto LABEL_149;
                          }
                          unint64_t v50 = v33 + 10;
                          if (v33 + 10 <= v29)
                          {
                            int v74 = *(_DWORD *)(v45 + v47);
                            *((void *)v8 + 4) = v50;
                            int v137 = v74;
                            unint64_t v47 = v33 + 12;
                            if (v33 + 12 <= v29)
                            {
                              int v75 = *(unsigned __int16 *)(v45 + v50);
                              *((void *)v8 + 4) = v47;
                              unint64_t v110 = v33 + 14;
                              if (v33 + 14 <= v29)
                              {
                                *((void *)v8 + 4) = v110;
                                unint64_t v47 = v33 + 22;
                                if (v33 + 22 <= v29)
                                {
                                  uint64_t v76 = *(void *)(v45 + v110);
                                  *((void *)v8 + 4) = v47;
                                }
                                else
                                {
                                  uint64_t v76 = 0;
                                  *double v8 = 0;
                                  unint64_t v47 = v110;
                                }
                              }
                              else
                              {
                                uint64_t v76 = 0;
                                *double v8 = 0;
                              }
LABEL_113:
                              if (v74 != 1 || v75) {
                                goto LABEL_149;
                              }
                              int v77 = *v8;
                              if (!*v8) {
                                goto LABEL_150;
                              }
                              unint64_t v78 = v47 + 4;
                              if (v47 + 4 > v29) {
                                goto LABEL_149;
                              }
                              int v79 = *(_DWORD *)(*((void *)v8 + 1) + v47);
                              *((void *)v8 + 4) = v78;
                              if (v79 != *(_DWORD *)(v3 + 160)) {
                                goto LABEL_149;
                              }
                              if (!v79) {
                                goto LABEL_188;
                              }
                              uint64_t v80 = 0;
                              unint64_t v81 = 0;
                              int v82 = 1;
                              while (1)
                              {
                                uint64_t v84 = *(void *)(v3 + 168) + v80;
                                if (v82)
                                {
                                  if (v78 + 12 > *((void *)v8 + 3)) {
                                    goto LABEL_120;
                                  }
                                  uint64_t v85 = (uint64_t *)(*((void *)v8 + 1) + v78);
                                  uint64_t v86 = *v85;
                                  *(_DWORD *)(v84 + 8) = *((_DWORD *)v85 + 2);
                                  *(void *)uint64_t v84 = v86;
                                  uint64_t v87 = *((void *)v8 + 4);
                                  unint64_t v78 = v87 + 12;
                                  *((void *)v8 + 4) = v87 + 12;
                                  int v77 = *v8;
                                  if (!*v8)
                                  {
                                    int v82 = 0;
                                    __int16 v83 = 0;
                                    goto LABEL_121;
                                  }
                                  unint64_t v88 = v87 + 14;
                                  if (v88 > *((void *)v8 + 3))
                                  {
LABEL_120:
                                    int v77 = 0;
                                    int v82 = 0;
                                    __int16 v83 = 0;
                                    *double v8 = 0;
                                  }
                                  else
                                  {
                                    __int16 v83 = *(_WORD *)(*((void *)v8 + 1) + v78);
                                    *((void *)v8 + 4) = v88;
                                    unint64_t v78 = v88;
                                    int v82 = v77;
                                  }
                                }
                                else
                                {
                                  __int16 v83 = 0;
                                }
LABEL_121:
                                *(_DWORD *)(v84 + 12) = v83;
                                ++v81;
                                v80 += 16;
                                if (v81 >= *(unsigned int *)(v3 + 160))
                                {
                                  if (!v77) {
                                    goto LABEL_150;
                                  }
                                  goto LABEL_188;
                                }
                              }
                            }
                            unint64_t v47 = v33 + 10;
                            double v51 = (int *)v8;
                          }
                          else
                          {
                            *double v8 = 0;
                            double v51 = &v137;
                          }
                          int v75 = 0;
                          uint64_t v76 = 0;
                          *double v51 = 0;
                          int v74 = v137;
                          goto LABEL_113;
                        case 2:
                          int v137 = 0;
                          if (v33 == v29) {
                            goto LABEL_149;
                          }
                          unint64_t v58 = v33 + 4;
                          if (v33 + 4 > v29) {
                            goto LABEL_149;
                          }
                          uint64_t v59 = *((void *)v8 + 1);
                          int v60 = *(_DWORD *)(v59 + v33);
                          *((void *)v8 + 4) = v58;
                          unint64_t v47 = v33 + 6;
                          if (v33 + 6 > v29) {
                            goto LABEL_149;
                          }
                          unsigned int v61 = *(unsigned __int16 *)(v59 + v58);
                          *((void *)v8 + 4) = v47;
                          if (v60 != 1263421507 || v61 > 1) {
                            goto LABEL_149;
                          }
                          unint64_t v63 = v33 + 10;
                          if (v33 + 10 > v29)
                          {
                            *double v8 = 0;
                            double v64 = &v137;
LABEL_131:
                            int v90 = 0;
                            uint64_t v76 = 0;
                            int *v64 = 0;
                            int v89 = v137;
                            goto LABEL_132;
                          }
                          int v89 = *(_DWORD *)(v59 + v47);
                          *((void *)v8 + 4) = v63;
                          int v137 = v89;
                          unint64_t v47 = v33 + 12;
                          if (v33 + 12 > v29)
                          {
                            unint64_t v47 = v33 + 10;
                            double v64 = (int *)v8;
                            goto LABEL_131;
                          }
                          int v90 = *(unsigned __int16 *)(v59 + v63);
                          *((void *)v8 + 4) = v47;
                          unint64_t v111 = v33 + 14;
                          if (v33 + 14 <= v29)
                          {
                            *((void *)v8 + 4) = v111;
                            unint64_t v47 = v33 + 22;
                            if (v33 + 22 <= v29)
                            {
                              uint64_t v76 = *(void *)(v59 + v111);
                              *((void *)v8 + 4) = v47;
                            }
                            else
                            {
                              uint64_t v76 = 0;
                              *double v8 = 0;
                              unint64_t v47 = v111;
                            }
                          }
                          else
                          {
                            uint64_t v76 = 0;
                            *double v8 = 0;
                          }
LABEL_132:
                          if (v89 != 2 || v90) {
                            goto LABEL_149;
                          }
                          if (*v8)
                          {
                            uint64_t v91 = v47 + 4;
                            if (v47 + 4 <= v29
                              && (unint64_t v92 = *(unsigned int *)(*((void *)v8 + 1) + v47),
                                  *((void *)v8 + 4) = v91,
                                  *(_DWORD *)(v3 + 136) == v92))
                            {
                              if (!v92) {
                                goto LABEL_188;
                              }
                              uint64_t v93 = 0;
                              for (unint64_t i = 0; i < v92; ++i)
                              {
                                if (*v8)
                                {
                                  if ((unint64_t)(v91 + 12) <= *((void *)v8 + 3))
                                  {
                                    uint64_t v102 = *(void *)(v3 + 144) + v93;
                                    uint64_t v103 = *((void *)v8 + 1) + v91;
                                    uint64_t v104 = *(void *)v103;
                                    *(_DWORD *)(v102 + 8) = *(_DWORD *)(v103 + 8);
                                    *(void *)uint64_t v102 = v104;
                                    uint64_t v91 = *((void *)v8 + 4) + 12;
                                    *((void *)v8 + 4) = v91;
                                    unint64_t v92 = *(unsigned int *)(v3 + 136);
                                  }
                                  else
                                  {
                                    *double v8 = 0;
                                  }
                                }
                                v93 += 12;
                              }
LABEL_182:
                              if (*v8)
                              {
LABEL_188:
                                if (*((void *)v8 + 3) >= v47 + v76) {
                                  *((void *)v8 + 4) = v47 + v76;
                                }
                              }
                            }
                            else
                            {
LABEL_149:
                              *double v8 = 0;
                            }
                          }
LABEL_150:
                          if (!*v8)
                          {
LABEL_151:
                            uint64_t v101 = "UNKNOWN CHUNK TYPE";
                            if ((v43 + 1) <= 0xC) {
                              uint64_t v101 = off_1E5AB2C10[v43 + 1];
                            }
                            mc_log_message(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/mcodec/mesh/mc_mesh_codec.c", 372, (uint64_t)"mc_io_r_mc_mesh", "Failed when parsing chunk of type %s (%d, v%d.%d)", v101, v43, v31, v32);
                          }
                          continue;
                        case 3:
                          int v137 = 0;
                          if (v33 == v29) {
                            goto LABEL_149;
                          }
                          unint64_t v65 = v33 + 4;
                          if (v33 + 4 > v29) {
                            goto LABEL_149;
                          }
                          uint64_t v66 = *((void *)v8 + 1);
                          int v67 = *(_DWORD *)(v66 + v33);
                          *((void *)v8 + 4) = v65;
                          unint64_t v47 = v33 + 6;
                          if (v33 + 6 > v29) {
                            goto LABEL_149;
                          }
                          unsigned int v68 = *(unsigned __int16 *)(v66 + v65);
                          *((void *)v8 + 4) = v47;
                          if (v67 != 1263421507 || v68 > 1) {
                            goto LABEL_149;
                          }
                          unint64_t v70 = v33 + 10;
                          if (v33 + 10 > v29)
                          {
                            *double v8 = 0;
                            int v71 = &v137;
LABEL_141:
                            int v96 = 0;
                            uint64_t v76 = 0;
                            *int v71 = 0;
                            int v95 = v137;
                            goto LABEL_142;
                          }
                          int v95 = *(_DWORD *)(v66 + v47);
                          *((void *)v8 + 4) = v70;
                          int v137 = v95;
                          unint64_t v47 = v33 + 12;
                          if (v33 + 12 > v29)
                          {
                            unint64_t v47 = v33 + 10;
                            int v71 = (int *)v8;
                            goto LABEL_141;
                          }
                          int v96 = *(unsigned __int16 *)(v66 + v70);
                          *((void *)v8 + 4) = v47;
                          unint64_t v112 = v33 + 14;
                          if (v33 + 14 <= v29)
                          {
                            *((void *)v8 + 4) = v112;
                            unint64_t v47 = v33 + 22;
                            if (v33 + 22 <= v29)
                            {
                              uint64_t v76 = *(void *)(v66 + v112);
                              *((void *)v8 + 4) = v47;
                            }
                            else
                            {
                              uint64_t v76 = 0;
                              *double v8 = 0;
                              unint64_t v47 = v112;
                            }
                          }
                          else
                          {
                            uint64_t v76 = 0;
                            *double v8 = 0;
                          }
LABEL_142:
                          if (v95 != 3 || v96) {
                            goto LABEL_149;
                          }
                          if (!*v8) {
                            goto LABEL_150;
                          }
                          uint64_t v97 = v47 + 4;
                          if (v47 + 4 > v29) {
                            goto LABEL_149;
                          }
                          unint64_t v98 = *(unsigned int *)(*((void *)v8 + 1) + v47);
                          *((void *)v8 + 4) = v97;
                          if (*(_DWORD *)(v3 + 136) != v98) {
                            goto LABEL_149;
                          }
                          if (!v98) {
                            goto LABEL_188;
                          }
                          uint64_t v99 = 0;
                          for (unint64_t j = 0; j < v98; ++j)
                          {
                            if (*v8)
                            {
                              if ((unint64_t)(v97 + 12) <= *((void *)v8 + 3))
                              {
                                uint64_t v105 = *(void *)(v3 + 152) + v99;
                                uint64_t v106 = *((void *)v8 + 1) + v97;
                                uint64_t v107 = *(void *)v106;
                                *(_DWORD *)(v105 + 8) = *(_DWORD *)(v106 + 8);
                                *(void *)uint64_t v105 = v107;
                                uint64_t v97 = *((void *)v8 + 4) + 12;
                                *((void *)v8 + 4) = v97;
                                unint64_t v98 = *(unsigned int *)(v3 + 136);
                              }
                              else
                              {
                                *double v8 = 0;
                              }
                            }
                            v99 += 12;
                          }
                          goto LABEL_182;
                        case 4:
                          mc_io_r_vi_connectivity_eb((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 5:
                          mc_io_r_material_id((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 6:
                          mc_io_r_vertices_predictive((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 7:
                          mc_io_r_uv_predictive((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 8:
                          mc_io_r_vertices_cube((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 9:
                          mc_io_r_vertices_cam((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 10:
                          mc_io_r_uv_model_chunk((uint64_t)v8, &v136, (void **)&v135);
                          goto LABEL_150;
                        case 11:
                          mc_io_r_postprocess((uint64_t)v8, &v133);
                          int v132 = 1;
                          goto LABEL_150;
                        default:
                          mc_log_message(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/mcodec/mesh/mc_mesh_codec.c", 364, (uint64_t)"mc_io_r_mc_mesh", "Found unknown chunk %d, v%d.%d", v137, v31, v32);
                          unint64_t v52 = *((void *)v8 + 3);
                          uint64_t v53 = *((void *)v8 + 4);
                          if (v53 == v52) {
                            goto LABEL_79;
                          }
                          if (!*v8) {
                            goto LABEL_79;
                          }
                          uint64_t v54 = v53 + 4;
                          if (v53 + 4 > v52) {
                            goto LABEL_79;
                          }
                          uint64_t v55 = *((void *)v8 + 1);
                          int v56 = *(_DWORD *)(v55 + v53);
                          *((void *)v8 + 4) = v54;
                          uint64_t v57 = v53 + 6;
                          if (v53 + 6 > v52) {
                            goto LABEL_79;
                          }
                          unsigned int v72 = *(unsigned __int16 *)(v55 + v54);
                          *((void *)v8 + 4) = v57;
                          if (v56 != 1263421507 || v72 > 1) {
                            goto LABEL_79;
                          }
                          if (v53 + 10 <= v52)
                          {
                            *((void *)v8 + 4) = v53 + 10;
                            uint64_t v57 = v53 + 10;
                            uint64_t v73 = (int *)v8;
                            if (v53 + 12 <= v52)
                            {
                              *((void *)v8 + 4) = v53 + 12;
                              uint64_t v113 = v53 + 14;
                              if (v53 + 14 > v52 || (*((void *)v8 + 4) = v113, uint64_t v57 = v53 + 22, v53 + 22 > v52))
                              {
LABEL_79:
                                *double v8 = 0;
                                goto LABEL_151;
                              }
                              uint64_t v108 = *(void *)(v55 + v113);
                              *((void *)v8 + 4) = v57;
                              goto LABEL_165;
                            }
                          }
                          else
                          {
                            *double v8 = 0;
                            uint64_t v73 = &v137;
                          }
                          uint64_t v108 = 0;
                          int *v73 = 0;
                          if (!*v8) {
                            goto LABEL_150;
                          }
LABEL_165:
                          unint64_t v109 = v108 + v57;
                          if (v52 >= v109) {
                            *((void *)v8 + 4) = v109;
                          }
                          goto LABEL_150;
                      }
                    }
                    break;
                  }
                  unint64_t v34 = v30 + 4;
                  if (*v8) {
                    BOOL v35 = v34 > v29;
                  }
                  else {
                    BOOL v35 = 1;
                  }
                  if (!v35)
                  {
                    uint64_t v36 = *((void *)v8 + 1);
                    int v37 = *(_DWORD *)(v36 + v30);
                    *((void *)v8 + 4) = v34;
                    unint64_t v33 = v30 + 6;
                    if (v30 + 6 <= v29)
                    {
                      unsigned int v38 = *(unsigned __int16 *)(v36 + v34);
                      *((void *)v8 + 4) = v33;
                      if (v37 == 1263421507 && v38 <= 1)
                      {
                        unint64_t v40 = v30 + 10;
                        if (v30 + 10 <= v29)
                        {
                          int v41 = *(_DWORD *)(v36 + v33);
                          *((void *)v8 + 4) = v40;
                          int v137 = v41;
                          unint64_t v42 = v30 + 12;
                          if (v30 + 12 <= v29)
                          {
                            int v31 = *(unsigned __int16 *)(v36 + v40);
                            *((void *)v8 + 4) = v42;
                            if (v30 + 14 > v29) {
                              goto LABEL_228;
                            }
                            int v32 = *(unsigned __int16 *)(v36 + v42);
                            *((void *)v8 + 4) = v30 + 14;
                            unint64_t v33 = v30 + 22;
                            if (v30 + 22 > v29) {
                              goto LABEL_228;
                            }
                            *((void *)v8 + 4) = v33;
                            if (!*v8) {
                              goto LABEL_229;
                            }
                          }
                          else
                          {
                            unint64_t v33 = v30 + 10;
                            int v31 = 0;
                            int v32 = 0;
                            *double v8 = 0;
                            if (!*v8) {
                              goto LABEL_229;
                            }
                          }
                        }
                        else
                        {
                          *double v8 = 0;
                          int v31 = 0;
                          int v32 = 0;
                          int v137 = 0;
                          if (!*v8) {
                            goto LABEL_229;
                          }
                        }
                        goto LABEL_63;
                      }
                    }
                  }
LABEL_228:
                  *double v8 = 0;
LABEL_229:
                  *(_DWORD *)(v3 + 176) = v136;
                  *(void *)(v3 + 184) = v135;
                  uint64_t v3 = *v8;
                  double v24 = (void *)*((void *)v8 + 2);
                  if (!v24) {
                    goto LABEL_34;
                  }
                  goto LABEL_33;
                }
                v10 += 6;
              }
              else
              {
                v10 += 4;
              }
            }
            int v26 = 0;
            int v27 = 0;
            uint64_t v28 = 0;
            *double v7 = 0;
            unint64_t v19 = v10;
            goto LABEL_38;
          }
LABEL_32:
          uint64_t v3 = 0;
          *double v7 = 0;
          double v24 = (void *)*((void *)v7 + 2);
          if (!v24)
          {
LABEL_34:
            free(v8);
            return v3;
          }
LABEL_33:
          free(v24);
          goto LABEL_34;
        }
      }
      else
      {
        *double v7 = 0;
        double v16 = &v137;
      }
      *double v16 = 0;
      if (!*v7) {
        goto LABEL_32;
      }
    }
    if (v9 > a2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  return v3;
}

void **mc_scene_decode(uint64_t a1, unint64_t a2)
{
  double v2 = _mc_container_create_read("MCP4", a1, a2, 1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (uint64_t)v2;
  unint64_t v4 = *((void *)v2 + 2);
  if (!v4)
  {
    unsigned int v14 = 0;
    int v15 = 1;
    goto LABEL_20;
  }
  size_t v5 = 0;
  size_t v6 = 0;
  size_t v7 = 0;
  double v8 = (unsigned __int16 *)*((void *)v2 + 1);
  uint64_t v9 = *((void *)v2 + 2);
  do
  {
    size_t v10 = v7;
    int v12 = *v8;
    v8 += 20;
    int v11 = v12;
    if (v12 == 1) {
      ++v7;
    }
    if (v11 == 7) {
      size_t v13 = v6 + 1;
    }
    else {
      size_t v13 = v6;
    }
    if (v11 == 2) {
      ++v5;
    }
    else {
      size_t v6 = v13;
    }
    --v9;
  }
  while (v9);
  if (v7 | v6)
  {
    unint64_t v19 = (void **)malloc_type_calloc(1uLL, 0x30uLL, 0x1020040FA093B57uLL);
    unsigned int v14 = v19;
    if (!*v19 && !v19[1])
    {
      int v20 = (char *)malloc_type_calloc(v7, 0xC0uLL, 0x1020040D1D670B0uLL);
      if (v7 && v20)
      {
        if (v11 == 1) {
          size_t v21 = v10 + 1;
        }
        else {
          size_t v21 = v10;
        }
        unint64_t v22 = v20 + 88;
        do
        {
          *((void *)v22 - 10) = 0x3FF0000000000000;
          *(_OWORD *)(v22 - 72) = 0uLL;
          *(_OWORD *)(v22 - 56) = 0uLL;
          *((void *)v22 - 5) = 0x3FF0000000000000;
          *((_OWORD *)v22 - 2) = 0uLL;
          *((_OWORD *)v22 - 1) = 0uLL;
          *(void *)unint64_t v22 = 0x3FF0000000000000;
          *(_OWORD *)(v22 + 8) = 0uLL;
          *(_OWORD *)(v22 + 24) = 0uLL;
          *((void *)v22 + 5) = 0x3FF0000000000000;
          v22 += 192;
          --v21;
        }
        while (v21);
        *unsigned int v14 = v20;
        goto LABEL_35;
      }
      *unsigned int v14 = v20;
      if (v20) {
LABEL_35:
      }
        v14[1] = (void *)v7;
    }
    if (!v14[4] && !v14[5])
    {
      double v23 = malloc_type_calloc(v5, 0x18uLL, 0x10200406E52F545uLL);
      v14[4] = v23;
      if (v23) {
        v14[5] = (void *)v5;
      }
    }
    if (v14[2] || v14[3]) {
      goto LABEL_49;
    }
    double v24 = (char *)malloc_type_calloc(v6, 0xC0uLL, 0x1020040D1D670B0uLL);
    if (v6 && v24)
    {
      double v25 = v24 + 88;
      size_t v26 = v6;
      do
      {
        *((void *)v25 - 10) = 0x3FF0000000000000;
        *(_OWORD *)(v25 - 72) = 0uLL;
        *(_OWORD *)(v25 - 56) = 0uLL;
        *((void *)v25 - 5) = 0x3FF0000000000000;
        *((_OWORD *)v25 - 2) = 0uLL;
        *((_OWORD *)v25 - 1) = 0uLL;
        *(void *)double v25 = 0x3FF0000000000000;
        *(_OWORD *)(v25 + 8) = 0uLL;
        *(_OWORD *)(v25 + 24) = 0uLL;
        *((void *)v25 + 5) = 0x3FF0000000000000;
        v25 += 192;
        --v26;
      }
      while (v26);
      v14[2] = v24;
    }
    else
    {
      v14[2] = v24;
      if (!v24)
      {
LABEL_49:
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v94 = 0;
        unint64_t v30 = 0;
        int v15 = 1;
        unint64_t v91 = v4;
        unint64_t v92 = v14;
        while (1)
        {
          if (*(void *)(v3 + 16) <= v30)
          {
            int v15 = 0;
LABEL_110:
            uint64_t v68 = 0;
            unint64_t v69 = 0;
            if (v4 <= 1) {
              unint64_t v4 = 1;
            }
            while (2)
            {
              unint64_t v70 = *(void *)(v3 + 16);
              if (v70 <= v69)
              {
                int v15 = 0;
                if (v70) {
                  goto LABEL_16;
                }
                goto LABEL_20;
              }
              uint64_t v71 = *(void *)(v3 + 8);
              int v72 = *(unsigned __int16 *)(v71 + v68);
              if ((v72 - 5) < 0xFFFFFFFE) {
                goto LABEL_114;
              }
              unint64_t v73 = *(unsigned int *)(v71 + v68 + 4);
              if ((unint64_t)v14[5] <= v73) {
                goto LABEL_114;
              }
              int v74 = v14[4];
              int v75 = &v74[6 * v73];
              uint64_t v77 = *((void *)v75 + 2);
              uint64_t v76 = (void ***)(v75 + 4);
              if (!v77)
              {
                unsigned int v14 = v92;
                goto LABEL_114;
              }
              if (v72 == 4)
              {
                chapter_data = mc_container_get_chapter_data(v3, v69, 0);
                if (!chapter_data)
                {
LABEL_141:
                  int v15 = 0;
                  unsigned int v14 = v92;
                  if (*(void *)(v3 + 16)) {
                    goto LABEL_16;
                  }
                  goto LABEL_20;
                }
                int v79 = chapter_data;
                if (*v76)
                {
                  int v15 = mc_material_attach_alpha_data((uint64_t)&v74[6 * v73], *((const void **)chapter_data + 1), *((void *)chapter_data + 3), *((_DWORD *)*v76 + 4));
                  goto LABEL_132;
                }
              }
              else
              {
                if (v72 != 3) {
                  goto LABEL_135;
                }
                unint64_t v78 = mc_container_get_chapter_data(v3, v69, 0);
                if (!v78) {
                  goto LABEL_141;
                }
                int v79 = v78;
                uint64_t v80 = *v76;
                if (*v76)
                {
                  size_t v81 = v78[3];
                  if (!HIDWORD(v81))
                  {
                    if (v74[6 * v73 + 2])
                    {
                      int v82 = (const void *)v78[1];
                      int v83 = *(_DWORD *)v80;
                      free(v80[1]);
                      uint64_t v84 = *v76;
                      v84[1] = 0;
                      *((_DWORD *)v84 + 1) = 0;
                      if (v83)
                      {
                        uint64_t v85 = malloc_type_malloc(v81, 0x505EE921uLL);
                        if (v85)
                        {
                          uint64_t v86 = v85;
                          memcpy(v85, v82, v81);
                          uint64_t v87 = *v76;
                          v87[1] = v86;
                          *(_DWORD *)uint64_t v87 = v83;
                          *((_DWORD *)v87 + 1) = v81;
                          int v15 = 1;
                        }
                        else
                        {
                          int v15 = 0;
                          (*v76)[1] = 0;
                        }
                      }
                      else
                      {
                        int v15 = 1;
                      }
LABEL_132:
                      int v89 = (void *)v79[2];
                      if (v89) {
                        free(v89);
                      }
                      free(v79);
LABEL_135:
                      unsigned int v14 = v92;
                      if (!v15) {
                        goto LABEL_15;
                      }
LABEL_114:
                      ++v69;
                      v68 += 40;
                      if (v4 == v69) {
                        goto LABEL_15;
                      }
                      continue;
                    }
                  }
                }
              }
              break;
            }
            int v15 = 0;
            goto LABEL_132;
          }
          int v31 = *(unsigned __int16 *)(*(void *)(v3 + 8) + v27);
          if (v31 == 7)
          {
            uint64_t v36 = v14[2];
            int v37 = mc_container_get_chapter_data(v3, v30, 0);
            if (v37)
            {
              unsigned int v38 = v37;
              int v15 = mc_mesh_decode(v37[1], v37[3], (uint64_t)v36 + 192 * v29);
              double v39 = (void *)v38[2];
              if (v39) {
                free(v39);
              }
              free(v38);
              ++v29;
            }
            else
            {
              int v15 = 0;
              ++v29;
            }
LABEL_52:
            if (!v15) {
              goto LABEL_15;
            }
            goto LABEL_53;
          }
          if (v31 == 2) {
            break;
          }
          if (v31 == 1)
          {
            int v32 = *v14;
            unint64_t v33 = mc_container_get_chapter_data(v3, v30, 0);
            if (v33)
            {
              unint64_t v34 = v33;
              int v15 = mc_mesh_decode(v33[1], v33[3], (uint64_t)v32 + 192 * v94);
              BOOL v35 = (void *)v34[2];
              if (v35) {
                free(v35);
              }
              free(v34);
            }
            else
            {
              int v15 = 0;
            }
            ++v94;
            goto LABEL_52;
          }
LABEL_53:
          ++v30;
          v27 += 40;
          if (v4 == v30) {
            goto LABEL_110;
          }
        }
        uint64_t v40 = v29;
        int v41 = v14[4];
        unint64_t v42 = mc_container_get_chapter_data(v3, v30, 0);
        if (!v42)
        {
          int v15 = 0;
          uint64_t v29 = v40;
LABEL_51:
          ++v28;
          goto LABEL_52;
        }
        int v43 = v42;
        uint64_t v93 = v28;
        unint64_t v44 = &v41[6 * v28];
        uint64_t v45 = v42[1];
        unint64_t v46 = v42[3];
        unint64_t v47 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
        unsigned int v48 = v47;
        *unint64_t v47 = 1;
        *((void *)v47 + 1) = v45;
        *((void *)v47 + 3) = v46;
        if (!v46 || (*unint64_t v47 = v45 != 0, v45))
        {
          uint64_t v49 = *((void *)v47 + 4);
          uint64_t v50 = v49 + 8;
          if (v49 + 8 <= v46)
          {
            uint64_t v51 = *(void *)(v45 + v49);
            *((void *)v47 + 4) = v50;
            *unint64_t v44 = v51;
            uint64_t v52 = v49 + 9;
            if (v49 + 9 <= v46)
            {
              int v55 = *(unsigned __int8 *)(v45 + v50);
              *((void *)v47 + 4) = v52;
              unsigned int v14 = v92;
              int v56 = &v41[6 * v93];
              v56[2] = v55;
              uint64_t v57 = v56 + 2;
              if (v55)
              {
                unint64_t v58 = v49 + 10;
                if (v58 <= v46)
                {
                  int v90 = v57;
                  int v59 = *(unsigned __int8 *)(v45 + v52);
                  *((void *)v47 + 4) = v58;
                  int v60 = &v41[6 * v93];
                  unint64_t v63 = (void **)*((void *)v60 + 2);
                  double v62 = (void **)(v60 + 4);
                  unsigned int v61 = v63;
                  if (v63
                    || (unsigned int v61 = (void **)malloc_type_calloc(1uLL, 0x20uLL, 0x10800403AF1B36BuLL), (*v62 = v61) != 0)
                    && *v90)
                  {
                    free(v61[1]);
                    unsigned int v61 = (void **)*v62;
                    v61[1] = 0;
                    *((_DWORD *)v61 + 1) = 0;
                    if (v59)
                    {
                      double v64 = malloc_type_malloc(0, 0x505EE921uLL);
                      unsigned int v61 = (void **)*v62;
                      if (v64)
                      {
                        v61[1] = v64;
                        *(_DWORD *)unsigned int v61 = v59;
                        *((_DWORD *)v61 + 1) = 0;
                      }
                      else
                      {
                        v61[1] = 0;
                      }
                    }
                  }
                  unint64_t v4 = v91;
                  uint64_t v29 = v40;
                  if (!*(_DWORD *)v48)
                  {
                    int v15 = 0;
                    goto LABEL_80;
                  }
                  uint64_t v65 = v48[4];
                  if ((unint64_t)(v65 + 1) > v48[3])
                  {
                    int v15 = 0;
                    *(_DWORD *)unsigned int v48 = 0;
                    goto LABEL_80;
                  }
                  int v66 = *(unsigned __int8 *)(v48[1] + v65);
                  v48[4] = v65 + 1;
                  if (!v61)
                  {
                    unsigned int v61 = (void **)malloc_type_calloc(1uLL, 0x20uLL, 0x10800403AF1B36BuLL);
                    *double v62 = v61;
                  }
                  if (*v90)
                  {
                    free(v61[1]);
                    unsigned int v61 = (void **)*v62;
                    v61[1] = 0;
                    *((_DWORD *)v61 + 1) = 0;
                    if (v66)
                    {
                      int v67 = malloc_type_malloc(0, 0x505EE921uLL);
                      unsigned int v61 = (void **)*v62;
                      if (v67)
                      {
                        v61[1] = v67;
                        *(_DWORD *)unsigned int v61 = v66;
                        *((_DWORD *)v61 + 1) = 0;
                      }
                      else
                      {
                        v61[1] = 0;
                      }
                    }
                  }
                  *((_DWORD *)v61 + 4) = v66;
                  int v15 = *(_DWORD *)v48;
LABEL_79:
                  uint64_t v29 = v40;
LABEL_80:
                  uint64_t v53 = (void *)v48[2];
                  if (v53) {
                    free(v53);
                  }
                  free(v48);
                  uint64_t v54 = (void *)v43[2];
                  if (v54) {
                    free(v54);
                  }
                  free(v43);
                  uint64_t v28 = v93;
                  goto LABEL_51;
                }
                int v15 = 0;
                *unint64_t v47 = 0;
              }
              else
              {
                int v15 = 1;
              }
LABEL_78:
              unint64_t v4 = v91;
              goto LABEL_79;
            }
            int v15 = 0;
            *unint64_t v47 = 0;
LABEL_77:
            unsigned int v14 = v92;
            v41[6 * v93 + 2] = 0;
            goto LABEL_78;
          }
          *unint64_t v47 = 0;
        }
        int v15 = 0;
        *unint64_t v44 = 0;
        goto LABEL_77;
      }
    }
    v14[3] = (void *)v6;
    goto LABEL_49;
  }
  unsigned int v14 = 0;
  int v15 = 1;
LABEL_15:
  if (*(void *)(v3 + 16))
  {
LABEL_16:
    unint64_t v16 = 0;
    uint64_t v17 = 24;
    do
    {
      free(*(void **)(*(void *)(v3 + 8) + v17));
      ++v16;
      v17 += 40;
    }
    while (*(void *)(v3 + 16) > v16);
  }
LABEL_20:
  free(*(void **)(v3 + 8));
  free((void *)v3);
  if (!v15)
  {
    mc_scene_free(v14);
    return 0;
  }
  return v14;
}

double mc_read_mat4(uint64_t a1, double *a2)
{
  if (!*(_DWORD *)a1) {
    goto LABEL_4;
  }
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = v2 + 8;
  if (v2 + 8 > v3)
  {
    *(_DWORD *)a1 = 0;
LABEL_4:
    *a2 = 0.0;
    a2[1] = 0.0;
LABEL_5:
    a2[2] = 0.0;
    a2[3] = 0.0;
LABEL_6:
    a2[4] = 0.0;
    a2[5] = 0.0;
LABEL_7:
    a2[6] = 0.0;
    a2[7] = 0.0;
LABEL_8:
    a2[8] = 0.0;
    a2[9] = 0.0;
    a2[10] = 0.0;
    a2[11] = 0.0;
    a2[12] = 0.0;
    a2[13] = 0.0;
    a2[14] = 0.0;
    double result = 0.0;
    a2[15] = 0.0;
    return result;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + v2);
  *(void *)(a1 + 32) = v4;
  *(void *)a2 = v7;
  uint64_t v8 = v2 + 16;
  if (v2 + 16 > v3)
  {
    *(_DWORD *)a1 = 0;
    a2[1] = 0.0;
    a2[2] = 0.0;
LABEL_15:
    a2[3] = 0.0;
    a2[4] = 0.0;
LABEL_16:
    a2[5] = 0.0;
    a2[6] = 0.0;
LABEL_17:
    a2[7] = 0.0;
    a2[8] = 0.0;
    a2[9] = 0.0;
    a2[10] = 0.0;
    a2[11] = 0.0;
    a2[12] = 0.0;
    a2[13] = 0.0;
    a2[14] = 0.0;
    double result = 0.0;
    a2[15] = 0.0;
    return result;
  }
  uint64_t v9 = *(void *)(v6 + v4);
  *(void *)(a1 + 32) = v8;
  *((void *)a2 + 1) = v9;
  uint64_t v10 = v2 + 24;
  if (v2 + 24 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v6 + v8);
  *(void *)(a1 + 32) = v10;
  *((void *)a2 + 2) = v11;
  uint64_t v12 = v2 + 32;
  if (v2 + 32 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(v6 + v10);
  *(void *)(a1 + 32) = v12;
  *((void *)a2 + 3) = v13;
  uint64_t v14 = v2 + 40;
  if (v2 + 40 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(v6 + v12);
  *(void *)(a1 + 32) = v14;
  *((void *)a2 + 4) = v15;
  uint64_t v16 = v2 + 48;
  if (v2 + 48 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_16;
  }
  uint64_t v17 = *(void *)(v6 + v14);
  *(void *)(a1 + 32) = v16;
  *((void *)a2 + 5) = v17;
  uint64_t v18 = v2 + 56;
  if (v2 + 56 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_7;
  }
  uint64_t v19 = *(void *)(v6 + v16);
  *(void *)(a1 + 32) = v18;
  *((void *)a2 + 6) = v19;
  uint64_t v20 = v2 + 64;
  if (v2 + 64 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_17;
  }
  uint64_t v21 = *(void *)(v6 + v18);
  *(void *)(a1 + 32) = v20;
  *((void *)a2 + 7) = v21;
  uint64_t v22 = v2 + 72;
  if (v2 + 72 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_8;
  }
  uint64_t v23 = *(void *)(v6 + v20);
  *(void *)(a1 + 32) = v22;
  *((void *)a2 + 8) = v23;
  uint64_t v24 = v2 + 80;
  if (v2 + 80 <= v3)
  {
    uint64_t v25 = *(void *)(v6 + v22);
    *(void *)(a1 + 32) = v24;
    *((void *)a2 + 9) = v25;
    uint64_t v26 = v2 + 88;
    if (v2 + 88 <= v3)
    {
      uint64_t v27 = *(void *)(v6 + v24);
      *(void *)(a1 + 32) = v26;
      *((void *)a2 + 10) = v27;
      uint64_t v28 = v2 + 96;
      if (v2 + 96 <= v3)
      {
        uint64_t v29 = *(void *)(v6 + v26);
        *(void *)(a1 + 32) = v28;
        *((void *)a2 + 11) = v29;
        uint64_t v30 = v2 + 104;
        if (v2 + 104 <= v3)
        {
          uint64_t v31 = *(void *)(v6 + v28);
          *(void *)(a1 + 32) = v30;
          *((void *)a2 + 12) = v31;
          uint64_t v32 = v2 + 112;
          if (v2 + 112 <= v3)
          {
            uint64_t v33 = *(void *)(v6 + v30);
            *(void *)(a1 + 32) = v32;
            *((void *)a2 + 13) = v33;
            uint64_t v34 = v2 + 120;
            if (v2 + 120 <= v3)
            {
              uint64_t v35 = *(void *)(v6 + v32);
              *(void *)(a1 + 32) = v34;
              *((void *)a2 + 14) = v35;
              unint64_t v36 = v2 + 128;
              if (v36 <= v3)
              {
                double result = *(double *)(v6 + v34);
                *(void *)(a1 + 32) = v36;
                a2[15] = result;
              }
              else
              {
                *(_DWORD *)a1 = 0;
                double result = 0.0;
                a2[15] = 0.0;
              }
            }
            else
            {
              *(_DWORD *)a1 = 0;
              a2[14] = 0.0;
              double result = 0.0;
              a2[15] = 0.0;
            }
          }
          else
          {
            *(_DWORD *)a1 = 0;
            a2[13] = 0.0;
            a2[14] = 0.0;
            double result = 0.0;
            a2[15] = 0.0;
          }
        }
        else
        {
          *(_DWORD *)a1 = 0;
          a2[12] = 0.0;
          a2[13] = 0.0;
          a2[14] = 0.0;
          double result = 0.0;
          a2[15] = 0.0;
        }
      }
      else
      {
        *(_DWORD *)a1 = 0;
        a2[11] = 0.0;
        a2[12] = 0.0;
        a2[13] = 0.0;
        a2[14] = 0.0;
        double result = 0.0;
        a2[15] = 0.0;
      }
    }
    else
    {
      *(_DWORD *)a1 = 0;
      a2[10] = 0.0;
      a2[11] = 0.0;
      a2[12] = 0.0;
      a2[13] = 0.0;
      a2[14] = 0.0;
      double result = 0.0;
      a2[15] = 0.0;
    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
    a2[9] = 0.0;
    a2[10] = 0.0;
    a2[11] = 0.0;
    a2[12] = 0.0;
    a2[13] = 0.0;
    a2[14] = 0.0;
    double result = 0.0;
    a2[15] = 0.0;
  }
  return result;
}

void mc_read_tiny_big(uint64_t a1, int a2, _DWORD *a3)
{
  size_t v6 = a2;
  uint64_t v7 = (int8x16_t *)malloc_type_malloc(a2, 0x100004077774924uLL);
  uint64_t v8 = v7;
  if (!*(_DWORD *)a1) {
    goto LABEL_10;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = v10 + 4;
  if (v10 + 4 > v9
    || (uint64_t v12 = *(void *)(a1 + 8), v13 = *(_DWORD *)(v12 + v10), *(void *)(a1 + 32) = v11, v11 + v6 > v9))
  {
    uint64_t v14 = 0;
LABEL_5:
    *(_DWORD *)a1 = 0;
    goto LABEL_11;
  }
  memcpy(v7, (const void *)(v12 + v11), v6);
  *(void *)(a1 + 32) += v6;
  if (!*(_DWORD *)a1)
  {
LABEL_10:
    uint64_t v14 = 0;
    goto LABEL_11;
  }
  if (a2 < 1)
  {
    size_t v17 = 0;
    goto LABEL_29;
  }
  if (a2 < 8)
  {
    uint64_t v15 = 0;
    unsigned int v16 = 0;
    goto LABEL_24;
  }
  if (a2 >= 0x20)
  {
    int32x4_t v18 = 0uLL;
    uint64_t v15 = a2 & 0xFFFFFFE0;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    uint64_t v20 = v8 + 1;
    v21.i64[0] = 0x100000001;
    v21.i64[1] = 0x100000001;
    uint64_t v22 = v15;
    int32x4_t v23 = 0uLL;
    int32x4_t v24 = 0uLL;
    int32x4_t v25 = 0uLL;
    int32x4_t v26 = 0uLL;
    int32x4_t v27 = 0uLL;
    int32x4_t v28 = 0uLL;
    int32x4_t v29 = 0uLL;
    do
    {
      uint8x16_t v30 = (uint8x16_t)vceqq_s8(v20[-1], v19);
      uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)v30.i8);
      uint16x8_t v32 = vmovl_high_u8(v30);
      uint8x16_t v33 = (uint8x16_t)vceqq_s8(*v20, v19);
      uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)v33.i8);
      uint16x8_t v35 = vmovl_high_u8(v33);
      int32x4_t v25 = vaddq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v32), v21));
      int32x4_t v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v32.i8), v21));
      int32x4_t v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v21));
      int32x4_t v18 = vaddq_s32(v18, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v21));
      int32x4_t v29 = vaddq_s32(v29, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v35), v21));
      int32x4_t v28 = vaddq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v35.i8), v21));
      int32x4_t v27 = vaddq_s32(v27, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v34), v21));
      int32x4_t v26 = vaddq_s32(v26, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v34.i8), v21));
      v20 += 2;
      v22 -= 32;
    }
    while (v22);
    unsigned int v16 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v26, v18), vaddq_s32(v28, v24)), vaddq_s32(vaddq_s32(v27, v23), vaddq_s32(v29, v25))));
    if (v15 == a2) {
      goto LABEL_28;
    }
    if ((a2 & 0x18) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    unsigned int v16 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v36 = v15;
  uint64_t v15 = a2 & 0xFFFFFFF8;
  int32x4_t v37 = 0uLL;
  int32x4_t v38 = (int32x4_t)v16;
  double v39 = (int8x8_t *)&v8->i8[v36];
  uint64_t v40 = v36 - v15;
  v41.i64[0] = 0x100000001;
  v41.i64[1] = 0x100000001;
  do
  {
    int8x8_t v42 = *v39++;
    uint16x8_t v43 = vmovl_u8((uint8x8_t)vceq_s8(v42, (int8x8_t)-1));
    int32x4_t v37 = vaddq_s32(v37, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v43), v41));
    int32x4_t v38 = vaddq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v43.i8), v41));
    v40 += 8;
  }
  while (v40);
  unsigned int v16 = vaddvq_s32(vaddq_s32(v38, v37));
  if (v15 != a2)
  {
LABEL_24:
    uint64_t v44 = a2 - v15;
    uint64_t v45 = &v8->u8[v15];
    do
    {
      int v46 = *v45++;
      if (v46 == 255) {
        ++v16;
      }
      --v44;
    }
    while (v44);
  }
LABEL_28:
  size_t v17 = 4 * v16;
LABEL_29:
  unint64_t v47 = malloc_type_malloc(v17, 0x100004052888210uLL);
  uint64_t v14 = v47;
  if (*(_DWORD *)a1)
  {
    uint64_t v48 = *(void *)(a1 + 32);
    if (v48 + v17 > *(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    memcpy(v47, (const void *)(*(void *)(a1 + 8) + v48), v17);
    *(void *)(a1 + 32) += v17;
    if (a2 >= 1 && *(_DWORD *)a1)
    {
      int v49 = 0;
      uint64_t v50 = a2;
      uint64_t v51 = v8;
      do
      {
        while (1)
        {
          int v54 = v51->u8[0];
          uint64_t v51 = (int8x16_t *)((char *)v51 + 1);
          int v53 = v54;
          if (v54 != 255) {
            break;
          }
          int v52 = v14[v49++];
          *a3++ = v52;
          if (!--v50) {
            goto LABEL_11;
          }
        }
        *a3++ = v53 - v13;
        --v50;
      }
      while (v50);
    }
  }
LABEL_11:
  free(v8);
  free(v14);
}

char *_mc_container_create_read(const char *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8 = (char *)malloc_type_calloc(1uLL, 0x28uLL, 0x10E004059713692uLL);
  unint64_t v9 = v8;
  if (a1) {
    strncpy(v8, a1, 4uLL);
  }
  uint64_t v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
  uint64_t v11 = v10;
  *(_DWORD *)uint64_t v10 = 1;
  v10[1] = a2;
  v10[3] = a3;
  if (a3)
  {
    *(_DWORD *)uint64_t v10 = a2 != 0;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = v10[4];
  uint64_t v13 = v12 + 4;
  if (v12 + 4 > a3
    || (v72 = *(_DWORD *)(a2 + v12), v10[4] = v13, uint64_t v14 = v12 + 6, v12 + 6 > a3)
    || (int v20 = *(unsigned __int16 *)(a2 + v13), v10[4] = v14, v72 != *(_DWORD *)v9)
    || v20)
  {
LABEL_7:
    *(_DWORD *)uint64_t v10 = 0;
    BOOL v15 = 1;
    unsigned int v16 = (void *)v10[2];
    if (!v16) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v21 = v12 + 8;
  if (v21 <= a3)
  {
    unsigned int v22 = *(unsigned __int16 *)(a2 + v14);
    v10[4] = v21;
  }
  else
  {
    unsigned int v22 = 0;
    *(_DWORD *)uint64_t v10 = 0;
  }
  uint64_t v23 = v22;
  int32x4_t v24 = (char *)malloc_type_calloc(v22, 0x28uLL, 0x10C00403928CA3CuLL);
  *((void *)v9 + 1) = v24;
  *((void *)v9 + 2) = v22;
  if (v22)
  {
    if (a4)
    {
      int v25 = *(_DWORD *)v11;
      int32x4_t v26 = v24 + 16;
      uint64_t v27 = v22;
      while (v25)
      {
        unint64_t v29 = v11[3];
        uint64_t v28 = v11[4];
        uint64_t v30 = v28 + 2;
        if (v28 + 2 > v29) {
          break;
        }
        uint64_t v31 = v11[1];
        __int16 v32 = *(_WORD *)(v31 + v28);
        v11[4] = v30;
        uint64_t v33 = v28 + 6;
        if (v28 + 6 > v29) {
          break;
        }
        uint64_t v34 = *(unsigned int *)(v31 + v30);
        v11[4] = v33;
        unint64_t v35 = v28 + 10;
        if (v35 > v11[3]) {
          break;
        }
        int v36 = *(_DWORD *)(v11[1] + v33);
        v11[4] = v35;
        if (!v36) {
          break;
        }
        *((_WORD *)v26 - 8) = v32;
        *((_DWORD *)v26 + 4) = v36;
        *(void *)int32x4_t v26 = v11[1] + v34;
        *((void *)v26 + 1) = 0;
        *((_DWORD *)v26 - 3) = -404232217;
        *((_WORD *)v26 - 4) = 0;
        v26 += 40;
        if (!--v27) {
          goto LABEL_46;
        }
      }
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v71 = 40 * v22;
      while (*(_DWORD *)v11)
      {
        unint64_t v39 = v11[3];
        uint64_t v38 = v11[4];
        uint64_t v40 = v38 + 2;
        if (v38 + 2 > v39) {
          break;
        }
        uint64_t v41 = *((void *)v9 + 1);
        uint64_t v42 = v11[1];
        __int16 v43 = *(_WORD *)(v42 + v38);
        v11[4] = v40;
        uint64_t v44 = v38 + 6;
        if (v38 + 6 > v39) {
          break;
        }
        uint64_t v45 = *(unsigned int *)(v42 + v40);
        v11[4] = v44;
        unint64_t v46 = v38 + 10;
        if (v46 > v11[3]) {
          break;
        }
        size_t v47 = *(unsigned int *)(v11[1] + v44);
        v11[4] = v46;
        if (!v47) {
          break;
        }
        uint64_t v48 = (int64x2_t *)(v41 + v37);
        v48->i16[0] = v43;
        v48[2].i32[0] = v47;
        uint64_t v49 = v11[1];
        uint64_t v50 = malloc_type_malloc(v47, 0x505EE921uLL);
        unint64_t v51 = (unint64_t)v50;
        if (v50) {
          memcpy(v50, (const void *)(v49 + v45), v47);
        }
        v48[1] = vdupq_n_s64(v51);
        v48->i32[1] = -404232217;
        v48->i16[4] = 0;
        v37 += 40;
        if (v71 == v37)
        {
          uint64_t v23 = *((void *)v9 + 2);
LABEL_46:
          if (v23)
          {
            unint64_t v53 = 0;
            int v54 = (unsigned __int16 *)*((void *)v9 + 1);
            while (1)
            {
              int v55 = *v54;
              v54 += 20;
              if (!v55) {
                break;
              }
              if (v23 == ++v53) {
                goto LABEL_68;
              }
            }
            chapter_data = (int *)mc_container_get_chapter_data((uint64_t)v9, v53, 0);
            if (chapter_data)
            {
              uint64_t v57 = chapter_data;
              int v58 = *chapter_data;
              if (*chapter_data)
              {
                unint64_t v59 = *((void *)chapter_data + 4) + 2;
                if (v59 <= *((void *)chapter_data + 3))
                {
                  *((void *)chapter_data + 4) = v59;
                }
                else
                {
                  int v58 = 0;
                  int *chapter_data = 0;
                }
              }
              unint64_t v60 = *((void *)v9 + 2);
              if (v60)
              {
                uint64_t v61 = 0;
                for (unint64_t i = 0; i < v60; ++i)
                {
                  if (v53 != i)
                  {
                    if (!v58) {
                      break;
                    }
                    uint64_t v63 = *((void *)chapter_data + 4);
                    uint64_t v64 = v63 + 4;
                    if ((unint64_t)(v63 + 4) > *((void *)chapter_data + 3)
                      || (uint64_t v65 = *((void *)v9 + 1),
                          int v66 = *(_DWORD *)(*((void *)chapter_data + 1) + v63),
                          *((void *)chapter_data + 4) = v64,
                          unint64_t v67 = v63 + 6,
                          v67 > *((void *)chapter_data + 3)))
                    {
                      int *chapter_data = 0;
                      break;
                    }
                    __int16 v68 = *(_WORD *)(*((void *)chapter_data + 1) + v64);
                    *((void *)chapter_data + 4) = v67;
                    uint64_t v69 = v65 + v61;
                    *(_DWORD *)(v69 + 4) = v66;
                    *(_WORD *)(v69 + 8) = v68;
                  }
                  v61 += 40;
                }
              }
              unint64_t v70 = (void *)*((void *)chapter_data + 2);
              if (v70) {
                free(v70);
              }
              free(v57);
            }
          }
          goto LABEL_68;
        }
      }
    }
    *(_DWORD *)uint64_t v11 = 0;
    int v52 = (void *)v11[2];
    if (v52) {
      free(v52);
    }
    free(v11);
    if (!*((void *)v9 + 2)) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
LABEL_68:
  BOOL v15 = *(_DWORD *)v11 == 0;
  unsigned int v16 = (void *)v11[2];
  if (v16) {
LABEL_8:
  }
    free(v16);
LABEL_9:
  free(v11);
  if (!v15)
  {
    *((void *)v9 + 3) = a2;
    *((void *)v9 + 4) = a3;
    return v9;
  }
  if (v9)
  {
    if (!*((void *)v9 + 2))
    {
LABEL_14:
      free(*((void **)v9 + 1));
      free(v9);
      return 0;
    }
LABEL_12:
    unint64_t v17 = 0;
    uint64_t v18 = 24;
    do
    {
      free(*(void **)(*((void *)v9 + 1) + v18));
      ++v17;
      v18 += 40;
    }
    while (*((void *)v9 + 2) > v17);
    goto LABEL_14;
  }
  return v9;
}

char *mc_container_create_read_no_copy(const char *a1, uint64_t a2, unint64_t a3)
{
  return _mc_container_create_read(a1, a2, a3, 1);
}

void mc_container_free(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t v2 = 0;
      uint64_t v3 = 24;
      do
      {
        free(*(void **)(*(void *)(a1 + 8) + v3));
        ++v2;
        v3 += 40;
      }
      while (*(void *)(a1 + 16) > v2);
    }
    free(*(void **)(a1 + 8));
    free((void *)a1);
  }
}

uint64_t mc_container_chapter_count(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t mc_container_get_chapter_info(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) <= a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8) + 40 * a2;
  uint64_t v4 = *(void *)v3;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
  *(void *)a3 = v4;
  return 1;
}

void *mc_container_get_chapter_data(uint64_t a1, unint64_t a2, void *a3)
{
  if (*(void *)(a1 + 16) <= a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v6 = a3;
  if (!a3)
  {
    size_t v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
    *(_DWORD *)size_t v6 = 1;
  }
  uint64_t v7 = v5 + 40 * a2;
  unsigned int v10 = *(_DWORD *)(v7 + 32);
  uint64_t v8 = (unsigned int *)(v7 + 32);
  unint64_t v9 = v10;
  uint64_t v11 = *((void *)v8 - 2);
  uint64_t v12 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
  uint64_t v13 = v12;
  *(_DWORD *)uint64_t v12 = 1;
  v12[1] = v11;
  v12[3] = v10;
  if (v10)
  {
    *(_DWORD *)uint64_t v12 = v11 != 0;
    if (!v11) {
      goto LABEL_8;
    }
  }
  uint64_t v14 = v12[4];
  uint64_t v15 = v14 + 1;
  if (v14 + 1 > v9)
  {
    *(_DWORD *)uint64_t v12 = 0;
LABEL_8:
    uint64_t v16 = *v8;
LABEL_9:
    size_t v17 = v16 - 1;
    if (!*(_DWORD *)v6) {
      goto LABEL_29;
    }
    *((void *)v6 + 4) = 0;
    size_t v18 = *((void *)v6 + 3);
    if (v18 >= v17) {
      goto LABEL_29;
    }
    size_t v19 = v18 + (v18 >> 1);
    if (v19 <= v17) {
      size_t v19 = v16 - 1;
    }
    size_t v20 = v19 + 1023;
    unint64_t v21 = v20 & 0xFFFFFFFFFFFFFC00;
    unsigned int v22 = (void *)*((void *)v6 + 2);
    if (v22)
    {
      uint64_t v23 = malloc_type_realloc(v22, v20 & 0xFFFFFFFFFFFFFC00, 0xD2411D13uLL);
      if (v23)
      {
LABEL_15:
        *((void *)v6 + 1) = v23;
        *((void *)v6 + 2) = v23;
        *((void *)v6 + 3) = v21;
LABEL_29:
        memcpy(*((void **)v6 + 2), (const void *)(v13[1] + v13[4]), v17);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v23 = malloc_type_malloc(v20 & 0xFFFFFFFFFFFFFC00, 0x79F51818uLL);
      if (v23) {
        goto LABEL_15;
      }
    }
    *(_DWORD *)size_t v6 = 0;
    goto LABEL_29;
  }
  int v24 = *(unsigned __int8 *)(v11 + v14);
  v12[4] = v15;
  uint64_t v16 = *v8;
  if (!v24) {
    goto LABEL_9;
  }
  uLong v25 = v16 - 5;
  unint64_t v26 = v14 + 5;
  if (v26 <= v9)
  {
    size_t v17 = *(unsigned int *)(v11 + v15);
    v12[4] = v26;
    if (v25 > v17) {
      goto LABEL_52;
    }
  }
  else
  {
    size_t v17 = 0;
    *(_DWORD *)uint64_t v12 = 0;
    if (v16 != 5)
    {
LABEL_52:
      __int16 v43 = (void *)v13[2];
      if (v43) {
        free(v43);
      }
      free(v13);
      if (v6 != a3)
      {
        uint64_t v34 = 0;
        uint64_t v33 = (void *)*((void *)v6 + 2);
        uint64_t v13 = v6;
        size_t v6 = 0;
        if (!v33) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      return 0;
    }
  }
  if (*(_DWORD *)v6)
  {
    *((void *)v6 + 4) = 0;
    size_t v27 = *((void *)v6 + 3);
    if (v27 < v17)
    {
      size_t v28 = v27 + (v27 >> 1);
      if (v28 <= v17) {
        size_t v28 = v17;
      }
      size_t v29 = v28 + 1023;
      unint64_t v30 = v29 & 0xFFFFFFFFFFFFFC00;
      uint64_t v31 = (void *)*((void *)v6 + 2);
      if (v31) {
        __int16 v32 = malloc_type_realloc(v31, v29 & 0xFFFFFFFFFFFFFC00, 0xD2411D13uLL);
      }
      else {
        __int16 v32 = malloc_type_malloc(v29 & 0xFFFFFFFFFFFFFC00, 0x79F51818uLL);
      }
      if (v32)
      {
        *((void *)v6 + 1) = v32;
        *((void *)v6 + 2) = v32;
        *((void *)v6 + 3) = v30;
      }
      else
      {
        *(_DWORD *)size_t v6 = 0;
      }
    }
  }
  if (v24 == 3)
  {
    uint64_t v38 = (uint8_t *)*((void *)v6 + 2);
    size_t v39 = *((void *)v6 + 3);
    uint64_t v40 = (const uint8_t *)(v13[1] + v13[4]);
    size_t v41 = v25;
    compression_algorithm v42 = COMPRESSION_LZFSE;
LABEL_50:
    size_t v37 = compression_decode_buffer(v38, v39, v40, v41, 0, v42);
    goto LABEL_51;
  }
  if (v24 == 2)
  {
    uint64_t v38 = (uint8_t *)*((void *)v6 + 2);
    size_t v39 = *((void *)v6 + 3);
    uint64_t v40 = (const uint8_t *)(v13[1] + v13[4]);
    size_t v41 = v25;
    compression_algorithm v42 = COMPRESSION_LZMA;
    goto LABEL_50;
  }
  if (v24 != 1) {
    goto LABEL_52;
  }
  unint64_t v35 = (Bytef *)*((void *)v6 + 2);
  int v36 = (const Bytef *)(v13[1] + v13[4]);
  uLongf destLen = *((void *)v6 + 3);
  if (uncompress(v35, &destLen, v36, v25)) {
    size_t v37 = 0;
  }
  else {
    size_t v37 = destLen;
  }
LABEL_51:
  if (v37 != v17) {
    goto LABEL_52;
  }
LABEL_30:
  if (*(_DWORD *)v6)
  {
    if (*((void *)v6 + 3) < v17) {
      size_t v17 = *((void *)v6 + 4);
    }
    *((void *)v6 + 3) = v17;
    *((void *)v6 + 4) = 0;
    uint64_t v33 = (void *)v13[2];
    uint64_t v34 = v6;
    if (!v33) {
      goto LABEL_35;
    }
  }
  else
  {
    *((void *)v6 + 3) = *((void *)v6 + 4);
    uint64_t v33 = (void *)v13[2];
    uint64_t v34 = v6;
    if (!v33) {
      goto LABEL_35;
    }
  }
LABEL_34:
  free(v33);
  size_t v6 = v34;
LABEL_35:
  free(v13);
  return v6;
}

uint64_t mc_uv_predictor_apply_hints(uint64_t a1, int a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v8 = a2;
  long long v80 = 0u;
  if (a2 < 1)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    unsigned int v10 = (int *)a3 + 1;
    uint64_t v11 = a2;
    do
    {
      int v13 = *v10;
      v10 += 44;
      int v12 = v13;
      if (v13 >= v9) {
        int v9 = v12 + 1;
      }
      --v11;
    }
    while (v11);
  }
  uint64_t v14 = malloc_type_calloc(v9, 8uLL, 0x2004093837F09uLL);
  uint64_t v15 = malloc_type_calloc(*(unsigned int *)(a1 + 136), 1uLL, 0x100004077774924uLL);
  if (a4)
  {
    if (a2 < 1) {
      goto LABEL_18;
    }
  }
  else
  {
    a4 = *(void *)(a1 + 152);
    if (a2 < 1) {
      goto LABEL_18;
    }
  }
  if (*((_DWORD *)v5 + 1) != -1)
  {
    while (1)
    {
      uint64_t v16 = *((unsigned int *)v5 + 1);
      if ((v16 & 0x80000000) != 0 || (int)v16 >= v9) {
        goto LABEL_50;
      }
      v14[v16] = v5;
      v5 += 11;
      if (!--v8) {
        goto LABEL_18;
      }
    }
  }
  do
  {
    long long v17 = v5[9];
    long long v88 = v5[8];
    long long v89 = v17;
    long long v90 = v5[10];
    long long v18 = v5[5];
    long long v84 = v5[4];
    long long v85 = v18;
    long long v19 = v5[7];
    long long v86 = v5[6];
    long long v87 = v19;
    long long v20 = v5[1];
    long long v80 = *v5;
    long long v81 = v20;
    long long v22 = v5[2];
    long long v21 = v5[3];
    v5 += 11;
    long long v82 = v22;
    long long v83 = v21;
    --v8;
  }
  while (v8);
LABEL_18:
  if (*(_DWORD *)(a1 + 160))
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v77 = _Q0;
    do
    {
      uint64_t v32 = *(void *)(a1 + 168);
      uint64_t v33 = *(unsigned int *)(v32 + v23 + 12);
      uint64_t v34 = (double *)&v80;
      if ((v33 & 0x80000000) == 0 && (int)v33 < v9) {
        uint64_t v34 = (double *)v14[v33];
      }
      uint64_t v35 = *(int *)(v32 + v23);
      float64x2_t v78 = 0uLL;
      double v79 = 0.0;
      if (!v15[v35])
      {
        v15[v35] = 1;
        if (*(_DWORD *)v34 == 1)
        {
          uint64_t v38 = (float *)(*(void *)(a1 + 144) + 12 * (int)v35);
          double v39 = v38[1];
          double v40 = *v38;
          double v41 = v38[2];
          double v42 = *(double *)(a1 + 80) * v39
              + *(double *)(a1 + 72) * v40
              + *(double *)(a1 + 96)
              + *(double *)(a1 + 88) * v41;
          double v43 = *(double *)(a1 + 48) * v39
              + *(double *)(a1 + 40) * v40
              + *(double *)(a1 + 56) * v41
              + *(double *)(a1 + 64);
          double v44 = *(double *)(a1 + 16) * v39
              + *(double *)(a1 + 8) * v40
              + *(double *)(a1 + 24) * v41
              + *(double *)(a1 + 32);
          if (!mc_projection_project(v34 + 17, (long double *)v78.f64, v44 * v34[1] + v34[2] * v43 + v34[3] * v42 + v34[4], v34[5] * v44 + v34[6] * v43 + v34[7] * v42 + v34[8], v34[9] * v44 + v34[10] * v43 + v34[11] * v42 + v34[12]))goto LABEL_32; {
          float64x2_t v45 = vmulq_f64(v78, v77);
          }
          *(void *)&v36.f64[0] = *(_OWORD *)&vaddq_f64(v45, v77);
          v36.f64[1] = vsubq_f64(v77, v45).f64[1];
          double v37 = v79;
        }
        else
        {
          float64x2_t v36 = 0uLL;
          double v37 = 0.0;
          if (!*(_DWORD *)v34) {
            double v37 = 1.0;
          }
        }
        unint64_t v46 = (float32x2_t *)(a4 + 12 * (int)v35);
        float32x2_t *v46 = vcvt_f32_f64(v36);
        float32_t v47 = v37;
        v46[1].f32[0] = v47;
      }
LABEL_32:
      uint64_t v48 = v32 + v23;
      uint64_t v49 = *(int *)(v48 + 4);
      float64x2_t v78 = 0uLL;
      double v79 = 0.0;
      if (v15[v49]) {
        goto LABEL_39;
      }
      v15[v49] = 1;
      if (*(_DWORD *)v34 == 1)
      {
        int v52 = (float *)(*(void *)(a1 + 144) + 12 * (int)v49);
        double v53 = v52[1];
        double v54 = *v52;
        double v55 = v52[2];
        double v56 = *(double *)(a1 + 80) * v53
            + *(double *)(a1 + 72) * v54
            + *(double *)(a1 + 96)
            + *(double *)(a1 + 88) * v55;
        double v57 = *(double *)(a1 + 48) * v53
            + *(double *)(a1 + 40) * v54
            + *(double *)(a1 + 56) * v55
            + *(double *)(a1 + 64);
        double v58 = *(double *)(a1 + 16) * v53 + *(double *)(a1 + 8) * v54 + *(double *)(a1 + 24) * v55 + *(double *)(a1 + 32);
        if (!mc_projection_project(v34 + 17, (long double *)v78.f64, v58 * v34[1] + v34[2] * v57 + v34[3] * v56 + v34[4], v34[5] * v58 + v34[6] * v57 + v34[7] * v56 + v34[8], v34[9] * v58 + v34[10] * v57 + v34[11] * v56 + v34[12]))goto LABEL_39; {
        float64x2_t v59 = vmulq_f64(v78, v77);
        }
        *(void *)&v50.f64[0] = *(_OWORD *)&vaddq_f64(v59, v77);
        v50.f64[1] = vsubq_f64(v77, v59).f64[1];
        double v51 = v79;
      }
      else
      {
        float64x2_t v50 = 0uLL;
        double v51 = 0.0;
        if (!*(_DWORD *)v34) {
          double v51 = 1.0;
        }
      }
      unint64_t v60 = (float32x2_t *)(a4 + 12 * (int)v49);
      *unint64_t v60 = vcvt_f32_f64(v50);
      float32_t v61 = v51;
      v60[1].f32[0] = v61;
LABEL_39:
      uint64_t v62 = *(int *)(v48 + 8);
      float64x2_t v78 = 0uLL;
      double v79 = 0.0;
      if (!v15[v62])
      {
        v15[v62] = 1;
        if (*(_DWORD *)v34 == 1)
        {
          uint64_t v65 = (float *)(*(void *)(a1 + 144) + 12 * (int)v62);
          double v66 = v65[1];
          double v67 = *v65;
          double v68 = v65[2];
          double v69 = *(double *)(a1 + 80) * v66
              + *(double *)(a1 + 72) * v67
              + *(double *)(a1 + 96)
              + *(double *)(a1 + 88) * v68;
          double v70 = *(double *)(a1 + 48) * v66
              + *(double *)(a1 + 40) * v67
              + *(double *)(a1 + 56) * v68
              + *(double *)(a1 + 64);
          double v71 = *(double *)(a1 + 16) * v66
              + *(double *)(a1 + 8) * v67
              + *(double *)(a1 + 24) * v68
              + *(double *)(a1 + 32);
          if (!mc_projection_project(v34 + 17, (long double *)v78.f64, v71 * v34[1] + v34[2] * v70 + v34[3] * v69 + v34[4], v34[5] * v71 + v34[6] * v70 + v34[7] * v69 + v34[8], v34[9] * v71 + v34[10] * v70 + v34[11] * v69 + v34[12]))goto LABEL_21; {
          float64x2_t v72 = vmulq_f64(v78, v77);
          }
          *(void *)&v63.f64[0] = *(_OWORD *)&vaddq_f64(v72, v77);
          v63.f64[1] = vsubq_f64(v77, v72).f64[1];
          double v64 = v79;
        }
        else
        {
          float64x2_t v63 = 0uLL;
          double v64 = 0.0;
          if (!*(_DWORD *)v34) {
            double v64 = 1.0;
          }
        }
        unint64_t v30 = (float32x2_t *)(a4 + 12 * (int)v62);
        *unint64_t v30 = vcvt_f32_f64(v63);
        float32_t v31 = v64;
        v30[1].f32[0] = v31;
      }
LABEL_21:
      ++v24;
      v23 += 16;
    }
    while (v24 < *(unsigned int *)(a1 + 160));
  }
  unint64_t v73 = *(unsigned int *)(a1 + 136);
  if (v73)
  {
    unint64_t v74 = 0;
    int v75 = (_DWORD *)(a4 + 8);
    do
    {
      if (!v15[v74])
      {
        v15[v74] = 1;
        *((void *)v75 - 1) = 0;
        *int v75 = 1065353216;
        unint64_t v73 = *(unsigned int *)(a1 + 136);
      }
      ++v74;
      v75 += 3;
    }
    while (v74 < v73);
  }
LABEL_50:
  free(v15);
  free(v14);
  return 1;
}

BOOL mc_projection_project(double *a1, long double *a2, long double a3, long double a4, long double a5)
{
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 3)
  {
    BOOL result = a5 > 0.0;
    *a2 = a1[1] * a3;
    double v10 = a1[2] * a4;
    goto LABEL_6;
  }
  if (v8 == 1)
  {
    double v11 = a5 * a5 + a3 * a3;
    long double v12 = a1[3] + a1[1] * atan2(a3, a5);
    *a2 = v12;
    *a2 = v12 - floor((v12 + a1[1] * 3.14159265) / (a1[1] * 6.28318531)) * (a1[1] * 6.28318531);
    a2[1] = a1[4] + a1[2] * atan2(a4, sqrt(v11));
    a5 = sqrt(v11 + a4 * a4);
    BOOL result = 1;
    goto LABEL_8;
  }
  if (!v8)
  {
    BOOL result = a5 > 0.0;
    *a2 = a1[1] * a3 / a5;
    double v10 = a1[2] * a4 / a5;
LABEL_6:
    a2[1] = v10;
LABEL_8:
    a2[2] = 1.0 / a5;
    return result;
  }
  return 0;
}

uint64_t mc_camera_unproject(uint64_t a1, float64x2_t *a2, double a3, double a4, double a5)
{
  int v7 = *(_DWORD *)(a1 + 128);
  if (v7 == 3)
  {
    double v9 = a3 / *(double *)(a1 + 136);
    double v10 = a4 / *(double *)(a1 + 144);
    double v8 = 1.0 / a5;
    if (a5 <= 0.0) {
      return 0;
    }
  }
  else
  {
    if (v7 != 1)
    {
      if (!v7)
      {
        double v8 = 1.0 / a5;
        double v9 = 1.0 / a5 * a3 / *(double *)(a1 + 136);
        double v10 = 1.0 / a5 * a4 / *(double *)(a1 + 144);
        if (a5 > 0.0) {
          goto LABEL_9;
        }
      }
      return 0;
    }
    double v12 = 1.0 / a5;
    double v13 = (a3 - *(double *)(a1 + 152)) / *(double *)(a1 + 136);
    __double2 v14 = __sincos_stret((a4 - *(double *)(a1 + 160)) / *(double *)(a1 + 144));
    double v10 = v14.__sinval * v12;
    double v15 = v14.__cosval * v12;
    __double2 v16 = __sincos_stret(v13);
    double v9 = v15 * v16.__sinval;
    double v8 = v15 * v16.__cosval;
  }
LABEL_9:
  double v17 = v9 - *(double *)(a1 + 24);
  double v18 = v10 - *(double *)(a1 + 56);
  double v19 = v8 - *(double *)(a1 + 88);
  double v20 = v17 * *(double *)(a1 + 16) + v18 * *(double *)(a1 + 48) + v19 * *(double *)(a1 + 80);
  *a2 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a1, v17), *(float64x2_t *)(a1 + 32), v18), *(float64x2_t *)(a1 + 64), v19);
  a2[1].f64[0] = v20;
  return 1;
}

BOOL lzma_decompress_bytes()
{
  BOOL v0 = 0;
  if (!lzma_auto_decoder())
  {
    BOOL v0 = lzma_code() < 2;
    lzma_end();
  }
  return v0;
}

char *m3d_eb_calc_decode_table_portable(uint64_t a1)
{
  BOOL result = calcHuffmanEncodeTableInt(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = calcHuffmanDecodeTable((uint64_t)result, *(unsigned __int16 *)(a1 + 12));
    free(v3);
    return (char *)v4;
  }
  return result;
}

void m3d_eb_free_decode_table_portable(void **a1)
{
  unint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = a1 + 1;
    do
    {
      free(v2);
      uint64_t v4 = *v3++;
      unint64_t v2 = v4;
    }
    while (v4);
  }
  free(a1);
}

uint64_t m3d_eb_submesh_info_portable(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (a3) {
    *a3 = *(unsigned char *)a1;
  }
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 1);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 5);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(a2 + 12) = *(_WORD *)(a1 + 13);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 15);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 19);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 23);
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 27);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 29);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 33);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 37);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 41);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 45);
  return 1;
}

uint64_t m3d_eb_decompress_portable(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, int *a8, int32x4_t *a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  *(_OWORD *)uint64_t v104 = 0u;
  *(_OWORD *)uint64_t v105 = 0u;
  *(_OWORD *)uint64_t v102 = 0u;
  *(_OWORD *)uint64_t v103 = 0u;
  int v100 = 0;
  uint64_t v101 = 0;
  uint64_t v99 = 0;
  int v98 = 0;
  int v96 = 0;
  uint64_t v97 = 0;
  uint64_t v94 = 0;
  int v95 = 0;
  uint64_t v93 = 0;
  if (!m3d_eb_decompress_ppred_buf_portable(a1, a2[11], a3, a4, (uint64_t)v102, a12)
    || ppred_decompress(&v101, (unsigned int *)&v99 + 1, &v100, (unsigned int *)&v99, (uint64_t *)&v97, &v96, &v95, &v94, &v93, &v98, (uint64_t)v102))
  {
    goto LABEL_46;
  }
  uint64_t v17 = v99;
  if (v99 != a2[8] || (double v18 = a2 + 9, v98 != a2[9]))
  {
    ppred_decompress_free(v101, v100, v97, v96, v95, v94, v93);
LABEL_46:
    free(v102[0]);
    free(v102[1]);
    free(v103[0]);
    free(v103[1]);
    free(v104[0]);
    free(v104[1]);
    free(v105[0]);
    free(v105[1]);
    free((void *)v106);
    free(*((void **)&v106 + 1));
    free((void *)v107);
    return 0;
  }
  long long v90 = a7;
  uint64_t v91 = (uint64_t)a2;
  unint64_t v92 = a8;
  double v19 = v100;
  double v20 = v101;
  long long v21 = v93;
  uint64_t v23 = v96;
  long long v22 = (int *)v97;
  long long v88 = (__int32 *)v18;
  int v89 = v98;
  unint64_t v24 = (int *)malloc_type_malloc(4 * (int)v99, 0x100004052888210uLL);
  uLong v25 = malloc_type_malloc(4 * (int)v17, 0x100004052888210uLL);
  bzero(v24, 4 * (int)v17);
  LODWORD(v26) = 3 * v89;
  if (v89 >= 1)
  {
    if ((int)v26 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v26;
    }
    size_t v28 = v23;
    do
    {
      int v30 = *v22++;
      int v29 = v30;
      uint64_t v31 = *v28++;
      v24[v31] = v29;
      --v27;
    }
    while (v27);
  }
  if ((int)v17 >= 1)
  {
    int v32 = 0;
    uint64_t v33 = v24;
    uint64_t v34 = v25;
    uint64_t v35 = v17;
    do
    {
      int v36 = v21[*v33];
      BOOL v37 = v36 == 0;
      if (v36) {
        int v38 = v17 - 1;
      }
      else {
        int v38 = v32;
      }
      if (v37) {
        ++v32;
      }
      else {
        LODWORD(v17) = v17 - 1;
      }
      *v34++ = v38;
      uint64_t v39 = a5 + 32 * v38;
      int v40 = *v33++;
      double v41 = &v20[3 * v40];
      *(void *)uint64_t v39 = *(void *)v41;
      *(float *)(v39 + 8) = v41[2];
      *(_DWORD *)(v39 + 12) = 1065353216;
      uint64_t v42 = *(void *)v19;
      v19 += 2;
      *(void *)(v39 + 16) = v42;
      --v35;
    }
    while (v35);
  }
  *long long v90 = v17;
  if (v89 >= 1)
  {
    if ((int)v26 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v26;
    }
    do
    {
      *uint64_t v23 = v25[*v23];
      ++v23;
      --v26;
    }
    while (v26);
  }
  free(v24);
  free(v25);
  double v44 = v95;
  double v43 = v96;
  float64x2_t v45 = (int *)v94;
  unint64_t v46 = (_WORD *)v107;
  if (fill_index_ptr_material(a9, v92, v91, (uint64_t)v95))
  {
    LODWORD(v47) = *(_DWORD *)(v91 + 40);
    if (v47)
    {
      if (a11 && v46)
      {
        unint64_t v48 = 0;
        LODWORD(v49) = *(_DWORD *)(v91 + 40);
        do
        {
          unint64_t v50 = v48 + 1;
          if (v48 >= (v49 - 1)) {
            double v51 = v88;
          }
          else {
            double v51 = &a9->i32[v48 + 1];
          }
          int v52 = 3 * *v51;
          uint64_t v53 = *v88;
          if (v53)
          {
            uint64_t v54 = 0;
            int v55 = 0;
            int v56 = 3 * a9->i32[v48];
            int v57 = v92[v48];
            uint64_t v58 = 3 * v53;
            float64x2_t v59 = v44;
            unint64_t v60 = v45;
            float32_t v61 = v46;
            do
            {
              int v66 = *v59++;
              if (v57 == v66)
              {
                int v67 = *v60;
                if (*v60)
                {
                  uint64_t v68 = a6 + 2 * v52;
                  *(_WORD *)(v68 - 2) = v43[(v54 + 2)];
                  *(_WORD *)(v68 - 4) = v43[(v54 + 1)];
                  int v63 = v52 - 3;
                  unsigned int v64 = v54;
                  v52 -= 3;
                }
                else
                {
                  uint64_t v62 = (_WORD *)(a6 + 2 * v56);
                  *uint64_t v62 = v43[v54];
                  int v63 = v56 + 2;
                  v62[1] = v43[(v54 + 1)];
                  unsigned int v64 = 3 * v55 + 2;
                  v56 += 3;
                }
                *(_WORD *)(a6 + 2 * v63) = v43[v64];
                if (v67) {
                  int v65 = v52;
                }
                else {
                  int v65 = v56 - 1;
                }
                *(_WORD *)(a11 + 2 * (v65 / 3)) = *v61;
              }
              ++v55;
              v54 += 3;
              ++v61;
              ++v60;
            }
            while (v58 != v54);
          }
          *(_DWORD *)(a10 + 4 * v48) = v52 / 3;
          unint64_t v49 = *(unsigned int *)(v91 + 40);
          ++v48;
        }
        while (v50 < v49);
      }
      else
      {
        unint64_t v71 = 0;
        do
        {
          unint64_t v72 = v71 + 1;
          if (v71 >= (v47 - 1)) {
            unint64_t v73 = v88;
          }
          else {
            unint64_t v73 = &a9->i32[v71 + 1];
          }
          int v74 = 3 * *v73;
          uint64_t v75 = *v88;
          if (v75)
          {
            uint64_t v76 = 0;
            int v77 = 0;
            int v78 = 3 * a9->i32[v71];
            int v79 = v92[v71];
            uint64_t v80 = 3 * v75;
            long long v81 = v44;
            long long v82 = v45;
            do
            {
              int v86 = *v81++;
              if (v79 == v86)
              {
                if (*v82)
                {
                  uint64_t v87 = a6 + 2 * v74;
                  *(_WORD *)(v87 - 2) = v43[(v76 + 2)];
                  *(_WORD *)(v87 - 4) = v43[(v76 + 1)];
                  int v84 = v74 - 3;
                  unsigned int v85 = v76;
                  v74 -= 3;
                }
                else
                {
                  long long v83 = (_WORD *)(a6 + 2 * v78);
                  *long long v83 = v43[v76];
                  int v84 = v78 + 2;
                  v83[1] = v43[(v76 + 1)];
                  unsigned int v85 = 3 * v77 + 2;
                  v78 += 3;
                }
                *(_WORD *)(a6 + 2 * v84) = v43[v85];
              }
              ++v77;
              v76 += 3;
              ++v82;
            }
            while (v80 != v76);
          }
          *(_DWORD *)(a10 + 4 * v71) = v74 / 3;
          unint64_t v47 = *(unsigned int *)(v91 + 40);
          ++v71;
        }
        while (v72 < v47);
      }
    }
    uint64_t v69 = 1;
  }
  else
  {
    uint64_t v69 = 0;
  }
  ppred_decompress_free(v101, v100, v97, v43, v44, v45, v93);
  free(v102[0]);
  free(v102[1]);
  free(v103[0]);
  free(v103[1]);
  free(v104[0]);
  free(v104[1]);
  free(v105[0]);
  free(v105[1]);
  free((void *)v106);
  free(*((void **)&v106 + 1));
  free((void *)v107);
  return v69;
}

uint64_t m3d_eb_decompress_ppred_buf_portable(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6)
{
  uint64_t v7 = 0;
  if (a6 == 3) {
    unsigned int v8 = 11;
  }
  else {
    unsigned int v8 = 10;
  }
  uint64_t v9 = a1 + a2;
  unsigned int v10 = 12 * v8;
  uint64_t v11 = 8 * v8;
  double v12 = (unsigned __int8 *)(v9 + 8);
  do
  {
    unsigned int v13 = *((_DWORD *)v12 - 2);
    size_t v14 = *((unsigned int *)v12 - 1);
    int v15 = *v12;
    __double2 v16 = malloc_type_malloc(v13 + 3, 0x3DEBD094uLL);
    *(void *)(a5 + v7) = v16;
    if (v15 == 3)
    {
      if (v7 == 56) {
        double v18 = a4;
      }
      else {
        double v18 = a3;
      }
      if (!v18) {
        return 0;
      }
      double v19 = malloc_type_malloc((v14 + 3), 0x3FD9726uLL);
      memcpy(v19, (const void *)(v9 + v10), v14);
      huffmanDecode((unsigned int *)v19, v14, *(_WORD **)(a5 + v7), v13 >> 1, v18);
      free(v19);
    }
    else if (v15 == 1)
    {
      if (lzma_auto_decoder()) {
        return 0;
      }
      unsigned int v17 = lzma_code();
      lzma_end();
      if (v17 >= 2) {
        return 0;
      }
    }
    else
    {
      if (v15) {
        return 0;
      }
      memcpy(v16, (const void *)(v9 + v10), v14);
    }
    v12 += 12;
    v10 += v14;
    v7 += 8;
  }
  while (v11 != v7);
  return 1;
}

uint64_t m3d_eb_decompress_portable2(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int *a6, int32x4_t *a7, int a8)
{
  uint64_t v76 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  *(_OWORD *)double v70 = 0u;
  *(_OWORD *)unint64_t v71 = 0u;
  *(_OWORD *)uint64_t v68 = 0u;
  *(_OWORD *)uint64_t v69 = 0u;
  int v66 = 0;
  int v67 = 0;
  uint64_t v65 = 0;
  unsigned int v64 = 0;
  uint64_t v62 = 0;
  int v63 = 0;
  unint64_t v60 = 0;
  float32_t v61 = 0;
  float64x2_t v59 = 0;
  if (!m3d_eb_decompress_ppred_buf_portable(a1, a2[11], a3, a4, (uint64_t)v68, a8)
    || ppred_decompress(&v67, (unsigned int *)&v65 + 1, &v66, (unsigned int *)&v65, (uint64_t *)&v63, &v62, &v61, &v60, &v59, (int *)&v64, (uint64_t)v68))
  {
    goto LABEL_20;
  }
  if (v65 != a2[8] || v64 != a2[9])
  {
    ppred_decompress_free(v67, v66, v63, v62, v61, v60, v59);
LABEL_20:
    free(v68[0]);
    free(v68[1]);
    free(v69[0]);
    free(v69[1]);
    free(v70[0]);
    free(v70[1]);
    free(v71[0]);
    free(v71[1]);
    free((void *)v72);
    free(*((void **)&v72 + 1));
    uint64_t v31 = (void *)v73;
LABEL_21:
    free(v31);
    return 0;
  }
  size_t v14 = malloc_type_malloc(4 * v64, 0x100004052888210uLL);
  if (a8 == 3) {
    uint64_t v15 = 11;
  }
  else {
    uint64_t v15 = 10;
  }
  unsigned int v16 = 12 * v15;
  uint64_t v17 = a1 + a2[11];
  double v18 = (int *)(v17 + 4);
  do
  {
    int v19 = *v18;
    v18 += 3;
    v16 += v19;
    --v15;
  }
  while (v15);
  if (v16 >= a2[12] || (uint64_t v20 = v17 + v16, *(unsigned char *)v20 != 69) || *(unsigned char *)(v20 + 1) != 66 || *(unsigned char *)(v20 + 2) != 70)
  {
    ppred_decompress_free(v67, v66, v63, v62, v61, v60, v59);
    free(v68[0]);
    free(v68[1]);
    free(v69[0]);
    free(v69[1]);
    free(v70[0]);
    free(v70[1]);
    free(v71[0]);
    free(v71[1]);
    free((void *)v72);
    free(*((void **)&v72 + 1));
    free((void *)v73);
    uint64_t v31 = v14;
    goto LABEL_21;
  }
  unsigned int v58 = *(unsigned __int16 *)(v20 + 3);
  int v21 = *(unsigned __int8 *)(v20 + 5);
  long long v22 = (const void *)(v20 + 6);
  size_t v23 = (a2[9] * v21 + 7) >> 3;
  unint64_t v24 = malloc_type_malloc(v23 + 3, 0xE2804C07uLL);
  memcpy(v24, v22, v23);
  if (a2[9])
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    int v27 = 0;
    size_t v28 = (unsigned int *)v24;
    do
    {
      if (v27 < v21)
      {
        unsigned int v30 = *v28++;
        v26 |= (unint64_t)bswap32(v30) << (32 - v27);
        v27 += 32;
      }
      unint64_t v29 = v26 >> (64 - v21);
      v27 -= v21;
      v26 <<= v21;
      *((_DWORD *)v14 + v25++) = v29;
    }
    while (v25 < a2[9]);
  }
  free(v24);
  uint64_t v35 = v66;
  uint64_t v34 = v67;
  BOOL v37 = v62;
  int v36 = v63;
  int v38 = v61;
  if (fill_index_ptr_material(a7, a6, (uint64_t)a2, (uint64_t)v61))
  {
    uint64_t v39 = a2[10];
    if (v39)
    {
      uint64_t v40 = a2[9];
      if (v40)
      {
        uint64_t v41 = 0;
        int v42 = 0;
        uint64_t v43 = 3 * v40;
        do
        {
          uint64_t v44 = 0;
          int v45 = a6[v41];
          unint64_t v46 = v38;
          unint64_t v47 = (int *)v14;
          do
          {
            int v48 = *v46++;
            if (v45 == v48)
            {
              float v49 = (float)((float)*v47 + 0.5) * (float)(1.0 / (float)v58);
              uint64_t v50 = 4 * v44;
              uint64_t v51 = *(int *)&v37[v50];
              int v52 = &v34[3 * *(int *)&v36[v50]];
              uint64_t v53 = a5 + 32 * v42;
              *(void *)uint64_t v53 = *(void *)v52;
              *(float *)(v53 + 8) = v52[2];
              *(_DWORD *)(v53 + 12) = 1065353216;
              *(void *)(v53 + 16) = *(void *)&v35[2 * v51];
              *(float *)(v53 + 24) = v49;
              uint64_t v54 = &v34[3 * *(int *)&v36[v50 + 4]];
              uint64_t v55 = *(int *)&v37[v50 + 4];
              *(void *)(v53 + 32) = *(void *)v54;
              *(float *)(v53 + 40) = v54[2];
              *(_DWORD *)(v53 + 44) = 1065353216;
              *(void *)(v53 + 48) = *(void *)&v35[2 * v55];
              *(float *)(v53 + 56) = v49;
              v50 += 8;
              int v56 = &v34[3 * *(int *)&v36[v50]];
              uint64_t v57 = *(int *)&v37[v50];
              v42 += 3;
              *(void *)(v53 + 64) = *(void *)v56;
              *(float *)(v53 + 72) = v56[2];
              *(_DWORD *)(v53 + 76) = 1065353216;
              *(void *)(v53 + 80) = *(void *)&v35[2 * v57];
              *(float *)(v53 + 88) = v49;
            }
            ++v47;
            v44 += 3;
          }
          while (v43 != v44);
          ++v41;
        }
        while (v41 != v39);
      }
    }
    uint64_t v32 = 1;
  }
  else
  {
    uint64_t v32 = 0;
  }
  ppred_decompress_free(v34, v35, v36, v37, v38, v60, v59);
  free(v68[0]);
  free(v68[1]);
  free(v69[0]);
  free(v69[1]);
  free(v70[0]);
  free(v70[1]);
  free(v71[0]);
  free(v71[1]);
  free((void *)v72);
  free(*((void **)&v72 + 1));
  free((void *)v73);
  free(v14);
  return v32;
}

BOOL fill_index_ptr_material(int32x4_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  bzero(a1, 4 * *(unsigned int *)(a3 + 40));
  if (!*(_DWORD *)(a3 + 36)) {
    return *(_DWORD *)(a3 + 40) == 0;
  }
  unint64_t v8 = 0;
  int v9 = 0;
  do
  {
    while (v9 < 1)
    {
LABEL_3:
      uint64_t v10 = v9;
      ++a1->i32[v10];
      ++v9;
      a2[v10] = *(_DWORD *)(a4 + 4 * v8++);
      if (v8 >= *(unsigned int *)(a3 + 36)) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = a2;
    double v12 = a1;
    uint64_t v13 = v9;
    while (1)
    {
      int v14 = *v11++;
      if (*(_DWORD *)(a4 + 4 * v8) == v14) {
        break;
      }
      double v12 = (int32x4_t *)((char *)v12 + 4);
      if (!--v13) {
        goto LABEL_3;
      }
    }
    ++v12->i32[0];
    ++v8;
  }
  while (v8 < *(unsigned int *)(a3 + 36));
LABEL_10:
  if (v9 != *(_DWORD *)(a3 + 40)) {
    return 0;
  }
  if (v9 < 1) {
    return 1;
  }
  unint64_t v15 = v9 - 1;
  unint64_t v16 = (v9 - 1);
  if (v16)
  {
    do
    {
      if (v16 < 8)
      {
        unint64_t v18 = 0;
        int v19 = 0;
        goto LABEL_21;
      }
      unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8;
      int32x4_t v20 = 0uLL;
      unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFF8;
      long long v22 = a1 + 1;
      int32x4_t v23 = 0uLL;
      do
      {
        int32x4_t v20 = vaddq_s32(v22[-1], v20);
        int32x4_t v23 = vaddq_s32(*v22, v23);
        v22 += 2;
        v21 -= 8;
      }
      while (v21);
      int v19 = vaddvq_s32(vaddq_s32(v23, v20));
      while (v16 != v18)
LABEL_21:
        v19 += a1->i32[v18++];
      a1->i32[v15] = v19;
      --v16;
    }
    while (v15-- > 1);
    unint64_t v15 = 0;
  }
  a1->i32[v15] = 0;
  return 1;
}

void geo::c3m::EdgebreakerDecodeTable::~EdgebreakerDecodeTable(void ***this)
{
  unint64_t v2 = *this;
  if (*this)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = v2 + 1;
      do
      {
        free(v3);
        uint64_t v5 = *v4++;
        uint64_t v3 = v5;
      }
      while (v5);
    }
    free(v2);
    *this = 0;
  }
}

uint64_t geo::c3m::EdgebreakerDecodeCache::getOrCreateTable(uint64_t *a1, int *a2)
{
  uint64_t v5 = (std::mutex *)(a1 + 5);
  std::mutex::lock((std::mutex *)(a1 + 5));
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = *((unsigned __int16 *)a2 + 6);
  int8x8_t v10 = (int8x8_t)a1[1];
  if (v10)
  {
    unint64_t v11 = ((v6 << 6) + (v6 >> 2) + v7 - 0x61C8864680B583EBLL) ^ v6;
    unint64_t v12 = (v8 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
    unint64_t v13 = (v9 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
    uint8x8_t v14 = (uint8x8_t)vcnt_s8(v10);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v15 = v13;
      if (v13 >= *(void *)&v10) {
        unint64_t v15 = v13 % *(void *)&v10;
      }
    }
    else
    {
      unint64_t v15 = v13 & (*(void *)&v10 - 1);
    }
    unint64_t v16 = *(void ***)(*a1 + 8 * v15);
    if (v16)
    {
      uint64_t v17 = *v16;
      if (*v16)
      {
        if (v14.u32[0] >= 2uLL)
        {
          while (1)
          {
            unint64_t v19 = v17[1];
            if (v19 == v13)
            {
              if (v17[2] == __PAIR64__(v7, v6)
                && __PAIR64__(*((unsigned __int16 *)v17 + 14), *((_DWORD *)v17 + 6)) == __PAIR64__(v9, v8))
              {
                goto LABEL_128;
              }
            }
            else
            {
              if (v19 >= *(void *)&v10) {
                v19 %= *(void *)&v10;
              }
              if (v19 != v15) {
                goto LABEL_24;
              }
            }
            uint64_t v17 = (void *)*v17;
            if (!v17) {
              goto LABEL_24;
            }
          }
        }
        uint64_t v18 = *(void *)&v10 - 1;
        do
        {
          uint64_t v20 = v17[1];
          if (v20 == v13)
          {
            if (v17[2] == __PAIR64__(v7, v6)
              && __PAIR64__(*((unsigned __int16 *)v17 + 14), *((_DWORD *)v17 + 6)) == __PAIR64__(v9, v8))
            {
              goto LABEL_128;
            }
          }
          else if ((v20 & v18) != v15)
          {
            break;
          }
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_24:
  unint64_t v21 = calcHuffmanEncodeTableInt(v6, v7, v8, v9);
  if (v21)
  {
    long long v22 = v21;
    int32x4_t v23 = (void **)calcHuffmanDecodeTable((uint64_t)v21, *((unsigned __int16 *)a2 + 6));
    free(v22);
  }
  else
  {
    int32x4_t v23 = 0;
  }
  long long v68 = *(_OWORD *)a2;
  int v24 = *(_OWORD *)a2;
  unint64_t v25 = (((uint64_t)(int)v68 << 6) - 0x61C8864680B583EBLL + ((unint64_t)(int)v68 >> 2) + SDWORD1(v68)) ^ (int)v68;
  unsigned int v26 = *((void *)a2 + 1);
  unint64_t v27 = ((int)v26 - 0x61C8864680B583EBLL + (v25 << 6) + (v25 >> 2)) ^ v25;
  int v28 = (unsigned __int16)WORD6(*(_OWORD *)a2);
  unint64_t v29 = ((unsigned __int16)WORD6(*(_OWORD *)a2) - 0x61C8864680B583EBLL + (v27 << 6) + (v27 >> 2)) ^ v27;
  unint64_t v30 = a1[1];
  if (!v30) {
    goto LABEL_57;
  }
  uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    uint64_t v2 = ((unsigned __int16)WORD6(*(_OWORD *)a2) - 0x61C8864680B583EBLL + (v27 << 6) + (v27 >> 2)) ^ v27;
    if (v29 >= v30) {
      uint64_t v2 = v29 % v30;
    }
  }
  else
  {
    uint64_t v2 = v29 & (v30 - 1);
  }
  uint64_t v32 = *(void ***)(*a1 + 8 * v2);
  if (!v32 || (uint64_t v17 = *v32) == 0)
  {
LABEL_57:
    uint64_t v17 = operator new(0x28uLL);
    int v38 = a1 + 2;
    *uint64_t v17 = 0;
    v17[1] = v29;
    *((_OWORD *)v17 + 1) = *(_OWORD *)a2;
    v17[4] = v23;
    float v39 = (float)(unint64_t)(a1[3] + 1);
    float v40 = *((float *)a1 + 8);
    if (v30 && (float)(v40 * (float)v30) >= v39)
    {
      uint64_t v41 = *a1;
      int v42 = *(void **)(*a1 + 8 * v2);
      if (v42)
      {
LABEL_60:
        *uint64_t v17 = *v42;
        goto LABEL_126;
      }
LABEL_120:
      *uint64_t v17 = *v38;
      void *v38 = v17;
      *(void *)(v41 + 8 * v2) = v38;
      if (!*v17)
      {
LABEL_127:
        ++a1[3];
        goto LABEL_128;
      }
      unint64_t v65 = *(void *)(*v17 + 8);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v65 >= v30) {
          v65 %= v30;
        }
      }
      else
      {
        v65 &= v30 - 1;
      }
      int v42 = (void *)(*a1 + 8 * v65);
LABEL_126:
      *int v42 = v17;
      goto LABEL_127;
    }
    BOOL v43 = 1;
    if (v30 >= 3) {
      BOOL v43 = (v30 & (v30 - 1)) != 0;
    }
    unint64_t v44 = v43 | (2 * v30);
    unint64_t v45 = vcvtps_u32_f32(v39 / v40);
    if (v44 <= v45) {
      size_t prime = v45;
    }
    else {
      size_t prime = v44;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v30 = a1[1];
    }
    if (prime > v30)
    {
LABEL_71:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v47 = operator new(8 * prime);
      int v48 = (void *)*a1;
      *a1 = (uint64_t)v47;
      if (v48) {
        operator delete(v48);
      }
      uint64_t v49 = 0;
      a1[1] = prime;
      do
        *(void *)(*a1 + 8 * v49++) = 0;
      while (prime != v49);
      uint64_t v50 = (void *)*v38;
      if (!*v38) {
        goto LABEL_103;
      }
      size_t v51 = v50[1];
      size_t v52 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v53 = v51 & v52;
        *(void *)(*a1 + 8 * v53) = v38;
        for (unint64_t i = (void *)*v50; *v50; unint64_t i = (void *)*v50)
        {
          size_t v55 = i[1] & v52;
          if (v55 == v53)
          {
            uint64_t v50 = i;
          }
          else if (*(void *)(*a1 + 8 * v55))
          {
            *uint64_t v50 = *i;
            uint64_t v56 = 8 * v55;
            *unint64_t i = **(void **)(*a1 + v56);
            **(void **)(*a1 + v56) = i;
          }
          else
          {
            *(void *)(*a1 + 8 * v55) = v50;
            uint64_t v50 = i;
            size_t v53 = v55;
          }
        }
        goto LABEL_103;
      }
      if (v51 >= prime) {
        v51 %= prime;
      }
      *(void *)(*a1 + 8 * v51) = v38;
      unint64_t v60 = (void *)*v50;
      if (!*v50)
      {
LABEL_103:
        unint64_t v30 = prime;
        uint64_t v63 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_104;
        }
        goto LABEL_119;
      }
      while (1)
      {
        size_t v62 = v60[1];
        if (v62 >= prime) {
          v62 %= prime;
        }
        if (v62 == v51) {
          goto LABEL_97;
        }
        if (*(void *)(*a1 + 8 * v62))
        {
          *uint64_t v50 = *v60;
          uint64_t v61 = 8 * v62;
          *unint64_t v60 = **(void **)(*a1 + v61);
          **(void **)(*a1 + v61) = v60;
          unint64_t v60 = v50;
LABEL_97:
          uint64_t v50 = v60;
          unint64_t v60 = (void *)*v60;
          if (!v60) {
            goto LABEL_103;
          }
        }
        else
        {
          *(void *)(*a1 + 8 * v62) = v50;
          uint64_t v50 = v60;
          unint64_t v60 = (void *)*v60;
          size_t v51 = v62;
          if (!v60) {
            goto LABEL_103;
          }
        }
      }
    }
    if (prime < v30)
    {
      unint64_t v57 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v30 < 3 || (uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
      {
        unint64_t v57 = std::__next_prime(v57);
      }
      else
      {
        uint64_t v59 = 1 << -(char)__clz(v57 - 1);
        if (v57 >= 2) {
          unint64_t v57 = v59;
        }
      }
      if (prime <= v57) {
        size_t prime = v57;
      }
      if (prime < v30)
      {
        if (!prime)
        {
          unsigned int v64 = (void *)*a1;
          *a1 = 0;
          if (v64) {
            operator delete(v64);
          }
          unint64_t v30 = 0;
          a1[1] = 0;
          uint64_t v63 = -1;
          goto LABEL_119;
        }
        goto LABEL_71;
      }
      unint64_t v30 = a1[1];
    }
    uint64_t v63 = v30 - 1;
    if ((v30 & (v30 - 1)) != 0)
    {
LABEL_104:
      if (v29 >= v30)
      {
        uint64_t v2 = v29 % v30;
        uint64_t v41 = *a1;
        int v42 = *(void **)(*a1 + 8 * (v29 % v30));
        if (v42) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v2 = v29;
        uint64_t v41 = *a1;
        int v42 = *(void **)(*a1 + 8 * v29);
        if (v42) {
          goto LABEL_60;
        }
      }
      goto LABEL_120;
    }
LABEL_119:
    uint64_t v2 = v63 & v29;
    uint64_t v41 = *a1;
    int v42 = *(void **)(*a1 + 8 * (v63 & v29));
    if (v42) {
      goto LABEL_60;
    }
    goto LABEL_120;
  }
  if (v31.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v34 = v17[1];
      if (v34 == v29)
      {
        if (*((_DWORD *)v17 + 4) == v24
          && *(void *)((char *)v17 + 20) == __PAIR64__(v26, DWORD1(v68))
          && *((unsigned __int16 *)v17 + 14) == v28)
        {
          goto LABEL_52;
        }
      }
      else if ((v34 & (v30 - 1)) != v2)
      {
        goto LABEL_57;
      }
      uint64_t v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_57;
      }
    }
  }
  while (1)
  {
    unint64_t v33 = v17[1];
    if (v33 == v29) {
      break;
    }
    if (v33 >= v30) {
      v33 %= v30;
    }
    if (v33 != v2) {
      goto LABEL_57;
    }
LABEL_38:
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      goto LABEL_57;
    }
  }
  if (*((_DWORD *)v17 + 4) != v24
    || *(void *)((char *)v17 + 20) != __PAIR64__(v26, DWORD1(v68))
    || *((unsigned __int16 *)v17 + 14) != v28)
  {
    goto LABEL_38;
  }
LABEL_52:
  if (v23)
  {
    uint64_t v35 = *v23;
    if (*v23)
    {
      int v36 = v23 + 1;
      do
      {
        free(v35);
        BOOL v37 = *v36++;
        uint64_t v35 = v37;
      }
      while (v37);
    }
    free(v23);
  }
LABEL_128:
  uint64_t v66 = v17[4];
  std::mutex::unlock(v5);
  return v66;
}

void sub_1A286E45C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va2);
  std::pair<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>::~pair((uint64_t)va1);
  geo::c3m::EdgebreakerDecodeTable::~EdgebreakerDecodeTable((void ***)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = v2 + 1;
      do
      {
        free(v3);
        uint64_t v5 = *v4++;
        uint64_t v3 = v5;
      }
      while (v5);
    }
    free(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void geo::c3m::loadFromChunk(uint64_t *a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v162 = a2;
  unint64_t v163 = a3;
  if (a3 < 5 || *a2 != 67 || a2[1] != 51 || a2[2] != 77)
  {
    *(unsigned char *)a4 = 0;
    return;
  }
  memset(v151, 0, sizeof(v151));
  uint64_t v8 = (uint64_t *)v158;
  double v152 = 1.0;
  *(void *)&long long v156 = v158;
  *((void *)&v156 + 1) = v158;
  *(void *)&long long v157 = v158;
  *((void *)&v157 + 1) = 1;
  *(void *)&long long v159 = v161;
  *((void *)&v159 + 1) = v161;
  *(void *)&long long v160 = v161;
  *((void *)&v160 + 1) = 3;
  if (a2[3] != 3 || a2[4] <= 2u)
  {
LABEL_10:
    *(unsigned char *)a4 = 0;
    goto LABEL_11;
  }
  if (a3 < 6)
  {
LABEL_9:
    printf("Failed to read C3m file - %s");
    goto LABEL_10;
  }
  uint64_t v164 = 6;
  unsigned int v150 = a2[5];
  if (!a2[5])
  {
    double v124 = 1.0;
    int v126 = (uint64_t *)v158;
    uint64_t v125 = 1;
    goto LABEL_207;
  }
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = v163;
    if (v164 + 1 > v163) {
      goto LABEL_9;
    }
    uint64_t v11 = v164 + 5;
    if (v163 < v164 + 5) {
      goto LABEL_9;
    }
    unint64_t v12 = *(unsigned int *)&v162[v11 - 4];
    if (v163 - (v164 + 5) < v12)
    {
      printf("C3m Block size too large");
      goto LABEL_10;
    }
    switch(v162[v164])
    {
      case 0:
        if (v164 + 6 > v163)
        {
          uint64_t v141 = "Header type";
        }
        else if (v162[v11])
        {
          uint64_t v141 = "C3m - Invalid header type";
        }
        else
        {
          unint64_t v13 = v164 + 7;
          if (v164 + 7 >= v163) {
            unint64_t v13 = v163;
          }
          if (v13 + 1 < v163) {
            unint64_t v14 = v13 + 1;
          }
          else {
            unint64_t v14 = v163;
          }
          if (v14 + 1 < v163) {
            unint64_t v15 = v14 + 1;
          }
          else {
            unint64_t v15 = v163;
          }
          if (v15 + 8 > v163 || v15 + 16 > v163 || v15 + 24 > v163 || v15 + 32 > v163)
          {
            uint64_t v141 = "Rotation quaternion value";
          }
          else
          {
            unint64_t v16 = v15 + 40;
            if (v15 + 40 > v163) {
              goto LABEL_232;
            }
            uint64_t v17 = *(void *)&v162[v15];
            a6 = *(double *)&v162[v15 + 8];
            uint64_t v18 = *(void *)&v162[v15 + 16];
            a5 = *(double *)&v162[v15 + 24];
            unint64_t v19 = v15 + 48;
            uint64_t v20 = *(void *)&v162[v15 + 32];
            uint64_t v164 = v15 + 40;
            if (v15 + 48 > v163 || (unint64_t v21 = v15 + 56, v15 + 56 > v163))
            {
LABEL_232:
              uint64_t v141 = "Translation vector value";
            }
            else
            {
              unint64_t v22 = v15 + 64;
              if (v15 + 64 <= v163)
              {
                unint64_t v23 = v15 + 72;
                if (v15 + 72 <= v163)
                {
                  unint64_t v24 = v15 + 80;
                  if (v15 + 80 <= v163)
                  {
                    unint64_t v25 = v15 + 88;
                    if (v15 + 88 <= v163 && v15 + 96 <= v163)
                    {
                      unint64_t v26 = v15 + 104;
                      if (v26 <= v163)
                      {
                        uint64_t v27 = *(void *)&v162[v16];
                        uint64_t v28 = *(void *)&v162[v19];
                        uint64_t v29 = *(void *)&v162[v21];
                        uint64_t v30 = *(void *)&v162[v22];
                        uint64_t v31 = *(void *)&v162[v23];
                        uint64_t v32 = *(void *)&v162[v24];
                        uint64_t v164 = v26;
                        long long v33 = *(_OWORD *)&v162[v25];
                        *(double *)&v151[2] = a6;
                        *((void *)&v151[2] + 1) = v18;
                        *(void *)&v151[0] = v20;
                        *((void *)&v151[0] + 1) = v27;
                        *(void *)&v151[1] = v28;
                        *((void *)&v151[1] + 1) = v17;
                        double v152 = a5;
                        *(void *)&long long v153 = v29;
                        *((void *)&v153 + 1) = v30;
                        *(void *)&long long v154 = v31;
                        *((void *)&v154 + 1) = v32;
                        long long v155 = v33;
                        goto LABEL_204;
                      }
                    }
                  }
                }
              }
              uint64_t v141 = "Bounding box value";
            }
          }
        }
        goto LABEL_223;
      case 1:
        uint64_t v98 = v164 + 9;
        if (v164 + 9 > v163) {
          goto LABEL_239;
        }
        v164 += 9;
        int v149 = *(_DWORD *)&v162[v98 - 4];
        if (!v149) {
          goto LABEL_204;
        }
        int v99 = 0;
        char v147 = 1;
        while (2)
        {
          uint64_t v100 = v164;
          if (v164 + 1 > v163) {
            goto LABEL_239;
          }
          uint64_t v101 = v164 + 3;
          if (v164 + 3 > v163) {
            goto LABEL_239;
          }
          unsigned int v102 = v162[v164];
          v164 += 3;
          if (v102 >= 0xE) {
            goto LABEL_239;
          }
          if (v102 >= 8)
          {
            if (v102 - 11 >= 2)
            {
              if (v102 - 8 < 3)
              {
                printf("C3m - reserved material type");
                goto LABEL_9;
              }
              if (v102 == 13)
              {
                printf("C3m - unsupported material type");
                goto LABEL_9;
              }
LABEL_200:
              if (++v99 == v149) {
                goto LABEL_201;
              }
              continue;
            }
            unint64_t v109 = v100 + 4;
            if (v109 > v163 || (uint64_t v164 = v109, v162[v101] != 2))
            {
LABEL_239:
              printf("Failed to read C3m file - %s");
              goto LABEL_9;
            }
            *(void *)&long long v166 = &v167;
            *((void *)&v166 + 1) = 2;
            long long v167 = 0u;
            long long v168 = 0u;
            long long v169 = 0u;
            long long v170 = 0u;
            v165[0] = &v167;
            v165[1] = &v171;
            {
              uint64_t v110 = *((void *)&v159 + 1);
              unint64_t v111 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)&v159 + 1) - v159) >> 3) + 1;
              if (*((void *)&v160 + 1) < v111)
              {
                geo::small_vector_base<std::pair<geo::c3m::MaterialType,geo::small_vector<geo::c3m::TextureData,2ul>>>::grow((uint64_t)&v159, v111);
                uint64_t v110 = *((void *)&v159 + 1);
              }
              *(unsigned char *)uint64_t v110 = v102;
              uint64_t v112 = v110 + 40;
              *(void *)(v110 + 8) = v110 + 40;
              *(void *)(v110 + 16) = v110 + 40;
              *(void *)(v110 + 24) = v110 + 40;
              *(void *)(v110 + 32) = *((void *)&v166 + 1);
              uint64_t v113 = v165[0];
              if (v165[0] == (void *)v166)
              {
                unint64_t v120 = v165[1];
                BOOL v115 = v165[1] == v165[0];
                *(void *)(v110 + 16) = v112 + (char *)v165[1] - (char *)v165[0];
                if (!v115)
                {
                  do
                  {
                    *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
                    void *v113 = 0;
                    v113[1] = 0;
                    uint64_t v121 = v113[2];
                    *(unsigned char *)(v112 + 24) = *((unsigned char *)v113 + 24);
                    *(void *)(v112 + 16) = v121;
                    v113 += 4;
                    v112 += 32;
                  }
                  while (v113 != v120);
                  uint64_t v110 = *((void *)&v159 + 1);
                }
              }
              else
              {
                *(void **)(v110 + 8) = v165[0];
                *(void **)(v110 + 16) = v165[1];
                *(_OWORD *)uint64_t v165 = 0u;
                long long v166 = 0u;
              }
              uint64_t v108 = v9;
              *((void *)&v159 + 1) = v110 + 104;
              char TextureData = 1;
            }
            else
            {
              uint64_t v108 = v9;
              printf("Failed to read C3m file - %s", "Failed to read texture data");
              char TextureData = 0;
              char v147 = 0;
            }
            uint64_t v117 = v165[0];
            unint64_t v122 = v165[1];
            if (v165[0] == v165[1])
            {
LABEL_197:
              uint64_t v9 = v108;
              if (v117 != (void *)v166) {
                free(v117);
              }
              if ((TextureData & 1) == 0)
              {
LABEL_201:
                if (v147) {
                  goto LABEL_204;
                }
                goto LABEL_9;
              }
              goto LABEL_200;
            }
            do
            {
              float v123 = (std::__shared_weak_count *)v117[1];
              if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
              v117 += 4;
            }
            while (v117 != v122);
          }
          else
          {
            *(void *)&long long v166 = &v167;
            *((void *)&v166 + 1) = 2;
            long long v167 = 0u;
            long long v168 = 0u;
            v165[0] = &v167;
            v165[1] = &v169;
            if (TextureData)
            {
              uint64_t v104 = *((void *)&v159 + 1);
              unint64_t v105 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)&v159 + 1) - v159) >> 3) + 1;
              if (*((void *)&v160 + 1) < v105)
              {
                geo::small_vector_base<std::pair<geo::c3m::MaterialType,geo::small_vector<geo::c3m::TextureData,2ul>>>::grow((uint64_t)&v159, v105);
                uint64_t v104 = *((void *)&v159 + 1);
              }
              *(unsigned char *)uint64_t v104 = v102;
              uint64_t v106 = v104 + 40;
              *(void *)(v104 + 8) = v104 + 40;
              *(void *)(v104 + 16) = v104 + 40;
              *(void *)(v104 + 24) = v104 + 40;
              *(void *)(v104 + 32) = *((void *)&v166 + 1);
              long long v107 = v165[0];
              if (v165[0] == (void *)v166)
              {
                uint64_t v114 = v165[1];
                BOOL v115 = v165[1] == v165[0];
                *(void *)(v104 + 16) = v106 + (char *)v165[1] - (char *)v165[0];
                if (!v115)
                {
                  do
                  {
                    *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
                    *long long v107 = 0;
                    v107[1] = 0;
                    uint64_t v116 = v107[2];
                    *(unsigned char *)(v106 + 24) = *((unsigned char *)v107 + 24);
                    *(void *)(v106 + 16) = v116;
                    v107 += 4;
                    v106 += 32;
                  }
                  while (v107 != v114);
                  uint64_t v104 = *((void *)&v159 + 1);
                }
              }
              else
              {
                *(void **)(v104 + 8) = v165[0];
                *(void **)(v104 + 16) = v165[1];
                *(_OWORD *)uint64_t v165 = 0u;
                long long v166 = 0u;
              }
              uint64_t v108 = v9;
              *((void *)&v159 + 1) = v104 + 104;
            }
            else
            {
              uint64_t v108 = v9;
              printf("Failed to read C3m file - %s", "Failed to read texture data");
              char v147 = 0;
            }
            uint64_t v117 = v165[0];
            uint64_t v118 = v165[1];
            if (v165[0] == v165[1]) {
              goto LABEL_197;
            }
            do
            {
              uint64_t v119 = (std::__shared_weak_count *)v117[1];
              if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
              v117 += 4;
            }
            while (v117 != v118);
          }
          break;
        }
        uint64_t v117 = v165[0];
        goto LABEL_197;
      case 2:
        uint64_t v34 = v164 + 9;
        if (v164 + 9 > v163)
        {
          uint64_t v141 = "Num submeshes";
          goto LABEL_223;
        }
        v164 += 9;
        int v35 = *(_DWORD *)&v162[v34 - 4];
        if (!v35) {
          goto LABEL_204;
        }
        int v36 = 0;
        int v37 = 1;
        break;
      case 3:
        uint64_t v96 = (v12 - 5);
        printf("This decoder does not currently support scene graphs.");
        uint64_t v97 = v11 + v96;
        if (v11 + v96 >= v10) {
          uint64_t v97 = v10;
        }
        uint64_t v164 = v97;
        goto LABEL_204;
      default:
        printf("C3m invalid block type");
        goto LABEL_10;
    }
    do
    {
      uint64_t v39 = v164;
      if (v164 + 1 > v163)
      {
        uint64_t v141 = "Mesh type";
LABEL_223:
        printf("Failed to read C3m file - %s", v141);
        goto LABEL_9;
      }
      uint64_t v40 = v164 + 3;
      if (v164 + 3 > v163)
      {
        uint64_t v141 = "Mesh length";
        goto LABEL_223;
      }
      unsigned int v41 = v162[v164];
      v164 += 3;
      if (v41 >= 4)
      {
        uint64_t v141 = "Invalid mesh type";
        goto LABEL_223;
      }
      v165[0] = &v167;
      v165[1] = &v167;
      *(void *)&long long v166 = &v167;
      *((void *)&v166 + 1) = 2;
      v42.n128_u64[1] = 0;
      long long v170 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      long long v173 = 0u;
      long long v174 = 0u;
      long long v175 = 0u;
      int v178 = -1;
      char v176 = v36;
      if (v41 != 1)
      {
        if (!v41)
        {
          int v148 = v37;
          BOOL v43 = "Feature classification";
          if (v39 + 4 > v163) {
            goto LABEL_94;
          }
          uint64_t v164 = v39 + 4;
          BOOL v43 = "Layer classification";
          if (v39 + 5 > v163) {
            goto LABEL_94;
          }
          uint64_t v164 = v39 + 5;
          unsigned int v44 = v162[v39 + 4];
          BOOL v43 = "Invalid layer class";
          if (v44 > 8) {
            goto LABEL_94;
          }
          uint64_t v45 = v39 + 9;
          BOOL v43 = "Material index";
          if (v39 + 9 > v163) {
            goto LABEL_94;
          }
          uint64_t v164 = v39 + 9;
          BOOL v43 = "Mesh type";
          if (v39 + 10 > v163) {
            goto LABEL_94;
          }
          int v46 = *(_DWORD *)&v162[v45 - 4];
          uint64_t v164 = v39 + 10;
          unsigned int v47 = v162[v45];
          BOOL v43 = "Invalid mesh chunk type";
          if (v47 > 2) {
            goto LABEL_94;
          }
          BOOL v43 = "Scale factor value";
          if (v39 + 18 > v163) {
            goto LABEL_94;
          }
          int v48 = *(int **)&v162[v39 + 10];
          uint64_t v164 = v39 + 18;
          if (v39 + 26 > v163) {
            goto LABEL_94;
          }
          double v49 = *(double *)&v162[v39 + 18];
          uint64_t v164 = v39 + 26;
          if (v39 + 34 > v163) {
            goto LABEL_94;
          }
          uint64_t v50 = *(int **)&v162[v39 + 26];
          uint64_t v164 = v39 + 34;
          BOOL v43 = "Translation factor value";
          if (v39 + 42 > v163) {
            goto LABEL_94;
          }
          size_t v51 = *(int **)&v162[v39 + 34];
          uint64_t v164 = v39 + 42;
          if (v39 + 50 > v163) {
            goto LABEL_94;
          }
          size_t v52 = *(int **)&v162[v39 + 42];
          uint64_t v164 = v39 + 50;
          if (v39 + 58 > v163) {
            goto LABEL_94;
          }
          size_t v53 = *(int **)&v162[v39 + 50];
          uint64_t v164 = v39 + 58;
          BOOL v43 = "Mesh chunk offset";
          if (v39 + 62 > v163) {
            goto LABEL_94;
          }
          uint64_t v164 = v39 + 62;
          uint64_t v54 = v39 + 66;
          BOOL v43 = "Compressed mesh chunk size";
          if (v39 + 66 > v163) {
            goto LABEL_94;
          }
          uint64_t v55 = *(unsigned int *)&v162[v39 + 58];
          uint64_t v164 = v39 + 66;
          unint64_t v56 = v39 + 70;
          BOOL v43 = "Uncompressed mesh chunk size";
          if (v56 > v163) {
            goto LABEL_94;
          }
          uint64_t v57 = *(unsigned int *)&v162[v54 - 4];
          uint64_t v164 = v56;
          BOOL v43 = "Invalid mesh chunk data";
          if (v163 < (v57 + v55)) {
            goto LABEL_94;
          }
          int v146 = v9;
          uint64_t v142 = *(int **)&v49;
          unint64_t v58 = *(unsigned int *)&v162[v56 - 4];
          char v177 = v44;
          unsigned int v186 = 0;
          int32x4_t v185 = 0;
          unint64_t v187 = 0;
          int v144 = (unsigned __int16 *)&v162[v55];
          if (v57 != v58)
          {
            std::vector<unsigned char>::resize((uint64_t)&v185, v58);
            if (!lzma_decompress_bytes()) {
              goto LABEL_131;
            }
            int v144 = 0;
            uint64_t v57 = 0;
          }
          v42.n128_u64[0] = (unint64_t)v142;
          v199.__begin_ = v48;
          v199.__end_ = v142;
          v199.__end_cap_.__value_ = v50;
          v198.__begin_ = v51;
          v198.__end_ = v52;
          v198.__end_cap_.__value_ = v53;
          if (v47 == 1)
          {
            int v182 = v144;
            uint64_t v183 = v57;
            uint64_t v184 = 0;
LABEL_137:
            unint64_t v92 = "Couldn't read mesh chunk type 1";
            goto LABEL_141;
          }
          if (v47)
          {
            uint64_t v179 = v144;
            uint64_t v180 = v57;
            uint64_t v181 = 0;
              goto LABEL_139;
LABEL_140:
            unint64_t v92 = "Couldn't read mesh chunk type 2";
            goto LABEL_141;
          }
          int32x4_t v195 = v144;
          uint64_t v196 = v57;
          uint64_t v197 = 0;
            goto LABEL_139;
          goto LABEL_130;
        }
        long long v72 = "Layer classification";
        if (v39 + 4 <= v163)
        {
          uint64_t v164 = v39 + 4;
          unsigned int v73 = v162[v40];
          long long v72 = "Invalid feature class";
          if (v73 <= 8)
          {
            long long v72 = "Huffman parameter c1 for texture coordinates";
            if (v39 + 8 <= v163)
            {
              uint64_t v164 = v39 + 8;
              long long v72 = "Huffman parameter c2 for texture coordinates";
              if (v39 + 12 <= v163)
              {
                unsigned int v74 = *(_DWORD *)&v162[v39 + 4];
                uint64_t v164 = v39 + 12;
                long long v72 = "Huffman parameter c3 for texture coordinates";
                if (v39 + 16 <= v163)
                {
                  unsigned int v75 = *(_DWORD *)&v162[v39 + 8];
                  uint64_t v164 = v39 + 16;
                  long long v72 = "Huffman parameter range for texture coordinates";
                  if (v39 + 18 <= v163)
                  {
                    int v76 = *(_DWORD *)&v162[v39 + 12];
                    uint64_t v164 = v39 + 18;
                    long long v72 = "Huffman parameter c1 for vertex coordinates";
                    if (v39 + 22 <= v163)
                    {
                      __int16 v77 = *(_WORD *)&v162[v39 + 16];
                      uint64_t v164 = v39 + 22;
                      long long v72 = "Huffman parameter c2 for vertex coordinates";
                      if (v39 + 26 <= v163)
                      {
                        unsigned int v78 = *(_DWORD *)&v162[v39 + 18];
                        uint64_t v164 = v39 + 26;
                        long long v72 = "Huffman parameter c3 for vertex coordinates";
                        if (v39 + 30 <= v163)
                        {
                          unsigned int v79 = *(_DWORD *)&v162[v39 + 22];
                          uint64_t v164 = v39 + 30;
                          long long v72 = "Huffman parameter range for vertex coordinates";
                          if (v39 + 32 <= v163)
                          {
                            int v80 = *(_DWORD *)&v162[v39 + 26];
                            uint64_t v164 = v39 + 32;
                            long long v72 = "Number of texture coordinates";
                            if (v39 + 36 <= v163)
                            {
                              __int16 v81 = *(_WORD *)&v162[v39 + 30];
                              uint64_t v164 = v39 + 36;
                              long long v72 = "Number of faces";
                              if (v39 + 40 <= v163)
                              {
                                int v82 = *(_DWORD *)&v162[v39 + 32];
                                uint64_t v164 = v39 + 40;
                                long long v72 = "Number of material indices";
                                if (v39 + 44 <= v163)
                                {
                                  int v83 = *(_DWORD *)&v162[v39 + 36];
                                  uint64_t v164 = v39 + 44;
                                  uint64_t v84 = v39 + 48;
                                  long long v72 = "Mesh chunk offset";
                                  if (v39 + 48 <= v163)
                                  {
                                    int v85 = *(_DWORD *)&v162[v39 + 40];
                                    uint64_t v164 = v39 + 48;
                                    unint64_t v86 = v39 + 52;
                                    long long v72 = "Compressed mesh chunk size";
                                    if (v86 <= v163)
                                    {
                                      int v148 = v37;
                                      int v89 = *(_DWORD *)&v162[v84 - 4];
                                      uint64_t v164 = v86;
                                      int v90 = *(_DWORD *)&v162[v86 - 4];
                                      char v177 = v73;
                                      if (v73 == 6 || v85)
                                      {
                                        memset(&v199, 0, sizeof(v199));
                                        memset(&v198, 0, sizeof(v198));
                                        int32x4_t v195 = 0;
                                        uint64_t v196 = 0;
                                        uint64_t v197 = 0;
                                        int32x4_t v185 = (void *)__PAIR64__(v75, v74);
                                        LODWORD(v186) = v76;
                                        WORD2(v186) = v77;
                                        unint64_t v187 = __PAIR64__(v79, v78);
                                        int v188 = v80;
                                        __int16 v189 = v81;
                                        int v190 = v82;
                                        int v191 = v83;
                                        int v192 = v85;
                                        int v193 = v89;
                                        int v194 = v90;
                                      }
                                      goto LABEL_145;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        printf("Failed to read C3m file - %s", v72);
LABEL_111:
        printf("Failed to read C3m file - %s", "Invalid mesh");
        int v37 = 0;
        int v87 = 1;
        long long v88 = (void *)*((void *)&v174 + 1);
        if (!*((void *)&v174 + 1)) {
          goto LABEL_113;
        }
LABEL_112:
        *(void *)&long long v175 = v88;
        operator delete(v88);
        goto LABEL_113;
      }
      int v148 = v37;
      BOOL v43 = "Feature classification";
      if (v39 + 4 > v163) {
        goto LABEL_94;
      }
      uint64_t v164 = v39 + 4;
      BOOL v43 = "Index of first drape face";
      if (v39 + 6 > v163) {
        goto LABEL_94;
      }
      uint64_t v164 = v39 + 6;
      BOOL v43 = "Layer classification";
      if (v39 + 7 > v163) {
        goto LABEL_94;
      }
      uint64_t v164 = v39 + 7;
      unsigned int v59 = v162[v39 + 6];
      BOOL v43 = "Invalid layer class";
      if (v59 > 8) {
        goto LABEL_94;
      }
      uint64_t v60 = v39 + 11;
      BOOL v43 = "Material index";
      if (v39 + 11 > v163) {
        goto LABEL_94;
      }
      uint64_t v164 = v39 + 11;
      BOOL v43 = "Mesh type";
      if (v39 + 12 > v163) {
        goto LABEL_94;
      }
      int v46 = *(_DWORD *)&v162[v60 - 4];
      uint64_t v164 = v39 + 12;
      unsigned int v61 = v162[v60];
      BOOL v43 = "Invalid mesh chunk type";
      if (v61 > 2) {
        goto LABEL_94;
      }
      BOOL v43 = "Scale factor value";
      if (v39 + 20 > v163) {
        goto LABEL_94;
      }
      size_t v62 = *(int **)&v162[v39 + 12];
      uint64_t v164 = v39 + 20;
      if (v39 + 28 > v163) {
        goto LABEL_94;
      }
      uint64_t v63 = *(int **)&v162[v39 + 20];
      uint64_t v164 = v39 + 28;
      if (v39 + 36 > v163) {
        goto LABEL_94;
      }
      unsigned int v64 = *(int **)&v162[v39 + 28];
      uint64_t v164 = v39 + 36;
      BOOL v43 = "Translation factor value";
      if (v39 + 44 > v163) {
        goto LABEL_94;
      }
      unint64_t v65 = *(int **)&v162[v39 + 36];
      uint64_t v164 = v39 + 44;
      if (v39 + 52 > v163) {
        goto LABEL_94;
      }
      uint64_t v66 = *(int **)&v162[v39 + 44];
      uint64_t v164 = v39 + 52;
      if (v39 + 60 > v163) {
        goto LABEL_94;
      }
      int v67 = *(int **)&v162[v39 + 52];
      uint64_t v164 = v39 + 60;
      BOOL v43 = "Mesh chunk offset";
      if (v39 + 64 > v163) {
        goto LABEL_94;
      }
      uint64_t v164 = v39 + 64;
      uint64_t v68 = v39 + 68;
      BOOL v43 = "Compressed mesh chunk size";
      if (v39 + 68 > v163
        || (uint64_t v69 = *(unsigned int *)&v162[v39 + 60],
            uint64_t v164 = v39 + 68,
            unint64_t v70 = v39 + 72,
            BOOL v43 = "Uncompressed mesh chunk size",
            v70 > v163)
        || (uint64_t v71 = *(unsigned int *)&v162[v68 - 4],
            uint64_t v164 = v70,
            BOOL v43 = "Invalid mesh chunk data",
            v163 < (v71 + v69)))
      {
LABEL_94:
        printf("Failed to read C3m file - %s", v43);
        goto LABEL_111;
      }
      int v146 = v9;
      uint64_t v143 = v62;
      unint64_t v91 = *(unsigned int *)&v162[v70 - 4];
      char v177 = v59;
      unsigned int v186 = 0;
      int32x4_t v185 = 0;
      unint64_t v187 = 0;
      uint64_t v145 = (unsigned __int16 *)&v162[v69];
      if (v71 != v91)
      {
        std::vector<unsigned char>::resize((uint64_t)&v185, v91);
        if (!lzma_decompress_bytes())
        {
LABEL_131:
          unint64_t v92 = "Failed to decompress mesh chunk";
          goto LABEL_141;
        }
        uint64_t v145 = 0;
        uint64_t v71 = 0;
      }
      v42.n128_u64[0] = (unint64_t)v143;
      v199.__begin_ = v143;
      v199.__end_ = v63;
      v199.__end_cap_.__value_ = v64;
      v198.__begin_ = v65;
      v198.__end_ = v66;
      v198.__end_cap_.__value_ = v67;
      if (v61 == 1)
      {
        int v182 = v145;
        uint64_t v183 = v71;
        uint64_t v184 = 0;
        goto LABEL_137;
      }
      if (v61)
      {
        uint64_t v179 = v145;
        uint64_t v180 = v71;
        uint64_t v181 = 0;
        {
LABEL_139:
          geo::small_vector_base<geo::c3m::SubMesh>::resize((char **)v165, 1uLL);
          uint64_t v93 = v165[1];
          *((_DWORD *)v165[1] - 2) = v46;
          uint64_t v94 = (uint64_t)(*((void *)&v173 + 1) - v173) >> 1;
          *(v93 - 3) = 0;
          *(v93 - 2) = v94;
          char v95 = 1;
          goto LABEL_142;
        }
        goto LABEL_140;
      }
      int32x4_t v195 = v145;
      uint64_t v196 = v71;
      uint64_t v197 = 0;
        goto LABEL_139;
LABEL_130:
      unint64_t v92 = "Couldn't read mesh chunk type 0";
LABEL_141:
      printf("Failed to read C3m file - %s", v92);
      char v95 = 0;
LABEL_142:
      if (v185)
      {
        unsigned int v186 = v185;
        operator delete(v185);
      }
      LODWORD(v9) = v146;
      if ((v95 & 1) == 0) {
        goto LABEL_111;
      }
LABEL_145:
      geo::small_vector_base<geo::c3m::Mesh>::push_back(&v156, (uint64_t *)v165);
      int v87 = 0;
      int v37 = v148;
      long long v88 = (void *)*((void *)&v174 + 1);
      if (*((void *)&v174 + 1)) {
        goto LABEL_112;
      }
LABEL_113:
      if ((void)v173)
      {
        *((void *)&v173 + 1) = v173;
        operator delete((void *)v173);
      }
      if (*((void *)&v171 + 1))
      {
        *(void *)&long long v172 = *((void *)&v171 + 1);
        operator delete(*((void **)&v171 + 1));
      }
      if ((void)v170)
      {
        *((void *)&v170 + 1) = v170;
        operator delete((void *)v170);
      }
      if (v165[0] != (void *)v166) {
        free(v165[0]);
      }
      if (++v36 == v35) {
        int v38 = 1;
      }
      else {
        int v38 = v87;
      }
    }
    while (v38 != 1);
    if ((v37 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_204:
    uint64_t v9 = (v9 + 1);
  }
  while (v9 < v150);
  double v124 = v152;
  uint64_t v125 = *((void *)&v157 + 1);
  uint64_t v8 = (uint64_t *)v157;
  int v126 = (uint64_t *)v156;
LABEL_207:
  *(unsigned char *)a4 = 1;
  *(_OWORD *)(a4 + 8) = v151[0];
  *(void *)(a4 + 24) = *(void *)&v151[1];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)((char *)&v151[1] + 8);
  *(void *)(a4 + 48) = *((void *)&v151[2] + 1);
  *(double *)(a4 + 56) = v124;
  long long v127 = v154;
  *(_OWORD *)(a4 + 64) = v153;
  *(_OWORD *)(a4 + 80) = v127;
  *(_OWORD *)(a4 + 96) = v155;
  int v128 = (void *)(a4 + 144);
  *(void *)(a4 + 112) = a4 + 144;
  *(void *)(a4 + 120) = a4 + 144;
  *(void *)(a4 + 128) = a4 + 144;
  *(void *)(a4 + 136) = v125;
  if (v126 == v8)
  {
    int v130 = (uint64_t *)*((void *)&v156 + 1);
    *(void *)(a4 + 120) = (char *)v128 + *((void *)&v156 + 1) - (void)v8;
    geo::uninitialized_move<geo::c3m::Mesh *,geo::c3m::Mesh *>(v8, v130, v128);
  }
  else
  {
    uint64_t v129 = *((void *)&v156 + 1);
    *(void *)(a4 + 112) = v126;
    *(void *)(a4 + 120) = v129;
    long long v156 = 0u;
    long long v157 = 0u;
  }
  uint64_t v131 = a4 + 360;
  *(void *)(a4 + 328) = a4 + 360;
  *(void *)(a4 + 336) = a4 + 360;
  uint64_t v132 = *((void *)&v160 + 1);
  uint64_t v133 = v160;
  *(void *)(a4 + 344) = a4 + 360;
  *(void *)(a4 + 352) = v132;
  uint64_t v134 = v159;
  if ((void)v159 == v133)
  {
    uint64_t v136 = *((void *)&v159 + 1);
    BOOL v115 = *((void *)&v159 + 1) == (void)v159;
    *(void *)(a4 + 336) = v131 + *((void *)&v159 + 1) - v159;
    if (!v115)
    {
      do
      {
        *(unsigned char *)uint64_t v131 = *(unsigned char *)v134;
        uint64_t v137 = v131 + 40;
        *(void *)(v131 + 8) = v131 + 40;
        uint64_t v138 = *(void *)(v134 + 8);
        *(void *)(v131 + 16) = v131 + 40;
        *(void *)(v131 + 24) = v131 + 40;
        *(void *)(v131 + 32) = *(void *)(v134 + 32);
        if (v138 == *(void *)(v134 + 24))
        {
          *(void *)(v131 + 16) = v137 + *(void *)(v134 + 16) - v138;
          for (uint64_t i = *(void *)(v134 + 16); v138 != i; v137 += 32)
          {
            *(_OWORD *)uint64_t v137 = *(_OWORD *)v138;
            *(void *)uint64_t v138 = 0;
            *(void *)(v138 + 8) = 0;
            uint64_t v140 = *(void *)(v138 + 16);
            *(unsigned char *)(v137 + 24) = *(unsigned char *)(v138 + 24);
            *(void *)(v137 + 16) = v140;
            v138 += 32;
          }
        }
        else
        {
          *(void *)(v131 + 8) = v138;
          *(void *)(v131 + 16) = *(void *)(v134 + 16);
          *(_OWORD *)(v134 + 8) = 0uLL;
          *(_OWORD *)(v134 + 24) = 0uLL;
        }
        v131 += 104;
        v134 += 104;
      }
      while (v134 != v136);
    }
  }
  else
  {
    uint64_t v135 = *((void *)&v159 + 1);
    *(void *)(a4 + 328) = v159;
    *(void *)(a4 + 336) = v135;
    long long v159 = 0u;
    long long v160 = 0u;
  }
LABEL_11:
  geo::c3m::Model::~Model((geo::c3m::Model *)v151);
}

void sub_1A286F9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1A286F9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v28 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v28;
    operator delete(v28);
  }
  geo::c3m::Mesh::~Mesh((geo::c3m::Mesh *)&STACK[0x340]);
  geo::c3m::Model::~Model((geo::c3m::Model *)&a27);
  _Unwind_Resume(a1);
}

void sub_1A286FA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void geo::small_vector_base<geo::c3m::Mesh>::runDestructors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v5 = *(void **)(v4 + 152);
      if (v5)
      {
        *(void *)(v4 + 160) = v5;
        operator delete(v5);
      }
      uint64_t v6 = *(void **)(v4 + 128);
      if (v6)
      {
        *(void *)(v4 + 136) = v6;
        operator delete(v6);
      }
      uint64_t v7 = *(void **)(v4 + 104);
      if (v7)
      {
        *(void *)(v4 + 112) = v7;
        operator delete(v7);
      }
      uint64_t v8 = *(void **)(v4 + 80);
      if (v8)
      {
        *(void *)(v4 + 88) = v8;
        operator delete(v8);
      }
      if (*(void *)v4 != *(void *)(v4 + 16)) {
        free(*(void **)v4);
      }
      v4 += 184;
    }
    while (v4 != a3);
  }
}

void geo::c3m::Mesh::~Mesh(geo::c3m::Mesh *this)
{
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }
  if (*(void *)this != *((void *)this + 2)) {
    free(*(void **)this);
  }
}

uint64_t anonymous namespace'::readTextureData(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 + 1 > v2)
  {
    uint64_t v4 = "Texture data type";
LABEL_16:
    printf("Failed to read C3m file - %s", v4);
    return 0;
  }
  a1[2] = v3 + 1;
  uint64_t v5 = v3 + 5;
  if (v3 + 5 > v2)
  {
    uint64_t v4 = "Texture data offset";
    goto LABEL_16;
  }
  uint64_t v6 = *a1;
  unsigned int v7 = *(unsigned __int8 *)(*a1 + v3);
  a1[2] = v5;
  uint64_t v8 = v3 + 9;
  if (v3 + 9 > v2)
  {
    uint64_t v4 = "Texture compressed data size";
    goto LABEL_16;
  }
  uint64_t v9 = *(unsigned int *)(v6 + v5 - 4);
  a1[2] = v8;
  unint64_t v10 = v3 + 13;
  if (v10 > v2)
  {
    uint64_t v4 = "Texture uncompressed data size";
    goto LABEL_16;
  }
  uint64_t v11 = *(unsigned int *)(v6 + v8 - 4);
  a1[2] = v10;
  if (v2 < (v11 + v9))
  {
    uint64_t v4 = "Invalid file data offset";
    goto LABEL_16;
  }
  if (v7 >= 0xE)
  {
    uint64_t v4 = "Invalid texture data type";
    goto LABEL_16;
  }
  uint64_t v13 = *(unsigned int *)(v6 + v10 - 4);
  std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const*&,unsigned char const*&,void>(&v15, (const void *)(v6 + v9), v6 + v9 + v11);
  long long v16 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v13;
  char v18 = v7;
  geo::c3m::TextureData::operator=(a2, &v16);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&v16);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&v15);
  return 1;
}

uint64_t geo::small_vector<geo::c3m::TextureData,2ul>::~small_vector(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (*(void **)a1 != v3)
  {
    do
    {
      uint64_t v4 = (std::__shared_weak_count *)v2[1];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v2 += 4;
    }
    while (v2 != v3);
    unint64_t v2 = *(void **)a1;
  }
  if (v2 != *(void **)(a1 + 16)) {
    free(v2);
  }
  return a1;
}

uint64_t geo::c3m::TextureData::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *((void *)a2 + 2);
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v6;
  return a1;
}

void *std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const*&,unsigned char const*&,void>(void *a1, const void *a2, uint64_t a3)
{
  BOOL result = operator new(0x30uLL);
  unsigned int v7 = result;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  uint64_t v8 = result + 3;
  *BOOL result = &unk_1EF58B380;
  result[4] = 0;
  result[5] = 0;
  size_t v9 = a3 - (void)a2;
  if (v9)
  {
    if ((v9 & 0x8000000000000000) != 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = (char *)operator new(v9);
    v7[3] = v10;
    uint64_t v11 = &v10[v9];
    v7[5] = &v10[v9];
    BOOL result = memcpy(v10, a2, v9);
    v7[4] = v11;
  }
  *a1 = v8;
  a1[1] = v7;
  return result;
}

void sub_1A286FEF0(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void geo::small_vector_base<std::pair<geo::c3m::MaterialType,geo::small_vector<geo::c3m::TextureData,2ul>>>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  unint64_t v26 = *(void **)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = (1 << -(char)__clz(v4 + 1));
  if (v4 >= 0xFFFFFFFFFFFFFFFELL) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6 <= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = v6;
  }
  uint64_t v8 = (char *)malloc_type_malloc(104 * v7, 0x10200409A70330CuLL);
  size_t v9 = v8;
  unint64_t v10 = *(void **)a1;
  uint64_t v11 = *(void **)(a1 + 8);
  if (*(void **)a1 != v11)
  {
    unint64_t v12 = v8;
    do
    {
      *(unsigned char *)unint64_t v12 = *(unsigned char *)v10;
      v12[1] = v12 + 5;
      unint64_t v14 = (void *)v10[1];
      void v12[2] = v12 + 5;
      v12[3] = v12 + 5;
      long long v15 = (void *)v10[3];
      v12[4] = v10[4];
      if (v14 == v15)
      {
        void v12[2] = (char *)v12 + v10[2] - (void)v14 + 40;
        long long v16 = (void *)v10[2];
        if (v14 != v16)
        {
          uint64_t v17 = 0;
          do
          {
            char v18 = (char *)&v12[v17];
            unint64_t v19 = &v14[v17];
            *(_OWORD *)(v18 + 40) = *(_OWORD *)&v14[v17];
            *unint64_t v19 = 0;
            v19[1] = 0;
            uint64_t v20 = v14[v17 + 2];
            v18[64] = v14[v17 + 3];
            *((void *)v18 + 7) = v20;
            v17 += 4;
          }
          while (v19 + 4 != v16);
        }
      }
      else
      {
        uint64_t v13 = v10[2];
        v12[1] = v14;
        void v12[2] = v13;
        *(_OWORD *)(v10 + 1) = 0uLL;
        *(_OWORD *)(v10 + 3) = 0uLL;
      }
      v12 += 13;
      v10 += 13;
    }
    while (v10 != v11);
    unint64_t v21 = *(void **)a1;
    unint64_t v22 = *(void **)(a1 + 8);
    if (*(void **)a1 != v22)
    {
      do
      {
        unint64_t v23 = (void *)v21[1];
        unint64_t v24 = (void *)v21[2];
        if (v23 == v24)
        {
          if (v23 == (void *)v21[3]) {
            goto LABEL_18;
          }
        }
        else
        {
          do
          {
            unint64_t v25 = (std::__shared_weak_count *)v23[1];
            if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
            v23 += 4;
          }
          while (v23 != v24);
          unint64_t v23 = (void *)v21[1];
          if (v23 == (void *)v21[3]) {
            goto LABEL_18;
          }
        }
        free(v23);
LABEL_18:
        v21 += 13;
      }
      while (v21 != v22);
    }
  }
  if (v3 != v26) {
    free(*(void **)a1);
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = &v9[v27 - (void)v3];
  *(void *)(a1 + 24) = v7;
}

__n128 geo::small_vector_base<geo::c3m::Mesh>::push_back(void *a1, uint64_t *a2)
{
  unint64_t v4 = (long long **)a1[1];
  unint64_t v5 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v4 - *a1) >> 3) + 1;
  if (a1[3] < v5)
  {
    geo::small_vector_base<geo::c3m::Mesh>::grow((uint64_t)a1, v5);
    unint64_t v4 = (long long **)a1[1];
  }
  unint64_t v6 = v4 + 4;
  *unint64_t v4 = (long long *)(v4 + 4);
  v4[1] = (long long *)(v4 + 4);
  v4[2] = (long long *)(v4 + 4);
  uint64_t v7 = a2[2];
  v4[3] = (long long *)a2[3];
  uint64_t v8 = (long long *)*a2;
  if (*a2 == v7)
  {
    v4[1] = (long long *)((char *)v6 + a2[1] - (void)v8);
    for (i = (long long *)a2[1]; v8 != i; uint64_t v8 = (long long *)((char *)v8 + 24))
    {
      long long v12 = *v8;
      v6[2] = *((void *)v8 + 2);
      *(_OWORD *)unint64_t v6 = v12;
      v6 += 3;
    }
  }
  else
  {
    size_t v9 = (long long *)a2[1];
    *unint64_t v4 = v8;
    v4[1] = v9;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  v4[10] = 0;
  v4[11] = 0;
  v4[12] = 0;
  *((_OWORD *)v4 + 5) = *((_OWORD *)a2 + 5);
  v4[12] = (long long *)a2[12];
  a2[10] = 0;
  a2[11] = 0;
  a2[12] = 0;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  *(_OWORD *)(v4 + 13) = *(_OWORD *)(a2 + 13);
  v4[15] = (long long *)a2[15];
  a2[13] = 0;
  a2[14] = 0;
  a2[15] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v4[18] = 0;
  *((_OWORD *)v4 + 8) = *((_OWORD *)a2 + 8);
  v4[18] = (long long *)a2[18];
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  __n128 result = *(__n128 *)(a2 + 19);
  *(__n128 *)(v4 + 19) = result;
  v4[21] = (long long *)a2[21];
  a2[19] = 0;
  a2[20] = 0;
  a2[21] = 0;
  v4[22] = (long long *)a2[22];
  a1[1] += 184;
  return result;
}

uint64_t anonymous namespace'::readMeshChunkType0(uint64_t *a1, uint64_t a2, double *a3, void *a4, __n128 a5)
{
  unint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 + 2 > v6)
  {
    uint64_t v7 = "Number of vertices";
    goto LABEL_5;
  }
  a1[2] = v5 + 2;
  uint64_t v9 = v5 + 6;
  if (v5 + 6 > v6)
  {
    uint64_t v7 = "Number of indices";
    goto LABEL_5;
  }
  uint64_t v14 = *a1;
  int64_t v15 = *(unsigned __int16 *)(*a1 + v5);
  a1[2] = v9;
  unint64_t v141 = *(unsigned int *)(v14 + v9 - 4);
  int64_t v142 = v15;
  long long v16 = (char *)a4[10];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[12] - (void)v16) >> 2) < v15)
  {
    int64_t v17 = v15;
    char v18 = (char *)a4[11];
    uint64_t v19 = 12 * v17;
    uint64_t v20 = (char *)operator new(12 * v17);
    unint64_t v21 = &v20[12 * ((v18 - v16) / 12)];
    unint64_t v22 = v21;
    if (v18 != v16)
    {
      unint64_t v22 = &v20[12 * ((v18 - v16) / 12)];
      do
      {
        uint64_t v23 = *(void *)(v18 - 12);
        v18 -= 12;
        int v24 = *((_DWORD *)v18 + 2);
        *(void *)(v22 - 12) = v23;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v24;
      }
      while (v18 != v16);
    }
    a4[10] = v22;
    a4[11] = v21;
    a4[12] = &v20[v19];
    int64_t v15 = v142;
    if (v16) {
      operator delete(v16);
    }
  }
  if (v15)
  {
    for (unsigned int i = 0; i < v15; ++i)
    {
      while (1)
      {
        unint64_t v26 = a1[1];
        uint64_t v27 = a1[2];
        if (v27 + 2 > v26)
        {
          uint64_t v7 = "Vertex x value";
          goto LABEL_5;
        }
        a1[2] = v27 + 2;
        uint64_t v28 = v27 + 4;
        if (v27 + 4 > v26)
        {
          uint64_t v7 = "Vertex y value";
          goto LABEL_5;
        }
        uint64_t v29 = *a1;
        unsigned int v30 = *(unsigned __int16 *)(*a1 + v27);
        a1[2] = v28;
        unint64_t v31 = v27 + 6;
        if (v31 > v26)
        {
          uint64_t v7 = "Vertex z value";
          goto LABEL_5;
        }
        a1[2] = v31;
        unint64_t v32 = *(void *)a2;
        *(double *)&unint64_t v33 = *a3 + *(double *)a2 * (double)v30;
        float v34 = *(double *)&v33;
        LOWORD(v33) = *(_WORD *)(v29 + v28 - 2);
        float v35 = a3[1] + *(double *)(a2 + 8) * (double)v33;
        LOWORD(v32) = *(_WORD *)(v29 + v31 - 2);
        a5.n128_f64[0] = a3[2] + *(double *)(a2 + 16) * (double)v32;
        float v36 = a5.n128_f64[0];
        int v38 = (float *)a4[11];
        unint64_t v37 = a4[12];
        if ((unint64_t)v38 >= v37) {
          break;
        }
        float *v38 = v34;
        v38[1] = v35;
        v38[2] = v36;
        a4[11] = v38 + 3;
        if (++i >= v15) {
          goto LABEL_39;
        }
      }
      uint64_t v39 = (float *)a4[10];
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v38 - v39) + 1;
      if (v40 > 0x1555555555555555) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)v39) >> 2);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v42 = 0x1555555555555555;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        if (v42 > 0x1555555555555555) {
LABEL_126:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        BOOL v43 = (char *)operator new(12 * v42);
      }
      else
      {
        BOOL v43 = 0;
      }
      unsigned int v44 = (float *)&v43[4 * (v38 - v39)];
      *unsigned int v44 = v34;
      v44[1] = v35;
      v44[2] = v36;
      uint64_t v45 = v44;
      if (v38 == v39)
      {
        int64_t v15 = v142;
        uint64_t v50 = &v43[12 * v42];
        double v49 = v44 + 3;
        a4[10] = v44;
        a4[11] = v44 + 3;
        a4[12] = v50;
        if (!v38) {
          goto LABEL_35;
        }
      }
      else
      {
        int64_t v15 = v142;
        do
        {
          uint64_t v46 = *(void *)(v38 - 3);
          v38 -= 3;
          int v47 = *((_DWORD *)v38 + 2);
          *(void *)(v45 - 3) = v46;
          v45 -= 3;
          *((_DWORD *)v45 + 2) = v47;
        }
        while (v38 != v39);
        int v38 = (float *)a4[10];
        int v48 = &v43[12 * v42];
        double v49 = v44 + 3;
        a4[10] = v45;
        a4[11] = v44 + 3;
        a4[12] = v48;
        if (!v38) {
          goto LABEL_35;
        }
      }
      operator delete(v38);
LABEL_35:
      a4[11] = v49;
    }
  }
LABEL_39:
  size_t v51 = (float **)(a4 + 13);
  size_t v52 = (unsigned char *)a4[13];
  if (v15 > (unint64_t)((uint64_t)(a4[15] - (void)v52) >> 3))
  {
    size_t v53 = (unsigned char *)a4[14];
    uint64_t v54 = (char *)operator new(8 * v15);
    uint64_t v55 = v53 - v52;
    unint64_t v56 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v57 = v56;
    if (v53 == v52) {
      goto LABEL_51;
    }
    if ((unint64_t)(v55 - 8) >= 0x58)
    {
      uint64_t v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v53 - &v54[v55 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        uint64_t v58 = v55 >> 3;
        unint64_t v59 = ((unint64_t)(v55 - 8) >> 3) + 1;
        uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v61 = &v53[-v60];
        uint64_t v57 = &v56[-v60];
        size_t v62 = (__n128 *)&v54[8 * v58 - 16];
        uint64_t v63 = (__n128 *)(v53 - 16);
        uint64_t v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          a5 = *v63;
          v62[-1] = v63[-1];
          *size_t v62 = a5;
          v62 -= 2;
          v63 -= 2;
          v64 -= 4;
        }
        while (v64);
        size_t v53 = v61;
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          a4[13] = v57;
          a4[14] = v56;
          a4[15] = &v54[8 * v15];
          if (v52) {
            operator delete(v52);
          }
          goto LABEL_53;
        }
      }
    }
    else
    {
      uint64_t v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v65 = *((void *)v53 - 1);
      v53 -= 8;
      *((void *)v57 - 1) = v65;
      v57 -= 8;
    }
    while (v53 != v52);
    goto LABEL_51;
  }
LABEL_53:
  if (v15)
  {
    int v66 = 0;
    while (1)
    {
      while (1)
      {
        unint64_t v67 = a1[1];
        uint64_t v68 = a1[2];
        uint64_t v69 = v68 + 2;
        if (v68 + 2 > v67)
        {
          uint64_t v7 = "Texture u value";
          goto LABEL_5;
        }
        a1[2] = v69;
        unint64_t v70 = v68 + 4;
        if (v70 > v67)
        {
          uint64_t v7 = "Texture v value";
          goto LABEL_5;
        }
        uint64_t v71 = *a1;
        uint64_t v72 = *a1 + v69;
        a1[2] = v70;
        a5.n128_u16[0] = *(_WORD *)(v72 - 2);
        *(float *)&unsigned int v73 = (float)a5.n128_u32[0];
        float v74 = *(float *)&v73 * 0.000015259;
        LOWORD(v73) = *(_WORD *)(v71 + v70 - 2);
        a5.n128_f32[0] = (float)v73;
        float v75 = a5.n128_f32[0] * 0.000015259;
        __int16 v77 = (float *)a4[14];
        unint64_t v76 = a4[15];
        if ((unint64_t)v77 >= v76) {
          break;
        }
        *__int16 v77 = v74;
        v77[1] = v75;
        a4[14] = v77 + 2;
        if (++v66 >= v15) {
          goto LABEL_81;
        }
      }
      unsigned int v78 = *v51;
      uint64_t v79 = (char *)v77 - (char *)*v51;
      uint64_t v80 = v79 >> 3;
      unint64_t v81 = (v79 >> 3) + 1;
      if (v81 >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v82 = v76 - (void)v78;
      if (v82 >> 2 > v81) {
        unint64_t v81 = v82 >> 2;
      }
      unint64_t v83 = (unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v81;
      if (v83)
      {
        if (v83 >> 61) {
          goto LABEL_126;
        }
        uint64_t v84 = operator new(8 * v83);
        int v85 = (float *)&v84[8 * v80];
        *int v85 = v74;
        v85[1] = v75;
        unint64_t v86 = (char *)((char *)v77 - (char *)v78);
        if (v77 == v78)
        {
LABEL_71:
          int v89 = &v84[8 * v83];
          int v90 = v85 + 2;
          a4[13] = v85;
          a4[14] = v85 + 2;
          a4[15] = v89;
          if (!v77) {
            goto LABEL_80;
          }
LABEL_79:
          operator delete(v77);
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v84 = 0;
        int v85 = (float *)(8 * v80);
        *int v85 = v74;
        v85[1] = v75;
        unint64_t v86 = (char *)((char *)v77 - (char *)v78);
        if (v77 == v78) {
          goto LABEL_71;
        }
      }
      int v87 = v86 - 8;
      if ((unint64_t)(v86 - 8) < 0x58) {
        break;
      }
      long long v88 = v85;
      if ((unint64_t)((char *)v77 - &v84[v79]) < 0x20) {
        goto LABEL_77;
      }
      uint64_t v91 = ((unint64_t)v87 >> 3) + 1;
      uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v93 = &v77[v92 / 0xFFFFFFFFFFFFFFFCLL];
      long long v88 = &v85[v92 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v94 = (__n128 *)&v84[8 * v80 - 16];
      char v95 = (__n128 *)(v77 - 4);
      uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        a5 = *v95;
        v94[-1] = v95[-1];
        *uint64_t v94 = a5;
        v94 -= 2;
        v95 -= 2;
        v96 -= 4;
      }
      while (v96);
      __int16 v77 = v93;
      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_77;
      }
LABEL_78:
      __int16 v77 = *v51;
      uint64_t v98 = &v84[8 * v83];
      int v90 = v85 + 2;
      a4[13] = v88;
      a4[14] = v85 + 2;
      a4[15] = v98;
      if (v77) {
        goto LABEL_79;
      }
LABEL_80:
      a4[14] = v90;
      if (++v66 >= v15) {
        goto LABEL_81;
      }
    }
    long long v88 = v85;
    do
    {
LABEL_77:
      uint64_t v97 = *((void *)v77 - 1);
      v77 -= 2;
      *((void *)v88 - 1) = v97;
      v88 -= 2;
    }
    while (v77 != v78);
    goto LABEL_78;
  }
LABEL_81:
  int v99 = (unsigned char *)a4[16];
  uint64_t v140 = (void **)(a4 + 16);
  int v100 = v141;
  if (v141 <= (uint64_t)(a4[18] - (void)v99) >> 1) {
    goto LABEL_94;
  }
  uint64_t v101 = (unsigned char *)a4[17];
  unsigned int v102 = (char *)operator new(2 * v141);
  uint64_t v103 = v101 - v99;
  uint64_t v104 = &v102[(v101 - v99) & 0xFFFFFFFFFFFFFFFELL];
  unint64_t v105 = v104;
  if (v101 != v99)
  {
    if ((unint64_t)(v103 - 2) < 0x1E)
    {
      unint64_t v105 = &v102[(v101 - v99) & 0xFFFFFFFFFFFFFFFELL];
      do
      {
LABEL_91:
        __int16 v114 = *((_WORD *)v101 - 1);
        v101 -= 2;
        *((_WORD *)v105 - 1) = v114;
        v105 -= 2;
      }
      while (v101 != v99);
      goto LABEL_92;
    }
    unint64_t v105 = &v102[(v101 - v99) & 0xFFFFFFFFFFFFFFFELL];
    if ((unint64_t)(v101 - &v102[v103 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_91;
    }
    uint64_t v106 = v103 >> 1;
    unint64_t v107 = ((unint64_t)(v103 - 2) >> 1) + 1;
    unint64_t v108 = 2 * (v107 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v109 = &v101[-v108];
    unint64_t v105 = &v104[-v108];
    uint64_t v110 = &v102[2 * v106 - 16];
    unint64_t v111 = (long long *)(v101 - 16);
    unint64_t v112 = v107 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v113 = *v111;
      *((_OWORD *)v110 - 1) = *(v111 - 1);
      *(_OWORD *)uint64_t v110 = v113;
      v110 -= 32;
      v111 -= 2;
      v112 -= 16;
    }
    while (v112);
    uint64_t v101 = v109;
    if (v107 != (v107 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_91;
    }
  }
LABEL_92:
  a4[16] = v105;
  a4[17] = v104;
  a4[18] = &v102[2 * v141];
  int v100 = v141;
  if (v99) {
    operator delete(v99);
  }
LABEL_94:
  int v115 = v100;
  if (!v100) {
    return 1;
  }
  int v116 = 0;
  while (1)
  {
    unint64_t v117 = a1[2] + 2;
    if (v117 > a1[1])
    {
      uint64_t v7 = "Index value";
      goto LABEL_5;
    }
    a1[2] = v117;
    unsigned int v118 = *(unsigned __int16 *)(*a1 + v117 - 2);
    if (v118 >= v15) {
      break;
    }
    unint64_t v120 = (char *)a4[17];
    unint64_t v119 = a4[18];
    if ((unint64_t)v120 < v119)
    {
      *(_WORD *)unint64_t v120 = v118;
      a4[17] = v120 + 2;
      ++v116;
      uint64_t result = 1;
      if (v116 == v115) {
        return result;
      }
    }
    else
    {
      uint64_t v121 = (char *)*v140;
      int64_t v15 = v120 - (unsigned char *)*v140;
      if (v15 <= -3) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v122 = v15 >> 1;
      unint64_t v123 = v119 - (void)v121;
      if (v123 <= (v15 >> 1) + 1) {
        unint64_t v124 = v122 + 1;
      }
      else {
        unint64_t v124 = v123;
      }
      if (v123 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v125 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v125 = v124;
      }
      if (v125)
      {
        if (v125 < 0) {
          goto LABEL_126;
        }
        int v126 = operator new(2 * v125);
        long long v127 = &v126[2 * v122];
        _WORD *v127 = v118;
        uint64_t v128 = (uint64_t)(v127 + 1);
        int64_t v129 = v120 - v121;
        if (v120 == v121)
        {
LABEL_113:
          LODWORD(v15) = v142;
          goto LABEL_119;
        }
      }
      else
      {
        int v126 = 0;
        long long v127 = (_WORD *)(2 * v122);
        *(_WORD *)(2 * v122) = v118;
        uint64_t v128 = 2 * v122 + 2;
        int64_t v129 = v120 - v121;
        if (v120 == v121) {
          goto LABEL_113;
        }
      }
      unint64_t v130 = v129 - 2;
      if (v130 < 0x1E)
      {
        LODWORD(v15) = v142;
        do
        {
LABEL_118:
          __int16 v139 = *((_WORD *)v120 - 1);
          v120 -= 2;
          *--long long v127 = v139;
        }
        while (v120 != v121);
        goto LABEL_119;
      }
      unint64_t v131 = v120 - v126 - (v15 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v15) = v142;
      if (v131 < 0x20) {
        goto LABEL_118;
      }
      uint64_t v132 = (v130 >> 1) + 1;
      unint64_t v133 = 2 * (v132 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v134 = &v120[-v133];
      long long v127 = (_WORD *)((char *)v127 - v133);
      uint64_t v135 = &v126[2 * v122 - 16];
      uint64_t v136 = v120 - 16;
      unint64_t v137 = v132 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v138 = *(_OWORD *)v136;
        *(v135 - 1) = *((_OWORD *)v136 - 1);
        *uint64_t v135 = v138;
        v135 -= 2;
        v136 -= 32;
        v137 -= 16;
      }
      while (v137);
      unint64_t v120 = v134;
      if (v132 != (v132 & 0xFFFFFFFFFFFFFFF0)) {
        goto LABEL_118;
      }
LABEL_119:
      a4[16] = v127;
      a4[17] = v128;
      a4[18] = &v126[2 * v125];
      if (v121) {
        operator delete(v121);
      }
      int v115 = v141;
      a4[17] = v128;
      ++v116;
      uint64_t result = 1;
      if (v116 == v141) {
        return result;
      }
    }
  }
  uint64_t v7 = "Invalid index";
LABEL_5:
  printf("Failed to read C3m file - %s", v7);
  return 0;
}

uint64_t anonymous namespace'::readMeshChunkType1(uint64_t *a1, uint64_t a2, double *a3, void *a4, __n128 a5, double a6, double a7)
{
  unint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 + 2 > v8)
  {
    uint64_t v9 = "Number of vertices";
    goto LABEL_5;
  }
  a1[2] = v7 + 2;
  uint64_t v11 = v7 + 6;
  if (v7 + 6 > v8)
  {
    uint64_t v9 = "Number of indices";
    goto LABEL_5;
  }
  uint64_t v16 = *a1;
  int64_t v17 = *(unsigned __int16 *)(*a1 + v7);
  a1[2] = v11;
  unint64_t v143 = *(unsigned int *)(v16 + v11 - 4);
  int64_t v144 = v17;
  char v18 = (char *)a4[10];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[12] - (void)v18) >> 2) < v17)
  {
    int64_t v19 = v17;
    uint64_t v20 = (char *)a4[11];
    uint64_t v21 = 12 * v19;
    unint64_t v22 = (char *)operator new(12 * v19);
    uint64_t v23 = &v22[12 * ((v20 - v18) / 12)];
    int v24 = v23;
    if (v20 != v18)
    {
      int v24 = &v22[12 * ((v20 - v18) / 12)];
      do
      {
        uint64_t v25 = *(void *)(v20 - 12);
        v20 -= 12;
        int v26 = *((_DWORD *)v20 + 2);
        *(void *)(v24 - 12) = v25;
        v24 -= 12;
        *((_DWORD *)v24 + 2) = v26;
      }
      while (v20 != v18);
    }
    a4[10] = v24;
    a4[11] = v23;
    a4[12] = &v22[v21];
    int64_t v17 = v144;
    if (v18) {
      operator delete(v18);
    }
  }
  if (v17)
  {
    for (unsigned int i = 0; i < v17; ++i)
    {
      while (1)
      {
        unint64_t v28 = a1[1];
        uint64_t v29 = a1[2];
        uint64_t v30 = v29 + 1;
        if (v29 + 1 > v28)
        {
          uint64_t v9 = "Vertex x value";
          goto LABEL_5;
        }
        a1[2] = v30;
        uint64_t v31 = v29 + 2;
        if (v29 + 2 > v28)
        {
          uint64_t v9 = "Vertex y value";
          goto LABEL_5;
        }
        uint64_t v32 = *a1;
        unsigned int v33 = *(unsigned __int8 *)(*a1 + v29);
        a1[2] = v31;
        unint64_t v34 = v29 + 3;
        if (v34 > v28)
        {
          uint64_t v9 = "Vertex z value";
          goto LABEL_5;
        }
        unint64_t v35 = *(void *)a2;
        double v36 = *(double *)(a2 + 8);
        double v37 = a3[1];
        double v38 = *a3 + *(double *)a2 * (double)v33;
        LOBYTE(v35) = *(unsigned char *)(v32 + v30);
        a1[2] = v34;
        float v39 = v38;
        float v40 = v37 + v36 * (double)v35;
        LOBYTE(v35) = *(unsigned char *)(v32 + v31);
        a7 = a3[2];
        a5.n128_f64[0] = a7 + *(double *)(a2 + 16) * (double)v35;
        float v41 = a5.n128_f64[0];
        BOOL v43 = (float *)a4[11];
        unint64_t v42 = a4[12];
        if ((unint64_t)v43 >= v42) {
          break;
        }
        *BOOL v43 = v39;
        v43[1] = v40;
        void v43[2] = v41;
        a4[11] = v43 + 3;
        if (++i >= v17) {
          goto LABEL_39;
        }
      }
      unsigned int v44 = (float *)a4[10];
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v43 - v44) + 1;
      if (v45 > 0x1555555555555555) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (void)v44) >> 2);
      if (2 * v46 > v45) {
        unint64_t v45 = 2 * v46;
      }
      if (v46 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v47 = 0x1555555555555555;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        if (v47 > 0x1555555555555555) {
LABEL_126:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        int v48 = (char *)operator new(12 * v47);
      }
      else
      {
        int v48 = 0;
      }
      double v49 = (float *)&v48[4 * (v43 - v44)];
      *double v49 = v39;
      v49[1] = v40;
      v49[2] = v41;
      uint64_t v50 = v49;
      if (v43 == v44)
      {
        int64_t v17 = v144;
        uint64_t v55 = &v48[12 * v47];
        uint64_t v54 = v49 + 3;
        a4[10] = v49;
        a4[11] = v49 + 3;
        a4[12] = v55;
        if (!v43) {
          goto LABEL_35;
        }
      }
      else
      {
        int64_t v17 = v144;
        do
        {
          uint64_t v51 = *(void *)(v43 - 3);
          v43 -= 3;
          int v52 = *((_DWORD *)v43 + 2);
          *(void *)(v50 - 3) = v51;
          v50 -= 3;
          *((_DWORD *)v50 + 2) = v52;
        }
        while (v43 != v44);
        BOOL v43 = (float *)a4[10];
        size_t v53 = &v48[12 * v47];
        uint64_t v54 = v49 + 3;
        a4[10] = v50;
        a4[11] = v49 + 3;
        a4[12] = v53;
        if (!v43) {
          goto LABEL_35;
        }
      }
      operator delete(v43);
LABEL_35:
      a4[11] = v54;
    }
  }
LABEL_39:
  unint64_t v56 = (float **)(a4 + 13);
  uint64_t v57 = (unsigned char *)a4[13];
  if (v17 > (unint64_t)((uint64_t)(a4[15] - (void)v57) >> 3))
  {
    uint64_t v58 = (unsigned char *)a4[14];
    unint64_t v59 = (char *)operator new(8 * v17);
    uint64_t v60 = v58 - v57;
    unsigned int v61 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
    size_t v62 = v61;
    if (v58 == v57) {
      goto LABEL_51;
    }
    if ((unint64_t)(v60 - 8) >= 0x58)
    {
      size_t v62 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v58 - &v59[v60 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        uint64_t v63 = v60 >> 3;
        unint64_t v64 = ((unint64_t)(v60 - 8) >> 3) + 1;
        uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        int v66 = &v58[-v65];
        size_t v62 = &v61[-v65];
        unint64_t v67 = (__n128 *)&v59[8 * v63 - 16];
        uint64_t v68 = (__n128 *)(v58 - 16);
        uint64_t v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          a5 = *v68;
          v67[-1] = v68[-1];
          *unint64_t v67 = a5;
          v67 -= 2;
          v68 -= 2;
          v69 -= 4;
        }
        while (v69);
        uint64_t v58 = v66;
        if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          a4[13] = v62;
          a4[14] = v61;
          a4[15] = &v59[8 * v17];
          if (v57) {
            operator delete(v57);
          }
          goto LABEL_53;
        }
      }
    }
    else
    {
      size_t v62 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v70 = *((void *)v58 - 1);
      v58 -= 8;
      *((void *)v62 - 1) = v70;
      v62 -= 8;
    }
    while (v58 != v57);
    goto LABEL_51;
  }
LABEL_53:
  if (v17)
  {
    int v71 = 0;
    while (1)
    {
      while (1)
      {
        unint64_t v73 = a1[1];
        uint64_t v72 = a1[2];
        uint64_t v74 = v72 + 1;
        if (v72 + 1 > v73)
        {
          uint64_t v9 = "Texture u value";
          goto LABEL_5;
        }
        a1[2] = v74;
        if (v72 + 2 > v73)
        {
          uint64_t v9 = "Texture v value";
          goto LABEL_5;
        }
        uint64_t v75 = *a1;
        a5.n128_u8[0] = *(unsigned char *)(*a1 + v72);
        a1[2] = v72 + 2;
        LOBYTE(a7) = *(unsigned char *)(v75 + v74);
        float v76 = (float)a5.n128_u32[0] * 0.0039216;
        a5.n128_f32[0] = (float)LODWORD(a7);
        float v77 = (float)LODWORD(a7) * 0.0039216;
        uint64_t v79 = (float *)a4[14];
        unint64_t v78 = a4[15];
        if ((unint64_t)v79 >= v78) {
          break;
        }
        *uint64_t v79 = v76;
        v79[1] = v77;
        a4[14] = v79 + 2;
        if (++v71 >= v17) {
          goto LABEL_81;
        }
      }
      uint64_t v80 = *v56;
      uint64_t v81 = (char *)v79 - (char *)*v56;
      uint64_t v82 = v81 >> 3;
      unint64_t v83 = (v81 >> 3) + 1;
      if (v83 >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v84 = v78 - (void)v80;
      if (v84 >> 2 > v83) {
        unint64_t v83 = v84 >> 2;
      }
      unint64_t v85 = (unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v83;
      if (v85)
      {
        if (v85 >> 61) {
          goto LABEL_126;
        }
        unint64_t v86 = operator new(8 * v85);
        int v87 = (float *)&v86[8 * v82];
        *int v87 = v76;
        v87[1] = v77;
        long long v88 = (char *)((char *)v79 - (char *)v80);
        if (v79 == v80)
        {
LABEL_71:
          uint64_t v91 = &v86[8 * v85];
          uint64_t v92 = v87 + 2;
          a4[13] = v87;
          a4[14] = v87 + 2;
          a4[15] = v91;
          if (!v79) {
            goto LABEL_80;
          }
LABEL_79:
          operator delete(v79);
          goto LABEL_80;
        }
      }
      else
      {
        unint64_t v86 = 0;
        int v87 = (float *)(8 * v82);
        *int v87 = v76;
        v87[1] = v77;
        long long v88 = (char *)((char *)v79 - (char *)v80);
        if (v79 == v80) {
          goto LABEL_71;
        }
      }
      int v89 = v88 - 8;
      if ((unint64_t)(v88 - 8) < 0x58) {
        break;
      }
      int v90 = v87;
      if ((unint64_t)((char *)v79 - &v86[v81]) < 0x20) {
        goto LABEL_77;
      }
      uint64_t v93 = ((unint64_t)v89 >> 3) + 1;
      uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
      char v95 = &v79[v94 / 0xFFFFFFFFFFFFFFFCLL];
      int v90 = &v87[v94 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v96 = (__n128 *)&v86[8 * v82 - 16];
      uint64_t v97 = (__n128 *)(v79 - 4);
      uint64_t v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        a5 = *v97;
        v96[-1] = v97[-1];
        *uint64_t v96 = a5;
        v96 -= 2;
        v97 -= 2;
        v98 -= 4;
      }
      while (v98);
      uint64_t v79 = v95;
      if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_77;
      }
LABEL_78:
      uint64_t v79 = *v56;
      int v100 = &v86[8 * v85];
      uint64_t v92 = v87 + 2;
      a4[13] = v90;
      a4[14] = v87 + 2;
      a4[15] = v100;
      if (v79) {
        goto LABEL_79;
      }
LABEL_80:
      a4[14] = v92;
      if (++v71 >= v17) {
        goto LABEL_81;
      }
    }
    int v90 = v87;
    do
    {
LABEL_77:
      uint64_t v99 = *((void *)v79 - 1);
      v79 -= 2;
      *((void *)v90 - 1) = v99;
      v90 -= 2;
    }
    while (v79 != v80);
    goto LABEL_78;
  }
LABEL_81:
  uint64_t v101 = (unsigned char *)a4[16];
  int64_t v142 = (void **)(a4 + 16);
  int v102 = v143;
  if (v143 <= (uint64_t)(a4[18] - (void)v101) >> 1) {
    goto LABEL_94;
  }
  uint64_t v103 = (unsigned char *)a4[17];
  uint64_t v104 = (char *)operator new(2 * v143);
  uint64_t v105 = v103 - v101;
  uint64_t v106 = &v104[(v103 - v101) & 0xFFFFFFFFFFFFFFFELL];
  unint64_t v107 = v106;
  if (v103 != v101)
  {
    if ((unint64_t)(v105 - 2) < 0x1E)
    {
      unint64_t v107 = &v104[(v103 - v101) & 0xFFFFFFFFFFFFFFFELL];
      do
      {
LABEL_91:
        __int16 v116 = *((_WORD *)v103 - 1);
        v103 -= 2;
        *((_WORD *)v107 - 1) = v116;
        v107 -= 2;
      }
      while (v103 != v101);
      goto LABEL_92;
    }
    unint64_t v107 = &v104[(v103 - v101) & 0xFFFFFFFFFFFFFFFELL];
    if ((unint64_t)(v103 - &v104[v105 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_91;
    }
    uint64_t v108 = v105 >> 1;
    unint64_t v109 = ((unint64_t)(v105 - 2) >> 1) + 1;
    unint64_t v110 = 2 * (v109 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v111 = &v103[-v110];
    unint64_t v107 = &v106[-v110];
    unint64_t v112 = &v104[2 * v108 - 16];
    long long v113 = (long long *)(v103 - 16);
    unint64_t v114 = v109 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v115 = *v113;
      *((_OWORD *)v112 - 1) = *(v113 - 1);
      *(_OWORD *)unint64_t v112 = v115;
      v112 -= 32;
      v113 -= 2;
      v114 -= 16;
    }
    while (v114);
    uint64_t v103 = v111;
    if (v109 != (v109 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_91;
    }
  }
LABEL_92:
  a4[16] = v107;
  a4[17] = v106;
  a4[18] = &v104[2 * v143];
  int v102 = v143;
  if (v101) {
    operator delete(v101);
  }
LABEL_94:
  int v117 = v102;
  if (!v102) {
    return 1;
  }
  int v118 = 0;
  while (1)
  {
    unint64_t v119 = a1[2] + 2;
    if (v119 > a1[1])
    {
      uint64_t v9 = "Index value";
      goto LABEL_5;
    }
    a1[2] = v119;
    unsigned int v120 = *(unsigned __int16 *)(*a1 + v119 - 2);
    if (v120 >= v17) {
      break;
    }
    uint64_t v122 = (char *)a4[17];
    unint64_t v121 = a4[18];
    if ((unint64_t)v122 < v121)
    {
      *(_WORD *)uint64_t v122 = v120;
      a4[17] = v122 + 2;
      ++v118;
      uint64_t result = 1;
      if (v118 == v117) {
        return result;
      }
    }
    else
    {
      unint64_t v123 = (char *)*v142;
      int64_t v17 = v122 - (unsigned char *)*v142;
      if (v17 <= -3) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v124 = v17 >> 1;
      unint64_t v125 = v121 - (void)v123;
      if (v125 <= (v17 >> 1) + 1) {
        unint64_t v126 = v124 + 1;
      }
      else {
        unint64_t v126 = v125;
      }
      if (v125 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v127 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v127 = v126;
      }
      if (v127)
      {
        if (v127 < 0) {
          goto LABEL_126;
        }
        uint64_t v128 = operator new(2 * v127);
        int64_t v129 = &v128[2 * v124];
        *int64_t v129 = v120;
        uint64_t v130 = (uint64_t)(v129 + 1);
        int64_t v131 = v122 - v123;
        if (v122 == v123)
        {
LABEL_113:
          LODWORD(v17) = v144;
          goto LABEL_119;
        }
      }
      else
      {
        uint64_t v128 = 0;
        int64_t v129 = (_WORD *)(2 * v124);
        *(_WORD *)(2 * v124) = v120;
        uint64_t v130 = 2 * v124 + 2;
        int64_t v131 = v122 - v123;
        if (v122 == v123) {
          goto LABEL_113;
        }
      }
      unint64_t v132 = v131 - 2;
      if (v132 < 0x1E)
      {
        LODWORD(v17) = v144;
        do
        {
LABEL_118:
          __int16 v141 = *((_WORD *)v122 - 1);
          v122 -= 2;
          *--int64_t v129 = v141;
        }
        while (v122 != v123);
        goto LABEL_119;
      }
      unint64_t v133 = v122 - v128 - (v17 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v17) = v144;
      if (v133 < 0x20) {
        goto LABEL_118;
      }
      uint64_t v134 = (v132 >> 1) + 1;
      unint64_t v135 = 2 * (v134 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v136 = &v122[-v135];
      int64_t v129 = (_WORD *)((char *)v129 - v135);
      unint64_t v137 = &v128[2 * v124 - 16];
      long long v138 = v122 - 16;
      unint64_t v139 = v134 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v140 = *(_OWORD *)v138;
        *(v137 - 1) = *((_OWORD *)v138 - 1);
        _OWORD *v137 = v140;
        v137 -= 2;
        v138 -= 32;
        v139 -= 16;
      }
      while (v139);
      uint64_t v122 = v136;
      if (v134 != (v134 & 0xFFFFFFFFFFFFFFF0)) {
        goto LABEL_118;
      }
LABEL_119:
      a4[16] = v129;
      a4[17] = v130;
      a4[18] = &v128[2 * v127];
      if (v123) {
        operator delete(v123);
      }
      int v117 = v143;
      a4[17] = v130;
      ++v118;
      uint64_t result = 1;
      if (v118 == v143) {
        return result;
      }
    }
  }
  uint64_t v9 = "Invalid index";
LABEL_5:
  printf("Failed to read C3m file - %s", v9);
  return 0;
}

uint64_t anonymous namespace'::readMeshChunkType2(unsigned __int16 **a1, float64x2_t *a2, float64x2_t *a3, void *a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  v126[0] = *a1;
  v126[1] = v5;
  char v127 = 0;
  if (v5 <= 1)
  {
    unint64_t v6 = "Number of vertices";
    goto LABEL_5;
  }
  if (v5 <= 5)
  {
    unint64_t v6 = "Number of indices";
    goto LABEL_5;
  }
  int64_t v11 = *v4;
  size_t __sz = *(unsigned int *)(v4 + 1);
  v126[2] = 6;
  long long v12 = (char *)a4[10];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[12] - (void)v12) >> 2) < v11)
  {
    uint64_t v13 = (char *)a4[11];
    uint64_t v14 = (char *)operator new(12 * v11);
    int64_t v15 = &v14[12 * ((v13 - v12) / 12)];
    uint64_t v16 = v15;
    if (v13 != v12)
    {
      uint64_t v16 = &v14[12 * ((v13 - v12) / 12)];
      do
      {
        uint64_t v17 = *(void *)(v13 - 12);
        v13 -= 12;
        int v18 = *((_DWORD *)v13 + 2);
        *(void *)(v16 - 12) = v17;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v18;
      }
      while (v13 != v12);
    }
    a4[10] = v16;
    a4[11] = v15;
    a4[12] = &v14[12 * v11];
    if (v12) {
      operator delete(v12);
    }
  }
  int64_t v19 = (unsigned char *)a4[13];
  unsigned int v120 = (float **)(a4 + 13);
  if (v11 > (unint64_t)((uint64_t)(a4[15] - (void)v19) >> 3))
  {
    uint64_t v20 = (unsigned char *)a4[14];
    uint64_t v21 = (char *)operator new(8 * v11);
    uint64_t v22 = v20 - v19;
    uint64_t v23 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
    int v24 = v23;
    if (v20 == v19) {
      goto LABEL_22;
    }
    if ((unint64_t)(v22 - 8) >= 0x58)
    {
      int v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
      if (v20 - v21 - (v22 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        uint64_t v25 = v22 >> 3;
        unint64_t v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
        uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v28 = &v20[-v27];
        int v24 = &v23[-v27];
        uint64_t v29 = &v21[8 * v25 - 16];
        uint64_t v30 = (long long *)(v20 - 16);
        uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *v30;
          *((_OWORD *)v29 - 1) = *(v30 - 1);
          *(_OWORD *)uint64_t v29 = v32;
          v29 -= 32;
          v30 -= 2;
          v31 -= 4;
        }
        while (v31);
        uint64_t v20 = v28;
        if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          a4[13] = v24;
          a4[14] = v23;
          a4[15] = &v21[8 * v11];
          if (v19) {
            operator delete(v19);
          }
          goto LABEL_24;
        }
      }
    }
    else
    {
      int v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v33 = *((void *)v20 - 1);
      v20 -= 8;
      *((void *)v24 - 1) = v33;
      v24 -= 8;
    }
    while (v20 != v19);
    goto LABEL_22;
  }
LABEL_24:
  unsigned int v121 = v11;
  if (v11)
  {
    unsigned int v34 = 0;
    while (1)
    {
      geo::ibitstream::readUIntBits((uint64_t)v126, 0xAu, (uint64_t)v124);
      if (!v124[0])
      {
        unint64_t v6 = "Vertex x value";
        goto LABEL_5;
      }
      unsigned int v35 = v125;
      geo::ibitstream::readUIntBits((uint64_t)v126, 0xAu, (uint64_t)v124);
      if (!v124[0])
      {
        unint64_t v6 = "Vertex y value";
        goto LABEL_5;
      }
      unsigned int v36 = v125;
      geo::ibitstream::readUIntBits((uint64_t)v126, 0xAu, (uint64_t)v124);
      if (!v124[0])
      {
        unint64_t v6 = "Vertex z value";
        goto LABEL_5;
      }
      unsigned int v37 = v125;
      geo::ibitstream::readUIntBits((uint64_t)v126, 9u, (uint64_t)v124);
      if (!v124[0])
      {
        unint64_t v6 = "Texture u value";
        goto LABEL_5;
      }
      unsigned int v38 = v125;
      geo::ibitstream::readUIntBits((uint64_t)v126, 9u, (uint64_t)v124);
      if (!v124[0])
      {
        unint64_t v6 = "Texture v value";
        goto LABEL_5;
      }
      unsigned int v39 = v125;
      v40.i64[0] = v35;
      v40.i64[1] = v36;
      float32x2_t v41 = vcvt_f32_f64(vmlaq_f64(*a3, *a2, vcvtq_f64_u64(v40)));
      float v42 = a3[1].f64[0] + a2[1].f64[0] * (double)v37;
      unsigned int v44 = (float32x2_t *)a4[11];
      unint64_t v43 = a4[12];
      if ((unint64_t)v44 >= v43)
      {
        unint64_t v46 = (float32x2_t *)a4[10];
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v46) >> 2) + 1;
        if (v47 > 0x1555555555555555) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (void)v46) >> 2);
        if (2 * v48 > v47) {
          unint64_t v47 = 2 * v48;
        }
        if (v48 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v49 = 0x1555555555555555;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          if (v49 > 0x1555555555555555) {
            goto LABEL_120;
          }
          uint64_t v50 = (char *)operator new(12 * v49);
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (float32x2_t *)&v50[4 * (((char *)v44 - (char *)v46) >> 2)];
        *uint64_t v51 = v41;
        v51[1].f32[0] = v42;
        int v52 = v51;
        if (v44 != v46)
        {
          do
          {
            float32x2_t v53 = *(float32x2_t *)((char *)v44 - 12);
            unsigned int v44 = (float32x2_t *)((char *)v44 - 12);
            __int32 v54 = v44[1].i32[0];
            *(float32x2_t *)((char *)v52 - 12) = v53;
            int v52 = (float32x2_t *)((char *)v52 - 12);
            v52[1].i32[0] = v54;
          }
          while (v44 != v46);
          unsigned int v44 = (float32x2_t *)a4[10];
        }
        unint64_t v45 = (_DWORD *)&v51[1] + 1;
        a4[10] = v52;
        a4[11] = (char *)v51 + 12;
        a4[12] = &v50[12 * v49];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *unsigned int v44 = v41;
        v44[1].f32[0] = v42;
        unint64_t v45 = (_DWORD *)&v44[1] + 1;
      }
      a4[11] = v45;
      float v55 = (float)v38 * 0.0019569;
      float v56 = (float)v39 * 0.0019569;
      uint64_t v58 = (float *)a4[14];
      unint64_t v57 = a4[15];
      if ((unint64_t)v58 < v57)
      {
        *uint64_t v58 = v55;
        v58[1] = v56;
        int64_t v11 = (int64_t)(v58 + 2);
        goto LABEL_27;
      }
      unint64_t v59 = *v120;
      uint64_t v60 = (char *)v58 - (char *)*v120;
      uint64_t v61 = v60 >> 3;
      unint64_t v62 = (v60 >> 3) + 1;
      if (v62 >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v63 = v57 - (void)v59;
      if (v63 >> 2 > v62) {
        unint64_t v62 = v63 >> 2;
      }
      unint64_t v64 = (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v62;
      if (v64)
      {
        if (v64 >> 61) {
LABEL_120:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v65 = operator new(8 * v64);
        int v66 = (float *)&v65[8 * v61];
        *int v66 = v55;
        v66[1] = v56;
        unint64_t v67 = (char *)((char *)v58 - (char *)v59);
        if (v58 == v59)
        {
LABEL_63:
          int64_t v11 = (int64_t)(v66 + 2);
          a4[13] = v66;
          a4[14] = v66 + 2;
          a4[15] = &v65[8 * v64];
          if (!v58) {
            goto LABEL_27;
          }
LABEL_71:
          operator delete(v58);
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v65 = 0;
        int v66 = (float *)(8 * v61);
        *int v66 = v55;
        v66[1] = v56;
        unint64_t v67 = (char *)((char *)v58 - (char *)v59);
        if (v58 == v59) {
          goto LABEL_63;
        }
      }
      uint64_t v68 = v67 - 8;
      if ((unint64_t)(v67 - 8) < 0x58) {
        break;
      }
      uint64_t v69 = v66;
      if ((unint64_t)((char *)v58 - v65 - v60) < 0x20) {
        goto LABEL_69;
      }
      uint64_t v70 = ((unint64_t)v68 >> 3) + 1;
      uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v72 = &v58[v71 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v69 = &v66[v71 / 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v73 = &v65[8 * v61 - 16];
      uint64_t v74 = v58 - 4;
      uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        _OWORD *v73 = v76;
        v73 -= 2;
        v74 -= 8;
        v75 -= 4;
      }
      while (v75);
      uint64_t v58 = v72;
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_69;
      }
LABEL_70:
      uint64_t v58 = *v120;
      int64_t v11 = (int64_t)(v66 + 2);
      a4[13] = v69;
      a4[14] = v66 + 2;
      a4[15] = &v65[8 * v64];
      if (v58) {
        goto LABEL_71;
      }
LABEL_27:
      a4[14] = v11;
      ++v34;
      LODWORD(v11) = v121;
      if (v34 >= v121) {
        goto LABEL_72;
      }
    }
    uint64_t v69 = v66;
    do
    {
LABEL_69:
      uint64_t v77 = *((void *)v58 - 1);
      v58 -= 2;
      *((void *)v69 - 1) = v77;
      v69 -= 2;
    }
    while (v58 != v59);
    goto LABEL_70;
  }
LABEL_72:
  unint64_t v78 = (unsigned char *)a4[16];
  unint64_t v123 = (void **)(a4 + 16);
  int v79 = __sz;
  if (__sz <= (uint64_t)(a4[18] - (void)v78) >> 1) {
    goto LABEL_88;
  }
  uint64_t v80 = (unsigned char *)a4[17];
  uint64_t v81 = (char *)operator new(2 * __sz);
  uint64_t v82 = v80 - v78;
  unint64_t v83 = &v81[(v80 - v78) & 0xFFFFFFFFFFFFFFFELL];
  uint64_t v84 = v83;
  if (v80 != v78)
  {
    if ((unint64_t)(v82 - 2) < 0x1E)
    {
      uint64_t v84 = &v81[(v80 - v78) & 0xFFFFFFFFFFFFFFFELL];
      do
      {
LABEL_85:
        __int16 v93 = *((_WORD *)v80 - 1);
        v80 -= 2;
        *((_WORD *)v84 - 1) = v93;
        v84 -= 2;
      }
      while (v80 != v78);
      goto LABEL_86;
    }
    uint64_t v84 = &v81[(v80 - v78) & 0xFFFFFFFFFFFFFFFELL];
    if ((unint64_t)(v80 - &v81[v82 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_85;
    }
    uint64_t v85 = v82 >> 1;
    unint64_t v86 = ((unint64_t)(v82 - 2) >> 1) + 1;
    unint64_t v87 = 2 * (v86 & 0xFFFFFFFFFFFFFFF0);
    long long v88 = &v80[-v87];
    uint64_t v84 = &v83[-v87];
    int v89 = &v81[2 * v85 - 16];
    int v90 = (long long *)(v80 - 16);
    unint64_t v91 = v86 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v92 = *v90;
      *((_OWORD *)v89 - 1) = *(v90 - 1);
      *(_OWORD *)int v89 = v92;
      v89 -= 32;
      v90 -= 2;
      v91 -= 16;
    }
    while (v91);
    uint64_t v80 = v88;
    if (v86 != (v86 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_85;
    }
  }
LABEL_86:
  a4[16] = v84;
  a4[17] = v83;
  a4[18] = &v81[2 * __sz];
  int v79 = __sz;
  if (v78) {
    operator delete(v78);
  }
LABEL_88:
  int v94 = v79;
  if (!v79) {
    return 1;
  }
  int v95 = 0;
  while (1)
  {
    unint64_t v96 = (unint64_t)(a1[2] + 1);
    if (v96 > (unint64_t)a1[1])
    {
      unint64_t v6 = "Index value";
      goto LABEL_5;
    }
    a1[2] = (unsigned __int16 *)v96;
    unsigned int v97 = *(unsigned __int16 *)((char *)*a1 + v96 - 2);
    if (v97 >= v11) {
      break;
    }
    uint64_t v99 = (char *)a4[17];
    unint64_t v98 = a4[18];
    if ((unint64_t)v99 < v98)
    {
      *(_WORD *)uint64_t v99 = v97;
      a4[17] = v99 + 2;
      ++v95;
      uint64_t result = 1;
      if (v95 == v94) {
        return result;
      }
    }
    else
    {
      int v100 = (char *)*v123;
      int64_t v11 = v99 - (unsigned char *)*v123;
      if (v11 <= -3) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v101 = v11 >> 1;
      unint64_t v102 = v98 - (void)v100;
      if (v102 <= (v11 >> 1) + 1) {
        unint64_t v103 = v101 + 1;
      }
      else {
        unint64_t v103 = v102;
      }
      if (v102 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v104 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v104 = v103;
      }
      if (v104)
      {
        if (v104 < 0) {
          goto LABEL_120;
        }
        uint64_t v105 = operator new(2 * v104);
        uint64_t v106 = &v105[2 * v101];
        *uint64_t v106 = v97;
        uint64_t v107 = (uint64_t)(v106 + 1);
        int64_t v108 = v99 - v100;
        if (v99 == v100)
        {
LABEL_107:
          LODWORD(v11) = v121;
          goto LABEL_113;
        }
      }
      else
      {
        uint64_t v105 = 0;
        uint64_t v106 = (_WORD *)(2 * v101);
        *(_WORD *)(2 * v101) = v97;
        uint64_t v107 = 2 * v101 + 2;
        int64_t v108 = v99 - v100;
        if (v99 == v100) {
          goto LABEL_107;
        }
      }
      unint64_t v109 = v108 - 2;
      if (v109 < 0x1E)
      {
        LODWORD(v11) = v121;
        do
        {
LABEL_112:
          __int16 v118 = *((_WORD *)v99 - 1);
          v99 -= 2;
          *--uint64_t v106 = v118;
        }
        while (v99 != v100);
        goto LABEL_113;
      }
      unint64_t v110 = v99 - v105 - (v11 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v11) = v121;
      if (v110 < 0x20) {
        goto LABEL_112;
      }
      uint64_t v111 = (v109 >> 1) + 1;
      unint64_t v112 = 2 * (v111 & 0xFFFFFFFFFFFFFFF0);
      long long v113 = &v99[-v112];
      uint64_t v106 = (_WORD *)((char *)v106 - v112);
      unint64_t v114 = &v105[2 * v101 - 16];
      long long v115 = v99 - 16;
      unint64_t v116 = v111 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v117 = *(_OWORD *)v115;
        *(v114 - 1) = *((_OWORD *)v115 - 1);
        _OWORD *v114 = v117;
        v114 -= 2;
        v115 -= 32;
        v116 -= 16;
      }
      while (v116);
      uint64_t v99 = v113;
      if (v111 != (v111 & 0xFFFFFFFFFFFFFFF0)) {
        goto LABEL_112;
      }
LABEL_113:
      a4[16] = v106;
      a4[17] = v107;
      a4[18] = &v105[2 * v104];
      if (v100) {
        operator delete(v100);
      }
      int v94 = __sz;
      a4[17] = v107;
      ++v95;
      uint64_t result = 1;
      if (v95 == __sz) {
        return result;
      }
    }
  }
  unint64_t v6 = "Invalid index";
LABEL_5:
  printf("Failed to read C3m file - %s", v6);
  return 0;
}

void geo::small_vector_base<geo::c3m::SubMesh>::resize(char **a1, unint64_t a2)
{
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  if (v6 <= a2)
  {
    if (v6 >= a2) {
      return;
    }
    unint64_t v7 = (unint64_t)a1[3];
    if (v7 >= a2)
    {
      uint64_t v17 = &v5[24 * a2];
      if (v4 == v17) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v8 = a1[2];
      unint64_t v9 = (1 << -(char)__clz(v7 + 1));
      if (v9 <= a2) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = v9;
      }
      int64_t v11 = (char *)malloc_type_malloc(24 * v10, 0x1000040504FFAC1uLL);
      long long v12 = v11;
      uint64_t v13 = *a1;
      uint64_t v14 = a1[1];
      if (*a1 != v14)
      {
        int64_t v15 = v11;
        do
        {
          long long v16 = *(_OWORD *)v13;
          *((void *)v15 + 2) = *((void *)v13 + 2);
          *(_OWORD *)int64_t v15 = v16;
          v15 += 24;
          v13 += 24;
        }
        while (v13 != v14);
      }
      if (v5 != v8) {
        free(*a1);
      }
      *a1 = v12;
      unint64_t v4 = &v12[24 * v6];
      a1[3] = (char *)v10;
      uint64_t v17 = &v12[24 * a2];
      if (v4 == v17) {
        goto LABEL_18;
      }
    }
    do
    {
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
      *(void *)unint64_t v4 = 0;
      *((_DWORD *)v4 + 5) = -1;
      v4 += 24;
    }
    while (v4 != v17);
    unint64_t v4 = v17;
    goto LABEL_18;
  }
  unint64_t v4 = &v5[24 * a2];
LABEL_18:
  a1[1] = v4;
}

void anonymous namespace'::decodeEdgebreakerMesh(uint64_t *a1, uint64_t a2, int a3, int *a4, uint64_t a5, uint64_t *a6, void *a7, std::vector<int> *a8, std::vector<int> *a9, uint64_t a10, uint64_t a11)
{
  if (a3 == 8)
  {
    unsigned int v15 = 3 * a4[9];
    unsigned int v16 = v15;
  }
  else
  {
    unsigned int v16 = a4[8];
    unsigned int v15 = 3 * a4[9];
  }
  unint64_t v17 = a4[10];
  unint64_t v18 = v16;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  if (v16 <= v19)
  {
    if (v16 < v19) {
      *(void *)(a5 + 8) = *(void *)a5 + 12 * v16;
    }
  }
  else
  {
    std::vector<gm::Matrix<float,3,1>>::__append((char **)a5, v16 - v19);
  }
  unint64_t v20 = (a6[1] - *a6) >> 3;
  if (v18 <= v20)
  {
    if (v18 < v20) {
      a6[1] = *a6 + 8 * v18;
    }
  }
  else
  {
    std::vector<gm::Matrix<float,2,1>>::__append(a6, v18 - v20);
  }
  unint64_t v21 = (uint64_t)(a7[1] - *a7) >> 1;
  if (v15 <= v21)
  {
    if (v15 < v21) {
      a7[1] = *a7 + 2 * v15;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((uint64_t)a7, v15 - v21);
  }
  unint64_t v22 = a8->__end_ - a8->__begin_;
  if (v17 <= v22)
  {
    if (v17 < v22) {
      a8->__end_ = &a8->__begin_[v17];
    }
  }
  else
  {
    std::vector<int>::__append(a8, v17 - v22);
  }
  unint64_t v23 = a9->__end_ - a9->__begin_;
  if (v17 <= v23)
  {
    if (v17 < v23) {
      a9->__end_ = &a9->__begin_[v17];
    }
  }
  else
  {
    std::vector<int>::__append(a9, v17 - v23);
  }
  uint64_t v25 = *(unsigned char **)a11;
  int v24 = *(char **)(a11 + 8);
  uint64_t v26 = (uint64_t)&v24[-*(void *)a11];
  uint64_t v27 = v26 >> 2;
  unint64_t v28 = v17 - (v26 >> 2);
  if (v17 <= v26 >> 2)
  {
    if (v17 < v26 >> 2) {
      *(void *)(a11 + 8) = &v25[4 * v17];
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a11 + 16);
    if (v28 <= (v29 - (uint64_t)v24) >> 2)
    {
      unsigned int v39 = &v24[4 * v28];
      memset(v24, 255, ((4 * v17 - v26 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      *(void *)(a11 + 8) = v39;
    }
    else
    {
      unint64_t v30 = v29 - (void)v25;
      unint64_t v31 = (v29 - (uint64_t)v25) >> 1;
      if (v31 <= v17) {
        unint64_t v31 = v17;
      }
      BOOL v32 = v30 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v32) {
        unint64_t v33 = v31;
      }
      if (v33 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v34 = 4 * v33;
      unsigned int v35 = operator new(4 * v33);
      unsigned int v36 = &v35[4 * v27];
      uint64_t v37 = 4 * v17;
      memset(v36, 255, ((v37 - v26 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      if (v24 != v25)
      {
        unint64_t v38 = v24 - v25 - 4;
        if (v38 < 0x2C) {
          goto LABEL_49;
        }
        if ((unint64_t)(&v24[-v26] - v35) < 0x20) {
          goto LABEL_49;
        }
        uint64_t v40 = (v38 >> 2) + 1;
        uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
        float v42 = &v24[-v41];
        v36 -= v41;
        unint64_t v43 = &v35[4 * v27 - 16];
        unsigned int v44 = v24 - 16;
        uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v46 = *(_OWORD *)v44;
          *(v43 - 1) = *((_OWORD *)v44 - 1);
          *unint64_t v43 = v46;
          v43 -= 2;
          v44 -= 32;
          v45 -= 8;
        }
        while (v45);
        int v24 = v42;
        if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_49:
          do
          {
            int v47 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v36 - 1) = v47;
            v36 -= 4;
          }
          while (v24 != v25);
        }
      }
      *(void *)a11 = v36;
      *(void *)(a11 + 8) = &v35[v37];
      *(void *)(a11 + 16) = &v35[v34];
      if (v25) {
        operator delete(v25);
      }
    }
  }
  geo::c3m::EdgebreakerDecodeCache::getOrCreateTable(a1, a4);
  geo::c3m::EdgebreakerDecodeCache::getOrCreateTable(a1, a4 + 4);
  operator new[]();
}

void geo::small_vector_base<geo::c3m::Mesh>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  unint64_t v7 = (1 << -(char)__clz(v5 + 1));
  if (v5 >= 0xFFFFFFFFFFFFFFFELL) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  unint64_t v10 = malloc_type_malloc(184 * v9, 0x1030040E47C81F6uLL);
  geo::uninitialized_move<geo::c3m::Mesh *,geo::c3m::Mesh *>(*(uint64_t **)a1, *(uint64_t **)(a1 + 8), v10);
  geo::small_vector_base<geo::c3m::Mesh>::runDestructors(a1, *(void *)a1, *(void *)(a1 + 8));
  if (v3 != v6) {
    free(*(void **)a1);
  }
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = (char *)v10 + v4 - (void)v3;
  *(void *)(a1 + 24) = v9;
}

uint64_t *geo::uninitialized_move<geo::c3m::Mesh *,geo::c3m::Mesh *>(uint64_t *result, uint64_t *a2, void *a3)
{
  if (result != a2)
  {
    do
    {
      *a3 = a3 + 4;
      a3[1] = a3 + 4;
      a3[2] = a3 + 4;
      uint64_t v4 = result[2];
      a3[3] = result[3];
      uint64_t v5 = *result;
      if (*result == v4)
      {
        a3[1] = (char *)a3 + result[1] - v5 + 32;
        uint64_t v6 = result[1];
        if (v5 != v6)
        {
          unint64_t v7 = 0;
          do
          {
            unint64_t v8 = &a3[v7 / 8];
            long long v9 = *(_OWORD *)(v5 + v7);
            v8[6] = *(void *)(v5 + v7 + 16);
            *((_OWORD *)v8 + 2) = v9;
            v7 += 24;
          }
          while (v5 + v7 != v6);
        }
      }
      else
      {
        uint64_t v3 = result[1];
        *a3 = v5;
        a3[1] = v3;
        *(_OWORD *)uint64_t result = 0uLL;
        *((_OWORD *)result + 1) = 0uLL;
      }
      a3[10] = 0;
      a3[11] = 0;
      a3[12] = 0;
      *((_OWORD *)a3 + 5) = *((_OWORD *)result + 5);
      a3[12] = result[12];
      result[10] = 0;
      result[11] = 0;
      result[12] = 0;
      a3[13] = 0;
      a3[14] = 0;
      a3[15] = 0;
      *(_OWORD *)(a3 + 13) = *(_OWORD *)(result + 13);
      a3[15] = result[15];
      result[13] = 0;
      result[14] = 0;
      result[15] = 0;
      a3[16] = 0;
      a3[17] = 0;
      a3[18] = 0;
      *((_OWORD *)a3 + 8) = *((_OWORD *)result + 8);
      a3[18] = result[18];
      result[16] = 0;
      result[17] = 0;
      result[18] = 0;
      a3[19] = 0;
      a3[20] = 0;
      a3[21] = 0;
      *(_OWORD *)(a3 + 19) = *(_OWORD *)(result + 19);
      a3[21] = result[21];
      result[19] = 0;
      result[20] = 0;
      result[21] = 0;
      a3[22] = result[22];
      a3 += 23;
      result += 23;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void **)v2[4];
      if (v3)
      {
        uint64_t v4 = *v3;
        if (*v3)
        {
          uint64_t v5 = v3 + 1;
          do
          {
            free(v4);
            uint64_t v6 = *v5++;
            uint64_t v4 = v6;
          }
          while (v6);
        }
        free(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t geo::c3mm::C3mmEntry::childMeshType(uint64_t a1, uint64_t a2)
{
  return dword_1A29CEBE0[(*(unsigned __int16 *)(a1 + 20) >> (2
                                                           * ((2 * (*(unsigned char *)(a2 + 4) & 1)) & 0xFA | (4 * (*(unsigned char *)(a2 + 12) & 1)) | *(_DWORD *)(a2 + 8) & 1))) & 3];
}

uint64_t geo::c3mm::C3mmArea::getMeshTypeForKeyOrParent(unsigned __int16 *a1, unsigned int *a2, int *a3, uint64_t *a4)
{
  *a3 = 3;
  *a4 = 0;
  a4[1] = 0;
  if ((*a1 | 2) != 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a1;
  uint64_t v6 = (_DWORD *)*((void *)a1 + 15);
  uint64_t v65 = (_DWORD *)*((void *)a1 + 16);
  if (v6 == v65) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v67 = (std::recursive_mutex *)(a1 + 88);
  uint64_t v68 = a1 + 80;
  int v66 = a2;
  while (2)
  {
    unsigned int v7 = v6[1];
    BOOL v8 = *a2 >= v7;
    unsigned int v9 = *a2 - v7;
    if (!v8) {
      goto LABEL_133;
    }
    if (*a2 >= v9) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = *a2;
    }
    uint64_t v11 = *a2 - v10;
    uint64_t v12 = a2[1] >> v10;
    uint64_t v13 = (unsigned int *)*((void *)v5 + 15);
    uint64_t v14 = (unsigned int *)*((void *)v5 + 16);
    if (v13 == v14)
    {
      uint64_t v15 = a2[2] >> v10;
      unsigned int v16 = 0;
      uint64_t v17 = 0;
      unsigned int v18 = 0;
      unsigned int v19 = a2[3];
      std::recursive_mutex::lock(v67);
      unint64_t v20 = (uint64_t *)*v68;
      if (!*v68) {
        goto LABEL_34;
      }
    }
    else
    {
      do
      {
        if (v11 <= v13[2])
        {
          unsigned int v18 = *v13;
          uint64_t v17 = v12 >> (*(unsigned char *)a2 - v10 - *v13);
          uint64_t v15 = a2[2] >> v10;
          unsigned int v16 = a2[2] >> v10 >> (*(unsigned char *)a2 - v10 - *v13);
          unsigned int v19 = a2[3];
          std::recursive_mutex::lock(v67);
          unint64_t v20 = (uint64_t *)*v68;
          if (!*v68) {
            goto LABEL_34;
          }
          goto LABEL_17;
        }
        v13 += 3;
      }
      while (v13 != v14);
      uint64_t v15 = a2[2] >> v10;
      unsigned int v16 = 0;
      uint64_t v17 = 0;
      unsigned int v18 = -1;
      unsigned int v19 = a2[3];
      std::recursive_mutex::lock(v67);
      unint64_t v20 = (uint64_t *)*v68;
      if (!*v68) {
        goto LABEL_34;
      }
    }
LABEL_17:
    uint64_t v21 = v19 >> v10;
    unint64_t v22 = v68;
    do
    {
      unsigned int v23 = *((_DWORD *)v20 + 8);
      if (v23 < v18)
      {
LABEL_18:
        ++v20;
        goto LABEL_19;
      }
      if (v18 < v23) {
        goto LABEL_22;
      }
      unsigned int v24 = *((_DWORD *)v20 + 9);
      if (v24 < v17) {
        goto LABEL_18;
      }
      if (v17 < v24)
      {
LABEL_22:
        unint64_t v22 = v20;
      }
      else if (*((_DWORD *)v20 + 10) < v16)
      {
        ++v20;
      }
      else
      {
        unint64_t v22 = v20;
      }
LABEL_19:
      unint64_t v20 = (uint64_t *)*v20;
    }
    while (v20);
    if (v22 == v68
      || (unsigned int v25 = *((_DWORD *)v22 + 8), v18 < v25)
      || v25 >= v18
      && ((unsigned int v26 = *((_DWORD *)v22 + 9), v17 < v26)
       || v26 >= v17 && v16 < *((_DWORD *)v22 + 10)))
    {
LABEL_34:
      std::recursive_mutex::unlock(v67);
      uint64_t v27 = 0;
      goto LABEL_35;
    }
    uint64_t v59 = v15 | (v21 << 32);
    unsigned int v60 = v15;
    uint64_t v30 = v22[6];
    uint64_t v27 = (std::__shared_weak_count *)v22[7];
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::recursive_mutex::unlock(v67);
    if (!v30)
    {
LABEL_35:
      LOBYTE(v28) = 0;
      int v29 = 0;
      uint64_t v4 = v18 | (unint64_t)(v17 << 32);
      uint64_t v5 = a1;
      goto LABEL_36;
    }
    BOOL v32 = *(_DWORD **)v30;
    unint64_t v31 = *(_DWORD **)(v30 + 8);
    if (*(_DWORD **)v30 == v31)
    {
      uint64_t v5 = a1;
      unint64_t v33 = v66;
      unsigned int v34 = v60;
    }
    else
    {
      uint64_t v5 = a1;
      unint64_t v33 = v66;
      unsigned int v34 = v60;
      while (*v32 != v11 || v32[1] != v12 || v32[2] != v60 || v32[3] != v21)
      {
        v32 += 6;
        if (v32 == v31) {
          goto LABEL_65;
        }
      }
    }
    if (v32 == v31)
    {
LABEL_65:
      LOBYTE(v28) = 0;
      int v29 = 1;
      unsigned int v16 = v63;
      goto LABEL_36;
    }
    uint64_t v35 = *(void *)(v30 + 32);
    unsigned int v36 = v32[4];
    *a3 = 0;
    *a4 = (v12 << 32) | v11;
    a4[1] = v59;
    int8x16_t v37 = (int8x16_t)vdupq_n_s32(*(unsigned __int16 *)(v35 + 16 * v32[4]));
    if (vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32((int32x4_t)vandq_s8(v37, (int8x16_t)xmmword_1A29CEBC0), (int32x4_t)xmmword_1A29CEBC0), (int16x8_t)vceqq_s32((int32x4_t)vandq_s8(v37, (int8x16_t)xmmword_1A29CEBD0), (int32x4_t)xmmword_1A29CEBD0)))))*a3 = 2; {
    if (v11 != *v33
    }
      || v12 != v33[1]
      || (unsigned int v38 = v33[2], v34 < v38)
      || v38 < v34
      || (unsigned int v44 = v33[3], v21 < v44)
      || v44 < v21)
    {
      if (*v5 != 2 || *((_DWORD *)v5 + 1) || *v6 == *(_DWORD *)(*((void *)v5 + 16) - 12))
      {
        int v39 = v6[1];
        unsigned int v40 = v6[2] + 1;
        unsigned int v41 = v63;
        uint64_t v42 = v4;
        unsigned int v43 = v39 + 1;
        if (v39 + 1 > v40)
        {
LABEL_64:
          int v29 = 0;
          LOBYTE(v28) = 1;
LABEL_128:
          uint64_t v4 = v42;
          unsigned int v16 = v41;
          goto LABEL_36;
        }
      }
      else
      {
        int v39 = v6[1];
        unsigned int v40 = v6[2];
        unsigned int v41 = v63;
        uint64_t v42 = v4;
        unsigned int v43 = v39 + 1;
        if (v39 + 1 > v40) {
          goto LABEL_64;
        }
      }
      int v45 = ~v39;
      while (2)
      {
        int v47 = (unsigned __int16 *)(v35 + 16 * v36);
        unsigned int v48 = v45 + *v33;
        if (*v33 < v48) {
          unsigned int v48 = *v33;
        }
        uint64_t v49 = *v33 - v48;
        uint64_t v50 = v33[1] >> v48;
        uint64_t v51 = v33[2] >> v48;
        uint64_t v52 = v33[3] >> v48;
        int v53 = 4 * ((v33[3] >> v48) & 1);
        unsigned int v16 = (*v47 >> (2 * (v51 & 1 | (2 * (v50 & 1)) & 0xFB | (4 * (v52 & 1))))) & 3;
        uint64_t v4 = 0xFFFFFFFFLL;
        int v28 = 0;
        int v29 = 0;
        switch(v16)
        {
          case 1u:
            goto LABEL_78;
          case 2u:
            LOBYTE(v28) = 0;
            int v29 = 0;
            unsigned int v16 = 0;
            *a3 = 1;
            *(_OWORD *)a4 = *(_OWORD *)v66;
            goto LABEL_130;
          case 3u:
            int v28 = 2;
LABEL_78:
            *a3 = v28;
            *a4 = (v50 << 32) | v49;
            a4[1] = v51 | (v52 << 32);
            unint64_t v33 = v66;
            if (v49 == *v66 && v50 == v66[1])
            {
              unsigned int v54 = v66[2];
              if (v51 >= v54 && v54 >= v51)
              {
                unsigned int v55 = v66[3];
                if (v52 >= v55 && v55 >= v52) {
                  goto LABEL_69;
                }
              }
            }
            int v56 = *v47;
            if (v56) {
              unsigned int v46 = v36 + 1;
            }
            else {
              unsigned int v46 = v36;
            }
            if ((v51 & 1) + ((2 * (v50 & 1)) | v53))
            {
              unsigned int v57 = (v56 << 31 >> 31) & (v36 + 1);
              if ((v56 & 4) != 0)
              {
                if (v57) {
                  unsigned int v46 = *(_DWORD *)(v35 + 16 * v57 + 12);
                }
                else {
                  ++v46;
                }
                unsigned int v57 = v46;
              }
              if ((v51 & 1) + ((2 * (v50 & 1)) | v53) != 1)
              {
                if ((v56 & 0x10) != 0)
                {
                  if (v57) {
                    unsigned int v46 = *(_DWORD *)(v35 + 16 * v57 + 12);
                  }
                  else {
                    ++v46;
                  }
                  unsigned int v57 = v46;
                }
                if ((v51 & 1) + ((2 * (v50 & 1)) | v53) != 2)
                {
                  if ((v56 & 0x40) != 0)
                  {
                    if (v57) {
                      unsigned int v46 = *(_DWORD *)(v35 + 16 * v57 + 12);
                    }
                    else {
                      ++v46;
                    }
                    unsigned int v57 = v46;
                  }
                  if ((v51 & 1) + ((2 * (v50 & 1)) | v53) != 3)
                  {
                    if ((v56 & 0x100) != 0)
                    {
                      if (v57) {
                        unsigned int v46 = *(_DWORD *)(v35 + 16 * v57 + 12);
                      }
                      else {
                        ++v46;
                      }
                      unsigned int v57 = v46;
                    }
                    if ((v51 & 1) + ((2 * (v50 & 1)) | v53) != 4)
                    {
                      if ((v56 & 0x400) != 0)
                      {
                        if (v57) {
                          unsigned int v46 = *(_DWORD *)(v35 + 16 * v57 + 12);
                        }
                        else {
                          ++v46;
                        }
                        unsigned int v57 = v46;
                      }
                      if ((v51 & 1) + ((2 * (v50 & 1)) | v53) != 5)
                      {
                        if ((v56 & 0x1000) != 0)
                        {
                          if (v57) {
                            unsigned int v46 = *(_DWORD *)(v35 + 16 * v57 + 12);
                          }
                          else {
                            ++v46;
                          }
                          unsigned int v57 = v46;
                        }
                        if ((v51 & 1) + ((2 * (v50 & 1)) | v53) != 6 && (v56 & 0x4000) != 0)
                        {
                          if (v57) {
                            unsigned int v46 = *(_DWORD *)(v35 + 16 * v57 + 12);
                          }
                          else {
                            ++v46;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v43;
            --v45;
            LOBYTE(v28) = 1;
            unsigned int v36 = v46;
            if (v43 <= v40) {
              continue;
            }
            int v29 = 0;
            break;
          default:
            goto LABEL_36;
        }
        goto LABEL_128;
      }
    }
LABEL_69:
    LOBYTE(v28) = 0;
    int v29 = 0;
    unsigned int v16 = 0;
LABEL_130:
    uint64_t v4 = 0xFFFFFFFFLL;
LABEL_36:
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v28)
    {
      v6 += 3;
      unsigned int v63 = v16;
      a2 = v66;
      if (v6 == v65)
      {
LABEL_133:
        *a3 = 1;
        *(_OWORD *)a4 = *(_OWORD *)a2;
        return 0xFFFFFFFFLL;
      }
      continue;
    }
    break;
  }
  a2 = v66;
  if (v29) {
    goto LABEL_133;
  }
  return v4;
}

unint64_t geo::c3mm::C3mmArea::getFileIndexToLoadForKey(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v29 = *(void *)(a1 + 128);
  if (v2 == v29) {
    goto LABEL_46;
  }
  uint64_t v5 = (std::recursive_mutex *)(a1 + 176);
  uint64_t v6 = (void *)(a1 + 160);
  while (2)
  {
    if (*a2 >= (*a2 - *(_DWORD *)(v2 + 4))) {
      int v7 = *a2 - *(_DWORD *)(v2 + 4);
    }
    else {
      int v7 = *a2;
    }
    BOOL v8 = *(unsigned int **)(a1 + 120);
    unsigned int v9 = *(unsigned int **)(a1 + 128);
    if (v8 == v9)
    {
      unsigned int v13 = 0;
      unint64_t v14 = 0;
      unsigned int v15 = 0;
      std::recursive_mutex::lock(v5);
      unsigned int v16 = (uint64_t *)*v6;
      if (!*v6) {
        goto LABEL_44;
      }
    }
    else
    {
      unsigned int v10 = HIDWORD(*(void *)a2) >> v7;
      unsigned int v11 = a2[2] >> v7;
      unsigned int v12 = *(void *)a2 - v7;
      while (v12 > v8[2])
      {
        v8 += 3;
        if (v8 == v9)
        {
          unsigned int v13 = 0;
          unint64_t v14 = 0;
          unsigned int v15 = -1;
          std::recursive_mutex::lock(v5);
          unsigned int v16 = (uint64_t *)*v6;
          if (*v6) {
            goto LABEL_15;
          }
          goto LABEL_44;
        }
      }
      unsigned int v15 = *v8;
      unsigned int v13 = v11 >> (v12 - *v8);
      unint64_t v14 = (unint64_t)(v10 >> (v12 - *v8)) << 32;
      std::recursive_mutex::lock(v5);
      unsigned int v16 = (uint64_t *)*v6;
      if (!*v6) {
        goto LABEL_44;
      }
    }
LABEL_15:
    uint64_t v17 = v6;
    do
    {
      unsigned int v18 = *((_DWORD *)v16 + 8);
      if (v18 < v15)
      {
LABEL_16:
        ++v16;
        goto LABEL_17;
      }
      if (v18 > v15) {
        goto LABEL_22;
      }
      unsigned int v19 = *((_DWORD *)v16 + 9);
      if (v19 < HIDWORD(v14)) {
        goto LABEL_16;
      }
      if (v19 <= HIDWORD(v14))
      {
        if (*((_DWORD *)v16 + 10) < v13) {
          ++v16;
        }
        else {
          uint64_t v17 = v16;
        }
      }
      else
      {
LABEL_22:
        uint64_t v17 = v16;
      }
LABEL_17:
      unsigned int v16 = (uint64_t *)*v16;
    }
    while (v16);
    if (v17 == v6
      || (unsigned int v20 = *((_DWORD *)v17 + 8), v20 > v15)
      || v20 >= v15
      && ((unsigned int v21 = *((_DWORD *)v17 + 9), v21 > HIDWORD(v14)) || v21 >= HIDWORD(v14) && *((_DWORD *)v17 + 10) > v13))
    {
LABEL_44:
      unsigned int v26 = v15 | v14;
      std::recursive_mutex::unlock(v5);
      return v26 | v14;
    }
    unint64_t v28 = v14;
    uint64_t v22 = v17[6];
    unsigned int v23 = (std::__shared_weak_count *)v17[7];
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v24 = v5;
    std::recursive_mutex::unlock(v5);
    if (v22)
    {
      LODWORD(v22) = *(_DWORD *)(v2 + 8) < *a2;
      int v25 = 2 * (*(_DWORD *)(v2 + 8) >= *a2);
      if (!v23)
      {
LABEL_39:
        if (!v22) {
          goto LABEL_45;
        }
LABEL_42:
        v2 += 12;
        uint64_t v5 = v24;
        if (v2 == v29) {
          goto LABEL_46;
        }
        continue;
      }
    }
    else
    {
      int v25 = 1;
      if (!v23) {
        goto LABEL_39;
      }
    }
    break;
  }
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (v22) {
    goto LABEL_42;
  }
LABEL_45:
  if (v25 == 2)
  {
LABEL_46:
    unint64_t v14 = 0;
    unsigned int v26 = -1;
  }
  else
  {
    unint64_t v14 = v28;
    unsigned int v26 = v15 | v28;
  }
  return v26 | v14;
}

unint64_t geo::c3mm::C3mmArea::getEntry(_WORD *a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 20) = 0;
  if (*a1 == 2) {
    return geo::c3mm::C3mmArea::getEntryV2((uint64_t)a1, a2, a3);
  }
  else {
    return 0;
  }
}

unint64_t geo::c3mm::C3mmArea::getEntryV2(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6 = *a2;
  int v7 = *(_DWORD **)(a1 + 120);
  BOOL v8 = *(_DWORD **)(a1 + 128);
  if (v7 == v8)
  {
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    LODWORD(EntryV2) = 0;
    if (!v6) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  unsigned int v9 = *(_DWORD **)(a1 + 120);
  while (1)
  {
    unsigned int v10 = v9[2];
    if (v10 >= v6) {
      break;
    }
    v9 += 3;
    if (v9 == v8)
    {
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      goto LABEL_9;
    }
  }
  unint64_t v11 = *(void *)v9;
  do
  {
LABEL_9:
    if (v6 <= v7[2])
    {
      LODWORD(EntryV2) = *v7;
      unint64_t v13 = (a2[1] >> (v6 - *v7));
      unsigned int v12 = a2[2] >> (v6 - *v7);
      if (v6 <= v10) {
        goto LABEL_14;
      }
LABEL_7:
      unint64_t v13 = 0;
      LODWORD(EntryV2) = -1;
      return EntryV2 | (v13 << 32);
    }
    v7 += 3;
  }
  while (v7 != v8);
  unsigned int v12 = 0;
  unint64_t v13 = 0;
  LODWORD(EntryV2) = -1;
  if (v6 > v10) {
    goto LABEL_7;
  }
LABEL_14:
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  unsigned int v15 = *(uint64_t **)(a1 + 160);
  if (!v15)
  {
LABEL_28:
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 176));
    return EntryV2 | (v13 << 32);
  }
  unsigned int v16 = (uint64_t *)(a1 + 160);
  while (2)
  {
    unsigned int v17 = *((_DWORD *)v15 + 8);
    if (v17 < EntryV2) {
      goto LABEL_16;
    }
    if (EntryV2 < v17) {
      goto LABEL_20;
    }
    unsigned int v18 = *((_DWORD *)v15 + 9);
    if (v18 < v13)
    {
LABEL_16:
      ++v15;
    }
    else if (v13 < v18)
    {
LABEL_20:
      unsigned int v16 = v15;
    }
    else if (*((_DWORD *)v15 + 10) < v12)
    {
      ++v15;
    }
    else
    {
      unsigned int v16 = v15;
    }
    unsigned int v15 = (uint64_t *)*v15;
    if (v15) {
      continue;
    }
    break;
  }
  if (v16 == (uint64_t *)(a1 + 160)) {
    goto LABEL_28;
  }
  unsigned int v19 = *((_DWORD *)v16 + 8);
  if (EntryV2 < v19) {
    goto LABEL_28;
  }
  if (v19 >= EntryV2)
  {
    unsigned int v21 = *((_DWORD *)v16 + 9);
    if (v13 < v21 || v21 >= v13 && v12 < *((_DWORD *)v16 + 10)) {
      goto LABEL_28;
    }
  }
  uint64_t v22 = (std::__shared_weak_count *)v16[7];
  unint64_t v91 = (uint64_t *)v16[6];
  v101[2] = v91;
  void v101[3] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 176));
  if (v91)
  {
    if (v91[4] == v91[5])
    {
      unint64_t v13 = 0;
      LODWORD(EntryV2) = -1;
    }
    else
    {
      uint64_t v87 = a3;
      long long v88 = (_WORD *)a1;
      int v89 = (int32x2_t *)a2;
      int v90 = v22;
      uint64_t v24 = *(void *)a2;
      unint64_t v23 = *((void *)a2 + 1);
      uint64_t v25 = HIDWORD(*(void *)a2);
      unsigned int v26 = (char *)v101;
      unsigned int v97 = v101;
      unint64_t v98 = (char *)v101;
      uint64_t v99 = (char *)v101;
      uint64_t v100 = 4;
      int v86 = v11;
      unint64_t v27 = HIDWORD(v11);
      if (v24 <= HIDWORD(v11))
      {
        int v31 = v24;
        uint64_t v30 = (char *)v101;
        uint64_t v29 = (char *)v101;
      }
      else
      {
        unint64_t v28 = 4;
        uint64_t v29 = (char *)v101;
        do
        {
          uint64_t v32 = (v29 - v26) >> 2;
          if (v28 >= v32 + 1)
          {
            uint64_t v30 = v26;
          }
          else
          {
            unint64_t v33 = v99;
            unint64_t v34 = (1 << -(char)__clz(v28 + 1));
            if (v28 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v34 = 1;
            }
            if (v34 <= v32 + 1) {
              unint64_t v28 = v32 + 1;
            }
            else {
              unint64_t v28 = v34;
            }
            uint64_t v30 = (char *)malloc_type_malloc(4 * v28, 0x100004052888210uLL);
            uint64_t v35 = v97;
            unsigned int v36 = v98;
            if (v97 != v98)
            {
              unint64_t v37 = v98 - (unsigned char *)v97 - 4;
              unsigned int v38 = v30;
              int v39 = (char *)v97;
              if (v37 < 0x1C) {
                goto LABEL_158;
              }
              unsigned int v38 = v30;
              int v39 = (char *)v97;
              if ((unint64_t)(v30 - (unsigned char *)v97) < 0x20) {
                goto LABEL_158;
              }
              uint64_t v40 = (v37 >> 2) + 1;
              uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
              unsigned int v38 = &v30[v41];
              int v39 = (char *)v97 + v41;
              uint64_t v42 = (long long *)((char *)v97 + 16);
              unsigned int v43 = v30 + 16;
              uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v45 = *v42;
                *(v43 - 1) = *(v42 - 1);
                *unsigned int v43 = v45;
                v42 += 2;
                v43 += 2;
                v44 -= 8;
              }
              while (v44);
              if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_158:
                do
                {
                  int v46 = *(_DWORD *)v39;
                  v39 += 4;
                  *(_DWORD *)unsigned int v38 = v46;
                  v38 += 4;
                }
                while (v39 != v36);
              }
            }
            if (v26 != v33) {
              free(v35);
            }
            uint64_t v29 = &v30[4 * v32];
            unsigned int v97 = v30;
            uint64_t v100 = v28;
            unsigned int v26 = v30;
          }
          *(_DWORD *)uint64_t v29 = v23 & 1 | (2 * (v25 & 1)) | (v23 >> 30) & 4;
          v29 += 4;
          unint64_t v98 = v29;
          LODWORD(v25) = v25 >> 1;
          unint64_t v23 = (v23 >> 1) & 0x7FFFFFFF7FFFFFFFLL;
          LODWORD(v24) = v24 - 1;
          int v31 = v24;
        }
        while (v24 > v27);
      }
      uint64_t v48 = *v91;
      uint64_t v47 = v91[1];
      if (*v91 == v47)
      {
        int v49 = v86;
        uint64_t v50 = v87;
        uint64_t v51 = v89;
        uint64_t v22 = v90;
        uint64_t v52 = v88;
      }
      else
      {
        int v49 = v86;
        uint64_t v50 = v87;
        uint64_t v51 = v89;
        uint64_t v22 = v90;
        uint64_t v52 = v88;
        while (*(_DWORD *)v48 != v31 || *(_DWORD *)(v48 + 4) != v25 || *(void *)(v48 + 8) != v23)
        {
          v48 += 24;
          if (v48 == v47) {
            goto LABEL_109;
          }
        }
      }
      if (v48 == v47) {
        goto LABEL_109;
      }
      uint64_t v53 = v91[4];
      uint64_t v54 = *(unsigned int *)(v48 + 16);
      uint64_t v55 = v29 - v30;
      if (v29 != v30)
      {
        uint64_t v56 = 0;
        int v57 = 0;
        unsigned int v58 = 0;
        unint64_t v59 = v55 >> 2;
        unsigned int v60 = v54;
        while (1)
        {
          unsigned int v61 = *(_DWORD *)&v30[4 * v59 + 4 * ~v56];
          unsigned int v62 = *(unsigned __int16 *)(v53 + 16 * v60);
          if (((v62 >> (2 * v61)) & 1) == 0) {
            goto LABEL_109;
          }
          char v63 = 0;
          unsigned int v64 = 0;
          unsigned int v65 = 0;
          do
          {
            if ((v62 >> v63))
            {
              if (v65) {
                unsigned int v65 = *(_DWORD *)(v53 + 16 * v65 + 12);
              }
              else {
                unsigned int v65 = v60 + 1;
              }
              int v57 = 3;
              unsigned int v60 = v65;
              switch((v62 >> v63) & 3)
              {
                case 1u:
                  int v57 = 0;
                  goto LABEL_75;
                case 2u:
                  int v57 = 1;
                  goto LABEL_75;
                case 3u:
                  int v57 = 2;
LABEL_75:
                  unsigned int v60 = v65;
                  break;
                default:
                  break;
              }
            }
            ++v64;
            v63 += 2;
          }
          while (v64 <= v61);
          uint64_t v56 = ++v58;
          if (v59 <= v58) {
            goto LABEL_85;
          }
        }
      }
      int v57 = 0;
      unsigned int v60 = v54;
LABEL_85:
      if (v51->i32[0] == v31 && v51->i32[1] == v25)
      {
        unsigned int v67 = v51[1].u32[0];
        if (v67 >= v23 && v67 <= v23)
        {
          unsigned __int32 v68 = v51[1].u32[1];
          if (v68 >= HIDWORD(v23) && v68 <= HIDWORD(v23))
          {
            int8x16_t v69 = (int8x16_t)vdupq_n_s32(*(unsigned __int16 *)(v53 + 16 * v54));
            int v57 = 2
                * (vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32((int32x4_t)vandq_s8(v69, (int8x16_t)xmmword_1A29CEBC0), (int32x4_t)xmmword_1A29CEBC0), (int16x8_t)vceqq_s32((int32x4_t)vandq_s8(v69, (int8x16_t)xmmword_1A29CEBD0), (int32x4_t)xmmword_1A29CEBD0)))) & 1);
          }
        }
      }
      uint64_t v70 = (__int16 *)(v53 + 16 * v60);
      *(void *)uint64_t v50 = *(void *)(v70 + 2);
      __int16 v71 = *v70;
      BOOL v72 = *v70 == 0;
      *(_WORD *)(v50 + 20) = *v70;
      *(_DWORD *)(v50 + 12) = v72;
      *(_DWORD *)(v50 + 16) = v57;
      if (*v52 != 2)
      {
LABEL_109:
        unint64_t v13 = 0;
        LODWORD(EntryV2) = -1;
      }
      else
      {
        LODWORD(EntryV2) = -1;
        if (*((_DWORD *)v52 + 1))
        {
          unint64_t v13 = 0;
        }
        else
        {
          unint64_t v13 = 0;
          if (v51->i32[0] != v10) {
            goto LABEL_110;
          }
          LODWORD(EntryV2) = -1;
          unint64_t v13 = 0;
          if (*(_DWORD *)(*((void *)v52 + 16) - 12) == v49 || v57 != 2) {
            goto LABEL_110;
          }
          *(_WORD *)(v50 + 20) = 0;
          if ((v71 & 3) == 0) {
            goto LABEL_105;
          }
          v73.i64[0] = 0x100000001;
          v73.i64[1] = 0x100000001;
          int32x4_t v74 = vaddq_s32(*(int32x4_t *)v51->i8, *(int32x4_t *)v51->i8);
          v74.i32[0] = vaddq_s32(*(int32x4_t *)v51->i8, v73).u32[0];
          int32x4_t v96 = v74;
          unsigned int v94 = 1;
          uint64_t v92 = 0;
          uint64_t v93 = 0;
          __int16 v95 = 0;
          unint64_t EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v52, &v96, &v92);
          if (EntryV2 == -1)
          {
            if (v94 <= 2) {
              *(_WORD *)(v50 + 20) |= (_WORD)v94 + 1;
            }
            __int16 v71 = *v70;
LABEL_105:
            if ((v71 & 0xC) == 0) {
              goto LABEL_119;
            }
            unint64_t v13 = 0;
            LODWORD(EntryV2) = 0;
            int v75 = 2 * v51[1].i32[1];
            v96.i32[2] = (2 * v51[1].i32[0]) | 1;
            v96.i32[3] = v75;
            LODWORD(v76) = vadd_s32(*v51, (int32x2_t)0x100000001).u32[0];
            HIDWORD(v76) = vadd_s32(*v51, *v51).i32[1];
            v96.i64[0] = v76;
            unsigned int v94 = 1;
            uint64_t v92 = 0;
            uint64_t v93 = 0;
            __int16 v95 = 0;
            if (*v52 == 2)
            {
              unint64_t EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v52, &v96, &v92);
              if (EntryV2 != -1) {
                goto LABEL_108;
              }
              if (v94 <= 2) {
                *(_WORD *)(v87 + 20) |= 4 * v94 + 4;
              }
              __int16 v71 = *v70;
              uint64_t v51 = v89;
              uint64_t v22 = v90;
              uint64_t v52 = v88;
LABEL_119:
              if ((v71 & 0x30) == 0)
              {
LABEL_125:
                if ((v71 & 0xC0) != 0)
                {
                  unint64_t v13 = 0;
                  LODWORD(EntryV2) = 0;
                  v96.i32[0] = v51->i32[0] + 1;
                  int v78 = 2 * v51[1].i32[1];
                  *(uint64_t *)((char *)v96.i64 + 4) = *(void *)&vadd_s32(*(int32x2_t *)((char *)v51 + 4), *(int32x2_t *)((char *)v51 + 4)) | 0x100000001;
                  v96.i32[3] = v78;
                  unsigned int v94 = 1;
                  uint64_t v92 = 0;
                  uint64_t v93 = 0;
                  __int16 v95 = 0;
                  if (*v52 != 2) {
                    goto LABEL_110;
                  }
                  unint64_t EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v52, &v96, &v92);
                  if (EntryV2 != -1) {
                    goto LABEL_152;
                  }
                  if (v94 <= 2) {
                    *(_WORD *)(v87 + 20) |= ((_WORD)v94 << 6) + 64;
                  }
                  __int16 v71 = *v70;
                }
                if ((v71 & 0x300) != 0)
                {
                  unint64_t v13 = 0;
                  LODWORD(EntryV2) = 0;
                  int v79 = (2 * v89[1].i32[1]) | 1;
                  v96.i32[2] = 2 * v89[1].i32[0];
                  v96.i32[3] = v79;
                  LODWORD(v80) = vadd_s32(*v89, (int32x2_t)0x100000001).u32[0];
                  HIDWORD(v80) = vadd_s32(*v89, *v89).i32[1];
                  v96.i64[0] = v80;
                  unsigned int v94 = 1;
                  uint64_t v92 = 0;
                  uint64_t v93 = 0;
                  __int16 v95 = 0;
                  uint64_t v22 = v90;
                  if (*v88 != 2) {
                    goto LABEL_110;
                  }
                  unint64_t EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v88, &v96, &v92);
                  if (EntryV2 != -1) {
                    goto LABEL_152;
                  }
                  if (v94 <= 2) {
                    *(_WORD *)(v87 + 20) |= ((_WORD)v94 << 8) + 256;
                  }
                  __int16 v71 = *v70;
                }
                if ((v71 & 0xC00) != 0)
                {
                  unint64_t v13 = 0;
                  LODWORD(EntryV2) = 0;
                  LODWORD(v81) = vadd_s32(*v89, (int32x2_t)0x100000001).u32[0];
                  HIDWORD(v81) = vadd_s32(*v89, *v89).i32[1];
                  uint64_t v82 = *(void *)&vadd_s32(v89[1], v89[1]) | 0x100000001;
                  v96.i64[0] = v81;
                  v96.i64[1] = v82;
                  unsigned int v94 = 1;
                  uint64_t v92 = 0;
                  uint64_t v93 = 0;
                  __int16 v95 = 0;
                  uint64_t v22 = v90;
                  if (*v88 != 2) {
                    goto LABEL_110;
                  }
                  unint64_t EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v88, &v96, &v92);
                  if (EntryV2 != -1) {
                    goto LABEL_152;
                  }
                  if (v94 <= 2) {
                    *(_WORD *)(v87 + 20) |= ((_WORD)v94 << 10) + 1024;
                  }
                  __int16 v71 = *v70;
                }
                if ((v71 & 0x3000) != 0)
                {
                  unint64_t v13 = 0;
                  LODWORD(EntryV2) = 0;
                  int v83 = (2 * v89->i32[1]) | 1;
                  v96.i32[0] = v89->i32[0] + 1;
                  v96.i32[1] = v83;
                  int v84 = (2 * v89[1].i32[1]) | 1;
                  v96.i32[2] = 2 * v89[1].i32[0];
                  v96.i32[3] = v84;
                  unsigned int v94 = 1;
                  uint64_t v92 = 0;
                  uint64_t v93 = 0;
                  __int16 v95 = 0;
                  uint64_t v22 = v90;
                  if (*v88 != 2) {
                    goto LABEL_110;
                  }
                  unint64_t EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v88, &v96, &v92);
                  if (EntryV2 != -1) {
                    goto LABEL_152;
                  }
                  if (v94 <= 2) {
                    *(_WORD *)(v87 + 20) |= ((_WORD)v94 << 12) + 4096;
                  }
                  __int16 v71 = *v70;
                }
                if ((v71 & 0xC000) != 0)
                {
                  unint64_t v13 = 0;
                  LODWORD(EntryV2) = 0;
                  v96.i32[0] = v89->i32[0] + 1;
                  int32x2_t v85 = *(int32x2_t *)((char *)v89 + 4);
                  v96.i32[3] = (2 * v89[1].i32[1]) | 1;
                  *(uint64_t *)((char *)v96.i64 + 4) = *(void *)&vadd_s32(v85, v85) | 0x100000001;
                  unsigned int v94 = 1;
                  uint64_t v92 = 0;
                  uint64_t v93 = 0;
                  __int16 v95 = 0;
                  uint64_t v22 = v90;
                  if (*v88 != 2) {
                    goto LABEL_110;
                  }
                  unint64_t EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v88, &v96, &v92);
                  if (EntryV2 != -1) {
                    goto LABEL_152;
                  }
                  if (v94 <= 2) {
                    *(_WORD *)(v87 + 20) |= ((_WORD)v94 << 14) + 0x4000;
                  }
                }
                unint64_t v13 = 0;
                LODWORD(EntryV2) = -1;
                uint64_t v22 = v90;
                goto LABEL_110;
              }
              unint64_t v13 = 0;
              LODWORD(EntryV2) = 0;
              int v77 = (2 * v51->i32[1]) | 1;
              v96.i32[0] = v51->i32[0] + 1;
              v96.i32[1] = v77;
              v96.u64[1] = (unint64_t)vadd_s32(v51[1], v51[1]);
              unsigned int v94 = 1;
              uint64_t v92 = 0;
              uint64_t v93 = 0;
              __int16 v95 = 0;
              if (*v52 == 2)
              {
                unint64_t EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v52, &v96, &v92);
                if (EntryV2 == -1)
                {
                  if (v94 <= 2) {
                    *(_WORD *)(v87 + 20) |= 16 * v94 + 16;
                  }
                  __int16 v71 = *v70;
                  uint64_t v51 = v89;
                  uint64_t v22 = v90;
                  uint64_t v52 = v88;
                  goto LABEL_125;
                }
LABEL_152:
                uint64_t v22 = v90;
                unint64_t v13 = HIDWORD(EntryV2);
              }
            }
          }
          else
          {
LABEL_108:
            unint64_t v13 = HIDWORD(EntryV2);
          }
        }
      }
LABEL_110:
      if (v97 != v99) {
        free(v97);
      }
    }
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return EntryV2 | (v13 << 32);
}

void sub_1A2873E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24)
{
  if (a22 != a24) {
    free(a22);
  }
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v24 - 104);
  _Unwind_Resume(a1);
}

uint64_t geo::c3mm::C3mmArea::getHeightIndices(uint64_t a1, unsigned int *a2, std::vector<unsigned int> *a3)
{
  if (*(_WORD *)a1 != 2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = *a2;
  int v7 = *(unsigned int **)(a1 + 120);
  BOOL v8 = *(unsigned int **)(a1 + 128);
  if (v7 == v8)
  {
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    if (!v6) {
      goto LABEL_16;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = *(unsigned int **)(a1 + 120);
  while (1)
  {
    unsigned int v10 = v9[2];
    if (v10 >= v6) {
      break;
    }
    v9 += 3;
    if (v9 == v8)
    {
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      goto LABEL_11;
    }
  }
  unint64_t v11 = *(void *)v9;
  do
  {
LABEL_11:
    if (v6 <= v7[2])
    {
      unsigned int v14 = *v7;
      uint64_t v13 = a2[1] >> (v6 - *v7);
      unsigned int v12 = a2[2] >> (v6 - *v7);
      if (v6 <= v10) {
        goto LABEL_16;
      }
      return 0xFFFFFFFFLL;
    }
    v7 += 3;
  }
  while (v7 != v8);
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = -1;
  if (v6 > v10) {
    return 0xFFFFFFFFLL;
  }
LABEL_16:
  unsigned int v17 = (std::recursive_mutex *)(a1 + 176);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  unsigned int v20 = *(uint64_t **)(a1 + 160);
  unsigned int v19 = (uint64_t *)(a1 + 160);
  unsigned int v18 = v20;
  if (!v20)
  {
LABEL_30:
    char v177 = 0;
    int v178 = 0;
    std::recursive_mutex::unlock(v17);
    uint64_t v25 = 0;
    goto LABEL_31;
  }
  unsigned int v21 = v19;
  while (2)
  {
    unsigned int v22 = *((_DWORD *)v18 + 8);
    if (v22 < v14) {
      goto LABEL_18;
    }
    if (v14 < v22) {
      goto LABEL_22;
    }
    unsigned int v23 = *((_DWORD *)v18 + 9);
    if (v23 < v13)
    {
LABEL_18:
      ++v18;
    }
    else if (v13 < v23)
    {
LABEL_22:
      unsigned int v21 = v18;
    }
    else if (*((_DWORD *)v18 + 10) < v12)
    {
      ++v18;
    }
    else
    {
      unsigned int v21 = v18;
    }
    unsigned int v18 = (uint64_t *)*v18;
    if (v18) {
      continue;
    }
    break;
  }
  if (v21 == v19) {
    goto LABEL_30;
  }
  unsigned int v24 = *((_DWORD *)v21 + 8);
  if (v14 < v24) {
    goto LABEL_30;
  }
  if (v24 >= v14)
  {
    unsigned int v42 = *((_DWORD *)v21 + 9);
    if (v13 < v42 || v42 >= v13 && *((_DWORD *)v21 + 10) > v12) {
      goto LABEL_30;
    }
  }
  unsigned int v26 = (void *)v21[6];
  uint64_t v25 = (std::__shared_weak_count *)v21[7];
  char v177 = v26;
  int v178 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v17);
  if (!v26)
  {
LABEL_31:
    uint64_t v15 = v14 | (unint64_t)(v13 << 32);
    if (!v25) {
      return v15;
    }
    goto LABEL_32;
  }
  if (v26[4] == v26[5]) {
    goto LABEL_204;
  }
  long long v159 = a2;
  long long v160 = a3;
  int v27 = *a2 - HIDWORD(v11);
  unsigned int v172 = a2[1] >> (*(unsigned char *)a2 - BYTE4(v11));
  unsigned int v28 = a2[2] >> (*(unsigned char *)a2 - BYTE4(v11));
  uint64_t v30 = (long long *)*v26;
  uint64_t v29 = (long long *)v26[1];
  long long v175 = 0;
  char v176 = 0;
  long long v174 = 0;
  int64_t v31 = (char *)v29 - (char *)v30;
  if (v29 == v30)
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    int v39 = 0;
  }
  else
  {
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
    if (v32 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v33 = (char *)operator new(v31);
    unint64_t v34 = v33;
    uint64_t v35 = &v33[24 * v32];
    long long v174 = v33;
    char v176 = v35;
    unsigned int v36 = v33;
    do
    {
      *(void *)unsigned int v36 = 0;
      *((void *)v36 + 1) = 0;
      *((void *)v36 + 2) = 0x200000000;
      v36 += 24;
    }
    while (v36 != v35);
    long long v175 = &v33[24 * v32];
    unint64_t v37 = (long long *)*v26;
    unsigned int v38 = (long long *)v26[1];
    int v39 = v33;
    if ((long long *)*v26 != v38)
    {
      do
      {
        if (*((_DWORD *)v37 + 1) == v172 && *((_DWORD *)v37 + 2) == v28)
        {
          long long v41 = *v37;
          *((void *)v39 + 2) = *((void *)v37 + 2);
          *(_OWORD *)int v39 = v41;
          v39 += 24;
        }
        unint64_t v37 = (long long *)((char *)v37 + 24);
      }
      while (v37 != v38);
    }
  }
  unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v34) >> 3);
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v34) >> 3);
  if (v43 <= v44)
  {
    if (v43 < v44)
    {
      uint64_t v35 = &v34[24 * v43];
      long long v175 = v35;
    }
  }
  else
  {
    std::vector<geo::c3mm::C3mmRoot>::__append(&v174, v43 - v44);
    unint64_t v34 = v174;
    uint64_t v35 = v175;
  }
  if (v34 == v35) {
    goto LABEL_201;
  }
  if (*a2 == HIDWORD(v11))
  {
    long long v45 = v160;
    std::vector<int>::pointer end = (char *)v160->__end_;
    while (1)
    {
      unint64_t value = (unint64_t)v45->__end_cap_.__value_;
      if ((unint64_t)end < value)
      {
        *(_DWORD *)std::vector<int>::pointer end = *((_DWORD *)v34 + 3);
        uint64_t v47 = (uint64_t)(end + 4);
      }
      else
      {
        std::vector<int>::pointer begin = (char *)v45->__begin_;
        uint64_t v50 = end - (char *)v45->__begin_;
        uint64_t v51 = v50 >> 2;
        unint64_t v52 = (v50 >> 2) + 1;
        if (v52 >> 62) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v53 = value - (void)begin;
        if (v53 >> 1 > v52) {
          unint64_t v52 = v53 >> 1;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          if (v54 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v55 = operator new(4 * v54);
          uint64_t v56 = (unsigned int *)&v55[4 * v51];
          unsigned int *v56 = *((_DWORD *)v34 + 3);
          uint64_t v47 = (uint64_t)(v56 + 1);
          int64_t v57 = end - begin;
          if (end != begin)
          {
LABEL_77:
            unint64_t v58 = v57 - 4;
            if (v58 < 0xBC
              || (unint64_t v61 = (end - 4 - begin) & 0xFFFFFFFFFFFFFFFCLL, &v55[v50 - 4 - v61] > &v55[v50 - 4])
              || &end[-v61 - 4] > end - 4
              || (unint64_t)(end - v55 - v50) < 0x20)
            {
              unint64_t v59 = end;
              long long v45 = v160;
            }
            else
            {
              uint64_t v62 = (v58 >> 2) + 1;
              uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v59 = &end[-v63];
              uint64_t v56 = (unsigned int *)((char *)v56 - v63);
              unsigned int v64 = &v55[4 * v51 - 16];
              unsigned int v65 = end - 16;
              uint64_t v66 = v62 & 0x7FFFFFFFFFFFFFF8;
              long long v45 = v160;
              do
              {
                long long v67 = *(_OWORD *)v65;
                *(v64 - 1) = *((_OWORD *)v65 - 1);
                _OWORD *v64 = v67;
                v64 -= 2;
                v65 -= 32;
                v66 -= 8;
              }
              while (v66);
              if (v62 == (v62 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_80:
                v45->__begin_ = v56;
                v45->__end_ = (std::vector<unsigned int>::pointer)v47;
                v45->__end_cap_.__value_ = (unsigned int *)&v55[4 * v54];
                if (!begin) {
                  goto LABEL_66;
                }
LABEL_84:
                operator delete(begin);
                goto LABEL_66;
              }
            }
            do
            {
              unsigned int v60 = *((_DWORD *)v59 - 1);
              v59 -= 4;
              *--uint64_t v56 = v60;
            }
            while (v59 != begin);
            goto LABEL_80;
          }
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v56 = (unsigned int *)(4 * v51);
          *(_DWORD *)(4 * v51) = *((_DWORD *)v34 + 3);
          uint64_t v47 = 4 * v51 + 4;
          int64_t v57 = end - begin;
          if (end != begin) {
            goto LABEL_77;
          }
        }
        long long v45 = v160;
        v160->__begin_ = v56;
        v160->__end_ = (std::vector<unsigned int>::pointer)v47;
        v160->__end_cap_.__value_ = (unsigned int *)&v55[4 * v54];
        if (begin) {
          goto LABEL_84;
        }
      }
LABEL_66:
      v45->__end_ = (std::vector<unsigned int>::pointer)v47;
      v34 += 24;
      std::vector<int>::pointer end = (char *)v47;
      if (v34 == v35) {
        goto LABEL_200;
      }
    }
  }
  unsigned int v168 = v28;
  char v170 = v27;
  unint64_t v162 = HIDWORD(v11);
  unsigned __int32 v68 = 0;
  int8x16_t v69 = 0;
  uint64_t v70 = 0;
  while (2)
  {
    while (1)
    {
      unint64_t v71 = *((unsigned int *)v34 + 4) | ((unint64_t)*((unsigned int *)v34 + 3) << 32);
      if (v70 >= v69) {
        break;
      }
      *v70++ = v71;
      v34 += 24;
      if (v34 == v35) {
        goto LABEL_123;
      }
    }
    int64_t v72 = (char *)v70 - (char *)v68;
    uint64_t v73 = v70 - v68;
    unint64_t v74 = v73 + 1;
    if ((unint64_t)(v73 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    int v75 = v70;
    if (((char *)v69 - (char *)v68) >> 2 > v74) {
      unint64_t v74 = ((char *)v69 - (char *)v68) >> 2;
    }
    if ((unint64_t)((char *)v69 - (char *)v68) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v76 = v74;
    }
    if (!v76)
    {
      int v77 = 0;
      int v78 = v70;
      int v79 = (unint64_t *)(8 * v73);
      *(void *)(8 * v73) = v71;
      uint64_t v70 = (unint64_t *)(8 * v73 + 8);
      int64_t v80 = (char *)v75 - (char *)v68;
      if (v75 == v68) {
        goto LABEL_109;
      }
LABEL_106:
      unint64_t v81 = v80 - 8;
      if (v81 >= 0x168)
      {
        int v84 = v78 - 1;
        unint64_t v85 = ((char *)v84 - (char *)v68) & 0xFFFFFFFFFFFFFFF8;
        if (&v77[v72 - 8 - v85] > &v77[v72 - 8])
        {
          uint64_t v82 = v75;
        }
        else if ((unint64_t *)((char *)v84 - v85) > v84)
        {
          uint64_t v82 = v75;
        }
        else if ((unint64_t)((char *)v75 - &v77[v72]) >= 0x20)
        {
          uint64_t v86 = (v81 >> 3) + 1;
          uint64_t v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v82 = &v75[v87 / 0xFFFFFFFFFFFFFFF8];
          int v79 = (unint64_t *)((char *)v79 - v87);
          long long v88 = &v77[8 * v73 - 16];
          int v89 = v75 - 2;
          uint64_t v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v91 = *(_OWORD *)v89;
            *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
            *(_OWORD *)long long v88 = v91;
            v88 -= 32;
            v89 -= 4;
            v90 -= 4;
          }
          while (v90);
          if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_109;
          }
        }
        else
        {
          uint64_t v82 = v75;
        }
      }
      else
      {
        uint64_t v82 = v78;
      }
      do
      {
        unint64_t v83 = *--v82;
        *--int v79 = v83;
      }
      while (v82 != v68);
      goto LABEL_109;
    }
    if (v76 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v77 = (char *)operator new(8 * v76);
    int v78 = v70;
    int v79 = (unint64_t *)&v77[8 * v73];
    *int v79 = v71;
    uint64_t v70 = v79 + 1;
    int64_t v80 = (char *)v75 - (char *)v68;
    if (v75 != v68) {
      goto LABEL_106;
    }
LABEL_109:
    int8x16_t v69 = (unint64_t *)&v77[8 * v76];
    if (v68) {
      operator delete(v68);
    }
    unsigned __int32 v68 = v79;
    v34 += 24;
    if (v34 != v35) {
      continue;
    }
    break;
  }
LABEL_123:
  unsigned int v92 = *v159;
  int v93 = v162;
  if (*v159 > v162)
  {
    unsigned int v158 = v159[1] - (v172 << v170);
    uint64_t v94 = v177[4];
    unsigned int v157 = v159[2] - (v168 << v170);
    __int16 v95 = v70;
    int32x4_t v96 = (unsigned int *)v68;
    uint64_t v166 = v94;
    while (1)
    {
      long long __p = v96;
      int v163 = v93;
      if (v96 != (unsigned int *)v95) {
        break;
      }
      unint64_t v98 = 0;
      unsigned __int32 v68 = 0;
LABEL_166:
      if (__p)
      {
        int64_t v129 = v98;
        operator delete(__p);
        unint64_t v98 = v129;
      }
      int v93 = v163 + 1;
      unsigned int v92 = *v159;
      int32x4_t v96 = (unsigned int *)v68;
      __int16 v95 = v98;
      if (v163 + 1 >= *v159) {
        goto LABEL_169;
      }
    }
    unsigned __int32 v68 = 0;
    unsigned int v97 = 0;
    unint64_t v98 = 0;
    int v99 = (v157 >> (v92 + ~(_BYTE)v93)) & 1 | (2 * ((v158 >> (v92 + ~(_BYTE)v93)) & 1));
    int v100 = v99 + 5;
    int v167 = v99 + 5;
    int v169 = v99;
    uint64_t v164 = v95;
    while (2)
    {
      unsigned int v101 = 0;
      uint64_t v102 = 0;
      uint64_t v103 = *v96;
      unsigned int v104 = v96[1];
      uint64_t v165 = v96;
      uint64_t v105 = (unsigned __int16 *)(v94 + 16 * v103);
      uint64_t v106 = (v103 + 1);
      int v107 = 2 * v104;
      int v171 = 2 * v104;
      unsigned int v173 = v103 + 1;
LABEL_132:
      if (((*v105 >> (2 * v101)) & 1) == 0)
      {
        uint64_t v108 = v102;
        goto LABEL_131;
      }
      uint64_t v108 = v106;
      if (v102) {
        uint64_t v108 = *(unsigned int *)(v94 + 16 * v102 + 12);
      }
      if ((v101 & 3) == v99)
      {
        unint64_t v109 = v108 | ((unint64_t)(v107 + (v101 >> 2)) << 32);
        if (v98 < v97)
        {
          *v98++ = v109;
          goto LABEL_131;
        }
        int64_t v110 = (char *)v98 - (char *)v68;
        uint64_t v111 = v98 - v68;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v97 - (char *)v68) >> 2 > v112) {
          unint64_t v112 = ((char *)v97 - (char *)v68) >> 2;
        }
        if ((unint64_t)((char *)v97 - (char *)v68) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v113 = v112;
        }
        if (v113)
        {
          if (v113 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v114 = v98;
          long long v115 = operator new(8 * v113);
          unint64_t v98 = v114;
          unint64_t v116 = (unint64_t *)&v115[8 * v111];
          unint64_t *v116 = v109;
          uint64_t v117 = (uint64_t)(v116 + 1);
          int64_t v118 = (char *)v98 - (char *)v68;
          if (v98 == v68)
          {
LABEL_152:
            unsigned int v97 = (unint64_t *)&v115[8 * v113];
            if (v68) {
              operator delete(v68);
            }
            unsigned __int32 v68 = v116;
            unint64_t v98 = (unint64_t *)v117;
            uint64_t v94 = v166;
            int v100 = v167;
            int v99 = v169;
            int v107 = v171;
            uint64_t v106 = v173;
            goto LABEL_131;
          }
        }
        else
        {
          long long v115 = 0;
          unint64_t v116 = (unint64_t *)(8 * v111);
          *(void *)(8 * v111) = v109;
          uint64_t v117 = 8 * v111 + 8;
          int64_t v118 = (char *)v98 - (char *)v68;
          if (v98 == v68) {
            goto LABEL_152;
          }
        }
        unint64_t v119 = v118 - 8;
        if (v119 >= 0x168)
        {
          unint64_t v122 = ((char *)(v98 - 1) - (char *)v68) & 0xFFFFFFFFFFFFFFF8;
          if (&v115[v110 - 8 - v122] > &v115[v110 - 8])
          {
            unsigned int v120 = v98;
          }
          else if ((unint64_t *)((char *)v98 - v122 - 8) > v98 - 1)
          {
            unsigned int v120 = v98;
          }
          else if ((unint64_t)((char *)v98 - v115 - v110) >= 0x20)
          {
            uint64_t v123 = (v119 >> 3) + 1;
            uint64_t v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
            unsigned int v120 = &v98[v124 / 0xFFFFFFFFFFFFFFF8];
            unint64_t v116 = (unint64_t *)((char *)v116 - v124);
            unsigned int v125 = &v115[8 * v111 - 16];
            unint64_t v126 = v98 - 2;
            uint64_t v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v128 = *(_OWORD *)v126;
              *(v125 - 1) = *((_OWORD *)v126 - 1);
              _OWORD *v125 = v128;
              v125 -= 2;
              v126 -= 4;
              v127 -= 4;
            }
            while (v127);
            if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_152;
            }
          }
          else
          {
            unsigned int v120 = v98;
          }
        }
        else
        {
          unsigned int v120 = v98;
        }
        do
        {
          unint64_t v121 = *--v120;
          *--unint64_t v116 = v121;
        }
        while (v120 != v68);
        goto LABEL_152;
      }
LABEL_131:
      ++v101;
      uint64_t v102 = v108;
      if (v101 == v100)
      {
        int32x4_t v96 = v165 + 2;
        if (v165 + 2 == (unsigned int *)v164) {
          goto LABEL_166;
        }
        continue;
      }
      goto LABEL_132;
    }
  }
  unint64_t v98 = v70;
LABEL_169:
  uint64_t v130 = v160;
  int64_t v131 = v98;
  std::vector<unsigned int>::reserve(v160, v98 - v68);
  if (v68 != v131)
  {
    unint64_t v132 = v131;
    unint64_t v133 = (char *)v160->__end_;
    uint64_t v134 = v68;
    unint64_t v135 = v131;
    while (1)
    {
      unint64_t v137 = (unint64_t)v130->__end_cap_.__value_;
      if ((unint64_t)v133 >= v137) {
        break;
      }
      *(_DWORD *)unint64_t v133 = *((_DWORD *)v134 + 1);
      uint64_t v136 = (uint64_t)(v133 + 4);
LABEL_172:
      v130->__end_ = (std::vector<unsigned int>::pointer)v136;
      ++v134;
      unint64_t v133 = (char *)v136;
      if (v134 == v132) {
        goto LABEL_198;
      }
    }
    long long v138 = (char *)v130->__begin_;
    uint64_t v139 = v133 - (char *)v130->__begin_;
    uint64_t v140 = v139 >> 2;
    unint64_t v141 = (v139 >> 2) + 1;
    if (v141 >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v142 = v137 - (void)v138;
    if (v142 >> 1 > v141) {
      unint64_t v141 = v142 >> 1;
    }
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v143 = v141;
    }
    if (v143)
    {
      if (v143 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64_t v144 = operator new(4 * v143);
      unint64_t v132 = v135;
      uint64_t v145 = (unsigned int *)&v144[4 * v140];
      unsigned int *v145 = *((_DWORD *)v134 + 1);
      uint64_t v136 = (uint64_t)(v145 + 1);
      int64_t v146 = v133 - v138;
      if (v133 != v138)
      {
LABEL_183:
        unint64_t v147 = v146 - 4;
        if (v147 < 0xBC
          || (unint64_t v150 = (v133 - 4 - v138) & 0xFFFFFFFFFFFFFFFCLL, &v144[v139 - 4 - v150] > &v144[v139 - 4])
          || &v133[-v150 - 4] > v133 - 4
          || (unint64_t)(v133 - v144 - v139) < 0x20)
        {
          int v148 = v133;
          uint64_t v130 = v160;
        }
        else
        {
          uint64_t v151 = (v147 >> 2) + 1;
          uint64_t v152 = 4 * (v151 & 0x7FFFFFFFFFFFFFF8);
          int v148 = &v133[-v152];
          uint64_t v145 = (unsigned int *)((char *)v145 - v152);
          long long v153 = &v144[4 * v140 - 16];
          long long v154 = v133 - 16;
          uint64_t v155 = v151 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v156 = *(_OWORD *)v154;
            *(v153 - 1) = *((_OWORD *)v154 - 1);
            _OWORD *v153 = v156;
            v153 -= 2;
            v154 -= 32;
            v155 -= 8;
          }
          while (v155);
          uint64_t v130 = v160;
          if (v151 == (v151 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_189:
            v130->__begin_ = v145;
            v130->__end_ = (std::vector<unsigned int>::pointer)v136;
            v130->__end_cap_.__value_ = (unsigned int *)&v144[4 * v143];
            if (v138)
            {
              operator delete(v138);
              unint64_t v132 = v135;
            }
            goto LABEL_172;
          }
        }
        do
        {
          unsigned int v149 = *((_DWORD *)v148 - 1);
          v148 -= 4;
          *--uint64_t v145 = v149;
        }
        while (v148 != v138);
        goto LABEL_189;
      }
    }
    else
    {
      int64_t v144 = 0;
      uint64_t v145 = (unsigned int *)(4 * v140);
      *(_DWORD *)(4 * v140) = *((_DWORD *)v134 + 1);
      uint64_t v136 = 4 * v140 + 4;
      int64_t v146 = v133 - v138;
      if (v133 != v138) {
        goto LABEL_183;
      }
    }
    uint64_t v130 = v160;
    goto LABEL_189;
  }
LABEL_198:
  if (v68) {
    operator delete(v68);
  }
LABEL_200:
  uint64_t v35 = v174;
LABEL_201:
  if (v35) {
    operator delete(v35);
  }
  uint64_t v25 = v178;
LABEL_204:
  uint64_t v15 = 0xFFFFFFFFLL;
  if (v25)
  {
LABEL_32:
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_1A2874A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  if (v20)
  {
    operator delete(v20);
    unsigned int v23 = __p;
    if (!__p)
    {
LABEL_3:
      std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v21 - 96);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unsigned int v23 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v21 - 96);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer begin = this->__begin_;
  if (__n <= this->__end_cap_.__value_ - this->__begin_) {
    return;
  }
  if (__n >> 62) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  std::vector<unsigned int>::pointer end = this->__end_;
  std::vector<unsigned int>::size_type v5 = 4 * __n;
  unsigned int v6 = operator new(4 * __n);
  uint64_t v7 = (char *)end - (char *)begin;
  BOOL v8 = (unsigned int *)&v6[((char *)end - (char *)begin) & 0xFFFFFFFFFFFFFFFCLL];
  unsigned int v9 = v8;
  if (end != begin)
  {
    if ((unint64_t)(v7 - 4) < 0x2C)
    {
      unsigned int v9 = (unsigned int *)&v6[((char *)end - (char *)begin) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        unsigned int v18 = *--end;
        *--unsigned int v9 = v18;
      }
      while (end != begin);
      goto LABEL_11;
    }
    unsigned int v9 = (unsigned int *)&v6[((char *)end - (char *)begin) & 0xFFFFFFFFFFFFFFFCLL];
    if ((char *)end - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v10 = v7 >> 2;
    unint64_t v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
    uint64_t v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v13 = &end[v12 / 0xFFFFFFFFFFFFFFFCLL];
    unsigned int v9 = &v8[v12 / 0xFFFFFFFFFFFFFFFCLL];
    unsigned int v14 = &v6[4 * v10 - 16];
    uint64_t v15 = (long long *)(end - 4);
    uint64_t v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v17 = *v15;
      *(v14 - 1) = *(v15 - 1);
      *unsigned int v14 = v17;
      v14 -= 2;
      v15 -= 2;
      v16 -= 8;
    }
    while (v16);
    std::vector<unsigned int>::pointer end = v13;
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  this->__begin_ = v9;
  this->__end_ = v8;
  this->__end_cap_.__value_ = (unsigned int *)&v6[v5];
  if (begin)
  {
    operator delete(begin);
  }
}

void geo::c3mm::C3mmArea::insertFile(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int v6 = (std::recursive_mutex *)(a1 + 176);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  uint64_t v17 = *a2;
  unsigned int v18 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *a3;
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (void *)(a1 + 160);
  unsigned int v9 = *(uint64_t **)(a1 + 160);
  if (!v9)
  {
    unint64_t v11 = (uint64_t *)(a1 + 160);
    goto LABEL_15;
  }
  do
  {
    while (1)
    {
      unint64_t v11 = v9;
      unsigned int v12 = *((_DWORD *)v9 + 8);
      if (v17 >= v12)
      {
        if (v12 < v17) {
          goto LABEL_12;
        }
        unsigned int v13 = *((_DWORD *)v11 + 9);
        if (HIDWORD(v17) >= v13)
        {
          if (v13 < HIDWORD(v17)) {
            goto LABEL_12;
          }
          unsigned int v14 = *((_DWORD *)v11 + 10);
          if (v18 >= v14) {
            break;
          }
        }
      }
      unsigned int v9 = (uint64_t *)*v11;
      uint64_t v10 = v11;
      if (!*v11) {
        goto LABEL_15;
      }
    }
    if (v14 >= v18) {
      goto LABEL_18;
    }
LABEL_12:
    unsigned int v9 = (uint64_t *)v11[1];
  }
  while (v9);
  uint64_t v10 = v11 + 1;
LABEL_15:
  uint64_t v15 = operator new(0x40uLL);
  v15[4] = v17;
  *((_DWORD *)v15 + 10) = v18;
  v15[6] = v8;
  v15[7] = v7;
  void *v15 = 0;
  v15[1] = 0;
  v15[2] = v11;
  *uint64_t v10 = v15;
  uint64_t v16 = **(void **)(a1 + 152);
  if (v16)
  {
    *(void *)(a1 + 152) = v16;
    uint64_t v15 = (void *)*v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v15);
  ++*(void *)(a1 + 168);
  uint64_t v7 = 0;
LABEL_18:
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::recursive_mutex::unlock(v6);
}

void sub_1A2874DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<geo::c3mm::C3mmFileIndex,std::shared_ptr<geo::c3mm::C3mmFile>>::~pair((uint64_t)&a9);
  std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<geo::c3mm::C3mmFileIndex,std::shared_ptr<geo::c3mm::C3mmFile>>::~pair(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t geo::c3mm::loadFromChunk(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int8x16_t a6, int8x16_t a7, double a8, double a9, double a10, int8x16_t a11, double a12, int8x16_t a13)
{
  uint64_t v52 = a4;
  int v53 = a5;
  if (!a2)
  {
    uint64_t v16 = (std::__shared_weak_count *)operator new(0x50uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582F28;
    *(_OWORD *)&v16[1].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v16[2].__shared_owners_ = 0u;
    v16[3].__vftable = 0;
    v16[1].std::__shared_count = 0u;
    unsigned int v60 = (unsigned __int8 *)&v16[1];
    unint64_t v61 = v16;
    geo::c3mm::C3mmArea::insertFile(a3, &v52, (uint64_t *)&v60);
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_12;
  }
  if (a2 < 6 || *(unsigned char *)a1 != 67 || *(unsigned char *)(a1 + 1) != 51 || *(unsigned char *)(a1 + 2) != 77 || *(unsigned char *)(a1 + 3) != 77)
  {
LABEL_12:
    uint64_t v17 = "Invalid c3mm file!";
LABEL_13:
    puts(v17);
    return 0;
  }
  if (*(_WORD *)(a1 + 4) != 2)
  {
    printf("Unsupported C3MM version: %i\n");
    return 0;
  }
  if (a2 <= 0xB)
  {
    printf("Invalid c3mm file, size (%zu) is less than header size (%i)\n, ");
    return 0;
  }
  int v20 = a4;
  int v21 = *(unsigned __int16 *)(a1 + 6);
  int v22 = *(_DWORD *)(a1 + 8);
  *(_WORD *)a3 = 2;
  *(_DWORD *)(a3 + 4) = v21;
  unsigned int v24 = *(_DWORD **)(a3 + 120);
  unsigned int v23 = *(_DWORD **)(a3 + 128);
  if (v24 != v23) {
    goto LABEL_20;
  }
  {
    uint64_t v17 = "Meta levels are not defined";
    goto LABEL_13;
  }
  unsigned int v24 = *(_DWORD **)(a3 + 120);
  unsigned int v23 = *(_DWORD **)(a3 + 128);
LABEL_20:
  if (v24 == v23)
  {
LABEL_23:
    puts("No meta level for file index");
    unsigned int v24 = 0;
  }
  else
  {
    while (*v24 != v20)
    {
      v24 += 3;
      if (v24 == v23) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v25 = (char *)operator new(0x50uLL);
  *((void *)v25 + 1) = 0;
  *((void *)v25 + 2) = 0;
  *(void *)uint64_t v25 = &unk_1EF582F28;
  double v30 = 0.0;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *((void *)v25 + 9) = 0;
  unsigned int v64 = v25;
  *(_OWORD *)(v25 + 24) = 0u;
  uint64_t v63 = (char **)(v25 + 24);
  if (!v24) {
    goto LABEL_77;
  }
  if (!v22)
  {
LABEL_70:
    geo::c3mm::C3mmArea::insertFile(a3, &v52, (uint64_t *)&v63);
    uint64_t v18 = 1;
    goto LABEL_78;
  }
  uint64_t v51 = a1 - 4;
  unint64_t v31 = 12;
  while (1)
  {
    if (v31 >= a2) {
      unint64_t v32 = a2;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32 + 1 > a2)
    {
      uint64_t v50 = "type";
      goto LABEL_76;
    }
    unint64_t v33 = v32 + 5;
    if (v32 + 5 > a2)
    {
      uint64_t v50 = "length";
      goto LABEL_76;
    }
    if (v32 + 6 > a2)
    {
      uint64_t v50 = "compression";
      goto LABEL_76;
    }
    unint64_t v34 = v32 + 10;
    if (v32 + 10 > a2) {
      break;
    }
    int v35 = *(unsigned __int8 *)(a1 + v32);
    uint64_t v36 = *(unsigned int *)(v51 + v33);
    int v37 = *(unsigned __int8 *)(a1 + v33);
    unint64_t v38 = *(unsigned int *)(v51 + v34);
    int v39 = (unsigned __int8 *)(a1 + v34);
    unsigned int v60 = 0;
    unint64_t v61 = 0;
    uint64_t v62 = 0;
    if (v37 == 1)
    {
      std::vector<unsigned char>::resize((uint64_t)&v60, v38);
      if (!lzma_decompress_bytes())
      {
LABEL_58:
        LOBYTE(HighPrecisionBounds) = 0;
        goto LABEL_66;
      }
      int v39 = v60;
    }
    switch(v35)
    {
      case 0:
        v59[0] = v63;
        v59[1] = (char **)v64;
        if (v64) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v64 + 1, 1uLL, memory_order_relaxed);
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v59);
        if ((RootIndex & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_62;
      case 1:
        v58[0] = (int **)v63;
        v58[1] = (int **)v64;
        if (v64) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v64 + 1, 1uLL, memory_order_relaxed);
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v58);
        if (ChildInfo) {
          goto LABEL_62;
        }
        goto LABEL_58;
      case 2:
        uint64_t v42 = (uint64_t)v63;
        v57[0] = v63;
        v57[1] = v64;
        if (v64) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v64 + 1, 1uLL, memory_order_relaxed);
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v57);
        if (Bounds) {
          goto LABEL_62;
        }
        goto LABEL_58;
      case 3:
      case 5:
        unint64_t v44 = (uint64_t *)v63;
        v56[0] = v63;
        v56[1] = v64;
        if (v64) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v64 + 1, 1uLL, memory_order_relaxed);
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v56);
        if (RootBounds) {
          goto LABEL_62;
        }
        goto LABEL_58;
      case 6:
        int v46 = (uint64_t *)v63;
        v55[0] = v63;
        v55[1] = v64;
        if (v64) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v64 + 1, 1uLL, memory_order_relaxed);
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v55);
        if (!ChildBounds) {
          goto LABEL_58;
        }
        goto LABEL_62;
      case 7:
        uint64_t v49 = (uint64_t)v63;
        v54[0] = v63;
        v54[1] = v64;
        if (v64) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v64 + 1, 1uLL, memory_order_relaxed);
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v54);
        if (HighPrecisionBounds) {
          goto LABEL_62;
        }
        break;
      default:
LABEL_62:
        if (v31 + v36 >= a2) {
          unint64_t v31 = a2;
        }
        else {
          v31 += v36;
        }
        LOBYTE(HighPrecisionBounds) = 1;
        break;
    }
LABEL_66:
    if (v60)
    {
      unint64_t v61 = (std::__shared_weak_count *)v60;
      operator delete(v60);
    }
    if ((HighPrecisionBounds & 1) == 0) {
      goto LABEL_77;
    }
    if (!--v22) {
      goto LABEL_70;
    }
  }
  uint64_t v50 = "uncomressedLength";
LABEL_76:
  printf("Failed to read C3mm file - %s", v50);
LABEL_77:
  uint64_t v18 = 0;
LABEL_78:
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&v63);
  return v18;
}

void sub_1A2875364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  uint64_t v17 = *(void **)(v15 - 128);
  if (v17)
  {
    *(void *)(v15 - 120) = v17;
    operator delete(v17);
  }
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v15 - 104);
  _Unwind_Resume(a1);
}

void sub_1A28753BC(_Unwind_Exception *a1)
{
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::readMetaLevels(uint64_t a1, unint64_t a2, void *a3, int8x16_t a4, int8x16_t a5, double a6, double a7, double a8, int8x16_t a9, double a10, int8x16_t a11)
{
  unint64_t v11 = a3;
  int v12 = *(_DWORD *)(a1 + 8);
  if (!v12) {
    return v11[16] != v11[15];
  }
  uint64_t v14 = a1;
  int v15 = 0;
  uint64_t v90 = a1 - 4;
  float32x4_t v16 = 0uLL;
  int8x16_t v17 = (int8x16_t)xmmword_1A28FD090;
  int8x16_t v18 = (int8x16_t)xmmword_1A28FD0A0;
  uint64_t v19 = 12;
  int v87 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    if (v19 + 1 > a2)
    {
      int v79 = "type";
      goto LABEL_83;
    }
    uint64_t v20 = v19 + 5;
    if (v19 + 5 > a2)
    {
      int v79 = "length";
      goto LABEL_83;
    }
    if (v19 + 6 > a2)
    {
      int v79 = "compression";
      goto LABEL_83;
    }
    uint64_t v21 = v19 + 10;
    if (v19 + 10 > a2) {
      break;
    }
    int v22 = (unsigned __int8 *)(v14 + v19);
    uint64_t v23 = *(unsigned int *)(v90 + v20);
    int v24 = *v22;
    size_t v25 = *(unsigned int *)(v90 + v21);
    if (*(unsigned char *)(v14 + v20) == 1)
    {
      double v26 = v11;
      uint64_t v27 = *(unsigned int *)(v90 + v20);
      __n128 v91 = (__n128)a9;
      float32x4_t v93 = v16;
      __n128 v95 = (__n128)a11;
      if (v25)
      {
        double v28 = (unsigned __int8 *)operator new(v25);
        bzero(v28, v25);
      }
      else
      {
        double v28 = 0;
      }
      if (lzma_auto_decoder())
      {
        char v46 = 0;
        uint64_t v19 = v21;
        uint64_t v14 = a1;
        float v29 = v28;
        unint64_t v11 = v26;
        int v12 = v87;
        goto LABEL_74;
      }
      uint64_t v47 = v27;
      uint64_t v48 = v28;
      unsigned int v49 = lzma_code();
      lzma_end();
      uint64_t v23 = v47;
      float v29 = v48;
      int v22 = v48;
      BOOL v50 = v49 > 1;
      unint64_t v11 = a3;
      uint64_t v14 = a1;
      int v12 = v87;
      a9 = (int8x16_t)v91;
      float32x4_t v16 = v93;
      a11 = (int8x16_t)v95;
      int8x16_t v18 = (int8x16_t)xmmword_1A28FD0A0;
      int8x16_t v17 = (int8x16_t)xmmword_1A28FD090;
      if (v50)
      {
        char v46 = 0;
        uint64_t v19 = v21;
        goto LABEL_74;
      }
    }
    else
    {
      float v29 = 0;
    }
    long long __p = v29;
    if (v24 != 4)
    {
LABEL_66:
      __n128 v91 = (__n128)a9;
      float32x4_t v93 = v16;
      __n128 v95 = (__n128)a11;
      if (v21 + v23 >= a2) {
        uint64_t v19 = a2;
      }
      else {
        uint64_t v19 = v21 + v23;
      }
      char v46 = 1;
      goto LABEL_73;
    }
    if (v25)
    {
      unint64_t v30 = *v22;
      unint64_t v31 = v11;
      unint64_t v32 = (_DWORD *)v11[16];
      unint64_t v33 = (_DWORD *)v31[15];
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
      BOOL v35 = v30 >= v34;
      unint64_t v36 = v30 - v34;
      if (v30 <= v34)
      {
        uint64_t v14 = a1;
        if (!v35) {
          a3[16] = &v33[3 * *v22];
        }
      }
      else
      {
        uint64_t v37 = v31[17];
        __n128 v92 = (__n128)a9;
        float32x4_t v94 = v16;
        __n128 v96 = (__n128)a11;
        unint64_t v85 = *v22;
        if (0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v32) >> 2) >= v36)
        {
          size_t v52 = 12 * ((12 * v36 - 12) / 0xC) + 12;
          uint64_t v53 = v23;
          bzero(v32, v52);
          unint64_t v30 = v85;
          uint64_t v23 = v53;
          int8x16_t v18 = (int8x16_t)xmmword_1A28FD0A0;
          int8x16_t v17 = (int8x16_t)xmmword_1A28FD090;
          a9 = (int8x16_t)v92;
          float32x4_t v16 = v94;
          a11 = (int8x16_t)v96;
          unsigned char v31[16] = (char *)v32 + v52;
          uint64_t v14 = a1;
        }
        else
        {
          unint64_t v82 = v30 - v34;
          uint64_t v84 = v23;
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v33) >> 2);
          unint64_t v39 = 2 * v38;
          if (2 * v38 <= v30) {
            unint64_t v39 = *v22;
          }
          if (v38 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v39 = 0x1555555555555555;
          }
          if (v39 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v81 = v39;
          int64_t v80 = (char *)operator new(12 * v39);
          uint64_t v40 = &v80[4 * (v32 - v33)];
          size_t v83 = 12 * ((12 * v82 - 12) / 0xC) + 12;
          bzero(v40, v83);
          long long v41 = v40;
          if (v32 == v33)
          {
            unint64_t v30 = v85;
            long long v45 = a3;
            uint64_t v14 = a1;
            a9 = (int8x16_t)v92;
            float32x4_t v16 = v94;
            a11 = (int8x16_t)v96;
            int8x16_t v18 = (int8x16_t)xmmword_1A28FD0A0;
            int8x16_t v17 = (int8x16_t)xmmword_1A28FD090;
            uint64_t v23 = v84;
            unint64_t v42 = v81;
          }
          else
          {
            uint64_t v14 = a1;
            a9 = (int8x16_t)v92;
            float32x4_t v16 = v94;
            a11 = (int8x16_t)v96;
            int8x16_t v18 = (int8x16_t)xmmword_1A28FD0A0;
            int8x16_t v17 = (int8x16_t)xmmword_1A28FD090;
            uint64_t v23 = v84;
            unint64_t v30 = v85;
            unint64_t v42 = v81;
            do
            {
              uint64_t v43 = *(void *)(v32 - 3);
              v32 -= 3;
              int v44 = v32[2];
              *(void *)(v41 - 12) = v43;
              v41 -= 12;
              *((_DWORD *)v41 + 2) = v44;
            }
            while (v32 != v33);
            long long v45 = a3;
            unint64_t v32 = (_DWORD *)a3[15];
          }
          v45[15] = v41;
          uint8_t v45[16] = &v40[v83];
          v45[17] = &v80[12 * v42];
          if (v32)
          {
            operator delete(v32);
            uint64_t v23 = v84;
            unint64_t v30 = v85;
            int8x16_t v18 = (int8x16_t)xmmword_1A28FD0A0;
            int8x16_t v17 = (int8x16_t)xmmword_1A28FD090;
            a9 = (int8x16_t)v92;
            float32x4_t v16 = v94;
            a11 = (int8x16_t)v96;
          }
        }
      }
      unint64_t v11 = a3;
      if (!v30) {
        goto LABEL_66;
      }
      unint64_t v54 = a3[15];
      size_t v55 = v25 >> 1;
      if (v25 <= 2) {
        uint64_t v56 = 2;
      }
      else {
        uint64_t v56 = v25;
      }
      unint64_t v57 = (unint64_t)(v56 - 1) >> 1;
      if (v57 >= v55) {
        unint64_t v58 = v25 >> 1;
      }
      else {
        unint64_t v58 = v57;
      }
      unint64_t v59 = v30 - 1;
      if (v58 >= v30 - 1) {
        unint64_t v60 = v30 - 1;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60 < 0x10) {
        goto LABEL_57;
      }
      if (v25 <= 2) {
        uint64_t v61 = 2;
      }
      else {
        uint64_t v61 = v25;
      }
      unint64_t v62 = (unint64_t)(v61 - 1) >> 1;
      if (v62 >= v55) {
        unint64_t v62 = v25 >> 1;
      }
      if (v62 < v59) {
        unint64_t v59 = v62;
      }
      uint64_t v63 = (const char *)(v22 + 1);
      if (v54 >= (unint64_t)&v22[2 * v59 + 3] || (unint64_t)v63 >= v54 + 12 * v59 + 12)
      {
        unint64_t v66 = v60 + 1;
        uint64_t v67 = 8;
        if (((v60 + 1) & 7) != 0) {
          uint64_t v67 = (v60 + 1) & 7;
        }
        unint64_t v64 = v66 - v67;
        uint64_t v65 = (2 * (v66 - v67)) | 1;
        unint64_t v68 = ~v60 + v67;
        int8x16_t v69 = (float *)a3[15];
        do
        {
          a4 = (int8x16_t)vld2_s8(v63);
          v63 += 16;
          a9 = vqtbl1q_s8(a4, v18);
          a11 = vqtbl1q_s8(a5, v18);
          uint64_t v70 = v69 + 24;
          vst3q_f32(v69, *(float32x4x3_t *)a9.i8);
          unint64_t v71 = v69 + 12;
          v97.val[0] = (float32x4_t)vqtbl1q_s8(a4, v17);
          v97.val[2] = (float32x4_t)vqtbl1q_s8(a5, v17);
          v97.val[1] = v16;
          vst3q_f32(v71, v97);
          int8x16_t v69 = v70;
          v68 += 8;
        }
        while (v68);
      }
      else
      {
LABEL_57:
        unint64_t v64 = 0;
        uint64_t v65 = 1;
      }
      int64_t v72 = (_DWORD *)(v54 + 12 * v64 + 8);
      unint64_t v73 = v30 - v64;
      size_t v74 = v55 - v64;
      while (1)
      {
        if (!v74)
        {
          __n128 v91 = (__n128)a9;
          float32x4_t v93 = v16;
          __n128 v95 = (__n128)a11;
          uint64_t v51 = "level";
          goto LABEL_72;
        }
        uint64_t v75 = v65 + 2;
        if (v65 + 2 > v25) {
          break;
        }
        unint64_t v76 = &v22[v65];
        unsigned int v77 = *v76;
        LODWORD(v76) = v76[1];
        *((void *)v72 - 1) = v77;
        *int64_t v72 = v76;
        v72 += 3;
        --v74;
        uint64_t v65 = v75;
        if (!--v73) {
          goto LABEL_66;
        }
      }
      __n128 v91 = (__n128)a9;
      float32x4_t v93 = v16;
      __n128 v95 = (__n128)a11;
      uint64_t v51 = "maxLevel";
    }
    else
    {
      __n128 v91 = (__n128)a9;
      float32x4_t v93 = v16;
      __n128 v95 = (__n128)a11;
      uint64_t v51 = "numLevels";
    }
LABEL_72:
    printf("Failed to read C3mm file - %s", v51);
    char v46 = 0;
    uint64_t v19 = v21;
LABEL_73:
    float v29 = __p;
LABEL_74:
    if (v29) {
      operator delete(v29);
    }
    if ((v46 & 1) == 0) {
      return 0;
    }
    ++v15;
    a9 = (int8x16_t)v91;
    float32x4_t v16 = v93;
    a11 = (int8x16_t)v95;
    int8x16_t v18 = (int8x16_t)xmmword_1A28FD0A0;
    int8x16_t v17 = (int8x16_t)xmmword_1A28FD090;
    if (v15 == v12) {
      return v11[16] != v11[15];
    }
  }
  int v79 = "uncomressedLength";
LABEL_83:
  printf("Failed to read C3mm file - %s", v79);
  return 0;
}

void sub_1A28759D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::readRootIndex(unsigned __int8 *a1, unint64_t a2, uint64_t a3, char ***a4)
{
  if (a2)
  {
    if (a2 >= 5)
    {
      if (a2 >= 9)
      {
        if (a2 == 9)
        {
          BOOL v5 = 0;
          unsigned int v6 = "maxLevel";
        }
        else
        {
          if (a2 >= 0xC)
          {
            int v9 = *a1;
            int v10 = *(_DWORD *)(a1 + 1);
            int v11 = *(_DWORD *)(a1 + 5);
            int v12 = a1[9];
            unint64_t v13 = *((unsigned __int16 *)a1 + 5);
            *(_DWORD *)(a3 + 4) = v9;
            *(_DWORD *)(a3 + 8) = v12;
            uint64_t v14 = *a4;
            int v15 = **a4;
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((*a4)[1] - v15) >> 3);
            if (v13 <= v16)
            {
              if (v13 < v16) {
                v14[1] = &v15[24 * v13];
              }
            }
            else
            {
              std::vector<geo::c3mm::C3mmRoot>::__append(v14, v13 - v16);
            }
            if (v13)
            {
              if (a2 < 0x10)
              {
                BOOL v5 = 0;
LABEL_22:
                unsigned int v6 = "rootKey";
                goto LABEL_23;
              }
              uint64_t v17 = 0;
              unint64_t v18 = 0;
              uint64_t v19 = **a4;
              uint64_t v20 = 12;
              while (1)
              {
                unsigned int v21 = *(_DWORD *)&a1[v20];
                int v22 = &v19[v17];
                *(void *)int v22 = 0;
                *((void *)v22 + 1) = 0;
                *((void *)v22 + 2) = 0x200000000;
                uint64_t v19 = **a4;
                uint64_t v23 = &v19[v17];
                *(_DWORD *)uint64_t v23 = v9;
                *((_DWORD *)v23 + 1) = v10 + (v21 >> 20);
                *((_DWORD *)v23 + 2) = ((v21 >> 8) & 0xFFF) + v11;
                *((_DWORD *)v23 + 3) = v21;
                if (24 * v13 - 24 == v17) {
                  break;
                }
                unint64_t v24 = v20 + 8;
                v20 += 4;
                v17 += 24;
                ++v18;
                if (v24 > a2)
                {
                  BOOL v5 = v18 >= v13;
                  goto LABEL_22;
                }
              }
            }
            return 1;
          }
          BOOL v5 = 0;
          unsigned int v6 = "numRoots";
        }
      }
      else
      {
        BOOL v5 = 0;
        unsigned int v6 = "originY";
      }
    }
    else
    {
      BOOL v5 = 0;
      unsigned int v6 = "originX";
    }
  }
  else
  {
    BOOL v5 = 0;
    unsigned int v6 = "originLevel";
  }
LABEL_23:
  printf("Failed to read C3mm file - %s", v6);
  return v5;
}

uint64_t anonymous namespace'::readChildInfo(unsigned int *a1, unint64_t a2, uint64_t a3, int ***a4)
{
  if (a2 < 4)
  {
    uint64_t v4 = "numTiles";
LABEL_3:
    printf("Failed to read C3mm file - %s", v4);
    return 0;
  }
  unint64_t v10 = *a1;
  int v11 = *a4;
  int v12 = (char *)(*a4)[4];
  unint64_t v13 = (*a4)[5];
  unint64_t v14 = ((char *)v13 - v12) >> 4;
  unint64_t v15 = v10 - v14;
  if (v10 <= v14)
  {
    if (v10 >= v14) {
      goto LABEL_21;
    }
    double v26 = &v12[16 * v10];
    goto LABEL_18;
  }
  unint64_t v16 = v11[6];
  if (v15 <= ((char *)v16 - (char *)v13) >> 4)
  {
    bzero((*a4)[5], 16 * v15);
    double v26 = (char *)&v13[4 * v15];
LABEL_18:
    v11[5] = (int *)v26;
    goto LABEL_21;
  }
  uint64_t v17 = (char *)v16 - v12;
  uint64_t v18 = v17 >> 3;
  if (v17 >> 3 <= v10) {
    uint64_t v18 = *a1;
  }
  BOOL v19 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
  if (!v19) {
    unint64_t v20 = v18;
  }
  if (v20 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v35 = 16 * v20;
  unsigned int v21 = (char *)operator new(16 * v20);
  int v22 = &v21[16 * v14];
  unint64_t v36 = &v21[v35];
  size_t v23 = 16 * v15;
  bzero(v22, v23);
  unint64_t v24 = &v22[v23];
  if (v13 == (int *)v12)
  {
    v11[4] = (int *)v22;
    v11[5] = (int *)v24;
    v11[6] = (int *)v36;
    if (!v12) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  do
  {
    size_t v25 = v22 - 16;
    *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
    v13 -= 4;
    v22 -= 16;
  }
  while (v13 != (int *)v12);
  v11[4] = (int *)v25;
  v11[5] = (int *)v24;
  v11[6] = (int *)v36;
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
LABEL_21:
  uint64_t v27 = *a4;
  uint64_t v28 = (uint64_t)(*a4)[4];
  if (v10)
  {
    uint64_t v29 = 0;
    unint64_t v30 = (_WORD *)v28;
    uint64_t v4 = "childMask";
    while (v29 + 6 <= a2)
    {
      *unint64_t v30 = *(_WORD *)((char *)a1 + v29 + 4);
      v30 += 8;
      v29 += 2;
      if (2 * v10 == v29) {
        goto LABEL_25;
      }
    }
    goto LABEL_3;
  }
LABEL_25:
  unint64_t v31 = *v27;
  unint64_t v32 = v27[1];
  if (*v27 != v32)
  {
    uint64_t v33 = 0;
    do
    {
      v31[4] = v33;
      int v34 = *v31;
      v31 += 6;
    }
    while (v31 != v32);
  }
  return 1;
}

uint64_t anonymous namespace'::readBounds(uint64_t a1, unint64_t a2, uint64_t a3, double a4, double a5, double a6, float a7)
{
  if (a2 >= 4)
  {
    if (a2 >= 8)
    {
      if (a2 >= 0xC)
      {
        float v10 = *(float *)a1;
        float v11 = *(float *)(a1 + 4);
        uint64_t v12 = *(unsigned int *)(a1 + 8);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)a1;
        *(float *)(a3 + 28) = v11;
        if (!v12) {
          return 1;
        }
        uint64_t v13 = 0;
        uint64_t v14 = 3 * v12;
        unint64_t v15 = (_DWORD *)(*(void *)(a3 + 32) + 8);
        uint64_t v7 = "extentAlt";
        while (v13 + 12 < a2)
        {
          if (v13 + 15 > a2)
          {
            uint64_t v7 = "minAlt";
            break;
          }
          LOWORD(a6) = *(_WORD *)(a1 + v13 + 13);
          *(void *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
          *(float *)&a6 = v10 * (float)SLODWORD(a6);
          LOBYTE(a7) = *(unsigned char *)(a1 + v13 + 12);
          *(v15 - 1) = LODWORD(a6);
          a7 = (float)LODWORD(a7);
          *(float *)&a6 = *(float *)&a6 + (float)(v11 * a7);
          _DWORD *v15 = LODWORD(a6);
          v15 += 4;
          v13 += 3;
          uint64_t v8 = 1;
          if (v14 == v13) {
            return v8;
          }
        }
      }
      else
      {
        uint64_t v7 = "numTiles";
      }
    }
    else
    {
      uint64_t v7 = "extentAltScale";
    }
  }
  else
  {
    uint64_t v7 = "minAltScale";
  }
  printf("Failed to read C3mm file - %s", v7);
  return 0;
}

void anonymous namespace'::loadObjectTree()
{
  long long v1 = 0u;
  long long v2 = 0u;
  *(_OWORD *)long long __p = 0u;
  operator new();
}

void sub_1A2876FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  operator delete(v29);
  operator delete(v30);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1A2877020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (v29)
  {
    operator delete(v29);
    std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::readRootBounds(uint64_t a1, unint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, float a8)
{
  if (a2 >= 4)
  {
    if (a2 >= 8)
    {
      if (a2 == 8)
      {
        uint64_t v8 = "numBits";
      }
      else
      {
        float v11 = *(float *)a1;
        float v12 = *(float *)(a1 + 4);
        char v13 = *(unsigned char *)(a1 + 8);
        uint64_t v9 = 1;
        uint64_t v14 = *a3;
        uint64_t v15 = -1431655765 * ((unint64_t)(a3[1] - *a3) >> 3);
        __asm { FMOV            V2.2S, #1.0 }
        a3[3] = _D2;
        if (!v15) {
          return v9;
        }
        uint64_t v21 = 0;
        float v22 = (float)(1 << v13);
        float v23 = (float)(v12 - v11) / v22;
        uint64_t v24 = a3[4];
        uint64_t v25 = 4 * v15;
        double v26 = (unsigned int *)(v14 + 16);
        uint64_t v8 = "bottomOffset";
        while (v21 + 11 <= a2)
        {
          if (v21 + 13 > a2)
          {
            uint64_t v8 = "topOffset";
            break;
          }
          unsigned int v27 = *v26;
          v26 += 6;
          LOWORD(v22) = *(_WORD *)(a1 + v21 + 9);
          float v22 = v11 + (float)(v23 * (float)LODWORD(v22));
          uint64_t v28 = v24 + 16 * v27;
          LOWORD(a8) = *(_WORD *)(a1 + v21 + 11);
          a8 = v12 - (float)(v23 * (float)LODWORD(a8));
          *(float *)(v28 + 4) = v22;
          *(float *)(v28 + 8) = a8;
          v21 += 4;
          uint64_t v9 = 1;
          if (v25 == v21) {
            return v9;
          }
        }
      }
    }
    else
    {
      uint64_t v8 = "maxAlt";
    }
  }
  else
  {
    uint64_t v8 = "minAlt";
  }
  printf("Failed to read C3mm file - %s", v8);
  return 0;
}

BOOL anonymous namespace'::readChildBounds(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2)
  {
    uint64_t v5 = *a4;
    uint64_t v6 = a4[1];
    if (*a4 != v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = (uint64_t)(a1 + 1);
      double v10 = 1.0;
      float v11 = 1.0 / (double)(1 << *a1);
      uint64_t v12 = a4[4];
      do
      {
        v5 += 24;
      }
      while (v5 != v6);
    }
  }
  else
  {
    printf("Failed to read C3mm file - %s", "numBits");
  }
  return a2 != 0;
}

uint64_t anonymous namespace'::readHighPrecisionBounds(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  if (a2 < 4)
  {
    uint64_t v3 = "numTiles";
LABEL_3:
    printf("Failed to read C3mm file - %s", v3);
    return 0;
  }
  uint64_t v5 = *a1;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a3 + 24) = _D0;
  if (v5)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 8 * v5;
    char v13 = (void *)(*(void *)(a3 + 32) + 4);
    uint64_t v3 = "minAlt";
    while (v11 + 8 <= a2)
    {
      if (v11 + 12 > a2)
      {
        uint64_t v3 = "maxAlt";
        goto LABEL_3;
      }
      *char v13 = *(void *)&a1[v11 / 4 + 1];
      v13 += 2;
      v11 += 8;
      if (v12 == v11) {
        return 1;
      }
    }
    goto LABEL_3;
  }
  return 1;
}

uint64_t anonymous namespace'::buildSubTree(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = (a4 + 1);
  uint64_t v6 = (__int16 *)(a2 + 16 * a4);
  uint64_t v7 = (a3 + 1);
  __int16 v8 = *v6;
  for (BOOL i = (*v6 & 1) == 0; a1 != v7; BOOL i = (*v6 & 1) == 0)
  {
    uint64_t v11 = a2 + 16 * v5;
    uint64_t v12 = v5;
    if (i)
    {
      if ((v8 & 4) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      *(_DWORD *)(v11 + 12) = 0;
      __int16 v8 = *v6;
      if ((*v6 & 4) == 0)
      {
LABEL_4:
        uint64_t v13 = v12;
        LODWORD(v12) = v5;
        if ((v8 & 0x10) != 0) {
          goto LABEL_5;
        }
        goto LABEL_13;
      }
    }
    *(_DWORD *)(v11 + 12) = v12;
    *(_DWORD *)(a2 + 16 * v12 + 12) = 0;
    __int16 v8 = *v6;
    if ((*v6 & 0x10) != 0)
    {
LABEL_5:
      *(_DWORD *)(a2 + 16 * v12 + 12) = v13;
      *(_DWORD *)(a2 + 16 * v13 + 12) = 0;
      __int16 v8 = *v6;
      if ((*v6 & 0x40) != 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v14 = v13;
    LODWORD(v13) = v12;
    if ((v8 & 0x40) != 0)
    {
LABEL_6:
      *(_DWORD *)(a2 + 16 * v13 + 12) = v14;
      *(_DWORD *)(a2 + 16 * v14 + 12) = 0;
      __int16 v8 = *v6;
      if ((*v6 & 0x100) != 0) {
        goto LABEL_7;
      }
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v15 = v14;
    LODWORD(v14) = v13;
    if ((v8 & 0x100) != 0)
    {
LABEL_7:
      *(_DWORD *)(a2 + 16 * v14 + 12) = v15;
      *(_DWORD *)(a2 + 16 * v15 + 12) = 0;
      __int16 v8 = *v6;
      if ((*v6 & 0x400) != 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v16 = v15;
    LODWORD(v15) = v14;
    if ((v8 & 0x400) != 0)
    {
LABEL_8:
      *(_DWORD *)(a2 + 16 * v15 + 12) = v16;
      *(_DWORD *)(a2 + 16 * v16 + 12) = 0;
      __int16 v8 = *v6;
      if ((*v6 & 0x1000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_9;
    }
LABEL_16:
    uint64_t v17 = v16;
    LODWORD(v16) = v15;
    if ((v8 & 0x1000) == 0)
    {
LABEL_17:
      a4 = v17;
      LODWORD(v17) = v16;
      if ((v8 & 0x4000) == 0) {
        return a4;
      }
      goto LABEL_18;
    }
LABEL_9:
    *(_DWORD *)(a2 + 16 * v16 + 12) = v17;
    *(_DWORD *)(a2 + 16 * v17 + 12) = 0;
    if ((*v6 & 0x4000) == 0) {
      return a4;
    }
LABEL_18:
    *(_DWORD *)(a2 + 16 * v17 + 12) = a4;
    uint64_t v6 = (__int16 *)(a2 + 16 * a4);
    *((_DWORD *)v6 + 3) = 0;
    uint64_t v5 = (a4 + 1);
    uint64_t v7 = (v7 + 1);
    __int16 v8 = *v6;
  }
  uint64_t v18 = a2 + 16 * v5;
  uint64_t v19 = v5;
  if (!i)
  {
    *(_DWORD *)(v18 + 12) = 0;
    uint64_t v19 = (a4 + 2);
  }
  if ((v8 & 4) != 0)
  {
    *(_DWORD *)(v18 + 12) = v19;
    *(_DWORD *)(a2 + 16 * v19 + 12) = 0;
    uint64_t v20 = (v19 + 1);
    if ((v8 & 0x10) != 0)
    {
LABEL_23:
      *(_DWORD *)(a2 + 16 * v19 + 12) = v20;
      *(_DWORD *)(a2 + 16 * v20 + 12) = 0;
      uint64_t v21 = (v20 + 1);
      if ((v8 & 0x40) != 0) {
        goto LABEL_24;
      }
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v20 = v19;
    LODWORD(v19) = v5;
    if ((v8 & 0x10) != 0) {
      goto LABEL_23;
    }
  }
  uint64_t v21 = v20;
  LODWORD(v20) = v19;
  if ((v8 & 0x40) != 0)
  {
LABEL_24:
    *(_DWORD *)(a2 + 16 * v20 + 12) = v21;
    *(_DWORD *)(a2 + 16 * v21 + 12) = 0;
    uint64_t v22 = (v21 + 1);
    if ((v8 & 0x100) != 0) {
      goto LABEL_25;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v22 = v21;
  LODWORD(v21) = v20;
  if ((v8 & 0x100) != 0)
  {
LABEL_25:
    *(_DWORD *)(a2 + 16 * v21 + 12) = v22;
    *(_DWORD *)(a2 + 16 * v22 + 12) = 0;
    uint64_t v23 = (v22 + 1);
    if ((v8 & 0x400) != 0) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v23 = v22;
  LODWORD(v22) = v21;
  if ((v8 & 0x400) != 0)
  {
LABEL_26:
    *(_DWORD *)(a2 + 16 * v22 + 12) = v23;
    *(_DWORD *)(a2 + 16 * v23 + 12) = 0;
    uint64_t v24 = (v23 + 1);
    if ((v8 & 0x1000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v24 = v23;
  LODWORD(v23) = v22;
  if ((v8 & 0x1000) != 0)
  {
LABEL_27:
    *(_DWORD *)(a2 + 16 * v23 + 12) = v24;
    *(_DWORD *)(a2 + 16 * v24 + 12) = 0;
    a4 = (v24 + 1);
    if ((v8 & 0x4000) == 0) {
      return a4;
    }
    goto LABEL_35;
  }
LABEL_34:
  a4 = v24;
  LODWORD(v24) = v23;
  if ((v8 & 0x4000) != 0)
  {
LABEL_35:
    *(_DWORD *)(a2 + 16 * v24 + 12) = a4;
    *(_DWORD *)(a2 + 16 * a4 + 12) = 0;
    return (a4 + 1);
  }
  return a4;
}

void std::vector<std::shared_ptr<geo::c3mm::C3mmObjectTree::Node>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    uint64_t v6 = v5 + 16;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
LABEL_3:
    a1[1] = v6;
    return;
  }
  uint64_t v7 = (v5 - *a1) >> 4;
  if ((unint64_t)(v7 + 1) >> 60) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v4 - (void)*a1;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= (unint64_t)(v7 + 1)) {
    uint64_t v9 = v7 + 1;
  }
  BOOL v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  if (!v10) {
    unint64_t v11 = v9;
  }
  if (v11 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v12 = 16 * v11;
  uint64_t v13 = (char *)operator new(16 * v11);
  uint64_t v14 = &v13[16 * v7];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
  uint64_t v6 = v14 + 16;
  uint64_t v15 = &v13[v12];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v16 = *a1;
  uint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = v14;
    a1[1] = v6;
    a1[2] = v15;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v14 - 1) = v18;
      v14 -= 16;
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
    }
    while (v17 != v16);
    uint64_t v17 = *a1;
    uint64_t v19 = a1[1];
    *a1 = v14;
    a1[1] = v6;
    for (a1[2] = v15; v19 != v17; v19 -= 16)
    {
      uint64_t v20 = (std::__shared_weak_count *)*((void *)v19 - 1);
      if (v20)
      {
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  if (!v17) {
    goto LABEL_3;
  }
  operator delete(v17);
  a1[1] = v6;
}

void std::__shared_ptr_pointer<geo::c3mm::C3mmObjectTree *,std::shared_ptr<geo::c3mm::C3mmObjectTree>::__shared_ptr_default_delete<geo::c3mm::C3mmObjectTree,geo::c3mm::C3mmObjectTree>,std::allocator<geo::c3mm::C3mmObjectTree>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<geo::c3mm::C3mmObjectTree *,std::shared_ptr<geo::c3mm::C3mmObjectTree>::__shared_ptr_default_delete<geo::c3mm::C3mmObjectTree,geo::c3mm::C3mmObjectTree>,std::allocator<geo::c3mm::C3mmObjectTree>>::__on_zero_shared(uint64_t result)
{
  long long v1 = *(void ***)(result + 24);
  if (v1)
  {
    long long v2 = (char *)*v1;
    if (*v1)
    {
      uint64_t v3 = (char *)v1[1];
      unint64_t v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        unint64_t v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<geo::c3mm::C3mmObjectTree *,std::shared_ptr<geo::c3mm::C3mmObjectTree>::__shared_ptr_default_delete<geo::c3mm::C3mmObjectTree,geo::c3mm::C3mmObjectTree>,std::allocator<geo::c3mm::C3mmObjectTree>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN3geo4c3mm14C3mmObjectTreeEE27__shared_ptr_default_deleteIS3_S3_EE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN3geo4c3mm14C3mmObjectTreeEE27__shared_ptr_default_deleteIS3_S3_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN3geo4c3mm14C3mmObjectTreeEE27__shared_ptr_default_deleteIS3_S3_EE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN3geo4c3mm14C3mmObjectTreeEE27__shared_ptr_default_deleteIS3_S3_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Group>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Group>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Group>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    unint64_t v4 = *(void **)(a1 + 64);
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v1);
      unint64_t v4 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Model>::__on_zero_shared(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

uint64_t std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100](uint64_t a1)
{
  long long v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0xAA];
    unint64_t v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v4) % 0xAA);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v6 + 8);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        v6 += 24;
        if (v6 - (void)*v5 == 4080) {
          goto LABEL_8;
        }
LABEL_4:
        if (v6 == v7)
        {
          long long v2 = *(void ***)(a1 + 8);
          uint64_t v3 = *(void ***)(a1 + 16);
          goto LABEL_12;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v6 += 24;
      if (v6 - (void)*v5 != 4080) {
        goto LABEL_4;
      }
LABEL_8:
      unint64_t v9 = (unint64_t)v5[1];
      ++v5;
      unint64_t v6 = v9;
      goto LABEL_4;
    }
LABEL_12:
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = *(void ***)(a1 + 16);
        long long v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 170;
LABEL_19:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t anonymous namespace'::propagateBounds(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, float a7, float a8)
{
  unint64_t v11 = (float *)(a2 + 16 * a4);
  float v13 = v11[1];
  float v12 = v11[2];
  float v14 = v12 - v13;
  uint64_t v15 = a4 + 1;
  float v16 = (float)(v12 - v13) * a7;
  uint64_t v17 = (a3 + 1);
  __int16 v18 = *(_WORD *)v11;
  BOOL v19 = (*(_WORD *)v11 & 1) == 0;
  if (v17 < a1)
  {
    do
    {
      if (v19)
      {
        if ((v18 & 4) == 0)
        {
          if ((v18 & 0x10) == 0)
          {
            if ((v18 & 0x40) == 0)
            {
              if ((v18 & 0x100) == 0)
              {
                if ((v18 & 0x400) == 0)
                {
                  if ((v18 & 0x1000) == 0)
                  {
                    if ((v18 & 0x4000) == 0) {
                      return a6;
                    }
                    goto LABEL_4;
                  }
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
              goto LABEL_36;
            }
            goto LABEL_32;
          }
          goto LABEL_28;
        }
        uint64_t v24 = v15;
      }
      else
      {
        LOBYTE(v14) = *(unsigned char *)(a5 + a6);
        LOBYTE(a8) = *(unsigned char *)(a5 + (a6 + 1));
        uint64_t v22 = a2 + 16 * v15;
        *(float *)(v22 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
        *(float *)(v22 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
        __int16 v23 = *(_WORD *)v11;
        if ((*(_WORD *)v11 & 4) == 0)
        {
          LODWORD(v24) = v15;
          if ((v23 & 0x10) == 0) {
            goto LABEL_15;
          }
          goto LABEL_26;
        }
        if (v15) {
          uint64_t v24 = *(unsigned int *)(a2 + 16 * v15 + 12);
        }
        else {
          uint64_t v24 = 0;
        }
      }
      LOBYTE(v14) = *(unsigned char *)(a5 + a6);
      LOBYTE(a8) = *(unsigned char *)(a5 + (a6 + 1));
      uint64_t v25 = a2 + 16 * v24;
      *(float *)(v25 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v25 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      __int16 v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x10) == 0)
      {
LABEL_15:
        if ((v23 & 0x40) == 0) {
          goto LABEL_16;
        }
        goto LABEL_30;
      }
LABEL_26:
      if (v24)
      {
        uint64_t v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
        goto LABEL_29;
      }
LABEL_28:
      uint64_t v24 = v15;
LABEL_29:
      LOBYTE(v14) = *(unsigned char *)(a5 + a6);
      LOBYTE(a8) = *(unsigned char *)(a5 + (a6 + 1));
      uint64_t v26 = a2 + 16 * v24;
      *(float *)(v26 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v26 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      __int16 v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x40) == 0)
      {
LABEL_16:
        if ((v23 & 0x100) == 0) {
          goto LABEL_17;
        }
        goto LABEL_34;
      }
LABEL_30:
      if (v24)
      {
        uint64_t v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
        goto LABEL_33;
      }
LABEL_32:
      uint64_t v24 = v15;
LABEL_33:
      LOBYTE(v14) = *(unsigned char *)(a5 + a6);
      LOBYTE(a8) = *(unsigned char *)(a5 + (a6 + 1));
      uint64_t v27 = a2 + 16 * v24;
      *(float *)(v27 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v27 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      __int16 v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x100) == 0)
      {
LABEL_17:
        if ((v23 & 0x400) == 0) {
          goto LABEL_18;
        }
        goto LABEL_38;
      }
LABEL_34:
      if (v24)
      {
        uint64_t v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
        goto LABEL_37;
      }
LABEL_36:
      uint64_t v24 = v15;
LABEL_37:
      LOBYTE(v14) = *(unsigned char *)(a5 + a6);
      LOBYTE(a8) = *(unsigned char *)(a5 + (a6 + 1));
      uint64_t v28 = a2 + 16 * v24;
      *(float *)(v28 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v28 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      __int16 v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x400) == 0)
      {
LABEL_18:
        if ((v23 & 0x1000) != 0) {
          goto LABEL_42;
        }
        goto LABEL_19;
      }
LABEL_38:
      if (v24)
      {
        uint64_t v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
        goto LABEL_41;
      }
LABEL_40:
      uint64_t v24 = v15;
LABEL_41:
      LOBYTE(v14) = *(unsigned char *)(a5 + a6);
      LOBYTE(a8) = *(unsigned char *)(a5 + (a6 + 1));
      uint64_t v29 = a2 + 16 * v24;
      *(float *)(v29 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v29 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      __int16 v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x1000) != 0)
      {
LABEL_42:
        if (v24)
        {
          uint64_t v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
          goto LABEL_45;
        }
LABEL_44:
        uint64_t v24 = v15;
LABEL_45:
        LOBYTE(v14) = *(unsigned char *)(a5 + a6);
        LOBYTE(a8) = *(unsigned char *)(a5 + (a6 + 1));
        uint64_t v30 = a2 + 16 * v24;
        *(float *)(v30 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
        *(float *)(v30 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
        if ((*(_WORD *)v11 & 0x4000) == 0) {
          return a6;
        }
        goto LABEL_46;
      }
LABEL_19:
      if ((v23 & 0x4000) == 0) {
        return a6;
      }
LABEL_46:
      if (v24) {
        LODWORD(v15) = *(_DWORD *)(a2 + 16 * v24 + 12);
      }
LABEL_4:
      unsigned int v21 = a6 + 1;
      LOBYTE(v14) = *(unsigned char *)(a5 + a6);
      a6 = (a6 + 2);
      LOBYTE(a8) = *(unsigned char *)(a5 + v21);
      a8 = (float)LODWORD(a8);
      float v13 = v13 + (float)(v16 * (float)LODWORD(v14));
      float v12 = v12 - (float)(v16 * a8);
      unint64_t v11 = (float *)(a2 + 16 * v15);
      v11[1] = v13;
      unsigned char v11[2] = v12;
      float v14 = v12 - v13;
      uint64_t v15 = (v15 + 1);
      float v16 = (float)(v12 - v13) * a7;
      uint64_t v17 = (v17 + 1);
      __int16 v18 = *(_WORD *)v11;
      BOOL v19 = (*(_WORD *)v11 & 1) == 0;
    }
    while (a1 != v17);
  }
  if (v19)
  {
    if ((v18 & 4) == 0)
    {
      if ((v18 & 0x10) == 0)
      {
        if ((v18 & 0x40) == 0)
        {
          if ((v18 & 0x100) == 0)
          {
            if ((v18 & 0x400) == 0)
            {
              if ((v18 & 0x1000) == 0)
              {
                if ((v18 & 0x4000) == 0) {
                  return a6;
                }
                goto LABEL_92;
              }
              goto LABEL_88;
            }
            goto LABEL_84;
          }
          goto LABEL_80;
        }
        goto LABEL_76;
      }
      goto LABEL_72;
    }
    unsigned int v33 = v15;
  }
  else
  {
    unsigned int v31 = a6 + 1;
    LOBYTE(v14) = *(unsigned char *)(a5 + a6);
    a6 = (a6 + 2);
    LOBYTE(a8) = *(unsigned char *)(a5 + v31);
    float v14 = v13 + (float)(v16 * (float)LODWORD(v14));
    a8 = v12 - (float)(v16 * (float)LODWORD(a8));
    uint64_t v32 = a2 + 16 * v15;
    *(float *)(v32 + 4) = v14;
    *(float *)(v32 + 8) = a8;
    if ((v18 & 4) == 0)
    {
      unsigned int v33 = v15;
      if ((v18 & 0x10) != 0) {
        goto LABEL_70;
      }
LABEL_59:
      if ((v18 & 0x40) != 0) {
        goto LABEL_74;
      }
LABEL_60:
      if ((v18 & 0x100) != 0) {
        goto LABEL_78;
      }
LABEL_61:
      if ((v18 & 0x400) != 0) {
        goto LABEL_82;
      }
LABEL_62:
      if ((v18 & 0x1000) != 0) {
        goto LABEL_86;
      }
LABEL_63:
      if ((v18 & 0x4000) == 0) {
        return a6;
      }
      goto LABEL_90;
    }
    if (v15) {
      unsigned int v33 = *(_DWORD *)(a2 + 16 * v15 + 12);
    }
    else {
      unsigned int v33 = 0;
    }
  }
  unsigned int v34 = a6 + 1;
  LOBYTE(v14) = *(unsigned char *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(unsigned char *)(a5 + v34);
  float v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  uint64_t v35 = a2 + 16 * v33;
  *(float *)(v35 + 4) = v14;
  *(float *)(v35 + 8) = a8;
  if ((v18 & 0x10) == 0) {
    goto LABEL_59;
  }
LABEL_70:
  if (v33)
  {
    unsigned int v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_73;
  }
LABEL_72:
  unsigned int v33 = v15;
LABEL_73:
  unsigned int v36 = a6 + 1;
  LOBYTE(v14) = *(unsigned char *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(unsigned char *)(a5 + v36);
  float v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  uint64_t v37 = a2 + 16 * v33;
  *(float *)(v37 + 4) = v14;
  *(float *)(v37 + 8) = a8;
  if ((v18 & 0x40) == 0) {
    goto LABEL_60;
  }
LABEL_74:
  if (v33)
  {
    unsigned int v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_77;
  }
LABEL_76:
  unsigned int v33 = v15;
LABEL_77:
  unsigned int v38 = a6 + 1;
  LOBYTE(v14) = *(unsigned char *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(unsigned char *)(a5 + v38);
  float v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  uint64_t v39 = a2 + 16 * v33;
  *(float *)(v39 + 4) = v14;
  *(float *)(v39 + 8) = a8;
  if ((v18 & 0x100) == 0) {
    goto LABEL_61;
  }
LABEL_78:
  if (v33)
  {
    unsigned int v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_81;
  }
LABEL_80:
  unsigned int v33 = v15;
LABEL_81:
  unsigned int v40 = a6 + 1;
  LOBYTE(v14) = *(unsigned char *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(unsigned char *)(a5 + v40);
  float v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  uint64_t v41 = a2 + 16 * v33;
  *(float *)(v41 + 4) = v14;
  *(float *)(v41 + 8) = a8;
  if ((v18 & 0x400) == 0) {
    goto LABEL_62;
  }
LABEL_82:
  if (v33)
  {
    unsigned int v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_85;
  }
LABEL_84:
  unsigned int v33 = v15;
LABEL_85:
  unsigned int v42 = a6 + 1;
  LOBYTE(v14) = *(unsigned char *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(unsigned char *)(a5 + v42);
  float v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  uint64_t v43 = a2 + 16 * v33;
  *(float *)(v43 + 4) = v14;
  *(float *)(v43 + 8) = a8;
  if ((v18 & 0x1000) == 0) {
    goto LABEL_63;
  }
LABEL_86:
  if (v33)
  {
    unsigned int v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_89;
  }
LABEL_88:
  unsigned int v33 = v15;
LABEL_89:
  unsigned int v44 = a6 + 1;
  LOBYTE(v14) = *(unsigned char *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(unsigned char *)(a5 + v44);
  float v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  uint64_t v45 = a2 + 16 * v33;
  *(float *)(v45 + 4) = v14;
  *(float *)(v45 + 8) = a8;
  if ((v18 & 0x4000) != 0)
  {
LABEL_90:
    if (v33) {
      LODWORD(v15) = *(_DWORD *)(a2 + 16 * v33 + 12);
    }
LABEL_92:
    unsigned int v46 = a6 + 1;
    LOBYTE(v14) = *(unsigned char *)(a5 + a6);
    a6 = (a6 + 2);
    LOBYTE(a8) = *(unsigned char *)(a5 + v46);
    uint64_t v47 = a2 + 16 * v15;
    *(float *)(v47 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
    *(float *)(v47 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
  }
  return a6;
}

void std::vector<geo::c3mm::C3mmRoot>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = &v5[24 * a2];
      do
      {
        *(void *)uint64_t v5 = 0;
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0x200000000;
        v5 += 24;
      }
      while (v5 != v11);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    float v12 = &v10[24 * v6];
    float v13 = &v12[24 * a2];
    float v14 = v12;
    do
    {
      *(void *)float v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0x200000000;
      v14 += 24;
    }
    while (v14 != v13);
    uint64_t v15 = *a1;
    if (v5 != *a1)
    {
      do
      {
        long long v16 = *(_OWORD *)(v5 - 24);
        *((void *)v12 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v15);
      uint64_t v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[24 * v9];
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmFile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmFile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmFile>::__on_zero_shared(void *a1)
{
  long long v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

void *geo::A3DFileCreate(geo *this, const unsigned __int8 *a2)
{
  if (!this)
  {
    uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = "No A3D data provided\n";
    size_t v5 = 21;
    goto LABEL_12;
  }
  if ((unint64_t)a2 <= 0xD)
  {
    uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = "A3D appears to be malformed, there's not enough room for a header\n";
    size_t v5 = 66;
LABEL_12:
    fwrite(v4, v5, 1uLL, v3);
    return 0;
  }
  if (strncmp((const char *)this, "A3D", 3uLL))
  {
    uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = "Data does not appear to be A3D format.\n";
    size_t v5 = 39;
    goto LABEL_12;
  }
  if (*((unsigned char *)this + 3) != 1)
  {
    uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = "A3D contains incorrect version for parser.\n";
    size_t v5 = 43;
    goto LABEL_12;
  }
  uint64_t v7 = *((unsigned int *)this + 1);
  uint64_t v8 = *((unsigned int *)this + 2);
  if (__CFADD__(v8, v7))
  {
    uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = "A3D appears to be malformed, it claims its vertices end after more than SIZE_MAX bytes.\n";
    size_t v5 = 88;
    goto LABEL_12;
  }
  if (v8 + v7 > (unint64_t)a2)
  {
    uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = "A3D appears to be malformed, there aren't enough bytes for all its vertices.\n";
    size_t v5 = 77;
    goto LABEL_12;
  }
  uint64_t v10 = *((unsigned __int16 *)this + 6);
  if (145 * v10 + 14 > (unint64_t)a2)
  {
    uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = "A3D appears to be malformed, there aren't enough bytes for the sub-mesh headers.\n";
LABEL_18:
    size_t v5 = 81;
    goto LABEL_12;
  }
  if (!v10)
  {
    uint64_t v17 = v8 + 14;
    unint64_t v18 = v8 + 14;
    goto LABEL_46;
  }
  unint64_t v11 = (unsigned int *)((char *)this + 27);
  uint64_t v12 = *((unsigned __int16 *)this + 6);
  do
  {
    uint64_t v13 = *(unsigned int *)((char *)v11 - 13);
    uint64_t v14 = *(unsigned int *)((char *)v11 - 9);
    if (__CFADD__(v14, v13))
    {
      uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
      unint64_t v4 = "A3D appears to be malformed, it claims one of its mesh index sets ends after more than SIZE_MAX bytes.\n";
      size_t v5 = 103;
      goto LABEL_12;
    }
    if (v14 + v13 > (unint64_t)a2)
    {
      uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
      unint64_t v4 = "A3D appears to be malformed, there aren't enough bytes for all its sub mesh indices.\n";
      size_t v5 = 85;
      goto LABEL_12;
    }
    uint64_t v15 = *v11;
    if (v15)
    {
      uint64_t v16 = *(v11 - 1);
      if (__CFADD__(v15, v16))
      {
        uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
        unint64_t v4 = "A3D appears to be malformed, it claims one of its textures ends after more than SIZE_MAX bytes.\n";
        size_t v5 = 96;
        goto LABEL_12;
      }
      if (v16 + v15 > (unint64_t)a2)
      {
        uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
        unint64_t v4 = "A3D appears to be malformed, there aren't enough bytes for one of its textures.\n";
        size_t v5 = 80;
        goto LABEL_12;
      }
    }
    unint64_t v11 = (unsigned int *)((char *)v11 + 145);
    --v12;
  }
  while (v12);
  unint64_t v18 = v8 + 14;
  if (v10 < 2)
  {
    uint64_t v19 = 0;
    uint64_t v17 = v18;
LABEL_37:
    uint64_t v24 = v10 - v19;
    uint64_t v25 = (unsigned int *)((char *)this + 145 * v19 + 27);
    do
    {
      uint64_t v26 = v17 + *(unsigned int *)((char *)v25 - 9);
      unsigned int v27 = *v25;
      uint64_t v25 = (unsigned int *)((char *)v25 + 145);
      uint64_t v17 = v26 + v27 + 145;
      --v24;
    }
    while (v24);
    goto LABEL_39;
  }
  uint64_t v20 = 0;
  uint64_t v19 = (unsigned __int16)v10 & 0xFFFE;
  unsigned int v21 = (unsigned int *)((char *)this + 163);
  uint64_t v22 = v19;
  unint64_t v23 = v18;
  do
  {
    v23 += *(unsigned int *)((char *)v21 - 145) + (unint64_t)*(v21 - 34) + 145;
    v20 += *v21 + (unint64_t)*(unsigned int *)((char *)v21 + 9) + 145;
    unsigned int v21 = (unsigned int *)((char *)v21 + 290);
    v22 -= 2;
  }
  while (v22);
  uint64_t v17 = v20 + v23;
  if (v19 != v10) {
    goto LABEL_37;
  }
LABEL_39:
  if (v10 < 2)
  {
    uint64_t v28 = 0;
LABEL_44:
    uint64_t v32 = v10 - v28;
    unsigned int v33 = (unsigned int *)((char *)this + 145 * v28 + 27);
    do
    {
      unint64_t v34 = v18 + *(unsigned int *)((char *)v33 - 9);
      unsigned int v35 = *v33;
      unsigned int v33 = (unsigned int *)((char *)v33 + 145);
      unint64_t v18 = v34 + v35 + 145;
      --v32;
    }
    while (v32);
    goto LABEL_46;
  }
  uint64_t v29 = 0;
  uint64_t v28 = (unsigned __int16)v10 & 0xFFFE;
  uint64_t v30 = (unsigned int *)((char *)this + 163);
  uint64_t v31 = v28;
  do
  {
    v18 += *(unsigned int *)((char *)v30 - 145) + (unint64_t)*(v30 - 34) + 145;
    v29 += *v30 + (unint64_t)*(unsigned int *)((char *)v30 + 9) + 145;
    uint64_t v30 = (unsigned int *)((char *)v30 + 290);
    v31 -= 2;
  }
  while (v31);
  v18 += v29;
  if (v28 != v10) {
    goto LABEL_44;
  }
LABEL_46:
  if (v18 < (unint64_t)a2)
  {
    unint64_t v36 = *((unsigned __int8 *)this + v18);
    if (*((unsigned char *)this + v18))
    {
      if (v36 > (-2 - v17) / 0x11uLL)
      {
        uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
        unint64_t v4 = "A3D appears to be malformed, it claims its metadata headers end after more than SIZE_MAX bytes.\n";
        size_t v5 = 96;
        goto LABEL_12;
      }
      if (v17 + 17 * v36 + 1 <= (unint64_t)a2)
      {
        uint64_t v37 = (unsigned int *)((char *)this + v17 + 6);
        while (*v37 + (unint64_t)*(v37 - 1) <= (unint64_t)a2)
        {
          uint64_t v37 = (unsigned int *)((char *)v37 + 17);
          if (!--v36) {
            goto LABEL_55;
          }
        }
        uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
        unint64_t v4 = "A3D appears to be malformed, there aren't enough bytes for its metadata.\n";
        size_t v5 = 73;
        goto LABEL_12;
      }
      uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
      unint64_t v4 = "A3D appears to be malformed, there aren't enough bytes for its metadata headers.\n";
      goto LABEL_18;
    }
  }
LABEL_55:
  uint64_t result = malloc_type_malloc(0x20uLL, 0x1070040A47808ACuLL);
  if (result)
  {
    *uint64_t result = this;
    result[1] = a2;
    result[2] = 0;
    result[3] = 0;
  }
  return result;
}

void geo::A3DFileDelete(geo *this, void *a2)
{
  if (this)
  {
    uint64_t v3 = (void *)*((void *)this + 3);
    if (v3) {
      free(v3);
    }
    free(this);
  }
}

unsigned int *geo::A3DGetShadows(unsigned int *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result) {
    return result;
  }
  size_t v5 = result;
  uint64_t v6 = result[2] + 14;
  uint64_t v7 = *((unsigned __int16 *)result + 6);
  unint64_t v8 = v6;
  if (*((_WORD *)result + 6))
  {
    if (v7 == 1)
    {
      uint64_t v9 = 0;
      unint64_t v8 = result[2] + 14;
LABEL_8:
      uint64_t v14 = v7 - v9;
      uint64_t v15 = (unsigned int *)((char *)result + 145 * v9 + 27);
      do
      {
        unint64_t v16 = v8 + *(unsigned int *)((char *)v15 - 9);
        unsigned int v17 = *v15;
        uint64_t v15 = (unsigned int *)((char *)v15 + 145);
        unint64_t v8 = v16 + v17 + 145;
        --v14;
      }
      while (v14);
      goto LABEL_10;
    }
    uint64_t v10 = 0;
    uint64_t v9 = (unsigned __int16)v7 & 0xFFFE;
    unint64_t v11 = (unsigned int *)((char *)result + 163);
    uint64_t v12 = v9;
    uint64_t v13 = result[2] + 14;
    do
    {
      v13 += *(unsigned int *)((char *)v11 - 145) + (unint64_t)*(v11 - 34) + 145;
      v10 += *v11 + (unint64_t)*(unsigned int *)((char *)v11 + 9) + 145;
      unint64_t v11 = (unsigned int *)((char *)v11 + 290);
      v12 -= 2;
    }
    while (v12);
    unint64_t v8 = v10 + v13;
    if (v9 != v7) {
      goto LABEL_8;
    }
  }
LABEL_10:
  if (v8 >= a2) {
    return result;
  }
  uint64_t v18 = *((unsigned __int8 *)result + v8);
  if (!*((unsigned char *)result + v8)) {
    return result;
  }
  if (!*((_WORD *)result + 6)) {
    goto LABEL_20;
  }
  if (v7 == 1)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = (unsigned __int16)v7 & 0xFFFE;
    unsigned int v21 = (unsigned int *)((char *)result + 163);
    uint64_t v22 = v19;
    do
    {
      v6 += *(unsigned int *)((char *)v21 - 145) + (unint64_t)*(v21 - 34) + 145;
      v20 += *v21 + (unint64_t)*(unsigned int *)((char *)v21 + 9) + 145;
      unsigned int v21 = (unsigned int *)((char *)v21 + 290);
      v22 -= 2;
    }
    while (v22);
    v6 += v20;
    if (v19 == v7) {
      goto LABEL_20;
    }
  }
  uint64_t v23 = v7 - v19;
  uint64_t v24 = (unsigned int *)((char *)result + 145 * v19 + 27);
  do
  {
    uint64_t v25 = v6 + *(unsigned int *)((char *)v24 - 9);
    unsigned int v26 = *v24;
    uint64_t v24 = (unsigned int *)((char *)v24 + 145);
    uint64_t v6 = v25 + v26 + 145;
    --v23;
  }
  while (v23);
LABEL_20:
  unint64_t v27 = v6 + 1;
  BOOL v28 = v27 >= a2;
  if (v27 >= a2) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = (char *)result + v27;
  }
  if (!v28)
  {
    unint64_t v30 = 0;
    uint64_t v31 = (unint64_t *)(a4 + 8);
    uint64_t v32 = (unsigned int *)(v29 + 5);
    do
    {
      if (!*((unsigned char *)v32 - 5))
      {
        uint64_t result = (unsigned int *)memcpy((void *)(a3 + 8 * v30), (char *)v5 + *(v32 - 1), *v32);
        unint64_t v33 = (unint64_t)*v32 >> 3;
        *(v31 - 1) = v30;
        *uint64_t v31 = v33;
        v30 += v33;
      }
      v31 += 2;
      uint64_t v32 = (unsigned int *)((char *)v32 + 17);
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t geo::prepareAlignedVertices(geo *this, void *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 8);
  *((void *)this + 2) = v3 >> 5;
  if (v3 < 0x20) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(v2 + 4);
  uint64_t result = (uint64_t)malloc_type_malloc(32 * (v3 >> 5), 0x1000040E0EAB150uLL);
  *((void *)this + 3) = result;
  if (result)
  {
    memcpy((void *)result, (const void *)(v2 + v6), 32 * *((void *)this + 2));
    return 1;
  }
  return result;
}

uint64_t geo::A3DGetMetadataHeaderCount(geo *this, const unsigned __int8 *a2)
{
  unint64_t v2 = *((unsigned int *)this + 2) + 14;
  uint64_t v3 = *((unsigned __int16 *)this + 6);
  if (!*((_WORD *)this + 6)) {
    goto LABEL_9;
  }
  if (v3 == 1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = (unsigned __int16)v3 & 0xFFFE;
    uint64_t v6 = (unsigned int *)((char *)this + 163);
    uint64_t v7 = v4;
    do
    {
      v2 += *(unsigned int *)((char *)v6 - 145) + (unint64_t)*(v6 - 34) + 145;
      v5 += *v6 + (unint64_t)*(unsigned int *)((char *)v6 + 9) + 145;
      uint64_t v6 = (unsigned int *)((char *)v6 + 290);
      v7 -= 2;
    }
    while (v7);
    v2 += v5;
    if (v4 == v3) {
      goto LABEL_9;
    }
  }
  uint64_t v8 = v3 - v4;
  uint64_t v9 = (unsigned int *)((char *)this + 145 * v4 + 27);
  do
  {
    unint64_t v10 = v2 + *(unsigned int *)((char *)v9 - 9);
    unsigned int v11 = *v9;
    uint64_t v9 = (unsigned int *)((char *)v9 + 145);
    unint64_t v2 = v10 + v11 + 145;
    --v8;
  }
  while (v8);
LABEL_9:
  if (v2 >= (unint64_t)a2) {
    return 0;
  }
  else {
    return *((unsigned __int8 *)this + v2);
  }
}

uint64_t geo::A3DGetMetadataHeaders(geo *this, const unsigned __int8 *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2) + 14;
  uint64_t v3 = *((unsigned __int16 *)this + 6);
  if (!*((_WORD *)this + 6)) {
    goto LABEL_9;
  }
  if (v3 == 1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = (unsigned __int16)v3 & 0xFFFE;
    uint64_t v6 = (unsigned int *)((char *)this + 163);
    uint64_t v7 = v4;
    do
    {
      v2 += *(unsigned int *)((char *)v6 - 145) + (unint64_t)*(v6 - 34) + 145;
      v5 += *v6 + (unint64_t)*(unsigned int *)((char *)v6 + 9) + 145;
      uint64_t v6 = (unsigned int *)((char *)v6 + 290);
      v7 -= 2;
    }
    while (v7);
    v2 += v5;
    if (v4 == v3) {
      goto LABEL_9;
    }
  }
  uint64_t v8 = v3 - v4;
  uint64_t v9 = (unsigned int *)((char *)this + 145 * v4 + 27);
  do
  {
    uint64_t v10 = v2 + *(unsigned int *)((char *)v9 - 9);
    unsigned int v11 = *v9;
    uint64_t v9 = (unsigned int *)((char *)v9 + 145);
    uint64_t v2 = v10 + v11 + 145;
    --v8;
  }
  while (v8);
LABEL_9:
  unint64_t v12 = v2 + 1;
  if (v12 >= (unint64_t)a2) {
    return 0;
  }
  else {
    return (uint64_t)this + v12;
  }
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x1F40F4A90]();
  return result;
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7240](alloc, str, attributes);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1F40D7250](alloc, maxLength);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1F40D7258](alloc, maxLength, aStr);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x1F40D7298](aStr);
}

CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr)
{
  return (CFStringRef)MEMORY[0x1F40D72A0](aStr);
}

void CFAttributedStringReplaceString(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef replacement)
{
}

void CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value)
{
}

void CFAttributedStringSetAttributes(CFMutableAttributedStringRef aStr, CFRange range, CFDictionaryRef replacement, Boolean clearOtherAttributes)
{
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1F40D7D78](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84D8](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2 = MEMORY[0x1F40D85D8](theString, theIndex);
  result.length = v3;
  result.location = v2;
  return result;
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1F40D97A0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97A8](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97E8](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F0](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return MEMORY[0x1F40D9858](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1F40D9868](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1F40D9870](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1F40D9878](context);
}

uint64_t CGBitmapGetAlignedBytesPerRow()
{
  return MEMORY[0x1F40D9890]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x1F40D9980](a1, *(void *)&intent, color, options);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1F40D99D0](color1, color2);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x1F40D99F0](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D99F8](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1F40D9A00](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1F40D9A18](color);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1F40D9A60](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF0]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

CGColorSpaceRef CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B90](space);
}

void CGColorSpaceGetColorTable(CGColorSpaceRef space, uint8_t *table)
{
}

size_t CGColorSpaceGetColorTableCount(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9BB8](space);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9BE0](space);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1F40D9BE8](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9BF0](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9C50](space);
}

void CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)
{
}

void CGContextAddArcToPoint(CGContextRef c, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius)
{
}

void CGContextAddEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
}

void CGContextClip(CGContextRef c)
{
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
}

void CGContextClosePath(CGContextRef c)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
}

void CGContextDrawRadialGradient(CGContextRef c, CGGradientRef gradient, CGPoint startCenter, CGFloat startRadius, CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)
{
}

void CGContextEOClip(CGContextRef c)
{
}

void CGContextEOFillPath(CGContextRef c)
{
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextFillPath(CGContextRef c)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

uint64_t CGContextGetBaseCTM()
{
  return MEMORY[0x1F40D9F58]();
}

CGRect CGContextGetPathBoundingBox(CGContextRef c)
{
  MEMORY[0x1F40D9FE8](c);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextReplacePathWithStrokedPath(CGContextRef c)
{
}

void CGContextResetClip(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

CGContextRef CGContextRetain(CGContextRef c)
{
  return (CGContextRef)MEMORY[0x1F40DA090](c);
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAllowsAntialiasing(CGContextRef c, BOOL allowsAntialiasing)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

uint64_t CGContextSetBaseCTM()
{
  return MEMORY[0x1F40DA0D8]();
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetFont(CGContextRef c, CGFontRef font)
{
}

void CGContextSetFontSize(CGContextRef c, CGFloat size)
{
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextShowGlyphsAtPositions(CGContextRef c, const CGGlyph *glyphs, const CGPoint *Lpositions, size_t count)
{
}

void CGContextStrokeEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1F40DA2E8](provider);
}

CGDataProviderRef CGDataProviderCreateDirect(void *info, off_t size, const CGDataProviderDirectCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA2F0](info, size, callbacks);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA300](data);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA310](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

uint64_t CGFontCacheGetLocalCache()
{
  return MEMORY[0x1F40DA3A8]();
}

uint64_t CGFontCacheReset()
{
  return MEMORY[0x1F40DA3B0]();
}

CFStringRef CGFontCopyFullName(CGFontRef font)
{
  return (CFStringRef)MEMORY[0x1F40DA3C8](font);
}

CFStringRef CGFontCopyGlyphNameForGlyph(CGFontRef font, CGGlyph glyph)
{
  return (CFStringRef)MEMORY[0x1F40DA3D0](font, glyph);
}

CGFontRef CGFontCreateWithDataProvider(CGDataProviderRef provider)
{
  return (CGFontRef)MEMORY[0x1F40DA430](provider);
}

uint64_t CGFontDBGetLocal()
{
  return MEMORY[0x1F40DA478]();
}

uint64_t CGFontDBPurgeAllFonts()
{
  return MEMORY[0x1F40DA480]();
}

int CGFontGetAscent(CGFontRef font)
{
  return MEMORY[0x1F40DA4A8](font);
}

int CGFontGetCapHeight(CGFontRef font)
{
  return MEMORY[0x1F40DA4B0](font);
}

int CGFontGetDescent(CGFontRef font)
{
  return MEMORY[0x1F40DA4B8](font);
}

BOOL CGFontGetGlyphBBoxes(CGFontRef font, const CGGlyph *glyphs, size_t count, CGRect *bboxes)
{
  return MEMORY[0x1F40DA4D0](font, glyphs, count, bboxes);
}

uint64_t CGFontGetGlyphsForUnichars()
{
  return MEMORY[0x1F40DA508]();
}

int CGFontGetUnitsPerEm(CGFontRef font)
{
  return MEMORY[0x1F40DA560](font);
}

int CGFontGetXHeight(CGFontRef font)
{
  return MEMORY[0x1F40DA580](font);
}

void CGFontRelease(CGFontRef font)
{
}

CGFontRef CGFontRetain(CGFontRef font)
{
  return (CGFontRef)MEMORY[0x1F40DA5D0](font);
}

CGGradientRef CGGradientCreateWithColorComponents(CGColorSpaceRef space, const CGFloat *components, const CGFloat *locations, size_t count)
{
  return (CGGradientRef)MEMORY[0x1F40DA768](space, components, locations, count);
}

CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space, CFArrayRef colors, const CGFloat *locations)
{
  return (CGGradientRef)MEMORY[0x1F40DA778](space, colors, locations);
}

uint64_t CGImageBlockGetBytesPerRow()
{
  return MEMORY[0x1F40DA7F0]();
}

uint64_t CGImageBlockGetData()
{
  return MEMORY[0x1F40DA7F8]();
}

uint64_t CGImageBlockSetGetCount()
{
  return MEMORY[0x1F40DA828]();
}

uint64_t CGImageBlockSetGetImageBlock()
{
  return MEMORY[0x1F40DA830]();
}

uint64_t CGImageBlockSetGetPixelSize()
{
  return MEMORY[0x1F40DA838]();
}

uint64_t CGImageBlockSetRelease()
{
  return MEMORY[0x1F40DA850]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA868](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1F40DA890](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA8B8](source, decode, shouldInterpolate, *(void *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9738](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9758](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D0](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D8](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1F40DA8E0](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1F40DA8E8](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1F40DA8F0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DA908](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA920](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

uint64_t CGImageGetImageProvider()
{
  return MEMORY[0x1F40DA958]();
}

uint64_t CGImageGetProperty()
{
  return MEMORY[0x1F40DA980]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

uint64_t CGImageProviderCopyImageBlockSetWithOptions()
{
  return MEMORY[0x1F40DAA08]();
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1F40DAA98](image);
}

uint64_t CGImageSetProperty()
{
  return MEMORY[0x1F40DAAB0]();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E9998](data, options);
}

CGImageSourceRef CGImageSourceCreateWithDataProvider(CGDataProviderRef provider, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E99A8](provider, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E99C8](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E99F8](isrc);
}

CGImageSourceStatus CGImageSourceGetStatus(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E9A08](isrc);
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB078](path, transform);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  MEMORY[0x1F40DB0D0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  MEMORY[0x1F40DB0D8](path);
  result.y = v2;
  result.x = v1;
  return result;
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x1F40DB2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

uint64_t CMPhotoDecompressionContainerCancelAsyncRequest()
{
  return MEMORY[0x1F410D710]();
}

uint64_t CMPhotoDecompressionContainerCopyCGColorSpaceForIndex()
{
  return MEMORY[0x1F410D758]();
}

uint64_t CMPhotoDecompressionContainerCreateImageForIndex()
{
  return MEMORY[0x1F410D7D0]();
}

uint64_t CMPhotoDecompressionContainerDecodeImageForIndexAsync()
{
  return MEMORY[0x1F410D828]();
}

uint64_t CMPhotoDecompressionContainerGetImageCount()
{
  return MEMORY[0x1F410D8A0]();
}

uint64_t CMPhotoDecompressionDetectContainerFormat()
{
  return MEMORY[0x1F410D938]();
}

uint64_t CMPhotoDecompressionDiscardCaches()
{
  return MEMORY[0x1F410D948]();
}

uint64_t CMPhotoDecompressionSessionCreate()
{
  return MEMORY[0x1F410D960]();
}

uint64_t CMPhotoDecompressionSessionCreateContainer()
{
  return MEMORY[0x1F410D968]();
}

uint64_t CMPhotoDecompressionSessionFlushCachedBuffers()
{
  return MEMORY[0x1F410D980]();
}

uint64_t CMPhotoDecompressionSessionReleaseHardwareResources()
{
  return MEMORY[0x1F410D990]();
}

uint64_t CMPhotoSurfacePoolCreate()
{
  return MEMORY[0x1F410DB88]();
}

CFCharacterSetRef CTFontCopyCharacterSet(CTFontRef font)
{
  return (CFCharacterSetRef)MEMORY[0x1F40DF280](font);
}

uint64_t CTFontCopyFeaturesInternal()
{
  return MEMORY[0x1F40DF2B0]();
}

CTFontDescriptorRef CTFontCopyFontDescriptor(CTFontRef font)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF2B8](font);
}

CGFontRef CTFontCopyGraphicsFont(CTFontRef font, CTFontDescriptorRef *attributes)
{
  return (CGFontRef)MEMORY[0x1F40DF2D0](font, attributes);
}

CFArrayRef CTFontCopyVariationAxes(CTFontRef font)
{
  return (CFArrayRef)MEMORY[0x1F40DF320](font);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x1F40DF338](font, matrix, attributes, size);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1F40DF378](descriptor, matrix, size);
}

CTFontRef CTFontCreateWithGraphicsFont(CGFontRef graphicsFont, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x1F40DF388](graphicsFont, matrix, attributes, size);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef original, CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF3C0](original, attributes);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithFeature(CTFontDescriptorRef original, CFNumberRef featureTypeIdentifier, CFNumberRef featureSelectorIdentifier)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF3C8](original, featureTypeIdentifier, featureSelectorIdentifier);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF408](attributes);
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF418](name, size);
}

void CTFontDrawGlyphs(CTFontRef font, const CGGlyph *glyphs, const CGPoint *positions, size_t count, CGContextRef context)
{
}

double CTFontGetAdvancesForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count)
{
  MEMORY[0x1F40DF4A0](font, *(void *)&orientation, glyphs, advances, count);
  return result;
}

CGRect CTFontGetOpticalBoundsForGlyphs(CTFontRef font, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count, CFOptionFlags options)
{
  MEMORY[0x1F40DF540](font, glyphs, boundingRects, count, options);
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

CGFloat CTFontGetSize(CTFontRef font)
{
  MEMORY[0x1F40DF558](font);
  return result;
}

CTFontSymbolicTraits CTFontGetSymbolicTraits(CTFontRef font)
{
  return MEMORY[0x1F40DF568](font);
}

uint64_t CTFontRemoveFromCaches()
{
  return MEMORY[0x1F40DF660]();
}

uint64_t CTFontTransformGlyphs()
{
  return MEMORY[0x1F40DF690]();
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
}

void CTFrameGetLineOrigins(CTFrameRef frame, CFRange range, CGPoint *origins)
{
}

CFArrayRef CTFrameGetLines(CTFrameRef frame)
{
  return (CFArrayRef)MEMORY[0x1F40DF6B8](frame);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1F40DF6E0](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1F40DF6E8](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  MEMORY[0x1F40DF700](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

CTLineRef CTLineCreateJustifiedLine(CTLineRef line, CGFloat justificationFactor, double justificationWidth)
{
  return (CTLineRef)MEMORY[0x1F40DF768](line, justificationFactor, justificationWidth);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1F40DF790](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  MEMORY[0x1F40DF7C8](line, options);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFIndex CTLineGetGlyphCount(CTLineRef line)
{
  return MEMORY[0x1F40DF7D8](line);
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x1F40DF7E0](line);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1F40DF7E8](line, context);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFIndex CTLineGetStringIndexForPosition(CTLineRef line, CGPoint position)
{
  return MEMORY[0x1F40DF800](line, (__n128)position, *(__n128 *)&position.y);
}

CFRange CTLineGetStringRange(CTLineRef line)
{
  CFIndex v1 = MEMORY[0x1F40DF810](line);
  result.length = v2;
  result.location = v1;
  return result;
}

double CTLineGetTypographicBounds(CTLineRef line, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  MEMORY[0x1F40DF820](line, ascent, descent, leading);
  return result;
}

CFDictionaryRef CTRunGetAttributes(CTRunRef run)
{
  return (CFDictionaryRef)MEMORY[0x1F40DF8B8](run);
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x1F40DF8D8](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
}

const CGGlyph *__cdecl CTRunGetGlyphsPtr(CTRunRef run)
{
  return (const CGGlyph *)MEMORY[0x1F40DF8F0](run);
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
}

const CGPoint *__cdecl CTRunGetPositionsPtr(CTRunRef run)
{
  return (const CGPoint *)MEMORY[0x1F40DF918](run);
}

CTRunStatus CTRunGetStatus(CTRunRef run)
{
  return MEMORY[0x1F40DF928](run);
}

void CTRunGetStringIndices(CTRunRef run, CFRange range, CFIndex *buffer)
{
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD68](pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1F40DFD78](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD88](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD98](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DFE40](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

uint64_t GEOBearingFromCoordinateToCoordinate()
{
  return MEMORY[0x1F411C038]();
}

uint64_t GEOCalculateDistance()
{
  return MEMORY[0x1F411C040]();
}

uint64_t GEOCalculateDistanceHighPrecision()
{
  return MEMORY[0x1F411C048]();
}

uint64_t GEOConfigGetArray()
{
  return MEMORY[0x1F411C070]();
}

uint64_t GEOConfigGetBOOL()
{
  return MEMORY[0x1F411C078]();
}

uint64_t GEOConfigGetDictionary()
{
  return MEMORY[0x1F411C088]();
}

uint64_t GEOConfigGetDouble()
{
  return MEMORY[0x1F411C090]();
}

uint64_t GEOConfigGetInteger()
{
  return MEMORY[0x1F411C098]();
}

uint64_t GEOConfigGetString()
{
  return MEMORY[0x1F411C0A8]();
}

uint64_t GEOConfigGetUInteger()
{
  return MEMORY[0x1F411C0B0]();
}

uint64_t GEOConfigGetUint64()
{
  return MEMORY[0x1F411C0B8]();
}

uint64_t GEOConfigRemoveBlockListener()
{
  return MEMORY[0x1F411C0C0]();
}

uint64_t GEOContourLinesTileKeyMake()
{
  return MEMORY[0x1F411C0F8]();
}

uint64_t GEOCoordinate2DForMapPoint()
{
  return MEMORY[0x1F411C100]();
}

uint64_t GEOCoordinate3DForMapPoint()
{
  return MEMORY[0x1F411C108]();
}

uint64_t GEOErrorDomain()
{
  return MEMORY[0x1F411C140]();
}

uint64_t GEOLiveTileKeyMake()
{
  return MEMORY[0x1F411C1B0]();
}

uint64_t GEOLocationCoordinate3DLerp()
{
  return MEMORY[0x1F411C1B8]();
}

uint64_t GEOMapPoint3DForCoordinate()
{
  return MEMORY[0x1F411C1E0]();
}

uint64_t GEOMapPointForCoordinate()
{
  return MEMORY[0x1F411C1E8]();
}

uint64_t GEOMapPointsPerMeterAtLatitude()
{
  return MEMORY[0x1F411C1F0]();
}

uint64_t GEOMapRectForGEOTileKey()
{
  return MEMORY[0x1F411C210]();
}

uint64_t GEOMapRectForMapRegion()
{
  return MEMORY[0x1F411C218]();
}

uint64_t GEOMapRectInset()
{
  return MEMORY[0x1F411C220]();
}

uint64_t GEOMapRectIntersectsRect()
{
  return MEMORY[0x1F411C228]();
}

uint64_t GEOMapRectIsNull()
{
  return MEMORY[0x1F411C238]();
}

uint64_t GEOMapRectMakeWithRadialDistance()
{
  return MEMORY[0x1F411C240]();
}

uint64_t GEOMetersPerDegreeAtLatitude()
{
  return MEMORY[0x1F411C260]();
}

uint64_t GEOMuninFrustumFromLensModel()
{
  return MEMORY[0x1F411C270]();
}

uint64_t GEOMuninMeshTileKeyMake()
{
  return MEMORY[0x1F411C278]();
}

uint64_t GEOMuninMetadataTileCreate()
{
  return MEMORY[0x1F411C280]();
}

uint64_t GEOMuninMetadataTileDestroy()
{
  return MEMORY[0x1F411C288]();
}

uint64_t GEOPolylineCoordinateAsFullString()
{
  return MEMORY[0x1F411C2D8]();
}

uint64_t GEOPolylineCoordinateAsShortString()
{
  return MEMORY[0x1F411C2E0]();
}

uint64_t GEOPolylineCoordinateCompare()
{
  return MEMORY[0x1F411C2F0]();
}

uint64_t GEOPolylineCoordinateEqualEps()
{
  return MEMORY[0x1F411C300]();
}

uint64_t GEOPolylineCoordinateIsInvalid()
{
  return MEMORY[0x1F411C320]();
}

uint64_t GEOPolylineCoordinateIsValid()
{
  return MEMORY[0x1F411C328]();
}

uint64_t GEOPolylineCoordinateWithinRange()
{
  return MEMORY[0x1F411C368]();
}

uint64_t GEOResetGeoCodecsAllocator()
{
  return MEMORY[0x1F411C378]();
}

uint64_t GEOResourceDevResourcesPath()
{
  return MEMORY[0x1F411C380]();
}

uint64_t GEOResourceFilterScaleForScale()
{
  return MEMORY[0x1F411C388]();
}

uint64_t GEOS2TileKeyMake()
{
  return MEMORY[0x1F411C3A8]();
}

uint64_t GEOStringFromTileKey()
{
  return MEMORY[0x1F411C3E0]();
}

uint64_t GEOTileKeyAssertIsStandard()
{
  return MEMORY[0x1F411C3F0]();
}

uint64_t GEOTileKeyEquals()
{
  return MEMORY[0x1F411C3F8]();
}

uint64_t GEOTileKeyHash()
{
  return MEMORY[0x1F411C400]();
}

uint64_t GEOTileKeyMake()
{
  return MEMORY[0x1F411C408]();
}

uint64_t GEOTileKeyMakeEmpty()
{
  return MEMORY[0x1F411C410]();
}

uint64_t GEOTileLoaderClientIdentifier()
{
  return MEMORY[0x1F411C418]();
}

uint64_t GEOTransitLineSelectionAdditionalInfoMake()
{
  return MEMORY[0x1F411C430]();
}

uint64_t GeoCodecsFeatureStyleAttributesCompare()
{
  return MEMORY[0x1F411C448]();
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x1F4124C48]();
}

uint64_t IOSurfaceAcceleratorGetRunLoopSource()
{
  return MEMORY[0x1F4124C58]();
}

uint64_t IOSurfaceAcceleratorSetCustomFilter()
{
  return MEMORY[0x1F4124C68]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x1F4124C78]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1F40E9308](properties);
}

void IOSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9350](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1F40E9358](buffer);
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9398](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E93A8](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9440](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9480](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94F8](buffer);
}

void IOSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9540](buffer, *(void *)&options, seed);
}

uint64_t IOSurfaceSetOwnership()
{
  return MEMORY[0x1F40E95C8]();
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9630](buffer, *(void *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1F40EDE00]();
}

uint64_t MapsFeature_AddBlockListener()
{
  return MEMORY[0x1F411C460]();
}

uint64_t MapsFeature_IsAvailable_ElevatedPolygons()
{
  return MEMORY[0x1F411C468]();
}

uint64_t MapsFeature_IsAvailable_ShelbyvilleGlobe()
{
  return MEMORY[0x1F411C480]();
}

uint64_t MapsFeature_IsAvailable_ShelbyvilleTerrain()
{
  return MEMORY[0x1F411C488]();
}

uint64_t MapsFeature_IsEnabled_ElevatedPolygons()
{
  return MEMORY[0x1F411C4A0]();
}

uint64_t MapsFeature_IsEnabled_HikingiOS()
{
  return MEMORY[0x1F411C4A8]();
}

uint64_t MapsFeature_IsEnabled_Maps298()
{
  return MEMORY[0x1F411C4C8]();
}

uint64_t MapsFeature_IsEnabled_RealTimeEVCharger()
{
  return MEMORY[0x1F411C4F8]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleGlobe()
{
  return MEMORY[0x1F411C528]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleTerrain()
{
  return MEMORY[0x1F411C540]();
}

uint64_t MapsFeature_IsEnabled_VKMLayout_Flyover()
{
  return MEMORY[0x1F411C558]();
}

uint64_t MapsFeature_IsEnabled_VKMLayout_Navigation()
{
  return MEMORY[0x1F411C560]();
}

uint64_t MapsFeature_IsEnabled_VKMLayout_SPR()
{
  return MEMORY[0x1F411C568]();
}

uint64_t MapsFeature_RemoveBlockListener()
{
  return MEMORY[0x1F411C570]();
}

void NSLog(NSString *format, ...)
{
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

uint64_t _AXSReduceMotionEnabled()
{
  return MEMORY[0x1F4178E60]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCMessage()
{
  return MEMORY[0x1F40D9428]();
}

uint64_t _CFXPCCreateXPCMessageWithCFObject()
{
  return MEMORY[0x1F40D9440]();
}

uint64_t _GEOConfigAddBlockListenerForKey()
{
  return MEMORY[0x1F411C580]();
}

uint64_t _GEOMurmurHash3_128()
{
  return MEMORY[0x1F411C5A8]();
}

uint64_t _GEOStateCaptureLog()
{
  return MEMORY[0x1F411C5B8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t zilch::ReadBitstream::ReadBitstream(zilch::ReadBitstream *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F411C5C0](this, a2);
}

uint64_t zilch::TrafficDynamicTile::Flow::Flow(zilch::TrafficDynamicTile::Flow *this)
{
  return MEMORY[0x1F411C5C8](this);
}

uint64_t zilch::TrafficDynamicTile::decode(zilch::TrafficDynamicTile *this, zilch::ReadBitstream *a2)
{
  return MEMORY[0x1F411C5D0](this, a2);
}

uint64_t zilch::TrafficDynamicTile::TrafficDynamicTile(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1F411C5D8](this);
}

void zilch::TrafficDynamicTile::~TrafficDynamicTile(zilch::TrafficDynamicTile *this)
{
}

uint64_t zilch::TrafficSkeletonTile::decode(zilch::TrafficSkeletonTile *this, zilch::ReadBitstream *a2)
{
  return MEMORY[0x1F411C5E8](this, a2);
}

uint64_t zilch::TrafficSkeletonTile::TrafficSkeletonTile(zilch::TrafficSkeletonTile *this)
{
  return MEMORY[0x1F411C5F0](this);
}

uint64_t geo::MapNode::tile(geo::MapNode *this)
{
  return MEMORY[0x1F411C5F8](this);
}

uint64_t geo::MapNode::junction(geo::MapNode *this)
{
  return MEMORY[0x1F411C600](this);
}

uint64_t zilch::GeoCoordinates::has_elevation(zilch::GeoCoordinates *this)
{
  return MEMORY[0x1F411C608](this);
}

uint64_t zilch::GeoCoordinates::x(zilch::GeoCoordinates *this)
{
  return MEMORY[0x1F411C610](this);
}

uint64_t zilch::GeoCoordinates::y(zilch::GeoCoordinates *this)
{
  return MEMORY[0x1F411C618](this);
}

zilch *zilch::GeoCoordinates::z(zilch::GeoCoordinates *this)
{
  return (zilch *)MEMORY[0x1F411C620](this);
}

uint64_t zilch::TrafficDynamicTile::incidentCount(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1F411C628](this);
}

uint64_t zilch::TrafficDynamicTile::feedUpdateTimeSeconds(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1F411C630](this);
}

uint64_t zilch::TrafficDynamicTile::flow(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1F411C638](this);
}

uint64_t zilch::TrafficDynamicTile::incident(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1F411C640](this);
}

uint64_t zilch::TrafficDynamicTile::flowCount(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1F411C648](this);
}

uint64_t zilch::TrafficSkeletonTile::size(zilch::TrafficSkeletonTile *this)
{
  return MEMORY[0x1F411C650](this);
}

uint64_t zilch::TrafficSkeletonTile::operator[]()
{
  return MEMORY[0x1F411C658]();
}

uint64_t zilch::Latitude::toDegrees(zilch::Latitude *this)
{
  return MEMORY[0x1F411C660](this);
}

uint64_t zilch::Longitude::toDegrees(zilch::Longitude *this)
{
  return MEMORY[0x1F411C668](this);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1F417E350](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E388](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1F417E580](a1);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1F417E758]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1F417E760]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1F417E778]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1F417E788]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7D0]();
}

{
  return MEMORY[0x1F417E7D8]();
}

{
  return MEMORY[0x1F417E7E8]();
}

{
  return MEMORY[0x1F417E810]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8A8]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8B8]();
}

{
  return MEMORY[0x1F417E8C0]();
}

{
  return MEMORY[0x1F417E8C8]();
}

{
  return MEMORY[0x1F417E8D0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1F417E908](this, __token);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1F417E918](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

BOOL std::recursive_mutex::try_lock(std::recursive_mutex *this)
{
  return MEMORY[0x1F417E9C8](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x1F417E9D0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x1F417EA80](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

float std::stof(const std::string *__str, size_t *__idx)
{
  MEMORY[0x1F417EBD8](__str, __idx);
  return result;
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x1F417EC08](this);
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>()
{
  return MEMORY[0x1F417EC48]();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1F417EC58]();
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x1F417EC68]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

void std::future<void>::~future(std::future<void> *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1F417ECF8](this, a2);
}

void std::codecvt<char16_t,char,__mbstate_t>::~codecvt(std::codecvt<char16_t, char, mbstate_t> *this)
{
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  return (std::future<void>)MEMORY[0x1F417ED50](this);
}

void std::promise<void>::set_value(std::promise<void> *this)
{
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  return (std::promise<void> *)MEMORY[0x1F417ED60](this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, double a4)
{
  return MEMORY[0x1F417EDF0](this, a2, a3, a4);
}

{
  return MEMORY[0x1F417EE08](this, a2, a3, a4);
}

uint64_t std::to_chars()
{
  return MEMORY[0x1F417EDF8]();
}

{
  return MEMORY[0x1F417EE00]();
}

{
  return MEMORY[0x1F417EE10]();
}

{
  return MEMORY[0x1F417EE18]();
}

{
  return MEMORY[0x1F417EE28]();
}

{
  return MEMORY[0x1F417EE30]();
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, float a4)
{
  return MEMORY[0x1F417EE20](this, a2, a3, a4);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1F417EE58](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x1F417EE68](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE90](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __powidf2()
{
  return MEMORY[0x1F40C9C58]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

uint64_t __udivti3()
{
  return MEMORY[0x1F40C9D08]();
}

uint64_t __umodti3()
{
  return MEMORY[0x1F40C9D20]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

uint64_t abort_with_reason()
{
  return MEMORY[0x1F40CA1F8]();
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

float acosf(float a1)
{
  MEMORY[0x1F40CA340](a1);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

float asinf(float a1)
{
  MEMORY[0x1F40CA3D8](a1);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x1F40CA470](a1);
  return result;
}

double atof(const char *a1)
{
  MEMORY[0x1F40CA498](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

long double cbrt(long double __x)
{
  MEMORY[0x1F40CA688](__x);
  return result;
}

float cbrtf(float a1)
{
  MEMORY[0x1F40CA690](a1);
  return result;
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0A0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

long double cosh(long double __x)
{
  MEMORY[0x1F40CB8B8](__x);
  return result;
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182BD0](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182BE0](strm);
}

int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)
{
  return MEMORY[0x1F4182BF0](strm, *(void *)&level, version, *(void *)&stream_size);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  return MEMORY[0x1F40CB9F0](block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CB9F8](block, timeout);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD58](label);
}

uint64_t dispatch_workloop_set_qos_class_floor()
{
  return MEMORY[0x1F40CBD80]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float exp2f(float a1)
{
  MEMORY[0x1F40CBFF0](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

uint64_t featureStyleAttributesHash()
{
  return MEMORY[0x1F411C688]();
}

int feclearexcept(int a1)
{
  return MEMORY[0x1F40CC080](*(void *)&a1);
}

int fetestexcept(int a1)
{
  return MEMORY[0x1F40CC0B8](*(void *)&a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  MEMORY[0x1F40CC640](a1, a2);
  return result;
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182CB0](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CC8](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

int inflateInit_(z_streamp strm, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CD8](strm, version, *(void *)&stream_size);
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x1F40CC800](*(void *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  MEMORY[0x1F40CC808](*(void *)&a2, a1);
  return result;
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x1F40CC858]();
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x1F40CC8B0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

uint64_t lzma_auto_decoder()
{
  return MEMORY[0x1F41809A0]();
}

uint64_t lzma_code()
{
  return MEMORY[0x1F41809A8]();
}

uint64_t lzma_end()
{
  return MEMORY[0x1F41809B0]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB20](start_size, *(void *)&flags);
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
}

uint64_t malloc_get_all_zones()
{
  return MEMORY[0x1F40CCB48]();
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1F40CCB50](zone);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB8](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBC0](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBD8](zone, ptr, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

float modff(float a1, float *a2)
{
  MEMORY[0x1F40CCE50](a2, a1);
  return result;
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1F40CD570]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1F40CD578]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1F40CD658]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD918](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1F40CD9A0](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

void pthread_exit(void *a1)
{
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA90](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA0](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1F40CDAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAF8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

uint64_t pthread_set_fixedpriority_self()
{
  return MEMORY[0x1F40CDB40]();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1F40CDB48](*(void *)&__qos_class, *(void *)&__relative_priority);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x1F40CDD00](__x, __y);
  return result;
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

long double sinh(long double __x)
{
  MEMORY[0x1F40CE068](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x1F40CE270](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

float tanf(float a1)
{
  MEMORY[0x1F40CE428](a1);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x1F4182CF8](dest, destLen, source, sourceLen);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

vImage_Error vImageBuffer_InitWithCGImage(vImage_Buffer *buf, vImage_CGImageFormat *format, const CGFloat *backgroundColor, CGImageRef image, vImage_Flags flags)
{
  return MEMORY[0x1F40D3028](buf, format, backgroundColor, image, *(void *)&flags);
}

vImage_Error vImageConvolve_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const int16_t *kernel, uint32_t kernel_height, uint32_t kernel_width, int32_t divisor, Pixel_8 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D3038](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, *(void *)&kernel_height, *(void *)&kernel_width);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1F40CE8B0](__s, *(void *)&__c, __n);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1F4182678](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x1F4182700](node, name);
}

xmlDocPtr xmlParseMemory(const char *buffer, int size)
{
  return (xmlDocPtr)MEMORY[0x1F4182808](buffer, *(void *)&size);
}

int xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len)
{
  return MEMORY[0x1F4182950](str1, str2, *(void *)&len);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}